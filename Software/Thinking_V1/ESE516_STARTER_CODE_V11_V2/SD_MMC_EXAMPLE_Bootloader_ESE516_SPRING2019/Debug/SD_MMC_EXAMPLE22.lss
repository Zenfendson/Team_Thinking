
SD_MMC_EXAMPLE22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005b20  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00005b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000057c  20000068  00005b88  00020068  2**2
                  ALLOC
  3 .stack        00002004  200005e4  00006104  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00040bf6  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005c9b  00000000  00000000  00060cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000f0dc  00000000  00000000  0006697a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a60  00000000  00000000  00075a56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ed8  00000000  00000000  000764b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001edb5  00000000  00000000  0007738e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000137db  00000000  00000000  00096143  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00092ade  00000000  00000000  000a991e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001cfc  00000000  00000000  0013c3fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 25 00 20 95 30 00 00 91 30 00 00 91 30 00 00     .%. .0...0...0..
	...
      2c:	91 30 00 00 00 00 00 00 00 00 00 00 91 30 00 00     .0...........0..
      3c:	91 30 00 00 91 30 00 00 91 30 00 00 91 30 00 00     .0...0...0...0..
      4c:	91 30 00 00 91 30 00 00 91 30 00 00 91 30 00 00     .0...0...0...0..
      5c:	91 30 00 00 91 30 00 00 d1 1b 00 00 e1 1b 00 00     .0...0..........
      6c:	f1 1b 00 00 01 1c 00 00 11 1c 00 00 21 1c 00 00     ............!...
      7c:	91 30 00 00 91 30 00 00 91 30 00 00 91 30 00 00     .0...0...0...0..
      8c:	91 30 00 00 91 30 00 00 00 00 00 00 00 00 00 00     .0...0..........
      9c:	91 30 00 00 91 30 00 00 91 30 00 00 91 30 00 00     .0...0...0...0..
      ac:	91 30 00 00 00 00 00 00                             .0......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00005b20 	.word	0x00005b20

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00005b20 	.word	0x00005b20
     10c:	00005b20 	.word	0x00005b20
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     118:	ac01      	add	r4, sp, #4
     11a:	2501      	movs	r5, #1
     11c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     11e:	2700      	movs	r7, #0
     120:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     122:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     124:	0021      	movs	r1, r4
     126:	2017      	movs	r0, #23
     128:	4e06      	ldr	r6, [pc, #24]	; (144 <system_board_init+0x30>)
     12a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     12c:	2280      	movs	r2, #128	; 0x80
     12e:	0412      	lsls	r2, r2, #16
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <system_board_init+0x34>)
     132:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     134:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     136:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     138:	0021      	movs	r1, r4
     13a:	2037      	movs	r0, #55	; 0x37
     13c:	47b0      	blx	r6
}
     13e:	b003      	add	sp, #12
     140:	bdf0      	pop	{r4, r5, r6, r7, pc}
     142:	46c0      	nop			; (mov r8, r8)
     144:	000015f1 	.word	0x000015f1
     148:	41004400 	.word	0x41004400

0000014c <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     14c:	b510      	push	{r4, lr}
     14e:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     150:	7c03      	ldrb	r3, [r0, #16]
     152:	2b00      	cmp	r3, #0
     154:	d005      	beq.n	162 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     156:	6883      	ldr	r3, [r0, #8]
     158:	1c58      	adds	r0, r3, #1
     15a:	68e1      	ldr	r1, [r4, #12]
     15c:	4b07      	ldr	r3, [pc, #28]	; (17c <advance_pointer+0x30>)
     15e:	4798      	blx	r3
     160:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     162:	6863      	ldr	r3, [r4, #4]
     164:	1c58      	adds	r0, r3, #1
     166:	68e1      	ldr	r1, [r4, #12]
     168:	4b04      	ldr	r3, [pc, #16]	; (17c <advance_pointer+0x30>)
     16a:	4798      	blx	r3
     16c:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     16e:	68a3      	ldr	r3, [r4, #8]
     170:	1a59      	subs	r1, r3, r1
     172:	424a      	negs	r2, r1
     174:	414a      	adcs	r2, r1
     176:	7422      	strb	r2, [r4, #16]
 }
     178:	bd10      	pop	{r4, pc}
     17a:	46c0      	nop			; (mov r8, r8)
     17c:	00004f89 	.word	0x00004f89

00000180 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     180:	b570      	push	{r4, r5, r6, lr}
     182:	0005      	movs	r5, r0
     184:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     186:	2014      	movs	r0, #20
     188:	4b04      	ldr	r3, [pc, #16]	; (19c <circular_buf_init+0x1c>)
     18a:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     18c:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     18e:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     190:	2300      	movs	r3, #0
     192:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     194:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     196:	7403      	strb	r3, [r0, #16]
 }
     198:	bd70      	pop	{r4, r5, r6, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	00005205 	.word	0x00005205

000001a0 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     1a0:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     1a2:	6803      	ldr	r3, [r0, #0]
     1a4:	6842      	ldr	r2, [r0, #4]
     1a6:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     1a8:	4b01      	ldr	r3, [pc, #4]	; (1b0 <circular_buf_put+0x10>)
     1aa:	4798      	blx	r3
 }
     1ac:	bd10      	pop	{r4, pc}
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	0000014d 	.word	0x0000014d

000001b4 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     1b4:	7c02      	ldrb	r2, [r0, #16]
     1b6:	2300      	movs	r3, #0
     1b8:	2a00      	cmp	r2, #0
     1ba:	d105      	bne.n	1c8 <circular_buf_empty+0x14>
     1bc:	6843      	ldr	r3, [r0, #4]
     1be:	6880      	ldr	r0, [r0, #8]
     1c0:	1a1b      	subs	r3, r3, r0
     1c2:	4258      	negs	r0, r3
     1c4:	4143      	adcs	r3, r0
     1c6:	b2db      	uxtb	r3, r3
     1c8:	0018      	movs	r0, r3
 }
     1ca:	4770      	bx	lr

000001cc <circular_buf_get>:
 {
     1cc:	b570      	push	{r4, r5, r6, lr}
     1ce:	0004      	movs	r4, r0
     1d0:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     1d2:	4b0a      	ldr	r3, [pc, #40]	; (1fc <circular_buf_get+0x30>)
     1d4:	4798      	blx	r3
     1d6:	2800      	cmp	r0, #0
     1d8:	d10d      	bne.n	1f6 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     1da:	6823      	ldr	r3, [r4, #0]
     1dc:	68a2      	ldr	r2, [r4, #8]
     1de:	5c9b      	ldrb	r3, [r3, r2]
     1e0:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     1e2:	2300      	movs	r3, #0
     1e4:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1e6:	68a3      	ldr	r3, [r4, #8]
     1e8:	1c58      	adds	r0, r3, #1
     1ea:	68e1      	ldr	r1, [r4, #12]
     1ec:	4b04      	ldr	r3, [pc, #16]	; (200 <circular_buf_get+0x34>)
     1ee:	4798      	blx	r3
     1f0:	60a1      	str	r1, [r4, #8]
		 r = 0;
     1f2:	2000      	movs	r0, #0
 }
     1f4:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     1f6:	2001      	movs	r0, #1
     1f8:	4240      	negs	r0, r0
	 return r;
     1fa:	e7fb      	b.n	1f4 <circular_buf_get+0x28>
     1fc:	000001b5 	.word	0x000001b5
     200:	00004f89 	.word	0x00004f89

00000204 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     204:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     206:	4b06      	ldr	r3, [pc, #24]	; (220 <usart_write_callback+0x1c>)
     208:	6818      	ldr	r0, [r3, #0]
     20a:	4906      	ldr	r1, [pc, #24]	; (224 <usart_write_callback+0x20>)
     20c:	4b06      	ldr	r3, [pc, #24]	; (228 <usart_write_callback+0x24>)
     20e:	4798      	blx	r3
     210:	1c43      	adds	r3, r0, #1
     212:	d004      	beq.n	21e <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     214:	2201      	movs	r2, #1
     216:	4903      	ldr	r1, [pc, #12]	; (224 <usart_write_callback+0x20>)
     218:	4804      	ldr	r0, [pc, #16]	; (22c <usart_write_callback+0x28>)
     21a:	4b05      	ldr	r3, [pc, #20]	; (230 <usart_write_callback+0x2c>)
     21c:	4798      	blx	r3
	}
	
}
     21e:	bd10      	pop	{r4, pc}
     220:	200005b4 	.word	0x200005b4
     224:	200005b0 	.word	0x200005b0
     228:	000001cd 	.word	0x000001cd
     22c:	20000174 	.word	0x20000174
     230:	0000270d 	.word	0x0000270d

00000234 <InitializeSerialConsole>:
{
     234:	b530      	push	{r4, r5, lr}
     236:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     238:	2580      	movs	r5, #128	; 0x80
     23a:	00ad      	lsls	r5, r5, #2
     23c:	0029      	movs	r1, r5
     23e:	4836      	ldr	r0, [pc, #216]	; (318 <InitializeSerialConsole+0xe4>)
     240:	4c36      	ldr	r4, [pc, #216]	; (31c <InitializeSerialConsole+0xe8>)
     242:	47a0      	blx	r4
     244:	4b36      	ldr	r3, [pc, #216]	; (320 <InitializeSerialConsole+0xec>)
     246:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     248:	0029      	movs	r1, r5
     24a:	4836      	ldr	r0, [pc, #216]	; (324 <InitializeSerialConsole+0xf0>)
     24c:	47a0      	blx	r4
     24e:	4b36      	ldr	r3, [pc, #216]	; (328 <InitializeSerialConsole+0xf4>)
     250:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     252:	2380      	movs	r3, #128	; 0x80
     254:	05db      	lsls	r3, r3, #23
     256:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     258:	2300      	movs	r3, #0
     25a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     25c:	22ff      	movs	r2, #255	; 0xff
     25e:	4669      	mov	r1, sp
     260:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     262:	2200      	movs	r2, #0
     264:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     266:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     268:	2101      	movs	r1, #1
     26a:	2024      	movs	r0, #36	; 0x24
     26c:	466c      	mov	r4, sp
     26e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     270:	3001      	adds	r0, #1
     272:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     274:	3125      	adds	r1, #37	; 0x25
     276:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     278:	3101      	adds	r1, #1
     27a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     27c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     27e:	3105      	adds	r1, #5
     280:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     282:	3101      	adds	r1, #1
     284:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     286:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     288:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     28a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     28c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     28e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     290:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     292:	2313      	movs	r3, #19
     294:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     296:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
     298:	23e1      	movs	r3, #225	; 0xe1
     29a:	025b      	lsls	r3, r3, #9
     29c:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     29e:	23c4      	movs	r3, #196	; 0xc4
     2a0:	039b      	lsls	r3, r3, #14
     2a2:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     2a4:	2301      	movs	r3, #1
     2a6:	425b      	negs	r3, r3
     2a8:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     2aa:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     2ac:	4b1f      	ldr	r3, [pc, #124]	; (32c <InitializeSerialConsole+0xf8>)
     2ae:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     2b0:	4b1f      	ldr	r3, [pc, #124]	; (330 <InitializeSerialConsole+0xfc>)
     2b2:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
     2b4:	4d1f      	ldr	r5, [pc, #124]	; (334 <InitializeSerialConsole+0x100>)
     2b6:	4c20      	ldr	r4, [pc, #128]	; (338 <InitializeSerialConsole+0x104>)
     2b8:	466a      	mov	r2, sp
     2ba:	4920      	ldr	r1, [pc, #128]	; (33c <InitializeSerialConsole+0x108>)
     2bc:	0028      	movs	r0, r5
     2be:	47a0      	blx	r4
     2c0:	2800      	cmp	r0, #0
     2c2:	d1f9      	bne.n	2b8 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     2c4:	4d1b      	ldr	r5, [pc, #108]	; (334 <InitializeSerialConsole+0x100>)
     2c6:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2c8:	0020      	movs	r0, r4
     2ca:	4b1d      	ldr	r3, [pc, #116]	; (340 <InitializeSerialConsole+0x10c>)
     2cc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2ce:	231f      	movs	r3, #31
     2d0:	4018      	ands	r0, r3
     2d2:	3b1e      	subs	r3, #30
     2d4:	4083      	lsls	r3, r0
     2d6:	4a1b      	ldr	r2, [pc, #108]	; (344 <InitializeSerialConsole+0x110>)
     2d8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     2da:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     2dc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     2de:	2b00      	cmp	r3, #0
     2e0:	d1fc      	bne.n	2dc <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     2e2:	6823      	ldr	r3, [r4, #0]
     2e4:	2202      	movs	r2, #2
     2e6:	4313      	orrs	r3, r2
     2e8:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
     2ea:	4c12      	ldr	r4, [pc, #72]	; (334 <InitializeSerialConsole+0x100>)
     2ec:	2200      	movs	r2, #0
     2ee:	4916      	ldr	r1, [pc, #88]	; (348 <InitializeSerialConsole+0x114>)
     2f0:	0020      	movs	r0, r4
     2f2:	4d16      	ldr	r5, [pc, #88]	; (34c <InitializeSerialConsole+0x118>)
     2f4:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
     2f6:	2201      	movs	r2, #1
     2f8:	4915      	ldr	r1, [pc, #84]	; (350 <InitializeSerialConsole+0x11c>)
     2fa:	0020      	movs	r0, r4
     2fc:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     2fe:	2231      	movs	r2, #49	; 0x31
     300:	5ca3      	ldrb	r3, [r4, r2]
     302:	2103      	movs	r1, #3
     304:	430b      	orrs	r3, r1
     306:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     308:	3a30      	subs	r2, #48	; 0x30
     30a:	4912      	ldr	r1, [pc, #72]	; (354 <InitializeSerialConsole+0x120>)
     30c:	0020      	movs	r0, r4
     30e:	4b12      	ldr	r3, [pc, #72]	; (358 <InitializeSerialConsole+0x124>)
     310:	4798      	blx	r3
}
     312:	b011      	add	sp, #68	; 0x44
     314:	bd30      	pop	{r4, r5, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	200003b0 	.word	0x200003b0
     31c:	00000181 	.word	0x00000181
     320:	200001a8 	.word	0x200001a8
     324:	200001b0 	.word	0x200001b0
     328:	200005b4 	.word	0x200005b4
     32c:	002a0003 	.word	0x002a0003
     330:	002b0003 	.word	0x002b0003
     334:	20000174 	.word	0x20000174
     338:	00002325 	.word	0x00002325
     33c:	42001800 	.word	0x42001800
     340:	00001ba1 	.word	0x00001ba1
     344:	e000e100 	.word	0xe000e100
     348:	00000205 	.word	0x00000205
     34c:	000026f5 	.word	0x000026f5
     350:	000003d1 	.word	0x000003d1
     354:	200001ac 	.word	0x200001ac
     358:	0000272d 	.word	0x0000272d

0000035c <SerialConsoleWriteString>:
{
     35c:	b5f0      	push	{r4, r5, r6, r7, lr}
     35e:	46c6      	mov	lr, r8
     360:	b500      	push	{lr}
     362:	0005      	movs	r5, r0
     364:	2400      	movs	r4, #0
	if(string != NULL)
     366:	2800      	cmp	r0, #0
     368:	d012      	beq.n	390 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
     36a:	4e11      	ldr	r6, [pc, #68]	; (3b0 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
     36c:	4f11      	ldr	r7, [pc, #68]	; (3b4 <SerialConsoleWriteString+0x58>)
     36e:	4b12      	ldr	r3, [pc, #72]	; (3b8 <SerialConsoleWriteString+0x5c>)
     370:	4698      	mov	r8, r3
     372:	e003      	b.n	37c <SerialConsoleWriteString+0x20>
     374:	5d29      	ldrb	r1, [r5, r4]
     376:	6838      	ldr	r0, [r7, #0]
     378:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
     37a:	3401      	adds	r4, #1
     37c:	0028      	movs	r0, r5
     37e:	47b0      	blx	r6
     380:	4284      	cmp	r4, r0
     382:	d3f7      	bcc.n	374 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     384:	2101      	movs	r1, #1
     386:	480d      	ldr	r0, [pc, #52]	; (3bc <SerialConsoleWriteString+0x60>)
     388:	4b0d      	ldr	r3, [pc, #52]	; (3c0 <SerialConsoleWriteString+0x64>)
     38a:	4798      	blx	r3
     38c:	2800      	cmp	r0, #0
     38e:	d002      	beq.n	396 <SerialConsoleWriteString+0x3a>
}
     390:	bc04      	pop	{r2}
     392:	4690      	mov	r8, r2
     394:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     396:	4c0b      	ldr	r4, [pc, #44]	; (3c4 <SerialConsoleWriteString+0x68>)
     398:	4b06      	ldr	r3, [pc, #24]	; (3b4 <SerialConsoleWriteString+0x58>)
     39a:	6818      	ldr	r0, [r3, #0]
     39c:	0021      	movs	r1, r4
     39e:	4b0a      	ldr	r3, [pc, #40]	; (3c8 <SerialConsoleWriteString+0x6c>)
     3a0:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     3a2:	2201      	movs	r2, #1
     3a4:	0021      	movs	r1, r4
     3a6:	4805      	ldr	r0, [pc, #20]	; (3bc <SerialConsoleWriteString+0x60>)
     3a8:	4b08      	ldr	r3, [pc, #32]	; (3cc <SerialConsoleWriteString+0x70>)
     3aa:	4798      	blx	r3
}
     3ac:	e7f0      	b.n	390 <SerialConsoleWriteString+0x34>
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	00005309 	.word	0x00005309
     3b4:	200005b4 	.word	0x200005b4
     3b8:	000001a1 	.word	0x000001a1
     3bc:	20000174 	.word	0x20000174
     3c0:	0000274d 	.word	0x0000274d
     3c4:	200005b0 	.word	0x200005b0
     3c8:	000001cd 	.word	0x000001cd
     3cc:	0000270d 	.word	0x0000270d

000003d0 <usart_read_callback>:
{
     3d0:	b510      	push	{r4, lr}
     3d2:	b082      	sub	sp, #8
	SerialConsoleWriteString(&latestRx);
     3d4:	4c0d      	ldr	r4, [pc, #52]	; (40c <usart_read_callback+0x3c>)
     3d6:	0020      	movs	r0, r4
     3d8:	4b0d      	ldr	r3, [pc, #52]	; (410 <usart_read_callback+0x40>)
     3da:	4798      	blx	r3
	if(latestRx == 0x08)
     3dc:	7823      	ldrb	r3, [r4, #0]
     3de:	2b08      	cmp	r3, #8
     3e0:	d00c      	beq.n	3fc <usart_read_callback+0x2c>
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     3e2:	4c0a      	ldr	r4, [pc, #40]	; (40c <usart_read_callback+0x3c>)
     3e4:	7821      	ldrb	r1, [r4, #0]
     3e6:	4b0b      	ldr	r3, [pc, #44]	; (414 <usart_read_callback+0x44>)
     3e8:	6818      	ldr	r0, [r3, #0]
     3ea:	4b0b      	ldr	r3, [pc, #44]	; (418 <usart_read_callback+0x48>)
     3ec:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     3ee:	2201      	movs	r2, #1
     3f0:	0021      	movs	r1, r4
     3f2:	480a      	ldr	r0, [pc, #40]	; (41c <usart_read_callback+0x4c>)
     3f4:	4b0a      	ldr	r3, [pc, #40]	; (420 <usart_read_callback+0x50>)
     3f6:	4798      	blx	r3
}
     3f8:	b002      	add	sp, #8
     3fa:	bd10      	pop	{r4, pc}
	a[0] = 0x20;
     3fc:	a801      	add	r0, sp, #4
     3fe:	3318      	adds	r3, #24
     400:	7003      	strb	r3, [r0, #0]
	a[1]= 0x08;
     402:	3b18      	subs	r3, #24
     404:	7043      	strb	r3, [r0, #1]
	SerialConsoleWriteString(&a);
     406:	4b02      	ldr	r3, [pc, #8]	; (410 <usart_read_callback+0x40>)
     408:	4798      	blx	r3
     40a:	e7ea      	b.n	3e2 <usart_read_callback+0x12>
     40c:	200001ac 	.word	0x200001ac
     410:	0000035d 	.word	0x0000035d
     414:	200001a8 	.word	0x200001a8
     418:	000001a1 	.word	0x000001a1
     41c:	20000174 	.word	0x20000174
     420:	0000272d 	.word	0x0000272d

00000424 <LogMessage>:
{
     424:	b40e      	push	{r1, r2, r3}
};
     426:	b003      	add	sp, #12
     428:	4770      	bx	lr
	...

0000042c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     42c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     42e:	4b06      	ldr	r3, [pc, #24]	; (448 <sd_mmc_configure_slot+0x1c>)
     430:	6819      	ldr	r1, [r3, #0]
     432:	7f8b      	ldrb	r3, [r1, #30]
     434:	1e5a      	subs	r2, r3, #1
     436:	4193      	sbcs	r3, r2
     438:	b2db      	uxtb	r3, r3
     43a:	7b4a      	ldrb	r2, [r1, #13]
     43c:	6809      	ldr	r1, [r1, #0]
     43e:	4803      	ldr	r0, [pc, #12]	; (44c <sd_mmc_configure_slot+0x20>)
     440:	7800      	ldrb	r0, [r0, #0]
     442:	4c03      	ldr	r4, [pc, #12]	; (450 <sd_mmc_configure_slot+0x24>)
     444:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     446:	bd10      	pop	{r4, pc}
     448:	20000084 	.word	0x20000084
     44c:	200000ac 	.word	0x200000ac
     450:	000010d5 	.word	0x000010d5

00000454 <sd_mmc_select_slot>:
{
     454:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     456:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     458:	2800      	cmp	r0, #0
     45a:	d001      	beq.n	460 <sd_mmc_select_slot+0xc>
}
     45c:	0018      	movs	r0, r3
     45e:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     460:	4b0e      	ldr	r3, [pc, #56]	; (49c <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     462:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     464:	3b03      	subs	r3, #3
     466:	2b01      	cmp	r3, #1
     468:	d90d      	bls.n	486 <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     46a:	2200      	movs	r2, #0
     46c:	4b0c      	ldr	r3, [pc, #48]	; (4a0 <sd_mmc_select_slot+0x4c>)
     46e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     470:	4c0a      	ldr	r4, [pc, #40]	; (49c <sd_mmc_select_slot+0x48>)
     472:	4b0c      	ldr	r3, [pc, #48]	; (4a4 <sd_mmc_select_slot+0x50>)
     474:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     476:	4b0c      	ldr	r3, [pc, #48]	; (4a8 <sd_mmc_select_slot+0x54>)
     478:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     47a:	7aa3      	ldrb	r3, [r4, #10]
     47c:	3b02      	subs	r3, #2
     47e:	4258      	negs	r0, r3
     480:	4143      	adcs	r3, r0
     482:	b2db      	uxtb	r3, r3
     484:	e7ea      	b.n	45c <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     486:	4b05      	ldr	r3, [pc, #20]	; (49c <sd_mmc_select_slot+0x48>)
     488:	2202      	movs	r2, #2
     48a:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     48c:	4a07      	ldr	r2, [pc, #28]	; (4ac <sd_mmc_select_slot+0x58>)
     48e:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     490:	2201      	movs	r2, #1
     492:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     494:	2200      	movs	r2, #0
     496:	779a      	strb	r2, [r3, #30]
     498:	e7e7      	b.n	46a <sd_mmc_select_slot+0x16>
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	20000088 	.word	0x20000088
     4a0:	200000ac 	.word	0x200000ac
     4a4:	20000084 	.word	0x20000084
     4a8:	0000042d 	.word	0x0000042d
     4ac:	00061a80 	.word	0x00061a80

000004b0 <sd_mmc_cmd13>:
{
     4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4b2:	4d09      	ldr	r5, [pc, #36]	; (4d8 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     4b4:	4f09      	ldr	r7, [pc, #36]	; (4dc <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     4b6:	4e0a      	ldr	r6, [pc, #40]	; (4e0 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     4b8:	2100      	movs	r1, #0
     4ba:	480a      	ldr	r0, [pc, #40]	; (4e4 <sd_mmc_cmd13+0x34>)
     4bc:	47b8      	blx	r7
     4be:	1e04      	subs	r4, r0, #0
     4c0:	d007      	beq.n	4d2 <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     4c2:	47b0      	blx	r6
     4c4:	23ff      	movs	r3, #255	; 0xff
     4c6:	4203      	tst	r3, r0
     4c8:	d003      	beq.n	4d2 <sd_mmc_cmd13+0x22>
     4ca:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     4cc:	2d00      	cmp	r5, #0
     4ce:	d1f3      	bne.n	4b8 <sd_mmc_cmd13+0x8>
			return false;
     4d0:	2400      	movs	r4, #0
}
     4d2:	0020      	movs	r0, r4
     4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	00030d41 	.word	0x00030d41
     4dc:	00001319 	.word	0x00001319
     4e0:	00001331 	.word	0x00001331
     4e4:	00001b0d 	.word	0x00001b0d

000004e8 <sd_mmc_cmd9_spi>:
{
     4e8:	b510      	push	{r4, lr}
     4ea:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     4ec:	4b0c      	ldr	r3, [pc, #48]	; (520 <sd_mmc_cmd9_spi+0x38>)
     4ee:	681b      	ldr	r3, [r3, #0]
     4f0:	8919      	ldrh	r1, [r3, #8]
     4f2:	0409      	lsls	r1, r1, #16
     4f4:	2301      	movs	r3, #1
     4f6:	9300      	str	r3, [sp, #0]
     4f8:	2210      	movs	r2, #16
     4fa:	480a      	ldr	r0, [pc, #40]	; (524 <sd_mmc_cmd9_spi+0x3c>)
     4fc:	4c0a      	ldr	r4, [pc, #40]	; (528 <sd_mmc_cmd9_spi+0x40>)
     4fe:	47a0      	blx	r4
     500:	2800      	cmp	r0, #0
     502:	d101      	bne.n	508 <sd_mmc_cmd9_spi+0x20>
}
     504:	b002      	add	sp, #8
     506:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     508:	4b05      	ldr	r3, [pc, #20]	; (520 <sd_mmc_cmd9_spi+0x38>)
     50a:	6818      	ldr	r0, [r3, #0]
     50c:	300e      	adds	r0, #14
     50e:	2101      	movs	r1, #1
     510:	4b06      	ldr	r3, [pc, #24]	; (52c <sd_mmc_cmd9_spi+0x44>)
     512:	4798      	blx	r3
     514:	2800      	cmp	r0, #0
     516:	d0f5      	beq.n	504 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     518:	4b05      	ldr	r3, [pc, #20]	; (530 <sd_mmc_cmd9_spi+0x48>)
     51a:	4798      	blx	r3
     51c:	e7f2      	b.n	504 <sd_mmc_cmd9_spi+0x1c>
     51e:	46c0      	nop			; (mov r8, r8)
     520:	20000084 	.word	0x20000084
     524:	00081109 	.word	0x00081109
     528:	00001189 	.word	0x00001189
     52c:	000013b5 	.word	0x000013b5
     530:	00001441 	.word	0x00001441

00000534 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     534:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     536:	4b04      	ldr	r3, [pc, #16]	; (548 <sd_mmc_deselect_slot+0x14>)
     538:	781b      	ldrb	r3, [r3, #0]
     53a:	2b00      	cmp	r3, #0
     53c:	d000      	beq.n	540 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     53e:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     540:	2000      	movs	r0, #0
     542:	4b02      	ldr	r3, [pc, #8]	; (54c <sd_mmc_deselect_slot+0x18>)
     544:	4798      	blx	r3
}
     546:	e7fa      	b.n	53e <sd_mmc_deselect_slot+0xa>
     548:	200000ac 	.word	0x200000ac
     54c:	00001129 	.word	0x00001129

00000550 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     550:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     552:	2204      	movs	r2, #4
     554:	4b03      	ldr	r3, [pc, #12]	; (564 <sd_mmc_init+0x14>)
     556:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     558:	32fb      	adds	r2, #251	; 0xfb
     55a:	4b03      	ldr	r3, [pc, #12]	; (568 <sd_mmc_init+0x18>)
     55c:	701a      	strb	r2, [r3, #0]
	driver_init();
     55e:	4b03      	ldr	r3, [pc, #12]	; (56c <sd_mmc_init+0x1c>)
     560:	4798      	blx	r3
}
     562:	bd10      	pop	{r4, pc}
     564:	20000088 	.word	0x20000088
     568:	200000ac 	.word	0x200000ac
     56c:	00000fd5 	.word	0x00000fd5

00000570 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     570:	b5f0      	push	{r4, r5, r6, r7, lr}
     572:	46c6      	mov	lr, r8
     574:	b500      	push	{lr}
     576:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     578:	4bcb      	ldr	r3, [pc, #812]	; (8a8 <sd_mmc_check+0x338>)
     57a:	4798      	blx	r3
     57c:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     57e:	2801      	cmp	r0, #1
     580:	d006      	beq.n	590 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     582:	4bca      	ldr	r3, [pc, #808]	; (8ac <sd_mmc_check+0x33c>)
     584:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     586:	0020      	movs	r0, r4
     588:	b008      	add	sp, #32
     58a:	bc04      	pop	{r2}
     58c:	4690      	mov	r8, r2
     58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     590:	4bc7      	ldr	r3, [pc, #796]	; (8b0 <sd_mmc_check+0x340>)
     592:	681b      	ldr	r3, [r3, #0]
     594:	2201      	movs	r2, #1
     596:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     598:	2200      	movs	r2, #0
     59a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     59c:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     59e:	4bc5      	ldr	r3, [pc, #788]	; (8b4 <sd_mmc_check+0x344>)
     5a0:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     5a2:	2100      	movs	r1, #0
     5a4:	2088      	movs	r0, #136	; 0x88
     5a6:	0140      	lsls	r0, r0, #5
     5a8:	4bc3      	ldr	r3, [pc, #780]	; (8b8 <sd_mmc_check+0x348>)
     5aa:	4798      	blx	r3
     5ac:	2800      	cmp	r0, #0
     5ae:	d107      	bne.n	5c0 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     5b0:	4bbf      	ldr	r3, [pc, #764]	; (8b0 <sd_mmc_check+0x340>)
     5b2:	681b      	ldr	r3, [r3, #0]
     5b4:	2203      	movs	r2, #3
     5b6:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     5b8:	4bbc      	ldr	r3, [pc, #752]	; (8ac <sd_mmc_check+0x33c>)
     5ba:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     5bc:	2403      	movs	r4, #3
     5be:	e7e2      	b.n	586 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     5c0:	21d5      	movs	r1, #213	; 0xd5
     5c2:	0049      	lsls	r1, r1, #1
     5c4:	48bd      	ldr	r0, [pc, #756]	; (8bc <sd_mmc_check+0x34c>)
     5c6:	4bbc      	ldr	r3, [pc, #752]	; (8b8 <sd_mmc_check+0x348>)
     5c8:	4798      	blx	r3
	*v2 = 0;
     5ca:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     5cc:	2800      	cmp	r0, #0
     5ce:	d125      	bne.n	61c <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     5d0:	4bb7      	ldr	r3, [pc, #732]	; (8b0 <sd_mmc_check+0x340>)
     5d2:	681b      	ldr	r3, [r3, #0]
     5d4:	7adb      	ldrb	r3, [r3, #11]
     5d6:	07db      	lsls	r3, r3, #31
     5d8:	d500      	bpl.n	5dc <sd_mmc_check+0x6c>
     5da:	e1eb      	b.n	9b4 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     5dc:	4bb4      	ldr	r3, [pc, #720]	; (8b0 <sd_mmc_check+0x340>)
     5de:	681b      	ldr	r3, [r3, #0]
     5e0:	7ada      	ldrb	r2, [r3, #11]
     5e2:	2309      	movs	r3, #9
     5e4:	4013      	ands	r3, r2
     5e6:	2b01      	cmp	r3, #1
     5e8:	d10f      	bne.n	60a <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     5ea:	2180      	movs	r1, #128	; 0x80
     5ec:	0089      	lsls	r1, r1, #2
     5ee:	48b4      	ldr	r0, [pc, #720]	; (8c0 <sd_mmc_check+0x350>)
     5f0:	4bb1      	ldr	r3, [pc, #708]	; (8b8 <sd_mmc_check+0x348>)
     5f2:	4798      	blx	r3
     5f4:	2800      	cmp	r0, #0
     5f6:	d0db      	beq.n	5b0 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     5f8:	4bad      	ldr	r3, [pc, #692]	; (8b0 <sd_mmc_check+0x340>)
     5fa:	681b      	ldr	r3, [r3, #0]
     5fc:	7adb      	ldrb	r3, [r3, #11]
     5fe:	07db      	lsls	r3, r3, #31
     600:	d503      	bpl.n	60a <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     602:	4bb0      	ldr	r3, [pc, #704]	; (8c4 <sd_mmc_check+0x354>)
     604:	4798      	blx	r3
     606:	2800      	cmp	r0, #0
     608:	d0d2      	beq.n	5b0 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     60a:	4baf      	ldr	r3, [pc, #700]	; (8c8 <sd_mmc_check+0x358>)
     60c:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     60e:	4ba8      	ldr	r3, [pc, #672]	; (8b0 <sd_mmc_check+0x340>)
     610:	681b      	ldr	r3, [r3, #0]
     612:	2200      	movs	r2, #0
     614:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     616:	4ba5      	ldr	r3, [pc, #660]	; (8ac <sd_mmc_check+0x33c>)
     618:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     61a:	e7b4      	b.n	586 <sd_mmc_check+0x16>
	resp = driver_get_response();
     61c:	4bab      	ldr	r3, [pc, #684]	; (8cc <sd_mmc_check+0x35c>)
     61e:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     620:	1c43      	adds	r3, r0, #1
     622:	d100      	bne.n	626 <sd_mmc_check+0xb6>
     624:	e1c4      	b.n	9b0 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     626:	0500      	lsls	r0, r0, #20
     628:	0d00      	lsrs	r0, r0, #20
     62a:	23d5      	movs	r3, #213	; 0xd5
     62c:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     62e:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     630:	4298      	cmp	r0, r3
     632:	d1bd      	bne.n	5b0 <sd_mmc_check+0x40>
     634:	e7cc      	b.n	5d0 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     636:	2100      	movs	r1, #0
     638:	48a5      	ldr	r0, [pc, #660]	; (8d0 <sd_mmc_check+0x360>)
     63a:	4b9f      	ldr	r3, [pc, #636]	; (8b8 <sd_mmc_check+0x348>)
     63c:	4798      	blx	r3
     63e:	2800      	cmp	r0, #0
     640:	d119      	bne.n	676 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     642:	4b9b      	ldr	r3, [pc, #620]	; (8b0 <sd_mmc_check+0x340>)
     644:	681b      	ldr	r3, [r3, #0]
     646:	2202      	movs	r2, #2
     648:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     64a:	2100      	movs	r1, #0
     64c:	2088      	movs	r0, #136	; 0x88
     64e:	0140      	lsls	r0, r0, #5
     650:	4b99      	ldr	r3, [pc, #612]	; (8b8 <sd_mmc_check+0x348>)
     652:	4798      	blx	r3
     654:	2800      	cmp	r0, #0
     656:	d0ab      	beq.n	5b0 <sd_mmc_check+0x40>
     658:	4d9e      	ldr	r5, [pc, #632]	; (8d4 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     65a:	4f97      	ldr	r7, [pc, #604]	; (8b8 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     65c:	4e9b      	ldr	r6, [pc, #620]	; (8cc <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     65e:	2100      	movs	r1, #0
     660:	489d      	ldr	r0, [pc, #628]	; (8d8 <sd_mmc_check+0x368>)
     662:	47b8      	blx	r7
     664:	2800      	cmp	r0, #0
     666:	d0a3      	beq.n	5b0 <sd_mmc_check+0x40>
		resp = driver_get_response();
     668:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     66a:	07c3      	lsls	r3, r0, #31
     66c:	d57d      	bpl.n	76a <sd_mmc_check+0x1fa>
     66e:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     670:	2d00      	cmp	r5, #0
     672:	d1f4      	bne.n	65e <sd_mmc_check+0xee>
     674:	e79c      	b.n	5b0 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     676:	4b95      	ldr	r3, [pc, #596]	; (8cc <sd_mmc_check+0x35c>)
     678:	4798      	blx	r3
     67a:	0043      	lsls	r3, r0, #1
     67c:	d505      	bpl.n	68a <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     67e:	4b8c      	ldr	r3, [pc, #560]	; (8b0 <sd_mmc_check+0x340>)
     680:	681a      	ldr	r2, [r3, #0]
     682:	7ad3      	ldrb	r3, [r2, #11]
     684:	2108      	movs	r1, #8
     686:	430b      	orrs	r3, r1
     688:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     68a:	2100      	movs	r1, #0
     68c:	4893      	ldr	r0, [pc, #588]	; (8dc <sd_mmc_check+0x36c>)
     68e:	4b8a      	ldr	r3, [pc, #552]	; (8b8 <sd_mmc_check+0x348>)
     690:	4798      	blx	r3
     692:	2800      	cmp	r0, #0
     694:	d08c      	beq.n	5b0 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     696:	4b86      	ldr	r3, [pc, #536]	; (8b0 <sd_mmc_check+0x340>)
     698:	681b      	ldr	r3, [r3, #0]
     69a:	7adb      	ldrb	r3, [r3, #11]
     69c:	07da      	lsls	r2, r3, #31
     69e:	d400      	bmi.n	6a2 <sd_mmc_check+0x132>
     6a0:	e1a4      	b.n	9ec <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     6a2:	4b8f      	ldr	r3, [pc, #572]	; (8e0 <sd_mmc_check+0x370>)
     6a4:	4798      	blx	r3
     6a6:	2800      	cmp	r0, #0
     6a8:	d082      	beq.n	5b0 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     6aa:	4b81      	ldr	r3, [pc, #516]	; (8b0 <sd_mmc_check+0x340>)
     6ac:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     6ae:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     6b0:	2107      	movs	r1, #7
     6b2:	4019      	ands	r1, r3
     6b4:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     6b6:	488b      	ldr	r0, [pc, #556]	; (8e4 <sd_mmc_check+0x374>)
     6b8:	5808      	ldr	r0, [r1, r0]
     6ba:	21fa      	movs	r1, #250	; 0xfa
     6bc:	0089      	lsls	r1, r1, #2
     6be:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     6c0:	065b      	lsls	r3, r3, #25
     6c2:	0f1b      	lsrs	r3, r3, #28
     6c4:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     6c6:	4888      	ldr	r0, [pc, #544]	; (8e8 <sd_mmc_check+0x378>)
     6c8:	581b      	ldr	r3, [r3, r0]
     6ca:	434b      	muls	r3, r1
     6cc:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     6ce:	7b93      	ldrb	r3, [r2, #14]
     6d0:	099b      	lsrs	r3, r3, #6
     6d2:	d000      	beq.n	6d6 <sd_mmc_check+0x166>
     6d4:	e13c      	b.n	950 <sd_mmc_check+0x3e0>
     6d6:	7d91      	ldrb	r1, [r2, #22]
     6d8:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     6da:	7d53      	ldrb	r3, [r2, #21]
     6dc:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     6de:	7d10      	ldrb	r0, [r2, #20]
     6e0:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     6e2:	4303      	orrs	r3, r0
     6e4:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     6e6:	7e10      	ldrb	r0, [r2, #24]
     6e8:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     6ea:	7dd1      	ldrb	r1, [r2, #23]
     6ec:	0049      	lsls	r1, r1, #1
     6ee:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     6f0:	051b      	lsls	r3, r3, #20
     6f2:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     6f4:	3301      	adds	r3, #1
     6f6:	2107      	movs	r1, #7
     6f8:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     6fa:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     6fc:	408b      	lsls	r3, r1
     6fe:	7cd0      	ldrb	r0, [r2, #19]
     700:	210f      	movs	r1, #15
     702:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     704:	408b      	lsls	r3, r1
				/ 1024;
     706:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     708:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     70a:	8911      	ldrh	r1, [r2, #8]
     70c:	0409      	lsls	r1, r1, #16
     70e:	4877      	ldr	r0, [pc, #476]	; (8ec <sd_mmc_check+0x37c>)
     710:	4b69      	ldr	r3, [pc, #420]	; (8b8 <sd_mmc_check+0x348>)
     712:	4798      	blx	r3
     714:	2800      	cmp	r0, #0
     716:	d100      	bne.n	71a <sd_mmc_check+0x1aa>
     718:	e74a      	b.n	5b0 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     71a:	2301      	movs	r3, #1
     71c:	9300      	str	r3, [sp, #0]
     71e:	2208      	movs	r2, #8
     720:	2100      	movs	r1, #0
     722:	4873      	ldr	r0, [pc, #460]	; (8f0 <sd_mmc_check+0x380>)
     724:	4d73      	ldr	r5, [pc, #460]	; (8f4 <sd_mmc_check+0x384>)
     726:	47a8      	blx	r5
     728:	2800      	cmp	r0, #0
     72a:	d100      	bne.n	72e <sd_mmc_check+0x1be>
     72c:	e740      	b.n	5b0 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     72e:	2101      	movs	r1, #1
     730:	a806      	add	r0, sp, #24
     732:	4b71      	ldr	r3, [pc, #452]	; (8f8 <sd_mmc_check+0x388>)
     734:	4798      	blx	r3
     736:	2800      	cmp	r0, #0
     738:	d100      	bne.n	73c <sd_mmc_check+0x1cc>
     73a:	e739      	b.n	5b0 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     73c:	4b6f      	ldr	r3, [pc, #444]	; (8fc <sd_mmc_check+0x38c>)
     73e:	4798      	blx	r3
     740:	2800      	cmp	r0, #0
     742:	d100      	bne.n	746 <sd_mmc_check+0x1d6>
     744:	e734      	b.n	5b0 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     746:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     748:	781b      	ldrb	r3, [r3, #0]
     74a:	220f      	movs	r2, #15
     74c:	4013      	ands	r3, r2
     74e:	2b01      	cmp	r3, #1
     750:	d100      	bne.n	754 <sd_mmc_check+0x1e4>
     752:	e119      	b.n	988 <sd_mmc_check+0x418>
     754:	2b00      	cmp	r3, #0
     756:	d100      	bne.n	75a <sd_mmc_check+0x1ea>
     758:	e109      	b.n	96e <sd_mmc_check+0x3fe>
     75a:	2b02      	cmp	r3, #2
     75c:	d100      	bne.n	760 <sd_mmc_check+0x1f0>
     75e:	e118      	b.n	992 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     760:	4b53      	ldr	r3, [pc, #332]	; (8b0 <sd_mmc_check+0x340>)
     762:	681b      	ldr	r3, [r3, #0]
     764:	2210      	movs	r2, #16
     766:	731a      	strb	r2, [r3, #12]
     768:	e105      	b.n	976 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     76a:	2100      	movs	r1, #0
     76c:	4858      	ldr	r0, [pc, #352]	; (8d0 <sd_mmc_check+0x360>)
     76e:	4b52      	ldr	r3, [pc, #328]	; (8b8 <sd_mmc_check+0x348>)
     770:	4798      	blx	r3
     772:	2800      	cmp	r0, #0
     774:	d100      	bne.n	778 <sd_mmc_check+0x208>
     776:	e71b      	b.n	5b0 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     778:	4b54      	ldr	r3, [pc, #336]	; (8cc <sd_mmc_check+0x35c>)
     77a:	4798      	blx	r3
     77c:	23c0      	movs	r3, #192	; 0xc0
     77e:	05db      	lsls	r3, r3, #23
     780:	4018      	ands	r0, r3
     782:	2380      	movs	r3, #128	; 0x80
     784:	05db      	lsls	r3, r3, #23
     786:	4298      	cmp	r0, r3
     788:	d105      	bne.n	796 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     78a:	4b49      	ldr	r3, [pc, #292]	; (8b0 <sd_mmc_check+0x340>)
     78c:	681a      	ldr	r2, [r3, #0]
     78e:	7ad1      	ldrb	r1, [r2, #11]
     790:	2308      	movs	r3, #8
     792:	430b      	orrs	r3, r1
     794:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     796:	2100      	movs	r1, #0
     798:	4850      	ldr	r0, [pc, #320]	; (8dc <sd_mmc_check+0x36c>)
     79a:	4b47      	ldr	r3, [pc, #284]	; (8b8 <sd_mmc_check+0x348>)
     79c:	4798      	blx	r3
     79e:	2800      	cmp	r0, #0
     7a0:	d100      	bne.n	7a4 <sd_mmc_check+0x234>
     7a2:	e705      	b.n	5b0 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     7a4:	4b4e      	ldr	r3, [pc, #312]	; (8e0 <sd_mmc_check+0x370>)
     7a6:	4798      	blx	r3
     7a8:	2800      	cmp	r0, #0
     7aa:	d100      	bne.n	7ae <sd_mmc_check+0x23e>
     7ac:	e700      	b.n	5b0 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     7ae:	4b40      	ldr	r3, [pc, #256]	; (8b0 <sd_mmc_check+0x340>)
     7b0:	681a      	ldr	r2, [r3, #0]
     7b2:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     7b4:	069b      	lsls	r3, r3, #26
     7b6:	0f1b      	lsrs	r3, r3, #28
     7b8:	2b02      	cmp	r3, #2
     7ba:	d100      	bne.n	7be <sd_mmc_check+0x24e>
     7bc:	e0a8      	b.n	910 <sd_mmc_check+0x3a0>
     7be:	d907      	bls.n	7d0 <sd_mmc_check+0x260>
     7c0:	2b03      	cmp	r3, #3
     7c2:	d100      	bne.n	7c6 <sd_mmc_check+0x256>
     7c4:	e0a7      	b.n	916 <sd_mmc_check+0x3a6>
     7c6:	2b04      	cmp	r3, #4
     7c8:	d104      	bne.n	7d4 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     7ca:	2340      	movs	r3, #64	; 0x40
     7cc:	7313      	strb	r3, [r2, #12]
     7ce:	e003      	b.n	7d8 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     7d0:	2b01      	cmp	r3, #1
     7d2:	d066      	beq.n	8a2 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     7d4:	2312      	movs	r3, #18
     7d6:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     7d8:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     7da:	0659      	lsls	r1, r3, #25
     7dc:	0f09      	lsrs	r1, r1, #28
     7de:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     7e0:	2007      	movs	r0, #7
     7e2:	4003      	ands	r3, r0
     7e4:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     7e6:	483f      	ldr	r0, [pc, #252]	; (8e4 <sd_mmc_check+0x374>)
     7e8:	5818      	ldr	r0, [r3, r0]
     7ea:	23fa      	movs	r3, #250	; 0xfa
     7ec:	009b      	lsls	r3, r3, #2
     7ee:	4343      	muls	r3, r0
     7f0:	4843      	ldr	r0, [pc, #268]	; (900 <sd_mmc_check+0x390>)
     7f2:	5809      	ldr	r1, [r1, r0]
     7f4:	434b      	muls	r3, r1
     7f6:	6013      	str	r3, [r2, #0]
     7f8:	7d91      	ldrb	r1, [r2, #22]
     7fa:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     7fc:	7d53      	ldrb	r3, [r2, #21]
     7fe:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     800:	7d10      	ldrb	r0, [r2, #20]
     802:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     804:	4303      	orrs	r3, r0
     806:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     808:	051b      	lsls	r3, r3, #20
     80a:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     80c:	493d      	ldr	r1, [pc, #244]	; (904 <sd_mmc_check+0x394>)
     80e:	428b      	cmp	r3, r1
     810:	d00f      	beq.n	832 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     812:	7e10      	ldrb	r0, [r2, #24]
     814:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     816:	7dd1      	ldrb	r1, [r2, #23]
     818:	0049      	lsls	r1, r1, #1
     81a:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     81c:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     81e:	2007      	movs	r0, #7
     820:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     822:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     824:	408b      	lsls	r3, r1
     826:	7cd1      	ldrb	r1, [r2, #19]
     828:	3008      	adds	r0, #8
     82a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     82c:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     82e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     830:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     832:	7b13      	ldrb	r3, [r2, #12]
     834:	2b3f      	cmp	r3, #63	; 0x3f
     836:	d97b      	bls.n	930 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     838:	2100      	movs	r1, #0
     83a:	9100      	str	r1, [sp, #0]
     83c:	2301      	movs	r3, #1
     83e:	2280      	movs	r2, #128	; 0x80
     840:	0092      	lsls	r2, r2, #2
     842:	4831      	ldr	r0, [pc, #196]	; (908 <sd_mmc_check+0x398>)
     844:	4d2b      	ldr	r5, [pc, #172]	; (8f4 <sd_mmc_check+0x384>)
     846:	47a8      	blx	r5
     848:	2800      	cmp	r0, #0
     84a:	d100      	bne.n	84e <sd_mmc_check+0x2de>
     84c:	e6b0      	b.n	5b0 <sd_mmc_check+0x40>
     84e:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     850:	4e2e      	ldr	r6, [pc, #184]	; (90c <sd_mmc_check+0x39c>)
     852:	a805      	add	r0, sp, #20
     854:	47b0      	blx	r6
     856:	2800      	cmp	r0, #0
     858:	d100      	bne.n	85c <sd_mmc_check+0x2ec>
     85a:	e6a9      	b.n	5b0 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     85c:	3501      	adds	r5, #1
     85e:	b2ad      	uxth	r5, r5
     860:	2d32      	cmp	r5, #50	; 0x32
     862:	d1f6      	bne.n	852 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     864:	4b12      	ldr	r3, [pc, #72]	; (8b0 <sd_mmc_check+0x340>)
     866:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     868:	7d8a      	ldrb	r2, [r1, #22]
     86a:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     86c:	7d4b      	ldrb	r3, [r1, #21]
     86e:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     870:	7d09      	ldrb	r1, [r1, #20]
     872:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     874:	430b      	orrs	r3, r1
     876:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     878:	051b      	lsls	r3, r3, #20
     87a:	0d1b      	lsrs	r3, r3, #20
     87c:	4a21      	ldr	r2, [pc, #132]	; (904 <sd_mmc_check+0x394>)
     87e:	4293      	cmp	r3, r2
     880:	d154      	bne.n	92c <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     882:	4e22      	ldr	r6, [pc, #136]	; (90c <sd_mmc_check+0x39c>)
     884:	a806      	add	r0, sp, #24
     886:	47b0      	blx	r6
     888:	2800      	cmp	r0, #0
     88a:	d100      	bne.n	88e <sd_mmc_check+0x31e>
     88c:	e690      	b.n	5b0 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     88e:	3501      	adds	r5, #1
     890:	b2ad      	uxth	r5, r5
     892:	2d35      	cmp	r5, #53	; 0x35
     894:	d9f6      	bls.n	884 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     896:	4b06      	ldr	r3, [pc, #24]	; (8b0 <sd_mmc_check+0x340>)
     898:	681a      	ldr	r2, [r3, #0]
     89a:	9b06      	ldr	r3, [sp, #24]
     89c:	085b      	lsrs	r3, r3, #1
     89e:	6053      	str	r3, [r2, #4]
     8a0:	e044      	b.n	92c <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     8a2:	2314      	movs	r3, #20
     8a4:	7313      	strb	r3, [r2, #12]
     8a6:	e797      	b.n	7d8 <sd_mmc_check+0x268>
     8a8:	00000455 	.word	0x00000455
     8ac:	00000535 	.word	0x00000535
     8b0:	20000084 	.word	0x20000084
     8b4:	00001151 	.word	0x00001151
     8b8:	00001319 	.word	0x00001319
     8bc:	00005508 	.word	0x00005508
     8c0:	00001110 	.word	0x00001110
     8c4:	000004b1 	.word	0x000004b1
     8c8:	0000042d 	.word	0x0000042d
     8cc:	00001331 	.word	0x00001331
     8d0:	0000053a 	.word	0x0000053a
     8d4:	00001bef 	.word	0x00001bef
     8d8:	00001101 	.word	0x00001101
     8dc:	0000113b 	.word	0x0000113b
     8e0:	000004e9 	.word	0x000004e9
     8e4:	0000535c 	.word	0x0000535c
     8e8:	00005378 	.word	0x00005378
     8ec:	00001137 	.word	0x00001137
     8f0:	00081133 	.word	0x00081133
     8f4:	00001189 	.word	0x00001189
     8f8:	000013b5 	.word	0x000013b5
     8fc:	00001441 	.word	0x00001441
     900:	0000531c 	.word	0x0000531c
     904:	00000fff 	.word	0x00000fff
     908:	00081108 	.word	0x00081108
     90c:	0000133d 	.word	0x0000133d
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     910:	2322      	movs	r3, #34	; 0x22
     912:	7313      	strb	r3, [r2, #12]
     914:	e760      	b.n	7d8 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     916:	2330      	movs	r3, #48	; 0x30
     918:	7313      	strb	r3, [r2, #12]
     91a:	e75d      	b.n	7d8 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     91c:	a806      	add	r0, sp, #24
     91e:	4b36      	ldr	r3, [pc, #216]	; (9f8 <sd_mmc_check+0x488>)
     920:	4798      	blx	r3
     922:	2800      	cmp	r0, #0
     924:	d100      	bne.n	928 <sd_mmc_check+0x3b8>
     926:	e643      	b.n	5b0 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     928:	3501      	adds	r5, #1
     92a:	b2ad      	uxth	r5, r5
     92c:	2d7f      	cmp	r5, #127	; 0x7f
     92e:	d9f5      	bls.n	91c <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     930:	2180      	movs	r1, #128	; 0x80
     932:	0089      	lsls	r1, r1, #2
     934:	4831      	ldr	r0, [pc, #196]	; (9fc <sd_mmc_check+0x48c>)
     936:	4b32      	ldr	r3, [pc, #200]	; (a00 <sd_mmc_check+0x490>)
     938:	4798      	blx	r3
     93a:	2800      	cmp	r0, #0
     93c:	d100      	bne.n	940 <sd_mmc_check+0x3d0>
     93e:	e637      	b.n	5b0 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     940:	4b30      	ldr	r3, [pc, #192]	; (a04 <sd_mmc_check+0x494>)
     942:	4798      	blx	r3
     944:	2800      	cmp	r0, #0
     946:	d100      	bne.n	94a <sd_mmc_check+0x3da>
     948:	e632      	b.n	5b0 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     94a:	4b2f      	ldr	r3, [pc, #188]	; (a08 <sd_mmc_check+0x498>)
     94c:	4798      	blx	r3
     94e:	e65e      	b.n	60e <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     950:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     952:	7d93      	ldrb	r3, [r2, #22]
     954:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     956:	7d51      	ldrb	r1, [r2, #21]
     958:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     95a:	430b      	orrs	r3, r1
     95c:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     95e:	029b      	lsls	r3, r3, #10
				* 512;
     960:	085b      	lsrs	r3, r3, #1
     962:	2180      	movs	r1, #128	; 0x80
     964:	0089      	lsls	r1, r1, #2
     966:	468c      	mov	ip, r1
     968:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     96a:	6053      	str	r3, [r2, #4]
     96c:	e6cd      	b.n	70a <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     96e:	4b27      	ldr	r3, [pc, #156]	; (a0c <sd_mmc_check+0x49c>)
     970:	681b      	ldr	r3, [r3, #0]
     972:	2210      	movs	r2, #16
     974:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     976:	4b25      	ldr	r3, [pc, #148]	; (a0c <sd_mmc_check+0x49c>)
     978:	681b      	ldr	r3, [r3, #0]
     97a:	7adb      	ldrb	r3, [r3, #11]
     97c:	2209      	movs	r2, #9
     97e:	4013      	ands	r3, r2
     980:	2b01      	cmp	r3, #1
     982:	d000      	beq.n	986 <sd_mmc_check+0x416>
     984:	e638      	b.n	5f8 <sd_mmc_check+0x88>
     986:	e630      	b.n	5ea <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     988:	4b20      	ldr	r3, [pc, #128]	; (a0c <sd_mmc_check+0x49c>)
     98a:	681b      	ldr	r3, [r3, #0]
     98c:	221a      	movs	r2, #26
     98e:	731a      	strb	r2, [r3, #12]
     990:	e7f1      	b.n	976 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     992:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     994:	789b      	ldrb	r3, [r3, #2]
     996:	09db      	lsrs	r3, r3, #7
     998:	2b01      	cmp	r3, #1
     99a:	d104      	bne.n	9a6 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     99c:	4b1b      	ldr	r3, [pc, #108]	; (a0c <sd_mmc_check+0x49c>)
     99e:	681b      	ldr	r3, [r3, #0]
     9a0:	2230      	movs	r2, #48	; 0x30
     9a2:	731a      	strb	r2, [r3, #12]
     9a4:	e7e7      	b.n	976 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     9a6:	4b19      	ldr	r3, [pc, #100]	; (a0c <sd_mmc_check+0x49c>)
     9a8:	681b      	ldr	r3, [r3, #0]
     9aa:	2220      	movs	r2, #32
     9ac:	731a      	strb	r2, [r3, #12]
     9ae:	e7e2      	b.n	976 <sd_mmc_check+0x406>
	*v2 = 0;
     9b0:	2600      	movs	r6, #0
     9b2:	e60d      	b.n	5d0 <sd_mmc_check+0x60>
     9b4:	1e73      	subs	r3, r6, #1
     9b6:	419e      	sbcs	r6, r3
     9b8:	07b3      	lsls	r3, r6, #30
     9ba:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     9bc:	4d14      	ldr	r5, [pc, #80]	; (a10 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     9be:	4f10      	ldr	r7, [pc, #64]	; (a00 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     9c0:	46b8      	mov	r8, r7
		resp = driver_get_response();
     9c2:	4e14      	ldr	r6, [pc, #80]	; (a14 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     9c4:	2100      	movs	r1, #0
     9c6:	4814      	ldr	r0, [pc, #80]	; (a18 <sd_mmc_check+0x4a8>)
     9c8:	47b8      	blx	r7
     9ca:	2800      	cmp	r0, #0
     9cc:	d100      	bne.n	9d0 <sd_mmc_check+0x460>
     9ce:	e638      	b.n	642 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     9d0:	9903      	ldr	r1, [sp, #12]
     9d2:	4812      	ldr	r0, [pc, #72]	; (a1c <sd_mmc_check+0x4ac>)
     9d4:	47c0      	blx	r8
     9d6:	2800      	cmp	r0, #0
     9d8:	d100      	bne.n	9dc <sd_mmc_check+0x46c>
     9da:	e632      	b.n	642 <sd_mmc_check+0xd2>
		resp = driver_get_response();
     9dc:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     9de:	07c3      	lsls	r3, r0, #31
     9e0:	d400      	bmi.n	9e4 <sd_mmc_check+0x474>
     9e2:	e628      	b.n	636 <sd_mmc_check+0xc6>
     9e4:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     9e6:	2d00      	cmp	r5, #0
     9e8:	d1ec      	bne.n	9c4 <sd_mmc_check+0x454>
     9ea:	e62a      	b.n	642 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     9ec:	2209      	movs	r2, #9
     9ee:	4013      	ands	r3, r2
     9f0:	2b01      	cmp	r3, #1
     9f2:	d000      	beq.n	9f6 <sd_mmc_check+0x486>
     9f4:	e609      	b.n	60a <sd_mmc_check+0x9a>
     9f6:	e5f8      	b.n	5ea <sd_mmc_check+0x7a>
     9f8:	0000133d 	.word	0x0000133d
     9fc:	00001110 	.word	0x00001110
     a00:	00001319 	.word	0x00001319
     a04:	000004b1 	.word	0x000004b1
     a08:	0000042d 	.word	0x0000042d
     a0c:	20000084 	.word	0x20000084
     a10:	00001bef 	.word	0x00001bef
     a14:	00001331 	.word	0x00001331
     a18:	00001137 	.word	0x00001137
     a1c:	00001129 	.word	0x00001129

00000a20 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     a20:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     a22:	4b06      	ldr	r3, [pc, #24]	; (a3c <sd_mmc_get_type+0x1c>)
     a24:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     a26:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     a28:	2800      	cmp	r0, #0
     a2a:	d001      	beq.n	a30 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     a2c:	0018      	movs	r0, r3
     a2e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     a30:	4b03      	ldr	r3, [pc, #12]	; (a40 <sd_mmc_get_type+0x20>)
     a32:	4798      	blx	r3
	return sd_mmc_card->type;
     a34:	4b03      	ldr	r3, [pc, #12]	; (a44 <sd_mmc_get_type+0x24>)
     a36:	681b      	ldr	r3, [r3, #0]
     a38:	7adb      	ldrb	r3, [r3, #11]
     a3a:	e7f7      	b.n	a2c <sd_mmc_get_type+0xc>
     a3c:	00000455 	.word	0x00000455
     a40:	00000535 	.word	0x00000535
     a44:	20000084 	.word	0x20000084

00000a48 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     a48:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     a4a:	4b06      	ldr	r3, [pc, #24]	; (a64 <sd_mmc_get_capacity+0x1c>)
     a4c:	4798      	blx	r3
		return 0;
     a4e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     a50:	2800      	cmp	r0, #0
     a52:	d001      	beq.n	a58 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     a54:	0018      	movs	r0, r3
     a56:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     a58:	4b03      	ldr	r3, [pc, #12]	; (a68 <sd_mmc_get_capacity+0x20>)
     a5a:	4798      	blx	r3
	return sd_mmc_card->capacity;
     a5c:	4b03      	ldr	r3, [pc, #12]	; (a6c <sd_mmc_get_capacity+0x24>)
     a5e:	681b      	ldr	r3, [r3, #0]
     a60:	685b      	ldr	r3, [r3, #4]
     a62:	e7f7      	b.n	a54 <sd_mmc_get_capacity+0xc>
     a64:	00000455 	.word	0x00000455
     a68:	00000535 	.word	0x00000535
     a6c:	20000084 	.word	0x20000084

00000a70 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     a70:	2000      	movs	r0, #0
     a72:	4770      	bx	lr

00000a74 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     a74:	b570      	push	{r4, r5, r6, lr}
     a76:	b082      	sub	sp, #8
     a78:	000e      	movs	r6, r1
     a7a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     a7c:	4b16      	ldr	r3, [pc, #88]	; (ad8 <sd_mmc_init_read_blocks+0x64>)
     a7e:	4798      	blx	r3
     a80:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     a82:	d002      	beq.n	a8a <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     a84:	0020      	movs	r0, r4
     a86:	b002      	add	sp, #8
     a88:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     a8a:	4b14      	ldr	r3, [pc, #80]	; (adc <sd_mmc_init_read_blocks+0x68>)
     a8c:	4798      	blx	r3
     a8e:	2800      	cmp	r0, #0
     a90:	d017      	beq.n	ac2 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     a92:	2d01      	cmp	r5, #1
     a94:	d919      	bls.n	aca <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     a96:	4812      	ldr	r0, [pc, #72]	; (ae0 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     a98:	4b12      	ldr	r3, [pc, #72]	; (ae4 <sd_mmc_init_read_blocks+0x70>)
     a9a:	681b      	ldr	r3, [r3, #0]
     a9c:	7adb      	ldrb	r3, [r3, #11]
     a9e:	071b      	lsls	r3, r3, #28
     aa0:	d400      	bmi.n	aa4 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     aa2:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     aa4:	2301      	movs	r3, #1
     aa6:	9300      	str	r3, [sp, #0]
     aa8:	002b      	movs	r3, r5
     aaa:	2280      	movs	r2, #128	; 0x80
     aac:	0092      	lsls	r2, r2, #2
     aae:	0031      	movs	r1, r6
     ab0:	4e0d      	ldr	r6, [pc, #52]	; (ae8 <sd_mmc_init_read_blocks+0x74>)
     ab2:	47b0      	blx	r6
     ab4:	2800      	cmp	r0, #0
     ab6:	d00a      	beq.n	ace <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     ab8:	4b0c      	ldr	r3, [pc, #48]	; (aec <sd_mmc_init_read_blocks+0x78>)
     aba:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     abc:	4b0c      	ldr	r3, [pc, #48]	; (af0 <sd_mmc_init_read_blocks+0x7c>)
     abe:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     ac0:	e7e0      	b.n	a84 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     ac2:	4b0c      	ldr	r3, [pc, #48]	; (af4 <sd_mmc_init_read_blocks+0x80>)
     ac4:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     ac6:	3405      	adds	r4, #5
     ac8:	e7dc      	b.n	a84 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     aca:	480b      	ldr	r0, [pc, #44]	; (af8 <sd_mmc_init_read_blocks+0x84>)
     acc:	e7e4      	b.n	a98 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     ace:	4b09      	ldr	r3, [pc, #36]	; (af4 <sd_mmc_init_read_blocks+0x80>)
     ad0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     ad2:	2405      	movs	r4, #5
     ad4:	e7d6      	b.n	a84 <sd_mmc_init_read_blocks+0x10>
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	00000455 	.word	0x00000455
     adc:	000004b1 	.word	0x000004b1
     ae0:	00101112 	.word	0x00101112
     ae4:	20000084 	.word	0x20000084
     ae8:	00001189 	.word	0x00001189
     aec:	200000a8 	.word	0x200000a8
     af0:	200000aa 	.word	0x200000aa
     af4:	00000535 	.word	0x00000535
     af8:	00081111 	.word	0x00081111

00000afc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     afc:	b510      	push	{r4, lr}
     afe:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     b00:	4b07      	ldr	r3, [pc, #28]	; (b20 <sd_mmc_start_read_blocks+0x24>)
     b02:	4798      	blx	r3
     b04:	2800      	cmp	r0, #0
     b06:	d104      	bne.n	b12 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     b08:	2200      	movs	r2, #0
     b0a:	4b06      	ldr	r3, [pc, #24]	; (b24 <sd_mmc_start_read_blocks+0x28>)
     b0c:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     b0e:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     b10:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     b12:	4a04      	ldr	r2, [pc, #16]	; (b24 <sd_mmc_start_read_blocks+0x28>)
     b14:	8813      	ldrh	r3, [r2, #0]
     b16:	1b1c      	subs	r4, r3, r4
     b18:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     b1a:	2000      	movs	r0, #0
     b1c:	e7f8      	b.n	b10 <sd_mmc_start_read_blocks+0x14>
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	000013b5 	.word	0x000013b5
     b24:	200000a8 	.word	0x200000a8

00000b28 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     b28:	b510      	push	{r4, lr}
     b2a:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     b2c:	4b14      	ldr	r3, [pc, #80]	; (b80 <sd_mmc_wait_end_of_read_blocks+0x58>)
     b2e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     b30:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     b32:	2800      	cmp	r0, #0
     b34:	d101      	bne.n	b3a <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     b36:	0018      	movs	r0, r3
     b38:	bd10      	pop	{r4, pc}
	if (abort) {
     b3a:	2c00      	cmp	r4, #0
     b3c:	d010      	beq.n	b60 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     b3e:	2200      	movs	r2, #0
     b40:	4b10      	ldr	r3, [pc, #64]	; (b84 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     b42:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     b44:	4b10      	ldr	r3, [pc, #64]	; (b88 <sd_mmc_wait_end_of_read_blocks+0x60>)
     b46:	881b      	ldrh	r3, [r3, #0]
     b48:	2b01      	cmp	r3, #1
     b4a:	d00f      	beq.n	b6c <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     b4c:	2100      	movs	r1, #0
     b4e:	480f      	ldr	r0, [pc, #60]	; (b8c <sd_mmc_wait_end_of_read_blocks+0x64>)
     b50:	4b0f      	ldr	r3, [pc, #60]	; (b90 <sd_mmc_wait_end_of_read_blocks+0x68>)
     b52:	4798      	blx	r3
     b54:	2800      	cmp	r0, #0
     b56:	d00d      	beq.n	b74 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     b58:	4b0e      	ldr	r3, [pc, #56]	; (b94 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     b5a:	4798      	blx	r3
	return SD_MMC_OK;
     b5c:	2300      	movs	r3, #0
     b5e:	e7ea      	b.n	b36 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     b60:	4b08      	ldr	r3, [pc, #32]	; (b84 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     b62:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     b64:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     b66:	2a00      	cmp	r2, #0
     b68:	d0ec      	beq.n	b44 <sd_mmc_wait_end_of_read_blocks+0x1c>
     b6a:	e7e4      	b.n	b36 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     b6c:	4b09      	ldr	r3, [pc, #36]	; (b94 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     b6e:	4798      	blx	r3
		return SD_MMC_OK;
     b70:	2300      	movs	r3, #0
     b72:	e7e0      	b.n	b36 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     b74:	2100      	movs	r1, #0
     b76:	4805      	ldr	r0, [pc, #20]	; (b8c <sd_mmc_wait_end_of_read_blocks+0x64>)
     b78:	4b05      	ldr	r3, [pc, #20]	; (b90 <sd_mmc_wait_end_of_read_blocks+0x68>)
     b7a:	4798      	blx	r3
     b7c:	e7ec      	b.n	b58 <sd_mmc_wait_end_of_read_blocks+0x30>
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	00001441 	.word	0x00001441
     b84:	200000a8 	.word	0x200000a8
     b88:	200000aa 	.word	0x200000aa
     b8c:	0000310c 	.word	0x0000310c
     b90:	00001319 	.word	0x00001319
     b94:	00000535 	.word	0x00000535

00000b98 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     b98:	b570      	push	{r4, r5, r6, lr}
     b9a:	b082      	sub	sp, #8
     b9c:	000e      	movs	r6, r1
     b9e:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     ba0:	4b11      	ldr	r3, [pc, #68]	; (be8 <sd_mmc_init_write_blocks+0x50>)
     ba2:	4798      	blx	r3
     ba4:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     ba6:	d116      	bne.n	bd6 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     ba8:	2d01      	cmp	r5, #1
     baa:	d917      	bls.n	bdc <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     bac:	480f      	ldr	r0, [pc, #60]	; (bec <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     bae:	4b10      	ldr	r3, [pc, #64]	; (bf0 <sd_mmc_init_write_blocks+0x58>)
     bb0:	681b      	ldr	r3, [r3, #0]
     bb2:	7adb      	ldrb	r3, [r3, #11]
     bb4:	071b      	lsls	r3, r3, #28
     bb6:	d400      	bmi.n	bba <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     bb8:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     bba:	2301      	movs	r3, #1
     bbc:	9300      	str	r3, [sp, #0]
     bbe:	002b      	movs	r3, r5
     bc0:	2280      	movs	r2, #128	; 0x80
     bc2:	0092      	lsls	r2, r2, #2
     bc4:	0031      	movs	r1, r6
     bc6:	4e0b      	ldr	r6, [pc, #44]	; (bf4 <sd_mmc_init_write_blocks+0x5c>)
     bc8:	47b0      	blx	r6
     bca:	2800      	cmp	r0, #0
     bcc:	d008      	beq.n	be0 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     bce:	4b0a      	ldr	r3, [pc, #40]	; (bf8 <sd_mmc_init_write_blocks+0x60>)
     bd0:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     bd2:	4b0a      	ldr	r3, [pc, #40]	; (bfc <sd_mmc_init_write_blocks+0x64>)
     bd4:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     bd6:	0020      	movs	r0, r4
     bd8:	b002      	add	sp, #8
     bda:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     bdc:	4808      	ldr	r0, [pc, #32]	; (c00 <sd_mmc_init_write_blocks+0x68>)
     bde:	e7e6      	b.n	bae <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     be0:	4b08      	ldr	r3, [pc, #32]	; (c04 <sd_mmc_init_write_blocks+0x6c>)
     be2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     be4:	2405      	movs	r4, #5
     be6:	e7f6      	b.n	bd6 <sd_mmc_init_write_blocks+0x3e>
     be8:	00000455 	.word	0x00000455
     bec:	00109119 	.word	0x00109119
     bf0:	20000084 	.word	0x20000084
     bf4:	00001189 	.word	0x00001189
     bf8:	200000a8 	.word	0x200000a8
     bfc:	200000aa 	.word	0x200000aa
     c00:	00089118 	.word	0x00089118
     c04:	00000535 	.word	0x00000535

00000c08 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     c08:	b510      	push	{r4, lr}
     c0a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     c0c:	4b07      	ldr	r3, [pc, #28]	; (c2c <sd_mmc_start_write_blocks+0x24>)
     c0e:	4798      	blx	r3
     c10:	2800      	cmp	r0, #0
     c12:	d104      	bne.n	c1e <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     c14:	2200      	movs	r2, #0
     c16:	4b06      	ldr	r3, [pc, #24]	; (c30 <sd_mmc_start_write_blocks+0x28>)
     c18:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     c1a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     c1c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     c1e:	4a04      	ldr	r2, [pc, #16]	; (c30 <sd_mmc_start_write_blocks+0x28>)
     c20:	8813      	ldrh	r3, [r2, #0]
     c22:	1b1c      	subs	r4, r3, r4
     c24:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     c26:	2000      	movs	r0, #0
     c28:	e7f8      	b.n	c1c <sd_mmc_start_write_blocks+0x14>
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	00001445 	.word	0x00001445
     c30:	200000a8 	.word	0x200000a8

00000c34 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     c34:	b510      	push	{r4, lr}
     c36:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     c38:	4b0e      	ldr	r3, [pc, #56]	; (c74 <sd_mmc_wait_end_of_write_blocks+0x40>)
     c3a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     c3c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     c3e:	2800      	cmp	r0, #0
     c40:	d101      	bne.n	c46 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     c42:	0018      	movs	r0, r3
     c44:	bd10      	pop	{r4, pc}
	if (abort) {
     c46:	2c00      	cmp	r4, #0
     c48:	d00a      	beq.n	c60 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     c4a:	2200      	movs	r2, #0
     c4c:	4b0a      	ldr	r3, [pc, #40]	; (c78 <sd_mmc_wait_end_of_write_blocks+0x44>)
     c4e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     c50:	4b0a      	ldr	r3, [pc, #40]	; (c7c <sd_mmc_wait_end_of_write_blocks+0x48>)
     c52:	881b      	ldrh	r3, [r3, #0]
     c54:	2b01      	cmp	r3, #1
     c56:	d009      	beq.n	c6c <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     c58:	4b09      	ldr	r3, [pc, #36]	; (c80 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     c5a:	4798      	blx	r3
	return SD_MMC_OK;
     c5c:	2300      	movs	r3, #0
     c5e:	e7f0      	b.n	c42 <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     c60:	4b05      	ldr	r3, [pc, #20]	; (c78 <sd_mmc_wait_end_of_write_blocks+0x44>)
     c62:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     c64:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     c66:	2a00      	cmp	r2, #0
     c68:	d0f2      	beq.n	c50 <sd_mmc_wait_end_of_write_blocks+0x1c>
     c6a:	e7ea      	b.n	c42 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     c6c:	4b04      	ldr	r3, [pc, #16]	; (c80 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     c6e:	4798      	blx	r3
		return SD_MMC_OK;
     c70:	2300      	movs	r3, #0
     c72:	e7e6      	b.n	c42 <sd_mmc_wait_end_of_write_blocks+0xe>
     c74:	000014c5 	.word	0x000014c5
     c78:	200000a8 	.word	0x200000a8
     c7c:	200000aa 	.word	0x200000aa
     c80:	00000535 	.word	0x00000535

00000c84 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     c84:	b510      	push	{r4, lr}
     c86:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
     c88:	4b0f      	ldr	r3, [pc, #60]	; (cc8 <sd_mmc_test_unit_ready+0x44>)
     c8a:	4798      	blx	r3
     c8c:	2801      	cmp	r0, #1
     c8e:	d019      	beq.n	cc4 <sd_mmc_test_unit_ready+0x40>
     c90:	2800      	cmp	r0, #0
     c92:	d003      	beq.n	c9c <sd_mmc_test_unit_ready+0x18>
     c94:	2802      	cmp	r0, #2
     c96:	d010      	beq.n	cba <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     c98:	2001      	movs	r0, #1
	}
}
     c9a:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
     c9c:	4b0b      	ldr	r3, [pc, #44]	; (ccc <sd_mmc_test_unit_ready+0x48>)
     c9e:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
     ca0:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
     ca2:	2b00      	cmp	r3, #0
     ca4:	d1f9      	bne.n	c9a <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     ca6:	0020      	movs	r0, r4
     ca8:	4b09      	ldr	r3, [pc, #36]	; (cd0 <sd_mmc_test_unit_ready+0x4c>)
     caa:	4798      	blx	r3
     cac:	0003      	movs	r3, r0
     cae:	2003      	movs	r0, #3
     cb0:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
     cb2:	4243      	negs	r3, r0
     cb4:	4158      	adcs	r0, r3
     cb6:	0040      	lsls	r0, r0, #1
     cb8:	e7ef      	b.n	c9a <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
     cba:	2200      	movs	r2, #0
     cbc:	4b03      	ldr	r3, [pc, #12]	; (ccc <sd_mmc_test_unit_ready+0x48>)
     cbe:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
     cc0:	2002      	movs	r0, #2
     cc2:	e7ea      	b.n	c9a <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
     cc4:	2003      	movs	r0, #3
     cc6:	e7e8      	b.n	c9a <sd_mmc_test_unit_ready+0x16>
     cc8:	00000571 	.word	0x00000571
     ccc:	200000b0 	.word	0x200000b0
     cd0:	00000a21 	.word	0x00000a21

00000cd4 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
     cd4:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
     cd6:	2000      	movs	r0, #0
     cd8:	4b01      	ldr	r3, [pc, #4]	; (ce0 <sd_mmc_test_unit_ready_0+0xc>)
     cda:	4798      	blx	r3
}
     cdc:	bd10      	pop	{r4, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	00000c85 	.word	0x00000c85

00000ce4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     ce4:	b570      	push	{r4, r5, r6, lr}
     ce6:	0004      	movs	r4, r0
     ce8:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     cea:	4b04      	ldr	r3, [pc, #16]	; (cfc <sd_mmc_read_capacity+0x18>)
     cec:	4798      	blx	r3
     cee:	0040      	lsls	r0, r0, #1
     cf0:	3801      	subs	r0, #1
     cf2:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     cf4:	0020      	movs	r0, r4
     cf6:	4b02      	ldr	r3, [pc, #8]	; (d00 <sd_mmc_read_capacity+0x1c>)
     cf8:	4798      	blx	r3
}
     cfa:	bd70      	pop	{r4, r5, r6, pc}
     cfc:	00000a49 	.word	0x00000a49
     d00:	00000c85 	.word	0x00000c85

00000d04 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
     d04:	b510      	push	{r4, lr}
     d06:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
     d08:	2000      	movs	r0, #0
     d0a:	4b01      	ldr	r3, [pc, #4]	; (d10 <sd_mmc_read_capacity_0+0xc>)
     d0c:	4798      	blx	r3
}
     d0e:	bd10      	pop	{r4, pc}
     d10:	00000ce5 	.word	0x00000ce5

00000d14 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
     d14:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
     d16:	2000      	movs	r0, #0
     d18:	4b01      	ldr	r3, [pc, #4]	; (d20 <sd_mmc_wr_protect_0+0xc>)
     d1a:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
     d1c:	bd10      	pop	{r4, pc}
     d1e:	46c0      	nop			; (mov r8, r8)
     d20:	00000a71 	.word	0x00000a71

00000d24 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     d24:	b510      	push	{r4, lr}
     d26:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     d28:	2201      	movs	r2, #1
     d2a:	4b0c      	ldr	r3, [pc, #48]	; (d5c <sd_mmc_mem_2_ram+0x38>)
     d2c:	4798      	blx	r3
     d2e:	2800      	cmp	r0, #0
     d30:	d004      	beq.n	d3c <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     d32:	3802      	subs	r0, #2
     d34:	4243      	negs	r3, r0
     d36:	4158      	adcs	r0, r3
     d38:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     d3a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     d3c:	2101      	movs	r1, #1
     d3e:	0020      	movs	r0, r4
     d40:	4b07      	ldr	r3, [pc, #28]	; (d60 <sd_mmc_mem_2_ram+0x3c>)
     d42:	4798      	blx	r3
     d44:	0003      	movs	r3, r0
		return CTRL_FAIL;
     d46:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     d48:	2b00      	cmp	r3, #0
     d4a:	d1f6      	bne.n	d3a <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
     d4c:	2000      	movs	r0, #0
     d4e:	4b05      	ldr	r3, [pc, #20]	; (d64 <sd_mmc_mem_2_ram+0x40>)
     d50:	4798      	blx	r3
     d52:	1e43      	subs	r3, r0, #1
     d54:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     d56:	b2c0      	uxtb	r0, r0
     d58:	e7ef      	b.n	d3a <sd_mmc_mem_2_ram+0x16>
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	00000a75 	.word	0x00000a75
     d60:	00000afd 	.word	0x00000afd
     d64:	00000b29 	.word	0x00000b29

00000d68 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
     d68:	b510      	push	{r4, lr}
     d6a:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
     d6c:	0001      	movs	r1, r0
     d6e:	2000      	movs	r0, #0
     d70:	4b01      	ldr	r3, [pc, #4]	; (d78 <sd_mmc_mem_2_ram_0+0x10>)
     d72:	4798      	blx	r3
}
     d74:	bd10      	pop	{r4, pc}
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	00000d25 	.word	0x00000d25

00000d7c <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     d7c:	b510      	push	{r4, lr}
     d7e:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     d80:	2201      	movs	r2, #1
     d82:	4b0c      	ldr	r3, [pc, #48]	; (db4 <sd_mmc_ram_2_mem+0x38>)
     d84:	4798      	blx	r3
     d86:	2800      	cmp	r0, #0
     d88:	d004      	beq.n	d94 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     d8a:	3802      	subs	r0, #2
     d8c:	4243      	negs	r3, r0
     d8e:	4158      	adcs	r0, r3
     d90:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     d92:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     d94:	2101      	movs	r1, #1
     d96:	0020      	movs	r0, r4
     d98:	4b07      	ldr	r3, [pc, #28]	; (db8 <sd_mmc_ram_2_mem+0x3c>)
     d9a:	4798      	blx	r3
     d9c:	0003      	movs	r3, r0
		return CTRL_FAIL;
     d9e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     da0:	2b00      	cmp	r3, #0
     da2:	d1f6      	bne.n	d92 <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
     da4:	2000      	movs	r0, #0
     da6:	4b05      	ldr	r3, [pc, #20]	; (dbc <sd_mmc_ram_2_mem+0x40>)
     da8:	4798      	blx	r3
     daa:	1e43      	subs	r3, r0, #1
     dac:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     dae:	b2c0      	uxtb	r0, r0
     db0:	e7ef      	b.n	d92 <sd_mmc_ram_2_mem+0x16>
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	00000b99 	.word	0x00000b99
     db8:	00000c09 	.word	0x00000c09
     dbc:	00000c35 	.word	0x00000c35

00000dc0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
     dc0:	b510      	push	{r4, lr}
     dc2:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
     dc4:	0001      	movs	r1, r0
     dc6:	2000      	movs	r0, #0
     dc8:	4b01      	ldr	r3, [pc, #4]	; (dd0 <sd_mmc_ram_2_mem_0+0x10>)
     dca:	4798      	blx	r3
}
     dcc:	bd10      	pop	{r4, pc}
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	00000d7d 	.word	0x00000d7d

00000dd4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
     dd4:	b500      	push	{lr}
     dd6:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
     dd8:	466b      	mov	r3, sp
     dda:	1dd9      	adds	r1, r3, #7
     ddc:	23ff      	movs	r3, #255	; 0xff
     dde:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
     de0:	2201      	movs	r2, #1
     de2:	480b      	ldr	r0, [pc, #44]	; (e10 <sd_mmc_spi_start_write_block+0x3c>)
     de4:	4b0b      	ldr	r3, [pc, #44]	; (e14 <sd_mmc_spi_start_write_block+0x40>)
     de6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
     de8:	4b0b      	ldr	r3, [pc, #44]	; (e18 <sd_mmc_spi_start_write_block+0x44>)
     dea:	881b      	ldrh	r3, [r3, #0]
     dec:	2b01      	cmp	r3, #1
     dee:	d00a      	beq.n	e06 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
     df0:	22fc      	movs	r2, #252	; 0xfc
     df2:	466b      	mov	r3, sp
     df4:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
     df6:	2201      	movs	r2, #1
     df8:	466b      	mov	r3, sp
     dfa:	1d99      	adds	r1, r3, #6
     dfc:	4804      	ldr	r0, [pc, #16]	; (e10 <sd_mmc_spi_start_write_block+0x3c>)
     dfe:	4b05      	ldr	r3, [pc, #20]	; (e14 <sd_mmc_spi_start_write_block+0x40>)
     e00:	4798      	blx	r3
}
     e02:	b003      	add	sp, #12
     e04:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
     e06:	22fe      	movs	r2, #254	; 0xfe
     e08:	466b      	mov	r3, sp
     e0a:	719a      	strb	r2, [r3, #6]
     e0c:	e7f3      	b.n	df6 <sd_mmc_spi_start_write_block+0x22>
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	200000b4 	.word	0x200000b4
     e14:	00002089 	.word	0x00002089
     e18:	200000f8 	.word	0x200000f8

00000e1c <sd_mmc_spi_wait_busy>:
{
     e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e1e:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
     e20:	466b      	mov	r3, sp
     e22:	1ddc      	adds	r4, r3, #7
     e24:	23ff      	movs	r3, #255	; 0xff
     e26:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     e28:	4e12      	ldr	r6, [pc, #72]	; (e74 <sd_mmc_spi_wait_busy+0x58>)
     e2a:	2201      	movs	r2, #1
     e2c:	0021      	movs	r1, r4
     e2e:	0030      	movs	r0, r6
     e30:	4d11      	ldr	r5, [pc, #68]	; (e78 <sd_mmc_spi_wait_busy+0x5c>)
     e32:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     e34:	23ff      	movs	r3, #255	; 0xff
     e36:	2201      	movs	r2, #1
     e38:	0021      	movs	r1, r4
     e3a:	0030      	movs	r0, r6
     e3c:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     e3e:	23ff      	movs	r3, #255	; 0xff
     e40:	2201      	movs	r2, #1
     e42:	0021      	movs	r1, r4
     e44:	0030      	movs	r0, r6
     e46:	47a8      	blx	r5
     e48:	4c0c      	ldr	r4, [pc, #48]	; (e7c <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
     e4a:	466b      	mov	r3, sp
     e4c:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     e4e:	4e09      	ldr	r6, [pc, #36]	; (e74 <sd_mmc_spi_wait_busy+0x58>)
     e50:	4f09      	ldr	r7, [pc, #36]	; (e78 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
     e52:	782b      	ldrb	r3, [r5, #0]
     e54:	2bff      	cmp	r3, #255	; 0xff
     e56:	d009      	beq.n	e6c <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     e58:	23ff      	movs	r3, #255	; 0xff
     e5a:	2201      	movs	r2, #1
     e5c:	0029      	movs	r1, r5
     e5e:	0030      	movs	r0, r6
     e60:	47b8      	blx	r7
     e62:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
     e64:	2c00      	cmp	r4, #0
     e66:	d1f4      	bne.n	e52 <sd_mmc_spi_wait_busy+0x36>
			return false;
     e68:	2000      	movs	r0, #0
     e6a:	e000      	b.n	e6e <sd_mmc_spi_wait_busy+0x52>
	return true;
     e6c:	2001      	movs	r0, #1
}
     e6e:	b003      	add	sp, #12
     e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	200000b4 	.word	0x200000b4
     e78:	00001ec1 	.word	0x00001ec1
     e7c:	00030d40 	.word	0x00030d40

00000e80 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
     e80:	b570      	push	{r4, r5, r6, lr}
     e82:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
     e84:	4b14      	ldr	r3, [pc, #80]	; (ed8 <sd_mmc_spi_stop_multiwrite_block+0x58>)
     e86:	881c      	ldrh	r4, [r3, #0]
     e88:	2c01      	cmp	r4, #1
     e8a:	d023      	beq.n	ed4 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
     e8c:	4b13      	ldr	r3, [pc, #76]	; (edc <sd_mmc_spi_stop_multiwrite_block+0x5c>)
     e8e:	8819      	ldrh	r1, [r3, #0]
     e90:	4b13      	ldr	r3, [pc, #76]	; (ee0 <sd_mmc_spi_stop_multiwrite_block+0x60>)
     e92:	6818      	ldr	r0, [r3, #0]
     e94:	4b13      	ldr	r3, [pc, #76]	; (ee4 <sd_mmc_spi_stop_multiwrite_block+0x64>)
     e96:	4798      	blx	r3
		return true; // It is not the End of multi write
     e98:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
     e9a:	4284      	cmp	r4, r0
     e9c:	d902      	bls.n	ea4 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
     e9e:	0018      	movs	r0, r3
     ea0:	b002      	add	sp, #8
     ea2:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
     ea4:	466b      	mov	r3, sp
     ea6:	1ddc      	adds	r4, r3, #7
     ea8:	23ff      	movs	r3, #255	; 0xff
     eaa:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     eac:	4e0e      	ldr	r6, [pc, #56]	; (ee8 <sd_mmc_spi_stop_multiwrite_block+0x68>)
     eae:	2201      	movs	r2, #1
     eb0:	0021      	movs	r1, r4
     eb2:	0030      	movs	r0, r6
     eb4:	4d0d      	ldr	r5, [pc, #52]	; (eec <sd_mmc_spi_stop_multiwrite_block+0x6c>)
     eb6:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
     eb8:	23fd      	movs	r3, #253	; 0xfd
     eba:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     ebc:	2201      	movs	r2, #1
     ebe:	0021      	movs	r1, r4
     ec0:	0030      	movs	r0, r6
     ec2:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
     ec4:	4b0a      	ldr	r3, [pc, #40]	; (ef0 <sd_mmc_spi_stop_multiwrite_block+0x70>)
     ec6:	4798      	blx	r3
     ec8:	1e03      	subs	r3, r0, #0
     eca:	d1e8      	bne.n	e9e <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
     ecc:	2105      	movs	r1, #5
     ece:	4a09      	ldr	r2, [pc, #36]	; (ef4 <sd_mmc_spi_stop_multiwrite_block+0x74>)
     ed0:	7011      	strb	r1, [r2, #0]
		return false;
     ed2:	e7e4      	b.n	e9e <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
     ed4:	2301      	movs	r3, #1
     ed6:	e7e2      	b.n	e9e <sd_mmc_spi_stop_multiwrite_block+0x1e>
     ed8:	200000f8 	.word	0x200000f8
     edc:	200000f0 	.word	0x200000f0
     ee0:	20000100 	.word	0x20000100
     ee4:	00004e7d 	.word	0x00004e7d
     ee8:	200000b4 	.word	0x200000b4
     eec:	00002089 	.word	0x00002089
     ef0:	00000e1d 	.word	0x00000e1d
     ef4:	200000f7 	.word	0x200000f7

00000ef8 <sd_mmc_spi_start_read_block>:
{
     ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
     efa:	b083      	sub	sp, #12
	token = 0;
     efc:	2200      	movs	r2, #0
     efe:	466b      	mov	r3, sp
     f00:	71da      	strb	r2, [r3, #7]
     f02:	4c14      	ldr	r4, [pc, #80]	; (f54 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
     f04:	466b      	mov	r3, sp
     f06:	1ddd      	adds	r5, r3, #7
     f08:	4e13      	ldr	r6, [pc, #76]	; (f58 <sd_mmc_spi_start_read_block+0x60>)
     f0a:	4f14      	ldr	r7, [pc, #80]	; (f5c <sd_mmc_spi_start_read_block+0x64>)
     f0c:	23ff      	movs	r3, #255	; 0xff
     f0e:	2201      	movs	r2, #1
     f10:	0029      	movs	r1, r5
     f12:	0030      	movs	r0, r6
     f14:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
     f16:	782b      	ldrb	r3, [r5, #0]
     f18:	220f      	movs	r2, #15
     f1a:	0019      	movs	r1, r3
     f1c:	4391      	bics	r1, r2
     f1e:	1e0a      	subs	r2, r1, #0
     f20:	d009      	beq.n	f36 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
     f22:	2bfe      	cmp	r3, #254	; 0xfe
     f24:	d013      	beq.n	f4e <sd_mmc_spi_start_read_block+0x56>
     f26:	3c01      	subs	r4, #1
		if (i-- == 0) {
     f28:	2c00      	cmp	r4, #0
     f2a:	d1ef      	bne.n	f0c <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
     f2c:	2204      	movs	r2, #4
     f2e:	4b0c      	ldr	r3, [pc, #48]	; (f60 <sd_mmc_spi_start_read_block+0x68>)
     f30:	701a      	strb	r2, [r3, #0]
			return false;
     f32:	2000      	movs	r0, #0
     f34:	e00c      	b.n	f50 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
     f36:	075b      	lsls	r3, r3, #29
     f38:	d004      	beq.n	f44 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
     f3a:	3207      	adds	r2, #7
     f3c:	4b08      	ldr	r3, [pc, #32]	; (f60 <sd_mmc_spi_start_read_block+0x68>)
     f3e:	701a      	strb	r2, [r3, #0]
			return false;
     f40:	2000      	movs	r0, #0
     f42:	e005      	b.n	f50 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
     f44:	220b      	movs	r2, #11
     f46:	4b06      	ldr	r3, [pc, #24]	; (f60 <sd_mmc_spi_start_read_block+0x68>)
     f48:	701a      	strb	r2, [r3, #0]
			return false;
     f4a:	2000      	movs	r0, #0
     f4c:	e000      	b.n	f50 <sd_mmc_spi_start_read_block+0x58>
	return true;
     f4e:	2001      	movs	r0, #1
}
     f50:	b003      	add	sp, #12
     f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f54:	0007a120 	.word	0x0007a120
     f58:	200000b4 	.word	0x200000b4
     f5c:	00001ec1 	.word	0x00001ec1
     f60:	200000f7 	.word	0x200000f7

00000f64 <sd_mmc_spi_stop_write_block>:
{
     f64:	b530      	push	{r4, r5, lr}
     f66:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
     f68:	a901      	add	r1, sp, #4
     f6a:	2301      	movs	r3, #1
     f6c:	425b      	negs	r3, r3
     f6e:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
     f70:	4d14      	ldr	r5, [pc, #80]	; (fc4 <sd_mmc_spi_stop_write_block+0x60>)
     f72:	2202      	movs	r2, #2
     f74:	0028      	movs	r0, r5
     f76:	4b14      	ldr	r3, [pc, #80]	; (fc8 <sd_mmc_spi_stop_write_block+0x64>)
     f78:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
     f7a:	466b      	mov	r3, sp
     f7c:	1ddc      	adds	r4, r3, #7
     f7e:	23ff      	movs	r3, #255	; 0xff
     f80:	2201      	movs	r2, #1
     f82:	0021      	movs	r1, r4
     f84:	0028      	movs	r0, r5
     f86:	4d11      	ldr	r5, [pc, #68]	; (fcc <sd_mmc_spi_stop_write_block+0x68>)
     f88:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
     f8a:	7822      	ldrb	r2, [r4, #0]
     f8c:	2311      	movs	r3, #17
     f8e:	4013      	ands	r3, r2
     f90:	2b01      	cmp	r3, #1
     f92:	d005      	beq.n	fa0 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     f94:	2201      	movs	r2, #1
     f96:	4b0e      	ldr	r3, [pc, #56]	; (fd0 <sd_mmc_spi_stop_write_block+0x6c>)
     f98:	701a      	strb	r2, [r3, #0]
		return false;
     f9a:	2000      	movs	r0, #0
}
     f9c:	b003      	add	sp, #12
     f9e:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
     fa0:	231e      	movs	r3, #30
     fa2:	401a      	ands	r2, r3
     fa4:	2a04      	cmp	r2, #4
     fa6:	d00b      	beq.n	fc0 <sd_mmc_spi_stop_write_block+0x5c>
     fa8:	2a0a      	cmp	r2, #10
     faa:	d104      	bne.n	fb6 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
     fac:	3a02      	subs	r2, #2
     fae:	4b08      	ldr	r3, [pc, #32]	; (fd0 <sd_mmc_spi_stop_write_block+0x6c>)
     fb0:	701a      	strb	r2, [r3, #0]
		return false;
     fb2:	2000      	movs	r0, #0
     fb4:	e7f2      	b.n	f9c <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
     fb6:	220a      	movs	r2, #10
     fb8:	4b05      	ldr	r3, [pc, #20]	; (fd0 <sd_mmc_spi_stop_write_block+0x6c>)
     fba:	701a      	strb	r2, [r3, #0]
		return false;
     fbc:	2000      	movs	r0, #0
     fbe:	e7ed      	b.n	f9c <sd_mmc_spi_stop_write_block+0x38>
	return true;
     fc0:	2001      	movs	r0, #1
     fc2:	e7eb      	b.n	f9c <sd_mmc_spi_stop_write_block+0x38>
     fc4:	200000b4 	.word	0x200000b4
     fc8:	00002089 	.word	0x00002089
     fcc:	00001ec1 	.word	0x00001ec1
     fd0:	200000f7 	.word	0x200000f7

00000fd4 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
     fd4:	b570      	push	{r4, r5, r6, lr}
     fd6:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     fd8:	2300      	movs	r3, #0
     fda:	4a2d      	ldr	r2, [pc, #180]	; (1090 <sd_mmc_spi_init+0xbc>)
     fdc:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     fde:	ac02      	add	r4, sp, #8
     fe0:	2501      	movs	r5, #1
     fe2:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     fe4:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     fe6:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     fe8:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     fea:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     fec:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     fee:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     ff0:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     ff2:	2224      	movs	r2, #36	; 0x24
     ff4:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     ff6:	3a18      	subs	r2, #24
     ff8:	2100      	movs	r1, #0
     ffa:	a808      	add	r0, sp, #32
     ffc:	4b25      	ldr	r3, [pc, #148]	; (1094 <sd_mmc_spi_init+0xc0>)
     ffe:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    1000:	2380      	movs	r3, #128	; 0x80
    1002:	025b      	lsls	r3, r3, #9
    1004:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    1006:	4b24      	ldr	r3, [pc, #144]	; (1098 <sd_mmc_spi_init+0xc4>)
    1008:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    100a:	4b24      	ldr	r3, [pc, #144]	; (109c <sd_mmc_spi_init+0xc8>)
    100c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    100e:	4b24      	ldr	r3, [pc, #144]	; (10a0 <sd_mmc_spi_init+0xcc>)
    1010:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    1012:	4b24      	ldr	r3, [pc, #144]	; (10a4 <sd_mmc_spi_init+0xd0>)
    1014:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    1016:	4b24      	ldr	r3, [pc, #144]	; (10a8 <sd_mmc_spi_init+0xd4>)
    1018:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    101a:	4e24      	ldr	r6, [pc, #144]	; (10ac <sd_mmc_spi_init+0xd8>)
    101c:	0022      	movs	r2, r4
    101e:	4924      	ldr	r1, [pc, #144]	; (10b0 <sd_mmc_spi_init+0xdc>)
    1020:	0030      	movs	r0, r6
    1022:	4b24      	ldr	r3, [pc, #144]	; (10b4 <sd_mmc_spi_init+0xe0>)
    1024:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1026:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1028:	0020      	movs	r0, r4
    102a:	4b23      	ldr	r3, [pc, #140]	; (10b8 <sd_mmc_spi_init+0xe4>)
    102c:	4798      	blx	r3
    102e:	231f      	movs	r3, #31
    1030:	4018      	ands	r0, r3
    1032:	4085      	lsls	r5, r0
    1034:	4b21      	ldr	r3, [pc, #132]	; (10bc <sd_mmc_spi_init+0xe8>)
    1036:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1038:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    103a:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    103c:	2b00      	cmp	r3, #0
    103e:	d1fc      	bne.n	103a <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1040:	6823      	ldr	r3, [r4, #0]
    1042:	2202      	movs	r2, #2
    1044:	4313      	orrs	r3, r2
    1046:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    1048:	4a1d      	ldr	r2, [pc, #116]	; (10c0 <sd_mmc_spi_init+0xec>)
    104a:	2300      	movs	r3, #0
    104c:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    104e:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    1050:	491c      	ldr	r1, [pc, #112]	; (10c4 <sd_mmc_spi_init+0xf0>)
    1052:	7808      	ldrb	r0, [r1, #0]
    1054:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    1056:	4c1c      	ldr	r4, [pc, #112]	; (10c8 <sd_mmc_spi_init+0xf4>)
    1058:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    105a:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    105c:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    105e:	a901      	add	r1, sp, #4
    1060:	2201      	movs	r2, #1
    1062:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1064:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1066:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1068:	4b18      	ldr	r3, [pc, #96]	; (10cc <sd_mmc_spi_init+0xf8>)
    106a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    106c:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    106e:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1070:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1072:	2900      	cmp	r1, #0
    1074:	d104      	bne.n	1080 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    1076:	0953      	lsrs	r3, r2, #5
    1078:	01db      	lsls	r3, r3, #7
    107a:	4915      	ldr	r1, [pc, #84]	; (10d0 <sd_mmc_spi_init+0xfc>)
    107c:	468c      	mov	ip, r1
    107e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1080:	211f      	movs	r1, #31
    1082:	4011      	ands	r1, r2
    1084:	2201      	movs	r2, #1
    1086:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1088:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    108a:	b010      	add	sp, #64	; 0x40
    108c:	bd70      	pop	{r4, r5, r6, pc}
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	200000f7 	.word	0x200000f7
    1094:	00005219 	.word	0x00005219
    1098:	00100002 	.word	0x00100002
    109c:	00110002 	.word	0x00110002
    10a0:	00120002 	.word	0x00120002
    10a4:	00130002 	.word	0x00130002
    10a8:	00061a80 	.word	0x00061a80
    10ac:	200000b4 	.word	0x200000b4
    10b0:	42000c00 	.word	0x42000c00
    10b4:	00001ce9 	.word	0x00001ce9
    10b8:	00001ba1 	.word	0x00001ba1
    10bc:	e000e100 	.word	0xe000e100
    10c0:	20000104 	.word	0x20000104
    10c4:	20000000 	.word	0x20000000
    10c8:	200000f4 	.word	0x200000f4
    10cc:	000015f1 	.word	0x000015f1
    10d0:	41004400 	.word	0x41004400

000010d4 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    10d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10d6:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    10d8:	2200      	movs	r2, #0
    10da:	4b0d      	ldr	r3, [pc, #52]	; (1110 <sd_mmc_spi_select_device+0x3c>)
    10dc:	701a      	strb	r2, [r3, #0]
    10de:	000c      	movs	r4, r1
    10e0:	4b0c      	ldr	r3, [pc, #48]	; (1114 <sd_mmc_spi_select_device+0x40>)
    10e2:	4299      	cmp	r1, r3
    10e4:	d900      	bls.n	10e8 <sd_mmc_spi_select_device+0x14>
    10e6:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    10e8:	4d0b      	ldr	r5, [pc, #44]	; (1118 <sd_mmc_spi_select_device+0x44>)
    10ea:	4e0c      	ldr	r6, [pc, #48]	; (111c <sd_mmc_spi_select_device+0x48>)
    10ec:	e001      	b.n	10f2 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    10ee:	08e3      	lsrs	r3, r4, #3
    10f0:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    10f2:	0021      	movs	r1, r4
    10f4:	0028      	movs	r0, r5
    10f6:	47b0      	blx	r6
    10f8:	2817      	cmp	r0, #23
    10fa:	d0f8      	beq.n	10ee <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    10fc:	0079      	lsls	r1, r7, #1
    10fe:	19cf      	adds	r7, r1, r7
    1100:	4907      	ldr	r1, [pc, #28]	; (1120 <sd_mmc_spi_select_device+0x4c>)
    1102:	19c9      	adds	r1, r1, r7
    1104:	2201      	movs	r2, #1
    1106:	4804      	ldr	r0, [pc, #16]	; (1118 <sd_mmc_spi_select_device+0x44>)
    1108:	4b06      	ldr	r3, [pc, #24]	; (1124 <sd_mmc_spi_select_device+0x50>)
    110a:	4798      	blx	r3
}
    110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	200000f7 	.word	0x200000f7
    1114:	00989680 	.word	0x00989680
    1118:	200000b4 	.word	0x200000b4
    111c:	00001c31 	.word	0x00001c31
    1120:	200000f4 	.word	0x200000f4
    1124:	00001f95 	.word	0x00001f95

00001128 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    1128:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    112a:	2200      	movs	r2, #0
    112c:	4b04      	ldr	r3, [pc, #16]	; (1140 <sd_mmc_spi_deselect_device+0x18>)
    112e:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    1130:	0041      	lsls	r1, r0, #1
    1132:	1808      	adds	r0, r1, r0
    1134:	4903      	ldr	r1, [pc, #12]	; (1144 <sd_mmc_spi_deselect_device+0x1c>)
    1136:	1809      	adds	r1, r1, r0
    1138:	4803      	ldr	r0, [pc, #12]	; (1148 <sd_mmc_spi_deselect_device+0x20>)
    113a:	4b04      	ldr	r3, [pc, #16]	; (114c <sd_mmc_spi_deselect_device+0x24>)
    113c:	4798      	blx	r3
}
    113e:	bd10      	pop	{r4, pc}
    1140:	200000f7 	.word	0x200000f7
    1144:	200000f4 	.word	0x200000f4
    1148:	200000b4 	.word	0x200000b4
    114c:	00001f95 	.word	0x00001f95

00001150 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    1150:	b570      	push	{r4, r5, r6, lr}
    1152:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    1154:	22ff      	movs	r2, #255	; 0xff
    1156:	466b      	mov	r3, sp
    1158:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    115a:	2200      	movs	r2, #0
    115c:	4b07      	ldr	r3, [pc, #28]	; (117c <sd_mmc_spi_send_clock+0x2c>)
    115e:	701a      	strb	r2, [r3, #0]
    1160:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    1162:	4e07      	ldr	r6, [pc, #28]	; (1180 <sd_mmc_spi_send_clock+0x30>)
    1164:	4d07      	ldr	r5, [pc, #28]	; (1184 <sd_mmc_spi_send_clock+0x34>)
    1166:	2201      	movs	r2, #1
    1168:	466b      	mov	r3, sp
    116a:	1dd9      	adds	r1, r3, #7
    116c:	0030      	movs	r0, r6
    116e:	47a8      	blx	r5
    1170:	3c01      	subs	r4, #1
    1172:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    1174:	2c00      	cmp	r4, #0
    1176:	d1f6      	bne.n	1166 <sd_mmc_spi_send_clock+0x16>
	}
}
    1178:	b002      	add	sp, #8
    117a:	bd70      	pop	{r4, r5, r6, pc}
    117c:	200000f7 	.word	0x200000f7
    1180:	200000b4 	.word	0x200000b4
    1184:	00002089 	.word	0x00002089

00001188 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    1188:	b5f0      	push	{r4, r5, r6, r7, lr}
    118a:	46c6      	mov	lr, r8
    118c:	b500      	push	{lr}
    118e:	b086      	sub	sp, #24
    1190:	4680      	mov	r8, r0
    1192:	9200      	str	r2, [sp, #0]
    1194:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    1196:	22ff      	movs	r2, #255	; 0xff
    1198:	230f      	movs	r3, #15
    119a:	a802      	add	r0, sp, #8
    119c:	4684      	mov	ip, r0
    119e:	4463      	add	r3, ip
    11a0:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    11a2:	2200      	movs	r2, #0
    11a4:	4b53      	ldr	r3, [pc, #332]	; (12f4 <sd_mmc_spi_adtc_start+0x16c>)
    11a6:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    11a8:	ab04      	add	r3, sp, #16
    11aa:	323f      	adds	r2, #63	; 0x3f
    11ac:	4640      	mov	r0, r8
    11ae:	4002      	ands	r2, r0
    11b0:	2040      	movs	r0, #64	; 0x40
    11b2:	4302      	orrs	r2, r0
    11b4:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    11b6:	0e0a      	lsrs	r2, r1, #24
    11b8:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    11ba:	0c0a      	lsrs	r2, r1, #16
    11bc:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    11be:	0a0a      	lsrs	r2, r1, #8
    11c0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    11c2:	7119      	strb	r1, [r3, #4]
    11c4:	2700      	movs	r7, #0
	crc = 0;
    11c6:	2300      	movs	r3, #0
		value = *buf++;
    11c8:	a904      	add	r1, sp, #16
    11ca:	2208      	movs	r2, #8
				crc ^= 0x09;
    11cc:	2409      	movs	r4, #9
    11ce:	e011      	b.n	11f4 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    11d0:	0076      	lsls	r6, r6, #1
    11d2:	b2f6      	uxtb	r6, r6
    11d4:	3801      	subs	r0, #1
    11d6:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    11d8:	2800      	cmp	r0, #0
    11da:	d008      	beq.n	11ee <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    11dc:	005b      	lsls	r3, r3, #1
    11de:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    11e0:	001d      	movs	r5, r3
    11e2:	4075      	eors	r5, r6
    11e4:	062d      	lsls	r5, r5, #24
    11e6:	d5f3      	bpl.n	11d0 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    11e8:	4063      	eors	r3, r4
    11ea:	b2db      	uxtb	r3, r3
    11ec:	e7f0      	b.n	11d0 <sd_mmc_spi_adtc_start+0x48>
    11ee:	3701      	adds	r7, #1
	while (size--) {
    11f0:	2f05      	cmp	r7, #5
    11f2:	d002      	beq.n	11fa <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    11f4:	5c7e      	ldrb	r6, [r7, r1]
    11f6:	0010      	movs	r0, r2
    11f8:	e7f0      	b.n	11dc <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    11fa:	005b      	lsls	r3, r3, #1
    11fc:	2201      	movs	r2, #1
    11fe:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    1200:	ac04      	add	r4, sp, #16
    1202:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    1204:	4e3c      	ldr	r6, [pc, #240]	; (12f8 <sd_mmc_spi_adtc_start+0x170>)
    1206:	2201      	movs	r2, #1
    1208:	210f      	movs	r1, #15
    120a:	ab02      	add	r3, sp, #8
    120c:	469c      	mov	ip, r3
    120e:	4461      	add	r1, ip
    1210:	0030      	movs	r0, r6
    1212:	4f3a      	ldr	r7, [pc, #232]	; (12fc <sd_mmc_spi_adtc_start+0x174>)
    1214:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    1216:	2206      	movs	r2, #6
    1218:	0021      	movs	r1, r4
    121a:	0030      	movs	r0, r6
    121c:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    121e:	ab02      	add	r3, sp, #8
    1220:	1dd9      	adds	r1, r3, #7
    1222:	23ff      	movs	r3, #255	; 0xff
    1224:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    1226:	2201      	movs	r2, #1
    1228:	0030      	movs	r0, r6
    122a:	4e35      	ldr	r6, [pc, #212]	; (1300 <sd_mmc_spi_adtc_start+0x178>)
    122c:	47b0      	blx	r6
    122e:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    1230:	ab02      	add	r3, sp, #8
    1232:	1dde      	adds	r6, r3, #7
    1234:	4f30      	ldr	r7, [pc, #192]	; (12f8 <sd_mmc_spi_adtc_start+0x170>)
    1236:	4d32      	ldr	r5, [pc, #200]	; (1300 <sd_mmc_spi_adtc_start+0x178>)
    1238:	23ff      	movs	r3, #255	; 0xff
    123a:	2201      	movs	r2, #1
    123c:	0031      	movs	r1, r6
    123e:	0038      	movs	r0, r7
    1240:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    1242:	7833      	ldrb	r3, [r6, #0]
    1244:	b25a      	sxtb	r2, r3
    1246:	2a00      	cmp	r2, #0
    1248:	da0b      	bge.n	1262 <sd_mmc_spi_adtc_start+0xda>
    124a:	3c01      	subs	r4, #1
    124c:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    124e:	2c00      	cmp	r4, #0
    1250:	d1f2      	bne.n	1238 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    1252:	2202      	movs	r2, #2
    1254:	4b27      	ldr	r3, [pc, #156]	; (12f4 <sd_mmc_spi_adtc_start+0x16c>)
    1256:	701a      	strb	r2, [r3, #0]
			return false;
    1258:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    125a:	b006      	add	sp, #24
    125c:	bc04      	pop	{r2}
    125e:	4690      	mov	r8, r2
    1260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    1262:	4a28      	ldr	r2, [pc, #160]	; (1304 <sd_mmc_spi_adtc_start+0x17c>)
    1264:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    1266:	071a      	lsls	r2, r3, #28
    1268:	d41a      	bmi.n	12a0 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    126a:	075a      	lsls	r2, r3, #29
    126c:	d41d      	bmi.n	12aa <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    126e:	2201      	movs	r2, #1
    1270:	4393      	bics	r3, r2
    1272:	d11f      	bne.n	12b4 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    1274:	4643      	mov	r3, r8
    1276:	049b      	lsls	r3, r3, #18
    1278:	d420      	bmi.n	12bc <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    127a:	4643      	mov	r3, r8
    127c:	059b      	lsls	r3, r3, #22
    127e:	d425      	bmi.n	12cc <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    1280:	4643      	mov	r3, r8
    1282:	055b      	lsls	r3, r3, #21
    1284:	d42b      	bmi.n	12de <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    1286:	4b20      	ldr	r3, [pc, #128]	; (1308 <sd_mmc_spi_adtc_start+0x180>)
    1288:	466a      	mov	r2, sp
    128a:	8812      	ldrh	r2, [r2, #0]
    128c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    128e:	4b1f      	ldr	r3, [pc, #124]	; (130c <sd_mmc_spi_adtc_start+0x184>)
    1290:	466a      	mov	r2, sp
    1292:	8892      	ldrh	r2, [r2, #4]
    1294:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    1296:	2200      	movs	r2, #0
    1298:	4b1d      	ldr	r3, [pc, #116]	; (1310 <sd_mmc_spi_adtc_start+0x188>)
    129a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    129c:	2001      	movs	r0, #1
    129e:	e7dc      	b.n	125a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    12a0:	2206      	movs	r2, #6
    12a2:	4b14      	ldr	r3, [pc, #80]	; (12f4 <sd_mmc_spi_adtc_start+0x16c>)
    12a4:	701a      	strb	r2, [r3, #0]
		return false;
    12a6:	2000      	movs	r0, #0
    12a8:	e7d7      	b.n	125a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    12aa:	2209      	movs	r2, #9
    12ac:	4b11      	ldr	r3, [pc, #68]	; (12f4 <sd_mmc_spi_adtc_start+0x16c>)
    12ae:	701a      	strb	r2, [r3, #0]
		return false;
    12b0:	2000      	movs	r0, #0
    12b2:	e7d2      	b.n	125a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    12b4:	4b0f      	ldr	r3, [pc, #60]	; (12f4 <sd_mmc_spi_adtc_start+0x16c>)
    12b6:	701a      	strb	r2, [r3, #0]
		return false;
    12b8:	2000      	movs	r0, #0
    12ba:	e7ce      	b.n	125a <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    12bc:	4b15      	ldr	r3, [pc, #84]	; (1314 <sd_mmc_spi_adtc_start+0x18c>)
    12be:	4798      	blx	r3
    12c0:	2800      	cmp	r0, #0
    12c2:	d1da      	bne.n	127a <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    12c4:	2203      	movs	r2, #3
    12c6:	4b0b      	ldr	r3, [pc, #44]	; (12f4 <sd_mmc_spi_adtc_start+0x16c>)
    12c8:	701a      	strb	r2, [r3, #0]
			return false;
    12ca:	e7c6      	b.n	125a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    12cc:	490d      	ldr	r1, [pc, #52]	; (1304 <sd_mmc_spi_adtc_start+0x17c>)
    12ce:	2300      	movs	r3, #0
    12d0:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    12d2:	33ff      	adds	r3, #255	; 0xff
    12d4:	2201      	movs	r2, #1
    12d6:	4808      	ldr	r0, [pc, #32]	; (12f8 <sd_mmc_spi_adtc_start+0x170>)
    12d8:	4e09      	ldr	r6, [pc, #36]	; (1300 <sd_mmc_spi_adtc_start+0x178>)
    12da:	47b0      	blx	r6
    12dc:	e7d0      	b.n	1280 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    12de:	4e09      	ldr	r6, [pc, #36]	; (1304 <sd_mmc_spi_adtc_start+0x17c>)
    12e0:	23ff      	movs	r3, #255	; 0xff
    12e2:	2204      	movs	r2, #4
    12e4:	0031      	movs	r1, r6
    12e6:	4804      	ldr	r0, [pc, #16]	; (12f8 <sd_mmc_spi_adtc_start+0x170>)
    12e8:	4f05      	ldr	r7, [pc, #20]	; (1300 <sd_mmc_spi_adtc_start+0x178>)
    12ea:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    12ec:	6833      	ldr	r3, [r6, #0]
    12ee:	ba1b      	rev	r3, r3
    12f0:	6033      	str	r3, [r6, #0]
    12f2:	e7c8      	b.n	1286 <sd_mmc_spi_adtc_start+0xfe>
    12f4:	200000f7 	.word	0x200000f7
    12f8:	200000b4 	.word	0x200000b4
    12fc:	00002089 	.word	0x00002089
    1300:	00001ec1 	.word	0x00001ec1
    1304:	200000fc 	.word	0x200000fc
    1308:	200000f0 	.word	0x200000f0
    130c:	200000f8 	.word	0x200000f8
    1310:	20000100 	.word	0x20000100
    1314:	00000e1d 	.word	0x00000e1d

00001318 <sd_mmc_spi_send_cmd>:
{
    1318:	b510      	push	{r4, lr}
    131a:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    131c:	2300      	movs	r3, #0
    131e:	9300      	str	r3, [sp, #0]
    1320:	2200      	movs	r2, #0
    1322:	4c02      	ldr	r4, [pc, #8]	; (132c <sd_mmc_spi_send_cmd+0x14>)
    1324:	47a0      	blx	r4
}
    1326:	b002      	add	sp, #8
    1328:	bd10      	pop	{r4, pc}
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	00001189 	.word	0x00001189

00001330 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    1330:	4b01      	ldr	r3, [pc, #4]	; (1338 <sd_mmc_spi_get_response+0x8>)
    1332:	6818      	ldr	r0, [r3, #0]
}
    1334:	4770      	bx	lr
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	200000fc 	.word	0x200000fc

0000133c <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    133c:	b510      	push	{r4, lr}
    133e:	b084      	sub	sp, #16
    1340:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1342:	2200      	movs	r2, #0
    1344:	4b14      	ldr	r3, [pc, #80]	; (1398 <sd_mmc_spi_read_word+0x5c>)
    1346:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1348:	4b14      	ldr	r3, [pc, #80]	; (139c <sd_mmc_spi_read_word+0x60>)
    134a:	8819      	ldrh	r1, [r3, #0]
    134c:	4b14      	ldr	r3, [pc, #80]	; (13a0 <sd_mmc_spi_read_word+0x64>)
    134e:	6818      	ldr	r0, [r3, #0]
    1350:	4b14      	ldr	r3, [pc, #80]	; (13a4 <sd_mmc_spi_read_word+0x68>)
    1352:	4798      	blx	r3
    1354:	2900      	cmp	r1, #0
    1356:	d103      	bne.n	1360 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    1358:	4b13      	ldr	r3, [pc, #76]	; (13a8 <sd_mmc_spi_read_word+0x6c>)
    135a:	4798      	blx	r3
    135c:	2800      	cmp	r0, #0
    135e:	d010      	beq.n	1382 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    1360:	23ff      	movs	r3, #255	; 0xff
    1362:	2204      	movs	r2, #4
    1364:	a901      	add	r1, sp, #4
    1366:	4811      	ldr	r0, [pc, #68]	; (13ac <sd_mmc_spi_read_word+0x70>)
    1368:	4c11      	ldr	r4, [pc, #68]	; (13b0 <sd_mmc_spi_read_word+0x74>)
    136a:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    136c:	4b0c      	ldr	r3, [pc, #48]	; (13a0 <sd_mmc_spi_read_word+0x64>)
    136e:	681a      	ldr	r2, [r3, #0]
    1370:	1d10      	adds	r0, r2, #4
    1372:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1374:	4b09      	ldr	r3, [pc, #36]	; (139c <sd_mmc_spi_read_word+0x60>)
    1376:	8819      	ldrh	r1, [r3, #0]
    1378:	4b0a      	ldr	r3, [pc, #40]	; (13a4 <sd_mmc_spi_read_word+0x68>)
    137a:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    137c:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    137e:	2900      	cmp	r1, #0
    1380:	d001      	beq.n	1386 <sd_mmc_spi_read_word+0x4a>
}
    1382:	b004      	add	sp, #16
    1384:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1386:	23ff      	movs	r3, #255	; 0xff
    1388:	2202      	movs	r2, #2
    138a:	a903      	add	r1, sp, #12
    138c:	4807      	ldr	r0, [pc, #28]	; (13ac <sd_mmc_spi_read_word+0x70>)
    138e:	4c08      	ldr	r4, [pc, #32]	; (13b0 <sd_mmc_spi_read_word+0x74>)
    1390:	47a0      	blx	r4
	return true;
    1392:	2001      	movs	r0, #1
    1394:	e7f5      	b.n	1382 <sd_mmc_spi_read_word+0x46>
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	200000f7 	.word	0x200000f7
    139c:	200000f0 	.word	0x200000f0
    13a0:	20000100 	.word	0x20000100
    13a4:	00004f89 	.word	0x00004f89
    13a8:	00000ef9 	.word	0x00000ef9
    13ac:	200000b4 	.word	0x200000b4
    13b0:	00001ec1 	.word	0x00001ec1

000013b4 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    13b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13b6:	46de      	mov	lr, fp
    13b8:	4657      	mov	r7, sl
    13ba:	4646      	mov	r6, r8
    13bc:	b5c0      	push	{r6, r7, lr}
    13be:	b082      	sub	sp, #8
    13c0:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    13c2:	2200      	movs	r2, #0
    13c4:	4b17      	ldr	r3, [pc, #92]	; (1424 <sd_mmc_spi_start_read_blocks+0x70>)
    13c6:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    13c8:	1e4c      	subs	r4, r1, #1
    13ca:	b2a4      	uxth	r4, r4
    13cc:	2900      	cmp	r1, #0
    13ce:	d026      	beq.n	141e <sd_mmc_spi_start_read_blocks+0x6a>
    13d0:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    13d2:	4b15      	ldr	r3, [pc, #84]	; (1428 <sd_mmc_spi_start_read_blocks+0x74>)
    13d4:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    13d6:	4f15      	ldr	r7, [pc, #84]	; (142c <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    13d8:	47d0      	blx	sl
    13da:	4680      	mov	r8, r0
    13dc:	2800      	cmp	r0, #0
    13de:	d017      	beq.n	1410 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    13e0:	883a      	ldrh	r2, [r7, #0]
    13e2:	465b      	mov	r3, fp
    13e4:	1999      	adds	r1, r3, r6
    13e6:	23ff      	movs	r3, #255	; 0xff
    13e8:	4811      	ldr	r0, [pc, #68]	; (1430 <sd_mmc_spi_start_read_blocks+0x7c>)
    13ea:	4d12      	ldr	r5, [pc, #72]	; (1434 <sd_mmc_spi_start_read_blocks+0x80>)
    13ec:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    13ee:	883b      	ldrh	r3, [r7, #0]
    13f0:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    13f2:	4a11      	ldr	r2, [pc, #68]	; (1438 <sd_mmc_spi_start_read_blocks+0x84>)
    13f4:	6811      	ldr	r1, [r2, #0]
    13f6:	468c      	mov	ip, r1
    13f8:	4463      	add	r3, ip
    13fa:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    13fc:	23ff      	movs	r3, #255	; 0xff
    13fe:	2202      	movs	r2, #2
    1400:	a901      	add	r1, sp, #4
    1402:	480b      	ldr	r0, [pc, #44]	; (1430 <sd_mmc_spi_start_read_blocks+0x7c>)
    1404:	47a8      	blx	r5
	while (nb_block--) {
    1406:	3c01      	subs	r4, #1
    1408:	b2a4      	uxth	r4, r4
    140a:	4b0c      	ldr	r3, [pc, #48]	; (143c <sd_mmc_spi_start_read_blocks+0x88>)
    140c:	429c      	cmp	r4, r3
    140e:	d1e3      	bne.n	13d8 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    1410:	4640      	mov	r0, r8
    1412:	b002      	add	sp, #8
    1414:	bc1c      	pop	{r2, r3, r4}
    1416:	4690      	mov	r8, r2
    1418:	469a      	mov	sl, r3
    141a:	46a3      	mov	fp, r4
    141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    141e:	2301      	movs	r3, #1
    1420:	4698      	mov	r8, r3
    1422:	e7f5      	b.n	1410 <sd_mmc_spi_start_read_blocks+0x5c>
    1424:	200000f7 	.word	0x200000f7
    1428:	00000ef9 	.word	0x00000ef9
    142c:	200000f0 	.word	0x200000f0
    1430:	200000b4 	.word	0x200000b4
    1434:	00001ec1 	.word	0x00001ec1
    1438:	20000100 	.word	0x20000100
    143c:	0000ffff 	.word	0x0000ffff

00001440 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    1440:	2001      	movs	r0, #1
    1442:	4770      	bx	lr

00001444 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    1444:	b5f0      	push	{r4, r5, r6, r7, lr}
    1446:	46c6      	mov	lr, r8
    1448:	b500      	push	{lr}
    144a:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    144c:	2200      	movs	r2, #0
    144e:	4b15      	ldr	r3, [pc, #84]	; (14a4 <sd_mmc_spi_start_write_blocks+0x60>)
    1450:	701a      	strb	r2, [r3, #0]
	pos = 0;
    1452:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    1454:	4f14      	ldr	r7, [pc, #80]	; (14a8 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1456:	4e15      	ldr	r6, [pc, #84]	; (14ac <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    1458:	e000      	b.n	145c <sd_mmc_spi_start_write_blocks+0x18>
{
    145a:	0021      	movs	r1, r4
	while (nb_block--) {
    145c:	1e4c      	subs	r4, r1, #1
    145e:	b2a4      	uxth	r4, r4
    1460:	2900      	cmp	r1, #0
    1462:	d01b      	beq.n	149c <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    1464:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1466:	8832      	ldrh	r2, [r6, #0]
    1468:	4643      	mov	r3, r8
    146a:	1959      	adds	r1, r3, r5
    146c:	4810      	ldr	r0, [pc, #64]	; (14b0 <sd_mmc_spi_start_write_blocks+0x6c>)
    146e:	4b11      	ldr	r3, [pc, #68]	; (14b4 <sd_mmc_spi_start_write_blocks+0x70>)
    1470:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    1472:	8833      	ldrh	r3, [r6, #0]
    1474:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    1476:	4a10      	ldr	r2, [pc, #64]	; (14b8 <sd_mmc_spi_start_write_blocks+0x74>)
    1478:	6811      	ldr	r1, [r2, #0]
    147a:	468c      	mov	ip, r1
    147c:	4463      	add	r3, ip
    147e:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    1480:	4b0e      	ldr	r3, [pc, #56]	; (14bc <sd_mmc_spi_start_write_blocks+0x78>)
    1482:	4798      	blx	r3
    1484:	2800      	cmp	r0, #0
    1486:	d00a      	beq.n	149e <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    1488:	2c00      	cmp	r4, #0
    148a:	d0e6      	beq.n	145a <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    148c:	4b0c      	ldr	r3, [pc, #48]	; (14c0 <sd_mmc_spi_start_write_blocks+0x7c>)
    148e:	4798      	blx	r3
    1490:	2800      	cmp	r0, #0
    1492:	d1e2      	bne.n	145a <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1494:	2205      	movs	r2, #5
    1496:	4b03      	ldr	r3, [pc, #12]	; (14a4 <sd_mmc_spi_start_write_blocks+0x60>)
    1498:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    149a:	e000      	b.n	149e <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    149c:	2001      	movs	r0, #1
}
    149e:	bc04      	pop	{r2}
    14a0:	4690      	mov	r8, r2
    14a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14a4:	200000f7 	.word	0x200000f7
    14a8:	00000dd5 	.word	0x00000dd5
    14ac:	200000f0 	.word	0x200000f0
    14b0:	200000b4 	.word	0x200000b4
    14b4:	00002089 	.word	0x00002089
    14b8:	20000100 	.word	0x20000100
    14bc:	00000f65 	.word	0x00000f65
    14c0:	00000e1d 	.word	0x00000e1d

000014c4 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    14c4:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    14c6:	4b05      	ldr	r3, [pc, #20]	; (14dc <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    14c8:	4798      	blx	r3
    14ca:	2800      	cmp	r0, #0
    14cc:	d103      	bne.n	14d6 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    14ce:	2205      	movs	r2, #5
    14d0:	4b03      	ldr	r3, [pc, #12]	; (14e0 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    14d2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    14d4:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    14d6:	4b03      	ldr	r3, [pc, #12]	; (14e4 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    14d8:	4798      	blx	r3
    14da:	e7fb      	b.n	14d4 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    14dc:	00000e1d 	.word	0x00000e1d
    14e0:	200000f7 	.word	0x200000f7
    14e4:	00000e81 	.word	0x00000e81

000014e8 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    14e8:	4770      	bx	lr
	...

000014ec <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    14ec:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    14ee:	2301      	movs	r3, #1
    14f0:	2800      	cmp	r0, #0
    14f2:	d001      	beq.n	14f8 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    14f4:	0018      	movs	r0, r3
    14f6:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    14f8:	4b01      	ldr	r3, [pc, #4]	; (1500 <mem_test_unit_ready+0x14>)
    14fa:	4798      	blx	r3
    14fc:	0003      	movs	r3, r0
    14fe:	e7f9      	b.n	14f4 <mem_test_unit_ready+0x8>
    1500:	00000cd5 	.word	0x00000cd5

00001504 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    1504:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    1506:	2301      	movs	r3, #1
    1508:	2800      	cmp	r0, #0
    150a:	d001      	beq.n	1510 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    150c:	0018      	movs	r0, r3
    150e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    1510:	0008      	movs	r0, r1
    1512:	4b02      	ldr	r3, [pc, #8]	; (151c <mem_read_capacity+0x18>)
    1514:	4798      	blx	r3
    1516:	0003      	movs	r3, r0
    1518:	e7f8      	b.n	150c <mem_read_capacity+0x8>
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	00000d05 	.word	0x00000d05

00001520 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    1520:	4243      	negs	r3, r0
    1522:	4158      	adcs	r0, r3
    1524:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    1526:	4770      	bx	lr

00001528 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    1528:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    152a:	2301      	movs	r3, #1
    152c:	2800      	cmp	r0, #0
    152e:	d001      	beq.n	1534 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    1530:	0018      	movs	r0, r3
    1532:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    1534:	4b01      	ldr	r3, [pc, #4]	; (153c <mem_wr_protect+0x14>)
    1536:	4798      	blx	r3
    1538:	0003      	movs	r3, r0
    153a:	e7f9      	b.n	1530 <mem_wr_protect+0x8>
    153c:	00000d15 	.word	0x00000d15

00001540 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    1540:	b510      	push	{r4, lr}
    1542:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    1544:	2301      	movs	r3, #1
    1546:	2800      	cmp	r0, #0
    1548:	d001      	beq.n	154e <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    154a:	0018      	movs	r0, r3
    154c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    154e:	0011      	movs	r1, r2
    1550:	0020      	movs	r0, r4
    1552:	4b02      	ldr	r3, [pc, #8]	; (155c <memory_2_ram+0x1c>)
    1554:	4798      	blx	r3
    1556:	0003      	movs	r3, r0
    1558:	e7f7      	b.n	154a <memory_2_ram+0xa>
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	00000d69 	.word	0x00000d69

00001560 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    1560:	b510      	push	{r4, lr}
    1562:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    1564:	2301      	movs	r3, #1
    1566:	2800      	cmp	r0, #0
    1568:	d001      	beq.n	156e <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    156a:	0018      	movs	r0, r3
    156c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    156e:	0011      	movs	r1, r2
    1570:	0020      	movs	r0, r4
    1572:	4b02      	ldr	r3, [pc, #8]	; (157c <ram_2_memory+0x1c>)
    1574:	4798      	blx	r3
    1576:	0003      	movs	r3, r0
    1578:	e7f7      	b.n	156a <ram_2_memory+0xa>
    157a:	46c0      	nop			; (mov r8, r8)
    157c:	00000dc1 	.word	0x00000dc1

00001580 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1580:	4b0c      	ldr	r3, [pc, #48]	; (15b4 <cpu_irq_enter_critical+0x34>)
    1582:	681b      	ldr	r3, [r3, #0]
    1584:	2b00      	cmp	r3, #0
    1586:	d106      	bne.n	1596 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1588:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    158c:	2b00      	cmp	r3, #0
    158e:	d007      	beq.n	15a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1590:	2200      	movs	r2, #0
    1592:	4b09      	ldr	r3, [pc, #36]	; (15b8 <cpu_irq_enter_critical+0x38>)
    1594:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1596:	4a07      	ldr	r2, [pc, #28]	; (15b4 <cpu_irq_enter_critical+0x34>)
    1598:	6813      	ldr	r3, [r2, #0]
    159a:	3301      	adds	r3, #1
    159c:	6013      	str	r3, [r2, #0]
}
    159e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    15a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    15a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    15a6:	2200      	movs	r2, #0
    15a8:	4b04      	ldr	r3, [pc, #16]	; (15bc <cpu_irq_enter_critical+0x3c>)
    15aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    15ac:	3201      	adds	r2, #1
    15ae:	4b02      	ldr	r3, [pc, #8]	; (15b8 <cpu_irq_enter_critical+0x38>)
    15b0:	701a      	strb	r2, [r3, #0]
    15b2:	e7f0      	b.n	1596 <cpu_irq_enter_critical+0x16>
    15b4:	20000108 	.word	0x20000108
    15b8:	2000010c 	.word	0x2000010c
    15bc:	20000001 	.word	0x20000001

000015c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    15c0:	4b08      	ldr	r3, [pc, #32]	; (15e4 <cpu_irq_leave_critical+0x24>)
    15c2:	681a      	ldr	r2, [r3, #0]
    15c4:	3a01      	subs	r2, #1
    15c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    15c8:	681b      	ldr	r3, [r3, #0]
    15ca:	2b00      	cmp	r3, #0
    15cc:	d109      	bne.n	15e2 <cpu_irq_leave_critical+0x22>
    15ce:	4b06      	ldr	r3, [pc, #24]	; (15e8 <cpu_irq_leave_critical+0x28>)
    15d0:	781b      	ldrb	r3, [r3, #0]
    15d2:	2b00      	cmp	r3, #0
    15d4:	d005      	beq.n	15e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    15d6:	2201      	movs	r2, #1
    15d8:	4b04      	ldr	r3, [pc, #16]	; (15ec <cpu_irq_leave_critical+0x2c>)
    15da:	701a      	strb	r2, [r3, #0]
    15dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    15e0:	b662      	cpsie	i
	}
}
    15e2:	4770      	bx	lr
    15e4:	20000108 	.word	0x20000108
    15e8:	2000010c 	.word	0x2000010c
    15ec:	20000001 	.word	0x20000001

000015f0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    15f0:	b500      	push	{lr}
    15f2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    15f4:	ab01      	add	r3, sp, #4
    15f6:	2280      	movs	r2, #128	; 0x80
    15f8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    15fa:	780a      	ldrb	r2, [r1, #0]
    15fc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    15fe:	784a      	ldrb	r2, [r1, #1]
    1600:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1602:	788a      	ldrb	r2, [r1, #2]
    1604:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1606:	0019      	movs	r1, r3
    1608:	4b01      	ldr	r3, [pc, #4]	; (1610 <port_pin_set_config+0x20>)
    160a:	4798      	blx	r3
}
    160c:	b003      	add	sp, #12
    160e:	bd00      	pop	{pc}
    1610:	00003031 	.word	0x00003031

00001614 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1614:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1616:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1618:	b25b      	sxtb	r3, r3
    161a:	2b00      	cmp	r3, #0
    161c:	dbfb      	blt.n	1616 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    161e:	8813      	ldrh	r3, [r2, #0]
    1620:	2102      	movs	r1, #2
    1622:	430b      	orrs	r3, r1
    1624:	8013      	strh	r3, [r2, #0]
}
    1626:	4770      	bx	lr

00001628 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1628:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    162a:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    162c:	b25b      	sxtb	r3, r3
    162e:	2b00      	cmp	r3, #0
    1630:	dbfb      	blt.n	162a <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    1632:	23c1      	movs	r3, #193	; 0xc1
    1634:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    1636:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1638:	8813      	ldrh	r3, [r2, #0]
    163a:	2102      	movs	r1, #2
    163c:	438b      	bics	r3, r1
    163e:	8013      	strh	r3, [r2, #0]
}
    1640:	4770      	bx	lr
	...

00001644 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1644:	b570      	push	{r4, r5, r6, lr}
    1646:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1648:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    164a:	4b06      	ldr	r3, [pc, #24]	; (1664 <rtc_calendar_reset+0x20>)
    164c:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    164e:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1650:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    1652:	b25b      	sxtb	r3, r3
    1654:	2b00      	cmp	r3, #0
    1656:	dbfb      	blt.n	1650 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1658:	882b      	ldrh	r3, [r5, #0]
    165a:	2201      	movs	r2, #1
    165c:	4313      	orrs	r3, r2
    165e:	802b      	strh	r3, [r5, #0]
}
    1660:	bd70      	pop	{r4, r5, r6, pc}
    1662:	46c0      	nop			; (mov r8, r8)
    1664:	00001629 	.word	0x00001629

00001668 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1668:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    166a:	88cb      	ldrh	r3, [r1, #6]
    166c:	88c2      	ldrh	r2, [r0, #6]
    166e:	1a9a      	subs	r2, r3, r2
    1670:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1672:	794b      	ldrb	r3, [r1, #5]
    1674:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    1676:	790c      	ldrb	r4, [r1, #4]
    1678:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    167a:	4323      	orrs	r3, r4
    167c:	788c      	ldrb	r4, [r1, #2]
    167e:	0324      	lsls	r4, r4, #12
    1680:	4323      	orrs	r3, r4
    1682:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    1684:	7902      	ldrb	r2, [r0, #4]
    1686:	2a00      	cmp	r2, #0
    1688:	d105      	bne.n	1696 <rtc_calendar_time_to_register_value+0x2e>
    168a:	78ca      	ldrb	r2, [r1, #3]
    168c:	2a00      	cmp	r2, #0
    168e:	d002      	beq.n	1696 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    1690:	2280      	movs	r2, #128	; 0x80
    1692:	0252      	lsls	r2, r2, #9
    1694:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1696:	7848      	ldrb	r0, [r1, #1]
    1698:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    169a:	780a      	ldrb	r2, [r1, #0]
    169c:	4310      	orrs	r0, r2
    169e:	4318      	orrs	r0, r3

	return register_value;
}
    16a0:	bd10      	pop	{r4, pc}

000016a2 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    16a2:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    16a4:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    16a6:	88c4      	ldrh	r4, [r0, #6]
    16a8:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    16aa:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    16ac:	018b      	lsls	r3, r1, #6
    16ae:	0f1b      	lsrs	r3, r3, #28
    16b0:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    16b2:	028b      	lsls	r3, r1, #10
    16b4:	0edb      	lsrs	r3, r3, #27
    16b6:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    16b8:	7903      	ldrb	r3, [r0, #4]
    16ba:	2b00      	cmp	r3, #0
    16bc:	d10c      	bne.n	16d8 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    16be:	040b      	lsls	r3, r1, #16
    16c0:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    16c2:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    16c4:	03cb      	lsls	r3, r1, #15
    16c6:	0fdb      	lsrs	r3, r3, #31
    16c8:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    16ca:	0988      	lsrs	r0, r1, #6
    16cc:	233f      	movs	r3, #63	; 0x3f
    16ce:	4018      	ands	r0, r3
    16d0:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    16d2:	4019      	ands	r1, r3
    16d4:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    16d6:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    16d8:	03cb      	lsls	r3, r1, #15
    16da:	0edb      	lsrs	r3, r3, #27
    16dc:	7093      	strb	r3, [r2, #2]
    16de:	e7f4      	b.n	16ca <rtc_calendar_register_value_to_time+0x28>

000016e0 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    16e0:	b510      	push	{r4, lr}
    16e2:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    16e4:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    16e6:	7941      	ldrb	r1, [r0, #5]
    16e8:	2900      	cmp	r1, #0
    16ea:	d006      	beq.n	16fa <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    16ec:	8859      	ldrh	r1, [r3, #2]
    16ee:	0449      	lsls	r1, r1, #17
    16f0:	d50b      	bpl.n	170a <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    16f2:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    16f4:	4b0a      	ldr	r3, [pc, #40]	; (1720 <rtc_calendar_get_time+0x40>)
    16f6:	4798      	blx	r3
}
    16f8:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    16fa:	490a      	ldr	r1, [pc, #40]	; (1724 <rtc_calendar_get_time+0x44>)
    16fc:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    16fe:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1700:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1702:	b249      	sxtb	r1, r1
    1704:	2900      	cmp	r1, #0
    1706:	dbfb      	blt.n	1700 <rtc_calendar_get_time+0x20>
    1708:	e7f3      	b.n	16f2 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    170a:	8859      	ldrh	r1, [r3, #2]
    170c:	24c0      	movs	r4, #192	; 0xc0
    170e:	0224      	lsls	r4, r4, #8
    1710:	4321      	orrs	r1, r4
    1712:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1714:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1716:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1718:	b249      	sxtb	r1, r1
    171a:	2900      	cmp	r1, #0
    171c:	dbfb      	blt.n	1716 <rtc_calendar_get_time+0x36>
    171e:	e7e8      	b.n	16f2 <rtc_calendar_get_time+0x12>
    1720:	000016a3 	.word	0x000016a3
    1724:	ffff8000 	.word	0xffff8000

00001728 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1728:	b570      	push	{r4, r5, r6, lr}
    172a:	000d      	movs	r5, r1
    172c:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    172e:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1730:	2a01      	cmp	r2, #1
    1732:	d901      	bls.n	1738 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    1734:	0018      	movs	r0, r3
    1736:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1738:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    173a:	4b06      	ldr	r3, [pc, #24]	; (1754 <rtc_calendar_set_alarm+0x2c>)
    173c:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    173e:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1740:	b25b      	sxtb	r3, r3
    1742:	2b00      	cmp	r3, #0
    1744:	dbfb      	blt.n	173e <rtc_calendar_set_alarm+0x16>
    1746:	00e4      	lsls	r4, r4, #3
    1748:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    174a:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    174c:	7a2b      	ldrb	r3, [r5, #8]
    174e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    1750:	2300      	movs	r3, #0
    1752:	e7ef      	b.n	1734 <rtc_calendar_set_alarm+0xc>
    1754:	00001669 	.word	0x00001669

00001758 <rtc_calendar_init>:
{
    1758:	b530      	push	{r4, r5, lr}
    175a:	b083      	sub	sp, #12
    175c:	0005      	movs	r5, r0
    175e:	0014      	movs	r4, r2
	module->hw = hw;
    1760:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1762:	4a1c      	ldr	r2, [pc, #112]	; (17d4 <rtc_calendar_init+0x7c>)
    1764:	6993      	ldr	r3, [r2, #24]
    1766:	2120      	movs	r1, #32
    1768:	430b      	orrs	r3, r1
    176a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    176c:	a901      	add	r1, sp, #4
    176e:	2302      	movs	r3, #2
    1770:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1772:	2004      	movs	r0, #4
    1774:	4b18      	ldr	r3, [pc, #96]	; (17d8 <rtc_calendar_init+0x80>)
    1776:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1778:	2004      	movs	r0, #4
    177a:	4b18      	ldr	r3, [pc, #96]	; (17dc <rtc_calendar_init+0x84>)
    177c:	4798      	blx	r3
	rtc_calendar_reset(module);
    177e:	0028      	movs	r0, r5
    1780:	4b17      	ldr	r3, [pc, #92]	; (17e0 <rtc_calendar_init+0x88>)
    1782:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    1784:	7923      	ldrb	r3, [r4, #4]
    1786:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    1788:	78e3      	ldrb	r3, [r4, #3]
    178a:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    178c:	88e3      	ldrh	r3, [r4, #6]
    178e:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    1790:	4b14      	ldr	r3, [pc, #80]	; (17e4 <rtc_calendar_init+0x8c>)
    1792:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1794:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1796:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    1798:	7921      	ldrb	r1, [r4, #4]
    179a:	2900      	cmp	r1, #0
    179c:	d017      	beq.n	17ce <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    179e:	2108      	movs	r1, #8
    17a0:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    17a2:	78a1      	ldrb	r1, [r4, #2]
    17a4:	2900      	cmp	r1, #0
    17a6:	d001      	beq.n	17ac <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    17a8:	2180      	movs	r1, #128	; 0x80
    17aa:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    17ac:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    17ae:	78e3      	ldrb	r3, [r4, #3]
    17b0:	2b00      	cmp	r3, #0
    17b2:	d004      	beq.n	17be <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    17b4:	8853      	ldrh	r3, [r2, #2]
    17b6:	2180      	movs	r1, #128	; 0x80
    17b8:	01c9      	lsls	r1, r1, #7
    17ba:	430b      	orrs	r3, r1
    17bc:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    17be:	0021      	movs	r1, r4
    17c0:	3108      	adds	r1, #8
    17c2:	2200      	movs	r2, #0
    17c4:	0028      	movs	r0, r5
    17c6:	4b08      	ldr	r3, [pc, #32]	; (17e8 <rtc_calendar_init+0x90>)
    17c8:	4798      	blx	r3
}
    17ca:	b003      	add	sp, #12
    17cc:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    17ce:	2148      	movs	r1, #72	; 0x48
    17d0:	430b      	orrs	r3, r1
    17d2:	e7e6      	b.n	17a2 <rtc_calendar_init+0x4a>
    17d4:	40000400 	.word	0x40000400
    17d8:	00002f39 	.word	0x00002f39
    17dc:	00002ead 	.word	0x00002ead
    17e0:	00001645 	.word	0x00001645
    17e4:	200005b8 	.word	0x200005b8
    17e8:	00001729 	.word	0x00001729

000017ec <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    17ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ee:	46de      	mov	lr, fp
    17f0:	4657      	mov	r7, sl
    17f2:	464e      	mov	r6, r9
    17f4:	4645      	mov	r5, r8
    17f6:	b5e0      	push	{r5, r6, r7, lr}
    17f8:	b087      	sub	sp, #28
    17fa:	4680      	mov	r8, r0
    17fc:	9104      	str	r1, [sp, #16]
    17fe:	0016      	movs	r6, r2
    1800:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1802:	2200      	movs	r2, #0
    1804:	2300      	movs	r3, #0
    1806:	2100      	movs	r1, #0
    1808:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    180a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    180c:	2001      	movs	r0, #1
    180e:	0021      	movs	r1, r4
    1810:	9600      	str	r6, [sp, #0]
    1812:	9701      	str	r7, [sp, #4]
    1814:	465c      	mov	r4, fp
    1816:	9403      	str	r4, [sp, #12]
    1818:	4644      	mov	r4, r8
    181a:	9405      	str	r4, [sp, #20]
    181c:	e013      	b.n	1846 <long_division+0x5a>
    181e:	2420      	movs	r4, #32
    1820:	1a64      	subs	r4, r4, r1
    1822:	0005      	movs	r5, r0
    1824:	40e5      	lsrs	r5, r4
    1826:	46a8      	mov	r8, r5
    1828:	e014      	b.n	1854 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    182a:	9c00      	ldr	r4, [sp, #0]
    182c:	9d01      	ldr	r5, [sp, #4]
    182e:	1b12      	subs	r2, r2, r4
    1830:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1832:	465c      	mov	r4, fp
    1834:	464d      	mov	r5, r9
    1836:	432c      	orrs	r4, r5
    1838:	46a3      	mov	fp, r4
    183a:	9c03      	ldr	r4, [sp, #12]
    183c:	4645      	mov	r5, r8
    183e:	432c      	orrs	r4, r5
    1840:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1842:	3901      	subs	r1, #1
    1844:	d325      	bcc.n	1892 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1846:	2420      	movs	r4, #32
    1848:	4264      	negs	r4, r4
    184a:	190c      	adds	r4, r1, r4
    184c:	d4e7      	bmi.n	181e <long_division+0x32>
    184e:	0005      	movs	r5, r0
    1850:	40a5      	lsls	r5, r4
    1852:	46a8      	mov	r8, r5
    1854:	0004      	movs	r4, r0
    1856:	408c      	lsls	r4, r1
    1858:	46a1      	mov	r9, r4
		r = r << 1;
    185a:	1892      	adds	r2, r2, r2
    185c:	415b      	adcs	r3, r3
    185e:	0014      	movs	r4, r2
    1860:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1862:	9e05      	ldr	r6, [sp, #20]
    1864:	464f      	mov	r7, r9
    1866:	403e      	ands	r6, r7
    1868:	46b4      	mov	ip, r6
    186a:	9e04      	ldr	r6, [sp, #16]
    186c:	4647      	mov	r7, r8
    186e:	403e      	ands	r6, r7
    1870:	46b2      	mov	sl, r6
    1872:	4666      	mov	r6, ip
    1874:	4657      	mov	r7, sl
    1876:	433e      	orrs	r6, r7
    1878:	d003      	beq.n	1882 <long_division+0x96>
			r |= 0x01;
    187a:	0006      	movs	r6, r0
    187c:	4326      	orrs	r6, r4
    187e:	0032      	movs	r2, r6
    1880:	002b      	movs	r3, r5
		if (r >= d) {
    1882:	9c00      	ldr	r4, [sp, #0]
    1884:	9d01      	ldr	r5, [sp, #4]
    1886:	429d      	cmp	r5, r3
    1888:	d8db      	bhi.n	1842 <long_division+0x56>
    188a:	d1ce      	bne.n	182a <long_division+0x3e>
    188c:	4294      	cmp	r4, r2
    188e:	d8d8      	bhi.n	1842 <long_division+0x56>
    1890:	e7cb      	b.n	182a <long_division+0x3e>
    1892:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1894:	4658      	mov	r0, fp
    1896:	0019      	movs	r1, r3
    1898:	b007      	add	sp, #28
    189a:	bc3c      	pop	{r2, r3, r4, r5}
    189c:	4690      	mov	r8, r2
    189e:	4699      	mov	r9, r3
    18a0:	46a2      	mov	sl, r4
    18a2:	46ab      	mov	fp, r5
    18a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000018a6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    18a6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    18a8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    18aa:	2340      	movs	r3, #64	; 0x40
    18ac:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    18ae:	4281      	cmp	r1, r0
    18b0:	d202      	bcs.n	18b8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    18b2:	0018      	movs	r0, r3
    18b4:	bd10      	pop	{r4, pc}
		baud_calculated++;
    18b6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    18b8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    18ba:	1c63      	adds	r3, r4, #1
    18bc:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    18be:	4288      	cmp	r0, r1
    18c0:	d9f9      	bls.n	18b6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    18c2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    18c4:	2cff      	cmp	r4, #255	; 0xff
    18c6:	d8f4      	bhi.n	18b2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    18c8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    18ca:	2300      	movs	r3, #0
    18cc:	e7f1      	b.n	18b2 <_sercom_get_sync_baud_val+0xc>
	...

000018d0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    18d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18d2:	b083      	sub	sp, #12
    18d4:	000f      	movs	r7, r1
    18d6:	0016      	movs	r6, r2
    18d8:	aa08      	add	r2, sp, #32
    18da:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    18dc:	0004      	movs	r4, r0
    18de:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    18e0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    18e2:	42bc      	cmp	r4, r7
    18e4:	d902      	bls.n	18ec <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    18e6:	0010      	movs	r0, r2
    18e8:	b003      	add	sp, #12
    18ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    18ec:	2b00      	cmp	r3, #0
    18ee:	d114      	bne.n	191a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    18f0:	0002      	movs	r2, r0
    18f2:	0008      	movs	r0, r1
    18f4:	2100      	movs	r1, #0
    18f6:	4c19      	ldr	r4, [pc, #100]	; (195c <_sercom_get_async_baud_val+0x8c>)
    18f8:	47a0      	blx	r4
    18fa:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    18fc:	003a      	movs	r2, r7
    18fe:	2300      	movs	r3, #0
    1900:	2000      	movs	r0, #0
    1902:	4c17      	ldr	r4, [pc, #92]	; (1960 <_sercom_get_async_baud_val+0x90>)
    1904:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1906:	2200      	movs	r2, #0
    1908:	2301      	movs	r3, #1
    190a:	1a12      	subs	r2, r2, r0
    190c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    190e:	0c12      	lsrs	r2, r2, #16
    1910:	041b      	lsls	r3, r3, #16
    1912:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1914:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1916:	2200      	movs	r2, #0
    1918:	e7e5      	b.n	18e6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    191a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    191c:	2b01      	cmp	r3, #1
    191e:	d1f9      	bne.n	1914 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1920:	000a      	movs	r2, r1
    1922:	2300      	movs	r3, #0
    1924:	2100      	movs	r1, #0
    1926:	4c0d      	ldr	r4, [pc, #52]	; (195c <_sercom_get_async_baud_val+0x8c>)
    1928:	47a0      	blx	r4
    192a:	0002      	movs	r2, r0
    192c:	000b      	movs	r3, r1
    192e:	9200      	str	r2, [sp, #0]
    1930:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1932:	0038      	movs	r0, r7
    1934:	2100      	movs	r1, #0
    1936:	4c0a      	ldr	r4, [pc, #40]	; (1960 <_sercom_get_async_baud_val+0x90>)
    1938:	47a0      	blx	r4
    193a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    193c:	2380      	movs	r3, #128	; 0x80
    193e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1940:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1942:	4298      	cmp	r0, r3
    1944:	d8cf      	bhi.n	18e6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1946:	0f79      	lsrs	r1, r7, #29
    1948:	00f8      	lsls	r0, r7, #3
    194a:	9a00      	ldr	r2, [sp, #0]
    194c:	9b01      	ldr	r3, [sp, #4]
    194e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1950:	00ea      	lsls	r2, r5, #3
    1952:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1954:	b2d2      	uxtb	r2, r2
    1956:	0352      	lsls	r2, r2, #13
    1958:	432a      	orrs	r2, r5
    195a:	e7db      	b.n	1914 <_sercom_get_async_baud_val+0x44>
    195c:	00005169 	.word	0x00005169
    1960:	000017ed 	.word	0x000017ed

00001964 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1964:	b510      	push	{r4, lr}
    1966:	b082      	sub	sp, #8
    1968:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    196a:	4b0e      	ldr	r3, [pc, #56]	; (19a4 <sercom_set_gclk_generator+0x40>)
    196c:	781b      	ldrb	r3, [r3, #0]
    196e:	2b00      	cmp	r3, #0
    1970:	d007      	beq.n	1982 <sercom_set_gclk_generator+0x1e>
    1972:	2900      	cmp	r1, #0
    1974:	d105      	bne.n	1982 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1976:	4b0b      	ldr	r3, [pc, #44]	; (19a4 <sercom_set_gclk_generator+0x40>)
    1978:	785b      	ldrb	r3, [r3, #1]
    197a:	4283      	cmp	r3, r0
    197c:	d010      	beq.n	19a0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    197e:	201d      	movs	r0, #29
    1980:	e00c      	b.n	199c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1982:	a901      	add	r1, sp, #4
    1984:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1986:	2013      	movs	r0, #19
    1988:	4b07      	ldr	r3, [pc, #28]	; (19a8 <sercom_set_gclk_generator+0x44>)
    198a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    198c:	2013      	movs	r0, #19
    198e:	4b07      	ldr	r3, [pc, #28]	; (19ac <sercom_set_gclk_generator+0x48>)
    1990:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1992:	4b04      	ldr	r3, [pc, #16]	; (19a4 <sercom_set_gclk_generator+0x40>)
    1994:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1996:	2201      	movs	r2, #1
    1998:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    199a:	2000      	movs	r0, #0
}
    199c:	b002      	add	sp, #8
    199e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    19a0:	2000      	movs	r0, #0
    19a2:	e7fb      	b.n	199c <sercom_set_gclk_generator+0x38>
    19a4:	20000110 	.word	0x20000110
    19a8:	00002f39 	.word	0x00002f39
    19ac:	00002ead 	.word	0x00002ead

000019b0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    19b0:	4b40      	ldr	r3, [pc, #256]	; (1ab4 <_sercom_get_default_pad+0x104>)
    19b2:	4298      	cmp	r0, r3
    19b4:	d031      	beq.n	1a1a <_sercom_get_default_pad+0x6a>
    19b6:	d90a      	bls.n	19ce <_sercom_get_default_pad+0x1e>
    19b8:	4b3f      	ldr	r3, [pc, #252]	; (1ab8 <_sercom_get_default_pad+0x108>)
    19ba:	4298      	cmp	r0, r3
    19bc:	d04d      	beq.n	1a5a <_sercom_get_default_pad+0xaa>
    19be:	4b3f      	ldr	r3, [pc, #252]	; (1abc <_sercom_get_default_pad+0x10c>)
    19c0:	4298      	cmp	r0, r3
    19c2:	d05a      	beq.n	1a7a <_sercom_get_default_pad+0xca>
    19c4:	4b3e      	ldr	r3, [pc, #248]	; (1ac0 <_sercom_get_default_pad+0x110>)
    19c6:	4298      	cmp	r0, r3
    19c8:	d037      	beq.n	1a3a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    19ca:	2000      	movs	r0, #0
}
    19cc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    19ce:	4b3d      	ldr	r3, [pc, #244]	; (1ac4 <_sercom_get_default_pad+0x114>)
    19d0:	4298      	cmp	r0, r3
    19d2:	d00c      	beq.n	19ee <_sercom_get_default_pad+0x3e>
    19d4:	4b3c      	ldr	r3, [pc, #240]	; (1ac8 <_sercom_get_default_pad+0x118>)
    19d6:	4298      	cmp	r0, r3
    19d8:	d1f7      	bne.n	19ca <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    19da:	2901      	cmp	r1, #1
    19dc:	d017      	beq.n	1a0e <_sercom_get_default_pad+0x5e>
    19de:	2900      	cmp	r1, #0
    19e0:	d05d      	beq.n	1a9e <_sercom_get_default_pad+0xee>
    19e2:	2902      	cmp	r1, #2
    19e4:	d015      	beq.n	1a12 <_sercom_get_default_pad+0x62>
    19e6:	2903      	cmp	r1, #3
    19e8:	d015      	beq.n	1a16 <_sercom_get_default_pad+0x66>
	return 0;
    19ea:	2000      	movs	r0, #0
    19ec:	e7ee      	b.n	19cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    19ee:	2901      	cmp	r1, #1
    19f0:	d007      	beq.n	1a02 <_sercom_get_default_pad+0x52>
    19f2:	2900      	cmp	r1, #0
    19f4:	d051      	beq.n	1a9a <_sercom_get_default_pad+0xea>
    19f6:	2902      	cmp	r1, #2
    19f8:	d005      	beq.n	1a06 <_sercom_get_default_pad+0x56>
    19fa:	2903      	cmp	r1, #3
    19fc:	d005      	beq.n	1a0a <_sercom_get_default_pad+0x5a>
	return 0;
    19fe:	2000      	movs	r0, #0
    1a00:	e7e4      	b.n	19cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a02:	4832      	ldr	r0, [pc, #200]	; (1acc <_sercom_get_default_pad+0x11c>)
    1a04:	e7e2      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a06:	4832      	ldr	r0, [pc, #200]	; (1ad0 <_sercom_get_default_pad+0x120>)
    1a08:	e7e0      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a0a:	4832      	ldr	r0, [pc, #200]	; (1ad4 <_sercom_get_default_pad+0x124>)
    1a0c:	e7de      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a0e:	4832      	ldr	r0, [pc, #200]	; (1ad8 <_sercom_get_default_pad+0x128>)
    1a10:	e7dc      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a12:	4832      	ldr	r0, [pc, #200]	; (1adc <_sercom_get_default_pad+0x12c>)
    1a14:	e7da      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a16:	4832      	ldr	r0, [pc, #200]	; (1ae0 <_sercom_get_default_pad+0x130>)
    1a18:	e7d8      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a1a:	2901      	cmp	r1, #1
    1a1c:	d007      	beq.n	1a2e <_sercom_get_default_pad+0x7e>
    1a1e:	2900      	cmp	r1, #0
    1a20:	d03f      	beq.n	1aa2 <_sercom_get_default_pad+0xf2>
    1a22:	2902      	cmp	r1, #2
    1a24:	d005      	beq.n	1a32 <_sercom_get_default_pad+0x82>
    1a26:	2903      	cmp	r1, #3
    1a28:	d005      	beq.n	1a36 <_sercom_get_default_pad+0x86>
	return 0;
    1a2a:	2000      	movs	r0, #0
    1a2c:	e7ce      	b.n	19cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a2e:	482d      	ldr	r0, [pc, #180]	; (1ae4 <_sercom_get_default_pad+0x134>)
    1a30:	e7cc      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a32:	482d      	ldr	r0, [pc, #180]	; (1ae8 <_sercom_get_default_pad+0x138>)
    1a34:	e7ca      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a36:	482d      	ldr	r0, [pc, #180]	; (1aec <_sercom_get_default_pad+0x13c>)
    1a38:	e7c8      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a3a:	2901      	cmp	r1, #1
    1a3c:	d007      	beq.n	1a4e <_sercom_get_default_pad+0x9e>
    1a3e:	2900      	cmp	r1, #0
    1a40:	d031      	beq.n	1aa6 <_sercom_get_default_pad+0xf6>
    1a42:	2902      	cmp	r1, #2
    1a44:	d005      	beq.n	1a52 <_sercom_get_default_pad+0xa2>
    1a46:	2903      	cmp	r1, #3
    1a48:	d005      	beq.n	1a56 <_sercom_get_default_pad+0xa6>
	return 0;
    1a4a:	2000      	movs	r0, #0
    1a4c:	e7be      	b.n	19cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a4e:	4828      	ldr	r0, [pc, #160]	; (1af0 <_sercom_get_default_pad+0x140>)
    1a50:	e7bc      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a52:	4828      	ldr	r0, [pc, #160]	; (1af4 <_sercom_get_default_pad+0x144>)
    1a54:	e7ba      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a56:	4828      	ldr	r0, [pc, #160]	; (1af8 <_sercom_get_default_pad+0x148>)
    1a58:	e7b8      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a5a:	2901      	cmp	r1, #1
    1a5c:	d007      	beq.n	1a6e <_sercom_get_default_pad+0xbe>
    1a5e:	2900      	cmp	r1, #0
    1a60:	d023      	beq.n	1aaa <_sercom_get_default_pad+0xfa>
    1a62:	2902      	cmp	r1, #2
    1a64:	d005      	beq.n	1a72 <_sercom_get_default_pad+0xc2>
    1a66:	2903      	cmp	r1, #3
    1a68:	d005      	beq.n	1a76 <_sercom_get_default_pad+0xc6>
	return 0;
    1a6a:	2000      	movs	r0, #0
    1a6c:	e7ae      	b.n	19cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a6e:	4823      	ldr	r0, [pc, #140]	; (1afc <_sercom_get_default_pad+0x14c>)
    1a70:	e7ac      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a72:	4823      	ldr	r0, [pc, #140]	; (1b00 <_sercom_get_default_pad+0x150>)
    1a74:	e7aa      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a76:	4823      	ldr	r0, [pc, #140]	; (1b04 <_sercom_get_default_pad+0x154>)
    1a78:	e7a8      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a7a:	2901      	cmp	r1, #1
    1a7c:	d007      	beq.n	1a8e <_sercom_get_default_pad+0xde>
    1a7e:	2900      	cmp	r1, #0
    1a80:	d015      	beq.n	1aae <_sercom_get_default_pad+0xfe>
    1a82:	2902      	cmp	r1, #2
    1a84:	d005      	beq.n	1a92 <_sercom_get_default_pad+0xe2>
    1a86:	2903      	cmp	r1, #3
    1a88:	d005      	beq.n	1a96 <_sercom_get_default_pad+0xe6>
	return 0;
    1a8a:	2000      	movs	r0, #0
    1a8c:	e79e      	b.n	19cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a8e:	481e      	ldr	r0, [pc, #120]	; (1b08 <_sercom_get_default_pad+0x158>)
    1a90:	e79c      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a92:	481e      	ldr	r0, [pc, #120]	; (1b0c <_sercom_get_default_pad+0x15c>)
    1a94:	e79a      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a96:	481e      	ldr	r0, [pc, #120]	; (1b10 <_sercom_get_default_pad+0x160>)
    1a98:	e798      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a9a:	481e      	ldr	r0, [pc, #120]	; (1b14 <_sercom_get_default_pad+0x164>)
    1a9c:	e796      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1a9e:	2003      	movs	r0, #3
    1aa0:	e794      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1aa2:	481d      	ldr	r0, [pc, #116]	; (1b18 <_sercom_get_default_pad+0x168>)
    1aa4:	e792      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1aa6:	481d      	ldr	r0, [pc, #116]	; (1b1c <_sercom_get_default_pad+0x16c>)
    1aa8:	e790      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1aaa:	481d      	ldr	r0, [pc, #116]	; (1b20 <_sercom_get_default_pad+0x170>)
    1aac:	e78e      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1aae:	481d      	ldr	r0, [pc, #116]	; (1b24 <_sercom_get_default_pad+0x174>)
    1ab0:	e78c      	b.n	19cc <_sercom_get_default_pad+0x1c>
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	42001000 	.word	0x42001000
    1ab8:	42001800 	.word	0x42001800
    1abc:	42001c00 	.word	0x42001c00
    1ac0:	42001400 	.word	0x42001400
    1ac4:	42000800 	.word	0x42000800
    1ac8:	42000c00 	.word	0x42000c00
    1acc:	00050003 	.word	0x00050003
    1ad0:	00060003 	.word	0x00060003
    1ad4:	00070003 	.word	0x00070003
    1ad8:	00010003 	.word	0x00010003
    1adc:	001e0003 	.word	0x001e0003
    1ae0:	001f0003 	.word	0x001f0003
    1ae4:	00090003 	.word	0x00090003
    1ae8:	000a0003 	.word	0x000a0003
    1aec:	000b0003 	.word	0x000b0003
    1af0:	00110003 	.word	0x00110003
    1af4:	00120003 	.word	0x00120003
    1af8:	00130003 	.word	0x00130003
    1afc:	000d0003 	.word	0x000d0003
    1b00:	000e0003 	.word	0x000e0003
    1b04:	000f0003 	.word	0x000f0003
    1b08:	00170003 	.word	0x00170003
    1b0c:	00180003 	.word	0x00180003
    1b10:	00190003 	.word	0x00190003
    1b14:	00040003 	.word	0x00040003
    1b18:	00080003 	.word	0x00080003
    1b1c:	00100003 	.word	0x00100003
    1b20:	000c0003 	.word	0x000c0003
    1b24:	00160003 	.word	0x00160003

00001b28 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1b28:	b530      	push	{r4, r5, lr}
    1b2a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1b2c:	4b0b      	ldr	r3, [pc, #44]	; (1b5c <_sercom_get_sercom_inst_index+0x34>)
    1b2e:	466a      	mov	r2, sp
    1b30:	cb32      	ldmia	r3!, {r1, r4, r5}
    1b32:	c232      	stmia	r2!, {r1, r4, r5}
    1b34:	cb32      	ldmia	r3!, {r1, r4, r5}
    1b36:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1b38:	9b00      	ldr	r3, [sp, #0]
    1b3a:	4283      	cmp	r3, r0
    1b3c:	d00b      	beq.n	1b56 <_sercom_get_sercom_inst_index+0x2e>
    1b3e:	2301      	movs	r3, #1
    1b40:	009a      	lsls	r2, r3, #2
    1b42:	4669      	mov	r1, sp
    1b44:	5852      	ldr	r2, [r2, r1]
    1b46:	4282      	cmp	r2, r0
    1b48:	d006      	beq.n	1b58 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b4a:	3301      	adds	r3, #1
    1b4c:	2b06      	cmp	r3, #6
    1b4e:	d1f7      	bne.n	1b40 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1b50:	2000      	movs	r0, #0
}
    1b52:	b007      	add	sp, #28
    1b54:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b56:	2300      	movs	r3, #0
			return i;
    1b58:	b2d8      	uxtb	r0, r3
    1b5a:	e7fa      	b.n	1b52 <_sercom_get_sercom_inst_index+0x2a>
    1b5c:	000053b8 	.word	0x000053b8

00001b60 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1b60:	4770      	bx	lr
	...

00001b64 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1b64:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1b66:	4b0a      	ldr	r3, [pc, #40]	; (1b90 <_sercom_set_handler+0x2c>)
    1b68:	781b      	ldrb	r3, [r3, #0]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d10c      	bne.n	1b88 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1b6e:	4f09      	ldr	r7, [pc, #36]	; (1b94 <_sercom_set_handler+0x30>)
    1b70:	4e09      	ldr	r6, [pc, #36]	; (1b98 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1b72:	4d0a      	ldr	r5, [pc, #40]	; (1b9c <_sercom_set_handler+0x38>)
    1b74:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1b76:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1b78:	195a      	adds	r2, r3, r5
    1b7a:	6014      	str	r4, [r2, #0]
    1b7c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b7e:	2b18      	cmp	r3, #24
    1b80:	d1f9      	bne.n	1b76 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1b82:	2201      	movs	r2, #1
    1b84:	4b02      	ldr	r3, [pc, #8]	; (1b90 <_sercom_set_handler+0x2c>)
    1b86:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1b88:	0080      	lsls	r0, r0, #2
    1b8a:	4b02      	ldr	r3, [pc, #8]	; (1b94 <_sercom_set_handler+0x30>)
    1b8c:	50c1      	str	r1, [r0, r3]
}
    1b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b90:	20000112 	.word	0x20000112
    1b94:	20000114 	.word	0x20000114
    1b98:	00001b61 	.word	0x00001b61
    1b9c:	200005bc 	.word	0x200005bc

00001ba0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1ba0:	b500      	push	{lr}
    1ba2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1ba4:	2309      	movs	r3, #9
    1ba6:	466a      	mov	r2, sp
    1ba8:	7013      	strb	r3, [r2, #0]
    1baa:	3301      	adds	r3, #1
    1bac:	7053      	strb	r3, [r2, #1]
    1bae:	3301      	adds	r3, #1
    1bb0:	7093      	strb	r3, [r2, #2]
    1bb2:	3301      	adds	r3, #1
    1bb4:	70d3      	strb	r3, [r2, #3]
    1bb6:	3301      	adds	r3, #1
    1bb8:	7113      	strb	r3, [r2, #4]
    1bba:	3301      	adds	r3, #1
    1bbc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1bbe:	4b03      	ldr	r3, [pc, #12]	; (1bcc <_sercom_get_interrupt_vector+0x2c>)
    1bc0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1bc2:	466b      	mov	r3, sp
    1bc4:	5618      	ldrsb	r0, [r3, r0]
}
    1bc6:	b003      	add	sp, #12
    1bc8:	bd00      	pop	{pc}
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	00001b29 	.word	0x00001b29

00001bd0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1bd0:	b510      	push	{r4, lr}
    1bd2:	4b02      	ldr	r3, [pc, #8]	; (1bdc <SERCOM0_Handler+0xc>)
    1bd4:	681b      	ldr	r3, [r3, #0]
    1bd6:	2000      	movs	r0, #0
    1bd8:	4798      	blx	r3
    1bda:	bd10      	pop	{r4, pc}
    1bdc:	20000114 	.word	0x20000114

00001be0 <SERCOM1_Handler>:
    1be0:	b510      	push	{r4, lr}
    1be2:	4b02      	ldr	r3, [pc, #8]	; (1bec <SERCOM1_Handler+0xc>)
    1be4:	685b      	ldr	r3, [r3, #4]
    1be6:	2001      	movs	r0, #1
    1be8:	4798      	blx	r3
    1bea:	bd10      	pop	{r4, pc}
    1bec:	20000114 	.word	0x20000114

00001bf0 <SERCOM2_Handler>:
    1bf0:	b510      	push	{r4, lr}
    1bf2:	4b02      	ldr	r3, [pc, #8]	; (1bfc <SERCOM2_Handler+0xc>)
    1bf4:	689b      	ldr	r3, [r3, #8]
    1bf6:	2002      	movs	r0, #2
    1bf8:	4798      	blx	r3
    1bfa:	bd10      	pop	{r4, pc}
    1bfc:	20000114 	.word	0x20000114

00001c00 <SERCOM3_Handler>:
    1c00:	b510      	push	{r4, lr}
    1c02:	4b02      	ldr	r3, [pc, #8]	; (1c0c <SERCOM3_Handler+0xc>)
    1c04:	68db      	ldr	r3, [r3, #12]
    1c06:	2003      	movs	r0, #3
    1c08:	4798      	blx	r3
    1c0a:	bd10      	pop	{r4, pc}
    1c0c:	20000114 	.word	0x20000114

00001c10 <SERCOM4_Handler>:
    1c10:	b510      	push	{r4, lr}
    1c12:	4b02      	ldr	r3, [pc, #8]	; (1c1c <SERCOM4_Handler+0xc>)
    1c14:	691b      	ldr	r3, [r3, #16]
    1c16:	2004      	movs	r0, #4
    1c18:	4798      	blx	r3
    1c1a:	bd10      	pop	{r4, pc}
    1c1c:	20000114 	.word	0x20000114

00001c20 <SERCOM5_Handler>:
    1c20:	b510      	push	{r4, lr}
    1c22:	4b02      	ldr	r3, [pc, #8]	; (1c2c <SERCOM5_Handler+0xc>)
    1c24:	695b      	ldr	r3, [r3, #20]
    1c26:	2005      	movs	r0, #5
    1c28:	4798      	blx	r3
    1c2a:	bd10      	pop	{r4, pc}
    1c2c:	20000114 	.word	0x20000114

00001c30 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    1c30:	b570      	push	{r4, r5, r6, lr}
    1c32:	b082      	sub	sp, #8
    1c34:	0005      	movs	r5, r0
    1c36:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1c38:	2200      	movs	r2, #0
    1c3a:	466b      	mov	r3, sp
    1c3c:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1c3e:	6806      	ldr	r6, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1c40:	0030      	movs	r0, r6
    1c42:	4b24      	ldr	r3, [pc, #144]	; (1cd4 <spi_set_baudrate+0xa4>)
    1c44:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1c46:	231f      	movs	r3, #31
    1c48:	4018      	ands	r0, r3
    1c4a:	3b1e      	subs	r3, #30
    1c4c:	4083      	lsls	r3, r0
    1c4e:	2280      	movs	r2, #128	; 0x80
    1c50:	4921      	ldr	r1, [pc, #132]	; (1cd8 <spi_set_baudrate+0xa8>)
    1c52:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1c54:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1c56:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d1fc      	bne.n	1c56 <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1c5c:	338f      	adds	r3, #143	; 0x8f
    1c5e:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1c60:	7633      	strb	r3, [r6, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1c62:	6833      	ldr	r3, [r6, #0]
    1c64:	2202      	movs	r2, #2
    1c66:	4393      	bics	r3, r2
    1c68:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1c6a:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1c6c:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d1fc      	bne.n	1c6c <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1c72:	4b1a      	ldr	r3, [pc, #104]	; (1cdc <spi_set_baudrate+0xac>)
    1c74:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1c76:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1c78:	b2c0      	uxtb	r0, r0
    1c7a:	4b19      	ldr	r3, [pc, #100]	; (1ce0 <spi_set_baudrate+0xb0>)
    1c7c:	4798      	blx	r3
    1c7e:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    1c80:	466b      	mov	r3, sp
    1c82:	1d9a      	adds	r2, r3, #6
    1c84:	0020      	movs	r0, r4
    1c86:	4b17      	ldr	r3, [pc, #92]	; (1ce4 <spi_set_baudrate+0xb4>)
    1c88:	4798      	blx	r3
    1c8a:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    1c8c:	d003      	beq.n	1c96 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    1c8e:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    1c90:	0020      	movs	r0, r4
    1c92:	b002      	add	sp, #8
    1c94:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    1c96:	466b      	mov	r3, sp
    1c98:	3306      	adds	r3, #6
    1c9a:	781b      	ldrb	r3, [r3, #0]
    1c9c:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1c9e:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1ca0:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d1fc      	bne.n	1ca0 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ca6:	0030      	movs	r0, r6
    1ca8:	4b0a      	ldr	r3, [pc, #40]	; (1cd4 <spi_set_baudrate+0xa4>)
    1caa:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1cac:	231f      	movs	r3, #31
    1cae:	4018      	ands	r0, r3
    1cb0:	3b1e      	subs	r3, #30
    1cb2:	4083      	lsls	r3, r0
    1cb4:	4a08      	ldr	r2, [pc, #32]	; (1cd8 <spi_set_baudrate+0xa8>)
    1cb6:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1cb8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1cba:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	d1fc      	bne.n	1cba <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1cc0:	6833      	ldr	r3, [r6, #0]
    1cc2:	2202      	movs	r2, #2
    1cc4:	4313      	orrs	r3, r2
    1cc6:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1cc8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1cca:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d1fc      	bne.n	1cca <spi_set_baudrate+0x9a>
    1cd0:	e7de      	b.n	1c90 <spi_set_baudrate+0x60>
    1cd2:	46c0      	nop			; (mov r8, r8)
    1cd4:	00001ba1 	.word	0x00001ba1
    1cd8:	e000e100 	.word	0xe000e100
    1cdc:	00001b29 	.word	0x00001b29
    1ce0:	00002f55 	.word	0x00002f55
    1ce4:	000018a7 	.word	0x000018a7

00001ce8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cea:	b08b      	sub	sp, #44	; 0x2c
    1cec:	0005      	movs	r5, r0
    1cee:	000c      	movs	r4, r1
    1cf0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1cf2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1cf4:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1cf6:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1cf8:	079b      	lsls	r3, r3, #30
    1cfa:	d501      	bpl.n	1d00 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1cfc:	b00b      	add	sp, #44	; 0x2c
    1cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1d00:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1d02:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1d04:	07db      	lsls	r3, r3, #31
    1d06:	d4f9      	bmi.n	1cfc <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1d08:	0008      	movs	r0, r1
    1d0a:	4b60      	ldr	r3, [pc, #384]	; (1e8c <spi_init+0x1a4>)
    1d0c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1d0e:	4a60      	ldr	r2, [pc, #384]	; (1e90 <spi_init+0x1a8>)
    1d10:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1d12:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1d14:	2301      	movs	r3, #1
    1d16:	40bb      	lsls	r3, r7
    1d18:	430b      	orrs	r3, r1
    1d1a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1d1c:	a909      	add	r1, sp, #36	; 0x24
    1d1e:	2724      	movs	r7, #36	; 0x24
    1d20:	5df3      	ldrb	r3, [r6, r7]
    1d22:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1d24:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1d26:	b2c3      	uxtb	r3, r0
    1d28:	9301      	str	r3, [sp, #4]
    1d2a:	0018      	movs	r0, r3
    1d2c:	4b59      	ldr	r3, [pc, #356]	; (1e94 <spi_init+0x1ac>)
    1d2e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1d30:	9801      	ldr	r0, [sp, #4]
    1d32:	4b59      	ldr	r3, [pc, #356]	; (1e98 <spi_init+0x1b0>)
    1d34:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1d36:	5df0      	ldrb	r0, [r6, r7]
    1d38:	2100      	movs	r1, #0
    1d3a:	4b58      	ldr	r3, [pc, #352]	; (1e9c <spi_init+0x1b4>)
    1d3c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1d3e:	7833      	ldrb	r3, [r6, #0]
    1d40:	2b01      	cmp	r3, #1
    1d42:	d038      	beq.n	1db6 <spi_init+0xce>
    1d44:	002b      	movs	r3, r5
    1d46:	330c      	adds	r3, #12
    1d48:	0029      	movs	r1, r5
    1d4a:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    1d4c:	2200      	movs	r2, #0
    1d4e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1d50:	428b      	cmp	r3, r1
    1d52:	d1fc      	bne.n	1d4e <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    1d54:	2300      	movs	r3, #0
    1d56:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1d58:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1d5a:	2400      	movs	r4, #0
    1d5c:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1d5e:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1d60:	3336      	adds	r3, #54	; 0x36
    1d62:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    1d64:	3301      	adds	r3, #1
    1d66:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    1d68:	3301      	adds	r3, #1
    1d6a:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    1d6c:	3b35      	subs	r3, #53	; 0x35
    1d6e:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    1d70:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1d72:	6828      	ldr	r0, [r5, #0]
    1d74:	4b45      	ldr	r3, [pc, #276]	; (1e8c <spi_init+0x1a4>)
    1d76:	4798      	blx	r3
    1d78:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1d7a:	4949      	ldr	r1, [pc, #292]	; (1ea0 <spi_init+0x1b8>)
    1d7c:	4b49      	ldr	r3, [pc, #292]	; (1ea4 <spi_init+0x1bc>)
    1d7e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1d80:	00bf      	lsls	r7, r7, #2
    1d82:	4b49      	ldr	r3, [pc, #292]	; (1ea8 <spi_init+0x1c0>)
    1d84:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1d86:	682f      	ldr	r7, [r5, #0]
    1d88:	ab04      	add	r3, sp, #16
    1d8a:	2280      	movs	r2, #128	; 0x80
    1d8c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d8e:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d90:	3a7f      	subs	r2, #127	; 0x7f
    1d92:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1d94:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1d96:	7833      	ldrb	r3, [r6, #0]
    1d98:	2b00      	cmp	r3, #0
    1d9a:	d102      	bne.n	1da2 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1d9c:	2200      	movs	r2, #0
    1d9e:	ab04      	add	r3, sp, #16
    1da0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1da2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1da4:	9305      	str	r3, [sp, #20]
    1da6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1da8:	9306      	str	r3, [sp, #24]
    1daa:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1dac:	9307      	str	r3, [sp, #28]
    1dae:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1db0:	9308      	str	r3, [sp, #32]
    1db2:	2400      	movs	r4, #0
    1db4:	e00b      	b.n	1dce <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1db6:	6823      	ldr	r3, [r4, #0]
    1db8:	220c      	movs	r2, #12
    1dba:	4313      	orrs	r3, r2
    1dbc:	6023      	str	r3, [r4, #0]
    1dbe:	e7c1      	b.n	1d44 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1dc0:	0038      	movs	r0, r7
    1dc2:	4b3a      	ldr	r3, [pc, #232]	; (1eac <spi_init+0x1c4>)
    1dc4:	4798      	blx	r3
    1dc6:	e00a      	b.n	1dde <spi_init+0xf6>
    1dc8:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1dca:	2c04      	cmp	r4, #4
    1dcc:	d010      	beq.n	1df0 <spi_init+0x108>
    1dce:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1dd0:	00a3      	lsls	r3, r4, #2
    1dd2:	aa02      	add	r2, sp, #8
    1dd4:	200c      	movs	r0, #12
    1dd6:	1812      	adds	r2, r2, r0
    1dd8:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1dda:	2800      	cmp	r0, #0
    1ddc:	d0f0      	beq.n	1dc0 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    1dde:	1c43      	adds	r3, r0, #1
    1de0:	d0f2      	beq.n	1dc8 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1de2:	a904      	add	r1, sp, #16
    1de4:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1de6:	0c00      	lsrs	r0, r0, #16
    1de8:	b2c0      	uxtb	r0, r0
    1dea:	4b31      	ldr	r3, [pc, #196]	; (1eb0 <spi_init+0x1c8>)
    1dec:	4798      	blx	r3
    1dee:	e7eb      	b.n	1dc8 <spi_init+0xe0>
	module->mode             = config->mode;
    1df0:	7833      	ldrb	r3, [r6, #0]
    1df2:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1df4:	7c33      	ldrb	r3, [r6, #16]
    1df6:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1df8:	7cb3      	ldrb	r3, [r6, #18]
    1dfa:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1dfc:	7d33      	ldrb	r3, [r6, #20]
    1dfe:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1e00:	2200      	movs	r2, #0
    1e02:	ab02      	add	r3, sp, #8
    1e04:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1e06:	7833      	ldrb	r3, [r6, #0]
    1e08:	2b01      	cmp	r3, #1
    1e0a:	d028      	beq.n	1e5e <spi_init+0x176>
	ctrla |= config->transfer_mode;
    1e0c:	6873      	ldr	r3, [r6, #4]
    1e0e:	68b2      	ldr	r2, [r6, #8]
    1e10:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    1e12:	68f2      	ldr	r2, [r6, #12]
    1e14:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    1e16:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    1e18:	7c72      	ldrb	r2, [r6, #17]
    1e1a:	2a00      	cmp	r2, #0
    1e1c:	d103      	bne.n	1e26 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1e1e:	4a25      	ldr	r2, [pc, #148]	; (1eb4 <spi_init+0x1cc>)
    1e20:	7892      	ldrb	r2, [r2, #2]
    1e22:	0792      	lsls	r2, r2, #30
    1e24:	d501      	bpl.n	1e2a <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1e26:	2280      	movs	r2, #128	; 0x80
    1e28:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    1e2a:	7cb2      	ldrb	r2, [r6, #18]
    1e2c:	2a00      	cmp	r2, #0
    1e2e:	d002      	beq.n	1e36 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1e30:	2280      	movs	r2, #128	; 0x80
    1e32:	0292      	lsls	r2, r2, #10
    1e34:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    1e36:	7cf2      	ldrb	r2, [r6, #19]
    1e38:	2a00      	cmp	r2, #0
    1e3a:	d002      	beq.n	1e42 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1e3c:	2280      	movs	r2, #128	; 0x80
    1e3e:	0092      	lsls	r2, r2, #2
    1e40:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    1e42:	7d32      	ldrb	r2, [r6, #20]
    1e44:	2a00      	cmp	r2, #0
    1e46:	d002      	beq.n	1e4e <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1e48:	2280      	movs	r2, #128	; 0x80
    1e4a:	0192      	lsls	r2, r2, #6
    1e4c:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    1e4e:	683a      	ldr	r2, [r7, #0]
    1e50:	4313      	orrs	r3, r2
    1e52:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1e54:	687b      	ldr	r3, [r7, #4]
    1e56:	430b      	orrs	r3, r1
    1e58:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    1e5a:	2000      	movs	r0, #0
    1e5c:	e74e      	b.n	1cfc <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1e5e:	6828      	ldr	r0, [r5, #0]
    1e60:	4b0a      	ldr	r3, [pc, #40]	; (1e8c <spi_init+0x1a4>)
    1e62:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1e64:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1e66:	b2c0      	uxtb	r0, r0
    1e68:	4b13      	ldr	r3, [pc, #76]	; (1eb8 <spi_init+0x1d0>)
    1e6a:	4798      	blx	r3
    1e6c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1e6e:	ab02      	add	r3, sp, #8
    1e70:	1d9a      	adds	r2, r3, #6
    1e72:	69b0      	ldr	r0, [r6, #24]
    1e74:	4b11      	ldr	r3, [pc, #68]	; (1ebc <spi_init+0x1d4>)
    1e76:	4798      	blx	r3
    1e78:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1e7a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d000      	beq.n	1e82 <spi_init+0x19a>
    1e80:	e73c      	b.n	1cfc <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    1e82:	ab02      	add	r3, sp, #8
    1e84:	3306      	adds	r3, #6
    1e86:	781b      	ldrb	r3, [r3, #0]
    1e88:	733b      	strb	r3, [r7, #12]
    1e8a:	e7bf      	b.n	1e0c <spi_init+0x124>
    1e8c:	00001b29 	.word	0x00001b29
    1e90:	40000400 	.word	0x40000400
    1e94:	00002f39 	.word	0x00002f39
    1e98:	00002ead 	.word	0x00002ead
    1e9c:	00001965 	.word	0x00001965
    1ea0:	00002155 	.word	0x00002155
    1ea4:	00001b65 	.word	0x00001b65
    1ea8:	200005bc 	.word	0x200005bc
    1eac:	000019b1 	.word	0x000019b1
    1eb0:	00003031 	.word	0x00003031
    1eb4:	41002000 	.word	0x41002000
    1eb8:	00002f55 	.word	0x00002f55
    1ebc:	000018a7 	.word	0x000018a7

00001ec0 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ec2:	46d6      	mov	lr, sl
    1ec4:	4647      	mov	r7, r8
    1ec6:	b580      	push	{r7, lr}
    1ec8:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1eca:	2438      	movs	r4, #56	; 0x38
    1ecc:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1ece:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1ed0:	2d05      	cmp	r5, #5
    1ed2:	d002      	beq.n	1eda <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1ed4:	3412      	adds	r4, #18
	if (length == 0) {
    1ed6:	2a00      	cmp	r2, #0
    1ed8:	d105      	bne.n	1ee6 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    1eda:	0020      	movs	r0, r4
    1edc:	b003      	add	sp, #12
    1ede:	bc0c      	pop	{r2, r3}
    1ee0:	4690      	mov	r8, r2
    1ee2:	469a      	mov	sl, r3
    1ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    1ee6:	79c4      	ldrb	r4, [r0, #7]
    1ee8:	2c00      	cmp	r4, #0
    1eea:	d144      	bne.n	1f76 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    1eec:	341c      	adds	r4, #28
    1eee:	e7f4      	b.n	1eda <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1ef0:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1ef2:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    1ef4:	423c      	tst	r4, r7
    1ef6:	d0fc      	beq.n	1ef2 <spi_read_buffer_wait+0x32>
    1ef8:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1efa:	423c      	tst	r4, r7
    1efc:	d01a      	beq.n	1f34 <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1efe:	4644      	mov	r4, r8
    1f00:	62ac      	str	r4, [r5, #40]	; 0x28
    1f02:	e017      	b.n	1f34 <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1f04:	7984      	ldrb	r4, [r0, #6]
    1f06:	2c01      	cmp	r4, #1
    1f08:	d026      	beq.n	1f58 <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1f0a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1f0c:	b2ec      	uxtb	r4, r5
    1f0e:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    1f10:	9c01      	ldr	r4, [sp, #4]
    1f12:	2c00      	cmp	r4, #0
    1f14:	d13a      	bne.n	1f8c <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    1f16:	1c75      	adds	r5, r6, #1
    1f18:	b2ad      	uxth	r5, r5
    1f1a:	4664      	mov	r4, ip
    1f1c:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1f1e:	7984      	ldrb	r4, [r0, #6]
    1f20:	2c01      	cmp	r4, #1
    1f22:	d01e      	beq.n	1f62 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    1f24:	002e      	movs	r6, r5
	while (length--) {
    1f26:	3a01      	subs	r2, #1
    1f28:	b292      	uxth	r2, r2
    1f2a:	4552      	cmp	r2, sl
    1f2c:	d01f      	beq.n	1f6e <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    1f2e:	7944      	ldrb	r4, [r0, #5]
    1f30:	2c01      	cmp	r4, #1
    1f32:	d0dd      	beq.n	1ef0 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f34:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1f36:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    1f38:	421c      	tst	r4, r3
    1f3a:	d0fc      	beq.n	1f36 <spi_read_buffer_wait+0x76>
    1f3c:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    1f3e:	421c      	tst	r4, r3
    1f40:	d017      	beq.n	1f72 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1f42:	8b6c      	ldrh	r4, [r5, #26]
    1f44:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    1f46:	2400      	movs	r4, #0
    1f48:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1f4a:	4664      	mov	r4, ip
    1f4c:	421c      	tst	r4, r3
    1f4e:	d0d9      	beq.n	1f04 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1f50:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    1f52:	241e      	movs	r4, #30
    1f54:	9401      	str	r4, [sp, #4]
    1f56:	e7d5      	b.n	1f04 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1f58:	6aac      	ldr	r4, [r5, #40]	; 0x28
    1f5a:	05e4      	lsls	r4, r4, #23
    1f5c:	0de4      	lsrs	r4, r4, #23
    1f5e:	46a4      	mov	ip, r4
    1f60:	e7d6      	b.n	1f10 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    1f62:	3602      	adds	r6, #2
    1f64:	b2b6      	uxth	r6, r6
    1f66:	4664      	mov	r4, ip
    1f68:	0a24      	lsrs	r4, r4, #8
    1f6a:	554c      	strb	r4, [r1, r5]
    1f6c:	e7db      	b.n	1f26 <spi_read_buffer_wait+0x66>
    1f6e:	9c01      	ldr	r4, [sp, #4]
    1f70:	e7b3      	b.n	1eda <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    1f72:	2410      	movs	r4, #16
    1f74:	e7b1      	b.n	1eda <spi_read_buffer_wait+0x1a>
	while (length--) {
    1f76:	3a01      	subs	r2, #1
    1f78:	b292      	uxth	r2, r2
    1f7a:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    1f7c:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1f7e:	05db      	lsls	r3, r3, #23
    1f80:	0ddb      	lsrs	r3, r3, #23
    1f82:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    1f84:	2304      	movs	r3, #4
	while (length--) {
    1f86:	4c02      	ldr	r4, [pc, #8]	; (1f90 <spi_read_buffer_wait+0xd0>)
    1f88:	46a2      	mov	sl, r4
    1f8a:	e7d0      	b.n	1f2e <spi_read_buffer_wait+0x6e>
    1f8c:	9c01      	ldr	r4, [sp, #4]
    1f8e:	e7a4      	b.n	1eda <spi_read_buffer_wait+0x1a>
    1f90:	0000ffff 	.word	0x0000ffff

00001f94 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1f94:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1f96:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1f98:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1f9a:	2c01      	cmp	r4, #1
    1f9c:	d001      	beq.n	1fa2 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1f9e:	0018      	movs	r0, r3
    1fa0:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1fa2:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1fa4:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1fa6:	2c00      	cmp	r4, #0
    1fa8:	d1f9      	bne.n	1f9e <spi_select_slave+0xa>
		if (select) {
    1faa:	2a00      	cmp	r2, #0
    1fac:	d058      	beq.n	2060 <STACK_SIZE+0x60>
			if (slave->address_enabled) {
    1fae:	784b      	ldrb	r3, [r1, #1]
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d044      	beq.n	203e <STACK_SIZE+0x3e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1fb4:	6803      	ldr	r3, [r0, #0]
    1fb6:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1fb8:	07db      	lsls	r3, r3, #31
    1fba:	d410      	bmi.n	1fde <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1fbc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1fbe:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1fc0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1fc2:	2900      	cmp	r1, #0
    1fc4:	d104      	bne.n	1fd0 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1fc6:	0953      	lsrs	r3, r2, #5
    1fc8:	01db      	lsls	r3, r3, #7
    1fca:	492e      	ldr	r1, [pc, #184]	; (2084 <STACK_SIZE+0x84>)
    1fcc:	468c      	mov	ip, r1
    1fce:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1fd0:	211f      	movs	r1, #31
    1fd2:	4011      	ands	r1, r2
    1fd4:	2201      	movs	r2, #1
    1fd6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1fd8:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1fda:	2305      	movs	r3, #5
    1fdc:	e7df      	b.n	1f9e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1fde:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1fe0:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1fe2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1fe4:	2c00      	cmp	r4, #0
    1fe6:	d104      	bne.n	1ff2 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1fe8:	0953      	lsrs	r3, r2, #5
    1fea:	01db      	lsls	r3, r3, #7
    1fec:	4c25      	ldr	r4, [pc, #148]	; (2084 <STACK_SIZE+0x84>)
    1fee:	46a4      	mov	ip, r4
    1ff0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ff2:	241f      	movs	r4, #31
    1ff4:	4014      	ands	r4, r2
    1ff6:	2201      	movs	r2, #1
    1ff8:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ffa:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1ffc:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1ffe:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2000:	07d2      	lsls	r2, r2, #31
    2002:	d501      	bpl.n	2008 <STACK_SIZE+0x8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2004:	788a      	ldrb	r2, [r1, #2]
    2006:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    2008:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    200a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    200c:	2a00      	cmp	r2, #0
    200e:	d1c6      	bne.n	1f9e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2010:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    2012:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2014:	7e13      	ldrb	r3, [r2, #24]
    2016:	420b      	tst	r3, r1
    2018:	d0fc      	beq.n	2014 <STACK_SIZE+0x14>
    201a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    201c:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    201e:	0749      	lsls	r1, r1, #29
    2020:	d5bd      	bpl.n	1f9e <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2022:	8b53      	ldrh	r3, [r2, #26]
    2024:	075b      	lsls	r3, r3, #29
    2026:	d501      	bpl.n	202c <STACK_SIZE+0x2c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2028:	2304      	movs	r3, #4
    202a:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    202c:	7983      	ldrb	r3, [r0, #6]
    202e:	2b01      	cmp	r3, #1
    2030:	d002      	beq.n	2038 <STACK_SIZE+0x38>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2032:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2034:	2300      	movs	r3, #0
    2036:	e7b2      	b.n	1f9e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2038:	6a93      	ldr	r3, [r2, #40]	; 0x28
    203a:	2300      	movs	r3, #0
    203c:	e7af      	b.n	1f9e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    203e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2040:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2042:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2044:	2900      	cmp	r1, #0
    2046:	d104      	bne.n	2052 <STACK_SIZE+0x52>
		return &(ports[port_index]->Group[group_index]);
    2048:	0953      	lsrs	r3, r2, #5
    204a:	01db      	lsls	r3, r3, #7
    204c:	490d      	ldr	r1, [pc, #52]	; (2084 <STACK_SIZE+0x84>)
    204e:	468c      	mov	ip, r1
    2050:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2052:	211f      	movs	r1, #31
    2054:	4011      	ands	r1, r2
    2056:	2201      	movs	r2, #1
    2058:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    205a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    205c:	2300      	movs	r3, #0
    205e:	e79e      	b.n	1f9e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    2060:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2062:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2064:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2066:	2900      	cmp	r1, #0
    2068:	d104      	bne.n	2074 <STACK_SIZE+0x74>
		return &(ports[port_index]->Group[group_index]);
    206a:	0953      	lsrs	r3, r2, #5
    206c:	01db      	lsls	r3, r3, #7
    206e:	4905      	ldr	r1, [pc, #20]	; (2084 <STACK_SIZE+0x84>)
    2070:	468c      	mov	ip, r1
    2072:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2074:	211f      	movs	r1, #31
    2076:	4011      	ands	r1, r2
    2078:	2201      	movs	r2, #1
    207a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    207c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    207e:	2300      	movs	r3, #0
    2080:	e78d      	b.n	1f9e <spi_select_slave+0xa>
    2082:	46c0      	nop			; (mov r8, r8)
    2084:	41004400 	.word	0x41004400

00002088 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2088:	b5f0      	push	{r4, r5, r6, r7, lr}
    208a:	46de      	mov	lr, fp
    208c:	4657      	mov	r7, sl
    208e:	464e      	mov	r6, r9
    2090:	4645      	mov	r5, r8
    2092:	b5e0      	push	{r5, r6, r7, lr}
    2094:	b083      	sub	sp, #12
    2096:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2098:	2338      	movs	r3, #56	; 0x38
    209a:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    209c:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    209e:	2c05      	cmp	r4, #5
    20a0:	d002      	beq.n	20a8 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    20a2:	3312      	adds	r3, #18
	if (length == 0) {
    20a4:	2a00      	cmp	r2, #0
    20a6:	d14b      	bne.n	2140 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    20a8:	0018      	movs	r0, r3
    20aa:	b003      	add	sp, #12
    20ac:	bc3c      	pop	{r2, r3, r4, r5}
    20ae:	4690      	mov	r8, r2
    20b0:	4699      	mov	r9, r3
    20b2:	46a2      	mov	sl, r4
    20b4:	46ab      	mov	fp, r5
    20b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    20b8:	3702      	adds	r7, #2
    20ba:	b2bf      	uxth	r7, r7
    20bc:	4641      	mov	r1, r8
    20be:	4653      	mov	r3, sl
    20c0:	5c59      	ldrb	r1, [r3, r1]
    20c2:	0209      	lsls	r1, r1, #8
    20c4:	465b      	mov	r3, fp
    20c6:	430b      	orrs	r3, r1
    20c8:	e018      	b.n	20fc <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    20ca:	7983      	ldrb	r3, [r0, #6]
    20cc:	2b01      	cmp	r3, #1
    20ce:	d02a      	beq.n	2126 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    20d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    20d2:	3e01      	subs	r6, #1
    20d4:	b2b6      	uxth	r6, r6
    20d6:	4566      	cmp	r6, ip
    20d8:	d027      	beq.n	212a <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    20da:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    20dc:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    20de:	4223      	tst	r3, r4
    20e0:	d0fc      	beq.n	20dc <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    20e2:	1c7b      	adds	r3, r7, #1
    20e4:	b29b      	uxth	r3, r3
    20e6:	4698      	mov	r8, r3
    20e8:	4653      	mov	r3, sl
    20ea:	5ddb      	ldrb	r3, [r3, r7]
    20ec:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    20ee:	7981      	ldrb	r1, [r0, #6]
    20f0:	2901      	cmp	r1, #1
    20f2:	d0e1      	beq.n	20b8 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    20f4:	4669      	mov	r1, sp
    20f6:	80cb      	strh	r3, [r1, #6]
    20f8:	88cb      	ldrh	r3, [r1, #6]
    20fa:	4647      	mov	r7, r8
    20fc:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    20fe:	4221      	tst	r1, r4
    2100:	d002      	beq.n	2108 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2102:	05db      	lsls	r3, r3, #23
    2104:	0ddb      	lsrs	r3, r3, #23
    2106:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    2108:	79c3      	ldrb	r3, [r0, #7]
    210a:	2b00      	cmp	r3, #0
    210c:	d0e1      	beq.n	20d2 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    210e:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2110:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    2112:	422b      	tst	r3, r5
    2114:	d0fc      	beq.n	2110 <spi_write_buffer_wait+0x88>
    2116:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    2118:	422b      	tst	r3, r5
    211a:	d0da      	beq.n	20d2 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    211c:	8b53      	ldrh	r3, [r2, #26]
    211e:	422b      	tst	r3, r5
    2120:	d0d3      	beq.n	20ca <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2122:	8355      	strh	r5, [r2, #26]
    2124:	e7d1      	b.n	20ca <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2126:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2128:	e7d3      	b.n	20d2 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    212a:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    212c:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    212e:	2a01      	cmp	r2, #1
    2130:	d1ba      	bne.n	20a8 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2132:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    2134:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2136:	7e0b      	ldrb	r3, [r1, #24]
    2138:	4213      	tst	r3, r2
    213a:	d0fc      	beq.n	2136 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    213c:	2300      	movs	r3, #0
    213e:	e7b3      	b.n	20a8 <spi_write_buffer_wait+0x20>
	while (length--) {
    2140:	3a01      	subs	r2, #1
    2142:	b296      	uxth	r6, r2
    2144:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    2146:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    2148:	2504      	movs	r5, #4
	while (length--) {
    214a:	4b01      	ldr	r3, [pc, #4]	; (2150 <spi_write_buffer_wait+0xc8>)
    214c:	469c      	mov	ip, r3
    214e:	e7c4      	b.n	20da <spi_write_buffer_wait+0x52>
    2150:	0000ffff 	.word	0x0000ffff

00002154 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    2154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    2156:	0080      	lsls	r0, r0, #2
    2158:	4b70      	ldr	r3, [pc, #448]	; (231c <_spi_interrupt_handler+0x1c8>)
    215a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    215c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    215e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    2160:	5ce7      	ldrb	r7, [r4, r3]
    2162:	2236      	movs	r2, #54	; 0x36
    2164:	5ca2      	ldrb	r2, [r4, r2]
    2166:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    2168:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    216a:	7db5      	ldrb	r5, [r6, #22]
    216c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    216e:	07eb      	lsls	r3, r5, #31
    2170:	d502      	bpl.n	2178 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2172:	7963      	ldrb	r3, [r4, #5]
    2174:	2b01      	cmp	r3, #1
    2176:	d01e      	beq.n	21b6 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    2178:	076b      	lsls	r3, r5, #29
    217a:	d511      	bpl.n	21a0 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    217c:	8b73      	ldrh	r3, [r6, #26]
    217e:	075b      	lsls	r3, r3, #29
    2180:	d55a      	bpl.n	2238 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    2182:	7a63      	ldrb	r3, [r4, #9]
    2184:	2b01      	cmp	r3, #1
    2186:	d008      	beq.n	219a <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2188:	221e      	movs	r2, #30
    218a:	2338      	movs	r3, #56	; 0x38
    218c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    218e:	3b35      	subs	r3, #53	; 0x35
    2190:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    2192:	3302      	adds	r3, #2
    2194:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    2196:	073b      	lsls	r3, r7, #28
    2198:	d44a      	bmi.n	2230 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    219a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    219c:	2304      	movs	r3, #4
    219e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    21a0:	07ab      	lsls	r3, r5, #30
    21a2:	d503      	bpl.n	21ac <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    21a4:	7963      	ldrb	r3, [r4, #5]
    21a6:	2b01      	cmp	r3, #1
    21a8:	d100      	bne.n	21ac <_spi_interrupt_handler+0x58>
    21aa:	e097      	b.n	22dc <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    21ac:	b26d      	sxtb	r5, r5
    21ae:	2d00      	cmp	r5, #0
    21b0:	da00      	bge.n	21b4 <_spi_interrupt_handler+0x60>
    21b2:	e0a9      	b.n	2308 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    21b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    21b6:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    21b8:	2b00      	cmp	r3, #0
    21ba:	d022      	beq.n	2202 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    21bc:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    21be:	2b00      	cmp	r3, #0
    21c0:	d0da      	beq.n	2178 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    21c2:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    21c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    21c6:	7813      	ldrb	r3, [r2, #0]
    21c8:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    21ca:	1c50      	adds	r0, r2, #1
    21cc:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    21ce:	79a0      	ldrb	r0, [r4, #6]
    21d0:	2801      	cmp	r0, #1
    21d2:	d027      	beq.n	2224 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    21d4:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    21d6:	05db      	lsls	r3, r3, #23
    21d8:	0ddb      	lsrs	r3, r3, #23
    21da:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    21dc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    21de:	3b01      	subs	r3, #1
    21e0:	b29b      	uxth	r3, r3
    21e2:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    21e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    21e6:	b29b      	uxth	r3, r3
    21e8:	2b00      	cmp	r3, #0
    21ea:	d1c5      	bne.n	2178 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    21ec:	3301      	adds	r3, #1
    21ee:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    21f0:	7a63      	ldrb	r3, [r4, #9]
    21f2:	2b01      	cmp	r3, #1
    21f4:	d1c0      	bne.n	2178 <_spi_interrupt_handler+0x24>
    21f6:	79e3      	ldrb	r3, [r4, #7]
    21f8:	2b00      	cmp	r3, #0
    21fa:	d1bd      	bne.n	2178 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    21fc:	3302      	adds	r3, #2
    21fe:	75b3      	strb	r3, [r6, #22]
    2200:	e7ba      	b.n	2178 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    2202:	4b47      	ldr	r3, [pc, #284]	; (2320 <_spi_interrupt_handler+0x1cc>)
    2204:	881b      	ldrh	r3, [r3, #0]
    2206:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2208:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    220a:	3b01      	subs	r3, #1
    220c:	b29b      	uxth	r3, r3
    220e:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    2210:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2212:	b29b      	uxth	r3, r3
    2214:	2b00      	cmp	r3, #0
    2216:	d101      	bne.n	221c <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2218:	3301      	adds	r3, #1
    221a:	7533      	strb	r3, [r6, #20]
		if (0
    221c:	7963      	ldrb	r3, [r4, #5]
    221e:	2b01      	cmp	r3, #1
    2220:	d0cc      	beq.n	21bc <_spi_interrupt_handler+0x68>
    2222:	e7a9      	b.n	2178 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    2224:	7850      	ldrb	r0, [r2, #1]
    2226:	0200      	lsls	r0, r0, #8
    2228:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    222a:	3202      	adds	r2, #2
    222c:	62e2      	str	r2, [r4, #44]	; 0x2c
    222e:	e7d2      	b.n	21d6 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    2230:	0020      	movs	r0, r4
    2232:	69a3      	ldr	r3, [r4, #24]
    2234:	4798      	blx	r3
    2236:	e7b0      	b.n	219a <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    2238:	7a63      	ldrb	r3, [r4, #9]
    223a:	2b01      	cmp	r3, #1
    223c:	d028      	beq.n	2290 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    223e:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    2240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2242:	05db      	lsls	r3, r3, #23
    2244:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    2246:	b2da      	uxtb	r2, r3
    2248:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    224a:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    224c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    224e:	1c51      	adds	r1, r2, #1
    2250:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2252:	79a1      	ldrb	r1, [r4, #6]
    2254:	2901      	cmp	r1, #1
    2256:	d034      	beq.n	22c2 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    2258:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    225a:	3b01      	subs	r3, #1
    225c:	b29b      	uxth	r3, r3
    225e:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    2260:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2262:	b29b      	uxth	r3, r3
    2264:	2b00      	cmp	r3, #0
    2266:	d000      	beq.n	226a <_spi_interrupt_handler+0x116>
    2268:	e79a      	b.n	21a0 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    226a:	2200      	movs	r2, #0
    226c:	3338      	adds	r3, #56	; 0x38
    226e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2270:	3b34      	subs	r3, #52	; 0x34
    2272:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    2274:	7a63      	ldrb	r3, [r4, #9]
    2276:	2b02      	cmp	r3, #2
    2278:	d029      	beq.n	22ce <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    227a:	7a63      	ldrb	r3, [r4, #9]
    227c:	2b00      	cmp	r3, #0
    227e:	d000      	beq.n	2282 <_spi_interrupt_handler+0x12e>
    2280:	e78e      	b.n	21a0 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2282:	07bb      	lsls	r3, r7, #30
    2284:	d400      	bmi.n	2288 <_spi_interrupt_handler+0x134>
    2286:	e78b      	b.n	21a0 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2288:	0020      	movs	r0, r4
    228a:	6923      	ldr	r3, [r4, #16]
    228c:	4798      	blx	r3
    228e:	e787      	b.n	21a0 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2290:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    2292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2294:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2296:	3b01      	subs	r3, #1
    2298:	b29b      	uxth	r3, r3
    229a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    229c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    229e:	b29b      	uxth	r3, r3
    22a0:	2b00      	cmp	r3, #0
    22a2:	d000      	beq.n	22a6 <_spi_interrupt_handler+0x152>
    22a4:	e77c      	b.n	21a0 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    22a6:	3304      	adds	r3, #4
    22a8:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    22aa:	2200      	movs	r2, #0
    22ac:	3334      	adds	r3, #52	; 0x34
    22ae:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    22b0:	3b35      	subs	r3, #53	; 0x35
    22b2:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    22b4:	07fb      	lsls	r3, r7, #31
    22b6:	d400      	bmi.n	22ba <_spi_interrupt_handler+0x166>
    22b8:	e772      	b.n	21a0 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    22ba:	0020      	movs	r0, r4
    22bc:	68e3      	ldr	r3, [r4, #12]
    22be:	4798      	blx	r3
    22c0:	e76e      	b.n	21a0 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    22c2:	0a1b      	lsrs	r3, r3, #8
    22c4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    22c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    22c8:	3301      	adds	r3, #1
    22ca:	62a3      	str	r3, [r4, #40]	; 0x28
    22cc:	e7c4      	b.n	2258 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    22ce:	077b      	lsls	r3, r7, #29
    22d0:	d400      	bmi.n	22d4 <_spi_interrupt_handler+0x180>
    22d2:	e765      	b.n	21a0 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    22d4:	0020      	movs	r0, r4
    22d6:	6963      	ldr	r3, [r4, #20]
    22d8:	4798      	blx	r3
    22da:	e761      	b.n	21a0 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    22dc:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    22de:	2b01      	cmp	r3, #1
    22e0:	d000      	beq.n	22e4 <_spi_interrupt_handler+0x190>
    22e2:	e763      	b.n	21ac <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    22e4:	79e3      	ldrb	r3, [r4, #7]
    22e6:	2b00      	cmp	r3, #0
    22e8:	d000      	beq.n	22ec <_spi_interrupt_handler+0x198>
    22ea:	e75f      	b.n	21ac <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    22ec:	3302      	adds	r3, #2
    22ee:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    22f0:	3301      	adds	r3, #1
    22f2:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    22f4:	2200      	movs	r2, #0
    22f6:	3335      	adds	r3, #53	; 0x35
    22f8:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    22fa:	07fb      	lsls	r3, r7, #31
    22fc:	d400      	bmi.n	2300 <_spi_interrupt_handler+0x1ac>
    22fe:	e755      	b.n	21ac <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2300:	0020      	movs	r0, r4
    2302:	68e3      	ldr	r3, [r4, #12]
    2304:	4798      	blx	r3
    2306:	e751      	b.n	21ac <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2308:	2380      	movs	r3, #128	; 0x80
    230a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    230c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    230e:	067b      	lsls	r3, r7, #25
    2310:	d400      	bmi.n	2314 <_spi_interrupt_handler+0x1c0>
    2312:	e74f      	b.n	21b4 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    2314:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2316:	0020      	movs	r0, r4
    2318:	4798      	blx	r3
}
    231a:	e74b      	b.n	21b4 <_spi_interrupt_handler+0x60>
    231c:	200005bc 	.word	0x200005bc
    2320:	200005d4 	.word	0x200005d4

00002324 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2324:	b5f0      	push	{r4, r5, r6, r7, lr}
    2326:	46de      	mov	lr, fp
    2328:	4657      	mov	r7, sl
    232a:	464e      	mov	r6, r9
    232c:	4645      	mov	r5, r8
    232e:	b5e0      	push	{r5, r6, r7, lr}
    2330:	b091      	sub	sp, #68	; 0x44
    2332:	0005      	movs	r5, r0
    2334:	000c      	movs	r4, r1
    2336:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2338:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    233a:	0008      	movs	r0, r1
    233c:	4bbc      	ldr	r3, [pc, #752]	; (2630 <usart_init+0x30c>)
    233e:	4798      	blx	r3
    2340:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2342:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2344:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2346:	07db      	lsls	r3, r3, #31
    2348:	d506      	bpl.n	2358 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    234a:	b011      	add	sp, #68	; 0x44
    234c:	bc3c      	pop	{r2, r3, r4, r5}
    234e:	4690      	mov	r8, r2
    2350:	4699      	mov	r9, r3
    2352:	46a2      	mov	sl, r4
    2354:	46ab      	mov	fp, r5
    2356:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2358:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    235a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    235c:	079b      	lsls	r3, r3, #30
    235e:	d4f4      	bmi.n	234a <usart_init+0x26>
    2360:	49b4      	ldr	r1, [pc, #720]	; (2634 <usart_init+0x310>)
    2362:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2364:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2366:	2301      	movs	r3, #1
    2368:	40bb      	lsls	r3, r7
    236a:	4303      	orrs	r3, r0
    236c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    236e:	a90f      	add	r1, sp, #60	; 0x3c
    2370:	272d      	movs	r7, #45	; 0x2d
    2372:	5df3      	ldrb	r3, [r6, r7]
    2374:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2376:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2378:	b2d3      	uxtb	r3, r2
    237a:	9302      	str	r3, [sp, #8]
    237c:	0018      	movs	r0, r3
    237e:	4bae      	ldr	r3, [pc, #696]	; (2638 <usart_init+0x314>)
    2380:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2382:	9802      	ldr	r0, [sp, #8]
    2384:	4bad      	ldr	r3, [pc, #692]	; (263c <usart_init+0x318>)
    2386:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2388:	5df0      	ldrb	r0, [r6, r7]
    238a:	2100      	movs	r1, #0
    238c:	4bac      	ldr	r3, [pc, #688]	; (2640 <usart_init+0x31c>)
    238e:	4798      	blx	r3
	module->character_size = config->character_size;
    2390:	7af3      	ldrb	r3, [r6, #11]
    2392:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2394:	2324      	movs	r3, #36	; 0x24
    2396:	5cf3      	ldrb	r3, [r6, r3]
    2398:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    239a:	2325      	movs	r3, #37	; 0x25
    239c:	5cf3      	ldrb	r3, [r6, r3]
    239e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    23a0:	7ef3      	ldrb	r3, [r6, #27]
    23a2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    23a4:	7f33      	ldrb	r3, [r6, #28]
    23a6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    23a8:	682b      	ldr	r3, [r5, #0]
    23aa:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    23ac:	0018      	movs	r0, r3
    23ae:	4ba0      	ldr	r3, [pc, #640]	; (2630 <usart_init+0x30c>)
    23b0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    23b2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    23b4:	2200      	movs	r2, #0
    23b6:	230e      	movs	r3, #14
    23b8:	a906      	add	r1, sp, #24
    23ba:	468c      	mov	ip, r1
    23bc:	4463      	add	r3, ip
    23be:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    23c0:	8a32      	ldrh	r2, [r6, #16]
    23c2:	9202      	str	r2, [sp, #8]
    23c4:	2380      	movs	r3, #128	; 0x80
    23c6:	01db      	lsls	r3, r3, #7
    23c8:	429a      	cmp	r2, r3
    23ca:	d100      	bne.n	23ce <usart_init+0xaa>
    23cc:	e09e      	b.n	250c <usart_init+0x1e8>
    23ce:	d90f      	bls.n	23f0 <usart_init+0xcc>
    23d0:	23c0      	movs	r3, #192	; 0xc0
    23d2:	01db      	lsls	r3, r3, #7
    23d4:	9a02      	ldr	r2, [sp, #8]
    23d6:	429a      	cmp	r2, r3
    23d8:	d100      	bne.n	23dc <usart_init+0xb8>
    23da:	e092      	b.n	2502 <usart_init+0x1de>
    23dc:	2380      	movs	r3, #128	; 0x80
    23de:	021b      	lsls	r3, r3, #8
    23e0:	429a      	cmp	r2, r3
    23e2:	d000      	beq.n	23e6 <usart_init+0xc2>
    23e4:	e11f      	b.n	2626 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    23e6:	2303      	movs	r3, #3
    23e8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    23ea:	2300      	movs	r3, #0
    23ec:	9307      	str	r3, [sp, #28]
    23ee:	e008      	b.n	2402 <usart_init+0xde>
	switch (config->sample_rate) {
    23f0:	2380      	movs	r3, #128	; 0x80
    23f2:	019b      	lsls	r3, r3, #6
    23f4:	429a      	cmp	r2, r3
    23f6:	d000      	beq.n	23fa <usart_init+0xd6>
    23f8:	e115      	b.n	2626 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    23fa:	2310      	movs	r3, #16
    23fc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    23fe:	3b0f      	subs	r3, #15
    2400:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2402:	6833      	ldr	r3, [r6, #0]
    2404:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2406:	68f3      	ldr	r3, [r6, #12]
    2408:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    240a:	6973      	ldr	r3, [r6, #20]
    240c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    240e:	7e33      	ldrb	r3, [r6, #24]
    2410:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2412:	2326      	movs	r3, #38	; 0x26
    2414:	5cf3      	ldrb	r3, [r6, r3]
    2416:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2418:	6873      	ldr	r3, [r6, #4]
    241a:	4699      	mov	r9, r3
	switch (transfer_mode)
    241c:	2b00      	cmp	r3, #0
    241e:	d100      	bne.n	2422 <usart_init+0xfe>
    2420:	e0a0      	b.n	2564 <usart_init+0x240>
    2422:	2380      	movs	r3, #128	; 0x80
    2424:	055b      	lsls	r3, r3, #21
    2426:	4599      	cmp	r9, r3
    2428:	d100      	bne.n	242c <usart_init+0x108>
    242a:	e084      	b.n	2536 <usart_init+0x212>
	if(config->encoding_format_enable) {
    242c:	7e73      	ldrb	r3, [r6, #25]
    242e:	2b00      	cmp	r3, #0
    2430:	d002      	beq.n	2438 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2432:	7eb3      	ldrb	r3, [r6, #26]
    2434:	4642      	mov	r2, r8
    2436:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2438:	682a      	ldr	r2, [r5, #0]
    243a:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    243c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    243e:	2b00      	cmp	r3, #0
    2440:	d1fc      	bne.n	243c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    2442:	330e      	adds	r3, #14
    2444:	aa06      	add	r2, sp, #24
    2446:	4694      	mov	ip, r2
    2448:	4463      	add	r3, ip
    244a:	881b      	ldrh	r3, [r3, #0]
    244c:	4642      	mov	r2, r8
    244e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2450:	9b05      	ldr	r3, [sp, #20]
    2452:	9a03      	ldr	r2, [sp, #12]
    2454:	4313      	orrs	r3, r2
    2456:	9a04      	ldr	r2, [sp, #16]
    2458:	4313      	orrs	r3, r2
    245a:	464a      	mov	r2, r9
    245c:	4313      	orrs	r3, r2
    245e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2460:	465b      	mov	r3, fp
    2462:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2464:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2466:	4653      	mov	r3, sl
    2468:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    246a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    246c:	2327      	movs	r3, #39	; 0x27
    246e:	5cf3      	ldrb	r3, [r6, r3]
    2470:	2b00      	cmp	r3, #0
    2472:	d101      	bne.n	2478 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2474:	3304      	adds	r3, #4
    2476:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2478:	7e73      	ldrb	r3, [r6, #25]
    247a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    247c:	7f32      	ldrb	r2, [r6, #28]
    247e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2480:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2482:	7f72      	ldrb	r2, [r6, #29]
    2484:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2486:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2488:	2224      	movs	r2, #36	; 0x24
    248a:	5cb2      	ldrb	r2, [r6, r2]
    248c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    248e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2490:	2225      	movs	r2, #37	; 0x25
    2492:	5cb2      	ldrb	r2, [r6, r2]
    2494:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2496:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2498:	7ab1      	ldrb	r1, [r6, #10]
    249a:	7af2      	ldrb	r2, [r6, #11]
    249c:	4311      	orrs	r1, r2
    249e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    24a0:	8933      	ldrh	r3, [r6, #8]
    24a2:	2bff      	cmp	r3, #255	; 0xff
    24a4:	d100      	bne.n	24a8 <usart_init+0x184>
    24a6:	e081      	b.n	25ac <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    24a8:	2280      	movs	r2, #128	; 0x80
    24aa:	0452      	lsls	r2, r2, #17
    24ac:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    24ae:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    24b0:	232c      	movs	r3, #44	; 0x2c
    24b2:	5cf3      	ldrb	r3, [r6, r3]
    24b4:	2b00      	cmp	r3, #0
    24b6:	d103      	bne.n	24c0 <usart_init+0x19c>
    24b8:	4b62      	ldr	r3, [pc, #392]	; (2644 <usart_init+0x320>)
    24ba:	789b      	ldrb	r3, [r3, #2]
    24bc:	079b      	lsls	r3, r3, #30
    24be:	d501      	bpl.n	24c4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    24c0:	2380      	movs	r3, #128	; 0x80
    24c2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    24c4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    24c6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    24c8:	2b00      	cmp	r3, #0
    24ca:	d1fc      	bne.n	24c6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    24cc:	4643      	mov	r3, r8
    24ce:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    24d0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    24d2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    24d4:	2b00      	cmp	r3, #0
    24d6:	d1fc      	bne.n	24d2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    24d8:	4643      	mov	r3, r8
    24da:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    24dc:	ab0e      	add	r3, sp, #56	; 0x38
    24de:	2280      	movs	r2, #128	; 0x80
    24e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    24e2:	2200      	movs	r2, #0
    24e4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    24e6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    24e8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    24ea:	6b33      	ldr	r3, [r6, #48]	; 0x30
    24ec:	930a      	str	r3, [sp, #40]	; 0x28
    24ee:	6b73      	ldr	r3, [r6, #52]	; 0x34
    24f0:	930b      	str	r3, [sp, #44]	; 0x2c
    24f2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    24f4:	930c      	str	r3, [sp, #48]	; 0x30
    24f6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    24f8:	9302      	str	r3, [sp, #8]
    24fa:	930d      	str	r3, [sp, #52]	; 0x34
    24fc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    24fe:	ae0a      	add	r6, sp, #40	; 0x28
    2500:	e063      	b.n	25ca <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2502:	2308      	movs	r3, #8
    2504:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2506:	3b07      	subs	r3, #7
    2508:	9307      	str	r3, [sp, #28]
    250a:	e77a      	b.n	2402 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    250c:	6833      	ldr	r3, [r6, #0]
    250e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2510:	68f3      	ldr	r3, [r6, #12]
    2512:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2514:	6973      	ldr	r3, [r6, #20]
    2516:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2518:	7e33      	ldrb	r3, [r6, #24]
    251a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    251c:	2326      	movs	r3, #38	; 0x26
    251e:	5cf3      	ldrb	r3, [r6, r3]
    2520:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2522:	6873      	ldr	r3, [r6, #4]
    2524:	4699      	mov	r9, r3
	switch (transfer_mode)
    2526:	2b00      	cmp	r3, #0
    2528:	d018      	beq.n	255c <usart_init+0x238>
    252a:	2380      	movs	r3, #128	; 0x80
    252c:	055b      	lsls	r3, r3, #21
    252e:	4599      	cmp	r9, r3
    2530:	d001      	beq.n	2536 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2532:	2000      	movs	r0, #0
    2534:	e025      	b.n	2582 <usart_init+0x25e>
			if (!config->use_external_clock) {
    2536:	2327      	movs	r3, #39	; 0x27
    2538:	5cf3      	ldrb	r3, [r6, r3]
    253a:	2b00      	cmp	r3, #0
    253c:	d000      	beq.n	2540 <usart_init+0x21c>
    253e:	e775      	b.n	242c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2540:	6a33      	ldr	r3, [r6, #32]
    2542:	001f      	movs	r7, r3
    2544:	b2c0      	uxtb	r0, r0
    2546:	4b40      	ldr	r3, [pc, #256]	; (2648 <usart_init+0x324>)
    2548:	4798      	blx	r3
    254a:	0001      	movs	r1, r0
    254c:	220e      	movs	r2, #14
    254e:	ab06      	add	r3, sp, #24
    2550:	469c      	mov	ip, r3
    2552:	4462      	add	r2, ip
    2554:	0038      	movs	r0, r7
    2556:	4b3d      	ldr	r3, [pc, #244]	; (264c <usart_init+0x328>)
    2558:	4798      	blx	r3
    255a:	e012      	b.n	2582 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    255c:	2308      	movs	r3, #8
    255e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2560:	2300      	movs	r3, #0
    2562:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2564:	2327      	movs	r3, #39	; 0x27
    2566:	5cf3      	ldrb	r3, [r6, r3]
    2568:	2b00      	cmp	r3, #0
    256a:	d00e      	beq.n	258a <usart_init+0x266>
				status_code =
    256c:	9b06      	ldr	r3, [sp, #24]
    256e:	9300      	str	r3, [sp, #0]
    2570:	9b07      	ldr	r3, [sp, #28]
    2572:	220e      	movs	r2, #14
    2574:	a906      	add	r1, sp, #24
    2576:	468c      	mov	ip, r1
    2578:	4462      	add	r2, ip
    257a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    257c:	6a30      	ldr	r0, [r6, #32]
    257e:	4f34      	ldr	r7, [pc, #208]	; (2650 <usart_init+0x32c>)
    2580:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2582:	2800      	cmp	r0, #0
    2584:	d000      	beq.n	2588 <usart_init+0x264>
    2586:	e6e0      	b.n	234a <usart_init+0x26>
    2588:	e750      	b.n	242c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    258a:	6a33      	ldr	r3, [r6, #32]
    258c:	001f      	movs	r7, r3
    258e:	b2c0      	uxtb	r0, r0
    2590:	4b2d      	ldr	r3, [pc, #180]	; (2648 <usart_init+0x324>)
    2592:	4798      	blx	r3
    2594:	0001      	movs	r1, r0
				status_code =
    2596:	9b06      	ldr	r3, [sp, #24]
    2598:	9300      	str	r3, [sp, #0]
    259a:	9b07      	ldr	r3, [sp, #28]
    259c:	220e      	movs	r2, #14
    259e:	a806      	add	r0, sp, #24
    25a0:	4684      	mov	ip, r0
    25a2:	4462      	add	r2, ip
    25a4:	0038      	movs	r0, r7
    25a6:	4f2a      	ldr	r7, [pc, #168]	; (2650 <usart_init+0x32c>)
    25a8:	47b8      	blx	r7
    25aa:	e7ea      	b.n	2582 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    25ac:	7ef3      	ldrb	r3, [r6, #27]
    25ae:	2b00      	cmp	r3, #0
    25b0:	d100      	bne.n	25b4 <usart_init+0x290>
    25b2:	e77d      	b.n	24b0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    25b4:	2380      	movs	r3, #128	; 0x80
    25b6:	04db      	lsls	r3, r3, #19
    25b8:	431f      	orrs	r7, r3
    25ba:	e779      	b.n	24b0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    25bc:	0020      	movs	r0, r4
    25be:	4b25      	ldr	r3, [pc, #148]	; (2654 <usart_init+0x330>)
    25c0:	4798      	blx	r3
    25c2:	e007      	b.n	25d4 <usart_init+0x2b0>
    25c4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    25c6:	2f04      	cmp	r7, #4
    25c8:	d00d      	beq.n	25e6 <usart_init+0x2c2>
    25ca:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    25cc:	00bb      	lsls	r3, r7, #2
    25ce:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    25d0:	2800      	cmp	r0, #0
    25d2:	d0f3      	beq.n	25bc <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    25d4:	1c43      	adds	r3, r0, #1
    25d6:	d0f5      	beq.n	25c4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    25d8:	a90e      	add	r1, sp, #56	; 0x38
    25da:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    25dc:	0c00      	lsrs	r0, r0, #16
    25de:	b2c0      	uxtb	r0, r0
    25e0:	4b1d      	ldr	r3, [pc, #116]	; (2658 <usart_init+0x334>)
    25e2:	4798      	blx	r3
    25e4:	e7ee      	b.n	25c4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    25e6:	2300      	movs	r3, #0
    25e8:	60eb      	str	r3, [r5, #12]
    25ea:	612b      	str	r3, [r5, #16]
    25ec:	616b      	str	r3, [r5, #20]
    25ee:	61ab      	str	r3, [r5, #24]
    25f0:	61eb      	str	r3, [r5, #28]
    25f2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    25f4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    25f6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    25f8:	2200      	movs	r2, #0
    25fa:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    25fc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    25fe:	3330      	adds	r3, #48	; 0x30
    2600:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2602:	3301      	adds	r3, #1
    2604:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2606:	3301      	adds	r3, #1
    2608:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    260a:	3301      	adds	r3, #1
    260c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    260e:	6828      	ldr	r0, [r5, #0]
    2610:	4b07      	ldr	r3, [pc, #28]	; (2630 <usart_init+0x30c>)
    2612:	4798      	blx	r3
    2614:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2616:	4911      	ldr	r1, [pc, #68]	; (265c <usart_init+0x338>)
    2618:	4b11      	ldr	r3, [pc, #68]	; (2660 <usart_init+0x33c>)
    261a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    261c:	00a4      	lsls	r4, r4, #2
    261e:	4b11      	ldr	r3, [pc, #68]	; (2664 <usart_init+0x340>)
    2620:	50e5      	str	r5, [r4, r3]
	return status_code;
    2622:	2000      	movs	r0, #0
    2624:	e691      	b.n	234a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2626:	2310      	movs	r3, #16
    2628:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    262a:	2300      	movs	r3, #0
    262c:	9307      	str	r3, [sp, #28]
    262e:	e6e8      	b.n	2402 <usart_init+0xde>
    2630:	00001b29 	.word	0x00001b29
    2634:	40000400 	.word	0x40000400
    2638:	00002f39 	.word	0x00002f39
    263c:	00002ead 	.word	0x00002ead
    2640:	00001965 	.word	0x00001965
    2644:	41002000 	.word	0x41002000
    2648:	00002f55 	.word	0x00002f55
    264c:	000018a7 	.word	0x000018a7
    2650:	000018d1 	.word	0x000018d1
    2654:	000019b1 	.word	0x000019b1
    2658:	00003031 	.word	0x00003031
    265c:	00002769 	.word	0x00002769
    2660:	00001b65 	.word	0x00001b65
    2664:	200005bc 	.word	0x200005bc

00002668 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    266a:	0006      	movs	r6, r0
    266c:	000c      	movs	r4, r1
    266e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2670:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2672:	4b0a      	ldr	r3, [pc, #40]	; (269c <_usart_write_buffer+0x34>)
    2674:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2676:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2678:	b29b      	uxth	r3, r3
    267a:	2b00      	cmp	r3, #0
    267c:	d003      	beq.n	2686 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    267e:	4b08      	ldr	r3, [pc, #32]	; (26a0 <_usart_write_buffer+0x38>)
    2680:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2682:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    2686:	85f5      	strh	r5, [r6, #46]	; 0x2e
    2688:	4b05      	ldr	r3, [pc, #20]	; (26a0 <_usart_write_buffer+0x38>)
    268a:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    268c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    268e:	2205      	movs	r2, #5
    2690:	2333      	movs	r3, #51	; 0x33
    2692:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2694:	3b32      	subs	r3, #50	; 0x32
    2696:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2698:	2000      	movs	r0, #0
    269a:	e7f3      	b.n	2684 <_usart_write_buffer+0x1c>
    269c:	00001581 	.word	0x00001581
    26a0:	000015c1 	.word	0x000015c1

000026a4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    26a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26a6:	0004      	movs	r4, r0
    26a8:	000d      	movs	r5, r1
    26aa:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    26ac:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    26ae:	4b0f      	ldr	r3, [pc, #60]	; (26ec <_usart_read_buffer+0x48>)
    26b0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    26b2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    26b4:	b29b      	uxth	r3, r3
    26b6:	2b00      	cmp	r3, #0
    26b8:	d003      	beq.n	26c2 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    26ba:	4b0d      	ldr	r3, [pc, #52]	; (26f0 <_usart_read_buffer+0x4c>)
    26bc:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    26be:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    26c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    26c2:	85a6      	strh	r6, [r4, #44]	; 0x2c
    26c4:	4b0a      	ldr	r3, [pc, #40]	; (26f0 <_usart_read_buffer+0x4c>)
    26c6:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    26c8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    26ca:	2205      	movs	r2, #5
    26cc:	2332      	movs	r3, #50	; 0x32
    26ce:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    26d0:	3b2e      	subs	r3, #46	; 0x2e
    26d2:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    26d4:	7a23      	ldrb	r3, [r4, #8]
    26d6:	2b00      	cmp	r3, #0
    26d8:	d001      	beq.n	26de <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    26da:	2320      	movs	r3, #32
    26dc:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    26de:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    26e0:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    26e2:	2b00      	cmp	r3, #0
    26e4:	d0ec      	beq.n	26c0 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    26e6:	2308      	movs	r3, #8
    26e8:	75bb      	strb	r3, [r7, #22]
    26ea:	e7e9      	b.n	26c0 <_usart_read_buffer+0x1c>
    26ec:	00001581 	.word	0x00001581
    26f0:	000015c1 	.word	0x000015c1

000026f4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    26f4:	1c93      	adds	r3, r2, #2
    26f6:	009b      	lsls	r3, r3, #2
    26f8:	18c3      	adds	r3, r0, r3
    26fa:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    26fc:	2130      	movs	r1, #48	; 0x30
    26fe:	2301      	movs	r3, #1
    2700:	4093      	lsls	r3, r2
    2702:	001a      	movs	r2, r3
    2704:	5c43      	ldrb	r3, [r0, r1]
    2706:	4313      	orrs	r3, r2
    2708:	5443      	strb	r3, [r0, r1]
}
    270a:	4770      	bx	lr

0000270c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    270c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    270e:	2317      	movs	r3, #23
	if (length == 0) {
    2710:	2a00      	cmp	r2, #0
    2712:	d101      	bne.n	2718 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2714:	0018      	movs	r0, r3
    2716:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2718:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    271a:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    271c:	2c00      	cmp	r4, #0
    271e:	d0f9      	beq.n	2714 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2720:	4b01      	ldr	r3, [pc, #4]	; (2728 <usart_write_buffer_job+0x1c>)
    2722:	4798      	blx	r3
    2724:	0003      	movs	r3, r0
    2726:	e7f5      	b.n	2714 <usart_write_buffer_job+0x8>
    2728:	00002669 	.word	0x00002669

0000272c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    272c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    272e:	2317      	movs	r3, #23
	if (length == 0) {
    2730:	2a00      	cmp	r2, #0
    2732:	d101      	bne.n	2738 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2734:	0018      	movs	r0, r3
    2736:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2738:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    273a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    273c:	2c00      	cmp	r4, #0
    273e:	d0f9      	beq.n	2734 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2740:	4b01      	ldr	r3, [pc, #4]	; (2748 <usart_read_buffer_job+0x1c>)
    2742:	4798      	blx	r3
    2744:	0003      	movs	r3, r0
    2746:	e7f5      	b.n	2734 <usart_read_buffer_job+0x8>
    2748:	000026a5 	.word	0x000026a5

0000274c <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    274c:	2900      	cmp	r1, #0
    274e:	d003      	beq.n	2758 <usart_get_job_status+0xc>
    2750:	2901      	cmp	r1, #1
    2752:	d005      	beq.n	2760 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2754:	2017      	movs	r0, #23
    2756:	e002      	b.n	275e <usart_get_job_status+0x12>
			status_code = module->rx_status;
    2758:	2332      	movs	r3, #50	; 0x32
    275a:	5cc0      	ldrb	r0, [r0, r3]
    275c:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    275e:	4770      	bx	lr
			status_code = module->tx_status;
    2760:	2333      	movs	r3, #51	; 0x33
    2762:	5cc0      	ldrb	r0, [r0, r3]
    2764:	b2c0      	uxtb	r0, r0
			break;
    2766:	e7fa      	b.n	275e <usart_get_job_status+0x12>

00002768 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    276a:	0080      	lsls	r0, r0, #2
    276c:	4b62      	ldr	r3, [pc, #392]	; (28f8 <_usart_interrupt_handler+0x190>)
    276e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2770:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2772:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2774:	2b00      	cmp	r3, #0
    2776:	d1fc      	bne.n	2772 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2778:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    277a:	7da6      	ldrb	r6, [r4, #22]
    277c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    277e:	2330      	movs	r3, #48	; 0x30
    2780:	5ceb      	ldrb	r3, [r5, r3]
    2782:	2231      	movs	r2, #49	; 0x31
    2784:	5caf      	ldrb	r7, [r5, r2]
    2786:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2788:	07f3      	lsls	r3, r6, #31
    278a:	d522      	bpl.n	27d2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    278c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    278e:	b29b      	uxth	r3, r3
    2790:	2b00      	cmp	r3, #0
    2792:	d01c      	beq.n	27ce <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2794:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2796:	7813      	ldrb	r3, [r2, #0]
    2798:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    279a:	1c51      	adds	r1, r2, #1
    279c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    279e:	7969      	ldrb	r1, [r5, #5]
    27a0:	2901      	cmp	r1, #1
    27a2:	d00e      	beq.n	27c2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    27a4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    27a6:	05db      	lsls	r3, r3, #23
    27a8:	0ddb      	lsrs	r3, r3, #23
    27aa:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    27ac:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    27ae:	3b01      	subs	r3, #1
    27b0:	b29b      	uxth	r3, r3
    27b2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    27b4:	2b00      	cmp	r3, #0
    27b6:	d10c      	bne.n	27d2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    27b8:	3301      	adds	r3, #1
    27ba:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    27bc:	3301      	adds	r3, #1
    27be:	75a3      	strb	r3, [r4, #22]
    27c0:	e007      	b.n	27d2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    27c2:	7851      	ldrb	r1, [r2, #1]
    27c4:	0209      	lsls	r1, r1, #8
    27c6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    27c8:	3202      	adds	r2, #2
    27ca:	62aa      	str	r2, [r5, #40]	; 0x28
    27cc:	e7eb      	b.n	27a6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    27ce:	2301      	movs	r3, #1
    27d0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    27d2:	07b3      	lsls	r3, r6, #30
    27d4:	d506      	bpl.n	27e4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    27d6:	2302      	movs	r3, #2
    27d8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    27da:	2200      	movs	r2, #0
    27dc:	3331      	adds	r3, #49	; 0x31
    27de:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    27e0:	07fb      	lsls	r3, r7, #31
    27e2:	d41a      	bmi.n	281a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    27e4:	0773      	lsls	r3, r6, #29
    27e6:	d565      	bpl.n	28b4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    27e8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    27ea:	b29b      	uxth	r3, r3
    27ec:	2b00      	cmp	r3, #0
    27ee:	d05f      	beq.n	28b0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    27f0:	8b63      	ldrh	r3, [r4, #26]
    27f2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    27f4:	071a      	lsls	r2, r3, #28
    27f6:	d414      	bmi.n	2822 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    27f8:	223f      	movs	r2, #63	; 0x3f
    27fa:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    27fc:	2b00      	cmp	r3, #0
    27fe:	d034      	beq.n	286a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2800:	079a      	lsls	r2, r3, #30
    2802:	d511      	bpl.n	2828 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2804:	221a      	movs	r2, #26
    2806:	2332      	movs	r3, #50	; 0x32
    2808:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    280a:	3b30      	subs	r3, #48	; 0x30
    280c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    280e:	077b      	lsls	r3, r7, #29
    2810:	d550      	bpl.n	28b4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2812:	0028      	movs	r0, r5
    2814:	696b      	ldr	r3, [r5, #20]
    2816:	4798      	blx	r3
    2818:	e04c      	b.n	28b4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    281a:	0028      	movs	r0, r5
    281c:	68eb      	ldr	r3, [r5, #12]
    281e:	4798      	blx	r3
    2820:	e7e0      	b.n	27e4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2822:	2237      	movs	r2, #55	; 0x37
    2824:	4013      	ands	r3, r2
    2826:	e7e9      	b.n	27fc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2828:	075a      	lsls	r2, r3, #29
    282a:	d505      	bpl.n	2838 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    282c:	221e      	movs	r2, #30
    282e:	2332      	movs	r3, #50	; 0x32
    2830:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2832:	3b2e      	subs	r3, #46	; 0x2e
    2834:	8363      	strh	r3, [r4, #26]
    2836:	e7ea      	b.n	280e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2838:	07da      	lsls	r2, r3, #31
    283a:	d505      	bpl.n	2848 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    283c:	2213      	movs	r2, #19
    283e:	2332      	movs	r3, #50	; 0x32
    2840:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2842:	3b31      	subs	r3, #49	; 0x31
    2844:	8363      	strh	r3, [r4, #26]
    2846:	e7e2      	b.n	280e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2848:	06da      	lsls	r2, r3, #27
    284a:	d505      	bpl.n	2858 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    284c:	2242      	movs	r2, #66	; 0x42
    284e:	2332      	movs	r3, #50	; 0x32
    2850:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2852:	3b22      	subs	r3, #34	; 0x22
    2854:	8363      	strh	r3, [r4, #26]
    2856:	e7da      	b.n	280e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2858:	2220      	movs	r2, #32
    285a:	421a      	tst	r2, r3
    285c:	d0d7      	beq.n	280e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    285e:	3221      	adds	r2, #33	; 0x21
    2860:	2332      	movs	r3, #50	; 0x32
    2862:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2864:	3b12      	subs	r3, #18
    2866:	8363      	strh	r3, [r4, #26]
    2868:	e7d1      	b.n	280e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    286a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    286c:	05db      	lsls	r3, r3, #23
    286e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2870:	b2da      	uxtb	r2, r3
    2872:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2874:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2876:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2878:	1c51      	adds	r1, r2, #1
    287a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    287c:	7969      	ldrb	r1, [r5, #5]
    287e:	2901      	cmp	r1, #1
    2880:	d010      	beq.n	28a4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2882:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2884:	3b01      	subs	r3, #1
    2886:	b29b      	uxth	r3, r3
    2888:	85ab      	strh	r3, [r5, #44]	; 0x2c
    288a:	2b00      	cmp	r3, #0
    288c:	d112      	bne.n	28b4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    288e:	3304      	adds	r3, #4
    2890:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2892:	2200      	movs	r2, #0
    2894:	332e      	adds	r3, #46	; 0x2e
    2896:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2898:	07bb      	lsls	r3, r7, #30
    289a:	d50b      	bpl.n	28b4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    289c:	0028      	movs	r0, r5
    289e:	692b      	ldr	r3, [r5, #16]
    28a0:	4798      	blx	r3
    28a2:	e007      	b.n	28b4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    28a4:	0a1b      	lsrs	r3, r3, #8
    28a6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    28a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    28aa:	3301      	adds	r3, #1
    28ac:	626b      	str	r3, [r5, #36]	; 0x24
    28ae:	e7e8      	b.n	2882 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    28b0:	2304      	movs	r3, #4
    28b2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    28b4:	06f3      	lsls	r3, r6, #27
    28b6:	d504      	bpl.n	28c2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    28b8:	2310      	movs	r3, #16
    28ba:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    28bc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    28be:	06fb      	lsls	r3, r7, #27
    28c0:	d40e      	bmi.n	28e0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    28c2:	06b3      	lsls	r3, r6, #26
    28c4:	d504      	bpl.n	28d0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    28c6:	2320      	movs	r3, #32
    28c8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    28ca:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    28cc:	073b      	lsls	r3, r7, #28
    28ce:	d40b      	bmi.n	28e8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    28d0:	0733      	lsls	r3, r6, #28
    28d2:	d504      	bpl.n	28de <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    28d4:	2308      	movs	r3, #8
    28d6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    28d8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    28da:	06bb      	lsls	r3, r7, #26
    28dc:	d408      	bmi.n	28f0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    28de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    28e0:	0028      	movs	r0, r5
    28e2:	69eb      	ldr	r3, [r5, #28]
    28e4:	4798      	blx	r3
    28e6:	e7ec      	b.n	28c2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    28e8:	0028      	movs	r0, r5
    28ea:	69ab      	ldr	r3, [r5, #24]
    28ec:	4798      	blx	r3
    28ee:	e7ef      	b.n	28d0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    28f0:	6a2b      	ldr	r3, [r5, #32]
    28f2:	0028      	movs	r0, r5
    28f4:	4798      	blx	r3
}
    28f6:	e7f2      	b.n	28de <_usart_interrupt_handler+0x176>
    28f8:	200005bc 	.word	0x200005bc

000028fc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    28fc:	b510      	push	{r4, lr}
	switch (clock_source) {
    28fe:	2808      	cmp	r0, #8
    2900:	d803      	bhi.n	290a <system_clock_source_get_hz+0xe>
    2902:	0080      	lsls	r0, r0, #2
    2904:	4b1c      	ldr	r3, [pc, #112]	; (2978 <system_clock_source_get_hz+0x7c>)
    2906:	581b      	ldr	r3, [r3, r0]
    2908:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    290a:	2000      	movs	r0, #0
    290c:	e032      	b.n	2974 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    290e:	4b1b      	ldr	r3, [pc, #108]	; (297c <system_clock_source_get_hz+0x80>)
    2910:	6918      	ldr	r0, [r3, #16]
    2912:	e02f      	b.n	2974 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2914:	4b1a      	ldr	r3, [pc, #104]	; (2980 <system_clock_source_get_hz+0x84>)
    2916:	6a1b      	ldr	r3, [r3, #32]
    2918:	059b      	lsls	r3, r3, #22
    291a:	0f9b      	lsrs	r3, r3, #30
    291c:	4819      	ldr	r0, [pc, #100]	; (2984 <system_clock_source_get_hz+0x88>)
    291e:	40d8      	lsrs	r0, r3
    2920:	e028      	b.n	2974 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2922:	4b16      	ldr	r3, [pc, #88]	; (297c <system_clock_source_get_hz+0x80>)
    2924:	6958      	ldr	r0, [r3, #20]
    2926:	e025      	b.n	2974 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2928:	4b14      	ldr	r3, [pc, #80]	; (297c <system_clock_source_get_hz+0x80>)
    292a:	681b      	ldr	r3, [r3, #0]
			return 0;
    292c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    292e:	079b      	lsls	r3, r3, #30
    2930:	d520      	bpl.n	2974 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2932:	4913      	ldr	r1, [pc, #76]	; (2980 <system_clock_source_get_hz+0x84>)
    2934:	2210      	movs	r2, #16
    2936:	68cb      	ldr	r3, [r1, #12]
    2938:	421a      	tst	r2, r3
    293a:	d0fc      	beq.n	2936 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    293c:	4b0f      	ldr	r3, [pc, #60]	; (297c <system_clock_source_get_hz+0x80>)
    293e:	681a      	ldr	r2, [r3, #0]
    2940:	2324      	movs	r3, #36	; 0x24
    2942:	4013      	ands	r3, r2
    2944:	2b04      	cmp	r3, #4
    2946:	d001      	beq.n	294c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2948:	480f      	ldr	r0, [pc, #60]	; (2988 <system_clock_source_get_hz+0x8c>)
    294a:	e013      	b.n	2974 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    294c:	2000      	movs	r0, #0
    294e:	4b0f      	ldr	r3, [pc, #60]	; (298c <system_clock_source_get_hz+0x90>)
    2950:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2952:	4b0a      	ldr	r3, [pc, #40]	; (297c <system_clock_source_get_hz+0x80>)
    2954:	689b      	ldr	r3, [r3, #8]
    2956:	041b      	lsls	r3, r3, #16
    2958:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    295a:	4358      	muls	r0, r3
    295c:	e00a      	b.n	2974 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    295e:	2350      	movs	r3, #80	; 0x50
    2960:	4a07      	ldr	r2, [pc, #28]	; (2980 <system_clock_source_get_hz+0x84>)
    2962:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2964:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2966:	075b      	lsls	r3, r3, #29
    2968:	d504      	bpl.n	2974 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    296a:	4b04      	ldr	r3, [pc, #16]	; (297c <system_clock_source_get_hz+0x80>)
    296c:	68d8      	ldr	r0, [r3, #12]
    296e:	e001      	b.n	2974 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2970:	2080      	movs	r0, #128	; 0x80
    2972:	0200      	lsls	r0, r0, #8
	}
}
    2974:	bd10      	pop	{r4, pc}
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	000053d0 	.word	0x000053d0
    297c:	2000012c 	.word	0x2000012c
    2980:	40000800 	.word	0x40000800
    2984:	007a1200 	.word	0x007a1200
    2988:	02dc6c00 	.word	0x02dc6c00
    298c:	00002f55 	.word	0x00002f55

00002990 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2990:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2992:	490c      	ldr	r1, [pc, #48]	; (29c4 <system_clock_source_osc8m_set_config+0x34>)
    2994:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2996:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2998:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    299a:	7840      	ldrb	r0, [r0, #1]
    299c:	2201      	movs	r2, #1
    299e:	4010      	ands	r0, r2
    29a0:	0180      	lsls	r0, r0, #6
    29a2:	2640      	movs	r6, #64	; 0x40
    29a4:	43b3      	bics	r3, r6
    29a6:	4303      	orrs	r3, r0
    29a8:	402a      	ands	r2, r5
    29aa:	01d2      	lsls	r2, r2, #7
    29ac:	2080      	movs	r0, #128	; 0x80
    29ae:	4383      	bics	r3, r0
    29b0:	4313      	orrs	r3, r2
    29b2:	2203      	movs	r2, #3
    29b4:	4022      	ands	r2, r4
    29b6:	0212      	lsls	r2, r2, #8
    29b8:	4803      	ldr	r0, [pc, #12]	; (29c8 <system_clock_source_osc8m_set_config+0x38>)
    29ba:	4003      	ands	r3, r0
    29bc:	4313      	orrs	r3, r2
    29be:	620b      	str	r3, [r1, #32]
}
    29c0:	bd70      	pop	{r4, r5, r6, pc}
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	40000800 	.word	0x40000800
    29c8:	fffffcff 	.word	0xfffffcff

000029cc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    29cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ce:	46de      	mov	lr, fp
    29d0:	4657      	mov	r7, sl
    29d2:	464e      	mov	r6, r9
    29d4:	4645      	mov	r5, r8
    29d6:	b5e0      	push	{r5, r6, r7, lr}
    29d8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    29da:	4b26      	ldr	r3, [pc, #152]	; (2a74 <system_clock_source_xosc32k_set_config+0xa8>)
    29dc:	469b      	mov	fp, r3
    29de:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    29e0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    29e2:	7800      	ldrb	r0, [r0, #0]
    29e4:	4242      	negs	r2, r0
    29e6:	4142      	adcs	r2, r0
    29e8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    29ea:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    29ec:	78ca      	ldrb	r2, [r1, #3]
    29ee:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    29f0:	790a      	ldrb	r2, [r1, #4]
    29f2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    29f4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    29f6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    29f8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    29fa:	688a      	ldr	r2, [r1, #8]
    29fc:	491e      	ldr	r1, [pc, #120]	; (2a78 <system_clock_source_xosc32k_set_config+0xac>)
    29fe:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2a00:	2101      	movs	r1, #1
    2a02:	464a      	mov	r2, r9
    2a04:	0092      	lsls	r2, r2, #2
    2a06:	4691      	mov	r9, r2
    2a08:	2204      	movs	r2, #4
    2a0a:	4393      	bics	r3, r2
    2a0c:	464a      	mov	r2, r9
    2a0e:	4313      	orrs	r3, r2
    2a10:	4642      	mov	r2, r8
    2a12:	400a      	ands	r2, r1
    2a14:	00d2      	lsls	r2, r2, #3
    2a16:	4690      	mov	r8, r2
    2a18:	2208      	movs	r2, #8
    2a1a:	4393      	bics	r3, r2
    2a1c:	4642      	mov	r2, r8
    2a1e:	4313      	orrs	r3, r2
    2a20:	4662      	mov	r2, ip
    2a22:	400a      	ands	r2, r1
    2a24:	0112      	lsls	r2, r2, #4
    2a26:	4694      	mov	ip, r2
    2a28:	2210      	movs	r2, #16
    2a2a:	4393      	bics	r3, r2
    2a2c:	4662      	mov	r2, ip
    2a2e:	4313      	orrs	r3, r2
    2a30:	4008      	ands	r0, r1
    2a32:	0140      	lsls	r0, r0, #5
    2a34:	2220      	movs	r2, #32
    2a36:	4393      	bics	r3, r2
    2a38:	4303      	orrs	r3, r0
    2a3a:	400f      	ands	r7, r1
    2a3c:	01bf      	lsls	r7, r7, #6
    2a3e:	2040      	movs	r0, #64	; 0x40
    2a40:	4383      	bics	r3, r0
    2a42:	433b      	orrs	r3, r7
    2a44:	400e      	ands	r6, r1
    2a46:	01f6      	lsls	r6, r6, #7
    2a48:	3040      	adds	r0, #64	; 0x40
    2a4a:	4383      	bics	r3, r0
    2a4c:	4333      	orrs	r3, r6
    2a4e:	3879      	subs	r0, #121	; 0x79
    2a50:	4005      	ands	r5, r0
    2a52:	022d      	lsls	r5, r5, #8
    2a54:	4809      	ldr	r0, [pc, #36]	; (2a7c <system_clock_source_xosc32k_set_config+0xb0>)
    2a56:	4003      	ands	r3, r0
    2a58:	432b      	orrs	r3, r5
    2a5a:	4021      	ands	r1, r4
    2a5c:	0309      	lsls	r1, r1, #12
    2a5e:	4808      	ldr	r0, [pc, #32]	; (2a80 <system_clock_source_xosc32k_set_config+0xb4>)
    2a60:	4003      	ands	r3, r0
    2a62:	430b      	orrs	r3, r1
    2a64:	465a      	mov	r2, fp
    2a66:	8293      	strh	r3, [r2, #20]
}
    2a68:	bc3c      	pop	{r2, r3, r4, r5}
    2a6a:	4690      	mov	r8, r2
    2a6c:	4699      	mov	r9, r3
    2a6e:	46a2      	mov	sl, r4
    2a70:	46ab      	mov	fp, r5
    2a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a74:	40000800 	.word	0x40000800
    2a78:	2000012c 	.word	0x2000012c
    2a7c:	fffff8ff 	.word	0xfffff8ff
    2a80:	ffffefff 	.word	0xffffefff

00002a84 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2a84:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2a86:	7a03      	ldrb	r3, [r0, #8]
    2a88:	069b      	lsls	r3, r3, #26
    2a8a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2a8c:	8942      	ldrh	r2, [r0, #10]
    2a8e:	0592      	lsls	r2, r2, #22
    2a90:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2a92:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2a94:	4918      	ldr	r1, [pc, #96]	; (2af8 <system_clock_source_dfll_set_config+0x74>)
    2a96:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2a98:	7983      	ldrb	r3, [r0, #6]
    2a9a:	79c2      	ldrb	r2, [r0, #7]
    2a9c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2a9e:	8842      	ldrh	r2, [r0, #2]
    2aa0:	8884      	ldrh	r4, [r0, #4]
    2aa2:	4322      	orrs	r2, r4
    2aa4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2aa6:	7842      	ldrb	r2, [r0, #1]
    2aa8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2aaa:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2aac:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2aae:	7803      	ldrb	r3, [r0, #0]
    2ab0:	2b04      	cmp	r3, #4
    2ab2:	d011      	beq.n	2ad8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2ab4:	2b20      	cmp	r3, #32
    2ab6:	d10e      	bne.n	2ad6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ab8:	7b03      	ldrb	r3, [r0, #12]
    2aba:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2abc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2abe:	4313      	orrs	r3, r2
    2ac0:	89c2      	ldrh	r2, [r0, #14]
    2ac2:	0412      	lsls	r2, r2, #16
    2ac4:	490d      	ldr	r1, [pc, #52]	; (2afc <system_clock_source_dfll_set_config+0x78>)
    2ac6:	400a      	ands	r2, r1
    2ac8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2aca:	4a0b      	ldr	r2, [pc, #44]	; (2af8 <system_clock_source_dfll_set_config+0x74>)
    2acc:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2ace:	6811      	ldr	r1, [r2, #0]
    2ad0:	4b0b      	ldr	r3, [pc, #44]	; (2b00 <system_clock_source_dfll_set_config+0x7c>)
    2ad2:	430b      	orrs	r3, r1
    2ad4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2ad6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ad8:	7b03      	ldrb	r3, [r0, #12]
    2ada:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2adc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ade:	4313      	orrs	r3, r2
    2ae0:	89c2      	ldrh	r2, [r0, #14]
    2ae2:	0412      	lsls	r2, r2, #16
    2ae4:	4905      	ldr	r1, [pc, #20]	; (2afc <system_clock_source_dfll_set_config+0x78>)
    2ae6:	400a      	ands	r2, r1
    2ae8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2aea:	4a03      	ldr	r2, [pc, #12]	; (2af8 <system_clock_source_dfll_set_config+0x74>)
    2aec:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2aee:	6813      	ldr	r3, [r2, #0]
    2af0:	2104      	movs	r1, #4
    2af2:	430b      	orrs	r3, r1
    2af4:	6013      	str	r3, [r2, #0]
    2af6:	e7ee      	b.n	2ad6 <system_clock_source_dfll_set_config+0x52>
    2af8:	2000012c 	.word	0x2000012c
    2afc:	03ff0000 	.word	0x03ff0000
    2b00:	00000424 	.word	0x00000424

00002b04 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2b04:	2808      	cmp	r0, #8
    2b06:	d803      	bhi.n	2b10 <system_clock_source_enable+0xc>
    2b08:	0080      	lsls	r0, r0, #2
    2b0a:	4b25      	ldr	r3, [pc, #148]	; (2ba0 <system_clock_source_enable+0x9c>)
    2b0c:	581b      	ldr	r3, [r3, r0]
    2b0e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2b10:	2017      	movs	r0, #23
    2b12:	e044      	b.n	2b9e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2b14:	4a23      	ldr	r2, [pc, #140]	; (2ba4 <system_clock_source_enable+0xa0>)
    2b16:	6a13      	ldr	r3, [r2, #32]
    2b18:	2102      	movs	r1, #2
    2b1a:	430b      	orrs	r3, r1
    2b1c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2b1e:	2000      	movs	r0, #0
    2b20:	e03d      	b.n	2b9e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2b22:	4a20      	ldr	r2, [pc, #128]	; (2ba4 <system_clock_source_enable+0xa0>)
    2b24:	6993      	ldr	r3, [r2, #24]
    2b26:	2102      	movs	r1, #2
    2b28:	430b      	orrs	r3, r1
    2b2a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2b2c:	2000      	movs	r0, #0
		break;
    2b2e:	e036      	b.n	2b9e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2b30:	4a1c      	ldr	r2, [pc, #112]	; (2ba4 <system_clock_source_enable+0xa0>)
    2b32:	8a13      	ldrh	r3, [r2, #16]
    2b34:	2102      	movs	r1, #2
    2b36:	430b      	orrs	r3, r1
    2b38:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2b3a:	2000      	movs	r0, #0
		break;
    2b3c:	e02f      	b.n	2b9e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2b3e:	4a19      	ldr	r2, [pc, #100]	; (2ba4 <system_clock_source_enable+0xa0>)
    2b40:	8a93      	ldrh	r3, [r2, #20]
    2b42:	2102      	movs	r1, #2
    2b44:	430b      	orrs	r3, r1
    2b46:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2b48:	2000      	movs	r0, #0
		break;
    2b4a:	e028      	b.n	2b9e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2b4c:	4916      	ldr	r1, [pc, #88]	; (2ba8 <system_clock_source_enable+0xa4>)
    2b4e:	680b      	ldr	r3, [r1, #0]
    2b50:	2202      	movs	r2, #2
    2b52:	4313      	orrs	r3, r2
    2b54:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2b56:	4b13      	ldr	r3, [pc, #76]	; (2ba4 <system_clock_source_enable+0xa0>)
    2b58:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2b5a:	0019      	movs	r1, r3
    2b5c:	320e      	adds	r2, #14
    2b5e:	68cb      	ldr	r3, [r1, #12]
    2b60:	421a      	tst	r2, r3
    2b62:	d0fc      	beq.n	2b5e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2b64:	4a10      	ldr	r2, [pc, #64]	; (2ba8 <system_clock_source_enable+0xa4>)
    2b66:	6891      	ldr	r1, [r2, #8]
    2b68:	4b0e      	ldr	r3, [pc, #56]	; (2ba4 <system_clock_source_enable+0xa0>)
    2b6a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2b6c:	6852      	ldr	r2, [r2, #4]
    2b6e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2b70:	2200      	movs	r2, #0
    2b72:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2b74:	0019      	movs	r1, r3
    2b76:	3210      	adds	r2, #16
    2b78:	68cb      	ldr	r3, [r1, #12]
    2b7a:	421a      	tst	r2, r3
    2b7c:	d0fc      	beq.n	2b78 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2b7e:	4b0a      	ldr	r3, [pc, #40]	; (2ba8 <system_clock_source_enable+0xa4>)
    2b80:	681b      	ldr	r3, [r3, #0]
    2b82:	b29b      	uxth	r3, r3
    2b84:	4a07      	ldr	r2, [pc, #28]	; (2ba4 <system_clock_source_enable+0xa0>)
    2b86:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2b88:	2000      	movs	r0, #0
    2b8a:	e008      	b.n	2b9e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2b8c:	4905      	ldr	r1, [pc, #20]	; (2ba4 <system_clock_source_enable+0xa0>)
    2b8e:	2244      	movs	r2, #68	; 0x44
    2b90:	5c8b      	ldrb	r3, [r1, r2]
    2b92:	2002      	movs	r0, #2
    2b94:	4303      	orrs	r3, r0
    2b96:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2b98:	2000      	movs	r0, #0
		break;
    2b9a:	e000      	b.n	2b9e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2b9c:	2000      	movs	r0, #0
}
    2b9e:	4770      	bx	lr
    2ba0:	000053f4 	.word	0x000053f4
    2ba4:	40000800 	.word	0x40000800
    2ba8:	2000012c 	.word	0x2000012c

00002bac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bae:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2bb0:	22c2      	movs	r2, #194	; 0xc2
    2bb2:	00d2      	lsls	r2, r2, #3
    2bb4:	4b45      	ldr	r3, [pc, #276]	; (2ccc <system_clock_init+0x120>)
    2bb6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2bb8:	4a45      	ldr	r2, [pc, #276]	; (2cd0 <system_clock_init+0x124>)
    2bba:	6853      	ldr	r3, [r2, #4]
    2bbc:	211e      	movs	r1, #30
    2bbe:	438b      	bics	r3, r1
    2bc0:	391a      	subs	r1, #26
    2bc2:	430b      	orrs	r3, r1
    2bc4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2bc6:	2202      	movs	r2, #2
    2bc8:	ab01      	add	r3, sp, #4
    2bca:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2bcc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2bce:	4d41      	ldr	r5, [pc, #260]	; (2cd4 <system_clock_init+0x128>)
    2bd0:	b2e0      	uxtb	r0, r4
    2bd2:	a901      	add	r1, sp, #4
    2bd4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2bd6:	3401      	adds	r4, #1
    2bd8:	2c25      	cmp	r4, #37	; 0x25
    2bda:	d1f9      	bne.n	2bd0 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2bdc:	a80a      	add	r0, sp, #40	; 0x28
    2bde:	2300      	movs	r3, #0
    2be0:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2be2:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2be4:	2280      	movs	r2, #128	; 0x80
    2be6:	0212      	lsls	r2, r2, #8
    2be8:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2bea:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2bec:	2201      	movs	r2, #1
    2bee:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    2bf0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2bf2:	2106      	movs	r1, #6
    2bf4:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2bf6:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    2bf8:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2bfa:	4b37      	ldr	r3, [pc, #220]	; (2cd8 <system_clock_init+0x12c>)
    2bfc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2bfe:	2005      	movs	r0, #5
    2c00:	4b36      	ldr	r3, [pc, #216]	; (2cdc <system_clock_init+0x130>)
    2c02:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2c04:	4931      	ldr	r1, [pc, #196]	; (2ccc <system_clock_init+0x120>)
    2c06:	2202      	movs	r2, #2
    2c08:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2c0a:	421a      	tst	r2, r3
    2c0c:	d0fc      	beq.n	2c08 <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2c0e:	ab05      	add	r3, sp, #20
    2c10:	2100      	movs	r1, #0
    2c12:	2200      	movs	r2, #0
    2c14:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2c16:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2c18:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2c1a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2c1c:	313f      	adds	r1, #63	; 0x3f
    2c1e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2c20:	393b      	subs	r1, #59	; 0x3b
    2c22:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2c24:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2c26:	4b2e      	ldr	r3, [pc, #184]	; (2ce0 <system_clock_init+0x134>)
    2c28:	681b      	ldr	r3, [r3, #0]
    2c2a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2c2c:	2b3f      	cmp	r3, #63	; 0x3f
    2c2e:	d04b      	beq.n	2cc8 <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2c30:	a805      	add	r0, sp, #20
    2c32:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2c34:	23b7      	movs	r3, #183	; 0xb7
    2c36:	00db      	lsls	r3, r3, #3
    2c38:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2c3a:	2303      	movs	r3, #3
    2c3c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2c3e:	331c      	adds	r3, #28
    2c40:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2c42:	4b28      	ldr	r3, [pc, #160]	; (2ce4 <system_clock_init+0x138>)
    2c44:	4798      	blx	r3
	config->on_demand       = true;
    2c46:	a804      	add	r0, sp, #16
    2c48:	2501      	movs	r5, #1
    2c4a:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2c4c:	2600      	movs	r6, #0
    2c4e:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2c50:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2c52:	4b25      	ldr	r3, [pc, #148]	; (2ce8 <system_clock_init+0x13c>)
    2c54:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2c56:	2006      	movs	r0, #6
    2c58:	4f20      	ldr	r7, [pc, #128]	; (2cdc <system_clock_init+0x130>)
    2c5a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2c5c:	4b23      	ldr	r3, [pc, #140]	; (2cec <system_clock_init+0x140>)
    2c5e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2c60:	ac01      	add	r4, sp, #4
    2c62:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    2c64:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2c66:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    2c68:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2c6a:	2305      	movs	r3, #5
    2c6c:	7023      	strb	r3, [r4, #0]
    2c6e:	0021      	movs	r1, r4
    2c70:	2001      	movs	r0, #1
    2c72:	4b1f      	ldr	r3, [pc, #124]	; (2cf0 <system_clock_init+0x144>)
    2c74:	4798      	blx	r3
    2c76:	2001      	movs	r0, #1
    2c78:	4b1e      	ldr	r3, [pc, #120]	; (2cf4 <system_clock_init+0x148>)
    2c7a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2c7c:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2c7e:	0021      	movs	r1, r4
    2c80:	2000      	movs	r0, #0
    2c82:	4b14      	ldr	r3, [pc, #80]	; (2cd4 <system_clock_init+0x128>)
    2c84:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2c86:	2000      	movs	r0, #0
    2c88:	4b1b      	ldr	r3, [pc, #108]	; (2cf8 <system_clock_init+0x14c>)
    2c8a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2c8c:	2007      	movs	r0, #7
    2c8e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2c90:	490e      	ldr	r1, [pc, #56]	; (2ccc <system_clock_init+0x120>)
    2c92:	22d0      	movs	r2, #208	; 0xd0
    2c94:	68cb      	ldr	r3, [r1, #12]
    2c96:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2c98:	2bd0      	cmp	r3, #208	; 0xd0
    2c9a:	d1fb      	bne.n	2c94 <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    2c9c:	4a17      	ldr	r2, [pc, #92]	; (2cfc <system_clock_init+0x150>)
    2c9e:	2300      	movs	r3, #0
    2ca0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2ca2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2ca4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2ca6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2ca8:	a901      	add	r1, sp, #4
    2caa:	2201      	movs	r2, #1
    2cac:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2cae:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    2cb0:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2cb2:	3307      	adds	r3, #7
    2cb4:	700b      	strb	r3, [r1, #0]
    2cb6:	720a      	strb	r2, [r1, #8]
    2cb8:	2000      	movs	r0, #0
    2cba:	4b0d      	ldr	r3, [pc, #52]	; (2cf0 <system_clock_init+0x144>)
    2cbc:	4798      	blx	r3
    2cbe:	2000      	movs	r0, #0
    2cc0:	4b0c      	ldr	r3, [pc, #48]	; (2cf4 <system_clock_init+0x148>)
    2cc2:	4798      	blx	r3
#endif
}
    2cc4:	b00f      	add	sp, #60	; 0x3c
    2cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2cc8:	3b20      	subs	r3, #32
    2cca:	e7b1      	b.n	2c30 <system_clock_init+0x84>
    2ccc:	40000800 	.word	0x40000800
    2cd0:	41004000 	.word	0x41004000
    2cd4:	00002f39 	.word	0x00002f39
    2cd8:	000029cd 	.word	0x000029cd
    2cdc:	00002b05 	.word	0x00002b05
    2ce0:	00806024 	.word	0x00806024
    2ce4:	00002a85 	.word	0x00002a85
    2ce8:	00002991 	.word	0x00002991
    2cec:	00002d01 	.word	0x00002d01
    2cf0:	00002d25 	.word	0x00002d25
    2cf4:	00002ddd 	.word	0x00002ddd
    2cf8:	00002ead 	.word	0x00002ead
    2cfc:	40000400 	.word	0x40000400

00002d00 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2d00:	4a06      	ldr	r2, [pc, #24]	; (2d1c <system_gclk_init+0x1c>)
    2d02:	6993      	ldr	r3, [r2, #24]
    2d04:	2108      	movs	r1, #8
    2d06:	430b      	orrs	r3, r1
    2d08:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2d0a:	2201      	movs	r2, #1
    2d0c:	4b04      	ldr	r3, [pc, #16]	; (2d20 <system_gclk_init+0x20>)
    2d0e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2d10:	0019      	movs	r1, r3
    2d12:	780b      	ldrb	r3, [r1, #0]
    2d14:	4213      	tst	r3, r2
    2d16:	d1fc      	bne.n	2d12 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2d18:	4770      	bx	lr
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	40000400 	.word	0x40000400
    2d20:	40000c00 	.word	0x40000c00

00002d24 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2d24:	b570      	push	{r4, r5, r6, lr}
    2d26:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2d28:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2d2a:	780d      	ldrb	r5, [r1, #0]
    2d2c:	022d      	lsls	r5, r5, #8
    2d2e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2d30:	784b      	ldrb	r3, [r1, #1]
    2d32:	2b00      	cmp	r3, #0
    2d34:	d002      	beq.n	2d3c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2d36:	2380      	movs	r3, #128	; 0x80
    2d38:	02db      	lsls	r3, r3, #11
    2d3a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2d3c:	7a4b      	ldrb	r3, [r1, #9]
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d002      	beq.n	2d48 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2d42:	2380      	movs	r3, #128	; 0x80
    2d44:	031b      	lsls	r3, r3, #12
    2d46:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2d48:	6848      	ldr	r0, [r1, #4]
    2d4a:	2801      	cmp	r0, #1
    2d4c:	d910      	bls.n	2d70 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2d4e:	1e43      	subs	r3, r0, #1
    2d50:	4218      	tst	r0, r3
    2d52:	d134      	bne.n	2dbe <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2d54:	2802      	cmp	r0, #2
    2d56:	d930      	bls.n	2dba <system_gclk_gen_set_config+0x96>
    2d58:	2302      	movs	r3, #2
    2d5a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2d5c:	3201      	adds	r2, #1
						mask <<= 1) {
    2d5e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2d60:	4298      	cmp	r0, r3
    2d62:	d8fb      	bhi.n	2d5c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2d64:	0212      	lsls	r2, r2, #8
    2d66:	4332      	orrs	r2, r6
    2d68:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2d6a:	2380      	movs	r3, #128	; 0x80
    2d6c:	035b      	lsls	r3, r3, #13
    2d6e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2d70:	7a0b      	ldrb	r3, [r1, #8]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d002      	beq.n	2d7c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2d76:	2380      	movs	r3, #128	; 0x80
    2d78:	039b      	lsls	r3, r3, #14
    2d7a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d7c:	4a13      	ldr	r2, [pc, #76]	; (2dcc <system_gclk_gen_set_config+0xa8>)
    2d7e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2d80:	b25b      	sxtb	r3, r3
    2d82:	2b00      	cmp	r3, #0
    2d84:	dbfb      	blt.n	2d7e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2d86:	4b12      	ldr	r3, [pc, #72]	; (2dd0 <system_gclk_gen_set_config+0xac>)
    2d88:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2d8a:	4b12      	ldr	r3, [pc, #72]	; (2dd4 <system_gclk_gen_set_config+0xb0>)
    2d8c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d8e:	4a0f      	ldr	r2, [pc, #60]	; (2dcc <system_gclk_gen_set_config+0xa8>)
    2d90:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2d92:	b25b      	sxtb	r3, r3
    2d94:	2b00      	cmp	r3, #0
    2d96:	dbfb      	blt.n	2d90 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2d98:	4b0c      	ldr	r3, [pc, #48]	; (2dcc <system_gclk_gen_set_config+0xa8>)
    2d9a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d9c:	001a      	movs	r2, r3
    2d9e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2da0:	b25b      	sxtb	r3, r3
    2da2:	2b00      	cmp	r3, #0
    2da4:	dbfb      	blt.n	2d9e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2da6:	4a09      	ldr	r2, [pc, #36]	; (2dcc <system_gclk_gen_set_config+0xa8>)
    2da8:	6853      	ldr	r3, [r2, #4]
    2daa:	2180      	movs	r1, #128	; 0x80
    2dac:	0249      	lsls	r1, r1, #9
    2dae:	400b      	ands	r3, r1
    2db0:	431d      	orrs	r5, r3
    2db2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2db4:	4b08      	ldr	r3, [pc, #32]	; (2dd8 <system_gclk_gen_set_config+0xb4>)
    2db6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2db8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2dba:	2200      	movs	r2, #0
    2dbc:	e7d2      	b.n	2d64 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2dbe:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2dc0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2dc2:	2380      	movs	r3, #128	; 0x80
    2dc4:	029b      	lsls	r3, r3, #10
    2dc6:	431d      	orrs	r5, r3
    2dc8:	e7d2      	b.n	2d70 <system_gclk_gen_set_config+0x4c>
    2dca:	46c0      	nop			; (mov r8, r8)
    2dcc:	40000c00 	.word	0x40000c00
    2dd0:	00001581 	.word	0x00001581
    2dd4:	40000c08 	.word	0x40000c08
    2dd8:	000015c1 	.word	0x000015c1

00002ddc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2ddc:	b510      	push	{r4, lr}
    2dde:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2de0:	4a0b      	ldr	r2, [pc, #44]	; (2e10 <system_gclk_gen_enable+0x34>)
    2de2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2de4:	b25b      	sxtb	r3, r3
    2de6:	2b00      	cmp	r3, #0
    2de8:	dbfb      	blt.n	2de2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2dea:	4b0a      	ldr	r3, [pc, #40]	; (2e14 <system_gclk_gen_enable+0x38>)
    2dec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2dee:	4b0a      	ldr	r3, [pc, #40]	; (2e18 <system_gclk_gen_enable+0x3c>)
    2df0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2df2:	4a07      	ldr	r2, [pc, #28]	; (2e10 <system_gclk_gen_enable+0x34>)
    2df4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2df6:	b25b      	sxtb	r3, r3
    2df8:	2b00      	cmp	r3, #0
    2dfa:	dbfb      	blt.n	2df4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2dfc:	4a04      	ldr	r2, [pc, #16]	; (2e10 <system_gclk_gen_enable+0x34>)
    2dfe:	6851      	ldr	r1, [r2, #4]
    2e00:	2380      	movs	r3, #128	; 0x80
    2e02:	025b      	lsls	r3, r3, #9
    2e04:	430b      	orrs	r3, r1
    2e06:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2e08:	4b04      	ldr	r3, [pc, #16]	; (2e1c <system_gclk_gen_enable+0x40>)
    2e0a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2e0c:	bd10      	pop	{r4, pc}
    2e0e:	46c0      	nop			; (mov r8, r8)
    2e10:	40000c00 	.word	0x40000c00
    2e14:	00001581 	.word	0x00001581
    2e18:	40000c04 	.word	0x40000c04
    2e1c:	000015c1 	.word	0x000015c1

00002e20 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2e20:	b570      	push	{r4, r5, r6, lr}
    2e22:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e24:	4a1a      	ldr	r2, [pc, #104]	; (2e90 <system_gclk_gen_get_hz+0x70>)
    2e26:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2e28:	b25b      	sxtb	r3, r3
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	dbfb      	blt.n	2e26 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2e2e:	4b19      	ldr	r3, [pc, #100]	; (2e94 <system_gclk_gen_get_hz+0x74>)
    2e30:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2e32:	4b19      	ldr	r3, [pc, #100]	; (2e98 <system_gclk_gen_get_hz+0x78>)
    2e34:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e36:	4a16      	ldr	r2, [pc, #88]	; (2e90 <system_gclk_gen_get_hz+0x70>)
    2e38:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2e3a:	b25b      	sxtb	r3, r3
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	dbfb      	blt.n	2e38 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2e40:	4e13      	ldr	r6, [pc, #76]	; (2e90 <system_gclk_gen_get_hz+0x70>)
    2e42:	6870      	ldr	r0, [r6, #4]
    2e44:	04c0      	lsls	r0, r0, #19
    2e46:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2e48:	4b14      	ldr	r3, [pc, #80]	; (2e9c <system_gclk_gen_get_hz+0x7c>)
    2e4a:	4798      	blx	r3
    2e4c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2e4e:	4b12      	ldr	r3, [pc, #72]	; (2e98 <system_gclk_gen_get_hz+0x78>)
    2e50:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2e52:	6876      	ldr	r6, [r6, #4]
    2e54:	02f6      	lsls	r6, r6, #11
    2e56:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2e58:	4b11      	ldr	r3, [pc, #68]	; (2ea0 <system_gclk_gen_get_hz+0x80>)
    2e5a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e5c:	4a0c      	ldr	r2, [pc, #48]	; (2e90 <system_gclk_gen_get_hz+0x70>)
    2e5e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2e60:	b25b      	sxtb	r3, r3
    2e62:	2b00      	cmp	r3, #0
    2e64:	dbfb      	blt.n	2e5e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2e66:	4b0a      	ldr	r3, [pc, #40]	; (2e90 <system_gclk_gen_get_hz+0x70>)
    2e68:	689c      	ldr	r4, [r3, #8]
    2e6a:	0224      	lsls	r4, r4, #8
    2e6c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2e6e:	4b0d      	ldr	r3, [pc, #52]	; (2ea4 <system_gclk_gen_get_hz+0x84>)
    2e70:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2e72:	2e00      	cmp	r6, #0
    2e74:	d107      	bne.n	2e86 <system_gclk_gen_get_hz+0x66>
    2e76:	2c01      	cmp	r4, #1
    2e78:	d907      	bls.n	2e8a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2e7a:	0021      	movs	r1, r4
    2e7c:	0028      	movs	r0, r5
    2e7e:	4b0a      	ldr	r3, [pc, #40]	; (2ea8 <system_gclk_gen_get_hz+0x88>)
    2e80:	4798      	blx	r3
    2e82:	0005      	movs	r5, r0
    2e84:	e001      	b.n	2e8a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2e86:	3401      	adds	r4, #1
    2e88:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2e8a:	0028      	movs	r0, r5
    2e8c:	bd70      	pop	{r4, r5, r6, pc}
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	40000c00 	.word	0x40000c00
    2e94:	00001581 	.word	0x00001581
    2e98:	40000c04 	.word	0x40000c04
    2e9c:	000028fd 	.word	0x000028fd
    2ea0:	40000c08 	.word	0x40000c08
    2ea4:	000015c1 	.word	0x000015c1
    2ea8:	00004e7d 	.word	0x00004e7d

00002eac <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2eac:	b510      	push	{r4, lr}
    2eae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2eb0:	4b06      	ldr	r3, [pc, #24]	; (2ecc <system_gclk_chan_enable+0x20>)
    2eb2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2eb4:	4b06      	ldr	r3, [pc, #24]	; (2ed0 <system_gclk_chan_enable+0x24>)
    2eb6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2eb8:	4a06      	ldr	r2, [pc, #24]	; (2ed4 <system_gclk_chan_enable+0x28>)
    2eba:	8853      	ldrh	r3, [r2, #2]
    2ebc:	2180      	movs	r1, #128	; 0x80
    2ebe:	01c9      	lsls	r1, r1, #7
    2ec0:	430b      	orrs	r3, r1
    2ec2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2ec4:	4b04      	ldr	r3, [pc, #16]	; (2ed8 <system_gclk_chan_enable+0x2c>)
    2ec6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2ec8:	bd10      	pop	{r4, pc}
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	00001581 	.word	0x00001581
    2ed0:	40000c02 	.word	0x40000c02
    2ed4:	40000c00 	.word	0x40000c00
    2ed8:	000015c1 	.word	0x000015c1

00002edc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2edc:	b510      	push	{r4, lr}
    2ede:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2ee0:	4b0f      	ldr	r3, [pc, #60]	; (2f20 <system_gclk_chan_disable+0x44>)
    2ee2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2ee4:	4b0f      	ldr	r3, [pc, #60]	; (2f24 <system_gclk_chan_disable+0x48>)
    2ee6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2ee8:	4a0f      	ldr	r2, [pc, #60]	; (2f28 <system_gclk_chan_disable+0x4c>)
    2eea:	8853      	ldrh	r3, [r2, #2]
    2eec:	051b      	lsls	r3, r3, #20
    2eee:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2ef0:	8853      	ldrh	r3, [r2, #2]
    2ef2:	490e      	ldr	r1, [pc, #56]	; (2f2c <system_gclk_chan_disable+0x50>)
    2ef4:	400b      	ands	r3, r1
    2ef6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2ef8:	8853      	ldrh	r3, [r2, #2]
    2efa:	490d      	ldr	r1, [pc, #52]	; (2f30 <system_gclk_chan_disable+0x54>)
    2efc:	400b      	ands	r3, r1
    2efe:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2f00:	0011      	movs	r1, r2
    2f02:	2280      	movs	r2, #128	; 0x80
    2f04:	01d2      	lsls	r2, r2, #7
    2f06:	884b      	ldrh	r3, [r1, #2]
    2f08:	4213      	tst	r3, r2
    2f0a:	d1fc      	bne.n	2f06 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2f0c:	4906      	ldr	r1, [pc, #24]	; (2f28 <system_gclk_chan_disable+0x4c>)
    2f0e:	884a      	ldrh	r2, [r1, #2]
    2f10:	0203      	lsls	r3, r0, #8
    2f12:	4806      	ldr	r0, [pc, #24]	; (2f2c <system_gclk_chan_disable+0x50>)
    2f14:	4002      	ands	r2, r0
    2f16:	4313      	orrs	r3, r2
    2f18:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2f1a:	4b06      	ldr	r3, [pc, #24]	; (2f34 <system_gclk_chan_disable+0x58>)
    2f1c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2f1e:	bd10      	pop	{r4, pc}
    2f20:	00001581 	.word	0x00001581
    2f24:	40000c02 	.word	0x40000c02
    2f28:	40000c00 	.word	0x40000c00
    2f2c:	fffff0ff 	.word	0xfffff0ff
    2f30:	ffffbfff 	.word	0xffffbfff
    2f34:	000015c1 	.word	0x000015c1

00002f38 <system_gclk_chan_set_config>:
{
    2f38:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2f3a:	780c      	ldrb	r4, [r1, #0]
    2f3c:	0224      	lsls	r4, r4, #8
    2f3e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2f40:	4b02      	ldr	r3, [pc, #8]	; (2f4c <system_gclk_chan_set_config+0x14>)
    2f42:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2f44:	b2a4      	uxth	r4, r4
    2f46:	4b02      	ldr	r3, [pc, #8]	; (2f50 <system_gclk_chan_set_config+0x18>)
    2f48:	805c      	strh	r4, [r3, #2]
}
    2f4a:	bd10      	pop	{r4, pc}
    2f4c:	00002edd 	.word	0x00002edd
    2f50:	40000c00 	.word	0x40000c00

00002f54 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2f54:	b510      	push	{r4, lr}
    2f56:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2f58:	4b06      	ldr	r3, [pc, #24]	; (2f74 <system_gclk_chan_get_hz+0x20>)
    2f5a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2f5c:	4b06      	ldr	r3, [pc, #24]	; (2f78 <system_gclk_chan_get_hz+0x24>)
    2f5e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2f60:	4b06      	ldr	r3, [pc, #24]	; (2f7c <system_gclk_chan_get_hz+0x28>)
    2f62:	885c      	ldrh	r4, [r3, #2]
    2f64:	0524      	lsls	r4, r4, #20
    2f66:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2f68:	4b05      	ldr	r3, [pc, #20]	; (2f80 <system_gclk_chan_get_hz+0x2c>)
    2f6a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2f6c:	0020      	movs	r0, r4
    2f6e:	4b05      	ldr	r3, [pc, #20]	; (2f84 <system_gclk_chan_get_hz+0x30>)
    2f70:	4798      	blx	r3
}
    2f72:	bd10      	pop	{r4, pc}
    2f74:	00001581 	.word	0x00001581
    2f78:	40000c02 	.word	0x40000c02
    2f7c:	40000c00 	.word	0x40000c00
    2f80:	000015c1 	.word	0x000015c1
    2f84:	00002e21 	.word	0x00002e21

00002f88 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2f88:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2f8a:	78d3      	ldrb	r3, [r2, #3]
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d135      	bne.n	2ffc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2f90:	7813      	ldrb	r3, [r2, #0]
    2f92:	2b80      	cmp	r3, #128	; 0x80
    2f94:	d029      	beq.n	2fea <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2f96:	061b      	lsls	r3, r3, #24
    2f98:	2480      	movs	r4, #128	; 0x80
    2f9a:	0264      	lsls	r4, r4, #9
    2f9c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2f9e:	7854      	ldrb	r4, [r2, #1]
    2fa0:	2502      	movs	r5, #2
    2fa2:	43ac      	bics	r4, r5
    2fa4:	d106      	bne.n	2fb4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2fa6:	7894      	ldrb	r4, [r2, #2]
    2fa8:	2c00      	cmp	r4, #0
    2faa:	d120      	bne.n	2fee <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2fac:	2480      	movs	r4, #128	; 0x80
    2fae:	02a4      	lsls	r4, r4, #10
    2fb0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2fb2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2fb4:	7854      	ldrb	r4, [r2, #1]
    2fb6:	3c01      	subs	r4, #1
    2fb8:	2c01      	cmp	r4, #1
    2fba:	d91c      	bls.n	2ff6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2fbc:	040d      	lsls	r5, r1, #16
    2fbe:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2fc0:	24a0      	movs	r4, #160	; 0xa0
    2fc2:	05e4      	lsls	r4, r4, #23
    2fc4:	432c      	orrs	r4, r5
    2fc6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2fc8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2fca:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2fcc:	24d0      	movs	r4, #208	; 0xd0
    2fce:	0624      	lsls	r4, r4, #24
    2fd0:	432c      	orrs	r4, r5
    2fd2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2fd4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2fd6:	78d4      	ldrb	r4, [r2, #3]
    2fd8:	2c00      	cmp	r4, #0
    2fda:	d122      	bne.n	3022 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2fdc:	035b      	lsls	r3, r3, #13
    2fde:	d51c      	bpl.n	301a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2fe0:	7893      	ldrb	r3, [r2, #2]
    2fe2:	2b01      	cmp	r3, #1
    2fe4:	d01e      	beq.n	3024 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2fe6:	6141      	str	r1, [r0, #20]
    2fe8:	e017      	b.n	301a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2fea:	2300      	movs	r3, #0
    2fec:	e7d7      	b.n	2f9e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2fee:	24c0      	movs	r4, #192	; 0xc0
    2ff0:	02e4      	lsls	r4, r4, #11
    2ff2:	4323      	orrs	r3, r4
    2ff4:	e7dd      	b.n	2fb2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2ff6:	4c0d      	ldr	r4, [pc, #52]	; (302c <_system_pinmux_config+0xa4>)
    2ff8:	4023      	ands	r3, r4
    2ffa:	e7df      	b.n	2fbc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2ffc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2ffe:	040c      	lsls	r4, r1, #16
    3000:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3002:	23a0      	movs	r3, #160	; 0xa0
    3004:	05db      	lsls	r3, r3, #23
    3006:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3008:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    300a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    300c:	23d0      	movs	r3, #208	; 0xd0
    300e:	061b      	lsls	r3, r3, #24
    3010:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3012:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3014:	78d3      	ldrb	r3, [r2, #3]
    3016:	2b00      	cmp	r3, #0
    3018:	d103      	bne.n	3022 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    301a:	7853      	ldrb	r3, [r2, #1]
    301c:	3b01      	subs	r3, #1
    301e:	2b01      	cmp	r3, #1
    3020:	d902      	bls.n	3028 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3022:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3024:	6181      	str	r1, [r0, #24]
    3026:	e7f8      	b.n	301a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3028:	6081      	str	r1, [r0, #8]
}
    302a:	e7fa      	b.n	3022 <_system_pinmux_config+0x9a>
    302c:	fffbffff 	.word	0xfffbffff

00003030 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3030:	b510      	push	{r4, lr}
    3032:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    3034:	09c1      	lsrs	r1, r0, #7
		return NULL;
    3036:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3038:	2900      	cmp	r1, #0
    303a:	d104      	bne.n	3046 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    303c:	0943      	lsrs	r3, r0, #5
    303e:	01db      	lsls	r3, r3, #7
    3040:	4905      	ldr	r1, [pc, #20]	; (3058 <system_pinmux_pin_set_config+0x28>)
    3042:	468c      	mov	ip, r1
    3044:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3046:	241f      	movs	r4, #31
    3048:	4020      	ands	r0, r4
    304a:	2101      	movs	r1, #1
    304c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    304e:	0018      	movs	r0, r3
    3050:	4b02      	ldr	r3, [pc, #8]	; (305c <system_pinmux_pin_set_config+0x2c>)
    3052:	4798      	blx	r3
}
    3054:	bd10      	pop	{r4, pc}
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	41004400 	.word	0x41004400
    305c:	00002f89 	.word	0x00002f89

00003060 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3060:	4770      	bx	lr
	...

00003064 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3064:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3066:	4b05      	ldr	r3, [pc, #20]	; (307c <system_init+0x18>)
    3068:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    306a:	4b05      	ldr	r3, [pc, #20]	; (3080 <system_init+0x1c>)
    306c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    306e:	4b05      	ldr	r3, [pc, #20]	; (3084 <system_init+0x20>)
    3070:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3072:	4b05      	ldr	r3, [pc, #20]	; (3088 <system_init+0x24>)
    3074:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3076:	4b05      	ldr	r3, [pc, #20]	; (308c <system_init+0x28>)
    3078:	4798      	blx	r3
}
    307a:	bd10      	pop	{r4, pc}
    307c:	00002bad 	.word	0x00002bad
    3080:	00000115 	.word	0x00000115
    3084:	00003061 	.word	0x00003061
    3088:	00003061 	.word	0x00003061
    308c:	00003061 	.word	0x00003061

00003090 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3090:	e7fe      	b.n	3090 <Dummy_Handler>
	...

00003094 <Reset_Handler>:
{
    3094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    3096:	4a2a      	ldr	r2, [pc, #168]	; (3140 <Reset_Handler+0xac>)
    3098:	4b2a      	ldr	r3, [pc, #168]	; (3144 <Reset_Handler+0xb0>)
    309a:	429a      	cmp	r2, r3
    309c:	d011      	beq.n	30c2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    309e:	001a      	movs	r2, r3
    30a0:	4b29      	ldr	r3, [pc, #164]	; (3148 <Reset_Handler+0xb4>)
    30a2:	429a      	cmp	r2, r3
    30a4:	d20d      	bcs.n	30c2 <Reset_Handler+0x2e>
    30a6:	4a29      	ldr	r2, [pc, #164]	; (314c <Reset_Handler+0xb8>)
    30a8:	3303      	adds	r3, #3
    30aa:	1a9b      	subs	r3, r3, r2
    30ac:	089b      	lsrs	r3, r3, #2
    30ae:	3301      	adds	r3, #1
    30b0:	009b      	lsls	r3, r3, #2
    30b2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    30b4:	4823      	ldr	r0, [pc, #140]	; (3144 <Reset_Handler+0xb0>)
    30b6:	4922      	ldr	r1, [pc, #136]	; (3140 <Reset_Handler+0xac>)
    30b8:	588c      	ldr	r4, [r1, r2]
    30ba:	5084      	str	r4, [r0, r2]
    30bc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    30be:	429a      	cmp	r2, r3
    30c0:	d1fa      	bne.n	30b8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    30c2:	4a23      	ldr	r2, [pc, #140]	; (3150 <Reset_Handler+0xbc>)
    30c4:	4b23      	ldr	r3, [pc, #140]	; (3154 <Reset_Handler+0xc0>)
    30c6:	429a      	cmp	r2, r3
    30c8:	d20a      	bcs.n	30e0 <Reset_Handler+0x4c>
    30ca:	43d3      	mvns	r3, r2
    30cc:	4921      	ldr	r1, [pc, #132]	; (3154 <Reset_Handler+0xc0>)
    30ce:	185b      	adds	r3, r3, r1
    30d0:	2103      	movs	r1, #3
    30d2:	438b      	bics	r3, r1
    30d4:	3304      	adds	r3, #4
    30d6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    30d8:	2100      	movs	r1, #0
    30da:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    30dc:	4293      	cmp	r3, r2
    30de:	d1fc      	bne.n	30da <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    30e0:	4a1d      	ldr	r2, [pc, #116]	; (3158 <Reset_Handler+0xc4>)
    30e2:	21ff      	movs	r1, #255	; 0xff
    30e4:	4b1d      	ldr	r3, [pc, #116]	; (315c <Reset_Handler+0xc8>)
    30e6:	438b      	bics	r3, r1
    30e8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    30ea:	39fd      	subs	r1, #253	; 0xfd
    30ec:	2390      	movs	r3, #144	; 0x90
    30ee:	005b      	lsls	r3, r3, #1
    30f0:	4a1b      	ldr	r2, [pc, #108]	; (3160 <Reset_Handler+0xcc>)
    30f2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    30f4:	4a1b      	ldr	r2, [pc, #108]	; (3164 <Reset_Handler+0xd0>)
    30f6:	78d3      	ldrb	r3, [r2, #3]
    30f8:	2503      	movs	r5, #3
    30fa:	43ab      	bics	r3, r5
    30fc:	2402      	movs	r4, #2
    30fe:	4323      	orrs	r3, r4
    3100:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3102:	78d3      	ldrb	r3, [r2, #3]
    3104:	270c      	movs	r7, #12
    3106:	43bb      	bics	r3, r7
    3108:	2608      	movs	r6, #8
    310a:	4333      	orrs	r3, r6
    310c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    310e:	4b16      	ldr	r3, [pc, #88]	; (3168 <Reset_Handler+0xd4>)
    3110:	7b98      	ldrb	r0, [r3, #14]
    3112:	2230      	movs	r2, #48	; 0x30
    3114:	4390      	bics	r0, r2
    3116:	2220      	movs	r2, #32
    3118:	4310      	orrs	r0, r2
    311a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    311c:	7b99      	ldrb	r1, [r3, #14]
    311e:	43b9      	bics	r1, r7
    3120:	4331      	orrs	r1, r6
    3122:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3124:	7b9a      	ldrb	r2, [r3, #14]
    3126:	43aa      	bics	r2, r5
    3128:	4322      	orrs	r2, r4
    312a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    312c:	4a0f      	ldr	r2, [pc, #60]	; (316c <Reset_Handler+0xd8>)
    312e:	6853      	ldr	r3, [r2, #4]
    3130:	2180      	movs	r1, #128	; 0x80
    3132:	430b      	orrs	r3, r1
    3134:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3136:	4b0e      	ldr	r3, [pc, #56]	; (3170 <Reset_Handler+0xdc>)
    3138:	4798      	blx	r3
        main();
    313a:	4b0e      	ldr	r3, [pc, #56]	; (3174 <Reset_Handler+0xe0>)
    313c:	4798      	blx	r3
    313e:	e7fe      	b.n	313e <Reset_Handler+0xaa>
    3140:	00005b20 	.word	0x00005b20
    3144:	20000000 	.word	0x20000000
    3148:	20000068 	.word	0x20000068
    314c:	20000004 	.word	0x20000004
    3150:	20000068 	.word	0x20000068
    3154:	200005e4 	.word	0x200005e4
    3158:	e000ed00 	.word	0xe000ed00
    315c:	00000000 	.word	0x00000000
    3160:	41007000 	.word	0x41007000
    3164:	41005000 	.word	0x41005000
    3168:	41004800 	.word	0x41004800
    316c:	41004000 	.word	0x41004000
    3170:	000051bd 	.word	0x000051bd
    3174:	00004cf9 	.word	0x00004cf9

00003178 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3178:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    317a:	4a06      	ldr	r2, [pc, #24]	; (3194 <_sbrk+0x1c>)
    317c:	6812      	ldr	r2, [r2, #0]
    317e:	2a00      	cmp	r2, #0
    3180:	d004      	beq.n	318c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3182:	4a04      	ldr	r2, [pc, #16]	; (3194 <_sbrk+0x1c>)
    3184:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3186:	18c3      	adds	r3, r0, r3
    3188:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    318a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    318c:	4902      	ldr	r1, [pc, #8]	; (3198 <_sbrk+0x20>)
    318e:	4a01      	ldr	r2, [pc, #4]	; (3194 <_sbrk+0x1c>)
    3190:	6011      	str	r1, [r2, #0]
    3192:	e7f6      	b.n	3182 <_sbrk+0xa>
    3194:	20000144 	.word	0x20000144
    3198:	200025e8 	.word	0x200025e8

0000319c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    319c:	b530      	push	{r4, r5, lr}
    319e:	b087      	sub	sp, #28
    31a0:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    31a2:	aa01      	add	r2, sp, #4
    31a4:	23a0      	movs	r3, #160	; 0xa0
    31a6:	011b      	lsls	r3, r3, #4
    31a8:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    31aa:	2300      	movs	r3, #0
    31ac:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    31ae:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    31b0:	21fa      	movs	r1, #250	; 0xfa
    31b2:	00c9      	lsls	r1, r1, #3
    31b4:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    31b6:	2101      	movs	r1, #1
    31b8:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    31ba:	2004      	movs	r0, #4
    31bc:	7210      	strb	r0, [r2, #8]
    31be:	7253      	strb	r3, [r2, #9]
    31c0:	7293      	strb	r3, [r2, #10]
    31c2:	72d3      	strb	r3, [r2, #11]
    31c4:	7311      	strb	r1, [r2, #12]
    31c6:	7351      	strb	r1, [r2, #13]
    31c8:	4b14      	ldr	r3, [pc, #80]	; (321c <disk_initialize+0x80>)
    31ca:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    31cc:	2306      	movs	r3, #6
    31ce:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    31d0:	4d13      	ldr	r5, [pc, #76]	; (3220 <disk_initialize+0x84>)
    31d2:	4914      	ldr	r1, [pc, #80]	; (3224 <disk_initialize+0x88>)
    31d4:	0028      	movs	r0, r5
    31d6:	4b14      	ldr	r3, [pc, #80]	; (3228 <disk_initialize+0x8c>)
    31d8:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    31da:	0028      	movs	r0, r5
    31dc:	4b13      	ldr	r3, [pc, #76]	; (322c <disk_initialize+0x90>)
    31de:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    31e0:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    31e2:	2c01      	cmp	r4, #1
    31e4:	d901      	bls.n	31ea <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    31e6:	b007      	add	sp, #28
    31e8:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    31ea:	0020      	movs	r0, r4
    31ec:	4b10      	ldr	r3, [pc, #64]	; (3230 <disk_initialize+0x94>)
    31ee:	4798      	blx	r3
    31f0:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    31f2:	2803      	cmp	r0, #3
    31f4:	d106      	bne.n	3204 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    31f6:	0020      	movs	r0, r4
    31f8:	4b0d      	ldr	r3, [pc, #52]	; (3230 <disk_initialize+0x94>)
    31fa:	4798      	blx	r3
    31fc:	0003      	movs	r3, r0
		return STA_NOINIT;
    31fe:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    3200:	2b03      	cmp	r3, #3
    3202:	d0f0      	beq.n	31e6 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    3204:	2b00      	cmp	r3, #0
    3206:	d106      	bne.n	3216 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    3208:	0020      	movs	r0, r4
    320a:	4b0a      	ldr	r3, [pc, #40]	; (3234 <disk_initialize+0x98>)
    320c:	4798      	blx	r3
	return 0;
    320e:	1e43      	subs	r3, r0, #1
    3210:	4198      	sbcs	r0, r3
    3212:	0080      	lsls	r0, r0, #2
    3214:	e7e7      	b.n	31e6 <disk_initialize+0x4a>
		return STA_NOINIT;
    3216:	2001      	movs	r0, #1
    3218:	e7e5      	b.n	31e6 <disk_initialize+0x4a>
    321a:	46c0      	nop			; (mov r8, r8)
    321c:	000007de 	.word	0x000007de
    3220:	200005d8 	.word	0x200005d8
    3224:	40001400 	.word	0x40001400
    3228:	00001759 	.word	0x00001759
    322c:	00001615 	.word	0x00001615
    3230:	000014ed 	.word	0x000014ed
    3234:	00001529 	.word	0x00001529

00003238 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    3238:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    323a:	4b05      	ldr	r3, [pc, #20]	; (3250 <disk_status+0x18>)
    323c:	4798      	blx	r3
    323e:	1e03      	subs	r3, r0, #0
    3240:	d004      	beq.n	324c <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    3242:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    3244:	2b02      	cmp	r3, #2
    3246:	d000      	beq.n	324a <disk_status+0x12>
	default:
		return STA_NOINIT;
    3248:	3802      	subs	r0, #2
	}
}
    324a:	bd10      	pop	{r4, pc}
		return 0;
    324c:	2000      	movs	r0, #0
    324e:	e7fc      	b.n	324a <disk_status+0x12>
    3250:	000014ed 	.word	0x000014ed

00003254 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    3254:	b5f0      	push	{r4, r5, r6, r7, lr}
    3256:	46de      	mov	lr, fp
    3258:	464f      	mov	r7, r9
    325a:	4646      	mov	r6, r8
    325c:	b5c0      	push	{r6, r7, lr}
    325e:	b084      	sub	sp, #16
    3260:	9001      	str	r0, [sp, #4]
    3262:	000d      	movs	r5, r1
    3264:	0014      	movs	r4, r2
    3266:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3268:	4b18      	ldr	r3, [pc, #96]	; (32cc <disk_read+0x78>)
    326a:	4798      	blx	r3
    326c:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    326e:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3270:	2e00      	cmp	r6, #0
    3272:	d105      	bne.n	3280 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3274:	b004      	add	sp, #16
    3276:	bc1c      	pop	{r2, r3, r4}
    3278:	4690      	mov	r8, r2
    327a:	4699      	mov	r9, r3
    327c:	46a3      	mov	fp, r4
    327e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3280:	a903      	add	r1, sp, #12
    3282:	9801      	ldr	r0, [sp, #4]
    3284:	4b12      	ldr	r3, [pc, #72]	; (32d0 <disk_read+0x7c>)
    3286:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3288:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    328a:	0032      	movs	r2, r6
    328c:	437a      	muls	r2, r7
    328e:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3290:	9b03      	ldr	r3, [sp, #12]
    3292:	3301      	adds	r3, #1
    3294:	4373      	muls	r3, r6
		return RES_PARERR;
    3296:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3298:	429a      	cmp	r2, r3
    329a:	d8eb      	bhi.n	3274 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    329c:	2f00      	cmp	r7, #0
    329e:	d011      	beq.n	32c4 <disk_read+0x70>
    32a0:	0273      	lsls	r3, r6, #9
    32a2:	4698      	mov	r8, r3
    32a4:	1c7b      	adds	r3, r7, #1
    32a6:	469b      	mov	fp, r3
    32a8:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    32aa:	4e0a      	ldr	r6, [pc, #40]	; (32d4 <disk_read+0x80>)
    32ac:	002a      	movs	r2, r5
    32ae:	0021      	movs	r1, r4
    32b0:	9801      	ldr	r0, [sp, #4]
    32b2:	47b0      	blx	r6
    32b4:	2800      	cmp	r0, #0
    32b6:	d107      	bne.n	32c8 <disk_read+0x74>
    32b8:	3701      	adds	r7, #1
    32ba:	444c      	add	r4, r9
    32bc:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    32be:	455f      	cmp	r7, fp
    32c0:	d1f4      	bne.n	32ac <disk_read+0x58>
    32c2:	e7d7      	b.n	3274 <disk_read+0x20>
	return RES_OK;
    32c4:	2000      	movs	r0, #0
    32c6:	e7d5      	b.n	3274 <disk_read+0x20>
			return RES_ERROR;
    32c8:	2001      	movs	r0, #1
    32ca:	e7d3      	b.n	3274 <disk_read+0x20>
    32cc:	00001521 	.word	0x00001521
    32d0:	00001505 	.word	0x00001505
    32d4:	00001541 	.word	0x00001541

000032d8 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    32d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32da:	46de      	mov	lr, fp
    32dc:	464f      	mov	r7, r9
    32de:	4646      	mov	r6, r8
    32e0:	b5c0      	push	{r6, r7, lr}
    32e2:	b084      	sub	sp, #16
    32e4:	9001      	str	r0, [sp, #4]
    32e6:	000d      	movs	r5, r1
    32e8:	0014      	movs	r4, r2
    32ea:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    32ec:	4b18      	ldr	r3, [pc, #96]	; (3350 <disk_write+0x78>)
    32ee:	4798      	blx	r3
    32f0:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    32f2:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    32f4:	2e00      	cmp	r6, #0
    32f6:	d105      	bne.n	3304 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    32f8:	b004      	add	sp, #16
    32fa:	bc1c      	pop	{r2, r3, r4}
    32fc:	4690      	mov	r8, r2
    32fe:	4699      	mov	r9, r3
    3300:	46a3      	mov	fp, r4
    3302:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3304:	a903      	add	r1, sp, #12
    3306:	9801      	ldr	r0, [sp, #4]
    3308:	4b12      	ldr	r3, [pc, #72]	; (3354 <disk_write+0x7c>)
    330a:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    330c:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    330e:	0032      	movs	r2, r6
    3310:	437a      	muls	r2, r7
    3312:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3314:	9b03      	ldr	r3, [sp, #12]
    3316:	3301      	adds	r3, #1
    3318:	4373      	muls	r3, r6
		return RES_PARERR;
    331a:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    331c:	429a      	cmp	r2, r3
    331e:	d8eb      	bhi.n	32f8 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    3320:	2f00      	cmp	r7, #0
    3322:	d011      	beq.n	3348 <disk_write+0x70>
    3324:	0273      	lsls	r3, r6, #9
    3326:	4698      	mov	r8, r3
    3328:	1c7b      	adds	r3, r7, #1
    332a:	469b      	mov	fp, r3
    332c:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    332e:	4e0a      	ldr	r6, [pc, #40]	; (3358 <disk_write+0x80>)
    3330:	002a      	movs	r2, r5
    3332:	0021      	movs	r1, r4
    3334:	9801      	ldr	r0, [sp, #4]
    3336:	47b0      	blx	r6
    3338:	2800      	cmp	r0, #0
    333a:	d107      	bne.n	334c <disk_write+0x74>
    333c:	3701      	adds	r7, #1
    333e:	444c      	add	r4, r9
    3340:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    3342:	455f      	cmp	r7, fp
    3344:	d1f4      	bne.n	3330 <disk_write+0x58>
    3346:	e7d7      	b.n	32f8 <disk_write+0x20>
	return RES_OK;
    3348:	2000      	movs	r0, #0
    334a:	e7d5      	b.n	32f8 <disk_write+0x20>
			return RES_ERROR;
    334c:	2001      	movs	r0, #1
    334e:	e7d3      	b.n	32f8 <disk_write+0x20>
    3350:	00001521 	.word	0x00001521
    3354:	00001505 	.word	0x00001505
    3358:	00001561 	.word	0x00001561

0000335c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    335c:	b510      	push	{r4, lr}
    335e:	b082      	sub	sp, #8
    3360:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    3362:	2901      	cmp	r1, #1
    3364:	d00b      	beq.n	337e <disk_ioctl+0x22>
    3366:	2900      	cmp	r1, #0
    3368:	d020      	beq.n	33ac <disk_ioctl+0x50>
    336a:	2902      	cmp	r1, #2
    336c:	d00f      	beq.n	338e <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    336e:	2004      	movs	r0, #4
	switch (ctrl) {
    3370:	2903      	cmp	r1, #3
    3372:	d102      	bne.n	337a <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    3374:	2301      	movs	r3, #1
    3376:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    3378:	2000      	movs	r0, #0
	}

	return res;
}
    337a:	b002      	add	sp, #8
    337c:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    337e:	a901      	add	r1, sp, #4
    3380:	4b0e      	ldr	r3, [pc, #56]	; (33bc <disk_ioctl+0x60>)
    3382:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    3384:	9b01      	ldr	r3, [sp, #4]
    3386:	3301      	adds	r3, #1
    3388:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    338a:	2000      	movs	r0, #0
	break;
    338c:	e7f5      	b.n	337a <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    338e:	4b0c      	ldr	r3, [pc, #48]	; (33c0 <disk_ioctl+0x64>)
    3390:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    3392:	1e43      	subs	r3, r0, #1
    3394:	b2db      	uxtb	r3, r3
    3396:	2b01      	cmp	r3, #1
    3398:	d904      	bls.n	33a4 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    339a:	1f03      	subs	r3, r0, #4
    339c:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    339e:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    33a0:	4213      	tst	r3, r2
    33a2:	d1ea      	bne.n	337a <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    33a4:	2300      	movs	r3, #0
    33a6:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    33a8:	2000      	movs	r0, #0
	break;
    33aa:	e7e6      	b.n	337a <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    33ac:	4b05      	ldr	r3, [pc, #20]	; (33c4 <disk_ioctl+0x68>)
    33ae:	4798      	blx	r3
    33b0:	2800      	cmp	r0, #0
    33b2:	d001      	beq.n	33b8 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    33b4:	2003      	movs	r0, #3
    33b6:	e7e0      	b.n	337a <disk_ioctl+0x1e>
			res = RES_OK;
    33b8:	2000      	movs	r0, #0
    33ba:	e7de      	b.n	337a <disk_ioctl+0x1e>
    33bc:	00001505 	.word	0x00001505
    33c0:	00001521 	.word	0x00001521
    33c4:	000014ed 	.word	0x000014ed

000033c8 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    33c8:	b500      	push	{lr}
    33ca:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    33cc:	4669      	mov	r1, sp
    33ce:	480f      	ldr	r0, [pc, #60]	; (340c <get_fattime+0x44>)
    33d0:	4b0f      	ldr	r3, [pc, #60]	; (3410 <get_fattime+0x48>)
    33d2:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    33d4:	466b      	mov	r3, sp
    33d6:	7958      	ldrb	r0, [r3, #5]
    33d8:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    33da:	791b      	ldrb	r3, [r3, #4]
    33dc:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    33de:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    33e0:	466b      	mov	r3, sp
    33e2:	789b      	ldrb	r3, [r3, #2]
    33e4:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    33e6:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    33e8:	466b      	mov	r3, sp
    33ea:	785b      	ldrb	r3, [r3, #1]
    33ec:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    33ee:	4318      	orrs	r0, r3
    33f0:	466b      	mov	r3, sp
    33f2:	781b      	ldrb	r3, [r3, #0]
    33f4:	085b      	lsrs	r3, r3, #1
    33f6:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    33f8:	466b      	mov	r3, sp
    33fa:	88db      	ldrh	r3, [r3, #6]
    33fc:	4a05      	ldr	r2, [pc, #20]	; (3414 <get_fattime+0x4c>)
    33fe:	4694      	mov	ip, r2
    3400:	4463      	add	r3, ip
    3402:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    3404:	4318      	orrs	r0, r3

	return ul_time;
}
    3406:	b003      	add	sp, #12
    3408:	bd00      	pop	{pc}
    340a:	46c0      	nop			; (mov r8, r8)
    340c:	200005d8 	.word	0x200005d8
    3410:	000016e1 	.word	0x000016e1
    3414:	fffff844 	.word	0xfffff844

00003418 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    3418:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    341a:	2a00      	cmp	r2, #0
    341c:	d005      	beq.n	342a <mem_cpy+0x12>
    341e:	2300      	movs	r3, #0
		*d++ = *s++;
    3420:	5ccc      	ldrb	r4, [r1, r3]
    3422:	54c4      	strb	r4, [r0, r3]
    3424:	3301      	adds	r3, #1
	while (cnt--)
    3426:	4293      	cmp	r3, r2
    3428:	d1fa      	bne.n	3420 <mem_cpy+0x8>
}
    342a:	bd10      	pop	{r4, pc}

0000342c <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    342c:	2a00      	cmp	r2, #0
    342e:	d005      	beq.n	343c <mem_set+0x10>
    3430:	0003      	movs	r3, r0
    3432:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    3434:	7019      	strb	r1, [r3, #0]
    3436:	3301      	adds	r3, #1
	while (cnt--)
    3438:	4293      	cmp	r3, r2
    343a:	d1fb      	bne.n	3434 <mem_set+0x8>
}
    343c:	4770      	bx	lr

0000343e <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    343e:	0002      	movs	r2, r0
	clst -= 2;
    3440:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    3442:	6983      	ldr	r3, [r0, #24]
    3444:	3b02      	subs	r3, #2
    3446:	2000      	movs	r0, #0
    3448:	4299      	cmp	r1, r3
    344a:	d203      	bcs.n	3454 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    344c:	7890      	ldrb	r0, [r2, #2]
    344e:	4341      	muls	r1, r0
    3450:	6a90      	ldr	r0, [r2, #40]	; 0x28
    3452:	1808      	adds	r0, r1, r0
}
    3454:	4770      	bx	lr

00003456 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    3456:	0002      	movs	r2, r0
    3458:	0001      	movs	r1, r0
    345a:	310b      	adds	r1, #11
	BYTE sum = 0;
    345c:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    345e:	0843      	lsrs	r3, r0, #1
    3460:	01c0      	lsls	r0, r0, #7
    3462:	4303      	orrs	r3, r0
    3464:	7810      	ldrb	r0, [r2, #0]
    3466:	1818      	adds	r0, r3, r0
    3468:	b2c0      	uxtb	r0, r0
    346a:	3201      	adds	r2, #1
    346c:	428a      	cmp	r2, r1
    346e:	d1f6      	bne.n	345e <sum_sfn+0x8>
	return sum;
}
    3470:	4770      	bx	lr
	...

00003474 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    3474:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    3476:	2800      	cmp	r0, #0
    3478:	d010      	beq.n	349c <validate+0x28>
    347a:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    347c:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    347e:	2a00      	cmp	r2, #0
    3480:	d101      	bne.n	3486 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    3482:	0018      	movs	r0, r3
    3484:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    3486:	88c2      	ldrh	r2, [r0, #6]
    3488:	428a      	cmp	r2, r1
    348a:	d1fa      	bne.n	3482 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    348c:	7840      	ldrb	r0, [r0, #1]
    348e:	4b04      	ldr	r3, [pc, #16]	; (34a0 <validate+0x2c>)
    3490:	4798      	blx	r3
		return FR_NOT_READY;
    3492:	2303      	movs	r3, #3
	return FR_OK;
    3494:	07c0      	lsls	r0, r0, #31
    3496:	17c0      	asrs	r0, r0, #31
    3498:	4003      	ands	r3, r0
    349a:	e7f2      	b.n	3482 <validate+0xe>
		return FR_INVALID_OBJECT;
    349c:	2309      	movs	r3, #9
    349e:	e7f0      	b.n	3482 <validate+0xe>
    34a0:	00003239 	.word	0x00003239

000034a4 <check_fs>:
{
    34a4:	b570      	push	{r4, r5, r6, lr}
    34a6:	0004      	movs	r4, r0
    34a8:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    34aa:	0001      	movs	r1, r0
    34ac:	3130      	adds	r1, #48	; 0x30
    34ae:	7840      	ldrb	r0, [r0, #1]
    34b0:	2301      	movs	r3, #1
    34b2:	4d1f      	ldr	r5, [pc, #124]	; (3530 <check_fs+0x8c>)
    34b4:	47a8      	blx	r5
		return 3;
    34b6:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    34b8:	2800      	cmp	r0, #0
    34ba:	d001      	beq.n	34c0 <check_fs+0x1c>
}
    34bc:	0018      	movs	r0, r3
    34be:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    34c0:	4b1c      	ldr	r3, [pc, #112]	; (3534 <check_fs+0x90>)
    34c2:	5ce3      	ldrb	r3, [r4, r3]
    34c4:	021b      	lsls	r3, r3, #8
    34c6:	4a1c      	ldr	r2, [pc, #112]	; (3538 <check_fs+0x94>)
    34c8:	5ca2      	ldrb	r2, [r4, r2]
    34ca:	431a      	orrs	r2, r3
    34cc:	491b      	ldr	r1, [pc, #108]	; (353c <check_fs+0x98>)
    34ce:	b212      	sxth	r2, r2
		return 2;
    34d0:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    34d2:	428a      	cmp	r2, r1
    34d4:	d1f2      	bne.n	34bc <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    34d6:	3367      	adds	r3, #103	; 0x67
    34d8:	5ce3      	ldrb	r3, [r4, r3]
    34da:	061b      	lsls	r3, r3, #24
    34dc:	2268      	movs	r2, #104	; 0x68
    34de:	5ca2      	ldrb	r2, [r4, r2]
    34e0:	0412      	lsls	r2, r2, #16
    34e2:	4313      	orrs	r3, r2
    34e4:	2266      	movs	r2, #102	; 0x66
    34e6:	5ca2      	ldrb	r2, [r4, r2]
    34e8:	4313      	orrs	r3, r2
    34ea:	2267      	movs	r2, #103	; 0x67
    34ec:	5ca2      	ldrb	r2, [r4, r2]
    34ee:	0212      	lsls	r2, r2, #8
    34f0:	4313      	orrs	r3, r2
    34f2:	021b      	lsls	r3, r3, #8
    34f4:	0a1b      	lsrs	r3, r3, #8
    34f6:	4a12      	ldr	r2, [pc, #72]	; (3540 <check_fs+0x9c>)
    34f8:	4293      	cmp	r3, r2
    34fa:	d016      	beq.n	352a <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    34fc:	2385      	movs	r3, #133	; 0x85
    34fe:	5ce3      	ldrb	r3, [r4, r3]
    3500:	061b      	lsls	r3, r3, #24
    3502:	2284      	movs	r2, #132	; 0x84
    3504:	5ca2      	ldrb	r2, [r4, r2]
    3506:	0412      	lsls	r2, r2, #16
    3508:	4313      	orrs	r3, r2
    350a:	2282      	movs	r2, #130	; 0x82
    350c:	5ca2      	ldrb	r2, [r4, r2]
    350e:	4313      	orrs	r3, r2
    3510:	2283      	movs	r2, #131	; 0x83
    3512:	5ca2      	ldrb	r2, [r4, r2]
    3514:	0212      	lsls	r2, r2, #8
    3516:	4313      	orrs	r3, r2
    3518:	021b      	lsls	r3, r3, #8
    351a:	0a1b      	lsrs	r3, r3, #8
    351c:	4a09      	ldr	r2, [pc, #36]	; (3544 <check_fs+0xa0>)
    351e:	4694      	mov	ip, r2
    3520:	4463      	add	r3, ip
    3522:	1e58      	subs	r0, r3, #1
    3524:	4183      	sbcs	r3, r0
		return 3;
    3526:	b2db      	uxtb	r3, r3
    3528:	e7c8      	b.n	34bc <check_fs+0x18>
		return 0;
    352a:	2300      	movs	r3, #0
    352c:	e7c6      	b.n	34bc <check_fs+0x18>
    352e:	46c0      	nop			; (mov r8, r8)
    3530:	00003255 	.word	0x00003255
    3534:	0000022f 	.word	0x0000022f
    3538:	0000022e 	.word	0x0000022e
    353c:	ffffaa55 	.word	0xffffaa55
    3540:	00544146 	.word	0x00544146
    3544:	ffabbeba 	.word	0xffabbeba

00003548 <chk_mounted>:
{
    3548:	b5f0      	push	{r4, r5, r6, r7, lr}
    354a:	46d6      	mov	lr, sl
    354c:	464f      	mov	r7, r9
    354e:	4646      	mov	r6, r8
    3550:	b5c0      	push	{r6, r7, lr}
    3552:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    3554:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    3556:	781c      	ldrb	r4, [r3, #0]
    3558:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    355a:	2c09      	cmp	r4, #9
    355c:	d80e      	bhi.n	357c <chk_mounted+0x34>
    355e:	785a      	ldrb	r2, [r3, #1]
    3560:	2a3a      	cmp	r2, #58	; 0x3a
    3562:	d001      	beq.n	3568 <chk_mounted+0x20>
    3564:	2400      	movs	r4, #0
    3566:	e00a      	b.n	357e <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    3568:	3302      	adds	r3, #2
    356a:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    356c:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    356e:	2c07      	cmp	r4, #7
    3570:	d905      	bls.n	357e <chk_mounted+0x36>
}
    3572:	bc1c      	pop	{r2, r3, r4}
    3574:	4690      	mov	r8, r2
    3576:	4699      	mov	r9, r3
    3578:	46a2      	mov	sl, r4
    357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    357c:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    357e:	00a3      	lsls	r3, r4, #2
    3580:	4ac5      	ldr	r2, [pc, #788]	; (3898 <chk_mounted+0x350>)
    3582:	589e      	ldr	r6, [r3, r2]
    3584:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3586:	2e00      	cmp	r6, #0
    3588:	d100      	bne.n	358c <chk_mounted+0x44>
    358a:	e0e8      	b.n	375e <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    358c:	7833      	ldrb	r3, [r6, #0]
    358e:	2b00      	cmp	r3, #0
    3590:	d00d      	beq.n	35ae <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    3592:	7870      	ldrb	r0, [r6, #1]
    3594:	4bc1      	ldr	r3, [pc, #772]	; (389c <chk_mounted+0x354>)
    3596:	4798      	blx	r3
    3598:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    359a:	07c2      	lsls	r2, r0, #31
    359c:	d407      	bmi.n	35ae <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    359e:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    35a0:	2d00      	cmp	r5, #0
    35a2:	d0e6      	beq.n	3572 <chk_mounted+0x2a>
    35a4:	075b      	lsls	r3, r3, #29
    35a6:	d400      	bmi.n	35aa <chk_mounted+0x62>
    35a8:	e0db      	b.n	3762 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    35aa:	300a      	adds	r0, #10
    35ac:	e7e1      	b.n	3572 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    35ae:	2300      	movs	r3, #0
    35b0:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    35b2:	b2e0      	uxtb	r0, r4
    35b4:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    35b6:	4bba      	ldr	r3, [pc, #744]	; (38a0 <chk_mounted+0x358>)
    35b8:	4798      	blx	r3
    35ba:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    35bc:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    35be:	07da      	lsls	r2, r3, #31
    35c0:	d4d7      	bmi.n	3572 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    35c2:	2d00      	cmp	r5, #0
    35c4:	d002      	beq.n	35cc <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    35c6:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    35c8:	075b      	lsls	r3, r3, #29
    35ca:	d4d2      	bmi.n	3572 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    35cc:	2100      	movs	r1, #0
    35ce:	0030      	movs	r0, r6
    35d0:	4bb4      	ldr	r3, [pc, #720]	; (38a4 <chk_mounted+0x35c>)
    35d2:	4798      	blx	r3
    35d4:	0003      	movs	r3, r0
    35d6:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    35d8:	2801      	cmp	r0, #1
    35da:	d100      	bne.n	35de <chk_mounted+0x96>
    35dc:	e09a      	b.n	3714 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    35de:	2b03      	cmp	r3, #3
    35e0:	d100      	bne.n	35e4 <chk_mounted+0x9c>
    35e2:	e0c0      	b.n	3766 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    35e4:	200d      	movs	r0, #13
    35e6:	2b00      	cmp	r3, #0
    35e8:	d1c3      	bne.n	3572 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    35ea:	333c      	adds	r3, #60	; 0x3c
    35ec:	5cf2      	ldrb	r2, [r6, r3]
    35ee:	0212      	lsls	r2, r2, #8
    35f0:	3b01      	subs	r3, #1
    35f2:	5cf3      	ldrb	r3, [r6, r3]
    35f4:	4313      	orrs	r3, r2
    35f6:	2280      	movs	r2, #128	; 0x80
    35f8:	0092      	lsls	r2, r2, #2
    35fa:	b21b      	sxth	r3, r3
    35fc:	4293      	cmp	r3, r2
    35fe:	d1b8      	bne.n	3572 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    3600:	2347      	movs	r3, #71	; 0x47
    3602:	5cf3      	ldrb	r3, [r6, r3]
    3604:	021b      	lsls	r3, r3, #8
    3606:	3abb      	subs	r2, #187	; 0xbb
    3608:	3aff      	subs	r2, #255	; 0xff
    360a:	5cb5      	ldrb	r5, [r6, r2]
    360c:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    360e:	d10d      	bne.n	362c <chk_mounted+0xe4>
    3610:	2357      	movs	r3, #87	; 0x57
    3612:	5cf5      	ldrb	r5, [r6, r3]
    3614:	062d      	lsls	r5, r5, #24
    3616:	3b01      	subs	r3, #1
    3618:	5cf3      	ldrb	r3, [r6, r3]
    361a:	041b      	lsls	r3, r3, #16
    361c:	431d      	orrs	r5, r3
    361e:	2354      	movs	r3, #84	; 0x54
    3620:	5cf3      	ldrb	r3, [r6, r3]
    3622:	431d      	orrs	r5, r3
    3624:	2355      	movs	r3, #85	; 0x55
    3626:	5cf3      	ldrb	r3, [r6, r3]
    3628:	021b      	lsls	r3, r3, #8
    362a:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    362c:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    362e:	2340      	movs	r3, #64	; 0x40
    3630:	5cf2      	ldrb	r2, [r6, r3]
    3632:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    3634:	1e53      	subs	r3, r2, #1
    3636:	200d      	movs	r0, #13
    3638:	2b01      	cmp	r3, #1
    363a:	d89a      	bhi.n	3572 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    363c:	233d      	movs	r3, #61	; 0x3d
    363e:	5cf1      	ldrb	r1, [r6, r3]
    3640:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3642:	2900      	cmp	r1, #0
    3644:	d095      	beq.n	3572 <chk_mounted+0x2a>
    3646:	1e4b      	subs	r3, r1, #1
    3648:	4219      	tst	r1, r3
    364a:	d192      	bne.n	3572 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    364c:	2342      	movs	r3, #66	; 0x42
    364e:	5cf3      	ldrb	r3, [r6, r3]
    3650:	021b      	lsls	r3, r3, #8
    3652:	3034      	adds	r0, #52	; 0x34
    3654:	5c30      	ldrb	r0, [r6, r0]
    3656:	4318      	orrs	r0, r3
    3658:	4680      	mov	r8, r0
    365a:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    365c:	200d      	movs	r0, #13
    365e:	4643      	mov	r3, r8
    3660:	071b      	lsls	r3, r3, #28
    3662:	d000      	beq.n	3666 <chk_mounted+0x11e>
    3664:	e785      	b.n	3572 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    3666:	2344      	movs	r3, #68	; 0x44
    3668:	5cf3      	ldrb	r3, [r6, r3]
    366a:	021b      	lsls	r3, r3, #8
    366c:	3036      	adds	r0, #54	; 0x36
    366e:	5c30      	ldrb	r0, [r6, r0]
    3670:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    3672:	d10d      	bne.n	3690 <chk_mounted+0x148>
    3674:	3353      	adds	r3, #83	; 0x53
    3676:	5cf3      	ldrb	r3, [r6, r3]
    3678:	061b      	lsls	r3, r3, #24
    367a:	2052      	movs	r0, #82	; 0x52
    367c:	5c30      	ldrb	r0, [r6, r0]
    367e:	0400      	lsls	r0, r0, #16
    3680:	4303      	orrs	r3, r0
    3682:	2050      	movs	r0, #80	; 0x50
    3684:	5c30      	ldrb	r0, [r6, r0]
    3686:	4303      	orrs	r3, r0
    3688:	2051      	movs	r0, #81	; 0x51
    368a:	5c30      	ldrb	r0, [r6, r0]
    368c:	0200      	lsls	r0, r0, #8
    368e:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3690:	203f      	movs	r0, #63	; 0x3f
    3692:	5c30      	ldrb	r0, [r6, r0]
    3694:	0200      	lsls	r0, r0, #8
    3696:	273e      	movs	r7, #62	; 0x3e
    3698:	5df7      	ldrb	r7, [r6, r7]
    369a:	4307      	orrs	r7, r0
    369c:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    369e:	200d      	movs	r0, #13
    36a0:	2f00      	cmp	r7, #0
    36a2:	d100      	bne.n	36a6 <chk_mounted+0x15e>
    36a4:	e765      	b.n	3572 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    36a6:	436a      	muls	r2, r5
    36a8:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    36aa:	4642      	mov	r2, r8
    36ac:	0917      	lsrs	r7, r2, #4
    36ae:	4457      	add	r7, sl
    36b0:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    36b2:	42bb      	cmp	r3, r7
    36b4:	d200      	bcs.n	36b8 <chk_mounted+0x170>
    36b6:	e75c      	b.n	3572 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    36b8:	1bd8      	subs	r0, r3, r7
    36ba:	4b7b      	ldr	r3, [pc, #492]	; (38a8 <chk_mounted+0x360>)
    36bc:	4798      	blx	r3
    36be:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    36c0:	200d      	movs	r0, #13
    36c2:	2b00      	cmp	r3, #0
    36c4:	d100      	bne.n	36c8 <chk_mounted+0x180>
    36c6:	e754      	b.n	3572 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    36c8:	4a78      	ldr	r2, [pc, #480]	; (38ac <chk_mounted+0x364>)
	fmt = FS_FAT12;
    36ca:	429a      	cmp	r2, r3
    36cc:	4192      	sbcs	r2, r2
    36ce:	4252      	negs	r2, r2
    36d0:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    36d2:	4977      	ldr	r1, [pc, #476]	; (38b0 <chk_mounted+0x368>)
    36d4:	428b      	cmp	r3, r1
    36d6:	d848      	bhi.n	376a <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    36d8:	3302      	adds	r3, #2
    36da:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    36dc:	19e7      	adds	r7, r4, r7
    36de:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    36e0:	4454      	add	r4, sl
    36e2:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    36e4:	200d      	movs	r0, #13
    36e6:	4641      	mov	r1, r8
    36e8:	2900      	cmp	r1, #0
    36ea:	d100      	bne.n	36ee <chk_mounted+0x1a6>
    36ec:	e741      	b.n	3572 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    36ee:	444c      	add	r4, r9
    36f0:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    36f2:	2a02      	cmp	r2, #2
    36f4:	d12c      	bne.n	3750 <chk_mounted+0x208>
    36f6:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    36f8:	496e      	ldr	r1, [pc, #440]	; (38b4 <chk_mounted+0x36c>)
    36fa:	468c      	mov	ip, r1
    36fc:	4463      	add	r3, ip
    36fe:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3700:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3702:	429d      	cmp	r5, r3
    3704:	d200      	bcs.n	3708 <chk_mounted+0x1c0>
    3706:	e734      	b.n	3572 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3708:	2301      	movs	r3, #1
    370a:	425b      	negs	r3, r3
    370c:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    370e:	2300      	movs	r3, #0
    3710:	60f3      	str	r3, [r6, #12]
    3712:	e0b6      	b.n	3882 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    3714:	33f2      	adds	r3, #242	; 0xf2
    3716:	33ff      	adds	r3, #255	; 0xff
    3718:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    371a:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    371c:	2b00      	cmp	r3, #0
    371e:	d100      	bne.n	3722 <chk_mounted+0x1da>
    3720:	e727      	b.n	3572 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    3722:	23fa      	movs	r3, #250	; 0xfa
    3724:	33ff      	adds	r3, #255	; 0xff
    3726:	5cf4      	ldrb	r4, [r6, r3]
    3728:	0624      	lsls	r4, r4, #24
    372a:	3b01      	subs	r3, #1
    372c:	5cf3      	ldrb	r3, [r6, r3]
    372e:	041b      	lsls	r3, r3, #16
    3730:	431c      	orrs	r4, r3
    3732:	23fb      	movs	r3, #251	; 0xfb
    3734:	005b      	lsls	r3, r3, #1
    3736:	5cf3      	ldrb	r3, [r6, r3]
    3738:	431c      	orrs	r4, r3
    373a:	23f8      	movs	r3, #248	; 0xf8
    373c:	33ff      	adds	r3, #255	; 0xff
    373e:	5cf2      	ldrb	r2, [r6, r3]
    3740:	0212      	lsls	r2, r2, #8
    3742:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3744:	0021      	movs	r1, r4
    3746:	0030      	movs	r0, r6
    3748:	4b56      	ldr	r3, [pc, #344]	; (38a4 <chk_mounted+0x35c>)
    374a:	4798      	blx	r3
    374c:	0003      	movs	r3, r0
    374e:	e746      	b.n	35de <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3750:	2103      	movs	r1, #3
    3752:	4359      	muls	r1, r3
    3754:	0849      	lsrs	r1, r1, #1
    3756:	2001      	movs	r0, #1
    3758:	4003      	ands	r3, r0
    375a:	18cb      	adds	r3, r1, r3
    375c:	e7cc      	b.n	36f8 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    375e:	200c      	movs	r0, #12
    3760:	e707      	b.n	3572 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    3762:	2000      	movs	r0, #0
    3764:	e705      	b.n	3572 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    3766:	2001      	movs	r0, #1
    3768:	e703      	b.n	3572 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    376a:	3302      	adds	r3, #2
    376c:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    376e:	19e7      	adds	r7, r4, r7
    3770:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3772:	4652      	mov	r2, sl
    3774:	18a2      	adds	r2, r4, r2
    3776:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3778:	200d      	movs	r0, #13
    377a:	4642      	mov	r2, r8
    377c:	2a00      	cmp	r2, #0
    377e:	d000      	beq.n	3782 <chk_mounted+0x23a>
    3780:	e6f7      	b.n	3572 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3782:	225f      	movs	r2, #95	; 0x5f
    3784:	5cb2      	ldrb	r2, [r6, r2]
    3786:	0612      	lsls	r2, r2, #24
    3788:	215e      	movs	r1, #94	; 0x5e
    378a:	5c71      	ldrb	r1, [r6, r1]
    378c:	0409      	lsls	r1, r1, #16
    378e:	430a      	orrs	r2, r1
    3790:	215c      	movs	r1, #92	; 0x5c
    3792:	5c71      	ldrb	r1, [r6, r1]
    3794:	430a      	orrs	r2, r1
    3796:	215d      	movs	r1, #93	; 0x5d
    3798:	5c71      	ldrb	r1, [r6, r1]
    379a:	0209      	lsls	r1, r1, #8
    379c:	430a      	orrs	r2, r1
    379e:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    37a0:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    37a2:	4a44      	ldr	r2, [pc, #272]	; (38b4 <chk_mounted+0x36c>)
    37a4:	4694      	mov	ip, r2
    37a6:	4463      	add	r3, ip
    37a8:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    37aa:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    37ac:	429d      	cmp	r5, r3
    37ae:	d200      	bcs.n	37b2 <chk_mounted+0x26a>
    37b0:	e6df      	b.n	3572 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    37b2:	2301      	movs	r3, #1
    37b4:	425b      	negs	r3, r3
    37b6:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    37b8:	2300      	movs	r3, #0
    37ba:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    37bc:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    37be:	3361      	adds	r3, #97	; 0x61
    37c0:	5cf3      	ldrb	r3, [r6, r3]
    37c2:	021b      	lsls	r3, r3, #8
    37c4:	2260      	movs	r2, #96	; 0x60
    37c6:	5cb2      	ldrb	r2, [r6, r2]
    37c8:	431a      	orrs	r2, r3
    37ca:	1912      	adds	r2, r2, r4
    37cc:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    37ce:	0031      	movs	r1, r6
    37d0:	3130      	adds	r1, #48	; 0x30
    37d2:	7870      	ldrb	r0, [r6, #1]
    37d4:	2301      	movs	r3, #1
    37d6:	4c38      	ldr	r4, [pc, #224]	; (38b8 <chk_mounted+0x370>)
    37d8:	47a0      	blx	r4
    37da:	2203      	movs	r2, #3
    37dc:	2800      	cmp	r0, #0
    37de:	d150      	bne.n	3882 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    37e0:	4b36      	ldr	r3, [pc, #216]	; (38bc <chk_mounted+0x374>)
    37e2:	5cf2      	ldrb	r2, [r6, r3]
    37e4:	0212      	lsls	r2, r2, #8
    37e6:	4b36      	ldr	r3, [pc, #216]	; (38c0 <chk_mounted+0x378>)
    37e8:	5cf3      	ldrb	r3, [r6, r3]
    37ea:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    37ec:	4935      	ldr	r1, [pc, #212]	; (38c4 <chk_mounted+0x37c>)
    37ee:	b21b      	sxth	r3, r3
    37f0:	2203      	movs	r2, #3
    37f2:	428b      	cmp	r3, r1
    37f4:	d145      	bne.n	3882 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    37f6:	2333      	movs	r3, #51	; 0x33
    37f8:	5cf3      	ldrb	r3, [r6, r3]
    37fa:	061b      	lsls	r3, r3, #24
    37fc:	322f      	adds	r2, #47	; 0x2f
    37fe:	5cb2      	ldrb	r2, [r6, r2]
    3800:	0412      	lsls	r2, r2, #16
    3802:	4313      	orrs	r3, r2
    3804:	2230      	movs	r2, #48	; 0x30
    3806:	5cb2      	ldrb	r2, [r6, r2]
    3808:	4313      	orrs	r3, r2
    380a:	2231      	movs	r2, #49	; 0x31
    380c:	5cb2      	ldrb	r2, [r6, r2]
    380e:	0212      	lsls	r2, r2, #8
    3810:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3812:	492d      	ldr	r1, [pc, #180]	; (38c8 <chk_mounted+0x380>)
    3814:	2203      	movs	r2, #3
    3816:	428b      	cmp	r3, r1
    3818:	d133      	bne.n	3882 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    381a:	4b2c      	ldr	r3, [pc, #176]	; (38cc <chk_mounted+0x384>)
    381c:	5cf3      	ldrb	r3, [r6, r3]
    381e:	061b      	lsls	r3, r3, #24
    3820:	4a2b      	ldr	r2, [pc, #172]	; (38d0 <chk_mounted+0x388>)
    3822:	5cb2      	ldrb	r2, [r6, r2]
    3824:	0412      	lsls	r2, r2, #16
    3826:	4313      	orrs	r3, r2
    3828:	2285      	movs	r2, #133	; 0x85
    382a:	0092      	lsls	r2, r2, #2
    382c:	5cb2      	ldrb	r2, [r6, r2]
    382e:	4313      	orrs	r3, r2
    3830:	4a28      	ldr	r2, [pc, #160]	; (38d4 <chk_mounted+0x38c>)
    3832:	5cb2      	ldrb	r2, [r6, r2]
    3834:	0212      	lsls	r2, r2, #8
    3836:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3838:	4927      	ldr	r1, [pc, #156]	; (38d8 <chk_mounted+0x390>)
    383a:	2203      	movs	r2, #3
    383c:	428b      	cmp	r3, r1
    383e:	d120      	bne.n	3882 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    3840:	4b26      	ldr	r3, [pc, #152]	; (38dc <chk_mounted+0x394>)
    3842:	5cf3      	ldrb	r3, [r6, r3]
    3844:	061b      	lsls	r3, r3, #24
    3846:	4a26      	ldr	r2, [pc, #152]	; (38e0 <chk_mounted+0x398>)
    3848:	5cb2      	ldrb	r2, [r6, r2]
    384a:	0412      	lsls	r2, r2, #16
    384c:	4313      	orrs	r3, r2
    384e:	2287      	movs	r2, #135	; 0x87
    3850:	0092      	lsls	r2, r2, #2
    3852:	5cb2      	ldrb	r2, [r6, r2]
    3854:	4313      	orrs	r3, r2
    3856:	4a23      	ldr	r2, [pc, #140]	; (38e4 <chk_mounted+0x39c>)
    3858:	5cb2      	ldrb	r2, [r6, r2]
    385a:	0212      	lsls	r2, r2, #8
    385c:	4313      	orrs	r3, r2
    385e:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    3860:	4b21      	ldr	r3, [pc, #132]	; (38e8 <chk_mounted+0x3a0>)
    3862:	5cf3      	ldrb	r3, [r6, r3]
    3864:	061b      	lsls	r3, r3, #24
    3866:	4a21      	ldr	r2, [pc, #132]	; (38ec <chk_mounted+0x3a4>)
    3868:	5cb2      	ldrb	r2, [r6, r2]
    386a:	0412      	lsls	r2, r2, #16
    386c:	4313      	orrs	r3, r2
    386e:	2286      	movs	r2, #134	; 0x86
    3870:	0092      	lsls	r2, r2, #2
    3872:	5cb2      	ldrb	r2, [r6, r2]
    3874:	4313      	orrs	r3, r2
    3876:	4a1e      	ldr	r2, [pc, #120]	; (38f0 <chk_mounted+0x3a8>)
    3878:	5cb2      	ldrb	r2, [r6, r2]
    387a:	0212      	lsls	r2, r2, #8
    387c:	4313      	orrs	r3, r2
    387e:	6133      	str	r3, [r6, #16]
    3880:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    3882:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    3884:	4a1b      	ldr	r2, [pc, #108]	; (38f4 <chk_mounted+0x3ac>)
    3886:	8813      	ldrh	r3, [r2, #0]
    3888:	3301      	adds	r3, #1
    388a:	b29b      	uxth	r3, r3
    388c:	8013      	strh	r3, [r2, #0]
    388e:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    3890:	2000      	movs	r0, #0
    3892:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    3894:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    3896:	e66c      	b.n	3572 <chk_mounted+0x2a>
    3898:	20000148 	.word	0x20000148
    389c:	00003239 	.word	0x00003239
    38a0:	0000319d 	.word	0x0000319d
    38a4:	000034a5 	.word	0x000034a5
    38a8:	00004e7d 	.word	0x00004e7d
    38ac:	00000ff5 	.word	0x00000ff5
    38b0:	0000fff5 	.word	0x0000fff5
    38b4:	000001ff 	.word	0x000001ff
    38b8:	00003255 	.word	0x00003255
    38bc:	0000022f 	.word	0x0000022f
    38c0:	0000022e 	.word	0x0000022e
    38c4:	ffffaa55 	.word	0xffffaa55
    38c8:	41615252 	.word	0x41615252
    38cc:	00000217 	.word	0x00000217
    38d0:	00000216 	.word	0x00000216
    38d4:	00000215 	.word	0x00000215
    38d8:	61417272 	.word	0x61417272
    38dc:	0000021f 	.word	0x0000021f
    38e0:	0000021e 	.word	0x0000021e
    38e4:	0000021d 	.word	0x0000021d
    38e8:	0000021b 	.word	0x0000021b
    38ec:	0000021a 	.word	0x0000021a
    38f0:	00000219 	.word	0x00000219
    38f4:	20000168 	.word	0x20000168

000038f8 <move_window>:
{
    38f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38fa:	46ce      	mov	lr, r9
    38fc:	b500      	push	{lr}
    38fe:	b082      	sub	sp, #8
    3900:	0004      	movs	r4, r0
    3902:	000f      	movs	r7, r1
	wsect = fs->winsect;
    3904:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    3906:	428d      	cmp	r5, r1
    3908:	d03f      	beq.n	398a <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    390a:	7903      	ldrb	r3, [r0, #4]
    390c:	2b00      	cmp	r3, #0
    390e:	d107      	bne.n	3920 <move_window+0x28>
	return FR_OK;
    3910:	2300      	movs	r3, #0
		if (sector) {
    3912:	2f00      	cmp	r7, #0
    3914:	d12c      	bne.n	3970 <move_window+0x78>
}
    3916:	0018      	movs	r0, r3
    3918:	b002      	add	sp, #8
    391a:	bc04      	pop	{r2}
    391c:	4691      	mov	r9, r2
    391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3920:	2330      	movs	r3, #48	; 0x30
    3922:	469c      	mov	ip, r3
    3924:	4484      	add	ip, r0
    3926:	4663      	mov	r3, ip
    3928:	4661      	mov	r1, ip
    392a:	9301      	str	r3, [sp, #4]
    392c:	7840      	ldrb	r0, [r0, #1]
    392e:	2301      	movs	r3, #1
    3930:	002a      	movs	r2, r5
    3932:	4e17      	ldr	r6, [pc, #92]	; (3990 <move_window+0x98>)
    3934:	47b0      	blx	r6
				return FR_DISK_ERR;
    3936:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3938:	2800      	cmp	r0, #0
    393a:	d1ec      	bne.n	3916 <move_window+0x1e>
			fs->wflag = 0;
    393c:	2300      	movs	r3, #0
    393e:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3940:	6a23      	ldr	r3, [r4, #32]
    3942:	69e2      	ldr	r2, [r4, #28]
    3944:	4694      	mov	ip, r2
    3946:	4463      	add	r3, ip
    3948:	429d      	cmp	r5, r3
    394a:	d2e1      	bcs.n	3910 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    394c:	78e6      	ldrb	r6, [r4, #3]
    394e:	2e01      	cmp	r6, #1
    3950:	d9de      	bls.n	3910 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    3952:	4b0f      	ldr	r3, [pc, #60]	; (3990 <move_window+0x98>)
    3954:	4699      	mov	r9, r3
					wsect += fs->fsize;
    3956:	69e3      	ldr	r3, [r4, #28]
    3958:	469c      	mov	ip, r3
    395a:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    395c:	7860      	ldrb	r0, [r4, #1]
    395e:	2301      	movs	r3, #1
    3960:	002a      	movs	r2, r5
    3962:	9901      	ldr	r1, [sp, #4]
    3964:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3966:	3e01      	subs	r6, #1
    3968:	b2f6      	uxtb	r6, r6
    396a:	2e01      	cmp	r6, #1
    396c:	d1f3      	bne.n	3956 <move_window+0x5e>
    396e:	e7cf      	b.n	3910 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3970:	0021      	movs	r1, r4
    3972:	3130      	adds	r1, #48	; 0x30
    3974:	7860      	ldrb	r0, [r4, #1]
    3976:	3301      	adds	r3, #1
    3978:	003a      	movs	r2, r7
    397a:	4d06      	ldr	r5, [pc, #24]	; (3994 <move_window+0x9c>)
    397c:	47a8      	blx	r5
				return FR_DISK_ERR;
    397e:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3980:	2800      	cmp	r0, #0
    3982:	d1c8      	bne.n	3916 <move_window+0x1e>
			fs->winsect = sector;
    3984:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    3986:	2300      	movs	r3, #0
    3988:	e7c5      	b.n	3916 <move_window+0x1e>
    398a:	2300      	movs	r3, #0
    398c:	e7c3      	b.n	3916 <move_window+0x1e>
    398e:	46c0      	nop			; (mov r8, r8)
    3990:	000032d9 	.word	0x000032d9
    3994:	00003255 	.word	0x00003255

00003998 <get_fat>:
{
    3998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    399a:	0005      	movs	r5, r0
    399c:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    399e:	2901      	cmp	r1, #1
    39a0:	d974      	bls.n	3a8c <get_fat+0xf4>
		return 1;
    39a2:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    39a4:	69ab      	ldr	r3, [r5, #24]
    39a6:	4299      	cmp	r1, r3
    39a8:	d271      	bcs.n	3a8e <get_fat+0xf6>
	switch (fs->fs_type) {
    39aa:	782b      	ldrb	r3, [r5, #0]
    39ac:	2b02      	cmp	r3, #2
    39ae:	d034      	beq.n	3a1a <get_fat+0x82>
    39b0:	2b03      	cmp	r3, #3
    39b2:	d049      	beq.n	3a48 <get_fat+0xb0>
    39b4:	2b01      	cmp	r3, #1
    39b6:	d002      	beq.n	39be <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    39b8:	2001      	movs	r0, #1
    39ba:	4240      	negs	r0, r0
    39bc:	e067      	b.n	3a8e <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    39be:	084e      	lsrs	r6, r1, #1
    39c0:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    39c2:	0a71      	lsrs	r1, r6, #9
    39c4:	6a2b      	ldr	r3, [r5, #32]
    39c6:	469c      	mov	ip, r3
    39c8:	4461      	add	r1, ip
    39ca:	0028      	movs	r0, r5
    39cc:	4b30      	ldr	r3, [pc, #192]	; (3a90 <get_fat+0xf8>)
    39ce:	4798      	blx	r3
    39d0:	2800      	cmp	r0, #0
    39d2:	d002      	beq.n	39da <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    39d4:	2001      	movs	r0, #1
    39d6:	4240      	negs	r0, r0
    39d8:	e059      	b.n	3a8e <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    39da:	05f3      	lsls	r3, r6, #23
    39dc:	0ddb      	lsrs	r3, r3, #23
    39de:	18eb      	adds	r3, r5, r3
    39e0:	3330      	adds	r3, #48	; 0x30
    39e2:	781f      	ldrb	r7, [r3, #0]
    39e4:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    39e6:	0a71      	lsrs	r1, r6, #9
    39e8:	6a2b      	ldr	r3, [r5, #32]
    39ea:	469c      	mov	ip, r3
    39ec:	4461      	add	r1, ip
    39ee:	0028      	movs	r0, r5
    39f0:	4b27      	ldr	r3, [pc, #156]	; (3a90 <get_fat+0xf8>)
    39f2:	4798      	blx	r3
    39f4:	2800      	cmp	r0, #0
    39f6:	d002      	beq.n	39fe <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    39f8:	2001      	movs	r0, #1
    39fa:	4240      	negs	r0, r0
    39fc:	e047      	b.n	3a8e <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    39fe:	05f6      	lsls	r6, r6, #23
    3a00:	0df6      	lsrs	r6, r6, #23
    3a02:	19ad      	adds	r5, r5, r6
    3a04:	3530      	adds	r5, #48	; 0x30
    3a06:	7828      	ldrb	r0, [r5, #0]
    3a08:	0200      	lsls	r0, r0, #8
    3a0a:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    3a0c:	07e3      	lsls	r3, r4, #31
    3a0e:	d501      	bpl.n	3a14 <get_fat+0x7c>
    3a10:	0900      	lsrs	r0, r0, #4
    3a12:	e03c      	b.n	3a8e <get_fat+0xf6>
    3a14:	0500      	lsls	r0, r0, #20
    3a16:	0d00      	lsrs	r0, r0, #20
    3a18:	e039      	b.n	3a8e <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    3a1a:	0a09      	lsrs	r1, r1, #8
    3a1c:	6a2b      	ldr	r3, [r5, #32]
    3a1e:	469c      	mov	ip, r3
    3a20:	4461      	add	r1, ip
    3a22:	0028      	movs	r0, r5
    3a24:	4b1a      	ldr	r3, [pc, #104]	; (3a90 <get_fat+0xf8>)
    3a26:	4798      	blx	r3
    3a28:	2800      	cmp	r0, #0
    3a2a:	d002      	beq.n	3a32 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3a2c:	2001      	movs	r0, #1
    3a2e:	4240      	negs	r0, r0
    3a30:	e02d      	b.n	3a8e <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    3a32:	0064      	lsls	r4, r4, #1
    3a34:	23ff      	movs	r3, #255	; 0xff
    3a36:	005b      	lsls	r3, r3, #1
    3a38:	401c      	ands	r4, r3
		return LD_WORD(p);
    3a3a:	192d      	adds	r5, r5, r4
    3a3c:	3530      	adds	r5, #48	; 0x30
    3a3e:	786b      	ldrb	r3, [r5, #1]
    3a40:	021b      	lsls	r3, r3, #8
    3a42:	7828      	ldrb	r0, [r5, #0]
    3a44:	4318      	orrs	r0, r3
    3a46:	e022      	b.n	3a8e <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    3a48:	09c9      	lsrs	r1, r1, #7
    3a4a:	6a2b      	ldr	r3, [r5, #32]
    3a4c:	469c      	mov	ip, r3
    3a4e:	4461      	add	r1, ip
    3a50:	0028      	movs	r0, r5
    3a52:	4b0f      	ldr	r3, [pc, #60]	; (3a90 <get_fat+0xf8>)
    3a54:	4798      	blx	r3
    3a56:	2800      	cmp	r0, #0
    3a58:	d002      	beq.n	3a60 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3a5a:	2001      	movs	r0, #1
    3a5c:	4240      	negs	r0, r0
    3a5e:	e016      	b.n	3a8e <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    3a60:	00a4      	lsls	r4, r4, #2
    3a62:	23fe      	movs	r3, #254	; 0xfe
    3a64:	005b      	lsls	r3, r3, #1
    3a66:	401c      	ands	r4, r3
    3a68:	0023      	movs	r3, r4
    3a6a:	3330      	adds	r3, #48	; 0x30
    3a6c:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    3a6e:	78d8      	ldrb	r0, [r3, #3]
    3a70:	0600      	lsls	r0, r0, #24
    3a72:	789a      	ldrb	r2, [r3, #2]
    3a74:	0412      	lsls	r2, r2, #16
    3a76:	4310      	orrs	r0, r2
    3a78:	192c      	adds	r4, r5, r4
    3a7a:	3430      	adds	r4, #48	; 0x30
    3a7c:	7822      	ldrb	r2, [r4, #0]
    3a7e:	4310      	orrs	r0, r2
    3a80:	785b      	ldrb	r3, [r3, #1]
    3a82:	021b      	lsls	r3, r3, #8
    3a84:	4318      	orrs	r0, r3
    3a86:	0100      	lsls	r0, r0, #4
    3a88:	0900      	lsrs	r0, r0, #4
    3a8a:	e000      	b.n	3a8e <get_fat+0xf6>
		return 1;
    3a8c:	2001      	movs	r0, #1
}
    3a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a90:	000038f9 	.word	0x000038f9

00003a94 <dir_sdi>:
{
    3a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a96:	0004      	movs	r4, r0
    3a98:	000d      	movs	r5, r1
	dj->index = idx;
    3a9a:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    3a9c:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    3a9e:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    3aa0:	2901      	cmp	r1, #1
    3aa2:	d003      	beq.n	3aac <dir_sdi+0x18>
    3aa4:	6823      	ldr	r3, [r4, #0]
    3aa6:	699a      	ldr	r2, [r3, #24]
    3aa8:	4291      	cmp	r1, r2
    3aaa:	d300      	bcc.n	3aae <dir_sdi+0x1a>
}
    3aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    3aae:	2900      	cmp	r1, #0
    3ab0:	d119      	bne.n	3ae6 <dir_sdi+0x52>
    3ab2:	781a      	ldrb	r2, [r3, #0]
    3ab4:	2a03      	cmp	r2, #3
    3ab6:	d013      	beq.n	3ae0 <dir_sdi+0x4c>
		dj->clust = clst;
    3ab8:	2200      	movs	r2, #0
    3aba:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    3abc:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    3abe:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    3ac0:	42aa      	cmp	r2, r5
    3ac2:	d9f3      	bls.n	3aac <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    3ac4:	092a      	lsrs	r2, r5, #4
    3ac6:	b292      	uxth	r2, r2
    3ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3aca:	189b      	adds	r3, r3, r2
    3acc:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    3ace:	6823      	ldr	r3, [r4, #0]
    3ad0:	3330      	adds	r3, #48	; 0x30
    3ad2:	220f      	movs	r2, #15
    3ad4:	4015      	ands	r5, r2
    3ad6:	016d      	lsls	r5, r5, #5
    3ad8:	195d      	adds	r5, r3, r5
    3ada:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    3adc:	2000      	movs	r0, #0
    3ade:	e7e5      	b.n	3aac <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    3ae0:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    3ae2:	2900      	cmp	r1, #0
    3ae4:	d0e8      	beq.n	3ab8 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    3ae6:	789e      	ldrb	r6, [r3, #2]
    3ae8:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    3aea:	42b5      	cmp	r5, r6
    3aec:	d313      	bcc.n	3b16 <dir_sdi+0x82>
    3aee:	1bad      	subs	r5, r5, r6
    3af0:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    3af2:	4f10      	ldr	r7, [pc, #64]	; (3b34 <dir_sdi+0xa0>)
    3af4:	e000      	b.n	3af8 <dir_sdi+0x64>
    3af6:	001d      	movs	r5, r3
    3af8:	6820      	ldr	r0, [r4, #0]
    3afa:	47b8      	blx	r7
    3afc:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3afe:	1c43      	adds	r3, r0, #1
    3b00:	d012      	beq.n	3b28 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    3b02:	2801      	cmp	r0, #1
    3b04:	d912      	bls.n	3b2c <dir_sdi+0x98>
    3b06:	6823      	ldr	r3, [r4, #0]
    3b08:	699b      	ldr	r3, [r3, #24]
    3b0a:	4298      	cmp	r0, r3
    3b0c:	d210      	bcs.n	3b30 <dir_sdi+0x9c>
    3b0e:	1bab      	subs	r3, r5, r6
    3b10:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    3b12:	42b5      	cmp	r5, r6
    3b14:	d2ef      	bcs.n	3af6 <dir_sdi+0x62>
		dj->clust = clst;
    3b16:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    3b18:	6820      	ldr	r0, [r4, #0]
    3b1a:	4b07      	ldr	r3, [pc, #28]	; (3b38 <dir_sdi+0xa4>)
    3b1c:	4798      	blx	r3
    3b1e:	092b      	lsrs	r3, r5, #4
    3b20:	b29b      	uxth	r3, r3
    3b22:	1818      	adds	r0, r3, r0
    3b24:	6120      	str	r0, [r4, #16]
    3b26:	e7d2      	b.n	3ace <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3b28:	2001      	movs	r0, #1
    3b2a:	e7bf      	b.n	3aac <dir_sdi+0x18>
				return FR_INT_ERR;
    3b2c:	2002      	movs	r0, #2
    3b2e:	e7bd      	b.n	3aac <dir_sdi+0x18>
    3b30:	2002      	movs	r0, #2
    3b32:	e7bb      	b.n	3aac <dir_sdi+0x18>
    3b34:	00003999 	.word	0x00003999
    3b38:	0000343f 	.word	0x0000343f

00003b3c <put_fat>:
{
    3b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b3e:	46c6      	mov	lr, r8
    3b40:	b500      	push	{lr}
    3b42:	0007      	movs	r7, r0
    3b44:	000c      	movs	r4, r1
    3b46:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    3b48:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    3b4a:	2901      	cmp	r1, #1
    3b4c:	d902      	bls.n	3b54 <put_fat+0x18>
    3b4e:	6983      	ldr	r3, [r0, #24]
    3b50:	4299      	cmp	r1, r3
    3b52:	d303      	bcc.n	3b5c <put_fat+0x20>
}
    3b54:	0028      	movs	r0, r5
    3b56:	bc04      	pop	{r2}
    3b58:	4690      	mov	r8, r2
    3b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    3b5c:	7803      	ldrb	r3, [r0, #0]
    3b5e:	2b02      	cmp	r3, #2
    3b60:	d053      	beq.n	3c0a <put_fat+0xce>
    3b62:	2b03      	cmp	r3, #3
    3b64:	d063      	beq.n	3c2e <put_fat+0xf2>
			res = FR_INT_ERR;
    3b66:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    3b68:	2b01      	cmp	r3, #1
    3b6a:	d002      	beq.n	3b72 <put_fat+0x36>
		fs->wflag = 1;
    3b6c:	2301      	movs	r3, #1
    3b6e:	713b      	strb	r3, [r7, #4]
    3b70:	e7f0      	b.n	3b54 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    3b72:	084b      	lsrs	r3, r1, #1
    3b74:	4698      	mov	r8, r3
    3b76:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3b78:	4643      	mov	r3, r8
    3b7a:	0a59      	lsrs	r1, r3, #9
    3b7c:	6a03      	ldr	r3, [r0, #32]
    3b7e:	469c      	mov	ip, r3
    3b80:	4461      	add	r1, ip
    3b82:	4b3b      	ldr	r3, [pc, #236]	; (3c70 <put_fat+0x134>)
    3b84:	4798      	blx	r3
    3b86:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3b88:	d1f0      	bne.n	3b6c <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    3b8a:	4643      	mov	r3, r8
    3b8c:	05db      	lsls	r3, r3, #23
    3b8e:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    3b90:	07e2      	lsls	r2, r4, #31
    3b92:	d51f      	bpl.n	3bd4 <put_fat+0x98>
    3b94:	18fb      	adds	r3, r7, r3
    3b96:	3330      	adds	r3, #48	; 0x30
    3b98:	7819      	ldrb	r1, [r3, #0]
    3b9a:	220f      	movs	r2, #15
    3b9c:	400a      	ands	r2, r1
    3b9e:	0131      	lsls	r1, r6, #4
    3ba0:	20ff      	movs	r0, #255	; 0xff
    3ba2:	0100      	lsls	r0, r0, #4
    3ba4:	4001      	ands	r1, r0
    3ba6:	430a      	orrs	r2, r1
    3ba8:	701a      	strb	r2, [r3, #0]
			bc++;
    3baa:	4644      	mov	r4, r8
    3bac:	3401      	adds	r4, #1
			fs->wflag = 1;
    3bae:	2301      	movs	r3, #1
    3bb0:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3bb2:	0a61      	lsrs	r1, r4, #9
    3bb4:	6a3b      	ldr	r3, [r7, #32]
    3bb6:	469c      	mov	ip, r3
    3bb8:	4461      	add	r1, ip
    3bba:	0038      	movs	r0, r7
    3bbc:	4b2c      	ldr	r3, [pc, #176]	; (3c70 <put_fat+0x134>)
    3bbe:	4798      	blx	r3
			if (res != FR_OK) break;
    3bc0:	2800      	cmp	r0, #0
    3bc2:	d151      	bne.n	3c68 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    3bc4:	05e4      	lsls	r4, r4, #23
    3bc6:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    3bc8:	0936      	lsrs	r6, r6, #4
    3bca:	b2f6      	uxtb	r6, r6
    3bcc:	193c      	adds	r4, r7, r4
    3bce:	3430      	adds	r4, #48	; 0x30
    3bd0:	7026      	strb	r6, [r4, #0]
			break;
    3bd2:	e7cb      	b.n	3b6c <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    3bd4:	18fb      	adds	r3, r7, r3
    3bd6:	3330      	adds	r3, #48	; 0x30
    3bd8:	701e      	strb	r6, [r3, #0]
			bc++;
    3bda:	4644      	mov	r4, r8
    3bdc:	3401      	adds	r4, #1
			fs->wflag = 1;
    3bde:	2301      	movs	r3, #1
    3be0:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3be2:	0a61      	lsrs	r1, r4, #9
    3be4:	6a3b      	ldr	r3, [r7, #32]
    3be6:	469c      	mov	ip, r3
    3be8:	4461      	add	r1, ip
    3bea:	0038      	movs	r0, r7
    3bec:	4b20      	ldr	r3, [pc, #128]	; (3c70 <put_fat+0x134>)
    3bee:	4798      	blx	r3
			if (res != FR_OK) break;
    3bf0:	2800      	cmp	r0, #0
    3bf2:	d13b      	bne.n	3c6c <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    3bf4:	05e4      	lsls	r4, r4, #23
    3bf6:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    3bf8:	193b      	adds	r3, r7, r4
    3bfa:	3330      	adds	r3, #48	; 0x30
    3bfc:	781b      	ldrb	r3, [r3, #0]
    3bfe:	220f      	movs	r2, #15
    3c00:	4393      	bics	r3, r2
    3c02:	0536      	lsls	r6, r6, #20
    3c04:	0f36      	lsrs	r6, r6, #28
    3c06:	431e      	orrs	r6, r3
    3c08:	e7e0      	b.n	3bcc <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    3c0a:	0a09      	lsrs	r1, r1, #8
    3c0c:	6a03      	ldr	r3, [r0, #32]
    3c0e:	469c      	mov	ip, r3
    3c10:	4461      	add	r1, ip
    3c12:	4b17      	ldr	r3, [pc, #92]	; (3c70 <put_fat+0x134>)
    3c14:	4798      	blx	r3
    3c16:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3c18:	d1a8      	bne.n	3b6c <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    3c1a:	0063      	lsls	r3, r4, #1
    3c1c:	24ff      	movs	r4, #255	; 0xff
    3c1e:	0064      	lsls	r4, r4, #1
    3c20:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    3c22:	18fb      	adds	r3, r7, r3
    3c24:	3330      	adds	r3, #48	; 0x30
    3c26:	701e      	strb	r6, [r3, #0]
    3c28:	0a36      	lsrs	r6, r6, #8
    3c2a:	705e      	strb	r6, [r3, #1]
			break;
    3c2c:	e79e      	b.n	3b6c <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    3c2e:	09c9      	lsrs	r1, r1, #7
    3c30:	6a03      	ldr	r3, [r0, #32]
    3c32:	469c      	mov	ip, r3
    3c34:	4461      	add	r1, ip
    3c36:	4b0e      	ldr	r3, [pc, #56]	; (3c70 <put_fat+0x134>)
    3c38:	4798      	blx	r3
    3c3a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3c3c:	d196      	bne.n	3b6c <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    3c3e:	00a4      	lsls	r4, r4, #2
    3c40:	23fe      	movs	r3, #254	; 0xfe
    3c42:	005b      	lsls	r3, r3, #1
    3c44:	401c      	ands	r4, r3
    3c46:	0022      	movs	r2, r4
    3c48:	3230      	adds	r2, #48	; 0x30
    3c4a:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    3c4c:	78d3      	ldrb	r3, [r2, #3]
    3c4e:	193c      	adds	r4, r7, r4
    3c50:	3430      	adds	r4, #48	; 0x30
    3c52:	091b      	lsrs	r3, r3, #4
    3c54:	071b      	lsls	r3, r3, #28
    3c56:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    3c58:	7026      	strb	r6, [r4, #0]
    3c5a:	0a33      	lsrs	r3, r6, #8
    3c5c:	7053      	strb	r3, [r2, #1]
    3c5e:	0c33      	lsrs	r3, r6, #16
    3c60:	7093      	strb	r3, [r2, #2]
    3c62:	0e36      	lsrs	r6, r6, #24
    3c64:	70d6      	strb	r6, [r2, #3]
			break;
    3c66:	e781      	b.n	3b6c <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3c68:	0005      	movs	r5, r0
    3c6a:	e77f      	b.n	3b6c <put_fat+0x30>
    3c6c:	0005      	movs	r5, r0
    3c6e:	e77d      	b.n	3b6c <put_fat+0x30>
    3c70:	000038f9 	.word	0x000038f9

00003c74 <create_chain>:
{
    3c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c76:	46c6      	mov	lr, r8
    3c78:	b500      	push	{lr}
    3c7a:	0005      	movs	r5, r0
    3c7c:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    3c7e:	2900      	cmp	r1, #0
    3c80:	d107      	bne.n	3c92 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    3c82:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    3c84:	2e00      	cmp	r6, #0
    3c86:	d00d      	beq.n	3ca4 <create_chain+0x30>
    3c88:	6983      	ldr	r3, [r0, #24]
    3c8a:	429e      	cmp	r6, r3
    3c8c:	d30b      	bcc.n	3ca6 <create_chain+0x32>
    3c8e:	2601      	movs	r6, #1
    3c90:	e009      	b.n	3ca6 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    3c92:	4b26      	ldr	r3, [pc, #152]	; (3d2c <create_chain+0xb8>)
    3c94:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    3c96:	2801      	cmp	r0, #1
    3c98:	d93d      	bls.n	3d16 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    3c9a:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    3c9c:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    3c9e:	4298      	cmp	r0, r3
    3ca0:	d201      	bcs.n	3ca6 <create_chain+0x32>
    3ca2:	e03d      	b.n	3d20 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    3ca4:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    3ca6:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    3ca8:	4f20      	ldr	r7, [pc, #128]	; (3d2c <create_chain+0xb8>)
    3caa:	e00a      	b.n	3cc2 <create_chain+0x4e>
    3cac:	0021      	movs	r1, r4
    3cae:	0028      	movs	r0, r5
    3cb0:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    3cb2:	2800      	cmp	r0, #0
    3cb4:	d00d      	beq.n	3cd2 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    3cb6:	1c43      	adds	r3, r0, #1
    3cb8:	d032      	beq.n	3d20 <create_chain+0xac>
    3cba:	2801      	cmp	r0, #1
    3cbc:	d030      	beq.n	3d20 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    3cbe:	42b4      	cmp	r4, r6
    3cc0:	d02d      	beq.n	3d1e <create_chain+0xaa>
		ncl++;							/* Next cluster */
    3cc2:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    3cc4:	69ab      	ldr	r3, [r5, #24]
    3cc6:	429c      	cmp	r4, r3
    3cc8:	d3f0      	bcc.n	3cac <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    3cca:	2e01      	cmp	r6, #1
    3ccc:	d925      	bls.n	3d1a <create_chain+0xa6>
			ncl = 2;
    3cce:	2402      	movs	r4, #2
    3cd0:	e7ec      	b.n	3cac <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    3cd2:	4a17      	ldr	r2, [pc, #92]	; (3d30 <create_chain+0xbc>)
    3cd4:	0021      	movs	r1, r4
    3cd6:	0028      	movs	r0, r5
    3cd8:	4b16      	ldr	r3, [pc, #88]	; (3d34 <create_chain+0xc0>)
    3cda:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    3cdc:	2800      	cmp	r0, #0
    3cde:	d113      	bne.n	3d08 <create_chain+0x94>
    3ce0:	4643      	mov	r3, r8
    3ce2:	2b00      	cmp	r3, #0
    3ce4:	d109      	bne.n	3cfa <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    3ce6:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    3ce8:	692b      	ldr	r3, [r5, #16]
    3cea:	1c5a      	adds	r2, r3, #1
    3cec:	d01b      	beq.n	3d26 <create_chain+0xb2>
			fs->free_clust--;
    3cee:	3b01      	subs	r3, #1
    3cf0:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    3cf2:	2301      	movs	r3, #1
    3cf4:	716b      	strb	r3, [r5, #5]
    3cf6:	0020      	movs	r0, r4
    3cf8:	e012      	b.n	3d20 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    3cfa:	0022      	movs	r2, r4
    3cfc:	4641      	mov	r1, r8
    3cfe:	0028      	movs	r0, r5
    3d00:	4b0c      	ldr	r3, [pc, #48]	; (3d34 <create_chain+0xc0>)
    3d02:	4798      	blx	r3
	if (res == FR_OK) {
    3d04:	2800      	cmp	r0, #0
    3d06:	d0ee      	beq.n	3ce6 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    3d08:	3801      	subs	r0, #1
    3d0a:	4242      	negs	r2, r0
    3d0c:	4142      	adcs	r2, r0
    3d0e:	4250      	negs	r0, r2
    3d10:	2301      	movs	r3, #1
    3d12:	4318      	orrs	r0, r3
    3d14:	e004      	b.n	3d20 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    3d16:	2001      	movs	r0, #1
    3d18:	e002      	b.n	3d20 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    3d1a:	2000      	movs	r0, #0
    3d1c:	e000      	b.n	3d20 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    3d1e:	2000      	movs	r0, #0
}
    3d20:	bc04      	pop	{r2}
    3d22:	4690      	mov	r8, r2
    3d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d26:	0020      	movs	r0, r4
    3d28:	e7fa      	b.n	3d20 <create_chain+0xac>
    3d2a:	46c0      	nop			; (mov r8, r8)
    3d2c:	00003999 	.word	0x00003999
    3d30:	0fffffff 	.word	0x0fffffff
    3d34:	00003b3d 	.word	0x00003b3d

00003d38 <remove_chain>:
{
    3d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d3a:	46ce      	mov	lr, r9
    3d3c:	4647      	mov	r7, r8
    3d3e:	b580      	push	{r7, lr}
    3d40:	0004      	movs	r4, r0
    3d42:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    3d44:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    3d46:	2901      	cmp	r1, #1
    3d48:	d902      	bls.n	3d50 <remove_chain+0x18>
    3d4a:	69a3      	ldr	r3, [r4, #24]
    3d4c:	4299      	cmp	r1, r3
    3d4e:	d303      	bcc.n	3d58 <remove_chain+0x20>
}
    3d50:	bc0c      	pop	{r2, r3}
    3d52:	4690      	mov	r8, r2
    3d54:	4699      	mov	r9, r3
    3d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    3d58:	4f13      	ldr	r7, [pc, #76]	; (3da8 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    3d5a:	4b14      	ldr	r3, [pc, #80]	; (3dac <remove_chain+0x74>)
    3d5c:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    3d5e:	2301      	movs	r3, #1
    3d60:	4699      	mov	r9, r3
    3d62:	e003      	b.n	3d6c <remove_chain+0x34>
    3d64:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    3d66:	69a3      	ldr	r3, [r4, #24]
    3d68:	42b3      	cmp	r3, r6
    3d6a:	d9f1      	bls.n	3d50 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    3d6c:	0029      	movs	r1, r5
    3d6e:	0020      	movs	r0, r4
    3d70:	47b8      	blx	r7
    3d72:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    3d74:	d011      	beq.n	3d9a <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    3d76:	2801      	cmp	r0, #1
    3d78:	d011      	beq.n	3d9e <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    3d7a:	1c43      	adds	r3, r0, #1
    3d7c:	d011      	beq.n	3da2 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    3d7e:	2200      	movs	r2, #0
    3d80:	0029      	movs	r1, r5
    3d82:	0020      	movs	r0, r4
    3d84:	47c0      	blx	r8
			if (res != FR_OK) break;
    3d86:	2800      	cmp	r0, #0
    3d88:	d1e2      	bne.n	3d50 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    3d8a:	6923      	ldr	r3, [r4, #16]
    3d8c:	1c5a      	adds	r2, r3, #1
    3d8e:	d0e9      	beq.n	3d64 <remove_chain+0x2c>
				fs->free_clust++;
    3d90:	3301      	adds	r3, #1
    3d92:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    3d94:	464b      	mov	r3, r9
    3d96:	7163      	strb	r3, [r4, #5]
    3d98:	e7e4      	b.n	3d64 <remove_chain+0x2c>
    3d9a:	2000      	movs	r0, #0
    3d9c:	e7d8      	b.n	3d50 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    3d9e:	2002      	movs	r0, #2
    3da0:	e7d6      	b.n	3d50 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    3da2:	2001      	movs	r0, #1
    3da4:	e7d4      	b.n	3d50 <remove_chain+0x18>
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	00003999 	.word	0x00003999
    3dac:	00003b3d 	.word	0x00003b3d

00003db0 <dir_next>:
{
    3db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3db2:	46d6      	mov	lr, sl
    3db4:	4647      	mov	r7, r8
    3db6:	b580      	push	{r7, lr}
    3db8:	0006      	movs	r6, r0
    3dba:	000d      	movs	r5, r1
	i = dj->index + 1;
    3dbc:	88c4      	ldrh	r4, [r0, #6]
    3dbe:	3401      	adds	r4, #1
    3dc0:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    3dc2:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    3dc4:	2c00      	cmp	r4, #0
    3dc6:	d103      	bne.n	3dd0 <dir_next+0x20>
}
    3dc8:	bc0c      	pop	{r2, r3}
    3dca:	4690      	mov	r8, r2
    3dcc:	469a      	mov	sl, r3
    3dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    3dd0:	6933      	ldr	r3, [r6, #16]
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d0f8      	beq.n	3dc8 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    3dd6:	270f      	movs	r7, #15
    3dd8:	4027      	ands	r7, r4
    3dda:	d10f      	bne.n	3dfc <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    3ddc:	3301      	adds	r3, #1
    3dde:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    3de0:	68f1      	ldr	r1, [r6, #12]
    3de2:	2900      	cmp	r1, #0
    3de4:	d104      	bne.n	3df0 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    3de6:	6833      	ldr	r3, [r6, #0]
    3de8:	891b      	ldrh	r3, [r3, #8]
    3dea:	42a3      	cmp	r3, r4
    3dec:	d9ec      	bls.n	3dc8 <dir_next+0x18>
    3dee:	e005      	b.n	3dfc <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    3df0:	6830      	ldr	r0, [r6, #0]
    3df2:	7883      	ldrb	r3, [r0, #2]
    3df4:	3b01      	subs	r3, #1
    3df6:	0922      	lsrs	r2, r4, #4
    3df8:	421a      	tst	r2, r3
    3dfa:	d007      	beq.n	3e0c <dir_next+0x5c>
	dj->index = i;
    3dfc:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    3dfe:	6833      	ldr	r3, [r6, #0]
    3e00:	3330      	adds	r3, #48	; 0x30
    3e02:	017f      	lsls	r7, r7, #5
    3e04:	19df      	adds	r7, r3, r7
    3e06:	6177      	str	r7, [r6, #20]
	return FR_OK;
    3e08:	2000      	movs	r0, #0
    3e0a:	e7dd      	b.n	3dc8 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    3e0c:	4b2c      	ldr	r3, [pc, #176]	; (3ec0 <dir_next+0x110>)
    3e0e:	4798      	blx	r3
    3e10:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    3e12:	2002      	movs	r0, #2
    3e14:	4643      	mov	r3, r8
    3e16:	2b01      	cmp	r3, #1
    3e18:	d9d6      	bls.n	3dc8 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    3e1a:	3301      	adds	r3, #1
    3e1c:	d04b      	beq.n	3eb6 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    3e1e:	6833      	ldr	r3, [r6, #0]
    3e20:	699a      	ldr	r2, [r3, #24]
    3e22:	4590      	cmp	r8, r2
    3e24:	d33f      	bcc.n	3ea6 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    3e26:	3002      	adds	r0, #2
    3e28:	2d00      	cmp	r5, #0
    3e2a:	d0cd      	beq.n	3dc8 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    3e2c:	68f1      	ldr	r1, [r6, #12]
    3e2e:	0018      	movs	r0, r3
    3e30:	4b24      	ldr	r3, [pc, #144]	; (3ec4 <dir_next+0x114>)
    3e32:	4798      	blx	r3
    3e34:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    3e36:	2007      	movs	r0, #7
    3e38:	4643      	mov	r3, r8
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	d0c4      	beq.n	3dc8 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    3e3e:	3805      	subs	r0, #5
    3e40:	2b01      	cmp	r3, #1
    3e42:	d0c1      	beq.n	3dc8 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    3e44:	3801      	subs	r0, #1
    3e46:	3301      	adds	r3, #1
    3e48:	d0be      	beq.n	3dc8 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    3e4a:	2100      	movs	r1, #0
    3e4c:	6830      	ldr	r0, [r6, #0]
    3e4e:	4b1e      	ldr	r3, [pc, #120]	; (3ec8 <dir_next+0x118>)
    3e50:	4798      	blx	r3
    3e52:	0003      	movs	r3, r0
    3e54:	2001      	movs	r0, #1
    3e56:	2b00      	cmp	r3, #0
    3e58:	d1b6      	bne.n	3dc8 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    3e5a:	6830      	ldr	r0, [r6, #0]
    3e5c:	3030      	adds	r0, #48	; 0x30
    3e5e:	2280      	movs	r2, #128	; 0x80
    3e60:	0092      	lsls	r2, r2, #2
    3e62:	2100      	movs	r1, #0
    3e64:	4b19      	ldr	r3, [pc, #100]	; (3ecc <dir_next+0x11c>)
    3e66:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    3e68:	6835      	ldr	r5, [r6, #0]
    3e6a:	4641      	mov	r1, r8
    3e6c:	0028      	movs	r0, r5
    3e6e:	4b18      	ldr	r3, [pc, #96]	; (3ed0 <dir_next+0x120>)
    3e70:	4798      	blx	r3
    3e72:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    3e74:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    3e76:	2301      	movs	r3, #1
    3e78:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    3e7a:	6833      	ldr	r3, [r6, #0]
    3e7c:	789a      	ldrb	r2, [r3, #2]
    3e7e:	42aa      	cmp	r2, r5
    3e80:	d90e      	bls.n	3ea0 <dir_next+0xf0>
						dj->fs->wflag = 1;
    3e82:	4652      	mov	r2, sl
    3e84:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    3e86:	2100      	movs	r1, #0
    3e88:	6830      	ldr	r0, [r6, #0]
    3e8a:	4b0f      	ldr	r3, [pc, #60]	; (3ec8 <dir_next+0x118>)
    3e8c:	4798      	blx	r3
    3e8e:	2800      	cmp	r0, #0
    3e90:	d113      	bne.n	3eba <dir_next+0x10a>
						dj->fs->winsect++;
    3e92:	6832      	ldr	r2, [r6, #0]
    3e94:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3e96:	3301      	adds	r3, #1
    3e98:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    3e9a:	3501      	adds	r5, #1
    3e9c:	b2ed      	uxtb	r5, r5
    3e9e:	e7ec      	b.n	3e7a <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    3ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ea2:	1b52      	subs	r2, r2, r5
    3ea4:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    3ea6:	4643      	mov	r3, r8
    3ea8:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    3eaa:	4641      	mov	r1, r8
    3eac:	6830      	ldr	r0, [r6, #0]
    3eae:	4b08      	ldr	r3, [pc, #32]	; (3ed0 <dir_next+0x120>)
    3eb0:	4798      	blx	r3
    3eb2:	6130      	str	r0, [r6, #16]
    3eb4:	e7a2      	b.n	3dfc <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    3eb6:	2001      	movs	r0, #1
    3eb8:	e786      	b.n	3dc8 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    3eba:	2001      	movs	r0, #1
    3ebc:	e784      	b.n	3dc8 <dir_next+0x18>
    3ebe:	46c0      	nop			; (mov r8, r8)
    3ec0:	00003999 	.word	0x00003999
    3ec4:	00003c75 	.word	0x00003c75
    3ec8:	000038f9 	.word	0x000038f9
    3ecc:	0000342d 	.word	0x0000342d
    3ed0:	0000343f 	.word	0x0000343f

00003ed4 <dir_find>:
{
    3ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ed6:	46de      	mov	lr, fp
    3ed8:	4657      	mov	r7, sl
    3eda:	464e      	mov	r6, r9
    3edc:	4645      	mov	r5, r8
    3ede:	b5e0      	push	{r5, r6, r7, lr}
    3ee0:	b083      	sub	sp, #12
    3ee2:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    3ee4:	2100      	movs	r1, #0
    3ee6:	4b5a      	ldr	r3, [pc, #360]	; (4050 <dir_find+0x17c>)
    3ee8:	4798      	blx	r3
    3eea:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    3eec:	d000      	beq.n	3ef0 <dir_find+0x1c>
    3eee:	e09e      	b.n	402e <dir_find+0x15a>
    3ef0:	23ff      	movs	r3, #255	; 0xff
    3ef2:	4699      	mov	r9, r3
    3ef4:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    3ef6:	4b57      	ldr	r3, [pc, #348]	; (4054 <dir_find+0x180>)
    3ef8:	469b      	mov	fp, r3
    3efa:	e01b      	b.n	3f34 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    3efc:	2b0f      	cmp	r3, #15
    3efe:	d030      	beq.n	3f62 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    3f00:	4653      	mov	r3, sl
    3f02:	2b00      	cmp	r3, #0
    3f04:	d105      	bne.n	3f12 <dir_find+0x3e>
    3f06:	0020      	movs	r0, r4
    3f08:	4b53      	ldr	r3, [pc, #332]	; (4058 <dir_find+0x184>)
    3f0a:	4798      	blx	r3
    3f0c:	4581      	cmp	r9, r0
    3f0e:	d100      	bne.n	3f12 <dir_find+0x3e>
    3f10:	e08d      	b.n	402e <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    3f12:	2301      	movs	r3, #1
    3f14:	425b      	negs	r3, r3
    3f16:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    3f18:	69a8      	ldr	r0, [r5, #24]
    3f1a:	7ac3      	ldrb	r3, [r0, #11]
    3f1c:	07db      	lsls	r3, r3, #31
    3f1e:	d400      	bmi.n	3f22 <dir_find+0x4e>
    3f20:	e07d      	b.n	401e <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    3f22:	23ff      	movs	r3, #255	; 0xff
    3f24:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    3f26:	2100      	movs	r1, #0
    3f28:	0028      	movs	r0, r5
    3f2a:	4b4c      	ldr	r3, [pc, #304]	; (405c <dir_find+0x188>)
    3f2c:	4798      	blx	r3
    3f2e:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    3f30:	d000      	beq.n	3f34 <dir_find+0x60>
    3f32:	e07c      	b.n	402e <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    3f34:	6929      	ldr	r1, [r5, #16]
    3f36:	6828      	ldr	r0, [r5, #0]
    3f38:	47d8      	blx	fp
    3f3a:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    3f3c:	d177      	bne.n	402e <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    3f3e:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    3f40:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    3f42:	2e00      	cmp	r6, #0
    3f44:	d100      	bne.n	3f48 <dir_find+0x74>
    3f46:	e080      	b.n	404a <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    3f48:	7ae2      	ldrb	r2, [r4, #11]
    3f4a:	233f      	movs	r3, #63	; 0x3f
    3f4c:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    3f4e:	2ee5      	cmp	r6, #229	; 0xe5
    3f50:	d100      	bne.n	3f54 <dir_find+0x80>
    3f52:	e077      	b.n	4044 <dir_find+0x170>
    3f54:	0712      	lsls	r2, r2, #28
    3f56:	d5d1      	bpl.n	3efc <dir_find+0x28>
    3f58:	2b0f      	cmp	r3, #15
    3f5a:	d002      	beq.n	3f62 <dir_find+0x8e>
			ord = 0xFF;
    3f5c:	23ff      	movs	r3, #255	; 0xff
    3f5e:	469a      	mov	sl, r3
    3f60:	e7e1      	b.n	3f26 <dir_find+0x52>
				if (dj->lfn) {
    3f62:	69ef      	ldr	r7, [r5, #28]
    3f64:	2f00      	cmp	r7, #0
    3f66:	d0de      	beq.n	3f26 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    3f68:	0673      	lsls	r3, r6, #25
    3f6a:	d518      	bpl.n	3f9e <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    3f6c:	7b63      	ldrb	r3, [r4, #13]
    3f6e:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    3f70:	2340      	movs	r3, #64	; 0x40
    3f72:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    3f74:	88eb      	ldrh	r3, [r5, #6]
    3f76:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    3f78:	7b63      	ldrb	r3, [r4, #13]
    3f7a:	9300      	str	r3, [sp, #0]
    3f7c:	22ff      	movs	r2, #255	; 0xff
    3f7e:	4692      	mov	sl, r2
    3f80:	454b      	cmp	r3, r9
    3f82:	d1d0      	bne.n	3f26 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    3f84:	7823      	ldrb	r3, [r4, #0]
    3f86:	3abf      	subs	r2, #191	; 0xbf
    3f88:	4393      	bics	r3, r2
    3f8a:	3b01      	subs	r3, #1
    3f8c:	005a      	lsls	r2, r3, #1
    3f8e:	18d2      	adds	r2, r2, r3
    3f90:	0092      	lsls	r2, r2, #2
    3f92:	4692      	mov	sl, r2
    3f94:	449a      	add	sl, r3
	s = 0; wc = 1;
    3f96:	2201      	movs	r2, #1
    3f98:	2300      	movs	r3, #0
    3f9a:	4699      	mov	r9, r3
    3f9c:	e01d      	b.n	3fda <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    3f9e:	45b2      	cmp	sl, r6
    3fa0:	d0ea      	beq.n	3f78 <dir_find+0xa4>
    3fa2:	23ff      	movs	r3, #255	; 0xff
    3fa4:	469a      	mov	sl, r3
    3fa6:	e7be      	b.n	3f26 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    3fa8:	4b2d      	ldr	r3, [pc, #180]	; (4060 <dir_find+0x18c>)
    3faa:	4798      	blx	r3
    3fac:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    3fae:	4653      	mov	r3, sl
    3fb0:	2bfe      	cmp	r3, #254	; 0xfe
    3fb2:	d81f      	bhi.n	3ff4 <dir_find+0x120>
    3fb4:	2301      	movs	r3, #1
    3fb6:	4453      	add	r3, sl
    3fb8:	4698      	mov	r8, r3
    3fba:	4653      	mov	r3, sl
    3fbc:	005b      	lsls	r3, r3, #1
    3fbe:	5bd8      	ldrh	r0, [r3, r7]
    3fc0:	4b27      	ldr	r3, [pc, #156]	; (4060 <dir_find+0x18c>)
    3fc2:	4798      	blx	r3
    3fc4:	0002      	movs	r2, r0
    3fc6:	9b01      	ldr	r3, [sp, #4]
    3fc8:	4283      	cmp	r3, r0
    3fca:	d113      	bne.n	3ff4 <dir_find+0x120>
    3fcc:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    3fce:	2301      	movs	r3, #1
    3fd0:	469c      	mov	ip, r3
    3fd2:	44e1      	add	r9, ip
    3fd4:	464b      	mov	r3, r9
    3fd6:	2b0d      	cmp	r3, #13
    3fd8:	d011      	beq.n	3ffe <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    3fda:	4b22      	ldr	r3, [pc, #136]	; (4064 <dir_find+0x190>)
    3fdc:	4649      	mov	r1, r9
    3fde:	5cc9      	ldrb	r1, [r1, r3]
    3fe0:	1863      	adds	r3, r4, r1
    3fe2:	785b      	ldrb	r3, [r3, #1]
    3fe4:	021b      	lsls	r3, r3, #8
    3fe6:	5c60      	ldrb	r0, [r4, r1]
    3fe8:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    3fea:	2a00      	cmp	r2, #0
    3fec:	d1dc      	bne.n	3fa8 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    3fee:	4b1e      	ldr	r3, [pc, #120]	; (4068 <dir_find+0x194>)
    3ff0:	4298      	cmp	r0, r3
    3ff2:	d0ec      	beq.n	3fce <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    3ff4:	9b00      	ldr	r3, [sp, #0]
    3ff6:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    3ff8:	23ff      	movs	r3, #255	; 0xff
    3ffa:	469a      	mov	sl, r3
    3ffc:	e793      	b.n	3f26 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    3ffe:	7823      	ldrb	r3, [r4, #0]
    4000:	065b      	lsls	r3, r3, #25
    4002:	d506      	bpl.n	4012 <dir_find+0x13e>
    4004:	2a00      	cmp	r2, #0
    4006:	d004      	beq.n	4012 <dir_find+0x13e>
    4008:	4653      	mov	r3, sl
    400a:	005b      	lsls	r3, r3, #1
    400c:	5bdb      	ldrh	r3, [r3, r7]
    400e:	2b00      	cmp	r3, #0
    4010:	d1f0      	bne.n	3ff4 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4012:	3e01      	subs	r6, #1
    4014:	b2f3      	uxtb	r3, r6
    4016:	469a      	mov	sl, r3
    4018:	9b00      	ldr	r3, [sp, #0]
    401a:	4699      	mov	r9, r3
    401c:	e783      	b.n	3f26 <dir_find+0x52>
    401e:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    4020:	5ce1      	ldrb	r1, [r4, r3]
    4022:	5cc2      	ldrb	r2, [r0, r3]
    4024:	4291      	cmp	r1, r2
    4026:	d10a      	bne.n	403e <dir_find+0x16a>
    4028:	3301      	adds	r3, #1
    402a:	2b0b      	cmp	r3, #11
    402c:	d1f8      	bne.n	4020 <dir_find+0x14c>
}
    402e:	0038      	movs	r0, r7
    4030:	b003      	add	sp, #12
    4032:	bc3c      	pop	{r2, r3, r4, r5}
    4034:	4690      	mov	r8, r2
    4036:	4699      	mov	r9, r3
    4038:	46a2      	mov	sl, r4
    403a:	46ab      	mov	fp, r5
    403c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    403e:	23ff      	movs	r3, #255	; 0xff
    4040:	469a      	mov	sl, r3
    4042:	e770      	b.n	3f26 <dir_find+0x52>
			ord = 0xFF;
    4044:	23ff      	movs	r3, #255	; 0xff
    4046:	469a      	mov	sl, r3
    4048:	e76d      	b.n	3f26 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    404a:	2704      	movs	r7, #4
    404c:	e7ef      	b.n	402e <dir_find+0x15a>
    404e:	46c0      	nop			; (mov r8, r8)
    4050:	00003a95 	.word	0x00003a95
    4054:	000038f9 	.word	0x000038f9
    4058:	00003457 	.word	0x00003457
    405c:	00003db1 	.word	0x00003db1
    4060:	00004cbd 	.word	0x00004cbd
    4064:	00005418 	.word	0x00005418
    4068:	0000ffff 	.word	0x0000ffff

0000406c <dir_register>:
{
    406c:	b5f0      	push	{r4, r5, r6, r7, lr}
    406e:	46de      	mov	lr, fp
    4070:	4657      	mov	r7, sl
    4072:	464e      	mov	r6, r9
    4074:	4645      	mov	r5, r8
    4076:	b5e0      	push	{r5, r6, r7, lr}
    4078:	b089      	sub	sp, #36	; 0x24
    407a:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    407c:	6987      	ldr	r7, [r0, #24]
    407e:	69c3      	ldr	r3, [r0, #28]
    4080:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    4082:	ad05      	add	r5, sp, #20
    4084:	220c      	movs	r2, #12
    4086:	0039      	movs	r1, r7
    4088:	0028      	movs	r0, r5
    408a:	4ba7      	ldr	r3, [pc, #668]	; (4328 <dir_register+0x2bc>)
    408c:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    408e:	7aeb      	ldrb	r3, [r5, #11]
    4090:	07db      	lsls	r3, r3, #31
    4092:	d400      	bmi.n	4096 <dir_register+0x2a>
    4094:	e070      	b.n	4178 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    4096:	2300      	movs	r3, #0
    4098:	72fb      	strb	r3, [r7, #11]
    409a:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    409c:	220b      	movs	r2, #11
    409e:	a905      	add	r1, sp, #20
    40a0:	0038      	movs	r0, r7
    40a2:	4ba1      	ldr	r3, [pc, #644]	; (4328 <dir_register+0x2bc>)
    40a4:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    40a6:	2301      	movs	r3, #1
		ns[i--] = c;
    40a8:	ad03      	add	r5, sp, #12
    40aa:	001e      	movs	r6, r3
    40ac:	46a0      	mov	r8, r4
    40ae:	e049      	b.n	4144 <dir_register+0xd8>
    40b0:	3801      	subs	r0, #1
    40b2:	1829      	adds	r1, r5, r0
    40b4:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    40b6:	091b      	lsrs	r3, r3, #4
    40b8:	b29b      	uxth	r3, r3
	} while (seq);
    40ba:	2b00      	cmp	r3, #0
    40bc:	d007      	beq.n	40ce <dir_register+0x62>
		c = (seq % 16) + '0';
    40be:	0021      	movs	r1, r4
    40c0:	4019      	ands	r1, r3
    40c2:	000a      	movs	r2, r1
    40c4:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    40c6:	2a39      	cmp	r2, #57	; 0x39
    40c8:	d9f2      	bls.n	40b0 <dir_register+0x44>
    40ca:	3207      	adds	r2, #7
    40cc:	e7f0      	b.n	40b0 <dir_register+0x44>
	ns[i] = '~';
    40ce:	337e      	adds	r3, #126	; 0x7e
    40d0:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    40d2:	2800      	cmp	r0, #0
    40d4:	d00a      	beq.n	40ec <dir_register+0x80>
    40d6:	783b      	ldrb	r3, [r7, #0]
    40d8:	2b20      	cmp	r3, #32
    40da:	d009      	beq.n	40f0 <dir_register+0x84>
    40dc:	2300      	movs	r3, #0
    40de:	3301      	adds	r3, #1
    40e0:	4298      	cmp	r0, r3
    40e2:	d007      	beq.n	40f4 <dir_register+0x88>
    40e4:	5cfa      	ldrb	r2, [r7, r3]
    40e6:	2a20      	cmp	r2, #32
    40e8:	d1f9      	bne.n	40de <dir_register+0x72>
    40ea:	e009      	b.n	4100 <dir_register+0x94>
    40ec:	0003      	movs	r3, r0
    40ee:	e007      	b.n	4100 <dir_register+0x94>
    40f0:	2300      	movs	r3, #0
    40f2:	e005      	b.n	4100 <dir_register+0x94>
    40f4:	0003      	movs	r3, r0
    40f6:	e003      	b.n	4100 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    40f8:	54fa      	strb	r2, [r7, r3]
    40fa:	3301      	adds	r3, #1
	} while (j < 8);
    40fc:	2b07      	cmp	r3, #7
    40fe:	d805      	bhi.n	410c <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4100:	2220      	movs	r2, #32
    4102:	2807      	cmp	r0, #7
    4104:	d8f8      	bhi.n	40f8 <dir_register+0x8c>
    4106:	5c2a      	ldrb	r2, [r5, r0]
    4108:	3001      	adds	r0, #1
    410a:	e7f5      	b.n	40f8 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    410c:	4640      	mov	r0, r8
    410e:	4b87      	ldr	r3, [pc, #540]	; (432c <dir_register+0x2c0>)
    4110:	4798      	blx	r3
			if (res != FR_OK) break;
    4112:	2800      	cmp	r0, #0
    4114:	d11c      	bne.n	4150 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    4116:	3601      	adds	r6, #1
    4118:	b2b6      	uxth	r6, r6
    411a:	2e64      	cmp	r6, #100	; 0x64
    411c:	d015      	beq.n	414a <dir_register+0xde>
	mem_cpy(dst, src, 11);
    411e:	220b      	movs	r2, #11
    4120:	a905      	add	r1, sp, #20
    4122:	0038      	movs	r0, r7
    4124:	4b80      	ldr	r3, [pc, #512]	; (4328 <dir_register+0x2bc>)
    4126:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4128:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    412a:	2e05      	cmp	r6, #5
    412c:	d90a      	bls.n	4144 <dir_register+0xd8>
    412e:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    4130:	085a      	lsrs	r2, r3, #1
    4132:	03db      	lsls	r3, r3, #15
    4134:	4313      	orrs	r3, r2
    4136:	880a      	ldrh	r2, [r1, #0]
    4138:	189b      	adds	r3, r3, r2
    413a:	b29b      	uxth	r3, r3
    413c:	3102      	adds	r1, #2
    413e:	880a      	ldrh	r2, [r1, #0]
    4140:	2a00      	cmp	r2, #0
    4142:	d1f5      	bne.n	4130 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    4144:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    4146:	240f      	movs	r4, #15
    4148:	e7b9      	b.n	40be <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    414a:	2307      	movs	r3, #7
    414c:	4698      	mov	r8, r3
    414e:	e006      	b.n	415e <dir_register+0xf2>
    4150:	4644      	mov	r4, r8
    4152:	4680      	mov	r8, r0
    4154:	2e64      	cmp	r6, #100	; 0x64
    4156:	d100      	bne.n	415a <dir_register+0xee>
    4158:	e0a5      	b.n	42a6 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    415a:	2804      	cmp	r0, #4
    415c:	d007      	beq.n	416e <dir_register+0x102>
}
    415e:	4640      	mov	r0, r8
    4160:	b009      	add	sp, #36	; 0x24
    4162:	bc3c      	pop	{r2, r3, r4, r5}
    4164:	4690      	mov	r8, r2
    4166:	4699      	mov	r9, r3
    4168:	46a2      	mov	sl, r4
    416a:	46ab      	mov	fp, r5
    416c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    416e:	ab05      	add	r3, sp, #20
    4170:	7adb      	ldrb	r3, [r3, #11]
    4172:	72fb      	strb	r3, [r7, #11]
    4174:	4653      	mov	r3, sl
    4176:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4178:	ab05      	add	r3, sp, #20
    417a:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    417c:	2201      	movs	r2, #1
    417e:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4180:	079b      	lsls	r3, r3, #30
    4182:	d511      	bpl.n	41a8 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    4184:	4653      	mov	r3, sl
    4186:	881b      	ldrh	r3, [r3, #0]
    4188:	2b00      	cmp	r3, #0
    418a:	d01b      	beq.n	41c4 <dir_register+0x158>
    418c:	2000      	movs	r0, #0
    418e:	4652      	mov	r2, sl
    4190:	3001      	adds	r0, #1
    4192:	b280      	uxth	r0, r0
    4194:	0043      	lsls	r3, r0, #1
    4196:	5a9b      	ldrh	r3, [r3, r2]
    4198:	2b00      	cmp	r3, #0
    419a:	d1f9      	bne.n	4190 <dir_register+0x124>
		ne = (ne + 25) / 13;
    419c:	3019      	adds	r0, #25
    419e:	210d      	movs	r1, #13
    41a0:	4b63      	ldr	r3, [pc, #396]	; (4330 <dir_register+0x2c4>)
    41a2:	4798      	blx	r3
    41a4:	b283      	uxth	r3, r0
    41a6:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    41a8:	2100      	movs	r1, #0
    41aa:	0020      	movs	r0, r4
    41ac:	4b61      	ldr	r3, [pc, #388]	; (4334 <dir_register+0x2c8>)
    41ae:	4798      	blx	r3
    41b0:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    41b2:	2800      	cmp	r0, #0
    41b4:	d1d3      	bne.n	415e <dir_register+0xf2>
    41b6:	4682      	mov	sl, r0
    41b8:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    41ba:	4f5f      	ldr	r7, [pc, #380]	; (4338 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    41bc:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    41be:	4b5f      	ldr	r3, [pc, #380]	; (433c <dir_register+0x2d0>)
    41c0:	4699      	mov	r9, r3
    41c2:	e00b      	b.n	41dc <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    41c4:	2000      	movs	r0, #0
    41c6:	e7e9      	b.n	419c <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    41c8:	1c6b      	adds	r3, r5, #1
    41ca:	b29b      	uxth	r3, r3
    41cc:	459b      	cmp	fp, r3
    41ce:	d06d      	beq.n	42ac <dir_register+0x240>
    41d0:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    41d2:	2101      	movs	r1, #1
    41d4:	0020      	movs	r0, r4
    41d6:	47c8      	blx	r9
	} while (res == FR_OK);
    41d8:	2800      	cmp	r0, #0
    41da:	d112      	bne.n	4202 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    41dc:	6921      	ldr	r1, [r4, #16]
    41de:	6820      	ldr	r0, [r4, #0]
    41e0:	47b8      	blx	r7
		if (res != FR_OK) break;
    41e2:	2800      	cmp	r0, #0
    41e4:	d000      	beq.n	41e8 <dir_register+0x17c>
    41e6:	e098      	b.n	431a <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    41e8:	6963      	ldr	r3, [r4, #20]
    41ea:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    41ec:	2be5      	cmp	r3, #229	; 0xe5
    41ee:	d001      	beq.n	41f4 <dir_register+0x188>
    41f0:	2b00      	cmp	r3, #0
    41f2:	d104      	bne.n	41fe <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    41f4:	2d00      	cmp	r5, #0
    41f6:	d1e7      	bne.n	41c8 <dir_register+0x15c>
    41f8:	88e3      	ldrh	r3, [r4, #6]
    41fa:	469a      	mov	sl, r3
    41fc:	e7e4      	b.n	41c8 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    41fe:	0035      	movs	r5, r6
    4200:	e7e7      	b.n	41d2 <dir_register+0x166>
    4202:	4680      	mov	r8, r0
    4204:	e7ab      	b.n	415e <dir_register+0xf2>
		res = dir_sdi(dj, is);
    4206:	4651      	mov	r1, sl
    4208:	0020      	movs	r0, r4
    420a:	4b4a      	ldr	r3, [pc, #296]	; (4334 <dir_register+0x2c8>)
    420c:	4798      	blx	r3
    420e:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4210:	2800      	cmp	r0, #0
    4212:	d1a4      	bne.n	415e <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    4214:	69a0      	ldr	r0, [r4, #24]
    4216:	4b4a      	ldr	r3, [pc, #296]	; (4340 <dir_register+0x2d4>)
    4218:	4798      	blx	r3
    421a:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    421c:	46a8      	mov	r8, r5
    421e:	e01f      	b.n	4260 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4220:	0022      	movs	r2, r4
    4222:	e067      	b.n	42f4 <dir_register+0x288>
    4224:	465e      	mov	r6, fp
    4226:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    4228:	4946      	ldr	r1, [pc, #280]	; (4344 <dir_register+0x2d8>)
    422a:	428b      	cmp	r3, r1
    422c:	d003      	beq.n	4236 <dir_register+0x1ca>
    422e:	0052      	lsls	r2, r2, #1
    4230:	5b93      	ldrh	r3, [r2, r6]
    4232:	2b00      	cmp	r3, #0
    4234:	d103      	bne.n	423e <dir_register+0x1d2>
    4236:	2340      	movs	r3, #64	; 0x40
    4238:	464a      	mov	r2, r9
    423a:	431a      	orrs	r2, r3
    423c:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    423e:	464b      	mov	r3, r9
    4240:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    4242:	2301      	movs	r3, #1
    4244:	6822      	ldr	r2, [r4, #0]
    4246:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    4248:	2100      	movs	r1, #0
    424a:	0020      	movs	r0, r4
    424c:	4b3b      	ldr	r3, [pc, #236]	; (433c <dir_register+0x2d0>)
    424e:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    4250:	2800      	cmp	r0, #0
    4252:	d166      	bne.n	4322 <dir_register+0x2b6>
    4254:	4645      	mov	r5, r8
    4256:	3d01      	subs	r5, #1
    4258:	b2ab      	uxth	r3, r5
    425a:	4698      	mov	r8, r3
    425c:	2b00      	cmp	r3, #0
    425e:	d027      	beq.n	42b0 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    4260:	6921      	ldr	r1, [r4, #16]
    4262:	6820      	ldr	r0, [r4, #0]
    4264:	4b34      	ldr	r3, [pc, #208]	; (4338 <dir_register+0x2cc>)
    4266:	4798      	blx	r3
				if (res != FR_OK) break;
    4268:	2800      	cmp	r0, #0
    426a:	d158      	bne.n	431e <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    426c:	69e6      	ldr	r6, [r4, #28]
    426e:	6960      	ldr	r0, [r4, #20]
    4270:	4643      	mov	r3, r8
    4272:	466a      	mov	r2, sp
    4274:	70d3      	strb	r3, [r2, #3]
    4276:	78d3      	ldrb	r3, [r2, #3]
    4278:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    427a:	7913      	ldrb	r3, [r2, #4]
    427c:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    427e:	230f      	movs	r3, #15
    4280:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    4282:	2300      	movs	r3, #0
    4284:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    4286:	7683      	strb	r3, [r0, #26]
    4288:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    428a:	464b      	mov	r3, r9
    428c:	3b01      	subs	r3, #1
    428e:	005a      	lsls	r2, r3, #1
    4290:	18d2      	adds	r2, r2, r3
    4292:	0092      	lsls	r2, r2, #2
    4294:	18d2      	adds	r2, r2, r3
    4296:	492c      	ldr	r1, [pc, #176]	; (4348 <dir_register+0x2dc>)
    4298:	000d      	movs	r5, r1
    429a:	350d      	adds	r5, #13
	s = wc = 0;
    429c:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    429e:	4f29      	ldr	r7, [pc, #164]	; (4344 <dir_register+0x2d8>)
    42a0:	46b3      	mov	fp, r6
    42a2:	46a4      	mov	ip, r4
    42a4:	e029      	b.n	42fa <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    42a6:	2307      	movs	r3, #7
    42a8:	4698      	mov	r8, r3
    42aa:	e758      	b.n	415e <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    42ac:	2b01      	cmp	r3, #1
    42ae:	d8aa      	bhi.n	4206 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    42b0:	6921      	ldr	r1, [r4, #16]
    42b2:	6820      	ldr	r0, [r4, #0]
    42b4:	4b20      	ldr	r3, [pc, #128]	; (4338 <dir_register+0x2cc>)
    42b6:	4798      	blx	r3
    42b8:	4680      	mov	r8, r0
		if (res == FR_OK) {
    42ba:	2800      	cmp	r0, #0
    42bc:	d000      	beq.n	42c0 <dir_register+0x254>
    42be:	e74e      	b.n	415e <dir_register+0xf2>
			dir = dj->dir;
    42c0:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    42c2:	2220      	movs	r2, #32
    42c4:	2100      	movs	r1, #0
    42c6:	0028      	movs	r0, r5
    42c8:	4b20      	ldr	r3, [pc, #128]	; (434c <dir_register+0x2e0>)
    42ca:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    42cc:	220b      	movs	r2, #11
    42ce:	69a1      	ldr	r1, [r4, #24]
    42d0:	0028      	movs	r0, r5
    42d2:	4b15      	ldr	r3, [pc, #84]	; (4328 <dir_register+0x2bc>)
    42d4:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    42d6:	69a3      	ldr	r3, [r4, #24]
    42d8:	7ada      	ldrb	r2, [r3, #11]
    42da:	2318      	movs	r3, #24
    42dc:	4013      	ands	r3, r2
    42de:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    42e0:	6823      	ldr	r3, [r4, #0]
    42e2:	2201      	movs	r2, #1
    42e4:	711a      	strb	r2, [r3, #4]
    42e6:	e73a      	b.n	415e <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    42e8:	780c      	ldrb	r4, [r1, #0]
    42ea:	26ff      	movs	r6, #255	; 0xff
    42ec:	5506      	strb	r6, [r0, r4]
    42ee:	1904      	adds	r4, r0, r4
    42f0:	26ff      	movs	r6, #255	; 0xff
    42f2:	7066      	strb	r6, [r4, #1]
    42f4:	3101      	adds	r1, #1
	} while (++s < 13);
    42f6:	42a9      	cmp	r1, r5
    42f8:	d094      	beq.n	4224 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    42fa:	42bb      	cmp	r3, r7
    42fc:	d0f4      	beq.n	42e8 <dir_register+0x27c>
    42fe:	1c54      	adds	r4, r2, #1
    4300:	0052      	lsls	r2, r2, #1
    4302:	465b      	mov	r3, fp
    4304:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4306:	780a      	ldrb	r2, [r1, #0]
    4308:	5483      	strb	r3, [r0, r2]
    430a:	1882      	adds	r2, r0, r2
    430c:	0a1e      	lsrs	r6, r3, #8
    430e:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4310:	2b00      	cmp	r3, #0
    4312:	d185      	bne.n	4220 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4314:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4316:	003b      	movs	r3, r7
    4318:	e7ec      	b.n	42f4 <dir_register+0x288>
    431a:	4680      	mov	r8, r0
    431c:	e71f      	b.n	415e <dir_register+0xf2>
    431e:	4680      	mov	r8, r0
    4320:	e71d      	b.n	415e <dir_register+0xf2>
    4322:	4680      	mov	r8, r0
    4324:	e71b      	b.n	415e <dir_register+0xf2>
    4326:	46c0      	nop			; (mov r8, r8)
    4328:	00003419 	.word	0x00003419
    432c:	00003ed5 	.word	0x00003ed5
    4330:	00004f91 	.word	0x00004f91
    4334:	00003a95 	.word	0x00003a95
    4338:	000038f9 	.word	0x000038f9
    433c:	00003db1 	.word	0x00003db1
    4340:	00003457 	.word	0x00003457
    4344:	0000ffff 	.word	0x0000ffff
    4348:	00005418 	.word	0x00005418
    434c:	0000342d 	.word	0x0000342d

00004350 <sync>:
{
    4350:	b570      	push	{r4, r5, r6, lr}
    4352:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    4354:	2100      	movs	r1, #0
    4356:	4b2c      	ldr	r3, [pc, #176]	; (4408 <sync+0xb8>)
    4358:	4798      	blx	r3
	if (res == FR_OK) {
    435a:	2800      	cmp	r0, #0
    435c:	d10a      	bne.n	4374 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    435e:	7823      	ldrb	r3, [r4, #0]
    4360:	2b03      	cmp	r3, #3
    4362:	d008      	beq.n	4376 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    4364:	7860      	ldrb	r0, [r4, #1]
    4366:	2200      	movs	r2, #0
    4368:	2100      	movs	r1, #0
    436a:	4b28      	ldr	r3, [pc, #160]	; (440c <sync+0xbc>)
    436c:	4798      	blx	r3
    436e:	1e43      	subs	r3, r0, #1
    4370:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    4372:	b2c0      	uxtb	r0, r0
}
    4374:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4376:	7963      	ldrb	r3, [r4, #5]
    4378:	2b00      	cmp	r3, #0
    437a:	d0f3      	beq.n	4364 <sync+0x14>
			fs->winsect = 0;
    437c:	2600      	movs	r6, #0
    437e:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    4380:	0025      	movs	r5, r4
    4382:	3530      	adds	r5, #48	; 0x30
    4384:	2280      	movs	r2, #128	; 0x80
    4386:	0092      	lsls	r2, r2, #2
    4388:	2100      	movs	r1, #0
    438a:	0028      	movs	r0, r5
    438c:	4b20      	ldr	r3, [pc, #128]	; (4410 <sync+0xc0>)
    438e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    4390:	2255      	movs	r2, #85	; 0x55
    4392:	4b20      	ldr	r3, [pc, #128]	; (4414 <sync+0xc4>)
    4394:	54e2      	strb	r2, [r4, r3]
    4396:	3255      	adds	r2, #85	; 0x55
    4398:	4b1f      	ldr	r3, [pc, #124]	; (4418 <sync+0xc8>)
    439a:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    439c:	3bde      	subs	r3, #222	; 0xde
    439e:	3bff      	subs	r3, #255	; 0xff
    43a0:	3a7a      	subs	r2, #122	; 0x7a
    43a2:	54a3      	strb	r3, [r4, r2]
    43a4:	3201      	adds	r2, #1
    43a6:	54a3      	strb	r3, [r4, r2]
    43a8:	330f      	adds	r3, #15
    43aa:	3201      	adds	r2, #1
    43ac:	54a3      	strb	r3, [r4, r2]
    43ae:	320f      	adds	r2, #15
    43b0:	2133      	movs	r1, #51	; 0x33
    43b2:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    43b4:	313f      	adds	r1, #63	; 0x3f
    43b6:	2085      	movs	r0, #133	; 0x85
    43b8:	0080      	lsls	r0, r0, #2
    43ba:	5421      	strb	r1, [r4, r0]
    43bc:	4817      	ldr	r0, [pc, #92]	; (441c <sync+0xcc>)
    43be:	5421      	strb	r1, [r4, r0]
    43c0:	4917      	ldr	r1, [pc, #92]	; (4420 <sync+0xd0>)
    43c2:	5462      	strb	r2, [r4, r1]
    43c4:	4a17      	ldr	r2, [pc, #92]	; (4424 <sync+0xd4>)
    43c6:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    43c8:	6923      	ldr	r3, [r4, #16]
    43ca:	3201      	adds	r2, #1
    43cc:	54a3      	strb	r3, [r4, r2]
    43ce:	0a19      	lsrs	r1, r3, #8
    43d0:	4a15      	ldr	r2, [pc, #84]	; (4428 <sync+0xd8>)
    43d2:	54a1      	strb	r1, [r4, r2]
    43d4:	0c19      	lsrs	r1, r3, #16
    43d6:	4a15      	ldr	r2, [pc, #84]	; (442c <sync+0xdc>)
    43d8:	54a1      	strb	r1, [r4, r2]
    43da:	0e1b      	lsrs	r3, r3, #24
    43dc:	4a14      	ldr	r2, [pc, #80]	; (4430 <sync+0xe0>)
    43de:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    43e0:	68e3      	ldr	r3, [r4, #12]
    43e2:	3201      	adds	r2, #1
    43e4:	54a3      	strb	r3, [r4, r2]
    43e6:	0a19      	lsrs	r1, r3, #8
    43e8:	4a12      	ldr	r2, [pc, #72]	; (4434 <sync+0xe4>)
    43ea:	54a1      	strb	r1, [r4, r2]
    43ec:	0c19      	lsrs	r1, r3, #16
    43ee:	4a12      	ldr	r2, [pc, #72]	; (4438 <sync+0xe8>)
    43f0:	54a1      	strb	r1, [r4, r2]
    43f2:	0e1b      	lsrs	r3, r3, #24
    43f4:	4a11      	ldr	r2, [pc, #68]	; (443c <sync+0xec>)
    43f6:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    43f8:	7860      	ldrb	r0, [r4, #1]
    43fa:	2301      	movs	r3, #1
    43fc:	6962      	ldr	r2, [r4, #20]
    43fe:	0029      	movs	r1, r5
    4400:	4d0f      	ldr	r5, [pc, #60]	; (4440 <sync+0xf0>)
    4402:	47a8      	blx	r5
			fs->fsi_flag = 0;
    4404:	7166      	strb	r6, [r4, #5]
    4406:	e7ad      	b.n	4364 <sync+0x14>
    4408:	000038f9 	.word	0x000038f9
    440c:	0000335d 	.word	0x0000335d
    4410:	0000342d 	.word	0x0000342d
    4414:	0000022e 	.word	0x0000022e
    4418:	0000022f 	.word	0x0000022f
    441c:	00000215 	.word	0x00000215
    4420:	00000216 	.word	0x00000216
    4424:	00000217 	.word	0x00000217
    4428:	00000219 	.word	0x00000219
    442c:	0000021a 	.word	0x0000021a
    4430:	0000021b 	.word	0x0000021b
    4434:	0000021d 	.word	0x0000021d
    4438:	0000021e 	.word	0x0000021e
    443c:	0000021f 	.word	0x0000021f
    4440:	000032d9 	.word	0x000032d9

00004444 <follow_path>:
{
    4444:	b5f0      	push	{r4, r5, r6, r7, lr}
    4446:	46de      	mov	lr, fp
    4448:	4657      	mov	r7, sl
    444a:	464e      	mov	r6, r9
    444c:	4645      	mov	r5, r8
    444e:	b5e0      	push	{r5, r6, r7, lr}
    4450:	b083      	sub	sp, #12
    4452:	4682      	mov	sl, r0
    4454:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    4456:	780b      	ldrb	r3, [r1, #0]
    4458:	2b2f      	cmp	r3, #47	; 0x2f
    445a:	d00f      	beq.n	447c <follow_path+0x38>
    445c:	2b5c      	cmp	r3, #92	; 0x5c
    445e:	d00d      	beq.n	447c <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    4460:	2300      	movs	r3, #0
    4462:	4652      	mov	r2, sl
    4464:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    4466:	782b      	ldrb	r3, [r5, #0]
    4468:	4657      	mov	r7, sl
    446a:	2b1f      	cmp	r3, #31
    446c:	d809      	bhi.n	4482 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    446e:	2100      	movs	r1, #0
    4470:	4650      	mov	r0, sl
    4472:	4bb2      	ldr	r3, [pc, #712]	; (473c <follow_path+0x2f8>)
    4474:	4798      	blx	r3
		dj->dir = 0;
    4476:	2300      	movs	r3, #0
    4478:	617b      	str	r3, [r7, #20]
    447a:	e13a      	b.n	46f2 <follow_path+0x2ae>
		path++;
    447c:	3501      	adds	r5, #1
    447e:	e7ef      	b.n	4460 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4480:	3501      	adds	r5, #1
    4482:	7828      	ldrb	r0, [r5, #0]
    4484:	282f      	cmp	r0, #47	; 0x2f
    4486:	d0fb      	beq.n	4480 <follow_path+0x3c>
    4488:	285c      	cmp	r0, #92	; 0x5c
    448a:	d0f9      	beq.n	4480 <follow_path+0x3c>
	lfn = dj->lfn;
    448c:	69fb      	ldr	r3, [r7, #28]
    448e:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    4490:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4492:	281f      	cmp	r0, #31
    4494:	d800      	bhi.n	4498 <follow_path+0x54>
    4496:	e13b      	b.n	4710 <follow_path+0x2cc>
    4498:	282f      	cmp	r0, #47	; 0x2f
    449a:	d100      	bne.n	449e <follow_path+0x5a>
    449c:	e13b      	b.n	4716 <follow_path+0x2d2>
    449e:	285c      	cmp	r0, #92	; 0x5c
    44a0:	d100      	bne.n	44a4 <follow_path+0x60>
    44a2:	e13b      	b.n	471c <follow_path+0x2d8>
    44a4:	1c6e      	adds	r6, r5, #1
    44a6:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    44a8:	2380      	movs	r3, #128	; 0x80
    44aa:	005b      	lsls	r3, r3, #1
    44ac:	4698      	mov	r8, r3
    44ae:	46bb      	mov	fp, r7
    44b0:	002b      	movs	r3, r5
    44b2:	0025      	movs	r5, r4
    44b4:	0034      	movs	r4, r6
    44b6:	4656      	mov	r6, sl
    44b8:	4699      	mov	r9, r3
    44ba:	e011      	b.n	44e0 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    44bc:	2b00      	cmp	r3, #0
    44be:	d135      	bne.n	452c <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    44c0:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    44c2:	1c6b      	adds	r3, r5, #1
    44c4:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    44c6:	281f      	cmp	r0, #31
    44c8:	d91e      	bls.n	4508 <follow_path+0xc4>
    44ca:	282f      	cmp	r0, #47	; 0x2f
    44cc:	d100      	bne.n	44d0 <follow_path+0x8c>
    44ce:	e128      	b.n	4722 <follow_path+0x2de>
    44d0:	285c      	cmp	r0, #92	; 0x5c
    44d2:	d100      	bne.n	44d6 <follow_path+0x92>
    44d4:	e142      	b.n	475c <follow_path+0x318>
    44d6:	3602      	adds	r6, #2
    44d8:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    44da:	4543      	cmp	r3, r8
    44dc:	d026      	beq.n	452c <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    44de:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    44e0:	2101      	movs	r1, #1
    44e2:	4b97      	ldr	r3, [pc, #604]	; (4740 <follow_path+0x2fc>)
    44e4:	4798      	blx	r3
    44e6:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    44e8:	d020      	beq.n	452c <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    44ea:	287f      	cmp	r0, #127	; 0x7f
    44ec:	d8e8      	bhi.n	44c0 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    44ee:	2822      	cmp	r0, #34	; 0x22
    44f0:	d100      	bne.n	44f4 <follow_path+0xb0>
    44f2:	e0fd      	b.n	46f0 <follow_path+0x2ac>
    44f4:	232a      	movs	r3, #42	; 0x2a
    44f6:	4a93      	ldr	r2, [pc, #588]	; (4744 <follow_path+0x300>)
    44f8:	b29f      	uxth	r7, r3
    44fa:	428f      	cmp	r7, r1
    44fc:	d0de      	beq.n	44bc <follow_path+0x78>
    44fe:	3201      	adds	r2, #1
    4500:	7813      	ldrb	r3, [r2, #0]
    4502:	2b00      	cmp	r3, #0
    4504:	d1f8      	bne.n	44f8 <follow_path+0xb4>
    4506:	e7db      	b.n	44c0 <follow_path+0x7c>
    4508:	002c      	movs	r4, r5
    450a:	465f      	mov	r7, fp
    450c:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    450e:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4510:	2604      	movs	r6, #4
    4512:	e10b      	b.n	472c <follow_path+0x2e8>
		di--;
    4514:	3c01      	subs	r4, #1
    4516:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    4518:	2c00      	cmp	r4, #0
    451a:	d100      	bne.n	451e <follow_path+0xda>
    451c:	e0e8      	b.n	46f0 <follow_path+0x2ac>
		w = lfn[di-1];
    451e:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    4520:	2a20      	cmp	r2, #32
    4522:	d0f7      	beq.n	4514 <follow_path+0xd0>
    4524:	2a2e      	cmp	r2, #46	; 0x2e
    4526:	d0f5      	beq.n	4514 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    4528:	2c00      	cmp	r4, #0
    452a:	d101      	bne.n	4530 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    452c:	2006      	movs	r0, #6
	return res;
    452e:	e0e0      	b.n	46f2 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    4530:	0063      	lsls	r3, r4, #1
    4532:	4698      	mov	r8, r3
    4534:	2300      	movs	r3, #0
    4536:	4652      	mov	r2, sl
    4538:	4641      	mov	r1, r8
    453a:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    453c:	220b      	movs	r2, #11
    453e:	2120      	movs	r1, #32
    4540:	69b8      	ldr	r0, [r7, #24]
    4542:	4b81      	ldr	r3, [pc, #516]	; (4748 <follow_path+0x304>)
    4544:	4798      	blx	r3
    4546:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    4548:	2300      	movs	r3, #0
    454a:	e001      	b.n	4550 <follow_path+0x10c>
    454c:	3301      	adds	r3, #1
    454e:	3202      	adds	r2, #2
    4550:	8811      	ldrh	r1, [r2, #0]
    4552:	2920      	cmp	r1, #32
    4554:	d0fa      	beq.n	454c <follow_path+0x108>
    4556:	292e      	cmp	r1, #46	; 0x2e
    4558:	d0f8      	beq.n	454c <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    455a:	2b00      	cmp	r3, #0
    455c:	d001      	beq.n	4562 <follow_path+0x11e>
    455e:	2203      	movs	r2, #3
    4560:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    4562:	4652      	mov	r2, sl
    4564:	4442      	add	r2, r8
    4566:	3a02      	subs	r2, #2
    4568:	8812      	ldrh	r2, [r2, #0]
    456a:	2a2e      	cmp	r2, #46	; 0x2e
    456c:	d009      	beq.n	4582 <follow_path+0x13e>
    456e:	4642      	mov	r2, r8
    4570:	3a04      	subs	r2, #4
    4572:	4452      	add	r2, sl
    4574:	3c01      	subs	r4, #1
    4576:	2c00      	cmp	r4, #0
    4578:	d003      	beq.n	4582 <follow_path+0x13e>
    457a:	3a02      	subs	r2, #2
    457c:	8851      	ldrh	r1, [r2, #2]
    457e:	292e      	cmp	r1, #46	; 0x2e
    4580:	d1f8      	bne.n	4574 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    4582:	2208      	movs	r2, #8
    4584:	9201      	str	r2, [sp, #4]
    4586:	2200      	movs	r2, #0
    4588:	4693      	mov	fp, r2
    458a:	4691      	mov	r9, r2
    458c:	46a0      	mov	r8, r4
    458e:	e006      	b.n	459e <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4590:	4544      	cmp	r4, r8
    4592:	d100      	bne.n	4596 <follow_path+0x152>
    4594:	e0e6      	b.n	4764 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    4596:	2303      	movs	r3, #3
    4598:	431e      	orrs	r6, r3
    459a:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    459c:	0023      	movs	r3, r4
    459e:	1c5c      	adds	r4, r3, #1
    45a0:	005b      	lsls	r3, r3, #1
    45a2:	4652      	mov	r2, sl
    45a4:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    45a6:	2800      	cmp	r0, #0
    45a8:	d02c      	beq.n	4604 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    45aa:	2820      	cmp	r0, #32
    45ac:	d0f3      	beq.n	4596 <follow_path+0x152>
    45ae:	282e      	cmp	r0, #46	; 0x2e
    45b0:	d0ee      	beq.n	4590 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    45b2:	9b01      	ldr	r3, [sp, #4]
    45b4:	459b      	cmp	fp, r3
    45b6:	d219      	bcs.n	45ec <follow_path+0x1a8>
    45b8:	4544      	cmp	r4, r8
    45ba:	d100      	bne.n	45be <follow_path+0x17a>
    45bc:	e0d2      	b.n	4764 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    45be:	287f      	cmp	r0, #127	; 0x7f
    45c0:	d85e      	bhi.n	4680 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    45c2:	282b      	cmp	r0, #43	; 0x2b
    45c4:	d06e      	beq.n	46a4 <follow_path+0x260>
    45c6:	232c      	movs	r3, #44	; 0x2c
    45c8:	4a60      	ldr	r2, [pc, #384]	; (474c <follow_path+0x308>)
    45ca:	b299      	uxth	r1, r3
    45cc:	4281      	cmp	r1, r0
    45ce:	d067      	beq.n	46a0 <follow_path+0x25c>
    45d0:	3201      	adds	r2, #1
    45d2:	7813      	ldrb	r3, [r2, #0]
    45d4:	2b00      	cmp	r3, #0
    45d6:	d1f8      	bne.n	45ca <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    45d8:	0003      	movs	r3, r0
    45da:	3b41      	subs	r3, #65	; 0x41
    45dc:	b29b      	uxth	r3, r3
    45de:	2b19      	cmp	r3, #25
    45e0:	d86c      	bhi.n	46bc <follow_path+0x278>
					b |= 2;
    45e2:	2302      	movs	r3, #2
    45e4:	464a      	mov	r2, r9
    45e6:	431a      	orrs	r2, r3
    45e8:	4691      	mov	r9, r2
    45ea:	e05f      	b.n	46ac <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    45ec:	9b01      	ldr	r3, [sp, #4]
    45ee:	2b0b      	cmp	r3, #11
    45f0:	d03b      	beq.n	466a <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    45f2:	4544      	cmp	r4, r8
    45f4:	d100      	bne.n	45f8 <follow_path+0x1b4>
    45f6:	e0b9      	b.n	476c <follow_path+0x328>
    45f8:	2303      	movs	r3, #3
    45fa:	431e      	orrs	r6, r3
    45fc:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    45fe:	4544      	cmp	r4, r8
    4600:	d800      	bhi.n	4604 <follow_path+0x1c0>
    4602:	e0b3      	b.n	476c <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4604:	69bb      	ldr	r3, [r7, #24]
    4606:	781a      	ldrb	r2, [r3, #0]
    4608:	2ae5      	cmp	r2, #229	; 0xe5
    460a:	d036      	beq.n	467a <follow_path+0x236>
	if (ni == 8) b <<= 2;
    460c:	9b01      	ldr	r3, [sp, #4]
    460e:	2b08      	cmp	r3, #8
    4610:	d060      	beq.n	46d4 <follow_path+0x290>
    4612:	230c      	movs	r3, #12
    4614:	464a      	mov	r2, r9
    4616:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    4618:	2b0c      	cmp	r3, #12
    461a:	d060      	beq.n	46de <follow_path+0x29a>
    461c:	43d2      	mvns	r2, r2
    461e:	0792      	lsls	r2, r2, #30
    4620:	d05d      	beq.n	46de <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    4622:	07b2      	lsls	r2, r6, #30
    4624:	d406      	bmi.n	4634 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4626:	2203      	movs	r2, #3
    4628:	4649      	mov	r1, r9
    462a:	400a      	ands	r2, r1
    462c:	2a01      	cmp	r2, #1
    462e:	d059      	beq.n	46e4 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4630:	2b04      	cmp	r3, #4
    4632:	d05a      	beq.n	46ea <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    4634:	69bb      	ldr	r3, [r7, #24]
    4636:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    4638:	0038      	movs	r0, r7
    463a:	4b45      	ldr	r3, [pc, #276]	; (4750 <follow_path+0x30c>)
    463c:	4798      	blx	r3
			ns = *(dj->fn+NS);
    463e:	69bb      	ldr	r3, [r7, #24]
    4640:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    4642:	2800      	cmp	r0, #0
    4644:	d15c      	bne.n	4700 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    4646:	075b      	lsls	r3, r3, #29
    4648:	d453      	bmi.n	46f2 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    464a:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    464c:	7ad3      	ldrb	r3, [r2, #11]
    464e:	06db      	lsls	r3, r3, #27
    4650:	d55c      	bpl.n	470c <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    4652:	7d51      	ldrb	r1, [r2, #21]
    4654:	0209      	lsls	r1, r1, #8
    4656:	7d13      	ldrb	r3, [r2, #20]
    4658:	430b      	orrs	r3, r1
    465a:	041b      	lsls	r3, r3, #16
    465c:	7ed1      	ldrb	r1, [r2, #27]
    465e:	0209      	lsls	r1, r1, #8
    4660:	7e92      	ldrb	r2, [r2, #26]
    4662:	430a      	orrs	r2, r1
    4664:	4313      	orrs	r3, r2
    4666:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    4668:	e70b      	b.n	4482 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    466a:	2303      	movs	r3, #3
    466c:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    466e:	69bb      	ldr	r3, [r7, #24]
    4670:	781a      	ldrb	r2, [r3, #0]
    4672:	2ae5      	cmp	r2, #229	; 0xe5
    4674:	d1cd      	bne.n	4612 <follow_path+0x1ce>
    4676:	220b      	movs	r2, #11
    4678:	9201      	str	r2, [sp, #4]
    467a:	2205      	movs	r2, #5
    467c:	701a      	strb	r2, [r3, #0]
    467e:	e7c5      	b.n	460c <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    4680:	2100      	movs	r1, #0
    4682:	4b2f      	ldr	r3, [pc, #188]	; (4740 <follow_path+0x2fc>)
    4684:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    4686:	2800      	cmp	r0, #0
    4688:	d100      	bne.n	468c <follow_path+0x248>
    468a:	e079      	b.n	4780 <follow_path+0x33c>
    468c:	4b31      	ldr	r3, [pc, #196]	; (4754 <follow_path+0x310>)
    468e:	469c      	mov	ip, r3
    4690:	4460      	add	r0, ip
    4692:	3880      	subs	r0, #128	; 0x80
    4694:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    4696:	2302      	movs	r3, #2
    4698:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    469a:	2800      	cmp	r0, #0
    469c:	d002      	beq.n	46a4 <follow_path+0x260>
    469e:	e790      	b.n	45c2 <follow_path+0x17e>
    46a0:	2b00      	cmp	r3, #0
    46a2:	d099      	beq.n	45d8 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    46a4:	2303      	movs	r3, #3
    46a6:	431e      	orrs	r6, r3
    46a8:	b2f6      	uxtb	r6, r6
    46aa:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    46ac:	69bb      	ldr	r3, [r7, #24]
    46ae:	465a      	mov	r2, fp
    46b0:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    46b2:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    46b4:	2201      	movs	r2, #1
    46b6:	4694      	mov	ip, r2
    46b8:	44e3      	add	fp, ip
    46ba:	e770      	b.n	459e <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    46bc:	0003      	movs	r3, r0
    46be:	3b61      	subs	r3, #97	; 0x61
    46c0:	b29b      	uxth	r3, r3
    46c2:	2b19      	cmp	r3, #25
    46c4:	d8f2      	bhi.n	46ac <follow_path+0x268>
						b |= 1; w -= 0x20;
    46c6:	2301      	movs	r3, #1
    46c8:	464a      	mov	r2, r9
    46ca:	431a      	orrs	r2, r3
    46cc:	4691      	mov	r9, r2
    46ce:	3820      	subs	r0, #32
    46d0:	b280      	uxth	r0, r0
    46d2:	e7eb      	b.n	46ac <follow_path+0x268>
	if (ni == 8) b <<= 2;
    46d4:	464b      	mov	r3, r9
    46d6:	009b      	lsls	r3, r3, #2
    46d8:	b2db      	uxtb	r3, r3
    46da:	4699      	mov	r9, r3
    46dc:	e799      	b.n	4612 <follow_path+0x1ce>
		cf |= NS_LFN;
    46de:	2202      	movs	r2, #2
    46e0:	4316      	orrs	r6, r2
    46e2:	e79e      	b.n	4622 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    46e4:	320f      	adds	r2, #15
    46e6:	4316      	orrs	r6, r2
    46e8:	e7a2      	b.n	4630 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    46ea:	3304      	adds	r3, #4
    46ec:	431e      	orrs	r6, r3
    46ee:	e7a1      	b.n	4634 <follow_path+0x1f0>
    46f0:	2006      	movs	r0, #6
}
    46f2:	b003      	add	sp, #12
    46f4:	bc3c      	pop	{r2, r3, r4, r5}
    46f6:	4690      	mov	r8, r2
    46f8:	4699      	mov	r9, r3
    46fa:	46a2      	mov	sl, r4
    46fc:	46ab      	mov	fp, r5
    46fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    4700:	2804      	cmp	r0, #4
    4702:	d1f6      	bne.n	46f2 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4704:	075b      	lsls	r3, r3, #29
    4706:	d4f4      	bmi.n	46f2 <follow_path+0x2ae>
    4708:	3001      	adds	r0, #1
    470a:	e7f2      	b.n	46f2 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    470c:	2005      	movs	r0, #5
    470e:	e7f0      	b.n	46f2 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    4710:	2301      	movs	r3, #1
	si = di = 0;
    4712:	2400      	movs	r4, #0
    4714:	e6fb      	b.n	450e <follow_path+0xca>
		w = p[si++];					/* Get a character */
    4716:	2301      	movs	r3, #1
	si = di = 0;
    4718:	2400      	movs	r4, #0
    471a:	e005      	b.n	4728 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    471c:	2301      	movs	r3, #1
	si = di = 0;
    471e:	2400      	movs	r4, #0
    4720:	e002      	b.n	4728 <follow_path+0x2e4>
    4722:	002c      	movs	r4, r5
    4724:	465f      	mov	r7, fp
    4726:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4728:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    472a:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    472c:	2c00      	cmp	r4, #0
    472e:	d0df      	beq.n	46f0 <follow_path+0x2ac>
    4730:	4b09      	ldr	r3, [pc, #36]	; (4758 <follow_path+0x314>)
    4732:	18e3      	adds	r3, r4, r3
    4734:	005b      	lsls	r3, r3, #1
    4736:	4453      	add	r3, sl
    4738:	e6f1      	b.n	451e <follow_path+0xda>
    473a:	46c0      	nop			; (mov r8, r8)
    473c:	00003a95 	.word	0x00003a95
    4740:	00004c75 	.word	0x00004c75
    4744:	000054a9 	.word	0x000054a9
    4748:	0000342d 	.word	0x0000342d
    474c:	000054b5 	.word	0x000054b5
    4750:	00003ed5 	.word	0x00003ed5
    4754:	00005428 	.word	0x00005428
    4758:	7fffffff 	.word	0x7fffffff
    475c:	002c      	movs	r4, r5
    475e:	465f      	mov	r7, fp
    4760:	464d      	mov	r5, r9
    4762:	e7e1      	b.n	4728 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    4764:	9b01      	ldr	r3, [sp, #4]
    4766:	2b0b      	cmp	r3, #11
    4768:	d100      	bne.n	476c <follow_path+0x328>
    476a:	e77e      	b.n	466a <follow_path+0x226>
			b <<= 2; continue;
    476c:	464b      	mov	r3, r9
    476e:	009b      	lsls	r3, r3, #2
    4770:	b2db      	uxtb	r3, r3
    4772:	4699      	mov	r9, r3
    4774:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    4776:	220b      	movs	r2, #11
    4778:	9201      	str	r2, [sp, #4]
    477a:	3a03      	subs	r2, #3
    477c:	4693      	mov	fp, r2
    477e:	e70e      	b.n	459e <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    4780:	2302      	movs	r3, #2
    4782:	431e      	orrs	r6, r3
    4784:	e78e      	b.n	46a4 <follow_path+0x260>
    4786:	46c0      	nop			; (mov r8, r8)

00004788 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    4788:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    478a:	2807      	cmp	r0, #7
    478c:	d901      	bls.n	4792 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    478e:	0018      	movs	r0, r3
    4790:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    4792:	0083      	lsls	r3, r0, #2
    4794:	4a07      	ldr	r2, [pc, #28]	; (47b4 <f_mount+0x2c>)
    4796:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    4798:	2b00      	cmp	r3, #0
    479a:	d001      	beq.n	47a0 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    479c:	2200      	movs	r2, #0
    479e:	701a      	strb	r2, [r3, #0]
	if (fs) {
    47a0:	2900      	cmp	r1, #0
    47a2:	d001      	beq.n	47a8 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    47a4:	2300      	movs	r3, #0
    47a6:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    47a8:	0080      	lsls	r0, r0, #2
    47aa:	4b02      	ldr	r3, [pc, #8]	; (47b4 <f_mount+0x2c>)
    47ac:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    47ae:	2300      	movs	r3, #0
    47b0:	e7ed      	b.n	478e <f_mount+0x6>
    47b2:	46c0      	nop			; (mov r8, r8)
    47b4:	20000148 	.word	0x20000148

000047b8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    47b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    47ba:	46c6      	mov	lr, r8
    47bc:	b500      	push	{lr}
    47be:	4c59      	ldr	r4, [pc, #356]	; (4924 <f_open+0x16c>)
    47c0:	44a5      	add	sp, r4
    47c2:	0005      	movs	r5, r0
    47c4:	9101      	str	r1, [sp, #4]
    47c6:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    47c8:	2300      	movs	r3, #0
    47ca:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    47cc:	261f      	movs	r6, #31
    47ce:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    47d0:	221e      	movs	r2, #30
    47d2:	403a      	ands	r2, r7
    47d4:	a985      	add	r1, sp, #532	; 0x214
    47d6:	a801      	add	r0, sp, #4
    47d8:	4b53      	ldr	r3, [pc, #332]	; (4928 <f_open+0x170>)
    47da:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    47dc:	ab82      	add	r3, sp, #520	; 0x208
    47de:	938b      	str	r3, [sp, #556]	; 0x22c
    47e0:	ab02      	add	r3, sp, #8
    47e2:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    47e4:	2800      	cmp	r0, #0
    47e6:	d006      	beq.n	47f6 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    47e8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    47ea:	231c      	movs	r3, #28
    47ec:	423b      	tst	r3, r7
    47ee:	d145      	bne.n	487c <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    47f0:	2800      	cmp	r0, #0
    47f2:	d13d      	bne.n	4870 <f_open+0xb8>
    47f4:	e00c      	b.n	4810 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    47f6:	9901      	ldr	r1, [sp, #4]
    47f8:	a885      	add	r0, sp, #532	; 0x214
    47fa:	4b4c      	ldr	r3, [pc, #304]	; (492c <f_open+0x174>)
    47fc:	4798      	blx	r3
	dir = dj.dir;
    47fe:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4800:	2800      	cmp	r0, #0
    4802:	d1f2      	bne.n	47ea <f_open+0x32>
		if (!dir)	/* Current dir itself */
    4804:	2c00      	cmp	r4, #0
    4806:	d100      	bne.n	480a <f_open+0x52>
    4808:	e086      	b.n	4918 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    480a:	231c      	movs	r3, #28
    480c:	423b      	tst	r3, r7
    480e:	d146      	bne.n	489e <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4810:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    4812:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4814:	06da      	lsls	r2, r3, #27
    4816:	d42b      	bmi.n	4870 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4818:	07ba      	lsls	r2, r7, #30
    481a:	d502      	bpl.n	4822 <f_open+0x6a>
					res = FR_DENIED;
    481c:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    481e:	07db      	lsls	r3, r3, #31
    4820:	d426      	bmi.n	4870 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    4822:	073b      	lsls	r3, r7, #28
    4824:	d501      	bpl.n	482a <f_open+0x72>
			mode |= FA__WRITTEN;
    4826:	2320      	movs	r3, #32
    4828:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    482a:	9b85      	ldr	r3, [sp, #532]	; 0x214
    482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    482e:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    4830:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    4832:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    4834:	7d62      	ldrb	r2, [r4, #21]
    4836:	0212      	lsls	r2, r2, #8
    4838:	7d23      	ldrb	r3, [r4, #20]
    483a:	4313      	orrs	r3, r2
    483c:	041b      	lsls	r3, r3, #16
    483e:	7ee1      	ldrb	r1, [r4, #27]
    4840:	0209      	lsls	r1, r1, #8
    4842:	7ea2      	ldrb	r2, [r4, #26]
    4844:	430a      	orrs	r2, r1
    4846:	4313      	orrs	r3, r2
    4848:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    484a:	7fe3      	ldrb	r3, [r4, #31]
    484c:	061b      	lsls	r3, r3, #24
    484e:	7fa2      	ldrb	r2, [r4, #30]
    4850:	0412      	lsls	r2, r2, #16
    4852:	4313      	orrs	r3, r2
    4854:	7f22      	ldrb	r2, [r4, #28]
    4856:	4313      	orrs	r3, r2
    4858:	7f62      	ldrb	r2, [r4, #29]
    485a:	0212      	lsls	r2, r2, #8
    485c:	4313      	orrs	r3, r2
    485e:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    4860:	2300      	movs	r3, #0
    4862:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    4864:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    4866:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4868:	602b      	str	r3, [r5, #0]
    486a:	88db      	ldrh	r3, [r3, #6]
    486c:	80ab      	strh	r3, [r5, #4]
    486e:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    4870:	238e      	movs	r3, #142	; 0x8e
    4872:	009b      	lsls	r3, r3, #2
    4874:	449d      	add	sp, r3
    4876:	bc04      	pop	{r2}
    4878:	4690      	mov	r8, r2
    487a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    487c:	2804      	cmp	r0, #4
    487e:	d005      	beq.n	488c <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4880:	2308      	movs	r3, #8
    4882:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4884:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4886:	2800      	cmp	r0, #0
    4888:	d0d3      	beq.n	4832 <f_open+0x7a>
    488a:	e7f1      	b.n	4870 <f_open+0xb8>
				res = dir_register(&dj);
    488c:	a885      	add	r0, sp, #532	; 0x214
    488e:	4b28      	ldr	r3, [pc, #160]	; (4930 <f_open+0x178>)
    4890:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4892:	2308      	movs	r3, #8
    4894:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4896:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4898:	2800      	cmp	r0, #0
    489a:	d008      	beq.n	48ae <f_open+0xf6>
    489c:	e7e8      	b.n	4870 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    489e:	7ae3      	ldrb	r3, [r4, #11]
    48a0:	2211      	movs	r2, #17
				res = FR_DENIED;
    48a2:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    48a4:	421a      	tst	r2, r3
    48a6:	d1e3      	bne.n	4870 <f_open+0xb8>
					res = FR_EXIST;
    48a8:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    48aa:	077b      	lsls	r3, r7, #29
    48ac:	d4e0      	bmi.n	4870 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    48ae:	0733      	lsls	r3, r6, #28
    48b0:	d5bb      	bpl.n	482a <f_open+0x72>
			dw = get_fattime();					/* Created time */
    48b2:	4b20      	ldr	r3, [pc, #128]	; (4934 <f_open+0x17c>)
    48b4:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    48b6:	73a0      	strb	r0, [r4, #14]
    48b8:	0a03      	lsrs	r3, r0, #8
    48ba:	73e3      	strb	r3, [r4, #15]
    48bc:	0c03      	lsrs	r3, r0, #16
    48be:	7423      	strb	r3, [r4, #16]
    48c0:	0e00      	lsrs	r0, r0, #24
    48c2:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    48c4:	2300      	movs	r3, #0
    48c6:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    48c8:	7723      	strb	r3, [r4, #28]
    48ca:	7763      	strb	r3, [r4, #29]
    48cc:	77a3      	strb	r3, [r4, #30]
    48ce:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    48d0:	7d62      	ldrb	r2, [r4, #21]
    48d2:	0212      	lsls	r2, r2, #8
    48d4:	7d27      	ldrb	r7, [r4, #20]
    48d6:	4317      	orrs	r7, r2
    48d8:	043f      	lsls	r7, r7, #16
    48da:	7ee1      	ldrb	r1, [r4, #27]
    48dc:	0209      	lsls	r1, r1, #8
    48de:	7ea2      	ldrb	r2, [r4, #26]
    48e0:	430a      	orrs	r2, r1
    48e2:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    48e4:	76a3      	strb	r3, [r4, #26]
    48e6:	76e3      	strb	r3, [r4, #27]
    48e8:	7523      	strb	r3, [r4, #20]
    48ea:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    48ec:	9885      	ldr	r0, [sp, #532]	; 0x214
    48ee:	3301      	adds	r3, #1
    48f0:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    48f2:	2f00      	cmp	r7, #0
    48f4:	d097      	beq.n	4826 <f_open+0x6e>
				dw = dj.fs->winsect;
    48f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    48f8:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    48fa:	0039      	movs	r1, r7
    48fc:	4b0e      	ldr	r3, [pc, #56]	; (4938 <f_open+0x180>)
    48fe:	4798      	blx	r3
				if (res == FR_OK) {
    4900:	2800      	cmp	r0, #0
    4902:	d1b5      	bne.n	4870 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    4904:	9885      	ldr	r0, [sp, #532]	; 0x214
    4906:	3f01      	subs	r7, #1
    4908:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    490a:	4641      	mov	r1, r8
    490c:	4b0b      	ldr	r3, [pc, #44]	; (493c <f_open+0x184>)
    490e:	4798      	blx	r3
	if (res == FR_OK) {
    4910:	2800      	cmp	r0, #0
    4912:	d100      	bne.n	4916 <f_open+0x15e>
    4914:	e787      	b.n	4826 <f_open+0x6e>
    4916:	e7ab      	b.n	4870 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4918:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    491a:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    491c:	423b      	tst	r3, r7
    491e:	d0b2      	beq.n	4886 <f_open+0xce>
			res = FR_INVALID_NAME;
    4920:	2006      	movs	r0, #6
    4922:	e7ad      	b.n	4880 <f_open+0xc8>
    4924:	fffffdc8 	.word	0xfffffdc8
    4928:	00003549 	.word	0x00003549
    492c:	00004445 	.word	0x00004445
    4930:	0000406d 	.word	0x0000406d
    4934:	000033c9 	.word	0x000033c9
    4938:	00003d39 	.word	0x00003d39
    493c:	000038f9 	.word	0x000038f9

00004940 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    4940:	b5f0      	push	{r4, r5, r6, r7, lr}
    4942:	46de      	mov	lr, fp
    4944:	4657      	mov	r7, sl
    4946:	464e      	mov	r6, r9
    4948:	4645      	mov	r5, r8
    494a:	b5e0      	push	{r5, r6, r7, lr}
    494c:	b083      	sub	sp, #12
    494e:	0004      	movs	r4, r0
    4950:	000d      	movs	r5, r1
    4952:	0016      	movs	r6, r2
    4954:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    4956:	2300      	movs	r3, #0
    4958:	464a      	mov	r2, r9
    495a:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    495c:	8881      	ldrh	r1, [r0, #4]
    495e:	6800      	ldr	r0, [r0, #0]
    4960:	4b7f      	ldr	r3, [pc, #508]	; (4b60 <f_write+0x220>)
    4962:	4798      	blx	r3
    4964:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4966:	2800      	cmp	r0, #0
    4968:	d000      	beq.n	496c <f_write+0x2c>
    496a:	e0f1      	b.n	4b50 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    496c:	79a3      	ldrb	r3, [r4, #6]
    496e:	b25a      	sxtb	r2, r3
    4970:	2a00      	cmp	r2, #0
    4972:	da00      	bge.n	4976 <f_write+0x36>
    4974:	e0ea      	b.n	4b4c <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    4976:	079b      	lsls	r3, r3, #30
    4978:	d402      	bmi.n	4980 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    497a:	2307      	movs	r3, #7
    497c:	9300      	str	r3, [sp, #0]
    497e:	e0e7      	b.n	4b50 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    4980:	68e3      	ldr	r3, [r4, #12]
    4982:	199a      	adds	r2, r3, r6
    4984:	4293      	cmp	r3, r2
    4986:	d810      	bhi.n	49aa <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    4988:	2e00      	cmp	r6, #0
    498a:	d00e      	beq.n	49aa <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    498c:	002f      	movs	r7, r5
    498e:	e07b      	b.n	4a88 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    4990:	2100      	movs	r1, #0
    4992:	4b74      	ldr	r3, [pc, #464]	; (4b64 <f_write+0x224>)
    4994:	4798      	blx	r3
    4996:	0003      	movs	r3, r0
    4998:	6120      	str	r0, [r4, #16]
    499a:	e003      	b.n	49a4 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    499c:	6961      	ldr	r1, [r4, #20]
    499e:	4b71      	ldr	r3, [pc, #452]	; (4b64 <f_write+0x224>)
    49a0:	4798      	blx	r3
    49a2:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    49a4:	2b00      	cmp	r3, #0
    49a6:	d000      	beq.n	49aa <f_write+0x6a>
    49a8:	e080      	b.n	4aac <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    49aa:	68a3      	ldr	r3, [r4, #8]
    49ac:	68e2      	ldr	r2, [r4, #12]
    49ae:	4293      	cmp	r3, r2
    49b0:	d900      	bls.n	49b4 <f_write+0x74>
    49b2:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    49b4:	79a3      	ldrb	r3, [r4, #6]
    49b6:	2220      	movs	r2, #32
    49b8:	4313      	orrs	r3, r2
    49ba:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    49bc:	e0c8      	b.n	4b50 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    49be:	79a2      	ldrb	r2, [r4, #6]
    49c0:	3b81      	subs	r3, #129	; 0x81
    49c2:	4313      	orrs	r3, r2
    49c4:	71a3      	strb	r3, [r4, #6]
    49c6:	2302      	movs	r3, #2
    49c8:	9300      	str	r3, [sp, #0]
    49ca:	e0c1      	b.n	4b50 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    49cc:	79a2      	ldrb	r2, [r4, #6]
    49ce:	3b7f      	subs	r3, #127	; 0x7f
    49d0:	4313      	orrs	r3, r2
    49d2:	71a3      	strb	r3, [r4, #6]
    49d4:	2301      	movs	r3, #1
    49d6:	9300      	str	r3, [sp, #0]
    49d8:	e0ba      	b.n	4b50 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    49da:	2100      	movs	r1, #0
    49dc:	4b62      	ldr	r3, [pc, #392]	; (4b68 <f_write+0x228>)
    49de:	4798      	blx	r3
    49e0:	2800      	cmp	r0, #0
    49e2:	d06d      	beq.n	4ac0 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    49e4:	79a2      	ldrb	r2, [r4, #6]
    49e6:	2380      	movs	r3, #128	; 0x80
    49e8:	425b      	negs	r3, r3
    49ea:	4313      	orrs	r3, r2
    49ec:	71a3      	strb	r3, [r4, #6]
    49ee:	2301      	movs	r3, #1
    49f0:	9300      	str	r3, [sp, #0]
    49f2:	e0ad      	b.n	4b50 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    49f4:	79a2      	ldrb	r2, [r4, #6]
    49f6:	2380      	movs	r3, #128	; 0x80
    49f8:	425b      	negs	r3, r3
    49fa:	4313      	orrs	r3, r2
    49fc:	71a3      	strb	r3, [r4, #6]
    49fe:	2302      	movs	r3, #2
    4a00:	9300      	str	r3, [sp, #0]
    4a02:	e0a5      	b.n	4b50 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    4a04:	79a2      	ldrb	r2, [r4, #6]
    4a06:	2380      	movs	r3, #128	; 0x80
    4a08:	425b      	negs	r3, r3
    4a0a:	4313      	orrs	r3, r2
    4a0c:	71a3      	strb	r3, [r4, #6]
    4a0e:	2301      	movs	r3, #1
    4a10:	9300      	str	r3, [sp, #0]
    4a12:	e09d      	b.n	4b50 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    4a14:	0240      	lsls	r0, r0, #9
    4a16:	1839      	adds	r1, r7, r0
    4a18:	3330      	adds	r3, #48	; 0x30
    4a1a:	0018      	movs	r0, r3
    4a1c:	2280      	movs	r2, #128	; 0x80
    4a1e:	0092      	lsls	r2, r2, #2
    4a20:	4b52      	ldr	r3, [pc, #328]	; (4b6c <f_write+0x22c>)
    4a22:	4798      	blx	r3
					fp->fs->wflag = 0;
    4a24:	2300      	movs	r3, #0
    4a26:	6822      	ldr	r2, [r4, #0]
    4a28:	7113      	strb	r3, [r2, #4]
    4a2a:	e072      	b.n	4b12 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    4a2c:	68a3      	ldr	r3, [r4, #8]
    4a2e:	68e2      	ldr	r2, [r4, #12]
    4a30:	4293      	cmp	r3, r2
    4a32:	d271      	bcs.n	4b18 <f_write+0x1d8>
			fp->dsect = sect;
    4a34:	4643      	mov	r3, r8
    4a36:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    4a38:	68a3      	ldr	r3, [r4, #8]
    4a3a:	05dd      	lsls	r5, r3, #23
    4a3c:	0ded      	lsrs	r5, r5, #23
    4a3e:	2380      	movs	r3, #128	; 0x80
    4a40:	009b      	lsls	r3, r3, #2
    4a42:	1b5d      	subs	r5, r3, r5
    4a44:	42b5      	cmp	r5, r6
    4a46:	d900      	bls.n	4a4a <f_write+0x10a>
    4a48:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    4a4a:	69a1      	ldr	r1, [r4, #24]
    4a4c:	6820      	ldr	r0, [r4, #0]
    4a4e:	4b46      	ldr	r3, [pc, #280]	; (4b68 <f_write+0x228>)
    4a50:	4798      	blx	r3
    4a52:	2800      	cmp	r0, #0
    4a54:	d172      	bne.n	4b3c <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    4a56:	68a3      	ldr	r3, [r4, #8]
    4a58:	05d8      	lsls	r0, r3, #23
    4a5a:	0dc0      	lsrs	r0, r0, #23
    4a5c:	3030      	adds	r0, #48	; 0x30
    4a5e:	6823      	ldr	r3, [r4, #0]
    4a60:	469c      	mov	ip, r3
    4a62:	4460      	add	r0, ip
    4a64:	002a      	movs	r2, r5
    4a66:	0039      	movs	r1, r7
    4a68:	4b40      	ldr	r3, [pc, #256]	; (4b6c <f_write+0x22c>)
    4a6a:	4798      	blx	r3
		fp->fs->wflag = 1;
    4a6c:	2301      	movs	r3, #1
    4a6e:	6822      	ldr	r2, [r4, #0]
    4a70:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    4a72:	197f      	adds	r7, r7, r5
    4a74:	68a3      	ldr	r3, [r4, #8]
    4a76:	195b      	adds	r3, r3, r5
    4a78:	60a3      	str	r3, [r4, #8]
    4a7a:	464b      	mov	r3, r9
    4a7c:	681b      	ldr	r3, [r3, #0]
    4a7e:	195b      	adds	r3, r3, r5
    4a80:	464a      	mov	r2, r9
    4a82:	6013      	str	r3, [r2, #0]
    4a84:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    4a86:	d090      	beq.n	49aa <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    4a88:	68a3      	ldr	r3, [r4, #8]
    4a8a:	05da      	lsls	r2, r3, #23
    4a8c:	d1d4      	bne.n	4a38 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    4a8e:	6820      	ldr	r0, [r4, #0]
    4a90:	7882      	ldrb	r2, [r0, #2]
    4a92:	3a01      	subs	r2, #1
    4a94:	0a5d      	lsrs	r5, r3, #9
    4a96:	4015      	ands	r5, r2
    4a98:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    4a9a:	2d00      	cmp	r5, #0
    4a9c:	d10b      	bne.n	4ab6 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d000      	beq.n	4aa4 <f_write+0x164>
    4aa2:	e77b      	b.n	499c <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    4aa4:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	d100      	bne.n	4aac <f_write+0x16c>
    4aaa:	e771      	b.n	4990 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    4aac:	2b01      	cmp	r3, #1
    4aae:	d086      	beq.n	49be <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4ab0:	1c5a      	adds	r2, r3, #1
    4ab2:	d08b      	beq.n	49cc <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    4ab4:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    4ab6:	6820      	ldr	r0, [r4, #0]
    4ab8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4aba:	69a2      	ldr	r2, [r4, #24]
    4abc:	4293      	cmp	r3, r2
    4abe:	d08c      	beq.n	49da <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    4ac0:	6823      	ldr	r3, [r4, #0]
    4ac2:	469a      	mov	sl, r3
    4ac4:	6961      	ldr	r1, [r4, #20]
    4ac6:	0018      	movs	r0, r3
    4ac8:	4b29      	ldr	r3, [pc, #164]	; (4b70 <f_write+0x230>)
    4aca:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    4acc:	2800      	cmp	r0, #0
    4ace:	d091      	beq.n	49f4 <f_write+0xb4>
			sect += csect;
    4ad0:	4680      	mov	r8, r0
    4ad2:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    4ad4:	0a73      	lsrs	r3, r6, #9
    4ad6:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    4ad8:	d0a8      	beq.n	4a2c <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    4ada:	4653      	mov	r3, sl
    4adc:	789b      	ldrb	r3, [r3, #2]
    4ade:	465a      	mov	r2, fp
    4ae0:	18aa      	adds	r2, r5, r2
    4ae2:	429a      	cmp	r2, r3
    4ae4:	d901      	bls.n	4aea <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    4ae6:	1b5b      	subs	r3, r3, r5
    4ae8:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    4aea:	465b      	mov	r3, fp
    4aec:	466a      	mov	r2, sp
    4aee:	71d3      	strb	r3, [r2, #7]
    4af0:	79d3      	ldrb	r3, [r2, #7]
    4af2:	4652      	mov	r2, sl
    4af4:	7850      	ldrb	r0, [r2, #1]
    4af6:	4642      	mov	r2, r8
    4af8:	0039      	movs	r1, r7
    4afa:	4d1e      	ldr	r5, [pc, #120]	; (4b74 <f_write+0x234>)
    4afc:	47a8      	blx	r5
    4afe:	2800      	cmp	r0, #0
    4b00:	d000      	beq.n	4b04 <f_write+0x1c4>
    4b02:	e77f      	b.n	4a04 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    4b04:	6823      	ldr	r3, [r4, #0]
    4b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b08:	4641      	mov	r1, r8
    4b0a:	1a50      	subs	r0, r2, r1
    4b0c:	4583      	cmp	fp, r0
    4b0e:	d900      	bls.n	4b12 <f_write+0x1d2>
    4b10:	e780      	b.n	4a14 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    4b12:	465b      	mov	r3, fp
    4b14:	025d      	lsls	r5, r3, #9
				continue;
    4b16:	e7ac      	b.n	4a72 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    4b18:	2100      	movs	r1, #0
    4b1a:	4650      	mov	r0, sl
    4b1c:	4b12      	ldr	r3, [pc, #72]	; (4b68 <f_write+0x228>)
    4b1e:	4798      	blx	r3
    4b20:	2800      	cmp	r0, #0
    4b22:	d103      	bne.n	4b2c <f_write+0x1ec>
				fp->fs->winsect = sect;
    4b24:	6823      	ldr	r3, [r4, #0]
    4b26:	4642      	mov	r2, r8
    4b28:	62da      	str	r2, [r3, #44]	; 0x2c
    4b2a:	e783      	b.n	4a34 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    4b2c:	79a2      	ldrb	r2, [r4, #6]
    4b2e:	2380      	movs	r3, #128	; 0x80
    4b30:	425b      	negs	r3, r3
    4b32:	4313      	orrs	r3, r2
    4b34:	71a3      	strb	r3, [r4, #6]
    4b36:	2301      	movs	r3, #1
    4b38:	9300      	str	r3, [sp, #0]
    4b3a:	e009      	b.n	4b50 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    4b3c:	79a2      	ldrb	r2, [r4, #6]
    4b3e:	2380      	movs	r3, #128	; 0x80
    4b40:	425b      	negs	r3, r3
    4b42:	4313      	orrs	r3, r2
    4b44:	71a3      	strb	r3, [r4, #6]
    4b46:	2301      	movs	r3, #1
    4b48:	9300      	str	r3, [sp, #0]
    4b4a:	e001      	b.n	4b50 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    4b4c:	2302      	movs	r3, #2
    4b4e:	9300      	str	r3, [sp, #0]
}
    4b50:	9800      	ldr	r0, [sp, #0]
    4b52:	b003      	add	sp, #12
    4b54:	bc3c      	pop	{r2, r3, r4, r5}
    4b56:	4690      	mov	r8, r2
    4b58:	4699      	mov	r9, r3
    4b5a:	46a2      	mov	sl, r4
    4b5c:	46ab      	mov	fp, r5
    4b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b60:	00003475 	.word	0x00003475
    4b64:	00003c75 	.word	0x00003c75
    4b68:	000038f9 	.word	0x000038f9
    4b6c:	00003419 	.word	0x00003419
    4b70:	0000343f 	.word	0x0000343f
    4b74:	000032d9 	.word	0x000032d9

00004b78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    4b78:	b570      	push	{r4, r5, r6, lr}
    4b7a:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    4b7c:	8881      	ldrh	r1, [r0, #4]
    4b7e:	6800      	ldr	r0, [r0, #0]
    4b80:	4b1c      	ldr	r3, [pc, #112]	; (4bf4 <f_sync+0x7c>)
    4b82:	4798      	blx	r3
	if (res == FR_OK) {
    4b84:	2800      	cmp	r0, #0
    4b86:	d102      	bne.n	4b8e <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    4b88:	79a3      	ldrb	r3, [r4, #6]
    4b8a:	069b      	lsls	r3, r3, #26
    4b8c:	d400      	bmi.n	4b90 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    4b8e:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    4b90:	69e1      	ldr	r1, [r4, #28]
    4b92:	6820      	ldr	r0, [r4, #0]
    4b94:	4b18      	ldr	r3, [pc, #96]	; (4bf8 <f_sync+0x80>)
    4b96:	4798      	blx	r3
			if (res == FR_OK) {
    4b98:	2800      	cmp	r0, #0
    4b9a:	d1f8      	bne.n	4b8e <f_sync+0x16>
				dir = fp->dir_ptr;
    4b9c:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    4b9e:	7aeb      	ldrb	r3, [r5, #11]
    4ba0:	2220      	movs	r2, #32
    4ba2:	4313      	orrs	r3, r2
    4ba4:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    4ba6:	7b23      	ldrb	r3, [r4, #12]
    4ba8:	772b      	strb	r3, [r5, #28]
    4baa:	89a3      	ldrh	r3, [r4, #12]
    4bac:	0a1b      	lsrs	r3, r3, #8
    4bae:	776b      	strb	r3, [r5, #29]
    4bb0:	89e3      	ldrh	r3, [r4, #14]
    4bb2:	77ab      	strb	r3, [r5, #30]
    4bb4:	7be3      	ldrb	r3, [r4, #15]
    4bb6:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    4bb8:	7c23      	ldrb	r3, [r4, #16]
    4bba:	76ab      	strb	r3, [r5, #26]
    4bbc:	8a23      	ldrh	r3, [r4, #16]
    4bbe:	0a1b      	lsrs	r3, r3, #8
    4bc0:	76eb      	strb	r3, [r5, #27]
    4bc2:	8a63      	ldrh	r3, [r4, #18]
    4bc4:	752b      	strb	r3, [r5, #20]
    4bc6:	8a63      	ldrh	r3, [r4, #18]
    4bc8:	0a1b      	lsrs	r3, r3, #8
    4bca:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    4bcc:	4b0b      	ldr	r3, [pc, #44]	; (4bfc <f_sync+0x84>)
    4bce:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    4bd0:	75a8      	strb	r0, [r5, #22]
    4bd2:	0a03      	lsrs	r3, r0, #8
    4bd4:	75eb      	strb	r3, [r5, #23]
    4bd6:	0c03      	lsrs	r3, r0, #16
    4bd8:	762b      	strb	r3, [r5, #24]
    4bda:	0e00      	lsrs	r0, r0, #24
    4bdc:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    4bde:	79a3      	ldrb	r3, [r4, #6]
    4be0:	2220      	movs	r2, #32
    4be2:	4393      	bics	r3, r2
    4be4:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    4be6:	2301      	movs	r3, #1
    4be8:	6822      	ldr	r2, [r4, #0]
    4bea:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    4bec:	6820      	ldr	r0, [r4, #0]
    4bee:	4b04      	ldr	r3, [pc, #16]	; (4c00 <f_sync+0x88>)
    4bf0:	4798      	blx	r3
    4bf2:	e7cc      	b.n	4b8e <f_sync+0x16>
    4bf4:	00003475 	.word	0x00003475
    4bf8:	000038f9 	.word	0x000038f9
    4bfc:	000033c9 	.word	0x000033c9
    4c00:	00004351 	.word	0x00004351

00004c04 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    4c04:	b510      	push	{r4, lr}
    4c06:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    4c08:	4b03      	ldr	r3, [pc, #12]	; (4c18 <f_close+0x14>)
    4c0a:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    4c0c:	2800      	cmp	r0, #0
    4c0e:	d101      	bne.n	4c14 <f_close+0x10>
    4c10:	2300      	movs	r3, #0
    4c12:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    4c14:	bd10      	pop	{r4, pc}
    4c16:	46c0      	nop			; (mov r8, r8)
    4c18:	00004b79 	.word	0x00004b79

00004c1c <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    4c1c:	b510      	push	{r4, lr}
    4c1e:	b082      	sub	sp, #8
    4c20:	000c      	movs	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    4c22:	466b      	mov	r3, sp
    4c24:	7018      	strb	r0, [r3, #0]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    4c26:	ab01      	add	r3, sp, #4
    4c28:	2201      	movs	r2, #1
    4c2a:	4669      	mov	r1, sp
    4c2c:	0020      	movs	r0, r4
    4c2e:	4c05      	ldr	r4, [pc, #20]	; (4c44 <f_putc+0x28>)
    4c30:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    4c32:	9b01      	ldr	r3, [sp, #4]
    4c34:	1e58      	subs	r0, r3, #1
    4c36:	1e43      	subs	r3, r0, #1
    4c38:	4198      	sbcs	r0, r3
    4c3a:	4240      	negs	r0, r0
    4c3c:	2301      	movs	r3, #1
    4c3e:	4318      	orrs	r0, r3
}
    4c40:	b002      	add	sp, #8
    4c42:	bd10      	pop	{r4, pc}
    4c44:	00004941 	.word	0x00004941

00004c48 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    4c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c4a:	0006      	movs	r6, r0
    4c4c:	000d      	movs	r5, r1
	int n;


	for (n = 0; *str; str++, n++) {
    4c4e:	7800      	ldrb	r0, [r0, #0]
    4c50:	2800      	cmp	r0, #0
    4c52:	d00b      	beq.n	4c6c <f_puts+0x24>
    4c54:	2400      	movs	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
    4c56:	4f06      	ldr	r7, [pc, #24]	; (4c70 <f_puts+0x28>)
    4c58:	0029      	movs	r1, r5
    4c5a:	47b8      	blx	r7
    4c5c:	1c43      	adds	r3, r0, #1
    4c5e:	d004      	beq.n	4c6a <f_puts+0x22>
	for (n = 0; *str; str++, n++) {
    4c60:	3401      	adds	r4, #1
    4c62:	5d30      	ldrb	r0, [r6, r4]
    4c64:	2800      	cmp	r0, #0
    4c66:	d1f7      	bne.n	4c58 <f_puts+0x10>
    4c68:	0020      	movs	r0, r4
	}
	return n;
}
    4c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (n = 0; *str; str++, n++) {
    4c6c:	2000      	movs	r0, #0
    4c6e:	e7fc      	b.n	4c6a <f_puts+0x22>
    4c70:	00004c1d 	.word	0x00004c1d

00004c74 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    4c74:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    4c76:	287f      	cmp	r0, #127	; 0x7f
    4c78:	d911      	bls.n	4c9e <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    4c7a:	2900      	cmp	r1, #0
    4c7c:	d111      	bne.n	4ca2 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    4c7e:	28c7      	cmp	r0, #199	; 0xc7
    4c80:	d017      	beq.n	4cb2 <ff_convert+0x3e>
    4c82:	4a0d      	ldr	r2, [pc, #52]	; (4cb8 <ff_convert+0x44>)
    4c84:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    4c86:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    4c88:	8811      	ldrh	r1, [r2, #0]
    4c8a:	4281      	cmp	r1, r0
    4c8c:	d004      	beq.n	4c98 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    4c8e:	3301      	adds	r3, #1
    4c90:	b29b      	uxth	r3, r3
    4c92:	3202      	adds	r2, #2
    4c94:	2b80      	cmp	r3, #128	; 0x80
    4c96:	d1f7      	bne.n	4c88 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    4c98:	3380      	adds	r3, #128	; 0x80
    4c9a:	20ff      	movs	r0, #255	; 0xff
    4c9c:	4003      	ands	r3, r0
		}
	}

	return c;
}
    4c9e:	0018      	movs	r0, r3
    4ca0:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    4ca2:	2300      	movs	r3, #0
    4ca4:	28ff      	cmp	r0, #255	; 0xff
    4ca6:	d8fa      	bhi.n	4c9e <ff_convert+0x2a>
    4ca8:	3880      	subs	r0, #128	; 0x80
    4caa:	0040      	lsls	r0, r0, #1
    4cac:	4b02      	ldr	r3, [pc, #8]	; (4cb8 <ff_convert+0x44>)
    4cae:	5ac3      	ldrh	r3, [r0, r3]
    4cb0:	e7f5      	b.n	4c9e <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    4cb2:	2300      	movs	r3, #0
    4cb4:	e7f0      	b.n	4c98 <ff_convert+0x24>
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	000054bc 	.word	0x000054bc

00004cbc <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    4cbc:	2861      	cmp	r0, #97	; 0x61
    4cbe:	d014      	beq.n	4cea <ff_wtoupper+0x2e>
    4cc0:	4b0b      	ldr	r3, [pc, #44]	; (4cf0 <ff_wtoupper+0x34>)
    4cc2:	3304      	adds	r3, #4
    4cc4:	2101      	movs	r1, #1
    4cc6:	2262      	movs	r2, #98	; 0x62
    4cc8:	4290      	cmp	r0, r2
    4cca:	d007      	beq.n	4cdc <ff_wtoupper+0x20>
    4ccc:	3101      	adds	r1, #1
    4cce:	3302      	adds	r3, #2
    4cd0:	1e9a      	subs	r2, r3, #2
    4cd2:	8812      	ldrh	r2, [r2, #0]
    4cd4:	2a00      	cmp	r2, #0
    4cd6:	d1f7      	bne.n	4cc8 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    4cd8:	0003      	movs	r3, r0
    4cda:	e004      	b.n	4ce6 <ff_wtoupper+0x2a>
    4cdc:	1e03      	subs	r3, r0, #0
    4cde:	d002      	beq.n	4ce6 <ff_wtoupper+0x2a>
    4ce0:	0049      	lsls	r1, r1, #1
    4ce2:	4b04      	ldr	r3, [pc, #16]	; (4cf4 <ff_wtoupper+0x38>)
    4ce4:	5acb      	ldrh	r3, [r1, r3]
}
    4ce6:	0018      	movs	r0, r3
    4ce8:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    4cea:	2100      	movs	r1, #0
    4cec:	e7f8      	b.n	4ce0 <ff_wtoupper+0x24>
    4cee:	46c0      	nop			; (mov r8, r8)
    4cf0:	000055bc 	.word	0x000055bc
    4cf4:	0000579c 	.word	0x0000579c

00004cf8 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    4cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cfa:	4c42      	ldr	r4, [pc, #264]	; (4e04 <main+0x10c>)
    4cfc:	44a5      	add	sp, r4

	//INITIALIZE VARIABLES
	char test_file_name[] = "0:sd_mmc_test.txt";
    4cfe:	aa95      	add	r2, sp, #596	; 0x254
    4d00:	4b41      	ldr	r3, [pc, #260]	; (4e08 <main+0x110>)
    4d02:	cb13      	ldmia	r3!, {r0, r1, r4}
    4d04:	c213      	stmia	r2!, {r0, r1, r4}
    4d06:	0011      	movs	r1, r2
    4d08:	681a      	ldr	r2, [r3, #0]
    4d0a:	600a      	str	r2, [r1, #0]
    4d0c:	889b      	ldrh	r3, [r3, #4]
    4d0e:	808b      	strh	r3, [r1, #4]
	FRESULT res;
	FATFS fs;
	FIL file_object;

	//INITIALIZE SYSTEM PERIPHERALS
	system_init();
    4d10:	4b3e      	ldr	r3, [pc, #248]	; (4e0c <main+0x114>)
    4d12:	4798      	blx	r3
	delay_init();
    4d14:	4b3e      	ldr	r3, [pc, #248]	; (4e10 <main+0x118>)
    4d16:	4798      	blx	r3
	InitializeSerialConsole();
    4d18:	4b3e      	ldr	r3, [pc, #248]	; (4e14 <main+0x11c>)
    4d1a:	4798      	blx	r3
	cpu_irq_enable();
    4d1c:	4c3e      	ldr	r4, [pc, #248]	; (4e18 <main+0x120>)
    4d1e:	2501      	movs	r5, #1
    4d20:	7025      	strb	r5, [r4, #0]
    4d22:	f3bf 8f5f 	dmb	sy
    4d26:	b662      	cpsie	i
	system_interrupt_enable_global();
	/* Initialize SD MMC stack */
	sd_mmc_init();
    4d28:	4b3c      	ldr	r3, [pc, #240]	; (4e1c <main+0x124>)
    4d2a:	4798      	blx	r3

	irq_initialize_vectors();
	cpu_irq_enable();
    4d2c:	7025      	strb	r5, [r4, #0]
    4d2e:	f3bf 8f5f 	dmb	sy
    4d32:	b662      	cpsie	i

	SerialConsoleWriteString("ESE516 - SD Card Example");	//Order to add string to TX Buffer
    4d34:	483a      	ldr	r0, [pc, #232]	; (4e20 <main+0x128>)
    4d36:	4c3b      	ldr	r4, [pc, #236]	; (4e24 <main+0x12c>)
    4d38:	47a0      	blx	r4




	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    4d3a:	483b      	ldr	r0, [pc, #236]	; (4e28 <main+0x130>)
    4d3c:	47a0      	blx	r4

	//Check SD Card is mounted
	while (1) {
		SerialConsoleWriteString("Please plug an SD/MMC card in slot.\n\r");
    4d3e:	4d39      	ldr	r5, [pc, #228]	; (4e24 <main+0x12c>)

		/* Wait card present and ready */
		do {
			status = sd_mmc_test_unit_ready(0);
			if (CTRL_FAIL == status) {
				SerialConsoleWriteString("Card install FAIL\n\r");
    4d40:	002e      	movs	r6, r5
    4d42:	e038      	b.n	4db6 <main+0xbe>
    4d44:	4839      	ldr	r0, [pc, #228]	; (4e2c <main+0x134>)
    4d46:	47b0      	blx	r6
				SerialConsoleWriteString("Please unplug and re-plug the card.\n\r");
    4d48:	4839      	ldr	r0, [pc, #228]	; (4e30 <main+0x138>)
    4d4a:	47b0      	blx	r6
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    4d4c:	4c39      	ldr	r4, [pc, #228]	; (4e34 <main+0x13c>)
    4d4e:	2000      	movs	r0, #0
    4d50:	47a0      	blx	r4
    4d52:	2802      	cmp	r0, #2
    4d54:	d1fb      	bne.n	4d4e <main+0x56>
			status = sd_mmc_test_unit_ready(0);
    4d56:	2000      	movs	r0, #0
    4d58:	47b8      	blx	r7
			if (CTRL_FAIL == status) {
    4d5a:	2801      	cmp	r0, #1
    4d5c:	d0f2      	beq.n	4d44 <main+0x4c>
				}
			}
		} while (CTRL_GOOD != status);
    4d5e:	2800      	cmp	r0, #0
    4d60:	d1f9      	bne.n	4d56 <main+0x5e>


		//Attempt to mount a FAT file system on the SD Card using FATFS
		SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    4d62:	4835      	ldr	r0, [pc, #212]	; (4e38 <main+0x140>)
    4d64:	4b2f      	ldr	r3, [pc, #188]	; (4e24 <main+0x12c>)
    4d66:	4798      	blx	r3
		memset(&fs, 0, sizeof(FATFS));
    4d68:	228c      	movs	r2, #140	; 0x8c
    4d6a:	0092      	lsls	r2, r2, #2
    4d6c:	2100      	movs	r1, #0
    4d6e:	a809      	add	r0, sp, #36	; 0x24
    4d70:	4b32      	ldr	r3, [pc, #200]	; (4e3c <main+0x144>)
    4d72:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    4d74:	a909      	add	r1, sp, #36	; 0x24
    4d76:	2000      	movs	r0, #0
    4d78:	4b31      	ldr	r3, [pc, #196]	; (4e40 <main+0x148>)
    4d7a:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    4d7c:	280b      	cmp	r0, #11
    4d7e:	d01e      	beq.n	4dbe <main+0xc6>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
			goto main_end_of_test;
		}
		SerialConsoleWriteString("[OK]\r\n");
    4d80:	4830      	ldr	r0, [pc, #192]	; (4e44 <main+0x14c>)
    4d82:	4c28      	ldr	r4, [pc, #160]	; (4e24 <main+0x12c>)
    4d84:	47a0      	blx	r4

		//Create and open a file
		SerialConsoleWriteString("Create a file (f_open)...\r\n");
    4d86:	4830      	ldr	r0, [pc, #192]	; (4e48 <main+0x150>)
    4d88:	47a0      	blx	r4
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    4d8a:	a995      	add	r1, sp, #596	; 0x254
    4d8c:	2330      	movs	r3, #48	; 0x30
    4d8e:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
    4d90:	220a      	movs	r2, #10
    4d92:	4668      	mov	r0, sp
    4d94:	4b2d      	ldr	r3, [pc, #180]	; (4e4c <main+0x154>)
    4d96:	4798      	blx	r3
				(char const *)test_file_name,
				FA_CREATE_ALWAYS | FA_WRITE);
		if (res != FR_OK) {
    4d98:	2800      	cmp	r0, #0
    4d9a:	d016      	beq.n	4dca <main+0xd2>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    4d9c:	0002      	movs	r2, r0
    4d9e:	492c      	ldr	r1, [pc, #176]	; (4e50 <main+0x158>)
    4da0:	2000      	movs	r0, #0
    4da2:	4b2c      	ldr	r3, [pc, #176]	; (4e54 <main+0x15c>)
    4da4:	4798      	blx	r3
		SerialConsoleWriteString("[OK]\r\n");
		f_close(&file_object); //Close file
		SerialConsoleWriteString("Test is successful.\n\r");

main_end_of_test:
		SerialConsoleWriteString("Please unplug the card.\n\r");
    4da6:	482c      	ldr	r0, [pc, #176]	; (4e58 <main+0x160>)
    4da8:	4b1e      	ldr	r3, [pc, #120]	; (4e24 <main+0x12c>)
    4daa:	4798      	blx	r3
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    4dac:	4c21      	ldr	r4, [pc, #132]	; (4e34 <main+0x13c>)
    4dae:	2000      	movs	r0, #0
    4db0:	47a0      	blx	r4
    4db2:	2802      	cmp	r0, #2
    4db4:	d1fb      	bne.n	4dae <main+0xb6>
		SerialConsoleWriteString("Please plug an SD/MMC card in slot.\n\r");
    4db6:	4829      	ldr	r0, [pc, #164]	; (4e5c <main+0x164>)
    4db8:	47a8      	blx	r5
			status = sd_mmc_test_unit_ready(0);
    4dba:	4f29      	ldr	r7, [pc, #164]	; (4e60 <main+0x168>)
    4dbc:	e7cb      	b.n	4d56 <main+0x5e>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    4dbe:	220b      	movs	r2, #11
    4dc0:	4923      	ldr	r1, [pc, #140]	; (4e50 <main+0x158>)
    4dc2:	2000      	movs	r0, #0
    4dc4:	4b23      	ldr	r3, [pc, #140]	; (4e54 <main+0x15c>)
    4dc6:	4798      	blx	r3
			goto main_end_of_test;
    4dc8:	e7ed      	b.n	4da6 <main+0xae>
		SerialConsoleWriteString("[OK]\r\n");
    4dca:	481e      	ldr	r0, [pc, #120]	; (4e44 <main+0x14c>)
    4dcc:	4c15      	ldr	r4, [pc, #84]	; (4e24 <main+0x12c>)
    4dce:	47a0      	blx	r4
		SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    4dd0:	4824      	ldr	r0, [pc, #144]	; (4e64 <main+0x16c>)
    4dd2:	47a0      	blx	r4
		if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
    4dd4:	4669      	mov	r1, sp
    4dd6:	4824      	ldr	r0, [pc, #144]	; (4e68 <main+0x170>)
    4dd8:	4b24      	ldr	r3, [pc, #144]	; (4e6c <main+0x174>)
    4dda:	4798      	blx	r3
    4ddc:	2800      	cmp	r0, #0
    4dde:	d107      	bne.n	4df0 <main+0xf8>
			f_close(&file_object);
    4de0:	4668      	mov	r0, sp
    4de2:	4b23      	ldr	r3, [pc, #140]	; (4e70 <main+0x178>)
    4de4:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    4de6:	4923      	ldr	r1, [pc, #140]	; (4e74 <main+0x17c>)
    4de8:	2000      	movs	r0, #0
    4dea:	4b1a      	ldr	r3, [pc, #104]	; (4e54 <main+0x15c>)
    4dec:	4798      	blx	r3
			goto main_end_of_test;
    4dee:	e7da      	b.n	4da6 <main+0xae>
		SerialConsoleWriteString("[OK]\r\n");
    4df0:	4814      	ldr	r0, [pc, #80]	; (4e44 <main+0x14c>)
    4df2:	4c0c      	ldr	r4, [pc, #48]	; (4e24 <main+0x12c>)
    4df4:	47a0      	blx	r4
		f_close(&file_object); //Close file
    4df6:	4668      	mov	r0, sp
    4df8:	4b1d      	ldr	r3, [pc, #116]	; (4e70 <main+0x178>)
    4dfa:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    4dfc:	481e      	ldr	r0, [pc, #120]	; (4e78 <main+0x180>)
    4dfe:	47a0      	blx	r4
    4e00:	e7d1      	b.n	4da6 <main+0xae>
    4e02:	46c0      	nop			; (mov r8, r8)
    4e04:	fffffd94 	.word	0xfffffd94
    4e08:	00005aec 	.word	0x00005aec
    4e0c:	00003065 	.word	0x00003065
    4e10:	000014e9 	.word	0x000014e9
    4e14:	00000235 	.word	0x00000235
    4e18:	20000001 	.word	0x20000001
    4e1c:	00000551 	.word	0x00000551
    4e20:	0000597c 	.word	0x0000597c
    4e24:	0000035d 	.word	0x0000035d
    4e28:	00005998 	.word	0x00005998
    4e2c:	000059e8 	.word	0x000059e8
    4e30:	000059fc 	.word	0x000059fc
    4e34:	00000571 	.word	0x00000571
    4e38:	00005a24 	.word	0x00005a24
    4e3c:	00005219 	.word	0x00005219
    4e40:	00004789 	.word	0x00004789
    4e44:	00005a50 	.word	0x00005a50
    4e48:	00005a58 	.word	0x00005a58
    4e4c:	000047b9 	.word	0x000047b9
    4e50:	00005a40 	.word	0x00005a40
    4e54:	00000425 	.word	0x00000425
    4e58:	00005ad0 	.word	0x00005ad0
    4e5c:	000059c0 	.word	0x000059c0
    4e60:	00000c85 	.word	0x00000c85
    4e64:	00005a74 	.word	0x00005a74
    4e68:	00005a98 	.word	0x00005a98
    4e6c:	00004c49 	.word	0x00004c49
    4e70:	00004c05 	.word	0x00004c05
    4e74:	00005aac 	.word	0x00005aac
    4e78:	00005ab8 	.word	0x00005ab8

00004e7c <__udivsi3>:
    4e7c:	2200      	movs	r2, #0
    4e7e:	0843      	lsrs	r3, r0, #1
    4e80:	428b      	cmp	r3, r1
    4e82:	d374      	bcc.n	4f6e <__udivsi3+0xf2>
    4e84:	0903      	lsrs	r3, r0, #4
    4e86:	428b      	cmp	r3, r1
    4e88:	d35f      	bcc.n	4f4a <__udivsi3+0xce>
    4e8a:	0a03      	lsrs	r3, r0, #8
    4e8c:	428b      	cmp	r3, r1
    4e8e:	d344      	bcc.n	4f1a <__udivsi3+0x9e>
    4e90:	0b03      	lsrs	r3, r0, #12
    4e92:	428b      	cmp	r3, r1
    4e94:	d328      	bcc.n	4ee8 <__udivsi3+0x6c>
    4e96:	0c03      	lsrs	r3, r0, #16
    4e98:	428b      	cmp	r3, r1
    4e9a:	d30d      	bcc.n	4eb8 <__udivsi3+0x3c>
    4e9c:	22ff      	movs	r2, #255	; 0xff
    4e9e:	0209      	lsls	r1, r1, #8
    4ea0:	ba12      	rev	r2, r2
    4ea2:	0c03      	lsrs	r3, r0, #16
    4ea4:	428b      	cmp	r3, r1
    4ea6:	d302      	bcc.n	4eae <__udivsi3+0x32>
    4ea8:	1212      	asrs	r2, r2, #8
    4eaa:	0209      	lsls	r1, r1, #8
    4eac:	d065      	beq.n	4f7a <__udivsi3+0xfe>
    4eae:	0b03      	lsrs	r3, r0, #12
    4eb0:	428b      	cmp	r3, r1
    4eb2:	d319      	bcc.n	4ee8 <__udivsi3+0x6c>
    4eb4:	e000      	b.n	4eb8 <__udivsi3+0x3c>
    4eb6:	0a09      	lsrs	r1, r1, #8
    4eb8:	0bc3      	lsrs	r3, r0, #15
    4eba:	428b      	cmp	r3, r1
    4ebc:	d301      	bcc.n	4ec2 <__udivsi3+0x46>
    4ebe:	03cb      	lsls	r3, r1, #15
    4ec0:	1ac0      	subs	r0, r0, r3
    4ec2:	4152      	adcs	r2, r2
    4ec4:	0b83      	lsrs	r3, r0, #14
    4ec6:	428b      	cmp	r3, r1
    4ec8:	d301      	bcc.n	4ece <__udivsi3+0x52>
    4eca:	038b      	lsls	r3, r1, #14
    4ecc:	1ac0      	subs	r0, r0, r3
    4ece:	4152      	adcs	r2, r2
    4ed0:	0b43      	lsrs	r3, r0, #13
    4ed2:	428b      	cmp	r3, r1
    4ed4:	d301      	bcc.n	4eda <__udivsi3+0x5e>
    4ed6:	034b      	lsls	r3, r1, #13
    4ed8:	1ac0      	subs	r0, r0, r3
    4eda:	4152      	adcs	r2, r2
    4edc:	0b03      	lsrs	r3, r0, #12
    4ede:	428b      	cmp	r3, r1
    4ee0:	d301      	bcc.n	4ee6 <__udivsi3+0x6a>
    4ee2:	030b      	lsls	r3, r1, #12
    4ee4:	1ac0      	subs	r0, r0, r3
    4ee6:	4152      	adcs	r2, r2
    4ee8:	0ac3      	lsrs	r3, r0, #11
    4eea:	428b      	cmp	r3, r1
    4eec:	d301      	bcc.n	4ef2 <__udivsi3+0x76>
    4eee:	02cb      	lsls	r3, r1, #11
    4ef0:	1ac0      	subs	r0, r0, r3
    4ef2:	4152      	adcs	r2, r2
    4ef4:	0a83      	lsrs	r3, r0, #10
    4ef6:	428b      	cmp	r3, r1
    4ef8:	d301      	bcc.n	4efe <__udivsi3+0x82>
    4efa:	028b      	lsls	r3, r1, #10
    4efc:	1ac0      	subs	r0, r0, r3
    4efe:	4152      	adcs	r2, r2
    4f00:	0a43      	lsrs	r3, r0, #9
    4f02:	428b      	cmp	r3, r1
    4f04:	d301      	bcc.n	4f0a <__udivsi3+0x8e>
    4f06:	024b      	lsls	r3, r1, #9
    4f08:	1ac0      	subs	r0, r0, r3
    4f0a:	4152      	adcs	r2, r2
    4f0c:	0a03      	lsrs	r3, r0, #8
    4f0e:	428b      	cmp	r3, r1
    4f10:	d301      	bcc.n	4f16 <__udivsi3+0x9a>
    4f12:	020b      	lsls	r3, r1, #8
    4f14:	1ac0      	subs	r0, r0, r3
    4f16:	4152      	adcs	r2, r2
    4f18:	d2cd      	bcs.n	4eb6 <__udivsi3+0x3a>
    4f1a:	09c3      	lsrs	r3, r0, #7
    4f1c:	428b      	cmp	r3, r1
    4f1e:	d301      	bcc.n	4f24 <__udivsi3+0xa8>
    4f20:	01cb      	lsls	r3, r1, #7
    4f22:	1ac0      	subs	r0, r0, r3
    4f24:	4152      	adcs	r2, r2
    4f26:	0983      	lsrs	r3, r0, #6
    4f28:	428b      	cmp	r3, r1
    4f2a:	d301      	bcc.n	4f30 <__udivsi3+0xb4>
    4f2c:	018b      	lsls	r3, r1, #6
    4f2e:	1ac0      	subs	r0, r0, r3
    4f30:	4152      	adcs	r2, r2
    4f32:	0943      	lsrs	r3, r0, #5
    4f34:	428b      	cmp	r3, r1
    4f36:	d301      	bcc.n	4f3c <__udivsi3+0xc0>
    4f38:	014b      	lsls	r3, r1, #5
    4f3a:	1ac0      	subs	r0, r0, r3
    4f3c:	4152      	adcs	r2, r2
    4f3e:	0903      	lsrs	r3, r0, #4
    4f40:	428b      	cmp	r3, r1
    4f42:	d301      	bcc.n	4f48 <__udivsi3+0xcc>
    4f44:	010b      	lsls	r3, r1, #4
    4f46:	1ac0      	subs	r0, r0, r3
    4f48:	4152      	adcs	r2, r2
    4f4a:	08c3      	lsrs	r3, r0, #3
    4f4c:	428b      	cmp	r3, r1
    4f4e:	d301      	bcc.n	4f54 <__udivsi3+0xd8>
    4f50:	00cb      	lsls	r3, r1, #3
    4f52:	1ac0      	subs	r0, r0, r3
    4f54:	4152      	adcs	r2, r2
    4f56:	0883      	lsrs	r3, r0, #2
    4f58:	428b      	cmp	r3, r1
    4f5a:	d301      	bcc.n	4f60 <__udivsi3+0xe4>
    4f5c:	008b      	lsls	r3, r1, #2
    4f5e:	1ac0      	subs	r0, r0, r3
    4f60:	4152      	adcs	r2, r2
    4f62:	0843      	lsrs	r3, r0, #1
    4f64:	428b      	cmp	r3, r1
    4f66:	d301      	bcc.n	4f6c <__udivsi3+0xf0>
    4f68:	004b      	lsls	r3, r1, #1
    4f6a:	1ac0      	subs	r0, r0, r3
    4f6c:	4152      	adcs	r2, r2
    4f6e:	1a41      	subs	r1, r0, r1
    4f70:	d200      	bcs.n	4f74 <__udivsi3+0xf8>
    4f72:	4601      	mov	r1, r0
    4f74:	4152      	adcs	r2, r2
    4f76:	4610      	mov	r0, r2
    4f78:	4770      	bx	lr
    4f7a:	e7ff      	b.n	4f7c <__udivsi3+0x100>
    4f7c:	b501      	push	{r0, lr}
    4f7e:	2000      	movs	r0, #0
    4f80:	f000 f8f0 	bl	5164 <__aeabi_idiv0>
    4f84:	bd02      	pop	{r1, pc}
    4f86:	46c0      	nop			; (mov r8, r8)

00004f88 <__aeabi_uidivmod>:
    4f88:	2900      	cmp	r1, #0
    4f8a:	d0f7      	beq.n	4f7c <__udivsi3+0x100>
    4f8c:	e776      	b.n	4e7c <__udivsi3>
    4f8e:	4770      	bx	lr

00004f90 <__divsi3>:
    4f90:	4603      	mov	r3, r0
    4f92:	430b      	orrs	r3, r1
    4f94:	d47f      	bmi.n	5096 <__divsi3+0x106>
    4f96:	2200      	movs	r2, #0
    4f98:	0843      	lsrs	r3, r0, #1
    4f9a:	428b      	cmp	r3, r1
    4f9c:	d374      	bcc.n	5088 <__divsi3+0xf8>
    4f9e:	0903      	lsrs	r3, r0, #4
    4fa0:	428b      	cmp	r3, r1
    4fa2:	d35f      	bcc.n	5064 <__divsi3+0xd4>
    4fa4:	0a03      	lsrs	r3, r0, #8
    4fa6:	428b      	cmp	r3, r1
    4fa8:	d344      	bcc.n	5034 <__divsi3+0xa4>
    4faa:	0b03      	lsrs	r3, r0, #12
    4fac:	428b      	cmp	r3, r1
    4fae:	d328      	bcc.n	5002 <__divsi3+0x72>
    4fb0:	0c03      	lsrs	r3, r0, #16
    4fb2:	428b      	cmp	r3, r1
    4fb4:	d30d      	bcc.n	4fd2 <__divsi3+0x42>
    4fb6:	22ff      	movs	r2, #255	; 0xff
    4fb8:	0209      	lsls	r1, r1, #8
    4fba:	ba12      	rev	r2, r2
    4fbc:	0c03      	lsrs	r3, r0, #16
    4fbe:	428b      	cmp	r3, r1
    4fc0:	d302      	bcc.n	4fc8 <__divsi3+0x38>
    4fc2:	1212      	asrs	r2, r2, #8
    4fc4:	0209      	lsls	r1, r1, #8
    4fc6:	d065      	beq.n	5094 <__divsi3+0x104>
    4fc8:	0b03      	lsrs	r3, r0, #12
    4fca:	428b      	cmp	r3, r1
    4fcc:	d319      	bcc.n	5002 <__divsi3+0x72>
    4fce:	e000      	b.n	4fd2 <__divsi3+0x42>
    4fd0:	0a09      	lsrs	r1, r1, #8
    4fd2:	0bc3      	lsrs	r3, r0, #15
    4fd4:	428b      	cmp	r3, r1
    4fd6:	d301      	bcc.n	4fdc <__divsi3+0x4c>
    4fd8:	03cb      	lsls	r3, r1, #15
    4fda:	1ac0      	subs	r0, r0, r3
    4fdc:	4152      	adcs	r2, r2
    4fde:	0b83      	lsrs	r3, r0, #14
    4fe0:	428b      	cmp	r3, r1
    4fe2:	d301      	bcc.n	4fe8 <__divsi3+0x58>
    4fe4:	038b      	lsls	r3, r1, #14
    4fe6:	1ac0      	subs	r0, r0, r3
    4fe8:	4152      	adcs	r2, r2
    4fea:	0b43      	lsrs	r3, r0, #13
    4fec:	428b      	cmp	r3, r1
    4fee:	d301      	bcc.n	4ff4 <__divsi3+0x64>
    4ff0:	034b      	lsls	r3, r1, #13
    4ff2:	1ac0      	subs	r0, r0, r3
    4ff4:	4152      	adcs	r2, r2
    4ff6:	0b03      	lsrs	r3, r0, #12
    4ff8:	428b      	cmp	r3, r1
    4ffa:	d301      	bcc.n	5000 <__divsi3+0x70>
    4ffc:	030b      	lsls	r3, r1, #12
    4ffe:	1ac0      	subs	r0, r0, r3
    5000:	4152      	adcs	r2, r2
    5002:	0ac3      	lsrs	r3, r0, #11
    5004:	428b      	cmp	r3, r1
    5006:	d301      	bcc.n	500c <__divsi3+0x7c>
    5008:	02cb      	lsls	r3, r1, #11
    500a:	1ac0      	subs	r0, r0, r3
    500c:	4152      	adcs	r2, r2
    500e:	0a83      	lsrs	r3, r0, #10
    5010:	428b      	cmp	r3, r1
    5012:	d301      	bcc.n	5018 <__divsi3+0x88>
    5014:	028b      	lsls	r3, r1, #10
    5016:	1ac0      	subs	r0, r0, r3
    5018:	4152      	adcs	r2, r2
    501a:	0a43      	lsrs	r3, r0, #9
    501c:	428b      	cmp	r3, r1
    501e:	d301      	bcc.n	5024 <__divsi3+0x94>
    5020:	024b      	lsls	r3, r1, #9
    5022:	1ac0      	subs	r0, r0, r3
    5024:	4152      	adcs	r2, r2
    5026:	0a03      	lsrs	r3, r0, #8
    5028:	428b      	cmp	r3, r1
    502a:	d301      	bcc.n	5030 <__divsi3+0xa0>
    502c:	020b      	lsls	r3, r1, #8
    502e:	1ac0      	subs	r0, r0, r3
    5030:	4152      	adcs	r2, r2
    5032:	d2cd      	bcs.n	4fd0 <__divsi3+0x40>
    5034:	09c3      	lsrs	r3, r0, #7
    5036:	428b      	cmp	r3, r1
    5038:	d301      	bcc.n	503e <__divsi3+0xae>
    503a:	01cb      	lsls	r3, r1, #7
    503c:	1ac0      	subs	r0, r0, r3
    503e:	4152      	adcs	r2, r2
    5040:	0983      	lsrs	r3, r0, #6
    5042:	428b      	cmp	r3, r1
    5044:	d301      	bcc.n	504a <__divsi3+0xba>
    5046:	018b      	lsls	r3, r1, #6
    5048:	1ac0      	subs	r0, r0, r3
    504a:	4152      	adcs	r2, r2
    504c:	0943      	lsrs	r3, r0, #5
    504e:	428b      	cmp	r3, r1
    5050:	d301      	bcc.n	5056 <__divsi3+0xc6>
    5052:	014b      	lsls	r3, r1, #5
    5054:	1ac0      	subs	r0, r0, r3
    5056:	4152      	adcs	r2, r2
    5058:	0903      	lsrs	r3, r0, #4
    505a:	428b      	cmp	r3, r1
    505c:	d301      	bcc.n	5062 <__divsi3+0xd2>
    505e:	010b      	lsls	r3, r1, #4
    5060:	1ac0      	subs	r0, r0, r3
    5062:	4152      	adcs	r2, r2
    5064:	08c3      	lsrs	r3, r0, #3
    5066:	428b      	cmp	r3, r1
    5068:	d301      	bcc.n	506e <__divsi3+0xde>
    506a:	00cb      	lsls	r3, r1, #3
    506c:	1ac0      	subs	r0, r0, r3
    506e:	4152      	adcs	r2, r2
    5070:	0883      	lsrs	r3, r0, #2
    5072:	428b      	cmp	r3, r1
    5074:	d301      	bcc.n	507a <__divsi3+0xea>
    5076:	008b      	lsls	r3, r1, #2
    5078:	1ac0      	subs	r0, r0, r3
    507a:	4152      	adcs	r2, r2
    507c:	0843      	lsrs	r3, r0, #1
    507e:	428b      	cmp	r3, r1
    5080:	d301      	bcc.n	5086 <__divsi3+0xf6>
    5082:	004b      	lsls	r3, r1, #1
    5084:	1ac0      	subs	r0, r0, r3
    5086:	4152      	adcs	r2, r2
    5088:	1a41      	subs	r1, r0, r1
    508a:	d200      	bcs.n	508e <__divsi3+0xfe>
    508c:	4601      	mov	r1, r0
    508e:	4152      	adcs	r2, r2
    5090:	4610      	mov	r0, r2
    5092:	4770      	bx	lr
    5094:	e05d      	b.n	5152 <__divsi3+0x1c2>
    5096:	0fca      	lsrs	r2, r1, #31
    5098:	d000      	beq.n	509c <__divsi3+0x10c>
    509a:	4249      	negs	r1, r1
    509c:	1003      	asrs	r3, r0, #32
    509e:	d300      	bcc.n	50a2 <__divsi3+0x112>
    50a0:	4240      	negs	r0, r0
    50a2:	4053      	eors	r3, r2
    50a4:	2200      	movs	r2, #0
    50a6:	469c      	mov	ip, r3
    50a8:	0903      	lsrs	r3, r0, #4
    50aa:	428b      	cmp	r3, r1
    50ac:	d32d      	bcc.n	510a <__divsi3+0x17a>
    50ae:	0a03      	lsrs	r3, r0, #8
    50b0:	428b      	cmp	r3, r1
    50b2:	d312      	bcc.n	50da <__divsi3+0x14a>
    50b4:	22fc      	movs	r2, #252	; 0xfc
    50b6:	0189      	lsls	r1, r1, #6
    50b8:	ba12      	rev	r2, r2
    50ba:	0a03      	lsrs	r3, r0, #8
    50bc:	428b      	cmp	r3, r1
    50be:	d30c      	bcc.n	50da <__divsi3+0x14a>
    50c0:	0189      	lsls	r1, r1, #6
    50c2:	1192      	asrs	r2, r2, #6
    50c4:	428b      	cmp	r3, r1
    50c6:	d308      	bcc.n	50da <__divsi3+0x14a>
    50c8:	0189      	lsls	r1, r1, #6
    50ca:	1192      	asrs	r2, r2, #6
    50cc:	428b      	cmp	r3, r1
    50ce:	d304      	bcc.n	50da <__divsi3+0x14a>
    50d0:	0189      	lsls	r1, r1, #6
    50d2:	d03a      	beq.n	514a <__divsi3+0x1ba>
    50d4:	1192      	asrs	r2, r2, #6
    50d6:	e000      	b.n	50da <__divsi3+0x14a>
    50d8:	0989      	lsrs	r1, r1, #6
    50da:	09c3      	lsrs	r3, r0, #7
    50dc:	428b      	cmp	r3, r1
    50de:	d301      	bcc.n	50e4 <__divsi3+0x154>
    50e0:	01cb      	lsls	r3, r1, #7
    50e2:	1ac0      	subs	r0, r0, r3
    50e4:	4152      	adcs	r2, r2
    50e6:	0983      	lsrs	r3, r0, #6
    50e8:	428b      	cmp	r3, r1
    50ea:	d301      	bcc.n	50f0 <__divsi3+0x160>
    50ec:	018b      	lsls	r3, r1, #6
    50ee:	1ac0      	subs	r0, r0, r3
    50f0:	4152      	adcs	r2, r2
    50f2:	0943      	lsrs	r3, r0, #5
    50f4:	428b      	cmp	r3, r1
    50f6:	d301      	bcc.n	50fc <__divsi3+0x16c>
    50f8:	014b      	lsls	r3, r1, #5
    50fa:	1ac0      	subs	r0, r0, r3
    50fc:	4152      	adcs	r2, r2
    50fe:	0903      	lsrs	r3, r0, #4
    5100:	428b      	cmp	r3, r1
    5102:	d301      	bcc.n	5108 <__divsi3+0x178>
    5104:	010b      	lsls	r3, r1, #4
    5106:	1ac0      	subs	r0, r0, r3
    5108:	4152      	adcs	r2, r2
    510a:	08c3      	lsrs	r3, r0, #3
    510c:	428b      	cmp	r3, r1
    510e:	d301      	bcc.n	5114 <__divsi3+0x184>
    5110:	00cb      	lsls	r3, r1, #3
    5112:	1ac0      	subs	r0, r0, r3
    5114:	4152      	adcs	r2, r2
    5116:	0883      	lsrs	r3, r0, #2
    5118:	428b      	cmp	r3, r1
    511a:	d301      	bcc.n	5120 <__divsi3+0x190>
    511c:	008b      	lsls	r3, r1, #2
    511e:	1ac0      	subs	r0, r0, r3
    5120:	4152      	adcs	r2, r2
    5122:	d2d9      	bcs.n	50d8 <__divsi3+0x148>
    5124:	0843      	lsrs	r3, r0, #1
    5126:	428b      	cmp	r3, r1
    5128:	d301      	bcc.n	512e <__divsi3+0x19e>
    512a:	004b      	lsls	r3, r1, #1
    512c:	1ac0      	subs	r0, r0, r3
    512e:	4152      	adcs	r2, r2
    5130:	1a41      	subs	r1, r0, r1
    5132:	d200      	bcs.n	5136 <__divsi3+0x1a6>
    5134:	4601      	mov	r1, r0
    5136:	4663      	mov	r3, ip
    5138:	4152      	adcs	r2, r2
    513a:	105b      	asrs	r3, r3, #1
    513c:	4610      	mov	r0, r2
    513e:	d301      	bcc.n	5144 <__divsi3+0x1b4>
    5140:	4240      	negs	r0, r0
    5142:	2b00      	cmp	r3, #0
    5144:	d500      	bpl.n	5148 <__divsi3+0x1b8>
    5146:	4249      	negs	r1, r1
    5148:	4770      	bx	lr
    514a:	4663      	mov	r3, ip
    514c:	105b      	asrs	r3, r3, #1
    514e:	d300      	bcc.n	5152 <__divsi3+0x1c2>
    5150:	4240      	negs	r0, r0
    5152:	b501      	push	{r0, lr}
    5154:	2000      	movs	r0, #0
    5156:	f000 f805 	bl	5164 <__aeabi_idiv0>
    515a:	bd02      	pop	{r1, pc}

0000515c <__aeabi_idivmod>:
    515c:	2900      	cmp	r1, #0
    515e:	d0f8      	beq.n	5152 <__divsi3+0x1c2>
    5160:	e716      	b.n	4f90 <__divsi3>
    5162:	4770      	bx	lr

00005164 <__aeabi_idiv0>:
    5164:	4770      	bx	lr
    5166:	46c0      	nop			; (mov r8, r8)

00005168 <__aeabi_lmul>:
    5168:	b5f0      	push	{r4, r5, r6, r7, lr}
    516a:	46ce      	mov	lr, r9
    516c:	4647      	mov	r7, r8
    516e:	0415      	lsls	r5, r2, #16
    5170:	0c2d      	lsrs	r5, r5, #16
    5172:	002e      	movs	r6, r5
    5174:	b580      	push	{r7, lr}
    5176:	0407      	lsls	r7, r0, #16
    5178:	0c14      	lsrs	r4, r2, #16
    517a:	0c3f      	lsrs	r7, r7, #16
    517c:	4699      	mov	r9, r3
    517e:	0c03      	lsrs	r3, r0, #16
    5180:	437e      	muls	r6, r7
    5182:	435d      	muls	r5, r3
    5184:	4367      	muls	r7, r4
    5186:	4363      	muls	r3, r4
    5188:	197f      	adds	r7, r7, r5
    518a:	0c34      	lsrs	r4, r6, #16
    518c:	19e4      	adds	r4, r4, r7
    518e:	469c      	mov	ip, r3
    5190:	42a5      	cmp	r5, r4
    5192:	d903      	bls.n	519c <__aeabi_lmul+0x34>
    5194:	2380      	movs	r3, #128	; 0x80
    5196:	025b      	lsls	r3, r3, #9
    5198:	4698      	mov	r8, r3
    519a:	44c4      	add	ip, r8
    519c:	464b      	mov	r3, r9
    519e:	4351      	muls	r1, r2
    51a0:	4343      	muls	r3, r0
    51a2:	0436      	lsls	r6, r6, #16
    51a4:	0c36      	lsrs	r6, r6, #16
    51a6:	0c25      	lsrs	r5, r4, #16
    51a8:	0424      	lsls	r4, r4, #16
    51aa:	4465      	add	r5, ip
    51ac:	19a4      	adds	r4, r4, r6
    51ae:	1859      	adds	r1, r3, r1
    51b0:	1949      	adds	r1, r1, r5
    51b2:	0020      	movs	r0, r4
    51b4:	bc0c      	pop	{r2, r3}
    51b6:	4690      	mov	r8, r2
    51b8:	4699      	mov	r9, r3
    51ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000051bc <__libc_init_array>:
    51bc:	b570      	push	{r4, r5, r6, lr}
    51be:	2600      	movs	r6, #0
    51c0:	4d0c      	ldr	r5, [pc, #48]	; (51f4 <__libc_init_array+0x38>)
    51c2:	4c0d      	ldr	r4, [pc, #52]	; (51f8 <__libc_init_array+0x3c>)
    51c4:	1b64      	subs	r4, r4, r5
    51c6:	10a4      	asrs	r4, r4, #2
    51c8:	42a6      	cmp	r6, r4
    51ca:	d109      	bne.n	51e0 <__libc_init_array+0x24>
    51cc:	2600      	movs	r6, #0
    51ce:	f000 fc97 	bl	5b00 <_init>
    51d2:	4d0a      	ldr	r5, [pc, #40]	; (51fc <__libc_init_array+0x40>)
    51d4:	4c0a      	ldr	r4, [pc, #40]	; (5200 <__libc_init_array+0x44>)
    51d6:	1b64      	subs	r4, r4, r5
    51d8:	10a4      	asrs	r4, r4, #2
    51da:	42a6      	cmp	r6, r4
    51dc:	d105      	bne.n	51ea <__libc_init_array+0x2e>
    51de:	bd70      	pop	{r4, r5, r6, pc}
    51e0:	00b3      	lsls	r3, r6, #2
    51e2:	58eb      	ldr	r3, [r5, r3]
    51e4:	4798      	blx	r3
    51e6:	3601      	adds	r6, #1
    51e8:	e7ee      	b.n	51c8 <__libc_init_array+0xc>
    51ea:	00b3      	lsls	r3, r6, #2
    51ec:	58eb      	ldr	r3, [r5, r3]
    51ee:	4798      	blx	r3
    51f0:	3601      	adds	r6, #1
    51f2:	e7f2      	b.n	51da <__libc_init_array+0x1e>
    51f4:	00005b0c 	.word	0x00005b0c
    51f8:	00005b0c 	.word	0x00005b0c
    51fc:	00005b0c 	.word	0x00005b0c
    5200:	00005b10 	.word	0x00005b10

00005204 <malloc>:
    5204:	b510      	push	{r4, lr}
    5206:	4b03      	ldr	r3, [pc, #12]	; (5214 <malloc+0x10>)
    5208:	0001      	movs	r1, r0
    520a:	6818      	ldr	r0, [r3, #0]
    520c:	f000 f80c 	bl	5228 <_malloc_r>
    5210:	bd10      	pop	{r4, pc}
    5212:	46c0      	nop			; (mov r8, r8)
    5214:	20000004 	.word	0x20000004

00005218 <memset>:
    5218:	0003      	movs	r3, r0
    521a:	1882      	adds	r2, r0, r2
    521c:	4293      	cmp	r3, r2
    521e:	d100      	bne.n	5222 <memset+0xa>
    5220:	4770      	bx	lr
    5222:	7019      	strb	r1, [r3, #0]
    5224:	3301      	adds	r3, #1
    5226:	e7f9      	b.n	521c <memset+0x4>

00005228 <_malloc_r>:
    5228:	2303      	movs	r3, #3
    522a:	b570      	push	{r4, r5, r6, lr}
    522c:	1ccd      	adds	r5, r1, #3
    522e:	439d      	bics	r5, r3
    5230:	3508      	adds	r5, #8
    5232:	0006      	movs	r6, r0
    5234:	2d0c      	cmp	r5, #12
    5236:	d21e      	bcs.n	5276 <_malloc_r+0x4e>
    5238:	250c      	movs	r5, #12
    523a:	42a9      	cmp	r1, r5
    523c:	d81d      	bhi.n	527a <_malloc_r+0x52>
    523e:	0030      	movs	r0, r6
    5240:	f000 f869 	bl	5316 <__malloc_lock>
    5244:	4a25      	ldr	r2, [pc, #148]	; (52dc <_malloc_r+0xb4>)
    5246:	6814      	ldr	r4, [r2, #0]
    5248:	0021      	movs	r1, r4
    524a:	2900      	cmp	r1, #0
    524c:	d119      	bne.n	5282 <_malloc_r+0x5a>
    524e:	4c24      	ldr	r4, [pc, #144]	; (52e0 <_malloc_r+0xb8>)
    5250:	6823      	ldr	r3, [r4, #0]
    5252:	2b00      	cmp	r3, #0
    5254:	d103      	bne.n	525e <_malloc_r+0x36>
    5256:	0030      	movs	r0, r6
    5258:	f000 f844 	bl	52e4 <_sbrk_r>
    525c:	6020      	str	r0, [r4, #0]
    525e:	0029      	movs	r1, r5
    5260:	0030      	movs	r0, r6
    5262:	f000 f83f 	bl	52e4 <_sbrk_r>
    5266:	1c43      	adds	r3, r0, #1
    5268:	d12c      	bne.n	52c4 <_malloc_r+0x9c>
    526a:	230c      	movs	r3, #12
    526c:	0030      	movs	r0, r6
    526e:	6033      	str	r3, [r6, #0]
    5270:	f000 f852 	bl	5318 <__malloc_unlock>
    5274:	e003      	b.n	527e <_malloc_r+0x56>
    5276:	2d00      	cmp	r5, #0
    5278:	dadf      	bge.n	523a <_malloc_r+0x12>
    527a:	230c      	movs	r3, #12
    527c:	6033      	str	r3, [r6, #0]
    527e:	2000      	movs	r0, #0
    5280:	bd70      	pop	{r4, r5, r6, pc}
    5282:	680b      	ldr	r3, [r1, #0]
    5284:	1b5b      	subs	r3, r3, r5
    5286:	d41a      	bmi.n	52be <_malloc_r+0x96>
    5288:	2b0b      	cmp	r3, #11
    528a:	d903      	bls.n	5294 <_malloc_r+0x6c>
    528c:	600b      	str	r3, [r1, #0]
    528e:	18cc      	adds	r4, r1, r3
    5290:	6025      	str	r5, [r4, #0]
    5292:	e003      	b.n	529c <_malloc_r+0x74>
    5294:	428c      	cmp	r4, r1
    5296:	d10e      	bne.n	52b6 <_malloc_r+0x8e>
    5298:	6863      	ldr	r3, [r4, #4]
    529a:	6013      	str	r3, [r2, #0]
    529c:	0030      	movs	r0, r6
    529e:	f000 f83b 	bl	5318 <__malloc_unlock>
    52a2:	0020      	movs	r0, r4
    52a4:	2207      	movs	r2, #7
    52a6:	300b      	adds	r0, #11
    52a8:	1d23      	adds	r3, r4, #4
    52aa:	4390      	bics	r0, r2
    52ac:	1ac3      	subs	r3, r0, r3
    52ae:	d0e7      	beq.n	5280 <_malloc_r+0x58>
    52b0:	425a      	negs	r2, r3
    52b2:	50e2      	str	r2, [r4, r3]
    52b4:	e7e4      	b.n	5280 <_malloc_r+0x58>
    52b6:	684b      	ldr	r3, [r1, #4]
    52b8:	6063      	str	r3, [r4, #4]
    52ba:	000c      	movs	r4, r1
    52bc:	e7ee      	b.n	529c <_malloc_r+0x74>
    52be:	000c      	movs	r4, r1
    52c0:	6849      	ldr	r1, [r1, #4]
    52c2:	e7c2      	b.n	524a <_malloc_r+0x22>
    52c4:	2303      	movs	r3, #3
    52c6:	1cc4      	adds	r4, r0, #3
    52c8:	439c      	bics	r4, r3
    52ca:	42a0      	cmp	r0, r4
    52cc:	d0e0      	beq.n	5290 <_malloc_r+0x68>
    52ce:	1a21      	subs	r1, r4, r0
    52d0:	0030      	movs	r0, r6
    52d2:	f000 f807 	bl	52e4 <_sbrk_r>
    52d6:	1c43      	adds	r3, r0, #1
    52d8:	d1da      	bne.n	5290 <_malloc_r+0x68>
    52da:	e7c6      	b.n	526a <_malloc_r+0x42>
    52dc:	2000016c 	.word	0x2000016c
    52e0:	20000170 	.word	0x20000170

000052e4 <_sbrk_r>:
    52e4:	2300      	movs	r3, #0
    52e6:	b570      	push	{r4, r5, r6, lr}
    52e8:	4c06      	ldr	r4, [pc, #24]	; (5304 <_sbrk_r+0x20>)
    52ea:	0005      	movs	r5, r0
    52ec:	0008      	movs	r0, r1
    52ee:	6023      	str	r3, [r4, #0]
    52f0:	f7fd ff42 	bl	3178 <_sbrk>
    52f4:	1c43      	adds	r3, r0, #1
    52f6:	d103      	bne.n	5300 <_sbrk_r+0x1c>
    52f8:	6823      	ldr	r3, [r4, #0]
    52fa:	2b00      	cmp	r3, #0
    52fc:	d000      	beq.n	5300 <_sbrk_r+0x1c>
    52fe:	602b      	str	r3, [r5, #0]
    5300:	bd70      	pop	{r4, r5, r6, pc}
    5302:	46c0      	nop			; (mov r8, r8)
    5304:	200005e0 	.word	0x200005e0

00005308 <strlen>:
    5308:	2300      	movs	r3, #0
    530a:	5cc2      	ldrb	r2, [r0, r3]
    530c:	3301      	adds	r3, #1
    530e:	2a00      	cmp	r2, #0
    5310:	d1fb      	bne.n	530a <strlen+0x2>
    5312:	1e58      	subs	r0, r3, #1
    5314:	4770      	bx	lr

00005316 <__malloc_lock>:
    5316:	4770      	bx	lr

00005318 <__malloc_unlock>:
    5318:	4770      	bx	lr
	...

0000531c <mmc_trans_multipliers>:
    531c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    532c:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    533c:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    534c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000535c <sd_mmc_trans_units>:
    535c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00005378 <sd_trans_multipliers>:
    5378:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    5388:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    5398:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    53a8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
    53b8:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    53c8:	1800 4200 1c00 4200 290e 0000 290a 0000     ...B...B.)...)..
    53d8:	290a 0000 2970 0000 2970 0000 2922 0000     .)..p)..p)..")..
    53e8:	2914 0000 2928 0000 295e 0000 2b30 0000     .)..()..^)..0+..
    53f8:	2b10 0000 2b10 0000 2b9c 0000 2b22 0000     .+...+...+.."+..
    5408:	2b3e 0000 2b14 0000 2b4c 0000 2b8c 0000     >+...+..L+...+..

00005418 <LfnOfs>:
    5418:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

00005428 <excvt.4558>:
    5428:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
    5438:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
    5448:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
    5458:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    5468:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
    5478:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    5488:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
    5498:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
    54a8:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
    54b8:	5d5b 0000                                   []..

000054bc <Tbl>:
    54bc:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
    54cc:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
    54dc:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
    54ec:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
    54fc:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
    550c:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
    551c:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
    552c:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
    553c:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
    554c:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
    555c:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
    556c:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
    557c:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
    558c:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
    559c:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
    55ac:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

000055bc <tbl_lower.4308>:
    55bc:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
    55cc:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
    55dc:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
    55ec:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
    55fc:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
    560c:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
    561c:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
    562c:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
    563c:	0103 0105 0107 0109 010b 010d 010f 0111     ................
    564c:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
    565c:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
    566c:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
    567c:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
    568c:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
    569c:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
    56ac:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
    56bc:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
    56cc:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
    56dc:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
    56ec:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
    56fc:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
    570c:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
    571c:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
    572c:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
    573c:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
    574c:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
    575c:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
    576c:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
    577c:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
    578c:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0000579c <tbl_upper.4309>:
    579c:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
    57ac:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
    57bc:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
    57cc:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
    57dc:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
    57ec:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
    57fc:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
    580c:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
    581c:	0102 0104 0106 0108 010a 010c 010e 0110     ................
    582c:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
    583c:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
    584c:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
    585c:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
    586c:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
    587c:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
    588c:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
    589c:	0393 0394 0395 0396 0397 0398 0399 039a     ................
    58ac:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
    58bc:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
    58cc:	0411 0412 0413 0414 0415 0416 0417 0418     ................
    58dc:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
    58ec:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
    58fc:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
    590c:	0402 0403 0404 0405 0406 0407 0408 0409     ................
    591c:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
    592c:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
    593c:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
    594c:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
    595c:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
    596c:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
    597c:	5345 3545 3631 2d20 5320 2044 6143 6472     ESE516 - SD Card
    598c:	4520 6178 706d 656c 0000 0000 0a0c 2d0d      Example.......-
    599c:	202d 4453 4d2f 434d 4320 7261 2064 7845     - SD/MMC Card Ex
    59ac:	6d61 6c70 2065 6e6f 4620 7461 7346 2d20     ample on FatFs -
    59bc:	0a2d 000d 6c50 6165 6573 7020 756c 2067     -...Please plug 
    59cc:	6e61 5320 2f44 4d4d 2043 6163 6472 6920     an SD/MMC card i
    59dc:	206e 6c73 746f 0a2e 000d 0000 6143 6472     n slot......Card
    59ec:	6920 736e 6174 6c6c 4620 4941 0a4c 000d      install FAIL...
    59fc:	6c50 6165 6573 7520 706e 756c 2067 6e61     Please unplug an
    5a0c:	2064 6572 702d 756c 2067 6874 2065 6163     d re-plug the ca
    5a1c:	6472 0a2e 000d 0000 6f4d 6e75 2074 6964     rd......Mount di
    5a2c:	6b73 2820 5f66 6f6d 6e75 2974 2e2e 0d2e     sk (f_mount)....
    5a3c:	000a 0000 465b 4941 5d4c 7220 7365 2520     ....[FAIL] res %
    5a4c:	0d64 000a 4f5b 5d4b 0a0d 0000 7243 6165     d...[OK]....Crea
    5a5c:	6574 6120 6620 6c69 2065 6628 6f5f 6570     te a file (f_ope
    5a6c:	296e 2e2e 0d2e 000a 7257 7469 2065 6f74     n)......Write to
    5a7c:	7420 7365 2074 6966 656c 2820 5f66 7570      test file (f_pu
    5a8c:	7374 2e29 2e2e 0a0d 0000 0000 6554 7473     ts).........Test
    5a9c:	5320 2f44 4d4d 2043 7473 6361 0a6b 0000      SD/MMC stack...
    5aac:	465b 4941 5d4c 0a0d 0000 0000 6554 7473     [FAIL]......Test
    5abc:	6920 2073 7573 6363 7365 6673 6c75 0a2e      is successful..
    5acc:	000d 0000 6c50 6165 6573 7520 706e 756c     ....Please unplu
    5adc:	2067 6874 2065 6163 6472 0a2e 000d 0000     g the card......
    5aec:	3a30 6473 6d5f 636d 745f 7365 2e74 7874     0:sd_mmc_test.tx
    5afc:	0074 0000                                   t...

00005b00 <_init>:
    5b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b02:	46c0      	nop			; (mov r8, r8)
    5b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5b06:	bc08      	pop	{r3}
    5b08:	469e      	mov	lr, r3
    5b0a:	4770      	bx	lr

00005b0c <__init_array_start>:
    5b0c:	000000dd 	.word	0x000000dd

00005b10 <_fini>:
    5b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b12:	46c0      	nop			; (mov r8, r8)
    5b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5b16:	bc08      	pop	{r3}
    5b18:	469e      	mov	lr, r3
    5b1a:	4770      	bx	lr

00005b1c <__fini_array_start>:
    5b1c:	000000b5 	.word	0x000000b5
