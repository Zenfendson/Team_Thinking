
SD_MMC_bootloader_EXAMPLE_ESE516.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006584  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00006584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000988  20000070  000065f4  00020070  2**2
                  ALLOC
  3 .stack        00002000  200009f8  00006f7c  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00042720  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000061e6  00000000  00000000  00062811  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000f5df  00000000  00000000  000689f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ac8  00000000  00000000  00077fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f50  00000000  00000000  00078a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f865  00000000  00000000  000799ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014c1a  00000000  00000000  00099253  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00092c2f  00000000  00000000  000ade6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002250  00000000  00000000  00140a9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 29 00 20 b5 32 00 00 b1 32 00 00 b1 32 00 00     .). .2...2...2..
	...
      2c:	b1 32 00 00 00 00 00 00 00 00 00 00 b1 32 00 00     .2...........2..
      3c:	b1 32 00 00 b1 32 00 00 b1 32 00 00 b1 32 00 00     .2...2...2...2..
      4c:	b1 32 00 00 b1 32 00 00 b1 32 00 00 b1 32 00 00     .2...2...2...2..
      5c:	b1 32 00 00 b1 32 00 00 09 1d 00 00 19 1d 00 00     .2...2..........
      6c:	29 1d 00 00 39 1d 00 00 49 1d 00 00 59 1d 00 00     )...9...I...Y...
      7c:	b1 32 00 00 b1 32 00 00 b1 32 00 00 b1 32 00 00     .2...2...2...2..
      8c:	b1 32 00 00 b1 32 00 00 00 00 00 00 00 00 00 00     .2...2..........
      9c:	b1 32 00 00 b1 32 00 00 b1 32 00 00 b1 32 00 00     .2...2...2...2..
      ac:	b1 32 00 00 00 00 00 00                             .2......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00006584 	.word	0x00006584

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00006584 	.word	0x00006584
     10c:	00006584 	.word	0x00006584
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00003041 	.word	0x00003041
     140:	0000519d 	.word	0x0000519d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     180:	b5f0      	push	{r4, r5, r6, r7, lr}
     182:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     184:	ac01      	add	r4, sp, #4
     186:	2501      	movs	r5, #1
     188:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     18a:	2700      	movs	r7, #0
     18c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     18e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     190:	0021      	movs	r1, r4
     192:	2017      	movs	r0, #23
     194:	4e06      	ldr	r6, [pc, #24]	; (1b0 <system_board_init+0x30>)
     196:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     198:	2280      	movs	r2, #128	; 0x80
     19a:	0412      	lsls	r2, r2, #16
     19c:	4b05      	ldr	r3, [pc, #20]	; (1b4 <system_board_init+0x34>)
     19e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1a0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1a2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1a4:	0021      	movs	r1, r4
     1a6:	2037      	movs	r0, #55	; 0x37
     1a8:	47b0      	blx	r6
}
     1aa:	b003      	add	sp, #12
     1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	00001729 	.word	0x00001729
     1b4:	41004400 	.word	0x41004400

000001b8 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     1b8:	b510      	push	{r4, lr}
     1ba:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     1bc:	7c03      	ldrb	r3, [r0, #16]
     1be:	2b00      	cmp	r3, #0
     1c0:	d005      	beq.n	1ce <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1c2:	6883      	ldr	r3, [r0, #8]
     1c4:	1c58      	adds	r0, r3, #1
     1c6:	68e1      	ldr	r1, [r4, #12]
     1c8:	4b07      	ldr	r3, [pc, #28]	; (1e8 <advance_pointer+0x30>)
     1ca:	4798      	blx	r3
     1cc:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     1ce:	6863      	ldr	r3, [r4, #4]
     1d0:	1c58      	adds	r0, r3, #1
     1d2:	68e1      	ldr	r1, [r4, #12]
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <advance_pointer+0x30>)
     1d6:	4798      	blx	r3
     1d8:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     1da:	68a3      	ldr	r3, [r4, #8]
     1dc:	1a59      	subs	r1, r3, r1
     1de:	424a      	negs	r2, r1
     1e0:	414a      	adcs	r2, r1
     1e2:	7422      	strb	r2, [r4, #16]
 }
     1e4:	bd10      	pop	{r4, pc}
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	000052a9 	.word	0x000052a9

000001ec <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     1ec:	b570      	push	{r4, r5, r6, lr}
     1ee:	0005      	movs	r5, r0
     1f0:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     1f2:	2014      	movs	r0, #20
     1f4:	4b04      	ldr	r3, [pc, #16]	; (208 <circular_buf_init+0x1c>)
     1f6:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     1f8:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     1fa:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     1fc:	2300      	movs	r3, #0
     1fe:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     200:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     202:	7403      	strb	r3, [r0, #16]
 }
     204:	bd70      	pop	{r4, r5, r6, pc}
     206:	46c0      	nop			; (mov r8, r8)
     208:	00005525 	.word	0x00005525

0000020c <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     20c:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     20e:	6803      	ldr	r3, [r0, #0]
     210:	6842      	ldr	r2, [r0, #4]
     212:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     214:	4b01      	ldr	r3, [pc, #4]	; (21c <circular_buf_put+0x10>)
     216:	4798      	blx	r3
 }
     218:	bd10      	pop	{r4, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	000001b9 	.word	0x000001b9

00000220 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     220:	7c02      	ldrb	r2, [r0, #16]
     222:	2300      	movs	r3, #0
     224:	2a00      	cmp	r2, #0
     226:	d105      	bne.n	234 <circular_buf_empty+0x14>
     228:	6843      	ldr	r3, [r0, #4]
     22a:	6880      	ldr	r0, [r0, #8]
     22c:	1a1b      	subs	r3, r3, r0
     22e:	4258      	negs	r0, r3
     230:	4143      	adcs	r3, r0
     232:	b2db      	uxtb	r3, r3
     234:	0018      	movs	r0, r3
 }
     236:	4770      	bx	lr

00000238 <circular_buf_get>:
 {
     238:	b570      	push	{r4, r5, r6, lr}
     23a:	0004      	movs	r4, r0
     23c:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     23e:	4b0a      	ldr	r3, [pc, #40]	; (268 <circular_buf_get+0x30>)
     240:	4798      	blx	r3
     242:	2800      	cmp	r0, #0
     244:	d10d      	bne.n	262 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     246:	6823      	ldr	r3, [r4, #0]
     248:	68a2      	ldr	r2, [r4, #8]
     24a:	5c9b      	ldrb	r3, [r3, r2]
     24c:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     24e:	2300      	movs	r3, #0
     250:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     252:	68a3      	ldr	r3, [r4, #8]
     254:	1c58      	adds	r0, r3, #1
     256:	68e1      	ldr	r1, [r4, #12]
     258:	4b04      	ldr	r3, [pc, #16]	; (26c <circular_buf_get+0x34>)
     25a:	4798      	blx	r3
     25c:	60a1      	str	r1, [r4, #8]
		 r = 0;
     25e:	2000      	movs	r0, #0
 }
     260:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     262:	2001      	movs	r0, #1
     264:	4240      	negs	r0, r0
	 return r;
     266:	e7fb      	b.n	260 <circular_buf_get+0x28>
     268:	00000221 	.word	0x00000221
     26c:	000052a9 	.word	0x000052a9

00000270 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     270:	b570      	push	{r4, r5, r6, lr}
     272:	b082      	sub	sp, #8
     274:	0005      	movs	r5, r0
     276:	000e      	movs	r6, r1
	uint16_t temp = 0;
     278:	2200      	movs	r2, #0
     27a:	466b      	mov	r3, sp
     27c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     27e:	4c06      	ldr	r4, [pc, #24]	; (298 <usart_serial_getchar+0x28>)
     280:	466b      	mov	r3, sp
     282:	1d99      	adds	r1, r3, #6
     284:	0028      	movs	r0, r5
     286:	47a0      	blx	r4
     288:	2800      	cmp	r0, #0
     28a:	d1f9      	bne.n	280 <usart_serial_getchar+0x10>

	*c = temp;
     28c:	466b      	mov	r3, sp
     28e:	3306      	adds	r3, #6
     290:	881b      	ldrh	r3, [r3, #0]
     292:	7033      	strb	r3, [r6, #0]
}
     294:	b002      	add	sp, #8
     296:	bd70      	pop	{r4, r5, r6, pc}
     298:	00002819 	.word	0x00002819

0000029c <usart_serial_putchar>:
{
     29c:	b570      	push	{r4, r5, r6, lr}
     29e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     2a0:	b28c      	uxth	r4, r1
     2a2:	4e03      	ldr	r6, [pc, #12]	; (2b0 <usart_serial_putchar+0x14>)
     2a4:	0021      	movs	r1, r4
     2a6:	0028      	movs	r0, r5
     2a8:	47b0      	blx	r6
     2aa:	2800      	cmp	r0, #0
     2ac:	d1fa      	bne.n	2a4 <usart_serial_putchar+0x8>
}
     2ae:	bd70      	pop	{r4, r5, r6, pc}
     2b0:	000027ed 	.word	0x000027ed

000002b4 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     2b4:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     2b6:	4b06      	ldr	r3, [pc, #24]	; (2d0 <usart_write_callback+0x1c>)
     2b8:	6818      	ldr	r0, [r3, #0]
     2ba:	4906      	ldr	r1, [pc, #24]	; (2d4 <usart_write_callback+0x20>)
     2bc:	4b06      	ldr	r3, [pc, #24]	; (2d8 <usart_write_callback+0x24>)
     2be:	4798      	blx	r3
     2c0:	1c43      	adds	r3, r0, #1
     2c2:	d004      	beq.n	2ce <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     2c4:	2201      	movs	r2, #1
     2c6:	4903      	ldr	r1, [pc, #12]	; (2d4 <usart_write_callback+0x20>)
     2c8:	4804      	ldr	r0, [pc, #16]	; (2dc <usart_write_callback+0x28>)
     2ca:	4b05      	ldr	r3, [pc, #20]	; (2e0 <usart_write_callback+0x2c>)
     2cc:	4798      	blx	r3
	}
	
}
     2ce:	bd10      	pop	{r4, pc}
     2d0:	200009bc 	.word	0x200009bc
     2d4:	200009b8 	.word	0x200009b8
     2d8:	00000239 	.word	0x00000239
     2dc:	2000017c 	.word	0x2000017c
     2e0:	0000292d 	.word	0x0000292d

000002e4 <InitializeSerialConsole>:
{
     2e4:	b570      	push	{r4, r5, r6, lr}
     2e6:	b090      	sub	sp, #64	; 0x40
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     2e8:	2580      	movs	r5, #128	; 0x80
     2ea:	00ed      	lsls	r5, r5, #3
     2ec:	0029      	movs	r1, r5
     2ee:	483f      	ldr	r0, [pc, #252]	; (3ec <InitializeSerialConsole+0x108>)
     2f0:	4c3f      	ldr	r4, [pc, #252]	; (3f0 <InitializeSerialConsole+0x10c>)
     2f2:	47a0      	blx	r4
     2f4:	4b3f      	ldr	r3, [pc, #252]	; (3f4 <InitializeSerialConsole+0x110>)
     2f6:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     2f8:	0029      	movs	r1, r5
     2fa:	483f      	ldr	r0, [pc, #252]	; (3f8 <InitializeSerialConsole+0x114>)
     2fc:	47a0      	blx	r4
     2fe:	4b3f      	ldr	r3, [pc, #252]	; (3fc <InitializeSerialConsole+0x118>)
     300:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     302:	2380      	movs	r3, #128	; 0x80
     304:	05db      	lsls	r3, r3, #23
     306:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     308:	2300      	movs	r3, #0
     30a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     30c:	22ff      	movs	r2, #255	; 0xff
     30e:	4669      	mov	r1, sp
     310:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     312:	2200      	movs	r2, #0
     314:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     316:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     318:	2101      	movs	r1, #1
     31a:	2024      	movs	r0, #36	; 0x24
     31c:	466c      	mov	r4, sp
     31e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     320:	3001      	adds	r0, #1
     322:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     324:	3125      	adds	r1, #37	; 0x25
     326:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     328:	3101      	adds	r1, #1
     32a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     32c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     32e:	3105      	adds	r1, #5
     330:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     332:	3101      	adds	r1, #1
     334:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     336:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     338:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     33a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     33c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     33e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     340:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     342:	2313      	movs	r3, #19
     344:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     346:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
     348:	23e1      	movs	r3, #225	; 0xe1
     34a:	025b      	lsls	r3, r3, #9
     34c:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     34e:	23c4      	movs	r3, #196	; 0xc4
     350:	039b      	lsls	r3, r3, #14
     352:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     354:	2301      	movs	r3, #1
     356:	425b      	negs	r3, r3
     358:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     35a:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     35c:	4b28      	ldr	r3, [pc, #160]	; (400 <InitializeSerialConsole+0x11c>)
     35e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     360:	4b28      	ldr	r3, [pc, #160]	; (404 <InitializeSerialConsole+0x120>)
     362:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
     364:	4d28      	ldr	r5, [pc, #160]	; (408 <InitializeSerialConsole+0x124>)
     366:	4c29      	ldr	r4, [pc, #164]	; (40c <InitializeSerialConsole+0x128>)
     368:	466a      	mov	r2, sp
     36a:	4929      	ldr	r1, [pc, #164]	; (410 <InitializeSerialConsole+0x12c>)
     36c:	0028      	movs	r0, r5
     36e:	47a0      	blx	r4
     370:	2800      	cmp	r0, #0
     372:	d1f9      	bne.n	368 <InitializeSerialConsole+0x84>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     374:	4d24      	ldr	r5, [pc, #144]	; (408 <InitializeSerialConsole+0x124>)
     376:	4b27      	ldr	r3, [pc, #156]	; (414 <InitializeSerialConsole+0x130>)
     378:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     37a:	4a27      	ldr	r2, [pc, #156]	; (418 <InitializeSerialConsole+0x134>)
     37c:	4b27      	ldr	r3, [pc, #156]	; (41c <InitializeSerialConsole+0x138>)
     37e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     380:	4a27      	ldr	r2, [pc, #156]	; (420 <InitializeSerialConsole+0x13c>)
     382:	4b28      	ldr	r3, [pc, #160]	; (424 <InitializeSerialConsole+0x140>)
     384:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     386:	4e28      	ldr	r6, [pc, #160]	; (428 <InitializeSerialConsole+0x144>)
     388:	6833      	ldr	r3, [r6, #0]
     38a:	6898      	ldr	r0, [r3, #8]
     38c:	2100      	movs	r1, #0
     38e:	4c27      	ldr	r4, [pc, #156]	; (42c <InitializeSerialConsole+0x148>)
     390:	47a0      	blx	r4
	setbuf(stdin, NULL);
     392:	6833      	ldr	r3, [r6, #0]
     394:	6858      	ldr	r0, [r3, #4]
     396:	2100      	movs	r1, #0
     398:	47a0      	blx	r4
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     39a:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     39c:	0020      	movs	r0, r4
     39e:	4b24      	ldr	r3, [pc, #144]	; (430 <InitializeSerialConsole+0x14c>)
     3a0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3a2:	231f      	movs	r3, #31
     3a4:	4018      	ands	r0, r3
     3a6:	3b1e      	subs	r3, #30
     3a8:	4083      	lsls	r3, r0
     3aa:	4a22      	ldr	r2, [pc, #136]	; (434 <InitializeSerialConsole+0x150>)
     3ac:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     3ae:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     3b0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     3b2:	2b00      	cmp	r3, #0
     3b4:	d1fc      	bne.n	3b0 <InitializeSerialConsole+0xcc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     3b6:	6823      	ldr	r3, [r4, #0]
     3b8:	2202      	movs	r2, #2
     3ba:	4313      	orrs	r3, r2
     3bc:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
     3be:	4c12      	ldr	r4, [pc, #72]	; (408 <InitializeSerialConsole+0x124>)
     3c0:	2200      	movs	r2, #0
     3c2:	491d      	ldr	r1, [pc, #116]	; (438 <InitializeSerialConsole+0x154>)
     3c4:	0020      	movs	r0, r4
     3c6:	4d1d      	ldr	r5, [pc, #116]	; (43c <InitializeSerialConsole+0x158>)
     3c8:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
     3ca:	2201      	movs	r2, #1
     3cc:	491c      	ldr	r1, [pc, #112]	; (440 <InitializeSerialConsole+0x15c>)
     3ce:	0020      	movs	r0, r4
     3d0:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     3d2:	2231      	movs	r2, #49	; 0x31
     3d4:	5ca3      	ldrb	r3, [r4, r2]
     3d6:	2103      	movs	r1, #3
     3d8:	430b      	orrs	r3, r1
     3da:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     3dc:	3a30      	subs	r2, #48	; 0x30
     3de:	4919      	ldr	r1, [pc, #100]	; (444 <InitializeSerialConsole+0x160>)
     3e0:	0020      	movs	r0, r4
     3e2:	4b19      	ldr	r3, [pc, #100]	; (448 <InitializeSerialConsole+0x164>)
     3e4:	4798      	blx	r3
}
     3e6:	b010      	add	sp, #64	; 0x40
     3e8:	bd70      	pop	{r4, r5, r6, pc}
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	200005b8 	.word	0x200005b8
     3f0:	000001ed 	.word	0x000001ed
     3f4:	200001b0 	.word	0x200001b0
     3f8:	200001b8 	.word	0x200001b8
     3fc:	200009bc 	.word	0x200009bc
     400:	002a0003 	.word	0x002a0003
     404:	002b0003 	.word	0x002b0003
     408:	2000017c 	.word	0x2000017c
     40c:	000024a9 	.word	0x000024a9
     410:	42001800 	.word	0x42001800
     414:	200009e8 	.word	0x200009e8
     418:	0000029d 	.word	0x0000029d
     41c:	200009e4 	.word	0x200009e4
     420:	00000271 	.word	0x00000271
     424:	200009e0 	.word	0x200009e0
     428:	2000000c 	.word	0x2000000c
     42c:	000056bd 	.word	0x000056bd
     430:	00001cd9 	.word	0x00001cd9
     434:	e000e100 	.word	0xe000e100
     438:	000002b5 	.word	0x000002b5
     43c:	00002915 	.word	0x00002915
     440:	000004f9 	.word	0x000004f9
     444:	200001b4 	.word	0x200001b4
     448:	0000294d 	.word	0x0000294d

0000044c <DeinitializeSerialConsole>:
{
     44c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     44e:	4d0a      	ldr	r5, [pc, #40]	; (478 <DeinitializeSerialConsole+0x2c>)
     450:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     452:	0020      	movs	r0, r4
     454:	4b09      	ldr	r3, [pc, #36]	; (47c <DeinitializeSerialConsole+0x30>)
     456:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     458:	231f      	movs	r3, #31
     45a:	4018      	ands	r0, r3
     45c:	3b1e      	subs	r3, #30
     45e:	4083      	lsls	r3, r0
     460:	2280      	movs	r2, #128	; 0x80
     462:	4907      	ldr	r1, [pc, #28]	; (480 <DeinitializeSerialConsole+0x34>)
     464:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
     466:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     468:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     46a:	2b00      	cmp	r3, #0
     46c:	d1fc      	bne.n	468 <DeinitializeSerialConsole+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     46e:	6823      	ldr	r3, [r4, #0]
     470:	2202      	movs	r2, #2
     472:	4393      	bics	r3, r2
     474:	6023      	str	r3, [r4, #0]
}
     476:	bd70      	pop	{r4, r5, r6, pc}
     478:	2000017c 	.word	0x2000017c
     47c:	00001cd9 	.word	0x00001cd9
     480:	e000e100 	.word	0xe000e100

00000484 <SerialConsoleWriteString>:
{
     484:	b5f0      	push	{r4, r5, r6, r7, lr}
     486:	46c6      	mov	lr, r8
     488:	b500      	push	{lr}
     48a:	0005      	movs	r5, r0
     48c:	2400      	movs	r4, #0
	if(string != NULL)
     48e:	2800      	cmp	r0, #0
     490:	d012      	beq.n	4b8 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
     492:	4e11      	ldr	r6, [pc, #68]	; (4d8 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
     494:	4f11      	ldr	r7, [pc, #68]	; (4dc <SerialConsoleWriteString+0x58>)
     496:	4b12      	ldr	r3, [pc, #72]	; (4e0 <SerialConsoleWriteString+0x5c>)
     498:	4698      	mov	r8, r3
     49a:	e003      	b.n	4a4 <SerialConsoleWriteString+0x20>
     49c:	5d29      	ldrb	r1, [r5, r4]
     49e:	6838      	ldr	r0, [r7, #0]
     4a0:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
     4a2:	3401      	adds	r4, #1
     4a4:	0028      	movs	r0, r5
     4a6:	47b0      	blx	r6
     4a8:	4284      	cmp	r4, r0
     4aa:	d3f7      	bcc.n	49c <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     4ac:	2101      	movs	r1, #1
     4ae:	480d      	ldr	r0, [pc, #52]	; (4e4 <SerialConsoleWriteString+0x60>)
     4b0:	4b0d      	ldr	r3, [pc, #52]	; (4e8 <SerialConsoleWriteString+0x64>)
     4b2:	4798      	blx	r3
     4b4:	2800      	cmp	r0, #0
     4b6:	d002      	beq.n	4be <SerialConsoleWriteString+0x3a>
}
     4b8:	bc04      	pop	{r2}
     4ba:	4690      	mov	r8, r2
     4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     4be:	4c0b      	ldr	r4, [pc, #44]	; (4ec <SerialConsoleWriteString+0x68>)
     4c0:	4b06      	ldr	r3, [pc, #24]	; (4dc <SerialConsoleWriteString+0x58>)
     4c2:	6818      	ldr	r0, [r3, #0]
     4c4:	0021      	movs	r1, r4
     4c6:	4b0a      	ldr	r3, [pc, #40]	; (4f0 <SerialConsoleWriteString+0x6c>)
     4c8:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     4ca:	2201      	movs	r2, #1
     4cc:	0021      	movs	r1, r4
     4ce:	4805      	ldr	r0, [pc, #20]	; (4e4 <SerialConsoleWriteString+0x60>)
     4d0:	4b08      	ldr	r3, [pc, #32]	; (4f4 <SerialConsoleWriteString+0x70>)
     4d2:	4798      	blx	r3
}
     4d4:	e7f0      	b.n	4b8 <SerialConsoleWriteString+0x34>
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	00005829 	.word	0x00005829
     4dc:	200009bc 	.word	0x200009bc
     4e0:	0000020d 	.word	0x0000020d
     4e4:	2000017c 	.word	0x2000017c
     4e8:	0000296d 	.word	0x0000296d
     4ec:	200009b8 	.word	0x200009b8
     4f0:	00000239 	.word	0x00000239
     4f4:	0000292d 	.word	0x0000292d

000004f8 <usart_read_callback>:
{
     4f8:	b510      	push	{r4, lr}
     4fa:	b082      	sub	sp, #8
	SerialConsoleWriteString(&latestRx);
     4fc:	4c0d      	ldr	r4, [pc, #52]	; (534 <usart_read_callback+0x3c>)
     4fe:	0020      	movs	r0, r4
     500:	4b0d      	ldr	r3, [pc, #52]	; (538 <usart_read_callback+0x40>)
     502:	4798      	blx	r3
	if(latestRx == 0x08)
     504:	7823      	ldrb	r3, [r4, #0]
     506:	2b08      	cmp	r3, #8
     508:	d00c      	beq.n	524 <usart_read_callback+0x2c>
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     50a:	4c0a      	ldr	r4, [pc, #40]	; (534 <usart_read_callback+0x3c>)
     50c:	7821      	ldrb	r1, [r4, #0]
     50e:	4b0b      	ldr	r3, [pc, #44]	; (53c <usart_read_callback+0x44>)
     510:	6818      	ldr	r0, [r3, #0]
     512:	4b0b      	ldr	r3, [pc, #44]	; (540 <usart_read_callback+0x48>)
     514:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     516:	2201      	movs	r2, #1
     518:	0021      	movs	r1, r4
     51a:	480a      	ldr	r0, [pc, #40]	; (544 <usart_read_callback+0x4c>)
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <usart_read_callback+0x50>)
     51e:	4798      	blx	r3
}
     520:	b002      	add	sp, #8
     522:	bd10      	pop	{r4, pc}
	a[0] = 0x20;
     524:	a801      	add	r0, sp, #4
     526:	3318      	adds	r3, #24
     528:	7003      	strb	r3, [r0, #0]
	a[1]= 0x08;
     52a:	3b18      	subs	r3, #24
     52c:	7043      	strb	r3, [r0, #1]
	SerialConsoleWriteString(&a);
     52e:	4b02      	ldr	r3, [pc, #8]	; (538 <usart_read_callback+0x40>)
     530:	4798      	blx	r3
     532:	e7ea      	b.n	50a <usart_read_callback+0x12>
     534:	200001b4 	.word	0x200001b4
     538:	00000485 	.word	0x00000485
     53c:	200001b0 	.word	0x200001b0
     540:	0000020d 	.word	0x0000020d
     544:	2000017c 	.word	0x2000017c
     548:	0000294d 	.word	0x0000294d

0000054c <LogMessage>:
{
     54c:	b40e      	push	{r1, r2, r3}
};
     54e:	b003      	add	sp, #12
     550:	4770      	bx	lr
	...

00000554 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     554:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     556:	4b06      	ldr	r3, [pc, #24]	; (570 <sd_mmc_configure_slot+0x1c>)
     558:	6819      	ldr	r1, [r3, #0]
     55a:	7f8b      	ldrb	r3, [r1, #30]
     55c:	1e5a      	subs	r2, r3, #1
     55e:	4193      	sbcs	r3, r2
     560:	b2db      	uxtb	r3, r3
     562:	7b4a      	ldrb	r2, [r1, #13]
     564:	6809      	ldr	r1, [r1, #0]
     566:	4803      	ldr	r0, [pc, #12]	; (574 <sd_mmc_configure_slot+0x20>)
     568:	7800      	ldrb	r0, [r0, #0]
     56a:	4c03      	ldr	r4, [pc, #12]	; (578 <sd_mmc_configure_slot+0x24>)
     56c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     56e:	bd10      	pop	{r4, pc}
     570:	2000008c 	.word	0x2000008c
     574:	200000b4 	.word	0x200000b4
     578:	00001211 	.word	0x00001211

0000057c <sd_mmc_select_slot>:
{
     57c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     57e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     580:	2800      	cmp	r0, #0
     582:	d001      	beq.n	588 <sd_mmc_select_slot+0xc>
}
     584:	0018      	movs	r0, r3
     586:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     588:	4b0e      	ldr	r3, [pc, #56]	; (5c4 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     58a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     58c:	3b03      	subs	r3, #3
     58e:	2b01      	cmp	r3, #1
     590:	d90d      	bls.n	5ae <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     592:	2200      	movs	r2, #0
     594:	4b0c      	ldr	r3, [pc, #48]	; (5c8 <sd_mmc_select_slot+0x4c>)
     596:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     598:	4c0a      	ldr	r4, [pc, #40]	; (5c4 <sd_mmc_select_slot+0x48>)
     59a:	4b0c      	ldr	r3, [pc, #48]	; (5cc <sd_mmc_select_slot+0x50>)
     59c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     59e:	4b0c      	ldr	r3, [pc, #48]	; (5d0 <sd_mmc_select_slot+0x54>)
     5a0:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     5a2:	7aa3      	ldrb	r3, [r4, #10]
     5a4:	3b02      	subs	r3, #2
     5a6:	4258      	negs	r0, r3
     5a8:	4143      	adcs	r3, r0
     5aa:	b2db      	uxtb	r3, r3
     5ac:	e7ea      	b.n	584 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     5ae:	4b05      	ldr	r3, [pc, #20]	; (5c4 <sd_mmc_select_slot+0x48>)
     5b0:	2202      	movs	r2, #2
     5b2:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     5b4:	4a07      	ldr	r2, [pc, #28]	; (5d4 <sd_mmc_select_slot+0x58>)
     5b6:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     5b8:	2201      	movs	r2, #1
     5ba:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     5bc:	2200      	movs	r2, #0
     5be:	779a      	strb	r2, [r3, #30]
     5c0:	e7e7      	b.n	592 <sd_mmc_select_slot+0x16>
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	20000090 	.word	0x20000090
     5c8:	200000b4 	.word	0x200000b4
     5cc:	2000008c 	.word	0x2000008c
     5d0:	00000555 	.word	0x00000555
     5d4:	00061a80 	.word	0x00061a80

000005d8 <sd_mmc_cmd13>:
{
     5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5da:	4d09      	ldr	r5, [pc, #36]	; (600 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     5dc:	4f09      	ldr	r7, [pc, #36]	; (604 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     5de:	4e0a      	ldr	r6, [pc, #40]	; (608 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     5e0:	2100      	movs	r1, #0
     5e2:	480a      	ldr	r0, [pc, #40]	; (60c <sd_mmc_cmd13+0x34>)
     5e4:	47b8      	blx	r7
     5e6:	1e04      	subs	r4, r0, #0
     5e8:	d007      	beq.n	5fa <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     5ea:	47b0      	blx	r6
     5ec:	23ff      	movs	r3, #255	; 0xff
     5ee:	4203      	tst	r3, r0
     5f0:	d003      	beq.n	5fa <sd_mmc_cmd13+0x22>
     5f2:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     5f4:	2d00      	cmp	r5, #0
     5f6:	d1f3      	bne.n	5e0 <sd_mmc_cmd13+0x8>
			return false;
     5f8:	2400      	movs	r4, #0
}
     5fa:	0020      	movs	r0, r4
     5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	00030d41 	.word	0x00030d41
     604:	00001455 	.word	0x00001455
     608:	0000146d 	.word	0x0000146d
     60c:	00001b0d 	.word	0x00001b0d

00000610 <sd_mmc_cmd9_spi>:
{
     610:	b510      	push	{r4, lr}
     612:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     614:	4b0c      	ldr	r3, [pc, #48]	; (648 <sd_mmc_cmd9_spi+0x38>)
     616:	681b      	ldr	r3, [r3, #0]
     618:	8919      	ldrh	r1, [r3, #8]
     61a:	0409      	lsls	r1, r1, #16
     61c:	2301      	movs	r3, #1
     61e:	9300      	str	r3, [sp, #0]
     620:	2210      	movs	r2, #16
     622:	480a      	ldr	r0, [pc, #40]	; (64c <sd_mmc_cmd9_spi+0x3c>)
     624:	4c0a      	ldr	r4, [pc, #40]	; (650 <sd_mmc_cmd9_spi+0x40>)
     626:	47a0      	blx	r4
     628:	2800      	cmp	r0, #0
     62a:	d101      	bne.n	630 <sd_mmc_cmd9_spi+0x20>
}
     62c:	b002      	add	sp, #8
     62e:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     630:	4b05      	ldr	r3, [pc, #20]	; (648 <sd_mmc_cmd9_spi+0x38>)
     632:	6818      	ldr	r0, [r3, #0]
     634:	300e      	adds	r0, #14
     636:	2101      	movs	r1, #1
     638:	4b06      	ldr	r3, [pc, #24]	; (654 <sd_mmc_cmd9_spi+0x44>)
     63a:	4798      	blx	r3
     63c:	2800      	cmp	r0, #0
     63e:	d0f5      	beq.n	62c <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     640:	4b05      	ldr	r3, [pc, #20]	; (658 <sd_mmc_cmd9_spi+0x48>)
     642:	4798      	blx	r3
     644:	e7f2      	b.n	62c <sd_mmc_cmd9_spi+0x1c>
     646:	46c0      	nop			; (mov r8, r8)
     648:	2000008c 	.word	0x2000008c
     64c:	00081109 	.word	0x00081109
     650:	000012c5 	.word	0x000012c5
     654:	000014f1 	.word	0x000014f1
     658:	0000157d 	.word	0x0000157d

0000065c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     65c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     65e:	4b04      	ldr	r3, [pc, #16]	; (670 <sd_mmc_deselect_slot+0x14>)
     660:	781b      	ldrb	r3, [r3, #0]
     662:	2b00      	cmp	r3, #0
     664:	d000      	beq.n	668 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     666:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     668:	2000      	movs	r0, #0
     66a:	4b02      	ldr	r3, [pc, #8]	; (674 <sd_mmc_deselect_slot+0x18>)
     66c:	4798      	blx	r3
}
     66e:	e7fa      	b.n	666 <sd_mmc_deselect_slot+0xa>
     670:	200000b4 	.word	0x200000b4
     674:	00001265 	.word	0x00001265

00000678 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
     678:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     67a:	2204      	movs	r2, #4
     67c:	4b03      	ldr	r3, [pc, #12]	; (68c <sd_mmc_init+0x14>)
     67e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     680:	32fb      	adds	r2, #251	; 0xfb
     682:	4b03      	ldr	r3, [pc, #12]	; (690 <sd_mmc_init+0x18>)
     684:	701a      	strb	r2, [r3, #0]
	driver_init();
     686:	4b03      	ldr	r3, [pc, #12]	; (694 <sd_mmc_init+0x1c>)
     688:	4798      	blx	r3
}
     68a:	bd10      	pop	{r4, pc}
     68c:	20000090 	.word	0x20000090
     690:	200000b4 	.word	0x200000b4
     694:	00001111 	.word	0x00001111

00000698 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     698:	b5f0      	push	{r4, r5, r6, r7, lr}
     69a:	46c6      	mov	lr, r8
     69c:	b500      	push	{lr}
     69e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     6a0:	4bcb      	ldr	r3, [pc, #812]	; (9d0 <sd_mmc_check+0x338>)
     6a2:	4798      	blx	r3
     6a4:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     6a6:	2801      	cmp	r0, #1
     6a8:	d006      	beq.n	6b8 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     6aa:	4bca      	ldr	r3, [pc, #808]	; (9d4 <sd_mmc_check+0x33c>)
     6ac:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     6ae:	0020      	movs	r0, r4
     6b0:	b008      	add	sp, #32
     6b2:	bc04      	pop	{r2}
     6b4:	4690      	mov	r8, r2
     6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     6b8:	4bc7      	ldr	r3, [pc, #796]	; (9d8 <sd_mmc_check+0x340>)
     6ba:	681b      	ldr	r3, [r3, #0]
     6bc:	2201      	movs	r2, #1
     6be:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     6c0:	2200      	movs	r2, #0
     6c2:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     6c4:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     6c6:	4bc5      	ldr	r3, [pc, #788]	; (9dc <sd_mmc_check+0x344>)
     6c8:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     6ca:	2100      	movs	r1, #0
     6cc:	2088      	movs	r0, #136	; 0x88
     6ce:	0140      	lsls	r0, r0, #5
     6d0:	4bc3      	ldr	r3, [pc, #780]	; (9e0 <sd_mmc_check+0x348>)
     6d2:	4798      	blx	r3
     6d4:	2800      	cmp	r0, #0
     6d6:	d107      	bne.n	6e8 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     6d8:	4bbf      	ldr	r3, [pc, #764]	; (9d8 <sd_mmc_check+0x340>)
     6da:	681b      	ldr	r3, [r3, #0]
     6dc:	2203      	movs	r2, #3
     6de:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     6e0:	4bbc      	ldr	r3, [pc, #752]	; (9d4 <sd_mmc_check+0x33c>)
     6e2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     6e4:	2403      	movs	r4, #3
     6e6:	e7e2      	b.n	6ae <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     6e8:	21d5      	movs	r1, #213	; 0xd5
     6ea:	0049      	lsls	r1, r1, #1
     6ec:	48bd      	ldr	r0, [pc, #756]	; (9e4 <sd_mmc_check+0x34c>)
     6ee:	4bbc      	ldr	r3, [pc, #752]	; (9e0 <sd_mmc_check+0x348>)
     6f0:	4798      	blx	r3
	*v2 = 0;
     6f2:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     6f4:	2800      	cmp	r0, #0
     6f6:	d125      	bne.n	744 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     6f8:	4bb7      	ldr	r3, [pc, #732]	; (9d8 <sd_mmc_check+0x340>)
     6fa:	681b      	ldr	r3, [r3, #0]
     6fc:	7adb      	ldrb	r3, [r3, #11]
     6fe:	07db      	lsls	r3, r3, #31
     700:	d500      	bpl.n	704 <sd_mmc_check+0x6c>
     702:	e1eb      	b.n	adc <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     704:	4bb4      	ldr	r3, [pc, #720]	; (9d8 <sd_mmc_check+0x340>)
     706:	681b      	ldr	r3, [r3, #0]
     708:	7ada      	ldrb	r2, [r3, #11]
     70a:	2309      	movs	r3, #9
     70c:	4013      	ands	r3, r2
     70e:	2b01      	cmp	r3, #1
     710:	d10f      	bne.n	732 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     712:	2180      	movs	r1, #128	; 0x80
     714:	0089      	lsls	r1, r1, #2
     716:	48b4      	ldr	r0, [pc, #720]	; (9e8 <sd_mmc_check+0x350>)
     718:	4bb1      	ldr	r3, [pc, #708]	; (9e0 <sd_mmc_check+0x348>)
     71a:	4798      	blx	r3
     71c:	2800      	cmp	r0, #0
     71e:	d0db      	beq.n	6d8 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     720:	4bad      	ldr	r3, [pc, #692]	; (9d8 <sd_mmc_check+0x340>)
     722:	681b      	ldr	r3, [r3, #0]
     724:	7adb      	ldrb	r3, [r3, #11]
     726:	07db      	lsls	r3, r3, #31
     728:	d503      	bpl.n	732 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     72a:	4bb0      	ldr	r3, [pc, #704]	; (9ec <sd_mmc_check+0x354>)
     72c:	4798      	blx	r3
     72e:	2800      	cmp	r0, #0
     730:	d0d2      	beq.n	6d8 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     732:	4baf      	ldr	r3, [pc, #700]	; (9f0 <sd_mmc_check+0x358>)
     734:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     736:	4ba8      	ldr	r3, [pc, #672]	; (9d8 <sd_mmc_check+0x340>)
     738:	681b      	ldr	r3, [r3, #0]
     73a:	2200      	movs	r2, #0
     73c:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     73e:	4ba5      	ldr	r3, [pc, #660]	; (9d4 <sd_mmc_check+0x33c>)
     740:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     742:	e7b4      	b.n	6ae <sd_mmc_check+0x16>
	resp = driver_get_response();
     744:	4bab      	ldr	r3, [pc, #684]	; (9f4 <sd_mmc_check+0x35c>)
     746:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     748:	1c43      	adds	r3, r0, #1
     74a:	d100      	bne.n	74e <sd_mmc_check+0xb6>
     74c:	e1c4      	b.n	ad8 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     74e:	0500      	lsls	r0, r0, #20
     750:	0d00      	lsrs	r0, r0, #20
     752:	23d5      	movs	r3, #213	; 0xd5
     754:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     756:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     758:	4298      	cmp	r0, r3
     75a:	d1bd      	bne.n	6d8 <sd_mmc_check+0x40>
     75c:	e7cc      	b.n	6f8 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     75e:	2100      	movs	r1, #0
     760:	48a5      	ldr	r0, [pc, #660]	; (9f8 <sd_mmc_check+0x360>)
     762:	4b9f      	ldr	r3, [pc, #636]	; (9e0 <sd_mmc_check+0x348>)
     764:	4798      	blx	r3
     766:	2800      	cmp	r0, #0
     768:	d119      	bne.n	79e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     76a:	4b9b      	ldr	r3, [pc, #620]	; (9d8 <sd_mmc_check+0x340>)
     76c:	681b      	ldr	r3, [r3, #0]
     76e:	2202      	movs	r2, #2
     770:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     772:	2100      	movs	r1, #0
     774:	2088      	movs	r0, #136	; 0x88
     776:	0140      	lsls	r0, r0, #5
     778:	4b99      	ldr	r3, [pc, #612]	; (9e0 <sd_mmc_check+0x348>)
     77a:	4798      	blx	r3
     77c:	2800      	cmp	r0, #0
     77e:	d0ab      	beq.n	6d8 <sd_mmc_check+0x40>
     780:	4d9e      	ldr	r5, [pc, #632]	; (9fc <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     782:	4f97      	ldr	r7, [pc, #604]	; (9e0 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     784:	4e9b      	ldr	r6, [pc, #620]	; (9f4 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     786:	2100      	movs	r1, #0
     788:	489d      	ldr	r0, [pc, #628]	; (a00 <sd_mmc_check+0x368>)
     78a:	47b8      	blx	r7
     78c:	2800      	cmp	r0, #0
     78e:	d0a3      	beq.n	6d8 <sd_mmc_check+0x40>
		resp = driver_get_response();
     790:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     792:	07c3      	lsls	r3, r0, #31
     794:	d57d      	bpl.n	892 <sd_mmc_check+0x1fa>
     796:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     798:	2d00      	cmp	r5, #0
     79a:	d1f4      	bne.n	786 <sd_mmc_check+0xee>
     79c:	e79c      	b.n	6d8 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     79e:	4b95      	ldr	r3, [pc, #596]	; (9f4 <sd_mmc_check+0x35c>)
     7a0:	4798      	blx	r3
     7a2:	0043      	lsls	r3, r0, #1
     7a4:	d505      	bpl.n	7b2 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     7a6:	4b8c      	ldr	r3, [pc, #560]	; (9d8 <sd_mmc_check+0x340>)
     7a8:	681a      	ldr	r2, [r3, #0]
     7aa:	7ad3      	ldrb	r3, [r2, #11]
     7ac:	2108      	movs	r1, #8
     7ae:	430b      	orrs	r3, r1
     7b0:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     7b2:	2100      	movs	r1, #0
     7b4:	4893      	ldr	r0, [pc, #588]	; (a04 <sd_mmc_check+0x36c>)
     7b6:	4b8a      	ldr	r3, [pc, #552]	; (9e0 <sd_mmc_check+0x348>)
     7b8:	4798      	blx	r3
     7ba:	2800      	cmp	r0, #0
     7bc:	d08c      	beq.n	6d8 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     7be:	4b86      	ldr	r3, [pc, #536]	; (9d8 <sd_mmc_check+0x340>)
     7c0:	681b      	ldr	r3, [r3, #0]
     7c2:	7adb      	ldrb	r3, [r3, #11]
     7c4:	07da      	lsls	r2, r3, #31
     7c6:	d400      	bmi.n	7ca <sd_mmc_check+0x132>
     7c8:	e1a4      	b.n	b14 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     7ca:	4b8f      	ldr	r3, [pc, #572]	; (a08 <sd_mmc_check+0x370>)
     7cc:	4798      	blx	r3
     7ce:	2800      	cmp	r0, #0
     7d0:	d082      	beq.n	6d8 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     7d2:	4b81      	ldr	r3, [pc, #516]	; (9d8 <sd_mmc_check+0x340>)
     7d4:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     7d6:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     7d8:	2107      	movs	r1, #7
     7da:	4019      	ands	r1, r3
     7dc:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     7de:	488b      	ldr	r0, [pc, #556]	; (a0c <sd_mmc_check+0x374>)
     7e0:	5808      	ldr	r0, [r1, r0]
     7e2:	21fa      	movs	r1, #250	; 0xfa
     7e4:	0089      	lsls	r1, r1, #2
     7e6:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     7e8:	065b      	lsls	r3, r3, #25
     7ea:	0f1b      	lsrs	r3, r3, #28
     7ec:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     7ee:	4888      	ldr	r0, [pc, #544]	; (a10 <sd_mmc_check+0x378>)
     7f0:	581b      	ldr	r3, [r3, r0]
     7f2:	434b      	muls	r3, r1
     7f4:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     7f6:	7b93      	ldrb	r3, [r2, #14]
     7f8:	099b      	lsrs	r3, r3, #6
     7fa:	d000      	beq.n	7fe <sd_mmc_check+0x166>
     7fc:	e13c      	b.n	a78 <sd_mmc_check+0x3e0>
     7fe:	7d91      	ldrb	r1, [r2, #22]
     800:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     802:	7d53      	ldrb	r3, [r2, #21]
     804:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     806:	7d10      	ldrb	r0, [r2, #20]
     808:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     80a:	4303      	orrs	r3, r0
     80c:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     80e:	7e10      	ldrb	r0, [r2, #24]
     810:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     812:	7dd1      	ldrb	r1, [r2, #23]
     814:	0049      	lsls	r1, r1, #1
     816:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     818:	051b      	lsls	r3, r3, #20
     81a:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     81c:	3301      	adds	r3, #1
     81e:	2107      	movs	r1, #7
     820:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     822:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     824:	408b      	lsls	r3, r1
     826:	7cd0      	ldrb	r0, [r2, #19]
     828:	210f      	movs	r1, #15
     82a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     82c:	408b      	lsls	r3, r1
				/ 1024;
     82e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     830:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     832:	8911      	ldrh	r1, [r2, #8]
     834:	0409      	lsls	r1, r1, #16
     836:	4877      	ldr	r0, [pc, #476]	; (a14 <sd_mmc_check+0x37c>)
     838:	4b69      	ldr	r3, [pc, #420]	; (9e0 <sd_mmc_check+0x348>)
     83a:	4798      	blx	r3
     83c:	2800      	cmp	r0, #0
     83e:	d100      	bne.n	842 <sd_mmc_check+0x1aa>
     840:	e74a      	b.n	6d8 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     842:	2301      	movs	r3, #1
     844:	9300      	str	r3, [sp, #0]
     846:	2208      	movs	r2, #8
     848:	2100      	movs	r1, #0
     84a:	4873      	ldr	r0, [pc, #460]	; (a18 <sd_mmc_check+0x380>)
     84c:	4d73      	ldr	r5, [pc, #460]	; (a1c <sd_mmc_check+0x384>)
     84e:	47a8      	blx	r5
     850:	2800      	cmp	r0, #0
     852:	d100      	bne.n	856 <sd_mmc_check+0x1be>
     854:	e740      	b.n	6d8 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     856:	2101      	movs	r1, #1
     858:	a806      	add	r0, sp, #24
     85a:	4b71      	ldr	r3, [pc, #452]	; (a20 <sd_mmc_check+0x388>)
     85c:	4798      	blx	r3
     85e:	2800      	cmp	r0, #0
     860:	d100      	bne.n	864 <sd_mmc_check+0x1cc>
     862:	e739      	b.n	6d8 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     864:	4b6f      	ldr	r3, [pc, #444]	; (a24 <sd_mmc_check+0x38c>)
     866:	4798      	blx	r3
     868:	2800      	cmp	r0, #0
     86a:	d100      	bne.n	86e <sd_mmc_check+0x1d6>
     86c:	e734      	b.n	6d8 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     86e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     870:	781b      	ldrb	r3, [r3, #0]
     872:	220f      	movs	r2, #15
     874:	4013      	ands	r3, r2
     876:	2b01      	cmp	r3, #1
     878:	d100      	bne.n	87c <sd_mmc_check+0x1e4>
     87a:	e119      	b.n	ab0 <sd_mmc_check+0x418>
     87c:	2b00      	cmp	r3, #0
     87e:	d100      	bne.n	882 <sd_mmc_check+0x1ea>
     880:	e109      	b.n	a96 <sd_mmc_check+0x3fe>
     882:	2b02      	cmp	r3, #2
     884:	d100      	bne.n	888 <sd_mmc_check+0x1f0>
     886:	e118      	b.n	aba <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     888:	4b53      	ldr	r3, [pc, #332]	; (9d8 <sd_mmc_check+0x340>)
     88a:	681b      	ldr	r3, [r3, #0]
     88c:	2210      	movs	r2, #16
     88e:	731a      	strb	r2, [r3, #12]
     890:	e105      	b.n	a9e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     892:	2100      	movs	r1, #0
     894:	4858      	ldr	r0, [pc, #352]	; (9f8 <sd_mmc_check+0x360>)
     896:	4b52      	ldr	r3, [pc, #328]	; (9e0 <sd_mmc_check+0x348>)
     898:	4798      	blx	r3
     89a:	2800      	cmp	r0, #0
     89c:	d100      	bne.n	8a0 <sd_mmc_check+0x208>
     89e:	e71b      	b.n	6d8 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     8a0:	4b54      	ldr	r3, [pc, #336]	; (9f4 <sd_mmc_check+0x35c>)
     8a2:	4798      	blx	r3
     8a4:	23c0      	movs	r3, #192	; 0xc0
     8a6:	05db      	lsls	r3, r3, #23
     8a8:	4018      	ands	r0, r3
     8aa:	2380      	movs	r3, #128	; 0x80
     8ac:	05db      	lsls	r3, r3, #23
     8ae:	4298      	cmp	r0, r3
     8b0:	d105      	bne.n	8be <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     8b2:	4b49      	ldr	r3, [pc, #292]	; (9d8 <sd_mmc_check+0x340>)
     8b4:	681a      	ldr	r2, [r3, #0]
     8b6:	7ad1      	ldrb	r1, [r2, #11]
     8b8:	2308      	movs	r3, #8
     8ba:	430b      	orrs	r3, r1
     8bc:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     8be:	2100      	movs	r1, #0
     8c0:	4850      	ldr	r0, [pc, #320]	; (a04 <sd_mmc_check+0x36c>)
     8c2:	4b47      	ldr	r3, [pc, #284]	; (9e0 <sd_mmc_check+0x348>)
     8c4:	4798      	blx	r3
     8c6:	2800      	cmp	r0, #0
     8c8:	d100      	bne.n	8cc <sd_mmc_check+0x234>
     8ca:	e705      	b.n	6d8 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     8cc:	4b4e      	ldr	r3, [pc, #312]	; (a08 <sd_mmc_check+0x370>)
     8ce:	4798      	blx	r3
     8d0:	2800      	cmp	r0, #0
     8d2:	d100      	bne.n	8d6 <sd_mmc_check+0x23e>
     8d4:	e700      	b.n	6d8 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     8d6:	4b40      	ldr	r3, [pc, #256]	; (9d8 <sd_mmc_check+0x340>)
     8d8:	681a      	ldr	r2, [r3, #0]
     8da:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     8dc:	069b      	lsls	r3, r3, #26
     8de:	0f1b      	lsrs	r3, r3, #28
     8e0:	2b02      	cmp	r3, #2
     8e2:	d100      	bne.n	8e6 <sd_mmc_check+0x24e>
     8e4:	e0a8      	b.n	a38 <sd_mmc_check+0x3a0>
     8e6:	d907      	bls.n	8f8 <sd_mmc_check+0x260>
     8e8:	2b03      	cmp	r3, #3
     8ea:	d100      	bne.n	8ee <sd_mmc_check+0x256>
     8ec:	e0a7      	b.n	a3e <sd_mmc_check+0x3a6>
     8ee:	2b04      	cmp	r3, #4
     8f0:	d104      	bne.n	8fc <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     8f2:	2340      	movs	r3, #64	; 0x40
     8f4:	7313      	strb	r3, [r2, #12]
     8f6:	e003      	b.n	900 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     8f8:	2b01      	cmp	r3, #1
     8fa:	d066      	beq.n	9ca <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     8fc:	2312      	movs	r3, #18
     8fe:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     900:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     902:	0659      	lsls	r1, r3, #25
     904:	0f09      	lsrs	r1, r1, #28
     906:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     908:	2007      	movs	r0, #7
     90a:	4003      	ands	r3, r0
     90c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     90e:	483f      	ldr	r0, [pc, #252]	; (a0c <sd_mmc_check+0x374>)
     910:	5818      	ldr	r0, [r3, r0]
     912:	23fa      	movs	r3, #250	; 0xfa
     914:	009b      	lsls	r3, r3, #2
     916:	4343      	muls	r3, r0
     918:	4843      	ldr	r0, [pc, #268]	; (a28 <sd_mmc_check+0x390>)
     91a:	5809      	ldr	r1, [r1, r0]
     91c:	434b      	muls	r3, r1
     91e:	6013      	str	r3, [r2, #0]
     920:	7d91      	ldrb	r1, [r2, #22]
     922:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     924:	7d53      	ldrb	r3, [r2, #21]
     926:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     928:	7d10      	ldrb	r0, [r2, #20]
     92a:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     92c:	4303      	orrs	r3, r0
     92e:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     930:	051b      	lsls	r3, r3, #20
     932:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     934:	493d      	ldr	r1, [pc, #244]	; (a2c <sd_mmc_check+0x394>)
     936:	428b      	cmp	r3, r1
     938:	d00f      	beq.n	95a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     93a:	7e10      	ldrb	r0, [r2, #24]
     93c:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     93e:	7dd1      	ldrb	r1, [r2, #23]
     940:	0049      	lsls	r1, r1, #1
     942:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     944:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     946:	2007      	movs	r0, #7
     948:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     94a:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     94c:	408b      	lsls	r3, r1
     94e:	7cd1      	ldrb	r1, [r2, #19]
     950:	3008      	adds	r0, #8
     952:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     954:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     956:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     958:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     95a:	7b13      	ldrb	r3, [r2, #12]
     95c:	2b3f      	cmp	r3, #63	; 0x3f
     95e:	d97b      	bls.n	a58 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     960:	2100      	movs	r1, #0
     962:	9100      	str	r1, [sp, #0]
     964:	2301      	movs	r3, #1
     966:	2280      	movs	r2, #128	; 0x80
     968:	0092      	lsls	r2, r2, #2
     96a:	4831      	ldr	r0, [pc, #196]	; (a30 <sd_mmc_check+0x398>)
     96c:	4d2b      	ldr	r5, [pc, #172]	; (a1c <sd_mmc_check+0x384>)
     96e:	47a8      	blx	r5
     970:	2800      	cmp	r0, #0
     972:	d100      	bne.n	976 <sd_mmc_check+0x2de>
     974:	e6b0      	b.n	6d8 <sd_mmc_check+0x40>
     976:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     978:	4e2e      	ldr	r6, [pc, #184]	; (a34 <sd_mmc_check+0x39c>)
     97a:	a805      	add	r0, sp, #20
     97c:	47b0      	blx	r6
     97e:	2800      	cmp	r0, #0
     980:	d100      	bne.n	984 <sd_mmc_check+0x2ec>
     982:	e6a9      	b.n	6d8 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     984:	3501      	adds	r5, #1
     986:	b2ad      	uxth	r5, r5
     988:	2d32      	cmp	r5, #50	; 0x32
     98a:	d1f6      	bne.n	97a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     98c:	4b12      	ldr	r3, [pc, #72]	; (9d8 <sd_mmc_check+0x340>)
     98e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     990:	7d8a      	ldrb	r2, [r1, #22]
     992:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     994:	7d4b      	ldrb	r3, [r1, #21]
     996:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     998:	7d09      	ldrb	r1, [r1, #20]
     99a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     99c:	430b      	orrs	r3, r1
     99e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     9a0:	051b      	lsls	r3, r3, #20
     9a2:	0d1b      	lsrs	r3, r3, #20
     9a4:	4a21      	ldr	r2, [pc, #132]	; (a2c <sd_mmc_check+0x394>)
     9a6:	4293      	cmp	r3, r2
     9a8:	d154      	bne.n	a54 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     9aa:	4e22      	ldr	r6, [pc, #136]	; (a34 <sd_mmc_check+0x39c>)
     9ac:	a806      	add	r0, sp, #24
     9ae:	47b0      	blx	r6
     9b0:	2800      	cmp	r0, #0
     9b2:	d100      	bne.n	9b6 <sd_mmc_check+0x31e>
     9b4:	e690      	b.n	6d8 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     9b6:	3501      	adds	r5, #1
     9b8:	b2ad      	uxth	r5, r5
     9ba:	2d35      	cmp	r5, #53	; 0x35
     9bc:	d9f6      	bls.n	9ac <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     9be:	4b06      	ldr	r3, [pc, #24]	; (9d8 <sd_mmc_check+0x340>)
     9c0:	681a      	ldr	r2, [r3, #0]
     9c2:	9b06      	ldr	r3, [sp, #24]
     9c4:	085b      	lsrs	r3, r3, #1
     9c6:	6053      	str	r3, [r2, #4]
     9c8:	e044      	b.n	a54 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     9ca:	2314      	movs	r3, #20
     9cc:	7313      	strb	r3, [r2, #12]
     9ce:	e797      	b.n	900 <sd_mmc_check+0x268>
     9d0:	0000057d 	.word	0x0000057d
     9d4:	0000065d 	.word	0x0000065d
     9d8:	2000008c 	.word	0x2000008c
     9dc:	0000128d 	.word	0x0000128d
     9e0:	00001455 	.word	0x00001455
     9e4:	00005508 	.word	0x00005508
     9e8:	00001110 	.word	0x00001110
     9ec:	000005d9 	.word	0x000005d9
     9f0:	00000555 	.word	0x00000555
     9f4:	0000146d 	.word	0x0000146d
     9f8:	0000053a 	.word	0x0000053a
     9fc:	00001bef 	.word	0x00001bef
     a00:	00001101 	.word	0x00001101
     a04:	0000113b 	.word	0x0000113b
     a08:	00000611 	.word	0x00000611
     a0c:	00005d40 	.word	0x00005d40
     a10:	00005d5c 	.word	0x00005d5c
     a14:	00001137 	.word	0x00001137
     a18:	00081133 	.word	0x00081133
     a1c:	000012c5 	.word	0x000012c5
     a20:	000014f1 	.word	0x000014f1
     a24:	0000157d 	.word	0x0000157d
     a28:	00005d00 	.word	0x00005d00
     a2c:	00000fff 	.word	0x00000fff
     a30:	00081108 	.word	0x00081108
     a34:	00001479 	.word	0x00001479
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     a38:	2322      	movs	r3, #34	; 0x22
     a3a:	7313      	strb	r3, [r2, #12]
     a3c:	e760      	b.n	900 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     a3e:	2330      	movs	r3, #48	; 0x30
     a40:	7313      	strb	r3, [r2, #12]
     a42:	e75d      	b.n	900 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     a44:	a806      	add	r0, sp, #24
     a46:	4b36      	ldr	r3, [pc, #216]	; (b20 <sd_mmc_check+0x488>)
     a48:	4798      	blx	r3
     a4a:	2800      	cmp	r0, #0
     a4c:	d100      	bne.n	a50 <sd_mmc_check+0x3b8>
     a4e:	e643      	b.n	6d8 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     a50:	3501      	adds	r5, #1
     a52:	b2ad      	uxth	r5, r5
     a54:	2d7f      	cmp	r5, #127	; 0x7f
     a56:	d9f5      	bls.n	a44 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     a58:	2180      	movs	r1, #128	; 0x80
     a5a:	0089      	lsls	r1, r1, #2
     a5c:	4831      	ldr	r0, [pc, #196]	; (b24 <sd_mmc_check+0x48c>)
     a5e:	4b32      	ldr	r3, [pc, #200]	; (b28 <sd_mmc_check+0x490>)
     a60:	4798      	blx	r3
     a62:	2800      	cmp	r0, #0
     a64:	d100      	bne.n	a68 <sd_mmc_check+0x3d0>
     a66:	e637      	b.n	6d8 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     a68:	4b30      	ldr	r3, [pc, #192]	; (b2c <sd_mmc_check+0x494>)
     a6a:	4798      	blx	r3
     a6c:	2800      	cmp	r0, #0
     a6e:	d100      	bne.n	a72 <sd_mmc_check+0x3da>
     a70:	e632      	b.n	6d8 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     a72:	4b2f      	ldr	r3, [pc, #188]	; (b30 <sd_mmc_check+0x498>)
     a74:	4798      	blx	r3
     a76:	e65e      	b.n	736 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     a78:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     a7a:	7d93      	ldrb	r3, [r2, #22]
     a7c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     a7e:	7d51      	ldrb	r1, [r2, #21]
     a80:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     a82:	430b      	orrs	r3, r1
     a84:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     a86:	029b      	lsls	r3, r3, #10
				* 512;
     a88:	085b      	lsrs	r3, r3, #1
     a8a:	2180      	movs	r1, #128	; 0x80
     a8c:	0089      	lsls	r1, r1, #2
     a8e:	468c      	mov	ip, r1
     a90:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     a92:	6053      	str	r3, [r2, #4]
     a94:	e6cd      	b.n	832 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     a96:	4b27      	ldr	r3, [pc, #156]	; (b34 <sd_mmc_check+0x49c>)
     a98:	681b      	ldr	r3, [r3, #0]
     a9a:	2210      	movs	r2, #16
     a9c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     a9e:	4b25      	ldr	r3, [pc, #148]	; (b34 <sd_mmc_check+0x49c>)
     aa0:	681b      	ldr	r3, [r3, #0]
     aa2:	7adb      	ldrb	r3, [r3, #11]
     aa4:	2209      	movs	r2, #9
     aa6:	4013      	ands	r3, r2
     aa8:	2b01      	cmp	r3, #1
     aaa:	d000      	beq.n	aae <sd_mmc_check+0x416>
     aac:	e638      	b.n	720 <sd_mmc_check+0x88>
     aae:	e630      	b.n	712 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     ab0:	4b20      	ldr	r3, [pc, #128]	; (b34 <sd_mmc_check+0x49c>)
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	221a      	movs	r2, #26
     ab6:	731a      	strb	r2, [r3, #12]
     ab8:	e7f1      	b.n	a9e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     aba:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     abc:	789b      	ldrb	r3, [r3, #2]
     abe:	09db      	lsrs	r3, r3, #7
     ac0:	2b01      	cmp	r3, #1
     ac2:	d104      	bne.n	ace <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     ac4:	4b1b      	ldr	r3, [pc, #108]	; (b34 <sd_mmc_check+0x49c>)
     ac6:	681b      	ldr	r3, [r3, #0]
     ac8:	2230      	movs	r2, #48	; 0x30
     aca:	731a      	strb	r2, [r3, #12]
     acc:	e7e7      	b.n	a9e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     ace:	4b19      	ldr	r3, [pc, #100]	; (b34 <sd_mmc_check+0x49c>)
     ad0:	681b      	ldr	r3, [r3, #0]
     ad2:	2220      	movs	r2, #32
     ad4:	731a      	strb	r2, [r3, #12]
     ad6:	e7e2      	b.n	a9e <sd_mmc_check+0x406>
	*v2 = 0;
     ad8:	2600      	movs	r6, #0
     ada:	e60d      	b.n	6f8 <sd_mmc_check+0x60>
     adc:	1e73      	subs	r3, r6, #1
     ade:	419e      	sbcs	r6, r3
     ae0:	07b3      	lsls	r3, r6, #30
     ae2:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     ae4:	4d14      	ldr	r5, [pc, #80]	; (b38 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     ae6:	4f10      	ldr	r7, [pc, #64]	; (b28 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     ae8:	46b8      	mov	r8, r7
		resp = driver_get_response();
     aea:	4e14      	ldr	r6, [pc, #80]	; (b3c <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     aec:	2100      	movs	r1, #0
     aee:	4814      	ldr	r0, [pc, #80]	; (b40 <sd_mmc_check+0x4a8>)
     af0:	47b8      	blx	r7
     af2:	2800      	cmp	r0, #0
     af4:	d100      	bne.n	af8 <sd_mmc_check+0x460>
     af6:	e638      	b.n	76a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     af8:	9903      	ldr	r1, [sp, #12]
     afa:	4812      	ldr	r0, [pc, #72]	; (b44 <sd_mmc_check+0x4ac>)
     afc:	47c0      	blx	r8
     afe:	2800      	cmp	r0, #0
     b00:	d100      	bne.n	b04 <sd_mmc_check+0x46c>
     b02:	e632      	b.n	76a <sd_mmc_check+0xd2>
		resp = driver_get_response();
     b04:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     b06:	07c3      	lsls	r3, r0, #31
     b08:	d400      	bmi.n	b0c <sd_mmc_check+0x474>
     b0a:	e628      	b.n	75e <sd_mmc_check+0xc6>
     b0c:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     b0e:	2d00      	cmp	r5, #0
     b10:	d1ec      	bne.n	aec <sd_mmc_check+0x454>
     b12:	e62a      	b.n	76a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     b14:	2209      	movs	r2, #9
     b16:	4013      	ands	r3, r2
     b18:	2b01      	cmp	r3, #1
     b1a:	d000      	beq.n	b1e <sd_mmc_check+0x486>
     b1c:	e609      	b.n	732 <sd_mmc_check+0x9a>
     b1e:	e5f8      	b.n	712 <sd_mmc_check+0x7a>
     b20:	00001479 	.word	0x00001479
     b24:	00001110 	.word	0x00001110
     b28:	00001455 	.word	0x00001455
     b2c:	000005d9 	.word	0x000005d9
     b30:	00000555 	.word	0x00000555
     b34:	2000008c 	.word	0x2000008c
     b38:	00001bef 	.word	0x00001bef
     b3c:	0000146d 	.word	0x0000146d
     b40:	00001137 	.word	0x00001137
     b44:	00001129 	.word	0x00001129

00000b48 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     b48:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     b4a:	4b06      	ldr	r3, [pc, #24]	; (b64 <sd_mmc_get_type+0x1c>)
     b4c:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     b4e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     b50:	2800      	cmp	r0, #0
     b52:	d001      	beq.n	b58 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     b54:	0018      	movs	r0, r3
     b56:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     b58:	4b03      	ldr	r3, [pc, #12]	; (b68 <sd_mmc_get_type+0x20>)
     b5a:	4798      	blx	r3
	return sd_mmc_card->type;
     b5c:	4b03      	ldr	r3, [pc, #12]	; (b6c <sd_mmc_get_type+0x24>)
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	7adb      	ldrb	r3, [r3, #11]
     b62:	e7f7      	b.n	b54 <sd_mmc_get_type+0xc>
     b64:	0000057d 	.word	0x0000057d
     b68:	0000065d 	.word	0x0000065d
     b6c:	2000008c 	.word	0x2000008c

00000b70 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     b70:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     b72:	4b06      	ldr	r3, [pc, #24]	; (b8c <sd_mmc_get_capacity+0x1c>)
     b74:	4798      	blx	r3
		return 0;
     b76:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     b78:	2800      	cmp	r0, #0
     b7a:	d001      	beq.n	b80 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     b7c:	0018      	movs	r0, r3
     b7e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     b80:	4b03      	ldr	r3, [pc, #12]	; (b90 <sd_mmc_get_capacity+0x20>)
     b82:	4798      	blx	r3
	return sd_mmc_card->capacity;
     b84:	4b03      	ldr	r3, [pc, #12]	; (b94 <sd_mmc_get_capacity+0x24>)
     b86:	681b      	ldr	r3, [r3, #0]
     b88:	685b      	ldr	r3, [r3, #4]
     b8a:	e7f7      	b.n	b7c <sd_mmc_get_capacity+0xc>
     b8c:	0000057d 	.word	0x0000057d
     b90:	0000065d 	.word	0x0000065d
     b94:	2000008c 	.word	0x2000008c

00000b98 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     b98:	2000      	movs	r0, #0
     b9a:	4770      	bx	lr

00000b9c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     b9c:	b570      	push	{r4, r5, r6, lr}
     b9e:	b082      	sub	sp, #8
     ba0:	000e      	movs	r6, r1
     ba2:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     ba4:	4b16      	ldr	r3, [pc, #88]	; (c00 <sd_mmc_init_read_blocks+0x64>)
     ba6:	4798      	blx	r3
     ba8:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     baa:	d002      	beq.n	bb2 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     bac:	0020      	movs	r0, r4
     bae:	b002      	add	sp, #8
     bb0:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     bb2:	4b14      	ldr	r3, [pc, #80]	; (c04 <sd_mmc_init_read_blocks+0x68>)
     bb4:	4798      	blx	r3
     bb6:	2800      	cmp	r0, #0
     bb8:	d017      	beq.n	bea <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     bba:	2d01      	cmp	r5, #1
     bbc:	d919      	bls.n	bf2 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     bbe:	4812      	ldr	r0, [pc, #72]	; (c08 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     bc0:	4b12      	ldr	r3, [pc, #72]	; (c0c <sd_mmc_init_read_blocks+0x70>)
     bc2:	681b      	ldr	r3, [r3, #0]
     bc4:	7adb      	ldrb	r3, [r3, #11]
     bc6:	071b      	lsls	r3, r3, #28
     bc8:	d400      	bmi.n	bcc <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     bca:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     bcc:	2301      	movs	r3, #1
     bce:	9300      	str	r3, [sp, #0]
     bd0:	002b      	movs	r3, r5
     bd2:	2280      	movs	r2, #128	; 0x80
     bd4:	0092      	lsls	r2, r2, #2
     bd6:	0031      	movs	r1, r6
     bd8:	4e0d      	ldr	r6, [pc, #52]	; (c10 <sd_mmc_init_read_blocks+0x74>)
     bda:	47b0      	blx	r6
     bdc:	2800      	cmp	r0, #0
     bde:	d00a      	beq.n	bf6 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     be0:	4b0c      	ldr	r3, [pc, #48]	; (c14 <sd_mmc_init_read_blocks+0x78>)
     be2:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     be4:	4b0c      	ldr	r3, [pc, #48]	; (c18 <sd_mmc_init_read_blocks+0x7c>)
     be6:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     be8:	e7e0      	b.n	bac <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     bea:	4b0c      	ldr	r3, [pc, #48]	; (c1c <sd_mmc_init_read_blocks+0x80>)
     bec:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     bee:	3405      	adds	r4, #5
     bf0:	e7dc      	b.n	bac <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     bf2:	480b      	ldr	r0, [pc, #44]	; (c20 <sd_mmc_init_read_blocks+0x84>)
     bf4:	e7e4      	b.n	bc0 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     bf6:	4b09      	ldr	r3, [pc, #36]	; (c1c <sd_mmc_init_read_blocks+0x80>)
     bf8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     bfa:	2405      	movs	r4, #5
     bfc:	e7d6      	b.n	bac <sd_mmc_init_read_blocks+0x10>
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	0000057d 	.word	0x0000057d
     c04:	000005d9 	.word	0x000005d9
     c08:	00101112 	.word	0x00101112
     c0c:	2000008c 	.word	0x2000008c
     c10:	000012c5 	.word	0x000012c5
     c14:	200000b0 	.word	0x200000b0
     c18:	200000b2 	.word	0x200000b2
     c1c:	0000065d 	.word	0x0000065d
     c20:	00081111 	.word	0x00081111

00000c24 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     c24:	b510      	push	{r4, lr}
     c26:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     c28:	4b07      	ldr	r3, [pc, #28]	; (c48 <sd_mmc_start_read_blocks+0x24>)
     c2a:	4798      	blx	r3
     c2c:	2800      	cmp	r0, #0
     c2e:	d104      	bne.n	c3a <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     c30:	2200      	movs	r2, #0
     c32:	4b06      	ldr	r3, [pc, #24]	; (c4c <sd_mmc_start_read_blocks+0x28>)
     c34:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     c36:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     c38:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     c3a:	4a04      	ldr	r2, [pc, #16]	; (c4c <sd_mmc_start_read_blocks+0x28>)
     c3c:	8813      	ldrh	r3, [r2, #0]
     c3e:	1b1c      	subs	r4, r3, r4
     c40:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     c42:	2000      	movs	r0, #0
     c44:	e7f8      	b.n	c38 <sd_mmc_start_read_blocks+0x14>
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	000014f1 	.word	0x000014f1
     c4c:	200000b0 	.word	0x200000b0

00000c50 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     c50:	b510      	push	{r4, lr}
     c52:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     c54:	4b14      	ldr	r3, [pc, #80]	; (ca8 <sd_mmc_wait_end_of_read_blocks+0x58>)
     c56:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     c58:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     c5a:	2800      	cmp	r0, #0
     c5c:	d101      	bne.n	c62 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     c5e:	0018      	movs	r0, r3
     c60:	bd10      	pop	{r4, pc}
	if (abort) {
     c62:	2c00      	cmp	r4, #0
     c64:	d010      	beq.n	c88 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     c66:	2200      	movs	r2, #0
     c68:	4b10      	ldr	r3, [pc, #64]	; (cac <sd_mmc_wait_end_of_read_blocks+0x5c>)
     c6a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     c6c:	4b10      	ldr	r3, [pc, #64]	; (cb0 <sd_mmc_wait_end_of_read_blocks+0x60>)
     c6e:	881b      	ldrh	r3, [r3, #0]
     c70:	2b01      	cmp	r3, #1
     c72:	d00f      	beq.n	c94 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     c74:	2100      	movs	r1, #0
     c76:	480f      	ldr	r0, [pc, #60]	; (cb4 <sd_mmc_wait_end_of_read_blocks+0x64>)
     c78:	4b0f      	ldr	r3, [pc, #60]	; (cb8 <sd_mmc_wait_end_of_read_blocks+0x68>)
     c7a:	4798      	blx	r3
     c7c:	2800      	cmp	r0, #0
     c7e:	d00d      	beq.n	c9c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     c80:	4b0e      	ldr	r3, [pc, #56]	; (cbc <sd_mmc_wait_end_of_read_blocks+0x6c>)
     c82:	4798      	blx	r3
	return SD_MMC_OK;
     c84:	2300      	movs	r3, #0
     c86:	e7ea      	b.n	c5e <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     c88:	4b08      	ldr	r3, [pc, #32]	; (cac <sd_mmc_wait_end_of_read_blocks+0x5c>)
     c8a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     c8c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     c8e:	2a00      	cmp	r2, #0
     c90:	d0ec      	beq.n	c6c <sd_mmc_wait_end_of_read_blocks+0x1c>
     c92:	e7e4      	b.n	c5e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     c94:	4b09      	ldr	r3, [pc, #36]	; (cbc <sd_mmc_wait_end_of_read_blocks+0x6c>)
     c96:	4798      	blx	r3
		return SD_MMC_OK;
     c98:	2300      	movs	r3, #0
     c9a:	e7e0      	b.n	c5e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     c9c:	2100      	movs	r1, #0
     c9e:	4805      	ldr	r0, [pc, #20]	; (cb4 <sd_mmc_wait_end_of_read_blocks+0x64>)
     ca0:	4b05      	ldr	r3, [pc, #20]	; (cb8 <sd_mmc_wait_end_of_read_blocks+0x68>)
     ca2:	4798      	blx	r3
     ca4:	e7ec      	b.n	c80 <sd_mmc_wait_end_of_read_blocks+0x30>
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	0000157d 	.word	0x0000157d
     cac:	200000b0 	.word	0x200000b0
     cb0:	200000b2 	.word	0x200000b2
     cb4:	0000310c 	.word	0x0000310c
     cb8:	00001455 	.word	0x00001455
     cbc:	0000065d 	.word	0x0000065d

00000cc0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     cc0:	b570      	push	{r4, r5, r6, lr}
     cc2:	b082      	sub	sp, #8
     cc4:	000e      	movs	r6, r1
     cc6:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     cc8:	4b11      	ldr	r3, [pc, #68]	; (d10 <sd_mmc_init_write_blocks+0x50>)
     cca:	4798      	blx	r3
     ccc:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     cce:	d116      	bne.n	cfe <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     cd0:	2d01      	cmp	r5, #1
     cd2:	d917      	bls.n	d04 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     cd4:	480f      	ldr	r0, [pc, #60]	; (d14 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     cd6:	4b10      	ldr	r3, [pc, #64]	; (d18 <sd_mmc_init_write_blocks+0x58>)
     cd8:	681b      	ldr	r3, [r3, #0]
     cda:	7adb      	ldrb	r3, [r3, #11]
     cdc:	071b      	lsls	r3, r3, #28
     cde:	d400      	bmi.n	ce2 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     ce0:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     ce2:	2301      	movs	r3, #1
     ce4:	9300      	str	r3, [sp, #0]
     ce6:	002b      	movs	r3, r5
     ce8:	2280      	movs	r2, #128	; 0x80
     cea:	0092      	lsls	r2, r2, #2
     cec:	0031      	movs	r1, r6
     cee:	4e0b      	ldr	r6, [pc, #44]	; (d1c <sd_mmc_init_write_blocks+0x5c>)
     cf0:	47b0      	blx	r6
     cf2:	2800      	cmp	r0, #0
     cf4:	d008      	beq.n	d08 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     cf6:	4b0a      	ldr	r3, [pc, #40]	; (d20 <sd_mmc_init_write_blocks+0x60>)
     cf8:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     cfa:	4b0a      	ldr	r3, [pc, #40]	; (d24 <sd_mmc_init_write_blocks+0x64>)
     cfc:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     cfe:	0020      	movs	r0, r4
     d00:	b002      	add	sp, #8
     d02:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     d04:	4808      	ldr	r0, [pc, #32]	; (d28 <sd_mmc_init_write_blocks+0x68>)
     d06:	e7e6      	b.n	cd6 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     d08:	4b08      	ldr	r3, [pc, #32]	; (d2c <sd_mmc_init_write_blocks+0x6c>)
     d0a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     d0c:	2405      	movs	r4, #5
     d0e:	e7f6      	b.n	cfe <sd_mmc_init_write_blocks+0x3e>
     d10:	0000057d 	.word	0x0000057d
     d14:	00109119 	.word	0x00109119
     d18:	2000008c 	.word	0x2000008c
     d1c:	000012c5 	.word	0x000012c5
     d20:	200000b0 	.word	0x200000b0
     d24:	200000b2 	.word	0x200000b2
     d28:	00089118 	.word	0x00089118
     d2c:	0000065d 	.word	0x0000065d

00000d30 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     d30:	b510      	push	{r4, lr}
     d32:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     d34:	4b07      	ldr	r3, [pc, #28]	; (d54 <sd_mmc_start_write_blocks+0x24>)
     d36:	4798      	blx	r3
     d38:	2800      	cmp	r0, #0
     d3a:	d104      	bne.n	d46 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     d3c:	2200      	movs	r2, #0
     d3e:	4b06      	ldr	r3, [pc, #24]	; (d58 <sd_mmc_start_write_blocks+0x28>)
     d40:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     d42:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     d44:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     d46:	4a04      	ldr	r2, [pc, #16]	; (d58 <sd_mmc_start_write_blocks+0x28>)
     d48:	8813      	ldrh	r3, [r2, #0]
     d4a:	1b1c      	subs	r4, r3, r4
     d4c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     d4e:	2000      	movs	r0, #0
     d50:	e7f8      	b.n	d44 <sd_mmc_start_write_blocks+0x14>
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	00001581 	.word	0x00001581
     d58:	200000b0 	.word	0x200000b0

00000d5c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     d5c:	b510      	push	{r4, lr}
     d5e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     d60:	4b0e      	ldr	r3, [pc, #56]	; (d9c <sd_mmc_wait_end_of_write_blocks+0x40>)
     d62:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     d64:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     d66:	2800      	cmp	r0, #0
     d68:	d101      	bne.n	d6e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     d6a:	0018      	movs	r0, r3
     d6c:	bd10      	pop	{r4, pc}
	if (abort) {
     d6e:	2c00      	cmp	r4, #0
     d70:	d00a      	beq.n	d88 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     d72:	2200      	movs	r2, #0
     d74:	4b0a      	ldr	r3, [pc, #40]	; (da0 <sd_mmc_wait_end_of_write_blocks+0x44>)
     d76:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     d78:	4b0a      	ldr	r3, [pc, #40]	; (da4 <sd_mmc_wait_end_of_write_blocks+0x48>)
     d7a:	881b      	ldrh	r3, [r3, #0]
     d7c:	2b01      	cmp	r3, #1
     d7e:	d009      	beq.n	d94 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     d80:	4b09      	ldr	r3, [pc, #36]	; (da8 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     d82:	4798      	blx	r3
	return SD_MMC_OK;
     d84:	2300      	movs	r3, #0
     d86:	e7f0      	b.n	d6a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     d88:	4b05      	ldr	r3, [pc, #20]	; (da0 <sd_mmc_wait_end_of_write_blocks+0x44>)
     d8a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     d8c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     d8e:	2a00      	cmp	r2, #0
     d90:	d0f2      	beq.n	d78 <sd_mmc_wait_end_of_write_blocks+0x1c>
     d92:	e7ea      	b.n	d6a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     d94:	4b04      	ldr	r3, [pc, #16]	; (da8 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     d96:	4798      	blx	r3
		return SD_MMC_OK;
     d98:	2300      	movs	r3, #0
     d9a:	e7e6      	b.n	d6a <sd_mmc_wait_end_of_write_blocks+0xe>
     d9c:	00001601 	.word	0x00001601
     da0:	200000b0 	.word	0x200000b0
     da4:	200000b2 	.word	0x200000b2
     da8:	0000065d 	.word	0x0000065d

00000dac <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     dac:	b510      	push	{r4, lr}
     dae:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
     db0:	4b0f      	ldr	r3, [pc, #60]	; (df0 <sd_mmc_test_unit_ready+0x44>)
     db2:	4798      	blx	r3
     db4:	2801      	cmp	r0, #1
     db6:	d019      	beq.n	dec <sd_mmc_test_unit_ready+0x40>
     db8:	2800      	cmp	r0, #0
     dba:	d003      	beq.n	dc4 <sd_mmc_test_unit_ready+0x18>
     dbc:	2802      	cmp	r0, #2
     dbe:	d010      	beq.n	de2 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     dc0:	2001      	movs	r0, #1
	}
}
     dc2:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
     dc4:	4b0b      	ldr	r3, [pc, #44]	; (df4 <sd_mmc_test_unit_ready+0x48>)
     dc6:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
     dc8:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
     dca:	2b00      	cmp	r3, #0
     dcc:	d1f9      	bne.n	dc2 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     dce:	0020      	movs	r0, r4
     dd0:	4b09      	ldr	r3, [pc, #36]	; (df8 <sd_mmc_test_unit_ready+0x4c>)
     dd2:	4798      	blx	r3
     dd4:	0003      	movs	r3, r0
     dd6:	2003      	movs	r0, #3
     dd8:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
     dda:	4243      	negs	r3, r0
     ddc:	4158      	adcs	r0, r3
     dde:	0040      	lsls	r0, r0, #1
     de0:	e7ef      	b.n	dc2 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
     de2:	2200      	movs	r2, #0
     de4:	4b03      	ldr	r3, [pc, #12]	; (df4 <sd_mmc_test_unit_ready+0x48>)
     de6:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
     de8:	2002      	movs	r0, #2
     dea:	e7ea      	b.n	dc2 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
     dec:	2003      	movs	r0, #3
     dee:	e7e8      	b.n	dc2 <sd_mmc_test_unit_ready+0x16>
     df0:	00000699 	.word	0x00000699
     df4:	200000b8 	.word	0x200000b8
     df8:	00000b49 	.word	0x00000b49

00000dfc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
     dfc:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
     dfe:	2000      	movs	r0, #0
     e00:	4b01      	ldr	r3, [pc, #4]	; (e08 <sd_mmc_test_unit_ready_0+0xc>)
     e02:	4798      	blx	r3
}
     e04:	bd10      	pop	{r4, pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	00000dad 	.word	0x00000dad

00000e0c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     e0c:	b570      	push	{r4, r5, r6, lr}
     e0e:	0004      	movs	r4, r0
     e10:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     e12:	4b04      	ldr	r3, [pc, #16]	; (e24 <sd_mmc_read_capacity+0x18>)
     e14:	4798      	blx	r3
     e16:	0040      	lsls	r0, r0, #1
     e18:	3801      	subs	r0, #1
     e1a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     e1c:	0020      	movs	r0, r4
     e1e:	4b02      	ldr	r3, [pc, #8]	; (e28 <sd_mmc_read_capacity+0x1c>)
     e20:	4798      	blx	r3
}
     e22:	bd70      	pop	{r4, r5, r6, pc}
     e24:	00000b71 	.word	0x00000b71
     e28:	00000dad 	.word	0x00000dad

00000e2c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
     e2c:	b510      	push	{r4, lr}
     e2e:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
     e30:	2000      	movs	r0, #0
     e32:	4b01      	ldr	r3, [pc, #4]	; (e38 <sd_mmc_read_capacity_0+0xc>)
     e34:	4798      	blx	r3
}
     e36:	bd10      	pop	{r4, pc}
     e38:	00000e0d 	.word	0x00000e0d

00000e3c <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
     e3c:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
     e3e:	2000      	movs	r0, #0
     e40:	4b01      	ldr	r3, [pc, #4]	; (e48 <sd_mmc_wr_protect_0+0xc>)
     e42:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
     e44:	bd10      	pop	{r4, pc}
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	00000b99 	.word	0x00000b99

00000e4c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     e4c:	b510      	push	{r4, lr}
     e4e:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     e50:	2201      	movs	r2, #1
     e52:	4b0c      	ldr	r3, [pc, #48]	; (e84 <sd_mmc_mem_2_ram+0x38>)
     e54:	4798      	blx	r3
     e56:	2800      	cmp	r0, #0
     e58:	d004      	beq.n	e64 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     e5a:	3802      	subs	r0, #2
     e5c:	4243      	negs	r3, r0
     e5e:	4158      	adcs	r0, r3
     e60:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     e62:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     e64:	2101      	movs	r1, #1
     e66:	0020      	movs	r0, r4
     e68:	4b07      	ldr	r3, [pc, #28]	; (e88 <sd_mmc_mem_2_ram+0x3c>)
     e6a:	4798      	blx	r3
     e6c:	0003      	movs	r3, r0
		return CTRL_FAIL;
     e6e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     e70:	2b00      	cmp	r3, #0
     e72:	d1f6      	bne.n	e62 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
     e74:	2000      	movs	r0, #0
     e76:	4b05      	ldr	r3, [pc, #20]	; (e8c <sd_mmc_mem_2_ram+0x40>)
     e78:	4798      	blx	r3
     e7a:	1e43      	subs	r3, r0, #1
     e7c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     e7e:	b2c0      	uxtb	r0, r0
     e80:	e7ef      	b.n	e62 <sd_mmc_mem_2_ram+0x16>
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	00000b9d 	.word	0x00000b9d
     e88:	00000c25 	.word	0x00000c25
     e8c:	00000c51 	.word	0x00000c51

00000e90 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
     e90:	b510      	push	{r4, lr}
     e92:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
     e94:	0001      	movs	r1, r0
     e96:	2000      	movs	r0, #0
     e98:	4b01      	ldr	r3, [pc, #4]	; (ea0 <sd_mmc_mem_2_ram_0+0x10>)
     e9a:	4798      	blx	r3
}
     e9c:	bd10      	pop	{r4, pc}
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	00000e4d 	.word	0x00000e4d

00000ea4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     ea4:	b510      	push	{r4, lr}
     ea6:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     ea8:	2201      	movs	r2, #1
     eaa:	4b0c      	ldr	r3, [pc, #48]	; (edc <sd_mmc_ram_2_mem+0x38>)
     eac:	4798      	blx	r3
     eae:	2800      	cmp	r0, #0
     eb0:	d004      	beq.n	ebc <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     eb2:	3802      	subs	r0, #2
     eb4:	4243      	negs	r3, r0
     eb6:	4158      	adcs	r0, r3
     eb8:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     eba:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     ebc:	2101      	movs	r1, #1
     ebe:	0020      	movs	r0, r4
     ec0:	4b07      	ldr	r3, [pc, #28]	; (ee0 <sd_mmc_ram_2_mem+0x3c>)
     ec2:	4798      	blx	r3
     ec4:	0003      	movs	r3, r0
		return CTRL_FAIL;
     ec6:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     ec8:	2b00      	cmp	r3, #0
     eca:	d1f6      	bne.n	eba <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
     ecc:	2000      	movs	r0, #0
     ece:	4b05      	ldr	r3, [pc, #20]	; (ee4 <sd_mmc_ram_2_mem+0x40>)
     ed0:	4798      	blx	r3
     ed2:	1e43      	subs	r3, r0, #1
     ed4:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     ed6:	b2c0      	uxtb	r0, r0
     ed8:	e7ef      	b.n	eba <sd_mmc_ram_2_mem+0x16>
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	00000cc1 	.word	0x00000cc1
     ee0:	00000d31 	.word	0x00000d31
     ee4:	00000d5d 	.word	0x00000d5d

00000ee8 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
     ee8:	b510      	push	{r4, lr}
     eea:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
     eec:	0001      	movs	r1, r0
     eee:	2000      	movs	r0, #0
     ef0:	4b01      	ldr	r3, [pc, #4]	; (ef8 <sd_mmc_ram_2_mem_0+0x10>)
     ef2:	4798      	blx	r3
}
     ef4:	bd10      	pop	{r4, pc}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00000ea5 	.word	0x00000ea5

00000efc <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
     efc:	b500      	push	{lr}
     efe:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
     f00:	466b      	mov	r3, sp
     f02:	1dd9      	adds	r1, r3, #7
     f04:	23ff      	movs	r3, #255	; 0xff
     f06:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
     f08:	2201      	movs	r2, #1
     f0a:	480b      	ldr	r0, [pc, #44]	; (f38 <sd_mmc_spi_start_write_block+0x3c>)
     f0c:	4b0b      	ldr	r3, [pc, #44]	; (f3c <sd_mmc_spi_start_write_block+0x40>)
     f0e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
     f10:	4b0b      	ldr	r3, [pc, #44]	; (f40 <sd_mmc_spi_start_write_block+0x44>)
     f12:	881b      	ldrh	r3, [r3, #0]
     f14:	2b01      	cmp	r3, #1
     f16:	d00a      	beq.n	f2e <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
     f18:	22fc      	movs	r2, #252	; 0xfc
     f1a:	466b      	mov	r3, sp
     f1c:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
     f1e:	2201      	movs	r2, #1
     f20:	466b      	mov	r3, sp
     f22:	1d99      	adds	r1, r3, #6
     f24:	4804      	ldr	r0, [pc, #16]	; (f38 <sd_mmc_spi_start_write_block+0x3c>)
     f26:	4b05      	ldr	r3, [pc, #20]	; (f3c <sd_mmc_spi_start_write_block+0x40>)
     f28:	4798      	blx	r3
}
     f2a:	b003      	add	sp, #12
     f2c:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
     f2e:	22fe      	movs	r2, #254	; 0xfe
     f30:	466b      	mov	r3, sp
     f32:	719a      	strb	r2, [r3, #6]
     f34:	e7f3      	b.n	f1e <sd_mmc_spi_start_write_block+0x22>
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	200000bc 	.word	0x200000bc
     f3c:	0000220d 	.word	0x0000220d
     f40:	20000100 	.word	0x20000100

00000f44 <sd_mmc_spi_wait_busy>:
{
     f44:	b5f0      	push	{r4, r5, r6, r7, lr}
     f46:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
     f48:	466b      	mov	r3, sp
     f4a:	1ddc      	adds	r4, r3, #7
     f4c:	23ff      	movs	r3, #255	; 0xff
     f4e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     f50:	4e12      	ldr	r6, [pc, #72]	; (f9c <sd_mmc_spi_wait_busy+0x58>)
     f52:	2201      	movs	r2, #1
     f54:	0021      	movs	r1, r4
     f56:	0030      	movs	r0, r6
     f58:	4d11      	ldr	r5, [pc, #68]	; (fa0 <sd_mmc_spi_wait_busy+0x5c>)
     f5a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     f5c:	23ff      	movs	r3, #255	; 0xff
     f5e:	2201      	movs	r2, #1
     f60:	0021      	movs	r1, r4
     f62:	0030      	movs	r0, r6
     f64:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     f66:	23ff      	movs	r3, #255	; 0xff
     f68:	2201      	movs	r2, #1
     f6a:	0021      	movs	r1, r4
     f6c:	0030      	movs	r0, r6
     f6e:	47a8      	blx	r5
     f70:	4c0c      	ldr	r4, [pc, #48]	; (fa4 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
     f72:	466b      	mov	r3, sp
     f74:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     f76:	4e09      	ldr	r6, [pc, #36]	; (f9c <sd_mmc_spi_wait_busy+0x58>)
     f78:	4f09      	ldr	r7, [pc, #36]	; (fa0 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
     f7a:	782b      	ldrb	r3, [r5, #0]
     f7c:	2bff      	cmp	r3, #255	; 0xff
     f7e:	d009      	beq.n	f94 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     f80:	23ff      	movs	r3, #255	; 0xff
     f82:	2201      	movs	r2, #1
     f84:	0029      	movs	r1, r5
     f86:	0030      	movs	r0, r6
     f88:	47b8      	blx	r7
     f8a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
     f8c:	2c00      	cmp	r4, #0
     f8e:	d1f4      	bne.n	f7a <sd_mmc_spi_wait_busy+0x36>
			return false;
     f90:	2000      	movs	r0, #0
     f92:	e000      	b.n	f96 <sd_mmc_spi_wait_busy+0x52>
	return true;
     f94:	2001      	movs	r0, #1
}
     f96:	b003      	add	sp, #12
     f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	200000bc 	.word	0x200000bc
     fa0:	00002045 	.word	0x00002045
     fa4:	00030d40 	.word	0x00030d40

00000fa8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
     fa8:	b570      	push	{r4, r5, r6, lr}
     faa:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
     fac:	4b14      	ldr	r3, [pc, #80]	; (1000 <sd_mmc_spi_stop_multiwrite_block+0x58>)
     fae:	881c      	ldrh	r4, [r3, #0]
     fb0:	2c01      	cmp	r4, #1
     fb2:	d023      	beq.n	ffc <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
     fb4:	4b13      	ldr	r3, [pc, #76]	; (1004 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
     fb6:	8819      	ldrh	r1, [r3, #0]
     fb8:	4b13      	ldr	r3, [pc, #76]	; (1008 <sd_mmc_spi_stop_multiwrite_block+0x60>)
     fba:	6818      	ldr	r0, [r3, #0]
     fbc:	4b13      	ldr	r3, [pc, #76]	; (100c <sd_mmc_spi_stop_multiwrite_block+0x64>)
     fbe:	4798      	blx	r3
		return true; // It is not the End of multi write
     fc0:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
     fc2:	4284      	cmp	r4, r0
     fc4:	d902      	bls.n	fcc <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
     fc6:	0018      	movs	r0, r3
     fc8:	b002      	add	sp, #8
     fca:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
     fcc:	466b      	mov	r3, sp
     fce:	1ddc      	adds	r4, r3, #7
     fd0:	23ff      	movs	r3, #255	; 0xff
     fd2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     fd4:	4e0e      	ldr	r6, [pc, #56]	; (1010 <sd_mmc_spi_stop_multiwrite_block+0x68>)
     fd6:	2201      	movs	r2, #1
     fd8:	0021      	movs	r1, r4
     fda:	0030      	movs	r0, r6
     fdc:	4d0d      	ldr	r5, [pc, #52]	; (1014 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
     fde:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
     fe0:	23fd      	movs	r3, #253	; 0xfd
     fe2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     fe4:	2201      	movs	r2, #1
     fe6:	0021      	movs	r1, r4
     fe8:	0030      	movs	r0, r6
     fea:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
     fec:	4b0a      	ldr	r3, [pc, #40]	; (1018 <sd_mmc_spi_stop_multiwrite_block+0x70>)
     fee:	4798      	blx	r3
     ff0:	1e03      	subs	r3, r0, #0
     ff2:	d1e8      	bne.n	fc6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
     ff4:	2105      	movs	r1, #5
     ff6:	4a09      	ldr	r2, [pc, #36]	; (101c <sd_mmc_spi_stop_multiwrite_block+0x74>)
     ff8:	7011      	strb	r1, [r2, #0]
		return false;
     ffa:	e7e4      	b.n	fc6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
     ffc:	2301      	movs	r3, #1
     ffe:	e7e2      	b.n	fc6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    1000:	20000100 	.word	0x20000100
    1004:	200000f8 	.word	0x200000f8
    1008:	20000108 	.word	0x20000108
    100c:	0000519d 	.word	0x0000519d
    1010:	200000bc 	.word	0x200000bc
    1014:	0000220d 	.word	0x0000220d
    1018:	00000f45 	.word	0x00000f45
    101c:	200000ff 	.word	0x200000ff

00001020 <sd_mmc_spi_start_read_block>:
{
    1020:	b5f0      	push	{r4, r5, r6, r7, lr}
    1022:	b083      	sub	sp, #12
	token = 0;
    1024:	2200      	movs	r2, #0
    1026:	466b      	mov	r3, sp
    1028:	71da      	strb	r2, [r3, #7]
    102a:	4c14      	ldr	r4, [pc, #80]	; (107c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    102c:	466b      	mov	r3, sp
    102e:	1ddd      	adds	r5, r3, #7
    1030:	4e13      	ldr	r6, [pc, #76]	; (1080 <sd_mmc_spi_start_read_block+0x60>)
    1032:	4f14      	ldr	r7, [pc, #80]	; (1084 <sd_mmc_spi_start_read_block+0x64>)
    1034:	23ff      	movs	r3, #255	; 0xff
    1036:	2201      	movs	r2, #1
    1038:	0029      	movs	r1, r5
    103a:	0030      	movs	r0, r6
    103c:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    103e:	782b      	ldrb	r3, [r5, #0]
    1040:	220f      	movs	r2, #15
    1042:	0019      	movs	r1, r3
    1044:	4391      	bics	r1, r2
    1046:	1e0a      	subs	r2, r1, #0
    1048:	d009      	beq.n	105e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    104a:	2bfe      	cmp	r3, #254	; 0xfe
    104c:	d013      	beq.n	1076 <sd_mmc_spi_start_read_block+0x56>
    104e:	3c01      	subs	r4, #1
		if (i-- == 0) {
    1050:	2c00      	cmp	r4, #0
    1052:	d1ef      	bne.n	1034 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    1054:	2204      	movs	r2, #4
    1056:	4b0c      	ldr	r3, [pc, #48]	; (1088 <sd_mmc_spi_start_read_block+0x68>)
    1058:	701a      	strb	r2, [r3, #0]
			return false;
    105a:	2000      	movs	r0, #0
    105c:	e00c      	b.n	1078 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    105e:	075b      	lsls	r3, r3, #29
    1060:	d004      	beq.n	106c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    1062:	3207      	adds	r2, #7
    1064:	4b08      	ldr	r3, [pc, #32]	; (1088 <sd_mmc_spi_start_read_block+0x68>)
    1066:	701a      	strb	r2, [r3, #0]
			return false;
    1068:	2000      	movs	r0, #0
    106a:	e005      	b.n	1078 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    106c:	220b      	movs	r2, #11
    106e:	4b06      	ldr	r3, [pc, #24]	; (1088 <sd_mmc_spi_start_read_block+0x68>)
    1070:	701a      	strb	r2, [r3, #0]
			return false;
    1072:	2000      	movs	r0, #0
    1074:	e000      	b.n	1078 <sd_mmc_spi_start_read_block+0x58>
	return true;
    1076:	2001      	movs	r0, #1
}
    1078:	b003      	add	sp, #12
    107a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    107c:	0007a120 	.word	0x0007a120
    1080:	200000bc 	.word	0x200000bc
    1084:	00002045 	.word	0x00002045
    1088:	200000ff 	.word	0x200000ff

0000108c <sd_mmc_spi_stop_write_block>:
{
    108c:	b530      	push	{r4, r5, lr}
    108e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    1090:	a901      	add	r1, sp, #4
    1092:	2301      	movs	r3, #1
    1094:	425b      	negs	r3, r3
    1096:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    1098:	4d14      	ldr	r5, [pc, #80]	; (10ec <sd_mmc_spi_stop_write_block+0x60>)
    109a:	2202      	movs	r2, #2
    109c:	0028      	movs	r0, r5
    109e:	4b14      	ldr	r3, [pc, #80]	; (10f0 <sd_mmc_spi_stop_write_block+0x64>)
    10a0:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    10a2:	466b      	mov	r3, sp
    10a4:	1ddc      	adds	r4, r3, #7
    10a6:	23ff      	movs	r3, #255	; 0xff
    10a8:	2201      	movs	r2, #1
    10aa:	0021      	movs	r1, r4
    10ac:	0028      	movs	r0, r5
    10ae:	4d11      	ldr	r5, [pc, #68]	; (10f4 <sd_mmc_spi_stop_write_block+0x68>)
    10b0:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    10b2:	7822      	ldrb	r2, [r4, #0]
    10b4:	2311      	movs	r3, #17
    10b6:	4013      	ands	r3, r2
    10b8:	2b01      	cmp	r3, #1
    10ba:	d005      	beq.n	10c8 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    10bc:	2201      	movs	r2, #1
    10be:	4b0e      	ldr	r3, [pc, #56]	; (10f8 <sd_mmc_spi_stop_write_block+0x6c>)
    10c0:	701a      	strb	r2, [r3, #0]
		return false;
    10c2:	2000      	movs	r0, #0
}
    10c4:	b003      	add	sp, #12
    10c6:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    10c8:	231e      	movs	r3, #30
    10ca:	401a      	ands	r2, r3
    10cc:	2a04      	cmp	r2, #4
    10ce:	d00b      	beq.n	10e8 <sd_mmc_spi_stop_write_block+0x5c>
    10d0:	2a0a      	cmp	r2, #10
    10d2:	d104      	bne.n	10de <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    10d4:	3a02      	subs	r2, #2
    10d6:	4b08      	ldr	r3, [pc, #32]	; (10f8 <sd_mmc_spi_stop_write_block+0x6c>)
    10d8:	701a      	strb	r2, [r3, #0]
		return false;
    10da:	2000      	movs	r0, #0
    10dc:	e7f2      	b.n	10c4 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    10de:	220a      	movs	r2, #10
    10e0:	4b05      	ldr	r3, [pc, #20]	; (10f8 <sd_mmc_spi_stop_write_block+0x6c>)
    10e2:	701a      	strb	r2, [r3, #0]
		return false;
    10e4:	2000      	movs	r0, #0
    10e6:	e7ed      	b.n	10c4 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    10e8:	2001      	movs	r0, #1
    10ea:	e7eb      	b.n	10c4 <sd_mmc_spi_stop_write_block+0x38>
    10ec:	200000bc 	.word	0x200000bc
    10f0:	0000220d 	.word	0x0000220d
    10f4:	00002045 	.word	0x00002045
    10f8:	200000ff 	.word	0x200000ff

000010fc <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    10fc:	b510      	push	{r4, lr}
	spi_reset(&sd_mmc_master);
    10fe:	4802      	ldr	r0, [pc, #8]	; (1108 <sd_mmc_deinit+0xc>)
    1100:	4b02      	ldr	r3, [pc, #8]	; (110c <sd_mmc_deinit+0x10>)
    1102:	4798      	blx	r3
}
    1104:	bd10      	pop	{r4, pc}
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	200000bc 	.word	0x200000bc
    110c:	00001d69 	.word	0x00001d69

00001110 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    1110:	b570      	push	{r4, r5, r6, lr}
    1112:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1114:	2300      	movs	r3, #0
    1116:	4a2d      	ldr	r2, [pc, #180]	; (11cc <sd_mmc_spi_init+0xbc>)
    1118:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    111a:	ac02      	add	r4, sp, #8
    111c:	2501      	movs	r5, #1
    111e:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1120:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1122:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1124:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1126:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1128:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    112a:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    112c:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    112e:	2224      	movs	r2, #36	; 0x24
    1130:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1132:	3a18      	subs	r2, #24
    1134:	2100      	movs	r1, #0
    1136:	a808      	add	r0, sp, #32
    1138:	4b25      	ldr	r3, [pc, #148]	; (11d0 <sd_mmc_spi_init+0xc0>)
    113a:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    113c:	2380      	movs	r3, #128	; 0x80
    113e:	025b      	lsls	r3, r3, #9
    1140:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    1142:	4b24      	ldr	r3, [pc, #144]	; (11d4 <sd_mmc_spi_init+0xc4>)
    1144:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    1146:	4b24      	ldr	r3, [pc, #144]	; (11d8 <sd_mmc_spi_init+0xc8>)
    1148:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    114a:	4b24      	ldr	r3, [pc, #144]	; (11dc <sd_mmc_spi_init+0xcc>)
    114c:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    114e:	4b24      	ldr	r3, [pc, #144]	; (11e0 <sd_mmc_spi_init+0xd0>)
    1150:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    1152:	4b24      	ldr	r3, [pc, #144]	; (11e4 <sd_mmc_spi_init+0xd4>)
    1154:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    1156:	4e24      	ldr	r6, [pc, #144]	; (11e8 <sd_mmc_spi_init+0xd8>)
    1158:	0022      	movs	r2, r4
    115a:	4924      	ldr	r1, [pc, #144]	; (11ec <sd_mmc_spi_init+0xdc>)
    115c:	0030      	movs	r0, r6
    115e:	4b24      	ldr	r3, [pc, #144]	; (11f0 <sd_mmc_spi_init+0xe0>)
    1160:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1162:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1164:	0020      	movs	r0, r4
    1166:	4b23      	ldr	r3, [pc, #140]	; (11f4 <sd_mmc_spi_init+0xe4>)
    1168:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    116a:	231f      	movs	r3, #31
    116c:	4018      	ands	r0, r3
    116e:	4085      	lsls	r5, r0
    1170:	4b21      	ldr	r3, [pc, #132]	; (11f8 <sd_mmc_spi_init+0xe8>)
    1172:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1174:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    1176:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1178:	2b00      	cmp	r3, #0
    117a:	d1fc      	bne.n	1176 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    117c:	6823      	ldr	r3, [r4, #0]
    117e:	2202      	movs	r2, #2
    1180:	4313      	orrs	r3, r2
    1182:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    1184:	4a1d      	ldr	r2, [pc, #116]	; (11fc <sd_mmc_spi_init+0xec>)
    1186:	2300      	movs	r3, #0
    1188:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    118a:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    118c:	491c      	ldr	r1, [pc, #112]	; (1200 <sd_mmc_spi_init+0xf0>)
    118e:	7808      	ldrb	r0, [r1, #0]
    1190:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    1192:	4c1c      	ldr	r4, [pc, #112]	; (1204 <sd_mmc_spi_init+0xf4>)
    1194:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1196:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1198:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    119a:	a901      	add	r1, sp, #4
    119c:	2201      	movs	r2, #1
    119e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    11a0:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    11a2:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    11a4:	4b18      	ldr	r3, [pc, #96]	; (1208 <sd_mmc_spi_init+0xf8>)
    11a6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    11a8:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11aa:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    11ac:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    11ae:	2900      	cmp	r1, #0
    11b0:	d104      	bne.n	11bc <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    11b2:	0953      	lsrs	r3, r2, #5
    11b4:	01db      	lsls	r3, r3, #7
    11b6:	4915      	ldr	r1, [pc, #84]	; (120c <sd_mmc_spi_init+0xfc>)
    11b8:	468c      	mov	ip, r1
    11ba:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    11bc:	211f      	movs	r1, #31
    11be:	4011      	ands	r1, r2
    11c0:	2201      	movs	r2, #1
    11c2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    11c4:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    11c6:	b010      	add	sp, #64	; 0x40
    11c8:	bd70      	pop	{r4, r5, r6, pc}
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	200000ff 	.word	0x200000ff
    11d0:	00005539 	.word	0x00005539
    11d4:	00100002 	.word	0x00100002
    11d8:	00110002 	.word	0x00110002
    11dc:	00120002 	.word	0x00120002
    11e0:	00130002 	.word	0x00130002
    11e4:	00061a80 	.word	0x00061a80
    11e8:	200000bc 	.word	0x200000bc
    11ec:	42000c00 	.word	0x42000c00
    11f0:	00001e6d 	.word	0x00001e6d
    11f4:	00001cd9 	.word	0x00001cd9
    11f8:	e000e100 	.word	0xe000e100
    11fc:	2000010c 	.word	0x2000010c
    1200:	20000008 	.word	0x20000008
    1204:	200000fc 	.word	0x200000fc
    1208:	00001729 	.word	0x00001729
    120c:	41004400 	.word	0x41004400

00001210 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    1210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1212:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1214:	2200      	movs	r2, #0
    1216:	4b0d      	ldr	r3, [pc, #52]	; (124c <sd_mmc_spi_select_device+0x3c>)
    1218:	701a      	strb	r2, [r3, #0]
    121a:	000c      	movs	r4, r1
    121c:	4b0c      	ldr	r3, [pc, #48]	; (1250 <sd_mmc_spi_select_device+0x40>)
    121e:	4299      	cmp	r1, r3
    1220:	d900      	bls.n	1224 <sd_mmc_spi_select_device+0x14>
    1222:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    1224:	4d0b      	ldr	r5, [pc, #44]	; (1254 <sd_mmc_spi_select_device+0x44>)
    1226:	4e0c      	ldr	r6, [pc, #48]	; (1258 <sd_mmc_spi_select_device+0x48>)
    1228:	e001      	b.n	122e <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    122a:	08e3      	lsrs	r3, r4, #3
    122c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    122e:	0021      	movs	r1, r4
    1230:	0028      	movs	r0, r5
    1232:	47b0      	blx	r6
    1234:	2817      	cmp	r0, #23
    1236:	d0f8      	beq.n	122a <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    1238:	0079      	lsls	r1, r7, #1
    123a:	19cf      	adds	r7, r1, r7
    123c:	4907      	ldr	r1, [pc, #28]	; (125c <sd_mmc_spi_select_device+0x4c>)
    123e:	19c9      	adds	r1, r1, r7
    1240:	2201      	movs	r2, #1
    1242:	4804      	ldr	r0, [pc, #16]	; (1254 <sd_mmc_spi_select_device+0x44>)
    1244:	4b06      	ldr	r3, [pc, #24]	; (1260 <sd_mmc_spi_select_device+0x50>)
    1246:	4798      	blx	r3
}
    1248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	200000ff 	.word	0x200000ff
    1250:	00989680 	.word	0x00989680
    1254:	200000bc 	.word	0x200000bc
    1258:	00001db5 	.word	0x00001db5
    125c:	200000fc 	.word	0x200000fc
    1260:	00002119 	.word	0x00002119

00001264 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    1264:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1266:	2200      	movs	r2, #0
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <sd_mmc_spi_deselect_device+0x18>)
    126a:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    126c:	0041      	lsls	r1, r0, #1
    126e:	1808      	adds	r0, r1, r0
    1270:	4903      	ldr	r1, [pc, #12]	; (1280 <sd_mmc_spi_deselect_device+0x1c>)
    1272:	1809      	adds	r1, r1, r0
    1274:	4803      	ldr	r0, [pc, #12]	; (1284 <sd_mmc_spi_deselect_device+0x20>)
    1276:	4b04      	ldr	r3, [pc, #16]	; (1288 <sd_mmc_spi_deselect_device+0x24>)
    1278:	4798      	blx	r3
}
    127a:	bd10      	pop	{r4, pc}
    127c:	200000ff 	.word	0x200000ff
    1280:	200000fc 	.word	0x200000fc
    1284:	200000bc 	.word	0x200000bc
    1288:	00002119 	.word	0x00002119

0000128c <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    128c:	b570      	push	{r4, r5, r6, lr}
    128e:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    1290:	22ff      	movs	r2, #255	; 0xff
    1292:	466b      	mov	r3, sp
    1294:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1296:	2200      	movs	r2, #0
    1298:	4b07      	ldr	r3, [pc, #28]	; (12b8 <sd_mmc_spi_send_clock+0x2c>)
    129a:	701a      	strb	r2, [r3, #0]
    129c:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    129e:	4e07      	ldr	r6, [pc, #28]	; (12bc <sd_mmc_spi_send_clock+0x30>)
    12a0:	4d07      	ldr	r5, [pc, #28]	; (12c0 <sd_mmc_spi_send_clock+0x34>)
    12a2:	2201      	movs	r2, #1
    12a4:	466b      	mov	r3, sp
    12a6:	1dd9      	adds	r1, r3, #7
    12a8:	0030      	movs	r0, r6
    12aa:	47a8      	blx	r5
    12ac:	3c01      	subs	r4, #1
    12ae:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    12b0:	2c00      	cmp	r4, #0
    12b2:	d1f6      	bne.n	12a2 <sd_mmc_spi_send_clock+0x16>
	}
}
    12b4:	b002      	add	sp, #8
    12b6:	bd70      	pop	{r4, r5, r6, pc}
    12b8:	200000ff 	.word	0x200000ff
    12bc:	200000bc 	.word	0x200000bc
    12c0:	0000220d 	.word	0x0000220d

000012c4 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    12c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12c6:	46c6      	mov	lr, r8
    12c8:	b500      	push	{lr}
    12ca:	b086      	sub	sp, #24
    12cc:	4680      	mov	r8, r0
    12ce:	9200      	str	r2, [sp, #0]
    12d0:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    12d2:	22ff      	movs	r2, #255	; 0xff
    12d4:	230f      	movs	r3, #15
    12d6:	a802      	add	r0, sp, #8
    12d8:	4684      	mov	ip, r0
    12da:	4463      	add	r3, ip
    12dc:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    12de:	2200      	movs	r2, #0
    12e0:	4b53      	ldr	r3, [pc, #332]	; (1430 <sd_mmc_spi_adtc_start+0x16c>)
    12e2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    12e4:	ab04      	add	r3, sp, #16
    12e6:	323f      	adds	r2, #63	; 0x3f
    12e8:	4640      	mov	r0, r8
    12ea:	4002      	ands	r2, r0
    12ec:	2040      	movs	r0, #64	; 0x40
    12ee:	4302      	orrs	r2, r0
    12f0:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    12f2:	0e0a      	lsrs	r2, r1, #24
    12f4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    12f6:	0c0a      	lsrs	r2, r1, #16
    12f8:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    12fa:	0a0a      	lsrs	r2, r1, #8
    12fc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    12fe:	7119      	strb	r1, [r3, #4]
    1300:	2700      	movs	r7, #0
	crc = 0;
    1302:	2300      	movs	r3, #0
		value = *buf++;
    1304:	a904      	add	r1, sp, #16
    1306:	2208      	movs	r2, #8
				crc ^= 0x09;
    1308:	2409      	movs	r4, #9
    130a:	e011      	b.n	1330 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    130c:	0076      	lsls	r6, r6, #1
    130e:	b2f6      	uxtb	r6, r6
    1310:	3801      	subs	r0, #1
    1312:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    1314:	2800      	cmp	r0, #0
    1316:	d008      	beq.n	132a <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    1318:	005b      	lsls	r3, r3, #1
    131a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    131c:	001d      	movs	r5, r3
    131e:	4075      	eors	r5, r6
    1320:	062d      	lsls	r5, r5, #24
    1322:	d5f3      	bpl.n	130c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    1324:	4063      	eors	r3, r4
    1326:	b2db      	uxtb	r3, r3
    1328:	e7f0      	b.n	130c <sd_mmc_spi_adtc_start+0x48>
    132a:	3701      	adds	r7, #1
	while (size--) {
    132c:	2f05      	cmp	r7, #5
    132e:	d002      	beq.n	1336 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    1330:	5c7e      	ldrb	r6, [r7, r1]
    1332:	0010      	movs	r0, r2
    1334:	e7f0      	b.n	1318 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    1336:	005b      	lsls	r3, r3, #1
    1338:	2201      	movs	r2, #1
    133a:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    133c:	ac04      	add	r4, sp, #16
    133e:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    1340:	4e3c      	ldr	r6, [pc, #240]	; (1434 <sd_mmc_spi_adtc_start+0x170>)
    1342:	2201      	movs	r2, #1
    1344:	210f      	movs	r1, #15
    1346:	ab02      	add	r3, sp, #8
    1348:	469c      	mov	ip, r3
    134a:	4461      	add	r1, ip
    134c:	0030      	movs	r0, r6
    134e:	4f3a      	ldr	r7, [pc, #232]	; (1438 <sd_mmc_spi_adtc_start+0x174>)
    1350:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    1352:	2206      	movs	r2, #6
    1354:	0021      	movs	r1, r4
    1356:	0030      	movs	r0, r6
    1358:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    135a:	ab02      	add	r3, sp, #8
    135c:	1dd9      	adds	r1, r3, #7
    135e:	23ff      	movs	r3, #255	; 0xff
    1360:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    1362:	2201      	movs	r2, #1
    1364:	0030      	movs	r0, r6
    1366:	4e35      	ldr	r6, [pc, #212]	; (143c <sd_mmc_spi_adtc_start+0x178>)
    1368:	47b0      	blx	r6
    136a:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    136c:	ab02      	add	r3, sp, #8
    136e:	1dde      	adds	r6, r3, #7
    1370:	4f30      	ldr	r7, [pc, #192]	; (1434 <sd_mmc_spi_adtc_start+0x170>)
    1372:	4d32      	ldr	r5, [pc, #200]	; (143c <sd_mmc_spi_adtc_start+0x178>)
    1374:	23ff      	movs	r3, #255	; 0xff
    1376:	2201      	movs	r2, #1
    1378:	0031      	movs	r1, r6
    137a:	0038      	movs	r0, r7
    137c:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    137e:	7833      	ldrb	r3, [r6, #0]
    1380:	b25a      	sxtb	r2, r3
    1382:	2a00      	cmp	r2, #0
    1384:	da0b      	bge.n	139e <sd_mmc_spi_adtc_start+0xda>
    1386:	3c01      	subs	r4, #1
    1388:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    138a:	2c00      	cmp	r4, #0
    138c:	d1f2      	bne.n	1374 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    138e:	2202      	movs	r2, #2
    1390:	4b27      	ldr	r3, [pc, #156]	; (1430 <sd_mmc_spi_adtc_start+0x16c>)
    1392:	701a      	strb	r2, [r3, #0]
			return false;
    1394:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    1396:	b006      	add	sp, #24
    1398:	bc04      	pop	{r2}
    139a:	4690      	mov	r8, r2
    139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    139e:	4a28      	ldr	r2, [pc, #160]	; (1440 <sd_mmc_spi_adtc_start+0x17c>)
    13a0:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    13a2:	071a      	lsls	r2, r3, #28
    13a4:	d41a      	bmi.n	13dc <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    13a6:	075a      	lsls	r2, r3, #29
    13a8:	d41d      	bmi.n	13e6 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    13aa:	2201      	movs	r2, #1
    13ac:	4393      	bics	r3, r2
    13ae:	d11f      	bne.n	13f0 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    13b0:	4643      	mov	r3, r8
    13b2:	049b      	lsls	r3, r3, #18
    13b4:	d420      	bmi.n	13f8 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    13b6:	4643      	mov	r3, r8
    13b8:	059b      	lsls	r3, r3, #22
    13ba:	d425      	bmi.n	1408 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    13bc:	4643      	mov	r3, r8
    13be:	055b      	lsls	r3, r3, #21
    13c0:	d42b      	bmi.n	141a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    13c2:	4b20      	ldr	r3, [pc, #128]	; (1444 <sd_mmc_spi_adtc_start+0x180>)
    13c4:	466a      	mov	r2, sp
    13c6:	8812      	ldrh	r2, [r2, #0]
    13c8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    13ca:	4b1f      	ldr	r3, [pc, #124]	; (1448 <sd_mmc_spi_adtc_start+0x184>)
    13cc:	466a      	mov	r2, sp
    13ce:	8892      	ldrh	r2, [r2, #4]
    13d0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    13d2:	2200      	movs	r2, #0
    13d4:	4b1d      	ldr	r3, [pc, #116]	; (144c <sd_mmc_spi_adtc_start+0x188>)
    13d6:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    13d8:	2001      	movs	r0, #1
    13da:	e7dc      	b.n	1396 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    13dc:	2206      	movs	r2, #6
    13de:	4b14      	ldr	r3, [pc, #80]	; (1430 <sd_mmc_spi_adtc_start+0x16c>)
    13e0:	701a      	strb	r2, [r3, #0]
		return false;
    13e2:	2000      	movs	r0, #0
    13e4:	e7d7      	b.n	1396 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    13e6:	2209      	movs	r2, #9
    13e8:	4b11      	ldr	r3, [pc, #68]	; (1430 <sd_mmc_spi_adtc_start+0x16c>)
    13ea:	701a      	strb	r2, [r3, #0]
		return false;
    13ec:	2000      	movs	r0, #0
    13ee:	e7d2      	b.n	1396 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    13f0:	4b0f      	ldr	r3, [pc, #60]	; (1430 <sd_mmc_spi_adtc_start+0x16c>)
    13f2:	701a      	strb	r2, [r3, #0]
		return false;
    13f4:	2000      	movs	r0, #0
    13f6:	e7ce      	b.n	1396 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    13f8:	4b15      	ldr	r3, [pc, #84]	; (1450 <sd_mmc_spi_adtc_start+0x18c>)
    13fa:	4798      	blx	r3
    13fc:	2800      	cmp	r0, #0
    13fe:	d1da      	bne.n	13b6 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    1400:	2203      	movs	r2, #3
    1402:	4b0b      	ldr	r3, [pc, #44]	; (1430 <sd_mmc_spi_adtc_start+0x16c>)
    1404:	701a      	strb	r2, [r3, #0]
			return false;
    1406:	e7c6      	b.n	1396 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    1408:	490d      	ldr	r1, [pc, #52]	; (1440 <sd_mmc_spi_adtc_start+0x17c>)
    140a:	2300      	movs	r3, #0
    140c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    140e:	33ff      	adds	r3, #255	; 0xff
    1410:	2201      	movs	r2, #1
    1412:	4808      	ldr	r0, [pc, #32]	; (1434 <sd_mmc_spi_adtc_start+0x170>)
    1414:	4e09      	ldr	r6, [pc, #36]	; (143c <sd_mmc_spi_adtc_start+0x178>)
    1416:	47b0      	blx	r6
    1418:	e7d0      	b.n	13bc <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    141a:	4e09      	ldr	r6, [pc, #36]	; (1440 <sd_mmc_spi_adtc_start+0x17c>)
    141c:	23ff      	movs	r3, #255	; 0xff
    141e:	2204      	movs	r2, #4
    1420:	0031      	movs	r1, r6
    1422:	4804      	ldr	r0, [pc, #16]	; (1434 <sd_mmc_spi_adtc_start+0x170>)
    1424:	4f05      	ldr	r7, [pc, #20]	; (143c <sd_mmc_spi_adtc_start+0x178>)
    1426:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    1428:	6833      	ldr	r3, [r6, #0]
    142a:	ba1b      	rev	r3, r3
    142c:	6033      	str	r3, [r6, #0]
    142e:	e7c8      	b.n	13c2 <sd_mmc_spi_adtc_start+0xfe>
    1430:	200000ff 	.word	0x200000ff
    1434:	200000bc 	.word	0x200000bc
    1438:	0000220d 	.word	0x0000220d
    143c:	00002045 	.word	0x00002045
    1440:	20000104 	.word	0x20000104
    1444:	200000f8 	.word	0x200000f8
    1448:	20000100 	.word	0x20000100
    144c:	20000108 	.word	0x20000108
    1450:	00000f45 	.word	0x00000f45

00001454 <sd_mmc_spi_send_cmd>:
{
    1454:	b510      	push	{r4, lr}
    1456:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    1458:	2300      	movs	r3, #0
    145a:	9300      	str	r3, [sp, #0]
    145c:	2200      	movs	r2, #0
    145e:	4c02      	ldr	r4, [pc, #8]	; (1468 <sd_mmc_spi_send_cmd+0x14>)
    1460:	47a0      	blx	r4
}
    1462:	b002      	add	sp, #8
    1464:	bd10      	pop	{r4, pc}
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	000012c5 	.word	0x000012c5

0000146c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    146c:	4b01      	ldr	r3, [pc, #4]	; (1474 <sd_mmc_spi_get_response+0x8>)
    146e:	6818      	ldr	r0, [r3, #0]
}
    1470:	4770      	bx	lr
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	20000104 	.word	0x20000104

00001478 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    1478:	b510      	push	{r4, lr}
    147a:	b084      	sub	sp, #16
    147c:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    147e:	2200      	movs	r2, #0
    1480:	4b14      	ldr	r3, [pc, #80]	; (14d4 <sd_mmc_spi_read_word+0x5c>)
    1482:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1484:	4b14      	ldr	r3, [pc, #80]	; (14d8 <sd_mmc_spi_read_word+0x60>)
    1486:	8819      	ldrh	r1, [r3, #0]
    1488:	4b14      	ldr	r3, [pc, #80]	; (14dc <sd_mmc_spi_read_word+0x64>)
    148a:	6818      	ldr	r0, [r3, #0]
    148c:	4b14      	ldr	r3, [pc, #80]	; (14e0 <sd_mmc_spi_read_word+0x68>)
    148e:	4798      	blx	r3
    1490:	2900      	cmp	r1, #0
    1492:	d103      	bne.n	149c <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    1494:	4b13      	ldr	r3, [pc, #76]	; (14e4 <sd_mmc_spi_read_word+0x6c>)
    1496:	4798      	blx	r3
    1498:	2800      	cmp	r0, #0
    149a:	d010      	beq.n	14be <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    149c:	23ff      	movs	r3, #255	; 0xff
    149e:	2204      	movs	r2, #4
    14a0:	a901      	add	r1, sp, #4
    14a2:	4811      	ldr	r0, [pc, #68]	; (14e8 <sd_mmc_spi_read_word+0x70>)
    14a4:	4c11      	ldr	r4, [pc, #68]	; (14ec <sd_mmc_spi_read_word+0x74>)
    14a6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    14a8:	4b0c      	ldr	r3, [pc, #48]	; (14dc <sd_mmc_spi_read_word+0x64>)
    14aa:	681a      	ldr	r2, [r3, #0]
    14ac:	1d10      	adds	r0, r2, #4
    14ae:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    14b0:	4b09      	ldr	r3, [pc, #36]	; (14d8 <sd_mmc_spi_read_word+0x60>)
    14b2:	8819      	ldrh	r1, [r3, #0]
    14b4:	4b0a      	ldr	r3, [pc, #40]	; (14e0 <sd_mmc_spi_read_word+0x68>)
    14b6:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    14b8:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    14ba:	2900      	cmp	r1, #0
    14bc:	d001      	beq.n	14c2 <sd_mmc_spi_read_word+0x4a>
}
    14be:	b004      	add	sp, #16
    14c0:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    14c2:	23ff      	movs	r3, #255	; 0xff
    14c4:	2202      	movs	r2, #2
    14c6:	a903      	add	r1, sp, #12
    14c8:	4807      	ldr	r0, [pc, #28]	; (14e8 <sd_mmc_spi_read_word+0x70>)
    14ca:	4c08      	ldr	r4, [pc, #32]	; (14ec <sd_mmc_spi_read_word+0x74>)
    14cc:	47a0      	blx	r4
	return true;
    14ce:	2001      	movs	r0, #1
    14d0:	e7f5      	b.n	14be <sd_mmc_spi_read_word+0x46>
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	200000ff 	.word	0x200000ff
    14d8:	200000f8 	.word	0x200000f8
    14dc:	20000108 	.word	0x20000108
    14e0:	000052a9 	.word	0x000052a9
    14e4:	00001021 	.word	0x00001021
    14e8:	200000bc 	.word	0x200000bc
    14ec:	00002045 	.word	0x00002045

000014f0 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    14f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14f2:	46de      	mov	lr, fp
    14f4:	4657      	mov	r7, sl
    14f6:	4646      	mov	r6, r8
    14f8:	b5c0      	push	{r6, r7, lr}
    14fa:	b082      	sub	sp, #8
    14fc:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    14fe:	2200      	movs	r2, #0
    1500:	4b17      	ldr	r3, [pc, #92]	; (1560 <sd_mmc_spi_start_read_blocks+0x70>)
    1502:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    1504:	1e4c      	subs	r4, r1, #1
    1506:	b2a4      	uxth	r4, r4
    1508:	2900      	cmp	r1, #0
    150a:	d026      	beq.n	155a <sd_mmc_spi_start_read_blocks+0x6a>
    150c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    150e:	4b15      	ldr	r3, [pc, #84]	; (1564 <sd_mmc_spi_start_read_blocks+0x74>)
    1510:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1512:	4f15      	ldr	r7, [pc, #84]	; (1568 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    1514:	47d0      	blx	sl
    1516:	4680      	mov	r8, r0
    1518:	2800      	cmp	r0, #0
    151a:	d017      	beq.n	154c <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    151c:	883a      	ldrh	r2, [r7, #0]
    151e:	465b      	mov	r3, fp
    1520:	1999      	adds	r1, r3, r6
    1522:	23ff      	movs	r3, #255	; 0xff
    1524:	4811      	ldr	r0, [pc, #68]	; (156c <sd_mmc_spi_start_read_blocks+0x7c>)
    1526:	4d12      	ldr	r5, [pc, #72]	; (1570 <sd_mmc_spi_start_read_blocks+0x80>)
    1528:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    152a:	883b      	ldrh	r3, [r7, #0]
    152c:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    152e:	4a11      	ldr	r2, [pc, #68]	; (1574 <sd_mmc_spi_start_read_blocks+0x84>)
    1530:	6811      	ldr	r1, [r2, #0]
    1532:	468c      	mov	ip, r1
    1534:	4463      	add	r3, ip
    1536:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1538:	23ff      	movs	r3, #255	; 0xff
    153a:	2202      	movs	r2, #2
    153c:	a901      	add	r1, sp, #4
    153e:	480b      	ldr	r0, [pc, #44]	; (156c <sd_mmc_spi_start_read_blocks+0x7c>)
    1540:	47a8      	blx	r5
	while (nb_block--) {
    1542:	3c01      	subs	r4, #1
    1544:	b2a4      	uxth	r4, r4
    1546:	4b0c      	ldr	r3, [pc, #48]	; (1578 <sd_mmc_spi_start_read_blocks+0x88>)
    1548:	429c      	cmp	r4, r3
    154a:	d1e3      	bne.n	1514 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    154c:	4640      	mov	r0, r8
    154e:	b002      	add	sp, #8
    1550:	bc1c      	pop	{r2, r3, r4}
    1552:	4690      	mov	r8, r2
    1554:	469a      	mov	sl, r3
    1556:	46a3      	mov	fp, r4
    1558:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    155a:	2301      	movs	r3, #1
    155c:	4698      	mov	r8, r3
    155e:	e7f5      	b.n	154c <sd_mmc_spi_start_read_blocks+0x5c>
    1560:	200000ff 	.word	0x200000ff
    1564:	00001021 	.word	0x00001021
    1568:	200000f8 	.word	0x200000f8
    156c:	200000bc 	.word	0x200000bc
    1570:	00002045 	.word	0x00002045
    1574:	20000108 	.word	0x20000108
    1578:	0000ffff 	.word	0x0000ffff

0000157c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    157c:	2001      	movs	r0, #1
    157e:	4770      	bx	lr

00001580 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    1580:	b5f0      	push	{r4, r5, r6, r7, lr}
    1582:	46c6      	mov	lr, r8
    1584:	b500      	push	{lr}
    1586:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1588:	2200      	movs	r2, #0
    158a:	4b15      	ldr	r3, [pc, #84]	; (15e0 <sd_mmc_spi_start_write_blocks+0x60>)
    158c:	701a      	strb	r2, [r3, #0]
	pos = 0;
    158e:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    1590:	4f14      	ldr	r7, [pc, #80]	; (15e4 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1592:	4e15      	ldr	r6, [pc, #84]	; (15e8 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    1594:	e000      	b.n	1598 <sd_mmc_spi_start_write_blocks+0x18>
{
    1596:	0021      	movs	r1, r4
	while (nb_block--) {
    1598:	1e4c      	subs	r4, r1, #1
    159a:	b2a4      	uxth	r4, r4
    159c:	2900      	cmp	r1, #0
    159e:	d01b      	beq.n	15d8 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    15a0:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    15a2:	8832      	ldrh	r2, [r6, #0]
    15a4:	4643      	mov	r3, r8
    15a6:	1959      	adds	r1, r3, r5
    15a8:	4810      	ldr	r0, [pc, #64]	; (15ec <sd_mmc_spi_start_write_blocks+0x6c>)
    15aa:	4b11      	ldr	r3, [pc, #68]	; (15f0 <sd_mmc_spi_start_write_blocks+0x70>)
    15ac:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    15ae:	8833      	ldrh	r3, [r6, #0]
    15b0:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    15b2:	4a10      	ldr	r2, [pc, #64]	; (15f4 <sd_mmc_spi_start_write_blocks+0x74>)
    15b4:	6811      	ldr	r1, [r2, #0]
    15b6:	468c      	mov	ip, r1
    15b8:	4463      	add	r3, ip
    15ba:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    15bc:	4b0e      	ldr	r3, [pc, #56]	; (15f8 <sd_mmc_spi_start_write_blocks+0x78>)
    15be:	4798      	blx	r3
    15c0:	2800      	cmp	r0, #0
    15c2:	d00a      	beq.n	15da <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    15c4:	2c00      	cmp	r4, #0
    15c6:	d0e6      	beq.n	1596 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    15c8:	4b0c      	ldr	r3, [pc, #48]	; (15fc <sd_mmc_spi_start_write_blocks+0x7c>)
    15ca:	4798      	blx	r3
    15cc:	2800      	cmp	r0, #0
    15ce:	d1e2      	bne.n	1596 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    15d0:	2205      	movs	r2, #5
    15d2:	4b03      	ldr	r3, [pc, #12]	; (15e0 <sd_mmc_spi_start_write_blocks+0x60>)
    15d4:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    15d6:	e000      	b.n	15da <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    15d8:	2001      	movs	r0, #1
}
    15da:	bc04      	pop	{r2}
    15dc:	4690      	mov	r8, r2
    15de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15e0:	200000ff 	.word	0x200000ff
    15e4:	00000efd 	.word	0x00000efd
    15e8:	200000f8 	.word	0x200000f8
    15ec:	200000bc 	.word	0x200000bc
    15f0:	0000220d 	.word	0x0000220d
    15f4:	20000108 	.word	0x20000108
    15f8:	0000108d 	.word	0x0000108d
    15fc:	00000f45 	.word	0x00000f45

00001600 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    1600:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    1602:	4b05      	ldr	r3, [pc, #20]	; (1618 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    1604:	4798      	blx	r3
    1606:	2800      	cmp	r0, #0
    1608:	d103      	bne.n	1612 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    160a:	2205      	movs	r2, #5
    160c:	4b03      	ldr	r3, [pc, #12]	; (161c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    160e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    1610:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    1612:	4b03      	ldr	r3, [pc, #12]	; (1620 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    1614:	4798      	blx	r3
    1616:	e7fb      	b.n	1610 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    1618:	00000f45 	.word	0x00000f45
    161c:	200000ff 	.word	0x200000ff
    1620:	00000fa9 	.word	0x00000fa9

00001624 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    1624:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    1626:	2301      	movs	r3, #1
    1628:	2800      	cmp	r0, #0
    162a:	d001      	beq.n	1630 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    162c:	0018      	movs	r0, r3
    162e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    1630:	4b01      	ldr	r3, [pc, #4]	; (1638 <mem_test_unit_ready+0x14>)
    1632:	4798      	blx	r3
    1634:	0003      	movs	r3, r0
    1636:	e7f9      	b.n	162c <mem_test_unit_ready+0x8>
    1638:	00000dfd 	.word	0x00000dfd

0000163c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    163c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    163e:	2301      	movs	r3, #1
    1640:	2800      	cmp	r0, #0
    1642:	d001      	beq.n	1648 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    1644:	0018      	movs	r0, r3
    1646:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    1648:	0008      	movs	r0, r1
    164a:	4b02      	ldr	r3, [pc, #8]	; (1654 <mem_read_capacity+0x18>)
    164c:	4798      	blx	r3
    164e:	0003      	movs	r3, r0
    1650:	e7f8      	b.n	1644 <mem_read_capacity+0x8>
    1652:	46c0      	nop			; (mov r8, r8)
    1654:	00000e2d 	.word	0x00000e2d

00001658 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    1658:	4243      	negs	r3, r0
    165a:	4158      	adcs	r0, r3
    165c:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    165e:	4770      	bx	lr

00001660 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    1660:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    1662:	2301      	movs	r3, #1
    1664:	2800      	cmp	r0, #0
    1666:	d001      	beq.n	166c <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    1668:	0018      	movs	r0, r3
    166a:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    166c:	4b01      	ldr	r3, [pc, #4]	; (1674 <mem_wr_protect+0x14>)
    166e:	4798      	blx	r3
    1670:	0003      	movs	r3, r0
    1672:	e7f9      	b.n	1668 <mem_wr_protect+0x8>
    1674:	00000e3d 	.word	0x00000e3d

00001678 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    1678:	b510      	push	{r4, lr}
    167a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    167c:	2301      	movs	r3, #1
    167e:	2800      	cmp	r0, #0
    1680:	d001      	beq.n	1686 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    1682:	0018      	movs	r0, r3
    1684:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    1686:	0011      	movs	r1, r2
    1688:	0020      	movs	r0, r4
    168a:	4b02      	ldr	r3, [pc, #8]	; (1694 <memory_2_ram+0x1c>)
    168c:	4798      	blx	r3
    168e:	0003      	movs	r3, r0
    1690:	e7f7      	b.n	1682 <memory_2_ram+0xa>
    1692:	46c0      	nop			; (mov r8, r8)
    1694:	00000e91 	.word	0x00000e91

00001698 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    1698:	b510      	push	{r4, lr}
    169a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    169c:	2301      	movs	r3, #1
    169e:	2800      	cmp	r0, #0
    16a0:	d001      	beq.n	16a6 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    16a2:	0018      	movs	r0, r3
    16a4:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    16a6:	0011      	movs	r1, r2
    16a8:	0020      	movs	r0, r4
    16aa:	4b02      	ldr	r3, [pc, #8]	; (16b4 <ram_2_memory+0x1c>)
    16ac:	4798      	blx	r3
    16ae:	0003      	movs	r3, r0
    16b0:	e7f7      	b.n	16a2 <ram_2_memory+0xa>
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	00000ee9 	.word	0x00000ee9

000016b8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    16b8:	4b0c      	ldr	r3, [pc, #48]	; (16ec <cpu_irq_enter_critical+0x34>)
    16ba:	681b      	ldr	r3, [r3, #0]
    16bc:	2b00      	cmp	r3, #0
    16be:	d106      	bne.n	16ce <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    16c0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    16c4:	2b00      	cmp	r3, #0
    16c6:	d007      	beq.n	16d8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    16c8:	2200      	movs	r2, #0
    16ca:	4b09      	ldr	r3, [pc, #36]	; (16f0 <cpu_irq_enter_critical+0x38>)
    16cc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    16ce:	4a07      	ldr	r2, [pc, #28]	; (16ec <cpu_irq_enter_critical+0x34>)
    16d0:	6813      	ldr	r3, [r2, #0]
    16d2:	3301      	adds	r3, #1
    16d4:	6013      	str	r3, [r2, #0]
}
    16d6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    16d8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    16da:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    16de:	2200      	movs	r2, #0
    16e0:	4b04      	ldr	r3, [pc, #16]	; (16f4 <cpu_irq_enter_critical+0x3c>)
    16e2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    16e4:	3201      	adds	r2, #1
    16e6:	4b02      	ldr	r3, [pc, #8]	; (16f0 <cpu_irq_enter_critical+0x38>)
    16e8:	701a      	strb	r2, [r3, #0]
    16ea:	e7f0      	b.n	16ce <cpu_irq_enter_critical+0x16>
    16ec:	20000110 	.word	0x20000110
    16f0:	20000114 	.word	0x20000114
    16f4:	20000009 	.word	0x20000009

000016f8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    16f8:	4b08      	ldr	r3, [pc, #32]	; (171c <cpu_irq_leave_critical+0x24>)
    16fa:	681a      	ldr	r2, [r3, #0]
    16fc:	3a01      	subs	r2, #1
    16fe:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1700:	681b      	ldr	r3, [r3, #0]
    1702:	2b00      	cmp	r3, #0
    1704:	d109      	bne.n	171a <cpu_irq_leave_critical+0x22>
    1706:	4b06      	ldr	r3, [pc, #24]	; (1720 <cpu_irq_leave_critical+0x28>)
    1708:	781b      	ldrb	r3, [r3, #0]
    170a:	2b00      	cmp	r3, #0
    170c:	d005      	beq.n	171a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    170e:	2201      	movs	r2, #1
    1710:	4b04      	ldr	r3, [pc, #16]	; (1724 <cpu_irq_leave_critical+0x2c>)
    1712:	701a      	strb	r2, [r3, #0]
    1714:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1718:	b662      	cpsie	i
	}
}
    171a:	4770      	bx	lr
    171c:	20000110 	.word	0x20000110
    1720:	20000114 	.word	0x20000114
    1724:	20000009 	.word	0x20000009

00001728 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1728:	b500      	push	{lr}
    172a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    172c:	ab01      	add	r3, sp, #4
    172e:	2280      	movs	r2, #128	; 0x80
    1730:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1732:	780a      	ldrb	r2, [r1, #0]
    1734:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1736:	784a      	ldrb	r2, [r1, #1]
    1738:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    173a:	788a      	ldrb	r2, [r1, #2]
    173c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    173e:	0019      	movs	r1, r3
    1740:	4b01      	ldr	r3, [pc, #4]	; (1748 <port_pin_set_config+0x20>)
    1742:	4798      	blx	r3
}
    1744:	b003      	add	sp, #12
    1746:	bd00      	pop	{pc}
    1748:	00003251 	.word	0x00003251

0000174c <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    174c:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    174e:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1750:	b25b      	sxtb	r3, r3
    1752:	2b00      	cmp	r3, #0
    1754:	dbfb      	blt.n	174e <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    1756:	8813      	ldrh	r3, [r2, #0]
    1758:	2102      	movs	r1, #2
    175a:	430b      	orrs	r3, r1
    175c:	8013      	strh	r3, [r2, #0]
}
    175e:	4770      	bx	lr

00001760 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1760:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1762:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1764:	b25b      	sxtb	r3, r3
    1766:	2b00      	cmp	r3, #0
    1768:	dbfb      	blt.n	1762 <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    176a:	23c1      	movs	r3, #193	; 0xc1
    176c:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    176e:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1770:	8813      	ldrh	r3, [r2, #0]
    1772:	2102      	movs	r1, #2
    1774:	438b      	bics	r3, r1
    1776:	8013      	strh	r3, [r2, #0]
}
    1778:	4770      	bx	lr
	...

0000177c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    177c:	b570      	push	{r4, r5, r6, lr}
    177e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1780:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    1782:	4b06      	ldr	r3, [pc, #24]	; (179c <rtc_calendar_reset+0x20>)
    1784:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    1786:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1788:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    178a:	b25b      	sxtb	r3, r3
    178c:	2b00      	cmp	r3, #0
    178e:	dbfb      	blt.n	1788 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1790:	882b      	ldrh	r3, [r5, #0]
    1792:	2201      	movs	r2, #1
    1794:	4313      	orrs	r3, r2
    1796:	802b      	strh	r3, [r5, #0]
}
    1798:	bd70      	pop	{r4, r5, r6, pc}
    179a:	46c0      	nop			; (mov r8, r8)
    179c:	00001761 	.word	0x00001761

000017a0 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    17a0:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    17a2:	88cb      	ldrh	r3, [r1, #6]
    17a4:	88c2      	ldrh	r2, [r0, #6]
    17a6:	1a9a      	subs	r2, r3, r2
    17a8:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    17aa:	794b      	ldrb	r3, [r1, #5]
    17ac:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    17ae:	790c      	ldrb	r4, [r1, #4]
    17b0:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    17b2:	4323      	orrs	r3, r4
    17b4:	788c      	ldrb	r4, [r1, #2]
    17b6:	0324      	lsls	r4, r4, #12
    17b8:	4323      	orrs	r3, r4
    17ba:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    17bc:	7902      	ldrb	r2, [r0, #4]
    17be:	2a00      	cmp	r2, #0
    17c0:	d105      	bne.n	17ce <rtc_calendar_time_to_register_value+0x2e>
    17c2:	78ca      	ldrb	r2, [r1, #3]
    17c4:	2a00      	cmp	r2, #0
    17c6:	d002      	beq.n	17ce <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    17c8:	2280      	movs	r2, #128	; 0x80
    17ca:	0252      	lsls	r2, r2, #9
    17cc:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    17ce:	7848      	ldrb	r0, [r1, #1]
    17d0:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    17d2:	780a      	ldrb	r2, [r1, #0]
    17d4:	4310      	orrs	r0, r2
    17d6:	4318      	orrs	r0, r3

	return register_value;
}
    17d8:	bd10      	pop	{r4, pc}

000017da <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    17da:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    17dc:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    17de:	88c4      	ldrh	r4, [r0, #6]
    17e0:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    17e2:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    17e4:	018b      	lsls	r3, r1, #6
    17e6:	0f1b      	lsrs	r3, r3, #28
    17e8:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    17ea:	028b      	lsls	r3, r1, #10
    17ec:	0edb      	lsrs	r3, r3, #27
    17ee:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    17f0:	7903      	ldrb	r3, [r0, #4]
    17f2:	2b00      	cmp	r3, #0
    17f4:	d10c      	bne.n	1810 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    17f6:	040b      	lsls	r3, r1, #16
    17f8:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    17fa:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    17fc:	03cb      	lsls	r3, r1, #15
    17fe:	0fdb      	lsrs	r3, r3, #31
    1800:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1802:	0988      	lsrs	r0, r1, #6
    1804:	233f      	movs	r3, #63	; 0x3f
    1806:	4018      	ands	r0, r3
    1808:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    180a:	4019      	ands	r1, r3
    180c:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    180e:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1810:	03cb      	lsls	r3, r1, #15
    1812:	0edb      	lsrs	r3, r3, #27
    1814:	7093      	strb	r3, [r2, #2]
    1816:	e7f4      	b.n	1802 <rtc_calendar_register_value_to_time+0x28>

00001818 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1818:	b510      	push	{r4, lr}
    181a:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    181c:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    181e:	7941      	ldrb	r1, [r0, #5]
    1820:	2900      	cmp	r1, #0
    1822:	d006      	beq.n	1832 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1824:	8859      	ldrh	r1, [r3, #2]
    1826:	0449      	lsls	r1, r1, #17
    1828:	d50b      	bpl.n	1842 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    182a:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    182c:	4b0a      	ldr	r3, [pc, #40]	; (1858 <rtc_calendar_get_time+0x40>)
    182e:	4798      	blx	r3
}
    1830:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1832:	490a      	ldr	r1, [pc, #40]	; (185c <rtc_calendar_get_time+0x44>)
    1834:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1836:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1838:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    183a:	b249      	sxtb	r1, r1
    183c:	2900      	cmp	r1, #0
    183e:	dbfb      	blt.n	1838 <rtc_calendar_get_time+0x20>
    1840:	e7f3      	b.n	182a <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1842:	8859      	ldrh	r1, [r3, #2]
    1844:	24c0      	movs	r4, #192	; 0xc0
    1846:	0224      	lsls	r4, r4, #8
    1848:	4321      	orrs	r1, r4
    184a:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    184c:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    184e:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1850:	b249      	sxtb	r1, r1
    1852:	2900      	cmp	r1, #0
    1854:	dbfb      	blt.n	184e <rtc_calendar_get_time+0x36>
    1856:	e7e8      	b.n	182a <rtc_calendar_get_time+0x12>
    1858:	000017db 	.word	0x000017db
    185c:	ffff8000 	.word	0xffff8000

00001860 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1860:	b570      	push	{r4, r5, r6, lr}
    1862:	000d      	movs	r5, r1
    1864:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1866:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1868:	2a01      	cmp	r2, #1
    186a:	d901      	bls.n	1870 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    186c:	0018      	movs	r0, r3
    186e:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1870:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1872:	4b06      	ldr	r3, [pc, #24]	; (188c <rtc_calendar_set_alarm+0x2c>)
    1874:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1876:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1878:	b25b      	sxtb	r3, r3
    187a:	2b00      	cmp	r3, #0
    187c:	dbfb      	blt.n	1876 <rtc_calendar_set_alarm+0x16>
    187e:	00e4      	lsls	r4, r4, #3
    1880:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1882:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1884:	7a2b      	ldrb	r3, [r5, #8]
    1886:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    1888:	2300      	movs	r3, #0
    188a:	e7ef      	b.n	186c <rtc_calendar_set_alarm+0xc>
    188c:	000017a1 	.word	0x000017a1

00001890 <rtc_calendar_init>:
{
    1890:	b530      	push	{r4, r5, lr}
    1892:	b083      	sub	sp, #12
    1894:	0005      	movs	r5, r0
    1896:	0014      	movs	r4, r2
	module->hw = hw;
    1898:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    189a:	4a1c      	ldr	r2, [pc, #112]	; (190c <rtc_calendar_init+0x7c>)
    189c:	6993      	ldr	r3, [r2, #24]
    189e:	2120      	movs	r1, #32
    18a0:	430b      	orrs	r3, r1
    18a2:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    18a4:	a901      	add	r1, sp, #4
    18a6:	2302      	movs	r3, #2
    18a8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    18aa:	2004      	movs	r0, #4
    18ac:	4b18      	ldr	r3, [pc, #96]	; (1910 <rtc_calendar_init+0x80>)
    18ae:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    18b0:	2004      	movs	r0, #4
    18b2:	4b18      	ldr	r3, [pc, #96]	; (1914 <rtc_calendar_init+0x84>)
    18b4:	4798      	blx	r3
	rtc_calendar_reset(module);
    18b6:	0028      	movs	r0, r5
    18b8:	4b17      	ldr	r3, [pc, #92]	; (1918 <rtc_calendar_init+0x88>)
    18ba:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    18bc:	7923      	ldrb	r3, [r4, #4]
    18be:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    18c0:	78e3      	ldrb	r3, [r4, #3]
    18c2:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    18c4:	88e3      	ldrh	r3, [r4, #6]
    18c6:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    18c8:	4b14      	ldr	r3, [pc, #80]	; (191c <rtc_calendar_init+0x8c>)
    18ca:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    18cc:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    18ce:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    18d0:	7921      	ldrb	r1, [r4, #4]
    18d2:	2900      	cmp	r1, #0
    18d4:	d017      	beq.n	1906 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    18d6:	2108      	movs	r1, #8
    18d8:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    18da:	78a1      	ldrb	r1, [r4, #2]
    18dc:	2900      	cmp	r1, #0
    18de:	d001      	beq.n	18e4 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    18e0:	2180      	movs	r1, #128	; 0x80
    18e2:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    18e4:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    18e6:	78e3      	ldrb	r3, [r4, #3]
    18e8:	2b00      	cmp	r3, #0
    18ea:	d004      	beq.n	18f6 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    18ec:	8853      	ldrh	r3, [r2, #2]
    18ee:	2180      	movs	r1, #128	; 0x80
    18f0:	01c9      	lsls	r1, r1, #7
    18f2:	430b      	orrs	r3, r1
    18f4:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    18f6:	0021      	movs	r1, r4
    18f8:	3108      	adds	r1, #8
    18fa:	2200      	movs	r2, #0
    18fc:	0028      	movs	r0, r5
    18fe:	4b08      	ldr	r3, [pc, #32]	; (1920 <rtc_calendar_init+0x90>)
    1900:	4798      	blx	r3
}
    1902:	b003      	add	sp, #12
    1904:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1906:	2148      	movs	r1, #72	; 0x48
    1908:	430b      	orrs	r3, r1
    190a:	e7e6      	b.n	18da <rtc_calendar_init+0x4a>
    190c:	40000400 	.word	0x40000400
    1910:	00003159 	.word	0x00003159
    1914:	000030cd 	.word	0x000030cd
    1918:	0000177d 	.word	0x0000177d
    191c:	200009c0 	.word	0x200009c0
    1920:	00001861 	.word	0x00001861

00001924 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1924:	b5f0      	push	{r4, r5, r6, r7, lr}
    1926:	46de      	mov	lr, fp
    1928:	4657      	mov	r7, sl
    192a:	464e      	mov	r6, r9
    192c:	4645      	mov	r5, r8
    192e:	b5e0      	push	{r5, r6, r7, lr}
    1930:	b087      	sub	sp, #28
    1932:	4680      	mov	r8, r0
    1934:	9104      	str	r1, [sp, #16]
    1936:	0016      	movs	r6, r2
    1938:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    193a:	2200      	movs	r2, #0
    193c:	2300      	movs	r3, #0
    193e:	2100      	movs	r1, #0
    1940:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1942:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1944:	2001      	movs	r0, #1
    1946:	0021      	movs	r1, r4
    1948:	9600      	str	r6, [sp, #0]
    194a:	9701      	str	r7, [sp, #4]
    194c:	465c      	mov	r4, fp
    194e:	9403      	str	r4, [sp, #12]
    1950:	4644      	mov	r4, r8
    1952:	9405      	str	r4, [sp, #20]
    1954:	e013      	b.n	197e <long_division+0x5a>
    1956:	2420      	movs	r4, #32
    1958:	1a64      	subs	r4, r4, r1
    195a:	0005      	movs	r5, r0
    195c:	40e5      	lsrs	r5, r4
    195e:	46a8      	mov	r8, r5
    1960:	e014      	b.n	198c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1962:	9c00      	ldr	r4, [sp, #0]
    1964:	9d01      	ldr	r5, [sp, #4]
    1966:	1b12      	subs	r2, r2, r4
    1968:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    196a:	465c      	mov	r4, fp
    196c:	464d      	mov	r5, r9
    196e:	432c      	orrs	r4, r5
    1970:	46a3      	mov	fp, r4
    1972:	9c03      	ldr	r4, [sp, #12]
    1974:	4645      	mov	r5, r8
    1976:	432c      	orrs	r4, r5
    1978:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    197a:	3901      	subs	r1, #1
    197c:	d325      	bcc.n	19ca <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    197e:	2420      	movs	r4, #32
    1980:	4264      	negs	r4, r4
    1982:	190c      	adds	r4, r1, r4
    1984:	d4e7      	bmi.n	1956 <long_division+0x32>
    1986:	0005      	movs	r5, r0
    1988:	40a5      	lsls	r5, r4
    198a:	46a8      	mov	r8, r5
    198c:	0004      	movs	r4, r0
    198e:	408c      	lsls	r4, r1
    1990:	46a1      	mov	r9, r4
		r = r << 1;
    1992:	1892      	adds	r2, r2, r2
    1994:	415b      	adcs	r3, r3
    1996:	0014      	movs	r4, r2
    1998:	001d      	movs	r5, r3
		if (n & bit_shift) {
    199a:	9e05      	ldr	r6, [sp, #20]
    199c:	464f      	mov	r7, r9
    199e:	403e      	ands	r6, r7
    19a0:	46b4      	mov	ip, r6
    19a2:	9e04      	ldr	r6, [sp, #16]
    19a4:	4647      	mov	r7, r8
    19a6:	403e      	ands	r6, r7
    19a8:	46b2      	mov	sl, r6
    19aa:	4666      	mov	r6, ip
    19ac:	4657      	mov	r7, sl
    19ae:	433e      	orrs	r6, r7
    19b0:	d003      	beq.n	19ba <long_division+0x96>
			r |= 0x01;
    19b2:	0006      	movs	r6, r0
    19b4:	4326      	orrs	r6, r4
    19b6:	0032      	movs	r2, r6
    19b8:	002b      	movs	r3, r5
		if (r >= d) {
    19ba:	9c00      	ldr	r4, [sp, #0]
    19bc:	9d01      	ldr	r5, [sp, #4]
    19be:	429d      	cmp	r5, r3
    19c0:	d8db      	bhi.n	197a <long_division+0x56>
    19c2:	d1ce      	bne.n	1962 <long_division+0x3e>
    19c4:	4294      	cmp	r4, r2
    19c6:	d8d8      	bhi.n	197a <long_division+0x56>
    19c8:	e7cb      	b.n	1962 <long_division+0x3e>
    19ca:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    19cc:	4658      	mov	r0, fp
    19ce:	0019      	movs	r1, r3
    19d0:	b007      	add	sp, #28
    19d2:	bc3c      	pop	{r2, r3, r4, r5}
    19d4:	4690      	mov	r8, r2
    19d6:	4699      	mov	r9, r3
    19d8:	46a2      	mov	sl, r4
    19da:	46ab      	mov	fp, r5
    19dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000019de <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    19de:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    19e0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19e2:	2340      	movs	r3, #64	; 0x40
    19e4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    19e6:	4281      	cmp	r1, r0
    19e8:	d202      	bcs.n	19f0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    19ea:	0018      	movs	r0, r3
    19ec:	bd10      	pop	{r4, pc}
		baud_calculated++;
    19ee:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    19f0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    19f2:	1c63      	adds	r3, r4, #1
    19f4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    19f6:	4288      	cmp	r0, r1
    19f8:	d9f9      	bls.n	19ee <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19fa:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    19fc:	2cff      	cmp	r4, #255	; 0xff
    19fe:	d8f4      	bhi.n	19ea <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1a00:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1a02:	2300      	movs	r3, #0
    1a04:	e7f1      	b.n	19ea <_sercom_get_sync_baud_val+0xc>
	...

00001a08 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a0a:	b083      	sub	sp, #12
    1a0c:	000f      	movs	r7, r1
    1a0e:	0016      	movs	r6, r2
    1a10:	aa08      	add	r2, sp, #32
    1a12:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1a14:	0004      	movs	r4, r0
    1a16:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a18:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1a1a:	42bc      	cmp	r4, r7
    1a1c:	d902      	bls.n	1a24 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1a1e:	0010      	movs	r0, r2
    1a20:	b003      	add	sp, #12
    1a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1a24:	2b00      	cmp	r3, #0
    1a26:	d114      	bne.n	1a52 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1a28:	0002      	movs	r2, r0
    1a2a:	0008      	movs	r0, r1
    1a2c:	2100      	movs	r1, #0
    1a2e:	4c19      	ldr	r4, [pc, #100]	; (1a94 <_sercom_get_async_baud_val+0x8c>)
    1a30:	47a0      	blx	r4
    1a32:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1a34:	003a      	movs	r2, r7
    1a36:	2300      	movs	r3, #0
    1a38:	2000      	movs	r0, #0
    1a3a:	4c17      	ldr	r4, [pc, #92]	; (1a98 <_sercom_get_async_baud_val+0x90>)
    1a3c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1a3e:	2200      	movs	r2, #0
    1a40:	2301      	movs	r3, #1
    1a42:	1a12      	subs	r2, r2, r0
    1a44:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1a46:	0c12      	lsrs	r2, r2, #16
    1a48:	041b      	lsls	r3, r3, #16
    1a4a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1a4c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1a4e:	2200      	movs	r2, #0
    1a50:	e7e5      	b.n	1a1e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1a52:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1a54:	2b01      	cmp	r3, #1
    1a56:	d1f9      	bne.n	1a4c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1a58:	000a      	movs	r2, r1
    1a5a:	2300      	movs	r3, #0
    1a5c:	2100      	movs	r1, #0
    1a5e:	4c0d      	ldr	r4, [pc, #52]	; (1a94 <_sercom_get_async_baud_val+0x8c>)
    1a60:	47a0      	blx	r4
    1a62:	0002      	movs	r2, r0
    1a64:	000b      	movs	r3, r1
    1a66:	9200      	str	r2, [sp, #0]
    1a68:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1a6a:	0038      	movs	r0, r7
    1a6c:	2100      	movs	r1, #0
    1a6e:	4c0a      	ldr	r4, [pc, #40]	; (1a98 <_sercom_get_async_baud_val+0x90>)
    1a70:	47a0      	blx	r4
    1a72:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1a74:	2380      	movs	r3, #128	; 0x80
    1a76:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a78:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1a7a:	4298      	cmp	r0, r3
    1a7c:	d8cf      	bhi.n	1a1e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1a7e:	0f79      	lsrs	r1, r7, #29
    1a80:	00f8      	lsls	r0, r7, #3
    1a82:	9a00      	ldr	r2, [sp, #0]
    1a84:	9b01      	ldr	r3, [sp, #4]
    1a86:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1a88:	00ea      	lsls	r2, r5, #3
    1a8a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1a8c:	b2d2      	uxtb	r2, r2
    1a8e:	0352      	lsls	r2, r2, #13
    1a90:	432a      	orrs	r2, r5
    1a92:	e7db      	b.n	1a4c <_sercom_get_async_baud_val+0x44>
    1a94:	00005489 	.word	0x00005489
    1a98:	00001925 	.word	0x00001925

00001a9c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1a9c:	b510      	push	{r4, lr}
    1a9e:	b082      	sub	sp, #8
    1aa0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1aa2:	4b0e      	ldr	r3, [pc, #56]	; (1adc <sercom_set_gclk_generator+0x40>)
    1aa4:	781b      	ldrb	r3, [r3, #0]
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	d007      	beq.n	1aba <sercom_set_gclk_generator+0x1e>
    1aaa:	2900      	cmp	r1, #0
    1aac:	d105      	bne.n	1aba <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1aae:	4b0b      	ldr	r3, [pc, #44]	; (1adc <sercom_set_gclk_generator+0x40>)
    1ab0:	785b      	ldrb	r3, [r3, #1]
    1ab2:	4283      	cmp	r3, r0
    1ab4:	d010      	beq.n	1ad8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1ab6:	201d      	movs	r0, #29
    1ab8:	e00c      	b.n	1ad4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1aba:	a901      	add	r1, sp, #4
    1abc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1abe:	2013      	movs	r0, #19
    1ac0:	4b07      	ldr	r3, [pc, #28]	; (1ae0 <sercom_set_gclk_generator+0x44>)
    1ac2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1ac4:	2013      	movs	r0, #19
    1ac6:	4b07      	ldr	r3, [pc, #28]	; (1ae4 <sercom_set_gclk_generator+0x48>)
    1ac8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1aca:	4b04      	ldr	r3, [pc, #16]	; (1adc <sercom_set_gclk_generator+0x40>)
    1acc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1ace:	2201      	movs	r2, #1
    1ad0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1ad2:	2000      	movs	r0, #0
}
    1ad4:	b002      	add	sp, #8
    1ad6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1ad8:	2000      	movs	r0, #0
    1ada:	e7fb      	b.n	1ad4 <sercom_set_gclk_generator+0x38>
    1adc:	20000118 	.word	0x20000118
    1ae0:	00003159 	.word	0x00003159
    1ae4:	000030cd 	.word	0x000030cd

00001ae8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1ae8:	4b40      	ldr	r3, [pc, #256]	; (1bec <_sercom_get_default_pad+0x104>)
    1aea:	4298      	cmp	r0, r3
    1aec:	d031      	beq.n	1b52 <_sercom_get_default_pad+0x6a>
    1aee:	d90a      	bls.n	1b06 <_sercom_get_default_pad+0x1e>
    1af0:	4b3f      	ldr	r3, [pc, #252]	; (1bf0 <_sercom_get_default_pad+0x108>)
    1af2:	4298      	cmp	r0, r3
    1af4:	d04d      	beq.n	1b92 <_sercom_get_default_pad+0xaa>
    1af6:	4b3f      	ldr	r3, [pc, #252]	; (1bf4 <_sercom_get_default_pad+0x10c>)
    1af8:	4298      	cmp	r0, r3
    1afa:	d05a      	beq.n	1bb2 <_sercom_get_default_pad+0xca>
    1afc:	4b3e      	ldr	r3, [pc, #248]	; (1bf8 <_sercom_get_default_pad+0x110>)
    1afe:	4298      	cmp	r0, r3
    1b00:	d037      	beq.n	1b72 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1b02:	2000      	movs	r0, #0
}
    1b04:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1b06:	4b3d      	ldr	r3, [pc, #244]	; (1bfc <_sercom_get_default_pad+0x114>)
    1b08:	4298      	cmp	r0, r3
    1b0a:	d00c      	beq.n	1b26 <_sercom_get_default_pad+0x3e>
    1b0c:	4b3c      	ldr	r3, [pc, #240]	; (1c00 <_sercom_get_default_pad+0x118>)
    1b0e:	4298      	cmp	r0, r3
    1b10:	d1f7      	bne.n	1b02 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b12:	2901      	cmp	r1, #1
    1b14:	d017      	beq.n	1b46 <_sercom_get_default_pad+0x5e>
    1b16:	2900      	cmp	r1, #0
    1b18:	d05d      	beq.n	1bd6 <_sercom_get_default_pad+0xee>
    1b1a:	2902      	cmp	r1, #2
    1b1c:	d015      	beq.n	1b4a <_sercom_get_default_pad+0x62>
    1b1e:	2903      	cmp	r1, #3
    1b20:	d015      	beq.n	1b4e <_sercom_get_default_pad+0x66>
	return 0;
    1b22:	2000      	movs	r0, #0
    1b24:	e7ee      	b.n	1b04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b26:	2901      	cmp	r1, #1
    1b28:	d007      	beq.n	1b3a <_sercom_get_default_pad+0x52>
    1b2a:	2900      	cmp	r1, #0
    1b2c:	d051      	beq.n	1bd2 <_sercom_get_default_pad+0xea>
    1b2e:	2902      	cmp	r1, #2
    1b30:	d005      	beq.n	1b3e <_sercom_get_default_pad+0x56>
    1b32:	2903      	cmp	r1, #3
    1b34:	d005      	beq.n	1b42 <_sercom_get_default_pad+0x5a>
	return 0;
    1b36:	2000      	movs	r0, #0
    1b38:	e7e4      	b.n	1b04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b3a:	4832      	ldr	r0, [pc, #200]	; (1c04 <_sercom_get_default_pad+0x11c>)
    1b3c:	e7e2      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1b3e:	4832      	ldr	r0, [pc, #200]	; (1c08 <_sercom_get_default_pad+0x120>)
    1b40:	e7e0      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1b42:	4832      	ldr	r0, [pc, #200]	; (1c0c <_sercom_get_default_pad+0x124>)
    1b44:	e7de      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1b46:	4832      	ldr	r0, [pc, #200]	; (1c10 <_sercom_get_default_pad+0x128>)
    1b48:	e7dc      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1b4a:	4832      	ldr	r0, [pc, #200]	; (1c14 <_sercom_get_default_pad+0x12c>)
    1b4c:	e7da      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1b4e:	4832      	ldr	r0, [pc, #200]	; (1c18 <_sercom_get_default_pad+0x130>)
    1b50:	e7d8      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1b52:	2901      	cmp	r1, #1
    1b54:	d007      	beq.n	1b66 <_sercom_get_default_pad+0x7e>
    1b56:	2900      	cmp	r1, #0
    1b58:	d03f      	beq.n	1bda <_sercom_get_default_pad+0xf2>
    1b5a:	2902      	cmp	r1, #2
    1b5c:	d005      	beq.n	1b6a <_sercom_get_default_pad+0x82>
    1b5e:	2903      	cmp	r1, #3
    1b60:	d005      	beq.n	1b6e <_sercom_get_default_pad+0x86>
	return 0;
    1b62:	2000      	movs	r0, #0
    1b64:	e7ce      	b.n	1b04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b66:	482d      	ldr	r0, [pc, #180]	; (1c1c <_sercom_get_default_pad+0x134>)
    1b68:	e7cc      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1b6a:	482d      	ldr	r0, [pc, #180]	; (1c20 <_sercom_get_default_pad+0x138>)
    1b6c:	e7ca      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1b6e:	482d      	ldr	r0, [pc, #180]	; (1c24 <_sercom_get_default_pad+0x13c>)
    1b70:	e7c8      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1b72:	2901      	cmp	r1, #1
    1b74:	d007      	beq.n	1b86 <_sercom_get_default_pad+0x9e>
    1b76:	2900      	cmp	r1, #0
    1b78:	d031      	beq.n	1bde <_sercom_get_default_pad+0xf6>
    1b7a:	2902      	cmp	r1, #2
    1b7c:	d005      	beq.n	1b8a <_sercom_get_default_pad+0xa2>
    1b7e:	2903      	cmp	r1, #3
    1b80:	d005      	beq.n	1b8e <_sercom_get_default_pad+0xa6>
	return 0;
    1b82:	2000      	movs	r0, #0
    1b84:	e7be      	b.n	1b04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b86:	4828      	ldr	r0, [pc, #160]	; (1c28 <_sercom_get_default_pad+0x140>)
    1b88:	e7bc      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1b8a:	4828      	ldr	r0, [pc, #160]	; (1c2c <_sercom_get_default_pad+0x144>)
    1b8c:	e7ba      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1b8e:	4828      	ldr	r0, [pc, #160]	; (1c30 <_sercom_get_default_pad+0x148>)
    1b90:	e7b8      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1b92:	2901      	cmp	r1, #1
    1b94:	d007      	beq.n	1ba6 <_sercom_get_default_pad+0xbe>
    1b96:	2900      	cmp	r1, #0
    1b98:	d023      	beq.n	1be2 <_sercom_get_default_pad+0xfa>
    1b9a:	2902      	cmp	r1, #2
    1b9c:	d005      	beq.n	1baa <_sercom_get_default_pad+0xc2>
    1b9e:	2903      	cmp	r1, #3
    1ba0:	d005      	beq.n	1bae <_sercom_get_default_pad+0xc6>
	return 0;
    1ba2:	2000      	movs	r0, #0
    1ba4:	e7ae      	b.n	1b04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ba6:	4823      	ldr	r0, [pc, #140]	; (1c34 <_sercom_get_default_pad+0x14c>)
    1ba8:	e7ac      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1baa:	4823      	ldr	r0, [pc, #140]	; (1c38 <_sercom_get_default_pad+0x150>)
    1bac:	e7aa      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1bae:	4823      	ldr	r0, [pc, #140]	; (1c3c <_sercom_get_default_pad+0x154>)
    1bb0:	e7a8      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1bb2:	2901      	cmp	r1, #1
    1bb4:	d007      	beq.n	1bc6 <_sercom_get_default_pad+0xde>
    1bb6:	2900      	cmp	r1, #0
    1bb8:	d015      	beq.n	1be6 <_sercom_get_default_pad+0xfe>
    1bba:	2902      	cmp	r1, #2
    1bbc:	d005      	beq.n	1bca <_sercom_get_default_pad+0xe2>
    1bbe:	2903      	cmp	r1, #3
    1bc0:	d005      	beq.n	1bce <_sercom_get_default_pad+0xe6>
	return 0;
    1bc2:	2000      	movs	r0, #0
    1bc4:	e79e      	b.n	1b04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1bc6:	481e      	ldr	r0, [pc, #120]	; (1c40 <_sercom_get_default_pad+0x158>)
    1bc8:	e79c      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1bca:	481e      	ldr	r0, [pc, #120]	; (1c44 <_sercom_get_default_pad+0x15c>)
    1bcc:	e79a      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1bce:	481e      	ldr	r0, [pc, #120]	; (1c48 <_sercom_get_default_pad+0x160>)
    1bd0:	e798      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1bd2:	481e      	ldr	r0, [pc, #120]	; (1c4c <_sercom_get_default_pad+0x164>)
    1bd4:	e796      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1bd6:	2003      	movs	r0, #3
    1bd8:	e794      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1bda:	481d      	ldr	r0, [pc, #116]	; (1c50 <_sercom_get_default_pad+0x168>)
    1bdc:	e792      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1bde:	481d      	ldr	r0, [pc, #116]	; (1c54 <_sercom_get_default_pad+0x16c>)
    1be0:	e790      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1be2:	481d      	ldr	r0, [pc, #116]	; (1c58 <_sercom_get_default_pad+0x170>)
    1be4:	e78e      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1be6:	481d      	ldr	r0, [pc, #116]	; (1c5c <_sercom_get_default_pad+0x174>)
    1be8:	e78c      	b.n	1b04 <_sercom_get_default_pad+0x1c>
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	42001000 	.word	0x42001000
    1bf0:	42001800 	.word	0x42001800
    1bf4:	42001c00 	.word	0x42001c00
    1bf8:	42001400 	.word	0x42001400
    1bfc:	42000800 	.word	0x42000800
    1c00:	42000c00 	.word	0x42000c00
    1c04:	00050003 	.word	0x00050003
    1c08:	00060003 	.word	0x00060003
    1c0c:	00070003 	.word	0x00070003
    1c10:	00010003 	.word	0x00010003
    1c14:	001e0003 	.word	0x001e0003
    1c18:	001f0003 	.word	0x001f0003
    1c1c:	00090003 	.word	0x00090003
    1c20:	000a0003 	.word	0x000a0003
    1c24:	000b0003 	.word	0x000b0003
    1c28:	00110003 	.word	0x00110003
    1c2c:	00120003 	.word	0x00120003
    1c30:	00130003 	.word	0x00130003
    1c34:	000d0003 	.word	0x000d0003
    1c38:	000e0003 	.word	0x000e0003
    1c3c:	000f0003 	.word	0x000f0003
    1c40:	00170003 	.word	0x00170003
    1c44:	00180003 	.word	0x00180003
    1c48:	00190003 	.word	0x00190003
    1c4c:	00040003 	.word	0x00040003
    1c50:	00080003 	.word	0x00080003
    1c54:	00100003 	.word	0x00100003
    1c58:	000c0003 	.word	0x000c0003
    1c5c:	00160003 	.word	0x00160003

00001c60 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1c60:	b530      	push	{r4, r5, lr}
    1c62:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1c64:	4b0b      	ldr	r3, [pc, #44]	; (1c94 <_sercom_get_sercom_inst_index+0x34>)
    1c66:	466a      	mov	r2, sp
    1c68:	cb32      	ldmia	r3!, {r1, r4, r5}
    1c6a:	c232      	stmia	r2!, {r1, r4, r5}
    1c6c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1c6e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1c70:	9b00      	ldr	r3, [sp, #0]
    1c72:	4283      	cmp	r3, r0
    1c74:	d00b      	beq.n	1c8e <_sercom_get_sercom_inst_index+0x2e>
    1c76:	2301      	movs	r3, #1
    1c78:	009a      	lsls	r2, r3, #2
    1c7a:	4669      	mov	r1, sp
    1c7c:	5852      	ldr	r2, [r2, r1]
    1c7e:	4282      	cmp	r2, r0
    1c80:	d006      	beq.n	1c90 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c82:	3301      	adds	r3, #1
    1c84:	2b06      	cmp	r3, #6
    1c86:	d1f7      	bne.n	1c78 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1c88:	2000      	movs	r0, #0
}
    1c8a:	b007      	add	sp, #28
    1c8c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c8e:	2300      	movs	r3, #0
			return i;
    1c90:	b2d8      	uxtb	r0, r3
    1c92:	e7fa      	b.n	1c8a <_sercom_get_sercom_inst_index+0x2a>
    1c94:	00005d9c 	.word	0x00005d9c

00001c98 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1c98:	4770      	bx	lr
	...

00001c9c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1c9e:	4b0a      	ldr	r3, [pc, #40]	; (1cc8 <_sercom_set_handler+0x2c>)
    1ca0:	781b      	ldrb	r3, [r3, #0]
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d10c      	bne.n	1cc0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1ca6:	4f09      	ldr	r7, [pc, #36]	; (1ccc <_sercom_set_handler+0x30>)
    1ca8:	4e09      	ldr	r6, [pc, #36]	; (1cd0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1caa:	4d0a      	ldr	r5, [pc, #40]	; (1cd4 <_sercom_set_handler+0x38>)
    1cac:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1cae:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1cb0:	195a      	adds	r2, r3, r5
    1cb2:	6014      	str	r4, [r2, #0]
    1cb4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1cb6:	2b18      	cmp	r3, #24
    1cb8:	d1f9      	bne.n	1cae <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1cba:	2201      	movs	r2, #1
    1cbc:	4b02      	ldr	r3, [pc, #8]	; (1cc8 <_sercom_set_handler+0x2c>)
    1cbe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1cc0:	0080      	lsls	r0, r0, #2
    1cc2:	4b02      	ldr	r3, [pc, #8]	; (1ccc <_sercom_set_handler+0x30>)
    1cc4:	50c1      	str	r1, [r0, r3]
}
    1cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cc8:	2000011a 	.word	0x2000011a
    1ccc:	2000011c 	.word	0x2000011c
    1cd0:	00001c99 	.word	0x00001c99
    1cd4:	200009c4 	.word	0x200009c4

00001cd8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1cd8:	b500      	push	{lr}
    1cda:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1cdc:	2309      	movs	r3, #9
    1cde:	466a      	mov	r2, sp
    1ce0:	7013      	strb	r3, [r2, #0]
    1ce2:	3301      	adds	r3, #1
    1ce4:	7053      	strb	r3, [r2, #1]
    1ce6:	3301      	adds	r3, #1
    1ce8:	7093      	strb	r3, [r2, #2]
    1cea:	3301      	adds	r3, #1
    1cec:	70d3      	strb	r3, [r2, #3]
    1cee:	3301      	adds	r3, #1
    1cf0:	7113      	strb	r3, [r2, #4]
    1cf2:	3301      	adds	r3, #1
    1cf4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1cf6:	4b03      	ldr	r3, [pc, #12]	; (1d04 <_sercom_get_interrupt_vector+0x2c>)
    1cf8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1cfa:	466b      	mov	r3, sp
    1cfc:	5618      	ldrsb	r0, [r3, r0]
}
    1cfe:	b003      	add	sp, #12
    1d00:	bd00      	pop	{pc}
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	00001c61 	.word	0x00001c61

00001d08 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1d08:	b510      	push	{r4, lr}
    1d0a:	4b02      	ldr	r3, [pc, #8]	; (1d14 <SERCOM0_Handler+0xc>)
    1d0c:	681b      	ldr	r3, [r3, #0]
    1d0e:	2000      	movs	r0, #0
    1d10:	4798      	blx	r3
    1d12:	bd10      	pop	{r4, pc}
    1d14:	2000011c 	.word	0x2000011c

00001d18 <SERCOM1_Handler>:
    1d18:	b510      	push	{r4, lr}
    1d1a:	4b02      	ldr	r3, [pc, #8]	; (1d24 <SERCOM1_Handler+0xc>)
    1d1c:	685b      	ldr	r3, [r3, #4]
    1d1e:	2001      	movs	r0, #1
    1d20:	4798      	blx	r3
    1d22:	bd10      	pop	{r4, pc}
    1d24:	2000011c 	.word	0x2000011c

00001d28 <SERCOM2_Handler>:
    1d28:	b510      	push	{r4, lr}
    1d2a:	4b02      	ldr	r3, [pc, #8]	; (1d34 <SERCOM2_Handler+0xc>)
    1d2c:	689b      	ldr	r3, [r3, #8]
    1d2e:	2002      	movs	r0, #2
    1d30:	4798      	blx	r3
    1d32:	bd10      	pop	{r4, pc}
    1d34:	2000011c 	.word	0x2000011c

00001d38 <SERCOM3_Handler>:
    1d38:	b510      	push	{r4, lr}
    1d3a:	4b02      	ldr	r3, [pc, #8]	; (1d44 <SERCOM3_Handler+0xc>)
    1d3c:	68db      	ldr	r3, [r3, #12]
    1d3e:	2003      	movs	r0, #3
    1d40:	4798      	blx	r3
    1d42:	bd10      	pop	{r4, pc}
    1d44:	2000011c 	.word	0x2000011c

00001d48 <SERCOM4_Handler>:
    1d48:	b510      	push	{r4, lr}
    1d4a:	4b02      	ldr	r3, [pc, #8]	; (1d54 <SERCOM4_Handler+0xc>)
    1d4c:	691b      	ldr	r3, [r3, #16]
    1d4e:	2004      	movs	r0, #4
    1d50:	4798      	blx	r3
    1d52:	bd10      	pop	{r4, pc}
    1d54:	2000011c 	.word	0x2000011c

00001d58 <SERCOM5_Handler>:
    1d58:	b510      	push	{r4, lr}
    1d5a:	4b02      	ldr	r3, [pc, #8]	; (1d64 <SERCOM5_Handler+0xc>)
    1d5c:	695b      	ldr	r3, [r3, #20]
    1d5e:	2005      	movs	r0, #5
    1d60:	4798      	blx	r3
    1d62:	bd10      	pop	{r4, pc}
    1d64:	2000011c 	.word	0x2000011c

00001d68 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    1d68:	b570      	push	{r4, r5, r6, lr}
    1d6a:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1d6c:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1d6e:	0020      	movs	r0, r4
    1d70:	4b0e      	ldr	r3, [pc, #56]	; (1dac <spi_reset+0x44>)
    1d72:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1d74:	231f      	movs	r3, #31
    1d76:	4018      	ands	r0, r3
    1d78:	3b1e      	subs	r3, #30
    1d7a:	4083      	lsls	r3, r0
    1d7c:	2280      	movs	r2, #128	; 0x80
    1d7e:	490c      	ldr	r1, [pc, #48]	; (1db0 <spi_reset+0x48>)
    1d80:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1d82:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1d84:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1d86:	2b00      	cmp	r3, #0
    1d88:	d1fc      	bne.n	1d84 <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1d8a:	338f      	adds	r3, #143	; 0x8f
    1d8c:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1d8e:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1d90:	6823      	ldr	r3, [r4, #0]
    1d92:	2202      	movs	r2, #2
    1d94:	4393      	bics	r3, r2
    1d96:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1d98:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1d9a:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d1fc      	bne.n	1d9a <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    1da0:	6823      	ldr	r3, [r4, #0]
    1da2:	2201      	movs	r2, #1
    1da4:	4313      	orrs	r3, r2
    1da6:	6023      	str	r3, [r4, #0]
}
    1da8:	bd70      	pop	{r4, r5, r6, pc}
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	00001cd9 	.word	0x00001cd9
    1db0:	e000e100 	.word	0xe000e100

00001db4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    1db4:	b570      	push	{r4, r5, r6, lr}
    1db6:	b082      	sub	sp, #8
    1db8:	0005      	movs	r5, r0
    1dba:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1dbc:	2200      	movs	r2, #0
    1dbe:	466b      	mov	r3, sp
    1dc0:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1dc2:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1dc4:	0030      	movs	r0, r6
    1dc6:	4b24      	ldr	r3, [pc, #144]	; (1e58 <spi_set_baudrate+0xa4>)
    1dc8:	4798      	blx	r3
    1dca:	231f      	movs	r3, #31
    1dcc:	4018      	ands	r0, r3
    1dce:	3b1e      	subs	r3, #30
    1dd0:	4083      	lsls	r3, r0
    1dd2:	2280      	movs	r2, #128	; 0x80
    1dd4:	4921      	ldr	r1, [pc, #132]	; (1e5c <spi_set_baudrate+0xa8>)
    1dd6:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1dd8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1dda:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1ddc:	2b00      	cmp	r3, #0
    1dde:	d1fc      	bne.n	1dda <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1de0:	338f      	adds	r3, #143	; 0x8f
    1de2:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1de4:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1de6:	6833      	ldr	r3, [r6, #0]
    1de8:	2202      	movs	r2, #2
    1dea:	4393      	bics	r3, r2
    1dec:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1dee:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1df0:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    1df2:	2b00      	cmp	r3, #0
    1df4:	d1fc      	bne.n	1df0 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1df6:	4b1a      	ldr	r3, [pc, #104]	; (1e60 <spi_set_baudrate+0xac>)
    1df8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1dfa:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1dfc:	b2c0      	uxtb	r0, r0
    1dfe:	4b19      	ldr	r3, [pc, #100]	; (1e64 <spi_set_baudrate+0xb0>)
    1e00:	4798      	blx	r3
    1e02:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    1e04:	466b      	mov	r3, sp
    1e06:	1d9a      	adds	r2, r3, #6
    1e08:	0020      	movs	r0, r4
    1e0a:	4b17      	ldr	r3, [pc, #92]	; (1e68 <spi_set_baudrate+0xb4>)
    1e0c:	4798      	blx	r3
    1e0e:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    1e10:	d003      	beq.n	1e1a <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    1e12:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    1e14:	0020      	movs	r0, r4
    1e16:	b002      	add	sp, #8
    1e18:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    1e1a:	466b      	mov	r3, sp
    1e1c:	3306      	adds	r3, #6
    1e1e:	781b      	ldrb	r3, [r3, #0]
    1e20:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1e22:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1e24:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    1e26:	2b00      	cmp	r3, #0
    1e28:	d1fc      	bne.n	1e24 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1e2a:	0030      	movs	r0, r6
    1e2c:	4b0a      	ldr	r3, [pc, #40]	; (1e58 <spi_set_baudrate+0xa4>)
    1e2e:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e30:	231f      	movs	r3, #31
    1e32:	4018      	ands	r0, r3
    1e34:	3b1e      	subs	r3, #30
    1e36:	4083      	lsls	r3, r0
    1e38:	4a08      	ldr	r2, [pc, #32]	; (1e5c <spi_set_baudrate+0xa8>)
    1e3a:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1e3c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1e3e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1e40:	2b00      	cmp	r3, #0
    1e42:	d1fc      	bne.n	1e3e <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1e44:	6833      	ldr	r3, [r6, #0]
    1e46:	2202      	movs	r2, #2
    1e48:	4313      	orrs	r3, r2
    1e4a:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1e4c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1e4e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1e50:	2b00      	cmp	r3, #0
    1e52:	d1fc      	bne.n	1e4e <spi_set_baudrate+0x9a>
    1e54:	e7de      	b.n	1e14 <spi_set_baudrate+0x60>
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	00001cd9 	.word	0x00001cd9
    1e5c:	e000e100 	.word	0xe000e100
    1e60:	00001c61 	.word	0x00001c61
    1e64:	00003175 	.word	0x00003175
    1e68:	000019df 	.word	0x000019df

00001e6c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e6e:	b08b      	sub	sp, #44	; 0x2c
    1e70:	0005      	movs	r5, r0
    1e72:	000c      	movs	r4, r1
    1e74:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1e76:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1e78:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1e7a:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1e7c:	079b      	lsls	r3, r3, #30
    1e7e:	d501      	bpl.n	1e84 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1e80:	b00b      	add	sp, #44	; 0x2c
    1e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1e84:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1e86:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1e88:	07db      	lsls	r3, r3, #31
    1e8a:	d4f9      	bmi.n	1e80 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1e8c:	0008      	movs	r0, r1
    1e8e:	4b60      	ldr	r3, [pc, #384]	; (2010 <STACK_SIZE+0x10>)
    1e90:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1e92:	4a60      	ldr	r2, [pc, #384]	; (2014 <STACK_SIZE+0x14>)
    1e94:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1e96:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1e98:	2301      	movs	r3, #1
    1e9a:	40bb      	lsls	r3, r7
    1e9c:	430b      	orrs	r3, r1
    1e9e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1ea0:	a909      	add	r1, sp, #36	; 0x24
    1ea2:	2724      	movs	r7, #36	; 0x24
    1ea4:	5df3      	ldrb	r3, [r6, r7]
    1ea6:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1ea8:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1eaa:	b2c3      	uxtb	r3, r0
    1eac:	9301      	str	r3, [sp, #4]
    1eae:	0018      	movs	r0, r3
    1eb0:	4b59      	ldr	r3, [pc, #356]	; (2018 <STACK_SIZE+0x18>)
    1eb2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1eb4:	9801      	ldr	r0, [sp, #4]
    1eb6:	4b59      	ldr	r3, [pc, #356]	; (201c <STACK_SIZE+0x1c>)
    1eb8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1eba:	5df0      	ldrb	r0, [r6, r7]
    1ebc:	2100      	movs	r1, #0
    1ebe:	4b58      	ldr	r3, [pc, #352]	; (2020 <STACK_SIZE+0x20>)
    1ec0:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1ec2:	7833      	ldrb	r3, [r6, #0]
    1ec4:	2b01      	cmp	r3, #1
    1ec6:	d038      	beq.n	1f3a <spi_init+0xce>
    1ec8:	002b      	movs	r3, r5
    1eca:	330c      	adds	r3, #12
    1ecc:	0029      	movs	r1, r5
    1ece:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    1ed0:	2200      	movs	r2, #0
    1ed2:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1ed4:	428b      	cmp	r3, r1
    1ed6:	d1fc      	bne.n	1ed2 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    1ed8:	2300      	movs	r3, #0
    1eda:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1edc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1ede:	2400      	movs	r4, #0
    1ee0:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1ee2:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1ee4:	3336      	adds	r3, #54	; 0x36
    1ee6:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    1ee8:	3301      	adds	r3, #1
    1eea:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    1eec:	3301      	adds	r3, #1
    1eee:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    1ef0:	3b35      	subs	r3, #53	; 0x35
    1ef2:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    1ef4:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1ef6:	6828      	ldr	r0, [r5, #0]
    1ef8:	4b45      	ldr	r3, [pc, #276]	; (2010 <STACK_SIZE+0x10>)
    1efa:	4798      	blx	r3
    1efc:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1efe:	4949      	ldr	r1, [pc, #292]	; (2024 <STACK_SIZE+0x24>)
    1f00:	4b49      	ldr	r3, [pc, #292]	; (2028 <STACK_SIZE+0x28>)
    1f02:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1f04:	00bf      	lsls	r7, r7, #2
    1f06:	4b49      	ldr	r3, [pc, #292]	; (202c <STACK_SIZE+0x2c>)
    1f08:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f0a:	682f      	ldr	r7, [r5, #0]
    1f0c:	ab04      	add	r3, sp, #16
    1f0e:	2280      	movs	r2, #128	; 0x80
    1f10:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f12:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f14:	3a7f      	subs	r2, #127	; 0x7f
    1f16:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1f18:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1f1a:	7833      	ldrb	r3, [r6, #0]
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d102      	bne.n	1f26 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1f20:	2200      	movs	r2, #0
    1f22:	ab04      	add	r3, sp, #16
    1f24:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1f26:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1f28:	9305      	str	r3, [sp, #20]
    1f2a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1f2c:	9306      	str	r3, [sp, #24]
    1f2e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1f30:	9307      	str	r3, [sp, #28]
    1f32:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1f34:	9308      	str	r3, [sp, #32]
    1f36:	2400      	movs	r4, #0
    1f38:	e00b      	b.n	1f52 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1f3a:	6823      	ldr	r3, [r4, #0]
    1f3c:	220c      	movs	r2, #12
    1f3e:	4313      	orrs	r3, r2
    1f40:	6023      	str	r3, [r4, #0]
    1f42:	e7c1      	b.n	1ec8 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1f44:	0038      	movs	r0, r7
    1f46:	4b3a      	ldr	r3, [pc, #232]	; (2030 <STACK_SIZE+0x30>)
    1f48:	4798      	blx	r3
    1f4a:	e00a      	b.n	1f62 <spi_init+0xf6>
    1f4c:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1f4e:	2c04      	cmp	r4, #4
    1f50:	d010      	beq.n	1f74 <spi_init+0x108>
    1f52:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1f54:	00a3      	lsls	r3, r4, #2
    1f56:	aa02      	add	r2, sp, #8
    1f58:	200c      	movs	r0, #12
    1f5a:	1812      	adds	r2, r2, r0
    1f5c:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1f5e:	2800      	cmp	r0, #0
    1f60:	d0f0      	beq.n	1f44 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    1f62:	1c43      	adds	r3, r0, #1
    1f64:	d0f2      	beq.n	1f4c <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1f66:	a904      	add	r1, sp, #16
    1f68:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1f6a:	0c00      	lsrs	r0, r0, #16
    1f6c:	b2c0      	uxtb	r0, r0
    1f6e:	4b31      	ldr	r3, [pc, #196]	; (2034 <STACK_SIZE+0x34>)
    1f70:	4798      	blx	r3
    1f72:	e7eb      	b.n	1f4c <spi_init+0xe0>
	module->mode             = config->mode;
    1f74:	7833      	ldrb	r3, [r6, #0]
    1f76:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1f78:	7c33      	ldrb	r3, [r6, #16]
    1f7a:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1f7c:	7cb3      	ldrb	r3, [r6, #18]
    1f7e:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1f80:	7d33      	ldrb	r3, [r6, #20]
    1f82:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1f84:	2200      	movs	r2, #0
    1f86:	ab02      	add	r3, sp, #8
    1f88:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1f8a:	7833      	ldrb	r3, [r6, #0]
    1f8c:	2b01      	cmp	r3, #1
    1f8e:	d028      	beq.n	1fe2 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    1f90:	6873      	ldr	r3, [r6, #4]
    1f92:	68b2      	ldr	r2, [r6, #8]
    1f94:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    1f96:	68f2      	ldr	r2, [r6, #12]
    1f98:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    1f9a:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    1f9c:	7c72      	ldrb	r2, [r6, #17]
    1f9e:	2a00      	cmp	r2, #0
    1fa0:	d103      	bne.n	1faa <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1fa2:	4a25      	ldr	r2, [pc, #148]	; (2038 <STACK_SIZE+0x38>)
    1fa4:	7892      	ldrb	r2, [r2, #2]
    1fa6:	0792      	lsls	r2, r2, #30
    1fa8:	d501      	bpl.n	1fae <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1faa:	2280      	movs	r2, #128	; 0x80
    1fac:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    1fae:	7cb2      	ldrb	r2, [r6, #18]
    1fb0:	2a00      	cmp	r2, #0
    1fb2:	d002      	beq.n	1fba <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1fb4:	2280      	movs	r2, #128	; 0x80
    1fb6:	0292      	lsls	r2, r2, #10
    1fb8:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    1fba:	7cf2      	ldrb	r2, [r6, #19]
    1fbc:	2a00      	cmp	r2, #0
    1fbe:	d002      	beq.n	1fc6 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1fc0:	2280      	movs	r2, #128	; 0x80
    1fc2:	0092      	lsls	r2, r2, #2
    1fc4:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    1fc6:	7d32      	ldrb	r2, [r6, #20]
    1fc8:	2a00      	cmp	r2, #0
    1fca:	d002      	beq.n	1fd2 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1fcc:	2280      	movs	r2, #128	; 0x80
    1fce:	0192      	lsls	r2, r2, #6
    1fd0:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    1fd2:	683a      	ldr	r2, [r7, #0]
    1fd4:	4313      	orrs	r3, r2
    1fd6:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	430b      	orrs	r3, r1
    1fdc:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    1fde:	2000      	movs	r0, #0
    1fe0:	e74e      	b.n	1e80 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1fe2:	6828      	ldr	r0, [r5, #0]
    1fe4:	4b0a      	ldr	r3, [pc, #40]	; (2010 <STACK_SIZE+0x10>)
    1fe6:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1fe8:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1fea:	b2c0      	uxtb	r0, r0
    1fec:	4b13      	ldr	r3, [pc, #76]	; (203c <STACK_SIZE+0x3c>)
    1fee:	4798      	blx	r3
    1ff0:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1ff2:	ab02      	add	r3, sp, #8
    1ff4:	1d9a      	adds	r2, r3, #6
    1ff6:	69b0      	ldr	r0, [r6, #24]
    1ff8:	4b11      	ldr	r3, [pc, #68]	; (2040 <STACK_SIZE+0x40>)
    1ffa:	4798      	blx	r3
    1ffc:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1ffe:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    2000:	2b00      	cmp	r3, #0
    2002:	d000      	beq.n	2006 <STACK_SIZE+0x6>
    2004:	e73c      	b.n	1e80 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    2006:	ab02      	add	r3, sp, #8
    2008:	3306      	adds	r3, #6
    200a:	781b      	ldrb	r3, [r3, #0]
    200c:	733b      	strb	r3, [r7, #12]
    200e:	e7bf      	b.n	1f90 <spi_init+0x124>
    2010:	00001c61 	.word	0x00001c61
    2014:	40000400 	.word	0x40000400
    2018:	00003159 	.word	0x00003159
    201c:	000030cd 	.word	0x000030cd
    2020:	00001a9d 	.word	0x00001a9d
    2024:	000022d9 	.word	0x000022d9
    2028:	00001c9d 	.word	0x00001c9d
    202c:	200009c4 	.word	0x200009c4
    2030:	00001ae9 	.word	0x00001ae9
    2034:	00003251 	.word	0x00003251
    2038:	41002000 	.word	0x41002000
    203c:	00003175 	.word	0x00003175
    2040:	000019df 	.word	0x000019df

00002044 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    2044:	b5f0      	push	{r4, r5, r6, r7, lr}
    2046:	46d6      	mov	lr, sl
    2048:	4647      	mov	r7, r8
    204a:	b580      	push	{r7, lr}
    204c:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    204e:	2438      	movs	r4, #56	; 0x38
    2050:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2052:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    2054:	2d05      	cmp	r5, #5
    2056:	d002      	beq.n	205e <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2058:	3412      	adds	r4, #18
	if (length == 0) {
    205a:	2a00      	cmp	r2, #0
    205c:	d105      	bne.n	206a <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    205e:	0020      	movs	r0, r4
    2060:	b003      	add	sp, #12
    2062:	bc0c      	pop	{r2, r3}
    2064:	4690      	mov	r8, r2
    2066:	469a      	mov	sl, r3
    2068:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    206a:	79c4      	ldrb	r4, [r0, #7]
    206c:	2c00      	cmp	r4, #0
    206e:	d144      	bne.n	20fa <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    2070:	341c      	adds	r4, #28
    2072:	e7f4      	b.n	205e <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2074:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2076:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    2078:	423c      	tst	r4, r7
    207a:	d0fc      	beq.n	2076 <spi_read_buffer_wait+0x32>
    207c:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    207e:	423c      	tst	r4, r7
    2080:	d01a      	beq.n	20b8 <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2082:	4644      	mov	r4, r8
    2084:	62ac      	str	r4, [r5, #40]	; 0x28
    2086:	e017      	b.n	20b8 <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2088:	7984      	ldrb	r4, [r0, #6]
    208a:	2c01      	cmp	r4, #1
    208c:	d026      	beq.n	20dc <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    208e:	6aad      	ldr	r5, [r5, #40]	; 0x28
    2090:	b2ec      	uxtb	r4, r5
    2092:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    2094:	9c01      	ldr	r4, [sp, #4]
    2096:	2c00      	cmp	r4, #0
    2098:	d13a      	bne.n	2110 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    209a:	1c75      	adds	r5, r6, #1
    209c:	b2ad      	uxth	r5, r5
    209e:	4664      	mov	r4, ip
    20a0:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    20a2:	7984      	ldrb	r4, [r0, #6]
    20a4:	2c01      	cmp	r4, #1
    20a6:	d01e      	beq.n	20e6 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    20a8:	002e      	movs	r6, r5
	while (length--) {
    20aa:	3a01      	subs	r2, #1
    20ac:	b292      	uxth	r2, r2
    20ae:	4552      	cmp	r2, sl
    20b0:	d01f      	beq.n	20f2 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    20b2:	7944      	ldrb	r4, [r0, #5]
    20b4:	2c01      	cmp	r4, #1
    20b6:	d0dd      	beq.n	2074 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    20b8:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    20ba:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    20bc:	421c      	tst	r4, r3
    20be:	d0fc      	beq.n	20ba <spi_read_buffer_wait+0x76>
    20c0:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    20c2:	421c      	tst	r4, r3
    20c4:	d017      	beq.n	20f6 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    20c6:	8b6c      	ldrh	r4, [r5, #26]
    20c8:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    20ca:	2400      	movs	r4, #0
    20cc:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    20ce:	4664      	mov	r4, ip
    20d0:	421c      	tst	r4, r3
    20d2:	d0d9      	beq.n	2088 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    20d4:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    20d6:	241e      	movs	r4, #30
    20d8:	9401      	str	r4, [sp, #4]
    20da:	e7d5      	b.n	2088 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    20dc:	6aac      	ldr	r4, [r5, #40]	; 0x28
    20de:	05e4      	lsls	r4, r4, #23
    20e0:	0de4      	lsrs	r4, r4, #23
    20e2:	46a4      	mov	ip, r4
    20e4:	e7d6      	b.n	2094 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    20e6:	3602      	adds	r6, #2
    20e8:	b2b6      	uxth	r6, r6
    20ea:	4664      	mov	r4, ip
    20ec:	0a24      	lsrs	r4, r4, #8
    20ee:	554c      	strb	r4, [r1, r5]
    20f0:	e7db      	b.n	20aa <spi_read_buffer_wait+0x66>
    20f2:	9c01      	ldr	r4, [sp, #4]
    20f4:	e7b3      	b.n	205e <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    20f6:	2410      	movs	r4, #16
    20f8:	e7b1      	b.n	205e <spi_read_buffer_wait+0x1a>
	while (length--) {
    20fa:	3a01      	subs	r2, #1
    20fc:	b292      	uxth	r2, r2
    20fe:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    2100:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2102:	05db      	lsls	r3, r3, #23
    2104:	0ddb      	lsrs	r3, r3, #23
    2106:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    2108:	2304      	movs	r3, #4
	while (length--) {
    210a:	4c02      	ldr	r4, [pc, #8]	; (2114 <spi_read_buffer_wait+0xd0>)
    210c:	46a2      	mov	sl, r4
    210e:	e7d0      	b.n	20b2 <spi_read_buffer_wait+0x6e>
    2110:	9c01      	ldr	r4, [sp, #4]
    2112:	e7a4      	b.n	205e <spi_read_buffer_wait+0x1a>
    2114:	0000ffff 	.word	0x0000ffff

00002118 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    2118:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    211a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    211c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    211e:	2c01      	cmp	r4, #1
    2120:	d001      	beq.n	2126 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    2122:	0018      	movs	r0, r3
    2124:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    2126:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    2128:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    212a:	2c00      	cmp	r4, #0
    212c:	d1f9      	bne.n	2122 <spi_select_slave+0xa>
		if (select) {
    212e:	2a00      	cmp	r2, #0
    2130:	d058      	beq.n	21e4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    2132:	784b      	ldrb	r3, [r1, #1]
    2134:	2b00      	cmp	r3, #0
    2136:	d044      	beq.n	21c2 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2138:	6803      	ldr	r3, [r0, #0]
    213a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    213c:	07db      	lsls	r3, r3, #31
    213e:	d410      	bmi.n	2162 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    2140:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2142:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2144:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2146:	2900      	cmp	r1, #0
    2148:	d104      	bne.n	2154 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    214a:	0953      	lsrs	r3, r2, #5
    214c:	01db      	lsls	r3, r3, #7
    214e:	492e      	ldr	r1, [pc, #184]	; (2208 <spi_select_slave+0xf0>)
    2150:	468c      	mov	ip, r1
    2152:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2154:	211f      	movs	r1, #31
    2156:	4011      	ands	r1, r2
    2158:	2201      	movs	r2, #1
    215a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    215c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    215e:	2305      	movs	r3, #5
    2160:	e7df      	b.n	2122 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    2162:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2164:	09d4      	lsrs	r4, r2, #7
		return NULL;
    2166:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2168:	2c00      	cmp	r4, #0
    216a:	d104      	bne.n	2176 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    216c:	0953      	lsrs	r3, r2, #5
    216e:	01db      	lsls	r3, r3, #7
    2170:	4c25      	ldr	r4, [pc, #148]	; (2208 <spi_select_slave+0xf0>)
    2172:	46a4      	mov	ip, r4
    2174:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2176:	241f      	movs	r4, #31
    2178:	4014      	ands	r4, r2
    217a:	2201      	movs	r2, #1
    217c:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    217e:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2180:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2182:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2184:	07d2      	lsls	r2, r2, #31
    2186:	d501      	bpl.n	218c <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2188:	788a      	ldrb	r2, [r1, #2]
    218a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    218c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    218e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    2190:	2a00      	cmp	r2, #0
    2192:	d1c6      	bne.n	2122 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2194:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    2196:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2198:	7e13      	ldrb	r3, [r2, #24]
    219a:	420b      	tst	r3, r1
    219c:	d0fc      	beq.n	2198 <spi_select_slave+0x80>
    219e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    21a0:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    21a2:	0749      	lsls	r1, r1, #29
    21a4:	d5bd      	bpl.n	2122 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    21a6:	8b53      	ldrh	r3, [r2, #26]
    21a8:	075b      	lsls	r3, r3, #29
    21aa:	d501      	bpl.n	21b0 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    21ac:	2304      	movs	r3, #4
    21ae:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    21b0:	7983      	ldrb	r3, [r0, #6]
    21b2:	2b01      	cmp	r3, #1
    21b4:	d002      	beq.n	21bc <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    21b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    21b8:	2300      	movs	r3, #0
    21ba:	e7b2      	b.n	2122 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    21bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    21be:	2300      	movs	r3, #0
    21c0:	e7af      	b.n	2122 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    21c2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    21c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    21c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    21c8:	2900      	cmp	r1, #0
    21ca:	d104      	bne.n	21d6 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    21cc:	0953      	lsrs	r3, r2, #5
    21ce:	01db      	lsls	r3, r3, #7
    21d0:	490d      	ldr	r1, [pc, #52]	; (2208 <spi_select_slave+0xf0>)
    21d2:	468c      	mov	ip, r1
    21d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    21d6:	211f      	movs	r1, #31
    21d8:	4011      	ands	r1, r2
    21da:	2201      	movs	r2, #1
    21dc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    21de:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    21e0:	2300      	movs	r3, #0
    21e2:	e79e      	b.n	2122 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    21e4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    21e6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    21e8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    21ea:	2900      	cmp	r1, #0
    21ec:	d104      	bne.n	21f8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    21ee:	0953      	lsrs	r3, r2, #5
    21f0:	01db      	lsls	r3, r3, #7
    21f2:	4905      	ldr	r1, [pc, #20]	; (2208 <spi_select_slave+0xf0>)
    21f4:	468c      	mov	ip, r1
    21f6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    21f8:	211f      	movs	r1, #31
    21fa:	4011      	ands	r1, r2
    21fc:	2201      	movs	r2, #1
    21fe:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2200:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    2202:	2300      	movs	r3, #0
    2204:	e78d      	b.n	2122 <spi_select_slave+0xa>
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	41004400 	.word	0x41004400

0000220c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    220c:	b5f0      	push	{r4, r5, r6, r7, lr}
    220e:	46de      	mov	lr, fp
    2210:	4657      	mov	r7, sl
    2212:	464e      	mov	r6, r9
    2214:	4645      	mov	r5, r8
    2216:	b5e0      	push	{r5, r6, r7, lr}
    2218:	b083      	sub	sp, #12
    221a:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    221c:	2338      	movs	r3, #56	; 0x38
    221e:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2220:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    2222:	2c05      	cmp	r4, #5
    2224:	d002      	beq.n	222c <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2226:	3312      	adds	r3, #18
	if (length == 0) {
    2228:	2a00      	cmp	r2, #0
    222a:	d14b      	bne.n	22c4 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    222c:	0018      	movs	r0, r3
    222e:	b003      	add	sp, #12
    2230:	bc3c      	pop	{r2, r3, r4, r5}
    2232:	4690      	mov	r8, r2
    2234:	4699      	mov	r9, r3
    2236:	46a2      	mov	sl, r4
    2238:	46ab      	mov	fp, r5
    223a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    223c:	3702      	adds	r7, #2
    223e:	b2bf      	uxth	r7, r7
    2240:	4641      	mov	r1, r8
    2242:	4653      	mov	r3, sl
    2244:	5c59      	ldrb	r1, [r3, r1]
    2246:	0209      	lsls	r1, r1, #8
    2248:	465b      	mov	r3, fp
    224a:	430b      	orrs	r3, r1
    224c:	e018      	b.n	2280 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    224e:	7983      	ldrb	r3, [r0, #6]
    2250:	2b01      	cmp	r3, #1
    2252:	d02a      	beq.n	22aa <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2254:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    2256:	3e01      	subs	r6, #1
    2258:	b2b6      	uxth	r6, r6
    225a:	4566      	cmp	r6, ip
    225c:	d027      	beq.n	22ae <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    225e:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2260:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    2262:	4223      	tst	r3, r4
    2264:	d0fc      	beq.n	2260 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    2266:	1c7b      	adds	r3, r7, #1
    2268:	b29b      	uxth	r3, r3
    226a:	4698      	mov	r8, r3
    226c:	4653      	mov	r3, sl
    226e:	5ddb      	ldrb	r3, [r3, r7]
    2270:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2272:	7981      	ldrb	r1, [r0, #6]
    2274:	2901      	cmp	r1, #1
    2276:	d0e1      	beq.n	223c <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    2278:	4669      	mov	r1, sp
    227a:	80cb      	strh	r3, [r1, #6]
    227c:	88cb      	ldrh	r3, [r1, #6]
    227e:	4647      	mov	r7, r8
    2280:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    2282:	4221      	tst	r1, r4
    2284:	d002      	beq.n	228c <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2286:	05db      	lsls	r3, r3, #23
    2288:	0ddb      	lsrs	r3, r3, #23
    228a:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    228c:	79c3      	ldrb	r3, [r0, #7]
    228e:	2b00      	cmp	r3, #0
    2290:	d0e1      	beq.n	2256 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2292:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2294:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    2296:	422b      	tst	r3, r5
    2298:	d0fc      	beq.n	2294 <spi_write_buffer_wait+0x88>
    229a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    229c:	422b      	tst	r3, r5
    229e:	d0da      	beq.n	2256 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    22a0:	8b53      	ldrh	r3, [r2, #26]
    22a2:	422b      	tst	r3, r5
    22a4:	d0d3      	beq.n	224e <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    22a6:	8355      	strh	r5, [r2, #26]
    22a8:	e7d1      	b.n	224e <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    22aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    22ac:	e7d3      	b.n	2256 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    22ae:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    22b0:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    22b2:	2a01      	cmp	r2, #1
    22b4:	d1ba      	bne.n	222c <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    22b6:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    22b8:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    22ba:	7e0b      	ldrb	r3, [r1, #24]
    22bc:	4213      	tst	r3, r2
    22be:	d0fc      	beq.n	22ba <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    22c0:	2300      	movs	r3, #0
    22c2:	e7b3      	b.n	222c <spi_write_buffer_wait+0x20>
	while (length--) {
    22c4:	3a01      	subs	r2, #1
    22c6:	b296      	uxth	r6, r2
    22c8:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    22ca:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    22cc:	2504      	movs	r5, #4
	while (length--) {
    22ce:	4b01      	ldr	r3, [pc, #4]	; (22d4 <spi_write_buffer_wait+0xc8>)
    22d0:	469c      	mov	ip, r3
    22d2:	e7c4      	b.n	225e <spi_write_buffer_wait+0x52>
    22d4:	0000ffff 	.word	0x0000ffff

000022d8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    22d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    22da:	0080      	lsls	r0, r0, #2
    22dc:	4b70      	ldr	r3, [pc, #448]	; (24a0 <_spi_interrupt_handler+0x1c8>)
    22de:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    22e0:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    22e2:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    22e4:	5ce7      	ldrb	r7, [r4, r3]
    22e6:	2236      	movs	r2, #54	; 0x36
    22e8:	5ca2      	ldrb	r2, [r4, r2]
    22ea:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    22ec:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    22ee:	7db5      	ldrb	r5, [r6, #22]
    22f0:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    22f2:	07eb      	lsls	r3, r5, #31
    22f4:	d502      	bpl.n	22fc <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    22f6:	7963      	ldrb	r3, [r4, #5]
    22f8:	2b01      	cmp	r3, #1
    22fa:	d01e      	beq.n	233a <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    22fc:	076b      	lsls	r3, r5, #29
    22fe:	d511      	bpl.n	2324 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2300:	8b73      	ldrh	r3, [r6, #26]
    2302:	075b      	lsls	r3, r3, #29
    2304:	d55a      	bpl.n	23bc <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    2306:	7a63      	ldrb	r3, [r4, #9]
    2308:	2b01      	cmp	r3, #1
    230a:	d008      	beq.n	231e <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    230c:	221e      	movs	r2, #30
    230e:	2338      	movs	r3, #56	; 0x38
    2310:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    2312:	3b35      	subs	r3, #53	; 0x35
    2314:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    2316:	3302      	adds	r3, #2
    2318:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    231a:	073b      	lsls	r3, r7, #28
    231c:	d44a      	bmi.n	23b4 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    231e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2320:	2304      	movs	r3, #4
    2322:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2324:	07ab      	lsls	r3, r5, #30
    2326:	d503      	bpl.n	2330 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2328:	7963      	ldrb	r3, [r4, #5]
    232a:	2b01      	cmp	r3, #1
    232c:	d100      	bne.n	2330 <_spi_interrupt_handler+0x58>
    232e:	e097      	b.n	2460 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    2330:	b26d      	sxtb	r5, r5
    2332:	2d00      	cmp	r5, #0
    2334:	da00      	bge.n	2338 <_spi_interrupt_handler+0x60>
    2336:	e0a9      	b.n	248c <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    2338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    233a:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    233c:	2b00      	cmp	r3, #0
    233e:	d022      	beq.n	2386 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    2340:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    2342:	2b00      	cmp	r3, #0
    2344:	d0da      	beq.n	22fc <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2346:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2348:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    234a:	7813      	ldrb	r3, [r2, #0]
    234c:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    234e:	1c50      	adds	r0, r2, #1
    2350:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2352:	79a0      	ldrb	r0, [r4, #6]
    2354:	2801      	cmp	r0, #1
    2356:	d027      	beq.n	23a8 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2358:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    235a:	05db      	lsls	r3, r3, #23
    235c:	0ddb      	lsrs	r3, r3, #23
    235e:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    2360:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2362:	3b01      	subs	r3, #1
    2364:	b29b      	uxth	r3, r3
    2366:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    2368:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    236a:	b29b      	uxth	r3, r3
    236c:	2b00      	cmp	r3, #0
    236e:	d1c5      	bne.n	22fc <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2370:	3301      	adds	r3, #1
    2372:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    2374:	7a63      	ldrb	r3, [r4, #9]
    2376:	2b01      	cmp	r3, #1
    2378:	d1c0      	bne.n	22fc <_spi_interrupt_handler+0x24>
    237a:	79e3      	ldrb	r3, [r4, #7]
    237c:	2b00      	cmp	r3, #0
    237e:	d1bd      	bne.n	22fc <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2380:	3302      	adds	r3, #2
    2382:	75b3      	strb	r3, [r6, #22]
    2384:	e7ba      	b.n	22fc <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    2386:	4b47      	ldr	r3, [pc, #284]	; (24a4 <_spi_interrupt_handler+0x1cc>)
    2388:	881b      	ldrh	r3, [r3, #0]
    238a:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    238c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    238e:	3b01      	subs	r3, #1
    2390:	b29b      	uxth	r3, r3
    2392:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    2394:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2396:	b29b      	uxth	r3, r3
    2398:	2b00      	cmp	r3, #0
    239a:	d101      	bne.n	23a0 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    239c:	3301      	adds	r3, #1
    239e:	7533      	strb	r3, [r6, #20]
		if (0
    23a0:	7963      	ldrb	r3, [r4, #5]
    23a2:	2b01      	cmp	r3, #1
    23a4:	d0cc      	beq.n	2340 <_spi_interrupt_handler+0x68>
    23a6:	e7a9      	b.n	22fc <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    23a8:	7850      	ldrb	r0, [r2, #1]
    23aa:	0200      	lsls	r0, r0, #8
    23ac:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    23ae:	3202      	adds	r2, #2
    23b0:	62e2      	str	r2, [r4, #44]	; 0x2c
    23b2:	e7d2      	b.n	235a <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    23b4:	0020      	movs	r0, r4
    23b6:	69a3      	ldr	r3, [r4, #24]
    23b8:	4798      	blx	r3
    23ba:	e7b0      	b.n	231e <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    23bc:	7a63      	ldrb	r3, [r4, #9]
    23be:	2b01      	cmp	r3, #1
    23c0:	d028      	beq.n	2414 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    23c2:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    23c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23c6:	05db      	lsls	r3, r3, #23
    23c8:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    23ca:	b2da      	uxtb	r2, r3
    23cc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    23ce:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    23d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    23d2:	1c51      	adds	r1, r2, #1
    23d4:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    23d6:	79a1      	ldrb	r1, [r4, #6]
    23d8:	2901      	cmp	r1, #1
    23da:	d034      	beq.n	2446 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    23dc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    23de:	3b01      	subs	r3, #1
    23e0:	b29b      	uxth	r3, r3
    23e2:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    23e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    23e6:	b29b      	uxth	r3, r3
    23e8:	2b00      	cmp	r3, #0
    23ea:	d000      	beq.n	23ee <_spi_interrupt_handler+0x116>
    23ec:	e79a      	b.n	2324 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    23ee:	2200      	movs	r2, #0
    23f0:	3338      	adds	r3, #56	; 0x38
    23f2:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    23f4:	3b34      	subs	r3, #52	; 0x34
    23f6:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    23f8:	7a63      	ldrb	r3, [r4, #9]
    23fa:	2b02      	cmp	r3, #2
    23fc:	d029      	beq.n	2452 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    23fe:	7a63      	ldrb	r3, [r4, #9]
    2400:	2b00      	cmp	r3, #0
    2402:	d000      	beq.n	2406 <_spi_interrupt_handler+0x12e>
    2404:	e78e      	b.n	2324 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2406:	07bb      	lsls	r3, r7, #30
    2408:	d400      	bmi.n	240c <_spi_interrupt_handler+0x134>
    240a:	e78b      	b.n	2324 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    240c:	0020      	movs	r0, r4
    240e:	6923      	ldr	r3, [r4, #16]
    2410:	4798      	blx	r3
    2412:	e787      	b.n	2324 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2414:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    2416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2418:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    241a:	3b01      	subs	r3, #1
    241c:	b29b      	uxth	r3, r3
    241e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    2420:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2422:	b29b      	uxth	r3, r3
    2424:	2b00      	cmp	r3, #0
    2426:	d000      	beq.n	242a <_spi_interrupt_handler+0x152>
    2428:	e77c      	b.n	2324 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    242a:	3304      	adds	r3, #4
    242c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    242e:	2200      	movs	r2, #0
    2430:	3334      	adds	r3, #52	; 0x34
    2432:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    2434:	3b35      	subs	r3, #53	; 0x35
    2436:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    2438:	07fb      	lsls	r3, r7, #31
    243a:	d400      	bmi.n	243e <_spi_interrupt_handler+0x166>
    243c:	e772      	b.n	2324 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    243e:	0020      	movs	r0, r4
    2440:	68e3      	ldr	r3, [r4, #12]
    2442:	4798      	blx	r3
    2444:	e76e      	b.n	2324 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    2446:	0a1b      	lsrs	r3, r3, #8
    2448:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    244a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    244c:	3301      	adds	r3, #1
    244e:	62a3      	str	r3, [r4, #40]	; 0x28
    2450:	e7c4      	b.n	23dc <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    2452:	077b      	lsls	r3, r7, #29
    2454:	d400      	bmi.n	2458 <_spi_interrupt_handler+0x180>
    2456:	e765      	b.n	2324 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    2458:	0020      	movs	r0, r4
    245a:	6963      	ldr	r3, [r4, #20]
    245c:	4798      	blx	r3
    245e:	e761      	b.n	2324 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2460:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2462:	2b01      	cmp	r3, #1
    2464:	d000      	beq.n	2468 <_spi_interrupt_handler+0x190>
    2466:	e763      	b.n	2330 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2468:	79e3      	ldrb	r3, [r4, #7]
    246a:	2b00      	cmp	r3, #0
    246c:	d000      	beq.n	2470 <_spi_interrupt_handler+0x198>
    246e:	e75f      	b.n	2330 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2470:	3302      	adds	r3, #2
    2472:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    2474:	3301      	adds	r3, #1
    2476:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    2478:	2200      	movs	r2, #0
    247a:	3335      	adds	r3, #53	; 0x35
    247c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    247e:	07fb      	lsls	r3, r7, #31
    2480:	d400      	bmi.n	2484 <_spi_interrupt_handler+0x1ac>
    2482:	e755      	b.n	2330 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2484:	0020      	movs	r0, r4
    2486:	68e3      	ldr	r3, [r4, #12]
    2488:	4798      	blx	r3
    248a:	e751      	b.n	2330 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    248c:	2380      	movs	r3, #128	; 0x80
    248e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2490:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    2492:	067b      	lsls	r3, r7, #25
    2494:	d400      	bmi.n	2498 <_spi_interrupt_handler+0x1c0>
    2496:	e74f      	b.n	2338 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    2498:	6a63      	ldr	r3, [r4, #36]	; 0x24
    249a:	0020      	movs	r0, r4
    249c:	4798      	blx	r3
}
    249e:	e74b      	b.n	2338 <_spi_interrupt_handler+0x60>
    24a0:	200009c4 	.word	0x200009c4
    24a4:	200009dc 	.word	0x200009dc

000024a8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    24a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24aa:	46de      	mov	lr, fp
    24ac:	4657      	mov	r7, sl
    24ae:	464e      	mov	r6, r9
    24b0:	4645      	mov	r5, r8
    24b2:	b5e0      	push	{r5, r6, r7, lr}
    24b4:	b091      	sub	sp, #68	; 0x44
    24b6:	0005      	movs	r5, r0
    24b8:	000c      	movs	r4, r1
    24ba:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    24bc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    24be:	0008      	movs	r0, r1
    24c0:	4bbc      	ldr	r3, [pc, #752]	; (27b4 <usart_init+0x30c>)
    24c2:	4798      	blx	r3
    24c4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    24c6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    24c8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    24ca:	07db      	lsls	r3, r3, #31
    24cc:	d506      	bpl.n	24dc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    24ce:	b011      	add	sp, #68	; 0x44
    24d0:	bc3c      	pop	{r2, r3, r4, r5}
    24d2:	4690      	mov	r8, r2
    24d4:	4699      	mov	r9, r3
    24d6:	46a2      	mov	sl, r4
    24d8:	46ab      	mov	fp, r5
    24da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    24dc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    24de:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    24e0:	079b      	lsls	r3, r3, #30
    24e2:	d4f4      	bmi.n	24ce <usart_init+0x26>
    24e4:	49b4      	ldr	r1, [pc, #720]	; (27b8 <usart_init+0x310>)
    24e6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    24e8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    24ea:	2301      	movs	r3, #1
    24ec:	40bb      	lsls	r3, r7
    24ee:	4303      	orrs	r3, r0
    24f0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    24f2:	a90f      	add	r1, sp, #60	; 0x3c
    24f4:	272d      	movs	r7, #45	; 0x2d
    24f6:	5df3      	ldrb	r3, [r6, r7]
    24f8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    24fa:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    24fc:	b2d3      	uxtb	r3, r2
    24fe:	9302      	str	r3, [sp, #8]
    2500:	0018      	movs	r0, r3
    2502:	4bae      	ldr	r3, [pc, #696]	; (27bc <usart_init+0x314>)
    2504:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2506:	9802      	ldr	r0, [sp, #8]
    2508:	4bad      	ldr	r3, [pc, #692]	; (27c0 <usart_init+0x318>)
    250a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    250c:	5df0      	ldrb	r0, [r6, r7]
    250e:	2100      	movs	r1, #0
    2510:	4bac      	ldr	r3, [pc, #688]	; (27c4 <usart_init+0x31c>)
    2512:	4798      	blx	r3
	module->character_size = config->character_size;
    2514:	7af3      	ldrb	r3, [r6, #11]
    2516:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2518:	2324      	movs	r3, #36	; 0x24
    251a:	5cf3      	ldrb	r3, [r6, r3]
    251c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    251e:	2325      	movs	r3, #37	; 0x25
    2520:	5cf3      	ldrb	r3, [r6, r3]
    2522:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2524:	7ef3      	ldrb	r3, [r6, #27]
    2526:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2528:	7f33      	ldrb	r3, [r6, #28]
    252a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    252c:	682b      	ldr	r3, [r5, #0]
    252e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2530:	0018      	movs	r0, r3
    2532:	4ba0      	ldr	r3, [pc, #640]	; (27b4 <usart_init+0x30c>)
    2534:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2536:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2538:	2200      	movs	r2, #0
    253a:	230e      	movs	r3, #14
    253c:	a906      	add	r1, sp, #24
    253e:	468c      	mov	ip, r1
    2540:	4463      	add	r3, ip
    2542:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2544:	8a32      	ldrh	r2, [r6, #16]
    2546:	9202      	str	r2, [sp, #8]
    2548:	2380      	movs	r3, #128	; 0x80
    254a:	01db      	lsls	r3, r3, #7
    254c:	429a      	cmp	r2, r3
    254e:	d100      	bne.n	2552 <usart_init+0xaa>
    2550:	e09e      	b.n	2690 <usart_init+0x1e8>
    2552:	d90f      	bls.n	2574 <usart_init+0xcc>
    2554:	23c0      	movs	r3, #192	; 0xc0
    2556:	01db      	lsls	r3, r3, #7
    2558:	9a02      	ldr	r2, [sp, #8]
    255a:	429a      	cmp	r2, r3
    255c:	d100      	bne.n	2560 <usart_init+0xb8>
    255e:	e092      	b.n	2686 <usart_init+0x1de>
    2560:	2380      	movs	r3, #128	; 0x80
    2562:	021b      	lsls	r3, r3, #8
    2564:	429a      	cmp	r2, r3
    2566:	d000      	beq.n	256a <usart_init+0xc2>
    2568:	e11f      	b.n	27aa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    256a:	2303      	movs	r3, #3
    256c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    256e:	2300      	movs	r3, #0
    2570:	9307      	str	r3, [sp, #28]
    2572:	e008      	b.n	2586 <usart_init+0xde>
	switch (config->sample_rate) {
    2574:	2380      	movs	r3, #128	; 0x80
    2576:	019b      	lsls	r3, r3, #6
    2578:	429a      	cmp	r2, r3
    257a:	d000      	beq.n	257e <usart_init+0xd6>
    257c:	e115      	b.n	27aa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    257e:	2310      	movs	r3, #16
    2580:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2582:	3b0f      	subs	r3, #15
    2584:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2586:	6833      	ldr	r3, [r6, #0]
    2588:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    258a:	68f3      	ldr	r3, [r6, #12]
    258c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    258e:	6973      	ldr	r3, [r6, #20]
    2590:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2592:	7e33      	ldrb	r3, [r6, #24]
    2594:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2596:	2326      	movs	r3, #38	; 0x26
    2598:	5cf3      	ldrb	r3, [r6, r3]
    259a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    259c:	6873      	ldr	r3, [r6, #4]
    259e:	4699      	mov	r9, r3
	switch (transfer_mode)
    25a0:	2b00      	cmp	r3, #0
    25a2:	d100      	bne.n	25a6 <usart_init+0xfe>
    25a4:	e0a0      	b.n	26e8 <usart_init+0x240>
    25a6:	2380      	movs	r3, #128	; 0x80
    25a8:	055b      	lsls	r3, r3, #21
    25aa:	4599      	cmp	r9, r3
    25ac:	d100      	bne.n	25b0 <usart_init+0x108>
    25ae:	e084      	b.n	26ba <usart_init+0x212>
	if(config->encoding_format_enable) {
    25b0:	7e73      	ldrb	r3, [r6, #25]
    25b2:	2b00      	cmp	r3, #0
    25b4:	d002      	beq.n	25bc <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    25b6:	7eb3      	ldrb	r3, [r6, #26]
    25b8:	4642      	mov	r2, r8
    25ba:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    25bc:	682a      	ldr	r2, [r5, #0]
    25be:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    25c0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    25c2:	2b00      	cmp	r3, #0
    25c4:	d1fc      	bne.n	25c0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    25c6:	330e      	adds	r3, #14
    25c8:	aa06      	add	r2, sp, #24
    25ca:	4694      	mov	ip, r2
    25cc:	4463      	add	r3, ip
    25ce:	881b      	ldrh	r3, [r3, #0]
    25d0:	4642      	mov	r2, r8
    25d2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    25d4:	9b05      	ldr	r3, [sp, #20]
    25d6:	9a03      	ldr	r2, [sp, #12]
    25d8:	4313      	orrs	r3, r2
    25da:	9a04      	ldr	r2, [sp, #16]
    25dc:	4313      	orrs	r3, r2
    25de:	464a      	mov	r2, r9
    25e0:	4313      	orrs	r3, r2
    25e2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    25e4:	465b      	mov	r3, fp
    25e6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    25e8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    25ea:	4653      	mov	r3, sl
    25ec:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    25ee:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    25f0:	2327      	movs	r3, #39	; 0x27
    25f2:	5cf3      	ldrb	r3, [r6, r3]
    25f4:	2b00      	cmp	r3, #0
    25f6:	d101      	bne.n	25fc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    25f8:	3304      	adds	r3, #4
    25fa:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    25fc:	7e73      	ldrb	r3, [r6, #25]
    25fe:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2600:	7f32      	ldrb	r2, [r6, #28]
    2602:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2604:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2606:	7f72      	ldrb	r2, [r6, #29]
    2608:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    260a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    260c:	2224      	movs	r2, #36	; 0x24
    260e:	5cb2      	ldrb	r2, [r6, r2]
    2610:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2612:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2614:	2225      	movs	r2, #37	; 0x25
    2616:	5cb2      	ldrb	r2, [r6, r2]
    2618:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    261a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    261c:	7ab1      	ldrb	r1, [r6, #10]
    261e:	7af2      	ldrb	r2, [r6, #11]
    2620:	4311      	orrs	r1, r2
    2622:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2624:	8933      	ldrh	r3, [r6, #8]
    2626:	2bff      	cmp	r3, #255	; 0xff
    2628:	d100      	bne.n	262c <usart_init+0x184>
    262a:	e081      	b.n	2730 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    262c:	2280      	movs	r2, #128	; 0x80
    262e:	0452      	lsls	r2, r2, #17
    2630:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2632:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2634:	232c      	movs	r3, #44	; 0x2c
    2636:	5cf3      	ldrb	r3, [r6, r3]
    2638:	2b00      	cmp	r3, #0
    263a:	d103      	bne.n	2644 <usart_init+0x19c>
    263c:	4b62      	ldr	r3, [pc, #392]	; (27c8 <usart_init+0x320>)
    263e:	789b      	ldrb	r3, [r3, #2]
    2640:	079b      	lsls	r3, r3, #30
    2642:	d501      	bpl.n	2648 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2644:	2380      	movs	r3, #128	; 0x80
    2646:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2648:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    264a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    264c:	2b00      	cmp	r3, #0
    264e:	d1fc      	bne.n	264a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2650:	4643      	mov	r3, r8
    2652:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2654:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2656:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2658:	2b00      	cmp	r3, #0
    265a:	d1fc      	bne.n	2656 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    265c:	4643      	mov	r3, r8
    265e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2660:	ab0e      	add	r3, sp, #56	; 0x38
    2662:	2280      	movs	r2, #128	; 0x80
    2664:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2666:	2200      	movs	r2, #0
    2668:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    266a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    266c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    266e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2670:	930a      	str	r3, [sp, #40]	; 0x28
    2672:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2674:	930b      	str	r3, [sp, #44]	; 0x2c
    2676:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2678:	930c      	str	r3, [sp, #48]	; 0x30
    267a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    267c:	9302      	str	r3, [sp, #8]
    267e:	930d      	str	r3, [sp, #52]	; 0x34
    2680:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2682:	ae0a      	add	r6, sp, #40	; 0x28
    2684:	e063      	b.n	274e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2686:	2308      	movs	r3, #8
    2688:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    268a:	3b07      	subs	r3, #7
    268c:	9307      	str	r3, [sp, #28]
    268e:	e77a      	b.n	2586 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2690:	6833      	ldr	r3, [r6, #0]
    2692:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2694:	68f3      	ldr	r3, [r6, #12]
    2696:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2698:	6973      	ldr	r3, [r6, #20]
    269a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    269c:	7e33      	ldrb	r3, [r6, #24]
    269e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    26a0:	2326      	movs	r3, #38	; 0x26
    26a2:	5cf3      	ldrb	r3, [r6, r3]
    26a4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    26a6:	6873      	ldr	r3, [r6, #4]
    26a8:	4699      	mov	r9, r3
	switch (transfer_mode)
    26aa:	2b00      	cmp	r3, #0
    26ac:	d018      	beq.n	26e0 <usart_init+0x238>
    26ae:	2380      	movs	r3, #128	; 0x80
    26b0:	055b      	lsls	r3, r3, #21
    26b2:	4599      	cmp	r9, r3
    26b4:	d001      	beq.n	26ba <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    26b6:	2000      	movs	r0, #0
    26b8:	e025      	b.n	2706 <usart_init+0x25e>
			if (!config->use_external_clock) {
    26ba:	2327      	movs	r3, #39	; 0x27
    26bc:	5cf3      	ldrb	r3, [r6, r3]
    26be:	2b00      	cmp	r3, #0
    26c0:	d000      	beq.n	26c4 <usart_init+0x21c>
    26c2:	e775      	b.n	25b0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    26c4:	6a33      	ldr	r3, [r6, #32]
    26c6:	001f      	movs	r7, r3
    26c8:	b2c0      	uxtb	r0, r0
    26ca:	4b40      	ldr	r3, [pc, #256]	; (27cc <usart_init+0x324>)
    26cc:	4798      	blx	r3
    26ce:	0001      	movs	r1, r0
    26d0:	220e      	movs	r2, #14
    26d2:	ab06      	add	r3, sp, #24
    26d4:	469c      	mov	ip, r3
    26d6:	4462      	add	r2, ip
    26d8:	0038      	movs	r0, r7
    26da:	4b3d      	ldr	r3, [pc, #244]	; (27d0 <usart_init+0x328>)
    26dc:	4798      	blx	r3
    26de:	e012      	b.n	2706 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    26e0:	2308      	movs	r3, #8
    26e2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    26e4:	2300      	movs	r3, #0
    26e6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    26e8:	2327      	movs	r3, #39	; 0x27
    26ea:	5cf3      	ldrb	r3, [r6, r3]
    26ec:	2b00      	cmp	r3, #0
    26ee:	d00e      	beq.n	270e <usart_init+0x266>
				status_code =
    26f0:	9b06      	ldr	r3, [sp, #24]
    26f2:	9300      	str	r3, [sp, #0]
    26f4:	9b07      	ldr	r3, [sp, #28]
    26f6:	220e      	movs	r2, #14
    26f8:	a906      	add	r1, sp, #24
    26fa:	468c      	mov	ip, r1
    26fc:	4462      	add	r2, ip
    26fe:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2700:	6a30      	ldr	r0, [r6, #32]
    2702:	4f34      	ldr	r7, [pc, #208]	; (27d4 <usart_init+0x32c>)
    2704:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2706:	2800      	cmp	r0, #0
    2708:	d000      	beq.n	270c <usart_init+0x264>
    270a:	e6e0      	b.n	24ce <usart_init+0x26>
    270c:	e750      	b.n	25b0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    270e:	6a33      	ldr	r3, [r6, #32]
    2710:	001f      	movs	r7, r3
    2712:	b2c0      	uxtb	r0, r0
    2714:	4b2d      	ldr	r3, [pc, #180]	; (27cc <usart_init+0x324>)
    2716:	4798      	blx	r3
    2718:	0001      	movs	r1, r0
				status_code =
    271a:	9b06      	ldr	r3, [sp, #24]
    271c:	9300      	str	r3, [sp, #0]
    271e:	9b07      	ldr	r3, [sp, #28]
    2720:	220e      	movs	r2, #14
    2722:	a806      	add	r0, sp, #24
    2724:	4684      	mov	ip, r0
    2726:	4462      	add	r2, ip
    2728:	0038      	movs	r0, r7
    272a:	4f2a      	ldr	r7, [pc, #168]	; (27d4 <usart_init+0x32c>)
    272c:	47b8      	blx	r7
    272e:	e7ea      	b.n	2706 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2730:	7ef3      	ldrb	r3, [r6, #27]
    2732:	2b00      	cmp	r3, #0
    2734:	d100      	bne.n	2738 <usart_init+0x290>
    2736:	e77d      	b.n	2634 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2738:	2380      	movs	r3, #128	; 0x80
    273a:	04db      	lsls	r3, r3, #19
    273c:	431f      	orrs	r7, r3
    273e:	e779      	b.n	2634 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2740:	0020      	movs	r0, r4
    2742:	4b25      	ldr	r3, [pc, #148]	; (27d8 <usart_init+0x330>)
    2744:	4798      	blx	r3
    2746:	e007      	b.n	2758 <usart_init+0x2b0>
    2748:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    274a:	2f04      	cmp	r7, #4
    274c:	d00d      	beq.n	276a <usart_init+0x2c2>
    274e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2750:	00bb      	lsls	r3, r7, #2
    2752:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2754:	2800      	cmp	r0, #0
    2756:	d0f3      	beq.n	2740 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2758:	1c43      	adds	r3, r0, #1
    275a:	d0f5      	beq.n	2748 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    275c:	a90e      	add	r1, sp, #56	; 0x38
    275e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2760:	0c00      	lsrs	r0, r0, #16
    2762:	b2c0      	uxtb	r0, r0
    2764:	4b1d      	ldr	r3, [pc, #116]	; (27dc <usart_init+0x334>)
    2766:	4798      	blx	r3
    2768:	e7ee      	b.n	2748 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    276a:	2300      	movs	r3, #0
    276c:	60eb      	str	r3, [r5, #12]
    276e:	612b      	str	r3, [r5, #16]
    2770:	616b      	str	r3, [r5, #20]
    2772:	61ab      	str	r3, [r5, #24]
    2774:	61eb      	str	r3, [r5, #28]
    2776:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2778:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    277a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    277c:	2200      	movs	r2, #0
    277e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2780:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2782:	3330      	adds	r3, #48	; 0x30
    2784:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2786:	3301      	adds	r3, #1
    2788:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    278a:	3301      	adds	r3, #1
    278c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    278e:	3301      	adds	r3, #1
    2790:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2792:	6828      	ldr	r0, [r5, #0]
    2794:	4b07      	ldr	r3, [pc, #28]	; (27b4 <usart_init+0x30c>)
    2796:	4798      	blx	r3
    2798:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    279a:	4911      	ldr	r1, [pc, #68]	; (27e0 <usart_init+0x338>)
    279c:	4b11      	ldr	r3, [pc, #68]	; (27e4 <usart_init+0x33c>)
    279e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    27a0:	00a4      	lsls	r4, r4, #2
    27a2:	4b11      	ldr	r3, [pc, #68]	; (27e8 <usart_init+0x340>)
    27a4:	50e5      	str	r5, [r4, r3]
	return status_code;
    27a6:	2000      	movs	r0, #0
    27a8:	e691      	b.n	24ce <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    27aa:	2310      	movs	r3, #16
    27ac:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27ae:	2300      	movs	r3, #0
    27b0:	9307      	str	r3, [sp, #28]
    27b2:	e6e8      	b.n	2586 <usart_init+0xde>
    27b4:	00001c61 	.word	0x00001c61
    27b8:	40000400 	.word	0x40000400
    27bc:	00003159 	.word	0x00003159
    27c0:	000030cd 	.word	0x000030cd
    27c4:	00001a9d 	.word	0x00001a9d
    27c8:	41002000 	.word	0x41002000
    27cc:	00003175 	.word	0x00003175
    27d0:	000019df 	.word	0x000019df
    27d4:	00001a09 	.word	0x00001a09
    27d8:	00001ae9 	.word	0x00001ae9
    27dc:	00003251 	.word	0x00003251
    27e0:	00002989 	.word	0x00002989
    27e4:	00001c9d 	.word	0x00001c9d
    27e8:	200009c4 	.word	0x200009c4

000027ec <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    27ec:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    27ee:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    27f0:	2a00      	cmp	r2, #0
    27f2:	d101      	bne.n	27f8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    27f4:	0018      	movs	r0, r3
    27f6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    27f8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    27fa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    27fc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    27fe:	2a00      	cmp	r2, #0
    2800:	d1f8      	bne.n	27f4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2802:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2804:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2806:	2a00      	cmp	r2, #0
    2808:	d1fc      	bne.n	2804 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    280a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    280c:	2102      	movs	r1, #2
    280e:	7e1a      	ldrb	r2, [r3, #24]
    2810:	420a      	tst	r2, r1
    2812:	d0fc      	beq.n	280e <usart_write_wait+0x22>
	return STATUS_OK;
    2814:	2300      	movs	r3, #0
    2816:	e7ed      	b.n	27f4 <usart_write_wait+0x8>

00002818 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2818:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    281a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    281c:	2a00      	cmp	r2, #0
    281e:	d101      	bne.n	2824 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2820:	0018      	movs	r0, r3
    2822:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2824:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2826:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2828:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    282a:	2a00      	cmp	r2, #0
    282c:	d1f8      	bne.n	2820 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    282e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2830:	7e10      	ldrb	r0, [r2, #24]
    2832:	0740      	lsls	r0, r0, #29
    2834:	d5f4      	bpl.n	2820 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2836:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2838:	2b00      	cmp	r3, #0
    283a:	d1fc      	bne.n	2836 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    283c:	8b53      	ldrh	r3, [r2, #26]
    283e:	b2db      	uxtb	r3, r3
	if (error_code) {
    2840:	0698      	lsls	r0, r3, #26
    2842:	d01d      	beq.n	2880 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2844:	0798      	lsls	r0, r3, #30
    2846:	d503      	bpl.n	2850 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2848:	2302      	movs	r3, #2
    284a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    284c:	3318      	adds	r3, #24
    284e:	e7e7      	b.n	2820 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2850:	0758      	lsls	r0, r3, #29
    2852:	d503      	bpl.n	285c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2854:	2304      	movs	r3, #4
    2856:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2858:	331a      	adds	r3, #26
    285a:	e7e1      	b.n	2820 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    285c:	07d8      	lsls	r0, r3, #31
    285e:	d503      	bpl.n	2868 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2860:	2301      	movs	r3, #1
    2862:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2864:	3312      	adds	r3, #18
    2866:	e7db      	b.n	2820 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2868:	06d8      	lsls	r0, r3, #27
    286a:	d503      	bpl.n	2874 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    286c:	2310      	movs	r3, #16
    286e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2870:	3332      	adds	r3, #50	; 0x32
    2872:	e7d5      	b.n	2820 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2874:	069b      	lsls	r3, r3, #26
    2876:	d503      	bpl.n	2880 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2878:	2320      	movs	r3, #32
    287a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    287c:	3321      	adds	r3, #33	; 0x21
    287e:	e7cf      	b.n	2820 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2880:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2882:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2884:	2300      	movs	r3, #0
    2886:	e7cb      	b.n	2820 <usart_read_wait+0x8>

00002888 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    288a:	0006      	movs	r6, r0
    288c:	000c      	movs	r4, r1
    288e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2890:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2892:	4b0a      	ldr	r3, [pc, #40]	; (28bc <_usart_write_buffer+0x34>)
    2894:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2896:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2898:	b29b      	uxth	r3, r3
    289a:	2b00      	cmp	r3, #0
    289c:	d003      	beq.n	28a6 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    289e:	4b08      	ldr	r3, [pc, #32]	; (28c0 <_usart_write_buffer+0x38>)
    28a0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    28a2:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    28a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    28a6:	85f5      	strh	r5, [r6, #46]	; 0x2e
    28a8:	4b05      	ldr	r3, [pc, #20]	; (28c0 <_usart_write_buffer+0x38>)
    28aa:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    28ac:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    28ae:	2205      	movs	r2, #5
    28b0:	2333      	movs	r3, #51	; 0x33
    28b2:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    28b4:	3b32      	subs	r3, #50	; 0x32
    28b6:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    28b8:	2000      	movs	r0, #0
    28ba:	e7f3      	b.n	28a4 <_usart_write_buffer+0x1c>
    28bc:	000016b9 	.word	0x000016b9
    28c0:	000016f9 	.word	0x000016f9

000028c4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    28c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28c6:	0004      	movs	r4, r0
    28c8:	000d      	movs	r5, r1
    28ca:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    28cc:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    28ce:	4b0f      	ldr	r3, [pc, #60]	; (290c <_usart_read_buffer+0x48>)
    28d0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    28d2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    28d4:	b29b      	uxth	r3, r3
    28d6:	2b00      	cmp	r3, #0
    28d8:	d003      	beq.n	28e2 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    28da:	4b0d      	ldr	r3, [pc, #52]	; (2910 <_usart_read_buffer+0x4c>)
    28dc:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    28de:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    28e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    28e2:	85a6      	strh	r6, [r4, #44]	; 0x2c
    28e4:	4b0a      	ldr	r3, [pc, #40]	; (2910 <_usart_read_buffer+0x4c>)
    28e6:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    28e8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    28ea:	2205      	movs	r2, #5
    28ec:	2332      	movs	r3, #50	; 0x32
    28ee:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    28f0:	3b2e      	subs	r3, #46	; 0x2e
    28f2:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    28f4:	7a23      	ldrb	r3, [r4, #8]
    28f6:	2b00      	cmp	r3, #0
    28f8:	d001      	beq.n	28fe <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    28fa:	2320      	movs	r3, #32
    28fc:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    28fe:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2900:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2902:	2b00      	cmp	r3, #0
    2904:	d0ec      	beq.n	28e0 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2906:	2308      	movs	r3, #8
    2908:	75bb      	strb	r3, [r7, #22]
    290a:	e7e9      	b.n	28e0 <_usart_read_buffer+0x1c>
    290c:	000016b9 	.word	0x000016b9
    2910:	000016f9 	.word	0x000016f9

00002914 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2914:	1c93      	adds	r3, r2, #2
    2916:	009b      	lsls	r3, r3, #2
    2918:	18c3      	adds	r3, r0, r3
    291a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    291c:	2130      	movs	r1, #48	; 0x30
    291e:	2301      	movs	r3, #1
    2920:	4093      	lsls	r3, r2
    2922:	001a      	movs	r2, r3
    2924:	5c43      	ldrb	r3, [r0, r1]
    2926:	4313      	orrs	r3, r2
    2928:	5443      	strb	r3, [r0, r1]
}
    292a:	4770      	bx	lr

0000292c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    292c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    292e:	2317      	movs	r3, #23
	if (length == 0) {
    2930:	2a00      	cmp	r2, #0
    2932:	d101      	bne.n	2938 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2934:	0018      	movs	r0, r3
    2936:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2938:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    293a:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    293c:	2c00      	cmp	r4, #0
    293e:	d0f9      	beq.n	2934 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2940:	4b01      	ldr	r3, [pc, #4]	; (2948 <usart_write_buffer_job+0x1c>)
    2942:	4798      	blx	r3
    2944:	0003      	movs	r3, r0
    2946:	e7f5      	b.n	2934 <usart_write_buffer_job+0x8>
    2948:	00002889 	.word	0x00002889

0000294c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    294c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    294e:	2317      	movs	r3, #23
	if (length == 0) {
    2950:	2a00      	cmp	r2, #0
    2952:	d101      	bne.n	2958 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2954:	0018      	movs	r0, r3
    2956:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2958:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    295a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    295c:	2c00      	cmp	r4, #0
    295e:	d0f9      	beq.n	2954 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2960:	4b01      	ldr	r3, [pc, #4]	; (2968 <usart_read_buffer_job+0x1c>)
    2962:	4798      	blx	r3
    2964:	0003      	movs	r3, r0
    2966:	e7f5      	b.n	2954 <usart_read_buffer_job+0x8>
    2968:	000028c5 	.word	0x000028c5

0000296c <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    296c:	2900      	cmp	r1, #0
    296e:	d003      	beq.n	2978 <usart_get_job_status+0xc>
    2970:	2901      	cmp	r1, #1
    2972:	d005      	beq.n	2980 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2974:	2017      	movs	r0, #23
    2976:	e002      	b.n	297e <usart_get_job_status+0x12>
			status_code = module->rx_status;
    2978:	2332      	movs	r3, #50	; 0x32
    297a:	5cc0      	ldrb	r0, [r0, r3]
    297c:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    297e:	4770      	bx	lr
			status_code = module->tx_status;
    2980:	2333      	movs	r3, #51	; 0x33
    2982:	5cc0      	ldrb	r0, [r0, r3]
    2984:	b2c0      	uxtb	r0, r0
			break;
    2986:	e7fa      	b.n	297e <usart_get_job_status+0x12>

00002988 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    298a:	0080      	lsls	r0, r0, #2
    298c:	4b62      	ldr	r3, [pc, #392]	; (2b18 <_usart_interrupt_handler+0x190>)
    298e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2990:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2992:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2994:	2b00      	cmp	r3, #0
    2996:	d1fc      	bne.n	2992 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2998:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    299a:	7da6      	ldrb	r6, [r4, #22]
    299c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    299e:	2330      	movs	r3, #48	; 0x30
    29a0:	5ceb      	ldrb	r3, [r5, r3]
    29a2:	2231      	movs	r2, #49	; 0x31
    29a4:	5caf      	ldrb	r7, [r5, r2]
    29a6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    29a8:	07f3      	lsls	r3, r6, #31
    29aa:	d522      	bpl.n	29f2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    29ac:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    29ae:	b29b      	uxth	r3, r3
    29b0:	2b00      	cmp	r3, #0
    29b2:	d01c      	beq.n	29ee <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    29b4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    29b6:	7813      	ldrb	r3, [r2, #0]
    29b8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    29ba:	1c51      	adds	r1, r2, #1
    29bc:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    29be:	7969      	ldrb	r1, [r5, #5]
    29c0:	2901      	cmp	r1, #1
    29c2:	d00e      	beq.n	29e2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    29c4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    29c6:	05db      	lsls	r3, r3, #23
    29c8:	0ddb      	lsrs	r3, r3, #23
    29ca:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    29cc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    29ce:	3b01      	subs	r3, #1
    29d0:	b29b      	uxth	r3, r3
    29d2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    29d4:	2b00      	cmp	r3, #0
    29d6:	d10c      	bne.n	29f2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    29d8:	3301      	adds	r3, #1
    29da:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    29dc:	3301      	adds	r3, #1
    29de:	75a3      	strb	r3, [r4, #22]
    29e0:	e007      	b.n	29f2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    29e2:	7851      	ldrb	r1, [r2, #1]
    29e4:	0209      	lsls	r1, r1, #8
    29e6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    29e8:	3202      	adds	r2, #2
    29ea:	62aa      	str	r2, [r5, #40]	; 0x28
    29ec:	e7eb      	b.n	29c6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    29ee:	2301      	movs	r3, #1
    29f0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    29f2:	07b3      	lsls	r3, r6, #30
    29f4:	d506      	bpl.n	2a04 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    29f6:	2302      	movs	r3, #2
    29f8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    29fa:	2200      	movs	r2, #0
    29fc:	3331      	adds	r3, #49	; 0x31
    29fe:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2a00:	07fb      	lsls	r3, r7, #31
    2a02:	d41a      	bmi.n	2a3a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2a04:	0773      	lsls	r3, r6, #29
    2a06:	d565      	bpl.n	2ad4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2a08:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2a0a:	b29b      	uxth	r3, r3
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d05f      	beq.n	2ad0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a10:	8b63      	ldrh	r3, [r4, #26]
    2a12:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2a14:	071a      	lsls	r2, r3, #28
    2a16:	d414      	bmi.n	2a42 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a18:	223f      	movs	r2, #63	; 0x3f
    2a1a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d034      	beq.n	2a8a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2a20:	079a      	lsls	r2, r3, #30
    2a22:	d511      	bpl.n	2a48 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2a24:	221a      	movs	r2, #26
    2a26:	2332      	movs	r3, #50	; 0x32
    2a28:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2a2a:	3b30      	subs	r3, #48	; 0x30
    2a2c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2a2e:	077b      	lsls	r3, r7, #29
    2a30:	d550      	bpl.n	2ad4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2a32:	0028      	movs	r0, r5
    2a34:	696b      	ldr	r3, [r5, #20]
    2a36:	4798      	blx	r3
    2a38:	e04c      	b.n	2ad4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2a3a:	0028      	movs	r0, r5
    2a3c:	68eb      	ldr	r3, [r5, #12]
    2a3e:	4798      	blx	r3
    2a40:	e7e0      	b.n	2a04 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2a42:	2237      	movs	r2, #55	; 0x37
    2a44:	4013      	ands	r3, r2
    2a46:	e7e9      	b.n	2a1c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2a48:	075a      	lsls	r2, r3, #29
    2a4a:	d505      	bpl.n	2a58 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2a4c:	221e      	movs	r2, #30
    2a4e:	2332      	movs	r3, #50	; 0x32
    2a50:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2a52:	3b2e      	subs	r3, #46	; 0x2e
    2a54:	8363      	strh	r3, [r4, #26]
    2a56:	e7ea      	b.n	2a2e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2a58:	07da      	lsls	r2, r3, #31
    2a5a:	d505      	bpl.n	2a68 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2a5c:	2213      	movs	r2, #19
    2a5e:	2332      	movs	r3, #50	; 0x32
    2a60:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2a62:	3b31      	subs	r3, #49	; 0x31
    2a64:	8363      	strh	r3, [r4, #26]
    2a66:	e7e2      	b.n	2a2e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2a68:	06da      	lsls	r2, r3, #27
    2a6a:	d505      	bpl.n	2a78 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2a6c:	2242      	movs	r2, #66	; 0x42
    2a6e:	2332      	movs	r3, #50	; 0x32
    2a70:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2a72:	3b22      	subs	r3, #34	; 0x22
    2a74:	8363      	strh	r3, [r4, #26]
    2a76:	e7da      	b.n	2a2e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2a78:	2220      	movs	r2, #32
    2a7a:	421a      	tst	r2, r3
    2a7c:	d0d7      	beq.n	2a2e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2a7e:	3221      	adds	r2, #33	; 0x21
    2a80:	2332      	movs	r3, #50	; 0x32
    2a82:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2a84:	3b12      	subs	r3, #18
    2a86:	8363      	strh	r3, [r4, #26]
    2a88:	e7d1      	b.n	2a2e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2a8a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2a8c:	05db      	lsls	r3, r3, #23
    2a8e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2a90:	b2da      	uxtb	r2, r3
    2a92:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2a94:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2a96:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2a98:	1c51      	adds	r1, r2, #1
    2a9a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2a9c:	7969      	ldrb	r1, [r5, #5]
    2a9e:	2901      	cmp	r1, #1
    2aa0:	d010      	beq.n	2ac4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2aa2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2aa4:	3b01      	subs	r3, #1
    2aa6:	b29b      	uxth	r3, r3
    2aa8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2aaa:	2b00      	cmp	r3, #0
    2aac:	d112      	bne.n	2ad4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2aae:	3304      	adds	r3, #4
    2ab0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2ab2:	2200      	movs	r2, #0
    2ab4:	332e      	adds	r3, #46	; 0x2e
    2ab6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2ab8:	07bb      	lsls	r3, r7, #30
    2aba:	d50b      	bpl.n	2ad4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2abc:	0028      	movs	r0, r5
    2abe:	692b      	ldr	r3, [r5, #16]
    2ac0:	4798      	blx	r3
    2ac2:	e007      	b.n	2ad4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2ac4:	0a1b      	lsrs	r3, r3, #8
    2ac6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2ac8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2aca:	3301      	adds	r3, #1
    2acc:	626b      	str	r3, [r5, #36]	; 0x24
    2ace:	e7e8      	b.n	2aa2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2ad0:	2304      	movs	r3, #4
    2ad2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2ad4:	06f3      	lsls	r3, r6, #27
    2ad6:	d504      	bpl.n	2ae2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2ad8:	2310      	movs	r3, #16
    2ada:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2adc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2ade:	06fb      	lsls	r3, r7, #27
    2ae0:	d40e      	bmi.n	2b00 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2ae2:	06b3      	lsls	r3, r6, #26
    2ae4:	d504      	bpl.n	2af0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2ae6:	2320      	movs	r3, #32
    2ae8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2aea:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2aec:	073b      	lsls	r3, r7, #28
    2aee:	d40b      	bmi.n	2b08 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2af0:	0733      	lsls	r3, r6, #28
    2af2:	d504      	bpl.n	2afe <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2af4:	2308      	movs	r3, #8
    2af6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2af8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2afa:	06bb      	lsls	r3, r7, #26
    2afc:	d408      	bmi.n	2b10 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2b00:	0028      	movs	r0, r5
    2b02:	69eb      	ldr	r3, [r5, #28]
    2b04:	4798      	blx	r3
    2b06:	e7ec      	b.n	2ae2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2b08:	0028      	movs	r0, r5
    2b0a:	69ab      	ldr	r3, [r5, #24]
    2b0c:	4798      	blx	r3
    2b0e:	e7ef      	b.n	2af0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2b10:	6a2b      	ldr	r3, [r5, #32]
    2b12:	0028      	movs	r0, r5
    2b14:	4798      	blx	r3
}
    2b16:	e7f2      	b.n	2afe <_usart_interrupt_handler+0x176>
    2b18:	200009c4 	.word	0x200009c4

00002b1c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2b1c:	b510      	push	{r4, lr}
	switch (clock_source) {
    2b1e:	2808      	cmp	r0, #8
    2b20:	d803      	bhi.n	2b2a <system_clock_source_get_hz+0xe>
    2b22:	0080      	lsls	r0, r0, #2
    2b24:	4b1c      	ldr	r3, [pc, #112]	; (2b98 <system_clock_source_get_hz+0x7c>)
    2b26:	581b      	ldr	r3, [r3, r0]
    2b28:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2b2a:	2000      	movs	r0, #0
    2b2c:	e032      	b.n	2b94 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2b2e:	4b1b      	ldr	r3, [pc, #108]	; (2b9c <system_clock_source_get_hz+0x80>)
    2b30:	6918      	ldr	r0, [r3, #16]
    2b32:	e02f      	b.n	2b94 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2b34:	4b1a      	ldr	r3, [pc, #104]	; (2ba0 <system_clock_source_get_hz+0x84>)
    2b36:	6a1b      	ldr	r3, [r3, #32]
    2b38:	059b      	lsls	r3, r3, #22
    2b3a:	0f9b      	lsrs	r3, r3, #30
    2b3c:	4819      	ldr	r0, [pc, #100]	; (2ba4 <system_clock_source_get_hz+0x88>)
    2b3e:	40d8      	lsrs	r0, r3
    2b40:	e028      	b.n	2b94 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2b42:	4b16      	ldr	r3, [pc, #88]	; (2b9c <system_clock_source_get_hz+0x80>)
    2b44:	6958      	ldr	r0, [r3, #20]
    2b46:	e025      	b.n	2b94 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2b48:	4b14      	ldr	r3, [pc, #80]	; (2b9c <system_clock_source_get_hz+0x80>)
    2b4a:	681b      	ldr	r3, [r3, #0]
			return 0;
    2b4c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2b4e:	079b      	lsls	r3, r3, #30
    2b50:	d520      	bpl.n	2b94 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2b52:	4913      	ldr	r1, [pc, #76]	; (2ba0 <system_clock_source_get_hz+0x84>)
    2b54:	2210      	movs	r2, #16
    2b56:	68cb      	ldr	r3, [r1, #12]
    2b58:	421a      	tst	r2, r3
    2b5a:	d0fc      	beq.n	2b56 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2b5c:	4b0f      	ldr	r3, [pc, #60]	; (2b9c <system_clock_source_get_hz+0x80>)
    2b5e:	681a      	ldr	r2, [r3, #0]
    2b60:	2324      	movs	r3, #36	; 0x24
    2b62:	4013      	ands	r3, r2
    2b64:	2b04      	cmp	r3, #4
    2b66:	d001      	beq.n	2b6c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2b68:	480f      	ldr	r0, [pc, #60]	; (2ba8 <system_clock_source_get_hz+0x8c>)
    2b6a:	e013      	b.n	2b94 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2b6c:	2000      	movs	r0, #0
    2b6e:	4b0f      	ldr	r3, [pc, #60]	; (2bac <system_clock_source_get_hz+0x90>)
    2b70:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2b72:	4b0a      	ldr	r3, [pc, #40]	; (2b9c <system_clock_source_get_hz+0x80>)
    2b74:	689b      	ldr	r3, [r3, #8]
    2b76:	041b      	lsls	r3, r3, #16
    2b78:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2b7a:	4358      	muls	r0, r3
    2b7c:	e00a      	b.n	2b94 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2b7e:	2350      	movs	r3, #80	; 0x50
    2b80:	4a07      	ldr	r2, [pc, #28]	; (2ba0 <system_clock_source_get_hz+0x84>)
    2b82:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2b84:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2b86:	075b      	lsls	r3, r3, #29
    2b88:	d504      	bpl.n	2b94 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2b8a:	4b04      	ldr	r3, [pc, #16]	; (2b9c <system_clock_source_get_hz+0x80>)
    2b8c:	68d8      	ldr	r0, [r3, #12]
    2b8e:	e001      	b.n	2b94 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2b90:	2080      	movs	r0, #128	; 0x80
    2b92:	0200      	lsls	r0, r0, #8
	}
}
    2b94:	bd10      	pop	{r4, pc}
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	00005db4 	.word	0x00005db4
    2b9c:	20000134 	.word	0x20000134
    2ba0:	40000800 	.word	0x40000800
    2ba4:	007a1200 	.word	0x007a1200
    2ba8:	02dc6c00 	.word	0x02dc6c00
    2bac:	00003175 	.word	0x00003175

00002bb0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2bb0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2bb2:	490c      	ldr	r1, [pc, #48]	; (2be4 <system_clock_source_osc8m_set_config+0x34>)
    2bb4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2bb6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2bb8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2bba:	7840      	ldrb	r0, [r0, #1]
    2bbc:	2201      	movs	r2, #1
    2bbe:	4010      	ands	r0, r2
    2bc0:	0180      	lsls	r0, r0, #6
    2bc2:	2640      	movs	r6, #64	; 0x40
    2bc4:	43b3      	bics	r3, r6
    2bc6:	4303      	orrs	r3, r0
    2bc8:	402a      	ands	r2, r5
    2bca:	01d2      	lsls	r2, r2, #7
    2bcc:	2080      	movs	r0, #128	; 0x80
    2bce:	4383      	bics	r3, r0
    2bd0:	4313      	orrs	r3, r2
    2bd2:	2203      	movs	r2, #3
    2bd4:	4022      	ands	r2, r4
    2bd6:	0212      	lsls	r2, r2, #8
    2bd8:	4803      	ldr	r0, [pc, #12]	; (2be8 <system_clock_source_osc8m_set_config+0x38>)
    2bda:	4003      	ands	r3, r0
    2bdc:	4313      	orrs	r3, r2
    2bde:	620b      	str	r3, [r1, #32]
}
    2be0:	bd70      	pop	{r4, r5, r6, pc}
    2be2:	46c0      	nop			; (mov r8, r8)
    2be4:	40000800 	.word	0x40000800
    2be8:	fffffcff 	.word	0xfffffcff

00002bec <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bee:	46de      	mov	lr, fp
    2bf0:	4657      	mov	r7, sl
    2bf2:	464e      	mov	r6, r9
    2bf4:	4645      	mov	r5, r8
    2bf6:	b5e0      	push	{r5, r6, r7, lr}
    2bf8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2bfa:	4b26      	ldr	r3, [pc, #152]	; (2c94 <system_clock_source_xosc32k_set_config+0xa8>)
    2bfc:	469b      	mov	fp, r3
    2bfe:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2c00:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2c02:	7800      	ldrb	r0, [r0, #0]
    2c04:	4242      	negs	r2, r0
    2c06:	4142      	adcs	r2, r0
    2c08:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2c0a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2c0c:	78ca      	ldrb	r2, [r1, #3]
    2c0e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2c10:	790a      	ldrb	r2, [r1, #4]
    2c12:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2c14:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2c16:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2c18:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2c1a:	688a      	ldr	r2, [r1, #8]
    2c1c:	491e      	ldr	r1, [pc, #120]	; (2c98 <system_clock_source_xosc32k_set_config+0xac>)
    2c1e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2c20:	2101      	movs	r1, #1
    2c22:	464a      	mov	r2, r9
    2c24:	0092      	lsls	r2, r2, #2
    2c26:	4691      	mov	r9, r2
    2c28:	2204      	movs	r2, #4
    2c2a:	4393      	bics	r3, r2
    2c2c:	464a      	mov	r2, r9
    2c2e:	4313      	orrs	r3, r2
    2c30:	4642      	mov	r2, r8
    2c32:	400a      	ands	r2, r1
    2c34:	00d2      	lsls	r2, r2, #3
    2c36:	4690      	mov	r8, r2
    2c38:	2208      	movs	r2, #8
    2c3a:	4393      	bics	r3, r2
    2c3c:	4642      	mov	r2, r8
    2c3e:	4313      	orrs	r3, r2
    2c40:	4662      	mov	r2, ip
    2c42:	400a      	ands	r2, r1
    2c44:	0112      	lsls	r2, r2, #4
    2c46:	4694      	mov	ip, r2
    2c48:	2210      	movs	r2, #16
    2c4a:	4393      	bics	r3, r2
    2c4c:	4662      	mov	r2, ip
    2c4e:	4313      	orrs	r3, r2
    2c50:	4008      	ands	r0, r1
    2c52:	0140      	lsls	r0, r0, #5
    2c54:	2220      	movs	r2, #32
    2c56:	4393      	bics	r3, r2
    2c58:	4303      	orrs	r3, r0
    2c5a:	400f      	ands	r7, r1
    2c5c:	01bf      	lsls	r7, r7, #6
    2c5e:	2040      	movs	r0, #64	; 0x40
    2c60:	4383      	bics	r3, r0
    2c62:	433b      	orrs	r3, r7
    2c64:	400e      	ands	r6, r1
    2c66:	01f6      	lsls	r6, r6, #7
    2c68:	3040      	adds	r0, #64	; 0x40
    2c6a:	4383      	bics	r3, r0
    2c6c:	4333      	orrs	r3, r6
    2c6e:	3879      	subs	r0, #121	; 0x79
    2c70:	4005      	ands	r5, r0
    2c72:	022d      	lsls	r5, r5, #8
    2c74:	4809      	ldr	r0, [pc, #36]	; (2c9c <system_clock_source_xosc32k_set_config+0xb0>)
    2c76:	4003      	ands	r3, r0
    2c78:	432b      	orrs	r3, r5
    2c7a:	4021      	ands	r1, r4
    2c7c:	0309      	lsls	r1, r1, #12
    2c7e:	4808      	ldr	r0, [pc, #32]	; (2ca0 <system_clock_source_xosc32k_set_config+0xb4>)
    2c80:	4003      	ands	r3, r0
    2c82:	430b      	orrs	r3, r1
    2c84:	465a      	mov	r2, fp
    2c86:	8293      	strh	r3, [r2, #20]
}
    2c88:	bc3c      	pop	{r2, r3, r4, r5}
    2c8a:	4690      	mov	r8, r2
    2c8c:	4699      	mov	r9, r3
    2c8e:	46a2      	mov	sl, r4
    2c90:	46ab      	mov	fp, r5
    2c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c94:	40000800 	.word	0x40000800
    2c98:	20000134 	.word	0x20000134
    2c9c:	fffff8ff 	.word	0xfffff8ff
    2ca0:	ffffefff 	.word	0xffffefff

00002ca4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2ca4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2ca6:	7a03      	ldrb	r3, [r0, #8]
    2ca8:	069b      	lsls	r3, r3, #26
    2caa:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2cac:	8942      	ldrh	r2, [r0, #10]
    2cae:	0592      	lsls	r2, r2, #22
    2cb0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2cb2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2cb4:	4918      	ldr	r1, [pc, #96]	; (2d18 <system_clock_source_dfll_set_config+0x74>)
    2cb6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2cb8:	7983      	ldrb	r3, [r0, #6]
    2cba:	79c2      	ldrb	r2, [r0, #7]
    2cbc:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2cbe:	8842      	ldrh	r2, [r0, #2]
    2cc0:	8884      	ldrh	r4, [r0, #4]
    2cc2:	4322      	orrs	r2, r4
    2cc4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2cc6:	7842      	ldrb	r2, [r0, #1]
    2cc8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2cca:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2ccc:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2cce:	7803      	ldrb	r3, [r0, #0]
    2cd0:	2b04      	cmp	r3, #4
    2cd2:	d011      	beq.n	2cf8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2cd4:	2b20      	cmp	r3, #32
    2cd6:	d10e      	bne.n	2cf6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2cd8:	7b03      	ldrb	r3, [r0, #12]
    2cda:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2cdc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2cde:	4313      	orrs	r3, r2
    2ce0:	89c2      	ldrh	r2, [r0, #14]
    2ce2:	0412      	lsls	r2, r2, #16
    2ce4:	490d      	ldr	r1, [pc, #52]	; (2d1c <system_clock_source_dfll_set_config+0x78>)
    2ce6:	400a      	ands	r2, r1
    2ce8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2cea:	4a0b      	ldr	r2, [pc, #44]	; (2d18 <system_clock_source_dfll_set_config+0x74>)
    2cec:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2cee:	6811      	ldr	r1, [r2, #0]
    2cf0:	4b0b      	ldr	r3, [pc, #44]	; (2d20 <system_clock_source_dfll_set_config+0x7c>)
    2cf2:	430b      	orrs	r3, r1
    2cf4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2cf6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2cf8:	7b03      	ldrb	r3, [r0, #12]
    2cfa:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2cfc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2cfe:	4313      	orrs	r3, r2
    2d00:	89c2      	ldrh	r2, [r0, #14]
    2d02:	0412      	lsls	r2, r2, #16
    2d04:	4905      	ldr	r1, [pc, #20]	; (2d1c <system_clock_source_dfll_set_config+0x78>)
    2d06:	400a      	ands	r2, r1
    2d08:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2d0a:	4a03      	ldr	r2, [pc, #12]	; (2d18 <system_clock_source_dfll_set_config+0x74>)
    2d0c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2d0e:	6813      	ldr	r3, [r2, #0]
    2d10:	2104      	movs	r1, #4
    2d12:	430b      	orrs	r3, r1
    2d14:	6013      	str	r3, [r2, #0]
    2d16:	e7ee      	b.n	2cf6 <system_clock_source_dfll_set_config+0x52>
    2d18:	20000134 	.word	0x20000134
    2d1c:	03ff0000 	.word	0x03ff0000
    2d20:	00000424 	.word	0x00000424

00002d24 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2d24:	2808      	cmp	r0, #8
    2d26:	d803      	bhi.n	2d30 <system_clock_source_enable+0xc>
    2d28:	0080      	lsls	r0, r0, #2
    2d2a:	4b25      	ldr	r3, [pc, #148]	; (2dc0 <system_clock_source_enable+0x9c>)
    2d2c:	581b      	ldr	r3, [r3, r0]
    2d2e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2d30:	2017      	movs	r0, #23
    2d32:	e044      	b.n	2dbe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2d34:	4a23      	ldr	r2, [pc, #140]	; (2dc4 <system_clock_source_enable+0xa0>)
    2d36:	6a13      	ldr	r3, [r2, #32]
    2d38:	2102      	movs	r1, #2
    2d3a:	430b      	orrs	r3, r1
    2d3c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2d3e:	2000      	movs	r0, #0
    2d40:	e03d      	b.n	2dbe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2d42:	4a20      	ldr	r2, [pc, #128]	; (2dc4 <system_clock_source_enable+0xa0>)
    2d44:	6993      	ldr	r3, [r2, #24]
    2d46:	2102      	movs	r1, #2
    2d48:	430b      	orrs	r3, r1
    2d4a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2d4c:	2000      	movs	r0, #0
		break;
    2d4e:	e036      	b.n	2dbe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2d50:	4a1c      	ldr	r2, [pc, #112]	; (2dc4 <system_clock_source_enable+0xa0>)
    2d52:	8a13      	ldrh	r3, [r2, #16]
    2d54:	2102      	movs	r1, #2
    2d56:	430b      	orrs	r3, r1
    2d58:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2d5a:	2000      	movs	r0, #0
		break;
    2d5c:	e02f      	b.n	2dbe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2d5e:	4a19      	ldr	r2, [pc, #100]	; (2dc4 <system_clock_source_enable+0xa0>)
    2d60:	8a93      	ldrh	r3, [r2, #20]
    2d62:	2102      	movs	r1, #2
    2d64:	430b      	orrs	r3, r1
    2d66:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2d68:	2000      	movs	r0, #0
		break;
    2d6a:	e028      	b.n	2dbe <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2d6c:	4916      	ldr	r1, [pc, #88]	; (2dc8 <system_clock_source_enable+0xa4>)
    2d6e:	680b      	ldr	r3, [r1, #0]
    2d70:	2202      	movs	r2, #2
    2d72:	4313      	orrs	r3, r2
    2d74:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2d76:	4b13      	ldr	r3, [pc, #76]	; (2dc4 <system_clock_source_enable+0xa0>)
    2d78:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2d7a:	0019      	movs	r1, r3
    2d7c:	320e      	adds	r2, #14
    2d7e:	68cb      	ldr	r3, [r1, #12]
    2d80:	421a      	tst	r2, r3
    2d82:	d0fc      	beq.n	2d7e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2d84:	4a10      	ldr	r2, [pc, #64]	; (2dc8 <system_clock_source_enable+0xa4>)
    2d86:	6891      	ldr	r1, [r2, #8]
    2d88:	4b0e      	ldr	r3, [pc, #56]	; (2dc4 <system_clock_source_enable+0xa0>)
    2d8a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2d8c:	6852      	ldr	r2, [r2, #4]
    2d8e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2d90:	2200      	movs	r2, #0
    2d92:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2d94:	0019      	movs	r1, r3
    2d96:	3210      	adds	r2, #16
    2d98:	68cb      	ldr	r3, [r1, #12]
    2d9a:	421a      	tst	r2, r3
    2d9c:	d0fc      	beq.n	2d98 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2d9e:	4b0a      	ldr	r3, [pc, #40]	; (2dc8 <system_clock_source_enable+0xa4>)
    2da0:	681b      	ldr	r3, [r3, #0]
    2da2:	b29b      	uxth	r3, r3
    2da4:	4a07      	ldr	r2, [pc, #28]	; (2dc4 <system_clock_source_enable+0xa0>)
    2da6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2da8:	2000      	movs	r0, #0
    2daa:	e008      	b.n	2dbe <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2dac:	4905      	ldr	r1, [pc, #20]	; (2dc4 <system_clock_source_enable+0xa0>)
    2dae:	2244      	movs	r2, #68	; 0x44
    2db0:	5c8b      	ldrb	r3, [r1, r2]
    2db2:	2002      	movs	r0, #2
    2db4:	4303      	orrs	r3, r0
    2db6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2db8:	2000      	movs	r0, #0
		break;
    2dba:	e000      	b.n	2dbe <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2dbc:	2000      	movs	r0, #0
}
    2dbe:	4770      	bx	lr
    2dc0:	00005dd8 	.word	0x00005dd8
    2dc4:	40000800 	.word	0x40000800
    2dc8:	20000134 	.word	0x20000134

00002dcc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dce:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2dd0:	22c2      	movs	r2, #194	; 0xc2
    2dd2:	00d2      	lsls	r2, r2, #3
    2dd4:	4b45      	ldr	r3, [pc, #276]	; (2eec <system_clock_init+0x120>)
    2dd6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2dd8:	4a45      	ldr	r2, [pc, #276]	; (2ef0 <system_clock_init+0x124>)
    2dda:	6853      	ldr	r3, [r2, #4]
    2ddc:	211e      	movs	r1, #30
    2dde:	438b      	bics	r3, r1
    2de0:	391a      	subs	r1, #26
    2de2:	430b      	orrs	r3, r1
    2de4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2de6:	2202      	movs	r2, #2
    2de8:	ab01      	add	r3, sp, #4
    2dea:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2dec:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2dee:	4d41      	ldr	r5, [pc, #260]	; (2ef4 <system_clock_init+0x128>)
    2df0:	b2e0      	uxtb	r0, r4
    2df2:	a901      	add	r1, sp, #4
    2df4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2df6:	3401      	adds	r4, #1
    2df8:	2c25      	cmp	r4, #37	; 0x25
    2dfa:	d1f9      	bne.n	2df0 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2dfc:	a80a      	add	r0, sp, #40	; 0x28
    2dfe:	2300      	movs	r3, #0
    2e00:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2e02:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2e04:	2280      	movs	r2, #128	; 0x80
    2e06:	0212      	lsls	r2, r2, #8
    2e08:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2e0a:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2e0c:	2201      	movs	r2, #1
    2e0e:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    2e10:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2e12:	2106      	movs	r1, #6
    2e14:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2e16:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    2e18:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2e1a:	4b37      	ldr	r3, [pc, #220]	; (2ef8 <system_clock_init+0x12c>)
    2e1c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2e1e:	2005      	movs	r0, #5
    2e20:	4b36      	ldr	r3, [pc, #216]	; (2efc <system_clock_init+0x130>)
    2e22:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2e24:	4931      	ldr	r1, [pc, #196]	; (2eec <system_clock_init+0x120>)
    2e26:	2202      	movs	r2, #2
    2e28:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2e2a:	421a      	tst	r2, r3
    2e2c:	d0fc      	beq.n	2e28 <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2e2e:	ab05      	add	r3, sp, #20
    2e30:	2100      	movs	r1, #0
    2e32:	2200      	movs	r2, #0
    2e34:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2e36:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2e38:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2e3a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2e3c:	313f      	adds	r1, #63	; 0x3f
    2e3e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2e40:	393b      	subs	r1, #59	; 0x3b
    2e42:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2e44:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2e46:	4b2e      	ldr	r3, [pc, #184]	; (2f00 <system_clock_init+0x134>)
    2e48:	681b      	ldr	r3, [r3, #0]
    2e4a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2e4c:	2b3f      	cmp	r3, #63	; 0x3f
    2e4e:	d04b      	beq.n	2ee8 <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2e50:	a805      	add	r0, sp, #20
    2e52:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2e54:	23b7      	movs	r3, #183	; 0xb7
    2e56:	00db      	lsls	r3, r3, #3
    2e58:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2e5a:	2303      	movs	r3, #3
    2e5c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2e5e:	331c      	adds	r3, #28
    2e60:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2e62:	4b28      	ldr	r3, [pc, #160]	; (2f04 <system_clock_init+0x138>)
    2e64:	4798      	blx	r3
	config->on_demand       = true;
    2e66:	a804      	add	r0, sp, #16
    2e68:	2501      	movs	r5, #1
    2e6a:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2e6c:	2600      	movs	r6, #0
    2e6e:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2e70:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2e72:	4b25      	ldr	r3, [pc, #148]	; (2f08 <system_clock_init+0x13c>)
    2e74:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2e76:	2006      	movs	r0, #6
    2e78:	4f20      	ldr	r7, [pc, #128]	; (2efc <system_clock_init+0x130>)
    2e7a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2e7c:	4b23      	ldr	r3, [pc, #140]	; (2f0c <system_clock_init+0x140>)
    2e7e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2e80:	ac01      	add	r4, sp, #4
    2e82:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    2e84:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2e86:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    2e88:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2e8a:	2305      	movs	r3, #5
    2e8c:	7023      	strb	r3, [r4, #0]
    2e8e:	0021      	movs	r1, r4
    2e90:	2001      	movs	r0, #1
    2e92:	4b1f      	ldr	r3, [pc, #124]	; (2f10 <system_clock_init+0x144>)
    2e94:	4798      	blx	r3
    2e96:	2001      	movs	r0, #1
    2e98:	4b1e      	ldr	r3, [pc, #120]	; (2f14 <system_clock_init+0x148>)
    2e9a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2e9c:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2e9e:	0021      	movs	r1, r4
    2ea0:	2000      	movs	r0, #0
    2ea2:	4b14      	ldr	r3, [pc, #80]	; (2ef4 <system_clock_init+0x128>)
    2ea4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2ea6:	2000      	movs	r0, #0
    2ea8:	4b1b      	ldr	r3, [pc, #108]	; (2f18 <system_clock_init+0x14c>)
    2eaa:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2eac:	2007      	movs	r0, #7
    2eae:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2eb0:	490e      	ldr	r1, [pc, #56]	; (2eec <system_clock_init+0x120>)
    2eb2:	22d0      	movs	r2, #208	; 0xd0
    2eb4:	68cb      	ldr	r3, [r1, #12]
    2eb6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2eb8:	2bd0      	cmp	r3, #208	; 0xd0
    2eba:	d1fb      	bne.n	2eb4 <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    2ebc:	4a17      	ldr	r2, [pc, #92]	; (2f1c <system_clock_init+0x150>)
    2ebe:	2300      	movs	r3, #0
    2ec0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2ec2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2ec4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2ec6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2ec8:	a901      	add	r1, sp, #4
    2eca:	2201      	movs	r2, #1
    2ecc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2ece:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    2ed0:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2ed2:	3307      	adds	r3, #7
    2ed4:	700b      	strb	r3, [r1, #0]
    2ed6:	720a      	strb	r2, [r1, #8]
    2ed8:	2000      	movs	r0, #0
    2eda:	4b0d      	ldr	r3, [pc, #52]	; (2f10 <system_clock_init+0x144>)
    2edc:	4798      	blx	r3
    2ede:	2000      	movs	r0, #0
    2ee0:	4b0c      	ldr	r3, [pc, #48]	; (2f14 <system_clock_init+0x148>)
    2ee2:	4798      	blx	r3
#endif
}
    2ee4:	b00f      	add	sp, #60	; 0x3c
    2ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2ee8:	3b20      	subs	r3, #32
    2eea:	e7b1      	b.n	2e50 <system_clock_init+0x84>
    2eec:	40000800 	.word	0x40000800
    2ef0:	41004000 	.word	0x41004000
    2ef4:	00003159 	.word	0x00003159
    2ef8:	00002bed 	.word	0x00002bed
    2efc:	00002d25 	.word	0x00002d25
    2f00:	00806024 	.word	0x00806024
    2f04:	00002ca5 	.word	0x00002ca5
    2f08:	00002bb1 	.word	0x00002bb1
    2f0c:	00002f21 	.word	0x00002f21
    2f10:	00002f45 	.word	0x00002f45
    2f14:	00002ffd 	.word	0x00002ffd
    2f18:	000030cd 	.word	0x000030cd
    2f1c:	40000400 	.word	0x40000400

00002f20 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2f20:	4a06      	ldr	r2, [pc, #24]	; (2f3c <system_gclk_init+0x1c>)
    2f22:	6993      	ldr	r3, [r2, #24]
    2f24:	2108      	movs	r1, #8
    2f26:	430b      	orrs	r3, r1
    2f28:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2f2a:	2201      	movs	r2, #1
    2f2c:	4b04      	ldr	r3, [pc, #16]	; (2f40 <system_gclk_init+0x20>)
    2f2e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2f30:	0019      	movs	r1, r3
    2f32:	780b      	ldrb	r3, [r1, #0]
    2f34:	4213      	tst	r3, r2
    2f36:	d1fc      	bne.n	2f32 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2f38:	4770      	bx	lr
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	40000400 	.word	0x40000400
    2f40:	40000c00 	.word	0x40000c00

00002f44 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2f44:	b570      	push	{r4, r5, r6, lr}
    2f46:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2f48:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2f4a:	780d      	ldrb	r5, [r1, #0]
    2f4c:	022d      	lsls	r5, r5, #8
    2f4e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2f50:	784b      	ldrb	r3, [r1, #1]
    2f52:	2b00      	cmp	r3, #0
    2f54:	d002      	beq.n	2f5c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2f56:	2380      	movs	r3, #128	; 0x80
    2f58:	02db      	lsls	r3, r3, #11
    2f5a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2f5c:	7a4b      	ldrb	r3, [r1, #9]
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d002      	beq.n	2f68 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2f62:	2380      	movs	r3, #128	; 0x80
    2f64:	031b      	lsls	r3, r3, #12
    2f66:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2f68:	6848      	ldr	r0, [r1, #4]
    2f6a:	2801      	cmp	r0, #1
    2f6c:	d910      	bls.n	2f90 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2f6e:	1e43      	subs	r3, r0, #1
    2f70:	4218      	tst	r0, r3
    2f72:	d134      	bne.n	2fde <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2f74:	2802      	cmp	r0, #2
    2f76:	d930      	bls.n	2fda <system_gclk_gen_set_config+0x96>
    2f78:	2302      	movs	r3, #2
    2f7a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2f7c:	3201      	adds	r2, #1
						mask <<= 1) {
    2f7e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2f80:	4298      	cmp	r0, r3
    2f82:	d8fb      	bhi.n	2f7c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2f84:	0212      	lsls	r2, r2, #8
    2f86:	4332      	orrs	r2, r6
    2f88:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2f8a:	2380      	movs	r3, #128	; 0x80
    2f8c:	035b      	lsls	r3, r3, #13
    2f8e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2f90:	7a0b      	ldrb	r3, [r1, #8]
    2f92:	2b00      	cmp	r3, #0
    2f94:	d002      	beq.n	2f9c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2f96:	2380      	movs	r3, #128	; 0x80
    2f98:	039b      	lsls	r3, r3, #14
    2f9a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2f9c:	4a13      	ldr	r2, [pc, #76]	; (2fec <system_gclk_gen_set_config+0xa8>)
    2f9e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2fa0:	b25b      	sxtb	r3, r3
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	dbfb      	blt.n	2f9e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2fa6:	4b12      	ldr	r3, [pc, #72]	; (2ff0 <system_gclk_gen_set_config+0xac>)
    2fa8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2faa:	4b12      	ldr	r3, [pc, #72]	; (2ff4 <system_gclk_gen_set_config+0xb0>)
    2fac:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2fae:	4a0f      	ldr	r2, [pc, #60]	; (2fec <system_gclk_gen_set_config+0xa8>)
    2fb0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2fb2:	b25b      	sxtb	r3, r3
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	dbfb      	blt.n	2fb0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2fb8:	4b0c      	ldr	r3, [pc, #48]	; (2fec <system_gclk_gen_set_config+0xa8>)
    2fba:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2fbc:	001a      	movs	r2, r3
    2fbe:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2fc0:	b25b      	sxtb	r3, r3
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	dbfb      	blt.n	2fbe <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2fc6:	4a09      	ldr	r2, [pc, #36]	; (2fec <system_gclk_gen_set_config+0xa8>)
    2fc8:	6853      	ldr	r3, [r2, #4]
    2fca:	2180      	movs	r1, #128	; 0x80
    2fcc:	0249      	lsls	r1, r1, #9
    2fce:	400b      	ands	r3, r1
    2fd0:	431d      	orrs	r5, r3
    2fd2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2fd4:	4b08      	ldr	r3, [pc, #32]	; (2ff8 <system_gclk_gen_set_config+0xb4>)
    2fd6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2fd8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2fda:	2200      	movs	r2, #0
    2fdc:	e7d2      	b.n	2f84 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2fde:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2fe0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2fe2:	2380      	movs	r3, #128	; 0x80
    2fe4:	029b      	lsls	r3, r3, #10
    2fe6:	431d      	orrs	r5, r3
    2fe8:	e7d2      	b.n	2f90 <system_gclk_gen_set_config+0x4c>
    2fea:	46c0      	nop			; (mov r8, r8)
    2fec:	40000c00 	.word	0x40000c00
    2ff0:	000016b9 	.word	0x000016b9
    2ff4:	40000c08 	.word	0x40000c08
    2ff8:	000016f9 	.word	0x000016f9

00002ffc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2ffc:	b510      	push	{r4, lr}
    2ffe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3000:	4a0b      	ldr	r2, [pc, #44]	; (3030 <system_gclk_gen_enable+0x34>)
    3002:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3004:	b25b      	sxtb	r3, r3
    3006:	2b00      	cmp	r3, #0
    3008:	dbfb      	blt.n	3002 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    300a:	4b0a      	ldr	r3, [pc, #40]	; (3034 <system_gclk_gen_enable+0x38>)
    300c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    300e:	4b0a      	ldr	r3, [pc, #40]	; (3038 <system_gclk_gen_enable+0x3c>)
    3010:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3012:	4a07      	ldr	r2, [pc, #28]	; (3030 <system_gclk_gen_enable+0x34>)
    3014:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3016:	b25b      	sxtb	r3, r3
    3018:	2b00      	cmp	r3, #0
    301a:	dbfb      	blt.n	3014 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    301c:	4a04      	ldr	r2, [pc, #16]	; (3030 <system_gclk_gen_enable+0x34>)
    301e:	6851      	ldr	r1, [r2, #4]
    3020:	2380      	movs	r3, #128	; 0x80
    3022:	025b      	lsls	r3, r3, #9
    3024:	430b      	orrs	r3, r1
    3026:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3028:	4b04      	ldr	r3, [pc, #16]	; (303c <system_gclk_gen_enable+0x40>)
    302a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    302c:	bd10      	pop	{r4, pc}
    302e:	46c0      	nop			; (mov r8, r8)
    3030:	40000c00 	.word	0x40000c00
    3034:	000016b9 	.word	0x000016b9
    3038:	40000c04 	.word	0x40000c04
    303c:	000016f9 	.word	0x000016f9

00003040 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3040:	b570      	push	{r4, r5, r6, lr}
    3042:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3044:	4a1a      	ldr	r2, [pc, #104]	; (30b0 <system_gclk_gen_get_hz+0x70>)
    3046:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3048:	b25b      	sxtb	r3, r3
    304a:	2b00      	cmp	r3, #0
    304c:	dbfb      	blt.n	3046 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    304e:	4b19      	ldr	r3, [pc, #100]	; (30b4 <system_gclk_gen_get_hz+0x74>)
    3050:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3052:	4b19      	ldr	r3, [pc, #100]	; (30b8 <system_gclk_gen_get_hz+0x78>)
    3054:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3056:	4a16      	ldr	r2, [pc, #88]	; (30b0 <system_gclk_gen_get_hz+0x70>)
    3058:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    305a:	b25b      	sxtb	r3, r3
    305c:	2b00      	cmp	r3, #0
    305e:	dbfb      	blt.n	3058 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3060:	4e13      	ldr	r6, [pc, #76]	; (30b0 <system_gclk_gen_get_hz+0x70>)
    3062:	6870      	ldr	r0, [r6, #4]
    3064:	04c0      	lsls	r0, r0, #19
    3066:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3068:	4b14      	ldr	r3, [pc, #80]	; (30bc <system_gclk_gen_get_hz+0x7c>)
    306a:	4798      	blx	r3
    306c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    306e:	4b12      	ldr	r3, [pc, #72]	; (30b8 <system_gclk_gen_get_hz+0x78>)
    3070:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3072:	6876      	ldr	r6, [r6, #4]
    3074:	02f6      	lsls	r6, r6, #11
    3076:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3078:	4b11      	ldr	r3, [pc, #68]	; (30c0 <system_gclk_gen_get_hz+0x80>)
    307a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    307c:	4a0c      	ldr	r2, [pc, #48]	; (30b0 <system_gclk_gen_get_hz+0x70>)
    307e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3080:	b25b      	sxtb	r3, r3
    3082:	2b00      	cmp	r3, #0
    3084:	dbfb      	blt.n	307e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3086:	4b0a      	ldr	r3, [pc, #40]	; (30b0 <system_gclk_gen_get_hz+0x70>)
    3088:	689c      	ldr	r4, [r3, #8]
    308a:	0224      	lsls	r4, r4, #8
    308c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    308e:	4b0d      	ldr	r3, [pc, #52]	; (30c4 <system_gclk_gen_get_hz+0x84>)
    3090:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3092:	2e00      	cmp	r6, #0
    3094:	d107      	bne.n	30a6 <system_gclk_gen_get_hz+0x66>
    3096:	2c01      	cmp	r4, #1
    3098:	d907      	bls.n	30aa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    309a:	0021      	movs	r1, r4
    309c:	0028      	movs	r0, r5
    309e:	4b0a      	ldr	r3, [pc, #40]	; (30c8 <system_gclk_gen_get_hz+0x88>)
    30a0:	4798      	blx	r3
    30a2:	0005      	movs	r5, r0
    30a4:	e001      	b.n	30aa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    30a6:	3401      	adds	r4, #1
    30a8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    30aa:	0028      	movs	r0, r5
    30ac:	bd70      	pop	{r4, r5, r6, pc}
    30ae:	46c0      	nop			; (mov r8, r8)
    30b0:	40000c00 	.word	0x40000c00
    30b4:	000016b9 	.word	0x000016b9
    30b8:	40000c04 	.word	0x40000c04
    30bc:	00002b1d 	.word	0x00002b1d
    30c0:	40000c08 	.word	0x40000c08
    30c4:	000016f9 	.word	0x000016f9
    30c8:	0000519d 	.word	0x0000519d

000030cc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    30cc:	b510      	push	{r4, lr}
    30ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    30d0:	4b06      	ldr	r3, [pc, #24]	; (30ec <system_gclk_chan_enable+0x20>)
    30d2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    30d4:	4b06      	ldr	r3, [pc, #24]	; (30f0 <system_gclk_chan_enable+0x24>)
    30d6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    30d8:	4a06      	ldr	r2, [pc, #24]	; (30f4 <system_gclk_chan_enable+0x28>)
    30da:	8853      	ldrh	r3, [r2, #2]
    30dc:	2180      	movs	r1, #128	; 0x80
    30de:	01c9      	lsls	r1, r1, #7
    30e0:	430b      	orrs	r3, r1
    30e2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    30e4:	4b04      	ldr	r3, [pc, #16]	; (30f8 <system_gclk_chan_enable+0x2c>)
    30e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    30e8:	bd10      	pop	{r4, pc}
    30ea:	46c0      	nop			; (mov r8, r8)
    30ec:	000016b9 	.word	0x000016b9
    30f0:	40000c02 	.word	0x40000c02
    30f4:	40000c00 	.word	0x40000c00
    30f8:	000016f9 	.word	0x000016f9

000030fc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    30fc:	b510      	push	{r4, lr}
    30fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3100:	4b0f      	ldr	r3, [pc, #60]	; (3140 <system_gclk_chan_disable+0x44>)
    3102:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3104:	4b0f      	ldr	r3, [pc, #60]	; (3144 <system_gclk_chan_disable+0x48>)
    3106:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3108:	4a0f      	ldr	r2, [pc, #60]	; (3148 <system_gclk_chan_disable+0x4c>)
    310a:	8853      	ldrh	r3, [r2, #2]
    310c:	051b      	lsls	r3, r3, #20
    310e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3110:	8853      	ldrh	r3, [r2, #2]
    3112:	490e      	ldr	r1, [pc, #56]	; (314c <system_gclk_chan_disable+0x50>)
    3114:	400b      	ands	r3, r1
    3116:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3118:	8853      	ldrh	r3, [r2, #2]
    311a:	490d      	ldr	r1, [pc, #52]	; (3150 <system_gclk_chan_disable+0x54>)
    311c:	400b      	ands	r3, r1
    311e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3120:	0011      	movs	r1, r2
    3122:	2280      	movs	r2, #128	; 0x80
    3124:	01d2      	lsls	r2, r2, #7
    3126:	884b      	ldrh	r3, [r1, #2]
    3128:	4213      	tst	r3, r2
    312a:	d1fc      	bne.n	3126 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    312c:	4906      	ldr	r1, [pc, #24]	; (3148 <system_gclk_chan_disable+0x4c>)
    312e:	884a      	ldrh	r2, [r1, #2]
    3130:	0203      	lsls	r3, r0, #8
    3132:	4806      	ldr	r0, [pc, #24]	; (314c <system_gclk_chan_disable+0x50>)
    3134:	4002      	ands	r2, r0
    3136:	4313      	orrs	r3, r2
    3138:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    313a:	4b06      	ldr	r3, [pc, #24]	; (3154 <system_gclk_chan_disable+0x58>)
    313c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    313e:	bd10      	pop	{r4, pc}
    3140:	000016b9 	.word	0x000016b9
    3144:	40000c02 	.word	0x40000c02
    3148:	40000c00 	.word	0x40000c00
    314c:	fffff0ff 	.word	0xfffff0ff
    3150:	ffffbfff 	.word	0xffffbfff
    3154:	000016f9 	.word	0x000016f9

00003158 <system_gclk_chan_set_config>:
{
    3158:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    315a:	780c      	ldrb	r4, [r1, #0]
    315c:	0224      	lsls	r4, r4, #8
    315e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3160:	4b02      	ldr	r3, [pc, #8]	; (316c <system_gclk_chan_set_config+0x14>)
    3162:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3164:	b2a4      	uxth	r4, r4
    3166:	4b02      	ldr	r3, [pc, #8]	; (3170 <system_gclk_chan_set_config+0x18>)
    3168:	805c      	strh	r4, [r3, #2]
}
    316a:	bd10      	pop	{r4, pc}
    316c:	000030fd 	.word	0x000030fd
    3170:	40000c00 	.word	0x40000c00

00003174 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3174:	b510      	push	{r4, lr}
    3176:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3178:	4b06      	ldr	r3, [pc, #24]	; (3194 <system_gclk_chan_get_hz+0x20>)
    317a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    317c:	4b06      	ldr	r3, [pc, #24]	; (3198 <system_gclk_chan_get_hz+0x24>)
    317e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3180:	4b06      	ldr	r3, [pc, #24]	; (319c <system_gclk_chan_get_hz+0x28>)
    3182:	885c      	ldrh	r4, [r3, #2]
    3184:	0524      	lsls	r4, r4, #20
    3186:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3188:	4b05      	ldr	r3, [pc, #20]	; (31a0 <system_gclk_chan_get_hz+0x2c>)
    318a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    318c:	0020      	movs	r0, r4
    318e:	4b05      	ldr	r3, [pc, #20]	; (31a4 <system_gclk_chan_get_hz+0x30>)
    3190:	4798      	blx	r3
}
    3192:	bd10      	pop	{r4, pc}
    3194:	000016b9 	.word	0x000016b9
    3198:	40000c02 	.word	0x40000c02
    319c:	40000c00 	.word	0x40000c00
    31a0:	000016f9 	.word	0x000016f9
    31a4:	00003041 	.word	0x00003041

000031a8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    31a8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    31aa:	78d3      	ldrb	r3, [r2, #3]
    31ac:	2b00      	cmp	r3, #0
    31ae:	d135      	bne.n	321c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    31b0:	7813      	ldrb	r3, [r2, #0]
    31b2:	2b80      	cmp	r3, #128	; 0x80
    31b4:	d029      	beq.n	320a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    31b6:	061b      	lsls	r3, r3, #24
    31b8:	2480      	movs	r4, #128	; 0x80
    31ba:	0264      	lsls	r4, r4, #9
    31bc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    31be:	7854      	ldrb	r4, [r2, #1]
    31c0:	2502      	movs	r5, #2
    31c2:	43ac      	bics	r4, r5
    31c4:	d106      	bne.n	31d4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    31c6:	7894      	ldrb	r4, [r2, #2]
    31c8:	2c00      	cmp	r4, #0
    31ca:	d120      	bne.n	320e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    31cc:	2480      	movs	r4, #128	; 0x80
    31ce:	02a4      	lsls	r4, r4, #10
    31d0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    31d2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    31d4:	7854      	ldrb	r4, [r2, #1]
    31d6:	3c01      	subs	r4, #1
    31d8:	2c01      	cmp	r4, #1
    31da:	d91c      	bls.n	3216 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    31dc:	040d      	lsls	r5, r1, #16
    31de:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    31e0:	24a0      	movs	r4, #160	; 0xa0
    31e2:	05e4      	lsls	r4, r4, #23
    31e4:	432c      	orrs	r4, r5
    31e6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31e8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    31ea:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    31ec:	24d0      	movs	r4, #208	; 0xd0
    31ee:	0624      	lsls	r4, r4, #24
    31f0:	432c      	orrs	r4, r5
    31f2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31f4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    31f6:	78d4      	ldrb	r4, [r2, #3]
    31f8:	2c00      	cmp	r4, #0
    31fa:	d122      	bne.n	3242 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    31fc:	035b      	lsls	r3, r3, #13
    31fe:	d51c      	bpl.n	323a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3200:	7893      	ldrb	r3, [r2, #2]
    3202:	2b01      	cmp	r3, #1
    3204:	d01e      	beq.n	3244 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3206:	6141      	str	r1, [r0, #20]
    3208:	e017      	b.n	323a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    320a:	2300      	movs	r3, #0
    320c:	e7d7      	b.n	31be <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    320e:	24c0      	movs	r4, #192	; 0xc0
    3210:	02e4      	lsls	r4, r4, #11
    3212:	4323      	orrs	r3, r4
    3214:	e7dd      	b.n	31d2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3216:	4c0d      	ldr	r4, [pc, #52]	; (324c <_system_pinmux_config+0xa4>)
    3218:	4023      	ands	r3, r4
    321a:	e7df      	b.n	31dc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    321c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    321e:	040c      	lsls	r4, r1, #16
    3220:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3222:	23a0      	movs	r3, #160	; 0xa0
    3224:	05db      	lsls	r3, r3, #23
    3226:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3228:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    322a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    322c:	23d0      	movs	r3, #208	; 0xd0
    322e:	061b      	lsls	r3, r3, #24
    3230:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3232:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3234:	78d3      	ldrb	r3, [r2, #3]
    3236:	2b00      	cmp	r3, #0
    3238:	d103      	bne.n	3242 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    323a:	7853      	ldrb	r3, [r2, #1]
    323c:	3b01      	subs	r3, #1
    323e:	2b01      	cmp	r3, #1
    3240:	d902      	bls.n	3248 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3242:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3244:	6181      	str	r1, [r0, #24]
    3246:	e7f8      	b.n	323a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3248:	6081      	str	r1, [r0, #8]
}
    324a:	e7fa      	b.n	3242 <_system_pinmux_config+0x9a>
    324c:	fffbffff 	.word	0xfffbffff

00003250 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3250:	b510      	push	{r4, lr}
    3252:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    3254:	09c1      	lsrs	r1, r0, #7
		return NULL;
    3256:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3258:	2900      	cmp	r1, #0
    325a:	d104      	bne.n	3266 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    325c:	0943      	lsrs	r3, r0, #5
    325e:	01db      	lsls	r3, r3, #7
    3260:	4905      	ldr	r1, [pc, #20]	; (3278 <system_pinmux_pin_set_config+0x28>)
    3262:	468c      	mov	ip, r1
    3264:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3266:	241f      	movs	r4, #31
    3268:	4020      	ands	r0, r4
    326a:	2101      	movs	r1, #1
    326c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    326e:	0018      	movs	r0, r3
    3270:	4b02      	ldr	r3, [pc, #8]	; (327c <system_pinmux_pin_set_config+0x2c>)
    3272:	4798      	blx	r3
}
    3274:	bd10      	pop	{r4, pc}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	41004400 	.word	0x41004400
    327c:	000031a9 	.word	0x000031a9

00003280 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3280:	4770      	bx	lr
	...

00003284 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3284:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3286:	4b05      	ldr	r3, [pc, #20]	; (329c <system_init+0x18>)
    3288:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    328a:	4b05      	ldr	r3, [pc, #20]	; (32a0 <system_init+0x1c>)
    328c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    328e:	4b05      	ldr	r3, [pc, #20]	; (32a4 <system_init+0x20>)
    3290:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3292:	4b05      	ldr	r3, [pc, #20]	; (32a8 <system_init+0x24>)
    3294:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3296:	4b05      	ldr	r3, [pc, #20]	; (32ac <system_init+0x28>)
    3298:	4798      	blx	r3
}
    329a:	bd10      	pop	{r4, pc}
    329c:	00002dcd 	.word	0x00002dcd
    32a0:	00000181 	.word	0x00000181
    32a4:	00003281 	.word	0x00003281
    32a8:	00003281 	.word	0x00003281
    32ac:	00003281 	.word	0x00003281

000032b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    32b0:	e7fe      	b.n	32b0 <Dummy_Handler>
	...

000032b4 <Reset_Handler>:
{
    32b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    32b6:	4a2a      	ldr	r2, [pc, #168]	; (3360 <Reset_Handler+0xac>)
    32b8:	4b2a      	ldr	r3, [pc, #168]	; (3364 <Reset_Handler+0xb0>)
    32ba:	429a      	cmp	r2, r3
    32bc:	d011      	beq.n	32e2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    32be:	001a      	movs	r2, r3
    32c0:	4b29      	ldr	r3, [pc, #164]	; (3368 <Reset_Handler+0xb4>)
    32c2:	429a      	cmp	r2, r3
    32c4:	d20d      	bcs.n	32e2 <Reset_Handler+0x2e>
    32c6:	4a29      	ldr	r2, [pc, #164]	; (336c <Reset_Handler+0xb8>)
    32c8:	3303      	adds	r3, #3
    32ca:	1a9b      	subs	r3, r3, r2
    32cc:	089b      	lsrs	r3, r3, #2
    32ce:	3301      	adds	r3, #1
    32d0:	009b      	lsls	r3, r3, #2
    32d2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    32d4:	4823      	ldr	r0, [pc, #140]	; (3364 <Reset_Handler+0xb0>)
    32d6:	4922      	ldr	r1, [pc, #136]	; (3360 <Reset_Handler+0xac>)
    32d8:	588c      	ldr	r4, [r1, r2]
    32da:	5084      	str	r4, [r0, r2]
    32dc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    32de:	429a      	cmp	r2, r3
    32e0:	d1fa      	bne.n	32d8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    32e2:	4a23      	ldr	r2, [pc, #140]	; (3370 <Reset_Handler+0xbc>)
    32e4:	4b23      	ldr	r3, [pc, #140]	; (3374 <Reset_Handler+0xc0>)
    32e6:	429a      	cmp	r2, r3
    32e8:	d20a      	bcs.n	3300 <Reset_Handler+0x4c>
    32ea:	43d3      	mvns	r3, r2
    32ec:	4921      	ldr	r1, [pc, #132]	; (3374 <Reset_Handler+0xc0>)
    32ee:	185b      	adds	r3, r3, r1
    32f0:	2103      	movs	r1, #3
    32f2:	438b      	bics	r3, r1
    32f4:	3304      	adds	r3, #4
    32f6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    32f8:	2100      	movs	r1, #0
    32fa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    32fc:	4293      	cmp	r3, r2
    32fe:	d1fc      	bne.n	32fa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3300:	4a1d      	ldr	r2, [pc, #116]	; (3378 <Reset_Handler+0xc4>)
    3302:	21ff      	movs	r1, #255	; 0xff
    3304:	4b1d      	ldr	r3, [pc, #116]	; (337c <Reset_Handler+0xc8>)
    3306:	438b      	bics	r3, r1
    3308:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    330a:	39fd      	subs	r1, #253	; 0xfd
    330c:	2390      	movs	r3, #144	; 0x90
    330e:	005b      	lsls	r3, r3, #1
    3310:	4a1b      	ldr	r2, [pc, #108]	; (3380 <Reset_Handler+0xcc>)
    3312:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3314:	4a1b      	ldr	r2, [pc, #108]	; (3384 <Reset_Handler+0xd0>)
    3316:	78d3      	ldrb	r3, [r2, #3]
    3318:	2503      	movs	r5, #3
    331a:	43ab      	bics	r3, r5
    331c:	2402      	movs	r4, #2
    331e:	4323      	orrs	r3, r4
    3320:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3322:	78d3      	ldrb	r3, [r2, #3]
    3324:	270c      	movs	r7, #12
    3326:	43bb      	bics	r3, r7
    3328:	2608      	movs	r6, #8
    332a:	4333      	orrs	r3, r6
    332c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    332e:	4b16      	ldr	r3, [pc, #88]	; (3388 <Reset_Handler+0xd4>)
    3330:	7b98      	ldrb	r0, [r3, #14]
    3332:	2230      	movs	r2, #48	; 0x30
    3334:	4390      	bics	r0, r2
    3336:	2220      	movs	r2, #32
    3338:	4310      	orrs	r0, r2
    333a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    333c:	7b99      	ldrb	r1, [r3, #14]
    333e:	43b9      	bics	r1, r7
    3340:	4331      	orrs	r1, r6
    3342:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3344:	7b9a      	ldrb	r2, [r3, #14]
    3346:	43aa      	bics	r2, r5
    3348:	4322      	orrs	r2, r4
    334a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    334c:	4a0f      	ldr	r2, [pc, #60]	; (338c <Reset_Handler+0xd8>)
    334e:	6853      	ldr	r3, [r2, #4]
    3350:	2180      	movs	r1, #128	; 0x80
    3352:	430b      	orrs	r3, r1
    3354:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3356:	4b0e      	ldr	r3, [pc, #56]	; (3390 <Reset_Handler+0xdc>)
    3358:	4798      	blx	r3
        main();
    335a:	4b0e      	ldr	r3, [pc, #56]	; (3394 <Reset_Handler+0xe0>)
    335c:	4798      	blx	r3
    335e:	e7fe      	b.n	335e <Reset_Handler+0xaa>
    3360:	00006584 	.word	0x00006584
    3364:	20000000 	.word	0x20000000
    3368:	20000070 	.word	0x20000070
    336c:	20000004 	.word	0x20000004
    3370:	20000070 	.word	0x20000070
    3374:	200009f8 	.word	0x200009f8
    3378:	e000ed00 	.word	0xe000ed00
    337c:	00000000 	.word	0x00000000
    3380:	41007000 	.word	0x41007000
    3384:	41005000 	.word	0x41005000
    3388:	41004800 	.word	0x41004800
    338c:	41004000 	.word	0x41004000
    3390:	000054dd 	.word	0x000054dd
    3394:	00004fc1 	.word	0x00004fc1

00003398 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3398:	b5f0      	push	{r4, r5, r6, r7, lr}
    339a:	46c6      	mov	lr, r8
    339c:	b500      	push	{lr}
    339e:	000c      	movs	r4, r1
    33a0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    33a2:	2800      	cmp	r0, #0
    33a4:	d10f      	bne.n	33c6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    33a6:	2a00      	cmp	r2, #0
    33a8:	dd11      	ble.n	33ce <_read+0x36>
    33aa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    33ac:	4e09      	ldr	r6, [pc, #36]	; (33d4 <_read+0x3c>)
    33ae:	4d0a      	ldr	r5, [pc, #40]	; (33d8 <_read+0x40>)
    33b0:	6830      	ldr	r0, [r6, #0]
    33b2:	0021      	movs	r1, r4
    33b4:	682b      	ldr	r3, [r5, #0]
    33b6:	4798      	blx	r3
		ptr++;
    33b8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    33ba:	42bc      	cmp	r4, r7
    33bc:	d1f8      	bne.n	33b0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    33be:	4640      	mov	r0, r8
    33c0:	bc04      	pop	{r2}
    33c2:	4690      	mov	r8, r2
    33c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    33c6:	2301      	movs	r3, #1
    33c8:	425b      	negs	r3, r3
    33ca:	4698      	mov	r8, r3
    33cc:	e7f7      	b.n	33be <_read+0x26>
	for (; len > 0; --len) {
    33ce:	4680      	mov	r8, r0
    33d0:	e7f5      	b.n	33be <_read+0x26>
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	200009e8 	.word	0x200009e8
    33d8:	200009e0 	.word	0x200009e0

000033dc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    33dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    33de:	46c6      	mov	lr, r8
    33e0:	b500      	push	{lr}
    33e2:	000e      	movs	r6, r1
    33e4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    33e6:	3801      	subs	r0, #1
    33e8:	2802      	cmp	r0, #2
    33ea:	d810      	bhi.n	340e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    33ec:	2a00      	cmp	r2, #0
    33ee:	d011      	beq.n	3414 <_write+0x38>
    33f0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    33f2:	4b0c      	ldr	r3, [pc, #48]	; (3424 <_write+0x48>)
    33f4:	4698      	mov	r8, r3
    33f6:	4f0c      	ldr	r7, [pc, #48]	; (3428 <_write+0x4c>)
    33f8:	4643      	mov	r3, r8
    33fa:	6818      	ldr	r0, [r3, #0]
    33fc:	5d31      	ldrb	r1, [r6, r4]
    33fe:	683b      	ldr	r3, [r7, #0]
    3400:	4798      	blx	r3
    3402:	2800      	cmp	r0, #0
    3404:	db08      	blt.n	3418 <_write+0x3c>
			return -1;
		}
		++nChars;
    3406:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3408:	42a5      	cmp	r5, r4
    340a:	d1f5      	bne.n	33f8 <_write+0x1c>
    340c:	e006      	b.n	341c <_write+0x40>
		return -1;
    340e:	2401      	movs	r4, #1
    3410:	4264      	negs	r4, r4
    3412:	e003      	b.n	341c <_write+0x40>
	for (; len != 0; --len) {
    3414:	0014      	movs	r4, r2
    3416:	e001      	b.n	341c <_write+0x40>
			return -1;
    3418:	2401      	movs	r4, #1
    341a:	4264      	negs	r4, r4
	}
	return nChars;
}
    341c:	0020      	movs	r0, r4
    341e:	bc04      	pop	{r2}
    3420:	4690      	mov	r8, r2
    3422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3424:	200009e8 	.word	0x200009e8
    3428:	200009e4 	.word	0x200009e4

0000342c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    342c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    342e:	4a06      	ldr	r2, [pc, #24]	; (3448 <_sbrk+0x1c>)
    3430:	6812      	ldr	r2, [r2, #0]
    3432:	2a00      	cmp	r2, #0
    3434:	d004      	beq.n	3440 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3436:	4a04      	ldr	r2, [pc, #16]	; (3448 <_sbrk+0x1c>)
    3438:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    343a:	18c3      	adds	r3, r0, r3
    343c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    343e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3440:	4902      	ldr	r1, [pc, #8]	; (344c <_sbrk+0x20>)
    3442:	4a01      	ldr	r2, [pc, #4]	; (3448 <_sbrk+0x1c>)
    3444:	6011      	str	r1, [r2, #0]
    3446:	e7f6      	b.n	3436 <_sbrk+0xa>
    3448:	2000014c 	.word	0x2000014c
    344c:	200029f8 	.word	0x200029f8

00003450 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3450:	2001      	movs	r0, #1
    3452:	4240      	negs	r0, r0
    3454:	4770      	bx	lr

00003456 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3456:	2380      	movs	r3, #128	; 0x80
    3458:	019b      	lsls	r3, r3, #6
    345a:	604b      	str	r3, [r1, #4]

	return 0;
}
    345c:	2000      	movs	r0, #0
    345e:	4770      	bx	lr

00003460 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3460:	2000      	movs	r0, #0
    3462:	4770      	bx	lr

00003464 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    3464:	b530      	push	{r4, r5, lr}
    3466:	b087      	sub	sp, #28
    3468:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    346a:	aa01      	add	r2, sp, #4
    346c:	23a0      	movs	r3, #160	; 0xa0
    346e:	011b      	lsls	r3, r3, #4
    3470:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3472:	2300      	movs	r3, #0
    3474:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    3476:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    3478:	21fa      	movs	r1, #250	; 0xfa
    347a:	00c9      	lsls	r1, r1, #3
    347c:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    347e:	2101      	movs	r1, #1
    3480:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    3482:	2004      	movs	r0, #4
    3484:	7210      	strb	r0, [r2, #8]
    3486:	7253      	strb	r3, [r2, #9]
    3488:	7293      	strb	r3, [r2, #10]
    348a:	72d3      	strb	r3, [r2, #11]
    348c:	7311      	strb	r1, [r2, #12]
    348e:	7351      	strb	r1, [r2, #13]
    3490:	4b14      	ldr	r3, [pc, #80]	; (34e4 <disk_initialize+0x80>)
    3492:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    3494:	2306      	movs	r3, #6
    3496:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3498:	4d13      	ldr	r5, [pc, #76]	; (34e8 <disk_initialize+0x84>)
    349a:	4914      	ldr	r1, [pc, #80]	; (34ec <disk_initialize+0x88>)
    349c:	0028      	movs	r0, r5
    349e:	4b14      	ldr	r3, [pc, #80]	; (34f0 <disk_initialize+0x8c>)
    34a0:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    34a2:	0028      	movs	r0, r5
    34a4:	4b13      	ldr	r3, [pc, #76]	; (34f4 <disk_initialize+0x90>)
    34a6:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    34a8:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    34aa:	2c01      	cmp	r4, #1
    34ac:	d901      	bls.n	34b2 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    34ae:	b007      	add	sp, #28
    34b0:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    34b2:	0020      	movs	r0, r4
    34b4:	4b10      	ldr	r3, [pc, #64]	; (34f8 <disk_initialize+0x94>)
    34b6:	4798      	blx	r3
    34b8:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    34ba:	2803      	cmp	r0, #3
    34bc:	d106      	bne.n	34cc <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    34be:	0020      	movs	r0, r4
    34c0:	4b0d      	ldr	r3, [pc, #52]	; (34f8 <disk_initialize+0x94>)
    34c2:	4798      	blx	r3
    34c4:	0003      	movs	r3, r0
		return STA_NOINIT;
    34c6:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    34c8:	2b03      	cmp	r3, #3
    34ca:	d0f0      	beq.n	34ae <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    34cc:	2b00      	cmp	r3, #0
    34ce:	d106      	bne.n	34de <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    34d0:	0020      	movs	r0, r4
    34d2:	4b0a      	ldr	r3, [pc, #40]	; (34fc <disk_initialize+0x98>)
    34d4:	4798      	blx	r3
	return 0;
    34d6:	1e43      	subs	r3, r0, #1
    34d8:	4198      	sbcs	r0, r3
    34da:	0080      	lsls	r0, r0, #2
    34dc:	e7e7      	b.n	34ae <disk_initialize+0x4a>
		return STA_NOINIT;
    34de:	2001      	movs	r0, #1
    34e0:	e7e5      	b.n	34ae <disk_initialize+0x4a>
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	000007de 	.word	0x000007de
    34e8:	200009ec 	.word	0x200009ec
    34ec:	40001400 	.word	0x40001400
    34f0:	00001891 	.word	0x00001891
    34f4:	0000174d 	.word	0x0000174d
    34f8:	00001625 	.word	0x00001625
    34fc:	00001661 	.word	0x00001661

00003500 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    3500:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    3502:	4b05      	ldr	r3, [pc, #20]	; (3518 <disk_status+0x18>)
    3504:	4798      	blx	r3
    3506:	1e03      	subs	r3, r0, #0
    3508:	d004      	beq.n	3514 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    350a:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    350c:	2b02      	cmp	r3, #2
    350e:	d000      	beq.n	3512 <disk_status+0x12>
	default:
		return STA_NOINIT;
    3510:	3802      	subs	r0, #2
	}
}
    3512:	bd10      	pop	{r4, pc}
		return 0;
    3514:	2000      	movs	r0, #0
    3516:	e7fc      	b.n	3512 <disk_status+0x12>
    3518:	00001625 	.word	0x00001625

0000351c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    351c:	b5f0      	push	{r4, r5, r6, r7, lr}
    351e:	46de      	mov	lr, fp
    3520:	464f      	mov	r7, r9
    3522:	4646      	mov	r6, r8
    3524:	b5c0      	push	{r6, r7, lr}
    3526:	b084      	sub	sp, #16
    3528:	9001      	str	r0, [sp, #4]
    352a:	000d      	movs	r5, r1
    352c:	0014      	movs	r4, r2
    352e:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3530:	4b18      	ldr	r3, [pc, #96]	; (3594 <disk_read+0x78>)
    3532:	4798      	blx	r3
    3534:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    3536:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3538:	2e00      	cmp	r6, #0
    353a:	d105      	bne.n	3548 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    353c:	b004      	add	sp, #16
    353e:	bc1c      	pop	{r2, r3, r4}
    3540:	4690      	mov	r8, r2
    3542:	4699      	mov	r9, r3
    3544:	46a3      	mov	fp, r4
    3546:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3548:	a903      	add	r1, sp, #12
    354a:	9801      	ldr	r0, [sp, #4]
    354c:	4b12      	ldr	r3, [pc, #72]	; (3598 <disk_read+0x7c>)
    354e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3550:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3552:	0032      	movs	r2, r6
    3554:	437a      	muls	r2, r7
    3556:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3558:	9b03      	ldr	r3, [sp, #12]
    355a:	3301      	adds	r3, #1
    355c:	4373      	muls	r3, r6
		return RES_PARERR;
    355e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3560:	429a      	cmp	r2, r3
    3562:	d8eb      	bhi.n	353c <disk_read+0x20>
	for (i = 0; i < count; i++) {
    3564:	2f00      	cmp	r7, #0
    3566:	d011      	beq.n	358c <disk_read+0x70>
    3568:	0273      	lsls	r3, r6, #9
    356a:	4698      	mov	r8, r3
    356c:	1c7b      	adds	r3, r7, #1
    356e:	469b      	mov	fp, r3
    3570:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    3572:	4e0a      	ldr	r6, [pc, #40]	; (359c <disk_read+0x80>)
    3574:	002a      	movs	r2, r5
    3576:	0021      	movs	r1, r4
    3578:	9801      	ldr	r0, [sp, #4]
    357a:	47b0      	blx	r6
    357c:	2800      	cmp	r0, #0
    357e:	d107      	bne.n	3590 <disk_read+0x74>
    3580:	3701      	adds	r7, #1
    3582:	444c      	add	r4, r9
    3584:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    3586:	455f      	cmp	r7, fp
    3588:	d1f4      	bne.n	3574 <disk_read+0x58>
    358a:	e7d7      	b.n	353c <disk_read+0x20>
	return RES_OK;
    358c:	2000      	movs	r0, #0
    358e:	e7d5      	b.n	353c <disk_read+0x20>
			return RES_ERROR;
    3590:	2001      	movs	r0, #1
    3592:	e7d3      	b.n	353c <disk_read+0x20>
    3594:	00001659 	.word	0x00001659
    3598:	0000163d 	.word	0x0000163d
    359c:	00001679 	.word	0x00001679

000035a0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    35a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    35a2:	46de      	mov	lr, fp
    35a4:	464f      	mov	r7, r9
    35a6:	4646      	mov	r6, r8
    35a8:	b5c0      	push	{r6, r7, lr}
    35aa:	b084      	sub	sp, #16
    35ac:	9001      	str	r0, [sp, #4]
    35ae:	000d      	movs	r5, r1
    35b0:	0014      	movs	r4, r2
    35b2:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    35b4:	4b18      	ldr	r3, [pc, #96]	; (3618 <disk_write+0x78>)
    35b6:	4798      	blx	r3
    35b8:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    35ba:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    35bc:	2e00      	cmp	r6, #0
    35be:	d105      	bne.n	35cc <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    35c0:	b004      	add	sp, #16
    35c2:	bc1c      	pop	{r2, r3, r4}
    35c4:	4690      	mov	r8, r2
    35c6:	4699      	mov	r9, r3
    35c8:	46a3      	mov	fp, r4
    35ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    35cc:	a903      	add	r1, sp, #12
    35ce:	9801      	ldr	r0, [sp, #4]
    35d0:	4b12      	ldr	r3, [pc, #72]	; (361c <disk_write+0x7c>)
    35d2:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    35d4:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    35d6:	0032      	movs	r2, r6
    35d8:	437a      	muls	r2, r7
    35da:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    35dc:	9b03      	ldr	r3, [sp, #12]
    35de:	3301      	adds	r3, #1
    35e0:	4373      	muls	r3, r6
		return RES_PARERR;
    35e2:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    35e4:	429a      	cmp	r2, r3
    35e6:	d8eb      	bhi.n	35c0 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    35e8:	2f00      	cmp	r7, #0
    35ea:	d011      	beq.n	3610 <disk_write+0x70>
    35ec:	0273      	lsls	r3, r6, #9
    35ee:	4698      	mov	r8, r3
    35f0:	1c7b      	adds	r3, r7, #1
    35f2:	469b      	mov	fp, r3
    35f4:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    35f6:	4e0a      	ldr	r6, [pc, #40]	; (3620 <disk_write+0x80>)
    35f8:	002a      	movs	r2, r5
    35fa:	0021      	movs	r1, r4
    35fc:	9801      	ldr	r0, [sp, #4]
    35fe:	47b0      	blx	r6
    3600:	2800      	cmp	r0, #0
    3602:	d107      	bne.n	3614 <disk_write+0x74>
    3604:	3701      	adds	r7, #1
    3606:	444c      	add	r4, r9
    3608:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    360a:	455f      	cmp	r7, fp
    360c:	d1f4      	bne.n	35f8 <disk_write+0x58>
    360e:	e7d7      	b.n	35c0 <disk_write+0x20>
	return RES_OK;
    3610:	2000      	movs	r0, #0
    3612:	e7d5      	b.n	35c0 <disk_write+0x20>
			return RES_ERROR;
    3614:	2001      	movs	r0, #1
    3616:	e7d3      	b.n	35c0 <disk_write+0x20>
    3618:	00001659 	.word	0x00001659
    361c:	0000163d 	.word	0x0000163d
    3620:	00001699 	.word	0x00001699

00003624 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    3624:	b510      	push	{r4, lr}
    3626:	b082      	sub	sp, #8
    3628:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    362a:	2901      	cmp	r1, #1
    362c:	d00b      	beq.n	3646 <disk_ioctl+0x22>
    362e:	2900      	cmp	r1, #0
    3630:	d020      	beq.n	3674 <disk_ioctl+0x50>
    3632:	2902      	cmp	r1, #2
    3634:	d00f      	beq.n	3656 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    3636:	2004      	movs	r0, #4
	switch (ctrl) {
    3638:	2903      	cmp	r1, #3
    363a:	d102      	bne.n	3642 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    363c:	2301      	movs	r3, #1
    363e:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    3640:	2000      	movs	r0, #0
	}

	return res;
}
    3642:	b002      	add	sp, #8
    3644:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    3646:	a901      	add	r1, sp, #4
    3648:	4b0e      	ldr	r3, [pc, #56]	; (3684 <disk_ioctl+0x60>)
    364a:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    364c:	9b01      	ldr	r3, [sp, #4]
    364e:	3301      	adds	r3, #1
    3650:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    3652:	2000      	movs	r0, #0
	break;
    3654:	e7f5      	b.n	3642 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    3656:	4b0c      	ldr	r3, [pc, #48]	; (3688 <disk_ioctl+0x64>)
    3658:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    365a:	1e43      	subs	r3, r0, #1
    365c:	b2db      	uxtb	r3, r3
    365e:	2b01      	cmp	r3, #1
    3660:	d904      	bls.n	366c <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3662:	1f03      	subs	r3, r0, #4
    3664:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    3666:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3668:	4213      	tst	r3, r2
    366a:	d1ea      	bne.n	3642 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    366c:	2300      	movs	r3, #0
    366e:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    3670:	2000      	movs	r0, #0
	break;
    3672:	e7e6      	b.n	3642 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3674:	4b05      	ldr	r3, [pc, #20]	; (368c <disk_ioctl+0x68>)
    3676:	4798      	blx	r3
    3678:	2800      	cmp	r0, #0
    367a:	d001      	beq.n	3680 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    367c:	2003      	movs	r0, #3
    367e:	e7e0      	b.n	3642 <disk_ioctl+0x1e>
			res = RES_OK;
    3680:	2000      	movs	r0, #0
    3682:	e7de      	b.n	3642 <disk_ioctl+0x1e>
    3684:	0000163d 	.word	0x0000163d
    3688:	00001659 	.word	0x00001659
    368c:	00001625 	.word	0x00001625

00003690 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    3690:	b500      	push	{lr}
    3692:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    3694:	4669      	mov	r1, sp
    3696:	480f      	ldr	r0, [pc, #60]	; (36d4 <get_fattime+0x44>)
    3698:	4b0f      	ldr	r3, [pc, #60]	; (36d8 <get_fattime+0x48>)
    369a:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    369c:	466b      	mov	r3, sp
    369e:	7958      	ldrb	r0, [r3, #5]
    36a0:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    36a2:	791b      	ldrb	r3, [r3, #4]
    36a4:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    36a6:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    36a8:	466b      	mov	r3, sp
    36aa:	789b      	ldrb	r3, [r3, #2]
    36ac:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    36ae:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    36b0:	466b      	mov	r3, sp
    36b2:	785b      	ldrb	r3, [r3, #1]
    36b4:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    36b6:	4318      	orrs	r0, r3
    36b8:	466b      	mov	r3, sp
    36ba:	781b      	ldrb	r3, [r3, #0]
    36bc:	085b      	lsrs	r3, r3, #1
    36be:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    36c0:	466b      	mov	r3, sp
    36c2:	88db      	ldrh	r3, [r3, #6]
    36c4:	4a05      	ldr	r2, [pc, #20]	; (36dc <get_fattime+0x4c>)
    36c6:	4694      	mov	ip, r2
    36c8:	4463      	add	r3, ip
    36ca:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    36cc:	4318      	orrs	r0, r3

	return ul_time;
}
    36ce:	b003      	add	sp, #12
    36d0:	bd00      	pop	{pc}
    36d2:	46c0      	nop			; (mov r8, r8)
    36d4:	200009ec 	.word	0x200009ec
    36d8:	00001819 	.word	0x00001819
    36dc:	fffff844 	.word	0xfffff844

000036e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    36e0:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    36e2:	2a00      	cmp	r2, #0
    36e4:	d005      	beq.n	36f2 <mem_cpy+0x12>
    36e6:	2300      	movs	r3, #0
		*d++ = *s++;
    36e8:	5ccc      	ldrb	r4, [r1, r3]
    36ea:	54c4      	strb	r4, [r0, r3]
    36ec:	3301      	adds	r3, #1
	while (cnt--)
    36ee:	4293      	cmp	r3, r2
    36f0:	d1fa      	bne.n	36e8 <mem_cpy+0x8>
}
    36f2:	bd10      	pop	{r4, pc}

000036f4 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    36f4:	2a00      	cmp	r2, #0
    36f6:	d005      	beq.n	3704 <mem_set+0x10>
    36f8:	0003      	movs	r3, r0
    36fa:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    36fc:	7019      	strb	r1, [r3, #0]
    36fe:	3301      	adds	r3, #1
	while (cnt--)
    3700:	4293      	cmp	r3, r2
    3702:	d1fb      	bne.n	36fc <mem_set+0x8>
}
    3704:	4770      	bx	lr

00003706 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    3706:	0002      	movs	r2, r0
	clst -= 2;
    3708:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    370a:	6983      	ldr	r3, [r0, #24]
    370c:	3b02      	subs	r3, #2
    370e:	2000      	movs	r0, #0
    3710:	4299      	cmp	r1, r3
    3712:	d203      	bcs.n	371c <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    3714:	7890      	ldrb	r0, [r2, #2]
    3716:	4341      	muls	r1, r0
    3718:	6a90      	ldr	r0, [r2, #40]	; 0x28
    371a:	1808      	adds	r0, r1, r0
}
    371c:	4770      	bx	lr

0000371e <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    371e:	0002      	movs	r2, r0
    3720:	0001      	movs	r1, r0
    3722:	310b      	adds	r1, #11
	BYTE sum = 0;
    3724:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    3726:	0843      	lsrs	r3, r0, #1
    3728:	01c0      	lsls	r0, r0, #7
    372a:	4303      	orrs	r3, r0
    372c:	7810      	ldrb	r0, [r2, #0]
    372e:	1818      	adds	r0, r3, r0
    3730:	b2c0      	uxtb	r0, r0
    3732:	3201      	adds	r2, #1
    3734:	428a      	cmp	r2, r1
    3736:	d1f6      	bne.n	3726 <sum_sfn+0x8>
	return sum;
}
    3738:	4770      	bx	lr
	...

0000373c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    373c:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    373e:	2800      	cmp	r0, #0
    3740:	d010      	beq.n	3764 <validate+0x28>
    3742:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    3744:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    3746:	2a00      	cmp	r2, #0
    3748:	d101      	bne.n	374e <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    374a:	0018      	movs	r0, r3
    374c:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    374e:	88c2      	ldrh	r2, [r0, #6]
    3750:	428a      	cmp	r2, r1
    3752:	d1fa      	bne.n	374a <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    3754:	7840      	ldrb	r0, [r0, #1]
    3756:	4b04      	ldr	r3, [pc, #16]	; (3768 <validate+0x2c>)
    3758:	4798      	blx	r3
		return FR_NOT_READY;
    375a:	2303      	movs	r3, #3
	return FR_OK;
    375c:	07c0      	lsls	r0, r0, #31
    375e:	17c0      	asrs	r0, r0, #31
    3760:	4003      	ands	r3, r0
    3762:	e7f2      	b.n	374a <validate+0xe>
		return FR_INVALID_OBJECT;
    3764:	2309      	movs	r3, #9
    3766:	e7f0      	b.n	374a <validate+0xe>
    3768:	00003501 	.word	0x00003501

0000376c <check_fs>:
{
    376c:	b570      	push	{r4, r5, r6, lr}
    376e:	0004      	movs	r4, r0
    3770:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3772:	0001      	movs	r1, r0
    3774:	3130      	adds	r1, #48	; 0x30
    3776:	7840      	ldrb	r0, [r0, #1]
    3778:	2301      	movs	r3, #1
    377a:	4d1f      	ldr	r5, [pc, #124]	; (37f8 <check_fs+0x8c>)
    377c:	47a8      	blx	r5
		return 3;
    377e:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3780:	2800      	cmp	r0, #0
    3782:	d001      	beq.n	3788 <check_fs+0x1c>
}
    3784:	0018      	movs	r0, r3
    3786:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3788:	4b1c      	ldr	r3, [pc, #112]	; (37fc <check_fs+0x90>)
    378a:	5ce3      	ldrb	r3, [r4, r3]
    378c:	021b      	lsls	r3, r3, #8
    378e:	4a1c      	ldr	r2, [pc, #112]	; (3800 <check_fs+0x94>)
    3790:	5ca2      	ldrb	r2, [r4, r2]
    3792:	431a      	orrs	r2, r3
    3794:	491b      	ldr	r1, [pc, #108]	; (3804 <check_fs+0x98>)
    3796:	b212      	sxth	r2, r2
		return 2;
    3798:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    379a:	428a      	cmp	r2, r1
    379c:	d1f2      	bne.n	3784 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    379e:	3367      	adds	r3, #103	; 0x67
    37a0:	5ce3      	ldrb	r3, [r4, r3]
    37a2:	061b      	lsls	r3, r3, #24
    37a4:	2268      	movs	r2, #104	; 0x68
    37a6:	5ca2      	ldrb	r2, [r4, r2]
    37a8:	0412      	lsls	r2, r2, #16
    37aa:	4313      	orrs	r3, r2
    37ac:	2266      	movs	r2, #102	; 0x66
    37ae:	5ca2      	ldrb	r2, [r4, r2]
    37b0:	4313      	orrs	r3, r2
    37b2:	2267      	movs	r2, #103	; 0x67
    37b4:	5ca2      	ldrb	r2, [r4, r2]
    37b6:	0212      	lsls	r2, r2, #8
    37b8:	4313      	orrs	r3, r2
    37ba:	021b      	lsls	r3, r3, #8
    37bc:	0a1b      	lsrs	r3, r3, #8
    37be:	4a12      	ldr	r2, [pc, #72]	; (3808 <check_fs+0x9c>)
    37c0:	4293      	cmp	r3, r2
    37c2:	d016      	beq.n	37f2 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    37c4:	2385      	movs	r3, #133	; 0x85
    37c6:	5ce3      	ldrb	r3, [r4, r3]
    37c8:	061b      	lsls	r3, r3, #24
    37ca:	2284      	movs	r2, #132	; 0x84
    37cc:	5ca2      	ldrb	r2, [r4, r2]
    37ce:	0412      	lsls	r2, r2, #16
    37d0:	4313      	orrs	r3, r2
    37d2:	2282      	movs	r2, #130	; 0x82
    37d4:	5ca2      	ldrb	r2, [r4, r2]
    37d6:	4313      	orrs	r3, r2
    37d8:	2283      	movs	r2, #131	; 0x83
    37da:	5ca2      	ldrb	r2, [r4, r2]
    37dc:	0212      	lsls	r2, r2, #8
    37de:	4313      	orrs	r3, r2
    37e0:	021b      	lsls	r3, r3, #8
    37e2:	0a1b      	lsrs	r3, r3, #8
    37e4:	4a09      	ldr	r2, [pc, #36]	; (380c <check_fs+0xa0>)
    37e6:	4694      	mov	ip, r2
    37e8:	4463      	add	r3, ip
    37ea:	1e58      	subs	r0, r3, #1
    37ec:	4183      	sbcs	r3, r0
		return 3;
    37ee:	b2db      	uxtb	r3, r3
    37f0:	e7c8      	b.n	3784 <check_fs+0x18>
		return 0;
    37f2:	2300      	movs	r3, #0
    37f4:	e7c6      	b.n	3784 <check_fs+0x18>
    37f6:	46c0      	nop			; (mov r8, r8)
    37f8:	0000351d 	.word	0x0000351d
    37fc:	0000022f 	.word	0x0000022f
    3800:	0000022e 	.word	0x0000022e
    3804:	ffffaa55 	.word	0xffffaa55
    3808:	00544146 	.word	0x00544146
    380c:	ffabbeba 	.word	0xffabbeba

00003810 <chk_mounted>:
{
    3810:	b5f0      	push	{r4, r5, r6, r7, lr}
    3812:	46d6      	mov	lr, sl
    3814:	464f      	mov	r7, r9
    3816:	4646      	mov	r6, r8
    3818:	b5c0      	push	{r6, r7, lr}
    381a:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    381c:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    381e:	781c      	ldrb	r4, [r3, #0]
    3820:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    3822:	2c09      	cmp	r4, #9
    3824:	d80e      	bhi.n	3844 <chk_mounted+0x34>
    3826:	785a      	ldrb	r2, [r3, #1]
    3828:	2a3a      	cmp	r2, #58	; 0x3a
    382a:	d001      	beq.n	3830 <chk_mounted+0x20>
    382c:	2400      	movs	r4, #0
    382e:	e00a      	b.n	3846 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    3830:	3302      	adds	r3, #2
    3832:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    3834:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    3836:	2c07      	cmp	r4, #7
    3838:	d905      	bls.n	3846 <chk_mounted+0x36>
}
    383a:	bc1c      	pop	{r2, r3, r4}
    383c:	4690      	mov	r8, r2
    383e:	4699      	mov	r9, r3
    3840:	46a2      	mov	sl, r4
    3842:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3844:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    3846:	00a3      	lsls	r3, r4, #2
    3848:	4ac5      	ldr	r2, [pc, #788]	; (3b60 <chk_mounted+0x350>)
    384a:	589e      	ldr	r6, [r3, r2]
    384c:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    384e:	2e00      	cmp	r6, #0
    3850:	d100      	bne.n	3854 <chk_mounted+0x44>
    3852:	e0e8      	b.n	3a26 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    3854:	7833      	ldrb	r3, [r6, #0]
    3856:	2b00      	cmp	r3, #0
    3858:	d00d      	beq.n	3876 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    385a:	7870      	ldrb	r0, [r6, #1]
    385c:	4bc1      	ldr	r3, [pc, #772]	; (3b64 <chk_mounted+0x354>)
    385e:	4798      	blx	r3
    3860:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    3862:	07c2      	lsls	r2, r0, #31
    3864:	d407      	bmi.n	3876 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    3866:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    3868:	2d00      	cmp	r5, #0
    386a:	d0e6      	beq.n	383a <chk_mounted+0x2a>
    386c:	075b      	lsls	r3, r3, #29
    386e:	d400      	bmi.n	3872 <chk_mounted+0x62>
    3870:	e0db      	b.n	3a2a <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    3872:	300a      	adds	r0, #10
    3874:	e7e1      	b.n	383a <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    3876:	2300      	movs	r3, #0
    3878:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    387a:	b2e0      	uxtb	r0, r4
    387c:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    387e:	4bba      	ldr	r3, [pc, #744]	; (3b68 <chk_mounted+0x358>)
    3880:	4798      	blx	r3
    3882:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    3884:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    3886:	07da      	lsls	r2, r3, #31
    3888:	d4d7      	bmi.n	383a <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    388a:	2d00      	cmp	r5, #0
    388c:	d002      	beq.n	3894 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    388e:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3890:	075b      	lsls	r3, r3, #29
    3892:	d4d2      	bmi.n	383a <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    3894:	2100      	movs	r1, #0
    3896:	0030      	movs	r0, r6
    3898:	4bb4      	ldr	r3, [pc, #720]	; (3b6c <chk_mounted+0x35c>)
    389a:	4798      	blx	r3
    389c:	0003      	movs	r3, r0
    389e:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    38a0:	2801      	cmp	r0, #1
    38a2:	d100      	bne.n	38a6 <chk_mounted+0x96>
    38a4:	e09a      	b.n	39dc <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    38a6:	2b03      	cmp	r3, #3
    38a8:	d100      	bne.n	38ac <chk_mounted+0x9c>
    38aa:	e0c0      	b.n	3a2e <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    38ac:	200d      	movs	r0, #13
    38ae:	2b00      	cmp	r3, #0
    38b0:	d1c3      	bne.n	383a <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    38b2:	333c      	adds	r3, #60	; 0x3c
    38b4:	5cf2      	ldrb	r2, [r6, r3]
    38b6:	0212      	lsls	r2, r2, #8
    38b8:	3b01      	subs	r3, #1
    38ba:	5cf3      	ldrb	r3, [r6, r3]
    38bc:	4313      	orrs	r3, r2
    38be:	2280      	movs	r2, #128	; 0x80
    38c0:	0092      	lsls	r2, r2, #2
    38c2:	b21b      	sxth	r3, r3
    38c4:	4293      	cmp	r3, r2
    38c6:	d1b8      	bne.n	383a <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    38c8:	2347      	movs	r3, #71	; 0x47
    38ca:	5cf3      	ldrb	r3, [r6, r3]
    38cc:	021b      	lsls	r3, r3, #8
    38ce:	3abb      	subs	r2, #187	; 0xbb
    38d0:	3aff      	subs	r2, #255	; 0xff
    38d2:	5cb5      	ldrb	r5, [r6, r2]
    38d4:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    38d6:	d10d      	bne.n	38f4 <chk_mounted+0xe4>
    38d8:	2357      	movs	r3, #87	; 0x57
    38da:	5cf5      	ldrb	r5, [r6, r3]
    38dc:	062d      	lsls	r5, r5, #24
    38de:	3b01      	subs	r3, #1
    38e0:	5cf3      	ldrb	r3, [r6, r3]
    38e2:	041b      	lsls	r3, r3, #16
    38e4:	431d      	orrs	r5, r3
    38e6:	2354      	movs	r3, #84	; 0x54
    38e8:	5cf3      	ldrb	r3, [r6, r3]
    38ea:	431d      	orrs	r5, r3
    38ec:	2355      	movs	r3, #85	; 0x55
    38ee:	5cf3      	ldrb	r3, [r6, r3]
    38f0:	021b      	lsls	r3, r3, #8
    38f2:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    38f4:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    38f6:	2340      	movs	r3, #64	; 0x40
    38f8:	5cf2      	ldrb	r2, [r6, r3]
    38fa:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    38fc:	1e53      	subs	r3, r2, #1
    38fe:	200d      	movs	r0, #13
    3900:	2b01      	cmp	r3, #1
    3902:	d89a      	bhi.n	383a <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    3904:	233d      	movs	r3, #61	; 0x3d
    3906:	5cf1      	ldrb	r1, [r6, r3]
    3908:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    390a:	2900      	cmp	r1, #0
    390c:	d095      	beq.n	383a <chk_mounted+0x2a>
    390e:	1e4b      	subs	r3, r1, #1
    3910:	4219      	tst	r1, r3
    3912:	d192      	bne.n	383a <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    3914:	2342      	movs	r3, #66	; 0x42
    3916:	5cf3      	ldrb	r3, [r6, r3]
    3918:	021b      	lsls	r3, r3, #8
    391a:	3034      	adds	r0, #52	; 0x34
    391c:	5c30      	ldrb	r0, [r6, r0]
    391e:	4318      	orrs	r0, r3
    3920:	4680      	mov	r8, r0
    3922:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    3924:	200d      	movs	r0, #13
    3926:	4643      	mov	r3, r8
    3928:	071b      	lsls	r3, r3, #28
    392a:	d000      	beq.n	392e <chk_mounted+0x11e>
    392c:	e785      	b.n	383a <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    392e:	2344      	movs	r3, #68	; 0x44
    3930:	5cf3      	ldrb	r3, [r6, r3]
    3932:	021b      	lsls	r3, r3, #8
    3934:	3036      	adds	r0, #54	; 0x36
    3936:	5c30      	ldrb	r0, [r6, r0]
    3938:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    393a:	d10d      	bne.n	3958 <chk_mounted+0x148>
    393c:	3353      	adds	r3, #83	; 0x53
    393e:	5cf3      	ldrb	r3, [r6, r3]
    3940:	061b      	lsls	r3, r3, #24
    3942:	2052      	movs	r0, #82	; 0x52
    3944:	5c30      	ldrb	r0, [r6, r0]
    3946:	0400      	lsls	r0, r0, #16
    3948:	4303      	orrs	r3, r0
    394a:	2050      	movs	r0, #80	; 0x50
    394c:	5c30      	ldrb	r0, [r6, r0]
    394e:	4303      	orrs	r3, r0
    3950:	2051      	movs	r0, #81	; 0x51
    3952:	5c30      	ldrb	r0, [r6, r0]
    3954:	0200      	lsls	r0, r0, #8
    3956:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3958:	203f      	movs	r0, #63	; 0x3f
    395a:	5c30      	ldrb	r0, [r6, r0]
    395c:	0200      	lsls	r0, r0, #8
    395e:	273e      	movs	r7, #62	; 0x3e
    3960:	5df7      	ldrb	r7, [r6, r7]
    3962:	4307      	orrs	r7, r0
    3964:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    3966:	200d      	movs	r0, #13
    3968:	2f00      	cmp	r7, #0
    396a:	d100      	bne.n	396e <chk_mounted+0x15e>
    396c:	e765      	b.n	383a <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    396e:	436a      	muls	r2, r5
    3970:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    3972:	4642      	mov	r2, r8
    3974:	0917      	lsrs	r7, r2, #4
    3976:	4457      	add	r7, sl
    3978:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    397a:	42bb      	cmp	r3, r7
    397c:	d200      	bcs.n	3980 <chk_mounted+0x170>
    397e:	e75c      	b.n	383a <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3980:	1bd8      	subs	r0, r3, r7
    3982:	4b7b      	ldr	r3, [pc, #492]	; (3b70 <chk_mounted+0x360>)
    3984:	4798      	blx	r3
    3986:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    3988:	200d      	movs	r0, #13
    398a:	2b00      	cmp	r3, #0
    398c:	d100      	bne.n	3990 <chk_mounted+0x180>
    398e:	e754      	b.n	383a <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    3990:	4a78      	ldr	r2, [pc, #480]	; (3b74 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    3992:	429a      	cmp	r2, r3
    3994:	4192      	sbcs	r2, r2
    3996:	4252      	negs	r2, r2
    3998:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    399a:	4977      	ldr	r1, [pc, #476]	; (3b78 <chk_mounted+0x368>)
    399c:	428b      	cmp	r3, r1
    399e:	d848      	bhi.n	3a32 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    39a0:	3302      	adds	r3, #2
    39a2:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    39a4:	19e7      	adds	r7, r4, r7
    39a6:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    39a8:	4454      	add	r4, sl
    39aa:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    39ac:	200d      	movs	r0, #13
    39ae:	4641      	mov	r1, r8
    39b0:	2900      	cmp	r1, #0
    39b2:	d100      	bne.n	39b6 <chk_mounted+0x1a6>
    39b4:	e741      	b.n	383a <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    39b6:	444c      	add	r4, r9
    39b8:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    39ba:	2a02      	cmp	r2, #2
    39bc:	d12c      	bne.n	3a18 <chk_mounted+0x208>
    39be:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    39c0:	496e      	ldr	r1, [pc, #440]	; (3b7c <chk_mounted+0x36c>)
    39c2:	468c      	mov	ip, r1
    39c4:	4463      	add	r3, ip
    39c6:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    39c8:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    39ca:	429d      	cmp	r5, r3
    39cc:	d200      	bcs.n	39d0 <chk_mounted+0x1c0>
    39ce:	e734      	b.n	383a <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    39d0:	2301      	movs	r3, #1
    39d2:	425b      	negs	r3, r3
    39d4:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    39d6:	2300      	movs	r3, #0
    39d8:	60f3      	str	r3, [r6, #12]
    39da:	e0b6      	b.n	3b4a <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    39dc:	33f2      	adds	r3, #242	; 0xf2
    39de:	33ff      	adds	r3, #255	; 0xff
    39e0:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    39e2:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    39e4:	2b00      	cmp	r3, #0
    39e6:	d100      	bne.n	39ea <chk_mounted+0x1da>
    39e8:	e727      	b.n	383a <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    39ea:	23fa      	movs	r3, #250	; 0xfa
    39ec:	33ff      	adds	r3, #255	; 0xff
    39ee:	5cf4      	ldrb	r4, [r6, r3]
    39f0:	0624      	lsls	r4, r4, #24
    39f2:	3b01      	subs	r3, #1
    39f4:	5cf3      	ldrb	r3, [r6, r3]
    39f6:	041b      	lsls	r3, r3, #16
    39f8:	431c      	orrs	r4, r3
    39fa:	23fb      	movs	r3, #251	; 0xfb
    39fc:	005b      	lsls	r3, r3, #1
    39fe:	5cf3      	ldrb	r3, [r6, r3]
    3a00:	431c      	orrs	r4, r3
    3a02:	23f8      	movs	r3, #248	; 0xf8
    3a04:	33ff      	adds	r3, #255	; 0xff
    3a06:	5cf2      	ldrb	r2, [r6, r3]
    3a08:	0212      	lsls	r2, r2, #8
    3a0a:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3a0c:	0021      	movs	r1, r4
    3a0e:	0030      	movs	r0, r6
    3a10:	4b56      	ldr	r3, [pc, #344]	; (3b6c <chk_mounted+0x35c>)
    3a12:	4798      	blx	r3
    3a14:	0003      	movs	r3, r0
    3a16:	e746      	b.n	38a6 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3a18:	2103      	movs	r1, #3
    3a1a:	4359      	muls	r1, r3
    3a1c:	0849      	lsrs	r1, r1, #1
    3a1e:	2001      	movs	r0, #1
    3a20:	4003      	ands	r3, r0
    3a22:	18cb      	adds	r3, r1, r3
    3a24:	e7cc      	b.n	39c0 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3a26:	200c      	movs	r0, #12
    3a28:	e707      	b.n	383a <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    3a2a:	2000      	movs	r0, #0
    3a2c:	e705      	b.n	383a <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    3a2e:	2001      	movs	r0, #1
    3a30:	e703      	b.n	383a <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3a32:	3302      	adds	r3, #2
    3a34:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3a36:	19e7      	adds	r7, r4, r7
    3a38:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3a3a:	4652      	mov	r2, sl
    3a3c:	18a2      	adds	r2, r4, r2
    3a3e:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3a40:	200d      	movs	r0, #13
    3a42:	4642      	mov	r2, r8
    3a44:	2a00      	cmp	r2, #0
    3a46:	d000      	beq.n	3a4a <chk_mounted+0x23a>
    3a48:	e6f7      	b.n	383a <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3a4a:	225f      	movs	r2, #95	; 0x5f
    3a4c:	5cb2      	ldrb	r2, [r6, r2]
    3a4e:	0612      	lsls	r2, r2, #24
    3a50:	215e      	movs	r1, #94	; 0x5e
    3a52:	5c71      	ldrb	r1, [r6, r1]
    3a54:	0409      	lsls	r1, r1, #16
    3a56:	430a      	orrs	r2, r1
    3a58:	215c      	movs	r1, #92	; 0x5c
    3a5a:	5c71      	ldrb	r1, [r6, r1]
    3a5c:	430a      	orrs	r2, r1
    3a5e:	215d      	movs	r1, #93	; 0x5d
    3a60:	5c71      	ldrb	r1, [r6, r1]
    3a62:	0209      	lsls	r1, r1, #8
    3a64:	430a      	orrs	r2, r1
    3a66:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3a68:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3a6a:	4a44      	ldr	r2, [pc, #272]	; (3b7c <chk_mounted+0x36c>)
    3a6c:	4694      	mov	ip, r2
    3a6e:	4463      	add	r3, ip
    3a70:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3a72:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3a74:	429d      	cmp	r5, r3
    3a76:	d200      	bcs.n	3a7a <chk_mounted+0x26a>
    3a78:	e6df      	b.n	383a <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3a7a:	2301      	movs	r3, #1
    3a7c:	425b      	negs	r3, r3
    3a7e:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3a80:	2300      	movs	r3, #0
    3a82:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    3a84:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3a86:	3361      	adds	r3, #97	; 0x61
    3a88:	5cf3      	ldrb	r3, [r6, r3]
    3a8a:	021b      	lsls	r3, r3, #8
    3a8c:	2260      	movs	r2, #96	; 0x60
    3a8e:	5cb2      	ldrb	r2, [r6, r2]
    3a90:	431a      	orrs	r2, r3
    3a92:	1912      	adds	r2, r2, r4
    3a94:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3a96:	0031      	movs	r1, r6
    3a98:	3130      	adds	r1, #48	; 0x30
    3a9a:	7870      	ldrb	r0, [r6, #1]
    3a9c:	2301      	movs	r3, #1
    3a9e:	4c38      	ldr	r4, [pc, #224]	; (3b80 <chk_mounted+0x370>)
    3aa0:	47a0      	blx	r4
    3aa2:	2203      	movs	r2, #3
    3aa4:	2800      	cmp	r0, #0
    3aa6:	d150      	bne.n	3b4a <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3aa8:	4b36      	ldr	r3, [pc, #216]	; (3b84 <chk_mounted+0x374>)
    3aaa:	5cf2      	ldrb	r2, [r6, r3]
    3aac:	0212      	lsls	r2, r2, #8
    3aae:	4b36      	ldr	r3, [pc, #216]	; (3b88 <chk_mounted+0x378>)
    3ab0:	5cf3      	ldrb	r3, [r6, r3]
    3ab2:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3ab4:	4935      	ldr	r1, [pc, #212]	; (3b8c <chk_mounted+0x37c>)
    3ab6:	b21b      	sxth	r3, r3
    3ab8:	2203      	movs	r2, #3
    3aba:	428b      	cmp	r3, r1
    3abc:	d145      	bne.n	3b4a <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3abe:	2333      	movs	r3, #51	; 0x33
    3ac0:	5cf3      	ldrb	r3, [r6, r3]
    3ac2:	061b      	lsls	r3, r3, #24
    3ac4:	322f      	adds	r2, #47	; 0x2f
    3ac6:	5cb2      	ldrb	r2, [r6, r2]
    3ac8:	0412      	lsls	r2, r2, #16
    3aca:	4313      	orrs	r3, r2
    3acc:	2230      	movs	r2, #48	; 0x30
    3ace:	5cb2      	ldrb	r2, [r6, r2]
    3ad0:	4313      	orrs	r3, r2
    3ad2:	2231      	movs	r2, #49	; 0x31
    3ad4:	5cb2      	ldrb	r2, [r6, r2]
    3ad6:	0212      	lsls	r2, r2, #8
    3ad8:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3ada:	492d      	ldr	r1, [pc, #180]	; (3b90 <chk_mounted+0x380>)
    3adc:	2203      	movs	r2, #3
    3ade:	428b      	cmp	r3, r1
    3ae0:	d133      	bne.n	3b4a <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    3ae2:	4b2c      	ldr	r3, [pc, #176]	; (3b94 <chk_mounted+0x384>)
    3ae4:	5cf3      	ldrb	r3, [r6, r3]
    3ae6:	061b      	lsls	r3, r3, #24
    3ae8:	4a2b      	ldr	r2, [pc, #172]	; (3b98 <chk_mounted+0x388>)
    3aea:	5cb2      	ldrb	r2, [r6, r2]
    3aec:	0412      	lsls	r2, r2, #16
    3aee:	4313      	orrs	r3, r2
    3af0:	2285      	movs	r2, #133	; 0x85
    3af2:	0092      	lsls	r2, r2, #2
    3af4:	5cb2      	ldrb	r2, [r6, r2]
    3af6:	4313      	orrs	r3, r2
    3af8:	4a28      	ldr	r2, [pc, #160]	; (3b9c <chk_mounted+0x38c>)
    3afa:	5cb2      	ldrb	r2, [r6, r2]
    3afc:	0212      	lsls	r2, r2, #8
    3afe:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3b00:	4927      	ldr	r1, [pc, #156]	; (3ba0 <chk_mounted+0x390>)
    3b02:	2203      	movs	r2, #3
    3b04:	428b      	cmp	r3, r1
    3b06:	d120      	bne.n	3b4a <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    3b08:	4b26      	ldr	r3, [pc, #152]	; (3ba4 <chk_mounted+0x394>)
    3b0a:	5cf3      	ldrb	r3, [r6, r3]
    3b0c:	061b      	lsls	r3, r3, #24
    3b0e:	4a26      	ldr	r2, [pc, #152]	; (3ba8 <chk_mounted+0x398>)
    3b10:	5cb2      	ldrb	r2, [r6, r2]
    3b12:	0412      	lsls	r2, r2, #16
    3b14:	4313      	orrs	r3, r2
    3b16:	2287      	movs	r2, #135	; 0x87
    3b18:	0092      	lsls	r2, r2, #2
    3b1a:	5cb2      	ldrb	r2, [r6, r2]
    3b1c:	4313      	orrs	r3, r2
    3b1e:	4a23      	ldr	r2, [pc, #140]	; (3bac <chk_mounted+0x39c>)
    3b20:	5cb2      	ldrb	r2, [r6, r2]
    3b22:	0212      	lsls	r2, r2, #8
    3b24:	4313      	orrs	r3, r2
    3b26:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    3b28:	4b21      	ldr	r3, [pc, #132]	; (3bb0 <chk_mounted+0x3a0>)
    3b2a:	5cf3      	ldrb	r3, [r6, r3]
    3b2c:	061b      	lsls	r3, r3, #24
    3b2e:	4a21      	ldr	r2, [pc, #132]	; (3bb4 <chk_mounted+0x3a4>)
    3b30:	5cb2      	ldrb	r2, [r6, r2]
    3b32:	0412      	lsls	r2, r2, #16
    3b34:	4313      	orrs	r3, r2
    3b36:	2286      	movs	r2, #134	; 0x86
    3b38:	0092      	lsls	r2, r2, #2
    3b3a:	5cb2      	ldrb	r2, [r6, r2]
    3b3c:	4313      	orrs	r3, r2
    3b3e:	4a1e      	ldr	r2, [pc, #120]	; (3bb8 <chk_mounted+0x3a8>)
    3b40:	5cb2      	ldrb	r2, [r6, r2]
    3b42:	0212      	lsls	r2, r2, #8
    3b44:	4313      	orrs	r3, r2
    3b46:	6133      	str	r3, [r6, #16]
    3b48:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    3b4a:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    3b4c:	4a1b      	ldr	r2, [pc, #108]	; (3bbc <chk_mounted+0x3ac>)
    3b4e:	8813      	ldrh	r3, [r2, #0]
    3b50:	3301      	adds	r3, #1
    3b52:	b29b      	uxth	r3, r3
    3b54:	8013      	strh	r3, [r2, #0]
    3b56:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    3b58:	2000      	movs	r0, #0
    3b5a:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    3b5c:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    3b5e:	e66c      	b.n	383a <chk_mounted+0x2a>
    3b60:	20000150 	.word	0x20000150
    3b64:	00003501 	.word	0x00003501
    3b68:	00003465 	.word	0x00003465
    3b6c:	0000376d 	.word	0x0000376d
    3b70:	0000519d 	.word	0x0000519d
    3b74:	00000ff5 	.word	0x00000ff5
    3b78:	0000fff5 	.word	0x0000fff5
    3b7c:	000001ff 	.word	0x000001ff
    3b80:	0000351d 	.word	0x0000351d
    3b84:	0000022f 	.word	0x0000022f
    3b88:	0000022e 	.word	0x0000022e
    3b8c:	ffffaa55 	.word	0xffffaa55
    3b90:	41615252 	.word	0x41615252
    3b94:	00000217 	.word	0x00000217
    3b98:	00000216 	.word	0x00000216
    3b9c:	00000215 	.word	0x00000215
    3ba0:	61417272 	.word	0x61417272
    3ba4:	0000021f 	.word	0x0000021f
    3ba8:	0000021e 	.word	0x0000021e
    3bac:	0000021d 	.word	0x0000021d
    3bb0:	0000021b 	.word	0x0000021b
    3bb4:	0000021a 	.word	0x0000021a
    3bb8:	00000219 	.word	0x00000219
    3bbc:	20000170 	.word	0x20000170

00003bc0 <move_window>:
{
    3bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bc2:	46ce      	mov	lr, r9
    3bc4:	b500      	push	{lr}
    3bc6:	b082      	sub	sp, #8
    3bc8:	0004      	movs	r4, r0
    3bca:	000f      	movs	r7, r1
	wsect = fs->winsect;
    3bcc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    3bce:	428d      	cmp	r5, r1
    3bd0:	d03f      	beq.n	3c52 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    3bd2:	7903      	ldrb	r3, [r0, #4]
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d107      	bne.n	3be8 <move_window+0x28>
	return FR_OK;
    3bd8:	2300      	movs	r3, #0
		if (sector) {
    3bda:	2f00      	cmp	r7, #0
    3bdc:	d12c      	bne.n	3c38 <move_window+0x78>
}
    3bde:	0018      	movs	r0, r3
    3be0:	b002      	add	sp, #8
    3be2:	bc04      	pop	{r2}
    3be4:	4691      	mov	r9, r2
    3be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3be8:	2330      	movs	r3, #48	; 0x30
    3bea:	469c      	mov	ip, r3
    3bec:	4484      	add	ip, r0
    3bee:	4663      	mov	r3, ip
    3bf0:	4661      	mov	r1, ip
    3bf2:	9301      	str	r3, [sp, #4]
    3bf4:	7840      	ldrb	r0, [r0, #1]
    3bf6:	2301      	movs	r3, #1
    3bf8:	002a      	movs	r2, r5
    3bfa:	4e17      	ldr	r6, [pc, #92]	; (3c58 <move_window+0x98>)
    3bfc:	47b0      	blx	r6
				return FR_DISK_ERR;
    3bfe:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3c00:	2800      	cmp	r0, #0
    3c02:	d1ec      	bne.n	3bde <move_window+0x1e>
			fs->wflag = 0;
    3c04:	2300      	movs	r3, #0
    3c06:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3c08:	6a23      	ldr	r3, [r4, #32]
    3c0a:	69e2      	ldr	r2, [r4, #28]
    3c0c:	4694      	mov	ip, r2
    3c0e:	4463      	add	r3, ip
    3c10:	429d      	cmp	r5, r3
    3c12:	d2e1      	bcs.n	3bd8 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3c14:	78e6      	ldrb	r6, [r4, #3]
    3c16:	2e01      	cmp	r6, #1
    3c18:	d9de      	bls.n	3bd8 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    3c1a:	4b0f      	ldr	r3, [pc, #60]	; (3c58 <move_window+0x98>)
    3c1c:	4699      	mov	r9, r3
					wsect += fs->fsize;
    3c1e:	69e3      	ldr	r3, [r4, #28]
    3c20:	469c      	mov	ip, r3
    3c22:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    3c24:	7860      	ldrb	r0, [r4, #1]
    3c26:	2301      	movs	r3, #1
    3c28:	002a      	movs	r2, r5
    3c2a:	9901      	ldr	r1, [sp, #4]
    3c2c:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3c2e:	3e01      	subs	r6, #1
    3c30:	b2f6      	uxtb	r6, r6
    3c32:	2e01      	cmp	r6, #1
    3c34:	d1f3      	bne.n	3c1e <move_window+0x5e>
    3c36:	e7cf      	b.n	3bd8 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3c38:	0021      	movs	r1, r4
    3c3a:	3130      	adds	r1, #48	; 0x30
    3c3c:	7860      	ldrb	r0, [r4, #1]
    3c3e:	3301      	adds	r3, #1
    3c40:	003a      	movs	r2, r7
    3c42:	4d06      	ldr	r5, [pc, #24]	; (3c5c <move_window+0x9c>)
    3c44:	47a8      	blx	r5
				return FR_DISK_ERR;
    3c46:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3c48:	2800      	cmp	r0, #0
    3c4a:	d1c8      	bne.n	3bde <move_window+0x1e>
			fs->winsect = sector;
    3c4c:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    3c4e:	2300      	movs	r3, #0
    3c50:	e7c5      	b.n	3bde <move_window+0x1e>
    3c52:	2300      	movs	r3, #0
    3c54:	e7c3      	b.n	3bde <move_window+0x1e>
    3c56:	46c0      	nop			; (mov r8, r8)
    3c58:	000035a1 	.word	0x000035a1
    3c5c:	0000351d 	.word	0x0000351d

00003c60 <get_fat>:
{
    3c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c62:	0005      	movs	r5, r0
    3c64:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3c66:	2901      	cmp	r1, #1
    3c68:	d974      	bls.n	3d54 <get_fat+0xf4>
		return 1;
    3c6a:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3c6c:	69ab      	ldr	r3, [r5, #24]
    3c6e:	4299      	cmp	r1, r3
    3c70:	d271      	bcs.n	3d56 <get_fat+0xf6>
	switch (fs->fs_type) {
    3c72:	782b      	ldrb	r3, [r5, #0]
    3c74:	2b02      	cmp	r3, #2
    3c76:	d034      	beq.n	3ce2 <get_fat+0x82>
    3c78:	2b03      	cmp	r3, #3
    3c7a:	d049      	beq.n	3d10 <get_fat+0xb0>
    3c7c:	2b01      	cmp	r3, #1
    3c7e:	d002      	beq.n	3c86 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3c80:	2001      	movs	r0, #1
    3c82:	4240      	negs	r0, r0
    3c84:	e067      	b.n	3d56 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    3c86:	084e      	lsrs	r6, r1, #1
    3c88:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    3c8a:	0a71      	lsrs	r1, r6, #9
    3c8c:	6a2b      	ldr	r3, [r5, #32]
    3c8e:	469c      	mov	ip, r3
    3c90:	4461      	add	r1, ip
    3c92:	0028      	movs	r0, r5
    3c94:	4b30      	ldr	r3, [pc, #192]	; (3d58 <get_fat+0xf8>)
    3c96:	4798      	blx	r3
    3c98:	2800      	cmp	r0, #0
    3c9a:	d002      	beq.n	3ca2 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3c9c:	2001      	movs	r0, #1
    3c9e:	4240      	negs	r0, r0
    3ca0:	e059      	b.n	3d56 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    3ca2:	05f3      	lsls	r3, r6, #23
    3ca4:	0ddb      	lsrs	r3, r3, #23
    3ca6:	18eb      	adds	r3, r5, r3
    3ca8:	3330      	adds	r3, #48	; 0x30
    3caa:	781f      	ldrb	r7, [r3, #0]
    3cac:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    3cae:	0a71      	lsrs	r1, r6, #9
    3cb0:	6a2b      	ldr	r3, [r5, #32]
    3cb2:	469c      	mov	ip, r3
    3cb4:	4461      	add	r1, ip
    3cb6:	0028      	movs	r0, r5
    3cb8:	4b27      	ldr	r3, [pc, #156]	; (3d58 <get_fat+0xf8>)
    3cba:	4798      	blx	r3
    3cbc:	2800      	cmp	r0, #0
    3cbe:	d002      	beq.n	3cc6 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3cc0:	2001      	movs	r0, #1
    3cc2:	4240      	negs	r0, r0
    3cc4:	e047      	b.n	3d56 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    3cc6:	05f6      	lsls	r6, r6, #23
    3cc8:	0df6      	lsrs	r6, r6, #23
    3cca:	19ad      	adds	r5, r5, r6
    3ccc:	3530      	adds	r5, #48	; 0x30
    3cce:	7828      	ldrb	r0, [r5, #0]
    3cd0:	0200      	lsls	r0, r0, #8
    3cd2:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    3cd4:	07e3      	lsls	r3, r4, #31
    3cd6:	d501      	bpl.n	3cdc <get_fat+0x7c>
    3cd8:	0900      	lsrs	r0, r0, #4
    3cda:	e03c      	b.n	3d56 <get_fat+0xf6>
    3cdc:	0500      	lsls	r0, r0, #20
    3cde:	0d00      	lsrs	r0, r0, #20
    3ce0:	e039      	b.n	3d56 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    3ce2:	0a09      	lsrs	r1, r1, #8
    3ce4:	6a2b      	ldr	r3, [r5, #32]
    3ce6:	469c      	mov	ip, r3
    3ce8:	4461      	add	r1, ip
    3cea:	0028      	movs	r0, r5
    3cec:	4b1a      	ldr	r3, [pc, #104]	; (3d58 <get_fat+0xf8>)
    3cee:	4798      	blx	r3
    3cf0:	2800      	cmp	r0, #0
    3cf2:	d002      	beq.n	3cfa <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3cf4:	2001      	movs	r0, #1
    3cf6:	4240      	negs	r0, r0
    3cf8:	e02d      	b.n	3d56 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    3cfa:	0064      	lsls	r4, r4, #1
    3cfc:	23ff      	movs	r3, #255	; 0xff
    3cfe:	005b      	lsls	r3, r3, #1
    3d00:	401c      	ands	r4, r3
		return LD_WORD(p);
    3d02:	192d      	adds	r5, r5, r4
    3d04:	3530      	adds	r5, #48	; 0x30
    3d06:	786b      	ldrb	r3, [r5, #1]
    3d08:	021b      	lsls	r3, r3, #8
    3d0a:	7828      	ldrb	r0, [r5, #0]
    3d0c:	4318      	orrs	r0, r3
    3d0e:	e022      	b.n	3d56 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    3d10:	09c9      	lsrs	r1, r1, #7
    3d12:	6a2b      	ldr	r3, [r5, #32]
    3d14:	469c      	mov	ip, r3
    3d16:	4461      	add	r1, ip
    3d18:	0028      	movs	r0, r5
    3d1a:	4b0f      	ldr	r3, [pc, #60]	; (3d58 <get_fat+0xf8>)
    3d1c:	4798      	blx	r3
    3d1e:	2800      	cmp	r0, #0
    3d20:	d002      	beq.n	3d28 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3d22:	2001      	movs	r0, #1
    3d24:	4240      	negs	r0, r0
    3d26:	e016      	b.n	3d56 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    3d28:	00a4      	lsls	r4, r4, #2
    3d2a:	23fe      	movs	r3, #254	; 0xfe
    3d2c:	005b      	lsls	r3, r3, #1
    3d2e:	401c      	ands	r4, r3
    3d30:	0023      	movs	r3, r4
    3d32:	3330      	adds	r3, #48	; 0x30
    3d34:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    3d36:	78d8      	ldrb	r0, [r3, #3]
    3d38:	0600      	lsls	r0, r0, #24
    3d3a:	789a      	ldrb	r2, [r3, #2]
    3d3c:	0412      	lsls	r2, r2, #16
    3d3e:	4310      	orrs	r0, r2
    3d40:	192c      	adds	r4, r5, r4
    3d42:	3430      	adds	r4, #48	; 0x30
    3d44:	7822      	ldrb	r2, [r4, #0]
    3d46:	4310      	orrs	r0, r2
    3d48:	785b      	ldrb	r3, [r3, #1]
    3d4a:	021b      	lsls	r3, r3, #8
    3d4c:	4318      	orrs	r0, r3
    3d4e:	0100      	lsls	r0, r0, #4
    3d50:	0900      	lsrs	r0, r0, #4
    3d52:	e000      	b.n	3d56 <get_fat+0xf6>
		return 1;
    3d54:	2001      	movs	r0, #1
}
    3d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d58:	00003bc1 	.word	0x00003bc1

00003d5c <dir_sdi>:
{
    3d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d5e:	0004      	movs	r4, r0
    3d60:	000d      	movs	r5, r1
	dj->index = idx;
    3d62:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    3d64:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    3d66:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    3d68:	2901      	cmp	r1, #1
    3d6a:	d003      	beq.n	3d74 <dir_sdi+0x18>
    3d6c:	6823      	ldr	r3, [r4, #0]
    3d6e:	699a      	ldr	r2, [r3, #24]
    3d70:	4291      	cmp	r1, r2
    3d72:	d300      	bcc.n	3d76 <dir_sdi+0x1a>
}
    3d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    3d76:	2900      	cmp	r1, #0
    3d78:	d119      	bne.n	3dae <dir_sdi+0x52>
    3d7a:	781a      	ldrb	r2, [r3, #0]
    3d7c:	2a03      	cmp	r2, #3
    3d7e:	d013      	beq.n	3da8 <dir_sdi+0x4c>
		dj->clust = clst;
    3d80:	2200      	movs	r2, #0
    3d82:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    3d84:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    3d86:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    3d88:	42aa      	cmp	r2, r5
    3d8a:	d9f3      	bls.n	3d74 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    3d8c:	092a      	lsrs	r2, r5, #4
    3d8e:	b292      	uxth	r2, r2
    3d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3d92:	189b      	adds	r3, r3, r2
    3d94:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    3d96:	6823      	ldr	r3, [r4, #0]
    3d98:	3330      	adds	r3, #48	; 0x30
    3d9a:	220f      	movs	r2, #15
    3d9c:	4015      	ands	r5, r2
    3d9e:	016d      	lsls	r5, r5, #5
    3da0:	195d      	adds	r5, r3, r5
    3da2:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    3da4:	2000      	movs	r0, #0
    3da6:	e7e5      	b.n	3d74 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    3da8:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    3daa:	2900      	cmp	r1, #0
    3dac:	d0e8      	beq.n	3d80 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    3dae:	789e      	ldrb	r6, [r3, #2]
    3db0:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    3db2:	42b5      	cmp	r5, r6
    3db4:	d313      	bcc.n	3dde <dir_sdi+0x82>
    3db6:	1bad      	subs	r5, r5, r6
    3db8:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    3dba:	4f10      	ldr	r7, [pc, #64]	; (3dfc <dir_sdi+0xa0>)
    3dbc:	e000      	b.n	3dc0 <dir_sdi+0x64>
    3dbe:	001d      	movs	r5, r3
    3dc0:	6820      	ldr	r0, [r4, #0]
    3dc2:	47b8      	blx	r7
    3dc4:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3dc6:	1c43      	adds	r3, r0, #1
    3dc8:	d012      	beq.n	3df0 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    3dca:	2801      	cmp	r0, #1
    3dcc:	d912      	bls.n	3df4 <dir_sdi+0x98>
    3dce:	6823      	ldr	r3, [r4, #0]
    3dd0:	699b      	ldr	r3, [r3, #24]
    3dd2:	4298      	cmp	r0, r3
    3dd4:	d210      	bcs.n	3df8 <dir_sdi+0x9c>
    3dd6:	1bab      	subs	r3, r5, r6
    3dd8:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    3dda:	42b5      	cmp	r5, r6
    3ddc:	d2ef      	bcs.n	3dbe <dir_sdi+0x62>
		dj->clust = clst;
    3dde:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    3de0:	6820      	ldr	r0, [r4, #0]
    3de2:	4b07      	ldr	r3, [pc, #28]	; (3e00 <dir_sdi+0xa4>)
    3de4:	4798      	blx	r3
    3de6:	092b      	lsrs	r3, r5, #4
    3de8:	b29b      	uxth	r3, r3
    3dea:	1818      	adds	r0, r3, r0
    3dec:	6120      	str	r0, [r4, #16]
    3dee:	e7d2      	b.n	3d96 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3df0:	2001      	movs	r0, #1
    3df2:	e7bf      	b.n	3d74 <dir_sdi+0x18>
				return FR_INT_ERR;
    3df4:	2002      	movs	r0, #2
    3df6:	e7bd      	b.n	3d74 <dir_sdi+0x18>
    3df8:	2002      	movs	r0, #2
    3dfa:	e7bb      	b.n	3d74 <dir_sdi+0x18>
    3dfc:	00003c61 	.word	0x00003c61
    3e00:	00003707 	.word	0x00003707

00003e04 <put_fat>:
{
    3e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e06:	46c6      	mov	lr, r8
    3e08:	b500      	push	{lr}
    3e0a:	0007      	movs	r7, r0
    3e0c:	000c      	movs	r4, r1
    3e0e:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    3e10:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    3e12:	2901      	cmp	r1, #1
    3e14:	d902      	bls.n	3e1c <put_fat+0x18>
    3e16:	6983      	ldr	r3, [r0, #24]
    3e18:	4299      	cmp	r1, r3
    3e1a:	d303      	bcc.n	3e24 <put_fat+0x20>
}
    3e1c:	0028      	movs	r0, r5
    3e1e:	bc04      	pop	{r2}
    3e20:	4690      	mov	r8, r2
    3e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    3e24:	7803      	ldrb	r3, [r0, #0]
    3e26:	2b02      	cmp	r3, #2
    3e28:	d053      	beq.n	3ed2 <put_fat+0xce>
    3e2a:	2b03      	cmp	r3, #3
    3e2c:	d063      	beq.n	3ef6 <put_fat+0xf2>
			res = FR_INT_ERR;
    3e2e:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    3e30:	2b01      	cmp	r3, #1
    3e32:	d002      	beq.n	3e3a <put_fat+0x36>
		fs->wflag = 1;
    3e34:	2301      	movs	r3, #1
    3e36:	713b      	strb	r3, [r7, #4]
    3e38:	e7f0      	b.n	3e1c <put_fat+0x18>
			bc = clst; bc += bc / 2;
    3e3a:	084b      	lsrs	r3, r1, #1
    3e3c:	4698      	mov	r8, r3
    3e3e:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3e40:	4643      	mov	r3, r8
    3e42:	0a59      	lsrs	r1, r3, #9
    3e44:	6a03      	ldr	r3, [r0, #32]
    3e46:	469c      	mov	ip, r3
    3e48:	4461      	add	r1, ip
    3e4a:	4b3b      	ldr	r3, [pc, #236]	; (3f38 <put_fat+0x134>)
    3e4c:	4798      	blx	r3
    3e4e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3e50:	d1f0      	bne.n	3e34 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    3e52:	4643      	mov	r3, r8
    3e54:	05db      	lsls	r3, r3, #23
    3e56:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    3e58:	07e2      	lsls	r2, r4, #31
    3e5a:	d51f      	bpl.n	3e9c <put_fat+0x98>
    3e5c:	18fb      	adds	r3, r7, r3
    3e5e:	3330      	adds	r3, #48	; 0x30
    3e60:	7819      	ldrb	r1, [r3, #0]
    3e62:	220f      	movs	r2, #15
    3e64:	400a      	ands	r2, r1
    3e66:	0131      	lsls	r1, r6, #4
    3e68:	20ff      	movs	r0, #255	; 0xff
    3e6a:	0100      	lsls	r0, r0, #4
    3e6c:	4001      	ands	r1, r0
    3e6e:	430a      	orrs	r2, r1
    3e70:	701a      	strb	r2, [r3, #0]
			bc++;
    3e72:	4644      	mov	r4, r8
    3e74:	3401      	adds	r4, #1
			fs->wflag = 1;
    3e76:	2301      	movs	r3, #1
    3e78:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3e7a:	0a61      	lsrs	r1, r4, #9
    3e7c:	6a3b      	ldr	r3, [r7, #32]
    3e7e:	469c      	mov	ip, r3
    3e80:	4461      	add	r1, ip
    3e82:	0038      	movs	r0, r7
    3e84:	4b2c      	ldr	r3, [pc, #176]	; (3f38 <put_fat+0x134>)
    3e86:	4798      	blx	r3
			if (res != FR_OK) break;
    3e88:	2800      	cmp	r0, #0
    3e8a:	d151      	bne.n	3f30 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    3e8c:	05e4      	lsls	r4, r4, #23
    3e8e:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    3e90:	0936      	lsrs	r6, r6, #4
    3e92:	b2f6      	uxtb	r6, r6
    3e94:	193c      	adds	r4, r7, r4
    3e96:	3430      	adds	r4, #48	; 0x30
    3e98:	7026      	strb	r6, [r4, #0]
			break;
    3e9a:	e7cb      	b.n	3e34 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    3e9c:	18fb      	adds	r3, r7, r3
    3e9e:	3330      	adds	r3, #48	; 0x30
    3ea0:	701e      	strb	r6, [r3, #0]
			bc++;
    3ea2:	4644      	mov	r4, r8
    3ea4:	3401      	adds	r4, #1
			fs->wflag = 1;
    3ea6:	2301      	movs	r3, #1
    3ea8:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3eaa:	0a61      	lsrs	r1, r4, #9
    3eac:	6a3b      	ldr	r3, [r7, #32]
    3eae:	469c      	mov	ip, r3
    3eb0:	4461      	add	r1, ip
    3eb2:	0038      	movs	r0, r7
    3eb4:	4b20      	ldr	r3, [pc, #128]	; (3f38 <put_fat+0x134>)
    3eb6:	4798      	blx	r3
			if (res != FR_OK) break;
    3eb8:	2800      	cmp	r0, #0
    3eba:	d13b      	bne.n	3f34 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    3ebc:	05e4      	lsls	r4, r4, #23
    3ebe:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    3ec0:	193b      	adds	r3, r7, r4
    3ec2:	3330      	adds	r3, #48	; 0x30
    3ec4:	781b      	ldrb	r3, [r3, #0]
    3ec6:	220f      	movs	r2, #15
    3ec8:	4393      	bics	r3, r2
    3eca:	0536      	lsls	r6, r6, #20
    3ecc:	0f36      	lsrs	r6, r6, #28
    3ece:	431e      	orrs	r6, r3
    3ed0:	e7e0      	b.n	3e94 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    3ed2:	0a09      	lsrs	r1, r1, #8
    3ed4:	6a03      	ldr	r3, [r0, #32]
    3ed6:	469c      	mov	ip, r3
    3ed8:	4461      	add	r1, ip
    3eda:	4b17      	ldr	r3, [pc, #92]	; (3f38 <put_fat+0x134>)
    3edc:	4798      	blx	r3
    3ede:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3ee0:	d1a8      	bne.n	3e34 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    3ee2:	0063      	lsls	r3, r4, #1
    3ee4:	24ff      	movs	r4, #255	; 0xff
    3ee6:	0064      	lsls	r4, r4, #1
    3ee8:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    3eea:	18fb      	adds	r3, r7, r3
    3eec:	3330      	adds	r3, #48	; 0x30
    3eee:	701e      	strb	r6, [r3, #0]
    3ef0:	0a36      	lsrs	r6, r6, #8
    3ef2:	705e      	strb	r6, [r3, #1]
			break;
    3ef4:	e79e      	b.n	3e34 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    3ef6:	09c9      	lsrs	r1, r1, #7
    3ef8:	6a03      	ldr	r3, [r0, #32]
    3efa:	469c      	mov	ip, r3
    3efc:	4461      	add	r1, ip
    3efe:	4b0e      	ldr	r3, [pc, #56]	; (3f38 <put_fat+0x134>)
    3f00:	4798      	blx	r3
    3f02:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3f04:	d196      	bne.n	3e34 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    3f06:	00a4      	lsls	r4, r4, #2
    3f08:	23fe      	movs	r3, #254	; 0xfe
    3f0a:	005b      	lsls	r3, r3, #1
    3f0c:	401c      	ands	r4, r3
    3f0e:	0022      	movs	r2, r4
    3f10:	3230      	adds	r2, #48	; 0x30
    3f12:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    3f14:	78d3      	ldrb	r3, [r2, #3]
    3f16:	193c      	adds	r4, r7, r4
    3f18:	3430      	adds	r4, #48	; 0x30
    3f1a:	091b      	lsrs	r3, r3, #4
    3f1c:	071b      	lsls	r3, r3, #28
    3f1e:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    3f20:	7026      	strb	r6, [r4, #0]
    3f22:	0a33      	lsrs	r3, r6, #8
    3f24:	7053      	strb	r3, [r2, #1]
    3f26:	0c33      	lsrs	r3, r6, #16
    3f28:	7093      	strb	r3, [r2, #2]
    3f2a:	0e36      	lsrs	r6, r6, #24
    3f2c:	70d6      	strb	r6, [r2, #3]
			break;
    3f2e:	e781      	b.n	3e34 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3f30:	0005      	movs	r5, r0
    3f32:	e77f      	b.n	3e34 <put_fat+0x30>
    3f34:	0005      	movs	r5, r0
    3f36:	e77d      	b.n	3e34 <put_fat+0x30>
    3f38:	00003bc1 	.word	0x00003bc1

00003f3c <create_chain>:
{
    3f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f3e:	46c6      	mov	lr, r8
    3f40:	b500      	push	{lr}
    3f42:	0005      	movs	r5, r0
    3f44:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    3f46:	2900      	cmp	r1, #0
    3f48:	d107      	bne.n	3f5a <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    3f4a:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    3f4c:	2e00      	cmp	r6, #0
    3f4e:	d00d      	beq.n	3f6c <create_chain+0x30>
    3f50:	6983      	ldr	r3, [r0, #24]
    3f52:	429e      	cmp	r6, r3
    3f54:	d30b      	bcc.n	3f6e <create_chain+0x32>
    3f56:	2601      	movs	r6, #1
    3f58:	e009      	b.n	3f6e <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    3f5a:	4b26      	ldr	r3, [pc, #152]	; (3ff4 <create_chain+0xb8>)
    3f5c:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    3f5e:	2801      	cmp	r0, #1
    3f60:	d93d      	bls.n	3fde <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    3f62:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    3f64:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    3f66:	4298      	cmp	r0, r3
    3f68:	d201      	bcs.n	3f6e <create_chain+0x32>
    3f6a:	e03d      	b.n	3fe8 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    3f6c:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    3f6e:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    3f70:	4f20      	ldr	r7, [pc, #128]	; (3ff4 <create_chain+0xb8>)
    3f72:	e00a      	b.n	3f8a <create_chain+0x4e>
    3f74:	0021      	movs	r1, r4
    3f76:	0028      	movs	r0, r5
    3f78:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    3f7a:	2800      	cmp	r0, #0
    3f7c:	d00d      	beq.n	3f9a <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    3f7e:	1c43      	adds	r3, r0, #1
    3f80:	d032      	beq.n	3fe8 <create_chain+0xac>
    3f82:	2801      	cmp	r0, #1
    3f84:	d030      	beq.n	3fe8 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    3f86:	42b4      	cmp	r4, r6
    3f88:	d02d      	beq.n	3fe6 <create_chain+0xaa>
		ncl++;							/* Next cluster */
    3f8a:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    3f8c:	69ab      	ldr	r3, [r5, #24]
    3f8e:	429c      	cmp	r4, r3
    3f90:	d3f0      	bcc.n	3f74 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    3f92:	2e01      	cmp	r6, #1
    3f94:	d925      	bls.n	3fe2 <create_chain+0xa6>
			ncl = 2;
    3f96:	2402      	movs	r4, #2
    3f98:	e7ec      	b.n	3f74 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    3f9a:	4a17      	ldr	r2, [pc, #92]	; (3ff8 <create_chain+0xbc>)
    3f9c:	0021      	movs	r1, r4
    3f9e:	0028      	movs	r0, r5
    3fa0:	4b16      	ldr	r3, [pc, #88]	; (3ffc <create_chain+0xc0>)
    3fa2:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    3fa4:	2800      	cmp	r0, #0
    3fa6:	d113      	bne.n	3fd0 <create_chain+0x94>
    3fa8:	4643      	mov	r3, r8
    3faa:	2b00      	cmp	r3, #0
    3fac:	d109      	bne.n	3fc2 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    3fae:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    3fb0:	692b      	ldr	r3, [r5, #16]
    3fb2:	1c5a      	adds	r2, r3, #1
    3fb4:	d01b      	beq.n	3fee <create_chain+0xb2>
			fs->free_clust--;
    3fb6:	3b01      	subs	r3, #1
    3fb8:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    3fba:	2301      	movs	r3, #1
    3fbc:	716b      	strb	r3, [r5, #5]
    3fbe:	0020      	movs	r0, r4
    3fc0:	e012      	b.n	3fe8 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    3fc2:	0022      	movs	r2, r4
    3fc4:	4641      	mov	r1, r8
    3fc6:	0028      	movs	r0, r5
    3fc8:	4b0c      	ldr	r3, [pc, #48]	; (3ffc <create_chain+0xc0>)
    3fca:	4798      	blx	r3
	if (res == FR_OK) {
    3fcc:	2800      	cmp	r0, #0
    3fce:	d0ee      	beq.n	3fae <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    3fd0:	3801      	subs	r0, #1
    3fd2:	4242      	negs	r2, r0
    3fd4:	4142      	adcs	r2, r0
    3fd6:	4250      	negs	r0, r2
    3fd8:	2301      	movs	r3, #1
    3fda:	4318      	orrs	r0, r3
    3fdc:	e004      	b.n	3fe8 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    3fde:	2001      	movs	r0, #1
    3fe0:	e002      	b.n	3fe8 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    3fe2:	2000      	movs	r0, #0
    3fe4:	e000      	b.n	3fe8 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    3fe6:	2000      	movs	r0, #0
}
    3fe8:	bc04      	pop	{r2}
    3fea:	4690      	mov	r8, r2
    3fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fee:	0020      	movs	r0, r4
    3ff0:	e7fa      	b.n	3fe8 <create_chain+0xac>
    3ff2:	46c0      	nop			; (mov r8, r8)
    3ff4:	00003c61 	.word	0x00003c61
    3ff8:	0fffffff 	.word	0x0fffffff
    3ffc:	00003e05 	.word	0x00003e05

00004000 <remove_chain>:
{
    4000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4002:	46ce      	mov	lr, r9
    4004:	4647      	mov	r7, r8
    4006:	b580      	push	{r7, lr}
    4008:	0004      	movs	r4, r0
    400a:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    400c:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    400e:	2901      	cmp	r1, #1
    4010:	d902      	bls.n	4018 <remove_chain+0x18>
    4012:	69a3      	ldr	r3, [r4, #24]
    4014:	4299      	cmp	r1, r3
    4016:	d303      	bcc.n	4020 <remove_chain+0x20>
}
    4018:	bc0c      	pop	{r2, r3}
    401a:	4690      	mov	r8, r2
    401c:	4699      	mov	r9, r3
    401e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4020:	4f13      	ldr	r7, [pc, #76]	; (4070 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4022:	4b14      	ldr	r3, [pc, #80]	; (4074 <remove_chain+0x74>)
    4024:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    4026:	2301      	movs	r3, #1
    4028:	4699      	mov	r9, r3
    402a:	e003      	b.n	4034 <remove_chain+0x34>
    402c:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    402e:	69a3      	ldr	r3, [r4, #24]
    4030:	42b3      	cmp	r3, r6
    4032:	d9f1      	bls.n	4018 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4034:	0029      	movs	r1, r5
    4036:	0020      	movs	r0, r4
    4038:	47b8      	blx	r7
    403a:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    403c:	d011      	beq.n	4062 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    403e:	2801      	cmp	r0, #1
    4040:	d011      	beq.n	4066 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4042:	1c43      	adds	r3, r0, #1
    4044:	d011      	beq.n	406a <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4046:	2200      	movs	r2, #0
    4048:	0029      	movs	r1, r5
    404a:	0020      	movs	r0, r4
    404c:	47c0      	blx	r8
			if (res != FR_OK) break;
    404e:	2800      	cmp	r0, #0
    4050:	d1e2      	bne.n	4018 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    4052:	6923      	ldr	r3, [r4, #16]
    4054:	1c5a      	adds	r2, r3, #1
    4056:	d0e9      	beq.n	402c <remove_chain+0x2c>
				fs->free_clust++;
    4058:	3301      	adds	r3, #1
    405a:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    405c:	464b      	mov	r3, r9
    405e:	7163      	strb	r3, [r4, #5]
    4060:	e7e4      	b.n	402c <remove_chain+0x2c>
    4062:	2000      	movs	r0, #0
    4064:	e7d8      	b.n	4018 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4066:	2002      	movs	r0, #2
    4068:	e7d6      	b.n	4018 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    406a:	2001      	movs	r0, #1
    406c:	e7d4      	b.n	4018 <remove_chain+0x18>
    406e:	46c0      	nop			; (mov r8, r8)
    4070:	00003c61 	.word	0x00003c61
    4074:	00003e05 	.word	0x00003e05

00004078 <dir_next>:
{
    4078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    407a:	46d6      	mov	lr, sl
    407c:	4647      	mov	r7, r8
    407e:	b580      	push	{r7, lr}
    4080:	0006      	movs	r6, r0
    4082:	000d      	movs	r5, r1
	i = dj->index + 1;
    4084:	88c4      	ldrh	r4, [r0, #6]
    4086:	3401      	adds	r4, #1
    4088:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    408a:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    408c:	2c00      	cmp	r4, #0
    408e:	d103      	bne.n	4098 <dir_next+0x20>
}
    4090:	bc0c      	pop	{r2, r3}
    4092:	4690      	mov	r8, r2
    4094:	469a      	mov	sl, r3
    4096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4098:	6933      	ldr	r3, [r6, #16]
    409a:	2b00      	cmp	r3, #0
    409c:	d0f8      	beq.n	4090 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    409e:	270f      	movs	r7, #15
    40a0:	4027      	ands	r7, r4
    40a2:	d10f      	bne.n	40c4 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    40a4:	3301      	adds	r3, #1
    40a6:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    40a8:	68f1      	ldr	r1, [r6, #12]
    40aa:	2900      	cmp	r1, #0
    40ac:	d104      	bne.n	40b8 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    40ae:	6833      	ldr	r3, [r6, #0]
    40b0:	891b      	ldrh	r3, [r3, #8]
    40b2:	42a3      	cmp	r3, r4
    40b4:	d9ec      	bls.n	4090 <dir_next+0x18>
    40b6:	e005      	b.n	40c4 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    40b8:	6830      	ldr	r0, [r6, #0]
    40ba:	7883      	ldrb	r3, [r0, #2]
    40bc:	3b01      	subs	r3, #1
    40be:	0922      	lsrs	r2, r4, #4
    40c0:	421a      	tst	r2, r3
    40c2:	d007      	beq.n	40d4 <dir_next+0x5c>
	dj->index = i;
    40c4:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    40c6:	6833      	ldr	r3, [r6, #0]
    40c8:	3330      	adds	r3, #48	; 0x30
    40ca:	017f      	lsls	r7, r7, #5
    40cc:	19df      	adds	r7, r3, r7
    40ce:	6177      	str	r7, [r6, #20]
	return FR_OK;
    40d0:	2000      	movs	r0, #0
    40d2:	e7dd      	b.n	4090 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    40d4:	4b2c      	ldr	r3, [pc, #176]	; (4188 <dir_next+0x110>)
    40d6:	4798      	blx	r3
    40d8:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    40da:	2002      	movs	r0, #2
    40dc:	4643      	mov	r3, r8
    40de:	2b01      	cmp	r3, #1
    40e0:	d9d6      	bls.n	4090 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    40e2:	3301      	adds	r3, #1
    40e4:	d04b      	beq.n	417e <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    40e6:	6833      	ldr	r3, [r6, #0]
    40e8:	699a      	ldr	r2, [r3, #24]
    40ea:	4590      	cmp	r8, r2
    40ec:	d33f      	bcc.n	416e <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    40ee:	3002      	adds	r0, #2
    40f0:	2d00      	cmp	r5, #0
    40f2:	d0cd      	beq.n	4090 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    40f4:	68f1      	ldr	r1, [r6, #12]
    40f6:	0018      	movs	r0, r3
    40f8:	4b24      	ldr	r3, [pc, #144]	; (418c <dir_next+0x114>)
    40fa:	4798      	blx	r3
    40fc:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    40fe:	2007      	movs	r0, #7
    4100:	4643      	mov	r3, r8
    4102:	2b00      	cmp	r3, #0
    4104:	d0c4      	beq.n	4090 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    4106:	3805      	subs	r0, #5
    4108:	2b01      	cmp	r3, #1
    410a:	d0c1      	beq.n	4090 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    410c:	3801      	subs	r0, #1
    410e:	3301      	adds	r3, #1
    4110:	d0be      	beq.n	4090 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    4112:	2100      	movs	r1, #0
    4114:	6830      	ldr	r0, [r6, #0]
    4116:	4b1e      	ldr	r3, [pc, #120]	; (4190 <dir_next+0x118>)
    4118:	4798      	blx	r3
    411a:	0003      	movs	r3, r0
    411c:	2001      	movs	r0, #1
    411e:	2b00      	cmp	r3, #0
    4120:	d1b6      	bne.n	4090 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    4122:	6830      	ldr	r0, [r6, #0]
    4124:	3030      	adds	r0, #48	; 0x30
    4126:	2280      	movs	r2, #128	; 0x80
    4128:	0092      	lsls	r2, r2, #2
    412a:	2100      	movs	r1, #0
    412c:	4b19      	ldr	r3, [pc, #100]	; (4194 <dir_next+0x11c>)
    412e:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    4130:	6835      	ldr	r5, [r6, #0]
    4132:	4641      	mov	r1, r8
    4134:	0028      	movs	r0, r5
    4136:	4b18      	ldr	r3, [pc, #96]	; (4198 <dir_next+0x120>)
    4138:	4798      	blx	r3
    413a:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    413c:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    413e:	2301      	movs	r3, #1
    4140:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4142:	6833      	ldr	r3, [r6, #0]
    4144:	789a      	ldrb	r2, [r3, #2]
    4146:	42aa      	cmp	r2, r5
    4148:	d90e      	bls.n	4168 <dir_next+0xf0>
						dj->fs->wflag = 1;
    414a:	4652      	mov	r2, sl
    414c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    414e:	2100      	movs	r1, #0
    4150:	6830      	ldr	r0, [r6, #0]
    4152:	4b0f      	ldr	r3, [pc, #60]	; (4190 <dir_next+0x118>)
    4154:	4798      	blx	r3
    4156:	2800      	cmp	r0, #0
    4158:	d113      	bne.n	4182 <dir_next+0x10a>
						dj->fs->winsect++;
    415a:	6832      	ldr	r2, [r6, #0]
    415c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    415e:	3301      	adds	r3, #1
    4160:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4162:	3501      	adds	r5, #1
    4164:	b2ed      	uxtb	r5, r5
    4166:	e7ec      	b.n	4142 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    4168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    416a:	1b52      	subs	r2, r2, r5
    416c:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    416e:	4643      	mov	r3, r8
    4170:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    4172:	4641      	mov	r1, r8
    4174:	6830      	ldr	r0, [r6, #0]
    4176:	4b08      	ldr	r3, [pc, #32]	; (4198 <dir_next+0x120>)
    4178:	4798      	blx	r3
    417a:	6130      	str	r0, [r6, #16]
    417c:	e7a2      	b.n	40c4 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    417e:	2001      	movs	r0, #1
    4180:	e786      	b.n	4090 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4182:	2001      	movs	r0, #1
    4184:	e784      	b.n	4090 <dir_next+0x18>
    4186:	46c0      	nop			; (mov r8, r8)
    4188:	00003c61 	.word	0x00003c61
    418c:	00003f3d 	.word	0x00003f3d
    4190:	00003bc1 	.word	0x00003bc1
    4194:	000036f5 	.word	0x000036f5
    4198:	00003707 	.word	0x00003707

0000419c <dir_find>:
{
    419c:	b5f0      	push	{r4, r5, r6, r7, lr}
    419e:	46de      	mov	lr, fp
    41a0:	4657      	mov	r7, sl
    41a2:	464e      	mov	r6, r9
    41a4:	4645      	mov	r5, r8
    41a6:	b5e0      	push	{r5, r6, r7, lr}
    41a8:	b083      	sub	sp, #12
    41aa:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    41ac:	2100      	movs	r1, #0
    41ae:	4b5a      	ldr	r3, [pc, #360]	; (4318 <dir_find+0x17c>)
    41b0:	4798      	blx	r3
    41b2:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    41b4:	d000      	beq.n	41b8 <dir_find+0x1c>
    41b6:	e09e      	b.n	42f6 <dir_find+0x15a>
    41b8:	23ff      	movs	r3, #255	; 0xff
    41ba:	4699      	mov	r9, r3
    41bc:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    41be:	4b57      	ldr	r3, [pc, #348]	; (431c <dir_find+0x180>)
    41c0:	469b      	mov	fp, r3
    41c2:	e01b      	b.n	41fc <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    41c4:	2b0f      	cmp	r3, #15
    41c6:	d030      	beq.n	422a <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    41c8:	4653      	mov	r3, sl
    41ca:	2b00      	cmp	r3, #0
    41cc:	d105      	bne.n	41da <dir_find+0x3e>
    41ce:	0020      	movs	r0, r4
    41d0:	4b53      	ldr	r3, [pc, #332]	; (4320 <dir_find+0x184>)
    41d2:	4798      	blx	r3
    41d4:	4581      	cmp	r9, r0
    41d6:	d100      	bne.n	41da <dir_find+0x3e>
    41d8:	e08d      	b.n	42f6 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    41da:	2301      	movs	r3, #1
    41dc:	425b      	negs	r3, r3
    41de:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    41e0:	69a8      	ldr	r0, [r5, #24]
    41e2:	7ac3      	ldrb	r3, [r0, #11]
    41e4:	07db      	lsls	r3, r3, #31
    41e6:	d400      	bmi.n	41ea <dir_find+0x4e>
    41e8:	e07d      	b.n	42e6 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    41ea:	23ff      	movs	r3, #255	; 0xff
    41ec:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    41ee:	2100      	movs	r1, #0
    41f0:	0028      	movs	r0, r5
    41f2:	4b4c      	ldr	r3, [pc, #304]	; (4324 <dir_find+0x188>)
    41f4:	4798      	blx	r3
    41f6:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    41f8:	d000      	beq.n	41fc <dir_find+0x60>
    41fa:	e07c      	b.n	42f6 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    41fc:	6929      	ldr	r1, [r5, #16]
    41fe:	6828      	ldr	r0, [r5, #0]
    4200:	47d8      	blx	fp
    4202:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    4204:	d177      	bne.n	42f6 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    4206:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    4208:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    420a:	2e00      	cmp	r6, #0
    420c:	d100      	bne.n	4210 <dir_find+0x74>
    420e:	e080      	b.n	4312 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    4210:	7ae2      	ldrb	r2, [r4, #11]
    4212:	233f      	movs	r3, #63	; 0x3f
    4214:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    4216:	2ee5      	cmp	r6, #229	; 0xe5
    4218:	d100      	bne.n	421c <dir_find+0x80>
    421a:	e077      	b.n	430c <dir_find+0x170>
    421c:	0712      	lsls	r2, r2, #28
    421e:	d5d1      	bpl.n	41c4 <dir_find+0x28>
    4220:	2b0f      	cmp	r3, #15
    4222:	d002      	beq.n	422a <dir_find+0x8e>
			ord = 0xFF;
    4224:	23ff      	movs	r3, #255	; 0xff
    4226:	469a      	mov	sl, r3
    4228:	e7e1      	b.n	41ee <dir_find+0x52>
				if (dj->lfn) {
    422a:	69ef      	ldr	r7, [r5, #28]
    422c:	2f00      	cmp	r7, #0
    422e:	d0de      	beq.n	41ee <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    4230:	0673      	lsls	r3, r6, #25
    4232:	d518      	bpl.n	4266 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    4234:	7b63      	ldrb	r3, [r4, #13]
    4236:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    4238:	2340      	movs	r3, #64	; 0x40
    423a:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    423c:	88eb      	ldrh	r3, [r5, #6]
    423e:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4240:	7b63      	ldrb	r3, [r4, #13]
    4242:	9300      	str	r3, [sp, #0]
    4244:	22ff      	movs	r2, #255	; 0xff
    4246:	4692      	mov	sl, r2
    4248:	454b      	cmp	r3, r9
    424a:	d1d0      	bne.n	41ee <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    424c:	7823      	ldrb	r3, [r4, #0]
    424e:	3abf      	subs	r2, #191	; 0xbf
    4250:	4393      	bics	r3, r2
    4252:	3b01      	subs	r3, #1
    4254:	005a      	lsls	r2, r3, #1
    4256:	18d2      	adds	r2, r2, r3
    4258:	0092      	lsls	r2, r2, #2
    425a:	4692      	mov	sl, r2
    425c:	449a      	add	sl, r3
	s = 0; wc = 1;
    425e:	2201      	movs	r2, #1
    4260:	2300      	movs	r3, #0
    4262:	4699      	mov	r9, r3
    4264:	e01d      	b.n	42a2 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4266:	45b2      	cmp	sl, r6
    4268:	d0ea      	beq.n	4240 <dir_find+0xa4>
    426a:	23ff      	movs	r3, #255	; 0xff
    426c:	469a      	mov	sl, r3
    426e:	e7be      	b.n	41ee <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4270:	4b2d      	ldr	r3, [pc, #180]	; (4328 <dir_find+0x18c>)
    4272:	4798      	blx	r3
    4274:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    4276:	4653      	mov	r3, sl
    4278:	2bfe      	cmp	r3, #254	; 0xfe
    427a:	d81f      	bhi.n	42bc <dir_find+0x120>
    427c:	2301      	movs	r3, #1
    427e:	4453      	add	r3, sl
    4280:	4698      	mov	r8, r3
    4282:	4653      	mov	r3, sl
    4284:	005b      	lsls	r3, r3, #1
    4286:	5bd8      	ldrh	r0, [r3, r7]
    4288:	4b27      	ldr	r3, [pc, #156]	; (4328 <dir_find+0x18c>)
    428a:	4798      	blx	r3
    428c:	0002      	movs	r2, r0
    428e:	9b01      	ldr	r3, [sp, #4]
    4290:	4283      	cmp	r3, r0
    4292:	d113      	bne.n	42bc <dir_find+0x120>
    4294:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    4296:	2301      	movs	r3, #1
    4298:	469c      	mov	ip, r3
    429a:	44e1      	add	r9, ip
    429c:	464b      	mov	r3, r9
    429e:	2b0d      	cmp	r3, #13
    42a0:	d011      	beq.n	42c6 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    42a2:	4b22      	ldr	r3, [pc, #136]	; (432c <dir_find+0x190>)
    42a4:	4649      	mov	r1, r9
    42a6:	5cc9      	ldrb	r1, [r1, r3]
    42a8:	1863      	adds	r3, r4, r1
    42aa:	785b      	ldrb	r3, [r3, #1]
    42ac:	021b      	lsls	r3, r3, #8
    42ae:	5c60      	ldrb	r0, [r4, r1]
    42b0:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    42b2:	2a00      	cmp	r2, #0
    42b4:	d1dc      	bne.n	4270 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    42b6:	4b1e      	ldr	r3, [pc, #120]	; (4330 <dir_find+0x194>)
    42b8:	4298      	cmp	r0, r3
    42ba:	d0ec      	beq.n	4296 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    42bc:	9b00      	ldr	r3, [sp, #0]
    42be:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    42c0:	23ff      	movs	r3, #255	; 0xff
    42c2:	469a      	mov	sl, r3
    42c4:	e793      	b.n	41ee <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    42c6:	7823      	ldrb	r3, [r4, #0]
    42c8:	065b      	lsls	r3, r3, #25
    42ca:	d506      	bpl.n	42da <dir_find+0x13e>
    42cc:	2a00      	cmp	r2, #0
    42ce:	d004      	beq.n	42da <dir_find+0x13e>
    42d0:	4653      	mov	r3, sl
    42d2:	005b      	lsls	r3, r3, #1
    42d4:	5bdb      	ldrh	r3, [r3, r7]
    42d6:	2b00      	cmp	r3, #0
    42d8:	d1f0      	bne.n	42bc <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    42da:	3e01      	subs	r6, #1
    42dc:	b2f3      	uxtb	r3, r6
    42de:	469a      	mov	sl, r3
    42e0:	9b00      	ldr	r3, [sp, #0]
    42e2:	4699      	mov	r9, r3
    42e4:	e783      	b.n	41ee <dir_find+0x52>
    42e6:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    42e8:	5ce1      	ldrb	r1, [r4, r3]
    42ea:	5cc2      	ldrb	r2, [r0, r3]
    42ec:	4291      	cmp	r1, r2
    42ee:	d10a      	bne.n	4306 <dir_find+0x16a>
    42f0:	3301      	adds	r3, #1
    42f2:	2b0b      	cmp	r3, #11
    42f4:	d1f8      	bne.n	42e8 <dir_find+0x14c>
}
    42f6:	0038      	movs	r0, r7
    42f8:	b003      	add	sp, #12
    42fa:	bc3c      	pop	{r2, r3, r4, r5}
    42fc:	4690      	mov	r8, r2
    42fe:	4699      	mov	r9, r3
    4300:	46a2      	mov	sl, r4
    4302:	46ab      	mov	fp, r5
    4304:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4306:	23ff      	movs	r3, #255	; 0xff
    4308:	469a      	mov	sl, r3
    430a:	e770      	b.n	41ee <dir_find+0x52>
			ord = 0xFF;
    430c:	23ff      	movs	r3, #255	; 0xff
    430e:	469a      	mov	sl, r3
    4310:	e76d      	b.n	41ee <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4312:	2704      	movs	r7, #4
    4314:	e7ef      	b.n	42f6 <dir_find+0x15a>
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	00003d5d 	.word	0x00003d5d
    431c:	00003bc1 	.word	0x00003bc1
    4320:	0000371f 	.word	0x0000371f
    4324:	00004079 	.word	0x00004079
    4328:	00004f85 	.word	0x00004f85
    432c:	00005dfc 	.word	0x00005dfc
    4330:	0000ffff 	.word	0x0000ffff

00004334 <dir_register>:
{
    4334:	b5f0      	push	{r4, r5, r6, r7, lr}
    4336:	46de      	mov	lr, fp
    4338:	4657      	mov	r7, sl
    433a:	464e      	mov	r6, r9
    433c:	4645      	mov	r5, r8
    433e:	b5e0      	push	{r5, r6, r7, lr}
    4340:	b089      	sub	sp, #36	; 0x24
    4342:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    4344:	6987      	ldr	r7, [r0, #24]
    4346:	69c3      	ldr	r3, [r0, #28]
    4348:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    434a:	ad05      	add	r5, sp, #20
    434c:	220c      	movs	r2, #12
    434e:	0039      	movs	r1, r7
    4350:	0028      	movs	r0, r5
    4352:	4ba7      	ldr	r3, [pc, #668]	; (45f0 <dir_register+0x2bc>)
    4354:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    4356:	7aeb      	ldrb	r3, [r5, #11]
    4358:	07db      	lsls	r3, r3, #31
    435a:	d400      	bmi.n	435e <dir_register+0x2a>
    435c:	e070      	b.n	4440 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    435e:	2300      	movs	r3, #0
    4360:	72fb      	strb	r3, [r7, #11]
    4362:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    4364:	220b      	movs	r2, #11
    4366:	a905      	add	r1, sp, #20
    4368:	0038      	movs	r0, r7
    436a:	4ba1      	ldr	r3, [pc, #644]	; (45f0 <dir_register+0x2bc>)
    436c:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    436e:	2301      	movs	r3, #1
		ns[i--] = c;
    4370:	ad03      	add	r5, sp, #12
    4372:	001e      	movs	r6, r3
    4374:	46a0      	mov	r8, r4
    4376:	e049      	b.n	440c <dir_register+0xd8>
    4378:	3801      	subs	r0, #1
    437a:	1829      	adds	r1, r5, r0
    437c:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    437e:	091b      	lsrs	r3, r3, #4
    4380:	b29b      	uxth	r3, r3
	} while (seq);
    4382:	2b00      	cmp	r3, #0
    4384:	d007      	beq.n	4396 <dir_register+0x62>
		c = (seq % 16) + '0';
    4386:	0021      	movs	r1, r4
    4388:	4019      	ands	r1, r3
    438a:	000a      	movs	r2, r1
    438c:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    438e:	2a39      	cmp	r2, #57	; 0x39
    4390:	d9f2      	bls.n	4378 <dir_register+0x44>
    4392:	3207      	adds	r2, #7
    4394:	e7f0      	b.n	4378 <dir_register+0x44>
	ns[i] = '~';
    4396:	337e      	adds	r3, #126	; 0x7e
    4398:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    439a:	2800      	cmp	r0, #0
    439c:	d00a      	beq.n	43b4 <dir_register+0x80>
    439e:	783b      	ldrb	r3, [r7, #0]
    43a0:	2b20      	cmp	r3, #32
    43a2:	d009      	beq.n	43b8 <dir_register+0x84>
    43a4:	2300      	movs	r3, #0
    43a6:	3301      	adds	r3, #1
    43a8:	4298      	cmp	r0, r3
    43aa:	d007      	beq.n	43bc <dir_register+0x88>
    43ac:	5cfa      	ldrb	r2, [r7, r3]
    43ae:	2a20      	cmp	r2, #32
    43b0:	d1f9      	bne.n	43a6 <dir_register+0x72>
    43b2:	e009      	b.n	43c8 <dir_register+0x94>
    43b4:	0003      	movs	r3, r0
    43b6:	e007      	b.n	43c8 <dir_register+0x94>
    43b8:	2300      	movs	r3, #0
    43ba:	e005      	b.n	43c8 <dir_register+0x94>
    43bc:	0003      	movs	r3, r0
    43be:	e003      	b.n	43c8 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    43c0:	54fa      	strb	r2, [r7, r3]
    43c2:	3301      	adds	r3, #1
	} while (j < 8);
    43c4:	2b07      	cmp	r3, #7
    43c6:	d805      	bhi.n	43d4 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    43c8:	2220      	movs	r2, #32
    43ca:	2807      	cmp	r0, #7
    43cc:	d8f8      	bhi.n	43c0 <dir_register+0x8c>
    43ce:	5c2a      	ldrb	r2, [r5, r0]
    43d0:	3001      	adds	r0, #1
    43d2:	e7f5      	b.n	43c0 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    43d4:	4640      	mov	r0, r8
    43d6:	4b87      	ldr	r3, [pc, #540]	; (45f4 <dir_register+0x2c0>)
    43d8:	4798      	blx	r3
			if (res != FR_OK) break;
    43da:	2800      	cmp	r0, #0
    43dc:	d11c      	bne.n	4418 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    43de:	3601      	adds	r6, #1
    43e0:	b2b6      	uxth	r6, r6
    43e2:	2e64      	cmp	r6, #100	; 0x64
    43e4:	d015      	beq.n	4412 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    43e6:	220b      	movs	r2, #11
    43e8:	a905      	add	r1, sp, #20
    43ea:	0038      	movs	r0, r7
    43ec:	4b80      	ldr	r3, [pc, #512]	; (45f0 <dir_register+0x2bc>)
    43ee:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    43f0:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    43f2:	2e05      	cmp	r6, #5
    43f4:	d90a      	bls.n	440c <dir_register+0xd8>
    43f6:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    43f8:	085a      	lsrs	r2, r3, #1
    43fa:	03db      	lsls	r3, r3, #15
    43fc:	4313      	orrs	r3, r2
    43fe:	880a      	ldrh	r2, [r1, #0]
    4400:	189b      	adds	r3, r3, r2
    4402:	b29b      	uxth	r3, r3
    4404:	3102      	adds	r1, #2
    4406:	880a      	ldrh	r2, [r1, #0]
    4408:	2a00      	cmp	r2, #0
    440a:	d1f5      	bne.n	43f8 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    440c:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    440e:	240f      	movs	r4, #15
    4410:	e7b9      	b.n	4386 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4412:	2307      	movs	r3, #7
    4414:	4698      	mov	r8, r3
    4416:	e006      	b.n	4426 <dir_register+0xf2>
    4418:	4644      	mov	r4, r8
    441a:	4680      	mov	r8, r0
    441c:	2e64      	cmp	r6, #100	; 0x64
    441e:	d100      	bne.n	4422 <dir_register+0xee>
    4420:	e0a5      	b.n	456e <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    4422:	2804      	cmp	r0, #4
    4424:	d007      	beq.n	4436 <dir_register+0x102>
}
    4426:	4640      	mov	r0, r8
    4428:	b009      	add	sp, #36	; 0x24
    442a:	bc3c      	pop	{r2, r3, r4, r5}
    442c:	4690      	mov	r8, r2
    442e:	4699      	mov	r9, r3
    4430:	46a2      	mov	sl, r4
    4432:	46ab      	mov	fp, r5
    4434:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    4436:	ab05      	add	r3, sp, #20
    4438:	7adb      	ldrb	r3, [r3, #11]
    443a:	72fb      	strb	r3, [r7, #11]
    443c:	4653      	mov	r3, sl
    443e:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4440:	ab05      	add	r3, sp, #20
    4442:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    4444:	2201      	movs	r2, #1
    4446:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4448:	079b      	lsls	r3, r3, #30
    444a:	d511      	bpl.n	4470 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    444c:	4653      	mov	r3, sl
    444e:	881b      	ldrh	r3, [r3, #0]
    4450:	2b00      	cmp	r3, #0
    4452:	d01b      	beq.n	448c <dir_register+0x158>
    4454:	2000      	movs	r0, #0
    4456:	4652      	mov	r2, sl
    4458:	3001      	adds	r0, #1
    445a:	b280      	uxth	r0, r0
    445c:	0043      	lsls	r3, r0, #1
    445e:	5a9b      	ldrh	r3, [r3, r2]
    4460:	2b00      	cmp	r3, #0
    4462:	d1f9      	bne.n	4458 <dir_register+0x124>
		ne = (ne + 25) / 13;
    4464:	3019      	adds	r0, #25
    4466:	210d      	movs	r1, #13
    4468:	4b63      	ldr	r3, [pc, #396]	; (45f8 <dir_register+0x2c4>)
    446a:	4798      	blx	r3
    446c:	b283      	uxth	r3, r0
    446e:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4470:	2100      	movs	r1, #0
    4472:	0020      	movs	r0, r4
    4474:	4b61      	ldr	r3, [pc, #388]	; (45fc <dir_register+0x2c8>)
    4476:	4798      	blx	r3
    4478:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    447a:	2800      	cmp	r0, #0
    447c:	d1d3      	bne.n	4426 <dir_register+0xf2>
    447e:	4682      	mov	sl, r0
    4480:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    4482:	4f5f      	ldr	r7, [pc, #380]	; (4600 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    4484:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4486:	4b5f      	ldr	r3, [pc, #380]	; (4604 <dir_register+0x2d0>)
    4488:	4699      	mov	r9, r3
    448a:	e00b      	b.n	44a4 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    448c:	2000      	movs	r0, #0
    448e:	e7e9      	b.n	4464 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    4490:	1c6b      	adds	r3, r5, #1
    4492:	b29b      	uxth	r3, r3
    4494:	459b      	cmp	fp, r3
    4496:	d06d      	beq.n	4574 <dir_register+0x240>
    4498:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    449a:	2101      	movs	r1, #1
    449c:	0020      	movs	r0, r4
    449e:	47c8      	blx	r9
	} while (res == FR_OK);
    44a0:	2800      	cmp	r0, #0
    44a2:	d112      	bne.n	44ca <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    44a4:	6921      	ldr	r1, [r4, #16]
    44a6:	6820      	ldr	r0, [r4, #0]
    44a8:	47b8      	blx	r7
		if (res != FR_OK) break;
    44aa:	2800      	cmp	r0, #0
    44ac:	d000      	beq.n	44b0 <dir_register+0x17c>
    44ae:	e098      	b.n	45e2 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    44b0:	6963      	ldr	r3, [r4, #20]
    44b2:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    44b4:	2be5      	cmp	r3, #229	; 0xe5
    44b6:	d001      	beq.n	44bc <dir_register+0x188>
    44b8:	2b00      	cmp	r3, #0
    44ba:	d104      	bne.n	44c6 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    44bc:	2d00      	cmp	r5, #0
    44be:	d1e7      	bne.n	4490 <dir_register+0x15c>
    44c0:	88e3      	ldrh	r3, [r4, #6]
    44c2:	469a      	mov	sl, r3
    44c4:	e7e4      	b.n	4490 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    44c6:	0035      	movs	r5, r6
    44c8:	e7e7      	b.n	449a <dir_register+0x166>
    44ca:	4680      	mov	r8, r0
    44cc:	e7ab      	b.n	4426 <dir_register+0xf2>
		res = dir_sdi(dj, is);
    44ce:	4651      	mov	r1, sl
    44d0:	0020      	movs	r0, r4
    44d2:	4b4a      	ldr	r3, [pc, #296]	; (45fc <dir_register+0x2c8>)
    44d4:	4798      	blx	r3
    44d6:	4680      	mov	r8, r0
		if (res == FR_OK) {
    44d8:	2800      	cmp	r0, #0
    44da:	d1a4      	bne.n	4426 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    44dc:	69a0      	ldr	r0, [r4, #24]
    44de:	4b4a      	ldr	r3, [pc, #296]	; (4608 <dir_register+0x2d4>)
    44e0:	4798      	blx	r3
    44e2:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    44e4:	46a8      	mov	r8, r5
    44e6:	e01f      	b.n	4528 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    44e8:	0022      	movs	r2, r4
    44ea:	e067      	b.n	45bc <dir_register+0x288>
    44ec:	465e      	mov	r6, fp
    44ee:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    44f0:	4946      	ldr	r1, [pc, #280]	; (460c <dir_register+0x2d8>)
    44f2:	428b      	cmp	r3, r1
    44f4:	d003      	beq.n	44fe <dir_register+0x1ca>
    44f6:	0052      	lsls	r2, r2, #1
    44f8:	5b93      	ldrh	r3, [r2, r6]
    44fa:	2b00      	cmp	r3, #0
    44fc:	d103      	bne.n	4506 <dir_register+0x1d2>
    44fe:	2340      	movs	r3, #64	; 0x40
    4500:	464a      	mov	r2, r9
    4502:	431a      	orrs	r2, r3
    4504:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    4506:	464b      	mov	r3, r9
    4508:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    450a:	2301      	movs	r3, #1
    450c:	6822      	ldr	r2, [r4, #0]
    450e:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    4510:	2100      	movs	r1, #0
    4512:	0020      	movs	r0, r4
    4514:	4b3b      	ldr	r3, [pc, #236]	; (4604 <dir_register+0x2d0>)
    4516:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    4518:	2800      	cmp	r0, #0
    451a:	d166      	bne.n	45ea <dir_register+0x2b6>
    451c:	4645      	mov	r5, r8
    451e:	3d01      	subs	r5, #1
    4520:	b2ab      	uxth	r3, r5
    4522:	4698      	mov	r8, r3
    4524:	2b00      	cmp	r3, #0
    4526:	d027      	beq.n	4578 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    4528:	6921      	ldr	r1, [r4, #16]
    452a:	6820      	ldr	r0, [r4, #0]
    452c:	4b34      	ldr	r3, [pc, #208]	; (4600 <dir_register+0x2cc>)
    452e:	4798      	blx	r3
				if (res != FR_OK) break;
    4530:	2800      	cmp	r0, #0
    4532:	d158      	bne.n	45e6 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    4534:	69e6      	ldr	r6, [r4, #28]
    4536:	6960      	ldr	r0, [r4, #20]
    4538:	4643      	mov	r3, r8
    453a:	466a      	mov	r2, sp
    453c:	70d3      	strb	r3, [r2, #3]
    453e:	78d3      	ldrb	r3, [r2, #3]
    4540:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    4542:	7913      	ldrb	r3, [r2, #4]
    4544:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    4546:	230f      	movs	r3, #15
    4548:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    454a:	2300      	movs	r3, #0
    454c:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    454e:	7683      	strb	r3, [r0, #26]
    4550:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    4552:	464b      	mov	r3, r9
    4554:	3b01      	subs	r3, #1
    4556:	005a      	lsls	r2, r3, #1
    4558:	18d2      	adds	r2, r2, r3
    455a:	0092      	lsls	r2, r2, #2
    455c:	18d2      	adds	r2, r2, r3
    455e:	492c      	ldr	r1, [pc, #176]	; (4610 <dir_register+0x2dc>)
    4560:	000d      	movs	r5, r1
    4562:	350d      	adds	r5, #13
	s = wc = 0;
    4564:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4566:	4f29      	ldr	r7, [pc, #164]	; (460c <dir_register+0x2d8>)
    4568:	46b3      	mov	fp, r6
    456a:	46a4      	mov	ip, r4
    456c:	e029      	b.n	45c2 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    456e:	2307      	movs	r3, #7
    4570:	4698      	mov	r8, r3
    4572:	e758      	b.n	4426 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    4574:	2b01      	cmp	r3, #1
    4576:	d8aa      	bhi.n	44ce <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    4578:	6921      	ldr	r1, [r4, #16]
    457a:	6820      	ldr	r0, [r4, #0]
    457c:	4b20      	ldr	r3, [pc, #128]	; (4600 <dir_register+0x2cc>)
    457e:	4798      	blx	r3
    4580:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4582:	2800      	cmp	r0, #0
    4584:	d000      	beq.n	4588 <dir_register+0x254>
    4586:	e74e      	b.n	4426 <dir_register+0xf2>
			dir = dj->dir;
    4588:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    458a:	2220      	movs	r2, #32
    458c:	2100      	movs	r1, #0
    458e:	0028      	movs	r0, r5
    4590:	4b20      	ldr	r3, [pc, #128]	; (4614 <dir_register+0x2e0>)
    4592:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    4594:	220b      	movs	r2, #11
    4596:	69a1      	ldr	r1, [r4, #24]
    4598:	0028      	movs	r0, r5
    459a:	4b15      	ldr	r3, [pc, #84]	; (45f0 <dir_register+0x2bc>)
    459c:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    459e:	69a3      	ldr	r3, [r4, #24]
    45a0:	7ada      	ldrb	r2, [r3, #11]
    45a2:	2318      	movs	r3, #24
    45a4:	4013      	ands	r3, r2
    45a6:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    45a8:	6823      	ldr	r3, [r4, #0]
    45aa:	2201      	movs	r2, #1
    45ac:	711a      	strb	r2, [r3, #4]
    45ae:	e73a      	b.n	4426 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    45b0:	780c      	ldrb	r4, [r1, #0]
    45b2:	26ff      	movs	r6, #255	; 0xff
    45b4:	5506      	strb	r6, [r0, r4]
    45b6:	1904      	adds	r4, r0, r4
    45b8:	26ff      	movs	r6, #255	; 0xff
    45ba:	7066      	strb	r6, [r4, #1]
    45bc:	3101      	adds	r1, #1
	} while (++s < 13);
    45be:	42a9      	cmp	r1, r5
    45c0:	d094      	beq.n	44ec <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    45c2:	42bb      	cmp	r3, r7
    45c4:	d0f4      	beq.n	45b0 <dir_register+0x27c>
    45c6:	1c54      	adds	r4, r2, #1
    45c8:	0052      	lsls	r2, r2, #1
    45ca:	465b      	mov	r3, fp
    45cc:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    45ce:	780a      	ldrb	r2, [r1, #0]
    45d0:	5483      	strb	r3, [r0, r2]
    45d2:	1882      	adds	r2, r0, r2
    45d4:	0a1e      	lsrs	r6, r3, #8
    45d6:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    45d8:	2b00      	cmp	r3, #0
    45da:	d185      	bne.n	44e8 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    45dc:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    45de:	003b      	movs	r3, r7
    45e0:	e7ec      	b.n	45bc <dir_register+0x288>
    45e2:	4680      	mov	r8, r0
    45e4:	e71f      	b.n	4426 <dir_register+0xf2>
    45e6:	4680      	mov	r8, r0
    45e8:	e71d      	b.n	4426 <dir_register+0xf2>
    45ea:	4680      	mov	r8, r0
    45ec:	e71b      	b.n	4426 <dir_register+0xf2>
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	000036e1 	.word	0x000036e1
    45f4:	0000419d 	.word	0x0000419d
    45f8:	000052b1 	.word	0x000052b1
    45fc:	00003d5d 	.word	0x00003d5d
    4600:	00003bc1 	.word	0x00003bc1
    4604:	00004079 	.word	0x00004079
    4608:	0000371f 	.word	0x0000371f
    460c:	0000ffff 	.word	0x0000ffff
    4610:	00005dfc 	.word	0x00005dfc
    4614:	000036f5 	.word	0x000036f5

00004618 <sync>:
{
    4618:	b570      	push	{r4, r5, r6, lr}
    461a:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    461c:	2100      	movs	r1, #0
    461e:	4b2c      	ldr	r3, [pc, #176]	; (46d0 <sync+0xb8>)
    4620:	4798      	blx	r3
	if (res == FR_OK) {
    4622:	2800      	cmp	r0, #0
    4624:	d10a      	bne.n	463c <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4626:	7823      	ldrb	r3, [r4, #0]
    4628:	2b03      	cmp	r3, #3
    462a:	d008      	beq.n	463e <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    462c:	7860      	ldrb	r0, [r4, #1]
    462e:	2200      	movs	r2, #0
    4630:	2100      	movs	r1, #0
    4632:	4b28      	ldr	r3, [pc, #160]	; (46d4 <sync+0xbc>)
    4634:	4798      	blx	r3
    4636:	1e43      	subs	r3, r0, #1
    4638:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    463a:	b2c0      	uxtb	r0, r0
}
    463c:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    463e:	7963      	ldrb	r3, [r4, #5]
    4640:	2b00      	cmp	r3, #0
    4642:	d0f3      	beq.n	462c <sync+0x14>
			fs->winsect = 0;
    4644:	2600      	movs	r6, #0
    4646:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    4648:	0025      	movs	r5, r4
    464a:	3530      	adds	r5, #48	; 0x30
    464c:	2280      	movs	r2, #128	; 0x80
    464e:	0092      	lsls	r2, r2, #2
    4650:	2100      	movs	r1, #0
    4652:	0028      	movs	r0, r5
    4654:	4b20      	ldr	r3, [pc, #128]	; (46d8 <sync+0xc0>)
    4656:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    4658:	2255      	movs	r2, #85	; 0x55
    465a:	4b20      	ldr	r3, [pc, #128]	; (46dc <sync+0xc4>)
    465c:	54e2      	strb	r2, [r4, r3]
    465e:	3255      	adds	r2, #85	; 0x55
    4660:	4b1f      	ldr	r3, [pc, #124]	; (46e0 <sync+0xc8>)
    4662:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    4664:	3bde      	subs	r3, #222	; 0xde
    4666:	3bff      	subs	r3, #255	; 0xff
    4668:	3a7a      	subs	r2, #122	; 0x7a
    466a:	54a3      	strb	r3, [r4, r2]
    466c:	3201      	adds	r2, #1
    466e:	54a3      	strb	r3, [r4, r2]
    4670:	330f      	adds	r3, #15
    4672:	3201      	adds	r2, #1
    4674:	54a3      	strb	r3, [r4, r2]
    4676:	320f      	adds	r2, #15
    4678:	2133      	movs	r1, #51	; 0x33
    467a:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    467c:	313f      	adds	r1, #63	; 0x3f
    467e:	2085      	movs	r0, #133	; 0x85
    4680:	0080      	lsls	r0, r0, #2
    4682:	5421      	strb	r1, [r4, r0]
    4684:	4817      	ldr	r0, [pc, #92]	; (46e4 <sync+0xcc>)
    4686:	5421      	strb	r1, [r4, r0]
    4688:	4917      	ldr	r1, [pc, #92]	; (46e8 <sync+0xd0>)
    468a:	5462      	strb	r2, [r4, r1]
    468c:	4a17      	ldr	r2, [pc, #92]	; (46ec <sync+0xd4>)
    468e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    4690:	6923      	ldr	r3, [r4, #16]
    4692:	3201      	adds	r2, #1
    4694:	54a3      	strb	r3, [r4, r2]
    4696:	0a19      	lsrs	r1, r3, #8
    4698:	4a15      	ldr	r2, [pc, #84]	; (46f0 <sync+0xd8>)
    469a:	54a1      	strb	r1, [r4, r2]
    469c:	0c19      	lsrs	r1, r3, #16
    469e:	4a15      	ldr	r2, [pc, #84]	; (46f4 <sync+0xdc>)
    46a0:	54a1      	strb	r1, [r4, r2]
    46a2:	0e1b      	lsrs	r3, r3, #24
    46a4:	4a14      	ldr	r2, [pc, #80]	; (46f8 <sync+0xe0>)
    46a6:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    46a8:	68e3      	ldr	r3, [r4, #12]
    46aa:	3201      	adds	r2, #1
    46ac:	54a3      	strb	r3, [r4, r2]
    46ae:	0a19      	lsrs	r1, r3, #8
    46b0:	4a12      	ldr	r2, [pc, #72]	; (46fc <sync+0xe4>)
    46b2:	54a1      	strb	r1, [r4, r2]
    46b4:	0c19      	lsrs	r1, r3, #16
    46b6:	4a12      	ldr	r2, [pc, #72]	; (4700 <sync+0xe8>)
    46b8:	54a1      	strb	r1, [r4, r2]
    46ba:	0e1b      	lsrs	r3, r3, #24
    46bc:	4a11      	ldr	r2, [pc, #68]	; (4704 <sync+0xec>)
    46be:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    46c0:	7860      	ldrb	r0, [r4, #1]
    46c2:	2301      	movs	r3, #1
    46c4:	6962      	ldr	r2, [r4, #20]
    46c6:	0029      	movs	r1, r5
    46c8:	4d0f      	ldr	r5, [pc, #60]	; (4708 <sync+0xf0>)
    46ca:	47a8      	blx	r5
			fs->fsi_flag = 0;
    46cc:	7166      	strb	r6, [r4, #5]
    46ce:	e7ad      	b.n	462c <sync+0x14>
    46d0:	00003bc1 	.word	0x00003bc1
    46d4:	00003625 	.word	0x00003625
    46d8:	000036f5 	.word	0x000036f5
    46dc:	0000022e 	.word	0x0000022e
    46e0:	0000022f 	.word	0x0000022f
    46e4:	00000215 	.word	0x00000215
    46e8:	00000216 	.word	0x00000216
    46ec:	00000217 	.word	0x00000217
    46f0:	00000219 	.word	0x00000219
    46f4:	0000021a 	.word	0x0000021a
    46f8:	0000021b 	.word	0x0000021b
    46fc:	0000021d 	.word	0x0000021d
    4700:	0000021e 	.word	0x0000021e
    4704:	0000021f 	.word	0x0000021f
    4708:	000035a1 	.word	0x000035a1

0000470c <follow_path>:
{
    470c:	b5f0      	push	{r4, r5, r6, r7, lr}
    470e:	46de      	mov	lr, fp
    4710:	4657      	mov	r7, sl
    4712:	464e      	mov	r6, r9
    4714:	4645      	mov	r5, r8
    4716:	b5e0      	push	{r5, r6, r7, lr}
    4718:	b083      	sub	sp, #12
    471a:	4682      	mov	sl, r0
    471c:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    471e:	780b      	ldrb	r3, [r1, #0]
    4720:	2b2f      	cmp	r3, #47	; 0x2f
    4722:	d00f      	beq.n	4744 <follow_path+0x38>
    4724:	2b5c      	cmp	r3, #92	; 0x5c
    4726:	d00d      	beq.n	4744 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    4728:	2300      	movs	r3, #0
    472a:	4652      	mov	r2, sl
    472c:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    472e:	782b      	ldrb	r3, [r5, #0]
    4730:	4657      	mov	r7, sl
    4732:	2b1f      	cmp	r3, #31
    4734:	d809      	bhi.n	474a <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    4736:	2100      	movs	r1, #0
    4738:	4650      	mov	r0, sl
    473a:	4bb2      	ldr	r3, [pc, #712]	; (4a04 <follow_path+0x2f8>)
    473c:	4798      	blx	r3
		dj->dir = 0;
    473e:	2300      	movs	r3, #0
    4740:	617b      	str	r3, [r7, #20]
    4742:	e13a      	b.n	49ba <follow_path+0x2ae>
		path++;
    4744:	3501      	adds	r5, #1
    4746:	e7ef      	b.n	4728 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4748:	3501      	adds	r5, #1
    474a:	7828      	ldrb	r0, [r5, #0]
    474c:	282f      	cmp	r0, #47	; 0x2f
    474e:	d0fb      	beq.n	4748 <follow_path+0x3c>
    4750:	285c      	cmp	r0, #92	; 0x5c
    4752:	d0f9      	beq.n	4748 <follow_path+0x3c>
	lfn = dj->lfn;
    4754:	69fb      	ldr	r3, [r7, #28]
    4756:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    4758:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    475a:	281f      	cmp	r0, #31
    475c:	d800      	bhi.n	4760 <follow_path+0x54>
    475e:	e13b      	b.n	49d8 <follow_path+0x2cc>
    4760:	282f      	cmp	r0, #47	; 0x2f
    4762:	d100      	bne.n	4766 <follow_path+0x5a>
    4764:	e13b      	b.n	49de <follow_path+0x2d2>
    4766:	285c      	cmp	r0, #92	; 0x5c
    4768:	d100      	bne.n	476c <follow_path+0x60>
    476a:	e13b      	b.n	49e4 <follow_path+0x2d8>
    476c:	1c6e      	adds	r6, r5, #1
    476e:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4770:	2380      	movs	r3, #128	; 0x80
    4772:	005b      	lsls	r3, r3, #1
    4774:	4698      	mov	r8, r3
    4776:	46bb      	mov	fp, r7
    4778:	002b      	movs	r3, r5
    477a:	0025      	movs	r5, r4
    477c:	0034      	movs	r4, r6
    477e:	4656      	mov	r6, sl
    4780:	4699      	mov	r9, r3
    4782:	e011      	b.n	47a8 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4784:	2b00      	cmp	r3, #0
    4786:	d135      	bne.n	47f4 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    4788:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    478a:	1c6b      	adds	r3, r5, #1
    478c:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    478e:	281f      	cmp	r0, #31
    4790:	d91e      	bls.n	47d0 <follow_path+0xc4>
    4792:	282f      	cmp	r0, #47	; 0x2f
    4794:	d100      	bne.n	4798 <follow_path+0x8c>
    4796:	e128      	b.n	49ea <follow_path+0x2de>
    4798:	285c      	cmp	r0, #92	; 0x5c
    479a:	d100      	bne.n	479e <follow_path+0x92>
    479c:	e142      	b.n	4a24 <follow_path+0x318>
    479e:	3602      	adds	r6, #2
    47a0:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    47a2:	4543      	cmp	r3, r8
    47a4:	d026      	beq.n	47f4 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    47a6:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    47a8:	2101      	movs	r1, #1
    47aa:	4b97      	ldr	r3, [pc, #604]	; (4a08 <follow_path+0x2fc>)
    47ac:	4798      	blx	r3
    47ae:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    47b0:	d020      	beq.n	47f4 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    47b2:	287f      	cmp	r0, #127	; 0x7f
    47b4:	d8e8      	bhi.n	4788 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    47b6:	2822      	cmp	r0, #34	; 0x22
    47b8:	d100      	bne.n	47bc <follow_path+0xb0>
    47ba:	e0fd      	b.n	49b8 <follow_path+0x2ac>
    47bc:	232a      	movs	r3, #42	; 0x2a
    47be:	4a93      	ldr	r2, [pc, #588]	; (4a0c <follow_path+0x300>)
    47c0:	b29f      	uxth	r7, r3
    47c2:	428f      	cmp	r7, r1
    47c4:	d0de      	beq.n	4784 <follow_path+0x78>
    47c6:	3201      	adds	r2, #1
    47c8:	7813      	ldrb	r3, [r2, #0]
    47ca:	2b00      	cmp	r3, #0
    47cc:	d1f8      	bne.n	47c0 <follow_path+0xb4>
    47ce:	e7db      	b.n	4788 <follow_path+0x7c>
    47d0:	002c      	movs	r4, r5
    47d2:	465f      	mov	r7, fp
    47d4:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    47d6:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    47d8:	2604      	movs	r6, #4
    47da:	e10b      	b.n	49f4 <follow_path+0x2e8>
		di--;
    47dc:	3c01      	subs	r4, #1
    47de:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    47e0:	2c00      	cmp	r4, #0
    47e2:	d100      	bne.n	47e6 <follow_path+0xda>
    47e4:	e0e8      	b.n	49b8 <follow_path+0x2ac>
		w = lfn[di-1];
    47e6:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    47e8:	2a20      	cmp	r2, #32
    47ea:	d0f7      	beq.n	47dc <follow_path+0xd0>
    47ec:	2a2e      	cmp	r2, #46	; 0x2e
    47ee:	d0f5      	beq.n	47dc <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    47f0:	2c00      	cmp	r4, #0
    47f2:	d101      	bne.n	47f8 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    47f4:	2006      	movs	r0, #6
	return res;
    47f6:	e0e0      	b.n	49ba <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    47f8:	0063      	lsls	r3, r4, #1
    47fa:	4698      	mov	r8, r3
    47fc:	2300      	movs	r3, #0
    47fe:	4652      	mov	r2, sl
    4800:	4641      	mov	r1, r8
    4802:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    4804:	220b      	movs	r2, #11
    4806:	2120      	movs	r1, #32
    4808:	69b8      	ldr	r0, [r7, #24]
    480a:	4b81      	ldr	r3, [pc, #516]	; (4a10 <follow_path+0x304>)
    480c:	4798      	blx	r3
    480e:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    4810:	2300      	movs	r3, #0
    4812:	e001      	b.n	4818 <follow_path+0x10c>
    4814:	3301      	adds	r3, #1
    4816:	3202      	adds	r2, #2
    4818:	8811      	ldrh	r1, [r2, #0]
    481a:	2920      	cmp	r1, #32
    481c:	d0fa      	beq.n	4814 <follow_path+0x108>
    481e:	292e      	cmp	r1, #46	; 0x2e
    4820:	d0f8      	beq.n	4814 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    4822:	2b00      	cmp	r3, #0
    4824:	d001      	beq.n	482a <follow_path+0x11e>
    4826:	2203      	movs	r2, #3
    4828:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    482a:	4652      	mov	r2, sl
    482c:	4442      	add	r2, r8
    482e:	3a02      	subs	r2, #2
    4830:	8812      	ldrh	r2, [r2, #0]
    4832:	2a2e      	cmp	r2, #46	; 0x2e
    4834:	d009      	beq.n	484a <follow_path+0x13e>
    4836:	4642      	mov	r2, r8
    4838:	3a04      	subs	r2, #4
    483a:	4452      	add	r2, sl
    483c:	3c01      	subs	r4, #1
    483e:	2c00      	cmp	r4, #0
    4840:	d003      	beq.n	484a <follow_path+0x13e>
    4842:	3a02      	subs	r2, #2
    4844:	8851      	ldrh	r1, [r2, #2]
    4846:	292e      	cmp	r1, #46	; 0x2e
    4848:	d1f8      	bne.n	483c <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    484a:	2208      	movs	r2, #8
    484c:	9201      	str	r2, [sp, #4]
    484e:	2200      	movs	r2, #0
    4850:	4693      	mov	fp, r2
    4852:	4691      	mov	r9, r2
    4854:	46a0      	mov	r8, r4
    4856:	e006      	b.n	4866 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4858:	4544      	cmp	r4, r8
    485a:	d100      	bne.n	485e <follow_path+0x152>
    485c:	e0e6      	b.n	4a2c <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    485e:	2303      	movs	r3, #3
    4860:	431e      	orrs	r6, r3
    4862:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    4864:	0023      	movs	r3, r4
    4866:	1c5c      	adds	r4, r3, #1
    4868:	005b      	lsls	r3, r3, #1
    486a:	4652      	mov	r2, sl
    486c:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    486e:	2800      	cmp	r0, #0
    4870:	d02c      	beq.n	48cc <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4872:	2820      	cmp	r0, #32
    4874:	d0f3      	beq.n	485e <follow_path+0x152>
    4876:	282e      	cmp	r0, #46	; 0x2e
    4878:	d0ee      	beq.n	4858 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    487a:	9b01      	ldr	r3, [sp, #4]
    487c:	459b      	cmp	fp, r3
    487e:	d219      	bcs.n	48b4 <follow_path+0x1a8>
    4880:	4544      	cmp	r4, r8
    4882:	d100      	bne.n	4886 <follow_path+0x17a>
    4884:	e0d2      	b.n	4a2c <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    4886:	287f      	cmp	r0, #127	; 0x7f
    4888:	d85e      	bhi.n	4948 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    488a:	282b      	cmp	r0, #43	; 0x2b
    488c:	d06e      	beq.n	496c <follow_path+0x260>
    488e:	232c      	movs	r3, #44	; 0x2c
    4890:	4a60      	ldr	r2, [pc, #384]	; (4a14 <follow_path+0x308>)
    4892:	b299      	uxth	r1, r3
    4894:	4281      	cmp	r1, r0
    4896:	d067      	beq.n	4968 <follow_path+0x25c>
    4898:	3201      	adds	r2, #1
    489a:	7813      	ldrb	r3, [r2, #0]
    489c:	2b00      	cmp	r3, #0
    489e:	d1f8      	bne.n	4892 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    48a0:	0003      	movs	r3, r0
    48a2:	3b41      	subs	r3, #65	; 0x41
    48a4:	b29b      	uxth	r3, r3
    48a6:	2b19      	cmp	r3, #25
    48a8:	d86c      	bhi.n	4984 <follow_path+0x278>
					b |= 2;
    48aa:	2302      	movs	r3, #2
    48ac:	464a      	mov	r2, r9
    48ae:	431a      	orrs	r2, r3
    48b0:	4691      	mov	r9, r2
    48b2:	e05f      	b.n	4974 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    48b4:	9b01      	ldr	r3, [sp, #4]
    48b6:	2b0b      	cmp	r3, #11
    48b8:	d03b      	beq.n	4932 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    48ba:	4544      	cmp	r4, r8
    48bc:	d100      	bne.n	48c0 <follow_path+0x1b4>
    48be:	e0b9      	b.n	4a34 <follow_path+0x328>
    48c0:	2303      	movs	r3, #3
    48c2:	431e      	orrs	r6, r3
    48c4:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    48c6:	4544      	cmp	r4, r8
    48c8:	d800      	bhi.n	48cc <follow_path+0x1c0>
    48ca:	e0b3      	b.n	4a34 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    48cc:	69bb      	ldr	r3, [r7, #24]
    48ce:	781a      	ldrb	r2, [r3, #0]
    48d0:	2ae5      	cmp	r2, #229	; 0xe5
    48d2:	d036      	beq.n	4942 <follow_path+0x236>
	if (ni == 8) b <<= 2;
    48d4:	9b01      	ldr	r3, [sp, #4]
    48d6:	2b08      	cmp	r3, #8
    48d8:	d060      	beq.n	499c <follow_path+0x290>
    48da:	230c      	movs	r3, #12
    48dc:	464a      	mov	r2, r9
    48de:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    48e0:	2b0c      	cmp	r3, #12
    48e2:	d060      	beq.n	49a6 <follow_path+0x29a>
    48e4:	43d2      	mvns	r2, r2
    48e6:	0792      	lsls	r2, r2, #30
    48e8:	d05d      	beq.n	49a6 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    48ea:	07b2      	lsls	r2, r6, #30
    48ec:	d406      	bmi.n	48fc <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    48ee:	2203      	movs	r2, #3
    48f0:	4649      	mov	r1, r9
    48f2:	400a      	ands	r2, r1
    48f4:	2a01      	cmp	r2, #1
    48f6:	d059      	beq.n	49ac <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    48f8:	2b04      	cmp	r3, #4
    48fa:	d05a      	beq.n	49b2 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    48fc:	69bb      	ldr	r3, [r7, #24]
    48fe:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    4900:	0038      	movs	r0, r7
    4902:	4b45      	ldr	r3, [pc, #276]	; (4a18 <follow_path+0x30c>)
    4904:	4798      	blx	r3
			ns = *(dj->fn+NS);
    4906:	69bb      	ldr	r3, [r7, #24]
    4908:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    490a:	2800      	cmp	r0, #0
    490c:	d15c      	bne.n	49c8 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    490e:	075b      	lsls	r3, r3, #29
    4910:	d453      	bmi.n	49ba <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    4912:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    4914:	7ad3      	ldrb	r3, [r2, #11]
    4916:	06db      	lsls	r3, r3, #27
    4918:	d55c      	bpl.n	49d4 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    491a:	7d51      	ldrb	r1, [r2, #21]
    491c:	0209      	lsls	r1, r1, #8
    491e:	7d13      	ldrb	r3, [r2, #20]
    4920:	430b      	orrs	r3, r1
    4922:	041b      	lsls	r3, r3, #16
    4924:	7ed1      	ldrb	r1, [r2, #27]
    4926:	0209      	lsls	r1, r1, #8
    4928:	7e92      	ldrb	r2, [r2, #26]
    492a:	430a      	orrs	r2, r1
    492c:	4313      	orrs	r3, r2
    492e:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    4930:	e70b      	b.n	474a <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    4932:	2303      	movs	r3, #3
    4934:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4936:	69bb      	ldr	r3, [r7, #24]
    4938:	781a      	ldrb	r2, [r3, #0]
    493a:	2ae5      	cmp	r2, #229	; 0xe5
    493c:	d1cd      	bne.n	48da <follow_path+0x1ce>
    493e:	220b      	movs	r2, #11
    4940:	9201      	str	r2, [sp, #4]
    4942:	2205      	movs	r2, #5
    4944:	701a      	strb	r2, [r3, #0]
    4946:	e7c5      	b.n	48d4 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    4948:	2100      	movs	r1, #0
    494a:	4b2f      	ldr	r3, [pc, #188]	; (4a08 <follow_path+0x2fc>)
    494c:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    494e:	2800      	cmp	r0, #0
    4950:	d100      	bne.n	4954 <follow_path+0x248>
    4952:	e079      	b.n	4a48 <follow_path+0x33c>
    4954:	4b31      	ldr	r3, [pc, #196]	; (4a1c <follow_path+0x310>)
    4956:	469c      	mov	ip, r3
    4958:	4460      	add	r0, ip
    495a:	3880      	subs	r0, #128	; 0x80
    495c:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    495e:	2302      	movs	r3, #2
    4960:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    4962:	2800      	cmp	r0, #0
    4964:	d002      	beq.n	496c <follow_path+0x260>
    4966:	e790      	b.n	488a <follow_path+0x17e>
    4968:	2b00      	cmp	r3, #0
    496a:	d099      	beq.n	48a0 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    496c:	2303      	movs	r3, #3
    496e:	431e      	orrs	r6, r3
    4970:	b2f6      	uxtb	r6, r6
    4972:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    4974:	69bb      	ldr	r3, [r7, #24]
    4976:	465a      	mov	r2, fp
    4978:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    497a:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    497c:	2201      	movs	r2, #1
    497e:	4694      	mov	ip, r2
    4980:	44e3      	add	fp, ip
    4982:	e770      	b.n	4866 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    4984:	0003      	movs	r3, r0
    4986:	3b61      	subs	r3, #97	; 0x61
    4988:	b29b      	uxth	r3, r3
    498a:	2b19      	cmp	r3, #25
    498c:	d8f2      	bhi.n	4974 <follow_path+0x268>
						b |= 1; w -= 0x20;
    498e:	2301      	movs	r3, #1
    4990:	464a      	mov	r2, r9
    4992:	431a      	orrs	r2, r3
    4994:	4691      	mov	r9, r2
    4996:	3820      	subs	r0, #32
    4998:	b280      	uxth	r0, r0
    499a:	e7eb      	b.n	4974 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    499c:	464b      	mov	r3, r9
    499e:	009b      	lsls	r3, r3, #2
    49a0:	b2db      	uxtb	r3, r3
    49a2:	4699      	mov	r9, r3
    49a4:	e799      	b.n	48da <follow_path+0x1ce>
		cf |= NS_LFN;
    49a6:	2202      	movs	r2, #2
    49a8:	4316      	orrs	r6, r2
    49aa:	e79e      	b.n	48ea <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    49ac:	320f      	adds	r2, #15
    49ae:	4316      	orrs	r6, r2
    49b0:	e7a2      	b.n	48f8 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    49b2:	3304      	adds	r3, #4
    49b4:	431e      	orrs	r6, r3
    49b6:	e7a1      	b.n	48fc <follow_path+0x1f0>
    49b8:	2006      	movs	r0, #6
}
    49ba:	b003      	add	sp, #12
    49bc:	bc3c      	pop	{r2, r3, r4, r5}
    49be:	4690      	mov	r8, r2
    49c0:	4699      	mov	r9, r3
    49c2:	46a2      	mov	sl, r4
    49c4:	46ab      	mov	fp, r5
    49c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    49c8:	2804      	cmp	r0, #4
    49ca:	d1f6      	bne.n	49ba <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    49cc:	075b      	lsls	r3, r3, #29
    49ce:	d4f4      	bmi.n	49ba <follow_path+0x2ae>
    49d0:	3001      	adds	r0, #1
    49d2:	e7f2      	b.n	49ba <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    49d4:	2005      	movs	r0, #5
    49d6:	e7f0      	b.n	49ba <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    49d8:	2301      	movs	r3, #1
	si = di = 0;
    49da:	2400      	movs	r4, #0
    49dc:	e6fb      	b.n	47d6 <follow_path+0xca>
		w = p[si++];					/* Get a character */
    49de:	2301      	movs	r3, #1
	si = di = 0;
    49e0:	2400      	movs	r4, #0
    49e2:	e005      	b.n	49f0 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    49e4:	2301      	movs	r3, #1
	si = di = 0;
    49e6:	2400      	movs	r4, #0
    49e8:	e002      	b.n	49f0 <follow_path+0x2e4>
    49ea:	002c      	movs	r4, r5
    49ec:	465f      	mov	r7, fp
    49ee:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    49f0:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    49f2:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    49f4:	2c00      	cmp	r4, #0
    49f6:	d0df      	beq.n	49b8 <follow_path+0x2ac>
    49f8:	4b09      	ldr	r3, [pc, #36]	; (4a20 <follow_path+0x314>)
    49fa:	18e3      	adds	r3, r4, r3
    49fc:	005b      	lsls	r3, r3, #1
    49fe:	4453      	add	r3, sl
    4a00:	e6f1      	b.n	47e6 <follow_path+0xda>
    4a02:	46c0      	nop			; (mov r8, r8)
    4a04:	00003d5d 	.word	0x00003d5d
    4a08:	00004f3d 	.word	0x00004f3d
    4a0c:	00005e8d 	.word	0x00005e8d
    4a10:	000036f5 	.word	0x000036f5
    4a14:	00005e99 	.word	0x00005e99
    4a18:	0000419d 	.word	0x0000419d
    4a1c:	00005e0c 	.word	0x00005e0c
    4a20:	7fffffff 	.word	0x7fffffff
    4a24:	002c      	movs	r4, r5
    4a26:	465f      	mov	r7, fp
    4a28:	464d      	mov	r5, r9
    4a2a:	e7e1      	b.n	49f0 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    4a2c:	9b01      	ldr	r3, [sp, #4]
    4a2e:	2b0b      	cmp	r3, #11
    4a30:	d100      	bne.n	4a34 <follow_path+0x328>
    4a32:	e77e      	b.n	4932 <follow_path+0x226>
			b <<= 2; continue;
    4a34:	464b      	mov	r3, r9
    4a36:	009b      	lsls	r3, r3, #2
    4a38:	b2db      	uxtb	r3, r3
    4a3a:	4699      	mov	r9, r3
    4a3c:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    4a3e:	220b      	movs	r2, #11
    4a40:	9201      	str	r2, [sp, #4]
    4a42:	3a03      	subs	r2, #3
    4a44:	4693      	mov	fp, r2
    4a46:	e70e      	b.n	4866 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    4a48:	2302      	movs	r3, #2
    4a4a:	431e      	orrs	r6, r3
    4a4c:	e78e      	b.n	496c <follow_path+0x260>
    4a4e:	46c0      	nop			; (mov r8, r8)

00004a50 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    4a50:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    4a52:	2807      	cmp	r0, #7
    4a54:	d901      	bls.n	4a5a <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    4a56:	0018      	movs	r0, r3
    4a58:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    4a5a:	0083      	lsls	r3, r0, #2
    4a5c:	4a07      	ldr	r2, [pc, #28]	; (4a7c <f_mount+0x2c>)
    4a5e:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    4a60:	2b00      	cmp	r3, #0
    4a62:	d001      	beq.n	4a68 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    4a64:	2200      	movs	r2, #0
    4a66:	701a      	strb	r2, [r3, #0]
	if (fs) {
    4a68:	2900      	cmp	r1, #0
    4a6a:	d001      	beq.n	4a70 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    4a6c:	2300      	movs	r3, #0
    4a6e:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    4a70:	0080      	lsls	r0, r0, #2
    4a72:	4b02      	ldr	r3, [pc, #8]	; (4a7c <f_mount+0x2c>)
    4a74:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    4a76:	2300      	movs	r3, #0
    4a78:	e7ed      	b.n	4a56 <f_mount+0x6>
    4a7a:	46c0      	nop			; (mov r8, r8)
    4a7c:	20000150 	.word	0x20000150

00004a80 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    4a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a82:	46c6      	mov	lr, r8
    4a84:	b500      	push	{lr}
    4a86:	4c59      	ldr	r4, [pc, #356]	; (4bec <f_open+0x16c>)
    4a88:	44a5      	add	sp, r4
    4a8a:	0005      	movs	r5, r0
    4a8c:	9101      	str	r1, [sp, #4]
    4a8e:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    4a90:	2300      	movs	r3, #0
    4a92:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    4a94:	261f      	movs	r6, #31
    4a96:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    4a98:	221e      	movs	r2, #30
    4a9a:	403a      	ands	r2, r7
    4a9c:	a985      	add	r1, sp, #532	; 0x214
    4a9e:	a801      	add	r0, sp, #4
    4aa0:	4b53      	ldr	r3, [pc, #332]	; (4bf0 <f_open+0x170>)
    4aa2:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    4aa4:	ab82      	add	r3, sp, #520	; 0x208
    4aa6:	938b      	str	r3, [sp, #556]	; 0x22c
    4aa8:	ab02      	add	r3, sp, #8
    4aaa:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    4aac:	2800      	cmp	r0, #0
    4aae:	d006      	beq.n	4abe <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    4ab0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4ab2:	231c      	movs	r3, #28
    4ab4:	423b      	tst	r3, r7
    4ab6:	d145      	bne.n	4b44 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    4ab8:	2800      	cmp	r0, #0
    4aba:	d13d      	bne.n	4b38 <f_open+0xb8>
    4abc:	e00c      	b.n	4ad8 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    4abe:	9901      	ldr	r1, [sp, #4]
    4ac0:	a885      	add	r0, sp, #532	; 0x214
    4ac2:	4b4c      	ldr	r3, [pc, #304]	; (4bf4 <f_open+0x174>)
    4ac4:	4798      	blx	r3
	dir = dj.dir;
    4ac6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4ac8:	2800      	cmp	r0, #0
    4aca:	d1f2      	bne.n	4ab2 <f_open+0x32>
		if (!dir)	/* Current dir itself */
    4acc:	2c00      	cmp	r4, #0
    4ace:	d100      	bne.n	4ad2 <f_open+0x52>
    4ad0:	e086      	b.n	4be0 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4ad2:	231c      	movs	r3, #28
    4ad4:	423b      	tst	r3, r7
    4ad6:	d146      	bne.n	4b66 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4ad8:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    4ada:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4adc:	06da      	lsls	r2, r3, #27
    4ade:	d42b      	bmi.n	4b38 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4ae0:	07ba      	lsls	r2, r7, #30
    4ae2:	d502      	bpl.n	4aea <f_open+0x6a>
					res = FR_DENIED;
    4ae4:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4ae6:	07db      	lsls	r3, r3, #31
    4ae8:	d426      	bmi.n	4b38 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    4aea:	073b      	lsls	r3, r7, #28
    4aec:	d501      	bpl.n	4af2 <f_open+0x72>
			mode |= FA__WRITTEN;
    4aee:	2320      	movs	r3, #32
    4af0:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    4af2:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4af6:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    4af8:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    4afa:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    4afc:	7d62      	ldrb	r2, [r4, #21]
    4afe:	0212      	lsls	r2, r2, #8
    4b00:	7d23      	ldrb	r3, [r4, #20]
    4b02:	4313      	orrs	r3, r2
    4b04:	041b      	lsls	r3, r3, #16
    4b06:	7ee1      	ldrb	r1, [r4, #27]
    4b08:	0209      	lsls	r1, r1, #8
    4b0a:	7ea2      	ldrb	r2, [r4, #26]
    4b0c:	430a      	orrs	r2, r1
    4b0e:	4313      	orrs	r3, r2
    4b10:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    4b12:	7fe3      	ldrb	r3, [r4, #31]
    4b14:	061b      	lsls	r3, r3, #24
    4b16:	7fa2      	ldrb	r2, [r4, #30]
    4b18:	0412      	lsls	r2, r2, #16
    4b1a:	4313      	orrs	r3, r2
    4b1c:	7f22      	ldrb	r2, [r4, #28]
    4b1e:	4313      	orrs	r3, r2
    4b20:	7f62      	ldrb	r2, [r4, #29]
    4b22:	0212      	lsls	r2, r2, #8
    4b24:	4313      	orrs	r3, r2
    4b26:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    4b28:	2300      	movs	r3, #0
    4b2a:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    4b2c:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    4b2e:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4b30:	602b      	str	r3, [r5, #0]
    4b32:	88db      	ldrh	r3, [r3, #6]
    4b34:	80ab      	strh	r3, [r5, #4]
    4b36:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    4b38:	238e      	movs	r3, #142	; 0x8e
    4b3a:	009b      	lsls	r3, r3, #2
    4b3c:	449d      	add	sp, r3
    4b3e:	bc04      	pop	{r2}
    4b40:	4690      	mov	r8, r2
    4b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    4b44:	2804      	cmp	r0, #4
    4b46:	d005      	beq.n	4b54 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4b48:	2308      	movs	r3, #8
    4b4a:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4b4c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4b4e:	2800      	cmp	r0, #0
    4b50:	d0d3      	beq.n	4afa <f_open+0x7a>
    4b52:	e7f1      	b.n	4b38 <f_open+0xb8>
				res = dir_register(&dj);
    4b54:	a885      	add	r0, sp, #532	; 0x214
    4b56:	4b28      	ldr	r3, [pc, #160]	; (4bf8 <f_open+0x178>)
    4b58:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4b5a:	2308      	movs	r3, #8
    4b5c:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4b5e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4b60:	2800      	cmp	r0, #0
    4b62:	d008      	beq.n	4b76 <f_open+0xf6>
    4b64:	e7e8      	b.n	4b38 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4b66:	7ae3      	ldrb	r3, [r4, #11]
    4b68:	2211      	movs	r2, #17
				res = FR_DENIED;
    4b6a:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4b6c:	421a      	tst	r2, r3
    4b6e:	d1e3      	bne.n	4b38 <f_open+0xb8>
					res = FR_EXIST;
    4b70:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    4b72:	077b      	lsls	r3, r7, #29
    4b74:	d4e0      	bmi.n	4b38 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4b76:	0733      	lsls	r3, r6, #28
    4b78:	d5bb      	bpl.n	4af2 <f_open+0x72>
			dw = get_fattime();					/* Created time */
    4b7a:	4b20      	ldr	r3, [pc, #128]	; (4bfc <f_open+0x17c>)
    4b7c:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    4b7e:	73a0      	strb	r0, [r4, #14]
    4b80:	0a03      	lsrs	r3, r0, #8
    4b82:	73e3      	strb	r3, [r4, #15]
    4b84:	0c03      	lsrs	r3, r0, #16
    4b86:	7423      	strb	r3, [r4, #16]
    4b88:	0e00      	lsrs	r0, r0, #24
    4b8a:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    4b8c:	2300      	movs	r3, #0
    4b8e:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    4b90:	7723      	strb	r3, [r4, #28]
    4b92:	7763      	strb	r3, [r4, #29]
    4b94:	77a3      	strb	r3, [r4, #30]
    4b96:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    4b98:	7d62      	ldrb	r2, [r4, #21]
    4b9a:	0212      	lsls	r2, r2, #8
    4b9c:	7d27      	ldrb	r7, [r4, #20]
    4b9e:	4317      	orrs	r7, r2
    4ba0:	043f      	lsls	r7, r7, #16
    4ba2:	7ee1      	ldrb	r1, [r4, #27]
    4ba4:	0209      	lsls	r1, r1, #8
    4ba6:	7ea2      	ldrb	r2, [r4, #26]
    4ba8:	430a      	orrs	r2, r1
    4baa:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    4bac:	76a3      	strb	r3, [r4, #26]
    4bae:	76e3      	strb	r3, [r4, #27]
    4bb0:	7523      	strb	r3, [r4, #20]
    4bb2:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    4bb4:	9885      	ldr	r0, [sp, #532]	; 0x214
    4bb6:	3301      	adds	r3, #1
    4bb8:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    4bba:	2f00      	cmp	r7, #0
    4bbc:	d097      	beq.n	4aee <f_open+0x6e>
				dw = dj.fs->winsect;
    4bbe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4bc0:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    4bc2:	0039      	movs	r1, r7
    4bc4:	4b0e      	ldr	r3, [pc, #56]	; (4c00 <f_open+0x180>)
    4bc6:	4798      	blx	r3
				if (res == FR_OK) {
    4bc8:	2800      	cmp	r0, #0
    4bca:	d1b5      	bne.n	4b38 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    4bcc:	9885      	ldr	r0, [sp, #532]	; 0x214
    4bce:	3f01      	subs	r7, #1
    4bd0:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    4bd2:	4641      	mov	r1, r8
    4bd4:	4b0b      	ldr	r3, [pc, #44]	; (4c04 <f_open+0x184>)
    4bd6:	4798      	blx	r3
	if (res == FR_OK) {
    4bd8:	2800      	cmp	r0, #0
    4bda:	d100      	bne.n	4bde <f_open+0x15e>
    4bdc:	e787      	b.n	4aee <f_open+0x6e>
    4bde:	e7ab      	b.n	4b38 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4be0:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    4be2:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4be4:	423b      	tst	r3, r7
    4be6:	d0b2      	beq.n	4b4e <f_open+0xce>
			res = FR_INVALID_NAME;
    4be8:	2006      	movs	r0, #6
    4bea:	e7ad      	b.n	4b48 <f_open+0xc8>
    4bec:	fffffdc8 	.word	0xfffffdc8
    4bf0:	00003811 	.word	0x00003811
    4bf4:	0000470d 	.word	0x0000470d
    4bf8:	00004335 	.word	0x00004335
    4bfc:	00003691 	.word	0x00003691
    4c00:	00004001 	.word	0x00004001
    4c04:	00003bc1 	.word	0x00003bc1

00004c08 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    4c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c0a:	46de      	mov	lr, fp
    4c0c:	4657      	mov	r7, sl
    4c0e:	464e      	mov	r6, r9
    4c10:	4645      	mov	r5, r8
    4c12:	b5e0      	push	{r5, r6, r7, lr}
    4c14:	b083      	sub	sp, #12
    4c16:	0004      	movs	r4, r0
    4c18:	000d      	movs	r5, r1
    4c1a:	0016      	movs	r6, r2
    4c1c:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    4c1e:	2300      	movs	r3, #0
    4c20:	464a      	mov	r2, r9
    4c22:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    4c24:	8881      	ldrh	r1, [r0, #4]
    4c26:	6800      	ldr	r0, [r0, #0]
    4c28:	4b7f      	ldr	r3, [pc, #508]	; (4e28 <f_write+0x220>)
    4c2a:	4798      	blx	r3
    4c2c:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4c2e:	2800      	cmp	r0, #0
    4c30:	d000      	beq.n	4c34 <f_write+0x2c>
    4c32:	e0f1      	b.n	4e18 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    4c34:	79a3      	ldrb	r3, [r4, #6]
    4c36:	b25a      	sxtb	r2, r3
    4c38:	2a00      	cmp	r2, #0
    4c3a:	da00      	bge.n	4c3e <f_write+0x36>
    4c3c:	e0ea      	b.n	4e14 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    4c3e:	079b      	lsls	r3, r3, #30
    4c40:	d402      	bmi.n	4c48 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    4c42:	2307      	movs	r3, #7
    4c44:	9300      	str	r3, [sp, #0]
    4c46:	e0e7      	b.n	4e18 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    4c48:	68e3      	ldr	r3, [r4, #12]
    4c4a:	199a      	adds	r2, r3, r6
    4c4c:	4293      	cmp	r3, r2
    4c4e:	d810      	bhi.n	4c72 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    4c50:	2e00      	cmp	r6, #0
    4c52:	d00e      	beq.n	4c72 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    4c54:	002f      	movs	r7, r5
    4c56:	e07b      	b.n	4d50 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    4c58:	2100      	movs	r1, #0
    4c5a:	4b74      	ldr	r3, [pc, #464]	; (4e2c <f_write+0x224>)
    4c5c:	4798      	blx	r3
    4c5e:	0003      	movs	r3, r0
    4c60:	6120      	str	r0, [r4, #16]
    4c62:	e003      	b.n	4c6c <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    4c64:	6961      	ldr	r1, [r4, #20]
    4c66:	4b71      	ldr	r3, [pc, #452]	; (4e2c <f_write+0x224>)
    4c68:	4798      	blx	r3
    4c6a:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d000      	beq.n	4c72 <f_write+0x6a>
    4c70:	e080      	b.n	4d74 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    4c72:	68a3      	ldr	r3, [r4, #8]
    4c74:	68e2      	ldr	r2, [r4, #12]
    4c76:	4293      	cmp	r3, r2
    4c78:	d900      	bls.n	4c7c <f_write+0x74>
    4c7a:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    4c7c:	79a3      	ldrb	r3, [r4, #6]
    4c7e:	2220      	movs	r2, #32
    4c80:	4313      	orrs	r3, r2
    4c82:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    4c84:	e0c8      	b.n	4e18 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    4c86:	79a2      	ldrb	r2, [r4, #6]
    4c88:	3b81      	subs	r3, #129	; 0x81
    4c8a:	4313      	orrs	r3, r2
    4c8c:	71a3      	strb	r3, [r4, #6]
    4c8e:	2302      	movs	r3, #2
    4c90:	9300      	str	r3, [sp, #0]
    4c92:	e0c1      	b.n	4e18 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4c94:	79a2      	ldrb	r2, [r4, #6]
    4c96:	3b7f      	subs	r3, #127	; 0x7f
    4c98:	4313      	orrs	r3, r2
    4c9a:	71a3      	strb	r3, [r4, #6]
    4c9c:	2301      	movs	r3, #1
    4c9e:	9300      	str	r3, [sp, #0]
    4ca0:	e0ba      	b.n	4e18 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    4ca2:	2100      	movs	r1, #0
    4ca4:	4b62      	ldr	r3, [pc, #392]	; (4e30 <f_write+0x228>)
    4ca6:	4798      	blx	r3
    4ca8:	2800      	cmp	r0, #0
    4caa:	d06d      	beq.n	4d88 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    4cac:	79a2      	ldrb	r2, [r4, #6]
    4cae:	2380      	movs	r3, #128	; 0x80
    4cb0:	425b      	negs	r3, r3
    4cb2:	4313      	orrs	r3, r2
    4cb4:	71a3      	strb	r3, [r4, #6]
    4cb6:	2301      	movs	r3, #1
    4cb8:	9300      	str	r3, [sp, #0]
    4cba:	e0ad      	b.n	4e18 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    4cbc:	79a2      	ldrb	r2, [r4, #6]
    4cbe:	2380      	movs	r3, #128	; 0x80
    4cc0:	425b      	negs	r3, r3
    4cc2:	4313      	orrs	r3, r2
    4cc4:	71a3      	strb	r3, [r4, #6]
    4cc6:	2302      	movs	r3, #2
    4cc8:	9300      	str	r3, [sp, #0]
    4cca:	e0a5      	b.n	4e18 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    4ccc:	79a2      	ldrb	r2, [r4, #6]
    4cce:	2380      	movs	r3, #128	; 0x80
    4cd0:	425b      	negs	r3, r3
    4cd2:	4313      	orrs	r3, r2
    4cd4:	71a3      	strb	r3, [r4, #6]
    4cd6:	2301      	movs	r3, #1
    4cd8:	9300      	str	r3, [sp, #0]
    4cda:	e09d      	b.n	4e18 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    4cdc:	0240      	lsls	r0, r0, #9
    4cde:	1839      	adds	r1, r7, r0
    4ce0:	3330      	adds	r3, #48	; 0x30
    4ce2:	0018      	movs	r0, r3
    4ce4:	2280      	movs	r2, #128	; 0x80
    4ce6:	0092      	lsls	r2, r2, #2
    4ce8:	4b52      	ldr	r3, [pc, #328]	; (4e34 <f_write+0x22c>)
    4cea:	4798      	blx	r3
					fp->fs->wflag = 0;
    4cec:	2300      	movs	r3, #0
    4cee:	6822      	ldr	r2, [r4, #0]
    4cf0:	7113      	strb	r3, [r2, #4]
    4cf2:	e072      	b.n	4dda <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    4cf4:	68a3      	ldr	r3, [r4, #8]
    4cf6:	68e2      	ldr	r2, [r4, #12]
    4cf8:	4293      	cmp	r3, r2
    4cfa:	d271      	bcs.n	4de0 <f_write+0x1d8>
			fp->dsect = sect;
    4cfc:	4643      	mov	r3, r8
    4cfe:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    4d00:	68a3      	ldr	r3, [r4, #8]
    4d02:	05dd      	lsls	r5, r3, #23
    4d04:	0ded      	lsrs	r5, r5, #23
    4d06:	2380      	movs	r3, #128	; 0x80
    4d08:	009b      	lsls	r3, r3, #2
    4d0a:	1b5d      	subs	r5, r3, r5
    4d0c:	42b5      	cmp	r5, r6
    4d0e:	d900      	bls.n	4d12 <f_write+0x10a>
    4d10:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    4d12:	69a1      	ldr	r1, [r4, #24]
    4d14:	6820      	ldr	r0, [r4, #0]
    4d16:	4b46      	ldr	r3, [pc, #280]	; (4e30 <f_write+0x228>)
    4d18:	4798      	blx	r3
    4d1a:	2800      	cmp	r0, #0
    4d1c:	d172      	bne.n	4e04 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    4d1e:	68a3      	ldr	r3, [r4, #8]
    4d20:	05d8      	lsls	r0, r3, #23
    4d22:	0dc0      	lsrs	r0, r0, #23
    4d24:	3030      	adds	r0, #48	; 0x30
    4d26:	6823      	ldr	r3, [r4, #0]
    4d28:	469c      	mov	ip, r3
    4d2a:	4460      	add	r0, ip
    4d2c:	002a      	movs	r2, r5
    4d2e:	0039      	movs	r1, r7
    4d30:	4b40      	ldr	r3, [pc, #256]	; (4e34 <f_write+0x22c>)
    4d32:	4798      	blx	r3
		fp->fs->wflag = 1;
    4d34:	2301      	movs	r3, #1
    4d36:	6822      	ldr	r2, [r4, #0]
    4d38:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    4d3a:	197f      	adds	r7, r7, r5
    4d3c:	68a3      	ldr	r3, [r4, #8]
    4d3e:	195b      	adds	r3, r3, r5
    4d40:	60a3      	str	r3, [r4, #8]
    4d42:	464b      	mov	r3, r9
    4d44:	681b      	ldr	r3, [r3, #0]
    4d46:	195b      	adds	r3, r3, r5
    4d48:	464a      	mov	r2, r9
    4d4a:	6013      	str	r3, [r2, #0]
    4d4c:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    4d4e:	d090      	beq.n	4c72 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    4d50:	68a3      	ldr	r3, [r4, #8]
    4d52:	05da      	lsls	r2, r3, #23
    4d54:	d1d4      	bne.n	4d00 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    4d56:	6820      	ldr	r0, [r4, #0]
    4d58:	7882      	ldrb	r2, [r0, #2]
    4d5a:	3a01      	subs	r2, #1
    4d5c:	0a5d      	lsrs	r5, r3, #9
    4d5e:	4015      	ands	r5, r2
    4d60:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    4d62:	2d00      	cmp	r5, #0
    4d64:	d10b      	bne.n	4d7e <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    4d66:	2b00      	cmp	r3, #0
    4d68:	d000      	beq.n	4d6c <f_write+0x164>
    4d6a:	e77b      	b.n	4c64 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    4d6c:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d100      	bne.n	4d74 <f_write+0x16c>
    4d72:	e771      	b.n	4c58 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    4d74:	2b01      	cmp	r3, #1
    4d76:	d086      	beq.n	4c86 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4d78:	1c5a      	adds	r2, r3, #1
    4d7a:	d08b      	beq.n	4c94 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    4d7c:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    4d7e:	6820      	ldr	r0, [r4, #0]
    4d80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4d82:	69a2      	ldr	r2, [r4, #24]
    4d84:	4293      	cmp	r3, r2
    4d86:	d08c      	beq.n	4ca2 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    4d88:	6823      	ldr	r3, [r4, #0]
    4d8a:	469a      	mov	sl, r3
    4d8c:	6961      	ldr	r1, [r4, #20]
    4d8e:	0018      	movs	r0, r3
    4d90:	4b29      	ldr	r3, [pc, #164]	; (4e38 <f_write+0x230>)
    4d92:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    4d94:	2800      	cmp	r0, #0
    4d96:	d091      	beq.n	4cbc <f_write+0xb4>
			sect += csect;
    4d98:	4680      	mov	r8, r0
    4d9a:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    4d9c:	0a73      	lsrs	r3, r6, #9
    4d9e:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    4da0:	d0a8      	beq.n	4cf4 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    4da2:	4653      	mov	r3, sl
    4da4:	789b      	ldrb	r3, [r3, #2]
    4da6:	465a      	mov	r2, fp
    4da8:	18aa      	adds	r2, r5, r2
    4daa:	429a      	cmp	r2, r3
    4dac:	d901      	bls.n	4db2 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    4dae:	1b5b      	subs	r3, r3, r5
    4db0:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    4db2:	465b      	mov	r3, fp
    4db4:	466a      	mov	r2, sp
    4db6:	71d3      	strb	r3, [r2, #7]
    4db8:	79d3      	ldrb	r3, [r2, #7]
    4dba:	4652      	mov	r2, sl
    4dbc:	7850      	ldrb	r0, [r2, #1]
    4dbe:	4642      	mov	r2, r8
    4dc0:	0039      	movs	r1, r7
    4dc2:	4d1e      	ldr	r5, [pc, #120]	; (4e3c <f_write+0x234>)
    4dc4:	47a8      	blx	r5
    4dc6:	2800      	cmp	r0, #0
    4dc8:	d000      	beq.n	4dcc <f_write+0x1c4>
    4dca:	e77f      	b.n	4ccc <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    4dcc:	6823      	ldr	r3, [r4, #0]
    4dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4dd0:	4641      	mov	r1, r8
    4dd2:	1a50      	subs	r0, r2, r1
    4dd4:	4583      	cmp	fp, r0
    4dd6:	d900      	bls.n	4dda <f_write+0x1d2>
    4dd8:	e780      	b.n	4cdc <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    4dda:	465b      	mov	r3, fp
    4ddc:	025d      	lsls	r5, r3, #9
				continue;
    4dde:	e7ac      	b.n	4d3a <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    4de0:	2100      	movs	r1, #0
    4de2:	4650      	mov	r0, sl
    4de4:	4b12      	ldr	r3, [pc, #72]	; (4e30 <f_write+0x228>)
    4de6:	4798      	blx	r3
    4de8:	2800      	cmp	r0, #0
    4dea:	d103      	bne.n	4df4 <f_write+0x1ec>
				fp->fs->winsect = sect;
    4dec:	6823      	ldr	r3, [r4, #0]
    4dee:	4642      	mov	r2, r8
    4df0:	62da      	str	r2, [r3, #44]	; 0x2c
    4df2:	e783      	b.n	4cfc <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    4df4:	79a2      	ldrb	r2, [r4, #6]
    4df6:	2380      	movs	r3, #128	; 0x80
    4df8:	425b      	negs	r3, r3
    4dfa:	4313      	orrs	r3, r2
    4dfc:	71a3      	strb	r3, [r4, #6]
    4dfe:	2301      	movs	r3, #1
    4e00:	9300      	str	r3, [sp, #0]
    4e02:	e009      	b.n	4e18 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    4e04:	79a2      	ldrb	r2, [r4, #6]
    4e06:	2380      	movs	r3, #128	; 0x80
    4e08:	425b      	negs	r3, r3
    4e0a:	4313      	orrs	r3, r2
    4e0c:	71a3      	strb	r3, [r4, #6]
    4e0e:	2301      	movs	r3, #1
    4e10:	9300      	str	r3, [sp, #0]
    4e12:	e001      	b.n	4e18 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    4e14:	2302      	movs	r3, #2
    4e16:	9300      	str	r3, [sp, #0]
}
    4e18:	9800      	ldr	r0, [sp, #0]
    4e1a:	b003      	add	sp, #12
    4e1c:	bc3c      	pop	{r2, r3, r4, r5}
    4e1e:	4690      	mov	r8, r2
    4e20:	4699      	mov	r9, r3
    4e22:	46a2      	mov	sl, r4
    4e24:	46ab      	mov	fp, r5
    4e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e28:	0000373d 	.word	0x0000373d
    4e2c:	00003f3d 	.word	0x00003f3d
    4e30:	00003bc1 	.word	0x00003bc1
    4e34:	000036e1 	.word	0x000036e1
    4e38:	00003707 	.word	0x00003707
    4e3c:	000035a1 	.word	0x000035a1

00004e40 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    4e40:	b570      	push	{r4, r5, r6, lr}
    4e42:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    4e44:	8881      	ldrh	r1, [r0, #4]
    4e46:	6800      	ldr	r0, [r0, #0]
    4e48:	4b1c      	ldr	r3, [pc, #112]	; (4ebc <f_sync+0x7c>)
    4e4a:	4798      	blx	r3
	if (res == FR_OK) {
    4e4c:	2800      	cmp	r0, #0
    4e4e:	d102      	bne.n	4e56 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    4e50:	79a3      	ldrb	r3, [r4, #6]
    4e52:	069b      	lsls	r3, r3, #26
    4e54:	d400      	bmi.n	4e58 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    4e56:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    4e58:	69e1      	ldr	r1, [r4, #28]
    4e5a:	6820      	ldr	r0, [r4, #0]
    4e5c:	4b18      	ldr	r3, [pc, #96]	; (4ec0 <f_sync+0x80>)
    4e5e:	4798      	blx	r3
			if (res == FR_OK) {
    4e60:	2800      	cmp	r0, #0
    4e62:	d1f8      	bne.n	4e56 <f_sync+0x16>
				dir = fp->dir_ptr;
    4e64:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    4e66:	7aeb      	ldrb	r3, [r5, #11]
    4e68:	2220      	movs	r2, #32
    4e6a:	4313      	orrs	r3, r2
    4e6c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    4e6e:	7b23      	ldrb	r3, [r4, #12]
    4e70:	772b      	strb	r3, [r5, #28]
    4e72:	89a3      	ldrh	r3, [r4, #12]
    4e74:	0a1b      	lsrs	r3, r3, #8
    4e76:	776b      	strb	r3, [r5, #29]
    4e78:	89e3      	ldrh	r3, [r4, #14]
    4e7a:	77ab      	strb	r3, [r5, #30]
    4e7c:	7be3      	ldrb	r3, [r4, #15]
    4e7e:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    4e80:	7c23      	ldrb	r3, [r4, #16]
    4e82:	76ab      	strb	r3, [r5, #26]
    4e84:	8a23      	ldrh	r3, [r4, #16]
    4e86:	0a1b      	lsrs	r3, r3, #8
    4e88:	76eb      	strb	r3, [r5, #27]
    4e8a:	8a63      	ldrh	r3, [r4, #18]
    4e8c:	752b      	strb	r3, [r5, #20]
    4e8e:	8a63      	ldrh	r3, [r4, #18]
    4e90:	0a1b      	lsrs	r3, r3, #8
    4e92:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    4e94:	4b0b      	ldr	r3, [pc, #44]	; (4ec4 <f_sync+0x84>)
    4e96:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    4e98:	75a8      	strb	r0, [r5, #22]
    4e9a:	0a03      	lsrs	r3, r0, #8
    4e9c:	75eb      	strb	r3, [r5, #23]
    4e9e:	0c03      	lsrs	r3, r0, #16
    4ea0:	762b      	strb	r3, [r5, #24]
    4ea2:	0e00      	lsrs	r0, r0, #24
    4ea4:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    4ea6:	79a3      	ldrb	r3, [r4, #6]
    4ea8:	2220      	movs	r2, #32
    4eaa:	4393      	bics	r3, r2
    4eac:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    4eae:	2301      	movs	r3, #1
    4eb0:	6822      	ldr	r2, [r4, #0]
    4eb2:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    4eb4:	6820      	ldr	r0, [r4, #0]
    4eb6:	4b04      	ldr	r3, [pc, #16]	; (4ec8 <f_sync+0x88>)
    4eb8:	4798      	blx	r3
    4eba:	e7cc      	b.n	4e56 <f_sync+0x16>
    4ebc:	0000373d 	.word	0x0000373d
    4ec0:	00003bc1 	.word	0x00003bc1
    4ec4:	00003691 	.word	0x00003691
    4ec8:	00004619 	.word	0x00004619

00004ecc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    4ecc:	b510      	push	{r4, lr}
    4ece:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    4ed0:	4b03      	ldr	r3, [pc, #12]	; (4ee0 <f_close+0x14>)
    4ed2:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    4ed4:	2800      	cmp	r0, #0
    4ed6:	d101      	bne.n	4edc <f_close+0x10>
    4ed8:	2300      	movs	r3, #0
    4eda:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    4edc:	bd10      	pop	{r4, pc}
    4ede:	46c0      	nop			; (mov r8, r8)
    4ee0:	00004e41 	.word	0x00004e41

00004ee4 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    4ee4:	b510      	push	{r4, lr}
    4ee6:	b082      	sub	sp, #8
    4ee8:	000c      	movs	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    4eea:	466b      	mov	r3, sp
    4eec:	7018      	strb	r0, [r3, #0]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    4eee:	ab01      	add	r3, sp, #4
    4ef0:	2201      	movs	r2, #1
    4ef2:	4669      	mov	r1, sp
    4ef4:	0020      	movs	r0, r4
    4ef6:	4c05      	ldr	r4, [pc, #20]	; (4f0c <f_putc+0x28>)
    4ef8:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    4efa:	9b01      	ldr	r3, [sp, #4]
    4efc:	1e58      	subs	r0, r3, #1
    4efe:	1e43      	subs	r3, r0, #1
    4f00:	4198      	sbcs	r0, r3
    4f02:	4240      	negs	r0, r0
    4f04:	2301      	movs	r3, #1
    4f06:	4318      	orrs	r0, r3
}
    4f08:	b002      	add	sp, #8
    4f0a:	bd10      	pop	{r4, pc}
    4f0c:	00004c09 	.word	0x00004c09

00004f10 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    4f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f12:	0006      	movs	r6, r0
    4f14:	000d      	movs	r5, r1
	int n;


	for (n = 0; *str; str++, n++) {
    4f16:	7800      	ldrb	r0, [r0, #0]
    4f18:	2800      	cmp	r0, #0
    4f1a:	d00b      	beq.n	4f34 <f_puts+0x24>
    4f1c:	2400      	movs	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
    4f1e:	4f06      	ldr	r7, [pc, #24]	; (4f38 <f_puts+0x28>)
    4f20:	0029      	movs	r1, r5
    4f22:	47b8      	blx	r7
    4f24:	1c43      	adds	r3, r0, #1
    4f26:	d004      	beq.n	4f32 <f_puts+0x22>
	for (n = 0; *str; str++, n++) {
    4f28:	3401      	adds	r4, #1
    4f2a:	5d30      	ldrb	r0, [r6, r4]
    4f2c:	2800      	cmp	r0, #0
    4f2e:	d1f7      	bne.n	4f20 <f_puts+0x10>
    4f30:	0020      	movs	r0, r4
	}
	return n;
}
    4f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (n = 0; *str; str++, n++) {
    4f34:	2000      	movs	r0, #0
    4f36:	e7fc      	b.n	4f32 <f_puts+0x22>
    4f38:	00004ee5 	.word	0x00004ee5

00004f3c <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    4f3c:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    4f3e:	287f      	cmp	r0, #127	; 0x7f
    4f40:	d911      	bls.n	4f66 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    4f42:	2900      	cmp	r1, #0
    4f44:	d111      	bne.n	4f6a <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    4f46:	28c7      	cmp	r0, #199	; 0xc7
    4f48:	d017      	beq.n	4f7a <ff_convert+0x3e>
    4f4a:	4a0d      	ldr	r2, [pc, #52]	; (4f80 <ff_convert+0x44>)
    4f4c:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    4f4e:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    4f50:	8811      	ldrh	r1, [r2, #0]
    4f52:	4281      	cmp	r1, r0
    4f54:	d004      	beq.n	4f60 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    4f56:	3301      	adds	r3, #1
    4f58:	b29b      	uxth	r3, r3
    4f5a:	3202      	adds	r2, #2
    4f5c:	2b80      	cmp	r3, #128	; 0x80
    4f5e:	d1f7      	bne.n	4f50 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    4f60:	3380      	adds	r3, #128	; 0x80
    4f62:	20ff      	movs	r0, #255	; 0xff
    4f64:	4003      	ands	r3, r0
		}
	}

	return c;
}
    4f66:	0018      	movs	r0, r3
    4f68:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    4f6a:	2300      	movs	r3, #0
    4f6c:	28ff      	cmp	r0, #255	; 0xff
    4f6e:	d8fa      	bhi.n	4f66 <ff_convert+0x2a>
    4f70:	3880      	subs	r0, #128	; 0x80
    4f72:	0040      	lsls	r0, r0, #1
    4f74:	4b02      	ldr	r3, [pc, #8]	; (4f80 <ff_convert+0x44>)
    4f76:	5ac3      	ldrh	r3, [r0, r3]
    4f78:	e7f5      	b.n	4f66 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    4f7a:	2300      	movs	r3, #0
    4f7c:	e7f0      	b.n	4f60 <ff_convert+0x24>
    4f7e:	46c0      	nop			; (mov r8, r8)
    4f80:	00005ea0 	.word	0x00005ea0

00004f84 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    4f84:	2861      	cmp	r0, #97	; 0x61
    4f86:	d014      	beq.n	4fb2 <ff_wtoupper+0x2e>
    4f88:	4b0b      	ldr	r3, [pc, #44]	; (4fb8 <ff_wtoupper+0x34>)
    4f8a:	3304      	adds	r3, #4
    4f8c:	2101      	movs	r1, #1
    4f8e:	2262      	movs	r2, #98	; 0x62
    4f90:	4290      	cmp	r0, r2
    4f92:	d007      	beq.n	4fa4 <ff_wtoupper+0x20>
    4f94:	3101      	adds	r1, #1
    4f96:	3302      	adds	r3, #2
    4f98:	1e9a      	subs	r2, r3, #2
    4f9a:	8812      	ldrh	r2, [r2, #0]
    4f9c:	2a00      	cmp	r2, #0
    4f9e:	d1f7      	bne.n	4f90 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    4fa0:	0003      	movs	r3, r0
    4fa2:	e004      	b.n	4fae <ff_wtoupper+0x2a>
    4fa4:	1e03      	subs	r3, r0, #0
    4fa6:	d002      	beq.n	4fae <ff_wtoupper+0x2a>
    4fa8:	0049      	lsls	r1, r1, #1
    4faa:	4b04      	ldr	r3, [pc, #16]	; (4fbc <ff_wtoupper+0x38>)
    4fac:	5acb      	ldrh	r3, [r1, r3]
}
    4fae:	0018      	movs	r0, r3
    4fb0:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    4fb2:	2100      	movs	r1, #0
    4fb4:	e7f8      	b.n	4fa8 <ff_wtoupper+0x24>
    4fb6:	46c0      	nop			; (mov r8, r8)
    4fb8:	00005fa0 	.word	0x00005fa0
    4fbc:	00006180 	.word	0x00006180

00004fc0 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    4fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fc2:	4c52      	ldr	r4, [pc, #328]	; (510c <main+0x14c>)
    4fc4:	44a5      	add	sp, r4
    4fc6:	af00      	add	r7, sp, #0

	//INITIALIZE VARIABLES
	char test_file_name[] = "0:sd_mmc_test.txt";
    4fc8:	2395      	movs	r3, #149	; 0x95
    4fca:	009b      	lsls	r3, r3, #2
    4fcc:	18fa      	adds	r2, r7, r3
    4fce:	4b50      	ldr	r3, [pc, #320]	; (5110 <main+0x150>)
    4fd0:	cb13      	ldmia	r3!, {r0, r1, r4}
    4fd2:	c213      	stmia	r2!, {r0, r1, r4}
    4fd4:	0011      	movs	r1, r2
    4fd6:	681a      	ldr	r2, [r3, #0]
    4fd8:	600a      	str	r2, [r1, #0]
    4fda:	889b      	ldrh	r3, [r3, #4]
    4fdc:	808b      	strh	r3, [r1, #4]
	FATFS fs;
	FIL file_object;


	//INITIALIZE SYSTEM PERIPHERALS
	system_init();
    4fde:	4b4d      	ldr	r3, [pc, #308]	; (5114 <main+0x154>)
    4fe0:	4798      	blx	r3
	delay_init();
    4fe2:	4b4d      	ldr	r3, [pc, #308]	; (5118 <main+0x158>)
    4fe4:	4798      	blx	r3
	InitializeSerialConsole();
    4fe6:	4b4d      	ldr	r3, [pc, #308]	; (511c <main+0x15c>)
    4fe8:	4798      	blx	r3
	cpu_irq_enable();
    4fea:	4c4d      	ldr	r4, [pc, #308]	; (5120 <main+0x160>)
    4fec:	2501      	movs	r5, #1
    4fee:	7025      	strb	r5, [r4, #0]
    4ff0:	f3bf 8f5f 	dmb	sy
    4ff4:	b662      	cpsie	i
	system_interrupt_enable_global();
	/* Initialize SD MMC stack */
	sd_mmc_init();
    4ff6:	4b4b      	ldr	r3, [pc, #300]	; (5124 <main+0x164>)
    4ff8:	4798      	blx	r3

	irq_initialize_vectors();
	cpu_irq_enable();
    4ffa:	7025      	strb	r5, [r4, #0]
    4ffc:	f3bf 8f5f 	dmb	sy
    5000:	b662      	cpsie	i

	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    5002:	4849      	ldr	r0, [pc, #292]	; (5128 <main+0x168>)
    5004:	4c49      	ldr	r4, [pc, #292]	; (512c <main+0x16c>)
    5006:	47a0      	blx	r4




	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    5008:	4849      	ldr	r0, [pc, #292]	; (5130 <main+0x170>)
    500a:	47a0      	blx	r4

	//Check SD Card is mounted
	while (1) {
		SerialConsoleWriteString("Please plug an SD/MMC card in slot.\n\r");
    500c:	4d47      	ldr	r5, [pc, #284]	; (512c <main+0x16c>)

		/* Wait card present and ready */
		do {
			status = sd_mmc_test_unit_ready(0);
			if (CTRL_FAIL == status) {
				SerialConsoleWriteString("Card install FAIL\n\r");
    500e:	002e      	movs	r6, r5
    5010:	e057      	b.n	50c2 <main+0x102>
    5012:	4848      	ldr	r0, [pc, #288]	; (5134 <main+0x174>)
    5014:	47b0      	blx	r6
				SerialConsoleWriteString("Please unplug and re-plug the card.\n\r");
    5016:	4848      	ldr	r0, [pc, #288]	; (5138 <main+0x178>)
    5018:	47b0      	blx	r6
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    501a:	4c48      	ldr	r4, [pc, #288]	; (513c <main+0x17c>)
    501c:	2000      	movs	r0, #0
    501e:	47a0      	blx	r4
    5020:	2802      	cmp	r0, #2
    5022:	d1fb      	bne.n	501c <main+0x5c>
			status = sd_mmc_test_unit_ready(0);
    5024:	2000      	movs	r0, #0
    5026:	4b46      	ldr	r3, [pc, #280]	; (5140 <main+0x180>)
    5028:	4798      	blx	r3
			if (CTRL_FAIL == status) {
    502a:	2801      	cmp	r0, #1
    502c:	d0f1      	beq.n	5012 <main+0x52>
				}
			}
		} while (CTRL_GOOD != status);
    502e:	2800      	cmp	r0, #0
    5030:	d1f8      	bne.n	5024 <main+0x64>


		//Attempt to mount a FAT file system on the SD Card using FATFS
		SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    5032:	4844      	ldr	r0, [pc, #272]	; (5144 <main+0x184>)
    5034:	4b3d      	ldr	r3, [pc, #244]	; (512c <main+0x16c>)
    5036:	4798      	blx	r3
		memset(&fs, 0, sizeof(FATFS));
    5038:	228c      	movs	r2, #140	; 0x8c
    503a:	0092      	lsls	r2, r2, #2
    503c:	2100      	movs	r1, #0
    503e:	2324      	movs	r3, #36	; 0x24
    5040:	18f8      	adds	r0, r7, r3
    5042:	4b41      	ldr	r3, [pc, #260]	; (5148 <main+0x188>)
    5044:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    5046:	2324      	movs	r3, #36	; 0x24
    5048:	18f9      	adds	r1, r7, r3
    504a:	2000      	movs	r0, #0
    504c:	4b3f      	ldr	r3, [pc, #252]	; (514c <main+0x18c>)
    504e:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    5050:	280b      	cmp	r0, #11
    5052:	d039      	beq.n	50c8 <main+0x108>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
			goto main_end_of_test;
		}
		SerialConsoleWriteString("[OK]\r\n");
    5054:	483e      	ldr	r0, [pc, #248]	; (5150 <main+0x190>)
    5056:	4c35      	ldr	r4, [pc, #212]	; (512c <main+0x16c>)
    5058:	47a0      	blx	r4

		//Create and open a file
		SerialConsoleWriteString("Create a file (f_open)...\r\n");
    505a:	483e      	ldr	r0, [pc, #248]	; (5154 <main+0x194>)
    505c:	47a0      	blx	r4
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    505e:	2395      	movs	r3, #149	; 0x95
    5060:	009b      	lsls	r3, r3, #2
    5062:	18f9      	adds	r1, r7, r3
    5064:	2330      	movs	r3, #48	; 0x30
    5066:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
    5068:	220a      	movs	r2, #10
    506a:	0038      	movs	r0, r7
    506c:	4b3a      	ldr	r3, [pc, #232]	; (5158 <main+0x198>)
    506e:	4798      	blx	r3
				(char const *)test_file_name,
				FA_CREATE_ALWAYS | FA_WRITE);
		if (res != FR_OK) {
    5070:	2800      	cmp	r0, #0
    5072:	d02f      	beq.n	50d4 <main+0x114>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    5074:	0002      	movs	r2, r0
    5076:	4939      	ldr	r1, [pc, #228]	; (515c <main+0x19c>)
    5078:	2000      	movs	r0, #0
    507a:	4b39      	ldr	r3, [pc, #228]	; (5160 <main+0x1a0>)
    507c:	4798      	blx	r3
		SerialConsoleWriteString("[OK]\r\n");
		f_close(&file_object); //Close file
		SerialConsoleWriteString("Test is successful.\n\r");

main_end_of_test:
		SerialConsoleWriteString("Please unplug the card.\n\r");
    507e:	4839      	ldr	r0, [pc, #228]	; (5164 <main+0x1a4>)
    5080:	4c2a      	ldr	r4, [pc, #168]	; (512c <main+0x16c>)
    5082:	47a0      	blx	r4


		delay_s(1); //Delay to allow text to print
    5084:	20fa      	movs	r0, #250	; 0xfa
    5086:	0080      	lsls	r0, r0, #2
    5088:	4b37      	ldr	r3, [pc, #220]	; (5168 <main+0x1a8>)
    508a:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    508c:	b672      	cpsid	i
    508e:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
    5092:	2200      	movs	r2, #0
    5094:	4b22      	ldr	r3, [pc, #136]	; (5120 <main+0x160>)
    5096:	701a      	strb	r2, [r3, #0]

		//Deinitialize HW
		DeinitializeSerialConsole();
    5098:	4b34      	ldr	r3, [pc, #208]	; (516c <main+0x1ac>)
    509a:	4798      	blx	r3
		sd_mmc_deinit();
    509c:	4b34      	ldr	r3, [pc, #208]	; (5170 <main+0x1b0>)
    509e:	4798      	blx	r3
		//Jump to application
		SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    50a0:	4834      	ldr	r0, [pc, #208]	; (5174 <main+0x1b4>)
    50a2:	47a0      	blx	r4
{
/// Function pointer to application section
void (*applicationCodeEntry)(void);

/// Rebase stack pointer
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    50a4:	23b0      	movs	r3, #176	; 0xb0
    50a6:	021b      	lsls	r3, r3, #8
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    50a8:	681a      	ldr	r2, [r3, #0]
    50aa:	f382 8808 	msr	MSP, r2

/// Rebase vector table
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    50ae:	4a32      	ldr	r2, [pc, #200]	; (5178 <main+0x1b8>)
    50b0:	6093      	str	r3, [r2, #8]

/// Set pointer to application section
applicationCodeEntry =
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    50b2:	4b32      	ldr	r3, [pc, #200]	; (517c <main+0x1bc>)

/// Jump to application
applicationCodeEntry();
    50b4:	681b      	ldr	r3, [r3, #0]
    50b6:	4798      	blx	r3
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    50b8:	4c20      	ldr	r4, [pc, #128]	; (513c <main+0x17c>)
    50ba:	2000      	movs	r0, #0
    50bc:	47a0      	blx	r4
    50be:	2802      	cmp	r0, #2
    50c0:	d1fb      	bne.n	50ba <main+0xfa>
		SerialConsoleWriteString("Please plug an SD/MMC card in slot.\n\r");
    50c2:	482f      	ldr	r0, [pc, #188]	; (5180 <main+0x1c0>)
    50c4:	47a8      	blx	r5
    50c6:	e7ad      	b.n	5024 <main+0x64>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    50c8:	220b      	movs	r2, #11
    50ca:	4924      	ldr	r1, [pc, #144]	; (515c <main+0x19c>)
    50cc:	2000      	movs	r0, #0
    50ce:	4b24      	ldr	r3, [pc, #144]	; (5160 <main+0x1a0>)
    50d0:	4798      	blx	r3
			goto main_end_of_test;
    50d2:	e7d4      	b.n	507e <main+0xbe>
		SerialConsoleWriteString("[OK]\r\n");
    50d4:	481e      	ldr	r0, [pc, #120]	; (5150 <main+0x190>)
    50d6:	4c15      	ldr	r4, [pc, #84]	; (512c <main+0x16c>)
    50d8:	47a0      	blx	r4
		SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    50da:	482a      	ldr	r0, [pc, #168]	; (5184 <main+0x1c4>)
    50dc:	47a0      	blx	r4
		if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
    50de:	0039      	movs	r1, r7
    50e0:	4829      	ldr	r0, [pc, #164]	; (5188 <main+0x1c8>)
    50e2:	4b2a      	ldr	r3, [pc, #168]	; (518c <main+0x1cc>)
    50e4:	4798      	blx	r3
    50e6:	2800      	cmp	r0, #0
    50e8:	d107      	bne.n	50fa <main+0x13a>
			f_close(&file_object);
    50ea:	0038      	movs	r0, r7
    50ec:	4b28      	ldr	r3, [pc, #160]	; (5190 <main+0x1d0>)
    50ee:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    50f0:	4928      	ldr	r1, [pc, #160]	; (5194 <main+0x1d4>)
    50f2:	2000      	movs	r0, #0
    50f4:	4b1a      	ldr	r3, [pc, #104]	; (5160 <main+0x1a0>)
    50f6:	4798      	blx	r3
			goto main_end_of_test;
    50f8:	e7c1      	b.n	507e <main+0xbe>
		SerialConsoleWriteString("[OK]\r\n");
    50fa:	4815      	ldr	r0, [pc, #84]	; (5150 <main+0x190>)
    50fc:	4c0b      	ldr	r4, [pc, #44]	; (512c <main+0x16c>)
    50fe:	47a0      	blx	r4
		f_close(&file_object); //Close file
    5100:	0038      	movs	r0, r7
    5102:	4b23      	ldr	r3, [pc, #140]	; (5190 <main+0x1d0>)
    5104:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    5106:	4824      	ldr	r0, [pc, #144]	; (5198 <main+0x1d8>)
    5108:	47a0      	blx	r4
    510a:	e7b8      	b.n	507e <main+0xbe>
    510c:	fffffd94 	.word	0xfffffd94
    5110:	000064ec 	.word	0x000064ec
    5114:	00003285 	.word	0x00003285
    5118:	00000115 	.word	0x00000115
    511c:	000002e5 	.word	0x000002e5
    5120:	20000009 	.word	0x20000009
    5124:	00000679 	.word	0x00000679
    5128:	00006360 	.word	0x00006360
    512c:	00000485 	.word	0x00000485
    5130:	0000637c 	.word	0x0000637c
    5134:	000063cc 	.word	0x000063cc
    5138:	000063e0 	.word	0x000063e0
    513c:	00000699 	.word	0x00000699
    5140:	00000dad 	.word	0x00000dad
    5144:	00006408 	.word	0x00006408
    5148:	00005539 	.word	0x00005539
    514c:	00004a51 	.word	0x00004a51
    5150:	00006434 	.word	0x00006434
    5154:	0000643c 	.word	0x0000643c
    5158:	00004a81 	.word	0x00004a81
    515c:	00006424 	.word	0x00006424
    5160:	0000054d 	.word	0x0000054d
    5164:	000064b4 	.word	0x000064b4
    5168:	00000155 	.word	0x00000155
    516c:	0000044d 	.word	0x0000044d
    5170:	000010fd 	.word	0x000010fd
    5174:	000064d0 	.word	0x000064d0
    5178:	e000ed00 	.word	0xe000ed00
    517c:	0000b004 	.word	0x0000b004
    5180:	000063a4 	.word	0x000063a4
    5184:	00006458 	.word	0x00006458
    5188:	0000647c 	.word	0x0000647c
    518c:	00004f11 	.word	0x00004f11
    5190:	00004ecd 	.word	0x00004ecd
    5194:	00006490 	.word	0x00006490
    5198:	0000649c 	.word	0x0000649c

0000519c <__udivsi3>:
    519c:	2200      	movs	r2, #0
    519e:	0843      	lsrs	r3, r0, #1
    51a0:	428b      	cmp	r3, r1
    51a2:	d374      	bcc.n	528e <__udivsi3+0xf2>
    51a4:	0903      	lsrs	r3, r0, #4
    51a6:	428b      	cmp	r3, r1
    51a8:	d35f      	bcc.n	526a <__udivsi3+0xce>
    51aa:	0a03      	lsrs	r3, r0, #8
    51ac:	428b      	cmp	r3, r1
    51ae:	d344      	bcc.n	523a <__udivsi3+0x9e>
    51b0:	0b03      	lsrs	r3, r0, #12
    51b2:	428b      	cmp	r3, r1
    51b4:	d328      	bcc.n	5208 <__udivsi3+0x6c>
    51b6:	0c03      	lsrs	r3, r0, #16
    51b8:	428b      	cmp	r3, r1
    51ba:	d30d      	bcc.n	51d8 <__udivsi3+0x3c>
    51bc:	22ff      	movs	r2, #255	; 0xff
    51be:	0209      	lsls	r1, r1, #8
    51c0:	ba12      	rev	r2, r2
    51c2:	0c03      	lsrs	r3, r0, #16
    51c4:	428b      	cmp	r3, r1
    51c6:	d302      	bcc.n	51ce <__udivsi3+0x32>
    51c8:	1212      	asrs	r2, r2, #8
    51ca:	0209      	lsls	r1, r1, #8
    51cc:	d065      	beq.n	529a <__udivsi3+0xfe>
    51ce:	0b03      	lsrs	r3, r0, #12
    51d0:	428b      	cmp	r3, r1
    51d2:	d319      	bcc.n	5208 <__udivsi3+0x6c>
    51d4:	e000      	b.n	51d8 <__udivsi3+0x3c>
    51d6:	0a09      	lsrs	r1, r1, #8
    51d8:	0bc3      	lsrs	r3, r0, #15
    51da:	428b      	cmp	r3, r1
    51dc:	d301      	bcc.n	51e2 <__udivsi3+0x46>
    51de:	03cb      	lsls	r3, r1, #15
    51e0:	1ac0      	subs	r0, r0, r3
    51e2:	4152      	adcs	r2, r2
    51e4:	0b83      	lsrs	r3, r0, #14
    51e6:	428b      	cmp	r3, r1
    51e8:	d301      	bcc.n	51ee <__udivsi3+0x52>
    51ea:	038b      	lsls	r3, r1, #14
    51ec:	1ac0      	subs	r0, r0, r3
    51ee:	4152      	adcs	r2, r2
    51f0:	0b43      	lsrs	r3, r0, #13
    51f2:	428b      	cmp	r3, r1
    51f4:	d301      	bcc.n	51fa <__udivsi3+0x5e>
    51f6:	034b      	lsls	r3, r1, #13
    51f8:	1ac0      	subs	r0, r0, r3
    51fa:	4152      	adcs	r2, r2
    51fc:	0b03      	lsrs	r3, r0, #12
    51fe:	428b      	cmp	r3, r1
    5200:	d301      	bcc.n	5206 <__udivsi3+0x6a>
    5202:	030b      	lsls	r3, r1, #12
    5204:	1ac0      	subs	r0, r0, r3
    5206:	4152      	adcs	r2, r2
    5208:	0ac3      	lsrs	r3, r0, #11
    520a:	428b      	cmp	r3, r1
    520c:	d301      	bcc.n	5212 <__udivsi3+0x76>
    520e:	02cb      	lsls	r3, r1, #11
    5210:	1ac0      	subs	r0, r0, r3
    5212:	4152      	adcs	r2, r2
    5214:	0a83      	lsrs	r3, r0, #10
    5216:	428b      	cmp	r3, r1
    5218:	d301      	bcc.n	521e <__udivsi3+0x82>
    521a:	028b      	lsls	r3, r1, #10
    521c:	1ac0      	subs	r0, r0, r3
    521e:	4152      	adcs	r2, r2
    5220:	0a43      	lsrs	r3, r0, #9
    5222:	428b      	cmp	r3, r1
    5224:	d301      	bcc.n	522a <__udivsi3+0x8e>
    5226:	024b      	lsls	r3, r1, #9
    5228:	1ac0      	subs	r0, r0, r3
    522a:	4152      	adcs	r2, r2
    522c:	0a03      	lsrs	r3, r0, #8
    522e:	428b      	cmp	r3, r1
    5230:	d301      	bcc.n	5236 <__udivsi3+0x9a>
    5232:	020b      	lsls	r3, r1, #8
    5234:	1ac0      	subs	r0, r0, r3
    5236:	4152      	adcs	r2, r2
    5238:	d2cd      	bcs.n	51d6 <__udivsi3+0x3a>
    523a:	09c3      	lsrs	r3, r0, #7
    523c:	428b      	cmp	r3, r1
    523e:	d301      	bcc.n	5244 <__udivsi3+0xa8>
    5240:	01cb      	lsls	r3, r1, #7
    5242:	1ac0      	subs	r0, r0, r3
    5244:	4152      	adcs	r2, r2
    5246:	0983      	lsrs	r3, r0, #6
    5248:	428b      	cmp	r3, r1
    524a:	d301      	bcc.n	5250 <__udivsi3+0xb4>
    524c:	018b      	lsls	r3, r1, #6
    524e:	1ac0      	subs	r0, r0, r3
    5250:	4152      	adcs	r2, r2
    5252:	0943      	lsrs	r3, r0, #5
    5254:	428b      	cmp	r3, r1
    5256:	d301      	bcc.n	525c <__udivsi3+0xc0>
    5258:	014b      	lsls	r3, r1, #5
    525a:	1ac0      	subs	r0, r0, r3
    525c:	4152      	adcs	r2, r2
    525e:	0903      	lsrs	r3, r0, #4
    5260:	428b      	cmp	r3, r1
    5262:	d301      	bcc.n	5268 <__udivsi3+0xcc>
    5264:	010b      	lsls	r3, r1, #4
    5266:	1ac0      	subs	r0, r0, r3
    5268:	4152      	adcs	r2, r2
    526a:	08c3      	lsrs	r3, r0, #3
    526c:	428b      	cmp	r3, r1
    526e:	d301      	bcc.n	5274 <__udivsi3+0xd8>
    5270:	00cb      	lsls	r3, r1, #3
    5272:	1ac0      	subs	r0, r0, r3
    5274:	4152      	adcs	r2, r2
    5276:	0883      	lsrs	r3, r0, #2
    5278:	428b      	cmp	r3, r1
    527a:	d301      	bcc.n	5280 <__udivsi3+0xe4>
    527c:	008b      	lsls	r3, r1, #2
    527e:	1ac0      	subs	r0, r0, r3
    5280:	4152      	adcs	r2, r2
    5282:	0843      	lsrs	r3, r0, #1
    5284:	428b      	cmp	r3, r1
    5286:	d301      	bcc.n	528c <__udivsi3+0xf0>
    5288:	004b      	lsls	r3, r1, #1
    528a:	1ac0      	subs	r0, r0, r3
    528c:	4152      	adcs	r2, r2
    528e:	1a41      	subs	r1, r0, r1
    5290:	d200      	bcs.n	5294 <__udivsi3+0xf8>
    5292:	4601      	mov	r1, r0
    5294:	4152      	adcs	r2, r2
    5296:	4610      	mov	r0, r2
    5298:	4770      	bx	lr
    529a:	e7ff      	b.n	529c <__udivsi3+0x100>
    529c:	b501      	push	{r0, lr}
    529e:	2000      	movs	r0, #0
    52a0:	f000 f8f0 	bl	5484 <__aeabi_idiv0>
    52a4:	bd02      	pop	{r1, pc}
    52a6:	46c0      	nop			; (mov r8, r8)

000052a8 <__aeabi_uidivmod>:
    52a8:	2900      	cmp	r1, #0
    52aa:	d0f7      	beq.n	529c <__udivsi3+0x100>
    52ac:	e776      	b.n	519c <__udivsi3>
    52ae:	4770      	bx	lr

000052b0 <__divsi3>:
    52b0:	4603      	mov	r3, r0
    52b2:	430b      	orrs	r3, r1
    52b4:	d47f      	bmi.n	53b6 <__divsi3+0x106>
    52b6:	2200      	movs	r2, #0
    52b8:	0843      	lsrs	r3, r0, #1
    52ba:	428b      	cmp	r3, r1
    52bc:	d374      	bcc.n	53a8 <__divsi3+0xf8>
    52be:	0903      	lsrs	r3, r0, #4
    52c0:	428b      	cmp	r3, r1
    52c2:	d35f      	bcc.n	5384 <__divsi3+0xd4>
    52c4:	0a03      	lsrs	r3, r0, #8
    52c6:	428b      	cmp	r3, r1
    52c8:	d344      	bcc.n	5354 <__divsi3+0xa4>
    52ca:	0b03      	lsrs	r3, r0, #12
    52cc:	428b      	cmp	r3, r1
    52ce:	d328      	bcc.n	5322 <__divsi3+0x72>
    52d0:	0c03      	lsrs	r3, r0, #16
    52d2:	428b      	cmp	r3, r1
    52d4:	d30d      	bcc.n	52f2 <__divsi3+0x42>
    52d6:	22ff      	movs	r2, #255	; 0xff
    52d8:	0209      	lsls	r1, r1, #8
    52da:	ba12      	rev	r2, r2
    52dc:	0c03      	lsrs	r3, r0, #16
    52de:	428b      	cmp	r3, r1
    52e0:	d302      	bcc.n	52e8 <__divsi3+0x38>
    52e2:	1212      	asrs	r2, r2, #8
    52e4:	0209      	lsls	r1, r1, #8
    52e6:	d065      	beq.n	53b4 <__divsi3+0x104>
    52e8:	0b03      	lsrs	r3, r0, #12
    52ea:	428b      	cmp	r3, r1
    52ec:	d319      	bcc.n	5322 <__divsi3+0x72>
    52ee:	e000      	b.n	52f2 <__divsi3+0x42>
    52f0:	0a09      	lsrs	r1, r1, #8
    52f2:	0bc3      	lsrs	r3, r0, #15
    52f4:	428b      	cmp	r3, r1
    52f6:	d301      	bcc.n	52fc <__divsi3+0x4c>
    52f8:	03cb      	lsls	r3, r1, #15
    52fa:	1ac0      	subs	r0, r0, r3
    52fc:	4152      	adcs	r2, r2
    52fe:	0b83      	lsrs	r3, r0, #14
    5300:	428b      	cmp	r3, r1
    5302:	d301      	bcc.n	5308 <__divsi3+0x58>
    5304:	038b      	lsls	r3, r1, #14
    5306:	1ac0      	subs	r0, r0, r3
    5308:	4152      	adcs	r2, r2
    530a:	0b43      	lsrs	r3, r0, #13
    530c:	428b      	cmp	r3, r1
    530e:	d301      	bcc.n	5314 <__divsi3+0x64>
    5310:	034b      	lsls	r3, r1, #13
    5312:	1ac0      	subs	r0, r0, r3
    5314:	4152      	adcs	r2, r2
    5316:	0b03      	lsrs	r3, r0, #12
    5318:	428b      	cmp	r3, r1
    531a:	d301      	bcc.n	5320 <__divsi3+0x70>
    531c:	030b      	lsls	r3, r1, #12
    531e:	1ac0      	subs	r0, r0, r3
    5320:	4152      	adcs	r2, r2
    5322:	0ac3      	lsrs	r3, r0, #11
    5324:	428b      	cmp	r3, r1
    5326:	d301      	bcc.n	532c <__divsi3+0x7c>
    5328:	02cb      	lsls	r3, r1, #11
    532a:	1ac0      	subs	r0, r0, r3
    532c:	4152      	adcs	r2, r2
    532e:	0a83      	lsrs	r3, r0, #10
    5330:	428b      	cmp	r3, r1
    5332:	d301      	bcc.n	5338 <__divsi3+0x88>
    5334:	028b      	lsls	r3, r1, #10
    5336:	1ac0      	subs	r0, r0, r3
    5338:	4152      	adcs	r2, r2
    533a:	0a43      	lsrs	r3, r0, #9
    533c:	428b      	cmp	r3, r1
    533e:	d301      	bcc.n	5344 <__divsi3+0x94>
    5340:	024b      	lsls	r3, r1, #9
    5342:	1ac0      	subs	r0, r0, r3
    5344:	4152      	adcs	r2, r2
    5346:	0a03      	lsrs	r3, r0, #8
    5348:	428b      	cmp	r3, r1
    534a:	d301      	bcc.n	5350 <__divsi3+0xa0>
    534c:	020b      	lsls	r3, r1, #8
    534e:	1ac0      	subs	r0, r0, r3
    5350:	4152      	adcs	r2, r2
    5352:	d2cd      	bcs.n	52f0 <__divsi3+0x40>
    5354:	09c3      	lsrs	r3, r0, #7
    5356:	428b      	cmp	r3, r1
    5358:	d301      	bcc.n	535e <__divsi3+0xae>
    535a:	01cb      	lsls	r3, r1, #7
    535c:	1ac0      	subs	r0, r0, r3
    535e:	4152      	adcs	r2, r2
    5360:	0983      	lsrs	r3, r0, #6
    5362:	428b      	cmp	r3, r1
    5364:	d301      	bcc.n	536a <__divsi3+0xba>
    5366:	018b      	lsls	r3, r1, #6
    5368:	1ac0      	subs	r0, r0, r3
    536a:	4152      	adcs	r2, r2
    536c:	0943      	lsrs	r3, r0, #5
    536e:	428b      	cmp	r3, r1
    5370:	d301      	bcc.n	5376 <__divsi3+0xc6>
    5372:	014b      	lsls	r3, r1, #5
    5374:	1ac0      	subs	r0, r0, r3
    5376:	4152      	adcs	r2, r2
    5378:	0903      	lsrs	r3, r0, #4
    537a:	428b      	cmp	r3, r1
    537c:	d301      	bcc.n	5382 <__divsi3+0xd2>
    537e:	010b      	lsls	r3, r1, #4
    5380:	1ac0      	subs	r0, r0, r3
    5382:	4152      	adcs	r2, r2
    5384:	08c3      	lsrs	r3, r0, #3
    5386:	428b      	cmp	r3, r1
    5388:	d301      	bcc.n	538e <__divsi3+0xde>
    538a:	00cb      	lsls	r3, r1, #3
    538c:	1ac0      	subs	r0, r0, r3
    538e:	4152      	adcs	r2, r2
    5390:	0883      	lsrs	r3, r0, #2
    5392:	428b      	cmp	r3, r1
    5394:	d301      	bcc.n	539a <__divsi3+0xea>
    5396:	008b      	lsls	r3, r1, #2
    5398:	1ac0      	subs	r0, r0, r3
    539a:	4152      	adcs	r2, r2
    539c:	0843      	lsrs	r3, r0, #1
    539e:	428b      	cmp	r3, r1
    53a0:	d301      	bcc.n	53a6 <__divsi3+0xf6>
    53a2:	004b      	lsls	r3, r1, #1
    53a4:	1ac0      	subs	r0, r0, r3
    53a6:	4152      	adcs	r2, r2
    53a8:	1a41      	subs	r1, r0, r1
    53aa:	d200      	bcs.n	53ae <__divsi3+0xfe>
    53ac:	4601      	mov	r1, r0
    53ae:	4152      	adcs	r2, r2
    53b0:	4610      	mov	r0, r2
    53b2:	4770      	bx	lr
    53b4:	e05d      	b.n	5472 <__divsi3+0x1c2>
    53b6:	0fca      	lsrs	r2, r1, #31
    53b8:	d000      	beq.n	53bc <__divsi3+0x10c>
    53ba:	4249      	negs	r1, r1
    53bc:	1003      	asrs	r3, r0, #32
    53be:	d300      	bcc.n	53c2 <__divsi3+0x112>
    53c0:	4240      	negs	r0, r0
    53c2:	4053      	eors	r3, r2
    53c4:	2200      	movs	r2, #0
    53c6:	469c      	mov	ip, r3
    53c8:	0903      	lsrs	r3, r0, #4
    53ca:	428b      	cmp	r3, r1
    53cc:	d32d      	bcc.n	542a <__divsi3+0x17a>
    53ce:	0a03      	lsrs	r3, r0, #8
    53d0:	428b      	cmp	r3, r1
    53d2:	d312      	bcc.n	53fa <__divsi3+0x14a>
    53d4:	22fc      	movs	r2, #252	; 0xfc
    53d6:	0189      	lsls	r1, r1, #6
    53d8:	ba12      	rev	r2, r2
    53da:	0a03      	lsrs	r3, r0, #8
    53dc:	428b      	cmp	r3, r1
    53de:	d30c      	bcc.n	53fa <__divsi3+0x14a>
    53e0:	0189      	lsls	r1, r1, #6
    53e2:	1192      	asrs	r2, r2, #6
    53e4:	428b      	cmp	r3, r1
    53e6:	d308      	bcc.n	53fa <__divsi3+0x14a>
    53e8:	0189      	lsls	r1, r1, #6
    53ea:	1192      	asrs	r2, r2, #6
    53ec:	428b      	cmp	r3, r1
    53ee:	d304      	bcc.n	53fa <__divsi3+0x14a>
    53f0:	0189      	lsls	r1, r1, #6
    53f2:	d03a      	beq.n	546a <__divsi3+0x1ba>
    53f4:	1192      	asrs	r2, r2, #6
    53f6:	e000      	b.n	53fa <__divsi3+0x14a>
    53f8:	0989      	lsrs	r1, r1, #6
    53fa:	09c3      	lsrs	r3, r0, #7
    53fc:	428b      	cmp	r3, r1
    53fe:	d301      	bcc.n	5404 <__divsi3+0x154>
    5400:	01cb      	lsls	r3, r1, #7
    5402:	1ac0      	subs	r0, r0, r3
    5404:	4152      	adcs	r2, r2
    5406:	0983      	lsrs	r3, r0, #6
    5408:	428b      	cmp	r3, r1
    540a:	d301      	bcc.n	5410 <__divsi3+0x160>
    540c:	018b      	lsls	r3, r1, #6
    540e:	1ac0      	subs	r0, r0, r3
    5410:	4152      	adcs	r2, r2
    5412:	0943      	lsrs	r3, r0, #5
    5414:	428b      	cmp	r3, r1
    5416:	d301      	bcc.n	541c <__divsi3+0x16c>
    5418:	014b      	lsls	r3, r1, #5
    541a:	1ac0      	subs	r0, r0, r3
    541c:	4152      	adcs	r2, r2
    541e:	0903      	lsrs	r3, r0, #4
    5420:	428b      	cmp	r3, r1
    5422:	d301      	bcc.n	5428 <__divsi3+0x178>
    5424:	010b      	lsls	r3, r1, #4
    5426:	1ac0      	subs	r0, r0, r3
    5428:	4152      	adcs	r2, r2
    542a:	08c3      	lsrs	r3, r0, #3
    542c:	428b      	cmp	r3, r1
    542e:	d301      	bcc.n	5434 <__divsi3+0x184>
    5430:	00cb      	lsls	r3, r1, #3
    5432:	1ac0      	subs	r0, r0, r3
    5434:	4152      	adcs	r2, r2
    5436:	0883      	lsrs	r3, r0, #2
    5438:	428b      	cmp	r3, r1
    543a:	d301      	bcc.n	5440 <__divsi3+0x190>
    543c:	008b      	lsls	r3, r1, #2
    543e:	1ac0      	subs	r0, r0, r3
    5440:	4152      	adcs	r2, r2
    5442:	d2d9      	bcs.n	53f8 <__divsi3+0x148>
    5444:	0843      	lsrs	r3, r0, #1
    5446:	428b      	cmp	r3, r1
    5448:	d301      	bcc.n	544e <__divsi3+0x19e>
    544a:	004b      	lsls	r3, r1, #1
    544c:	1ac0      	subs	r0, r0, r3
    544e:	4152      	adcs	r2, r2
    5450:	1a41      	subs	r1, r0, r1
    5452:	d200      	bcs.n	5456 <__divsi3+0x1a6>
    5454:	4601      	mov	r1, r0
    5456:	4663      	mov	r3, ip
    5458:	4152      	adcs	r2, r2
    545a:	105b      	asrs	r3, r3, #1
    545c:	4610      	mov	r0, r2
    545e:	d301      	bcc.n	5464 <__divsi3+0x1b4>
    5460:	4240      	negs	r0, r0
    5462:	2b00      	cmp	r3, #0
    5464:	d500      	bpl.n	5468 <__divsi3+0x1b8>
    5466:	4249      	negs	r1, r1
    5468:	4770      	bx	lr
    546a:	4663      	mov	r3, ip
    546c:	105b      	asrs	r3, r3, #1
    546e:	d300      	bcc.n	5472 <__divsi3+0x1c2>
    5470:	4240      	negs	r0, r0
    5472:	b501      	push	{r0, lr}
    5474:	2000      	movs	r0, #0
    5476:	f000 f805 	bl	5484 <__aeabi_idiv0>
    547a:	bd02      	pop	{r1, pc}

0000547c <__aeabi_idivmod>:
    547c:	2900      	cmp	r1, #0
    547e:	d0f8      	beq.n	5472 <__divsi3+0x1c2>
    5480:	e716      	b.n	52b0 <__divsi3>
    5482:	4770      	bx	lr

00005484 <__aeabi_idiv0>:
    5484:	4770      	bx	lr
    5486:	46c0      	nop			; (mov r8, r8)

00005488 <__aeabi_lmul>:
    5488:	b5f0      	push	{r4, r5, r6, r7, lr}
    548a:	46ce      	mov	lr, r9
    548c:	4647      	mov	r7, r8
    548e:	0415      	lsls	r5, r2, #16
    5490:	0c2d      	lsrs	r5, r5, #16
    5492:	002e      	movs	r6, r5
    5494:	b580      	push	{r7, lr}
    5496:	0407      	lsls	r7, r0, #16
    5498:	0c14      	lsrs	r4, r2, #16
    549a:	0c3f      	lsrs	r7, r7, #16
    549c:	4699      	mov	r9, r3
    549e:	0c03      	lsrs	r3, r0, #16
    54a0:	437e      	muls	r6, r7
    54a2:	435d      	muls	r5, r3
    54a4:	4367      	muls	r7, r4
    54a6:	4363      	muls	r3, r4
    54a8:	197f      	adds	r7, r7, r5
    54aa:	0c34      	lsrs	r4, r6, #16
    54ac:	19e4      	adds	r4, r4, r7
    54ae:	469c      	mov	ip, r3
    54b0:	42a5      	cmp	r5, r4
    54b2:	d903      	bls.n	54bc <__aeabi_lmul+0x34>
    54b4:	2380      	movs	r3, #128	; 0x80
    54b6:	025b      	lsls	r3, r3, #9
    54b8:	4698      	mov	r8, r3
    54ba:	44c4      	add	ip, r8
    54bc:	464b      	mov	r3, r9
    54be:	4351      	muls	r1, r2
    54c0:	4343      	muls	r3, r0
    54c2:	0436      	lsls	r6, r6, #16
    54c4:	0c36      	lsrs	r6, r6, #16
    54c6:	0c25      	lsrs	r5, r4, #16
    54c8:	0424      	lsls	r4, r4, #16
    54ca:	4465      	add	r5, ip
    54cc:	19a4      	adds	r4, r4, r6
    54ce:	1859      	adds	r1, r3, r1
    54d0:	1949      	adds	r1, r1, r5
    54d2:	0020      	movs	r0, r4
    54d4:	bc0c      	pop	{r2, r3}
    54d6:	4690      	mov	r8, r2
    54d8:	4699      	mov	r9, r3
    54da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000054dc <__libc_init_array>:
    54dc:	b570      	push	{r4, r5, r6, lr}
    54de:	2600      	movs	r6, #0
    54e0:	4d0c      	ldr	r5, [pc, #48]	; (5514 <__libc_init_array+0x38>)
    54e2:	4c0d      	ldr	r4, [pc, #52]	; (5518 <__libc_init_array+0x3c>)
    54e4:	1b64      	subs	r4, r4, r5
    54e6:	10a4      	asrs	r4, r4, #2
    54e8:	42a6      	cmp	r6, r4
    54ea:	d109      	bne.n	5500 <__libc_init_array+0x24>
    54ec:	2600      	movs	r6, #0
    54ee:	f001 f839 	bl	6564 <_init>
    54f2:	4d0a      	ldr	r5, [pc, #40]	; (551c <__libc_init_array+0x40>)
    54f4:	4c0a      	ldr	r4, [pc, #40]	; (5520 <__libc_init_array+0x44>)
    54f6:	1b64      	subs	r4, r4, r5
    54f8:	10a4      	asrs	r4, r4, #2
    54fa:	42a6      	cmp	r6, r4
    54fc:	d105      	bne.n	550a <__libc_init_array+0x2e>
    54fe:	bd70      	pop	{r4, r5, r6, pc}
    5500:	00b3      	lsls	r3, r6, #2
    5502:	58eb      	ldr	r3, [r5, r3]
    5504:	4798      	blx	r3
    5506:	3601      	adds	r6, #1
    5508:	e7ee      	b.n	54e8 <__libc_init_array+0xc>
    550a:	00b3      	lsls	r3, r6, #2
    550c:	58eb      	ldr	r3, [r5, r3]
    550e:	4798      	blx	r3
    5510:	3601      	adds	r6, #1
    5512:	e7f2      	b.n	54fa <__libc_init_array+0x1e>
    5514:	00006570 	.word	0x00006570
    5518:	00006570 	.word	0x00006570
    551c:	00006570 	.word	0x00006570
    5520:	00006574 	.word	0x00006574

00005524 <malloc>:
    5524:	b510      	push	{r4, lr}
    5526:	4b03      	ldr	r3, [pc, #12]	; (5534 <malloc+0x10>)
    5528:	0001      	movs	r1, r0
    552a:	6818      	ldr	r0, [r3, #0]
    552c:	f000 f856 	bl	55dc <_malloc_r>
    5530:	bd10      	pop	{r4, pc}
    5532:	46c0      	nop			; (mov r8, r8)
    5534:	2000000c 	.word	0x2000000c

00005538 <memset>:
    5538:	0003      	movs	r3, r0
    553a:	1882      	adds	r2, r0, r2
    553c:	4293      	cmp	r3, r2
    553e:	d100      	bne.n	5542 <memset+0xa>
    5540:	4770      	bx	lr
    5542:	7019      	strb	r1, [r3, #0]
    5544:	3301      	adds	r3, #1
    5546:	e7f9      	b.n	553c <memset+0x4>

00005548 <_free_r>:
    5548:	b570      	push	{r4, r5, r6, lr}
    554a:	0005      	movs	r5, r0
    554c:	2900      	cmp	r1, #0
    554e:	d010      	beq.n	5572 <_free_r+0x2a>
    5550:	1f0c      	subs	r4, r1, #4
    5552:	6823      	ldr	r3, [r4, #0]
    5554:	2b00      	cmp	r3, #0
    5556:	da00      	bge.n	555a <_free_r+0x12>
    5558:	18e4      	adds	r4, r4, r3
    555a:	0028      	movs	r0, r5
    555c:	f000 fb22 	bl	5ba4 <__malloc_lock>
    5560:	4a1d      	ldr	r2, [pc, #116]	; (55d8 <_free_r+0x90>)
    5562:	6813      	ldr	r3, [r2, #0]
    5564:	2b00      	cmp	r3, #0
    5566:	d105      	bne.n	5574 <_free_r+0x2c>
    5568:	6063      	str	r3, [r4, #4]
    556a:	6014      	str	r4, [r2, #0]
    556c:	0028      	movs	r0, r5
    556e:	f000 fb1a 	bl	5ba6 <__malloc_unlock>
    5572:	bd70      	pop	{r4, r5, r6, pc}
    5574:	42a3      	cmp	r3, r4
    5576:	d909      	bls.n	558c <_free_r+0x44>
    5578:	6821      	ldr	r1, [r4, #0]
    557a:	1860      	adds	r0, r4, r1
    557c:	4283      	cmp	r3, r0
    557e:	d1f3      	bne.n	5568 <_free_r+0x20>
    5580:	6818      	ldr	r0, [r3, #0]
    5582:	685b      	ldr	r3, [r3, #4]
    5584:	1841      	adds	r1, r0, r1
    5586:	6021      	str	r1, [r4, #0]
    5588:	e7ee      	b.n	5568 <_free_r+0x20>
    558a:	0013      	movs	r3, r2
    558c:	685a      	ldr	r2, [r3, #4]
    558e:	2a00      	cmp	r2, #0
    5590:	d001      	beq.n	5596 <_free_r+0x4e>
    5592:	42a2      	cmp	r2, r4
    5594:	d9f9      	bls.n	558a <_free_r+0x42>
    5596:	6819      	ldr	r1, [r3, #0]
    5598:	1858      	adds	r0, r3, r1
    559a:	42a0      	cmp	r0, r4
    559c:	d10b      	bne.n	55b6 <_free_r+0x6e>
    559e:	6820      	ldr	r0, [r4, #0]
    55a0:	1809      	adds	r1, r1, r0
    55a2:	1858      	adds	r0, r3, r1
    55a4:	6019      	str	r1, [r3, #0]
    55a6:	4282      	cmp	r2, r0
    55a8:	d1e0      	bne.n	556c <_free_r+0x24>
    55aa:	6810      	ldr	r0, [r2, #0]
    55ac:	6852      	ldr	r2, [r2, #4]
    55ae:	1841      	adds	r1, r0, r1
    55b0:	6019      	str	r1, [r3, #0]
    55b2:	605a      	str	r2, [r3, #4]
    55b4:	e7da      	b.n	556c <_free_r+0x24>
    55b6:	42a0      	cmp	r0, r4
    55b8:	d902      	bls.n	55c0 <_free_r+0x78>
    55ba:	230c      	movs	r3, #12
    55bc:	602b      	str	r3, [r5, #0]
    55be:	e7d5      	b.n	556c <_free_r+0x24>
    55c0:	6821      	ldr	r1, [r4, #0]
    55c2:	1860      	adds	r0, r4, r1
    55c4:	4282      	cmp	r2, r0
    55c6:	d103      	bne.n	55d0 <_free_r+0x88>
    55c8:	6810      	ldr	r0, [r2, #0]
    55ca:	6852      	ldr	r2, [r2, #4]
    55cc:	1841      	adds	r1, r0, r1
    55ce:	6021      	str	r1, [r4, #0]
    55d0:	6062      	str	r2, [r4, #4]
    55d2:	605c      	str	r4, [r3, #4]
    55d4:	e7ca      	b.n	556c <_free_r+0x24>
    55d6:	46c0      	nop			; (mov r8, r8)
    55d8:	20000174 	.word	0x20000174

000055dc <_malloc_r>:
    55dc:	2303      	movs	r3, #3
    55de:	b570      	push	{r4, r5, r6, lr}
    55e0:	1ccd      	adds	r5, r1, #3
    55e2:	439d      	bics	r5, r3
    55e4:	3508      	adds	r5, #8
    55e6:	0006      	movs	r6, r0
    55e8:	2d0c      	cmp	r5, #12
    55ea:	d21e      	bcs.n	562a <_malloc_r+0x4e>
    55ec:	250c      	movs	r5, #12
    55ee:	42a9      	cmp	r1, r5
    55f0:	d81d      	bhi.n	562e <_malloc_r+0x52>
    55f2:	0030      	movs	r0, r6
    55f4:	f000 fad6 	bl	5ba4 <__malloc_lock>
    55f8:	4a25      	ldr	r2, [pc, #148]	; (5690 <_malloc_r+0xb4>)
    55fa:	6814      	ldr	r4, [r2, #0]
    55fc:	0021      	movs	r1, r4
    55fe:	2900      	cmp	r1, #0
    5600:	d119      	bne.n	5636 <_malloc_r+0x5a>
    5602:	4c24      	ldr	r4, [pc, #144]	; (5694 <_malloc_r+0xb8>)
    5604:	6823      	ldr	r3, [r4, #0]
    5606:	2b00      	cmp	r3, #0
    5608:	d103      	bne.n	5612 <_malloc_r+0x36>
    560a:	0030      	movs	r0, r6
    560c:	f000 f844 	bl	5698 <_sbrk_r>
    5610:	6020      	str	r0, [r4, #0]
    5612:	0029      	movs	r1, r5
    5614:	0030      	movs	r0, r6
    5616:	f000 f83f 	bl	5698 <_sbrk_r>
    561a:	1c43      	adds	r3, r0, #1
    561c:	d12c      	bne.n	5678 <_malloc_r+0x9c>
    561e:	230c      	movs	r3, #12
    5620:	0030      	movs	r0, r6
    5622:	6033      	str	r3, [r6, #0]
    5624:	f000 fabf 	bl	5ba6 <__malloc_unlock>
    5628:	e003      	b.n	5632 <_malloc_r+0x56>
    562a:	2d00      	cmp	r5, #0
    562c:	dadf      	bge.n	55ee <_malloc_r+0x12>
    562e:	230c      	movs	r3, #12
    5630:	6033      	str	r3, [r6, #0]
    5632:	2000      	movs	r0, #0
    5634:	bd70      	pop	{r4, r5, r6, pc}
    5636:	680b      	ldr	r3, [r1, #0]
    5638:	1b5b      	subs	r3, r3, r5
    563a:	d41a      	bmi.n	5672 <_malloc_r+0x96>
    563c:	2b0b      	cmp	r3, #11
    563e:	d903      	bls.n	5648 <_malloc_r+0x6c>
    5640:	600b      	str	r3, [r1, #0]
    5642:	18cc      	adds	r4, r1, r3
    5644:	6025      	str	r5, [r4, #0]
    5646:	e003      	b.n	5650 <_malloc_r+0x74>
    5648:	428c      	cmp	r4, r1
    564a:	d10e      	bne.n	566a <_malloc_r+0x8e>
    564c:	6863      	ldr	r3, [r4, #4]
    564e:	6013      	str	r3, [r2, #0]
    5650:	0030      	movs	r0, r6
    5652:	f000 faa8 	bl	5ba6 <__malloc_unlock>
    5656:	0020      	movs	r0, r4
    5658:	2207      	movs	r2, #7
    565a:	300b      	adds	r0, #11
    565c:	1d23      	adds	r3, r4, #4
    565e:	4390      	bics	r0, r2
    5660:	1ac3      	subs	r3, r0, r3
    5662:	d0e7      	beq.n	5634 <_malloc_r+0x58>
    5664:	425a      	negs	r2, r3
    5666:	50e2      	str	r2, [r4, r3]
    5668:	e7e4      	b.n	5634 <_malloc_r+0x58>
    566a:	684b      	ldr	r3, [r1, #4]
    566c:	6063      	str	r3, [r4, #4]
    566e:	000c      	movs	r4, r1
    5670:	e7ee      	b.n	5650 <_malloc_r+0x74>
    5672:	000c      	movs	r4, r1
    5674:	6849      	ldr	r1, [r1, #4]
    5676:	e7c2      	b.n	55fe <_malloc_r+0x22>
    5678:	2303      	movs	r3, #3
    567a:	1cc4      	adds	r4, r0, #3
    567c:	439c      	bics	r4, r3
    567e:	42a0      	cmp	r0, r4
    5680:	d0e0      	beq.n	5644 <_malloc_r+0x68>
    5682:	1a21      	subs	r1, r4, r0
    5684:	0030      	movs	r0, r6
    5686:	f000 f807 	bl	5698 <_sbrk_r>
    568a:	1c43      	adds	r3, r0, #1
    568c:	d1da      	bne.n	5644 <_malloc_r+0x68>
    568e:	e7c6      	b.n	561e <_malloc_r+0x42>
    5690:	20000174 	.word	0x20000174
    5694:	20000178 	.word	0x20000178

00005698 <_sbrk_r>:
    5698:	2300      	movs	r3, #0
    569a:	b570      	push	{r4, r5, r6, lr}
    569c:	4c06      	ldr	r4, [pc, #24]	; (56b8 <_sbrk_r+0x20>)
    569e:	0005      	movs	r5, r0
    56a0:	0008      	movs	r0, r1
    56a2:	6023      	str	r3, [r4, #0]
    56a4:	f7fd fec2 	bl	342c <_sbrk>
    56a8:	1c43      	adds	r3, r0, #1
    56aa:	d103      	bne.n	56b4 <_sbrk_r+0x1c>
    56ac:	6823      	ldr	r3, [r4, #0]
    56ae:	2b00      	cmp	r3, #0
    56b0:	d000      	beq.n	56b4 <_sbrk_r+0x1c>
    56b2:	602b      	str	r3, [r5, #0]
    56b4:	bd70      	pop	{r4, r5, r6, pc}
    56b6:	46c0      	nop			; (mov r8, r8)
    56b8:	200009f4 	.word	0x200009f4

000056bc <setbuf>:
    56bc:	424a      	negs	r2, r1
    56be:	414a      	adcs	r2, r1
    56c0:	2380      	movs	r3, #128	; 0x80
    56c2:	b510      	push	{r4, lr}
    56c4:	0052      	lsls	r2, r2, #1
    56c6:	00db      	lsls	r3, r3, #3
    56c8:	f000 f802 	bl	56d0 <setvbuf>
    56cc:	bd10      	pop	{r4, pc}
	...

000056d0 <setvbuf>:
    56d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56d2:	001d      	movs	r5, r3
    56d4:	4b4f      	ldr	r3, [pc, #316]	; (5814 <setvbuf+0x144>)
    56d6:	b085      	sub	sp, #20
    56d8:	681e      	ldr	r6, [r3, #0]
    56da:	0004      	movs	r4, r0
    56dc:	000f      	movs	r7, r1
    56de:	9200      	str	r2, [sp, #0]
    56e0:	2e00      	cmp	r6, #0
    56e2:	d005      	beq.n	56f0 <setvbuf+0x20>
    56e4:	69b3      	ldr	r3, [r6, #24]
    56e6:	2b00      	cmp	r3, #0
    56e8:	d102      	bne.n	56f0 <setvbuf+0x20>
    56ea:	0030      	movs	r0, r6
    56ec:	f000 f99c 	bl	5a28 <__sinit>
    56f0:	4b49      	ldr	r3, [pc, #292]	; (5818 <setvbuf+0x148>)
    56f2:	429c      	cmp	r4, r3
    56f4:	d150      	bne.n	5798 <setvbuf+0xc8>
    56f6:	6874      	ldr	r4, [r6, #4]
    56f8:	9b00      	ldr	r3, [sp, #0]
    56fa:	2b02      	cmp	r3, #2
    56fc:	d005      	beq.n	570a <setvbuf+0x3a>
    56fe:	2b01      	cmp	r3, #1
    5700:	d900      	bls.n	5704 <setvbuf+0x34>
    5702:	e084      	b.n	580e <setvbuf+0x13e>
    5704:	2d00      	cmp	r5, #0
    5706:	da00      	bge.n	570a <setvbuf+0x3a>
    5708:	e081      	b.n	580e <setvbuf+0x13e>
    570a:	0021      	movs	r1, r4
    570c:	0030      	movs	r0, r6
    570e:	f000 f91d 	bl	594c <_fflush_r>
    5712:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5714:	2900      	cmp	r1, #0
    5716:	d008      	beq.n	572a <setvbuf+0x5a>
    5718:	0023      	movs	r3, r4
    571a:	3344      	adds	r3, #68	; 0x44
    571c:	4299      	cmp	r1, r3
    571e:	d002      	beq.n	5726 <setvbuf+0x56>
    5720:	0030      	movs	r0, r6
    5722:	f7ff ff11 	bl	5548 <_free_r>
    5726:	2300      	movs	r3, #0
    5728:	6363      	str	r3, [r4, #52]	; 0x34
    572a:	2300      	movs	r3, #0
    572c:	61a3      	str	r3, [r4, #24]
    572e:	6063      	str	r3, [r4, #4]
    5730:	89a3      	ldrh	r3, [r4, #12]
    5732:	061b      	lsls	r3, r3, #24
    5734:	d503      	bpl.n	573e <setvbuf+0x6e>
    5736:	6921      	ldr	r1, [r4, #16]
    5738:	0030      	movs	r0, r6
    573a:	f7ff ff05 	bl	5548 <_free_r>
    573e:	89a3      	ldrh	r3, [r4, #12]
    5740:	4a36      	ldr	r2, [pc, #216]	; (581c <setvbuf+0x14c>)
    5742:	4013      	ands	r3, r2
    5744:	81a3      	strh	r3, [r4, #12]
    5746:	9b00      	ldr	r3, [sp, #0]
    5748:	2b02      	cmp	r3, #2
    574a:	d05a      	beq.n	5802 <setvbuf+0x132>
    574c:	ab03      	add	r3, sp, #12
    574e:	aa02      	add	r2, sp, #8
    5750:	0021      	movs	r1, r4
    5752:	0030      	movs	r0, r6
    5754:	f000 f9fe 	bl	5b54 <__swhatbuf_r>
    5758:	89a3      	ldrh	r3, [r4, #12]
    575a:	4318      	orrs	r0, r3
    575c:	81a0      	strh	r0, [r4, #12]
    575e:	2d00      	cmp	r5, #0
    5760:	d124      	bne.n	57ac <setvbuf+0xdc>
    5762:	9d02      	ldr	r5, [sp, #8]
    5764:	0028      	movs	r0, r5
    5766:	f7ff fedd 	bl	5524 <malloc>
    576a:	9501      	str	r5, [sp, #4]
    576c:	1e07      	subs	r7, r0, #0
    576e:	d142      	bne.n	57f6 <setvbuf+0x126>
    5770:	9b02      	ldr	r3, [sp, #8]
    5772:	9301      	str	r3, [sp, #4]
    5774:	42ab      	cmp	r3, r5
    5776:	d139      	bne.n	57ec <setvbuf+0x11c>
    5778:	2001      	movs	r0, #1
    577a:	4240      	negs	r0, r0
    577c:	2302      	movs	r3, #2
    577e:	89a2      	ldrh	r2, [r4, #12]
    5780:	4313      	orrs	r3, r2
    5782:	81a3      	strh	r3, [r4, #12]
    5784:	2300      	movs	r3, #0
    5786:	60a3      	str	r3, [r4, #8]
    5788:	0023      	movs	r3, r4
    578a:	3347      	adds	r3, #71	; 0x47
    578c:	6023      	str	r3, [r4, #0]
    578e:	6123      	str	r3, [r4, #16]
    5790:	2301      	movs	r3, #1
    5792:	6163      	str	r3, [r4, #20]
    5794:	b005      	add	sp, #20
    5796:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5798:	4b21      	ldr	r3, [pc, #132]	; (5820 <setvbuf+0x150>)
    579a:	429c      	cmp	r4, r3
    579c:	d101      	bne.n	57a2 <setvbuf+0xd2>
    579e:	68b4      	ldr	r4, [r6, #8]
    57a0:	e7aa      	b.n	56f8 <setvbuf+0x28>
    57a2:	4b20      	ldr	r3, [pc, #128]	; (5824 <setvbuf+0x154>)
    57a4:	429c      	cmp	r4, r3
    57a6:	d1a7      	bne.n	56f8 <setvbuf+0x28>
    57a8:	68f4      	ldr	r4, [r6, #12]
    57aa:	e7a5      	b.n	56f8 <setvbuf+0x28>
    57ac:	2f00      	cmp	r7, #0
    57ae:	d0d9      	beq.n	5764 <setvbuf+0x94>
    57b0:	69b3      	ldr	r3, [r6, #24]
    57b2:	2b00      	cmp	r3, #0
    57b4:	d102      	bne.n	57bc <setvbuf+0xec>
    57b6:	0030      	movs	r0, r6
    57b8:	f000 f936 	bl	5a28 <__sinit>
    57bc:	9b00      	ldr	r3, [sp, #0]
    57be:	2b01      	cmp	r3, #1
    57c0:	d103      	bne.n	57ca <setvbuf+0xfa>
    57c2:	89a3      	ldrh	r3, [r4, #12]
    57c4:	9a00      	ldr	r2, [sp, #0]
    57c6:	431a      	orrs	r2, r3
    57c8:	81a2      	strh	r2, [r4, #12]
    57ca:	2008      	movs	r0, #8
    57cc:	89a3      	ldrh	r3, [r4, #12]
    57ce:	6027      	str	r7, [r4, #0]
    57d0:	6127      	str	r7, [r4, #16]
    57d2:	6165      	str	r5, [r4, #20]
    57d4:	4018      	ands	r0, r3
    57d6:	d018      	beq.n	580a <setvbuf+0x13a>
    57d8:	2001      	movs	r0, #1
    57da:	4018      	ands	r0, r3
    57dc:	2300      	movs	r3, #0
    57de:	4298      	cmp	r0, r3
    57e0:	d011      	beq.n	5806 <setvbuf+0x136>
    57e2:	426d      	negs	r5, r5
    57e4:	60a3      	str	r3, [r4, #8]
    57e6:	61a5      	str	r5, [r4, #24]
    57e8:	0018      	movs	r0, r3
    57ea:	e7d3      	b.n	5794 <setvbuf+0xc4>
    57ec:	9801      	ldr	r0, [sp, #4]
    57ee:	f7ff fe99 	bl	5524 <malloc>
    57f2:	1e07      	subs	r7, r0, #0
    57f4:	d0c0      	beq.n	5778 <setvbuf+0xa8>
    57f6:	2380      	movs	r3, #128	; 0x80
    57f8:	89a2      	ldrh	r2, [r4, #12]
    57fa:	9d01      	ldr	r5, [sp, #4]
    57fc:	4313      	orrs	r3, r2
    57fe:	81a3      	strh	r3, [r4, #12]
    5800:	e7d6      	b.n	57b0 <setvbuf+0xe0>
    5802:	2000      	movs	r0, #0
    5804:	e7ba      	b.n	577c <setvbuf+0xac>
    5806:	60a5      	str	r5, [r4, #8]
    5808:	e7c4      	b.n	5794 <setvbuf+0xc4>
    580a:	60a0      	str	r0, [r4, #8]
    580c:	e7c2      	b.n	5794 <setvbuf+0xc4>
    580e:	2001      	movs	r0, #1
    5810:	4240      	negs	r0, r0
    5812:	e7bf      	b.n	5794 <setvbuf+0xc4>
    5814:	2000000c 	.word	0x2000000c
    5818:	00006524 	.word	0x00006524
    581c:	fffff35c 	.word	0xfffff35c
    5820:	00006544 	.word	0x00006544
    5824:	00006504 	.word	0x00006504

00005828 <strlen>:
    5828:	2300      	movs	r3, #0
    582a:	5cc2      	ldrb	r2, [r0, r3]
    582c:	3301      	adds	r3, #1
    582e:	2a00      	cmp	r2, #0
    5830:	d1fb      	bne.n	582a <strlen+0x2>
    5832:	1e58      	subs	r0, r3, #1
    5834:	4770      	bx	lr
	...

00005838 <__sflush_r>:
    5838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    583a:	898a      	ldrh	r2, [r1, #12]
    583c:	0005      	movs	r5, r0
    583e:	000c      	movs	r4, r1
    5840:	0713      	lsls	r3, r2, #28
    5842:	d460      	bmi.n	5906 <__sflush_r+0xce>
    5844:	684b      	ldr	r3, [r1, #4]
    5846:	2b00      	cmp	r3, #0
    5848:	dc04      	bgt.n	5854 <__sflush_r+0x1c>
    584a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    584c:	2b00      	cmp	r3, #0
    584e:	dc01      	bgt.n	5854 <__sflush_r+0x1c>
    5850:	2000      	movs	r0, #0
    5852:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5854:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5856:	2f00      	cmp	r7, #0
    5858:	d0fa      	beq.n	5850 <__sflush_r+0x18>
    585a:	2300      	movs	r3, #0
    585c:	682e      	ldr	r6, [r5, #0]
    585e:	602b      	str	r3, [r5, #0]
    5860:	2380      	movs	r3, #128	; 0x80
    5862:	015b      	lsls	r3, r3, #5
    5864:	401a      	ands	r2, r3
    5866:	d034      	beq.n	58d2 <__sflush_r+0x9a>
    5868:	6d60      	ldr	r0, [r4, #84]	; 0x54
    586a:	89a3      	ldrh	r3, [r4, #12]
    586c:	075b      	lsls	r3, r3, #29
    586e:	d506      	bpl.n	587e <__sflush_r+0x46>
    5870:	6863      	ldr	r3, [r4, #4]
    5872:	1ac0      	subs	r0, r0, r3
    5874:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5876:	2b00      	cmp	r3, #0
    5878:	d001      	beq.n	587e <__sflush_r+0x46>
    587a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    587c:	1ac0      	subs	r0, r0, r3
    587e:	0002      	movs	r2, r0
    5880:	6a21      	ldr	r1, [r4, #32]
    5882:	2300      	movs	r3, #0
    5884:	0028      	movs	r0, r5
    5886:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5888:	47b8      	blx	r7
    588a:	89a1      	ldrh	r1, [r4, #12]
    588c:	1c43      	adds	r3, r0, #1
    588e:	d106      	bne.n	589e <__sflush_r+0x66>
    5890:	682b      	ldr	r3, [r5, #0]
    5892:	2b1d      	cmp	r3, #29
    5894:	d831      	bhi.n	58fa <__sflush_r+0xc2>
    5896:	4a2c      	ldr	r2, [pc, #176]	; (5948 <__sflush_r+0x110>)
    5898:	40da      	lsrs	r2, r3
    589a:	07d3      	lsls	r3, r2, #31
    589c:	d52d      	bpl.n	58fa <__sflush_r+0xc2>
    589e:	2300      	movs	r3, #0
    58a0:	6063      	str	r3, [r4, #4]
    58a2:	6923      	ldr	r3, [r4, #16]
    58a4:	6023      	str	r3, [r4, #0]
    58a6:	04cb      	lsls	r3, r1, #19
    58a8:	d505      	bpl.n	58b6 <__sflush_r+0x7e>
    58aa:	1c43      	adds	r3, r0, #1
    58ac:	d102      	bne.n	58b4 <__sflush_r+0x7c>
    58ae:	682b      	ldr	r3, [r5, #0]
    58b0:	2b00      	cmp	r3, #0
    58b2:	d100      	bne.n	58b6 <__sflush_r+0x7e>
    58b4:	6560      	str	r0, [r4, #84]	; 0x54
    58b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    58b8:	602e      	str	r6, [r5, #0]
    58ba:	2900      	cmp	r1, #0
    58bc:	d0c8      	beq.n	5850 <__sflush_r+0x18>
    58be:	0023      	movs	r3, r4
    58c0:	3344      	adds	r3, #68	; 0x44
    58c2:	4299      	cmp	r1, r3
    58c4:	d002      	beq.n	58cc <__sflush_r+0x94>
    58c6:	0028      	movs	r0, r5
    58c8:	f7ff fe3e 	bl	5548 <_free_r>
    58cc:	2000      	movs	r0, #0
    58ce:	6360      	str	r0, [r4, #52]	; 0x34
    58d0:	e7bf      	b.n	5852 <__sflush_r+0x1a>
    58d2:	2301      	movs	r3, #1
    58d4:	6a21      	ldr	r1, [r4, #32]
    58d6:	0028      	movs	r0, r5
    58d8:	47b8      	blx	r7
    58da:	1c43      	adds	r3, r0, #1
    58dc:	d1c5      	bne.n	586a <__sflush_r+0x32>
    58de:	682b      	ldr	r3, [r5, #0]
    58e0:	2b00      	cmp	r3, #0
    58e2:	d0c2      	beq.n	586a <__sflush_r+0x32>
    58e4:	2b1d      	cmp	r3, #29
    58e6:	d001      	beq.n	58ec <__sflush_r+0xb4>
    58e8:	2b16      	cmp	r3, #22
    58ea:	d101      	bne.n	58f0 <__sflush_r+0xb8>
    58ec:	602e      	str	r6, [r5, #0]
    58ee:	e7af      	b.n	5850 <__sflush_r+0x18>
    58f0:	2340      	movs	r3, #64	; 0x40
    58f2:	89a2      	ldrh	r2, [r4, #12]
    58f4:	4313      	orrs	r3, r2
    58f6:	81a3      	strh	r3, [r4, #12]
    58f8:	e7ab      	b.n	5852 <__sflush_r+0x1a>
    58fa:	2340      	movs	r3, #64	; 0x40
    58fc:	430b      	orrs	r3, r1
    58fe:	2001      	movs	r0, #1
    5900:	81a3      	strh	r3, [r4, #12]
    5902:	4240      	negs	r0, r0
    5904:	e7a5      	b.n	5852 <__sflush_r+0x1a>
    5906:	690f      	ldr	r7, [r1, #16]
    5908:	2f00      	cmp	r7, #0
    590a:	d0a1      	beq.n	5850 <__sflush_r+0x18>
    590c:	680b      	ldr	r3, [r1, #0]
    590e:	600f      	str	r7, [r1, #0]
    5910:	1bdb      	subs	r3, r3, r7
    5912:	9301      	str	r3, [sp, #4]
    5914:	2300      	movs	r3, #0
    5916:	0792      	lsls	r2, r2, #30
    5918:	d100      	bne.n	591c <__sflush_r+0xe4>
    591a:	694b      	ldr	r3, [r1, #20]
    591c:	60a3      	str	r3, [r4, #8]
    591e:	9b01      	ldr	r3, [sp, #4]
    5920:	2b00      	cmp	r3, #0
    5922:	dc00      	bgt.n	5926 <__sflush_r+0xee>
    5924:	e794      	b.n	5850 <__sflush_r+0x18>
    5926:	9b01      	ldr	r3, [sp, #4]
    5928:	003a      	movs	r2, r7
    592a:	6a21      	ldr	r1, [r4, #32]
    592c:	0028      	movs	r0, r5
    592e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5930:	47b0      	blx	r6
    5932:	2800      	cmp	r0, #0
    5934:	dc03      	bgt.n	593e <__sflush_r+0x106>
    5936:	2340      	movs	r3, #64	; 0x40
    5938:	89a2      	ldrh	r2, [r4, #12]
    593a:	4313      	orrs	r3, r2
    593c:	e7df      	b.n	58fe <__sflush_r+0xc6>
    593e:	9b01      	ldr	r3, [sp, #4]
    5940:	183f      	adds	r7, r7, r0
    5942:	1a1b      	subs	r3, r3, r0
    5944:	9301      	str	r3, [sp, #4]
    5946:	e7ea      	b.n	591e <__sflush_r+0xe6>
    5948:	20400001 	.word	0x20400001

0000594c <_fflush_r>:
    594c:	690b      	ldr	r3, [r1, #16]
    594e:	b570      	push	{r4, r5, r6, lr}
    5950:	0005      	movs	r5, r0
    5952:	000c      	movs	r4, r1
    5954:	2b00      	cmp	r3, #0
    5956:	d101      	bne.n	595c <_fflush_r+0x10>
    5958:	2000      	movs	r0, #0
    595a:	bd70      	pop	{r4, r5, r6, pc}
    595c:	2800      	cmp	r0, #0
    595e:	d004      	beq.n	596a <_fflush_r+0x1e>
    5960:	6983      	ldr	r3, [r0, #24]
    5962:	2b00      	cmp	r3, #0
    5964:	d101      	bne.n	596a <_fflush_r+0x1e>
    5966:	f000 f85f 	bl	5a28 <__sinit>
    596a:	4b0b      	ldr	r3, [pc, #44]	; (5998 <_fflush_r+0x4c>)
    596c:	429c      	cmp	r4, r3
    596e:	d109      	bne.n	5984 <_fflush_r+0x38>
    5970:	686c      	ldr	r4, [r5, #4]
    5972:	220c      	movs	r2, #12
    5974:	5ea3      	ldrsh	r3, [r4, r2]
    5976:	2b00      	cmp	r3, #0
    5978:	d0ee      	beq.n	5958 <_fflush_r+0xc>
    597a:	0021      	movs	r1, r4
    597c:	0028      	movs	r0, r5
    597e:	f7ff ff5b 	bl	5838 <__sflush_r>
    5982:	e7ea      	b.n	595a <_fflush_r+0xe>
    5984:	4b05      	ldr	r3, [pc, #20]	; (599c <_fflush_r+0x50>)
    5986:	429c      	cmp	r4, r3
    5988:	d101      	bne.n	598e <_fflush_r+0x42>
    598a:	68ac      	ldr	r4, [r5, #8]
    598c:	e7f1      	b.n	5972 <_fflush_r+0x26>
    598e:	4b04      	ldr	r3, [pc, #16]	; (59a0 <_fflush_r+0x54>)
    5990:	429c      	cmp	r4, r3
    5992:	d1ee      	bne.n	5972 <_fflush_r+0x26>
    5994:	68ec      	ldr	r4, [r5, #12]
    5996:	e7ec      	b.n	5972 <_fflush_r+0x26>
    5998:	00006524 	.word	0x00006524
    599c:	00006544 	.word	0x00006544
    59a0:	00006504 	.word	0x00006504

000059a4 <_cleanup_r>:
    59a4:	b510      	push	{r4, lr}
    59a6:	4902      	ldr	r1, [pc, #8]	; (59b0 <_cleanup_r+0xc>)
    59a8:	f000 f8b2 	bl	5b10 <_fwalk_reent>
    59ac:	bd10      	pop	{r4, pc}
    59ae:	46c0      	nop			; (mov r8, r8)
    59b0:	0000594d 	.word	0x0000594d

000059b4 <std.isra.0>:
    59b4:	2300      	movs	r3, #0
    59b6:	b510      	push	{r4, lr}
    59b8:	0004      	movs	r4, r0
    59ba:	6003      	str	r3, [r0, #0]
    59bc:	6043      	str	r3, [r0, #4]
    59be:	6083      	str	r3, [r0, #8]
    59c0:	8181      	strh	r1, [r0, #12]
    59c2:	6643      	str	r3, [r0, #100]	; 0x64
    59c4:	81c2      	strh	r2, [r0, #14]
    59c6:	6103      	str	r3, [r0, #16]
    59c8:	6143      	str	r3, [r0, #20]
    59ca:	6183      	str	r3, [r0, #24]
    59cc:	0019      	movs	r1, r3
    59ce:	2208      	movs	r2, #8
    59d0:	305c      	adds	r0, #92	; 0x5c
    59d2:	f7ff fdb1 	bl	5538 <memset>
    59d6:	4b05      	ldr	r3, [pc, #20]	; (59ec <std.isra.0+0x38>)
    59d8:	6224      	str	r4, [r4, #32]
    59da:	6263      	str	r3, [r4, #36]	; 0x24
    59dc:	4b04      	ldr	r3, [pc, #16]	; (59f0 <std.isra.0+0x3c>)
    59de:	62a3      	str	r3, [r4, #40]	; 0x28
    59e0:	4b04      	ldr	r3, [pc, #16]	; (59f4 <std.isra.0+0x40>)
    59e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    59e4:	4b04      	ldr	r3, [pc, #16]	; (59f8 <std.isra.0+0x44>)
    59e6:	6323      	str	r3, [r4, #48]	; 0x30
    59e8:	bd10      	pop	{r4, pc}
    59ea:	46c0      	nop			; (mov r8, r8)
    59ec:	00005ba9 	.word	0x00005ba9
    59f0:	00005bd1 	.word	0x00005bd1
    59f4:	00005c09 	.word	0x00005c09
    59f8:	00005c35 	.word	0x00005c35

000059fc <__sfmoreglue>:
    59fc:	b570      	push	{r4, r5, r6, lr}
    59fe:	2568      	movs	r5, #104	; 0x68
    5a00:	1e4a      	subs	r2, r1, #1
    5a02:	4355      	muls	r5, r2
    5a04:	000e      	movs	r6, r1
    5a06:	0029      	movs	r1, r5
    5a08:	3174      	adds	r1, #116	; 0x74
    5a0a:	f7ff fde7 	bl	55dc <_malloc_r>
    5a0e:	1e04      	subs	r4, r0, #0
    5a10:	d008      	beq.n	5a24 <__sfmoreglue+0x28>
    5a12:	2100      	movs	r1, #0
    5a14:	002a      	movs	r2, r5
    5a16:	6001      	str	r1, [r0, #0]
    5a18:	6046      	str	r6, [r0, #4]
    5a1a:	300c      	adds	r0, #12
    5a1c:	60a0      	str	r0, [r4, #8]
    5a1e:	3268      	adds	r2, #104	; 0x68
    5a20:	f7ff fd8a 	bl	5538 <memset>
    5a24:	0020      	movs	r0, r4
    5a26:	bd70      	pop	{r4, r5, r6, pc}

00005a28 <__sinit>:
    5a28:	6983      	ldr	r3, [r0, #24]
    5a2a:	b513      	push	{r0, r1, r4, lr}
    5a2c:	0004      	movs	r4, r0
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d128      	bne.n	5a84 <__sinit+0x5c>
    5a32:	6483      	str	r3, [r0, #72]	; 0x48
    5a34:	64c3      	str	r3, [r0, #76]	; 0x4c
    5a36:	6503      	str	r3, [r0, #80]	; 0x50
    5a38:	4b13      	ldr	r3, [pc, #76]	; (5a88 <__sinit+0x60>)
    5a3a:	4a14      	ldr	r2, [pc, #80]	; (5a8c <__sinit+0x64>)
    5a3c:	681b      	ldr	r3, [r3, #0]
    5a3e:	6282      	str	r2, [r0, #40]	; 0x28
    5a40:	9301      	str	r3, [sp, #4]
    5a42:	4298      	cmp	r0, r3
    5a44:	d101      	bne.n	5a4a <__sinit+0x22>
    5a46:	2301      	movs	r3, #1
    5a48:	6183      	str	r3, [r0, #24]
    5a4a:	0020      	movs	r0, r4
    5a4c:	f000 f820 	bl	5a90 <__sfp>
    5a50:	6060      	str	r0, [r4, #4]
    5a52:	0020      	movs	r0, r4
    5a54:	f000 f81c 	bl	5a90 <__sfp>
    5a58:	60a0      	str	r0, [r4, #8]
    5a5a:	0020      	movs	r0, r4
    5a5c:	f000 f818 	bl	5a90 <__sfp>
    5a60:	2200      	movs	r2, #0
    5a62:	60e0      	str	r0, [r4, #12]
    5a64:	2104      	movs	r1, #4
    5a66:	6860      	ldr	r0, [r4, #4]
    5a68:	f7ff ffa4 	bl	59b4 <std.isra.0>
    5a6c:	2201      	movs	r2, #1
    5a6e:	2109      	movs	r1, #9
    5a70:	68a0      	ldr	r0, [r4, #8]
    5a72:	f7ff ff9f 	bl	59b4 <std.isra.0>
    5a76:	2202      	movs	r2, #2
    5a78:	2112      	movs	r1, #18
    5a7a:	68e0      	ldr	r0, [r4, #12]
    5a7c:	f7ff ff9a 	bl	59b4 <std.isra.0>
    5a80:	2301      	movs	r3, #1
    5a82:	61a3      	str	r3, [r4, #24]
    5a84:	bd13      	pop	{r0, r1, r4, pc}
    5a86:	46c0      	nop			; (mov r8, r8)
    5a88:	00006500 	.word	0x00006500
    5a8c:	000059a5 	.word	0x000059a5

00005a90 <__sfp>:
    5a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a92:	4b1e      	ldr	r3, [pc, #120]	; (5b0c <__sfp+0x7c>)
    5a94:	0007      	movs	r7, r0
    5a96:	681e      	ldr	r6, [r3, #0]
    5a98:	69b3      	ldr	r3, [r6, #24]
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	d102      	bne.n	5aa4 <__sfp+0x14>
    5a9e:	0030      	movs	r0, r6
    5aa0:	f7ff ffc2 	bl	5a28 <__sinit>
    5aa4:	3648      	adds	r6, #72	; 0x48
    5aa6:	68b4      	ldr	r4, [r6, #8]
    5aa8:	6873      	ldr	r3, [r6, #4]
    5aaa:	3b01      	subs	r3, #1
    5aac:	d504      	bpl.n	5ab8 <__sfp+0x28>
    5aae:	6833      	ldr	r3, [r6, #0]
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	d007      	beq.n	5ac4 <__sfp+0x34>
    5ab4:	6836      	ldr	r6, [r6, #0]
    5ab6:	e7f6      	b.n	5aa6 <__sfp+0x16>
    5ab8:	220c      	movs	r2, #12
    5aba:	5ea5      	ldrsh	r5, [r4, r2]
    5abc:	2d00      	cmp	r5, #0
    5abe:	d00d      	beq.n	5adc <__sfp+0x4c>
    5ac0:	3468      	adds	r4, #104	; 0x68
    5ac2:	e7f2      	b.n	5aaa <__sfp+0x1a>
    5ac4:	2104      	movs	r1, #4
    5ac6:	0038      	movs	r0, r7
    5ac8:	f7ff ff98 	bl	59fc <__sfmoreglue>
    5acc:	6030      	str	r0, [r6, #0]
    5ace:	2800      	cmp	r0, #0
    5ad0:	d1f0      	bne.n	5ab4 <__sfp+0x24>
    5ad2:	230c      	movs	r3, #12
    5ad4:	0004      	movs	r4, r0
    5ad6:	603b      	str	r3, [r7, #0]
    5ad8:	0020      	movs	r0, r4
    5ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5adc:	2301      	movs	r3, #1
    5ade:	0020      	movs	r0, r4
    5ae0:	425b      	negs	r3, r3
    5ae2:	81e3      	strh	r3, [r4, #14]
    5ae4:	3302      	adds	r3, #2
    5ae6:	81a3      	strh	r3, [r4, #12]
    5ae8:	6665      	str	r5, [r4, #100]	; 0x64
    5aea:	6025      	str	r5, [r4, #0]
    5aec:	60a5      	str	r5, [r4, #8]
    5aee:	6065      	str	r5, [r4, #4]
    5af0:	6125      	str	r5, [r4, #16]
    5af2:	6165      	str	r5, [r4, #20]
    5af4:	61a5      	str	r5, [r4, #24]
    5af6:	2208      	movs	r2, #8
    5af8:	0029      	movs	r1, r5
    5afa:	305c      	adds	r0, #92	; 0x5c
    5afc:	f7ff fd1c 	bl	5538 <memset>
    5b00:	6365      	str	r5, [r4, #52]	; 0x34
    5b02:	63a5      	str	r5, [r4, #56]	; 0x38
    5b04:	64a5      	str	r5, [r4, #72]	; 0x48
    5b06:	64e5      	str	r5, [r4, #76]	; 0x4c
    5b08:	e7e6      	b.n	5ad8 <__sfp+0x48>
    5b0a:	46c0      	nop			; (mov r8, r8)
    5b0c:	00006500 	.word	0x00006500

00005b10 <_fwalk_reent>:
    5b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b12:	0004      	movs	r4, r0
    5b14:	0007      	movs	r7, r0
    5b16:	2600      	movs	r6, #0
    5b18:	9101      	str	r1, [sp, #4]
    5b1a:	3448      	adds	r4, #72	; 0x48
    5b1c:	2c00      	cmp	r4, #0
    5b1e:	d101      	bne.n	5b24 <_fwalk_reent+0x14>
    5b20:	0030      	movs	r0, r6
    5b22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5b24:	6863      	ldr	r3, [r4, #4]
    5b26:	68a5      	ldr	r5, [r4, #8]
    5b28:	9300      	str	r3, [sp, #0]
    5b2a:	9b00      	ldr	r3, [sp, #0]
    5b2c:	3b01      	subs	r3, #1
    5b2e:	9300      	str	r3, [sp, #0]
    5b30:	d501      	bpl.n	5b36 <_fwalk_reent+0x26>
    5b32:	6824      	ldr	r4, [r4, #0]
    5b34:	e7f2      	b.n	5b1c <_fwalk_reent+0xc>
    5b36:	89ab      	ldrh	r3, [r5, #12]
    5b38:	2b01      	cmp	r3, #1
    5b3a:	d908      	bls.n	5b4e <_fwalk_reent+0x3e>
    5b3c:	220e      	movs	r2, #14
    5b3e:	5eab      	ldrsh	r3, [r5, r2]
    5b40:	3301      	adds	r3, #1
    5b42:	d004      	beq.n	5b4e <_fwalk_reent+0x3e>
    5b44:	0029      	movs	r1, r5
    5b46:	0038      	movs	r0, r7
    5b48:	9b01      	ldr	r3, [sp, #4]
    5b4a:	4798      	blx	r3
    5b4c:	4306      	orrs	r6, r0
    5b4e:	3568      	adds	r5, #104	; 0x68
    5b50:	e7eb      	b.n	5b2a <_fwalk_reent+0x1a>
	...

00005b54 <__swhatbuf_r>:
    5b54:	b570      	push	{r4, r5, r6, lr}
    5b56:	000e      	movs	r6, r1
    5b58:	001d      	movs	r5, r3
    5b5a:	230e      	movs	r3, #14
    5b5c:	5ec9      	ldrsh	r1, [r1, r3]
    5b5e:	b090      	sub	sp, #64	; 0x40
    5b60:	0014      	movs	r4, r2
    5b62:	2900      	cmp	r1, #0
    5b64:	da07      	bge.n	5b76 <__swhatbuf_r+0x22>
    5b66:	2300      	movs	r3, #0
    5b68:	602b      	str	r3, [r5, #0]
    5b6a:	89b3      	ldrh	r3, [r6, #12]
    5b6c:	061b      	lsls	r3, r3, #24
    5b6e:	d411      	bmi.n	5b94 <__swhatbuf_r+0x40>
    5b70:	2380      	movs	r3, #128	; 0x80
    5b72:	00db      	lsls	r3, r3, #3
    5b74:	e00f      	b.n	5b96 <__swhatbuf_r+0x42>
    5b76:	aa01      	add	r2, sp, #4
    5b78:	f000 f888 	bl	5c8c <_fstat_r>
    5b7c:	2800      	cmp	r0, #0
    5b7e:	dbf2      	blt.n	5b66 <__swhatbuf_r+0x12>
    5b80:	22f0      	movs	r2, #240	; 0xf0
    5b82:	9b02      	ldr	r3, [sp, #8]
    5b84:	0212      	lsls	r2, r2, #8
    5b86:	4013      	ands	r3, r2
    5b88:	4a05      	ldr	r2, [pc, #20]	; (5ba0 <__swhatbuf_r+0x4c>)
    5b8a:	189b      	adds	r3, r3, r2
    5b8c:	425a      	negs	r2, r3
    5b8e:	4153      	adcs	r3, r2
    5b90:	602b      	str	r3, [r5, #0]
    5b92:	e7ed      	b.n	5b70 <__swhatbuf_r+0x1c>
    5b94:	2340      	movs	r3, #64	; 0x40
    5b96:	2000      	movs	r0, #0
    5b98:	6023      	str	r3, [r4, #0]
    5b9a:	b010      	add	sp, #64	; 0x40
    5b9c:	bd70      	pop	{r4, r5, r6, pc}
    5b9e:	46c0      	nop			; (mov r8, r8)
    5ba0:	ffffe000 	.word	0xffffe000

00005ba4 <__malloc_lock>:
    5ba4:	4770      	bx	lr

00005ba6 <__malloc_unlock>:
    5ba6:	4770      	bx	lr

00005ba8 <__sread>:
    5ba8:	b570      	push	{r4, r5, r6, lr}
    5baa:	000c      	movs	r4, r1
    5bac:	250e      	movs	r5, #14
    5bae:	5f49      	ldrsh	r1, [r1, r5]
    5bb0:	f000 f892 	bl	5cd8 <_read_r>
    5bb4:	2800      	cmp	r0, #0
    5bb6:	db03      	blt.n	5bc0 <__sread+0x18>
    5bb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5bba:	181b      	adds	r3, r3, r0
    5bbc:	6563      	str	r3, [r4, #84]	; 0x54
    5bbe:	bd70      	pop	{r4, r5, r6, pc}
    5bc0:	89a3      	ldrh	r3, [r4, #12]
    5bc2:	4a02      	ldr	r2, [pc, #8]	; (5bcc <__sread+0x24>)
    5bc4:	4013      	ands	r3, r2
    5bc6:	81a3      	strh	r3, [r4, #12]
    5bc8:	e7f9      	b.n	5bbe <__sread+0x16>
    5bca:	46c0      	nop			; (mov r8, r8)
    5bcc:	ffffefff 	.word	0xffffefff

00005bd0 <__swrite>:
    5bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bd2:	001f      	movs	r7, r3
    5bd4:	898b      	ldrh	r3, [r1, #12]
    5bd6:	0005      	movs	r5, r0
    5bd8:	000c      	movs	r4, r1
    5bda:	0016      	movs	r6, r2
    5bdc:	05db      	lsls	r3, r3, #23
    5bde:	d505      	bpl.n	5bec <__swrite+0x1c>
    5be0:	230e      	movs	r3, #14
    5be2:	5ec9      	ldrsh	r1, [r1, r3]
    5be4:	2200      	movs	r2, #0
    5be6:	2302      	movs	r3, #2
    5be8:	f000 f862 	bl	5cb0 <_lseek_r>
    5bec:	89a3      	ldrh	r3, [r4, #12]
    5bee:	4a05      	ldr	r2, [pc, #20]	; (5c04 <__swrite+0x34>)
    5bf0:	0028      	movs	r0, r5
    5bf2:	4013      	ands	r3, r2
    5bf4:	81a3      	strh	r3, [r4, #12]
    5bf6:	0032      	movs	r2, r6
    5bf8:	230e      	movs	r3, #14
    5bfa:	5ee1      	ldrsh	r1, [r4, r3]
    5bfc:	003b      	movs	r3, r7
    5bfe:	f000 f81f 	bl	5c40 <_write_r>
    5c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c04:	ffffefff 	.word	0xffffefff

00005c08 <__sseek>:
    5c08:	b570      	push	{r4, r5, r6, lr}
    5c0a:	000c      	movs	r4, r1
    5c0c:	250e      	movs	r5, #14
    5c0e:	5f49      	ldrsh	r1, [r1, r5]
    5c10:	f000 f84e 	bl	5cb0 <_lseek_r>
    5c14:	89a3      	ldrh	r3, [r4, #12]
    5c16:	1c42      	adds	r2, r0, #1
    5c18:	d103      	bne.n	5c22 <__sseek+0x1a>
    5c1a:	4a05      	ldr	r2, [pc, #20]	; (5c30 <__sseek+0x28>)
    5c1c:	4013      	ands	r3, r2
    5c1e:	81a3      	strh	r3, [r4, #12]
    5c20:	bd70      	pop	{r4, r5, r6, pc}
    5c22:	2280      	movs	r2, #128	; 0x80
    5c24:	0152      	lsls	r2, r2, #5
    5c26:	4313      	orrs	r3, r2
    5c28:	81a3      	strh	r3, [r4, #12]
    5c2a:	6560      	str	r0, [r4, #84]	; 0x54
    5c2c:	e7f8      	b.n	5c20 <__sseek+0x18>
    5c2e:	46c0      	nop			; (mov r8, r8)
    5c30:	ffffefff 	.word	0xffffefff

00005c34 <__sclose>:
    5c34:	b510      	push	{r4, lr}
    5c36:	230e      	movs	r3, #14
    5c38:	5ec9      	ldrsh	r1, [r1, r3]
    5c3a:	f000 f815 	bl	5c68 <_close_r>
    5c3e:	bd10      	pop	{r4, pc}

00005c40 <_write_r>:
    5c40:	b570      	push	{r4, r5, r6, lr}
    5c42:	0005      	movs	r5, r0
    5c44:	0008      	movs	r0, r1
    5c46:	0011      	movs	r1, r2
    5c48:	2200      	movs	r2, #0
    5c4a:	4c06      	ldr	r4, [pc, #24]	; (5c64 <_write_r+0x24>)
    5c4c:	6022      	str	r2, [r4, #0]
    5c4e:	001a      	movs	r2, r3
    5c50:	f7fd fbc4 	bl	33dc <_write>
    5c54:	1c43      	adds	r3, r0, #1
    5c56:	d103      	bne.n	5c60 <_write_r+0x20>
    5c58:	6823      	ldr	r3, [r4, #0]
    5c5a:	2b00      	cmp	r3, #0
    5c5c:	d000      	beq.n	5c60 <_write_r+0x20>
    5c5e:	602b      	str	r3, [r5, #0]
    5c60:	bd70      	pop	{r4, r5, r6, pc}
    5c62:	46c0      	nop			; (mov r8, r8)
    5c64:	200009f4 	.word	0x200009f4

00005c68 <_close_r>:
    5c68:	2300      	movs	r3, #0
    5c6a:	b570      	push	{r4, r5, r6, lr}
    5c6c:	4c06      	ldr	r4, [pc, #24]	; (5c88 <_close_r+0x20>)
    5c6e:	0005      	movs	r5, r0
    5c70:	0008      	movs	r0, r1
    5c72:	6023      	str	r3, [r4, #0]
    5c74:	f7fd fbec 	bl	3450 <_close>
    5c78:	1c43      	adds	r3, r0, #1
    5c7a:	d103      	bne.n	5c84 <_close_r+0x1c>
    5c7c:	6823      	ldr	r3, [r4, #0]
    5c7e:	2b00      	cmp	r3, #0
    5c80:	d000      	beq.n	5c84 <_close_r+0x1c>
    5c82:	602b      	str	r3, [r5, #0]
    5c84:	bd70      	pop	{r4, r5, r6, pc}
    5c86:	46c0      	nop			; (mov r8, r8)
    5c88:	200009f4 	.word	0x200009f4

00005c8c <_fstat_r>:
    5c8c:	2300      	movs	r3, #0
    5c8e:	b570      	push	{r4, r5, r6, lr}
    5c90:	4c06      	ldr	r4, [pc, #24]	; (5cac <_fstat_r+0x20>)
    5c92:	0005      	movs	r5, r0
    5c94:	0008      	movs	r0, r1
    5c96:	0011      	movs	r1, r2
    5c98:	6023      	str	r3, [r4, #0]
    5c9a:	f7fd fbdc 	bl	3456 <_fstat>
    5c9e:	1c43      	adds	r3, r0, #1
    5ca0:	d103      	bne.n	5caa <_fstat_r+0x1e>
    5ca2:	6823      	ldr	r3, [r4, #0]
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	d000      	beq.n	5caa <_fstat_r+0x1e>
    5ca8:	602b      	str	r3, [r5, #0]
    5caa:	bd70      	pop	{r4, r5, r6, pc}
    5cac:	200009f4 	.word	0x200009f4

00005cb0 <_lseek_r>:
    5cb0:	b570      	push	{r4, r5, r6, lr}
    5cb2:	0005      	movs	r5, r0
    5cb4:	0008      	movs	r0, r1
    5cb6:	0011      	movs	r1, r2
    5cb8:	2200      	movs	r2, #0
    5cba:	4c06      	ldr	r4, [pc, #24]	; (5cd4 <_lseek_r+0x24>)
    5cbc:	6022      	str	r2, [r4, #0]
    5cbe:	001a      	movs	r2, r3
    5cc0:	f7fd fbce 	bl	3460 <_lseek>
    5cc4:	1c43      	adds	r3, r0, #1
    5cc6:	d103      	bne.n	5cd0 <_lseek_r+0x20>
    5cc8:	6823      	ldr	r3, [r4, #0]
    5cca:	2b00      	cmp	r3, #0
    5ccc:	d000      	beq.n	5cd0 <_lseek_r+0x20>
    5cce:	602b      	str	r3, [r5, #0]
    5cd0:	bd70      	pop	{r4, r5, r6, pc}
    5cd2:	46c0      	nop			; (mov r8, r8)
    5cd4:	200009f4 	.word	0x200009f4

00005cd8 <_read_r>:
    5cd8:	b570      	push	{r4, r5, r6, lr}
    5cda:	0005      	movs	r5, r0
    5cdc:	0008      	movs	r0, r1
    5cde:	0011      	movs	r1, r2
    5ce0:	2200      	movs	r2, #0
    5ce2:	4c06      	ldr	r4, [pc, #24]	; (5cfc <_read_r+0x24>)
    5ce4:	6022      	str	r2, [r4, #0]
    5ce6:	001a      	movs	r2, r3
    5ce8:	f7fd fb56 	bl	3398 <_read>
    5cec:	1c43      	adds	r3, r0, #1
    5cee:	d103      	bne.n	5cf8 <_read_r+0x20>
    5cf0:	6823      	ldr	r3, [r4, #0]
    5cf2:	2b00      	cmp	r3, #0
    5cf4:	d000      	beq.n	5cf8 <_read_r+0x20>
    5cf6:	602b      	str	r3, [r5, #0]
    5cf8:	bd70      	pop	{r4, r5, r6, pc}
    5cfa:	46c0      	nop			; (mov r8, r8)
    5cfc:	200009f4 	.word	0x200009f4

00005d00 <mmc_trans_multipliers>:
    5d00:	00000000 0000000a 0000000c 0000000d     ................
    5d10:	0000000f 00000014 0000001a 0000001e     ................
    5d20:	00000023 00000028 0000002d 00000034     #...(...-...4...
    5d30:	00000037 0000003c 00000046 00000050     7...<...F...P...

00005d40 <sd_mmc_trans_units>:
    5d40:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00005d5c <sd_trans_multipliers>:
    5d5c:	00000000 0000000a 0000000c 0000000d     ................
    5d6c:	0000000f 00000014 00000019 0000001e     ................
    5d7c:	00000023 00000028 0000002d 00000032     #...(...-...2...
    5d8c:	00000037 0000003c 00000046 00000050     7...<...F...P...
    5d9c:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    5dac:	42001800 42001c00 00002b2e 00002b2a     ...B...B.+..*+..
    5dbc:	00002b2a 00002b90 00002b90 00002b42     *+...+...+..B+..
    5dcc:	00002b34 00002b48 00002b7e 00002d50     4+..H+..~+..P-..
    5ddc:	00002d30 00002d30 00002dbc 00002d42     0-..0-...-..B-..
    5dec:	00002d5e 00002d34 00002d6c 00002dac     ^-..4-..l-...-..

00005dfc <LfnOfs>:
    5dfc:	07050301 12100e09 1c181614 0000001e     ................

00005e0c <excvt.4558>:
    5e0c:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    5e1c:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    5e2c:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    5e3c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    5e4c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    5e5c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    5e6c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    5e7c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    5e8c:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    5e9c:	00005d5b                                []..

00005ea0 <Tbl>:
    5ea0:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    5eb0:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    5ec0:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    5ed0:	00d600ff 00f800dc 00d800a3 019200d7     ................
    5ee0:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    5ef0:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    5f00:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    5f10:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    5f20:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    5f30:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    5f40:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    5f50:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    5f60:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    5f70:	00da00de 00d900db 00dd00fd 00b400af     ................
    5f80:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    5f90:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00005fa0 <tbl_lower.4308>:
    5fa0:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    5fb0:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    5fc0:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    5fd0:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    5fe0:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    5ff0:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    6000:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    6010:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    6020:	01050103 01090107 010d010b 0111010f     ................
    6030:	01150113 01190117 011d011b 0121011f     ..............!.
    6040:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    6050:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    6060:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    6070:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    6080:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    6090:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    60a0:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    60b0:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    60c0:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    60d0:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    60e0:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    60f0:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    6100:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    6110:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    6120:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    6130:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    6140:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    6150:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    6160:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    6170:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00006180 <tbl_upper.4309>:
    6180:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    6190:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    61a0:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    61b0:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    61c0:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    61d0:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    61e0:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    61f0:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    6200:	01040102 01080106 010c010a 0110010e     ................
    6210:	01140112 01180116 011c011a 0120011e     .............. .
    6220:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    6230:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    6240:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    6250:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    6260:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    6270:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    6280:	03940393 03960395 03980397 039a0399     ................
    6290:	039c039b 039e039d 03a0039f 03a303a1     ................
    62a0:	03a503a4 03a703a6 03a903a8 041003aa     ................
    62b0:	04120411 04140413 04160415 04180417     ................
    62c0:	041a0419 041c041b 041e041d 0420041f     .............. .
    62d0:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    62e0:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    62f0:	04030402 04050404 04070406 04090408     ................
    6300:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    6310:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    6320:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    6330:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    6340:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    6350:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    6360:	35455345 2d203631 544e4520 42205245     ESE516 - ENTER B
    6370:	4c544f4f 4544414f 00000052 2d0d0a0c     OOTLOADER......-
    6380:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    6390:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    63a0:	000d0a2d 61656c50 70206573 2067756c     -...Please plug 
    63b0:	53206e61 4d4d2f44 61632043 69206472     an SD/MMC card i
    63c0:	6c73206e 0a2e746f 0000000d 64726143     n slot......Card
    63d0:	736e6920 6c6c6174 49414620 000d0a4c      install FAIL...
    63e0:	61656c50 75206573 756c706e 6e612067     Please unplug an
    63f0:	65722064 756c702d 68742067 61632065     d re-plug the ca
    6400:	0a2e6472 0000000d 6e756f4d 69642074     rd......Mount di
    6410:	28206b73 6f6d5f66 29746e75 0d2e2e2e     sk (f_mount)....
    6420:	0000000a 4941465b 72205d4c 25207365     ....[FAIL] res %
    6430:	000a0d64 5d4b4f5b 00000a0d 61657243     d...[OK]....Crea
    6440:	61206574 6c696620 66282065 65706f5f     te a file (f_ope
    6450:	2e2e296e 000a0d2e 74697257 6f742065     n)......Write to
    6460:	73657420 69662074 2820656c 75705f66      test file (f_pu
    6470:	2e297374 0a0d2e2e 00000000 74736554     ts).........Test
    6480:	2f445320 20434d4d 63617473 00000a6b      SD/MMC stack...
    6490:	4941465b 0a0d5d4c 00000000 74736554     [FAIL]......Test
    64a0:	20736920 63637573 66737365 0a2e6c75      is successful..
    64b0:	0000000d 61656c50 75206573 756c706e     ....Please unplu
    64c0:	68742067 61632065 0a2e6472 0000000d     g the card......
    64d0:	35455345 2d203631 49584520 4f422054     ESE516 - EXIT BO
    64e0:	4f4c544f 52454441 00000000 64733a30     OTLOADER....0:sd
    64f0:	636d6d5f 7365745f 78742e74 00000074     _mmc_test.txt...

00006500 <_global_impure_ptr>:
    6500:	20000010                                ... 

00006504 <__sf_fake_stderr>:
	...

00006524 <__sf_fake_stdin>:
	...

00006544 <__sf_fake_stdout>:
	...

00006564 <_init>:
    6564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6566:	46c0      	nop			; (mov r8, r8)
    6568:	bcf8      	pop	{r3, r4, r5, r6, r7}
    656a:	bc08      	pop	{r3}
    656c:	469e      	mov	lr, r3
    656e:	4770      	bx	lr

00006570 <__init_array_start>:
    6570:	000000dd 	.word	0x000000dd

00006574 <_fini>:
    6574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6576:	46c0      	nop			; (mov r8, r8)
    6578:	bcf8      	pop	{r3, r4, r5, r6, r7}
    657a:	bc08      	pop	{r3}
    657c:	469e      	mov	lr, r3
    657e:	4770      	bx	lr

00006580 <__fini_array_start>:
    6580:	000000b5 	.word	0x000000b5
