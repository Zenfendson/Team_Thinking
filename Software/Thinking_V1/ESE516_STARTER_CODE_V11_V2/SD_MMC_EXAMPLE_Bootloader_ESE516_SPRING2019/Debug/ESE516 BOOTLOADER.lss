
ESE516 BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000067e4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  000067e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c20  20000094  00006878  00020094  2**2
                  ALLOC
  3 .stack        00002004  20000cb4  00007498  00020094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004797e  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006bbd  00000000  00000000  00067a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010876  00000000  00000000  0006e650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b88  00000000  00000000  0007eec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010b8  00000000  00000000  0007fa4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020e26  00000000  00000000  00080b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017194  00000000  00000000  000a192c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000939c1  00000000  00000000  000b8ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002414  00000000  00000000  0014c484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 2c 00 20 ad 33 00 00 a9 33 00 00 a9 33 00 00     .,. .3...3...3..
	...
      2c:	a9 33 00 00 00 00 00 00 00 00 00 00 a9 33 00 00     .3...........3..
      3c:	8d 01 00 00 a9 33 00 00 a9 33 00 00 a9 33 00 00     .....3...3...3..
      4c:	a9 33 00 00 a9 33 00 00 a9 33 00 00 a9 33 00 00     .3...3...3...3..
      5c:	a9 33 00 00 a9 33 00 00 01 1e 00 00 11 1e 00 00     .3...3..........
      6c:	21 1e 00 00 31 1e 00 00 41 1e 00 00 51 1e 00 00     !...1...A...Q...
      7c:	a9 33 00 00 a9 33 00 00 a9 33 00 00 a9 33 00 00     .3...3...3...3..
      8c:	a9 33 00 00 a9 33 00 00 00 00 00 00 00 00 00 00     .3...3..........
      9c:	a9 33 00 00 a9 33 00 00 a9 33 00 00 a9 33 00 00     .3...3...3...3..
      ac:	a9 33 00 00 00 00 00 00                             .3......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000094 	.word	0x20000094
      d4:	00000000 	.word	0x00000000
      d8:	000067e4 	.word	0x000067e4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000098 	.word	0x20000098
     108:	000067e4 	.word	0x000067e4
     10c:	000067e4 	.word	0x000067e4
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00003139 	.word	0x00003139
     140:	0000536d 	.word	0x0000536d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <GetSystick>:
* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
	return ul_tickcount;
     180:	4b01      	ldr	r3, [pc, #4]	; (188 <GetSystick+0x8>)
     182:	6818      	ldr	r0, [r3, #0]
}
     184:	4770      	bx	lr
     186:	46c0      	nop			; (mov r8, r8)
     188:	200000b0 	.word	0x200000b0

0000018c <SysTick_Handler>:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
	
	ul_tickcount++;
     18c:	4a02      	ldr	r2, [pc, #8]	; (198 <SysTick_Handler+0xc>)
     18e:	6813      	ldr	r3, [r2, #0]
     190:	3301      	adds	r3, #1
     192:	6013      	str	r3, [r2, #0]
}
     194:	4770      	bx	lr
     196:	46c0      	nop			; (mov r8, r8)
     198:	200000b0 	.word	0x200000b0

0000019c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     19c:	b5f0      	push	{r4, r5, r6, r7, lr}
     19e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1a0:	ac01      	add	r4, sp, #4
     1a2:	2501      	movs	r5, #1
     1a4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1a6:	2700      	movs	r7, #0
     1a8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     1ac:	0021      	movs	r1, r4
     1ae:	2017      	movs	r0, #23
     1b0:	4e06      	ldr	r6, [pc, #24]	; (1cc <system_board_init+0x30>)
     1b2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1b4:	2280      	movs	r2, #128	; 0x80
     1b6:	0412      	lsls	r2, r2, #16
     1b8:	4b05      	ldr	r3, [pc, #20]	; (1d0 <system_board_init+0x34>)
     1ba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1bc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1be:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1c0:	0021      	movs	r1, r4
     1c2:	2037      	movs	r0, #55	; 0x37
     1c4:	47b0      	blx	r6
}
     1c6:	b003      	add	sp, #12
     1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	00001821 	.word	0x00001821
     1d0:	41004400 	.word	0x41004400

000001d4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     1d4:	b510      	push	{r4, lr}
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     1d6:	4a1e      	ldr	r2, [pc, #120]	; (250 <nvm_set_config+0x7c>)
     1d8:	69d3      	ldr	r3, [r2, #28]
     1da:	2104      	movs	r1, #4
     1dc:	430b      	orrs	r3, r1
     1de:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     1e0:	4b1c      	ldr	r3, [pc, #112]	; (254 <nvm_set_config+0x80>)
     1e2:	2220      	movs	r2, #32
     1e4:	32ff      	adds	r2, #255	; 0xff
     1e6:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     1e8:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     1ea:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     1ec:	07d2      	lsls	r2, r2, #31
     1ee:	d401      	bmi.n	1f4 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     1f0:	0018      	movs	r0, r3
     1f2:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     1f4:	7803      	ldrb	r3, [r0, #0]
     1f6:	021b      	lsls	r3, r3, #8
     1f8:	22c0      	movs	r2, #192	; 0xc0
     1fa:	0092      	lsls	r2, r2, #2
     1fc:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     1fe:	7841      	ldrb	r1, [r0, #1]
     200:	01c9      	lsls	r1, r1, #7
     202:	22ff      	movs	r2, #255	; 0xff
     204:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     206:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     208:	7881      	ldrb	r1, [r0, #2]
     20a:	0049      	lsls	r1, r1, #1
     20c:	221e      	movs	r2, #30
     20e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     210:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     212:	78c2      	ldrb	r2, [r0, #3]
     214:	0492      	lsls	r2, r2, #18
     216:	2180      	movs	r1, #128	; 0x80
     218:	02c9      	lsls	r1, r1, #11
     21a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     21c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     21e:	7902      	ldrb	r2, [r0, #4]
     220:	0412      	lsls	r2, r2, #16
     222:	21c0      	movs	r1, #192	; 0xc0
     224:	0289      	lsls	r1, r1, #10
     226:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     228:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     22a:	4a0a      	ldr	r2, [pc, #40]	; (254 <nvm_set_config+0x80>)
     22c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     22e:	6893      	ldr	r3, [r2, #8]
     230:	035b      	lsls	r3, r3, #13
     232:	0f5b      	lsrs	r3, r3, #29
     234:	4908      	ldr	r1, [pc, #32]	; (258 <nvm_set_config+0x84>)
     236:	2408      	movs	r4, #8
     238:	409c      	lsls	r4, r3
     23a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     23c:	6893      	ldr	r3, [r2, #8]
     23e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     240:	7843      	ldrb	r3, [r0, #1]
     242:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     244:	8b13      	ldrh	r3, [r2, #24]
     246:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     248:	0fdb      	lsrs	r3, r3, #31
     24a:	011b      	lsls	r3, r3, #4
     24c:	e7d0      	b.n	1f0 <nvm_set_config+0x1c>
     24e:	46c0      	nop			; (mov r8, r8)
     250:	40000400 	.word	0x40000400
     254:	41004000 	.word	0x41004000
     258:	200000b4 	.word	0x200000b4

0000025c <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     25e:	4b11      	ldr	r3, [pc, #68]	; (2a4 <SdCard_Initiate+0x48>)
     260:	4798      	blx	r3
     262:	0006      	movs	r6, r0

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     264:	4f10      	ldr	r7, [pc, #64]	; (2a8 <SdCard_Initiate+0x4c>)
	if (CTRL_FAIL == status) {
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     266:	4d11      	ldr	r5, [pc, #68]	; (2ac <SdCard_Initiate+0x50>)
     268:	e00a      	b.n	280 <SdCard_Initiate+0x24>
     26a:	2000      	movs	r0, #0
     26c:	47a8      	blx	r5
     26e:	2802      	cmp	r0, #2
     270:	d1fb      	bne.n	26a <SdCard_Initiate+0xe>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     272:	4b0c      	ldr	r3, [pc, #48]	; (2a4 <SdCard_Initiate+0x48>)
     274:	4798      	blx	r3
     276:	1b80      	subs	r0, r0, r6
     278:	23fa      	movs	r3, #250	; 0xfa
     27a:	005b      	lsls	r3, r3, #1
     27c:	4298      	cmp	r0, r3
     27e:	d80d      	bhi.n	29c <SdCard_Initiate+0x40>
	status = sd_mmc_test_unit_ready(0);
     280:	2000      	movs	r0, #0
     282:	47b8      	blx	r7
     284:	0004      	movs	r4, r0
	if (CTRL_FAIL == status) {
     286:	2801      	cmp	r0, #1
     288:	d0ef      	beq.n	26a <SdCard_Initiate+0xe>
	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     28a:	4b06      	ldr	r3, [pc, #24]	; (2a4 <SdCard_Initiate+0x48>)
     28c:	4798      	blx	r3
     28e:	1b80      	subs	r0, r0, r6
     290:	23fa      	movs	r3, #250	; 0xfa
     292:	005b      	lsls	r3, r3, #1
     294:	4298      	cmp	r0, r3
     296:	d803      	bhi.n	2a0 <SdCard_Initiate+0x44>
	{
		status = CTRL_FAIL;
		break;
	}
} while (CTRL_GOOD != status );
     298:	2c00      	cmp	r4, #0
     29a:	d1f1      	bne.n	280 <SdCard_Initiate+0x24>

return status;
}
     29c:	0020      	movs	r0, r4
     29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		status = CTRL_FAIL;
     2a0:	2401      	movs	r4, #1
     2a2:	e7fb      	b.n	29c <SdCard_Initiate+0x40>
     2a4:	00000181 	.word	0x00000181
     2a8:	00000ea5 	.word	0x00000ea5
     2ac:	00000791 	.word	0x00000791

000002b0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     2b0:	b510      	push	{r4, lr}
     2b2:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     2b4:	7c03      	ldrb	r3, [r0, #16]
     2b6:	2b00      	cmp	r3, #0
     2b8:	d005      	beq.n	2c6 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     2ba:	6883      	ldr	r3, [r0, #8]
     2bc:	1c58      	adds	r0, r3, #1
     2be:	68e1      	ldr	r1, [r4, #12]
     2c0:	4b07      	ldr	r3, [pc, #28]	; (2e0 <advance_pointer+0x30>)
     2c2:	4798      	blx	r3
     2c4:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     2c6:	6863      	ldr	r3, [r4, #4]
     2c8:	1c58      	adds	r0, r3, #1
     2ca:	68e1      	ldr	r1, [r4, #12]
     2cc:	4b04      	ldr	r3, [pc, #16]	; (2e0 <advance_pointer+0x30>)
     2ce:	4798      	blx	r3
     2d0:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     2d2:	68a3      	ldr	r3, [r4, #8]
     2d4:	1a59      	subs	r1, r3, r1
     2d6:	424a      	negs	r2, r1
     2d8:	414a      	adcs	r2, r1
     2da:	7422      	strb	r2, [r4, #16]
 }
     2dc:	bd10      	pop	{r4, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	00005479 	.word	0x00005479

000002e4 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     2e4:	b570      	push	{r4, r5, r6, lr}
     2e6:	0005      	movs	r5, r0
     2e8:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     2ea:	2014      	movs	r0, #20
     2ec:	4b04      	ldr	r3, [pc, #16]	; (300 <circular_buf_init+0x1c>)
     2ee:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     2f0:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     2f2:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     2f4:	2300      	movs	r3, #0
     2f6:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     2f8:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     2fa:	7403      	strb	r3, [r0, #16]
 }
     2fc:	bd70      	pop	{r4, r5, r6, pc}
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	000056f5 	.word	0x000056f5

00000304 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     304:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     306:	6803      	ldr	r3, [r0, #0]
     308:	6842      	ldr	r2, [r0, #4]
     30a:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     30c:	4b01      	ldr	r3, [pc, #4]	; (314 <circular_buf_put+0x10>)
     30e:	4798      	blx	r3
 }
     310:	bd10      	pop	{r4, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	000002b1 	.word	0x000002b1

00000318 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     318:	7c02      	ldrb	r2, [r0, #16]
     31a:	2300      	movs	r3, #0
     31c:	2a00      	cmp	r2, #0
     31e:	d105      	bne.n	32c <circular_buf_empty+0x14>
     320:	6843      	ldr	r3, [r0, #4]
     322:	6880      	ldr	r0, [r0, #8]
     324:	1a1b      	subs	r3, r3, r0
     326:	4258      	negs	r0, r3
     328:	4143      	adcs	r3, r0
     32a:	b2db      	uxtb	r3, r3
     32c:	0018      	movs	r0, r3
 }
     32e:	4770      	bx	lr

00000330 <circular_buf_get>:
 {
     330:	b570      	push	{r4, r5, r6, lr}
     332:	0004      	movs	r4, r0
     334:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     336:	4b0a      	ldr	r3, [pc, #40]	; (360 <circular_buf_get+0x30>)
     338:	4798      	blx	r3
     33a:	2800      	cmp	r0, #0
     33c:	d10d      	bne.n	35a <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     33e:	6823      	ldr	r3, [r4, #0]
     340:	68a2      	ldr	r2, [r4, #8]
     342:	5c9b      	ldrb	r3, [r3, r2]
     344:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     346:	2300      	movs	r3, #0
     348:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     34a:	68a3      	ldr	r3, [r4, #8]
     34c:	1c58      	adds	r0, r3, #1
     34e:	68e1      	ldr	r1, [r4, #12]
     350:	4b04      	ldr	r3, [pc, #16]	; (364 <circular_buf_get+0x34>)
     352:	4798      	blx	r3
     354:	60a1      	str	r1, [r4, #8]
		 r = 0;
     356:	2000      	movs	r0, #0
 }
     358:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     35a:	2001      	movs	r0, #1
     35c:	4240      	negs	r0, r0
	 return r;
     35e:	e7fb      	b.n	358 <circular_buf_get+0x28>
     360:	00000319 	.word	0x00000319
     364:	00005479 	.word	0x00005479

00000368 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     368:	b570      	push	{r4, r5, r6, lr}
     36a:	b082      	sub	sp, #8
     36c:	0005      	movs	r5, r0
     36e:	000e      	movs	r6, r1
	uint16_t temp = 0;
     370:	2200      	movs	r2, #0
     372:	466b      	mov	r3, sp
     374:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     376:	4c06      	ldr	r4, [pc, #24]	; (390 <usart_serial_getchar+0x28>)
     378:	466b      	mov	r3, sp
     37a:	1d99      	adds	r1, r3, #6
     37c:	0028      	movs	r0, r5
     37e:	47a0      	blx	r4
     380:	2800      	cmp	r0, #0
     382:	d1f9      	bne.n	378 <usart_serial_getchar+0x10>

	*c = temp;
     384:	466b      	mov	r3, sp
     386:	3306      	adds	r3, #6
     388:	881b      	ldrh	r3, [r3, #0]
     38a:	7033      	strb	r3, [r6, #0]
}
     38c:	b002      	add	sp, #8
     38e:	bd70      	pop	{r4, r5, r6, pc}
     390:	00002911 	.word	0x00002911

00000394 <usart_serial_putchar>:
{
     394:	b570      	push	{r4, r5, r6, lr}
     396:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     398:	b28c      	uxth	r4, r1
     39a:	4e03      	ldr	r6, [pc, #12]	; (3a8 <usart_serial_putchar+0x14>)
     39c:	0021      	movs	r1, r4
     39e:	0028      	movs	r0, r5
     3a0:	47b0      	blx	r6
     3a2:	2800      	cmp	r0, #0
     3a4:	d1fa      	bne.n	39c <usart_serial_putchar+0x8>
}
     3a6:	bd70      	pop	{r4, r5, r6, pc}
     3a8:	000028e5 	.word	0x000028e5

000003ac <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     3ac:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     3ae:	4b06      	ldr	r3, [pc, #24]	; (3c8 <usart_write_callback+0x1c>)
     3b0:	6818      	ldr	r0, [r3, #0]
     3b2:	4906      	ldr	r1, [pc, #24]	; (3cc <usart_write_callback+0x20>)
     3b4:	4b06      	ldr	r3, [pc, #24]	; (3d0 <usart_write_callback+0x24>)
     3b6:	4798      	blx	r3
     3b8:	1c43      	adds	r3, r0, #1
     3ba:	d004      	beq.n	3c6 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     3bc:	2201      	movs	r2, #1
     3be:	4903      	ldr	r1, [pc, #12]	; (3cc <usart_write_callback+0x20>)
     3c0:	4804      	ldr	r0, [pc, #16]	; (3d4 <usart_write_callback+0x28>)
     3c2:	4b05      	ldr	r3, [pc, #20]	; (3d8 <usart_write_callback+0x2c>)
     3c4:	4798      	blx	r3
	}
	
}
     3c6:	bd10      	pop	{r4, pc}
     3c8:	200009ec 	.word	0x200009ec
     3cc:	200009e8 	.word	0x200009e8
     3d0:	00000331 	.word	0x00000331
     3d4:	200001ac 	.word	0x200001ac
     3d8:	00002a25 	.word	0x00002a25

000003dc <InitializeSerialConsole>:
{
     3dc:	b570      	push	{r4, r5, r6, lr}
     3de:	b090      	sub	sp, #64	; 0x40
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     3e0:	2580      	movs	r5, #128	; 0x80
     3e2:	00ed      	lsls	r5, r5, #3
     3e4:	0029      	movs	r1, r5
     3e6:	483f      	ldr	r0, [pc, #252]	; (4e4 <InitializeSerialConsole+0x108>)
     3e8:	4c3f      	ldr	r4, [pc, #252]	; (4e8 <InitializeSerialConsole+0x10c>)
     3ea:	47a0      	blx	r4
     3ec:	4b3f      	ldr	r3, [pc, #252]	; (4ec <InitializeSerialConsole+0x110>)
     3ee:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     3f0:	0029      	movs	r1, r5
     3f2:	483f      	ldr	r0, [pc, #252]	; (4f0 <InitializeSerialConsole+0x114>)
     3f4:	47a0      	blx	r4
     3f6:	4b3f      	ldr	r3, [pc, #252]	; (4f4 <InitializeSerialConsole+0x118>)
     3f8:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     3fa:	2380      	movs	r3, #128	; 0x80
     3fc:	05db      	lsls	r3, r3, #23
     3fe:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     400:	2300      	movs	r3, #0
     402:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     404:	22ff      	movs	r2, #255	; 0xff
     406:	4669      	mov	r1, sp
     408:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     40a:	2200      	movs	r2, #0
     40c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     40e:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     410:	2101      	movs	r1, #1
     412:	2024      	movs	r0, #36	; 0x24
     414:	466c      	mov	r4, sp
     416:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     418:	3001      	adds	r0, #1
     41a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     41c:	3125      	adds	r1, #37	; 0x25
     41e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     420:	3101      	adds	r1, #1
     422:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     424:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     426:	3105      	adds	r1, #5
     428:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     42a:	3101      	adds	r1, #1
     42c:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     42e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     430:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     432:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     434:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     436:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     438:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     43a:	2313      	movs	r3, #19
     43c:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     43e:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
     440:	23e1      	movs	r3, #225	; 0xe1
     442:	025b      	lsls	r3, r3, #9
     444:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     446:	23c4      	movs	r3, #196	; 0xc4
     448:	039b      	lsls	r3, r3, #14
     44a:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     44c:	2301      	movs	r3, #1
     44e:	425b      	negs	r3, r3
     450:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     452:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     454:	4b28      	ldr	r3, [pc, #160]	; (4f8 <InitializeSerialConsole+0x11c>)
     456:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     458:	4b28      	ldr	r3, [pc, #160]	; (4fc <InitializeSerialConsole+0x120>)
     45a:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
     45c:	4d28      	ldr	r5, [pc, #160]	; (500 <InitializeSerialConsole+0x124>)
     45e:	4c29      	ldr	r4, [pc, #164]	; (504 <InitializeSerialConsole+0x128>)
     460:	466a      	mov	r2, sp
     462:	4929      	ldr	r1, [pc, #164]	; (508 <InitializeSerialConsole+0x12c>)
     464:	0028      	movs	r0, r5
     466:	47a0      	blx	r4
     468:	2800      	cmp	r0, #0
     46a:	d1f9      	bne.n	460 <InitializeSerialConsole+0x84>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     46c:	4d24      	ldr	r5, [pc, #144]	; (500 <InitializeSerialConsole+0x124>)
     46e:	4b27      	ldr	r3, [pc, #156]	; (50c <InitializeSerialConsole+0x130>)
     470:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     472:	4a27      	ldr	r2, [pc, #156]	; (510 <InitializeSerialConsole+0x134>)
     474:	4b27      	ldr	r3, [pc, #156]	; (514 <InitializeSerialConsole+0x138>)
     476:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     478:	4a27      	ldr	r2, [pc, #156]	; (518 <InitializeSerialConsole+0x13c>)
     47a:	4b28      	ldr	r3, [pc, #160]	; (51c <InitializeSerialConsole+0x140>)
     47c:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     47e:	4e28      	ldr	r6, [pc, #160]	; (520 <InitializeSerialConsole+0x144>)
     480:	6833      	ldr	r3, [r6, #0]
     482:	6898      	ldr	r0, [r3, #8]
     484:	2100      	movs	r1, #0
     486:	4c27      	ldr	r4, [pc, #156]	; (524 <InitializeSerialConsole+0x148>)
     488:	47a0      	blx	r4
	setbuf(stdin, NULL);
     48a:	6833      	ldr	r3, [r6, #0]
     48c:	6858      	ldr	r0, [r3, #4]
     48e:	2100      	movs	r1, #0
     490:	47a0      	blx	r4
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     492:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     494:	0020      	movs	r0, r4
     496:	4b24      	ldr	r3, [pc, #144]	; (528 <InitializeSerialConsole+0x14c>)
     498:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     49a:	231f      	movs	r3, #31
     49c:	4018      	ands	r0, r3
     49e:	3b1e      	subs	r3, #30
     4a0:	4083      	lsls	r3, r0
     4a2:	4a22      	ldr	r2, [pc, #136]	; (52c <InitializeSerialConsole+0x150>)
     4a4:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     4a6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     4a8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     4aa:	2b00      	cmp	r3, #0
     4ac:	d1fc      	bne.n	4a8 <InitializeSerialConsole+0xcc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     4ae:	6823      	ldr	r3, [r4, #0]
     4b0:	2202      	movs	r2, #2
     4b2:	4313      	orrs	r3, r2
     4b4:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
     4b6:	4c12      	ldr	r4, [pc, #72]	; (500 <InitializeSerialConsole+0x124>)
     4b8:	2200      	movs	r2, #0
     4ba:	491d      	ldr	r1, [pc, #116]	; (530 <InitializeSerialConsole+0x154>)
     4bc:	0020      	movs	r0, r4
     4be:	4d1d      	ldr	r5, [pc, #116]	; (534 <InitializeSerialConsole+0x158>)
     4c0:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
     4c2:	2201      	movs	r2, #1
     4c4:	491c      	ldr	r1, [pc, #112]	; (538 <InitializeSerialConsole+0x15c>)
     4c6:	0020      	movs	r0, r4
     4c8:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     4ca:	2231      	movs	r2, #49	; 0x31
     4cc:	5ca3      	ldrb	r3, [r4, r2]
     4ce:	2103      	movs	r1, #3
     4d0:	430b      	orrs	r3, r1
     4d2:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     4d4:	3a30      	subs	r2, #48	; 0x30
     4d6:	4919      	ldr	r1, [pc, #100]	; (53c <InitializeSerialConsole+0x160>)
     4d8:	0020      	movs	r0, r4
     4da:	4b19      	ldr	r3, [pc, #100]	; (540 <InitializeSerialConsole+0x164>)
     4dc:	4798      	blx	r3
}
     4de:	b010      	add	sp, #64	; 0x40
     4e0:	bd70      	pop	{r4, r5, r6, pc}
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	200005e8 	.word	0x200005e8
     4e8:	000002e5 	.word	0x000002e5
     4ec:	200001e0 	.word	0x200001e0
     4f0:	200001e8 	.word	0x200001e8
     4f4:	200009ec 	.word	0x200009ec
     4f8:	002a0003 	.word	0x002a0003
     4fc:	002b0003 	.word	0x002b0003
     500:	200001ac 	.word	0x200001ac
     504:	000025a1 	.word	0x000025a1
     508:	42001800 	.word	0x42001800
     50c:	20000a18 	.word	0x20000a18
     510:	00000395 	.word	0x00000395
     514:	20000a14 	.word	0x20000a14
     518:	00000369 	.word	0x00000369
     51c:	20000a10 	.word	0x20000a10
     520:	20000030 	.word	0x20000030
     524:	0000588d 	.word	0x0000588d
     528:	00001dd1 	.word	0x00001dd1
     52c:	e000e100 	.word	0xe000e100
     530:	000003ad 	.word	0x000003ad
     534:	00002a0d 	.word	0x00002a0d
     538:	000005f1 	.word	0x000005f1
     53c:	200001e4 	.word	0x200001e4
     540:	00002a45 	.word	0x00002a45

00000544 <DeinitializeSerialConsole>:
{
     544:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     546:	4d0a      	ldr	r5, [pc, #40]	; (570 <DeinitializeSerialConsole+0x2c>)
     548:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     54a:	0020      	movs	r0, r4
     54c:	4b09      	ldr	r3, [pc, #36]	; (574 <DeinitializeSerialConsole+0x30>)
     54e:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     550:	231f      	movs	r3, #31
     552:	4018      	ands	r0, r3
     554:	3b1e      	subs	r3, #30
     556:	4083      	lsls	r3, r0
     558:	2280      	movs	r2, #128	; 0x80
     55a:	4907      	ldr	r1, [pc, #28]	; (578 <DeinitializeSerialConsole+0x34>)
     55c:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
     55e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     560:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     562:	2b00      	cmp	r3, #0
     564:	d1fc      	bne.n	560 <DeinitializeSerialConsole+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     566:	6823      	ldr	r3, [r4, #0]
     568:	2202      	movs	r2, #2
     56a:	4393      	bics	r3, r2
     56c:	6023      	str	r3, [r4, #0]
}
     56e:	bd70      	pop	{r4, r5, r6, pc}
     570:	200001ac 	.word	0x200001ac
     574:	00001dd1 	.word	0x00001dd1
     578:	e000e100 	.word	0xe000e100

0000057c <SerialConsoleWriteString>:
{
     57c:	b5f0      	push	{r4, r5, r6, r7, lr}
     57e:	46c6      	mov	lr, r8
     580:	b500      	push	{lr}
     582:	0005      	movs	r5, r0
     584:	2400      	movs	r4, #0
	if(string != NULL)
     586:	2800      	cmp	r0, #0
     588:	d012      	beq.n	5b0 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
     58a:	4e11      	ldr	r6, [pc, #68]	; (5d0 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
     58c:	4f11      	ldr	r7, [pc, #68]	; (5d4 <SerialConsoleWriteString+0x58>)
     58e:	4b12      	ldr	r3, [pc, #72]	; (5d8 <SerialConsoleWriteString+0x5c>)
     590:	4698      	mov	r8, r3
     592:	e003      	b.n	59c <SerialConsoleWriteString+0x20>
     594:	5d29      	ldrb	r1, [r5, r4]
     596:	6838      	ldr	r0, [r7, #0]
     598:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
     59a:	3401      	adds	r4, #1
     59c:	0028      	movs	r0, r5
     59e:	47b0      	blx	r6
     5a0:	4284      	cmp	r4, r0
     5a2:	d3f7      	bcc.n	594 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     5a4:	2101      	movs	r1, #1
     5a6:	480d      	ldr	r0, [pc, #52]	; (5dc <SerialConsoleWriteString+0x60>)
     5a8:	4b0d      	ldr	r3, [pc, #52]	; (5e0 <SerialConsoleWriteString+0x64>)
     5aa:	4798      	blx	r3
     5ac:	2800      	cmp	r0, #0
     5ae:	d002      	beq.n	5b6 <SerialConsoleWriteString+0x3a>
}
     5b0:	bc04      	pop	{r2}
     5b2:	4690      	mov	r8, r2
     5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     5b6:	4c0b      	ldr	r4, [pc, #44]	; (5e4 <SerialConsoleWriteString+0x68>)
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <SerialConsoleWriteString+0x58>)
     5ba:	6818      	ldr	r0, [r3, #0]
     5bc:	0021      	movs	r1, r4
     5be:	4b0a      	ldr	r3, [pc, #40]	; (5e8 <SerialConsoleWriteString+0x6c>)
     5c0:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     5c2:	2201      	movs	r2, #1
     5c4:	0021      	movs	r1, r4
     5c6:	4805      	ldr	r0, [pc, #20]	; (5dc <SerialConsoleWriteString+0x60>)
     5c8:	4b08      	ldr	r3, [pc, #32]	; (5ec <SerialConsoleWriteString+0x70>)
     5ca:	4798      	blx	r3
}
     5cc:	e7f0      	b.n	5b0 <SerialConsoleWriteString+0x34>
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	000059f9 	.word	0x000059f9
     5d4:	200009ec 	.word	0x200009ec
     5d8:	00000305 	.word	0x00000305
     5dc:	200001ac 	.word	0x200001ac
     5e0:	00002a65 	.word	0x00002a65
     5e4:	200009e8 	.word	0x200009e8
     5e8:	00000331 	.word	0x00000331
     5ec:	00002a25 	.word	0x00002a25

000005f0 <usart_read_callback>:
{
     5f0:	b510      	push	{r4, lr}
     5f2:	b082      	sub	sp, #8
	SerialConsoleWriteString(&latestRx);
     5f4:	4c0d      	ldr	r4, [pc, #52]	; (62c <usart_read_callback+0x3c>)
     5f6:	0020      	movs	r0, r4
     5f8:	4b0d      	ldr	r3, [pc, #52]	; (630 <usart_read_callback+0x40>)
     5fa:	4798      	blx	r3
	if(latestRx == 0x08)
     5fc:	7823      	ldrb	r3, [r4, #0]
     5fe:	2b08      	cmp	r3, #8
     600:	d00c      	beq.n	61c <usart_read_callback+0x2c>
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     602:	4c0a      	ldr	r4, [pc, #40]	; (62c <usart_read_callback+0x3c>)
     604:	7821      	ldrb	r1, [r4, #0]
     606:	4b0b      	ldr	r3, [pc, #44]	; (634 <usart_read_callback+0x44>)
     608:	6818      	ldr	r0, [r3, #0]
     60a:	4b0b      	ldr	r3, [pc, #44]	; (638 <usart_read_callback+0x48>)
     60c:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     60e:	2201      	movs	r2, #1
     610:	0021      	movs	r1, r4
     612:	480a      	ldr	r0, [pc, #40]	; (63c <usart_read_callback+0x4c>)
     614:	4b0a      	ldr	r3, [pc, #40]	; (640 <usart_read_callback+0x50>)
     616:	4798      	blx	r3
}
     618:	b002      	add	sp, #8
     61a:	bd10      	pop	{r4, pc}
	a[0] = 0x20;
     61c:	a801      	add	r0, sp, #4
     61e:	3318      	adds	r3, #24
     620:	7003      	strb	r3, [r0, #0]
	a[1]= 0x08;
     622:	3b18      	subs	r3, #24
     624:	7043      	strb	r3, [r0, #1]
	SerialConsoleWriteString((const char*)&a);
     626:	4b02      	ldr	r3, [pc, #8]	; (630 <usart_read_callback+0x40>)
     628:	4798      	blx	r3
     62a:	e7ea      	b.n	602 <usart_read_callback+0x12>
     62c:	200001e4 	.word	0x200001e4
     630:	0000057d 	.word	0x0000057d
     634:	200001e0 	.word	0x200001e0
     638:	00000305 	.word	0x00000305
     63c:	200001ac 	.word	0x200001ac
     640:	00002a45 	.word	0x00002a45

00000644 <LogMessage>:
{
     644:	b40e      	push	{r1, r2, r3}
};
     646:	b003      	add	sp, #12
     648:	4770      	bx	lr
	...

0000064c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     64c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     64e:	4b06      	ldr	r3, [pc, #24]	; (668 <sd_mmc_configure_slot+0x1c>)
     650:	6819      	ldr	r1, [r3, #0]
     652:	7f8b      	ldrb	r3, [r1, #30]
     654:	1e5a      	subs	r2, r3, #1
     656:	4193      	sbcs	r3, r2
     658:	b2db      	uxtb	r3, r3
     65a:	7b4a      	ldrb	r2, [r1, #13]
     65c:	6809      	ldr	r1, [r1, #0]
     65e:	4803      	ldr	r0, [pc, #12]	; (66c <sd_mmc_configure_slot+0x20>)
     660:	7800      	ldrb	r0, [r0, #0]
     662:	4c03      	ldr	r4, [pc, #12]	; (670 <sd_mmc_configure_slot+0x24>)
     664:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     666:	bd10      	pop	{r4, pc}
     668:	200000bc 	.word	0x200000bc
     66c:	200000e4 	.word	0x200000e4
     670:	00001309 	.word	0x00001309

00000674 <sd_mmc_select_slot>:
{
     674:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     676:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     678:	2800      	cmp	r0, #0
     67a:	d001      	beq.n	680 <sd_mmc_select_slot+0xc>
}
     67c:	0018      	movs	r0, r3
     67e:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     680:	4b0e      	ldr	r3, [pc, #56]	; (6bc <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     682:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     684:	3b03      	subs	r3, #3
     686:	2b01      	cmp	r3, #1
     688:	d90d      	bls.n	6a6 <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     68a:	2200      	movs	r2, #0
     68c:	4b0c      	ldr	r3, [pc, #48]	; (6c0 <sd_mmc_select_slot+0x4c>)
     68e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     690:	4c0a      	ldr	r4, [pc, #40]	; (6bc <sd_mmc_select_slot+0x48>)
     692:	4b0c      	ldr	r3, [pc, #48]	; (6c4 <sd_mmc_select_slot+0x50>)
     694:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     696:	4b0c      	ldr	r3, [pc, #48]	; (6c8 <sd_mmc_select_slot+0x54>)
     698:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     69a:	7aa3      	ldrb	r3, [r4, #10]
     69c:	3b02      	subs	r3, #2
     69e:	4258      	negs	r0, r3
     6a0:	4143      	adcs	r3, r0
     6a2:	b2db      	uxtb	r3, r3
     6a4:	e7ea      	b.n	67c <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     6a6:	4b05      	ldr	r3, [pc, #20]	; (6bc <sd_mmc_select_slot+0x48>)
     6a8:	2202      	movs	r2, #2
     6aa:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     6ac:	4a07      	ldr	r2, [pc, #28]	; (6cc <sd_mmc_select_slot+0x58>)
     6ae:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     6b0:	2201      	movs	r2, #1
     6b2:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     6b4:	2200      	movs	r2, #0
     6b6:	779a      	strb	r2, [r3, #30]
     6b8:	e7e7      	b.n	68a <sd_mmc_select_slot+0x16>
     6ba:	46c0      	nop			; (mov r8, r8)
     6bc:	200000c0 	.word	0x200000c0
     6c0:	200000e4 	.word	0x200000e4
     6c4:	200000bc 	.word	0x200000bc
     6c8:	0000064d 	.word	0x0000064d
     6cc:	00061a80 	.word	0x00061a80

000006d0 <sd_mmc_cmd13>:
{
     6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6d2:	4d09      	ldr	r5, [pc, #36]	; (6f8 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     6d4:	4f09      	ldr	r7, [pc, #36]	; (6fc <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     6d6:	4e0a      	ldr	r6, [pc, #40]	; (700 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     6d8:	2100      	movs	r1, #0
     6da:	480a      	ldr	r0, [pc, #40]	; (704 <sd_mmc_cmd13+0x34>)
     6dc:	47b8      	blx	r7
     6de:	1e04      	subs	r4, r0, #0
     6e0:	d007      	beq.n	6f2 <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     6e2:	47b0      	blx	r6
     6e4:	23ff      	movs	r3, #255	; 0xff
     6e6:	4203      	tst	r3, r0
     6e8:	d003      	beq.n	6f2 <sd_mmc_cmd13+0x22>
     6ea:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     6ec:	2d00      	cmp	r5, #0
     6ee:	d1f3      	bne.n	6d8 <sd_mmc_cmd13+0x8>
			return false;
     6f0:	2400      	movs	r4, #0
}
     6f2:	0020      	movs	r0, r4
     6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	00030d41 	.word	0x00030d41
     6fc:	0000154d 	.word	0x0000154d
     700:	00001565 	.word	0x00001565
     704:	00001b0d 	.word	0x00001b0d

00000708 <sd_mmc_cmd9_spi>:
{
     708:	b510      	push	{r4, lr}
     70a:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     70c:	4b0c      	ldr	r3, [pc, #48]	; (740 <sd_mmc_cmd9_spi+0x38>)
     70e:	681b      	ldr	r3, [r3, #0]
     710:	8919      	ldrh	r1, [r3, #8]
     712:	0409      	lsls	r1, r1, #16
     714:	2301      	movs	r3, #1
     716:	9300      	str	r3, [sp, #0]
     718:	2210      	movs	r2, #16
     71a:	480a      	ldr	r0, [pc, #40]	; (744 <sd_mmc_cmd9_spi+0x3c>)
     71c:	4c0a      	ldr	r4, [pc, #40]	; (748 <sd_mmc_cmd9_spi+0x40>)
     71e:	47a0      	blx	r4
     720:	2800      	cmp	r0, #0
     722:	d101      	bne.n	728 <sd_mmc_cmd9_spi+0x20>
}
     724:	b002      	add	sp, #8
     726:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     728:	4b05      	ldr	r3, [pc, #20]	; (740 <sd_mmc_cmd9_spi+0x38>)
     72a:	6818      	ldr	r0, [r3, #0]
     72c:	300e      	adds	r0, #14
     72e:	2101      	movs	r1, #1
     730:	4b06      	ldr	r3, [pc, #24]	; (74c <sd_mmc_cmd9_spi+0x44>)
     732:	4798      	blx	r3
     734:	2800      	cmp	r0, #0
     736:	d0f5      	beq.n	724 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     738:	4b05      	ldr	r3, [pc, #20]	; (750 <sd_mmc_cmd9_spi+0x48>)
     73a:	4798      	blx	r3
     73c:	e7f2      	b.n	724 <sd_mmc_cmd9_spi+0x1c>
     73e:	46c0      	nop			; (mov r8, r8)
     740:	200000bc 	.word	0x200000bc
     744:	00081109 	.word	0x00081109
     748:	000013bd 	.word	0x000013bd
     74c:	000015e9 	.word	0x000015e9
     750:	00001675 	.word	0x00001675

00000754 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     754:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     756:	4b04      	ldr	r3, [pc, #16]	; (768 <sd_mmc_deselect_slot+0x14>)
     758:	781b      	ldrb	r3, [r3, #0]
     75a:	2b00      	cmp	r3, #0
     75c:	d000      	beq.n	760 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     75e:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     760:	2000      	movs	r0, #0
     762:	4b02      	ldr	r3, [pc, #8]	; (76c <sd_mmc_deselect_slot+0x18>)
     764:	4798      	blx	r3
}
     766:	e7fa      	b.n	75e <sd_mmc_deselect_slot+0xa>
     768:	200000e4 	.word	0x200000e4
     76c:	0000135d 	.word	0x0000135d

00000770 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
     770:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     772:	2204      	movs	r2, #4
     774:	4b03      	ldr	r3, [pc, #12]	; (784 <sd_mmc_init+0x14>)
     776:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     778:	32fb      	adds	r2, #251	; 0xfb
     77a:	4b03      	ldr	r3, [pc, #12]	; (788 <sd_mmc_init+0x18>)
     77c:	701a      	strb	r2, [r3, #0]
	driver_init();
     77e:	4b03      	ldr	r3, [pc, #12]	; (78c <sd_mmc_init+0x1c>)
     780:	4798      	blx	r3
}
     782:	bd10      	pop	{r4, pc}
     784:	200000c0 	.word	0x200000c0
     788:	200000e4 	.word	0x200000e4
     78c:	00001209 	.word	0x00001209

00000790 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     790:	b5f0      	push	{r4, r5, r6, r7, lr}
     792:	46c6      	mov	lr, r8
     794:	b500      	push	{lr}
     796:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     798:	4bcb      	ldr	r3, [pc, #812]	; (ac8 <sd_mmc_check+0x338>)
     79a:	4798      	blx	r3
     79c:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     79e:	2801      	cmp	r0, #1
     7a0:	d006      	beq.n	7b0 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     7a2:	4bca      	ldr	r3, [pc, #808]	; (acc <sd_mmc_check+0x33c>)
     7a4:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     7a6:	0020      	movs	r0, r4
     7a8:	b008      	add	sp, #32
     7aa:	bc04      	pop	{r2}
     7ac:	4690      	mov	r8, r2
     7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     7b0:	4bc7      	ldr	r3, [pc, #796]	; (ad0 <sd_mmc_check+0x340>)
     7b2:	681b      	ldr	r3, [r3, #0]
     7b4:	2201      	movs	r2, #1
     7b6:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     7b8:	2200      	movs	r2, #0
     7ba:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     7bc:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     7be:	4bc5      	ldr	r3, [pc, #788]	; (ad4 <sd_mmc_check+0x344>)
     7c0:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     7c2:	2100      	movs	r1, #0
     7c4:	2088      	movs	r0, #136	; 0x88
     7c6:	0140      	lsls	r0, r0, #5
     7c8:	4bc3      	ldr	r3, [pc, #780]	; (ad8 <sd_mmc_check+0x348>)
     7ca:	4798      	blx	r3
     7cc:	2800      	cmp	r0, #0
     7ce:	d107      	bne.n	7e0 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     7d0:	4bbf      	ldr	r3, [pc, #764]	; (ad0 <sd_mmc_check+0x340>)
     7d2:	681b      	ldr	r3, [r3, #0]
     7d4:	2203      	movs	r2, #3
     7d6:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     7d8:	4bbc      	ldr	r3, [pc, #752]	; (acc <sd_mmc_check+0x33c>)
     7da:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     7dc:	2403      	movs	r4, #3
     7de:	e7e2      	b.n	7a6 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     7e0:	21d5      	movs	r1, #213	; 0xd5
     7e2:	0049      	lsls	r1, r1, #1
     7e4:	48bd      	ldr	r0, [pc, #756]	; (adc <sd_mmc_check+0x34c>)
     7e6:	4bbc      	ldr	r3, [pc, #752]	; (ad8 <sd_mmc_check+0x348>)
     7e8:	4798      	blx	r3
	*v2 = 0;
     7ea:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     7ec:	2800      	cmp	r0, #0
     7ee:	d125      	bne.n	83c <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     7f0:	4bb7      	ldr	r3, [pc, #732]	; (ad0 <sd_mmc_check+0x340>)
     7f2:	681b      	ldr	r3, [r3, #0]
     7f4:	7adb      	ldrb	r3, [r3, #11]
     7f6:	07db      	lsls	r3, r3, #31
     7f8:	d500      	bpl.n	7fc <sd_mmc_check+0x6c>
     7fa:	e1eb      	b.n	bd4 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     7fc:	4bb4      	ldr	r3, [pc, #720]	; (ad0 <sd_mmc_check+0x340>)
     7fe:	681b      	ldr	r3, [r3, #0]
     800:	7ada      	ldrb	r2, [r3, #11]
     802:	2309      	movs	r3, #9
     804:	4013      	ands	r3, r2
     806:	2b01      	cmp	r3, #1
     808:	d10f      	bne.n	82a <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     80a:	2180      	movs	r1, #128	; 0x80
     80c:	0089      	lsls	r1, r1, #2
     80e:	48b4      	ldr	r0, [pc, #720]	; (ae0 <sd_mmc_check+0x350>)
     810:	4bb1      	ldr	r3, [pc, #708]	; (ad8 <sd_mmc_check+0x348>)
     812:	4798      	blx	r3
     814:	2800      	cmp	r0, #0
     816:	d0db      	beq.n	7d0 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     818:	4bad      	ldr	r3, [pc, #692]	; (ad0 <sd_mmc_check+0x340>)
     81a:	681b      	ldr	r3, [r3, #0]
     81c:	7adb      	ldrb	r3, [r3, #11]
     81e:	07db      	lsls	r3, r3, #31
     820:	d503      	bpl.n	82a <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     822:	4bb0      	ldr	r3, [pc, #704]	; (ae4 <sd_mmc_check+0x354>)
     824:	4798      	blx	r3
     826:	2800      	cmp	r0, #0
     828:	d0d2      	beq.n	7d0 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     82a:	4baf      	ldr	r3, [pc, #700]	; (ae8 <sd_mmc_check+0x358>)
     82c:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     82e:	4ba8      	ldr	r3, [pc, #672]	; (ad0 <sd_mmc_check+0x340>)
     830:	681b      	ldr	r3, [r3, #0]
     832:	2200      	movs	r2, #0
     834:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     836:	4ba5      	ldr	r3, [pc, #660]	; (acc <sd_mmc_check+0x33c>)
     838:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     83a:	e7b4      	b.n	7a6 <sd_mmc_check+0x16>
	resp = driver_get_response();
     83c:	4bab      	ldr	r3, [pc, #684]	; (aec <sd_mmc_check+0x35c>)
     83e:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     840:	1c43      	adds	r3, r0, #1
     842:	d100      	bne.n	846 <sd_mmc_check+0xb6>
     844:	e1c4      	b.n	bd0 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     846:	0500      	lsls	r0, r0, #20
     848:	0d00      	lsrs	r0, r0, #20
     84a:	23d5      	movs	r3, #213	; 0xd5
     84c:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     84e:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     850:	4298      	cmp	r0, r3
     852:	d1bd      	bne.n	7d0 <sd_mmc_check+0x40>
     854:	e7cc      	b.n	7f0 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     856:	2100      	movs	r1, #0
     858:	48a5      	ldr	r0, [pc, #660]	; (af0 <sd_mmc_check+0x360>)
     85a:	4b9f      	ldr	r3, [pc, #636]	; (ad8 <sd_mmc_check+0x348>)
     85c:	4798      	blx	r3
     85e:	2800      	cmp	r0, #0
     860:	d119      	bne.n	896 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     862:	4b9b      	ldr	r3, [pc, #620]	; (ad0 <sd_mmc_check+0x340>)
     864:	681b      	ldr	r3, [r3, #0]
     866:	2202      	movs	r2, #2
     868:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     86a:	2100      	movs	r1, #0
     86c:	2088      	movs	r0, #136	; 0x88
     86e:	0140      	lsls	r0, r0, #5
     870:	4b99      	ldr	r3, [pc, #612]	; (ad8 <sd_mmc_check+0x348>)
     872:	4798      	blx	r3
     874:	2800      	cmp	r0, #0
     876:	d0ab      	beq.n	7d0 <sd_mmc_check+0x40>
     878:	4d9e      	ldr	r5, [pc, #632]	; (af4 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     87a:	4f97      	ldr	r7, [pc, #604]	; (ad8 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     87c:	4e9b      	ldr	r6, [pc, #620]	; (aec <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     87e:	2100      	movs	r1, #0
     880:	489d      	ldr	r0, [pc, #628]	; (af8 <sd_mmc_check+0x368>)
     882:	47b8      	blx	r7
     884:	2800      	cmp	r0, #0
     886:	d0a3      	beq.n	7d0 <sd_mmc_check+0x40>
		resp = driver_get_response();
     888:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     88a:	07c3      	lsls	r3, r0, #31
     88c:	d57d      	bpl.n	98a <sd_mmc_check+0x1fa>
     88e:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     890:	2d00      	cmp	r5, #0
     892:	d1f4      	bne.n	87e <sd_mmc_check+0xee>
     894:	e79c      	b.n	7d0 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     896:	4b95      	ldr	r3, [pc, #596]	; (aec <sd_mmc_check+0x35c>)
     898:	4798      	blx	r3
     89a:	0043      	lsls	r3, r0, #1
     89c:	d505      	bpl.n	8aa <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     89e:	4b8c      	ldr	r3, [pc, #560]	; (ad0 <sd_mmc_check+0x340>)
     8a0:	681a      	ldr	r2, [r3, #0]
     8a2:	7ad3      	ldrb	r3, [r2, #11]
     8a4:	2108      	movs	r1, #8
     8a6:	430b      	orrs	r3, r1
     8a8:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     8aa:	2100      	movs	r1, #0
     8ac:	4893      	ldr	r0, [pc, #588]	; (afc <sd_mmc_check+0x36c>)
     8ae:	4b8a      	ldr	r3, [pc, #552]	; (ad8 <sd_mmc_check+0x348>)
     8b0:	4798      	blx	r3
     8b2:	2800      	cmp	r0, #0
     8b4:	d08c      	beq.n	7d0 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     8b6:	4b86      	ldr	r3, [pc, #536]	; (ad0 <sd_mmc_check+0x340>)
     8b8:	681b      	ldr	r3, [r3, #0]
     8ba:	7adb      	ldrb	r3, [r3, #11]
     8bc:	07da      	lsls	r2, r3, #31
     8be:	d400      	bmi.n	8c2 <sd_mmc_check+0x132>
     8c0:	e1a4      	b.n	c0c <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     8c2:	4b8f      	ldr	r3, [pc, #572]	; (b00 <sd_mmc_check+0x370>)
     8c4:	4798      	blx	r3
     8c6:	2800      	cmp	r0, #0
     8c8:	d082      	beq.n	7d0 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     8ca:	4b81      	ldr	r3, [pc, #516]	; (ad0 <sd_mmc_check+0x340>)
     8cc:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     8ce:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     8d0:	2107      	movs	r1, #7
     8d2:	4019      	ands	r1, r3
     8d4:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     8d6:	488b      	ldr	r0, [pc, #556]	; (b04 <sd_mmc_check+0x374>)
     8d8:	5808      	ldr	r0, [r1, r0]
     8da:	21fa      	movs	r1, #250	; 0xfa
     8dc:	0089      	lsls	r1, r1, #2
     8de:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     8e0:	065b      	lsls	r3, r3, #25
     8e2:	0f1b      	lsrs	r3, r3, #28
     8e4:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     8e6:	4888      	ldr	r0, [pc, #544]	; (b08 <sd_mmc_check+0x378>)
     8e8:	581b      	ldr	r3, [r3, r0]
     8ea:	434b      	muls	r3, r1
     8ec:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     8ee:	7b93      	ldrb	r3, [r2, #14]
     8f0:	099b      	lsrs	r3, r3, #6
     8f2:	d000      	beq.n	8f6 <sd_mmc_check+0x166>
     8f4:	e13c      	b.n	b70 <sd_mmc_check+0x3e0>
     8f6:	7d91      	ldrb	r1, [r2, #22]
     8f8:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     8fa:	7d53      	ldrb	r3, [r2, #21]
     8fc:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     8fe:	7d10      	ldrb	r0, [r2, #20]
     900:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     902:	4303      	orrs	r3, r0
     904:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     906:	7e10      	ldrb	r0, [r2, #24]
     908:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     90a:	7dd1      	ldrb	r1, [r2, #23]
     90c:	0049      	lsls	r1, r1, #1
     90e:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     910:	051b      	lsls	r3, r3, #20
     912:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     914:	3301      	adds	r3, #1
     916:	2107      	movs	r1, #7
     918:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     91a:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     91c:	408b      	lsls	r3, r1
     91e:	7cd0      	ldrb	r0, [r2, #19]
     920:	210f      	movs	r1, #15
     922:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     924:	408b      	lsls	r3, r1
				/ 1024;
     926:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     928:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     92a:	8911      	ldrh	r1, [r2, #8]
     92c:	0409      	lsls	r1, r1, #16
     92e:	4877      	ldr	r0, [pc, #476]	; (b0c <sd_mmc_check+0x37c>)
     930:	4b69      	ldr	r3, [pc, #420]	; (ad8 <sd_mmc_check+0x348>)
     932:	4798      	blx	r3
     934:	2800      	cmp	r0, #0
     936:	d100      	bne.n	93a <sd_mmc_check+0x1aa>
     938:	e74a      	b.n	7d0 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     93a:	2301      	movs	r3, #1
     93c:	9300      	str	r3, [sp, #0]
     93e:	2208      	movs	r2, #8
     940:	2100      	movs	r1, #0
     942:	4873      	ldr	r0, [pc, #460]	; (b10 <sd_mmc_check+0x380>)
     944:	4d73      	ldr	r5, [pc, #460]	; (b14 <sd_mmc_check+0x384>)
     946:	47a8      	blx	r5
     948:	2800      	cmp	r0, #0
     94a:	d100      	bne.n	94e <sd_mmc_check+0x1be>
     94c:	e740      	b.n	7d0 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     94e:	2101      	movs	r1, #1
     950:	a806      	add	r0, sp, #24
     952:	4b71      	ldr	r3, [pc, #452]	; (b18 <sd_mmc_check+0x388>)
     954:	4798      	blx	r3
     956:	2800      	cmp	r0, #0
     958:	d100      	bne.n	95c <sd_mmc_check+0x1cc>
     95a:	e739      	b.n	7d0 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     95c:	4b6f      	ldr	r3, [pc, #444]	; (b1c <sd_mmc_check+0x38c>)
     95e:	4798      	blx	r3
     960:	2800      	cmp	r0, #0
     962:	d100      	bne.n	966 <sd_mmc_check+0x1d6>
     964:	e734      	b.n	7d0 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     966:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     968:	781b      	ldrb	r3, [r3, #0]
     96a:	220f      	movs	r2, #15
     96c:	4013      	ands	r3, r2
     96e:	2b01      	cmp	r3, #1
     970:	d100      	bne.n	974 <sd_mmc_check+0x1e4>
     972:	e119      	b.n	ba8 <sd_mmc_check+0x418>
     974:	2b00      	cmp	r3, #0
     976:	d100      	bne.n	97a <sd_mmc_check+0x1ea>
     978:	e109      	b.n	b8e <sd_mmc_check+0x3fe>
     97a:	2b02      	cmp	r3, #2
     97c:	d100      	bne.n	980 <sd_mmc_check+0x1f0>
     97e:	e118      	b.n	bb2 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     980:	4b53      	ldr	r3, [pc, #332]	; (ad0 <sd_mmc_check+0x340>)
     982:	681b      	ldr	r3, [r3, #0]
     984:	2210      	movs	r2, #16
     986:	731a      	strb	r2, [r3, #12]
     988:	e105      	b.n	b96 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     98a:	2100      	movs	r1, #0
     98c:	4858      	ldr	r0, [pc, #352]	; (af0 <sd_mmc_check+0x360>)
     98e:	4b52      	ldr	r3, [pc, #328]	; (ad8 <sd_mmc_check+0x348>)
     990:	4798      	blx	r3
     992:	2800      	cmp	r0, #0
     994:	d100      	bne.n	998 <sd_mmc_check+0x208>
     996:	e71b      	b.n	7d0 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     998:	4b54      	ldr	r3, [pc, #336]	; (aec <sd_mmc_check+0x35c>)
     99a:	4798      	blx	r3
     99c:	23c0      	movs	r3, #192	; 0xc0
     99e:	05db      	lsls	r3, r3, #23
     9a0:	4018      	ands	r0, r3
     9a2:	2380      	movs	r3, #128	; 0x80
     9a4:	05db      	lsls	r3, r3, #23
     9a6:	4298      	cmp	r0, r3
     9a8:	d105      	bne.n	9b6 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     9aa:	4b49      	ldr	r3, [pc, #292]	; (ad0 <sd_mmc_check+0x340>)
     9ac:	681a      	ldr	r2, [r3, #0]
     9ae:	7ad1      	ldrb	r1, [r2, #11]
     9b0:	2308      	movs	r3, #8
     9b2:	430b      	orrs	r3, r1
     9b4:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     9b6:	2100      	movs	r1, #0
     9b8:	4850      	ldr	r0, [pc, #320]	; (afc <sd_mmc_check+0x36c>)
     9ba:	4b47      	ldr	r3, [pc, #284]	; (ad8 <sd_mmc_check+0x348>)
     9bc:	4798      	blx	r3
     9be:	2800      	cmp	r0, #0
     9c0:	d100      	bne.n	9c4 <sd_mmc_check+0x234>
     9c2:	e705      	b.n	7d0 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     9c4:	4b4e      	ldr	r3, [pc, #312]	; (b00 <sd_mmc_check+0x370>)
     9c6:	4798      	blx	r3
     9c8:	2800      	cmp	r0, #0
     9ca:	d100      	bne.n	9ce <sd_mmc_check+0x23e>
     9cc:	e700      	b.n	7d0 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     9ce:	4b40      	ldr	r3, [pc, #256]	; (ad0 <sd_mmc_check+0x340>)
     9d0:	681a      	ldr	r2, [r3, #0]
     9d2:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     9d4:	069b      	lsls	r3, r3, #26
     9d6:	0f1b      	lsrs	r3, r3, #28
     9d8:	2b02      	cmp	r3, #2
     9da:	d100      	bne.n	9de <sd_mmc_check+0x24e>
     9dc:	e0a8      	b.n	b30 <sd_mmc_check+0x3a0>
     9de:	d907      	bls.n	9f0 <sd_mmc_check+0x260>
     9e0:	2b03      	cmp	r3, #3
     9e2:	d100      	bne.n	9e6 <sd_mmc_check+0x256>
     9e4:	e0a7      	b.n	b36 <sd_mmc_check+0x3a6>
     9e6:	2b04      	cmp	r3, #4
     9e8:	d104      	bne.n	9f4 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     9ea:	2340      	movs	r3, #64	; 0x40
     9ec:	7313      	strb	r3, [r2, #12]
     9ee:	e003      	b.n	9f8 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     9f0:	2b01      	cmp	r3, #1
     9f2:	d066      	beq.n	ac2 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     9f4:	2312      	movs	r3, #18
     9f6:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     9f8:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     9fa:	0659      	lsls	r1, r3, #25
     9fc:	0f09      	lsrs	r1, r1, #28
     9fe:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     a00:	2007      	movs	r0, #7
     a02:	4003      	ands	r3, r0
     a04:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     a06:	483f      	ldr	r0, [pc, #252]	; (b04 <sd_mmc_check+0x374>)
     a08:	5818      	ldr	r0, [r3, r0]
     a0a:	23fa      	movs	r3, #250	; 0xfa
     a0c:	009b      	lsls	r3, r3, #2
     a0e:	4343      	muls	r3, r0
     a10:	4843      	ldr	r0, [pc, #268]	; (b20 <sd_mmc_check+0x390>)
     a12:	5809      	ldr	r1, [r1, r0]
     a14:	434b      	muls	r3, r1
     a16:	6013      	str	r3, [r2, #0]
     a18:	7d91      	ldrb	r1, [r2, #22]
     a1a:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     a1c:	7d53      	ldrb	r3, [r2, #21]
     a1e:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     a20:	7d10      	ldrb	r0, [r2, #20]
     a22:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     a24:	4303      	orrs	r3, r0
     a26:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     a28:	051b      	lsls	r3, r3, #20
     a2a:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     a2c:	493d      	ldr	r1, [pc, #244]	; (b24 <sd_mmc_check+0x394>)
     a2e:	428b      	cmp	r3, r1
     a30:	d00f      	beq.n	a52 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     a32:	7e10      	ldrb	r0, [r2, #24]
     a34:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     a36:	7dd1      	ldrb	r1, [r2, #23]
     a38:	0049      	lsls	r1, r1, #1
     a3a:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     a3c:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     a3e:	2007      	movs	r0, #7
     a40:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     a42:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     a44:	408b      	lsls	r3, r1
     a46:	7cd1      	ldrb	r1, [r2, #19]
     a48:	3008      	adds	r0, #8
     a4a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     a4c:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     a4e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     a50:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     a52:	7b13      	ldrb	r3, [r2, #12]
     a54:	2b3f      	cmp	r3, #63	; 0x3f
     a56:	d97b      	bls.n	b50 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     a58:	2100      	movs	r1, #0
     a5a:	9100      	str	r1, [sp, #0]
     a5c:	2301      	movs	r3, #1
     a5e:	2280      	movs	r2, #128	; 0x80
     a60:	0092      	lsls	r2, r2, #2
     a62:	4831      	ldr	r0, [pc, #196]	; (b28 <sd_mmc_check+0x398>)
     a64:	4d2b      	ldr	r5, [pc, #172]	; (b14 <sd_mmc_check+0x384>)
     a66:	47a8      	blx	r5
     a68:	2800      	cmp	r0, #0
     a6a:	d100      	bne.n	a6e <sd_mmc_check+0x2de>
     a6c:	e6b0      	b.n	7d0 <sd_mmc_check+0x40>
     a6e:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     a70:	4e2e      	ldr	r6, [pc, #184]	; (b2c <sd_mmc_check+0x39c>)
     a72:	a805      	add	r0, sp, #20
     a74:	47b0      	blx	r6
     a76:	2800      	cmp	r0, #0
     a78:	d100      	bne.n	a7c <sd_mmc_check+0x2ec>
     a7a:	e6a9      	b.n	7d0 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     a7c:	3501      	adds	r5, #1
     a7e:	b2ad      	uxth	r5, r5
     a80:	2d32      	cmp	r5, #50	; 0x32
     a82:	d1f6      	bne.n	a72 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     a84:	4b12      	ldr	r3, [pc, #72]	; (ad0 <sd_mmc_check+0x340>)
     a86:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     a88:	7d8a      	ldrb	r2, [r1, #22]
     a8a:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     a8c:	7d4b      	ldrb	r3, [r1, #21]
     a8e:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     a90:	7d09      	ldrb	r1, [r1, #20]
     a92:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     a94:	430b      	orrs	r3, r1
     a96:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     a98:	051b      	lsls	r3, r3, #20
     a9a:	0d1b      	lsrs	r3, r3, #20
     a9c:	4a21      	ldr	r2, [pc, #132]	; (b24 <sd_mmc_check+0x394>)
     a9e:	4293      	cmp	r3, r2
     aa0:	d154      	bne.n	b4c <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     aa2:	4e22      	ldr	r6, [pc, #136]	; (b2c <sd_mmc_check+0x39c>)
     aa4:	a806      	add	r0, sp, #24
     aa6:	47b0      	blx	r6
     aa8:	2800      	cmp	r0, #0
     aaa:	d100      	bne.n	aae <sd_mmc_check+0x31e>
     aac:	e690      	b.n	7d0 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     aae:	3501      	adds	r5, #1
     ab0:	b2ad      	uxth	r5, r5
     ab2:	2d35      	cmp	r5, #53	; 0x35
     ab4:	d9f6      	bls.n	aa4 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     ab6:	4b06      	ldr	r3, [pc, #24]	; (ad0 <sd_mmc_check+0x340>)
     ab8:	681a      	ldr	r2, [r3, #0]
     aba:	9b06      	ldr	r3, [sp, #24]
     abc:	085b      	lsrs	r3, r3, #1
     abe:	6053      	str	r3, [r2, #4]
     ac0:	e044      	b.n	b4c <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     ac2:	2314      	movs	r3, #20
     ac4:	7313      	strb	r3, [r2, #12]
     ac6:	e797      	b.n	9f8 <sd_mmc_check+0x268>
     ac8:	00000675 	.word	0x00000675
     acc:	00000755 	.word	0x00000755
     ad0:	200000bc 	.word	0x200000bc
     ad4:	00001385 	.word	0x00001385
     ad8:	0000154d 	.word	0x0000154d
     adc:	00005508 	.word	0x00005508
     ae0:	00001110 	.word	0x00001110
     ae4:	000006d1 	.word	0x000006d1
     ae8:	0000064d 	.word	0x0000064d
     aec:	00001565 	.word	0x00001565
     af0:	0000053a 	.word	0x0000053a
     af4:	00001bef 	.word	0x00001bef
     af8:	00001101 	.word	0x00001101
     afc:	0000113b 	.word	0x0000113b
     b00:	00000709 	.word	0x00000709
     b04:	00005f10 	.word	0x00005f10
     b08:	00005f2c 	.word	0x00005f2c
     b0c:	00001137 	.word	0x00001137
     b10:	00081133 	.word	0x00081133
     b14:	000013bd 	.word	0x000013bd
     b18:	000015e9 	.word	0x000015e9
     b1c:	00001675 	.word	0x00001675
     b20:	00005ed0 	.word	0x00005ed0
     b24:	00000fff 	.word	0x00000fff
     b28:	00081108 	.word	0x00081108
     b2c:	00001571 	.word	0x00001571
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     b30:	2322      	movs	r3, #34	; 0x22
     b32:	7313      	strb	r3, [r2, #12]
     b34:	e760      	b.n	9f8 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     b36:	2330      	movs	r3, #48	; 0x30
     b38:	7313      	strb	r3, [r2, #12]
     b3a:	e75d      	b.n	9f8 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     b3c:	a806      	add	r0, sp, #24
     b3e:	4b36      	ldr	r3, [pc, #216]	; (c18 <sd_mmc_check+0x488>)
     b40:	4798      	blx	r3
     b42:	2800      	cmp	r0, #0
     b44:	d100      	bne.n	b48 <sd_mmc_check+0x3b8>
     b46:	e643      	b.n	7d0 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     b48:	3501      	adds	r5, #1
     b4a:	b2ad      	uxth	r5, r5
     b4c:	2d7f      	cmp	r5, #127	; 0x7f
     b4e:	d9f5      	bls.n	b3c <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     b50:	2180      	movs	r1, #128	; 0x80
     b52:	0089      	lsls	r1, r1, #2
     b54:	4831      	ldr	r0, [pc, #196]	; (c1c <sd_mmc_check+0x48c>)
     b56:	4b32      	ldr	r3, [pc, #200]	; (c20 <sd_mmc_check+0x490>)
     b58:	4798      	blx	r3
     b5a:	2800      	cmp	r0, #0
     b5c:	d100      	bne.n	b60 <sd_mmc_check+0x3d0>
     b5e:	e637      	b.n	7d0 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     b60:	4b30      	ldr	r3, [pc, #192]	; (c24 <sd_mmc_check+0x494>)
     b62:	4798      	blx	r3
     b64:	2800      	cmp	r0, #0
     b66:	d100      	bne.n	b6a <sd_mmc_check+0x3da>
     b68:	e632      	b.n	7d0 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     b6a:	4b2f      	ldr	r3, [pc, #188]	; (c28 <sd_mmc_check+0x498>)
     b6c:	4798      	blx	r3
     b6e:	e65e      	b.n	82e <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b70:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b72:	7d93      	ldrb	r3, [r2, #22]
     b74:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b76:	7d51      	ldrb	r1, [r2, #21]
     b78:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b7a:	430b      	orrs	r3, r1
     b7c:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     b7e:	029b      	lsls	r3, r3, #10
				* 512;
     b80:	085b      	lsrs	r3, r3, #1
     b82:	2180      	movs	r1, #128	; 0x80
     b84:	0089      	lsls	r1, r1, #2
     b86:	468c      	mov	ip, r1
     b88:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     b8a:	6053      	str	r3, [r2, #4]
     b8c:	e6cd      	b.n	92a <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     b8e:	4b27      	ldr	r3, [pc, #156]	; (c2c <sd_mmc_check+0x49c>)
     b90:	681b      	ldr	r3, [r3, #0]
     b92:	2210      	movs	r2, #16
     b94:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     b96:	4b25      	ldr	r3, [pc, #148]	; (c2c <sd_mmc_check+0x49c>)
     b98:	681b      	ldr	r3, [r3, #0]
     b9a:	7adb      	ldrb	r3, [r3, #11]
     b9c:	2209      	movs	r2, #9
     b9e:	4013      	ands	r3, r2
     ba0:	2b01      	cmp	r3, #1
     ba2:	d000      	beq.n	ba6 <sd_mmc_check+0x416>
     ba4:	e638      	b.n	818 <sd_mmc_check+0x88>
     ba6:	e630      	b.n	80a <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     ba8:	4b20      	ldr	r3, [pc, #128]	; (c2c <sd_mmc_check+0x49c>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	221a      	movs	r2, #26
     bae:	731a      	strb	r2, [r3, #12]
     bb0:	e7f1      	b.n	b96 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     bb2:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     bb4:	789b      	ldrb	r3, [r3, #2]
     bb6:	09db      	lsrs	r3, r3, #7
     bb8:	2b01      	cmp	r3, #1
     bba:	d104      	bne.n	bc6 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     bbc:	4b1b      	ldr	r3, [pc, #108]	; (c2c <sd_mmc_check+0x49c>)
     bbe:	681b      	ldr	r3, [r3, #0]
     bc0:	2230      	movs	r2, #48	; 0x30
     bc2:	731a      	strb	r2, [r3, #12]
     bc4:	e7e7      	b.n	b96 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     bc6:	4b19      	ldr	r3, [pc, #100]	; (c2c <sd_mmc_check+0x49c>)
     bc8:	681b      	ldr	r3, [r3, #0]
     bca:	2220      	movs	r2, #32
     bcc:	731a      	strb	r2, [r3, #12]
     bce:	e7e2      	b.n	b96 <sd_mmc_check+0x406>
	*v2 = 0;
     bd0:	2600      	movs	r6, #0
     bd2:	e60d      	b.n	7f0 <sd_mmc_check+0x60>
     bd4:	1e73      	subs	r3, r6, #1
     bd6:	419e      	sbcs	r6, r3
     bd8:	07b3      	lsls	r3, r6, #30
     bda:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     bdc:	4d14      	ldr	r5, [pc, #80]	; (c30 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     bde:	4f10      	ldr	r7, [pc, #64]	; (c20 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     be0:	46b8      	mov	r8, r7
		resp = driver_get_response();
     be2:	4e14      	ldr	r6, [pc, #80]	; (c34 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     be4:	2100      	movs	r1, #0
     be6:	4814      	ldr	r0, [pc, #80]	; (c38 <sd_mmc_check+0x4a8>)
     be8:	47b8      	blx	r7
     bea:	2800      	cmp	r0, #0
     bec:	d100      	bne.n	bf0 <sd_mmc_check+0x460>
     bee:	e638      	b.n	862 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     bf0:	9903      	ldr	r1, [sp, #12]
     bf2:	4812      	ldr	r0, [pc, #72]	; (c3c <sd_mmc_check+0x4ac>)
     bf4:	47c0      	blx	r8
     bf6:	2800      	cmp	r0, #0
     bf8:	d100      	bne.n	bfc <sd_mmc_check+0x46c>
     bfa:	e632      	b.n	862 <sd_mmc_check+0xd2>
		resp = driver_get_response();
     bfc:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     bfe:	07c3      	lsls	r3, r0, #31
     c00:	d400      	bmi.n	c04 <sd_mmc_check+0x474>
     c02:	e628      	b.n	856 <sd_mmc_check+0xc6>
     c04:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     c06:	2d00      	cmp	r5, #0
     c08:	d1ec      	bne.n	be4 <sd_mmc_check+0x454>
     c0a:	e62a      	b.n	862 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     c0c:	2209      	movs	r2, #9
     c0e:	4013      	ands	r3, r2
     c10:	2b01      	cmp	r3, #1
     c12:	d000      	beq.n	c16 <sd_mmc_check+0x486>
     c14:	e609      	b.n	82a <sd_mmc_check+0x9a>
     c16:	e5f8      	b.n	80a <sd_mmc_check+0x7a>
     c18:	00001571 	.word	0x00001571
     c1c:	00001110 	.word	0x00001110
     c20:	0000154d 	.word	0x0000154d
     c24:	000006d1 	.word	0x000006d1
     c28:	0000064d 	.word	0x0000064d
     c2c:	200000bc 	.word	0x200000bc
     c30:	00001bef 	.word	0x00001bef
     c34:	00001565 	.word	0x00001565
     c38:	00001137 	.word	0x00001137
     c3c:	00001129 	.word	0x00001129

00000c40 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     c40:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     c42:	4b06      	ldr	r3, [pc, #24]	; (c5c <sd_mmc_get_type+0x1c>)
     c44:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     c46:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     c48:	2800      	cmp	r0, #0
     c4a:	d001      	beq.n	c50 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     c4c:	0018      	movs	r0, r3
     c4e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     c50:	4b03      	ldr	r3, [pc, #12]	; (c60 <sd_mmc_get_type+0x20>)
     c52:	4798      	blx	r3
	return sd_mmc_card->type;
     c54:	4b03      	ldr	r3, [pc, #12]	; (c64 <sd_mmc_get_type+0x24>)
     c56:	681b      	ldr	r3, [r3, #0]
     c58:	7adb      	ldrb	r3, [r3, #11]
     c5a:	e7f7      	b.n	c4c <sd_mmc_get_type+0xc>
     c5c:	00000675 	.word	0x00000675
     c60:	00000755 	.word	0x00000755
     c64:	200000bc 	.word	0x200000bc

00000c68 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     c68:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     c6a:	4b06      	ldr	r3, [pc, #24]	; (c84 <sd_mmc_get_capacity+0x1c>)
     c6c:	4798      	blx	r3
		return 0;
     c6e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     c70:	2800      	cmp	r0, #0
     c72:	d001      	beq.n	c78 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     c74:	0018      	movs	r0, r3
     c76:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     c78:	4b03      	ldr	r3, [pc, #12]	; (c88 <sd_mmc_get_capacity+0x20>)
     c7a:	4798      	blx	r3
	return sd_mmc_card->capacity;
     c7c:	4b03      	ldr	r3, [pc, #12]	; (c8c <sd_mmc_get_capacity+0x24>)
     c7e:	681b      	ldr	r3, [r3, #0]
     c80:	685b      	ldr	r3, [r3, #4]
     c82:	e7f7      	b.n	c74 <sd_mmc_get_capacity+0xc>
     c84:	00000675 	.word	0x00000675
     c88:	00000755 	.word	0x00000755
     c8c:	200000bc 	.word	0x200000bc

00000c90 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     c90:	2000      	movs	r0, #0
     c92:	4770      	bx	lr

00000c94 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     c94:	b570      	push	{r4, r5, r6, lr}
     c96:	b082      	sub	sp, #8
     c98:	000e      	movs	r6, r1
     c9a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     c9c:	4b16      	ldr	r3, [pc, #88]	; (cf8 <sd_mmc_init_read_blocks+0x64>)
     c9e:	4798      	blx	r3
     ca0:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     ca2:	d002      	beq.n	caa <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     ca4:	0020      	movs	r0, r4
     ca6:	b002      	add	sp, #8
     ca8:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     caa:	4b14      	ldr	r3, [pc, #80]	; (cfc <sd_mmc_init_read_blocks+0x68>)
     cac:	4798      	blx	r3
     cae:	2800      	cmp	r0, #0
     cb0:	d017      	beq.n	ce2 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     cb2:	2d01      	cmp	r5, #1
     cb4:	d919      	bls.n	cea <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     cb6:	4812      	ldr	r0, [pc, #72]	; (d00 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     cb8:	4b12      	ldr	r3, [pc, #72]	; (d04 <sd_mmc_init_read_blocks+0x70>)
     cba:	681b      	ldr	r3, [r3, #0]
     cbc:	7adb      	ldrb	r3, [r3, #11]
     cbe:	071b      	lsls	r3, r3, #28
     cc0:	d400      	bmi.n	cc4 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     cc2:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     cc4:	2301      	movs	r3, #1
     cc6:	9300      	str	r3, [sp, #0]
     cc8:	002b      	movs	r3, r5
     cca:	2280      	movs	r2, #128	; 0x80
     ccc:	0092      	lsls	r2, r2, #2
     cce:	0031      	movs	r1, r6
     cd0:	4e0d      	ldr	r6, [pc, #52]	; (d08 <sd_mmc_init_read_blocks+0x74>)
     cd2:	47b0      	blx	r6
     cd4:	2800      	cmp	r0, #0
     cd6:	d00a      	beq.n	cee <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     cd8:	4b0c      	ldr	r3, [pc, #48]	; (d0c <sd_mmc_init_read_blocks+0x78>)
     cda:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     cdc:	4b0c      	ldr	r3, [pc, #48]	; (d10 <sd_mmc_init_read_blocks+0x7c>)
     cde:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     ce0:	e7e0      	b.n	ca4 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     ce2:	4b0c      	ldr	r3, [pc, #48]	; (d14 <sd_mmc_init_read_blocks+0x80>)
     ce4:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     ce6:	3405      	adds	r4, #5
     ce8:	e7dc      	b.n	ca4 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     cea:	480b      	ldr	r0, [pc, #44]	; (d18 <sd_mmc_init_read_blocks+0x84>)
     cec:	e7e4      	b.n	cb8 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     cee:	4b09      	ldr	r3, [pc, #36]	; (d14 <sd_mmc_init_read_blocks+0x80>)
     cf0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     cf2:	2405      	movs	r4, #5
     cf4:	e7d6      	b.n	ca4 <sd_mmc_init_read_blocks+0x10>
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	00000675 	.word	0x00000675
     cfc:	000006d1 	.word	0x000006d1
     d00:	00101112 	.word	0x00101112
     d04:	200000bc 	.word	0x200000bc
     d08:	000013bd 	.word	0x000013bd
     d0c:	200000e0 	.word	0x200000e0
     d10:	200000e2 	.word	0x200000e2
     d14:	00000755 	.word	0x00000755
     d18:	00081111 	.word	0x00081111

00000d1c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     d1c:	b510      	push	{r4, lr}
     d1e:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     d20:	4b07      	ldr	r3, [pc, #28]	; (d40 <sd_mmc_start_read_blocks+0x24>)
     d22:	4798      	blx	r3
     d24:	2800      	cmp	r0, #0
     d26:	d104      	bne.n	d32 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     d28:	2200      	movs	r2, #0
     d2a:	4b06      	ldr	r3, [pc, #24]	; (d44 <sd_mmc_start_read_blocks+0x28>)
     d2c:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     d2e:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     d30:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     d32:	4a04      	ldr	r2, [pc, #16]	; (d44 <sd_mmc_start_read_blocks+0x28>)
     d34:	8813      	ldrh	r3, [r2, #0]
     d36:	1b1c      	subs	r4, r3, r4
     d38:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     d3a:	2000      	movs	r0, #0
     d3c:	e7f8      	b.n	d30 <sd_mmc_start_read_blocks+0x14>
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	000015e9 	.word	0x000015e9
     d44:	200000e0 	.word	0x200000e0

00000d48 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     d48:	b510      	push	{r4, lr}
     d4a:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     d4c:	4b14      	ldr	r3, [pc, #80]	; (da0 <sd_mmc_wait_end_of_read_blocks+0x58>)
     d4e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     d50:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     d52:	2800      	cmp	r0, #0
     d54:	d101      	bne.n	d5a <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     d56:	0018      	movs	r0, r3
     d58:	bd10      	pop	{r4, pc}
	if (abort) {
     d5a:	2c00      	cmp	r4, #0
     d5c:	d010      	beq.n	d80 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     d5e:	2200      	movs	r2, #0
     d60:	4b10      	ldr	r3, [pc, #64]	; (da4 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     d62:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     d64:	4b10      	ldr	r3, [pc, #64]	; (da8 <sd_mmc_wait_end_of_read_blocks+0x60>)
     d66:	881b      	ldrh	r3, [r3, #0]
     d68:	2b01      	cmp	r3, #1
     d6a:	d00f      	beq.n	d8c <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     d6c:	2100      	movs	r1, #0
     d6e:	480f      	ldr	r0, [pc, #60]	; (dac <sd_mmc_wait_end_of_read_blocks+0x64>)
     d70:	4b0f      	ldr	r3, [pc, #60]	; (db0 <sd_mmc_wait_end_of_read_blocks+0x68>)
     d72:	4798      	blx	r3
     d74:	2800      	cmp	r0, #0
     d76:	d00d      	beq.n	d94 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     d78:	4b0e      	ldr	r3, [pc, #56]	; (db4 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     d7a:	4798      	blx	r3
	return SD_MMC_OK;
     d7c:	2300      	movs	r3, #0
     d7e:	e7ea      	b.n	d56 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     d80:	4b08      	ldr	r3, [pc, #32]	; (da4 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     d82:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     d84:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     d86:	2a00      	cmp	r2, #0
     d88:	d0ec      	beq.n	d64 <sd_mmc_wait_end_of_read_blocks+0x1c>
     d8a:	e7e4      	b.n	d56 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     d8c:	4b09      	ldr	r3, [pc, #36]	; (db4 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     d8e:	4798      	blx	r3
		return SD_MMC_OK;
     d90:	2300      	movs	r3, #0
     d92:	e7e0      	b.n	d56 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     d94:	2100      	movs	r1, #0
     d96:	4805      	ldr	r0, [pc, #20]	; (dac <sd_mmc_wait_end_of_read_blocks+0x64>)
     d98:	4b05      	ldr	r3, [pc, #20]	; (db0 <sd_mmc_wait_end_of_read_blocks+0x68>)
     d9a:	4798      	blx	r3
     d9c:	e7ec      	b.n	d78 <sd_mmc_wait_end_of_read_blocks+0x30>
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	00001675 	.word	0x00001675
     da4:	200000e0 	.word	0x200000e0
     da8:	200000e2 	.word	0x200000e2
     dac:	0000310c 	.word	0x0000310c
     db0:	0000154d 	.word	0x0000154d
     db4:	00000755 	.word	0x00000755

00000db8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     db8:	b570      	push	{r4, r5, r6, lr}
     dba:	b082      	sub	sp, #8
     dbc:	000e      	movs	r6, r1
     dbe:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     dc0:	4b11      	ldr	r3, [pc, #68]	; (e08 <sd_mmc_init_write_blocks+0x50>)
     dc2:	4798      	blx	r3
     dc4:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     dc6:	d116      	bne.n	df6 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     dc8:	2d01      	cmp	r5, #1
     dca:	d917      	bls.n	dfc <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     dcc:	480f      	ldr	r0, [pc, #60]	; (e0c <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     dce:	4b10      	ldr	r3, [pc, #64]	; (e10 <sd_mmc_init_write_blocks+0x58>)
     dd0:	681b      	ldr	r3, [r3, #0]
     dd2:	7adb      	ldrb	r3, [r3, #11]
     dd4:	071b      	lsls	r3, r3, #28
     dd6:	d400      	bmi.n	dda <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     dd8:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     dda:	2301      	movs	r3, #1
     ddc:	9300      	str	r3, [sp, #0]
     dde:	002b      	movs	r3, r5
     de0:	2280      	movs	r2, #128	; 0x80
     de2:	0092      	lsls	r2, r2, #2
     de4:	0031      	movs	r1, r6
     de6:	4e0b      	ldr	r6, [pc, #44]	; (e14 <sd_mmc_init_write_blocks+0x5c>)
     de8:	47b0      	blx	r6
     dea:	2800      	cmp	r0, #0
     dec:	d008      	beq.n	e00 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     dee:	4b0a      	ldr	r3, [pc, #40]	; (e18 <sd_mmc_init_write_blocks+0x60>)
     df0:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     df2:	4b0a      	ldr	r3, [pc, #40]	; (e1c <sd_mmc_init_write_blocks+0x64>)
     df4:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     df6:	0020      	movs	r0, r4
     df8:	b002      	add	sp, #8
     dfa:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     dfc:	4808      	ldr	r0, [pc, #32]	; (e20 <sd_mmc_init_write_blocks+0x68>)
     dfe:	e7e6      	b.n	dce <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     e00:	4b08      	ldr	r3, [pc, #32]	; (e24 <sd_mmc_init_write_blocks+0x6c>)
     e02:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     e04:	2405      	movs	r4, #5
     e06:	e7f6      	b.n	df6 <sd_mmc_init_write_blocks+0x3e>
     e08:	00000675 	.word	0x00000675
     e0c:	00109119 	.word	0x00109119
     e10:	200000bc 	.word	0x200000bc
     e14:	000013bd 	.word	0x000013bd
     e18:	200000e0 	.word	0x200000e0
     e1c:	200000e2 	.word	0x200000e2
     e20:	00089118 	.word	0x00089118
     e24:	00000755 	.word	0x00000755

00000e28 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     e28:	b510      	push	{r4, lr}
     e2a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     e2c:	4b07      	ldr	r3, [pc, #28]	; (e4c <sd_mmc_start_write_blocks+0x24>)
     e2e:	4798      	blx	r3
     e30:	2800      	cmp	r0, #0
     e32:	d104      	bne.n	e3e <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     e34:	2200      	movs	r2, #0
     e36:	4b06      	ldr	r3, [pc, #24]	; (e50 <sd_mmc_start_write_blocks+0x28>)
     e38:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     e3a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     e3c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     e3e:	4a04      	ldr	r2, [pc, #16]	; (e50 <sd_mmc_start_write_blocks+0x28>)
     e40:	8813      	ldrh	r3, [r2, #0]
     e42:	1b1c      	subs	r4, r3, r4
     e44:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     e46:	2000      	movs	r0, #0
     e48:	e7f8      	b.n	e3c <sd_mmc_start_write_blocks+0x14>
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	00001679 	.word	0x00001679
     e50:	200000e0 	.word	0x200000e0

00000e54 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     e54:	b510      	push	{r4, lr}
     e56:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     e58:	4b0e      	ldr	r3, [pc, #56]	; (e94 <sd_mmc_wait_end_of_write_blocks+0x40>)
     e5a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     e5c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     e5e:	2800      	cmp	r0, #0
     e60:	d101      	bne.n	e66 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     e62:	0018      	movs	r0, r3
     e64:	bd10      	pop	{r4, pc}
	if (abort) {
     e66:	2c00      	cmp	r4, #0
     e68:	d00a      	beq.n	e80 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     e6a:	2200      	movs	r2, #0
     e6c:	4b0a      	ldr	r3, [pc, #40]	; (e98 <sd_mmc_wait_end_of_write_blocks+0x44>)
     e6e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     e70:	4b0a      	ldr	r3, [pc, #40]	; (e9c <sd_mmc_wait_end_of_write_blocks+0x48>)
     e72:	881b      	ldrh	r3, [r3, #0]
     e74:	2b01      	cmp	r3, #1
     e76:	d009      	beq.n	e8c <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     e78:	4b09      	ldr	r3, [pc, #36]	; (ea0 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     e7a:	4798      	blx	r3
	return SD_MMC_OK;
     e7c:	2300      	movs	r3, #0
     e7e:	e7f0      	b.n	e62 <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     e80:	4b05      	ldr	r3, [pc, #20]	; (e98 <sd_mmc_wait_end_of_write_blocks+0x44>)
     e82:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     e84:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     e86:	2a00      	cmp	r2, #0
     e88:	d0f2      	beq.n	e70 <sd_mmc_wait_end_of_write_blocks+0x1c>
     e8a:	e7ea      	b.n	e62 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     e8c:	4b04      	ldr	r3, [pc, #16]	; (ea0 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     e8e:	4798      	blx	r3
		return SD_MMC_OK;
     e90:	2300      	movs	r3, #0
     e92:	e7e6      	b.n	e62 <sd_mmc_wait_end_of_write_blocks+0xe>
     e94:	000016f9 	.word	0x000016f9
     e98:	200000e0 	.word	0x200000e0
     e9c:	200000e2 	.word	0x200000e2
     ea0:	00000755 	.word	0x00000755

00000ea4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     ea4:	b510      	push	{r4, lr}
     ea6:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
     ea8:	4b0f      	ldr	r3, [pc, #60]	; (ee8 <sd_mmc_test_unit_ready+0x44>)
     eaa:	4798      	blx	r3
     eac:	2801      	cmp	r0, #1
     eae:	d019      	beq.n	ee4 <sd_mmc_test_unit_ready+0x40>
     eb0:	2800      	cmp	r0, #0
     eb2:	d003      	beq.n	ebc <sd_mmc_test_unit_ready+0x18>
     eb4:	2802      	cmp	r0, #2
     eb6:	d010      	beq.n	eda <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     eb8:	2001      	movs	r0, #1
	}
}
     eba:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
     ebc:	4b0b      	ldr	r3, [pc, #44]	; (eec <sd_mmc_test_unit_ready+0x48>)
     ebe:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
     ec0:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
     ec2:	2b00      	cmp	r3, #0
     ec4:	d1f9      	bne.n	eba <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     ec6:	0020      	movs	r0, r4
     ec8:	4b09      	ldr	r3, [pc, #36]	; (ef0 <sd_mmc_test_unit_ready+0x4c>)
     eca:	4798      	blx	r3
     ecc:	0003      	movs	r3, r0
     ece:	2003      	movs	r0, #3
     ed0:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
     ed2:	4243      	negs	r3, r0
     ed4:	4158      	adcs	r0, r3
     ed6:	0040      	lsls	r0, r0, #1
     ed8:	e7ef      	b.n	eba <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
     eda:	2200      	movs	r2, #0
     edc:	4b03      	ldr	r3, [pc, #12]	; (eec <sd_mmc_test_unit_ready+0x48>)
     ede:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
     ee0:	2002      	movs	r0, #2
     ee2:	e7ea      	b.n	eba <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
     ee4:	2003      	movs	r0, #3
     ee6:	e7e8      	b.n	eba <sd_mmc_test_unit_ready+0x16>
     ee8:	00000791 	.word	0x00000791
     eec:	200000e8 	.word	0x200000e8
     ef0:	00000c41 	.word	0x00000c41

00000ef4 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
     ef4:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
     ef6:	2000      	movs	r0, #0
     ef8:	4b01      	ldr	r3, [pc, #4]	; (f00 <sd_mmc_test_unit_ready_0+0xc>)
     efa:	4798      	blx	r3
}
     efc:	bd10      	pop	{r4, pc}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	00000ea5 	.word	0x00000ea5

00000f04 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     f04:	b570      	push	{r4, r5, r6, lr}
     f06:	0004      	movs	r4, r0
     f08:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     f0a:	4b04      	ldr	r3, [pc, #16]	; (f1c <sd_mmc_read_capacity+0x18>)
     f0c:	4798      	blx	r3
     f0e:	0040      	lsls	r0, r0, #1
     f10:	3801      	subs	r0, #1
     f12:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     f14:	0020      	movs	r0, r4
     f16:	4b02      	ldr	r3, [pc, #8]	; (f20 <sd_mmc_read_capacity+0x1c>)
     f18:	4798      	blx	r3
}
     f1a:	bd70      	pop	{r4, r5, r6, pc}
     f1c:	00000c69 	.word	0x00000c69
     f20:	00000ea5 	.word	0x00000ea5

00000f24 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
     f24:	b510      	push	{r4, lr}
     f26:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
     f28:	2000      	movs	r0, #0
     f2a:	4b01      	ldr	r3, [pc, #4]	; (f30 <sd_mmc_read_capacity_0+0xc>)
     f2c:	4798      	blx	r3
}
     f2e:	bd10      	pop	{r4, pc}
     f30:	00000f05 	.word	0x00000f05

00000f34 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
     f34:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
     f36:	2000      	movs	r0, #0
     f38:	4b01      	ldr	r3, [pc, #4]	; (f40 <sd_mmc_wr_protect_0+0xc>)
     f3a:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
     f3c:	bd10      	pop	{r4, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	00000c91 	.word	0x00000c91

00000f44 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     f44:	b510      	push	{r4, lr}
     f46:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     f48:	2201      	movs	r2, #1
     f4a:	4b0c      	ldr	r3, [pc, #48]	; (f7c <sd_mmc_mem_2_ram+0x38>)
     f4c:	4798      	blx	r3
     f4e:	2800      	cmp	r0, #0
     f50:	d004      	beq.n	f5c <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     f52:	3802      	subs	r0, #2
     f54:	4243      	negs	r3, r0
     f56:	4158      	adcs	r0, r3
     f58:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     f5a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     f5c:	2101      	movs	r1, #1
     f5e:	0020      	movs	r0, r4
     f60:	4b07      	ldr	r3, [pc, #28]	; (f80 <sd_mmc_mem_2_ram+0x3c>)
     f62:	4798      	blx	r3
     f64:	0003      	movs	r3, r0
		return CTRL_FAIL;
     f66:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     f68:	2b00      	cmp	r3, #0
     f6a:	d1f6      	bne.n	f5a <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
     f6c:	2000      	movs	r0, #0
     f6e:	4b05      	ldr	r3, [pc, #20]	; (f84 <sd_mmc_mem_2_ram+0x40>)
     f70:	4798      	blx	r3
     f72:	1e43      	subs	r3, r0, #1
     f74:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     f76:	b2c0      	uxtb	r0, r0
     f78:	e7ef      	b.n	f5a <sd_mmc_mem_2_ram+0x16>
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	00000c95 	.word	0x00000c95
     f80:	00000d1d 	.word	0x00000d1d
     f84:	00000d49 	.word	0x00000d49

00000f88 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
     f88:	b510      	push	{r4, lr}
     f8a:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
     f8c:	0001      	movs	r1, r0
     f8e:	2000      	movs	r0, #0
     f90:	4b01      	ldr	r3, [pc, #4]	; (f98 <sd_mmc_mem_2_ram_0+0x10>)
     f92:	4798      	blx	r3
}
     f94:	bd10      	pop	{r4, pc}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	00000f45 	.word	0x00000f45

00000f9c <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     f9c:	b510      	push	{r4, lr}
     f9e:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     fa0:	2201      	movs	r2, #1
     fa2:	4b0c      	ldr	r3, [pc, #48]	; (fd4 <sd_mmc_ram_2_mem+0x38>)
     fa4:	4798      	blx	r3
     fa6:	2800      	cmp	r0, #0
     fa8:	d004      	beq.n	fb4 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     faa:	3802      	subs	r0, #2
     fac:	4243      	negs	r3, r0
     fae:	4158      	adcs	r0, r3
     fb0:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     fb2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     fb4:	2101      	movs	r1, #1
     fb6:	0020      	movs	r0, r4
     fb8:	4b07      	ldr	r3, [pc, #28]	; (fd8 <sd_mmc_ram_2_mem+0x3c>)
     fba:	4798      	blx	r3
     fbc:	0003      	movs	r3, r0
		return CTRL_FAIL;
     fbe:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     fc0:	2b00      	cmp	r3, #0
     fc2:	d1f6      	bne.n	fb2 <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
     fc4:	2000      	movs	r0, #0
     fc6:	4b05      	ldr	r3, [pc, #20]	; (fdc <sd_mmc_ram_2_mem+0x40>)
     fc8:	4798      	blx	r3
     fca:	1e43      	subs	r3, r0, #1
     fcc:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     fce:	b2c0      	uxtb	r0, r0
     fd0:	e7ef      	b.n	fb2 <sd_mmc_ram_2_mem+0x16>
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	00000db9 	.word	0x00000db9
     fd8:	00000e29 	.word	0x00000e29
     fdc:	00000e55 	.word	0x00000e55

00000fe0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
     fe0:	b510      	push	{r4, lr}
     fe2:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
     fe4:	0001      	movs	r1, r0
     fe6:	2000      	movs	r0, #0
     fe8:	4b01      	ldr	r3, [pc, #4]	; (ff0 <sd_mmc_ram_2_mem_0+0x10>)
     fea:	4798      	blx	r3
}
     fec:	bd10      	pop	{r4, pc}
     fee:	46c0      	nop			; (mov r8, r8)
     ff0:	00000f9d 	.word	0x00000f9d

00000ff4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
     ff4:	b500      	push	{lr}
     ff6:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
     ff8:	466b      	mov	r3, sp
     ffa:	1dd9      	adds	r1, r3, #7
     ffc:	23ff      	movs	r3, #255	; 0xff
     ffe:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    1000:	2201      	movs	r2, #1
    1002:	480b      	ldr	r0, [pc, #44]	; (1030 <sd_mmc_spi_start_write_block+0x3c>)
    1004:	4b0b      	ldr	r3, [pc, #44]	; (1034 <sd_mmc_spi_start_write_block+0x40>)
    1006:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    1008:	4b0b      	ldr	r3, [pc, #44]	; (1038 <sd_mmc_spi_start_write_block+0x44>)
    100a:	881b      	ldrh	r3, [r3, #0]
    100c:	2b01      	cmp	r3, #1
    100e:	d00a      	beq.n	1026 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    1010:	22fc      	movs	r2, #252	; 0xfc
    1012:	466b      	mov	r3, sp
    1014:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    1016:	2201      	movs	r2, #1
    1018:	466b      	mov	r3, sp
    101a:	1d99      	adds	r1, r3, #6
    101c:	4804      	ldr	r0, [pc, #16]	; (1030 <sd_mmc_spi_start_write_block+0x3c>)
    101e:	4b05      	ldr	r3, [pc, #20]	; (1034 <sd_mmc_spi_start_write_block+0x40>)
    1020:	4798      	blx	r3
}
    1022:	b003      	add	sp, #12
    1024:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    1026:	22fe      	movs	r2, #254	; 0xfe
    1028:	466b      	mov	r3, sp
    102a:	719a      	strb	r2, [r3, #6]
    102c:	e7f3      	b.n	1016 <sd_mmc_spi_start_write_block+0x22>
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	200000ec 	.word	0x200000ec
    1034:	00002305 	.word	0x00002305
    1038:	20000130 	.word	0x20000130

0000103c <sd_mmc_spi_wait_busy>:
{
    103c:	b5f0      	push	{r4, r5, r6, r7, lr}
    103e:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    1040:	466b      	mov	r3, sp
    1042:	1ddc      	adds	r4, r3, #7
    1044:	23ff      	movs	r3, #255	; 0xff
    1046:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1048:	4e12      	ldr	r6, [pc, #72]	; (1094 <sd_mmc_spi_wait_busy+0x58>)
    104a:	2201      	movs	r2, #1
    104c:	0021      	movs	r1, r4
    104e:	0030      	movs	r0, r6
    1050:	4d11      	ldr	r5, [pc, #68]	; (1098 <sd_mmc_spi_wait_busy+0x5c>)
    1052:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1054:	23ff      	movs	r3, #255	; 0xff
    1056:	2201      	movs	r2, #1
    1058:	0021      	movs	r1, r4
    105a:	0030      	movs	r0, r6
    105c:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    105e:	23ff      	movs	r3, #255	; 0xff
    1060:	2201      	movs	r2, #1
    1062:	0021      	movs	r1, r4
    1064:	0030      	movs	r0, r6
    1066:	47a8      	blx	r5
    1068:	4c0c      	ldr	r4, [pc, #48]	; (109c <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    106a:	466b      	mov	r3, sp
    106c:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    106e:	4e09      	ldr	r6, [pc, #36]	; (1094 <sd_mmc_spi_wait_busy+0x58>)
    1070:	4f09      	ldr	r7, [pc, #36]	; (1098 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    1072:	782b      	ldrb	r3, [r5, #0]
    1074:	2bff      	cmp	r3, #255	; 0xff
    1076:	d009      	beq.n	108c <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1078:	23ff      	movs	r3, #255	; 0xff
    107a:	2201      	movs	r2, #1
    107c:	0029      	movs	r1, r5
    107e:	0030      	movs	r0, r6
    1080:	47b8      	blx	r7
    1082:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    1084:	2c00      	cmp	r4, #0
    1086:	d1f4      	bne.n	1072 <sd_mmc_spi_wait_busy+0x36>
			return false;
    1088:	2000      	movs	r0, #0
    108a:	e000      	b.n	108e <sd_mmc_spi_wait_busy+0x52>
	return true;
    108c:	2001      	movs	r0, #1
}
    108e:	b003      	add	sp, #12
    1090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	200000ec 	.word	0x200000ec
    1098:	0000213d 	.word	0x0000213d
    109c:	00030d40 	.word	0x00030d40

000010a0 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    10a0:	b570      	push	{r4, r5, r6, lr}
    10a2:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    10a4:	4b14      	ldr	r3, [pc, #80]	; (10f8 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    10a6:	881c      	ldrh	r4, [r3, #0]
    10a8:	2c01      	cmp	r4, #1
    10aa:	d023      	beq.n	10f4 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    10ac:	4b13      	ldr	r3, [pc, #76]	; (10fc <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    10ae:	8819      	ldrh	r1, [r3, #0]
    10b0:	4b13      	ldr	r3, [pc, #76]	; (1100 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    10b2:	6818      	ldr	r0, [r3, #0]
    10b4:	4b13      	ldr	r3, [pc, #76]	; (1104 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    10b6:	4798      	blx	r3
		return true; // It is not the End of multi write
    10b8:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    10ba:	4284      	cmp	r4, r0
    10bc:	d902      	bls.n	10c4 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    10be:	0018      	movs	r0, r3
    10c0:	b002      	add	sp, #8
    10c2:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    10c4:	466b      	mov	r3, sp
    10c6:	1ddc      	adds	r4, r3, #7
    10c8:	23ff      	movs	r3, #255	; 0xff
    10ca:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    10cc:	4e0e      	ldr	r6, [pc, #56]	; (1108 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    10ce:	2201      	movs	r2, #1
    10d0:	0021      	movs	r1, r4
    10d2:	0030      	movs	r0, r6
    10d4:	4d0d      	ldr	r5, [pc, #52]	; (110c <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    10d6:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    10d8:	23fd      	movs	r3, #253	; 0xfd
    10da:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    10dc:	2201      	movs	r2, #1
    10de:	0021      	movs	r1, r4
    10e0:	0030      	movs	r0, r6
    10e2:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    10e4:	4b0a      	ldr	r3, [pc, #40]	; (1110 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    10e6:	4798      	blx	r3
    10e8:	1e03      	subs	r3, r0, #0
    10ea:	d1e8      	bne.n	10be <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    10ec:	2105      	movs	r1, #5
    10ee:	4a09      	ldr	r2, [pc, #36]	; (1114 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    10f0:	7011      	strb	r1, [r2, #0]
		return false;
    10f2:	e7e4      	b.n	10be <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    10f4:	2301      	movs	r3, #1
    10f6:	e7e2      	b.n	10be <sd_mmc_spi_stop_multiwrite_block+0x1e>
    10f8:	20000130 	.word	0x20000130
    10fc:	20000128 	.word	0x20000128
    1100:	20000138 	.word	0x20000138
    1104:	0000536d 	.word	0x0000536d
    1108:	200000ec 	.word	0x200000ec
    110c:	00002305 	.word	0x00002305
    1110:	0000103d 	.word	0x0000103d
    1114:	2000012f 	.word	0x2000012f

00001118 <sd_mmc_spi_start_read_block>:
{
    1118:	b5f0      	push	{r4, r5, r6, r7, lr}
    111a:	b083      	sub	sp, #12
	token = 0;
    111c:	2200      	movs	r2, #0
    111e:	466b      	mov	r3, sp
    1120:	71da      	strb	r2, [r3, #7]
    1122:	4c14      	ldr	r4, [pc, #80]	; (1174 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    1124:	466b      	mov	r3, sp
    1126:	1ddd      	adds	r5, r3, #7
    1128:	4e13      	ldr	r6, [pc, #76]	; (1178 <sd_mmc_spi_start_read_block+0x60>)
    112a:	4f14      	ldr	r7, [pc, #80]	; (117c <sd_mmc_spi_start_read_block+0x64>)
    112c:	23ff      	movs	r3, #255	; 0xff
    112e:	2201      	movs	r2, #1
    1130:	0029      	movs	r1, r5
    1132:	0030      	movs	r0, r6
    1134:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    1136:	782b      	ldrb	r3, [r5, #0]
    1138:	220f      	movs	r2, #15
    113a:	0019      	movs	r1, r3
    113c:	4391      	bics	r1, r2
    113e:	1e0a      	subs	r2, r1, #0
    1140:	d009      	beq.n	1156 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    1142:	2bfe      	cmp	r3, #254	; 0xfe
    1144:	d013      	beq.n	116e <sd_mmc_spi_start_read_block+0x56>
    1146:	3c01      	subs	r4, #1
		if (i-- == 0) {
    1148:	2c00      	cmp	r4, #0
    114a:	d1ef      	bne.n	112c <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    114c:	2204      	movs	r2, #4
    114e:	4b0c      	ldr	r3, [pc, #48]	; (1180 <sd_mmc_spi_start_read_block+0x68>)
    1150:	701a      	strb	r2, [r3, #0]
			return false;
    1152:	2000      	movs	r0, #0
    1154:	e00c      	b.n	1170 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    1156:	075b      	lsls	r3, r3, #29
    1158:	d004      	beq.n	1164 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    115a:	3207      	adds	r2, #7
    115c:	4b08      	ldr	r3, [pc, #32]	; (1180 <sd_mmc_spi_start_read_block+0x68>)
    115e:	701a      	strb	r2, [r3, #0]
			return false;
    1160:	2000      	movs	r0, #0
    1162:	e005      	b.n	1170 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    1164:	220b      	movs	r2, #11
    1166:	4b06      	ldr	r3, [pc, #24]	; (1180 <sd_mmc_spi_start_read_block+0x68>)
    1168:	701a      	strb	r2, [r3, #0]
			return false;
    116a:	2000      	movs	r0, #0
    116c:	e000      	b.n	1170 <sd_mmc_spi_start_read_block+0x58>
	return true;
    116e:	2001      	movs	r0, #1
}
    1170:	b003      	add	sp, #12
    1172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1174:	0007a120 	.word	0x0007a120
    1178:	200000ec 	.word	0x200000ec
    117c:	0000213d 	.word	0x0000213d
    1180:	2000012f 	.word	0x2000012f

00001184 <sd_mmc_spi_stop_write_block>:
{
    1184:	b530      	push	{r4, r5, lr}
    1186:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    1188:	a901      	add	r1, sp, #4
    118a:	2301      	movs	r3, #1
    118c:	425b      	negs	r3, r3
    118e:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    1190:	4d14      	ldr	r5, [pc, #80]	; (11e4 <sd_mmc_spi_stop_write_block+0x60>)
    1192:	2202      	movs	r2, #2
    1194:	0028      	movs	r0, r5
    1196:	4b14      	ldr	r3, [pc, #80]	; (11e8 <sd_mmc_spi_stop_write_block+0x64>)
    1198:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    119a:	466b      	mov	r3, sp
    119c:	1ddc      	adds	r4, r3, #7
    119e:	23ff      	movs	r3, #255	; 0xff
    11a0:	2201      	movs	r2, #1
    11a2:	0021      	movs	r1, r4
    11a4:	0028      	movs	r0, r5
    11a6:	4d11      	ldr	r5, [pc, #68]	; (11ec <sd_mmc_spi_stop_write_block+0x68>)
    11a8:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    11aa:	7822      	ldrb	r2, [r4, #0]
    11ac:	2311      	movs	r3, #17
    11ae:	4013      	ands	r3, r2
    11b0:	2b01      	cmp	r3, #1
    11b2:	d005      	beq.n	11c0 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    11b4:	2201      	movs	r2, #1
    11b6:	4b0e      	ldr	r3, [pc, #56]	; (11f0 <sd_mmc_spi_stop_write_block+0x6c>)
    11b8:	701a      	strb	r2, [r3, #0]
		return false;
    11ba:	2000      	movs	r0, #0
}
    11bc:	b003      	add	sp, #12
    11be:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    11c0:	231e      	movs	r3, #30
    11c2:	401a      	ands	r2, r3
    11c4:	2a04      	cmp	r2, #4
    11c6:	d00b      	beq.n	11e0 <sd_mmc_spi_stop_write_block+0x5c>
    11c8:	2a0a      	cmp	r2, #10
    11ca:	d104      	bne.n	11d6 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    11cc:	3a02      	subs	r2, #2
    11ce:	4b08      	ldr	r3, [pc, #32]	; (11f0 <sd_mmc_spi_stop_write_block+0x6c>)
    11d0:	701a      	strb	r2, [r3, #0]
		return false;
    11d2:	2000      	movs	r0, #0
    11d4:	e7f2      	b.n	11bc <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    11d6:	220a      	movs	r2, #10
    11d8:	4b05      	ldr	r3, [pc, #20]	; (11f0 <sd_mmc_spi_stop_write_block+0x6c>)
    11da:	701a      	strb	r2, [r3, #0]
		return false;
    11dc:	2000      	movs	r0, #0
    11de:	e7ed      	b.n	11bc <sd_mmc_spi_stop_write_block+0x38>
	return true;
    11e0:	2001      	movs	r0, #1
    11e2:	e7eb      	b.n	11bc <sd_mmc_spi_stop_write_block+0x38>
    11e4:	200000ec 	.word	0x200000ec
    11e8:	00002305 	.word	0x00002305
    11ec:	0000213d 	.word	0x0000213d
    11f0:	2000012f 	.word	0x2000012f

000011f4 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    11f4:	b510      	push	{r4, lr}
	spi_reset(&sd_mmc_master);
    11f6:	4802      	ldr	r0, [pc, #8]	; (1200 <sd_mmc_deinit+0xc>)
    11f8:	4b02      	ldr	r3, [pc, #8]	; (1204 <sd_mmc_deinit+0x10>)
    11fa:	4798      	blx	r3
}
    11fc:	bd10      	pop	{r4, pc}
    11fe:	46c0      	nop			; (mov r8, r8)
    1200:	200000ec 	.word	0x200000ec
    1204:	00001e61 	.word	0x00001e61

00001208 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    1208:	b570      	push	{r4, r5, r6, lr}
    120a:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    120c:	2300      	movs	r3, #0
    120e:	4a2d      	ldr	r2, [pc, #180]	; (12c4 <sd_mmc_spi_init+0xbc>)
    1210:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1212:	ac02      	add	r4, sp, #8
    1214:	2501      	movs	r5, #1
    1216:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1218:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    121a:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    121c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    121e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1220:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1222:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1224:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1226:	2224      	movs	r2, #36	; 0x24
    1228:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    122a:	3a18      	subs	r2, #24
    122c:	2100      	movs	r1, #0
    122e:	a808      	add	r0, sp, #32
    1230:	4b25      	ldr	r3, [pc, #148]	; (12c8 <sd_mmc_spi_init+0xc0>)
    1232:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    1234:	2380      	movs	r3, #128	; 0x80
    1236:	025b      	lsls	r3, r3, #9
    1238:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    123a:	4b24      	ldr	r3, [pc, #144]	; (12cc <sd_mmc_spi_init+0xc4>)
    123c:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    123e:	4b24      	ldr	r3, [pc, #144]	; (12d0 <sd_mmc_spi_init+0xc8>)
    1240:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    1242:	4b24      	ldr	r3, [pc, #144]	; (12d4 <sd_mmc_spi_init+0xcc>)
    1244:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    1246:	4b24      	ldr	r3, [pc, #144]	; (12d8 <sd_mmc_spi_init+0xd0>)
    1248:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    124a:	4b24      	ldr	r3, [pc, #144]	; (12dc <sd_mmc_spi_init+0xd4>)
    124c:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    124e:	4e24      	ldr	r6, [pc, #144]	; (12e0 <sd_mmc_spi_init+0xd8>)
    1250:	0022      	movs	r2, r4
    1252:	4924      	ldr	r1, [pc, #144]	; (12e4 <sd_mmc_spi_init+0xdc>)
    1254:	0030      	movs	r0, r6
    1256:	4b24      	ldr	r3, [pc, #144]	; (12e8 <sd_mmc_spi_init+0xe0>)
    1258:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    125a:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    125c:	0020      	movs	r0, r4
    125e:	4b23      	ldr	r3, [pc, #140]	; (12ec <sd_mmc_spi_init+0xe4>)
    1260:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1262:	231f      	movs	r3, #31
    1264:	4018      	ands	r0, r3
    1266:	4085      	lsls	r5, r0
    1268:	4b21      	ldr	r3, [pc, #132]	; (12f0 <sd_mmc_spi_init+0xe8>)
    126a:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    126c:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    126e:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1270:	2b00      	cmp	r3, #0
    1272:	d1fc      	bne.n	126e <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1274:	6823      	ldr	r3, [r4, #0]
    1276:	2202      	movs	r2, #2
    1278:	4313      	orrs	r3, r2
    127a:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    127c:	4a1d      	ldr	r2, [pc, #116]	; (12f4 <sd_mmc_spi_init+0xec>)
    127e:	2300      	movs	r3, #0
    1280:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    1282:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    1284:	491c      	ldr	r1, [pc, #112]	; (12f8 <sd_mmc_spi_init+0xf0>)
    1286:	7808      	ldrb	r0, [r1, #0]
    1288:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    128a:	4c1c      	ldr	r4, [pc, #112]	; (12fc <sd_mmc_spi_init+0xf4>)
    128c:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    128e:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1290:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1292:	a901      	add	r1, sp, #4
    1294:	2201      	movs	r2, #1
    1296:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1298:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    129a:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    129c:	4b18      	ldr	r3, [pc, #96]	; (1300 <sd_mmc_spi_init+0xf8>)
    129e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    12a0:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12a2:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    12a4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12a6:	2900      	cmp	r1, #0
    12a8:	d104      	bne.n	12b4 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    12aa:	0953      	lsrs	r3, r2, #5
    12ac:	01db      	lsls	r3, r3, #7
    12ae:	4915      	ldr	r1, [pc, #84]	; (1304 <sd_mmc_spi_init+0xfc>)
    12b0:	468c      	mov	ip, r1
    12b2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    12b4:	211f      	movs	r1, #31
    12b6:	4011      	ands	r1, r2
    12b8:	2201      	movs	r2, #1
    12ba:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    12bc:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    12be:	b010      	add	sp, #64	; 0x40
    12c0:	bd70      	pop	{r4, r5, r6, pc}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	2000012f 	.word	0x2000012f
    12c8:	00005709 	.word	0x00005709
    12cc:	00100002 	.word	0x00100002
    12d0:	00110002 	.word	0x00110002
    12d4:	00120002 	.word	0x00120002
    12d8:	00130002 	.word	0x00130002
    12dc:	00061a80 	.word	0x00061a80
    12e0:	200000ec 	.word	0x200000ec
    12e4:	42000c00 	.word	0x42000c00
    12e8:	00001f65 	.word	0x00001f65
    12ec:	00001dd1 	.word	0x00001dd1
    12f0:	e000e100 	.word	0xe000e100
    12f4:	2000013c 	.word	0x2000013c
    12f8:	20000008 	.word	0x20000008
    12fc:	2000012c 	.word	0x2000012c
    1300:	00001821 	.word	0x00001821
    1304:	41004400 	.word	0x41004400

00001308 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    1308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    130a:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    130c:	2200      	movs	r2, #0
    130e:	4b0d      	ldr	r3, [pc, #52]	; (1344 <sd_mmc_spi_select_device+0x3c>)
    1310:	701a      	strb	r2, [r3, #0]
    1312:	000c      	movs	r4, r1
    1314:	4b0c      	ldr	r3, [pc, #48]	; (1348 <sd_mmc_spi_select_device+0x40>)
    1316:	4299      	cmp	r1, r3
    1318:	d900      	bls.n	131c <sd_mmc_spi_select_device+0x14>
    131a:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    131c:	4d0b      	ldr	r5, [pc, #44]	; (134c <sd_mmc_spi_select_device+0x44>)
    131e:	4e0c      	ldr	r6, [pc, #48]	; (1350 <sd_mmc_spi_select_device+0x48>)
    1320:	e001      	b.n	1326 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    1322:	08e3      	lsrs	r3, r4, #3
    1324:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    1326:	0021      	movs	r1, r4
    1328:	0028      	movs	r0, r5
    132a:	47b0      	blx	r6
    132c:	2817      	cmp	r0, #23
    132e:	d0f8      	beq.n	1322 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    1330:	0079      	lsls	r1, r7, #1
    1332:	19cf      	adds	r7, r1, r7
    1334:	4907      	ldr	r1, [pc, #28]	; (1354 <sd_mmc_spi_select_device+0x4c>)
    1336:	19c9      	adds	r1, r1, r7
    1338:	2201      	movs	r2, #1
    133a:	4804      	ldr	r0, [pc, #16]	; (134c <sd_mmc_spi_select_device+0x44>)
    133c:	4b06      	ldr	r3, [pc, #24]	; (1358 <sd_mmc_spi_select_device+0x50>)
    133e:	4798      	blx	r3
}
    1340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	2000012f 	.word	0x2000012f
    1348:	00989680 	.word	0x00989680
    134c:	200000ec 	.word	0x200000ec
    1350:	00001ead 	.word	0x00001ead
    1354:	2000012c 	.word	0x2000012c
    1358:	00002211 	.word	0x00002211

0000135c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    135c:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    135e:	2200      	movs	r2, #0
    1360:	4b04      	ldr	r3, [pc, #16]	; (1374 <sd_mmc_spi_deselect_device+0x18>)
    1362:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    1364:	0041      	lsls	r1, r0, #1
    1366:	1808      	adds	r0, r1, r0
    1368:	4903      	ldr	r1, [pc, #12]	; (1378 <sd_mmc_spi_deselect_device+0x1c>)
    136a:	1809      	adds	r1, r1, r0
    136c:	4803      	ldr	r0, [pc, #12]	; (137c <sd_mmc_spi_deselect_device+0x20>)
    136e:	4b04      	ldr	r3, [pc, #16]	; (1380 <sd_mmc_spi_deselect_device+0x24>)
    1370:	4798      	blx	r3
}
    1372:	bd10      	pop	{r4, pc}
    1374:	2000012f 	.word	0x2000012f
    1378:	2000012c 	.word	0x2000012c
    137c:	200000ec 	.word	0x200000ec
    1380:	00002211 	.word	0x00002211

00001384 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    1384:	b570      	push	{r4, r5, r6, lr}
    1386:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    1388:	22ff      	movs	r2, #255	; 0xff
    138a:	466b      	mov	r3, sp
    138c:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    138e:	2200      	movs	r2, #0
    1390:	4b07      	ldr	r3, [pc, #28]	; (13b0 <sd_mmc_spi_send_clock+0x2c>)
    1392:	701a      	strb	r2, [r3, #0]
    1394:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    1396:	4e07      	ldr	r6, [pc, #28]	; (13b4 <sd_mmc_spi_send_clock+0x30>)
    1398:	4d07      	ldr	r5, [pc, #28]	; (13b8 <sd_mmc_spi_send_clock+0x34>)
    139a:	2201      	movs	r2, #1
    139c:	466b      	mov	r3, sp
    139e:	1dd9      	adds	r1, r3, #7
    13a0:	0030      	movs	r0, r6
    13a2:	47a8      	blx	r5
    13a4:	3c01      	subs	r4, #1
    13a6:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    13a8:	2c00      	cmp	r4, #0
    13aa:	d1f6      	bne.n	139a <sd_mmc_spi_send_clock+0x16>
	}
}
    13ac:	b002      	add	sp, #8
    13ae:	bd70      	pop	{r4, r5, r6, pc}
    13b0:	2000012f 	.word	0x2000012f
    13b4:	200000ec 	.word	0x200000ec
    13b8:	00002305 	.word	0x00002305

000013bc <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    13bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    13be:	46c6      	mov	lr, r8
    13c0:	b500      	push	{lr}
    13c2:	b086      	sub	sp, #24
    13c4:	4680      	mov	r8, r0
    13c6:	9200      	str	r2, [sp, #0]
    13c8:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    13ca:	22ff      	movs	r2, #255	; 0xff
    13cc:	230f      	movs	r3, #15
    13ce:	a802      	add	r0, sp, #8
    13d0:	4684      	mov	ip, r0
    13d2:	4463      	add	r3, ip
    13d4:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    13d6:	2200      	movs	r2, #0
    13d8:	4b53      	ldr	r3, [pc, #332]	; (1528 <sd_mmc_spi_adtc_start+0x16c>)
    13da:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    13dc:	ab04      	add	r3, sp, #16
    13de:	323f      	adds	r2, #63	; 0x3f
    13e0:	4640      	mov	r0, r8
    13e2:	4002      	ands	r2, r0
    13e4:	2040      	movs	r0, #64	; 0x40
    13e6:	4302      	orrs	r2, r0
    13e8:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    13ea:	0e0a      	lsrs	r2, r1, #24
    13ec:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    13ee:	0c0a      	lsrs	r2, r1, #16
    13f0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    13f2:	0a0a      	lsrs	r2, r1, #8
    13f4:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    13f6:	7119      	strb	r1, [r3, #4]
    13f8:	2700      	movs	r7, #0
	crc = 0;
    13fa:	2300      	movs	r3, #0
		value = *buf++;
    13fc:	a904      	add	r1, sp, #16
    13fe:	2208      	movs	r2, #8
				crc ^= 0x09;
    1400:	2409      	movs	r4, #9
    1402:	e011      	b.n	1428 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    1404:	0076      	lsls	r6, r6, #1
    1406:	b2f6      	uxtb	r6, r6
    1408:	3801      	subs	r0, #1
    140a:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    140c:	2800      	cmp	r0, #0
    140e:	d008      	beq.n	1422 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    1410:	005b      	lsls	r3, r3, #1
    1412:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    1414:	001d      	movs	r5, r3
    1416:	4075      	eors	r5, r6
    1418:	062d      	lsls	r5, r5, #24
    141a:	d5f3      	bpl.n	1404 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    141c:	4063      	eors	r3, r4
    141e:	b2db      	uxtb	r3, r3
    1420:	e7f0      	b.n	1404 <sd_mmc_spi_adtc_start+0x48>
    1422:	3701      	adds	r7, #1
	while (size--) {
    1424:	2f05      	cmp	r7, #5
    1426:	d002      	beq.n	142e <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    1428:	5c7e      	ldrb	r6, [r7, r1]
    142a:	0010      	movs	r0, r2
    142c:	e7f0      	b.n	1410 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    142e:	005b      	lsls	r3, r3, #1
    1430:	2201      	movs	r2, #1
    1432:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    1434:	ac04      	add	r4, sp, #16
    1436:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    1438:	4e3c      	ldr	r6, [pc, #240]	; (152c <sd_mmc_spi_adtc_start+0x170>)
    143a:	2201      	movs	r2, #1
    143c:	210f      	movs	r1, #15
    143e:	ab02      	add	r3, sp, #8
    1440:	469c      	mov	ip, r3
    1442:	4461      	add	r1, ip
    1444:	0030      	movs	r0, r6
    1446:	4f3a      	ldr	r7, [pc, #232]	; (1530 <sd_mmc_spi_adtc_start+0x174>)
    1448:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    144a:	2206      	movs	r2, #6
    144c:	0021      	movs	r1, r4
    144e:	0030      	movs	r0, r6
    1450:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    1452:	ab02      	add	r3, sp, #8
    1454:	1dd9      	adds	r1, r3, #7
    1456:	23ff      	movs	r3, #255	; 0xff
    1458:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    145a:	2201      	movs	r2, #1
    145c:	0030      	movs	r0, r6
    145e:	4e35      	ldr	r6, [pc, #212]	; (1534 <sd_mmc_spi_adtc_start+0x178>)
    1460:	47b0      	blx	r6
    1462:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    1464:	ab02      	add	r3, sp, #8
    1466:	1dde      	adds	r6, r3, #7
    1468:	4f30      	ldr	r7, [pc, #192]	; (152c <sd_mmc_spi_adtc_start+0x170>)
    146a:	4d32      	ldr	r5, [pc, #200]	; (1534 <sd_mmc_spi_adtc_start+0x178>)
    146c:	23ff      	movs	r3, #255	; 0xff
    146e:	2201      	movs	r2, #1
    1470:	0031      	movs	r1, r6
    1472:	0038      	movs	r0, r7
    1474:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    1476:	7833      	ldrb	r3, [r6, #0]
    1478:	b25a      	sxtb	r2, r3
    147a:	2a00      	cmp	r2, #0
    147c:	da0b      	bge.n	1496 <sd_mmc_spi_adtc_start+0xda>
    147e:	3c01      	subs	r4, #1
    1480:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    1482:	2c00      	cmp	r4, #0
    1484:	d1f2      	bne.n	146c <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    1486:	2202      	movs	r2, #2
    1488:	4b27      	ldr	r3, [pc, #156]	; (1528 <sd_mmc_spi_adtc_start+0x16c>)
    148a:	701a      	strb	r2, [r3, #0]
			return false;
    148c:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    148e:	b006      	add	sp, #24
    1490:	bc04      	pop	{r2}
    1492:	4690      	mov	r8, r2
    1494:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    1496:	4a28      	ldr	r2, [pc, #160]	; (1538 <sd_mmc_spi_adtc_start+0x17c>)
    1498:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    149a:	071a      	lsls	r2, r3, #28
    149c:	d41a      	bmi.n	14d4 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    149e:	075a      	lsls	r2, r3, #29
    14a0:	d41d      	bmi.n	14de <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    14a2:	2201      	movs	r2, #1
    14a4:	4393      	bics	r3, r2
    14a6:	d11f      	bne.n	14e8 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    14a8:	4643      	mov	r3, r8
    14aa:	049b      	lsls	r3, r3, #18
    14ac:	d420      	bmi.n	14f0 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    14ae:	4643      	mov	r3, r8
    14b0:	059b      	lsls	r3, r3, #22
    14b2:	d425      	bmi.n	1500 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    14b4:	4643      	mov	r3, r8
    14b6:	055b      	lsls	r3, r3, #21
    14b8:	d42b      	bmi.n	1512 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    14ba:	4b20      	ldr	r3, [pc, #128]	; (153c <sd_mmc_spi_adtc_start+0x180>)
    14bc:	466a      	mov	r2, sp
    14be:	8812      	ldrh	r2, [r2, #0]
    14c0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    14c2:	4b1f      	ldr	r3, [pc, #124]	; (1540 <sd_mmc_spi_adtc_start+0x184>)
    14c4:	466a      	mov	r2, sp
    14c6:	8892      	ldrh	r2, [r2, #4]
    14c8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    14ca:	2200      	movs	r2, #0
    14cc:	4b1d      	ldr	r3, [pc, #116]	; (1544 <sd_mmc_spi_adtc_start+0x188>)
    14ce:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    14d0:	2001      	movs	r0, #1
    14d2:	e7dc      	b.n	148e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    14d4:	2206      	movs	r2, #6
    14d6:	4b14      	ldr	r3, [pc, #80]	; (1528 <sd_mmc_spi_adtc_start+0x16c>)
    14d8:	701a      	strb	r2, [r3, #0]
		return false;
    14da:	2000      	movs	r0, #0
    14dc:	e7d7      	b.n	148e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    14de:	2209      	movs	r2, #9
    14e0:	4b11      	ldr	r3, [pc, #68]	; (1528 <sd_mmc_spi_adtc_start+0x16c>)
    14e2:	701a      	strb	r2, [r3, #0]
		return false;
    14e4:	2000      	movs	r0, #0
    14e6:	e7d2      	b.n	148e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    14e8:	4b0f      	ldr	r3, [pc, #60]	; (1528 <sd_mmc_spi_adtc_start+0x16c>)
    14ea:	701a      	strb	r2, [r3, #0]
		return false;
    14ec:	2000      	movs	r0, #0
    14ee:	e7ce      	b.n	148e <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    14f0:	4b15      	ldr	r3, [pc, #84]	; (1548 <sd_mmc_spi_adtc_start+0x18c>)
    14f2:	4798      	blx	r3
    14f4:	2800      	cmp	r0, #0
    14f6:	d1da      	bne.n	14ae <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    14f8:	2203      	movs	r2, #3
    14fa:	4b0b      	ldr	r3, [pc, #44]	; (1528 <sd_mmc_spi_adtc_start+0x16c>)
    14fc:	701a      	strb	r2, [r3, #0]
			return false;
    14fe:	e7c6      	b.n	148e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    1500:	490d      	ldr	r1, [pc, #52]	; (1538 <sd_mmc_spi_adtc_start+0x17c>)
    1502:	2300      	movs	r3, #0
    1504:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    1506:	33ff      	adds	r3, #255	; 0xff
    1508:	2201      	movs	r2, #1
    150a:	4808      	ldr	r0, [pc, #32]	; (152c <sd_mmc_spi_adtc_start+0x170>)
    150c:	4e09      	ldr	r6, [pc, #36]	; (1534 <sd_mmc_spi_adtc_start+0x178>)
    150e:	47b0      	blx	r6
    1510:	e7d0      	b.n	14b4 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    1512:	4e09      	ldr	r6, [pc, #36]	; (1538 <sd_mmc_spi_adtc_start+0x17c>)
    1514:	23ff      	movs	r3, #255	; 0xff
    1516:	2204      	movs	r2, #4
    1518:	0031      	movs	r1, r6
    151a:	4804      	ldr	r0, [pc, #16]	; (152c <sd_mmc_spi_adtc_start+0x170>)
    151c:	4f05      	ldr	r7, [pc, #20]	; (1534 <sd_mmc_spi_adtc_start+0x178>)
    151e:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    1520:	6833      	ldr	r3, [r6, #0]
    1522:	ba1b      	rev	r3, r3
    1524:	6033      	str	r3, [r6, #0]
    1526:	e7c8      	b.n	14ba <sd_mmc_spi_adtc_start+0xfe>
    1528:	2000012f 	.word	0x2000012f
    152c:	200000ec 	.word	0x200000ec
    1530:	00002305 	.word	0x00002305
    1534:	0000213d 	.word	0x0000213d
    1538:	20000134 	.word	0x20000134
    153c:	20000128 	.word	0x20000128
    1540:	20000130 	.word	0x20000130
    1544:	20000138 	.word	0x20000138
    1548:	0000103d 	.word	0x0000103d

0000154c <sd_mmc_spi_send_cmd>:
{
    154c:	b510      	push	{r4, lr}
    154e:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    1550:	2300      	movs	r3, #0
    1552:	9300      	str	r3, [sp, #0]
    1554:	2200      	movs	r2, #0
    1556:	4c02      	ldr	r4, [pc, #8]	; (1560 <sd_mmc_spi_send_cmd+0x14>)
    1558:	47a0      	blx	r4
}
    155a:	b002      	add	sp, #8
    155c:	bd10      	pop	{r4, pc}
    155e:	46c0      	nop			; (mov r8, r8)
    1560:	000013bd 	.word	0x000013bd

00001564 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    1564:	4b01      	ldr	r3, [pc, #4]	; (156c <sd_mmc_spi_get_response+0x8>)
    1566:	6818      	ldr	r0, [r3, #0]
}
    1568:	4770      	bx	lr
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	20000134 	.word	0x20000134

00001570 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    1570:	b510      	push	{r4, lr}
    1572:	b084      	sub	sp, #16
    1574:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1576:	2200      	movs	r2, #0
    1578:	4b14      	ldr	r3, [pc, #80]	; (15cc <sd_mmc_spi_read_word+0x5c>)
    157a:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    157c:	4b14      	ldr	r3, [pc, #80]	; (15d0 <sd_mmc_spi_read_word+0x60>)
    157e:	8819      	ldrh	r1, [r3, #0]
    1580:	4b14      	ldr	r3, [pc, #80]	; (15d4 <sd_mmc_spi_read_word+0x64>)
    1582:	6818      	ldr	r0, [r3, #0]
    1584:	4b14      	ldr	r3, [pc, #80]	; (15d8 <sd_mmc_spi_read_word+0x68>)
    1586:	4798      	blx	r3
    1588:	2900      	cmp	r1, #0
    158a:	d103      	bne.n	1594 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    158c:	4b13      	ldr	r3, [pc, #76]	; (15dc <sd_mmc_spi_read_word+0x6c>)
    158e:	4798      	blx	r3
    1590:	2800      	cmp	r0, #0
    1592:	d010      	beq.n	15b6 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    1594:	23ff      	movs	r3, #255	; 0xff
    1596:	2204      	movs	r2, #4
    1598:	a901      	add	r1, sp, #4
    159a:	4811      	ldr	r0, [pc, #68]	; (15e0 <sd_mmc_spi_read_word+0x70>)
    159c:	4c11      	ldr	r4, [pc, #68]	; (15e4 <sd_mmc_spi_read_word+0x74>)
    159e:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    15a0:	4b0c      	ldr	r3, [pc, #48]	; (15d4 <sd_mmc_spi_read_word+0x64>)
    15a2:	681a      	ldr	r2, [r3, #0]
    15a4:	1d10      	adds	r0, r2, #4
    15a6:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    15a8:	4b09      	ldr	r3, [pc, #36]	; (15d0 <sd_mmc_spi_read_word+0x60>)
    15aa:	8819      	ldrh	r1, [r3, #0]
    15ac:	4b0a      	ldr	r3, [pc, #40]	; (15d8 <sd_mmc_spi_read_word+0x68>)
    15ae:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    15b0:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    15b2:	2900      	cmp	r1, #0
    15b4:	d001      	beq.n	15ba <sd_mmc_spi_read_word+0x4a>
}
    15b6:	b004      	add	sp, #16
    15b8:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    15ba:	23ff      	movs	r3, #255	; 0xff
    15bc:	2202      	movs	r2, #2
    15be:	a903      	add	r1, sp, #12
    15c0:	4807      	ldr	r0, [pc, #28]	; (15e0 <sd_mmc_spi_read_word+0x70>)
    15c2:	4c08      	ldr	r4, [pc, #32]	; (15e4 <sd_mmc_spi_read_word+0x74>)
    15c4:	47a0      	blx	r4
	return true;
    15c6:	2001      	movs	r0, #1
    15c8:	e7f5      	b.n	15b6 <sd_mmc_spi_read_word+0x46>
    15ca:	46c0      	nop			; (mov r8, r8)
    15cc:	2000012f 	.word	0x2000012f
    15d0:	20000128 	.word	0x20000128
    15d4:	20000138 	.word	0x20000138
    15d8:	00005479 	.word	0x00005479
    15dc:	00001119 	.word	0x00001119
    15e0:	200000ec 	.word	0x200000ec
    15e4:	0000213d 	.word	0x0000213d

000015e8 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    15e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ea:	46de      	mov	lr, fp
    15ec:	4657      	mov	r7, sl
    15ee:	4646      	mov	r6, r8
    15f0:	b5c0      	push	{r6, r7, lr}
    15f2:	b082      	sub	sp, #8
    15f4:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    15f6:	2200      	movs	r2, #0
    15f8:	4b17      	ldr	r3, [pc, #92]	; (1658 <sd_mmc_spi_start_read_blocks+0x70>)
    15fa:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    15fc:	1e4c      	subs	r4, r1, #1
    15fe:	b2a4      	uxth	r4, r4
    1600:	2900      	cmp	r1, #0
    1602:	d026      	beq.n	1652 <sd_mmc_spi_start_read_blocks+0x6a>
    1604:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    1606:	4b15      	ldr	r3, [pc, #84]	; (165c <sd_mmc_spi_start_read_blocks+0x74>)
    1608:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    160a:	4f15      	ldr	r7, [pc, #84]	; (1660 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    160c:	47d0      	blx	sl
    160e:	4680      	mov	r8, r0
    1610:	2800      	cmp	r0, #0
    1612:	d017      	beq.n	1644 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1614:	883a      	ldrh	r2, [r7, #0]
    1616:	465b      	mov	r3, fp
    1618:	1999      	adds	r1, r3, r6
    161a:	23ff      	movs	r3, #255	; 0xff
    161c:	4811      	ldr	r0, [pc, #68]	; (1664 <sd_mmc_spi_start_read_blocks+0x7c>)
    161e:	4d12      	ldr	r5, [pc, #72]	; (1668 <sd_mmc_spi_start_read_blocks+0x80>)
    1620:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    1622:	883b      	ldrh	r3, [r7, #0]
    1624:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    1626:	4a11      	ldr	r2, [pc, #68]	; (166c <sd_mmc_spi_start_read_blocks+0x84>)
    1628:	6811      	ldr	r1, [r2, #0]
    162a:	468c      	mov	ip, r1
    162c:	4463      	add	r3, ip
    162e:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1630:	23ff      	movs	r3, #255	; 0xff
    1632:	2202      	movs	r2, #2
    1634:	a901      	add	r1, sp, #4
    1636:	480b      	ldr	r0, [pc, #44]	; (1664 <sd_mmc_spi_start_read_blocks+0x7c>)
    1638:	47a8      	blx	r5
	while (nb_block--) {
    163a:	3c01      	subs	r4, #1
    163c:	b2a4      	uxth	r4, r4
    163e:	4b0c      	ldr	r3, [pc, #48]	; (1670 <sd_mmc_spi_start_read_blocks+0x88>)
    1640:	429c      	cmp	r4, r3
    1642:	d1e3      	bne.n	160c <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    1644:	4640      	mov	r0, r8
    1646:	b002      	add	sp, #8
    1648:	bc1c      	pop	{r2, r3, r4}
    164a:	4690      	mov	r8, r2
    164c:	469a      	mov	sl, r3
    164e:	46a3      	mov	fp, r4
    1650:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    1652:	2301      	movs	r3, #1
    1654:	4698      	mov	r8, r3
    1656:	e7f5      	b.n	1644 <sd_mmc_spi_start_read_blocks+0x5c>
    1658:	2000012f 	.word	0x2000012f
    165c:	00001119 	.word	0x00001119
    1660:	20000128 	.word	0x20000128
    1664:	200000ec 	.word	0x200000ec
    1668:	0000213d 	.word	0x0000213d
    166c:	20000138 	.word	0x20000138
    1670:	0000ffff 	.word	0x0000ffff

00001674 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    1674:	2001      	movs	r0, #1
    1676:	4770      	bx	lr

00001678 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    1678:	b5f0      	push	{r4, r5, r6, r7, lr}
    167a:	46c6      	mov	lr, r8
    167c:	b500      	push	{lr}
    167e:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1680:	2200      	movs	r2, #0
    1682:	4b15      	ldr	r3, [pc, #84]	; (16d8 <sd_mmc_spi_start_write_blocks+0x60>)
    1684:	701a      	strb	r2, [r3, #0]
	pos = 0;
    1686:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    1688:	4f14      	ldr	r7, [pc, #80]	; (16dc <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    168a:	4e15      	ldr	r6, [pc, #84]	; (16e0 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    168c:	e000      	b.n	1690 <sd_mmc_spi_start_write_blocks+0x18>
{
    168e:	0021      	movs	r1, r4
	while (nb_block--) {
    1690:	1e4c      	subs	r4, r1, #1
    1692:	b2a4      	uxth	r4, r4
    1694:	2900      	cmp	r1, #0
    1696:	d01b      	beq.n	16d0 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    1698:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    169a:	8832      	ldrh	r2, [r6, #0]
    169c:	4643      	mov	r3, r8
    169e:	1959      	adds	r1, r3, r5
    16a0:	4810      	ldr	r0, [pc, #64]	; (16e4 <sd_mmc_spi_start_write_blocks+0x6c>)
    16a2:	4b11      	ldr	r3, [pc, #68]	; (16e8 <sd_mmc_spi_start_write_blocks+0x70>)
    16a4:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    16a6:	8833      	ldrh	r3, [r6, #0]
    16a8:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    16aa:	4a10      	ldr	r2, [pc, #64]	; (16ec <sd_mmc_spi_start_write_blocks+0x74>)
    16ac:	6811      	ldr	r1, [r2, #0]
    16ae:	468c      	mov	ip, r1
    16b0:	4463      	add	r3, ip
    16b2:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    16b4:	4b0e      	ldr	r3, [pc, #56]	; (16f0 <sd_mmc_spi_start_write_blocks+0x78>)
    16b6:	4798      	blx	r3
    16b8:	2800      	cmp	r0, #0
    16ba:	d00a      	beq.n	16d2 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    16bc:	2c00      	cmp	r4, #0
    16be:	d0e6      	beq.n	168e <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    16c0:	4b0c      	ldr	r3, [pc, #48]	; (16f4 <sd_mmc_spi_start_write_blocks+0x7c>)
    16c2:	4798      	blx	r3
    16c4:	2800      	cmp	r0, #0
    16c6:	d1e2      	bne.n	168e <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    16c8:	2205      	movs	r2, #5
    16ca:	4b03      	ldr	r3, [pc, #12]	; (16d8 <sd_mmc_spi_start_write_blocks+0x60>)
    16cc:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    16ce:	e000      	b.n	16d2 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    16d0:	2001      	movs	r0, #1
}
    16d2:	bc04      	pop	{r2}
    16d4:	4690      	mov	r8, r2
    16d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16d8:	2000012f 	.word	0x2000012f
    16dc:	00000ff5 	.word	0x00000ff5
    16e0:	20000128 	.word	0x20000128
    16e4:	200000ec 	.word	0x200000ec
    16e8:	00002305 	.word	0x00002305
    16ec:	20000138 	.word	0x20000138
    16f0:	00001185 	.word	0x00001185
    16f4:	0000103d 	.word	0x0000103d

000016f8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    16f8:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    16fa:	4b05      	ldr	r3, [pc, #20]	; (1710 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    16fc:	4798      	blx	r3
    16fe:	2800      	cmp	r0, #0
    1700:	d103      	bne.n	170a <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1702:	2205      	movs	r2, #5
    1704:	4b03      	ldr	r3, [pc, #12]	; (1714 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    1706:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    1708:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    170a:	4b03      	ldr	r3, [pc, #12]	; (1718 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    170c:	4798      	blx	r3
    170e:	e7fb      	b.n	1708 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    1710:	0000103d 	.word	0x0000103d
    1714:	2000012f 	.word	0x2000012f
    1718:	000010a1 	.word	0x000010a1

0000171c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    171c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    171e:	2301      	movs	r3, #1
    1720:	2800      	cmp	r0, #0
    1722:	d001      	beq.n	1728 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    1724:	0018      	movs	r0, r3
    1726:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    1728:	4b01      	ldr	r3, [pc, #4]	; (1730 <mem_test_unit_ready+0x14>)
    172a:	4798      	blx	r3
    172c:	0003      	movs	r3, r0
    172e:	e7f9      	b.n	1724 <mem_test_unit_ready+0x8>
    1730:	00000ef5 	.word	0x00000ef5

00001734 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    1734:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    1736:	2301      	movs	r3, #1
    1738:	2800      	cmp	r0, #0
    173a:	d001      	beq.n	1740 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    173c:	0018      	movs	r0, r3
    173e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    1740:	0008      	movs	r0, r1
    1742:	4b02      	ldr	r3, [pc, #8]	; (174c <mem_read_capacity+0x18>)
    1744:	4798      	blx	r3
    1746:	0003      	movs	r3, r0
    1748:	e7f8      	b.n	173c <mem_read_capacity+0x8>
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	00000f25 	.word	0x00000f25

00001750 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    1750:	4243      	negs	r3, r0
    1752:	4158      	adcs	r0, r3
    1754:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    1756:	4770      	bx	lr

00001758 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    1758:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    175a:	2301      	movs	r3, #1
    175c:	2800      	cmp	r0, #0
    175e:	d001      	beq.n	1764 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    1760:	0018      	movs	r0, r3
    1762:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    1764:	4b01      	ldr	r3, [pc, #4]	; (176c <mem_wr_protect+0x14>)
    1766:	4798      	blx	r3
    1768:	0003      	movs	r3, r0
    176a:	e7f9      	b.n	1760 <mem_wr_protect+0x8>
    176c:	00000f35 	.word	0x00000f35

00001770 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    1770:	b510      	push	{r4, lr}
    1772:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    1774:	2301      	movs	r3, #1
    1776:	2800      	cmp	r0, #0
    1778:	d001      	beq.n	177e <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    177a:	0018      	movs	r0, r3
    177c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    177e:	0011      	movs	r1, r2
    1780:	0020      	movs	r0, r4
    1782:	4b02      	ldr	r3, [pc, #8]	; (178c <memory_2_ram+0x1c>)
    1784:	4798      	blx	r3
    1786:	0003      	movs	r3, r0
    1788:	e7f7      	b.n	177a <memory_2_ram+0xa>
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	00000f89 	.word	0x00000f89

00001790 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    1790:	b510      	push	{r4, lr}
    1792:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    1794:	2301      	movs	r3, #1
    1796:	2800      	cmp	r0, #0
    1798:	d001      	beq.n	179e <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    179a:	0018      	movs	r0, r3
    179c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    179e:	0011      	movs	r1, r2
    17a0:	0020      	movs	r0, r4
    17a2:	4b02      	ldr	r3, [pc, #8]	; (17ac <ram_2_memory+0x1c>)
    17a4:	4798      	blx	r3
    17a6:	0003      	movs	r3, r0
    17a8:	e7f7      	b.n	179a <ram_2_memory+0xa>
    17aa:	46c0      	nop			; (mov r8, r8)
    17ac:	00000fe1 	.word	0x00000fe1

000017b0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    17b0:	4b0c      	ldr	r3, [pc, #48]	; (17e4 <cpu_irq_enter_critical+0x34>)
    17b2:	681b      	ldr	r3, [r3, #0]
    17b4:	2b00      	cmp	r3, #0
    17b6:	d106      	bne.n	17c6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    17b8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    17bc:	2b00      	cmp	r3, #0
    17be:	d007      	beq.n	17d0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    17c0:	2200      	movs	r2, #0
    17c2:	4b09      	ldr	r3, [pc, #36]	; (17e8 <cpu_irq_enter_critical+0x38>)
    17c4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    17c6:	4a07      	ldr	r2, [pc, #28]	; (17e4 <cpu_irq_enter_critical+0x34>)
    17c8:	6813      	ldr	r3, [r2, #0]
    17ca:	3301      	adds	r3, #1
    17cc:	6013      	str	r3, [r2, #0]
}
    17ce:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    17d0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    17d2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    17d6:	2200      	movs	r2, #0
    17d8:	4b04      	ldr	r3, [pc, #16]	; (17ec <cpu_irq_enter_critical+0x3c>)
    17da:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    17dc:	3201      	adds	r2, #1
    17de:	4b02      	ldr	r3, [pc, #8]	; (17e8 <cpu_irq_enter_critical+0x38>)
    17e0:	701a      	strb	r2, [r3, #0]
    17e2:	e7f0      	b.n	17c6 <cpu_irq_enter_critical+0x16>
    17e4:	20000140 	.word	0x20000140
    17e8:	20000144 	.word	0x20000144
    17ec:	20000009 	.word	0x20000009

000017f0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    17f0:	4b08      	ldr	r3, [pc, #32]	; (1814 <cpu_irq_leave_critical+0x24>)
    17f2:	681a      	ldr	r2, [r3, #0]
    17f4:	3a01      	subs	r2, #1
    17f6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    17f8:	681b      	ldr	r3, [r3, #0]
    17fa:	2b00      	cmp	r3, #0
    17fc:	d109      	bne.n	1812 <cpu_irq_leave_critical+0x22>
    17fe:	4b06      	ldr	r3, [pc, #24]	; (1818 <cpu_irq_leave_critical+0x28>)
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	2b00      	cmp	r3, #0
    1804:	d005      	beq.n	1812 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1806:	2201      	movs	r2, #1
    1808:	4b04      	ldr	r3, [pc, #16]	; (181c <cpu_irq_leave_critical+0x2c>)
    180a:	701a      	strb	r2, [r3, #0]
    180c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1810:	b662      	cpsie	i
	}
}
    1812:	4770      	bx	lr
    1814:	20000140 	.word	0x20000140
    1818:	20000144 	.word	0x20000144
    181c:	20000009 	.word	0x20000009

00001820 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1820:	b500      	push	{lr}
    1822:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1824:	ab01      	add	r3, sp, #4
    1826:	2280      	movs	r2, #128	; 0x80
    1828:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    182a:	780a      	ldrb	r2, [r1, #0]
    182c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    182e:	784a      	ldrb	r2, [r1, #1]
    1830:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1832:	788a      	ldrb	r2, [r1, #2]
    1834:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1836:	0019      	movs	r1, r3
    1838:	4b01      	ldr	r3, [pc, #4]	; (1840 <port_pin_set_config+0x20>)
    183a:	4798      	blx	r3
}
    183c:	b003      	add	sp, #12
    183e:	bd00      	pop	{pc}
    1840:	00003349 	.word	0x00003349

00001844 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1844:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1846:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1848:	b25b      	sxtb	r3, r3
    184a:	2b00      	cmp	r3, #0
    184c:	dbfb      	blt.n	1846 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    184e:	8813      	ldrh	r3, [r2, #0]
    1850:	2102      	movs	r1, #2
    1852:	430b      	orrs	r3, r1
    1854:	8013      	strh	r3, [r2, #0]
}
    1856:	4770      	bx	lr

00001858 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1858:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    185a:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    185c:	b25b      	sxtb	r3, r3
    185e:	2b00      	cmp	r3, #0
    1860:	dbfb      	blt.n	185a <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    1862:	23c1      	movs	r3, #193	; 0xc1
    1864:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    1866:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1868:	8813      	ldrh	r3, [r2, #0]
    186a:	2102      	movs	r1, #2
    186c:	438b      	bics	r3, r1
    186e:	8013      	strh	r3, [r2, #0]
}
    1870:	4770      	bx	lr
	...

00001874 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1874:	b570      	push	{r4, r5, r6, lr}
    1876:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1878:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    187a:	4b06      	ldr	r3, [pc, #24]	; (1894 <rtc_calendar_reset+0x20>)
    187c:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    187e:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1880:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    1882:	b25b      	sxtb	r3, r3
    1884:	2b00      	cmp	r3, #0
    1886:	dbfb      	blt.n	1880 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1888:	882b      	ldrh	r3, [r5, #0]
    188a:	2201      	movs	r2, #1
    188c:	4313      	orrs	r3, r2
    188e:	802b      	strh	r3, [r5, #0]
}
    1890:	bd70      	pop	{r4, r5, r6, pc}
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	00001859 	.word	0x00001859

00001898 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1898:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    189a:	88cb      	ldrh	r3, [r1, #6]
    189c:	88c2      	ldrh	r2, [r0, #6]
    189e:	1a9a      	subs	r2, r3, r2
    18a0:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    18a2:	794b      	ldrb	r3, [r1, #5]
    18a4:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    18a6:	790c      	ldrb	r4, [r1, #4]
    18a8:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    18aa:	4323      	orrs	r3, r4
    18ac:	788c      	ldrb	r4, [r1, #2]
    18ae:	0324      	lsls	r4, r4, #12
    18b0:	4323      	orrs	r3, r4
    18b2:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    18b4:	7902      	ldrb	r2, [r0, #4]
    18b6:	2a00      	cmp	r2, #0
    18b8:	d105      	bne.n	18c6 <rtc_calendar_time_to_register_value+0x2e>
    18ba:	78ca      	ldrb	r2, [r1, #3]
    18bc:	2a00      	cmp	r2, #0
    18be:	d002      	beq.n	18c6 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    18c0:	2280      	movs	r2, #128	; 0x80
    18c2:	0252      	lsls	r2, r2, #9
    18c4:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    18c6:	7848      	ldrb	r0, [r1, #1]
    18c8:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    18ca:	780a      	ldrb	r2, [r1, #0]
    18cc:	4310      	orrs	r0, r2
    18ce:	4318      	orrs	r0, r3

	return register_value;
}
    18d0:	bd10      	pop	{r4, pc}

000018d2 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    18d2:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    18d4:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    18d6:	88c4      	ldrh	r4, [r0, #6]
    18d8:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    18da:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    18dc:	018b      	lsls	r3, r1, #6
    18de:	0f1b      	lsrs	r3, r3, #28
    18e0:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    18e2:	028b      	lsls	r3, r1, #10
    18e4:	0edb      	lsrs	r3, r3, #27
    18e6:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    18e8:	7903      	ldrb	r3, [r0, #4]
    18ea:	2b00      	cmp	r3, #0
    18ec:	d10c      	bne.n	1908 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    18ee:	040b      	lsls	r3, r1, #16
    18f0:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    18f2:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    18f4:	03cb      	lsls	r3, r1, #15
    18f6:	0fdb      	lsrs	r3, r3, #31
    18f8:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    18fa:	0988      	lsrs	r0, r1, #6
    18fc:	233f      	movs	r3, #63	; 0x3f
    18fe:	4018      	ands	r0, r3
    1900:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1902:	4019      	ands	r1, r3
    1904:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    1906:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1908:	03cb      	lsls	r3, r1, #15
    190a:	0edb      	lsrs	r3, r3, #27
    190c:	7093      	strb	r3, [r2, #2]
    190e:	e7f4      	b.n	18fa <rtc_calendar_register_value_to_time+0x28>

00001910 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1910:	b510      	push	{r4, lr}
    1912:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1914:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    1916:	7941      	ldrb	r1, [r0, #5]
    1918:	2900      	cmp	r1, #0
    191a:	d006      	beq.n	192a <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    191c:	8859      	ldrh	r1, [r3, #2]
    191e:	0449      	lsls	r1, r1, #17
    1920:	d50b      	bpl.n	193a <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    1922:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    1924:	4b0a      	ldr	r3, [pc, #40]	; (1950 <rtc_calendar_get_time+0x40>)
    1926:	4798      	blx	r3
}
    1928:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    192a:	490a      	ldr	r1, [pc, #40]	; (1954 <rtc_calendar_get_time+0x44>)
    192c:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    192e:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1930:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1932:	b249      	sxtb	r1, r1
    1934:	2900      	cmp	r1, #0
    1936:	dbfb      	blt.n	1930 <rtc_calendar_get_time+0x20>
    1938:	e7f3      	b.n	1922 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    193a:	8859      	ldrh	r1, [r3, #2]
    193c:	24c0      	movs	r4, #192	; 0xc0
    193e:	0224      	lsls	r4, r4, #8
    1940:	4321      	orrs	r1, r4
    1942:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1944:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1946:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1948:	b249      	sxtb	r1, r1
    194a:	2900      	cmp	r1, #0
    194c:	dbfb      	blt.n	1946 <rtc_calendar_get_time+0x36>
    194e:	e7e8      	b.n	1922 <rtc_calendar_get_time+0x12>
    1950:	000018d3 	.word	0x000018d3
    1954:	ffff8000 	.word	0xffff8000

00001958 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1958:	b570      	push	{r4, r5, r6, lr}
    195a:	000d      	movs	r5, r1
    195c:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    195e:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1960:	2a01      	cmp	r2, #1
    1962:	d901      	bls.n	1968 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    1964:	0018      	movs	r0, r3
    1966:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1968:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    196a:	4b06      	ldr	r3, [pc, #24]	; (1984 <rtc_calendar_set_alarm+0x2c>)
    196c:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    196e:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1970:	b25b      	sxtb	r3, r3
    1972:	2b00      	cmp	r3, #0
    1974:	dbfb      	blt.n	196e <rtc_calendar_set_alarm+0x16>
    1976:	00e4      	lsls	r4, r4, #3
    1978:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    197a:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    197c:	7a2b      	ldrb	r3, [r5, #8]
    197e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    1980:	2300      	movs	r3, #0
    1982:	e7ef      	b.n	1964 <rtc_calendar_set_alarm+0xc>
    1984:	00001899 	.word	0x00001899

00001988 <rtc_calendar_init>:
{
    1988:	b530      	push	{r4, r5, lr}
    198a:	b083      	sub	sp, #12
    198c:	0005      	movs	r5, r0
    198e:	0014      	movs	r4, r2
	module->hw = hw;
    1990:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
    1992:	4a1c      	ldr	r2, [pc, #112]	; (1a04 <rtc_calendar_init+0x7c>)
    1994:	6993      	ldr	r3, [r2, #24]
    1996:	2120      	movs	r1, #32
    1998:	430b      	orrs	r3, r1
    199a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    199c:	a901      	add	r1, sp, #4
    199e:	2302      	movs	r3, #2
    19a0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    19a2:	2004      	movs	r0, #4
    19a4:	4b18      	ldr	r3, [pc, #96]	; (1a08 <rtc_calendar_init+0x80>)
    19a6:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    19a8:	2004      	movs	r0, #4
    19aa:	4b18      	ldr	r3, [pc, #96]	; (1a0c <rtc_calendar_init+0x84>)
    19ac:	4798      	blx	r3
	rtc_calendar_reset(module);
    19ae:	0028      	movs	r0, r5
    19b0:	4b17      	ldr	r3, [pc, #92]	; (1a10 <rtc_calendar_init+0x88>)
    19b2:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    19b4:	7923      	ldrb	r3, [r4, #4]
    19b6:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    19b8:	78e3      	ldrb	r3, [r4, #3]
    19ba:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    19bc:	88e3      	ldrh	r3, [r4, #6]
    19be:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    19c0:	4b14      	ldr	r3, [pc, #80]	; (1a14 <rtc_calendar_init+0x8c>)
    19c2:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    19c4:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    19c6:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    19c8:	7921      	ldrb	r1, [r4, #4]
    19ca:	2900      	cmp	r1, #0
    19cc:	d017      	beq.n	19fe <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    19ce:	2108      	movs	r1, #8
    19d0:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    19d2:	78a1      	ldrb	r1, [r4, #2]
    19d4:	2900      	cmp	r1, #0
    19d6:	d001      	beq.n	19dc <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    19d8:	2180      	movs	r1, #128	; 0x80
    19da:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    19dc:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    19de:	78e3      	ldrb	r3, [r4, #3]
    19e0:	2b00      	cmp	r3, #0
    19e2:	d004      	beq.n	19ee <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    19e4:	8853      	ldrh	r3, [r2, #2]
    19e6:	2180      	movs	r1, #128	; 0x80
    19e8:	01c9      	lsls	r1, r1, #7
    19ea:	430b      	orrs	r3, r1
    19ec:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    19ee:	0021      	movs	r1, r4
    19f0:	3108      	adds	r1, #8
    19f2:	2200      	movs	r2, #0
    19f4:	0028      	movs	r0, r5
    19f6:	4b08      	ldr	r3, [pc, #32]	; (1a18 <rtc_calendar_init+0x90>)
    19f8:	4798      	blx	r3
}
    19fa:	b003      	add	sp, #12
    19fc:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    19fe:	2148      	movs	r1, #72	; 0x48
    1a00:	430b      	orrs	r3, r1
    1a02:	e7e6      	b.n	19d2 <rtc_calendar_init+0x4a>
    1a04:	40000400 	.word	0x40000400
    1a08:	00003251 	.word	0x00003251
    1a0c:	000031c5 	.word	0x000031c5
    1a10:	00001875 	.word	0x00001875
    1a14:	200009f0 	.word	0x200009f0
    1a18:	00001959 	.word	0x00001959

00001a1c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a1e:	46de      	mov	lr, fp
    1a20:	4657      	mov	r7, sl
    1a22:	464e      	mov	r6, r9
    1a24:	4645      	mov	r5, r8
    1a26:	b5e0      	push	{r5, r6, r7, lr}
    1a28:	b087      	sub	sp, #28
    1a2a:	4680      	mov	r8, r0
    1a2c:	9104      	str	r1, [sp, #16]
    1a2e:	0016      	movs	r6, r2
    1a30:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1a32:	2200      	movs	r2, #0
    1a34:	2300      	movs	r3, #0
    1a36:	2100      	movs	r1, #0
    1a38:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1a3a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1a3c:	2001      	movs	r0, #1
    1a3e:	0021      	movs	r1, r4
    1a40:	9600      	str	r6, [sp, #0]
    1a42:	9701      	str	r7, [sp, #4]
    1a44:	465c      	mov	r4, fp
    1a46:	9403      	str	r4, [sp, #12]
    1a48:	4644      	mov	r4, r8
    1a4a:	9405      	str	r4, [sp, #20]
    1a4c:	e013      	b.n	1a76 <long_division+0x5a>
    1a4e:	2420      	movs	r4, #32
    1a50:	1a64      	subs	r4, r4, r1
    1a52:	0005      	movs	r5, r0
    1a54:	40e5      	lsrs	r5, r4
    1a56:	46a8      	mov	r8, r5
    1a58:	e014      	b.n	1a84 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1a5a:	9c00      	ldr	r4, [sp, #0]
    1a5c:	9d01      	ldr	r5, [sp, #4]
    1a5e:	1b12      	subs	r2, r2, r4
    1a60:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1a62:	465c      	mov	r4, fp
    1a64:	464d      	mov	r5, r9
    1a66:	432c      	orrs	r4, r5
    1a68:	46a3      	mov	fp, r4
    1a6a:	9c03      	ldr	r4, [sp, #12]
    1a6c:	4645      	mov	r5, r8
    1a6e:	432c      	orrs	r4, r5
    1a70:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1a72:	3901      	subs	r1, #1
    1a74:	d325      	bcc.n	1ac2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1a76:	2420      	movs	r4, #32
    1a78:	4264      	negs	r4, r4
    1a7a:	190c      	adds	r4, r1, r4
    1a7c:	d4e7      	bmi.n	1a4e <long_division+0x32>
    1a7e:	0005      	movs	r5, r0
    1a80:	40a5      	lsls	r5, r4
    1a82:	46a8      	mov	r8, r5
    1a84:	0004      	movs	r4, r0
    1a86:	408c      	lsls	r4, r1
    1a88:	46a1      	mov	r9, r4
		r = r << 1;
    1a8a:	1892      	adds	r2, r2, r2
    1a8c:	415b      	adcs	r3, r3
    1a8e:	0014      	movs	r4, r2
    1a90:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1a92:	9e05      	ldr	r6, [sp, #20]
    1a94:	464f      	mov	r7, r9
    1a96:	403e      	ands	r6, r7
    1a98:	46b4      	mov	ip, r6
    1a9a:	9e04      	ldr	r6, [sp, #16]
    1a9c:	4647      	mov	r7, r8
    1a9e:	403e      	ands	r6, r7
    1aa0:	46b2      	mov	sl, r6
    1aa2:	4666      	mov	r6, ip
    1aa4:	4657      	mov	r7, sl
    1aa6:	433e      	orrs	r6, r7
    1aa8:	d003      	beq.n	1ab2 <long_division+0x96>
			r |= 0x01;
    1aaa:	0006      	movs	r6, r0
    1aac:	4326      	orrs	r6, r4
    1aae:	0032      	movs	r2, r6
    1ab0:	002b      	movs	r3, r5
		if (r >= d) {
    1ab2:	9c00      	ldr	r4, [sp, #0]
    1ab4:	9d01      	ldr	r5, [sp, #4]
    1ab6:	429d      	cmp	r5, r3
    1ab8:	d8db      	bhi.n	1a72 <long_division+0x56>
    1aba:	d1ce      	bne.n	1a5a <long_division+0x3e>
    1abc:	4294      	cmp	r4, r2
    1abe:	d8d8      	bhi.n	1a72 <long_division+0x56>
    1ac0:	e7cb      	b.n	1a5a <long_division+0x3e>
    1ac2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1ac4:	4658      	mov	r0, fp
    1ac6:	0019      	movs	r1, r3
    1ac8:	b007      	add	sp, #28
    1aca:	bc3c      	pop	{r2, r3, r4, r5}
    1acc:	4690      	mov	r8, r2
    1ace:	4699      	mov	r9, r3
    1ad0:	46a2      	mov	sl, r4
    1ad2:	46ab      	mov	fp, r5
    1ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001ad6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1ad6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1ad8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ada:	2340      	movs	r3, #64	; 0x40
    1adc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1ade:	4281      	cmp	r1, r0
    1ae0:	d202      	bcs.n	1ae8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1ae2:	0018      	movs	r0, r3
    1ae4:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1ae6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1ae8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1aea:	1c63      	adds	r3, r4, #1
    1aec:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1aee:	4288      	cmp	r0, r1
    1af0:	d9f9      	bls.n	1ae6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1af2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1af4:	2cff      	cmp	r4, #255	; 0xff
    1af6:	d8f4      	bhi.n	1ae2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1af8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1afa:	2300      	movs	r3, #0
    1afc:	e7f1      	b.n	1ae2 <_sercom_get_sync_baud_val+0xc>
	...

00001b00 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b02:	b083      	sub	sp, #12
    1b04:	000f      	movs	r7, r1
    1b06:	0016      	movs	r6, r2
    1b08:	aa08      	add	r2, sp, #32
    1b0a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1b0c:	0004      	movs	r4, r0
    1b0e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b10:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1b12:	42bc      	cmp	r4, r7
    1b14:	d902      	bls.n	1b1c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1b16:	0010      	movs	r0, r2
    1b18:	b003      	add	sp, #12
    1b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1b1c:	2b00      	cmp	r3, #0
    1b1e:	d114      	bne.n	1b4a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1b20:	0002      	movs	r2, r0
    1b22:	0008      	movs	r0, r1
    1b24:	2100      	movs	r1, #0
    1b26:	4c19      	ldr	r4, [pc, #100]	; (1b8c <_sercom_get_async_baud_val+0x8c>)
    1b28:	47a0      	blx	r4
    1b2a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1b2c:	003a      	movs	r2, r7
    1b2e:	2300      	movs	r3, #0
    1b30:	2000      	movs	r0, #0
    1b32:	4c17      	ldr	r4, [pc, #92]	; (1b90 <_sercom_get_async_baud_val+0x90>)
    1b34:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1b36:	2200      	movs	r2, #0
    1b38:	2301      	movs	r3, #1
    1b3a:	1a12      	subs	r2, r2, r0
    1b3c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1b3e:	0c12      	lsrs	r2, r2, #16
    1b40:	041b      	lsls	r3, r3, #16
    1b42:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1b44:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1b46:	2200      	movs	r2, #0
    1b48:	e7e5      	b.n	1b16 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1b4a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1b4c:	2b01      	cmp	r3, #1
    1b4e:	d1f9      	bne.n	1b44 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1b50:	000a      	movs	r2, r1
    1b52:	2300      	movs	r3, #0
    1b54:	2100      	movs	r1, #0
    1b56:	4c0d      	ldr	r4, [pc, #52]	; (1b8c <_sercom_get_async_baud_val+0x8c>)
    1b58:	47a0      	blx	r4
    1b5a:	0002      	movs	r2, r0
    1b5c:	000b      	movs	r3, r1
    1b5e:	9200      	str	r2, [sp, #0]
    1b60:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1b62:	0038      	movs	r0, r7
    1b64:	2100      	movs	r1, #0
    1b66:	4c0a      	ldr	r4, [pc, #40]	; (1b90 <_sercom_get_async_baud_val+0x90>)
    1b68:	47a0      	blx	r4
    1b6a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1b6c:	2380      	movs	r3, #128	; 0x80
    1b6e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b70:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1b72:	4298      	cmp	r0, r3
    1b74:	d8cf      	bhi.n	1b16 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1b76:	0f79      	lsrs	r1, r7, #29
    1b78:	00f8      	lsls	r0, r7, #3
    1b7a:	9a00      	ldr	r2, [sp, #0]
    1b7c:	9b01      	ldr	r3, [sp, #4]
    1b7e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1b80:	00ea      	lsls	r2, r5, #3
    1b82:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1b84:	b2d2      	uxtb	r2, r2
    1b86:	0352      	lsls	r2, r2, #13
    1b88:	432a      	orrs	r2, r5
    1b8a:	e7db      	b.n	1b44 <_sercom_get_async_baud_val+0x44>
    1b8c:	00005659 	.word	0x00005659
    1b90:	00001a1d 	.word	0x00001a1d

00001b94 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1b94:	b510      	push	{r4, lr}
    1b96:	b082      	sub	sp, #8
    1b98:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1b9a:	4b0e      	ldr	r3, [pc, #56]	; (1bd4 <sercom_set_gclk_generator+0x40>)
    1b9c:	781b      	ldrb	r3, [r3, #0]
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d007      	beq.n	1bb2 <sercom_set_gclk_generator+0x1e>
    1ba2:	2900      	cmp	r1, #0
    1ba4:	d105      	bne.n	1bb2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1ba6:	4b0b      	ldr	r3, [pc, #44]	; (1bd4 <sercom_set_gclk_generator+0x40>)
    1ba8:	785b      	ldrb	r3, [r3, #1]
    1baa:	4283      	cmp	r3, r0
    1bac:	d010      	beq.n	1bd0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1bae:	201d      	movs	r0, #29
    1bb0:	e00c      	b.n	1bcc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1bb2:	a901      	add	r1, sp, #4
    1bb4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1bb6:	2013      	movs	r0, #19
    1bb8:	4b07      	ldr	r3, [pc, #28]	; (1bd8 <sercom_set_gclk_generator+0x44>)
    1bba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1bbc:	2013      	movs	r0, #19
    1bbe:	4b07      	ldr	r3, [pc, #28]	; (1bdc <sercom_set_gclk_generator+0x48>)
    1bc0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1bc2:	4b04      	ldr	r3, [pc, #16]	; (1bd4 <sercom_set_gclk_generator+0x40>)
    1bc4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1bc6:	2201      	movs	r2, #1
    1bc8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1bca:	2000      	movs	r0, #0
}
    1bcc:	b002      	add	sp, #8
    1bce:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1bd0:	2000      	movs	r0, #0
    1bd2:	e7fb      	b.n	1bcc <sercom_set_gclk_generator+0x38>
    1bd4:	20000148 	.word	0x20000148
    1bd8:	00003251 	.word	0x00003251
    1bdc:	000031c5 	.word	0x000031c5

00001be0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1be0:	4b40      	ldr	r3, [pc, #256]	; (1ce4 <_sercom_get_default_pad+0x104>)
    1be2:	4298      	cmp	r0, r3
    1be4:	d031      	beq.n	1c4a <_sercom_get_default_pad+0x6a>
    1be6:	d90a      	bls.n	1bfe <_sercom_get_default_pad+0x1e>
    1be8:	4b3f      	ldr	r3, [pc, #252]	; (1ce8 <_sercom_get_default_pad+0x108>)
    1bea:	4298      	cmp	r0, r3
    1bec:	d04d      	beq.n	1c8a <_sercom_get_default_pad+0xaa>
    1bee:	4b3f      	ldr	r3, [pc, #252]	; (1cec <_sercom_get_default_pad+0x10c>)
    1bf0:	4298      	cmp	r0, r3
    1bf2:	d05a      	beq.n	1caa <_sercom_get_default_pad+0xca>
    1bf4:	4b3e      	ldr	r3, [pc, #248]	; (1cf0 <_sercom_get_default_pad+0x110>)
    1bf6:	4298      	cmp	r0, r3
    1bf8:	d037      	beq.n	1c6a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1bfa:	2000      	movs	r0, #0
}
    1bfc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1bfe:	4b3d      	ldr	r3, [pc, #244]	; (1cf4 <_sercom_get_default_pad+0x114>)
    1c00:	4298      	cmp	r0, r3
    1c02:	d00c      	beq.n	1c1e <_sercom_get_default_pad+0x3e>
    1c04:	4b3c      	ldr	r3, [pc, #240]	; (1cf8 <_sercom_get_default_pad+0x118>)
    1c06:	4298      	cmp	r0, r3
    1c08:	d1f7      	bne.n	1bfa <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c0a:	2901      	cmp	r1, #1
    1c0c:	d017      	beq.n	1c3e <_sercom_get_default_pad+0x5e>
    1c0e:	2900      	cmp	r1, #0
    1c10:	d05d      	beq.n	1cce <_sercom_get_default_pad+0xee>
    1c12:	2902      	cmp	r1, #2
    1c14:	d015      	beq.n	1c42 <_sercom_get_default_pad+0x62>
    1c16:	2903      	cmp	r1, #3
    1c18:	d015      	beq.n	1c46 <_sercom_get_default_pad+0x66>
	return 0;
    1c1a:	2000      	movs	r0, #0
    1c1c:	e7ee      	b.n	1bfc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c1e:	2901      	cmp	r1, #1
    1c20:	d007      	beq.n	1c32 <_sercom_get_default_pad+0x52>
    1c22:	2900      	cmp	r1, #0
    1c24:	d051      	beq.n	1cca <_sercom_get_default_pad+0xea>
    1c26:	2902      	cmp	r1, #2
    1c28:	d005      	beq.n	1c36 <_sercom_get_default_pad+0x56>
    1c2a:	2903      	cmp	r1, #3
    1c2c:	d005      	beq.n	1c3a <_sercom_get_default_pad+0x5a>
	return 0;
    1c2e:	2000      	movs	r0, #0
    1c30:	e7e4      	b.n	1bfc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c32:	4832      	ldr	r0, [pc, #200]	; (1cfc <_sercom_get_default_pad+0x11c>)
    1c34:	e7e2      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1c36:	4832      	ldr	r0, [pc, #200]	; (1d00 <_sercom_get_default_pad+0x120>)
    1c38:	e7e0      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1c3a:	4832      	ldr	r0, [pc, #200]	; (1d04 <_sercom_get_default_pad+0x124>)
    1c3c:	e7de      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1c3e:	4832      	ldr	r0, [pc, #200]	; (1d08 <_sercom_get_default_pad+0x128>)
    1c40:	e7dc      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1c42:	4832      	ldr	r0, [pc, #200]	; (1d0c <_sercom_get_default_pad+0x12c>)
    1c44:	e7da      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1c46:	4832      	ldr	r0, [pc, #200]	; (1d10 <_sercom_get_default_pad+0x130>)
    1c48:	e7d8      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1c4a:	2901      	cmp	r1, #1
    1c4c:	d007      	beq.n	1c5e <_sercom_get_default_pad+0x7e>
    1c4e:	2900      	cmp	r1, #0
    1c50:	d03f      	beq.n	1cd2 <_sercom_get_default_pad+0xf2>
    1c52:	2902      	cmp	r1, #2
    1c54:	d005      	beq.n	1c62 <_sercom_get_default_pad+0x82>
    1c56:	2903      	cmp	r1, #3
    1c58:	d005      	beq.n	1c66 <_sercom_get_default_pad+0x86>
	return 0;
    1c5a:	2000      	movs	r0, #0
    1c5c:	e7ce      	b.n	1bfc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c5e:	482d      	ldr	r0, [pc, #180]	; (1d14 <_sercom_get_default_pad+0x134>)
    1c60:	e7cc      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1c62:	482d      	ldr	r0, [pc, #180]	; (1d18 <_sercom_get_default_pad+0x138>)
    1c64:	e7ca      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1c66:	482d      	ldr	r0, [pc, #180]	; (1d1c <_sercom_get_default_pad+0x13c>)
    1c68:	e7c8      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1c6a:	2901      	cmp	r1, #1
    1c6c:	d007      	beq.n	1c7e <_sercom_get_default_pad+0x9e>
    1c6e:	2900      	cmp	r1, #0
    1c70:	d031      	beq.n	1cd6 <_sercom_get_default_pad+0xf6>
    1c72:	2902      	cmp	r1, #2
    1c74:	d005      	beq.n	1c82 <_sercom_get_default_pad+0xa2>
    1c76:	2903      	cmp	r1, #3
    1c78:	d005      	beq.n	1c86 <_sercom_get_default_pad+0xa6>
	return 0;
    1c7a:	2000      	movs	r0, #0
    1c7c:	e7be      	b.n	1bfc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c7e:	4828      	ldr	r0, [pc, #160]	; (1d20 <_sercom_get_default_pad+0x140>)
    1c80:	e7bc      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1c82:	4828      	ldr	r0, [pc, #160]	; (1d24 <_sercom_get_default_pad+0x144>)
    1c84:	e7ba      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1c86:	4828      	ldr	r0, [pc, #160]	; (1d28 <_sercom_get_default_pad+0x148>)
    1c88:	e7b8      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1c8a:	2901      	cmp	r1, #1
    1c8c:	d007      	beq.n	1c9e <_sercom_get_default_pad+0xbe>
    1c8e:	2900      	cmp	r1, #0
    1c90:	d023      	beq.n	1cda <_sercom_get_default_pad+0xfa>
    1c92:	2902      	cmp	r1, #2
    1c94:	d005      	beq.n	1ca2 <_sercom_get_default_pad+0xc2>
    1c96:	2903      	cmp	r1, #3
    1c98:	d005      	beq.n	1ca6 <_sercom_get_default_pad+0xc6>
	return 0;
    1c9a:	2000      	movs	r0, #0
    1c9c:	e7ae      	b.n	1bfc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c9e:	4823      	ldr	r0, [pc, #140]	; (1d2c <_sercom_get_default_pad+0x14c>)
    1ca0:	e7ac      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1ca2:	4823      	ldr	r0, [pc, #140]	; (1d30 <_sercom_get_default_pad+0x150>)
    1ca4:	e7aa      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1ca6:	4823      	ldr	r0, [pc, #140]	; (1d34 <_sercom_get_default_pad+0x154>)
    1ca8:	e7a8      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1caa:	2901      	cmp	r1, #1
    1cac:	d007      	beq.n	1cbe <_sercom_get_default_pad+0xde>
    1cae:	2900      	cmp	r1, #0
    1cb0:	d015      	beq.n	1cde <_sercom_get_default_pad+0xfe>
    1cb2:	2902      	cmp	r1, #2
    1cb4:	d005      	beq.n	1cc2 <_sercom_get_default_pad+0xe2>
    1cb6:	2903      	cmp	r1, #3
    1cb8:	d005      	beq.n	1cc6 <_sercom_get_default_pad+0xe6>
	return 0;
    1cba:	2000      	movs	r0, #0
    1cbc:	e79e      	b.n	1bfc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1cbe:	481e      	ldr	r0, [pc, #120]	; (1d38 <_sercom_get_default_pad+0x158>)
    1cc0:	e79c      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1cc2:	481e      	ldr	r0, [pc, #120]	; (1d3c <_sercom_get_default_pad+0x15c>)
    1cc4:	e79a      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1cc6:	481e      	ldr	r0, [pc, #120]	; (1d40 <_sercom_get_default_pad+0x160>)
    1cc8:	e798      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1cca:	481e      	ldr	r0, [pc, #120]	; (1d44 <_sercom_get_default_pad+0x164>)
    1ccc:	e796      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1cce:	2003      	movs	r0, #3
    1cd0:	e794      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1cd2:	481d      	ldr	r0, [pc, #116]	; (1d48 <_sercom_get_default_pad+0x168>)
    1cd4:	e792      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1cd6:	481d      	ldr	r0, [pc, #116]	; (1d4c <_sercom_get_default_pad+0x16c>)
    1cd8:	e790      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1cda:	481d      	ldr	r0, [pc, #116]	; (1d50 <_sercom_get_default_pad+0x170>)
    1cdc:	e78e      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1cde:	481d      	ldr	r0, [pc, #116]	; (1d54 <_sercom_get_default_pad+0x174>)
    1ce0:	e78c      	b.n	1bfc <_sercom_get_default_pad+0x1c>
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	42001000 	.word	0x42001000
    1ce8:	42001800 	.word	0x42001800
    1cec:	42001c00 	.word	0x42001c00
    1cf0:	42001400 	.word	0x42001400
    1cf4:	42000800 	.word	0x42000800
    1cf8:	42000c00 	.word	0x42000c00
    1cfc:	00050003 	.word	0x00050003
    1d00:	00060003 	.word	0x00060003
    1d04:	00070003 	.word	0x00070003
    1d08:	00010003 	.word	0x00010003
    1d0c:	001e0003 	.word	0x001e0003
    1d10:	001f0003 	.word	0x001f0003
    1d14:	00090003 	.word	0x00090003
    1d18:	000a0003 	.word	0x000a0003
    1d1c:	000b0003 	.word	0x000b0003
    1d20:	00110003 	.word	0x00110003
    1d24:	00120003 	.word	0x00120003
    1d28:	00130003 	.word	0x00130003
    1d2c:	000d0003 	.word	0x000d0003
    1d30:	000e0003 	.word	0x000e0003
    1d34:	000f0003 	.word	0x000f0003
    1d38:	00170003 	.word	0x00170003
    1d3c:	00180003 	.word	0x00180003
    1d40:	00190003 	.word	0x00190003
    1d44:	00040003 	.word	0x00040003
    1d48:	00080003 	.word	0x00080003
    1d4c:	00100003 	.word	0x00100003
    1d50:	000c0003 	.word	0x000c0003
    1d54:	00160003 	.word	0x00160003

00001d58 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1d58:	b530      	push	{r4, r5, lr}
    1d5a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1d5c:	4b0b      	ldr	r3, [pc, #44]	; (1d8c <_sercom_get_sercom_inst_index+0x34>)
    1d5e:	466a      	mov	r2, sp
    1d60:	cb32      	ldmia	r3!, {r1, r4, r5}
    1d62:	c232      	stmia	r2!, {r1, r4, r5}
    1d64:	cb32      	ldmia	r3!, {r1, r4, r5}
    1d66:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1d68:	9b00      	ldr	r3, [sp, #0]
    1d6a:	4283      	cmp	r3, r0
    1d6c:	d00b      	beq.n	1d86 <_sercom_get_sercom_inst_index+0x2e>
    1d6e:	2301      	movs	r3, #1
    1d70:	009a      	lsls	r2, r3, #2
    1d72:	4669      	mov	r1, sp
    1d74:	5852      	ldr	r2, [r2, r1]
    1d76:	4282      	cmp	r2, r0
    1d78:	d006      	beq.n	1d88 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d7a:	3301      	adds	r3, #1
    1d7c:	2b06      	cmp	r3, #6
    1d7e:	d1f7      	bne.n	1d70 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1d80:	2000      	movs	r0, #0
}
    1d82:	b007      	add	sp, #28
    1d84:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d86:	2300      	movs	r3, #0
			return i;
    1d88:	b2d8      	uxtb	r0, r3
    1d8a:	e7fa      	b.n	1d82 <_sercom_get_sercom_inst_index+0x2a>
    1d8c:	00005f6c 	.word	0x00005f6c

00001d90 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1d90:	4770      	bx	lr
	...

00001d94 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1d94:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1d96:	4b0a      	ldr	r3, [pc, #40]	; (1dc0 <_sercom_set_handler+0x2c>)
    1d98:	781b      	ldrb	r3, [r3, #0]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d10c      	bne.n	1db8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1d9e:	4f09      	ldr	r7, [pc, #36]	; (1dc4 <_sercom_set_handler+0x30>)
    1da0:	4e09      	ldr	r6, [pc, #36]	; (1dc8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1da2:	4d0a      	ldr	r5, [pc, #40]	; (1dcc <_sercom_set_handler+0x38>)
    1da4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1da6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1da8:	195a      	adds	r2, r3, r5
    1daa:	6014      	str	r4, [r2, #0]
    1dac:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1dae:	2b18      	cmp	r3, #24
    1db0:	d1f9      	bne.n	1da6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1db2:	2201      	movs	r2, #1
    1db4:	4b02      	ldr	r3, [pc, #8]	; (1dc0 <_sercom_set_handler+0x2c>)
    1db6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1db8:	0080      	lsls	r0, r0, #2
    1dba:	4b02      	ldr	r3, [pc, #8]	; (1dc4 <_sercom_set_handler+0x30>)
    1dbc:	50c1      	str	r1, [r0, r3]
}
    1dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dc0:	2000014a 	.word	0x2000014a
    1dc4:	2000014c 	.word	0x2000014c
    1dc8:	00001d91 	.word	0x00001d91
    1dcc:	200009f4 	.word	0x200009f4

00001dd0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1dd0:	b500      	push	{lr}
    1dd2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1dd4:	2309      	movs	r3, #9
    1dd6:	466a      	mov	r2, sp
    1dd8:	7013      	strb	r3, [r2, #0]
    1dda:	3301      	adds	r3, #1
    1ddc:	7053      	strb	r3, [r2, #1]
    1dde:	3301      	adds	r3, #1
    1de0:	7093      	strb	r3, [r2, #2]
    1de2:	3301      	adds	r3, #1
    1de4:	70d3      	strb	r3, [r2, #3]
    1de6:	3301      	adds	r3, #1
    1de8:	7113      	strb	r3, [r2, #4]
    1dea:	3301      	adds	r3, #1
    1dec:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1dee:	4b03      	ldr	r3, [pc, #12]	; (1dfc <_sercom_get_interrupt_vector+0x2c>)
    1df0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1df2:	466b      	mov	r3, sp
    1df4:	5618      	ldrsb	r0, [r3, r0]
}
    1df6:	b003      	add	sp, #12
    1df8:	bd00      	pop	{pc}
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	00001d59 	.word	0x00001d59

00001e00 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1e00:	b510      	push	{r4, lr}
    1e02:	4b02      	ldr	r3, [pc, #8]	; (1e0c <SERCOM0_Handler+0xc>)
    1e04:	681b      	ldr	r3, [r3, #0]
    1e06:	2000      	movs	r0, #0
    1e08:	4798      	blx	r3
    1e0a:	bd10      	pop	{r4, pc}
    1e0c:	2000014c 	.word	0x2000014c

00001e10 <SERCOM1_Handler>:
    1e10:	b510      	push	{r4, lr}
    1e12:	4b02      	ldr	r3, [pc, #8]	; (1e1c <SERCOM1_Handler+0xc>)
    1e14:	685b      	ldr	r3, [r3, #4]
    1e16:	2001      	movs	r0, #1
    1e18:	4798      	blx	r3
    1e1a:	bd10      	pop	{r4, pc}
    1e1c:	2000014c 	.word	0x2000014c

00001e20 <SERCOM2_Handler>:
    1e20:	b510      	push	{r4, lr}
    1e22:	4b02      	ldr	r3, [pc, #8]	; (1e2c <SERCOM2_Handler+0xc>)
    1e24:	689b      	ldr	r3, [r3, #8]
    1e26:	2002      	movs	r0, #2
    1e28:	4798      	blx	r3
    1e2a:	bd10      	pop	{r4, pc}
    1e2c:	2000014c 	.word	0x2000014c

00001e30 <SERCOM3_Handler>:
    1e30:	b510      	push	{r4, lr}
    1e32:	4b02      	ldr	r3, [pc, #8]	; (1e3c <SERCOM3_Handler+0xc>)
    1e34:	68db      	ldr	r3, [r3, #12]
    1e36:	2003      	movs	r0, #3
    1e38:	4798      	blx	r3
    1e3a:	bd10      	pop	{r4, pc}
    1e3c:	2000014c 	.word	0x2000014c

00001e40 <SERCOM4_Handler>:
    1e40:	b510      	push	{r4, lr}
    1e42:	4b02      	ldr	r3, [pc, #8]	; (1e4c <SERCOM4_Handler+0xc>)
    1e44:	691b      	ldr	r3, [r3, #16]
    1e46:	2004      	movs	r0, #4
    1e48:	4798      	blx	r3
    1e4a:	bd10      	pop	{r4, pc}
    1e4c:	2000014c 	.word	0x2000014c

00001e50 <SERCOM5_Handler>:
    1e50:	b510      	push	{r4, lr}
    1e52:	4b02      	ldr	r3, [pc, #8]	; (1e5c <SERCOM5_Handler+0xc>)
    1e54:	695b      	ldr	r3, [r3, #20]
    1e56:	2005      	movs	r0, #5
    1e58:	4798      	blx	r3
    1e5a:	bd10      	pop	{r4, pc}
    1e5c:	2000014c 	.word	0x2000014c

00001e60 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    1e60:	b570      	push	{r4, r5, r6, lr}
    1e62:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1e64:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1e66:	0020      	movs	r0, r4
    1e68:	4b0e      	ldr	r3, [pc, #56]	; (1ea4 <spi_reset+0x44>)
    1e6a:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e6c:	231f      	movs	r3, #31
    1e6e:	4018      	ands	r0, r3
    1e70:	3b1e      	subs	r3, #30
    1e72:	4083      	lsls	r3, r0
    1e74:	2280      	movs	r2, #128	; 0x80
    1e76:	490c      	ldr	r1, [pc, #48]	; (1ea8 <spi_reset+0x48>)
    1e78:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1e7a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1e7c:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d1fc      	bne.n	1e7c <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1e82:	338f      	adds	r3, #143	; 0x8f
    1e84:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1e86:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1e88:	6823      	ldr	r3, [r4, #0]
    1e8a:	2202      	movs	r2, #2
    1e8c:	4393      	bics	r3, r2
    1e8e:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1e90:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1e92:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    1e94:	2b00      	cmp	r3, #0
    1e96:	d1fc      	bne.n	1e92 <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    1e98:	6823      	ldr	r3, [r4, #0]
    1e9a:	2201      	movs	r2, #1
    1e9c:	4313      	orrs	r3, r2
    1e9e:	6023      	str	r3, [r4, #0]
}
    1ea0:	bd70      	pop	{r4, r5, r6, pc}
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	00001dd1 	.word	0x00001dd1
    1ea8:	e000e100 	.word	0xe000e100

00001eac <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    1eac:	b570      	push	{r4, r5, r6, lr}
    1eae:	b082      	sub	sp, #8
    1eb0:	0005      	movs	r5, r0
    1eb2:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1eb4:	2200      	movs	r2, #0
    1eb6:	466b      	mov	r3, sp
    1eb8:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1eba:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1ebc:	0030      	movs	r0, r6
    1ebe:	4b24      	ldr	r3, [pc, #144]	; (1f50 <spi_set_baudrate+0xa4>)
    1ec0:	4798      	blx	r3
    1ec2:	231f      	movs	r3, #31
    1ec4:	4018      	ands	r0, r3
    1ec6:	3b1e      	subs	r3, #30
    1ec8:	4083      	lsls	r3, r0
    1eca:	2280      	movs	r2, #128	; 0x80
    1ecc:	4921      	ldr	r1, [pc, #132]	; (1f54 <spi_set_baudrate+0xa8>)
    1ece:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1ed0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1ed2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	d1fc      	bne.n	1ed2 <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1ed8:	338f      	adds	r3, #143	; 0x8f
    1eda:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1edc:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1ede:	6833      	ldr	r3, [r6, #0]
    1ee0:	2202      	movs	r2, #2
    1ee2:	4393      	bics	r3, r2
    1ee4:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1ee6:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1ee8:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    1eea:	2b00      	cmp	r3, #0
    1eec:	d1fc      	bne.n	1ee8 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1eee:	4b1a      	ldr	r3, [pc, #104]	; (1f58 <spi_set_baudrate+0xac>)
    1ef0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1ef2:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1ef4:	b2c0      	uxtb	r0, r0
    1ef6:	4b19      	ldr	r3, [pc, #100]	; (1f5c <spi_set_baudrate+0xb0>)
    1ef8:	4798      	blx	r3
    1efa:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    1efc:	466b      	mov	r3, sp
    1efe:	1d9a      	adds	r2, r3, #6
    1f00:	0020      	movs	r0, r4
    1f02:	4b17      	ldr	r3, [pc, #92]	; (1f60 <spi_set_baudrate+0xb4>)
    1f04:	4798      	blx	r3
    1f06:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    1f08:	d003      	beq.n	1f12 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    1f0a:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    1f0c:	0020      	movs	r0, r4
    1f0e:	b002      	add	sp, #8
    1f10:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    1f12:	466b      	mov	r3, sp
    1f14:	3306      	adds	r3, #6
    1f16:	781b      	ldrb	r3, [r3, #0]
    1f18:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f1a:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1f1c:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    1f1e:	2b00      	cmp	r3, #0
    1f20:	d1fc      	bne.n	1f1c <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1f22:	0030      	movs	r0, r6
    1f24:	4b0a      	ldr	r3, [pc, #40]	; (1f50 <spi_set_baudrate+0xa4>)
    1f26:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1f28:	231f      	movs	r3, #31
    1f2a:	4018      	ands	r0, r3
    1f2c:	3b1e      	subs	r3, #30
    1f2e:	4083      	lsls	r3, r0
    1f30:	4a08      	ldr	r2, [pc, #32]	; (1f54 <spi_set_baudrate+0xa8>)
    1f32:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f34:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1f36:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d1fc      	bne.n	1f36 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1f3c:	6833      	ldr	r3, [r6, #0]
    1f3e:	2202      	movs	r2, #2
    1f40:	4313      	orrs	r3, r2
    1f42:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f44:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1f46:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1f48:	2b00      	cmp	r3, #0
    1f4a:	d1fc      	bne.n	1f46 <spi_set_baudrate+0x9a>
    1f4c:	e7de      	b.n	1f0c <spi_set_baudrate+0x60>
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	00001dd1 	.word	0x00001dd1
    1f54:	e000e100 	.word	0xe000e100
    1f58:	00001d59 	.word	0x00001d59
    1f5c:	0000326d 	.word	0x0000326d
    1f60:	00001ad7 	.word	0x00001ad7

00001f64 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f66:	b08b      	sub	sp, #44	; 0x2c
    1f68:	0005      	movs	r5, r0
    1f6a:	000c      	movs	r4, r1
    1f6c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1f6e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1f70:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1f72:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1f74:	079b      	lsls	r3, r3, #30
    1f76:	d501      	bpl.n	1f7c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1f78:	b00b      	add	sp, #44	; 0x2c
    1f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1f7c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1f7e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1f80:	07db      	lsls	r3, r3, #31
    1f82:	d4f9      	bmi.n	1f78 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1f84:	0008      	movs	r0, r1
    1f86:	4b60      	ldr	r3, [pc, #384]	; (2108 <STACK_SIZE+0x108>)
    1f88:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1f8a:	4a60      	ldr	r2, [pc, #384]	; (210c <STACK_SIZE+0x10c>)
    1f8c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1f8e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1f90:	2301      	movs	r3, #1
    1f92:	40bb      	lsls	r3, r7
    1f94:	430b      	orrs	r3, r1
    1f96:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1f98:	a909      	add	r1, sp, #36	; 0x24
    1f9a:	2724      	movs	r7, #36	; 0x24
    1f9c:	5df3      	ldrb	r3, [r6, r7]
    1f9e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1fa0:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1fa2:	b2c3      	uxtb	r3, r0
    1fa4:	9301      	str	r3, [sp, #4]
    1fa6:	0018      	movs	r0, r3
    1fa8:	4b59      	ldr	r3, [pc, #356]	; (2110 <STACK_SIZE+0x110>)
    1faa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1fac:	9801      	ldr	r0, [sp, #4]
    1fae:	4b59      	ldr	r3, [pc, #356]	; (2114 <STACK_SIZE+0x114>)
    1fb0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1fb2:	5df0      	ldrb	r0, [r6, r7]
    1fb4:	2100      	movs	r1, #0
    1fb6:	4b58      	ldr	r3, [pc, #352]	; (2118 <STACK_SIZE+0x118>)
    1fb8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1fba:	7833      	ldrb	r3, [r6, #0]
    1fbc:	2b01      	cmp	r3, #1
    1fbe:	d038      	beq.n	2032 <STACK_SIZE+0x32>
    1fc0:	002b      	movs	r3, r5
    1fc2:	330c      	adds	r3, #12
    1fc4:	0029      	movs	r1, r5
    1fc6:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    1fc8:	2200      	movs	r2, #0
    1fca:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1fcc:	428b      	cmp	r3, r1
    1fce:	d1fc      	bne.n	1fca <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    1fd0:	2300      	movs	r3, #0
    1fd2:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1fd4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1fd6:	2400      	movs	r4, #0
    1fd8:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1fda:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1fdc:	3336      	adds	r3, #54	; 0x36
    1fde:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    1fe0:	3301      	adds	r3, #1
    1fe2:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    1fe4:	3301      	adds	r3, #1
    1fe6:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    1fe8:	3b35      	subs	r3, #53	; 0x35
    1fea:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    1fec:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1fee:	6828      	ldr	r0, [r5, #0]
    1ff0:	4b45      	ldr	r3, [pc, #276]	; (2108 <STACK_SIZE+0x108>)
    1ff2:	4798      	blx	r3
    1ff4:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1ff6:	4949      	ldr	r1, [pc, #292]	; (211c <STACK_SIZE+0x11c>)
    1ff8:	4b49      	ldr	r3, [pc, #292]	; (2120 <STACK_SIZE+0x120>)
    1ffa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1ffc:	00bf      	lsls	r7, r7, #2
    1ffe:	4b49      	ldr	r3, [pc, #292]	; (2124 <STACK_SIZE+0x124>)
    2000:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2002:	682f      	ldr	r7, [r5, #0]
    2004:	ab04      	add	r3, sp, #16
    2006:	2280      	movs	r2, #128	; 0x80
    2008:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    200a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    200c:	3a7f      	subs	r2, #127	; 0x7f
    200e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2010:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    2012:	7833      	ldrb	r3, [r6, #0]
    2014:	2b00      	cmp	r3, #0
    2016:	d102      	bne.n	201e <STACK_SIZE+0x1e>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2018:	2200      	movs	r2, #0
    201a:	ab04      	add	r3, sp, #16
    201c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    201e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2020:	9305      	str	r3, [sp, #20]
    2022:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2024:	9306      	str	r3, [sp, #24]
    2026:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2028:	9307      	str	r3, [sp, #28]
    202a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    202c:	9308      	str	r3, [sp, #32]
    202e:	2400      	movs	r4, #0
    2030:	e00b      	b.n	204a <STACK_SIZE+0x4a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    2032:	6823      	ldr	r3, [r4, #0]
    2034:	220c      	movs	r2, #12
    2036:	4313      	orrs	r3, r2
    2038:	6023      	str	r3, [r4, #0]
    203a:	e7c1      	b.n	1fc0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    203c:	0038      	movs	r0, r7
    203e:	4b3a      	ldr	r3, [pc, #232]	; (2128 <STACK_SIZE+0x128>)
    2040:	4798      	blx	r3
    2042:	e00a      	b.n	205a <STACK_SIZE+0x5a>
    2044:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2046:	2c04      	cmp	r4, #4
    2048:	d010      	beq.n	206c <STACK_SIZE+0x6c>
    204a:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    204c:	00a3      	lsls	r3, r4, #2
    204e:	aa02      	add	r2, sp, #8
    2050:	200c      	movs	r0, #12
    2052:	1812      	adds	r2, r2, r0
    2054:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    2056:	2800      	cmp	r0, #0
    2058:	d0f0      	beq.n	203c <STACK_SIZE+0x3c>
		if (current_pinmux != PINMUX_UNUSED) {
    205a:	1c43      	adds	r3, r0, #1
    205c:	d0f2      	beq.n	2044 <STACK_SIZE+0x44>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    205e:	a904      	add	r1, sp, #16
    2060:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2062:	0c00      	lsrs	r0, r0, #16
    2064:	b2c0      	uxtb	r0, r0
    2066:	4b31      	ldr	r3, [pc, #196]	; (212c <STACK_SIZE+0x12c>)
    2068:	4798      	blx	r3
    206a:	e7eb      	b.n	2044 <STACK_SIZE+0x44>
	module->mode             = config->mode;
    206c:	7833      	ldrb	r3, [r6, #0]
    206e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    2070:	7c33      	ldrb	r3, [r6, #16]
    2072:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    2074:	7cb3      	ldrb	r3, [r6, #18]
    2076:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    2078:	7d33      	ldrb	r3, [r6, #20]
    207a:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    207c:	2200      	movs	r2, #0
    207e:	ab02      	add	r3, sp, #8
    2080:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    2082:	7833      	ldrb	r3, [r6, #0]
    2084:	2b01      	cmp	r3, #1
    2086:	d028      	beq.n	20da <STACK_SIZE+0xda>
	ctrla |= config->transfer_mode;
    2088:	6873      	ldr	r3, [r6, #4]
    208a:	68b2      	ldr	r2, [r6, #8]
    208c:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    208e:	68f2      	ldr	r2, [r6, #12]
    2090:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    2092:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    2094:	7c72      	ldrb	r2, [r6, #17]
    2096:	2a00      	cmp	r2, #0
    2098:	d103      	bne.n	20a2 <STACK_SIZE+0xa2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    209a:	4a25      	ldr	r2, [pc, #148]	; (2130 <STACK_SIZE+0x130>)
    209c:	7892      	ldrb	r2, [r2, #2]
    209e:	0792      	lsls	r2, r2, #30
    20a0:	d501      	bpl.n	20a6 <STACK_SIZE+0xa6>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    20a2:	2280      	movs	r2, #128	; 0x80
    20a4:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    20a6:	7cb2      	ldrb	r2, [r6, #18]
    20a8:	2a00      	cmp	r2, #0
    20aa:	d002      	beq.n	20b2 <STACK_SIZE+0xb2>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    20ac:	2280      	movs	r2, #128	; 0x80
    20ae:	0292      	lsls	r2, r2, #10
    20b0:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    20b2:	7cf2      	ldrb	r2, [r6, #19]
    20b4:	2a00      	cmp	r2, #0
    20b6:	d002      	beq.n	20be <STACK_SIZE+0xbe>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    20b8:	2280      	movs	r2, #128	; 0x80
    20ba:	0092      	lsls	r2, r2, #2
    20bc:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    20be:	7d32      	ldrb	r2, [r6, #20]
    20c0:	2a00      	cmp	r2, #0
    20c2:	d002      	beq.n	20ca <STACK_SIZE+0xca>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    20c4:	2280      	movs	r2, #128	; 0x80
    20c6:	0192      	lsls	r2, r2, #6
    20c8:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    20ca:	683a      	ldr	r2, [r7, #0]
    20cc:	4313      	orrs	r3, r2
    20ce:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    20d0:	687b      	ldr	r3, [r7, #4]
    20d2:	430b      	orrs	r3, r1
    20d4:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    20d6:	2000      	movs	r0, #0
    20d8:	e74e      	b.n	1f78 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    20da:	6828      	ldr	r0, [r5, #0]
    20dc:	4b0a      	ldr	r3, [pc, #40]	; (2108 <STACK_SIZE+0x108>)
    20de:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    20e0:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    20e2:	b2c0      	uxtb	r0, r0
    20e4:	4b13      	ldr	r3, [pc, #76]	; (2134 <STACK_SIZE+0x134>)
    20e6:	4798      	blx	r3
    20e8:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    20ea:	ab02      	add	r3, sp, #8
    20ec:	1d9a      	adds	r2, r3, #6
    20ee:	69b0      	ldr	r0, [r6, #24]
    20f0:	4b11      	ldr	r3, [pc, #68]	; (2138 <STACK_SIZE+0x138>)
    20f2:	4798      	blx	r3
    20f4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    20f6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    20f8:	2b00      	cmp	r3, #0
    20fa:	d000      	beq.n	20fe <STACK_SIZE+0xfe>
    20fc:	e73c      	b.n	1f78 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    20fe:	ab02      	add	r3, sp, #8
    2100:	3306      	adds	r3, #6
    2102:	781b      	ldrb	r3, [r3, #0]
    2104:	733b      	strb	r3, [r7, #12]
    2106:	e7bf      	b.n	2088 <STACK_SIZE+0x88>
    2108:	00001d59 	.word	0x00001d59
    210c:	40000400 	.word	0x40000400
    2110:	00003251 	.word	0x00003251
    2114:	000031c5 	.word	0x000031c5
    2118:	00001b95 	.word	0x00001b95
    211c:	000023d1 	.word	0x000023d1
    2120:	00001d95 	.word	0x00001d95
    2124:	200009f4 	.word	0x200009f4
    2128:	00001be1 	.word	0x00001be1
    212c:	00003349 	.word	0x00003349
    2130:	41002000 	.word	0x41002000
    2134:	0000326d 	.word	0x0000326d
    2138:	00001ad7 	.word	0x00001ad7

0000213c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    213c:	b5f0      	push	{r4, r5, r6, r7, lr}
    213e:	46d6      	mov	lr, sl
    2140:	4647      	mov	r7, r8
    2142:	b580      	push	{r7, lr}
    2144:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2146:	2438      	movs	r4, #56	; 0x38
    2148:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    214a:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    214c:	2d05      	cmp	r5, #5
    214e:	d002      	beq.n	2156 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2150:	3412      	adds	r4, #18
	if (length == 0) {
    2152:	2a00      	cmp	r2, #0
    2154:	d105      	bne.n	2162 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    2156:	0020      	movs	r0, r4
    2158:	b003      	add	sp, #12
    215a:	bc0c      	pop	{r2, r3}
    215c:	4690      	mov	r8, r2
    215e:	469a      	mov	sl, r3
    2160:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    2162:	79c4      	ldrb	r4, [r0, #7]
    2164:	2c00      	cmp	r4, #0
    2166:	d144      	bne.n	21f2 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    2168:	341c      	adds	r4, #28
    216a:	e7f4      	b.n	2156 <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    216c:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    216e:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    2170:	423c      	tst	r4, r7
    2172:	d0fc      	beq.n	216e <spi_read_buffer_wait+0x32>
    2174:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2176:	423c      	tst	r4, r7
    2178:	d01a      	beq.n	21b0 <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    217a:	4644      	mov	r4, r8
    217c:	62ac      	str	r4, [r5, #40]	; 0x28
    217e:	e017      	b.n	21b0 <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2180:	7984      	ldrb	r4, [r0, #6]
    2182:	2c01      	cmp	r4, #1
    2184:	d026      	beq.n	21d4 <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2186:	6aad      	ldr	r5, [r5, #40]	; 0x28
    2188:	b2ec      	uxtb	r4, r5
    218a:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    218c:	9c01      	ldr	r4, [sp, #4]
    218e:	2c00      	cmp	r4, #0
    2190:	d13a      	bne.n	2208 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    2192:	1c75      	adds	r5, r6, #1
    2194:	b2ad      	uxth	r5, r5
    2196:	4664      	mov	r4, ip
    2198:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    219a:	7984      	ldrb	r4, [r0, #6]
    219c:	2c01      	cmp	r4, #1
    219e:	d01e      	beq.n	21de <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    21a0:	002e      	movs	r6, r5
	while (length--) {
    21a2:	3a01      	subs	r2, #1
    21a4:	b292      	uxth	r2, r2
    21a6:	4552      	cmp	r2, sl
    21a8:	d01f      	beq.n	21ea <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    21aa:	7944      	ldrb	r4, [r0, #5]
    21ac:	2c01      	cmp	r4, #1
    21ae:	d0dd      	beq.n	216c <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    21b0:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    21b2:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    21b4:	421c      	tst	r4, r3
    21b6:	d0fc      	beq.n	21b2 <spi_read_buffer_wait+0x76>
    21b8:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    21ba:	421c      	tst	r4, r3
    21bc:	d017      	beq.n	21ee <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    21be:	8b6c      	ldrh	r4, [r5, #26]
    21c0:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    21c2:	2400      	movs	r4, #0
    21c4:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    21c6:	4664      	mov	r4, ip
    21c8:	421c      	tst	r4, r3
    21ca:	d0d9      	beq.n	2180 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    21cc:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    21ce:	241e      	movs	r4, #30
    21d0:	9401      	str	r4, [sp, #4]
    21d2:	e7d5      	b.n	2180 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    21d4:	6aac      	ldr	r4, [r5, #40]	; 0x28
    21d6:	05e4      	lsls	r4, r4, #23
    21d8:	0de4      	lsrs	r4, r4, #23
    21da:	46a4      	mov	ip, r4
    21dc:	e7d6      	b.n	218c <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    21de:	3602      	adds	r6, #2
    21e0:	b2b6      	uxth	r6, r6
    21e2:	4664      	mov	r4, ip
    21e4:	0a24      	lsrs	r4, r4, #8
    21e6:	554c      	strb	r4, [r1, r5]
    21e8:	e7db      	b.n	21a2 <spi_read_buffer_wait+0x66>
    21ea:	9c01      	ldr	r4, [sp, #4]
    21ec:	e7b3      	b.n	2156 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    21ee:	2410      	movs	r4, #16
    21f0:	e7b1      	b.n	2156 <spi_read_buffer_wait+0x1a>
	while (length--) {
    21f2:	3a01      	subs	r2, #1
    21f4:	b292      	uxth	r2, r2
    21f6:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    21f8:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    21fa:	05db      	lsls	r3, r3, #23
    21fc:	0ddb      	lsrs	r3, r3, #23
    21fe:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    2200:	2304      	movs	r3, #4
	while (length--) {
    2202:	4c02      	ldr	r4, [pc, #8]	; (220c <spi_read_buffer_wait+0xd0>)
    2204:	46a2      	mov	sl, r4
    2206:	e7d0      	b.n	21aa <spi_read_buffer_wait+0x6e>
    2208:	9c01      	ldr	r4, [sp, #4]
    220a:	e7a4      	b.n	2156 <spi_read_buffer_wait+0x1a>
    220c:	0000ffff 	.word	0x0000ffff

00002210 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    2210:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    2212:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2214:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    2216:	2c01      	cmp	r4, #1
    2218:	d001      	beq.n	221e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    221a:	0018      	movs	r0, r3
    221c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    221e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    2220:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    2222:	2c00      	cmp	r4, #0
    2224:	d1f9      	bne.n	221a <spi_select_slave+0xa>
		if (select) {
    2226:	2a00      	cmp	r2, #0
    2228:	d058      	beq.n	22dc <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    222a:	784b      	ldrb	r3, [r1, #1]
    222c:	2b00      	cmp	r3, #0
    222e:	d044      	beq.n	22ba <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2230:	6803      	ldr	r3, [r0, #0]
    2232:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    2234:	07db      	lsls	r3, r3, #31
    2236:	d410      	bmi.n	225a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    2238:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    223a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    223c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    223e:	2900      	cmp	r1, #0
    2240:	d104      	bne.n	224c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    2242:	0953      	lsrs	r3, r2, #5
    2244:	01db      	lsls	r3, r3, #7
    2246:	492e      	ldr	r1, [pc, #184]	; (2300 <spi_select_slave+0xf0>)
    2248:	468c      	mov	ip, r1
    224a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    224c:	211f      	movs	r1, #31
    224e:	4011      	ands	r1, r2
    2250:	2201      	movs	r2, #1
    2252:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2254:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    2256:	2305      	movs	r3, #5
    2258:	e7df      	b.n	221a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    225a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    225c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    225e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2260:	2c00      	cmp	r4, #0
    2262:	d104      	bne.n	226e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    2264:	0953      	lsrs	r3, r2, #5
    2266:	01db      	lsls	r3, r3, #7
    2268:	4c25      	ldr	r4, [pc, #148]	; (2300 <spi_select_slave+0xf0>)
    226a:	46a4      	mov	ip, r4
    226c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    226e:	241f      	movs	r4, #31
    2270:	4014      	ands	r4, r2
    2272:	2201      	movs	r2, #1
    2274:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2276:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2278:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    227a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    227c:	07d2      	lsls	r2, r2, #31
    227e:	d501      	bpl.n	2284 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2280:	788a      	ldrb	r2, [r1, #2]
    2282:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    2284:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    2286:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    2288:	2a00      	cmp	r2, #0
    228a:	d1c6      	bne.n	221a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    228c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    228e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2290:	7e13      	ldrb	r3, [r2, #24]
    2292:	420b      	tst	r3, r1
    2294:	d0fc      	beq.n	2290 <spi_select_slave+0x80>
    2296:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    2298:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    229a:	0749      	lsls	r1, r1, #29
    229c:	d5bd      	bpl.n	221a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    229e:	8b53      	ldrh	r3, [r2, #26]
    22a0:	075b      	lsls	r3, r3, #29
    22a2:	d501      	bpl.n	22a8 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    22a4:	2304      	movs	r3, #4
    22a6:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    22a8:	7983      	ldrb	r3, [r0, #6]
    22aa:	2b01      	cmp	r3, #1
    22ac:	d002      	beq.n	22b4 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    22ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    22b0:	2300      	movs	r3, #0
    22b2:	e7b2      	b.n	221a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    22b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    22b6:	2300      	movs	r3, #0
    22b8:	e7af      	b.n	221a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    22ba:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    22bc:	09d1      	lsrs	r1, r2, #7
		return NULL;
    22be:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    22c0:	2900      	cmp	r1, #0
    22c2:	d104      	bne.n	22ce <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    22c4:	0953      	lsrs	r3, r2, #5
    22c6:	01db      	lsls	r3, r3, #7
    22c8:	490d      	ldr	r1, [pc, #52]	; (2300 <spi_select_slave+0xf0>)
    22ca:	468c      	mov	ip, r1
    22cc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    22ce:	211f      	movs	r1, #31
    22d0:	4011      	ands	r1, r2
    22d2:	2201      	movs	r2, #1
    22d4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    22d6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    22d8:	2300      	movs	r3, #0
    22da:	e79e      	b.n	221a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    22dc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    22de:	09d1      	lsrs	r1, r2, #7
		return NULL;
    22e0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    22e2:	2900      	cmp	r1, #0
    22e4:	d104      	bne.n	22f0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    22e6:	0953      	lsrs	r3, r2, #5
    22e8:	01db      	lsls	r3, r3, #7
    22ea:	4905      	ldr	r1, [pc, #20]	; (2300 <spi_select_slave+0xf0>)
    22ec:	468c      	mov	ip, r1
    22ee:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    22f0:	211f      	movs	r1, #31
    22f2:	4011      	ands	r1, r2
    22f4:	2201      	movs	r2, #1
    22f6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    22f8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    22fa:	2300      	movs	r3, #0
    22fc:	e78d      	b.n	221a <spi_select_slave+0xa>
    22fe:	46c0      	nop			; (mov r8, r8)
    2300:	41004400 	.word	0x41004400

00002304 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2304:	b5f0      	push	{r4, r5, r6, r7, lr}
    2306:	46de      	mov	lr, fp
    2308:	4657      	mov	r7, sl
    230a:	464e      	mov	r6, r9
    230c:	4645      	mov	r5, r8
    230e:	b5e0      	push	{r5, r6, r7, lr}
    2310:	b083      	sub	sp, #12
    2312:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2314:	2338      	movs	r3, #56	; 0x38
    2316:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2318:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    231a:	2c05      	cmp	r4, #5
    231c:	d002      	beq.n	2324 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    231e:	3312      	adds	r3, #18
	if (length == 0) {
    2320:	2a00      	cmp	r2, #0
    2322:	d14b      	bne.n	23bc <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    2324:	0018      	movs	r0, r3
    2326:	b003      	add	sp, #12
    2328:	bc3c      	pop	{r2, r3, r4, r5}
    232a:	4690      	mov	r8, r2
    232c:	4699      	mov	r9, r3
    232e:	46a2      	mov	sl, r4
    2330:	46ab      	mov	fp, r5
    2332:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    2334:	3702      	adds	r7, #2
    2336:	b2bf      	uxth	r7, r7
    2338:	4641      	mov	r1, r8
    233a:	4653      	mov	r3, sl
    233c:	5c59      	ldrb	r1, [r3, r1]
    233e:	0209      	lsls	r1, r1, #8
    2340:	465b      	mov	r3, fp
    2342:	430b      	orrs	r3, r1
    2344:	e018      	b.n	2378 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2346:	7983      	ldrb	r3, [r0, #6]
    2348:	2b01      	cmp	r3, #1
    234a:	d02a      	beq.n	23a2 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    234c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    234e:	3e01      	subs	r6, #1
    2350:	b2b6      	uxth	r6, r6
    2352:	4566      	cmp	r6, ip
    2354:	d027      	beq.n	23a6 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2356:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2358:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    235a:	4223      	tst	r3, r4
    235c:	d0fc      	beq.n	2358 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    235e:	1c7b      	adds	r3, r7, #1
    2360:	b29b      	uxth	r3, r3
    2362:	4698      	mov	r8, r3
    2364:	4653      	mov	r3, sl
    2366:	5ddb      	ldrb	r3, [r3, r7]
    2368:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    236a:	7981      	ldrb	r1, [r0, #6]
    236c:	2901      	cmp	r1, #1
    236e:	d0e1      	beq.n	2334 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    2370:	4669      	mov	r1, sp
    2372:	80cb      	strh	r3, [r1, #6]
    2374:	88cb      	ldrh	r3, [r1, #6]
    2376:	4647      	mov	r7, r8
    2378:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    237a:	4221      	tst	r1, r4
    237c:	d002      	beq.n	2384 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    237e:	05db      	lsls	r3, r3, #23
    2380:	0ddb      	lsrs	r3, r3, #23
    2382:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    2384:	79c3      	ldrb	r3, [r0, #7]
    2386:	2b00      	cmp	r3, #0
    2388:	d0e1      	beq.n	234e <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    238a:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    238c:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    238e:	422b      	tst	r3, r5
    2390:	d0fc      	beq.n	238c <spi_write_buffer_wait+0x88>
    2392:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    2394:	422b      	tst	r3, r5
    2396:	d0da      	beq.n	234e <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2398:	8b53      	ldrh	r3, [r2, #26]
    239a:	422b      	tst	r3, r5
    239c:	d0d3      	beq.n	2346 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    239e:	8355      	strh	r5, [r2, #26]
    23a0:	e7d1      	b.n	2346 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    23a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    23a4:	e7d3      	b.n	234e <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    23a6:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    23a8:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    23aa:	2a01      	cmp	r2, #1
    23ac:	d1ba      	bne.n	2324 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    23ae:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    23b0:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    23b2:	7e0b      	ldrb	r3, [r1, #24]
    23b4:	4213      	tst	r3, r2
    23b6:	d0fc      	beq.n	23b2 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    23b8:	2300      	movs	r3, #0
    23ba:	e7b3      	b.n	2324 <spi_write_buffer_wait+0x20>
	while (length--) {
    23bc:	3a01      	subs	r2, #1
    23be:	b296      	uxth	r6, r2
    23c0:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    23c2:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    23c4:	2504      	movs	r5, #4
	while (length--) {
    23c6:	4b01      	ldr	r3, [pc, #4]	; (23cc <spi_write_buffer_wait+0xc8>)
    23c8:	469c      	mov	ip, r3
    23ca:	e7c4      	b.n	2356 <spi_write_buffer_wait+0x52>
    23cc:	0000ffff 	.word	0x0000ffff

000023d0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    23d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    23d2:	0080      	lsls	r0, r0, #2
    23d4:	4b70      	ldr	r3, [pc, #448]	; (2598 <_spi_interrupt_handler+0x1c8>)
    23d6:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    23d8:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    23da:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    23dc:	5ce7      	ldrb	r7, [r4, r3]
    23de:	2236      	movs	r2, #54	; 0x36
    23e0:	5ca2      	ldrb	r2, [r4, r2]
    23e2:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    23e4:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    23e6:	7db5      	ldrb	r5, [r6, #22]
    23e8:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    23ea:	07eb      	lsls	r3, r5, #31
    23ec:	d502      	bpl.n	23f4 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    23ee:	7963      	ldrb	r3, [r4, #5]
    23f0:	2b01      	cmp	r3, #1
    23f2:	d01e      	beq.n	2432 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    23f4:	076b      	lsls	r3, r5, #29
    23f6:	d511      	bpl.n	241c <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    23f8:	8b73      	ldrh	r3, [r6, #26]
    23fa:	075b      	lsls	r3, r3, #29
    23fc:	d55a      	bpl.n	24b4 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    23fe:	7a63      	ldrb	r3, [r4, #9]
    2400:	2b01      	cmp	r3, #1
    2402:	d008      	beq.n	2416 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2404:	221e      	movs	r2, #30
    2406:	2338      	movs	r3, #56	; 0x38
    2408:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    240a:	3b35      	subs	r3, #53	; 0x35
    240c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    240e:	3302      	adds	r3, #2
    2410:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    2412:	073b      	lsls	r3, r7, #28
    2414:	d44a      	bmi.n	24ac <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    2416:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2418:	2304      	movs	r3, #4
    241a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    241c:	07ab      	lsls	r3, r5, #30
    241e:	d503      	bpl.n	2428 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2420:	7963      	ldrb	r3, [r4, #5]
    2422:	2b01      	cmp	r3, #1
    2424:	d100      	bne.n	2428 <_spi_interrupt_handler+0x58>
    2426:	e097      	b.n	2558 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    2428:	b26d      	sxtb	r5, r5
    242a:	2d00      	cmp	r5, #0
    242c:	da00      	bge.n	2430 <_spi_interrupt_handler+0x60>
    242e:	e0a9      	b.n	2584 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    2430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    2432:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2434:	2b00      	cmp	r3, #0
    2436:	d022      	beq.n	247e <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    2438:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    243a:	2b00      	cmp	r3, #0
    243c:	d0da      	beq.n	23f4 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    243e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2440:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2442:	7813      	ldrb	r3, [r2, #0]
    2444:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    2446:	1c50      	adds	r0, r2, #1
    2448:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    244a:	79a0      	ldrb	r0, [r4, #6]
    244c:	2801      	cmp	r0, #1
    244e:	d027      	beq.n	24a0 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2450:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    2452:	05db      	lsls	r3, r3, #23
    2454:	0ddb      	lsrs	r3, r3, #23
    2456:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    2458:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    245a:	3b01      	subs	r3, #1
    245c:	b29b      	uxth	r3, r3
    245e:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    2460:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2462:	b29b      	uxth	r3, r3
    2464:	2b00      	cmp	r3, #0
    2466:	d1c5      	bne.n	23f4 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2468:	3301      	adds	r3, #1
    246a:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    246c:	7a63      	ldrb	r3, [r4, #9]
    246e:	2b01      	cmp	r3, #1
    2470:	d1c0      	bne.n	23f4 <_spi_interrupt_handler+0x24>
    2472:	79e3      	ldrb	r3, [r4, #7]
    2474:	2b00      	cmp	r3, #0
    2476:	d1bd      	bne.n	23f4 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2478:	3302      	adds	r3, #2
    247a:	75b3      	strb	r3, [r6, #22]
    247c:	e7ba      	b.n	23f4 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    247e:	4b47      	ldr	r3, [pc, #284]	; (259c <_spi_interrupt_handler+0x1cc>)
    2480:	881b      	ldrh	r3, [r3, #0]
    2482:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2484:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2486:	3b01      	subs	r3, #1
    2488:	b29b      	uxth	r3, r3
    248a:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    248c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    248e:	b29b      	uxth	r3, r3
    2490:	2b00      	cmp	r3, #0
    2492:	d101      	bne.n	2498 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2494:	3301      	adds	r3, #1
    2496:	7533      	strb	r3, [r6, #20]
		if (0
    2498:	7963      	ldrb	r3, [r4, #5]
    249a:	2b01      	cmp	r3, #1
    249c:	d0cc      	beq.n	2438 <_spi_interrupt_handler+0x68>
    249e:	e7a9      	b.n	23f4 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    24a0:	7850      	ldrb	r0, [r2, #1]
    24a2:	0200      	lsls	r0, r0, #8
    24a4:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    24a6:	3202      	adds	r2, #2
    24a8:	62e2      	str	r2, [r4, #44]	; 0x2c
    24aa:	e7d2      	b.n	2452 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    24ac:	0020      	movs	r0, r4
    24ae:	69a3      	ldr	r3, [r4, #24]
    24b0:	4798      	blx	r3
    24b2:	e7b0      	b.n	2416 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    24b4:	7a63      	ldrb	r3, [r4, #9]
    24b6:	2b01      	cmp	r3, #1
    24b8:	d028      	beq.n	250c <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    24ba:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    24bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    24be:	05db      	lsls	r3, r3, #23
    24c0:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    24c2:	b2da      	uxtb	r2, r3
    24c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    24c6:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    24c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    24ca:	1c51      	adds	r1, r2, #1
    24cc:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    24ce:	79a1      	ldrb	r1, [r4, #6]
    24d0:	2901      	cmp	r1, #1
    24d2:	d034      	beq.n	253e <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    24d4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    24d6:	3b01      	subs	r3, #1
    24d8:	b29b      	uxth	r3, r3
    24da:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    24dc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    24de:	b29b      	uxth	r3, r3
    24e0:	2b00      	cmp	r3, #0
    24e2:	d000      	beq.n	24e6 <_spi_interrupt_handler+0x116>
    24e4:	e79a      	b.n	241c <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    24e6:	2200      	movs	r2, #0
    24e8:	3338      	adds	r3, #56	; 0x38
    24ea:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    24ec:	3b34      	subs	r3, #52	; 0x34
    24ee:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    24f0:	7a63      	ldrb	r3, [r4, #9]
    24f2:	2b02      	cmp	r3, #2
    24f4:	d029      	beq.n	254a <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    24f6:	7a63      	ldrb	r3, [r4, #9]
    24f8:	2b00      	cmp	r3, #0
    24fa:	d000      	beq.n	24fe <_spi_interrupt_handler+0x12e>
    24fc:	e78e      	b.n	241c <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    24fe:	07bb      	lsls	r3, r7, #30
    2500:	d400      	bmi.n	2504 <_spi_interrupt_handler+0x134>
    2502:	e78b      	b.n	241c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2504:	0020      	movs	r0, r4
    2506:	6923      	ldr	r3, [r4, #16]
    2508:	4798      	blx	r3
    250a:	e787      	b.n	241c <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    250c:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2510:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2512:	3b01      	subs	r3, #1
    2514:	b29b      	uxth	r3, r3
    2516:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    2518:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    251a:	b29b      	uxth	r3, r3
    251c:	2b00      	cmp	r3, #0
    251e:	d000      	beq.n	2522 <_spi_interrupt_handler+0x152>
    2520:	e77c      	b.n	241c <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2522:	3304      	adds	r3, #4
    2524:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    2526:	2200      	movs	r2, #0
    2528:	3334      	adds	r3, #52	; 0x34
    252a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    252c:	3b35      	subs	r3, #53	; 0x35
    252e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    2530:	07fb      	lsls	r3, r7, #31
    2532:	d400      	bmi.n	2536 <_spi_interrupt_handler+0x166>
    2534:	e772      	b.n	241c <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    2536:	0020      	movs	r0, r4
    2538:	68e3      	ldr	r3, [r4, #12]
    253a:	4798      	blx	r3
    253c:	e76e      	b.n	241c <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    253e:	0a1b      	lsrs	r3, r3, #8
    2540:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    2542:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2544:	3301      	adds	r3, #1
    2546:	62a3      	str	r3, [r4, #40]	; 0x28
    2548:	e7c4      	b.n	24d4 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    254a:	077b      	lsls	r3, r7, #29
    254c:	d400      	bmi.n	2550 <_spi_interrupt_handler+0x180>
    254e:	e765      	b.n	241c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    2550:	0020      	movs	r0, r4
    2552:	6963      	ldr	r3, [r4, #20]
    2554:	4798      	blx	r3
    2556:	e761      	b.n	241c <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2558:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    255a:	2b01      	cmp	r3, #1
    255c:	d000      	beq.n	2560 <_spi_interrupt_handler+0x190>
    255e:	e763      	b.n	2428 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2560:	79e3      	ldrb	r3, [r4, #7]
    2562:	2b00      	cmp	r3, #0
    2564:	d000      	beq.n	2568 <_spi_interrupt_handler+0x198>
    2566:	e75f      	b.n	2428 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2568:	3302      	adds	r3, #2
    256a:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    256c:	3301      	adds	r3, #1
    256e:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    2570:	2200      	movs	r2, #0
    2572:	3335      	adds	r3, #53	; 0x35
    2574:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    2576:	07fb      	lsls	r3, r7, #31
    2578:	d400      	bmi.n	257c <_spi_interrupt_handler+0x1ac>
    257a:	e755      	b.n	2428 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    257c:	0020      	movs	r0, r4
    257e:	68e3      	ldr	r3, [r4, #12]
    2580:	4798      	blx	r3
    2582:	e751      	b.n	2428 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2584:	2380      	movs	r3, #128	; 0x80
    2586:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2588:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    258a:	067b      	lsls	r3, r7, #25
    258c:	d400      	bmi.n	2590 <_spi_interrupt_handler+0x1c0>
    258e:	e74f      	b.n	2430 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    2590:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2592:	0020      	movs	r0, r4
    2594:	4798      	blx	r3
}
    2596:	e74b      	b.n	2430 <_spi_interrupt_handler+0x60>
    2598:	200009f4 	.word	0x200009f4
    259c:	20000a0c 	.word	0x20000a0c

000025a0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    25a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25a2:	46de      	mov	lr, fp
    25a4:	4657      	mov	r7, sl
    25a6:	464e      	mov	r6, r9
    25a8:	4645      	mov	r5, r8
    25aa:	b5e0      	push	{r5, r6, r7, lr}
    25ac:	b091      	sub	sp, #68	; 0x44
    25ae:	0005      	movs	r5, r0
    25b0:	000c      	movs	r4, r1
    25b2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    25b4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    25b6:	0008      	movs	r0, r1
    25b8:	4bbc      	ldr	r3, [pc, #752]	; (28ac <usart_init+0x30c>)
    25ba:	4798      	blx	r3
    25bc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    25be:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    25c0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    25c2:	07db      	lsls	r3, r3, #31
    25c4:	d506      	bpl.n	25d4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    25c6:	b011      	add	sp, #68	; 0x44
    25c8:	bc3c      	pop	{r2, r3, r4, r5}
    25ca:	4690      	mov	r8, r2
    25cc:	4699      	mov	r9, r3
    25ce:	46a2      	mov	sl, r4
    25d0:	46ab      	mov	fp, r5
    25d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    25d4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    25d6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    25d8:	079b      	lsls	r3, r3, #30
    25da:	d4f4      	bmi.n	25c6 <usart_init+0x26>
    25dc:	49b4      	ldr	r1, [pc, #720]	; (28b0 <usart_init+0x310>)
    25de:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    25e0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    25e2:	2301      	movs	r3, #1
    25e4:	40bb      	lsls	r3, r7
    25e6:	4303      	orrs	r3, r0
    25e8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    25ea:	a90f      	add	r1, sp, #60	; 0x3c
    25ec:	272d      	movs	r7, #45	; 0x2d
    25ee:	5df3      	ldrb	r3, [r6, r7]
    25f0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    25f2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    25f4:	b2d3      	uxtb	r3, r2
    25f6:	9302      	str	r3, [sp, #8]
    25f8:	0018      	movs	r0, r3
    25fa:	4bae      	ldr	r3, [pc, #696]	; (28b4 <usart_init+0x314>)
    25fc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    25fe:	9802      	ldr	r0, [sp, #8]
    2600:	4bad      	ldr	r3, [pc, #692]	; (28b8 <usart_init+0x318>)
    2602:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2604:	5df0      	ldrb	r0, [r6, r7]
    2606:	2100      	movs	r1, #0
    2608:	4bac      	ldr	r3, [pc, #688]	; (28bc <usart_init+0x31c>)
    260a:	4798      	blx	r3
	module->character_size = config->character_size;
    260c:	7af3      	ldrb	r3, [r6, #11]
    260e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2610:	2324      	movs	r3, #36	; 0x24
    2612:	5cf3      	ldrb	r3, [r6, r3]
    2614:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2616:	2325      	movs	r3, #37	; 0x25
    2618:	5cf3      	ldrb	r3, [r6, r3]
    261a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    261c:	7ef3      	ldrb	r3, [r6, #27]
    261e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2620:	7f33      	ldrb	r3, [r6, #28]
    2622:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2624:	682b      	ldr	r3, [r5, #0]
    2626:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2628:	0018      	movs	r0, r3
    262a:	4ba0      	ldr	r3, [pc, #640]	; (28ac <usart_init+0x30c>)
    262c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    262e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2630:	2200      	movs	r2, #0
    2632:	230e      	movs	r3, #14
    2634:	a906      	add	r1, sp, #24
    2636:	468c      	mov	ip, r1
    2638:	4463      	add	r3, ip
    263a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    263c:	8a32      	ldrh	r2, [r6, #16]
    263e:	9202      	str	r2, [sp, #8]
    2640:	2380      	movs	r3, #128	; 0x80
    2642:	01db      	lsls	r3, r3, #7
    2644:	429a      	cmp	r2, r3
    2646:	d100      	bne.n	264a <usart_init+0xaa>
    2648:	e09e      	b.n	2788 <usart_init+0x1e8>
    264a:	d90f      	bls.n	266c <usart_init+0xcc>
    264c:	23c0      	movs	r3, #192	; 0xc0
    264e:	01db      	lsls	r3, r3, #7
    2650:	9a02      	ldr	r2, [sp, #8]
    2652:	429a      	cmp	r2, r3
    2654:	d100      	bne.n	2658 <usart_init+0xb8>
    2656:	e092      	b.n	277e <usart_init+0x1de>
    2658:	2380      	movs	r3, #128	; 0x80
    265a:	021b      	lsls	r3, r3, #8
    265c:	429a      	cmp	r2, r3
    265e:	d000      	beq.n	2662 <usart_init+0xc2>
    2660:	e11f      	b.n	28a2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2662:	2303      	movs	r3, #3
    2664:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2666:	2300      	movs	r3, #0
    2668:	9307      	str	r3, [sp, #28]
    266a:	e008      	b.n	267e <usart_init+0xde>
	switch (config->sample_rate) {
    266c:	2380      	movs	r3, #128	; 0x80
    266e:	019b      	lsls	r3, r3, #6
    2670:	429a      	cmp	r2, r3
    2672:	d000      	beq.n	2676 <usart_init+0xd6>
    2674:	e115      	b.n	28a2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2676:	2310      	movs	r3, #16
    2678:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    267a:	3b0f      	subs	r3, #15
    267c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    267e:	6833      	ldr	r3, [r6, #0]
    2680:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2682:	68f3      	ldr	r3, [r6, #12]
    2684:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2686:	6973      	ldr	r3, [r6, #20]
    2688:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    268a:	7e33      	ldrb	r3, [r6, #24]
    268c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    268e:	2326      	movs	r3, #38	; 0x26
    2690:	5cf3      	ldrb	r3, [r6, r3]
    2692:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2694:	6873      	ldr	r3, [r6, #4]
    2696:	4699      	mov	r9, r3
	switch (transfer_mode)
    2698:	2b00      	cmp	r3, #0
    269a:	d100      	bne.n	269e <usart_init+0xfe>
    269c:	e0a0      	b.n	27e0 <usart_init+0x240>
    269e:	2380      	movs	r3, #128	; 0x80
    26a0:	055b      	lsls	r3, r3, #21
    26a2:	4599      	cmp	r9, r3
    26a4:	d100      	bne.n	26a8 <usart_init+0x108>
    26a6:	e084      	b.n	27b2 <usart_init+0x212>
	if(config->encoding_format_enable) {
    26a8:	7e73      	ldrb	r3, [r6, #25]
    26aa:	2b00      	cmp	r3, #0
    26ac:	d002      	beq.n	26b4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    26ae:	7eb3      	ldrb	r3, [r6, #26]
    26b0:	4642      	mov	r2, r8
    26b2:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    26b4:	682a      	ldr	r2, [r5, #0]
    26b6:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    26b8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    26ba:	2b00      	cmp	r3, #0
    26bc:	d1fc      	bne.n	26b8 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    26be:	330e      	adds	r3, #14
    26c0:	aa06      	add	r2, sp, #24
    26c2:	4694      	mov	ip, r2
    26c4:	4463      	add	r3, ip
    26c6:	881b      	ldrh	r3, [r3, #0]
    26c8:	4642      	mov	r2, r8
    26ca:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    26cc:	9b05      	ldr	r3, [sp, #20]
    26ce:	9a03      	ldr	r2, [sp, #12]
    26d0:	4313      	orrs	r3, r2
    26d2:	9a04      	ldr	r2, [sp, #16]
    26d4:	4313      	orrs	r3, r2
    26d6:	464a      	mov	r2, r9
    26d8:	4313      	orrs	r3, r2
    26da:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    26dc:	465b      	mov	r3, fp
    26de:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    26e0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    26e2:	4653      	mov	r3, sl
    26e4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    26e6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    26e8:	2327      	movs	r3, #39	; 0x27
    26ea:	5cf3      	ldrb	r3, [r6, r3]
    26ec:	2b00      	cmp	r3, #0
    26ee:	d101      	bne.n	26f4 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    26f0:	3304      	adds	r3, #4
    26f2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    26f4:	7e73      	ldrb	r3, [r6, #25]
    26f6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    26f8:	7f32      	ldrb	r2, [r6, #28]
    26fa:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    26fc:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    26fe:	7f72      	ldrb	r2, [r6, #29]
    2700:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2702:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2704:	2224      	movs	r2, #36	; 0x24
    2706:	5cb2      	ldrb	r2, [r6, r2]
    2708:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    270a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    270c:	2225      	movs	r2, #37	; 0x25
    270e:	5cb2      	ldrb	r2, [r6, r2]
    2710:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2712:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2714:	7ab1      	ldrb	r1, [r6, #10]
    2716:	7af2      	ldrb	r2, [r6, #11]
    2718:	4311      	orrs	r1, r2
    271a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    271c:	8933      	ldrh	r3, [r6, #8]
    271e:	2bff      	cmp	r3, #255	; 0xff
    2720:	d100      	bne.n	2724 <usart_init+0x184>
    2722:	e081      	b.n	2828 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2724:	2280      	movs	r2, #128	; 0x80
    2726:	0452      	lsls	r2, r2, #17
    2728:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    272a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    272c:	232c      	movs	r3, #44	; 0x2c
    272e:	5cf3      	ldrb	r3, [r6, r3]
    2730:	2b00      	cmp	r3, #0
    2732:	d103      	bne.n	273c <usart_init+0x19c>
    2734:	4b62      	ldr	r3, [pc, #392]	; (28c0 <usart_init+0x320>)
    2736:	789b      	ldrb	r3, [r3, #2]
    2738:	079b      	lsls	r3, r3, #30
    273a:	d501      	bpl.n	2740 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    273c:	2380      	movs	r3, #128	; 0x80
    273e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2740:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2742:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2744:	2b00      	cmp	r3, #0
    2746:	d1fc      	bne.n	2742 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2748:	4643      	mov	r3, r8
    274a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    274c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    274e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2750:	2b00      	cmp	r3, #0
    2752:	d1fc      	bne.n	274e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    2754:	4643      	mov	r3, r8
    2756:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2758:	ab0e      	add	r3, sp, #56	; 0x38
    275a:	2280      	movs	r2, #128	; 0x80
    275c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    275e:	2200      	movs	r2, #0
    2760:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2762:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2764:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2766:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2768:	930a      	str	r3, [sp, #40]	; 0x28
    276a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    276c:	930b      	str	r3, [sp, #44]	; 0x2c
    276e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2770:	930c      	str	r3, [sp, #48]	; 0x30
    2772:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2774:	9302      	str	r3, [sp, #8]
    2776:	930d      	str	r3, [sp, #52]	; 0x34
    2778:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    277a:	ae0a      	add	r6, sp, #40	; 0x28
    277c:	e063      	b.n	2846 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    277e:	2308      	movs	r3, #8
    2780:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2782:	3b07      	subs	r3, #7
    2784:	9307      	str	r3, [sp, #28]
    2786:	e77a      	b.n	267e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2788:	6833      	ldr	r3, [r6, #0]
    278a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    278c:	68f3      	ldr	r3, [r6, #12]
    278e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2790:	6973      	ldr	r3, [r6, #20]
    2792:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2794:	7e33      	ldrb	r3, [r6, #24]
    2796:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2798:	2326      	movs	r3, #38	; 0x26
    279a:	5cf3      	ldrb	r3, [r6, r3]
    279c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    279e:	6873      	ldr	r3, [r6, #4]
    27a0:	4699      	mov	r9, r3
	switch (transfer_mode)
    27a2:	2b00      	cmp	r3, #0
    27a4:	d018      	beq.n	27d8 <usart_init+0x238>
    27a6:	2380      	movs	r3, #128	; 0x80
    27a8:	055b      	lsls	r3, r3, #21
    27aa:	4599      	cmp	r9, r3
    27ac:	d001      	beq.n	27b2 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    27ae:	2000      	movs	r0, #0
    27b0:	e025      	b.n	27fe <usart_init+0x25e>
			if (!config->use_external_clock) {
    27b2:	2327      	movs	r3, #39	; 0x27
    27b4:	5cf3      	ldrb	r3, [r6, r3]
    27b6:	2b00      	cmp	r3, #0
    27b8:	d000      	beq.n	27bc <usart_init+0x21c>
    27ba:	e775      	b.n	26a8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    27bc:	6a33      	ldr	r3, [r6, #32]
    27be:	001f      	movs	r7, r3
    27c0:	b2c0      	uxtb	r0, r0
    27c2:	4b40      	ldr	r3, [pc, #256]	; (28c4 <usart_init+0x324>)
    27c4:	4798      	blx	r3
    27c6:	0001      	movs	r1, r0
    27c8:	220e      	movs	r2, #14
    27ca:	ab06      	add	r3, sp, #24
    27cc:	469c      	mov	ip, r3
    27ce:	4462      	add	r2, ip
    27d0:	0038      	movs	r0, r7
    27d2:	4b3d      	ldr	r3, [pc, #244]	; (28c8 <usart_init+0x328>)
    27d4:	4798      	blx	r3
    27d6:	e012      	b.n	27fe <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    27d8:	2308      	movs	r3, #8
    27da:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27dc:	2300      	movs	r3, #0
    27de:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    27e0:	2327      	movs	r3, #39	; 0x27
    27e2:	5cf3      	ldrb	r3, [r6, r3]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d00e      	beq.n	2806 <usart_init+0x266>
				status_code =
    27e8:	9b06      	ldr	r3, [sp, #24]
    27ea:	9300      	str	r3, [sp, #0]
    27ec:	9b07      	ldr	r3, [sp, #28]
    27ee:	220e      	movs	r2, #14
    27f0:	a906      	add	r1, sp, #24
    27f2:	468c      	mov	ip, r1
    27f4:	4462      	add	r2, ip
    27f6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    27f8:	6a30      	ldr	r0, [r6, #32]
    27fa:	4f34      	ldr	r7, [pc, #208]	; (28cc <usart_init+0x32c>)
    27fc:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    27fe:	2800      	cmp	r0, #0
    2800:	d000      	beq.n	2804 <usart_init+0x264>
    2802:	e6e0      	b.n	25c6 <usart_init+0x26>
    2804:	e750      	b.n	26a8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2806:	6a33      	ldr	r3, [r6, #32]
    2808:	001f      	movs	r7, r3
    280a:	b2c0      	uxtb	r0, r0
    280c:	4b2d      	ldr	r3, [pc, #180]	; (28c4 <usart_init+0x324>)
    280e:	4798      	blx	r3
    2810:	0001      	movs	r1, r0
				status_code =
    2812:	9b06      	ldr	r3, [sp, #24]
    2814:	9300      	str	r3, [sp, #0]
    2816:	9b07      	ldr	r3, [sp, #28]
    2818:	220e      	movs	r2, #14
    281a:	a806      	add	r0, sp, #24
    281c:	4684      	mov	ip, r0
    281e:	4462      	add	r2, ip
    2820:	0038      	movs	r0, r7
    2822:	4f2a      	ldr	r7, [pc, #168]	; (28cc <usart_init+0x32c>)
    2824:	47b8      	blx	r7
    2826:	e7ea      	b.n	27fe <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2828:	7ef3      	ldrb	r3, [r6, #27]
    282a:	2b00      	cmp	r3, #0
    282c:	d100      	bne.n	2830 <usart_init+0x290>
    282e:	e77d      	b.n	272c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2830:	2380      	movs	r3, #128	; 0x80
    2832:	04db      	lsls	r3, r3, #19
    2834:	431f      	orrs	r7, r3
    2836:	e779      	b.n	272c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2838:	0020      	movs	r0, r4
    283a:	4b25      	ldr	r3, [pc, #148]	; (28d0 <usart_init+0x330>)
    283c:	4798      	blx	r3
    283e:	e007      	b.n	2850 <usart_init+0x2b0>
    2840:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2842:	2f04      	cmp	r7, #4
    2844:	d00d      	beq.n	2862 <usart_init+0x2c2>
    2846:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2848:	00bb      	lsls	r3, r7, #2
    284a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    284c:	2800      	cmp	r0, #0
    284e:	d0f3      	beq.n	2838 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2850:	1c43      	adds	r3, r0, #1
    2852:	d0f5      	beq.n	2840 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2854:	a90e      	add	r1, sp, #56	; 0x38
    2856:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2858:	0c00      	lsrs	r0, r0, #16
    285a:	b2c0      	uxtb	r0, r0
    285c:	4b1d      	ldr	r3, [pc, #116]	; (28d4 <usart_init+0x334>)
    285e:	4798      	blx	r3
    2860:	e7ee      	b.n	2840 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2862:	2300      	movs	r3, #0
    2864:	60eb      	str	r3, [r5, #12]
    2866:	612b      	str	r3, [r5, #16]
    2868:	616b      	str	r3, [r5, #20]
    286a:	61ab      	str	r3, [r5, #24]
    286c:	61eb      	str	r3, [r5, #28]
    286e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2870:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2872:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2874:	2200      	movs	r2, #0
    2876:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2878:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    287a:	3330      	adds	r3, #48	; 0x30
    287c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    287e:	3301      	adds	r3, #1
    2880:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2882:	3301      	adds	r3, #1
    2884:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2886:	3301      	adds	r3, #1
    2888:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    288a:	6828      	ldr	r0, [r5, #0]
    288c:	4b07      	ldr	r3, [pc, #28]	; (28ac <usart_init+0x30c>)
    288e:	4798      	blx	r3
    2890:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2892:	4911      	ldr	r1, [pc, #68]	; (28d8 <usart_init+0x338>)
    2894:	4b11      	ldr	r3, [pc, #68]	; (28dc <usart_init+0x33c>)
    2896:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2898:	00a4      	lsls	r4, r4, #2
    289a:	4b11      	ldr	r3, [pc, #68]	; (28e0 <usart_init+0x340>)
    289c:	50e5      	str	r5, [r4, r3]
	return status_code;
    289e:	2000      	movs	r0, #0
    28a0:	e691      	b.n	25c6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    28a2:	2310      	movs	r3, #16
    28a4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    28a6:	2300      	movs	r3, #0
    28a8:	9307      	str	r3, [sp, #28]
    28aa:	e6e8      	b.n	267e <usart_init+0xde>
    28ac:	00001d59 	.word	0x00001d59
    28b0:	40000400 	.word	0x40000400
    28b4:	00003251 	.word	0x00003251
    28b8:	000031c5 	.word	0x000031c5
    28bc:	00001b95 	.word	0x00001b95
    28c0:	41002000 	.word	0x41002000
    28c4:	0000326d 	.word	0x0000326d
    28c8:	00001ad7 	.word	0x00001ad7
    28cc:	00001b01 	.word	0x00001b01
    28d0:	00001be1 	.word	0x00001be1
    28d4:	00003349 	.word	0x00003349
    28d8:	00002a81 	.word	0x00002a81
    28dc:	00001d95 	.word	0x00001d95
    28e0:	200009f4 	.word	0x200009f4

000028e4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    28e4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    28e6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    28e8:	2a00      	cmp	r2, #0
    28ea:	d101      	bne.n	28f0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    28ec:	0018      	movs	r0, r3
    28ee:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    28f0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    28f2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    28f4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    28f6:	2a00      	cmp	r2, #0
    28f8:	d1f8      	bne.n	28ec <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    28fa:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    28fc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    28fe:	2a00      	cmp	r2, #0
    2900:	d1fc      	bne.n	28fc <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2902:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2904:	2102      	movs	r1, #2
    2906:	7e1a      	ldrb	r2, [r3, #24]
    2908:	420a      	tst	r2, r1
    290a:	d0fc      	beq.n	2906 <usart_write_wait+0x22>
	return STATUS_OK;
    290c:	2300      	movs	r3, #0
    290e:	e7ed      	b.n	28ec <usart_write_wait+0x8>

00002910 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2910:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2912:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2914:	2a00      	cmp	r2, #0
    2916:	d101      	bne.n	291c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2918:	0018      	movs	r0, r3
    291a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    291c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    291e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2920:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2922:	2a00      	cmp	r2, #0
    2924:	d1f8      	bne.n	2918 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2926:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2928:	7e10      	ldrb	r0, [r2, #24]
    292a:	0740      	lsls	r0, r0, #29
    292c:	d5f4      	bpl.n	2918 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    292e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2930:	2b00      	cmp	r3, #0
    2932:	d1fc      	bne.n	292e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2934:	8b53      	ldrh	r3, [r2, #26]
    2936:	b2db      	uxtb	r3, r3
	if (error_code) {
    2938:	0698      	lsls	r0, r3, #26
    293a:	d01d      	beq.n	2978 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    293c:	0798      	lsls	r0, r3, #30
    293e:	d503      	bpl.n	2948 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2940:	2302      	movs	r3, #2
    2942:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2944:	3318      	adds	r3, #24
    2946:	e7e7      	b.n	2918 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2948:	0758      	lsls	r0, r3, #29
    294a:	d503      	bpl.n	2954 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    294c:	2304      	movs	r3, #4
    294e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2950:	331a      	adds	r3, #26
    2952:	e7e1      	b.n	2918 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2954:	07d8      	lsls	r0, r3, #31
    2956:	d503      	bpl.n	2960 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2958:	2301      	movs	r3, #1
    295a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    295c:	3312      	adds	r3, #18
    295e:	e7db      	b.n	2918 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2960:	06d8      	lsls	r0, r3, #27
    2962:	d503      	bpl.n	296c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2964:	2310      	movs	r3, #16
    2966:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2968:	3332      	adds	r3, #50	; 0x32
    296a:	e7d5      	b.n	2918 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    296c:	069b      	lsls	r3, r3, #26
    296e:	d503      	bpl.n	2978 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2970:	2320      	movs	r3, #32
    2972:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2974:	3321      	adds	r3, #33	; 0x21
    2976:	e7cf      	b.n	2918 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2978:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    297a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    297c:	2300      	movs	r3, #0
    297e:	e7cb      	b.n	2918 <usart_read_wait+0x8>

00002980 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2982:	0006      	movs	r6, r0
    2984:	000c      	movs	r4, r1
    2986:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2988:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    298a:	4b0a      	ldr	r3, [pc, #40]	; (29b4 <_usart_write_buffer+0x34>)
    298c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    298e:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2990:	b29b      	uxth	r3, r3
    2992:	2b00      	cmp	r3, #0
    2994:	d003      	beq.n	299e <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    2996:	4b08      	ldr	r3, [pc, #32]	; (29b8 <_usart_write_buffer+0x38>)
    2998:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    299a:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    299c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    299e:	85f5      	strh	r5, [r6, #46]	; 0x2e
    29a0:	4b05      	ldr	r3, [pc, #20]	; (29b8 <_usart_write_buffer+0x38>)
    29a2:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    29a4:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    29a6:	2205      	movs	r2, #5
    29a8:	2333      	movs	r3, #51	; 0x33
    29aa:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    29ac:	3b32      	subs	r3, #50	; 0x32
    29ae:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    29b0:	2000      	movs	r0, #0
    29b2:	e7f3      	b.n	299c <_usart_write_buffer+0x1c>
    29b4:	000017b1 	.word	0x000017b1
    29b8:	000017f1 	.word	0x000017f1

000029bc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    29bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29be:	0004      	movs	r4, r0
    29c0:	000d      	movs	r5, r1
    29c2:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    29c4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    29c6:	4b0f      	ldr	r3, [pc, #60]	; (2a04 <_usart_read_buffer+0x48>)
    29c8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    29ca:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    29cc:	b29b      	uxth	r3, r3
    29ce:	2b00      	cmp	r3, #0
    29d0:	d003      	beq.n	29da <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    29d2:	4b0d      	ldr	r3, [pc, #52]	; (2a08 <_usart_read_buffer+0x4c>)
    29d4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    29d6:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    29d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    29da:	85a6      	strh	r6, [r4, #44]	; 0x2c
    29dc:	4b0a      	ldr	r3, [pc, #40]	; (2a08 <_usart_read_buffer+0x4c>)
    29de:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    29e0:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    29e2:	2205      	movs	r2, #5
    29e4:	2332      	movs	r3, #50	; 0x32
    29e6:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    29e8:	3b2e      	subs	r3, #46	; 0x2e
    29ea:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    29ec:	7a23      	ldrb	r3, [r4, #8]
    29ee:	2b00      	cmp	r3, #0
    29f0:	d001      	beq.n	29f6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    29f2:	2320      	movs	r3, #32
    29f4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    29f6:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    29f8:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    29fa:	2b00      	cmp	r3, #0
    29fc:	d0ec      	beq.n	29d8 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    29fe:	2308      	movs	r3, #8
    2a00:	75bb      	strb	r3, [r7, #22]
    2a02:	e7e9      	b.n	29d8 <_usart_read_buffer+0x1c>
    2a04:	000017b1 	.word	0x000017b1
    2a08:	000017f1 	.word	0x000017f1

00002a0c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2a0c:	1c93      	adds	r3, r2, #2
    2a0e:	009b      	lsls	r3, r3, #2
    2a10:	18c3      	adds	r3, r0, r3
    2a12:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2a14:	2130      	movs	r1, #48	; 0x30
    2a16:	2301      	movs	r3, #1
    2a18:	4093      	lsls	r3, r2
    2a1a:	001a      	movs	r2, r3
    2a1c:	5c43      	ldrb	r3, [r0, r1]
    2a1e:	4313      	orrs	r3, r2
    2a20:	5443      	strb	r3, [r0, r1]
}
    2a22:	4770      	bx	lr

00002a24 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2a24:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2a26:	2317      	movs	r3, #23
	if (length == 0) {
    2a28:	2a00      	cmp	r2, #0
    2a2a:	d101      	bne.n	2a30 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2a2c:	0018      	movs	r0, r3
    2a2e:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2a30:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2a32:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2a34:	2c00      	cmp	r4, #0
    2a36:	d0f9      	beq.n	2a2c <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2a38:	4b01      	ldr	r3, [pc, #4]	; (2a40 <usart_write_buffer_job+0x1c>)
    2a3a:	4798      	blx	r3
    2a3c:	0003      	movs	r3, r0
    2a3e:	e7f5      	b.n	2a2c <usart_write_buffer_job+0x8>
    2a40:	00002981 	.word	0x00002981

00002a44 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2a44:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2a46:	2317      	movs	r3, #23
	if (length == 0) {
    2a48:	2a00      	cmp	r2, #0
    2a4a:	d101      	bne.n	2a50 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2a4c:	0018      	movs	r0, r3
    2a4e:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2a50:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2a52:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2a54:	2c00      	cmp	r4, #0
    2a56:	d0f9      	beq.n	2a4c <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2a58:	4b01      	ldr	r3, [pc, #4]	; (2a60 <usart_read_buffer_job+0x1c>)
    2a5a:	4798      	blx	r3
    2a5c:	0003      	movs	r3, r0
    2a5e:	e7f5      	b.n	2a4c <usart_read_buffer_job+0x8>
    2a60:	000029bd 	.word	0x000029bd

00002a64 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    2a64:	2900      	cmp	r1, #0
    2a66:	d003      	beq.n	2a70 <usart_get_job_status+0xc>
    2a68:	2901      	cmp	r1, #1
    2a6a:	d005      	beq.n	2a78 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2a6c:	2017      	movs	r0, #23
    2a6e:	e002      	b.n	2a76 <usart_get_job_status+0x12>
			status_code = module->rx_status;
    2a70:	2332      	movs	r3, #50	; 0x32
    2a72:	5cc0      	ldrb	r0, [r0, r3]
    2a74:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    2a76:	4770      	bx	lr
			status_code = module->tx_status;
    2a78:	2333      	movs	r3, #51	; 0x33
    2a7a:	5cc0      	ldrb	r0, [r0, r3]
    2a7c:	b2c0      	uxtb	r0, r0
			break;
    2a7e:	e7fa      	b.n	2a76 <usart_get_job_status+0x12>

00002a80 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2a82:	0080      	lsls	r0, r0, #2
    2a84:	4b62      	ldr	r3, [pc, #392]	; (2c10 <_usart_interrupt_handler+0x190>)
    2a86:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2a88:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2a8a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2a8c:	2b00      	cmp	r3, #0
    2a8e:	d1fc      	bne.n	2a8a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2a90:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2a92:	7da6      	ldrb	r6, [r4, #22]
    2a94:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2a96:	2330      	movs	r3, #48	; 0x30
    2a98:	5ceb      	ldrb	r3, [r5, r3]
    2a9a:	2231      	movs	r2, #49	; 0x31
    2a9c:	5caf      	ldrb	r7, [r5, r2]
    2a9e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2aa0:	07f3      	lsls	r3, r6, #31
    2aa2:	d522      	bpl.n	2aea <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2aa4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2aa6:	b29b      	uxth	r3, r3
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d01c      	beq.n	2ae6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2aac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2aae:	7813      	ldrb	r3, [r2, #0]
    2ab0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2ab2:	1c51      	adds	r1, r2, #1
    2ab4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2ab6:	7969      	ldrb	r1, [r5, #5]
    2ab8:	2901      	cmp	r1, #1
    2aba:	d00e      	beq.n	2ada <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2abc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2abe:	05db      	lsls	r3, r3, #23
    2ac0:	0ddb      	lsrs	r3, r3, #23
    2ac2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2ac4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2ac6:	3b01      	subs	r3, #1
    2ac8:	b29b      	uxth	r3, r3
    2aca:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2acc:	2b00      	cmp	r3, #0
    2ace:	d10c      	bne.n	2aea <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ad0:	3301      	adds	r3, #1
    2ad2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2ad4:	3301      	adds	r3, #1
    2ad6:	75a3      	strb	r3, [r4, #22]
    2ad8:	e007      	b.n	2aea <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2ada:	7851      	ldrb	r1, [r2, #1]
    2adc:	0209      	lsls	r1, r1, #8
    2ade:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2ae0:	3202      	adds	r2, #2
    2ae2:	62aa      	str	r2, [r5, #40]	; 0x28
    2ae4:	e7eb      	b.n	2abe <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ae6:	2301      	movs	r3, #1
    2ae8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2aea:	07b3      	lsls	r3, r6, #30
    2aec:	d506      	bpl.n	2afc <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2aee:	2302      	movs	r3, #2
    2af0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2af2:	2200      	movs	r2, #0
    2af4:	3331      	adds	r3, #49	; 0x31
    2af6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2af8:	07fb      	lsls	r3, r7, #31
    2afa:	d41a      	bmi.n	2b32 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2afc:	0773      	lsls	r3, r6, #29
    2afe:	d565      	bpl.n	2bcc <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2b00:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2b02:	b29b      	uxth	r3, r3
    2b04:	2b00      	cmp	r3, #0
    2b06:	d05f      	beq.n	2bc8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b08:	8b63      	ldrh	r3, [r4, #26]
    2b0a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2b0c:	071a      	lsls	r2, r3, #28
    2b0e:	d414      	bmi.n	2b3a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b10:	223f      	movs	r2, #63	; 0x3f
    2b12:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2b14:	2b00      	cmp	r3, #0
    2b16:	d034      	beq.n	2b82 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2b18:	079a      	lsls	r2, r3, #30
    2b1a:	d511      	bpl.n	2b40 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2b1c:	221a      	movs	r2, #26
    2b1e:	2332      	movs	r3, #50	; 0x32
    2b20:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2b22:	3b30      	subs	r3, #48	; 0x30
    2b24:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2b26:	077b      	lsls	r3, r7, #29
    2b28:	d550      	bpl.n	2bcc <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2b2a:	0028      	movs	r0, r5
    2b2c:	696b      	ldr	r3, [r5, #20]
    2b2e:	4798      	blx	r3
    2b30:	e04c      	b.n	2bcc <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2b32:	0028      	movs	r0, r5
    2b34:	68eb      	ldr	r3, [r5, #12]
    2b36:	4798      	blx	r3
    2b38:	e7e0      	b.n	2afc <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2b3a:	2237      	movs	r2, #55	; 0x37
    2b3c:	4013      	ands	r3, r2
    2b3e:	e7e9      	b.n	2b14 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2b40:	075a      	lsls	r2, r3, #29
    2b42:	d505      	bpl.n	2b50 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2b44:	221e      	movs	r2, #30
    2b46:	2332      	movs	r3, #50	; 0x32
    2b48:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2b4a:	3b2e      	subs	r3, #46	; 0x2e
    2b4c:	8363      	strh	r3, [r4, #26]
    2b4e:	e7ea      	b.n	2b26 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2b50:	07da      	lsls	r2, r3, #31
    2b52:	d505      	bpl.n	2b60 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2b54:	2213      	movs	r2, #19
    2b56:	2332      	movs	r3, #50	; 0x32
    2b58:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2b5a:	3b31      	subs	r3, #49	; 0x31
    2b5c:	8363      	strh	r3, [r4, #26]
    2b5e:	e7e2      	b.n	2b26 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2b60:	06da      	lsls	r2, r3, #27
    2b62:	d505      	bpl.n	2b70 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2b64:	2242      	movs	r2, #66	; 0x42
    2b66:	2332      	movs	r3, #50	; 0x32
    2b68:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2b6a:	3b22      	subs	r3, #34	; 0x22
    2b6c:	8363      	strh	r3, [r4, #26]
    2b6e:	e7da      	b.n	2b26 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2b70:	2220      	movs	r2, #32
    2b72:	421a      	tst	r2, r3
    2b74:	d0d7      	beq.n	2b26 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2b76:	3221      	adds	r2, #33	; 0x21
    2b78:	2332      	movs	r3, #50	; 0x32
    2b7a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2b7c:	3b12      	subs	r3, #18
    2b7e:	8363      	strh	r3, [r4, #26]
    2b80:	e7d1      	b.n	2b26 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2b82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2b84:	05db      	lsls	r3, r3, #23
    2b86:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2b88:	b2da      	uxtb	r2, r3
    2b8a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2b8c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2b8e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2b90:	1c51      	adds	r1, r2, #1
    2b92:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2b94:	7969      	ldrb	r1, [r5, #5]
    2b96:	2901      	cmp	r1, #1
    2b98:	d010      	beq.n	2bbc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2b9a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2b9c:	3b01      	subs	r3, #1
    2b9e:	b29b      	uxth	r3, r3
    2ba0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d112      	bne.n	2bcc <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2ba6:	3304      	adds	r3, #4
    2ba8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2baa:	2200      	movs	r2, #0
    2bac:	332e      	adds	r3, #46	; 0x2e
    2bae:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2bb0:	07bb      	lsls	r3, r7, #30
    2bb2:	d50b      	bpl.n	2bcc <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2bb4:	0028      	movs	r0, r5
    2bb6:	692b      	ldr	r3, [r5, #16]
    2bb8:	4798      	blx	r3
    2bba:	e007      	b.n	2bcc <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2bbc:	0a1b      	lsrs	r3, r3, #8
    2bbe:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2bc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2bc2:	3301      	adds	r3, #1
    2bc4:	626b      	str	r3, [r5, #36]	; 0x24
    2bc6:	e7e8      	b.n	2b9a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2bc8:	2304      	movs	r3, #4
    2bca:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2bcc:	06f3      	lsls	r3, r6, #27
    2bce:	d504      	bpl.n	2bda <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2bd0:	2310      	movs	r3, #16
    2bd2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2bd4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2bd6:	06fb      	lsls	r3, r7, #27
    2bd8:	d40e      	bmi.n	2bf8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2bda:	06b3      	lsls	r3, r6, #26
    2bdc:	d504      	bpl.n	2be8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2bde:	2320      	movs	r3, #32
    2be0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2be2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2be4:	073b      	lsls	r3, r7, #28
    2be6:	d40b      	bmi.n	2c00 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2be8:	0733      	lsls	r3, r6, #28
    2bea:	d504      	bpl.n	2bf6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2bec:	2308      	movs	r3, #8
    2bee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2bf0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2bf2:	06bb      	lsls	r3, r7, #26
    2bf4:	d408      	bmi.n	2c08 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2bf8:	0028      	movs	r0, r5
    2bfa:	69eb      	ldr	r3, [r5, #28]
    2bfc:	4798      	blx	r3
    2bfe:	e7ec      	b.n	2bda <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2c00:	0028      	movs	r0, r5
    2c02:	69ab      	ldr	r3, [r5, #24]
    2c04:	4798      	blx	r3
    2c06:	e7ef      	b.n	2be8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2c08:	6a2b      	ldr	r3, [r5, #32]
    2c0a:	0028      	movs	r0, r5
    2c0c:	4798      	blx	r3
}
    2c0e:	e7f2      	b.n	2bf6 <_usart_interrupt_handler+0x176>
    2c10:	200009f4 	.word	0x200009f4

00002c14 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2c14:	b510      	push	{r4, lr}
	switch (clock_source) {
    2c16:	2808      	cmp	r0, #8
    2c18:	d803      	bhi.n	2c22 <system_clock_source_get_hz+0xe>
    2c1a:	0080      	lsls	r0, r0, #2
    2c1c:	4b1c      	ldr	r3, [pc, #112]	; (2c90 <system_clock_source_get_hz+0x7c>)
    2c1e:	581b      	ldr	r3, [r3, r0]
    2c20:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2c22:	2000      	movs	r0, #0
    2c24:	e032      	b.n	2c8c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2c26:	4b1b      	ldr	r3, [pc, #108]	; (2c94 <system_clock_source_get_hz+0x80>)
    2c28:	6918      	ldr	r0, [r3, #16]
    2c2a:	e02f      	b.n	2c8c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2c2c:	4b1a      	ldr	r3, [pc, #104]	; (2c98 <system_clock_source_get_hz+0x84>)
    2c2e:	6a1b      	ldr	r3, [r3, #32]
    2c30:	059b      	lsls	r3, r3, #22
    2c32:	0f9b      	lsrs	r3, r3, #30
    2c34:	4819      	ldr	r0, [pc, #100]	; (2c9c <system_clock_source_get_hz+0x88>)
    2c36:	40d8      	lsrs	r0, r3
    2c38:	e028      	b.n	2c8c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2c3a:	4b16      	ldr	r3, [pc, #88]	; (2c94 <system_clock_source_get_hz+0x80>)
    2c3c:	6958      	ldr	r0, [r3, #20]
    2c3e:	e025      	b.n	2c8c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2c40:	4b14      	ldr	r3, [pc, #80]	; (2c94 <system_clock_source_get_hz+0x80>)
    2c42:	681b      	ldr	r3, [r3, #0]
			return 0;
    2c44:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2c46:	079b      	lsls	r3, r3, #30
    2c48:	d520      	bpl.n	2c8c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2c4a:	4913      	ldr	r1, [pc, #76]	; (2c98 <system_clock_source_get_hz+0x84>)
    2c4c:	2210      	movs	r2, #16
    2c4e:	68cb      	ldr	r3, [r1, #12]
    2c50:	421a      	tst	r2, r3
    2c52:	d0fc      	beq.n	2c4e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2c54:	4b0f      	ldr	r3, [pc, #60]	; (2c94 <system_clock_source_get_hz+0x80>)
    2c56:	681a      	ldr	r2, [r3, #0]
    2c58:	2324      	movs	r3, #36	; 0x24
    2c5a:	4013      	ands	r3, r2
    2c5c:	2b04      	cmp	r3, #4
    2c5e:	d001      	beq.n	2c64 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2c60:	480f      	ldr	r0, [pc, #60]	; (2ca0 <system_clock_source_get_hz+0x8c>)
    2c62:	e013      	b.n	2c8c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2c64:	2000      	movs	r0, #0
    2c66:	4b0f      	ldr	r3, [pc, #60]	; (2ca4 <system_clock_source_get_hz+0x90>)
    2c68:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2c6a:	4b0a      	ldr	r3, [pc, #40]	; (2c94 <system_clock_source_get_hz+0x80>)
    2c6c:	689b      	ldr	r3, [r3, #8]
    2c6e:	041b      	lsls	r3, r3, #16
    2c70:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2c72:	4358      	muls	r0, r3
    2c74:	e00a      	b.n	2c8c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2c76:	2350      	movs	r3, #80	; 0x50
    2c78:	4a07      	ldr	r2, [pc, #28]	; (2c98 <system_clock_source_get_hz+0x84>)
    2c7a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2c7c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2c7e:	075b      	lsls	r3, r3, #29
    2c80:	d504      	bpl.n	2c8c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2c82:	4b04      	ldr	r3, [pc, #16]	; (2c94 <system_clock_source_get_hz+0x80>)
    2c84:	68d8      	ldr	r0, [r3, #12]
    2c86:	e001      	b.n	2c8c <system_clock_source_get_hz+0x78>
		return 32768UL;
    2c88:	2080      	movs	r0, #128	; 0x80
    2c8a:	0200      	lsls	r0, r0, #8
	}
}
    2c8c:	bd10      	pop	{r4, pc}
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	00005f84 	.word	0x00005f84
    2c94:	20000164 	.word	0x20000164
    2c98:	40000800 	.word	0x40000800
    2c9c:	007a1200 	.word	0x007a1200
    2ca0:	02dc6c00 	.word	0x02dc6c00
    2ca4:	0000326d 	.word	0x0000326d

00002ca8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2ca8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2caa:	490c      	ldr	r1, [pc, #48]	; (2cdc <system_clock_source_osc8m_set_config+0x34>)
    2cac:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2cae:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2cb0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2cb2:	7840      	ldrb	r0, [r0, #1]
    2cb4:	2201      	movs	r2, #1
    2cb6:	4010      	ands	r0, r2
    2cb8:	0180      	lsls	r0, r0, #6
    2cba:	2640      	movs	r6, #64	; 0x40
    2cbc:	43b3      	bics	r3, r6
    2cbe:	4303      	orrs	r3, r0
    2cc0:	402a      	ands	r2, r5
    2cc2:	01d2      	lsls	r2, r2, #7
    2cc4:	2080      	movs	r0, #128	; 0x80
    2cc6:	4383      	bics	r3, r0
    2cc8:	4313      	orrs	r3, r2
    2cca:	2203      	movs	r2, #3
    2ccc:	4022      	ands	r2, r4
    2cce:	0212      	lsls	r2, r2, #8
    2cd0:	4803      	ldr	r0, [pc, #12]	; (2ce0 <system_clock_source_osc8m_set_config+0x38>)
    2cd2:	4003      	ands	r3, r0
    2cd4:	4313      	orrs	r3, r2
    2cd6:	620b      	str	r3, [r1, #32]
}
    2cd8:	bd70      	pop	{r4, r5, r6, pc}
    2cda:	46c0      	nop			; (mov r8, r8)
    2cdc:	40000800 	.word	0x40000800
    2ce0:	fffffcff 	.word	0xfffffcff

00002ce4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ce6:	46de      	mov	lr, fp
    2ce8:	4657      	mov	r7, sl
    2cea:	464e      	mov	r6, r9
    2cec:	4645      	mov	r5, r8
    2cee:	b5e0      	push	{r5, r6, r7, lr}
    2cf0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2cf2:	4b26      	ldr	r3, [pc, #152]	; (2d8c <system_clock_source_xosc32k_set_config+0xa8>)
    2cf4:	469b      	mov	fp, r3
    2cf6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2cf8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2cfa:	7800      	ldrb	r0, [r0, #0]
    2cfc:	4242      	negs	r2, r0
    2cfe:	4142      	adcs	r2, r0
    2d00:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2d02:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2d04:	78ca      	ldrb	r2, [r1, #3]
    2d06:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2d08:	790a      	ldrb	r2, [r1, #4]
    2d0a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2d0c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2d0e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2d10:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2d12:	688a      	ldr	r2, [r1, #8]
    2d14:	491e      	ldr	r1, [pc, #120]	; (2d90 <system_clock_source_xosc32k_set_config+0xac>)
    2d16:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2d18:	2101      	movs	r1, #1
    2d1a:	464a      	mov	r2, r9
    2d1c:	0092      	lsls	r2, r2, #2
    2d1e:	4691      	mov	r9, r2
    2d20:	2204      	movs	r2, #4
    2d22:	4393      	bics	r3, r2
    2d24:	464a      	mov	r2, r9
    2d26:	4313      	orrs	r3, r2
    2d28:	4642      	mov	r2, r8
    2d2a:	400a      	ands	r2, r1
    2d2c:	00d2      	lsls	r2, r2, #3
    2d2e:	4690      	mov	r8, r2
    2d30:	2208      	movs	r2, #8
    2d32:	4393      	bics	r3, r2
    2d34:	4642      	mov	r2, r8
    2d36:	4313      	orrs	r3, r2
    2d38:	4662      	mov	r2, ip
    2d3a:	400a      	ands	r2, r1
    2d3c:	0112      	lsls	r2, r2, #4
    2d3e:	4694      	mov	ip, r2
    2d40:	2210      	movs	r2, #16
    2d42:	4393      	bics	r3, r2
    2d44:	4662      	mov	r2, ip
    2d46:	4313      	orrs	r3, r2
    2d48:	4008      	ands	r0, r1
    2d4a:	0140      	lsls	r0, r0, #5
    2d4c:	2220      	movs	r2, #32
    2d4e:	4393      	bics	r3, r2
    2d50:	4303      	orrs	r3, r0
    2d52:	400f      	ands	r7, r1
    2d54:	01bf      	lsls	r7, r7, #6
    2d56:	2040      	movs	r0, #64	; 0x40
    2d58:	4383      	bics	r3, r0
    2d5a:	433b      	orrs	r3, r7
    2d5c:	400e      	ands	r6, r1
    2d5e:	01f6      	lsls	r6, r6, #7
    2d60:	3040      	adds	r0, #64	; 0x40
    2d62:	4383      	bics	r3, r0
    2d64:	4333      	orrs	r3, r6
    2d66:	3879      	subs	r0, #121	; 0x79
    2d68:	4005      	ands	r5, r0
    2d6a:	022d      	lsls	r5, r5, #8
    2d6c:	4809      	ldr	r0, [pc, #36]	; (2d94 <system_clock_source_xosc32k_set_config+0xb0>)
    2d6e:	4003      	ands	r3, r0
    2d70:	432b      	orrs	r3, r5
    2d72:	4021      	ands	r1, r4
    2d74:	0309      	lsls	r1, r1, #12
    2d76:	4808      	ldr	r0, [pc, #32]	; (2d98 <system_clock_source_xosc32k_set_config+0xb4>)
    2d78:	4003      	ands	r3, r0
    2d7a:	430b      	orrs	r3, r1
    2d7c:	465a      	mov	r2, fp
    2d7e:	8293      	strh	r3, [r2, #20]
}
    2d80:	bc3c      	pop	{r2, r3, r4, r5}
    2d82:	4690      	mov	r8, r2
    2d84:	4699      	mov	r9, r3
    2d86:	46a2      	mov	sl, r4
    2d88:	46ab      	mov	fp, r5
    2d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d8c:	40000800 	.word	0x40000800
    2d90:	20000164 	.word	0x20000164
    2d94:	fffff8ff 	.word	0xfffff8ff
    2d98:	ffffefff 	.word	0xffffefff

00002d9c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2d9c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2d9e:	7a03      	ldrb	r3, [r0, #8]
    2da0:	069b      	lsls	r3, r3, #26
    2da2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2da4:	8942      	ldrh	r2, [r0, #10]
    2da6:	0592      	lsls	r2, r2, #22
    2da8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2daa:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2dac:	4918      	ldr	r1, [pc, #96]	; (2e10 <system_clock_source_dfll_set_config+0x74>)
    2dae:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2db0:	7983      	ldrb	r3, [r0, #6]
    2db2:	79c2      	ldrb	r2, [r0, #7]
    2db4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2db6:	8842      	ldrh	r2, [r0, #2]
    2db8:	8884      	ldrh	r4, [r0, #4]
    2dba:	4322      	orrs	r2, r4
    2dbc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2dbe:	7842      	ldrb	r2, [r0, #1]
    2dc0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2dc2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2dc4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2dc6:	7803      	ldrb	r3, [r0, #0]
    2dc8:	2b04      	cmp	r3, #4
    2dca:	d011      	beq.n	2df0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2dcc:	2b20      	cmp	r3, #32
    2dce:	d10e      	bne.n	2dee <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2dd0:	7b03      	ldrb	r3, [r0, #12]
    2dd2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2dd4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2dd6:	4313      	orrs	r3, r2
    2dd8:	89c2      	ldrh	r2, [r0, #14]
    2dda:	0412      	lsls	r2, r2, #16
    2ddc:	490d      	ldr	r1, [pc, #52]	; (2e14 <system_clock_source_dfll_set_config+0x78>)
    2dde:	400a      	ands	r2, r1
    2de0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2de2:	4a0b      	ldr	r2, [pc, #44]	; (2e10 <system_clock_source_dfll_set_config+0x74>)
    2de4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2de6:	6811      	ldr	r1, [r2, #0]
    2de8:	4b0b      	ldr	r3, [pc, #44]	; (2e18 <system_clock_source_dfll_set_config+0x7c>)
    2dea:	430b      	orrs	r3, r1
    2dec:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2dee:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2df0:	7b03      	ldrb	r3, [r0, #12]
    2df2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2df4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2df6:	4313      	orrs	r3, r2
    2df8:	89c2      	ldrh	r2, [r0, #14]
    2dfa:	0412      	lsls	r2, r2, #16
    2dfc:	4905      	ldr	r1, [pc, #20]	; (2e14 <system_clock_source_dfll_set_config+0x78>)
    2dfe:	400a      	ands	r2, r1
    2e00:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2e02:	4a03      	ldr	r2, [pc, #12]	; (2e10 <system_clock_source_dfll_set_config+0x74>)
    2e04:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2e06:	6813      	ldr	r3, [r2, #0]
    2e08:	2104      	movs	r1, #4
    2e0a:	430b      	orrs	r3, r1
    2e0c:	6013      	str	r3, [r2, #0]
    2e0e:	e7ee      	b.n	2dee <system_clock_source_dfll_set_config+0x52>
    2e10:	20000164 	.word	0x20000164
    2e14:	03ff0000 	.word	0x03ff0000
    2e18:	00000424 	.word	0x00000424

00002e1c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2e1c:	2808      	cmp	r0, #8
    2e1e:	d803      	bhi.n	2e28 <system_clock_source_enable+0xc>
    2e20:	0080      	lsls	r0, r0, #2
    2e22:	4b25      	ldr	r3, [pc, #148]	; (2eb8 <system_clock_source_enable+0x9c>)
    2e24:	581b      	ldr	r3, [r3, r0]
    2e26:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2e28:	2017      	movs	r0, #23
    2e2a:	e044      	b.n	2eb6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2e2c:	4a23      	ldr	r2, [pc, #140]	; (2ebc <system_clock_source_enable+0xa0>)
    2e2e:	6a13      	ldr	r3, [r2, #32]
    2e30:	2102      	movs	r1, #2
    2e32:	430b      	orrs	r3, r1
    2e34:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2e36:	2000      	movs	r0, #0
    2e38:	e03d      	b.n	2eb6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2e3a:	4a20      	ldr	r2, [pc, #128]	; (2ebc <system_clock_source_enable+0xa0>)
    2e3c:	6993      	ldr	r3, [r2, #24]
    2e3e:	2102      	movs	r1, #2
    2e40:	430b      	orrs	r3, r1
    2e42:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2e44:	2000      	movs	r0, #0
		break;
    2e46:	e036      	b.n	2eb6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2e48:	4a1c      	ldr	r2, [pc, #112]	; (2ebc <system_clock_source_enable+0xa0>)
    2e4a:	8a13      	ldrh	r3, [r2, #16]
    2e4c:	2102      	movs	r1, #2
    2e4e:	430b      	orrs	r3, r1
    2e50:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2e52:	2000      	movs	r0, #0
		break;
    2e54:	e02f      	b.n	2eb6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2e56:	4a19      	ldr	r2, [pc, #100]	; (2ebc <system_clock_source_enable+0xa0>)
    2e58:	8a93      	ldrh	r3, [r2, #20]
    2e5a:	2102      	movs	r1, #2
    2e5c:	430b      	orrs	r3, r1
    2e5e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2e60:	2000      	movs	r0, #0
		break;
    2e62:	e028      	b.n	2eb6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2e64:	4916      	ldr	r1, [pc, #88]	; (2ec0 <system_clock_source_enable+0xa4>)
    2e66:	680b      	ldr	r3, [r1, #0]
    2e68:	2202      	movs	r2, #2
    2e6a:	4313      	orrs	r3, r2
    2e6c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2e6e:	4b13      	ldr	r3, [pc, #76]	; (2ebc <system_clock_source_enable+0xa0>)
    2e70:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2e72:	0019      	movs	r1, r3
    2e74:	320e      	adds	r2, #14
    2e76:	68cb      	ldr	r3, [r1, #12]
    2e78:	421a      	tst	r2, r3
    2e7a:	d0fc      	beq.n	2e76 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2e7c:	4a10      	ldr	r2, [pc, #64]	; (2ec0 <system_clock_source_enable+0xa4>)
    2e7e:	6891      	ldr	r1, [r2, #8]
    2e80:	4b0e      	ldr	r3, [pc, #56]	; (2ebc <system_clock_source_enable+0xa0>)
    2e82:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2e84:	6852      	ldr	r2, [r2, #4]
    2e86:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2e88:	2200      	movs	r2, #0
    2e8a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2e8c:	0019      	movs	r1, r3
    2e8e:	3210      	adds	r2, #16
    2e90:	68cb      	ldr	r3, [r1, #12]
    2e92:	421a      	tst	r2, r3
    2e94:	d0fc      	beq.n	2e90 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2e96:	4b0a      	ldr	r3, [pc, #40]	; (2ec0 <system_clock_source_enable+0xa4>)
    2e98:	681b      	ldr	r3, [r3, #0]
    2e9a:	b29b      	uxth	r3, r3
    2e9c:	4a07      	ldr	r2, [pc, #28]	; (2ebc <system_clock_source_enable+0xa0>)
    2e9e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2ea0:	2000      	movs	r0, #0
    2ea2:	e008      	b.n	2eb6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2ea4:	4905      	ldr	r1, [pc, #20]	; (2ebc <system_clock_source_enable+0xa0>)
    2ea6:	2244      	movs	r2, #68	; 0x44
    2ea8:	5c8b      	ldrb	r3, [r1, r2]
    2eaa:	2002      	movs	r0, #2
    2eac:	4303      	orrs	r3, r0
    2eae:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2eb0:	2000      	movs	r0, #0
		break;
    2eb2:	e000      	b.n	2eb6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2eb4:	2000      	movs	r0, #0
}
    2eb6:	4770      	bx	lr
    2eb8:	00005fa8 	.word	0x00005fa8
    2ebc:	40000800 	.word	0x40000800
    2ec0:	20000164 	.word	0x20000164

00002ec4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ec6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2ec8:	22c2      	movs	r2, #194	; 0xc2
    2eca:	00d2      	lsls	r2, r2, #3
    2ecc:	4b45      	ldr	r3, [pc, #276]	; (2fe4 <system_clock_init+0x120>)
    2ece:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2ed0:	4a45      	ldr	r2, [pc, #276]	; (2fe8 <system_clock_init+0x124>)
    2ed2:	6853      	ldr	r3, [r2, #4]
    2ed4:	211e      	movs	r1, #30
    2ed6:	438b      	bics	r3, r1
    2ed8:	391a      	subs	r1, #26
    2eda:	430b      	orrs	r3, r1
    2edc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2ede:	2202      	movs	r2, #2
    2ee0:	ab01      	add	r3, sp, #4
    2ee2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2ee4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2ee6:	4d41      	ldr	r5, [pc, #260]	; (2fec <system_clock_init+0x128>)
    2ee8:	b2e0      	uxtb	r0, r4
    2eea:	a901      	add	r1, sp, #4
    2eec:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2eee:	3401      	adds	r4, #1
    2ef0:	2c25      	cmp	r4, #37	; 0x25
    2ef2:	d1f9      	bne.n	2ee8 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2ef4:	a80a      	add	r0, sp, #40	; 0x28
    2ef6:	2300      	movs	r3, #0
    2ef8:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2efa:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2efc:	2280      	movs	r2, #128	; 0x80
    2efe:	0212      	lsls	r2, r2, #8
    2f00:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2f02:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2f04:	2201      	movs	r2, #1
    2f06:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    2f08:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2f0a:	2106      	movs	r1, #6
    2f0c:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2f0e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    2f10:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2f12:	4b37      	ldr	r3, [pc, #220]	; (2ff0 <system_clock_init+0x12c>)
    2f14:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2f16:	2005      	movs	r0, #5
    2f18:	4b36      	ldr	r3, [pc, #216]	; (2ff4 <system_clock_init+0x130>)
    2f1a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2f1c:	4931      	ldr	r1, [pc, #196]	; (2fe4 <system_clock_init+0x120>)
    2f1e:	2202      	movs	r2, #2
    2f20:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2f22:	421a      	tst	r2, r3
    2f24:	d0fc      	beq.n	2f20 <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2f26:	ab05      	add	r3, sp, #20
    2f28:	2100      	movs	r1, #0
    2f2a:	2200      	movs	r2, #0
    2f2c:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2f2e:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2f30:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2f32:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2f34:	313f      	adds	r1, #63	; 0x3f
    2f36:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2f38:	393b      	subs	r1, #59	; 0x3b
    2f3a:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2f3c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2f3e:	4b2e      	ldr	r3, [pc, #184]	; (2ff8 <system_clock_init+0x134>)
    2f40:	681b      	ldr	r3, [r3, #0]
    2f42:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2f44:	2b3f      	cmp	r3, #63	; 0x3f
    2f46:	d04b      	beq.n	2fe0 <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2f48:	a805      	add	r0, sp, #20
    2f4a:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2f4c:	23b7      	movs	r3, #183	; 0xb7
    2f4e:	00db      	lsls	r3, r3, #3
    2f50:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2f52:	2303      	movs	r3, #3
    2f54:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2f56:	331c      	adds	r3, #28
    2f58:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2f5a:	4b28      	ldr	r3, [pc, #160]	; (2ffc <system_clock_init+0x138>)
    2f5c:	4798      	blx	r3
	config->on_demand       = true;
    2f5e:	a804      	add	r0, sp, #16
    2f60:	2501      	movs	r5, #1
    2f62:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2f64:	2600      	movs	r6, #0
    2f66:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2f68:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2f6a:	4b25      	ldr	r3, [pc, #148]	; (3000 <system_clock_init+0x13c>)
    2f6c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2f6e:	2006      	movs	r0, #6
    2f70:	4f20      	ldr	r7, [pc, #128]	; (2ff4 <system_clock_init+0x130>)
    2f72:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2f74:	4b23      	ldr	r3, [pc, #140]	; (3004 <system_clock_init+0x140>)
    2f76:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2f78:	ac01      	add	r4, sp, #4
    2f7a:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    2f7c:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2f7e:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    2f80:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2f82:	2305      	movs	r3, #5
    2f84:	7023      	strb	r3, [r4, #0]
    2f86:	0021      	movs	r1, r4
    2f88:	2001      	movs	r0, #1
    2f8a:	4b1f      	ldr	r3, [pc, #124]	; (3008 <system_clock_init+0x144>)
    2f8c:	4798      	blx	r3
    2f8e:	2001      	movs	r0, #1
    2f90:	4b1e      	ldr	r3, [pc, #120]	; (300c <system_clock_init+0x148>)
    2f92:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2f94:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2f96:	0021      	movs	r1, r4
    2f98:	2000      	movs	r0, #0
    2f9a:	4b14      	ldr	r3, [pc, #80]	; (2fec <system_clock_init+0x128>)
    2f9c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2f9e:	2000      	movs	r0, #0
    2fa0:	4b1b      	ldr	r3, [pc, #108]	; (3010 <system_clock_init+0x14c>)
    2fa2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2fa4:	2007      	movs	r0, #7
    2fa6:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2fa8:	490e      	ldr	r1, [pc, #56]	; (2fe4 <system_clock_init+0x120>)
    2faa:	22d0      	movs	r2, #208	; 0xd0
    2fac:	68cb      	ldr	r3, [r1, #12]
    2fae:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2fb0:	2bd0      	cmp	r3, #208	; 0xd0
    2fb2:	d1fb      	bne.n	2fac <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    2fb4:	4a17      	ldr	r2, [pc, #92]	; (3014 <system_clock_init+0x150>)
    2fb6:	2300      	movs	r3, #0
    2fb8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2fba:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2fbc:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2fbe:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2fc0:	a901      	add	r1, sp, #4
    2fc2:	2201      	movs	r2, #1
    2fc4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2fc6:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    2fc8:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2fca:	3307      	adds	r3, #7
    2fcc:	700b      	strb	r3, [r1, #0]
    2fce:	720a      	strb	r2, [r1, #8]
    2fd0:	2000      	movs	r0, #0
    2fd2:	4b0d      	ldr	r3, [pc, #52]	; (3008 <system_clock_init+0x144>)
    2fd4:	4798      	blx	r3
    2fd6:	2000      	movs	r0, #0
    2fd8:	4b0c      	ldr	r3, [pc, #48]	; (300c <system_clock_init+0x148>)
    2fda:	4798      	blx	r3
#endif
}
    2fdc:	b00f      	add	sp, #60	; 0x3c
    2fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2fe0:	3b20      	subs	r3, #32
    2fe2:	e7b1      	b.n	2f48 <system_clock_init+0x84>
    2fe4:	40000800 	.word	0x40000800
    2fe8:	41004000 	.word	0x41004000
    2fec:	00003251 	.word	0x00003251
    2ff0:	00002ce5 	.word	0x00002ce5
    2ff4:	00002e1d 	.word	0x00002e1d
    2ff8:	00806024 	.word	0x00806024
    2ffc:	00002d9d 	.word	0x00002d9d
    3000:	00002ca9 	.word	0x00002ca9
    3004:	00003019 	.word	0x00003019
    3008:	0000303d 	.word	0x0000303d
    300c:	000030f5 	.word	0x000030f5
    3010:	000031c5 	.word	0x000031c5
    3014:	40000400 	.word	0x40000400

00003018 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    3018:	4a06      	ldr	r2, [pc, #24]	; (3034 <system_gclk_init+0x1c>)
    301a:	6993      	ldr	r3, [r2, #24]
    301c:	2108      	movs	r1, #8
    301e:	430b      	orrs	r3, r1
    3020:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3022:	2201      	movs	r2, #1
    3024:	4b04      	ldr	r3, [pc, #16]	; (3038 <system_gclk_init+0x20>)
    3026:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3028:	0019      	movs	r1, r3
    302a:	780b      	ldrb	r3, [r1, #0]
    302c:	4213      	tst	r3, r2
    302e:	d1fc      	bne.n	302a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3030:	4770      	bx	lr
    3032:	46c0      	nop			; (mov r8, r8)
    3034:	40000400 	.word	0x40000400
    3038:	40000c00 	.word	0x40000c00

0000303c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    303c:	b570      	push	{r4, r5, r6, lr}
    303e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3040:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3042:	780d      	ldrb	r5, [r1, #0]
    3044:	022d      	lsls	r5, r5, #8
    3046:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3048:	784b      	ldrb	r3, [r1, #1]
    304a:	2b00      	cmp	r3, #0
    304c:	d002      	beq.n	3054 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    304e:	2380      	movs	r3, #128	; 0x80
    3050:	02db      	lsls	r3, r3, #11
    3052:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3054:	7a4b      	ldrb	r3, [r1, #9]
    3056:	2b00      	cmp	r3, #0
    3058:	d002      	beq.n	3060 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    305a:	2380      	movs	r3, #128	; 0x80
    305c:	031b      	lsls	r3, r3, #12
    305e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3060:	6848      	ldr	r0, [r1, #4]
    3062:	2801      	cmp	r0, #1
    3064:	d910      	bls.n	3088 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3066:	1e43      	subs	r3, r0, #1
    3068:	4218      	tst	r0, r3
    306a:	d134      	bne.n	30d6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    306c:	2802      	cmp	r0, #2
    306e:	d930      	bls.n	30d2 <system_gclk_gen_set_config+0x96>
    3070:	2302      	movs	r3, #2
    3072:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3074:	3201      	adds	r2, #1
						mask <<= 1) {
    3076:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3078:	4298      	cmp	r0, r3
    307a:	d8fb      	bhi.n	3074 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    307c:	0212      	lsls	r2, r2, #8
    307e:	4332      	orrs	r2, r6
    3080:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3082:	2380      	movs	r3, #128	; 0x80
    3084:	035b      	lsls	r3, r3, #13
    3086:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3088:	7a0b      	ldrb	r3, [r1, #8]
    308a:	2b00      	cmp	r3, #0
    308c:	d002      	beq.n	3094 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    308e:	2380      	movs	r3, #128	; 0x80
    3090:	039b      	lsls	r3, r3, #14
    3092:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3094:	4a13      	ldr	r2, [pc, #76]	; (30e4 <system_gclk_gen_set_config+0xa8>)
    3096:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3098:	b25b      	sxtb	r3, r3
    309a:	2b00      	cmp	r3, #0
    309c:	dbfb      	blt.n	3096 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    309e:	4b12      	ldr	r3, [pc, #72]	; (30e8 <system_gclk_gen_set_config+0xac>)
    30a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    30a2:	4b12      	ldr	r3, [pc, #72]	; (30ec <system_gclk_gen_set_config+0xb0>)
    30a4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30a6:	4a0f      	ldr	r2, [pc, #60]	; (30e4 <system_gclk_gen_set_config+0xa8>)
    30a8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    30aa:	b25b      	sxtb	r3, r3
    30ac:	2b00      	cmp	r3, #0
    30ae:	dbfb      	blt.n	30a8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    30b0:	4b0c      	ldr	r3, [pc, #48]	; (30e4 <system_gclk_gen_set_config+0xa8>)
    30b2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30b4:	001a      	movs	r2, r3
    30b6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    30b8:	b25b      	sxtb	r3, r3
    30ba:	2b00      	cmp	r3, #0
    30bc:	dbfb      	blt.n	30b6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    30be:	4a09      	ldr	r2, [pc, #36]	; (30e4 <system_gclk_gen_set_config+0xa8>)
    30c0:	6853      	ldr	r3, [r2, #4]
    30c2:	2180      	movs	r1, #128	; 0x80
    30c4:	0249      	lsls	r1, r1, #9
    30c6:	400b      	ands	r3, r1
    30c8:	431d      	orrs	r5, r3
    30ca:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    30cc:	4b08      	ldr	r3, [pc, #32]	; (30f0 <system_gclk_gen_set_config+0xb4>)
    30ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    30d0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    30d2:	2200      	movs	r2, #0
    30d4:	e7d2      	b.n	307c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    30d6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    30d8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    30da:	2380      	movs	r3, #128	; 0x80
    30dc:	029b      	lsls	r3, r3, #10
    30de:	431d      	orrs	r5, r3
    30e0:	e7d2      	b.n	3088 <system_gclk_gen_set_config+0x4c>
    30e2:	46c0      	nop			; (mov r8, r8)
    30e4:	40000c00 	.word	0x40000c00
    30e8:	000017b1 	.word	0x000017b1
    30ec:	40000c08 	.word	0x40000c08
    30f0:	000017f1 	.word	0x000017f1

000030f4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    30f4:	b510      	push	{r4, lr}
    30f6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30f8:	4a0b      	ldr	r2, [pc, #44]	; (3128 <system_gclk_gen_enable+0x34>)
    30fa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    30fc:	b25b      	sxtb	r3, r3
    30fe:	2b00      	cmp	r3, #0
    3100:	dbfb      	blt.n	30fa <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3102:	4b0a      	ldr	r3, [pc, #40]	; (312c <system_gclk_gen_enable+0x38>)
    3104:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3106:	4b0a      	ldr	r3, [pc, #40]	; (3130 <system_gclk_gen_enable+0x3c>)
    3108:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    310a:	4a07      	ldr	r2, [pc, #28]	; (3128 <system_gclk_gen_enable+0x34>)
    310c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    310e:	b25b      	sxtb	r3, r3
    3110:	2b00      	cmp	r3, #0
    3112:	dbfb      	blt.n	310c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3114:	4a04      	ldr	r2, [pc, #16]	; (3128 <system_gclk_gen_enable+0x34>)
    3116:	6851      	ldr	r1, [r2, #4]
    3118:	2380      	movs	r3, #128	; 0x80
    311a:	025b      	lsls	r3, r3, #9
    311c:	430b      	orrs	r3, r1
    311e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3120:	4b04      	ldr	r3, [pc, #16]	; (3134 <system_gclk_gen_enable+0x40>)
    3122:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3124:	bd10      	pop	{r4, pc}
    3126:	46c0      	nop			; (mov r8, r8)
    3128:	40000c00 	.word	0x40000c00
    312c:	000017b1 	.word	0x000017b1
    3130:	40000c04 	.word	0x40000c04
    3134:	000017f1 	.word	0x000017f1

00003138 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3138:	b570      	push	{r4, r5, r6, lr}
    313a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    313c:	4a1a      	ldr	r2, [pc, #104]	; (31a8 <system_gclk_gen_get_hz+0x70>)
    313e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3140:	b25b      	sxtb	r3, r3
    3142:	2b00      	cmp	r3, #0
    3144:	dbfb      	blt.n	313e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    3146:	4b19      	ldr	r3, [pc, #100]	; (31ac <system_gclk_gen_get_hz+0x74>)
    3148:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    314a:	4b19      	ldr	r3, [pc, #100]	; (31b0 <system_gclk_gen_get_hz+0x78>)
    314c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    314e:	4a16      	ldr	r2, [pc, #88]	; (31a8 <system_gclk_gen_get_hz+0x70>)
    3150:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3152:	b25b      	sxtb	r3, r3
    3154:	2b00      	cmp	r3, #0
    3156:	dbfb      	blt.n	3150 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3158:	4e13      	ldr	r6, [pc, #76]	; (31a8 <system_gclk_gen_get_hz+0x70>)
    315a:	6870      	ldr	r0, [r6, #4]
    315c:	04c0      	lsls	r0, r0, #19
    315e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3160:	4b14      	ldr	r3, [pc, #80]	; (31b4 <system_gclk_gen_get_hz+0x7c>)
    3162:	4798      	blx	r3
    3164:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3166:	4b12      	ldr	r3, [pc, #72]	; (31b0 <system_gclk_gen_get_hz+0x78>)
    3168:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    316a:	6876      	ldr	r6, [r6, #4]
    316c:	02f6      	lsls	r6, r6, #11
    316e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3170:	4b11      	ldr	r3, [pc, #68]	; (31b8 <system_gclk_gen_get_hz+0x80>)
    3172:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3174:	4a0c      	ldr	r2, [pc, #48]	; (31a8 <system_gclk_gen_get_hz+0x70>)
    3176:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3178:	b25b      	sxtb	r3, r3
    317a:	2b00      	cmp	r3, #0
    317c:	dbfb      	blt.n	3176 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    317e:	4b0a      	ldr	r3, [pc, #40]	; (31a8 <system_gclk_gen_get_hz+0x70>)
    3180:	689c      	ldr	r4, [r3, #8]
    3182:	0224      	lsls	r4, r4, #8
    3184:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3186:	4b0d      	ldr	r3, [pc, #52]	; (31bc <system_gclk_gen_get_hz+0x84>)
    3188:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    318a:	2e00      	cmp	r6, #0
    318c:	d107      	bne.n	319e <system_gclk_gen_get_hz+0x66>
    318e:	2c01      	cmp	r4, #1
    3190:	d907      	bls.n	31a2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3192:	0021      	movs	r1, r4
    3194:	0028      	movs	r0, r5
    3196:	4b0a      	ldr	r3, [pc, #40]	; (31c0 <system_gclk_gen_get_hz+0x88>)
    3198:	4798      	blx	r3
    319a:	0005      	movs	r5, r0
    319c:	e001      	b.n	31a2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    319e:	3401      	adds	r4, #1
    31a0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    31a2:	0028      	movs	r0, r5
    31a4:	bd70      	pop	{r4, r5, r6, pc}
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	40000c00 	.word	0x40000c00
    31ac:	000017b1 	.word	0x000017b1
    31b0:	40000c04 	.word	0x40000c04
    31b4:	00002c15 	.word	0x00002c15
    31b8:	40000c08 	.word	0x40000c08
    31bc:	000017f1 	.word	0x000017f1
    31c0:	0000536d 	.word	0x0000536d

000031c4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    31c4:	b510      	push	{r4, lr}
    31c6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    31c8:	4b06      	ldr	r3, [pc, #24]	; (31e4 <system_gclk_chan_enable+0x20>)
    31ca:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    31cc:	4b06      	ldr	r3, [pc, #24]	; (31e8 <system_gclk_chan_enable+0x24>)
    31ce:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    31d0:	4a06      	ldr	r2, [pc, #24]	; (31ec <system_gclk_chan_enable+0x28>)
    31d2:	8853      	ldrh	r3, [r2, #2]
    31d4:	2180      	movs	r1, #128	; 0x80
    31d6:	01c9      	lsls	r1, r1, #7
    31d8:	430b      	orrs	r3, r1
    31da:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    31dc:	4b04      	ldr	r3, [pc, #16]	; (31f0 <system_gclk_chan_enable+0x2c>)
    31de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    31e0:	bd10      	pop	{r4, pc}
    31e2:	46c0      	nop			; (mov r8, r8)
    31e4:	000017b1 	.word	0x000017b1
    31e8:	40000c02 	.word	0x40000c02
    31ec:	40000c00 	.word	0x40000c00
    31f0:	000017f1 	.word	0x000017f1

000031f4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    31f4:	b510      	push	{r4, lr}
    31f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    31f8:	4b0f      	ldr	r3, [pc, #60]	; (3238 <system_gclk_chan_disable+0x44>)
    31fa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    31fc:	4b0f      	ldr	r3, [pc, #60]	; (323c <system_gclk_chan_disable+0x48>)
    31fe:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3200:	4a0f      	ldr	r2, [pc, #60]	; (3240 <system_gclk_chan_disable+0x4c>)
    3202:	8853      	ldrh	r3, [r2, #2]
    3204:	051b      	lsls	r3, r3, #20
    3206:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3208:	8853      	ldrh	r3, [r2, #2]
    320a:	490e      	ldr	r1, [pc, #56]	; (3244 <system_gclk_chan_disable+0x50>)
    320c:	400b      	ands	r3, r1
    320e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3210:	8853      	ldrh	r3, [r2, #2]
    3212:	490d      	ldr	r1, [pc, #52]	; (3248 <system_gclk_chan_disable+0x54>)
    3214:	400b      	ands	r3, r1
    3216:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3218:	0011      	movs	r1, r2
    321a:	2280      	movs	r2, #128	; 0x80
    321c:	01d2      	lsls	r2, r2, #7
    321e:	884b      	ldrh	r3, [r1, #2]
    3220:	4213      	tst	r3, r2
    3222:	d1fc      	bne.n	321e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3224:	4906      	ldr	r1, [pc, #24]	; (3240 <system_gclk_chan_disable+0x4c>)
    3226:	884a      	ldrh	r2, [r1, #2]
    3228:	0203      	lsls	r3, r0, #8
    322a:	4806      	ldr	r0, [pc, #24]	; (3244 <system_gclk_chan_disable+0x50>)
    322c:	4002      	ands	r2, r0
    322e:	4313      	orrs	r3, r2
    3230:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3232:	4b06      	ldr	r3, [pc, #24]	; (324c <system_gclk_chan_disable+0x58>)
    3234:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3236:	bd10      	pop	{r4, pc}
    3238:	000017b1 	.word	0x000017b1
    323c:	40000c02 	.word	0x40000c02
    3240:	40000c00 	.word	0x40000c00
    3244:	fffff0ff 	.word	0xfffff0ff
    3248:	ffffbfff 	.word	0xffffbfff
    324c:	000017f1 	.word	0x000017f1

00003250 <system_gclk_chan_set_config>:
{
    3250:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3252:	780c      	ldrb	r4, [r1, #0]
    3254:	0224      	lsls	r4, r4, #8
    3256:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3258:	4b02      	ldr	r3, [pc, #8]	; (3264 <system_gclk_chan_set_config+0x14>)
    325a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    325c:	b2a4      	uxth	r4, r4
    325e:	4b02      	ldr	r3, [pc, #8]	; (3268 <system_gclk_chan_set_config+0x18>)
    3260:	805c      	strh	r4, [r3, #2]
}
    3262:	bd10      	pop	{r4, pc}
    3264:	000031f5 	.word	0x000031f5
    3268:	40000c00 	.word	0x40000c00

0000326c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    326c:	b510      	push	{r4, lr}
    326e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3270:	4b06      	ldr	r3, [pc, #24]	; (328c <system_gclk_chan_get_hz+0x20>)
    3272:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3274:	4b06      	ldr	r3, [pc, #24]	; (3290 <system_gclk_chan_get_hz+0x24>)
    3276:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3278:	4b06      	ldr	r3, [pc, #24]	; (3294 <system_gclk_chan_get_hz+0x28>)
    327a:	885c      	ldrh	r4, [r3, #2]
    327c:	0524      	lsls	r4, r4, #20
    327e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3280:	4b05      	ldr	r3, [pc, #20]	; (3298 <system_gclk_chan_get_hz+0x2c>)
    3282:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3284:	0020      	movs	r0, r4
    3286:	4b05      	ldr	r3, [pc, #20]	; (329c <system_gclk_chan_get_hz+0x30>)
    3288:	4798      	blx	r3
}
    328a:	bd10      	pop	{r4, pc}
    328c:	000017b1 	.word	0x000017b1
    3290:	40000c02 	.word	0x40000c02
    3294:	40000c00 	.word	0x40000c00
    3298:	000017f1 	.word	0x000017f1
    329c:	00003139 	.word	0x00003139

000032a0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    32a0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    32a2:	78d3      	ldrb	r3, [r2, #3]
    32a4:	2b00      	cmp	r3, #0
    32a6:	d135      	bne.n	3314 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    32a8:	7813      	ldrb	r3, [r2, #0]
    32aa:	2b80      	cmp	r3, #128	; 0x80
    32ac:	d029      	beq.n	3302 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    32ae:	061b      	lsls	r3, r3, #24
    32b0:	2480      	movs	r4, #128	; 0x80
    32b2:	0264      	lsls	r4, r4, #9
    32b4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    32b6:	7854      	ldrb	r4, [r2, #1]
    32b8:	2502      	movs	r5, #2
    32ba:	43ac      	bics	r4, r5
    32bc:	d106      	bne.n	32cc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    32be:	7894      	ldrb	r4, [r2, #2]
    32c0:	2c00      	cmp	r4, #0
    32c2:	d120      	bne.n	3306 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    32c4:	2480      	movs	r4, #128	; 0x80
    32c6:	02a4      	lsls	r4, r4, #10
    32c8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    32ca:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    32cc:	7854      	ldrb	r4, [r2, #1]
    32ce:	3c01      	subs	r4, #1
    32d0:	2c01      	cmp	r4, #1
    32d2:	d91c      	bls.n	330e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    32d4:	040d      	lsls	r5, r1, #16
    32d6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    32d8:	24a0      	movs	r4, #160	; 0xa0
    32da:	05e4      	lsls	r4, r4, #23
    32dc:	432c      	orrs	r4, r5
    32de:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    32e0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    32e2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    32e4:	24d0      	movs	r4, #208	; 0xd0
    32e6:	0624      	lsls	r4, r4, #24
    32e8:	432c      	orrs	r4, r5
    32ea:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    32ec:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    32ee:	78d4      	ldrb	r4, [r2, #3]
    32f0:	2c00      	cmp	r4, #0
    32f2:	d122      	bne.n	333a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    32f4:	035b      	lsls	r3, r3, #13
    32f6:	d51c      	bpl.n	3332 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    32f8:	7893      	ldrb	r3, [r2, #2]
    32fa:	2b01      	cmp	r3, #1
    32fc:	d01e      	beq.n	333c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    32fe:	6141      	str	r1, [r0, #20]
    3300:	e017      	b.n	3332 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3302:	2300      	movs	r3, #0
    3304:	e7d7      	b.n	32b6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3306:	24c0      	movs	r4, #192	; 0xc0
    3308:	02e4      	lsls	r4, r4, #11
    330a:	4323      	orrs	r3, r4
    330c:	e7dd      	b.n	32ca <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    330e:	4c0d      	ldr	r4, [pc, #52]	; (3344 <_system_pinmux_config+0xa4>)
    3310:	4023      	ands	r3, r4
    3312:	e7df      	b.n	32d4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3314:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3316:	040c      	lsls	r4, r1, #16
    3318:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    331a:	23a0      	movs	r3, #160	; 0xa0
    331c:	05db      	lsls	r3, r3, #23
    331e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3320:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3322:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3324:	23d0      	movs	r3, #208	; 0xd0
    3326:	061b      	lsls	r3, r3, #24
    3328:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    332a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    332c:	78d3      	ldrb	r3, [r2, #3]
    332e:	2b00      	cmp	r3, #0
    3330:	d103      	bne.n	333a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3332:	7853      	ldrb	r3, [r2, #1]
    3334:	3b01      	subs	r3, #1
    3336:	2b01      	cmp	r3, #1
    3338:	d902      	bls.n	3340 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    333a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    333c:	6181      	str	r1, [r0, #24]
    333e:	e7f8      	b.n	3332 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3340:	6081      	str	r1, [r0, #8]
}
    3342:	e7fa      	b.n	333a <_system_pinmux_config+0x9a>
    3344:	fffbffff 	.word	0xfffbffff

00003348 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3348:	b510      	push	{r4, lr}
    334a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    334c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    334e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3350:	2900      	cmp	r1, #0
    3352:	d104      	bne.n	335e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3354:	0943      	lsrs	r3, r0, #5
    3356:	01db      	lsls	r3, r3, #7
    3358:	4905      	ldr	r1, [pc, #20]	; (3370 <system_pinmux_pin_set_config+0x28>)
    335a:	468c      	mov	ip, r1
    335c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    335e:	241f      	movs	r4, #31
    3360:	4020      	ands	r0, r4
    3362:	2101      	movs	r1, #1
    3364:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3366:	0018      	movs	r0, r3
    3368:	4b02      	ldr	r3, [pc, #8]	; (3374 <system_pinmux_pin_set_config+0x2c>)
    336a:	4798      	blx	r3
}
    336c:	bd10      	pop	{r4, pc}
    336e:	46c0      	nop			; (mov r8, r8)
    3370:	41004400 	.word	0x41004400
    3374:	000032a1 	.word	0x000032a1

00003378 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3378:	4770      	bx	lr
	...

0000337c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    337c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    337e:	4b05      	ldr	r3, [pc, #20]	; (3394 <system_init+0x18>)
    3380:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3382:	4b05      	ldr	r3, [pc, #20]	; (3398 <system_init+0x1c>)
    3384:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3386:	4b05      	ldr	r3, [pc, #20]	; (339c <system_init+0x20>)
    3388:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    338a:	4b05      	ldr	r3, [pc, #20]	; (33a0 <system_init+0x24>)
    338c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    338e:	4b05      	ldr	r3, [pc, #20]	; (33a4 <system_init+0x28>)
    3390:	4798      	blx	r3
}
    3392:	bd10      	pop	{r4, pc}
    3394:	00002ec5 	.word	0x00002ec5
    3398:	0000019d 	.word	0x0000019d
    339c:	00003379 	.word	0x00003379
    33a0:	00003379 	.word	0x00003379
    33a4:	00003379 	.word	0x00003379

000033a8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    33a8:	e7fe      	b.n	33a8 <Dummy_Handler>
	...

000033ac <Reset_Handler>:
{
    33ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    33ae:	4a2a      	ldr	r2, [pc, #168]	; (3458 <Reset_Handler+0xac>)
    33b0:	4b2a      	ldr	r3, [pc, #168]	; (345c <Reset_Handler+0xb0>)
    33b2:	429a      	cmp	r2, r3
    33b4:	d011      	beq.n	33da <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    33b6:	001a      	movs	r2, r3
    33b8:	4b29      	ldr	r3, [pc, #164]	; (3460 <Reset_Handler+0xb4>)
    33ba:	429a      	cmp	r2, r3
    33bc:	d20d      	bcs.n	33da <Reset_Handler+0x2e>
    33be:	4a29      	ldr	r2, [pc, #164]	; (3464 <Reset_Handler+0xb8>)
    33c0:	3303      	adds	r3, #3
    33c2:	1a9b      	subs	r3, r3, r2
    33c4:	089b      	lsrs	r3, r3, #2
    33c6:	3301      	adds	r3, #1
    33c8:	009b      	lsls	r3, r3, #2
    33ca:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    33cc:	4823      	ldr	r0, [pc, #140]	; (345c <Reset_Handler+0xb0>)
    33ce:	4922      	ldr	r1, [pc, #136]	; (3458 <Reset_Handler+0xac>)
    33d0:	588c      	ldr	r4, [r1, r2]
    33d2:	5084      	str	r4, [r0, r2]
    33d4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    33d6:	429a      	cmp	r2, r3
    33d8:	d1fa      	bne.n	33d0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    33da:	4a23      	ldr	r2, [pc, #140]	; (3468 <Reset_Handler+0xbc>)
    33dc:	4b23      	ldr	r3, [pc, #140]	; (346c <Reset_Handler+0xc0>)
    33de:	429a      	cmp	r2, r3
    33e0:	d20a      	bcs.n	33f8 <Reset_Handler+0x4c>
    33e2:	43d3      	mvns	r3, r2
    33e4:	4921      	ldr	r1, [pc, #132]	; (346c <Reset_Handler+0xc0>)
    33e6:	185b      	adds	r3, r3, r1
    33e8:	2103      	movs	r1, #3
    33ea:	438b      	bics	r3, r1
    33ec:	3304      	adds	r3, #4
    33ee:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    33f0:	2100      	movs	r1, #0
    33f2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    33f4:	4293      	cmp	r3, r2
    33f6:	d1fc      	bne.n	33f2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    33f8:	4a1d      	ldr	r2, [pc, #116]	; (3470 <Reset_Handler+0xc4>)
    33fa:	21ff      	movs	r1, #255	; 0xff
    33fc:	4b1d      	ldr	r3, [pc, #116]	; (3474 <Reset_Handler+0xc8>)
    33fe:	438b      	bics	r3, r1
    3400:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3402:	39fd      	subs	r1, #253	; 0xfd
    3404:	2390      	movs	r3, #144	; 0x90
    3406:	005b      	lsls	r3, r3, #1
    3408:	4a1b      	ldr	r2, [pc, #108]	; (3478 <Reset_Handler+0xcc>)
    340a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    340c:	4a1b      	ldr	r2, [pc, #108]	; (347c <Reset_Handler+0xd0>)
    340e:	78d3      	ldrb	r3, [r2, #3]
    3410:	2503      	movs	r5, #3
    3412:	43ab      	bics	r3, r5
    3414:	2402      	movs	r4, #2
    3416:	4323      	orrs	r3, r4
    3418:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    341a:	78d3      	ldrb	r3, [r2, #3]
    341c:	270c      	movs	r7, #12
    341e:	43bb      	bics	r3, r7
    3420:	2608      	movs	r6, #8
    3422:	4333      	orrs	r3, r6
    3424:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3426:	4b16      	ldr	r3, [pc, #88]	; (3480 <Reset_Handler+0xd4>)
    3428:	7b98      	ldrb	r0, [r3, #14]
    342a:	2230      	movs	r2, #48	; 0x30
    342c:	4390      	bics	r0, r2
    342e:	2220      	movs	r2, #32
    3430:	4310      	orrs	r0, r2
    3432:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3434:	7b99      	ldrb	r1, [r3, #14]
    3436:	43b9      	bics	r1, r7
    3438:	4331      	orrs	r1, r6
    343a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    343c:	7b9a      	ldrb	r2, [r3, #14]
    343e:	43aa      	bics	r2, r5
    3440:	4322      	orrs	r2, r4
    3442:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3444:	4a0f      	ldr	r2, [pc, #60]	; (3484 <Reset_Handler+0xd8>)
    3446:	6853      	ldr	r3, [r2, #4]
    3448:	2180      	movs	r1, #128	; 0x80
    344a:	430b      	orrs	r3, r1
    344c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    344e:	4b0e      	ldr	r3, [pc, #56]	; (3488 <Reset_Handler+0xdc>)
    3450:	4798      	blx	r3
        main();
    3452:	4b0e      	ldr	r3, [pc, #56]	; (348c <Reset_Handler+0xe0>)
    3454:	4798      	blx	r3
    3456:	e7fe      	b.n	3456 <Reset_Handler+0xaa>
    3458:	000067e4 	.word	0x000067e4
    345c:	20000000 	.word	0x20000000
    3460:	20000094 	.word	0x20000094
    3464:	20000004 	.word	0x20000004
    3468:	20000094 	.word	0x20000094
    346c:	20000cb4 	.word	0x20000cb4
    3470:	e000ed00 	.word	0xe000ed00
    3474:	00000000 	.word	0x00000000
    3478:	41007000 	.word	0x41007000
    347c:	41005000 	.word	0x41005000
    3480:	41004800 	.word	0x41004800
    3484:	41004000 	.word	0x41004000
    3488:	000056ad 	.word	0x000056ad
    348c:	00005265 	.word	0x00005265

00003490 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3490:	b5f0      	push	{r4, r5, r6, r7, lr}
    3492:	46c6      	mov	lr, r8
    3494:	b500      	push	{lr}
    3496:	000c      	movs	r4, r1
    3498:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    349a:	2800      	cmp	r0, #0
    349c:	d10f      	bne.n	34be <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    349e:	2a00      	cmp	r2, #0
    34a0:	dd11      	ble.n	34c6 <_read+0x36>
    34a2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    34a4:	4e09      	ldr	r6, [pc, #36]	; (34cc <_read+0x3c>)
    34a6:	4d0a      	ldr	r5, [pc, #40]	; (34d0 <_read+0x40>)
    34a8:	6830      	ldr	r0, [r6, #0]
    34aa:	0021      	movs	r1, r4
    34ac:	682b      	ldr	r3, [r5, #0]
    34ae:	4798      	blx	r3
		ptr++;
    34b0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    34b2:	42bc      	cmp	r4, r7
    34b4:	d1f8      	bne.n	34a8 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    34b6:	4640      	mov	r0, r8
    34b8:	bc04      	pop	{r2}
    34ba:	4690      	mov	r8, r2
    34bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    34be:	2301      	movs	r3, #1
    34c0:	425b      	negs	r3, r3
    34c2:	4698      	mov	r8, r3
    34c4:	e7f7      	b.n	34b6 <_read+0x26>
	for (; len > 0; --len) {
    34c6:	4680      	mov	r8, r0
    34c8:	e7f5      	b.n	34b6 <_read+0x26>
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	20000a18 	.word	0x20000a18
    34d0:	20000a10 	.word	0x20000a10

000034d4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    34d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34d6:	46c6      	mov	lr, r8
    34d8:	b500      	push	{lr}
    34da:	000e      	movs	r6, r1
    34dc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    34de:	3801      	subs	r0, #1
    34e0:	2802      	cmp	r0, #2
    34e2:	d810      	bhi.n	3506 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    34e4:	2a00      	cmp	r2, #0
    34e6:	d011      	beq.n	350c <_write+0x38>
    34e8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    34ea:	4b0c      	ldr	r3, [pc, #48]	; (351c <_write+0x48>)
    34ec:	4698      	mov	r8, r3
    34ee:	4f0c      	ldr	r7, [pc, #48]	; (3520 <_write+0x4c>)
    34f0:	4643      	mov	r3, r8
    34f2:	6818      	ldr	r0, [r3, #0]
    34f4:	5d31      	ldrb	r1, [r6, r4]
    34f6:	683b      	ldr	r3, [r7, #0]
    34f8:	4798      	blx	r3
    34fa:	2800      	cmp	r0, #0
    34fc:	db08      	blt.n	3510 <_write+0x3c>
			return -1;
		}
		++nChars;
    34fe:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3500:	42a5      	cmp	r5, r4
    3502:	d1f5      	bne.n	34f0 <_write+0x1c>
    3504:	e006      	b.n	3514 <_write+0x40>
		return -1;
    3506:	2401      	movs	r4, #1
    3508:	4264      	negs	r4, r4
    350a:	e003      	b.n	3514 <_write+0x40>
	for (; len != 0; --len) {
    350c:	0014      	movs	r4, r2
    350e:	e001      	b.n	3514 <_write+0x40>
			return -1;
    3510:	2401      	movs	r4, #1
    3512:	4264      	negs	r4, r4
	}
	return nChars;
}
    3514:	0020      	movs	r0, r4
    3516:	bc04      	pop	{r2}
    3518:	4690      	mov	r8, r2
    351a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    351c:	20000a18 	.word	0x20000a18
    3520:	20000a14 	.word	0x20000a14

00003524 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3524:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3526:	4a06      	ldr	r2, [pc, #24]	; (3540 <_sbrk+0x1c>)
    3528:	6812      	ldr	r2, [r2, #0]
    352a:	2a00      	cmp	r2, #0
    352c:	d004      	beq.n	3538 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    352e:	4a04      	ldr	r2, [pc, #16]	; (3540 <_sbrk+0x1c>)
    3530:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3532:	18c3      	adds	r3, r0, r3
    3534:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3536:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3538:	4902      	ldr	r1, [pc, #8]	; (3544 <_sbrk+0x20>)
    353a:	4a01      	ldr	r2, [pc, #4]	; (3540 <_sbrk+0x1c>)
    353c:	6011      	str	r1, [r2, #0]
    353e:	e7f6      	b.n	352e <_sbrk+0xa>
    3540:	2000017c 	.word	0x2000017c
    3544:	20002cb8 	.word	0x20002cb8

00003548 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3548:	2001      	movs	r0, #1
    354a:	4240      	negs	r0, r0
    354c:	4770      	bx	lr

0000354e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    354e:	2380      	movs	r3, #128	; 0x80
    3550:	019b      	lsls	r3, r3, #6
    3552:	604b      	str	r3, [r1, #4]

	return 0;
}
    3554:	2000      	movs	r0, #0
    3556:	4770      	bx	lr

00003558 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3558:	2000      	movs	r0, #0
    355a:	4770      	bx	lr

0000355c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    355c:	b530      	push	{r4, r5, lr}
    355e:	b087      	sub	sp, #28
    3560:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    3562:	aa01      	add	r2, sp, #4
    3564:	23a0      	movs	r3, #160	; 0xa0
    3566:	011b      	lsls	r3, r3, #4
    3568:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    356a:	2300      	movs	r3, #0
    356c:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    356e:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    3570:	21fa      	movs	r1, #250	; 0xfa
    3572:	00c9      	lsls	r1, r1, #3
    3574:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    3576:	2101      	movs	r1, #1
    3578:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    357a:	2004      	movs	r0, #4
    357c:	7210      	strb	r0, [r2, #8]
    357e:	7253      	strb	r3, [r2, #9]
    3580:	7293      	strb	r3, [r2, #10]
    3582:	72d3      	strb	r3, [r2, #11]
    3584:	7311      	strb	r1, [r2, #12]
    3586:	7351      	strb	r1, [r2, #13]
    3588:	4b14      	ldr	r3, [pc, #80]	; (35dc <disk_initialize+0x80>)
    358a:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    358c:	2306      	movs	r3, #6
    358e:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3590:	4d13      	ldr	r5, [pc, #76]	; (35e0 <disk_initialize+0x84>)
    3592:	4914      	ldr	r1, [pc, #80]	; (35e4 <disk_initialize+0x88>)
    3594:	0028      	movs	r0, r5
    3596:	4b14      	ldr	r3, [pc, #80]	; (35e8 <disk_initialize+0x8c>)
    3598:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    359a:	0028      	movs	r0, r5
    359c:	4b13      	ldr	r3, [pc, #76]	; (35ec <disk_initialize+0x90>)
    359e:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    35a0:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    35a2:	2c01      	cmp	r4, #1
    35a4:	d901      	bls.n	35aa <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    35a6:	b007      	add	sp, #28
    35a8:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    35aa:	0020      	movs	r0, r4
    35ac:	4b10      	ldr	r3, [pc, #64]	; (35f0 <disk_initialize+0x94>)
    35ae:	4798      	blx	r3
    35b0:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    35b2:	2803      	cmp	r0, #3
    35b4:	d106      	bne.n	35c4 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    35b6:	0020      	movs	r0, r4
    35b8:	4b0d      	ldr	r3, [pc, #52]	; (35f0 <disk_initialize+0x94>)
    35ba:	4798      	blx	r3
    35bc:	0003      	movs	r3, r0
		return STA_NOINIT;
    35be:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    35c0:	2b03      	cmp	r3, #3
    35c2:	d0f0      	beq.n	35a6 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    35c4:	2b00      	cmp	r3, #0
    35c6:	d106      	bne.n	35d6 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    35c8:	0020      	movs	r0, r4
    35ca:	4b0a      	ldr	r3, [pc, #40]	; (35f4 <disk_initialize+0x98>)
    35cc:	4798      	blx	r3
	return 0;
    35ce:	1e43      	subs	r3, r0, #1
    35d0:	4198      	sbcs	r0, r3
    35d2:	0080      	lsls	r0, r0, #2
    35d4:	e7e7      	b.n	35a6 <disk_initialize+0x4a>
		return STA_NOINIT;
    35d6:	2001      	movs	r0, #1
    35d8:	e7e5      	b.n	35a6 <disk_initialize+0x4a>
    35da:	46c0      	nop			; (mov r8, r8)
    35dc:	000007de 	.word	0x000007de
    35e0:	20000a1c 	.word	0x20000a1c
    35e4:	40001400 	.word	0x40001400
    35e8:	00001989 	.word	0x00001989
    35ec:	00001845 	.word	0x00001845
    35f0:	0000171d 	.word	0x0000171d
    35f4:	00001759 	.word	0x00001759

000035f8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    35f8:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    35fa:	4b05      	ldr	r3, [pc, #20]	; (3610 <disk_status+0x18>)
    35fc:	4798      	blx	r3
    35fe:	1e03      	subs	r3, r0, #0
    3600:	d004      	beq.n	360c <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    3602:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    3604:	2b02      	cmp	r3, #2
    3606:	d000      	beq.n	360a <disk_status+0x12>
	default:
		return STA_NOINIT;
    3608:	3802      	subs	r0, #2
	}
}
    360a:	bd10      	pop	{r4, pc}
		return 0;
    360c:	2000      	movs	r0, #0
    360e:	e7fc      	b.n	360a <disk_status+0x12>
    3610:	0000171d 	.word	0x0000171d

00003614 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    3614:	b5f0      	push	{r4, r5, r6, r7, lr}
    3616:	46de      	mov	lr, fp
    3618:	464f      	mov	r7, r9
    361a:	4646      	mov	r6, r8
    361c:	b5c0      	push	{r6, r7, lr}
    361e:	b084      	sub	sp, #16
    3620:	9001      	str	r0, [sp, #4]
    3622:	000d      	movs	r5, r1
    3624:	0014      	movs	r4, r2
    3626:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3628:	4b18      	ldr	r3, [pc, #96]	; (368c <disk_read+0x78>)
    362a:	4798      	blx	r3
    362c:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    362e:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3630:	2e00      	cmp	r6, #0
    3632:	d105      	bne.n	3640 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3634:	b004      	add	sp, #16
    3636:	bc1c      	pop	{r2, r3, r4}
    3638:	4690      	mov	r8, r2
    363a:	4699      	mov	r9, r3
    363c:	46a3      	mov	fp, r4
    363e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3640:	a903      	add	r1, sp, #12
    3642:	9801      	ldr	r0, [sp, #4]
    3644:	4b12      	ldr	r3, [pc, #72]	; (3690 <disk_read+0x7c>)
    3646:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3648:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    364a:	0032      	movs	r2, r6
    364c:	437a      	muls	r2, r7
    364e:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3650:	9b03      	ldr	r3, [sp, #12]
    3652:	3301      	adds	r3, #1
    3654:	4373      	muls	r3, r6
		return RES_PARERR;
    3656:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3658:	429a      	cmp	r2, r3
    365a:	d8eb      	bhi.n	3634 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    365c:	2f00      	cmp	r7, #0
    365e:	d011      	beq.n	3684 <disk_read+0x70>
    3660:	0273      	lsls	r3, r6, #9
    3662:	4698      	mov	r8, r3
    3664:	1c7b      	adds	r3, r7, #1
    3666:	469b      	mov	fp, r3
    3668:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    366a:	4e0a      	ldr	r6, [pc, #40]	; (3694 <disk_read+0x80>)
    366c:	002a      	movs	r2, r5
    366e:	0021      	movs	r1, r4
    3670:	9801      	ldr	r0, [sp, #4]
    3672:	47b0      	blx	r6
    3674:	2800      	cmp	r0, #0
    3676:	d107      	bne.n	3688 <disk_read+0x74>
    3678:	3701      	adds	r7, #1
    367a:	444c      	add	r4, r9
    367c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    367e:	455f      	cmp	r7, fp
    3680:	d1f4      	bne.n	366c <disk_read+0x58>
    3682:	e7d7      	b.n	3634 <disk_read+0x20>
	return RES_OK;
    3684:	2000      	movs	r0, #0
    3686:	e7d5      	b.n	3634 <disk_read+0x20>
			return RES_ERROR;
    3688:	2001      	movs	r0, #1
    368a:	e7d3      	b.n	3634 <disk_read+0x20>
    368c:	00001751 	.word	0x00001751
    3690:	00001735 	.word	0x00001735
    3694:	00001771 	.word	0x00001771

00003698 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    3698:	b5f0      	push	{r4, r5, r6, r7, lr}
    369a:	46de      	mov	lr, fp
    369c:	464f      	mov	r7, r9
    369e:	4646      	mov	r6, r8
    36a0:	b5c0      	push	{r6, r7, lr}
    36a2:	b084      	sub	sp, #16
    36a4:	9001      	str	r0, [sp, #4]
    36a6:	000d      	movs	r5, r1
    36a8:	0014      	movs	r4, r2
    36aa:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    36ac:	4b18      	ldr	r3, [pc, #96]	; (3710 <disk_write+0x78>)
    36ae:	4798      	blx	r3
    36b0:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    36b2:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    36b4:	2e00      	cmp	r6, #0
    36b6:	d105      	bne.n	36c4 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    36b8:	b004      	add	sp, #16
    36ba:	bc1c      	pop	{r2, r3, r4}
    36bc:	4690      	mov	r8, r2
    36be:	4699      	mov	r9, r3
    36c0:	46a3      	mov	fp, r4
    36c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    36c4:	a903      	add	r1, sp, #12
    36c6:	9801      	ldr	r0, [sp, #4]
    36c8:	4b12      	ldr	r3, [pc, #72]	; (3714 <disk_write+0x7c>)
    36ca:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    36cc:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    36ce:	0032      	movs	r2, r6
    36d0:	437a      	muls	r2, r7
    36d2:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    36d4:	9b03      	ldr	r3, [sp, #12]
    36d6:	3301      	adds	r3, #1
    36d8:	4373      	muls	r3, r6
		return RES_PARERR;
    36da:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    36dc:	429a      	cmp	r2, r3
    36de:	d8eb      	bhi.n	36b8 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    36e0:	2f00      	cmp	r7, #0
    36e2:	d011      	beq.n	3708 <disk_write+0x70>
    36e4:	0273      	lsls	r3, r6, #9
    36e6:	4698      	mov	r8, r3
    36e8:	1c7b      	adds	r3, r7, #1
    36ea:	469b      	mov	fp, r3
    36ec:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    36ee:	4e0a      	ldr	r6, [pc, #40]	; (3718 <disk_write+0x80>)
    36f0:	002a      	movs	r2, r5
    36f2:	0021      	movs	r1, r4
    36f4:	9801      	ldr	r0, [sp, #4]
    36f6:	47b0      	blx	r6
    36f8:	2800      	cmp	r0, #0
    36fa:	d107      	bne.n	370c <disk_write+0x74>
    36fc:	3701      	adds	r7, #1
    36fe:	444c      	add	r4, r9
    3700:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    3702:	455f      	cmp	r7, fp
    3704:	d1f4      	bne.n	36f0 <disk_write+0x58>
    3706:	e7d7      	b.n	36b8 <disk_write+0x20>
	return RES_OK;
    3708:	2000      	movs	r0, #0
    370a:	e7d5      	b.n	36b8 <disk_write+0x20>
			return RES_ERROR;
    370c:	2001      	movs	r0, #1
    370e:	e7d3      	b.n	36b8 <disk_write+0x20>
    3710:	00001751 	.word	0x00001751
    3714:	00001735 	.word	0x00001735
    3718:	00001791 	.word	0x00001791

0000371c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    371c:	b510      	push	{r4, lr}
    371e:	b082      	sub	sp, #8
    3720:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    3722:	2901      	cmp	r1, #1
    3724:	d00b      	beq.n	373e <disk_ioctl+0x22>
    3726:	2900      	cmp	r1, #0
    3728:	d020      	beq.n	376c <disk_ioctl+0x50>
    372a:	2902      	cmp	r1, #2
    372c:	d00f      	beq.n	374e <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    372e:	2004      	movs	r0, #4
	switch (ctrl) {
    3730:	2903      	cmp	r1, #3
    3732:	d102      	bne.n	373a <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    3734:	2301      	movs	r3, #1
    3736:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    3738:	2000      	movs	r0, #0
	}

	return res;
}
    373a:	b002      	add	sp, #8
    373c:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    373e:	a901      	add	r1, sp, #4
    3740:	4b0e      	ldr	r3, [pc, #56]	; (377c <disk_ioctl+0x60>)
    3742:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    3744:	9b01      	ldr	r3, [sp, #4]
    3746:	3301      	adds	r3, #1
    3748:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    374a:	2000      	movs	r0, #0
	break;
    374c:	e7f5      	b.n	373a <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    374e:	4b0c      	ldr	r3, [pc, #48]	; (3780 <disk_ioctl+0x64>)
    3750:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    3752:	1e43      	subs	r3, r0, #1
    3754:	b2db      	uxtb	r3, r3
    3756:	2b01      	cmp	r3, #1
    3758:	d904      	bls.n	3764 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    375a:	1f03      	subs	r3, r0, #4
    375c:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    375e:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3760:	4213      	tst	r3, r2
    3762:	d1ea      	bne.n	373a <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3764:	2300      	movs	r3, #0
    3766:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    3768:	2000      	movs	r0, #0
	break;
    376a:	e7e6      	b.n	373a <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    376c:	4b05      	ldr	r3, [pc, #20]	; (3784 <disk_ioctl+0x68>)
    376e:	4798      	blx	r3
    3770:	2800      	cmp	r0, #0
    3772:	d001      	beq.n	3778 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    3774:	2003      	movs	r0, #3
    3776:	e7e0      	b.n	373a <disk_ioctl+0x1e>
			res = RES_OK;
    3778:	2000      	movs	r0, #0
    377a:	e7de      	b.n	373a <disk_ioctl+0x1e>
    377c:	00001735 	.word	0x00001735
    3780:	00001751 	.word	0x00001751
    3784:	0000171d 	.word	0x0000171d

00003788 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    3788:	b500      	push	{lr}
    378a:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    378c:	4669      	mov	r1, sp
    378e:	480f      	ldr	r0, [pc, #60]	; (37cc <get_fattime+0x44>)
    3790:	4b0f      	ldr	r3, [pc, #60]	; (37d0 <get_fattime+0x48>)
    3792:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    3794:	466b      	mov	r3, sp
    3796:	7958      	ldrb	r0, [r3, #5]
    3798:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    379a:	791b      	ldrb	r3, [r3, #4]
    379c:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    379e:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    37a0:	466b      	mov	r3, sp
    37a2:	789b      	ldrb	r3, [r3, #2]
    37a4:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    37a6:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    37a8:	466b      	mov	r3, sp
    37aa:	785b      	ldrb	r3, [r3, #1]
    37ac:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    37ae:	4318      	orrs	r0, r3
    37b0:	466b      	mov	r3, sp
    37b2:	781b      	ldrb	r3, [r3, #0]
    37b4:	085b      	lsrs	r3, r3, #1
    37b6:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    37b8:	466b      	mov	r3, sp
    37ba:	88db      	ldrh	r3, [r3, #6]
    37bc:	4a05      	ldr	r2, [pc, #20]	; (37d4 <get_fattime+0x4c>)
    37be:	4694      	mov	ip, r2
    37c0:	4463      	add	r3, ip
    37c2:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    37c4:	4318      	orrs	r0, r3

	return ul_time;
}
    37c6:	b003      	add	sp, #12
    37c8:	bd00      	pop	{pc}
    37ca:	46c0      	nop			; (mov r8, r8)
    37cc:	20000a1c 	.word	0x20000a1c
    37d0:	00001911 	.word	0x00001911
    37d4:	fffff844 	.word	0xfffff844

000037d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    37d8:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    37da:	2a00      	cmp	r2, #0
    37dc:	d005      	beq.n	37ea <mem_cpy+0x12>
    37de:	2300      	movs	r3, #0
		*d++ = *s++;
    37e0:	5ccc      	ldrb	r4, [r1, r3]
    37e2:	54c4      	strb	r4, [r0, r3]
    37e4:	3301      	adds	r3, #1
	while (cnt--)
    37e6:	4293      	cmp	r3, r2
    37e8:	d1fa      	bne.n	37e0 <mem_cpy+0x8>
}
    37ea:	bd10      	pop	{r4, pc}

000037ec <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    37ec:	2a00      	cmp	r2, #0
    37ee:	d005      	beq.n	37fc <mem_set+0x10>
    37f0:	0003      	movs	r3, r0
    37f2:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    37f4:	7019      	strb	r1, [r3, #0]
    37f6:	3301      	adds	r3, #1
	while (cnt--)
    37f8:	4293      	cmp	r3, r2
    37fa:	d1fb      	bne.n	37f4 <mem_set+0x8>
}
    37fc:	4770      	bx	lr

000037fe <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    37fe:	0002      	movs	r2, r0
	clst -= 2;
    3800:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    3802:	6983      	ldr	r3, [r0, #24]
    3804:	3b02      	subs	r3, #2
    3806:	2000      	movs	r0, #0
    3808:	4299      	cmp	r1, r3
    380a:	d203      	bcs.n	3814 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    380c:	7890      	ldrb	r0, [r2, #2]
    380e:	4341      	muls	r1, r0
    3810:	6a90      	ldr	r0, [r2, #40]	; 0x28
    3812:	1808      	adds	r0, r1, r0
}
    3814:	4770      	bx	lr

00003816 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    3816:	0002      	movs	r2, r0
    3818:	0001      	movs	r1, r0
    381a:	310b      	adds	r1, #11
	BYTE sum = 0;
    381c:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    381e:	0843      	lsrs	r3, r0, #1
    3820:	01c0      	lsls	r0, r0, #7
    3822:	4303      	orrs	r3, r0
    3824:	7810      	ldrb	r0, [r2, #0]
    3826:	1818      	adds	r0, r3, r0
    3828:	b2c0      	uxtb	r0, r0
    382a:	3201      	adds	r2, #1
    382c:	428a      	cmp	r2, r1
    382e:	d1f6      	bne.n	381e <sum_sfn+0x8>
	return sum;
}
    3830:	4770      	bx	lr
	...

00003834 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    3834:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    3836:	2800      	cmp	r0, #0
    3838:	d010      	beq.n	385c <validate+0x28>
    383a:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    383c:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    383e:	2a00      	cmp	r2, #0
    3840:	d101      	bne.n	3846 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    3842:	0018      	movs	r0, r3
    3844:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    3846:	88c2      	ldrh	r2, [r0, #6]
    3848:	428a      	cmp	r2, r1
    384a:	d1fa      	bne.n	3842 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    384c:	7840      	ldrb	r0, [r0, #1]
    384e:	4b04      	ldr	r3, [pc, #16]	; (3860 <validate+0x2c>)
    3850:	4798      	blx	r3
		return FR_NOT_READY;
    3852:	2303      	movs	r3, #3
	return FR_OK;
    3854:	07c0      	lsls	r0, r0, #31
    3856:	17c0      	asrs	r0, r0, #31
    3858:	4003      	ands	r3, r0
    385a:	e7f2      	b.n	3842 <validate+0xe>
		return FR_INVALID_OBJECT;
    385c:	2309      	movs	r3, #9
    385e:	e7f0      	b.n	3842 <validate+0xe>
    3860:	000035f9 	.word	0x000035f9

00003864 <check_fs>:
{
    3864:	b570      	push	{r4, r5, r6, lr}
    3866:	0004      	movs	r4, r0
    3868:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    386a:	0001      	movs	r1, r0
    386c:	3130      	adds	r1, #48	; 0x30
    386e:	7840      	ldrb	r0, [r0, #1]
    3870:	2301      	movs	r3, #1
    3872:	4d1f      	ldr	r5, [pc, #124]	; (38f0 <check_fs+0x8c>)
    3874:	47a8      	blx	r5
		return 3;
    3876:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3878:	2800      	cmp	r0, #0
    387a:	d001      	beq.n	3880 <check_fs+0x1c>
}
    387c:	0018      	movs	r0, r3
    387e:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3880:	4b1c      	ldr	r3, [pc, #112]	; (38f4 <check_fs+0x90>)
    3882:	5ce3      	ldrb	r3, [r4, r3]
    3884:	021b      	lsls	r3, r3, #8
    3886:	4a1c      	ldr	r2, [pc, #112]	; (38f8 <check_fs+0x94>)
    3888:	5ca2      	ldrb	r2, [r4, r2]
    388a:	431a      	orrs	r2, r3
    388c:	491b      	ldr	r1, [pc, #108]	; (38fc <check_fs+0x98>)
    388e:	b212      	sxth	r2, r2
		return 2;
    3890:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3892:	428a      	cmp	r2, r1
    3894:	d1f2      	bne.n	387c <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    3896:	3367      	adds	r3, #103	; 0x67
    3898:	5ce3      	ldrb	r3, [r4, r3]
    389a:	061b      	lsls	r3, r3, #24
    389c:	2268      	movs	r2, #104	; 0x68
    389e:	5ca2      	ldrb	r2, [r4, r2]
    38a0:	0412      	lsls	r2, r2, #16
    38a2:	4313      	orrs	r3, r2
    38a4:	2266      	movs	r2, #102	; 0x66
    38a6:	5ca2      	ldrb	r2, [r4, r2]
    38a8:	4313      	orrs	r3, r2
    38aa:	2267      	movs	r2, #103	; 0x67
    38ac:	5ca2      	ldrb	r2, [r4, r2]
    38ae:	0212      	lsls	r2, r2, #8
    38b0:	4313      	orrs	r3, r2
    38b2:	021b      	lsls	r3, r3, #8
    38b4:	0a1b      	lsrs	r3, r3, #8
    38b6:	4a12      	ldr	r2, [pc, #72]	; (3900 <check_fs+0x9c>)
    38b8:	4293      	cmp	r3, r2
    38ba:	d016      	beq.n	38ea <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    38bc:	2385      	movs	r3, #133	; 0x85
    38be:	5ce3      	ldrb	r3, [r4, r3]
    38c0:	061b      	lsls	r3, r3, #24
    38c2:	2284      	movs	r2, #132	; 0x84
    38c4:	5ca2      	ldrb	r2, [r4, r2]
    38c6:	0412      	lsls	r2, r2, #16
    38c8:	4313      	orrs	r3, r2
    38ca:	2282      	movs	r2, #130	; 0x82
    38cc:	5ca2      	ldrb	r2, [r4, r2]
    38ce:	4313      	orrs	r3, r2
    38d0:	2283      	movs	r2, #131	; 0x83
    38d2:	5ca2      	ldrb	r2, [r4, r2]
    38d4:	0212      	lsls	r2, r2, #8
    38d6:	4313      	orrs	r3, r2
    38d8:	021b      	lsls	r3, r3, #8
    38da:	0a1b      	lsrs	r3, r3, #8
    38dc:	4a09      	ldr	r2, [pc, #36]	; (3904 <check_fs+0xa0>)
    38de:	4694      	mov	ip, r2
    38e0:	4463      	add	r3, ip
    38e2:	1e58      	subs	r0, r3, #1
    38e4:	4183      	sbcs	r3, r0
		return 3;
    38e6:	b2db      	uxtb	r3, r3
    38e8:	e7c8      	b.n	387c <check_fs+0x18>
		return 0;
    38ea:	2300      	movs	r3, #0
    38ec:	e7c6      	b.n	387c <check_fs+0x18>
    38ee:	46c0      	nop			; (mov r8, r8)
    38f0:	00003615 	.word	0x00003615
    38f4:	0000022f 	.word	0x0000022f
    38f8:	0000022e 	.word	0x0000022e
    38fc:	ffffaa55 	.word	0xffffaa55
    3900:	00544146 	.word	0x00544146
    3904:	ffabbeba 	.word	0xffabbeba

00003908 <chk_mounted>:
{
    3908:	b5f0      	push	{r4, r5, r6, r7, lr}
    390a:	46d6      	mov	lr, sl
    390c:	464f      	mov	r7, r9
    390e:	4646      	mov	r6, r8
    3910:	b5c0      	push	{r6, r7, lr}
    3912:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    3914:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    3916:	781c      	ldrb	r4, [r3, #0]
    3918:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    391a:	2c09      	cmp	r4, #9
    391c:	d80e      	bhi.n	393c <chk_mounted+0x34>
    391e:	785a      	ldrb	r2, [r3, #1]
    3920:	2a3a      	cmp	r2, #58	; 0x3a
    3922:	d001      	beq.n	3928 <chk_mounted+0x20>
    3924:	2400      	movs	r4, #0
    3926:	e00a      	b.n	393e <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    3928:	3302      	adds	r3, #2
    392a:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    392c:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    392e:	2c07      	cmp	r4, #7
    3930:	d905      	bls.n	393e <chk_mounted+0x36>
}
    3932:	bc1c      	pop	{r2, r3, r4}
    3934:	4690      	mov	r8, r2
    3936:	4699      	mov	r9, r3
    3938:	46a2      	mov	sl, r4
    393a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    393c:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    393e:	00a3      	lsls	r3, r4, #2
    3940:	4ac5      	ldr	r2, [pc, #788]	; (3c58 <chk_mounted+0x350>)
    3942:	589e      	ldr	r6, [r3, r2]
    3944:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3946:	2e00      	cmp	r6, #0
    3948:	d100      	bne.n	394c <chk_mounted+0x44>
    394a:	e0e8      	b.n	3b1e <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    394c:	7833      	ldrb	r3, [r6, #0]
    394e:	2b00      	cmp	r3, #0
    3950:	d00d      	beq.n	396e <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    3952:	7870      	ldrb	r0, [r6, #1]
    3954:	4bc1      	ldr	r3, [pc, #772]	; (3c5c <chk_mounted+0x354>)
    3956:	4798      	blx	r3
    3958:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    395a:	07c2      	lsls	r2, r0, #31
    395c:	d407      	bmi.n	396e <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    395e:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    3960:	2d00      	cmp	r5, #0
    3962:	d0e6      	beq.n	3932 <chk_mounted+0x2a>
    3964:	075b      	lsls	r3, r3, #29
    3966:	d400      	bmi.n	396a <chk_mounted+0x62>
    3968:	e0db      	b.n	3b22 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    396a:	300a      	adds	r0, #10
    396c:	e7e1      	b.n	3932 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    396e:	2300      	movs	r3, #0
    3970:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    3972:	b2e0      	uxtb	r0, r4
    3974:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    3976:	4bba      	ldr	r3, [pc, #744]	; (3c60 <chk_mounted+0x358>)
    3978:	4798      	blx	r3
    397a:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    397c:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    397e:	07da      	lsls	r2, r3, #31
    3980:	d4d7      	bmi.n	3932 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3982:	2d00      	cmp	r5, #0
    3984:	d002      	beq.n	398c <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    3986:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3988:	075b      	lsls	r3, r3, #29
    398a:	d4d2      	bmi.n	3932 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    398c:	2100      	movs	r1, #0
    398e:	0030      	movs	r0, r6
    3990:	4bb4      	ldr	r3, [pc, #720]	; (3c64 <chk_mounted+0x35c>)
    3992:	4798      	blx	r3
    3994:	0003      	movs	r3, r0
    3996:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    3998:	2801      	cmp	r0, #1
    399a:	d100      	bne.n	399e <chk_mounted+0x96>
    399c:	e09a      	b.n	3ad4 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    399e:	2b03      	cmp	r3, #3
    39a0:	d100      	bne.n	39a4 <chk_mounted+0x9c>
    39a2:	e0c0      	b.n	3b26 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    39a4:	200d      	movs	r0, #13
    39a6:	2b00      	cmp	r3, #0
    39a8:	d1c3      	bne.n	3932 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    39aa:	333c      	adds	r3, #60	; 0x3c
    39ac:	5cf2      	ldrb	r2, [r6, r3]
    39ae:	0212      	lsls	r2, r2, #8
    39b0:	3b01      	subs	r3, #1
    39b2:	5cf3      	ldrb	r3, [r6, r3]
    39b4:	4313      	orrs	r3, r2
    39b6:	2280      	movs	r2, #128	; 0x80
    39b8:	0092      	lsls	r2, r2, #2
    39ba:	b21b      	sxth	r3, r3
    39bc:	4293      	cmp	r3, r2
    39be:	d1b8      	bne.n	3932 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    39c0:	2347      	movs	r3, #71	; 0x47
    39c2:	5cf3      	ldrb	r3, [r6, r3]
    39c4:	021b      	lsls	r3, r3, #8
    39c6:	3abb      	subs	r2, #187	; 0xbb
    39c8:	3aff      	subs	r2, #255	; 0xff
    39ca:	5cb5      	ldrb	r5, [r6, r2]
    39cc:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    39ce:	d10d      	bne.n	39ec <chk_mounted+0xe4>
    39d0:	2357      	movs	r3, #87	; 0x57
    39d2:	5cf5      	ldrb	r5, [r6, r3]
    39d4:	062d      	lsls	r5, r5, #24
    39d6:	3b01      	subs	r3, #1
    39d8:	5cf3      	ldrb	r3, [r6, r3]
    39da:	041b      	lsls	r3, r3, #16
    39dc:	431d      	orrs	r5, r3
    39de:	2354      	movs	r3, #84	; 0x54
    39e0:	5cf3      	ldrb	r3, [r6, r3]
    39e2:	431d      	orrs	r5, r3
    39e4:	2355      	movs	r3, #85	; 0x55
    39e6:	5cf3      	ldrb	r3, [r6, r3]
    39e8:	021b      	lsls	r3, r3, #8
    39ea:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    39ec:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    39ee:	2340      	movs	r3, #64	; 0x40
    39f0:	5cf2      	ldrb	r2, [r6, r3]
    39f2:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    39f4:	1e53      	subs	r3, r2, #1
    39f6:	200d      	movs	r0, #13
    39f8:	2b01      	cmp	r3, #1
    39fa:	d89a      	bhi.n	3932 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    39fc:	233d      	movs	r3, #61	; 0x3d
    39fe:	5cf1      	ldrb	r1, [r6, r3]
    3a00:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3a02:	2900      	cmp	r1, #0
    3a04:	d095      	beq.n	3932 <chk_mounted+0x2a>
    3a06:	1e4b      	subs	r3, r1, #1
    3a08:	4219      	tst	r1, r3
    3a0a:	d192      	bne.n	3932 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    3a0c:	2342      	movs	r3, #66	; 0x42
    3a0e:	5cf3      	ldrb	r3, [r6, r3]
    3a10:	021b      	lsls	r3, r3, #8
    3a12:	3034      	adds	r0, #52	; 0x34
    3a14:	5c30      	ldrb	r0, [r6, r0]
    3a16:	4318      	orrs	r0, r3
    3a18:	4680      	mov	r8, r0
    3a1a:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    3a1c:	200d      	movs	r0, #13
    3a1e:	4643      	mov	r3, r8
    3a20:	071b      	lsls	r3, r3, #28
    3a22:	d000      	beq.n	3a26 <chk_mounted+0x11e>
    3a24:	e785      	b.n	3932 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    3a26:	2344      	movs	r3, #68	; 0x44
    3a28:	5cf3      	ldrb	r3, [r6, r3]
    3a2a:	021b      	lsls	r3, r3, #8
    3a2c:	3036      	adds	r0, #54	; 0x36
    3a2e:	5c30      	ldrb	r0, [r6, r0]
    3a30:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    3a32:	d10d      	bne.n	3a50 <chk_mounted+0x148>
    3a34:	3353      	adds	r3, #83	; 0x53
    3a36:	5cf3      	ldrb	r3, [r6, r3]
    3a38:	061b      	lsls	r3, r3, #24
    3a3a:	2052      	movs	r0, #82	; 0x52
    3a3c:	5c30      	ldrb	r0, [r6, r0]
    3a3e:	0400      	lsls	r0, r0, #16
    3a40:	4303      	orrs	r3, r0
    3a42:	2050      	movs	r0, #80	; 0x50
    3a44:	5c30      	ldrb	r0, [r6, r0]
    3a46:	4303      	orrs	r3, r0
    3a48:	2051      	movs	r0, #81	; 0x51
    3a4a:	5c30      	ldrb	r0, [r6, r0]
    3a4c:	0200      	lsls	r0, r0, #8
    3a4e:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3a50:	203f      	movs	r0, #63	; 0x3f
    3a52:	5c30      	ldrb	r0, [r6, r0]
    3a54:	0200      	lsls	r0, r0, #8
    3a56:	273e      	movs	r7, #62	; 0x3e
    3a58:	5df7      	ldrb	r7, [r6, r7]
    3a5a:	4307      	orrs	r7, r0
    3a5c:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    3a5e:	200d      	movs	r0, #13
    3a60:	2f00      	cmp	r7, #0
    3a62:	d100      	bne.n	3a66 <chk_mounted+0x15e>
    3a64:	e765      	b.n	3932 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    3a66:	436a      	muls	r2, r5
    3a68:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    3a6a:	4642      	mov	r2, r8
    3a6c:	0917      	lsrs	r7, r2, #4
    3a6e:	4457      	add	r7, sl
    3a70:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3a72:	42bb      	cmp	r3, r7
    3a74:	d200      	bcs.n	3a78 <chk_mounted+0x170>
    3a76:	e75c      	b.n	3932 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3a78:	1bd8      	subs	r0, r3, r7
    3a7a:	4b7b      	ldr	r3, [pc, #492]	; (3c68 <chk_mounted+0x360>)
    3a7c:	4798      	blx	r3
    3a7e:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    3a80:	200d      	movs	r0, #13
    3a82:	2b00      	cmp	r3, #0
    3a84:	d100      	bne.n	3a88 <chk_mounted+0x180>
    3a86:	e754      	b.n	3932 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    3a88:	4a78      	ldr	r2, [pc, #480]	; (3c6c <chk_mounted+0x364>)
	fmt = FS_FAT12;
    3a8a:	429a      	cmp	r2, r3
    3a8c:	4192      	sbcs	r2, r2
    3a8e:	4252      	negs	r2, r2
    3a90:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    3a92:	4977      	ldr	r1, [pc, #476]	; (3c70 <chk_mounted+0x368>)
    3a94:	428b      	cmp	r3, r1
    3a96:	d848      	bhi.n	3b2a <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3a98:	3302      	adds	r3, #2
    3a9a:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3a9c:	19e7      	adds	r7, r4, r7
    3a9e:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3aa0:	4454      	add	r4, sl
    3aa2:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3aa4:	200d      	movs	r0, #13
    3aa6:	4641      	mov	r1, r8
    3aa8:	2900      	cmp	r1, #0
    3aaa:	d100      	bne.n	3aae <chk_mounted+0x1a6>
    3aac:	e741      	b.n	3932 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3aae:	444c      	add	r4, r9
    3ab0:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3ab2:	2a02      	cmp	r2, #2
    3ab4:	d12c      	bne.n	3b10 <chk_mounted+0x208>
    3ab6:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3ab8:	496e      	ldr	r1, [pc, #440]	; (3c74 <chk_mounted+0x36c>)
    3aba:	468c      	mov	ip, r1
    3abc:	4463      	add	r3, ip
    3abe:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3ac0:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3ac2:	429d      	cmp	r5, r3
    3ac4:	d200      	bcs.n	3ac8 <chk_mounted+0x1c0>
    3ac6:	e734      	b.n	3932 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3ac8:	2301      	movs	r3, #1
    3aca:	425b      	negs	r3, r3
    3acc:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3ace:	2300      	movs	r3, #0
    3ad0:	60f3      	str	r3, [r6, #12]
    3ad2:	e0b6      	b.n	3c42 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    3ad4:	33f2      	adds	r3, #242	; 0xf2
    3ad6:	33ff      	adds	r3, #255	; 0xff
    3ad8:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3ada:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    3adc:	2b00      	cmp	r3, #0
    3ade:	d100      	bne.n	3ae2 <chk_mounted+0x1da>
    3ae0:	e727      	b.n	3932 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    3ae2:	23fa      	movs	r3, #250	; 0xfa
    3ae4:	33ff      	adds	r3, #255	; 0xff
    3ae6:	5cf4      	ldrb	r4, [r6, r3]
    3ae8:	0624      	lsls	r4, r4, #24
    3aea:	3b01      	subs	r3, #1
    3aec:	5cf3      	ldrb	r3, [r6, r3]
    3aee:	041b      	lsls	r3, r3, #16
    3af0:	431c      	orrs	r4, r3
    3af2:	23fb      	movs	r3, #251	; 0xfb
    3af4:	005b      	lsls	r3, r3, #1
    3af6:	5cf3      	ldrb	r3, [r6, r3]
    3af8:	431c      	orrs	r4, r3
    3afa:	23f8      	movs	r3, #248	; 0xf8
    3afc:	33ff      	adds	r3, #255	; 0xff
    3afe:	5cf2      	ldrb	r2, [r6, r3]
    3b00:	0212      	lsls	r2, r2, #8
    3b02:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3b04:	0021      	movs	r1, r4
    3b06:	0030      	movs	r0, r6
    3b08:	4b56      	ldr	r3, [pc, #344]	; (3c64 <chk_mounted+0x35c>)
    3b0a:	4798      	blx	r3
    3b0c:	0003      	movs	r3, r0
    3b0e:	e746      	b.n	399e <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3b10:	2103      	movs	r1, #3
    3b12:	4359      	muls	r1, r3
    3b14:	0849      	lsrs	r1, r1, #1
    3b16:	2001      	movs	r0, #1
    3b18:	4003      	ands	r3, r0
    3b1a:	18cb      	adds	r3, r1, r3
    3b1c:	e7cc      	b.n	3ab8 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3b1e:	200c      	movs	r0, #12
    3b20:	e707      	b.n	3932 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    3b22:	2000      	movs	r0, #0
    3b24:	e705      	b.n	3932 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    3b26:	2001      	movs	r0, #1
    3b28:	e703      	b.n	3932 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3b2a:	3302      	adds	r3, #2
    3b2c:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3b2e:	19e7      	adds	r7, r4, r7
    3b30:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3b32:	4652      	mov	r2, sl
    3b34:	18a2      	adds	r2, r4, r2
    3b36:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3b38:	200d      	movs	r0, #13
    3b3a:	4642      	mov	r2, r8
    3b3c:	2a00      	cmp	r2, #0
    3b3e:	d000      	beq.n	3b42 <chk_mounted+0x23a>
    3b40:	e6f7      	b.n	3932 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3b42:	225f      	movs	r2, #95	; 0x5f
    3b44:	5cb2      	ldrb	r2, [r6, r2]
    3b46:	0612      	lsls	r2, r2, #24
    3b48:	215e      	movs	r1, #94	; 0x5e
    3b4a:	5c71      	ldrb	r1, [r6, r1]
    3b4c:	0409      	lsls	r1, r1, #16
    3b4e:	430a      	orrs	r2, r1
    3b50:	215c      	movs	r1, #92	; 0x5c
    3b52:	5c71      	ldrb	r1, [r6, r1]
    3b54:	430a      	orrs	r2, r1
    3b56:	215d      	movs	r1, #93	; 0x5d
    3b58:	5c71      	ldrb	r1, [r6, r1]
    3b5a:	0209      	lsls	r1, r1, #8
    3b5c:	430a      	orrs	r2, r1
    3b5e:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3b60:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3b62:	4a44      	ldr	r2, [pc, #272]	; (3c74 <chk_mounted+0x36c>)
    3b64:	4694      	mov	ip, r2
    3b66:	4463      	add	r3, ip
    3b68:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3b6a:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3b6c:	429d      	cmp	r5, r3
    3b6e:	d200      	bcs.n	3b72 <chk_mounted+0x26a>
    3b70:	e6df      	b.n	3932 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3b72:	2301      	movs	r3, #1
    3b74:	425b      	negs	r3, r3
    3b76:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3b78:	2300      	movs	r3, #0
    3b7a:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    3b7c:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3b7e:	3361      	adds	r3, #97	; 0x61
    3b80:	5cf3      	ldrb	r3, [r6, r3]
    3b82:	021b      	lsls	r3, r3, #8
    3b84:	2260      	movs	r2, #96	; 0x60
    3b86:	5cb2      	ldrb	r2, [r6, r2]
    3b88:	431a      	orrs	r2, r3
    3b8a:	1912      	adds	r2, r2, r4
    3b8c:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3b8e:	0031      	movs	r1, r6
    3b90:	3130      	adds	r1, #48	; 0x30
    3b92:	7870      	ldrb	r0, [r6, #1]
    3b94:	2301      	movs	r3, #1
    3b96:	4c38      	ldr	r4, [pc, #224]	; (3c78 <chk_mounted+0x370>)
    3b98:	47a0      	blx	r4
    3b9a:	2203      	movs	r2, #3
    3b9c:	2800      	cmp	r0, #0
    3b9e:	d150      	bne.n	3c42 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3ba0:	4b36      	ldr	r3, [pc, #216]	; (3c7c <chk_mounted+0x374>)
    3ba2:	5cf2      	ldrb	r2, [r6, r3]
    3ba4:	0212      	lsls	r2, r2, #8
    3ba6:	4b36      	ldr	r3, [pc, #216]	; (3c80 <chk_mounted+0x378>)
    3ba8:	5cf3      	ldrb	r3, [r6, r3]
    3baa:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3bac:	4935      	ldr	r1, [pc, #212]	; (3c84 <chk_mounted+0x37c>)
    3bae:	b21b      	sxth	r3, r3
    3bb0:	2203      	movs	r2, #3
    3bb2:	428b      	cmp	r3, r1
    3bb4:	d145      	bne.n	3c42 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3bb6:	2333      	movs	r3, #51	; 0x33
    3bb8:	5cf3      	ldrb	r3, [r6, r3]
    3bba:	061b      	lsls	r3, r3, #24
    3bbc:	322f      	adds	r2, #47	; 0x2f
    3bbe:	5cb2      	ldrb	r2, [r6, r2]
    3bc0:	0412      	lsls	r2, r2, #16
    3bc2:	4313      	orrs	r3, r2
    3bc4:	2230      	movs	r2, #48	; 0x30
    3bc6:	5cb2      	ldrb	r2, [r6, r2]
    3bc8:	4313      	orrs	r3, r2
    3bca:	2231      	movs	r2, #49	; 0x31
    3bcc:	5cb2      	ldrb	r2, [r6, r2]
    3bce:	0212      	lsls	r2, r2, #8
    3bd0:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3bd2:	492d      	ldr	r1, [pc, #180]	; (3c88 <chk_mounted+0x380>)
    3bd4:	2203      	movs	r2, #3
    3bd6:	428b      	cmp	r3, r1
    3bd8:	d133      	bne.n	3c42 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    3bda:	4b2c      	ldr	r3, [pc, #176]	; (3c8c <chk_mounted+0x384>)
    3bdc:	5cf3      	ldrb	r3, [r6, r3]
    3bde:	061b      	lsls	r3, r3, #24
    3be0:	4a2b      	ldr	r2, [pc, #172]	; (3c90 <chk_mounted+0x388>)
    3be2:	5cb2      	ldrb	r2, [r6, r2]
    3be4:	0412      	lsls	r2, r2, #16
    3be6:	4313      	orrs	r3, r2
    3be8:	2285      	movs	r2, #133	; 0x85
    3bea:	0092      	lsls	r2, r2, #2
    3bec:	5cb2      	ldrb	r2, [r6, r2]
    3bee:	4313      	orrs	r3, r2
    3bf0:	4a28      	ldr	r2, [pc, #160]	; (3c94 <chk_mounted+0x38c>)
    3bf2:	5cb2      	ldrb	r2, [r6, r2]
    3bf4:	0212      	lsls	r2, r2, #8
    3bf6:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3bf8:	4927      	ldr	r1, [pc, #156]	; (3c98 <chk_mounted+0x390>)
    3bfa:	2203      	movs	r2, #3
    3bfc:	428b      	cmp	r3, r1
    3bfe:	d120      	bne.n	3c42 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    3c00:	4b26      	ldr	r3, [pc, #152]	; (3c9c <chk_mounted+0x394>)
    3c02:	5cf3      	ldrb	r3, [r6, r3]
    3c04:	061b      	lsls	r3, r3, #24
    3c06:	4a26      	ldr	r2, [pc, #152]	; (3ca0 <chk_mounted+0x398>)
    3c08:	5cb2      	ldrb	r2, [r6, r2]
    3c0a:	0412      	lsls	r2, r2, #16
    3c0c:	4313      	orrs	r3, r2
    3c0e:	2287      	movs	r2, #135	; 0x87
    3c10:	0092      	lsls	r2, r2, #2
    3c12:	5cb2      	ldrb	r2, [r6, r2]
    3c14:	4313      	orrs	r3, r2
    3c16:	4a23      	ldr	r2, [pc, #140]	; (3ca4 <chk_mounted+0x39c>)
    3c18:	5cb2      	ldrb	r2, [r6, r2]
    3c1a:	0212      	lsls	r2, r2, #8
    3c1c:	4313      	orrs	r3, r2
    3c1e:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    3c20:	4b21      	ldr	r3, [pc, #132]	; (3ca8 <chk_mounted+0x3a0>)
    3c22:	5cf3      	ldrb	r3, [r6, r3]
    3c24:	061b      	lsls	r3, r3, #24
    3c26:	4a21      	ldr	r2, [pc, #132]	; (3cac <chk_mounted+0x3a4>)
    3c28:	5cb2      	ldrb	r2, [r6, r2]
    3c2a:	0412      	lsls	r2, r2, #16
    3c2c:	4313      	orrs	r3, r2
    3c2e:	2286      	movs	r2, #134	; 0x86
    3c30:	0092      	lsls	r2, r2, #2
    3c32:	5cb2      	ldrb	r2, [r6, r2]
    3c34:	4313      	orrs	r3, r2
    3c36:	4a1e      	ldr	r2, [pc, #120]	; (3cb0 <chk_mounted+0x3a8>)
    3c38:	5cb2      	ldrb	r2, [r6, r2]
    3c3a:	0212      	lsls	r2, r2, #8
    3c3c:	4313      	orrs	r3, r2
    3c3e:	6133      	str	r3, [r6, #16]
    3c40:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    3c42:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    3c44:	4a1b      	ldr	r2, [pc, #108]	; (3cb4 <chk_mounted+0x3ac>)
    3c46:	8813      	ldrh	r3, [r2, #0]
    3c48:	3301      	adds	r3, #1
    3c4a:	b29b      	uxth	r3, r3
    3c4c:	8013      	strh	r3, [r2, #0]
    3c4e:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    3c50:	2000      	movs	r0, #0
    3c52:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    3c54:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    3c56:	e66c      	b.n	3932 <chk_mounted+0x2a>
    3c58:	20000180 	.word	0x20000180
    3c5c:	000035f9 	.word	0x000035f9
    3c60:	0000355d 	.word	0x0000355d
    3c64:	00003865 	.word	0x00003865
    3c68:	0000536d 	.word	0x0000536d
    3c6c:	00000ff5 	.word	0x00000ff5
    3c70:	0000fff5 	.word	0x0000fff5
    3c74:	000001ff 	.word	0x000001ff
    3c78:	00003615 	.word	0x00003615
    3c7c:	0000022f 	.word	0x0000022f
    3c80:	0000022e 	.word	0x0000022e
    3c84:	ffffaa55 	.word	0xffffaa55
    3c88:	41615252 	.word	0x41615252
    3c8c:	00000217 	.word	0x00000217
    3c90:	00000216 	.word	0x00000216
    3c94:	00000215 	.word	0x00000215
    3c98:	61417272 	.word	0x61417272
    3c9c:	0000021f 	.word	0x0000021f
    3ca0:	0000021e 	.word	0x0000021e
    3ca4:	0000021d 	.word	0x0000021d
    3ca8:	0000021b 	.word	0x0000021b
    3cac:	0000021a 	.word	0x0000021a
    3cb0:	00000219 	.word	0x00000219
    3cb4:	200001a0 	.word	0x200001a0

00003cb8 <move_window>:
{
    3cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cba:	46ce      	mov	lr, r9
    3cbc:	b500      	push	{lr}
    3cbe:	b082      	sub	sp, #8
    3cc0:	0004      	movs	r4, r0
    3cc2:	000f      	movs	r7, r1
	wsect = fs->winsect;
    3cc4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    3cc6:	428d      	cmp	r5, r1
    3cc8:	d03f      	beq.n	3d4a <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    3cca:	7903      	ldrb	r3, [r0, #4]
    3ccc:	2b00      	cmp	r3, #0
    3cce:	d107      	bne.n	3ce0 <move_window+0x28>
	return FR_OK;
    3cd0:	2300      	movs	r3, #0
		if (sector) {
    3cd2:	2f00      	cmp	r7, #0
    3cd4:	d12c      	bne.n	3d30 <move_window+0x78>
}
    3cd6:	0018      	movs	r0, r3
    3cd8:	b002      	add	sp, #8
    3cda:	bc04      	pop	{r2}
    3cdc:	4691      	mov	r9, r2
    3cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3ce0:	2330      	movs	r3, #48	; 0x30
    3ce2:	469c      	mov	ip, r3
    3ce4:	4484      	add	ip, r0
    3ce6:	4663      	mov	r3, ip
    3ce8:	4661      	mov	r1, ip
    3cea:	9301      	str	r3, [sp, #4]
    3cec:	7840      	ldrb	r0, [r0, #1]
    3cee:	2301      	movs	r3, #1
    3cf0:	002a      	movs	r2, r5
    3cf2:	4e17      	ldr	r6, [pc, #92]	; (3d50 <move_window+0x98>)
    3cf4:	47b0      	blx	r6
				return FR_DISK_ERR;
    3cf6:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3cf8:	2800      	cmp	r0, #0
    3cfa:	d1ec      	bne.n	3cd6 <move_window+0x1e>
			fs->wflag = 0;
    3cfc:	2300      	movs	r3, #0
    3cfe:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3d00:	6a23      	ldr	r3, [r4, #32]
    3d02:	69e2      	ldr	r2, [r4, #28]
    3d04:	4694      	mov	ip, r2
    3d06:	4463      	add	r3, ip
    3d08:	429d      	cmp	r5, r3
    3d0a:	d2e1      	bcs.n	3cd0 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3d0c:	78e6      	ldrb	r6, [r4, #3]
    3d0e:	2e01      	cmp	r6, #1
    3d10:	d9de      	bls.n	3cd0 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    3d12:	4b0f      	ldr	r3, [pc, #60]	; (3d50 <move_window+0x98>)
    3d14:	4699      	mov	r9, r3
					wsect += fs->fsize;
    3d16:	69e3      	ldr	r3, [r4, #28]
    3d18:	469c      	mov	ip, r3
    3d1a:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    3d1c:	7860      	ldrb	r0, [r4, #1]
    3d1e:	2301      	movs	r3, #1
    3d20:	002a      	movs	r2, r5
    3d22:	9901      	ldr	r1, [sp, #4]
    3d24:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3d26:	3e01      	subs	r6, #1
    3d28:	b2f6      	uxtb	r6, r6
    3d2a:	2e01      	cmp	r6, #1
    3d2c:	d1f3      	bne.n	3d16 <move_window+0x5e>
    3d2e:	e7cf      	b.n	3cd0 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3d30:	0021      	movs	r1, r4
    3d32:	3130      	adds	r1, #48	; 0x30
    3d34:	7860      	ldrb	r0, [r4, #1]
    3d36:	3301      	adds	r3, #1
    3d38:	003a      	movs	r2, r7
    3d3a:	4d06      	ldr	r5, [pc, #24]	; (3d54 <move_window+0x9c>)
    3d3c:	47a8      	blx	r5
				return FR_DISK_ERR;
    3d3e:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3d40:	2800      	cmp	r0, #0
    3d42:	d1c8      	bne.n	3cd6 <move_window+0x1e>
			fs->winsect = sector;
    3d44:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    3d46:	2300      	movs	r3, #0
    3d48:	e7c5      	b.n	3cd6 <move_window+0x1e>
    3d4a:	2300      	movs	r3, #0
    3d4c:	e7c3      	b.n	3cd6 <move_window+0x1e>
    3d4e:	46c0      	nop			; (mov r8, r8)
    3d50:	00003699 	.word	0x00003699
    3d54:	00003615 	.word	0x00003615

00003d58 <get_fat>:
{
    3d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d5a:	0005      	movs	r5, r0
    3d5c:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3d5e:	2901      	cmp	r1, #1
    3d60:	d974      	bls.n	3e4c <get_fat+0xf4>
		return 1;
    3d62:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3d64:	69ab      	ldr	r3, [r5, #24]
    3d66:	4299      	cmp	r1, r3
    3d68:	d271      	bcs.n	3e4e <get_fat+0xf6>
	switch (fs->fs_type) {
    3d6a:	782b      	ldrb	r3, [r5, #0]
    3d6c:	2b02      	cmp	r3, #2
    3d6e:	d034      	beq.n	3dda <get_fat+0x82>
    3d70:	2b03      	cmp	r3, #3
    3d72:	d049      	beq.n	3e08 <get_fat+0xb0>
    3d74:	2b01      	cmp	r3, #1
    3d76:	d002      	beq.n	3d7e <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3d78:	2001      	movs	r0, #1
    3d7a:	4240      	negs	r0, r0
    3d7c:	e067      	b.n	3e4e <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    3d7e:	084e      	lsrs	r6, r1, #1
    3d80:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    3d82:	0a71      	lsrs	r1, r6, #9
    3d84:	6a2b      	ldr	r3, [r5, #32]
    3d86:	469c      	mov	ip, r3
    3d88:	4461      	add	r1, ip
    3d8a:	0028      	movs	r0, r5
    3d8c:	4b30      	ldr	r3, [pc, #192]	; (3e50 <get_fat+0xf8>)
    3d8e:	4798      	blx	r3
    3d90:	2800      	cmp	r0, #0
    3d92:	d002      	beq.n	3d9a <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3d94:	2001      	movs	r0, #1
    3d96:	4240      	negs	r0, r0
    3d98:	e059      	b.n	3e4e <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    3d9a:	05f3      	lsls	r3, r6, #23
    3d9c:	0ddb      	lsrs	r3, r3, #23
    3d9e:	18eb      	adds	r3, r5, r3
    3da0:	3330      	adds	r3, #48	; 0x30
    3da2:	781f      	ldrb	r7, [r3, #0]
    3da4:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    3da6:	0a71      	lsrs	r1, r6, #9
    3da8:	6a2b      	ldr	r3, [r5, #32]
    3daa:	469c      	mov	ip, r3
    3dac:	4461      	add	r1, ip
    3dae:	0028      	movs	r0, r5
    3db0:	4b27      	ldr	r3, [pc, #156]	; (3e50 <get_fat+0xf8>)
    3db2:	4798      	blx	r3
    3db4:	2800      	cmp	r0, #0
    3db6:	d002      	beq.n	3dbe <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3db8:	2001      	movs	r0, #1
    3dba:	4240      	negs	r0, r0
    3dbc:	e047      	b.n	3e4e <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    3dbe:	05f6      	lsls	r6, r6, #23
    3dc0:	0df6      	lsrs	r6, r6, #23
    3dc2:	19ad      	adds	r5, r5, r6
    3dc4:	3530      	adds	r5, #48	; 0x30
    3dc6:	7828      	ldrb	r0, [r5, #0]
    3dc8:	0200      	lsls	r0, r0, #8
    3dca:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    3dcc:	07e3      	lsls	r3, r4, #31
    3dce:	d501      	bpl.n	3dd4 <get_fat+0x7c>
    3dd0:	0900      	lsrs	r0, r0, #4
    3dd2:	e03c      	b.n	3e4e <get_fat+0xf6>
    3dd4:	0500      	lsls	r0, r0, #20
    3dd6:	0d00      	lsrs	r0, r0, #20
    3dd8:	e039      	b.n	3e4e <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    3dda:	0a09      	lsrs	r1, r1, #8
    3ddc:	6a2b      	ldr	r3, [r5, #32]
    3dde:	469c      	mov	ip, r3
    3de0:	4461      	add	r1, ip
    3de2:	0028      	movs	r0, r5
    3de4:	4b1a      	ldr	r3, [pc, #104]	; (3e50 <get_fat+0xf8>)
    3de6:	4798      	blx	r3
    3de8:	2800      	cmp	r0, #0
    3dea:	d002      	beq.n	3df2 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3dec:	2001      	movs	r0, #1
    3dee:	4240      	negs	r0, r0
    3df0:	e02d      	b.n	3e4e <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    3df2:	0064      	lsls	r4, r4, #1
    3df4:	23ff      	movs	r3, #255	; 0xff
    3df6:	005b      	lsls	r3, r3, #1
    3df8:	401c      	ands	r4, r3
		return LD_WORD(p);
    3dfa:	192d      	adds	r5, r5, r4
    3dfc:	3530      	adds	r5, #48	; 0x30
    3dfe:	786b      	ldrb	r3, [r5, #1]
    3e00:	021b      	lsls	r3, r3, #8
    3e02:	7828      	ldrb	r0, [r5, #0]
    3e04:	4318      	orrs	r0, r3
    3e06:	e022      	b.n	3e4e <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    3e08:	09c9      	lsrs	r1, r1, #7
    3e0a:	6a2b      	ldr	r3, [r5, #32]
    3e0c:	469c      	mov	ip, r3
    3e0e:	4461      	add	r1, ip
    3e10:	0028      	movs	r0, r5
    3e12:	4b0f      	ldr	r3, [pc, #60]	; (3e50 <get_fat+0xf8>)
    3e14:	4798      	blx	r3
    3e16:	2800      	cmp	r0, #0
    3e18:	d002      	beq.n	3e20 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3e1a:	2001      	movs	r0, #1
    3e1c:	4240      	negs	r0, r0
    3e1e:	e016      	b.n	3e4e <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    3e20:	00a4      	lsls	r4, r4, #2
    3e22:	23fe      	movs	r3, #254	; 0xfe
    3e24:	005b      	lsls	r3, r3, #1
    3e26:	401c      	ands	r4, r3
    3e28:	0023      	movs	r3, r4
    3e2a:	3330      	adds	r3, #48	; 0x30
    3e2c:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    3e2e:	78d8      	ldrb	r0, [r3, #3]
    3e30:	0600      	lsls	r0, r0, #24
    3e32:	789a      	ldrb	r2, [r3, #2]
    3e34:	0412      	lsls	r2, r2, #16
    3e36:	4310      	orrs	r0, r2
    3e38:	192c      	adds	r4, r5, r4
    3e3a:	3430      	adds	r4, #48	; 0x30
    3e3c:	7822      	ldrb	r2, [r4, #0]
    3e3e:	4310      	orrs	r0, r2
    3e40:	785b      	ldrb	r3, [r3, #1]
    3e42:	021b      	lsls	r3, r3, #8
    3e44:	4318      	orrs	r0, r3
    3e46:	0100      	lsls	r0, r0, #4
    3e48:	0900      	lsrs	r0, r0, #4
    3e4a:	e000      	b.n	3e4e <get_fat+0xf6>
		return 1;
    3e4c:	2001      	movs	r0, #1
}
    3e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e50:	00003cb9 	.word	0x00003cb9

00003e54 <dir_sdi>:
{
    3e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e56:	0004      	movs	r4, r0
    3e58:	000d      	movs	r5, r1
	dj->index = idx;
    3e5a:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    3e5c:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    3e5e:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    3e60:	2901      	cmp	r1, #1
    3e62:	d003      	beq.n	3e6c <dir_sdi+0x18>
    3e64:	6823      	ldr	r3, [r4, #0]
    3e66:	699a      	ldr	r2, [r3, #24]
    3e68:	4291      	cmp	r1, r2
    3e6a:	d300      	bcc.n	3e6e <dir_sdi+0x1a>
}
    3e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    3e6e:	2900      	cmp	r1, #0
    3e70:	d119      	bne.n	3ea6 <dir_sdi+0x52>
    3e72:	781a      	ldrb	r2, [r3, #0]
    3e74:	2a03      	cmp	r2, #3
    3e76:	d013      	beq.n	3ea0 <dir_sdi+0x4c>
		dj->clust = clst;
    3e78:	2200      	movs	r2, #0
    3e7a:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    3e7c:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    3e7e:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    3e80:	42aa      	cmp	r2, r5
    3e82:	d9f3      	bls.n	3e6c <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    3e84:	092a      	lsrs	r2, r5, #4
    3e86:	b292      	uxth	r2, r2
    3e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e8a:	189b      	adds	r3, r3, r2
    3e8c:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    3e8e:	6823      	ldr	r3, [r4, #0]
    3e90:	3330      	adds	r3, #48	; 0x30
    3e92:	220f      	movs	r2, #15
    3e94:	4015      	ands	r5, r2
    3e96:	016d      	lsls	r5, r5, #5
    3e98:	195d      	adds	r5, r3, r5
    3e9a:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    3e9c:	2000      	movs	r0, #0
    3e9e:	e7e5      	b.n	3e6c <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    3ea0:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    3ea2:	2900      	cmp	r1, #0
    3ea4:	d0e8      	beq.n	3e78 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    3ea6:	789e      	ldrb	r6, [r3, #2]
    3ea8:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    3eaa:	42b5      	cmp	r5, r6
    3eac:	d313      	bcc.n	3ed6 <dir_sdi+0x82>
    3eae:	1bad      	subs	r5, r5, r6
    3eb0:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    3eb2:	4f10      	ldr	r7, [pc, #64]	; (3ef4 <dir_sdi+0xa0>)
    3eb4:	e000      	b.n	3eb8 <dir_sdi+0x64>
    3eb6:	001d      	movs	r5, r3
    3eb8:	6820      	ldr	r0, [r4, #0]
    3eba:	47b8      	blx	r7
    3ebc:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3ebe:	1c43      	adds	r3, r0, #1
    3ec0:	d012      	beq.n	3ee8 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    3ec2:	2801      	cmp	r0, #1
    3ec4:	d912      	bls.n	3eec <dir_sdi+0x98>
    3ec6:	6823      	ldr	r3, [r4, #0]
    3ec8:	699b      	ldr	r3, [r3, #24]
    3eca:	4298      	cmp	r0, r3
    3ecc:	d210      	bcs.n	3ef0 <dir_sdi+0x9c>
    3ece:	1bab      	subs	r3, r5, r6
    3ed0:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    3ed2:	42b5      	cmp	r5, r6
    3ed4:	d2ef      	bcs.n	3eb6 <dir_sdi+0x62>
		dj->clust = clst;
    3ed6:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    3ed8:	6820      	ldr	r0, [r4, #0]
    3eda:	4b07      	ldr	r3, [pc, #28]	; (3ef8 <dir_sdi+0xa4>)
    3edc:	4798      	blx	r3
    3ede:	092b      	lsrs	r3, r5, #4
    3ee0:	b29b      	uxth	r3, r3
    3ee2:	1818      	adds	r0, r3, r0
    3ee4:	6120      	str	r0, [r4, #16]
    3ee6:	e7d2      	b.n	3e8e <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3ee8:	2001      	movs	r0, #1
    3eea:	e7bf      	b.n	3e6c <dir_sdi+0x18>
				return FR_INT_ERR;
    3eec:	2002      	movs	r0, #2
    3eee:	e7bd      	b.n	3e6c <dir_sdi+0x18>
    3ef0:	2002      	movs	r0, #2
    3ef2:	e7bb      	b.n	3e6c <dir_sdi+0x18>
    3ef4:	00003d59 	.word	0x00003d59
    3ef8:	000037ff 	.word	0x000037ff

00003efc <put_fat>:
{
    3efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3efe:	46c6      	mov	lr, r8
    3f00:	b500      	push	{lr}
    3f02:	0007      	movs	r7, r0
    3f04:	000c      	movs	r4, r1
    3f06:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    3f08:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    3f0a:	2901      	cmp	r1, #1
    3f0c:	d902      	bls.n	3f14 <put_fat+0x18>
    3f0e:	6983      	ldr	r3, [r0, #24]
    3f10:	4299      	cmp	r1, r3
    3f12:	d303      	bcc.n	3f1c <put_fat+0x20>
}
    3f14:	0028      	movs	r0, r5
    3f16:	bc04      	pop	{r2}
    3f18:	4690      	mov	r8, r2
    3f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    3f1c:	7803      	ldrb	r3, [r0, #0]
    3f1e:	2b02      	cmp	r3, #2
    3f20:	d053      	beq.n	3fca <put_fat+0xce>
    3f22:	2b03      	cmp	r3, #3
    3f24:	d063      	beq.n	3fee <put_fat+0xf2>
			res = FR_INT_ERR;
    3f26:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    3f28:	2b01      	cmp	r3, #1
    3f2a:	d002      	beq.n	3f32 <put_fat+0x36>
		fs->wflag = 1;
    3f2c:	2301      	movs	r3, #1
    3f2e:	713b      	strb	r3, [r7, #4]
    3f30:	e7f0      	b.n	3f14 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    3f32:	084b      	lsrs	r3, r1, #1
    3f34:	4698      	mov	r8, r3
    3f36:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3f38:	4643      	mov	r3, r8
    3f3a:	0a59      	lsrs	r1, r3, #9
    3f3c:	6a03      	ldr	r3, [r0, #32]
    3f3e:	469c      	mov	ip, r3
    3f40:	4461      	add	r1, ip
    3f42:	4b3b      	ldr	r3, [pc, #236]	; (4030 <put_fat+0x134>)
    3f44:	4798      	blx	r3
    3f46:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3f48:	d1f0      	bne.n	3f2c <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    3f4a:	4643      	mov	r3, r8
    3f4c:	05db      	lsls	r3, r3, #23
    3f4e:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    3f50:	07e2      	lsls	r2, r4, #31
    3f52:	d51f      	bpl.n	3f94 <put_fat+0x98>
    3f54:	18fb      	adds	r3, r7, r3
    3f56:	3330      	adds	r3, #48	; 0x30
    3f58:	7819      	ldrb	r1, [r3, #0]
    3f5a:	220f      	movs	r2, #15
    3f5c:	400a      	ands	r2, r1
    3f5e:	0131      	lsls	r1, r6, #4
    3f60:	20ff      	movs	r0, #255	; 0xff
    3f62:	0100      	lsls	r0, r0, #4
    3f64:	4001      	ands	r1, r0
    3f66:	430a      	orrs	r2, r1
    3f68:	701a      	strb	r2, [r3, #0]
			bc++;
    3f6a:	4644      	mov	r4, r8
    3f6c:	3401      	adds	r4, #1
			fs->wflag = 1;
    3f6e:	2301      	movs	r3, #1
    3f70:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3f72:	0a61      	lsrs	r1, r4, #9
    3f74:	6a3b      	ldr	r3, [r7, #32]
    3f76:	469c      	mov	ip, r3
    3f78:	4461      	add	r1, ip
    3f7a:	0038      	movs	r0, r7
    3f7c:	4b2c      	ldr	r3, [pc, #176]	; (4030 <put_fat+0x134>)
    3f7e:	4798      	blx	r3
			if (res != FR_OK) break;
    3f80:	2800      	cmp	r0, #0
    3f82:	d151      	bne.n	4028 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    3f84:	05e4      	lsls	r4, r4, #23
    3f86:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    3f88:	0936      	lsrs	r6, r6, #4
    3f8a:	b2f6      	uxtb	r6, r6
    3f8c:	193c      	adds	r4, r7, r4
    3f8e:	3430      	adds	r4, #48	; 0x30
    3f90:	7026      	strb	r6, [r4, #0]
			break;
    3f92:	e7cb      	b.n	3f2c <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    3f94:	18fb      	adds	r3, r7, r3
    3f96:	3330      	adds	r3, #48	; 0x30
    3f98:	701e      	strb	r6, [r3, #0]
			bc++;
    3f9a:	4644      	mov	r4, r8
    3f9c:	3401      	adds	r4, #1
			fs->wflag = 1;
    3f9e:	2301      	movs	r3, #1
    3fa0:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3fa2:	0a61      	lsrs	r1, r4, #9
    3fa4:	6a3b      	ldr	r3, [r7, #32]
    3fa6:	469c      	mov	ip, r3
    3fa8:	4461      	add	r1, ip
    3faa:	0038      	movs	r0, r7
    3fac:	4b20      	ldr	r3, [pc, #128]	; (4030 <put_fat+0x134>)
    3fae:	4798      	blx	r3
			if (res != FR_OK) break;
    3fb0:	2800      	cmp	r0, #0
    3fb2:	d13b      	bne.n	402c <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    3fb4:	05e4      	lsls	r4, r4, #23
    3fb6:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    3fb8:	193b      	adds	r3, r7, r4
    3fba:	3330      	adds	r3, #48	; 0x30
    3fbc:	781b      	ldrb	r3, [r3, #0]
    3fbe:	220f      	movs	r2, #15
    3fc0:	4393      	bics	r3, r2
    3fc2:	0536      	lsls	r6, r6, #20
    3fc4:	0f36      	lsrs	r6, r6, #28
    3fc6:	431e      	orrs	r6, r3
    3fc8:	e7e0      	b.n	3f8c <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    3fca:	0a09      	lsrs	r1, r1, #8
    3fcc:	6a03      	ldr	r3, [r0, #32]
    3fce:	469c      	mov	ip, r3
    3fd0:	4461      	add	r1, ip
    3fd2:	4b17      	ldr	r3, [pc, #92]	; (4030 <put_fat+0x134>)
    3fd4:	4798      	blx	r3
    3fd6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3fd8:	d1a8      	bne.n	3f2c <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    3fda:	0063      	lsls	r3, r4, #1
    3fdc:	24ff      	movs	r4, #255	; 0xff
    3fde:	0064      	lsls	r4, r4, #1
    3fe0:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    3fe2:	18fb      	adds	r3, r7, r3
    3fe4:	3330      	adds	r3, #48	; 0x30
    3fe6:	701e      	strb	r6, [r3, #0]
    3fe8:	0a36      	lsrs	r6, r6, #8
    3fea:	705e      	strb	r6, [r3, #1]
			break;
    3fec:	e79e      	b.n	3f2c <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    3fee:	09c9      	lsrs	r1, r1, #7
    3ff0:	6a03      	ldr	r3, [r0, #32]
    3ff2:	469c      	mov	ip, r3
    3ff4:	4461      	add	r1, ip
    3ff6:	4b0e      	ldr	r3, [pc, #56]	; (4030 <put_fat+0x134>)
    3ff8:	4798      	blx	r3
    3ffa:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3ffc:	d196      	bne.n	3f2c <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    3ffe:	00a4      	lsls	r4, r4, #2
    4000:	23fe      	movs	r3, #254	; 0xfe
    4002:	005b      	lsls	r3, r3, #1
    4004:	401c      	ands	r4, r3
    4006:	0022      	movs	r2, r4
    4008:	3230      	adds	r2, #48	; 0x30
    400a:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    400c:	78d3      	ldrb	r3, [r2, #3]
    400e:	193c      	adds	r4, r7, r4
    4010:	3430      	adds	r4, #48	; 0x30
    4012:	091b      	lsrs	r3, r3, #4
    4014:	071b      	lsls	r3, r3, #28
    4016:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    4018:	7026      	strb	r6, [r4, #0]
    401a:	0a33      	lsrs	r3, r6, #8
    401c:	7053      	strb	r3, [r2, #1]
    401e:	0c33      	lsrs	r3, r6, #16
    4020:	7093      	strb	r3, [r2, #2]
    4022:	0e36      	lsrs	r6, r6, #24
    4024:	70d6      	strb	r6, [r2, #3]
			break;
    4026:	e781      	b.n	3f2c <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4028:	0005      	movs	r5, r0
    402a:	e77f      	b.n	3f2c <put_fat+0x30>
    402c:	0005      	movs	r5, r0
    402e:	e77d      	b.n	3f2c <put_fat+0x30>
    4030:	00003cb9 	.word	0x00003cb9

00004034 <create_chain>:
{
    4034:	b5f0      	push	{r4, r5, r6, r7, lr}
    4036:	46c6      	mov	lr, r8
    4038:	b500      	push	{lr}
    403a:	0005      	movs	r5, r0
    403c:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    403e:	2900      	cmp	r1, #0
    4040:	d107      	bne.n	4052 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    4042:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4044:	2e00      	cmp	r6, #0
    4046:	d00d      	beq.n	4064 <create_chain+0x30>
    4048:	6983      	ldr	r3, [r0, #24]
    404a:	429e      	cmp	r6, r3
    404c:	d30b      	bcc.n	4066 <create_chain+0x32>
    404e:	2601      	movs	r6, #1
    4050:	e009      	b.n	4066 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    4052:	4b26      	ldr	r3, [pc, #152]	; (40ec <create_chain+0xb8>)
    4054:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4056:	2801      	cmp	r0, #1
    4058:	d93d      	bls.n	40d6 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    405a:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    405c:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    405e:	4298      	cmp	r0, r3
    4060:	d201      	bcs.n	4066 <create_chain+0x32>
    4062:	e03d      	b.n	40e0 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4064:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    4066:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    4068:	4f20      	ldr	r7, [pc, #128]	; (40ec <create_chain+0xb8>)
    406a:	e00a      	b.n	4082 <create_chain+0x4e>
    406c:	0021      	movs	r1, r4
    406e:	0028      	movs	r0, r5
    4070:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    4072:	2800      	cmp	r0, #0
    4074:	d00d      	beq.n	4092 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    4076:	1c43      	adds	r3, r0, #1
    4078:	d032      	beq.n	40e0 <create_chain+0xac>
    407a:	2801      	cmp	r0, #1
    407c:	d030      	beq.n	40e0 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    407e:	42b4      	cmp	r4, r6
    4080:	d02d      	beq.n	40de <create_chain+0xaa>
		ncl++;							/* Next cluster */
    4082:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    4084:	69ab      	ldr	r3, [r5, #24]
    4086:	429c      	cmp	r4, r3
    4088:	d3f0      	bcc.n	406c <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    408a:	2e01      	cmp	r6, #1
    408c:	d925      	bls.n	40da <create_chain+0xa6>
			ncl = 2;
    408e:	2402      	movs	r4, #2
    4090:	e7ec      	b.n	406c <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    4092:	4a17      	ldr	r2, [pc, #92]	; (40f0 <create_chain+0xbc>)
    4094:	0021      	movs	r1, r4
    4096:	0028      	movs	r0, r5
    4098:	4b16      	ldr	r3, [pc, #88]	; (40f4 <create_chain+0xc0>)
    409a:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    409c:	2800      	cmp	r0, #0
    409e:	d113      	bne.n	40c8 <create_chain+0x94>
    40a0:	4643      	mov	r3, r8
    40a2:	2b00      	cmp	r3, #0
    40a4:	d109      	bne.n	40ba <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    40a6:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    40a8:	692b      	ldr	r3, [r5, #16]
    40aa:	1c5a      	adds	r2, r3, #1
    40ac:	d01b      	beq.n	40e6 <create_chain+0xb2>
			fs->free_clust--;
    40ae:	3b01      	subs	r3, #1
    40b0:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    40b2:	2301      	movs	r3, #1
    40b4:	716b      	strb	r3, [r5, #5]
    40b6:	0020      	movs	r0, r4
    40b8:	e012      	b.n	40e0 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    40ba:	0022      	movs	r2, r4
    40bc:	4641      	mov	r1, r8
    40be:	0028      	movs	r0, r5
    40c0:	4b0c      	ldr	r3, [pc, #48]	; (40f4 <create_chain+0xc0>)
    40c2:	4798      	blx	r3
	if (res == FR_OK) {
    40c4:	2800      	cmp	r0, #0
    40c6:	d0ee      	beq.n	40a6 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    40c8:	3801      	subs	r0, #1
    40ca:	4242      	negs	r2, r0
    40cc:	4142      	adcs	r2, r0
    40ce:	4250      	negs	r0, r2
    40d0:	2301      	movs	r3, #1
    40d2:	4318      	orrs	r0, r3
    40d4:	e004      	b.n	40e0 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    40d6:	2001      	movs	r0, #1
    40d8:	e002      	b.n	40e0 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    40da:	2000      	movs	r0, #0
    40dc:	e000      	b.n	40e0 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    40de:	2000      	movs	r0, #0
}
    40e0:	bc04      	pop	{r2}
    40e2:	4690      	mov	r8, r2
    40e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40e6:	0020      	movs	r0, r4
    40e8:	e7fa      	b.n	40e0 <create_chain+0xac>
    40ea:	46c0      	nop			; (mov r8, r8)
    40ec:	00003d59 	.word	0x00003d59
    40f0:	0fffffff 	.word	0x0fffffff
    40f4:	00003efd 	.word	0x00003efd

000040f8 <remove_chain>:
{
    40f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40fa:	46ce      	mov	lr, r9
    40fc:	4647      	mov	r7, r8
    40fe:	b580      	push	{r7, lr}
    4100:	0004      	movs	r4, r0
    4102:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    4104:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4106:	2901      	cmp	r1, #1
    4108:	d902      	bls.n	4110 <remove_chain+0x18>
    410a:	69a3      	ldr	r3, [r4, #24]
    410c:	4299      	cmp	r1, r3
    410e:	d303      	bcc.n	4118 <remove_chain+0x20>
}
    4110:	bc0c      	pop	{r2, r3}
    4112:	4690      	mov	r8, r2
    4114:	4699      	mov	r9, r3
    4116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4118:	4f13      	ldr	r7, [pc, #76]	; (4168 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    411a:	4b14      	ldr	r3, [pc, #80]	; (416c <remove_chain+0x74>)
    411c:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    411e:	2301      	movs	r3, #1
    4120:	4699      	mov	r9, r3
    4122:	e003      	b.n	412c <remove_chain+0x34>
    4124:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4126:	69a3      	ldr	r3, [r4, #24]
    4128:	42b3      	cmp	r3, r6
    412a:	d9f1      	bls.n	4110 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    412c:	0029      	movs	r1, r5
    412e:	0020      	movs	r0, r4
    4130:	47b8      	blx	r7
    4132:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    4134:	d011      	beq.n	415a <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4136:	2801      	cmp	r0, #1
    4138:	d011      	beq.n	415e <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    413a:	1c43      	adds	r3, r0, #1
    413c:	d011      	beq.n	4162 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    413e:	2200      	movs	r2, #0
    4140:	0029      	movs	r1, r5
    4142:	0020      	movs	r0, r4
    4144:	47c0      	blx	r8
			if (res != FR_OK) break;
    4146:	2800      	cmp	r0, #0
    4148:	d1e2      	bne.n	4110 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    414a:	6923      	ldr	r3, [r4, #16]
    414c:	1c5a      	adds	r2, r3, #1
    414e:	d0e9      	beq.n	4124 <remove_chain+0x2c>
				fs->free_clust++;
    4150:	3301      	adds	r3, #1
    4152:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    4154:	464b      	mov	r3, r9
    4156:	7163      	strb	r3, [r4, #5]
    4158:	e7e4      	b.n	4124 <remove_chain+0x2c>
    415a:	2000      	movs	r0, #0
    415c:	e7d8      	b.n	4110 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    415e:	2002      	movs	r0, #2
    4160:	e7d6      	b.n	4110 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4162:	2001      	movs	r0, #1
    4164:	e7d4      	b.n	4110 <remove_chain+0x18>
    4166:	46c0      	nop			; (mov r8, r8)
    4168:	00003d59 	.word	0x00003d59
    416c:	00003efd 	.word	0x00003efd

00004170 <dir_next>:
{
    4170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4172:	46d6      	mov	lr, sl
    4174:	4647      	mov	r7, r8
    4176:	b580      	push	{r7, lr}
    4178:	0006      	movs	r6, r0
    417a:	000d      	movs	r5, r1
	i = dj->index + 1;
    417c:	88c4      	ldrh	r4, [r0, #6]
    417e:	3401      	adds	r4, #1
    4180:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    4182:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4184:	2c00      	cmp	r4, #0
    4186:	d103      	bne.n	4190 <dir_next+0x20>
}
    4188:	bc0c      	pop	{r2, r3}
    418a:	4690      	mov	r8, r2
    418c:	469a      	mov	sl, r3
    418e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4190:	6933      	ldr	r3, [r6, #16]
    4192:	2b00      	cmp	r3, #0
    4194:	d0f8      	beq.n	4188 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    4196:	270f      	movs	r7, #15
    4198:	4027      	ands	r7, r4
    419a:	d10f      	bne.n	41bc <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    419c:	3301      	adds	r3, #1
    419e:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    41a0:	68f1      	ldr	r1, [r6, #12]
    41a2:	2900      	cmp	r1, #0
    41a4:	d104      	bne.n	41b0 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    41a6:	6833      	ldr	r3, [r6, #0]
    41a8:	891b      	ldrh	r3, [r3, #8]
    41aa:	42a3      	cmp	r3, r4
    41ac:	d9ec      	bls.n	4188 <dir_next+0x18>
    41ae:	e005      	b.n	41bc <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    41b0:	6830      	ldr	r0, [r6, #0]
    41b2:	7883      	ldrb	r3, [r0, #2]
    41b4:	3b01      	subs	r3, #1
    41b6:	0922      	lsrs	r2, r4, #4
    41b8:	421a      	tst	r2, r3
    41ba:	d007      	beq.n	41cc <dir_next+0x5c>
	dj->index = i;
    41bc:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    41be:	6833      	ldr	r3, [r6, #0]
    41c0:	3330      	adds	r3, #48	; 0x30
    41c2:	017f      	lsls	r7, r7, #5
    41c4:	19df      	adds	r7, r3, r7
    41c6:	6177      	str	r7, [r6, #20]
	return FR_OK;
    41c8:	2000      	movs	r0, #0
    41ca:	e7dd      	b.n	4188 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    41cc:	4b2c      	ldr	r3, [pc, #176]	; (4280 <dir_next+0x110>)
    41ce:	4798      	blx	r3
    41d0:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    41d2:	2002      	movs	r0, #2
    41d4:	4643      	mov	r3, r8
    41d6:	2b01      	cmp	r3, #1
    41d8:	d9d6      	bls.n	4188 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    41da:	3301      	adds	r3, #1
    41dc:	d04b      	beq.n	4276 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    41de:	6833      	ldr	r3, [r6, #0]
    41e0:	699a      	ldr	r2, [r3, #24]
    41e2:	4590      	cmp	r8, r2
    41e4:	d33f      	bcc.n	4266 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    41e6:	3002      	adds	r0, #2
    41e8:	2d00      	cmp	r5, #0
    41ea:	d0cd      	beq.n	4188 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    41ec:	68f1      	ldr	r1, [r6, #12]
    41ee:	0018      	movs	r0, r3
    41f0:	4b24      	ldr	r3, [pc, #144]	; (4284 <dir_next+0x114>)
    41f2:	4798      	blx	r3
    41f4:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    41f6:	2007      	movs	r0, #7
    41f8:	4643      	mov	r3, r8
    41fa:	2b00      	cmp	r3, #0
    41fc:	d0c4      	beq.n	4188 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    41fe:	3805      	subs	r0, #5
    4200:	2b01      	cmp	r3, #1
    4202:	d0c1      	beq.n	4188 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4204:	3801      	subs	r0, #1
    4206:	3301      	adds	r3, #1
    4208:	d0be      	beq.n	4188 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    420a:	2100      	movs	r1, #0
    420c:	6830      	ldr	r0, [r6, #0]
    420e:	4b1e      	ldr	r3, [pc, #120]	; (4288 <dir_next+0x118>)
    4210:	4798      	blx	r3
    4212:	0003      	movs	r3, r0
    4214:	2001      	movs	r0, #1
    4216:	2b00      	cmp	r3, #0
    4218:	d1b6      	bne.n	4188 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    421a:	6830      	ldr	r0, [r6, #0]
    421c:	3030      	adds	r0, #48	; 0x30
    421e:	2280      	movs	r2, #128	; 0x80
    4220:	0092      	lsls	r2, r2, #2
    4222:	2100      	movs	r1, #0
    4224:	4b19      	ldr	r3, [pc, #100]	; (428c <dir_next+0x11c>)
    4226:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    4228:	6835      	ldr	r5, [r6, #0]
    422a:	4641      	mov	r1, r8
    422c:	0028      	movs	r0, r5
    422e:	4b18      	ldr	r3, [pc, #96]	; (4290 <dir_next+0x120>)
    4230:	4798      	blx	r3
    4232:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4234:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    4236:	2301      	movs	r3, #1
    4238:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    423a:	6833      	ldr	r3, [r6, #0]
    423c:	789a      	ldrb	r2, [r3, #2]
    423e:	42aa      	cmp	r2, r5
    4240:	d90e      	bls.n	4260 <dir_next+0xf0>
						dj->fs->wflag = 1;
    4242:	4652      	mov	r2, sl
    4244:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4246:	2100      	movs	r1, #0
    4248:	6830      	ldr	r0, [r6, #0]
    424a:	4b0f      	ldr	r3, [pc, #60]	; (4288 <dir_next+0x118>)
    424c:	4798      	blx	r3
    424e:	2800      	cmp	r0, #0
    4250:	d113      	bne.n	427a <dir_next+0x10a>
						dj->fs->winsect++;
    4252:	6832      	ldr	r2, [r6, #0]
    4254:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4256:	3301      	adds	r3, #1
    4258:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    425a:	3501      	adds	r5, #1
    425c:	b2ed      	uxtb	r5, r5
    425e:	e7ec      	b.n	423a <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    4260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4262:	1b52      	subs	r2, r2, r5
    4264:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    4266:	4643      	mov	r3, r8
    4268:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    426a:	4641      	mov	r1, r8
    426c:	6830      	ldr	r0, [r6, #0]
    426e:	4b08      	ldr	r3, [pc, #32]	; (4290 <dir_next+0x120>)
    4270:	4798      	blx	r3
    4272:	6130      	str	r0, [r6, #16]
    4274:	e7a2      	b.n	41bc <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4276:	2001      	movs	r0, #1
    4278:	e786      	b.n	4188 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    427a:	2001      	movs	r0, #1
    427c:	e784      	b.n	4188 <dir_next+0x18>
    427e:	46c0      	nop			; (mov r8, r8)
    4280:	00003d59 	.word	0x00003d59
    4284:	00004035 	.word	0x00004035
    4288:	00003cb9 	.word	0x00003cb9
    428c:	000037ed 	.word	0x000037ed
    4290:	000037ff 	.word	0x000037ff

00004294 <dir_find>:
{
    4294:	b5f0      	push	{r4, r5, r6, r7, lr}
    4296:	46de      	mov	lr, fp
    4298:	4657      	mov	r7, sl
    429a:	464e      	mov	r6, r9
    429c:	4645      	mov	r5, r8
    429e:	b5e0      	push	{r5, r6, r7, lr}
    42a0:	b083      	sub	sp, #12
    42a2:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    42a4:	2100      	movs	r1, #0
    42a6:	4b5a      	ldr	r3, [pc, #360]	; (4410 <dir_find+0x17c>)
    42a8:	4798      	blx	r3
    42aa:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    42ac:	d000      	beq.n	42b0 <dir_find+0x1c>
    42ae:	e09e      	b.n	43ee <dir_find+0x15a>
    42b0:	23ff      	movs	r3, #255	; 0xff
    42b2:	4699      	mov	r9, r3
    42b4:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    42b6:	4b57      	ldr	r3, [pc, #348]	; (4414 <dir_find+0x180>)
    42b8:	469b      	mov	fp, r3
    42ba:	e01b      	b.n	42f4 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    42bc:	2b0f      	cmp	r3, #15
    42be:	d030      	beq.n	4322 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    42c0:	4653      	mov	r3, sl
    42c2:	2b00      	cmp	r3, #0
    42c4:	d105      	bne.n	42d2 <dir_find+0x3e>
    42c6:	0020      	movs	r0, r4
    42c8:	4b53      	ldr	r3, [pc, #332]	; (4418 <dir_find+0x184>)
    42ca:	4798      	blx	r3
    42cc:	4581      	cmp	r9, r0
    42ce:	d100      	bne.n	42d2 <dir_find+0x3e>
    42d0:	e08d      	b.n	43ee <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    42d2:	2301      	movs	r3, #1
    42d4:	425b      	negs	r3, r3
    42d6:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    42d8:	69a8      	ldr	r0, [r5, #24]
    42da:	7ac3      	ldrb	r3, [r0, #11]
    42dc:	07db      	lsls	r3, r3, #31
    42de:	d400      	bmi.n	42e2 <dir_find+0x4e>
    42e0:	e07d      	b.n	43de <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    42e2:	23ff      	movs	r3, #255	; 0xff
    42e4:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    42e6:	2100      	movs	r1, #0
    42e8:	0028      	movs	r0, r5
    42ea:	4b4c      	ldr	r3, [pc, #304]	; (441c <dir_find+0x188>)
    42ec:	4798      	blx	r3
    42ee:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    42f0:	d000      	beq.n	42f4 <dir_find+0x60>
    42f2:	e07c      	b.n	43ee <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    42f4:	6929      	ldr	r1, [r5, #16]
    42f6:	6828      	ldr	r0, [r5, #0]
    42f8:	47d8      	blx	fp
    42fa:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    42fc:	d177      	bne.n	43ee <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    42fe:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    4300:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4302:	2e00      	cmp	r6, #0
    4304:	d100      	bne.n	4308 <dir_find+0x74>
    4306:	e080      	b.n	440a <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    4308:	7ae2      	ldrb	r2, [r4, #11]
    430a:	233f      	movs	r3, #63	; 0x3f
    430c:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    430e:	2ee5      	cmp	r6, #229	; 0xe5
    4310:	d100      	bne.n	4314 <dir_find+0x80>
    4312:	e077      	b.n	4404 <dir_find+0x170>
    4314:	0712      	lsls	r2, r2, #28
    4316:	d5d1      	bpl.n	42bc <dir_find+0x28>
    4318:	2b0f      	cmp	r3, #15
    431a:	d002      	beq.n	4322 <dir_find+0x8e>
			ord = 0xFF;
    431c:	23ff      	movs	r3, #255	; 0xff
    431e:	469a      	mov	sl, r3
    4320:	e7e1      	b.n	42e6 <dir_find+0x52>
				if (dj->lfn) {
    4322:	69ef      	ldr	r7, [r5, #28]
    4324:	2f00      	cmp	r7, #0
    4326:	d0de      	beq.n	42e6 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    4328:	0673      	lsls	r3, r6, #25
    432a:	d518      	bpl.n	435e <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    432c:	7b63      	ldrb	r3, [r4, #13]
    432e:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    4330:	2340      	movs	r3, #64	; 0x40
    4332:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    4334:	88eb      	ldrh	r3, [r5, #6]
    4336:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4338:	7b63      	ldrb	r3, [r4, #13]
    433a:	9300      	str	r3, [sp, #0]
    433c:	22ff      	movs	r2, #255	; 0xff
    433e:	4692      	mov	sl, r2
    4340:	454b      	cmp	r3, r9
    4342:	d1d0      	bne.n	42e6 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    4344:	7823      	ldrb	r3, [r4, #0]
    4346:	3abf      	subs	r2, #191	; 0xbf
    4348:	4393      	bics	r3, r2
    434a:	3b01      	subs	r3, #1
    434c:	005a      	lsls	r2, r3, #1
    434e:	18d2      	adds	r2, r2, r3
    4350:	0092      	lsls	r2, r2, #2
    4352:	4692      	mov	sl, r2
    4354:	449a      	add	sl, r3
	s = 0; wc = 1;
    4356:	2201      	movs	r2, #1
    4358:	2300      	movs	r3, #0
    435a:	4699      	mov	r9, r3
    435c:	e01d      	b.n	439a <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    435e:	45b2      	cmp	sl, r6
    4360:	d0ea      	beq.n	4338 <dir_find+0xa4>
    4362:	23ff      	movs	r3, #255	; 0xff
    4364:	469a      	mov	sl, r3
    4366:	e7be      	b.n	42e6 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4368:	4b2d      	ldr	r3, [pc, #180]	; (4420 <dir_find+0x18c>)
    436a:	4798      	blx	r3
    436c:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    436e:	4653      	mov	r3, sl
    4370:	2bfe      	cmp	r3, #254	; 0xfe
    4372:	d81f      	bhi.n	43b4 <dir_find+0x120>
    4374:	2301      	movs	r3, #1
    4376:	4453      	add	r3, sl
    4378:	4698      	mov	r8, r3
    437a:	4653      	mov	r3, sl
    437c:	005b      	lsls	r3, r3, #1
    437e:	5bd8      	ldrh	r0, [r3, r7]
    4380:	4b27      	ldr	r3, [pc, #156]	; (4420 <dir_find+0x18c>)
    4382:	4798      	blx	r3
    4384:	0002      	movs	r2, r0
    4386:	9b01      	ldr	r3, [sp, #4]
    4388:	4283      	cmp	r3, r0
    438a:	d113      	bne.n	43b4 <dir_find+0x120>
    438c:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    438e:	2301      	movs	r3, #1
    4390:	469c      	mov	ip, r3
    4392:	44e1      	add	r9, ip
    4394:	464b      	mov	r3, r9
    4396:	2b0d      	cmp	r3, #13
    4398:	d011      	beq.n	43be <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    439a:	4b22      	ldr	r3, [pc, #136]	; (4424 <dir_find+0x190>)
    439c:	4649      	mov	r1, r9
    439e:	5cc9      	ldrb	r1, [r1, r3]
    43a0:	1863      	adds	r3, r4, r1
    43a2:	785b      	ldrb	r3, [r3, #1]
    43a4:	021b      	lsls	r3, r3, #8
    43a6:	5c60      	ldrb	r0, [r4, r1]
    43a8:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    43aa:	2a00      	cmp	r2, #0
    43ac:	d1dc      	bne.n	4368 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    43ae:	4b1e      	ldr	r3, [pc, #120]	; (4428 <dir_find+0x194>)
    43b0:	4298      	cmp	r0, r3
    43b2:	d0ec      	beq.n	438e <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    43b4:	9b00      	ldr	r3, [sp, #0]
    43b6:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    43b8:	23ff      	movs	r3, #255	; 0xff
    43ba:	469a      	mov	sl, r3
    43bc:	e793      	b.n	42e6 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    43be:	7823      	ldrb	r3, [r4, #0]
    43c0:	065b      	lsls	r3, r3, #25
    43c2:	d506      	bpl.n	43d2 <dir_find+0x13e>
    43c4:	2a00      	cmp	r2, #0
    43c6:	d004      	beq.n	43d2 <dir_find+0x13e>
    43c8:	4653      	mov	r3, sl
    43ca:	005b      	lsls	r3, r3, #1
    43cc:	5bdb      	ldrh	r3, [r3, r7]
    43ce:	2b00      	cmp	r3, #0
    43d0:	d1f0      	bne.n	43b4 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    43d2:	3e01      	subs	r6, #1
    43d4:	b2f3      	uxtb	r3, r6
    43d6:	469a      	mov	sl, r3
    43d8:	9b00      	ldr	r3, [sp, #0]
    43da:	4699      	mov	r9, r3
    43dc:	e783      	b.n	42e6 <dir_find+0x52>
    43de:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    43e0:	5ce1      	ldrb	r1, [r4, r3]
    43e2:	5cc2      	ldrb	r2, [r0, r3]
    43e4:	4291      	cmp	r1, r2
    43e6:	d10a      	bne.n	43fe <dir_find+0x16a>
    43e8:	3301      	adds	r3, #1
    43ea:	2b0b      	cmp	r3, #11
    43ec:	d1f8      	bne.n	43e0 <dir_find+0x14c>
}
    43ee:	0038      	movs	r0, r7
    43f0:	b003      	add	sp, #12
    43f2:	bc3c      	pop	{r2, r3, r4, r5}
    43f4:	4690      	mov	r8, r2
    43f6:	4699      	mov	r9, r3
    43f8:	46a2      	mov	sl, r4
    43fa:	46ab      	mov	fp, r5
    43fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    43fe:	23ff      	movs	r3, #255	; 0xff
    4400:	469a      	mov	sl, r3
    4402:	e770      	b.n	42e6 <dir_find+0x52>
			ord = 0xFF;
    4404:	23ff      	movs	r3, #255	; 0xff
    4406:	469a      	mov	sl, r3
    4408:	e76d      	b.n	42e6 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    440a:	2704      	movs	r7, #4
    440c:	e7ef      	b.n	43ee <dir_find+0x15a>
    440e:	46c0      	nop			; (mov r8, r8)
    4410:	00003e55 	.word	0x00003e55
    4414:	00003cb9 	.word	0x00003cb9
    4418:	00003817 	.word	0x00003817
    441c:	00004171 	.word	0x00004171
    4420:	0000507d 	.word	0x0000507d
    4424:	00005fcc 	.word	0x00005fcc
    4428:	0000ffff 	.word	0x0000ffff

0000442c <dir_register>:
{
    442c:	b5f0      	push	{r4, r5, r6, r7, lr}
    442e:	46de      	mov	lr, fp
    4430:	4657      	mov	r7, sl
    4432:	464e      	mov	r6, r9
    4434:	4645      	mov	r5, r8
    4436:	b5e0      	push	{r5, r6, r7, lr}
    4438:	b089      	sub	sp, #36	; 0x24
    443a:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    443c:	6987      	ldr	r7, [r0, #24]
    443e:	69c3      	ldr	r3, [r0, #28]
    4440:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    4442:	ad05      	add	r5, sp, #20
    4444:	220c      	movs	r2, #12
    4446:	0039      	movs	r1, r7
    4448:	0028      	movs	r0, r5
    444a:	4ba7      	ldr	r3, [pc, #668]	; (46e8 <dir_register+0x2bc>)
    444c:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    444e:	7aeb      	ldrb	r3, [r5, #11]
    4450:	07db      	lsls	r3, r3, #31
    4452:	d400      	bmi.n	4456 <dir_register+0x2a>
    4454:	e070      	b.n	4538 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    4456:	2300      	movs	r3, #0
    4458:	72fb      	strb	r3, [r7, #11]
    445a:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    445c:	220b      	movs	r2, #11
    445e:	a905      	add	r1, sp, #20
    4460:	0038      	movs	r0, r7
    4462:	4ba1      	ldr	r3, [pc, #644]	; (46e8 <dir_register+0x2bc>)
    4464:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4466:	2301      	movs	r3, #1
		ns[i--] = c;
    4468:	ad03      	add	r5, sp, #12
    446a:	001e      	movs	r6, r3
    446c:	46a0      	mov	r8, r4
    446e:	e049      	b.n	4504 <dir_register+0xd8>
    4470:	3801      	subs	r0, #1
    4472:	1829      	adds	r1, r5, r0
    4474:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    4476:	091b      	lsrs	r3, r3, #4
    4478:	b29b      	uxth	r3, r3
	} while (seq);
    447a:	2b00      	cmp	r3, #0
    447c:	d007      	beq.n	448e <dir_register+0x62>
		c = (seq % 16) + '0';
    447e:	0021      	movs	r1, r4
    4480:	4019      	ands	r1, r3
    4482:	000a      	movs	r2, r1
    4484:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    4486:	2a39      	cmp	r2, #57	; 0x39
    4488:	d9f2      	bls.n	4470 <dir_register+0x44>
    448a:	3207      	adds	r2, #7
    448c:	e7f0      	b.n	4470 <dir_register+0x44>
	ns[i] = '~';
    448e:	337e      	adds	r3, #126	; 0x7e
    4490:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    4492:	2800      	cmp	r0, #0
    4494:	d00a      	beq.n	44ac <dir_register+0x80>
    4496:	783b      	ldrb	r3, [r7, #0]
    4498:	2b20      	cmp	r3, #32
    449a:	d009      	beq.n	44b0 <dir_register+0x84>
    449c:	2300      	movs	r3, #0
    449e:	3301      	adds	r3, #1
    44a0:	4298      	cmp	r0, r3
    44a2:	d007      	beq.n	44b4 <dir_register+0x88>
    44a4:	5cfa      	ldrb	r2, [r7, r3]
    44a6:	2a20      	cmp	r2, #32
    44a8:	d1f9      	bne.n	449e <dir_register+0x72>
    44aa:	e009      	b.n	44c0 <dir_register+0x94>
    44ac:	0003      	movs	r3, r0
    44ae:	e007      	b.n	44c0 <dir_register+0x94>
    44b0:	2300      	movs	r3, #0
    44b2:	e005      	b.n	44c0 <dir_register+0x94>
    44b4:	0003      	movs	r3, r0
    44b6:	e003      	b.n	44c0 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    44b8:	54fa      	strb	r2, [r7, r3]
    44ba:	3301      	adds	r3, #1
	} while (j < 8);
    44bc:	2b07      	cmp	r3, #7
    44be:	d805      	bhi.n	44cc <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    44c0:	2220      	movs	r2, #32
    44c2:	2807      	cmp	r0, #7
    44c4:	d8f8      	bhi.n	44b8 <dir_register+0x8c>
    44c6:	5c2a      	ldrb	r2, [r5, r0]
    44c8:	3001      	adds	r0, #1
    44ca:	e7f5      	b.n	44b8 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    44cc:	4640      	mov	r0, r8
    44ce:	4b87      	ldr	r3, [pc, #540]	; (46ec <dir_register+0x2c0>)
    44d0:	4798      	blx	r3
			if (res != FR_OK) break;
    44d2:	2800      	cmp	r0, #0
    44d4:	d11c      	bne.n	4510 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    44d6:	3601      	adds	r6, #1
    44d8:	b2b6      	uxth	r6, r6
    44da:	2e64      	cmp	r6, #100	; 0x64
    44dc:	d015      	beq.n	450a <dir_register+0xde>
	mem_cpy(dst, src, 11);
    44de:	220b      	movs	r2, #11
    44e0:	a905      	add	r1, sp, #20
    44e2:	0038      	movs	r0, r7
    44e4:	4b80      	ldr	r3, [pc, #512]	; (46e8 <dir_register+0x2bc>)
    44e6:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    44e8:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    44ea:	2e05      	cmp	r6, #5
    44ec:	d90a      	bls.n	4504 <dir_register+0xd8>
    44ee:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    44f0:	085a      	lsrs	r2, r3, #1
    44f2:	03db      	lsls	r3, r3, #15
    44f4:	4313      	orrs	r3, r2
    44f6:	880a      	ldrh	r2, [r1, #0]
    44f8:	189b      	adds	r3, r3, r2
    44fa:	b29b      	uxth	r3, r3
    44fc:	3102      	adds	r1, #2
    44fe:	880a      	ldrh	r2, [r1, #0]
    4500:	2a00      	cmp	r2, #0
    4502:	d1f5      	bne.n	44f0 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    4504:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    4506:	240f      	movs	r4, #15
    4508:	e7b9      	b.n	447e <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    450a:	2307      	movs	r3, #7
    450c:	4698      	mov	r8, r3
    450e:	e006      	b.n	451e <dir_register+0xf2>
    4510:	4644      	mov	r4, r8
    4512:	4680      	mov	r8, r0
    4514:	2e64      	cmp	r6, #100	; 0x64
    4516:	d100      	bne.n	451a <dir_register+0xee>
    4518:	e0a5      	b.n	4666 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    451a:	2804      	cmp	r0, #4
    451c:	d007      	beq.n	452e <dir_register+0x102>
}
    451e:	4640      	mov	r0, r8
    4520:	b009      	add	sp, #36	; 0x24
    4522:	bc3c      	pop	{r2, r3, r4, r5}
    4524:	4690      	mov	r8, r2
    4526:	4699      	mov	r9, r3
    4528:	46a2      	mov	sl, r4
    452a:	46ab      	mov	fp, r5
    452c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    452e:	ab05      	add	r3, sp, #20
    4530:	7adb      	ldrb	r3, [r3, #11]
    4532:	72fb      	strb	r3, [r7, #11]
    4534:	4653      	mov	r3, sl
    4536:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4538:	ab05      	add	r3, sp, #20
    453a:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    453c:	2201      	movs	r2, #1
    453e:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4540:	079b      	lsls	r3, r3, #30
    4542:	d511      	bpl.n	4568 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    4544:	4653      	mov	r3, sl
    4546:	881b      	ldrh	r3, [r3, #0]
    4548:	2b00      	cmp	r3, #0
    454a:	d01b      	beq.n	4584 <dir_register+0x158>
    454c:	2000      	movs	r0, #0
    454e:	4652      	mov	r2, sl
    4550:	3001      	adds	r0, #1
    4552:	b280      	uxth	r0, r0
    4554:	0043      	lsls	r3, r0, #1
    4556:	5a9b      	ldrh	r3, [r3, r2]
    4558:	2b00      	cmp	r3, #0
    455a:	d1f9      	bne.n	4550 <dir_register+0x124>
		ne = (ne + 25) / 13;
    455c:	3019      	adds	r0, #25
    455e:	210d      	movs	r1, #13
    4560:	4b63      	ldr	r3, [pc, #396]	; (46f0 <dir_register+0x2c4>)
    4562:	4798      	blx	r3
    4564:	b283      	uxth	r3, r0
    4566:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4568:	2100      	movs	r1, #0
    456a:	0020      	movs	r0, r4
    456c:	4b61      	ldr	r3, [pc, #388]	; (46f4 <dir_register+0x2c8>)
    456e:	4798      	blx	r3
    4570:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    4572:	2800      	cmp	r0, #0
    4574:	d1d3      	bne.n	451e <dir_register+0xf2>
    4576:	4682      	mov	sl, r0
    4578:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    457a:	4f5f      	ldr	r7, [pc, #380]	; (46f8 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    457c:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    457e:	4b5f      	ldr	r3, [pc, #380]	; (46fc <dir_register+0x2d0>)
    4580:	4699      	mov	r9, r3
    4582:	e00b      	b.n	459c <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    4584:	2000      	movs	r0, #0
    4586:	e7e9      	b.n	455c <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    4588:	1c6b      	adds	r3, r5, #1
    458a:	b29b      	uxth	r3, r3
    458c:	459b      	cmp	fp, r3
    458e:	d06d      	beq.n	466c <dir_register+0x240>
    4590:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4592:	2101      	movs	r1, #1
    4594:	0020      	movs	r0, r4
    4596:	47c8      	blx	r9
	} while (res == FR_OK);
    4598:	2800      	cmp	r0, #0
    459a:	d112      	bne.n	45c2 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    459c:	6921      	ldr	r1, [r4, #16]
    459e:	6820      	ldr	r0, [r4, #0]
    45a0:	47b8      	blx	r7
		if (res != FR_OK) break;
    45a2:	2800      	cmp	r0, #0
    45a4:	d000      	beq.n	45a8 <dir_register+0x17c>
    45a6:	e098      	b.n	46da <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    45a8:	6963      	ldr	r3, [r4, #20]
    45aa:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    45ac:	2be5      	cmp	r3, #229	; 0xe5
    45ae:	d001      	beq.n	45b4 <dir_register+0x188>
    45b0:	2b00      	cmp	r3, #0
    45b2:	d104      	bne.n	45be <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    45b4:	2d00      	cmp	r5, #0
    45b6:	d1e7      	bne.n	4588 <dir_register+0x15c>
    45b8:	88e3      	ldrh	r3, [r4, #6]
    45ba:	469a      	mov	sl, r3
    45bc:	e7e4      	b.n	4588 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    45be:	0035      	movs	r5, r6
    45c0:	e7e7      	b.n	4592 <dir_register+0x166>
    45c2:	4680      	mov	r8, r0
    45c4:	e7ab      	b.n	451e <dir_register+0xf2>
		res = dir_sdi(dj, is);
    45c6:	4651      	mov	r1, sl
    45c8:	0020      	movs	r0, r4
    45ca:	4b4a      	ldr	r3, [pc, #296]	; (46f4 <dir_register+0x2c8>)
    45cc:	4798      	blx	r3
    45ce:	4680      	mov	r8, r0
		if (res == FR_OK) {
    45d0:	2800      	cmp	r0, #0
    45d2:	d1a4      	bne.n	451e <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    45d4:	69a0      	ldr	r0, [r4, #24]
    45d6:	4b4a      	ldr	r3, [pc, #296]	; (4700 <dir_register+0x2d4>)
    45d8:	4798      	blx	r3
    45da:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    45dc:	46a8      	mov	r8, r5
    45de:	e01f      	b.n	4620 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    45e0:	0022      	movs	r2, r4
    45e2:	e067      	b.n	46b4 <dir_register+0x288>
    45e4:	465e      	mov	r6, fp
    45e6:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    45e8:	4946      	ldr	r1, [pc, #280]	; (4704 <dir_register+0x2d8>)
    45ea:	428b      	cmp	r3, r1
    45ec:	d003      	beq.n	45f6 <dir_register+0x1ca>
    45ee:	0052      	lsls	r2, r2, #1
    45f0:	5b93      	ldrh	r3, [r2, r6]
    45f2:	2b00      	cmp	r3, #0
    45f4:	d103      	bne.n	45fe <dir_register+0x1d2>
    45f6:	2340      	movs	r3, #64	; 0x40
    45f8:	464a      	mov	r2, r9
    45fa:	431a      	orrs	r2, r3
    45fc:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    45fe:	464b      	mov	r3, r9
    4600:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    4602:	2301      	movs	r3, #1
    4604:	6822      	ldr	r2, [r4, #0]
    4606:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    4608:	2100      	movs	r1, #0
    460a:	0020      	movs	r0, r4
    460c:	4b3b      	ldr	r3, [pc, #236]	; (46fc <dir_register+0x2d0>)
    460e:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    4610:	2800      	cmp	r0, #0
    4612:	d166      	bne.n	46e2 <dir_register+0x2b6>
    4614:	4645      	mov	r5, r8
    4616:	3d01      	subs	r5, #1
    4618:	b2ab      	uxth	r3, r5
    461a:	4698      	mov	r8, r3
    461c:	2b00      	cmp	r3, #0
    461e:	d027      	beq.n	4670 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    4620:	6921      	ldr	r1, [r4, #16]
    4622:	6820      	ldr	r0, [r4, #0]
    4624:	4b34      	ldr	r3, [pc, #208]	; (46f8 <dir_register+0x2cc>)
    4626:	4798      	blx	r3
				if (res != FR_OK) break;
    4628:	2800      	cmp	r0, #0
    462a:	d158      	bne.n	46de <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    462c:	69e6      	ldr	r6, [r4, #28]
    462e:	6960      	ldr	r0, [r4, #20]
    4630:	4643      	mov	r3, r8
    4632:	466a      	mov	r2, sp
    4634:	70d3      	strb	r3, [r2, #3]
    4636:	78d3      	ldrb	r3, [r2, #3]
    4638:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    463a:	7913      	ldrb	r3, [r2, #4]
    463c:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    463e:	230f      	movs	r3, #15
    4640:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    4642:	2300      	movs	r3, #0
    4644:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    4646:	7683      	strb	r3, [r0, #26]
    4648:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    464a:	464b      	mov	r3, r9
    464c:	3b01      	subs	r3, #1
    464e:	005a      	lsls	r2, r3, #1
    4650:	18d2      	adds	r2, r2, r3
    4652:	0092      	lsls	r2, r2, #2
    4654:	18d2      	adds	r2, r2, r3
    4656:	492c      	ldr	r1, [pc, #176]	; (4708 <dir_register+0x2dc>)
    4658:	000d      	movs	r5, r1
    465a:	350d      	adds	r5, #13
	s = wc = 0;
    465c:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    465e:	4f29      	ldr	r7, [pc, #164]	; (4704 <dir_register+0x2d8>)
    4660:	46b3      	mov	fp, r6
    4662:	46a4      	mov	ip, r4
    4664:	e029      	b.n	46ba <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4666:	2307      	movs	r3, #7
    4668:	4698      	mov	r8, r3
    466a:	e758      	b.n	451e <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    466c:	2b01      	cmp	r3, #1
    466e:	d8aa      	bhi.n	45c6 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    4670:	6921      	ldr	r1, [r4, #16]
    4672:	6820      	ldr	r0, [r4, #0]
    4674:	4b20      	ldr	r3, [pc, #128]	; (46f8 <dir_register+0x2cc>)
    4676:	4798      	blx	r3
    4678:	4680      	mov	r8, r0
		if (res == FR_OK) {
    467a:	2800      	cmp	r0, #0
    467c:	d000      	beq.n	4680 <dir_register+0x254>
    467e:	e74e      	b.n	451e <dir_register+0xf2>
			dir = dj->dir;
    4680:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    4682:	2220      	movs	r2, #32
    4684:	2100      	movs	r1, #0
    4686:	0028      	movs	r0, r5
    4688:	4b20      	ldr	r3, [pc, #128]	; (470c <dir_register+0x2e0>)
    468a:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    468c:	220b      	movs	r2, #11
    468e:	69a1      	ldr	r1, [r4, #24]
    4690:	0028      	movs	r0, r5
    4692:	4b15      	ldr	r3, [pc, #84]	; (46e8 <dir_register+0x2bc>)
    4694:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    4696:	69a3      	ldr	r3, [r4, #24]
    4698:	7ada      	ldrb	r2, [r3, #11]
    469a:	2318      	movs	r3, #24
    469c:	4013      	ands	r3, r2
    469e:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    46a0:	6823      	ldr	r3, [r4, #0]
    46a2:	2201      	movs	r2, #1
    46a4:	711a      	strb	r2, [r3, #4]
    46a6:	e73a      	b.n	451e <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    46a8:	780c      	ldrb	r4, [r1, #0]
    46aa:	26ff      	movs	r6, #255	; 0xff
    46ac:	5506      	strb	r6, [r0, r4]
    46ae:	1904      	adds	r4, r0, r4
    46b0:	26ff      	movs	r6, #255	; 0xff
    46b2:	7066      	strb	r6, [r4, #1]
    46b4:	3101      	adds	r1, #1
	} while (++s < 13);
    46b6:	42a9      	cmp	r1, r5
    46b8:	d094      	beq.n	45e4 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    46ba:	42bb      	cmp	r3, r7
    46bc:	d0f4      	beq.n	46a8 <dir_register+0x27c>
    46be:	1c54      	adds	r4, r2, #1
    46c0:	0052      	lsls	r2, r2, #1
    46c2:	465b      	mov	r3, fp
    46c4:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    46c6:	780a      	ldrb	r2, [r1, #0]
    46c8:	5483      	strb	r3, [r0, r2]
    46ca:	1882      	adds	r2, r0, r2
    46cc:	0a1e      	lsrs	r6, r3, #8
    46ce:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    46d0:	2b00      	cmp	r3, #0
    46d2:	d185      	bne.n	45e0 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    46d4:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    46d6:	003b      	movs	r3, r7
    46d8:	e7ec      	b.n	46b4 <dir_register+0x288>
    46da:	4680      	mov	r8, r0
    46dc:	e71f      	b.n	451e <dir_register+0xf2>
    46de:	4680      	mov	r8, r0
    46e0:	e71d      	b.n	451e <dir_register+0xf2>
    46e2:	4680      	mov	r8, r0
    46e4:	e71b      	b.n	451e <dir_register+0xf2>
    46e6:	46c0      	nop			; (mov r8, r8)
    46e8:	000037d9 	.word	0x000037d9
    46ec:	00004295 	.word	0x00004295
    46f0:	00005481 	.word	0x00005481
    46f4:	00003e55 	.word	0x00003e55
    46f8:	00003cb9 	.word	0x00003cb9
    46fc:	00004171 	.word	0x00004171
    4700:	00003817 	.word	0x00003817
    4704:	0000ffff 	.word	0x0000ffff
    4708:	00005fcc 	.word	0x00005fcc
    470c:	000037ed 	.word	0x000037ed

00004710 <sync>:
{
    4710:	b570      	push	{r4, r5, r6, lr}
    4712:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    4714:	2100      	movs	r1, #0
    4716:	4b2c      	ldr	r3, [pc, #176]	; (47c8 <sync+0xb8>)
    4718:	4798      	blx	r3
	if (res == FR_OK) {
    471a:	2800      	cmp	r0, #0
    471c:	d10a      	bne.n	4734 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    471e:	7823      	ldrb	r3, [r4, #0]
    4720:	2b03      	cmp	r3, #3
    4722:	d008      	beq.n	4736 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    4724:	7860      	ldrb	r0, [r4, #1]
    4726:	2200      	movs	r2, #0
    4728:	2100      	movs	r1, #0
    472a:	4b28      	ldr	r3, [pc, #160]	; (47cc <sync+0xbc>)
    472c:	4798      	blx	r3
    472e:	1e43      	subs	r3, r0, #1
    4730:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    4732:	b2c0      	uxtb	r0, r0
}
    4734:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4736:	7963      	ldrb	r3, [r4, #5]
    4738:	2b00      	cmp	r3, #0
    473a:	d0f3      	beq.n	4724 <sync+0x14>
			fs->winsect = 0;
    473c:	2600      	movs	r6, #0
    473e:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    4740:	0025      	movs	r5, r4
    4742:	3530      	adds	r5, #48	; 0x30
    4744:	2280      	movs	r2, #128	; 0x80
    4746:	0092      	lsls	r2, r2, #2
    4748:	2100      	movs	r1, #0
    474a:	0028      	movs	r0, r5
    474c:	4b20      	ldr	r3, [pc, #128]	; (47d0 <sync+0xc0>)
    474e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    4750:	2255      	movs	r2, #85	; 0x55
    4752:	4b20      	ldr	r3, [pc, #128]	; (47d4 <sync+0xc4>)
    4754:	54e2      	strb	r2, [r4, r3]
    4756:	3255      	adds	r2, #85	; 0x55
    4758:	4b1f      	ldr	r3, [pc, #124]	; (47d8 <sync+0xc8>)
    475a:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    475c:	3bde      	subs	r3, #222	; 0xde
    475e:	3bff      	subs	r3, #255	; 0xff
    4760:	3a7a      	subs	r2, #122	; 0x7a
    4762:	54a3      	strb	r3, [r4, r2]
    4764:	3201      	adds	r2, #1
    4766:	54a3      	strb	r3, [r4, r2]
    4768:	330f      	adds	r3, #15
    476a:	3201      	adds	r2, #1
    476c:	54a3      	strb	r3, [r4, r2]
    476e:	320f      	adds	r2, #15
    4770:	2133      	movs	r1, #51	; 0x33
    4772:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    4774:	313f      	adds	r1, #63	; 0x3f
    4776:	2085      	movs	r0, #133	; 0x85
    4778:	0080      	lsls	r0, r0, #2
    477a:	5421      	strb	r1, [r4, r0]
    477c:	4817      	ldr	r0, [pc, #92]	; (47dc <sync+0xcc>)
    477e:	5421      	strb	r1, [r4, r0]
    4780:	4917      	ldr	r1, [pc, #92]	; (47e0 <sync+0xd0>)
    4782:	5462      	strb	r2, [r4, r1]
    4784:	4a17      	ldr	r2, [pc, #92]	; (47e4 <sync+0xd4>)
    4786:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    4788:	6923      	ldr	r3, [r4, #16]
    478a:	3201      	adds	r2, #1
    478c:	54a3      	strb	r3, [r4, r2]
    478e:	0a19      	lsrs	r1, r3, #8
    4790:	4a15      	ldr	r2, [pc, #84]	; (47e8 <sync+0xd8>)
    4792:	54a1      	strb	r1, [r4, r2]
    4794:	0c19      	lsrs	r1, r3, #16
    4796:	4a15      	ldr	r2, [pc, #84]	; (47ec <sync+0xdc>)
    4798:	54a1      	strb	r1, [r4, r2]
    479a:	0e1b      	lsrs	r3, r3, #24
    479c:	4a14      	ldr	r2, [pc, #80]	; (47f0 <sync+0xe0>)
    479e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    47a0:	68e3      	ldr	r3, [r4, #12]
    47a2:	3201      	adds	r2, #1
    47a4:	54a3      	strb	r3, [r4, r2]
    47a6:	0a19      	lsrs	r1, r3, #8
    47a8:	4a12      	ldr	r2, [pc, #72]	; (47f4 <sync+0xe4>)
    47aa:	54a1      	strb	r1, [r4, r2]
    47ac:	0c19      	lsrs	r1, r3, #16
    47ae:	4a12      	ldr	r2, [pc, #72]	; (47f8 <sync+0xe8>)
    47b0:	54a1      	strb	r1, [r4, r2]
    47b2:	0e1b      	lsrs	r3, r3, #24
    47b4:	4a11      	ldr	r2, [pc, #68]	; (47fc <sync+0xec>)
    47b6:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    47b8:	7860      	ldrb	r0, [r4, #1]
    47ba:	2301      	movs	r3, #1
    47bc:	6962      	ldr	r2, [r4, #20]
    47be:	0029      	movs	r1, r5
    47c0:	4d0f      	ldr	r5, [pc, #60]	; (4800 <sync+0xf0>)
    47c2:	47a8      	blx	r5
			fs->fsi_flag = 0;
    47c4:	7166      	strb	r6, [r4, #5]
    47c6:	e7ad      	b.n	4724 <sync+0x14>
    47c8:	00003cb9 	.word	0x00003cb9
    47cc:	0000371d 	.word	0x0000371d
    47d0:	000037ed 	.word	0x000037ed
    47d4:	0000022e 	.word	0x0000022e
    47d8:	0000022f 	.word	0x0000022f
    47dc:	00000215 	.word	0x00000215
    47e0:	00000216 	.word	0x00000216
    47e4:	00000217 	.word	0x00000217
    47e8:	00000219 	.word	0x00000219
    47ec:	0000021a 	.word	0x0000021a
    47f0:	0000021b 	.word	0x0000021b
    47f4:	0000021d 	.word	0x0000021d
    47f8:	0000021e 	.word	0x0000021e
    47fc:	0000021f 	.word	0x0000021f
    4800:	00003699 	.word	0x00003699

00004804 <follow_path>:
{
    4804:	b5f0      	push	{r4, r5, r6, r7, lr}
    4806:	46de      	mov	lr, fp
    4808:	4657      	mov	r7, sl
    480a:	464e      	mov	r6, r9
    480c:	4645      	mov	r5, r8
    480e:	b5e0      	push	{r5, r6, r7, lr}
    4810:	b083      	sub	sp, #12
    4812:	4682      	mov	sl, r0
    4814:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    4816:	780b      	ldrb	r3, [r1, #0]
    4818:	2b2f      	cmp	r3, #47	; 0x2f
    481a:	d00f      	beq.n	483c <follow_path+0x38>
    481c:	2b5c      	cmp	r3, #92	; 0x5c
    481e:	d00d      	beq.n	483c <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    4820:	2300      	movs	r3, #0
    4822:	4652      	mov	r2, sl
    4824:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    4826:	782b      	ldrb	r3, [r5, #0]
    4828:	4657      	mov	r7, sl
    482a:	2b1f      	cmp	r3, #31
    482c:	d809      	bhi.n	4842 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    482e:	2100      	movs	r1, #0
    4830:	4650      	mov	r0, sl
    4832:	4bb2      	ldr	r3, [pc, #712]	; (4afc <follow_path+0x2f8>)
    4834:	4798      	blx	r3
		dj->dir = 0;
    4836:	2300      	movs	r3, #0
    4838:	617b      	str	r3, [r7, #20]
    483a:	e13a      	b.n	4ab2 <follow_path+0x2ae>
		path++;
    483c:	3501      	adds	r5, #1
    483e:	e7ef      	b.n	4820 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4840:	3501      	adds	r5, #1
    4842:	7828      	ldrb	r0, [r5, #0]
    4844:	282f      	cmp	r0, #47	; 0x2f
    4846:	d0fb      	beq.n	4840 <follow_path+0x3c>
    4848:	285c      	cmp	r0, #92	; 0x5c
    484a:	d0f9      	beq.n	4840 <follow_path+0x3c>
	lfn = dj->lfn;
    484c:	69fb      	ldr	r3, [r7, #28]
    484e:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    4850:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4852:	281f      	cmp	r0, #31
    4854:	d800      	bhi.n	4858 <follow_path+0x54>
    4856:	e13b      	b.n	4ad0 <follow_path+0x2cc>
    4858:	282f      	cmp	r0, #47	; 0x2f
    485a:	d100      	bne.n	485e <follow_path+0x5a>
    485c:	e13b      	b.n	4ad6 <follow_path+0x2d2>
    485e:	285c      	cmp	r0, #92	; 0x5c
    4860:	d100      	bne.n	4864 <follow_path+0x60>
    4862:	e13b      	b.n	4adc <follow_path+0x2d8>
    4864:	1c6e      	adds	r6, r5, #1
    4866:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4868:	2380      	movs	r3, #128	; 0x80
    486a:	005b      	lsls	r3, r3, #1
    486c:	4698      	mov	r8, r3
    486e:	46bb      	mov	fp, r7
    4870:	002b      	movs	r3, r5
    4872:	0025      	movs	r5, r4
    4874:	0034      	movs	r4, r6
    4876:	4656      	mov	r6, sl
    4878:	4699      	mov	r9, r3
    487a:	e011      	b.n	48a0 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    487c:	2b00      	cmp	r3, #0
    487e:	d135      	bne.n	48ec <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    4880:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    4882:	1c6b      	adds	r3, r5, #1
    4884:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4886:	281f      	cmp	r0, #31
    4888:	d91e      	bls.n	48c8 <follow_path+0xc4>
    488a:	282f      	cmp	r0, #47	; 0x2f
    488c:	d100      	bne.n	4890 <follow_path+0x8c>
    488e:	e128      	b.n	4ae2 <follow_path+0x2de>
    4890:	285c      	cmp	r0, #92	; 0x5c
    4892:	d100      	bne.n	4896 <follow_path+0x92>
    4894:	e142      	b.n	4b1c <follow_path+0x318>
    4896:	3602      	adds	r6, #2
    4898:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    489a:	4543      	cmp	r3, r8
    489c:	d026      	beq.n	48ec <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    489e:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    48a0:	2101      	movs	r1, #1
    48a2:	4b97      	ldr	r3, [pc, #604]	; (4b00 <follow_path+0x2fc>)
    48a4:	4798      	blx	r3
    48a6:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    48a8:	d020      	beq.n	48ec <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    48aa:	287f      	cmp	r0, #127	; 0x7f
    48ac:	d8e8      	bhi.n	4880 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    48ae:	2822      	cmp	r0, #34	; 0x22
    48b0:	d100      	bne.n	48b4 <follow_path+0xb0>
    48b2:	e0fd      	b.n	4ab0 <follow_path+0x2ac>
    48b4:	232a      	movs	r3, #42	; 0x2a
    48b6:	4a93      	ldr	r2, [pc, #588]	; (4b04 <follow_path+0x300>)
    48b8:	b29f      	uxth	r7, r3
    48ba:	428f      	cmp	r7, r1
    48bc:	d0de      	beq.n	487c <follow_path+0x78>
    48be:	3201      	adds	r2, #1
    48c0:	7813      	ldrb	r3, [r2, #0]
    48c2:	2b00      	cmp	r3, #0
    48c4:	d1f8      	bne.n	48b8 <follow_path+0xb4>
    48c6:	e7db      	b.n	4880 <follow_path+0x7c>
    48c8:	002c      	movs	r4, r5
    48ca:	465f      	mov	r7, fp
    48cc:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    48ce:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    48d0:	2604      	movs	r6, #4
    48d2:	e10b      	b.n	4aec <follow_path+0x2e8>
		di--;
    48d4:	3c01      	subs	r4, #1
    48d6:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    48d8:	2c00      	cmp	r4, #0
    48da:	d100      	bne.n	48de <follow_path+0xda>
    48dc:	e0e8      	b.n	4ab0 <follow_path+0x2ac>
		w = lfn[di-1];
    48de:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    48e0:	2a20      	cmp	r2, #32
    48e2:	d0f7      	beq.n	48d4 <follow_path+0xd0>
    48e4:	2a2e      	cmp	r2, #46	; 0x2e
    48e6:	d0f5      	beq.n	48d4 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    48e8:	2c00      	cmp	r4, #0
    48ea:	d101      	bne.n	48f0 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    48ec:	2006      	movs	r0, #6
	return res;
    48ee:	e0e0      	b.n	4ab2 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    48f0:	0063      	lsls	r3, r4, #1
    48f2:	4698      	mov	r8, r3
    48f4:	2300      	movs	r3, #0
    48f6:	4652      	mov	r2, sl
    48f8:	4641      	mov	r1, r8
    48fa:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    48fc:	220b      	movs	r2, #11
    48fe:	2120      	movs	r1, #32
    4900:	69b8      	ldr	r0, [r7, #24]
    4902:	4b81      	ldr	r3, [pc, #516]	; (4b08 <follow_path+0x304>)
    4904:	4798      	blx	r3
    4906:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    4908:	2300      	movs	r3, #0
    490a:	e001      	b.n	4910 <follow_path+0x10c>
    490c:	3301      	adds	r3, #1
    490e:	3202      	adds	r2, #2
    4910:	8811      	ldrh	r1, [r2, #0]
    4912:	2920      	cmp	r1, #32
    4914:	d0fa      	beq.n	490c <follow_path+0x108>
    4916:	292e      	cmp	r1, #46	; 0x2e
    4918:	d0f8      	beq.n	490c <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    491a:	2b00      	cmp	r3, #0
    491c:	d001      	beq.n	4922 <follow_path+0x11e>
    491e:	2203      	movs	r2, #3
    4920:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    4922:	4652      	mov	r2, sl
    4924:	4442      	add	r2, r8
    4926:	3a02      	subs	r2, #2
    4928:	8812      	ldrh	r2, [r2, #0]
    492a:	2a2e      	cmp	r2, #46	; 0x2e
    492c:	d009      	beq.n	4942 <follow_path+0x13e>
    492e:	4642      	mov	r2, r8
    4930:	3a04      	subs	r2, #4
    4932:	4452      	add	r2, sl
    4934:	3c01      	subs	r4, #1
    4936:	2c00      	cmp	r4, #0
    4938:	d003      	beq.n	4942 <follow_path+0x13e>
    493a:	3a02      	subs	r2, #2
    493c:	8851      	ldrh	r1, [r2, #2]
    493e:	292e      	cmp	r1, #46	; 0x2e
    4940:	d1f8      	bne.n	4934 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    4942:	2208      	movs	r2, #8
    4944:	9201      	str	r2, [sp, #4]
    4946:	2200      	movs	r2, #0
    4948:	4693      	mov	fp, r2
    494a:	4691      	mov	r9, r2
    494c:	46a0      	mov	r8, r4
    494e:	e006      	b.n	495e <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4950:	4544      	cmp	r4, r8
    4952:	d100      	bne.n	4956 <follow_path+0x152>
    4954:	e0e6      	b.n	4b24 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    4956:	2303      	movs	r3, #3
    4958:	431e      	orrs	r6, r3
    495a:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    495c:	0023      	movs	r3, r4
    495e:	1c5c      	adds	r4, r3, #1
    4960:	005b      	lsls	r3, r3, #1
    4962:	4652      	mov	r2, sl
    4964:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    4966:	2800      	cmp	r0, #0
    4968:	d02c      	beq.n	49c4 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    496a:	2820      	cmp	r0, #32
    496c:	d0f3      	beq.n	4956 <follow_path+0x152>
    496e:	282e      	cmp	r0, #46	; 0x2e
    4970:	d0ee      	beq.n	4950 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    4972:	9b01      	ldr	r3, [sp, #4]
    4974:	459b      	cmp	fp, r3
    4976:	d219      	bcs.n	49ac <follow_path+0x1a8>
    4978:	4544      	cmp	r4, r8
    497a:	d100      	bne.n	497e <follow_path+0x17a>
    497c:	e0d2      	b.n	4b24 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    497e:	287f      	cmp	r0, #127	; 0x7f
    4980:	d85e      	bhi.n	4a40 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    4982:	282b      	cmp	r0, #43	; 0x2b
    4984:	d06e      	beq.n	4a64 <follow_path+0x260>
    4986:	232c      	movs	r3, #44	; 0x2c
    4988:	4a60      	ldr	r2, [pc, #384]	; (4b0c <follow_path+0x308>)
    498a:	b299      	uxth	r1, r3
    498c:	4281      	cmp	r1, r0
    498e:	d067      	beq.n	4a60 <follow_path+0x25c>
    4990:	3201      	adds	r2, #1
    4992:	7813      	ldrb	r3, [r2, #0]
    4994:	2b00      	cmp	r3, #0
    4996:	d1f8      	bne.n	498a <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    4998:	0003      	movs	r3, r0
    499a:	3b41      	subs	r3, #65	; 0x41
    499c:	b29b      	uxth	r3, r3
    499e:	2b19      	cmp	r3, #25
    49a0:	d86c      	bhi.n	4a7c <follow_path+0x278>
					b |= 2;
    49a2:	2302      	movs	r3, #2
    49a4:	464a      	mov	r2, r9
    49a6:	431a      	orrs	r2, r3
    49a8:	4691      	mov	r9, r2
    49aa:	e05f      	b.n	4a6c <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    49ac:	9b01      	ldr	r3, [sp, #4]
    49ae:	2b0b      	cmp	r3, #11
    49b0:	d03b      	beq.n	4a2a <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    49b2:	4544      	cmp	r4, r8
    49b4:	d100      	bne.n	49b8 <follow_path+0x1b4>
    49b6:	e0b9      	b.n	4b2c <follow_path+0x328>
    49b8:	2303      	movs	r3, #3
    49ba:	431e      	orrs	r6, r3
    49bc:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    49be:	4544      	cmp	r4, r8
    49c0:	d800      	bhi.n	49c4 <follow_path+0x1c0>
    49c2:	e0b3      	b.n	4b2c <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    49c4:	69bb      	ldr	r3, [r7, #24]
    49c6:	781a      	ldrb	r2, [r3, #0]
    49c8:	2ae5      	cmp	r2, #229	; 0xe5
    49ca:	d036      	beq.n	4a3a <follow_path+0x236>
	if (ni == 8) b <<= 2;
    49cc:	9b01      	ldr	r3, [sp, #4]
    49ce:	2b08      	cmp	r3, #8
    49d0:	d060      	beq.n	4a94 <follow_path+0x290>
    49d2:	230c      	movs	r3, #12
    49d4:	464a      	mov	r2, r9
    49d6:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    49d8:	2b0c      	cmp	r3, #12
    49da:	d060      	beq.n	4a9e <follow_path+0x29a>
    49dc:	43d2      	mvns	r2, r2
    49de:	0792      	lsls	r2, r2, #30
    49e0:	d05d      	beq.n	4a9e <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    49e2:	07b2      	lsls	r2, r6, #30
    49e4:	d406      	bmi.n	49f4 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    49e6:	2203      	movs	r2, #3
    49e8:	4649      	mov	r1, r9
    49ea:	400a      	ands	r2, r1
    49ec:	2a01      	cmp	r2, #1
    49ee:	d059      	beq.n	4aa4 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    49f0:	2b04      	cmp	r3, #4
    49f2:	d05a      	beq.n	4aaa <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    49f4:	69bb      	ldr	r3, [r7, #24]
    49f6:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    49f8:	0038      	movs	r0, r7
    49fa:	4b45      	ldr	r3, [pc, #276]	; (4b10 <follow_path+0x30c>)
    49fc:	4798      	blx	r3
			ns = *(dj->fn+NS);
    49fe:	69bb      	ldr	r3, [r7, #24]
    4a00:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    4a02:	2800      	cmp	r0, #0
    4a04:	d15c      	bne.n	4ac0 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    4a06:	075b      	lsls	r3, r3, #29
    4a08:	d453      	bmi.n	4ab2 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    4a0a:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    4a0c:	7ad3      	ldrb	r3, [r2, #11]
    4a0e:	06db      	lsls	r3, r3, #27
    4a10:	d55c      	bpl.n	4acc <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    4a12:	7d51      	ldrb	r1, [r2, #21]
    4a14:	0209      	lsls	r1, r1, #8
    4a16:	7d13      	ldrb	r3, [r2, #20]
    4a18:	430b      	orrs	r3, r1
    4a1a:	041b      	lsls	r3, r3, #16
    4a1c:	7ed1      	ldrb	r1, [r2, #27]
    4a1e:	0209      	lsls	r1, r1, #8
    4a20:	7e92      	ldrb	r2, [r2, #26]
    4a22:	430a      	orrs	r2, r1
    4a24:	4313      	orrs	r3, r2
    4a26:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    4a28:	e70b      	b.n	4842 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    4a2a:	2303      	movs	r3, #3
    4a2c:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4a2e:	69bb      	ldr	r3, [r7, #24]
    4a30:	781a      	ldrb	r2, [r3, #0]
    4a32:	2ae5      	cmp	r2, #229	; 0xe5
    4a34:	d1cd      	bne.n	49d2 <follow_path+0x1ce>
    4a36:	220b      	movs	r2, #11
    4a38:	9201      	str	r2, [sp, #4]
    4a3a:	2205      	movs	r2, #5
    4a3c:	701a      	strb	r2, [r3, #0]
    4a3e:	e7c5      	b.n	49cc <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    4a40:	2100      	movs	r1, #0
    4a42:	4b2f      	ldr	r3, [pc, #188]	; (4b00 <follow_path+0x2fc>)
    4a44:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    4a46:	2800      	cmp	r0, #0
    4a48:	d100      	bne.n	4a4c <follow_path+0x248>
    4a4a:	e079      	b.n	4b40 <follow_path+0x33c>
    4a4c:	4b31      	ldr	r3, [pc, #196]	; (4b14 <follow_path+0x310>)
    4a4e:	469c      	mov	ip, r3
    4a50:	4460      	add	r0, ip
    4a52:	3880      	subs	r0, #128	; 0x80
    4a54:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    4a56:	2302      	movs	r3, #2
    4a58:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    4a5a:	2800      	cmp	r0, #0
    4a5c:	d002      	beq.n	4a64 <follow_path+0x260>
    4a5e:	e790      	b.n	4982 <follow_path+0x17e>
    4a60:	2b00      	cmp	r3, #0
    4a62:	d099      	beq.n	4998 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    4a64:	2303      	movs	r3, #3
    4a66:	431e      	orrs	r6, r3
    4a68:	b2f6      	uxtb	r6, r6
    4a6a:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    4a6c:	69bb      	ldr	r3, [r7, #24]
    4a6e:	465a      	mov	r2, fp
    4a70:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    4a72:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    4a74:	2201      	movs	r2, #1
    4a76:	4694      	mov	ip, r2
    4a78:	44e3      	add	fp, ip
    4a7a:	e770      	b.n	495e <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    4a7c:	0003      	movs	r3, r0
    4a7e:	3b61      	subs	r3, #97	; 0x61
    4a80:	b29b      	uxth	r3, r3
    4a82:	2b19      	cmp	r3, #25
    4a84:	d8f2      	bhi.n	4a6c <follow_path+0x268>
						b |= 1; w -= 0x20;
    4a86:	2301      	movs	r3, #1
    4a88:	464a      	mov	r2, r9
    4a8a:	431a      	orrs	r2, r3
    4a8c:	4691      	mov	r9, r2
    4a8e:	3820      	subs	r0, #32
    4a90:	b280      	uxth	r0, r0
    4a92:	e7eb      	b.n	4a6c <follow_path+0x268>
	if (ni == 8) b <<= 2;
    4a94:	464b      	mov	r3, r9
    4a96:	009b      	lsls	r3, r3, #2
    4a98:	b2db      	uxtb	r3, r3
    4a9a:	4699      	mov	r9, r3
    4a9c:	e799      	b.n	49d2 <follow_path+0x1ce>
		cf |= NS_LFN;
    4a9e:	2202      	movs	r2, #2
    4aa0:	4316      	orrs	r6, r2
    4aa2:	e79e      	b.n	49e2 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4aa4:	320f      	adds	r2, #15
    4aa6:	4316      	orrs	r6, r2
    4aa8:	e7a2      	b.n	49f0 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4aaa:	3304      	adds	r3, #4
    4aac:	431e      	orrs	r6, r3
    4aae:	e7a1      	b.n	49f4 <follow_path+0x1f0>
    4ab0:	2006      	movs	r0, #6
}
    4ab2:	b003      	add	sp, #12
    4ab4:	bc3c      	pop	{r2, r3, r4, r5}
    4ab6:	4690      	mov	r8, r2
    4ab8:	4699      	mov	r9, r3
    4aba:	46a2      	mov	sl, r4
    4abc:	46ab      	mov	fp, r5
    4abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    4ac0:	2804      	cmp	r0, #4
    4ac2:	d1f6      	bne.n	4ab2 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4ac4:	075b      	lsls	r3, r3, #29
    4ac6:	d4f4      	bmi.n	4ab2 <follow_path+0x2ae>
    4ac8:	3001      	adds	r0, #1
    4aca:	e7f2      	b.n	4ab2 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    4acc:	2005      	movs	r0, #5
    4ace:	e7f0      	b.n	4ab2 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    4ad0:	2301      	movs	r3, #1
	si = di = 0;
    4ad2:	2400      	movs	r4, #0
    4ad4:	e6fb      	b.n	48ce <follow_path+0xca>
		w = p[si++];					/* Get a character */
    4ad6:	2301      	movs	r3, #1
	si = di = 0;
    4ad8:	2400      	movs	r4, #0
    4ada:	e005      	b.n	4ae8 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    4adc:	2301      	movs	r3, #1
	si = di = 0;
    4ade:	2400      	movs	r4, #0
    4ae0:	e002      	b.n	4ae8 <follow_path+0x2e4>
    4ae2:	002c      	movs	r4, r5
    4ae4:	465f      	mov	r7, fp
    4ae6:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4ae8:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4aea:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    4aec:	2c00      	cmp	r4, #0
    4aee:	d0df      	beq.n	4ab0 <follow_path+0x2ac>
    4af0:	4b09      	ldr	r3, [pc, #36]	; (4b18 <follow_path+0x314>)
    4af2:	18e3      	adds	r3, r4, r3
    4af4:	005b      	lsls	r3, r3, #1
    4af6:	4453      	add	r3, sl
    4af8:	e6f1      	b.n	48de <follow_path+0xda>
    4afa:	46c0      	nop			; (mov r8, r8)
    4afc:	00003e55 	.word	0x00003e55
    4b00:	00005035 	.word	0x00005035
    4b04:	0000605d 	.word	0x0000605d
    4b08:	000037ed 	.word	0x000037ed
    4b0c:	00006069 	.word	0x00006069
    4b10:	00004295 	.word	0x00004295
    4b14:	00005fdc 	.word	0x00005fdc
    4b18:	7fffffff 	.word	0x7fffffff
    4b1c:	002c      	movs	r4, r5
    4b1e:	465f      	mov	r7, fp
    4b20:	464d      	mov	r5, r9
    4b22:	e7e1      	b.n	4ae8 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    4b24:	9b01      	ldr	r3, [sp, #4]
    4b26:	2b0b      	cmp	r3, #11
    4b28:	d100      	bne.n	4b2c <follow_path+0x328>
    4b2a:	e77e      	b.n	4a2a <follow_path+0x226>
			b <<= 2; continue;
    4b2c:	464b      	mov	r3, r9
    4b2e:	009b      	lsls	r3, r3, #2
    4b30:	b2db      	uxtb	r3, r3
    4b32:	4699      	mov	r9, r3
    4b34:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    4b36:	220b      	movs	r2, #11
    4b38:	9201      	str	r2, [sp, #4]
    4b3a:	3a03      	subs	r2, #3
    4b3c:	4693      	mov	fp, r2
    4b3e:	e70e      	b.n	495e <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    4b40:	2302      	movs	r3, #2
    4b42:	431e      	orrs	r6, r3
    4b44:	e78e      	b.n	4a64 <follow_path+0x260>
    4b46:	46c0      	nop			; (mov r8, r8)

00004b48 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    4b48:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    4b4a:	2807      	cmp	r0, #7
    4b4c:	d901      	bls.n	4b52 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    4b4e:	0018      	movs	r0, r3
    4b50:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    4b52:	0083      	lsls	r3, r0, #2
    4b54:	4a07      	ldr	r2, [pc, #28]	; (4b74 <f_mount+0x2c>)
    4b56:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d001      	beq.n	4b60 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    4b5c:	2200      	movs	r2, #0
    4b5e:	701a      	strb	r2, [r3, #0]
	if (fs) {
    4b60:	2900      	cmp	r1, #0
    4b62:	d001      	beq.n	4b68 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    4b64:	2300      	movs	r3, #0
    4b66:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    4b68:	0080      	lsls	r0, r0, #2
    4b6a:	4b02      	ldr	r3, [pc, #8]	; (4b74 <f_mount+0x2c>)
    4b6c:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    4b6e:	2300      	movs	r3, #0
    4b70:	e7ed      	b.n	4b4e <f_mount+0x6>
    4b72:	46c0      	nop			; (mov r8, r8)
    4b74:	20000180 	.word	0x20000180

00004b78 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    4b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b7a:	46c6      	mov	lr, r8
    4b7c:	b500      	push	{lr}
    4b7e:	4c59      	ldr	r4, [pc, #356]	; (4ce4 <f_open+0x16c>)
    4b80:	44a5      	add	sp, r4
    4b82:	0005      	movs	r5, r0
    4b84:	9101      	str	r1, [sp, #4]
    4b86:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    4b88:	2300      	movs	r3, #0
    4b8a:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    4b8c:	261f      	movs	r6, #31
    4b8e:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    4b90:	221e      	movs	r2, #30
    4b92:	403a      	ands	r2, r7
    4b94:	a985      	add	r1, sp, #532	; 0x214
    4b96:	a801      	add	r0, sp, #4
    4b98:	4b53      	ldr	r3, [pc, #332]	; (4ce8 <f_open+0x170>)
    4b9a:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    4b9c:	ab82      	add	r3, sp, #520	; 0x208
    4b9e:	938b      	str	r3, [sp, #556]	; 0x22c
    4ba0:	ab02      	add	r3, sp, #8
    4ba2:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    4ba4:	2800      	cmp	r0, #0
    4ba6:	d006      	beq.n	4bb6 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    4ba8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4baa:	231c      	movs	r3, #28
    4bac:	423b      	tst	r3, r7
    4bae:	d145      	bne.n	4c3c <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    4bb0:	2800      	cmp	r0, #0
    4bb2:	d13d      	bne.n	4c30 <f_open+0xb8>
    4bb4:	e00c      	b.n	4bd0 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    4bb6:	9901      	ldr	r1, [sp, #4]
    4bb8:	a885      	add	r0, sp, #532	; 0x214
    4bba:	4b4c      	ldr	r3, [pc, #304]	; (4cec <f_open+0x174>)
    4bbc:	4798      	blx	r3
	dir = dj.dir;
    4bbe:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4bc0:	2800      	cmp	r0, #0
    4bc2:	d1f2      	bne.n	4baa <f_open+0x32>
		if (!dir)	/* Current dir itself */
    4bc4:	2c00      	cmp	r4, #0
    4bc6:	d100      	bne.n	4bca <f_open+0x52>
    4bc8:	e086      	b.n	4cd8 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4bca:	231c      	movs	r3, #28
    4bcc:	423b      	tst	r3, r7
    4bce:	d146      	bne.n	4c5e <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4bd0:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    4bd2:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4bd4:	06da      	lsls	r2, r3, #27
    4bd6:	d42b      	bmi.n	4c30 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4bd8:	07ba      	lsls	r2, r7, #30
    4bda:	d502      	bpl.n	4be2 <f_open+0x6a>
					res = FR_DENIED;
    4bdc:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4bde:	07db      	lsls	r3, r3, #31
    4be0:	d426      	bmi.n	4c30 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    4be2:	073b      	lsls	r3, r7, #28
    4be4:	d501      	bpl.n	4bea <f_open+0x72>
			mode |= FA__WRITTEN;
    4be6:	2320      	movs	r3, #32
    4be8:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    4bea:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4bee:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    4bf0:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    4bf2:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    4bf4:	7d62      	ldrb	r2, [r4, #21]
    4bf6:	0212      	lsls	r2, r2, #8
    4bf8:	7d23      	ldrb	r3, [r4, #20]
    4bfa:	4313      	orrs	r3, r2
    4bfc:	041b      	lsls	r3, r3, #16
    4bfe:	7ee1      	ldrb	r1, [r4, #27]
    4c00:	0209      	lsls	r1, r1, #8
    4c02:	7ea2      	ldrb	r2, [r4, #26]
    4c04:	430a      	orrs	r2, r1
    4c06:	4313      	orrs	r3, r2
    4c08:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    4c0a:	7fe3      	ldrb	r3, [r4, #31]
    4c0c:	061b      	lsls	r3, r3, #24
    4c0e:	7fa2      	ldrb	r2, [r4, #30]
    4c10:	0412      	lsls	r2, r2, #16
    4c12:	4313      	orrs	r3, r2
    4c14:	7f22      	ldrb	r2, [r4, #28]
    4c16:	4313      	orrs	r3, r2
    4c18:	7f62      	ldrb	r2, [r4, #29]
    4c1a:	0212      	lsls	r2, r2, #8
    4c1c:	4313      	orrs	r3, r2
    4c1e:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    4c20:	2300      	movs	r3, #0
    4c22:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    4c24:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    4c26:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4c28:	602b      	str	r3, [r5, #0]
    4c2a:	88db      	ldrh	r3, [r3, #6]
    4c2c:	80ab      	strh	r3, [r5, #4]
    4c2e:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    4c30:	238e      	movs	r3, #142	; 0x8e
    4c32:	009b      	lsls	r3, r3, #2
    4c34:	449d      	add	sp, r3
    4c36:	bc04      	pop	{r2}
    4c38:	4690      	mov	r8, r2
    4c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    4c3c:	2804      	cmp	r0, #4
    4c3e:	d005      	beq.n	4c4c <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4c40:	2308      	movs	r3, #8
    4c42:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4c44:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4c46:	2800      	cmp	r0, #0
    4c48:	d0d3      	beq.n	4bf2 <f_open+0x7a>
    4c4a:	e7f1      	b.n	4c30 <f_open+0xb8>
				res = dir_register(&dj);
    4c4c:	a885      	add	r0, sp, #532	; 0x214
    4c4e:	4b28      	ldr	r3, [pc, #160]	; (4cf0 <f_open+0x178>)
    4c50:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4c52:	2308      	movs	r3, #8
    4c54:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4c56:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4c58:	2800      	cmp	r0, #0
    4c5a:	d008      	beq.n	4c6e <f_open+0xf6>
    4c5c:	e7e8      	b.n	4c30 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4c5e:	7ae3      	ldrb	r3, [r4, #11]
    4c60:	2211      	movs	r2, #17
				res = FR_DENIED;
    4c62:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4c64:	421a      	tst	r2, r3
    4c66:	d1e3      	bne.n	4c30 <f_open+0xb8>
					res = FR_EXIST;
    4c68:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    4c6a:	077b      	lsls	r3, r7, #29
    4c6c:	d4e0      	bmi.n	4c30 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4c6e:	0733      	lsls	r3, r6, #28
    4c70:	d5bb      	bpl.n	4bea <f_open+0x72>
			dw = get_fattime();					/* Created time */
    4c72:	4b20      	ldr	r3, [pc, #128]	; (4cf4 <f_open+0x17c>)
    4c74:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    4c76:	73a0      	strb	r0, [r4, #14]
    4c78:	0a03      	lsrs	r3, r0, #8
    4c7a:	73e3      	strb	r3, [r4, #15]
    4c7c:	0c03      	lsrs	r3, r0, #16
    4c7e:	7423      	strb	r3, [r4, #16]
    4c80:	0e00      	lsrs	r0, r0, #24
    4c82:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    4c84:	2300      	movs	r3, #0
    4c86:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    4c88:	7723      	strb	r3, [r4, #28]
    4c8a:	7763      	strb	r3, [r4, #29]
    4c8c:	77a3      	strb	r3, [r4, #30]
    4c8e:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    4c90:	7d62      	ldrb	r2, [r4, #21]
    4c92:	0212      	lsls	r2, r2, #8
    4c94:	7d27      	ldrb	r7, [r4, #20]
    4c96:	4317      	orrs	r7, r2
    4c98:	043f      	lsls	r7, r7, #16
    4c9a:	7ee1      	ldrb	r1, [r4, #27]
    4c9c:	0209      	lsls	r1, r1, #8
    4c9e:	7ea2      	ldrb	r2, [r4, #26]
    4ca0:	430a      	orrs	r2, r1
    4ca2:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    4ca4:	76a3      	strb	r3, [r4, #26]
    4ca6:	76e3      	strb	r3, [r4, #27]
    4ca8:	7523      	strb	r3, [r4, #20]
    4caa:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    4cac:	9885      	ldr	r0, [sp, #532]	; 0x214
    4cae:	3301      	adds	r3, #1
    4cb0:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    4cb2:	2f00      	cmp	r7, #0
    4cb4:	d097      	beq.n	4be6 <f_open+0x6e>
				dw = dj.fs->winsect;
    4cb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4cb8:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    4cba:	0039      	movs	r1, r7
    4cbc:	4b0e      	ldr	r3, [pc, #56]	; (4cf8 <f_open+0x180>)
    4cbe:	4798      	blx	r3
				if (res == FR_OK) {
    4cc0:	2800      	cmp	r0, #0
    4cc2:	d1b5      	bne.n	4c30 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    4cc4:	9885      	ldr	r0, [sp, #532]	; 0x214
    4cc6:	3f01      	subs	r7, #1
    4cc8:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    4cca:	4641      	mov	r1, r8
    4ccc:	4b0b      	ldr	r3, [pc, #44]	; (4cfc <f_open+0x184>)
    4cce:	4798      	blx	r3
	if (res == FR_OK) {
    4cd0:	2800      	cmp	r0, #0
    4cd2:	d100      	bne.n	4cd6 <f_open+0x15e>
    4cd4:	e787      	b.n	4be6 <f_open+0x6e>
    4cd6:	e7ab      	b.n	4c30 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4cd8:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    4cda:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4cdc:	423b      	tst	r3, r7
    4cde:	d0b2      	beq.n	4c46 <f_open+0xce>
			res = FR_INVALID_NAME;
    4ce0:	2006      	movs	r0, #6
    4ce2:	e7ad      	b.n	4c40 <f_open+0xc8>
    4ce4:	fffffdc8 	.word	0xfffffdc8
    4ce8:	00003909 	.word	0x00003909
    4cec:	00004805 	.word	0x00004805
    4cf0:	0000442d 	.word	0x0000442d
    4cf4:	00003789 	.word	0x00003789
    4cf8:	000040f9 	.word	0x000040f9
    4cfc:	00003cb9 	.word	0x00003cb9

00004d00 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    4d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d02:	46de      	mov	lr, fp
    4d04:	4657      	mov	r7, sl
    4d06:	464e      	mov	r6, r9
    4d08:	4645      	mov	r5, r8
    4d0a:	b5e0      	push	{r5, r6, r7, lr}
    4d0c:	b083      	sub	sp, #12
    4d0e:	0004      	movs	r4, r0
    4d10:	000d      	movs	r5, r1
    4d12:	0016      	movs	r6, r2
    4d14:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    4d16:	2300      	movs	r3, #0
    4d18:	464a      	mov	r2, r9
    4d1a:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    4d1c:	8881      	ldrh	r1, [r0, #4]
    4d1e:	6800      	ldr	r0, [r0, #0]
    4d20:	4b7f      	ldr	r3, [pc, #508]	; (4f20 <f_write+0x220>)
    4d22:	4798      	blx	r3
    4d24:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4d26:	2800      	cmp	r0, #0
    4d28:	d000      	beq.n	4d2c <f_write+0x2c>
    4d2a:	e0f1      	b.n	4f10 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    4d2c:	79a3      	ldrb	r3, [r4, #6]
    4d2e:	b25a      	sxtb	r2, r3
    4d30:	2a00      	cmp	r2, #0
    4d32:	da00      	bge.n	4d36 <f_write+0x36>
    4d34:	e0ea      	b.n	4f0c <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    4d36:	079b      	lsls	r3, r3, #30
    4d38:	d402      	bmi.n	4d40 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    4d3a:	2307      	movs	r3, #7
    4d3c:	9300      	str	r3, [sp, #0]
    4d3e:	e0e7      	b.n	4f10 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    4d40:	68e3      	ldr	r3, [r4, #12]
    4d42:	199a      	adds	r2, r3, r6
    4d44:	4293      	cmp	r3, r2
    4d46:	d810      	bhi.n	4d6a <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    4d48:	2e00      	cmp	r6, #0
    4d4a:	d00e      	beq.n	4d6a <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    4d4c:	002f      	movs	r7, r5
    4d4e:	e07b      	b.n	4e48 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    4d50:	2100      	movs	r1, #0
    4d52:	4b74      	ldr	r3, [pc, #464]	; (4f24 <f_write+0x224>)
    4d54:	4798      	blx	r3
    4d56:	0003      	movs	r3, r0
    4d58:	6120      	str	r0, [r4, #16]
    4d5a:	e003      	b.n	4d64 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    4d5c:	6961      	ldr	r1, [r4, #20]
    4d5e:	4b71      	ldr	r3, [pc, #452]	; (4f24 <f_write+0x224>)
    4d60:	4798      	blx	r3
    4d62:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    4d64:	2b00      	cmp	r3, #0
    4d66:	d000      	beq.n	4d6a <f_write+0x6a>
    4d68:	e080      	b.n	4e6c <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    4d6a:	68a3      	ldr	r3, [r4, #8]
    4d6c:	68e2      	ldr	r2, [r4, #12]
    4d6e:	4293      	cmp	r3, r2
    4d70:	d900      	bls.n	4d74 <f_write+0x74>
    4d72:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    4d74:	79a3      	ldrb	r3, [r4, #6]
    4d76:	2220      	movs	r2, #32
    4d78:	4313      	orrs	r3, r2
    4d7a:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    4d7c:	e0c8      	b.n	4f10 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    4d7e:	79a2      	ldrb	r2, [r4, #6]
    4d80:	3b81      	subs	r3, #129	; 0x81
    4d82:	4313      	orrs	r3, r2
    4d84:	71a3      	strb	r3, [r4, #6]
    4d86:	2302      	movs	r3, #2
    4d88:	9300      	str	r3, [sp, #0]
    4d8a:	e0c1      	b.n	4f10 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4d8c:	79a2      	ldrb	r2, [r4, #6]
    4d8e:	3b7f      	subs	r3, #127	; 0x7f
    4d90:	4313      	orrs	r3, r2
    4d92:	71a3      	strb	r3, [r4, #6]
    4d94:	2301      	movs	r3, #1
    4d96:	9300      	str	r3, [sp, #0]
    4d98:	e0ba      	b.n	4f10 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    4d9a:	2100      	movs	r1, #0
    4d9c:	4b62      	ldr	r3, [pc, #392]	; (4f28 <f_write+0x228>)
    4d9e:	4798      	blx	r3
    4da0:	2800      	cmp	r0, #0
    4da2:	d06d      	beq.n	4e80 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    4da4:	79a2      	ldrb	r2, [r4, #6]
    4da6:	2380      	movs	r3, #128	; 0x80
    4da8:	425b      	negs	r3, r3
    4daa:	4313      	orrs	r3, r2
    4dac:	71a3      	strb	r3, [r4, #6]
    4dae:	2301      	movs	r3, #1
    4db0:	9300      	str	r3, [sp, #0]
    4db2:	e0ad      	b.n	4f10 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    4db4:	79a2      	ldrb	r2, [r4, #6]
    4db6:	2380      	movs	r3, #128	; 0x80
    4db8:	425b      	negs	r3, r3
    4dba:	4313      	orrs	r3, r2
    4dbc:	71a3      	strb	r3, [r4, #6]
    4dbe:	2302      	movs	r3, #2
    4dc0:	9300      	str	r3, [sp, #0]
    4dc2:	e0a5      	b.n	4f10 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    4dc4:	79a2      	ldrb	r2, [r4, #6]
    4dc6:	2380      	movs	r3, #128	; 0x80
    4dc8:	425b      	negs	r3, r3
    4dca:	4313      	orrs	r3, r2
    4dcc:	71a3      	strb	r3, [r4, #6]
    4dce:	2301      	movs	r3, #1
    4dd0:	9300      	str	r3, [sp, #0]
    4dd2:	e09d      	b.n	4f10 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    4dd4:	0240      	lsls	r0, r0, #9
    4dd6:	1839      	adds	r1, r7, r0
    4dd8:	3330      	adds	r3, #48	; 0x30
    4dda:	0018      	movs	r0, r3
    4ddc:	2280      	movs	r2, #128	; 0x80
    4dde:	0092      	lsls	r2, r2, #2
    4de0:	4b52      	ldr	r3, [pc, #328]	; (4f2c <f_write+0x22c>)
    4de2:	4798      	blx	r3
					fp->fs->wflag = 0;
    4de4:	2300      	movs	r3, #0
    4de6:	6822      	ldr	r2, [r4, #0]
    4de8:	7113      	strb	r3, [r2, #4]
    4dea:	e072      	b.n	4ed2 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    4dec:	68a3      	ldr	r3, [r4, #8]
    4dee:	68e2      	ldr	r2, [r4, #12]
    4df0:	4293      	cmp	r3, r2
    4df2:	d271      	bcs.n	4ed8 <f_write+0x1d8>
			fp->dsect = sect;
    4df4:	4643      	mov	r3, r8
    4df6:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    4df8:	68a3      	ldr	r3, [r4, #8]
    4dfa:	05dd      	lsls	r5, r3, #23
    4dfc:	0ded      	lsrs	r5, r5, #23
    4dfe:	2380      	movs	r3, #128	; 0x80
    4e00:	009b      	lsls	r3, r3, #2
    4e02:	1b5d      	subs	r5, r3, r5
    4e04:	42b5      	cmp	r5, r6
    4e06:	d900      	bls.n	4e0a <f_write+0x10a>
    4e08:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    4e0a:	69a1      	ldr	r1, [r4, #24]
    4e0c:	6820      	ldr	r0, [r4, #0]
    4e0e:	4b46      	ldr	r3, [pc, #280]	; (4f28 <f_write+0x228>)
    4e10:	4798      	blx	r3
    4e12:	2800      	cmp	r0, #0
    4e14:	d172      	bne.n	4efc <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    4e16:	68a3      	ldr	r3, [r4, #8]
    4e18:	05d8      	lsls	r0, r3, #23
    4e1a:	0dc0      	lsrs	r0, r0, #23
    4e1c:	3030      	adds	r0, #48	; 0x30
    4e1e:	6823      	ldr	r3, [r4, #0]
    4e20:	469c      	mov	ip, r3
    4e22:	4460      	add	r0, ip
    4e24:	002a      	movs	r2, r5
    4e26:	0039      	movs	r1, r7
    4e28:	4b40      	ldr	r3, [pc, #256]	; (4f2c <f_write+0x22c>)
    4e2a:	4798      	blx	r3
		fp->fs->wflag = 1;
    4e2c:	2301      	movs	r3, #1
    4e2e:	6822      	ldr	r2, [r4, #0]
    4e30:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    4e32:	197f      	adds	r7, r7, r5
    4e34:	68a3      	ldr	r3, [r4, #8]
    4e36:	195b      	adds	r3, r3, r5
    4e38:	60a3      	str	r3, [r4, #8]
    4e3a:	464b      	mov	r3, r9
    4e3c:	681b      	ldr	r3, [r3, #0]
    4e3e:	195b      	adds	r3, r3, r5
    4e40:	464a      	mov	r2, r9
    4e42:	6013      	str	r3, [r2, #0]
    4e44:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    4e46:	d090      	beq.n	4d6a <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    4e48:	68a3      	ldr	r3, [r4, #8]
    4e4a:	05da      	lsls	r2, r3, #23
    4e4c:	d1d4      	bne.n	4df8 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    4e4e:	6820      	ldr	r0, [r4, #0]
    4e50:	7882      	ldrb	r2, [r0, #2]
    4e52:	3a01      	subs	r2, #1
    4e54:	0a5d      	lsrs	r5, r3, #9
    4e56:	4015      	ands	r5, r2
    4e58:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    4e5a:	2d00      	cmp	r5, #0
    4e5c:	d10b      	bne.n	4e76 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    4e5e:	2b00      	cmp	r3, #0
    4e60:	d000      	beq.n	4e64 <f_write+0x164>
    4e62:	e77b      	b.n	4d5c <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    4e64:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    4e66:	2b00      	cmp	r3, #0
    4e68:	d100      	bne.n	4e6c <f_write+0x16c>
    4e6a:	e771      	b.n	4d50 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    4e6c:	2b01      	cmp	r3, #1
    4e6e:	d086      	beq.n	4d7e <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4e70:	1c5a      	adds	r2, r3, #1
    4e72:	d08b      	beq.n	4d8c <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    4e74:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    4e76:	6820      	ldr	r0, [r4, #0]
    4e78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4e7a:	69a2      	ldr	r2, [r4, #24]
    4e7c:	4293      	cmp	r3, r2
    4e7e:	d08c      	beq.n	4d9a <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    4e80:	6823      	ldr	r3, [r4, #0]
    4e82:	469a      	mov	sl, r3
    4e84:	6961      	ldr	r1, [r4, #20]
    4e86:	0018      	movs	r0, r3
    4e88:	4b29      	ldr	r3, [pc, #164]	; (4f30 <f_write+0x230>)
    4e8a:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    4e8c:	2800      	cmp	r0, #0
    4e8e:	d091      	beq.n	4db4 <f_write+0xb4>
			sect += csect;
    4e90:	4680      	mov	r8, r0
    4e92:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    4e94:	0a73      	lsrs	r3, r6, #9
    4e96:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    4e98:	d0a8      	beq.n	4dec <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    4e9a:	4653      	mov	r3, sl
    4e9c:	789b      	ldrb	r3, [r3, #2]
    4e9e:	465a      	mov	r2, fp
    4ea0:	18aa      	adds	r2, r5, r2
    4ea2:	429a      	cmp	r2, r3
    4ea4:	d901      	bls.n	4eaa <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    4ea6:	1b5b      	subs	r3, r3, r5
    4ea8:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    4eaa:	465b      	mov	r3, fp
    4eac:	466a      	mov	r2, sp
    4eae:	71d3      	strb	r3, [r2, #7]
    4eb0:	79d3      	ldrb	r3, [r2, #7]
    4eb2:	4652      	mov	r2, sl
    4eb4:	7850      	ldrb	r0, [r2, #1]
    4eb6:	4642      	mov	r2, r8
    4eb8:	0039      	movs	r1, r7
    4eba:	4d1e      	ldr	r5, [pc, #120]	; (4f34 <f_write+0x234>)
    4ebc:	47a8      	blx	r5
    4ebe:	2800      	cmp	r0, #0
    4ec0:	d000      	beq.n	4ec4 <f_write+0x1c4>
    4ec2:	e77f      	b.n	4dc4 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    4ec4:	6823      	ldr	r3, [r4, #0]
    4ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ec8:	4641      	mov	r1, r8
    4eca:	1a50      	subs	r0, r2, r1
    4ecc:	4583      	cmp	fp, r0
    4ece:	d900      	bls.n	4ed2 <f_write+0x1d2>
    4ed0:	e780      	b.n	4dd4 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    4ed2:	465b      	mov	r3, fp
    4ed4:	025d      	lsls	r5, r3, #9
				continue;
    4ed6:	e7ac      	b.n	4e32 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    4ed8:	2100      	movs	r1, #0
    4eda:	4650      	mov	r0, sl
    4edc:	4b12      	ldr	r3, [pc, #72]	; (4f28 <f_write+0x228>)
    4ede:	4798      	blx	r3
    4ee0:	2800      	cmp	r0, #0
    4ee2:	d103      	bne.n	4eec <f_write+0x1ec>
				fp->fs->winsect = sect;
    4ee4:	6823      	ldr	r3, [r4, #0]
    4ee6:	4642      	mov	r2, r8
    4ee8:	62da      	str	r2, [r3, #44]	; 0x2c
    4eea:	e783      	b.n	4df4 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    4eec:	79a2      	ldrb	r2, [r4, #6]
    4eee:	2380      	movs	r3, #128	; 0x80
    4ef0:	425b      	negs	r3, r3
    4ef2:	4313      	orrs	r3, r2
    4ef4:	71a3      	strb	r3, [r4, #6]
    4ef6:	2301      	movs	r3, #1
    4ef8:	9300      	str	r3, [sp, #0]
    4efa:	e009      	b.n	4f10 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    4efc:	79a2      	ldrb	r2, [r4, #6]
    4efe:	2380      	movs	r3, #128	; 0x80
    4f00:	425b      	negs	r3, r3
    4f02:	4313      	orrs	r3, r2
    4f04:	71a3      	strb	r3, [r4, #6]
    4f06:	2301      	movs	r3, #1
    4f08:	9300      	str	r3, [sp, #0]
    4f0a:	e001      	b.n	4f10 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    4f0c:	2302      	movs	r3, #2
    4f0e:	9300      	str	r3, [sp, #0]
}
    4f10:	9800      	ldr	r0, [sp, #0]
    4f12:	b003      	add	sp, #12
    4f14:	bc3c      	pop	{r2, r3, r4, r5}
    4f16:	4690      	mov	r8, r2
    4f18:	4699      	mov	r9, r3
    4f1a:	46a2      	mov	sl, r4
    4f1c:	46ab      	mov	fp, r5
    4f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f20:	00003835 	.word	0x00003835
    4f24:	00004035 	.word	0x00004035
    4f28:	00003cb9 	.word	0x00003cb9
    4f2c:	000037d9 	.word	0x000037d9
    4f30:	000037ff 	.word	0x000037ff
    4f34:	00003699 	.word	0x00003699

00004f38 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    4f38:	b570      	push	{r4, r5, r6, lr}
    4f3a:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    4f3c:	8881      	ldrh	r1, [r0, #4]
    4f3e:	6800      	ldr	r0, [r0, #0]
    4f40:	4b1c      	ldr	r3, [pc, #112]	; (4fb4 <f_sync+0x7c>)
    4f42:	4798      	blx	r3
	if (res == FR_OK) {
    4f44:	2800      	cmp	r0, #0
    4f46:	d102      	bne.n	4f4e <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    4f48:	79a3      	ldrb	r3, [r4, #6]
    4f4a:	069b      	lsls	r3, r3, #26
    4f4c:	d400      	bmi.n	4f50 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    4f4e:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    4f50:	69e1      	ldr	r1, [r4, #28]
    4f52:	6820      	ldr	r0, [r4, #0]
    4f54:	4b18      	ldr	r3, [pc, #96]	; (4fb8 <f_sync+0x80>)
    4f56:	4798      	blx	r3
			if (res == FR_OK) {
    4f58:	2800      	cmp	r0, #0
    4f5a:	d1f8      	bne.n	4f4e <f_sync+0x16>
				dir = fp->dir_ptr;
    4f5c:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    4f5e:	7aeb      	ldrb	r3, [r5, #11]
    4f60:	2220      	movs	r2, #32
    4f62:	4313      	orrs	r3, r2
    4f64:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    4f66:	7b23      	ldrb	r3, [r4, #12]
    4f68:	772b      	strb	r3, [r5, #28]
    4f6a:	89a3      	ldrh	r3, [r4, #12]
    4f6c:	0a1b      	lsrs	r3, r3, #8
    4f6e:	776b      	strb	r3, [r5, #29]
    4f70:	89e3      	ldrh	r3, [r4, #14]
    4f72:	77ab      	strb	r3, [r5, #30]
    4f74:	7be3      	ldrb	r3, [r4, #15]
    4f76:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    4f78:	7c23      	ldrb	r3, [r4, #16]
    4f7a:	76ab      	strb	r3, [r5, #26]
    4f7c:	8a23      	ldrh	r3, [r4, #16]
    4f7e:	0a1b      	lsrs	r3, r3, #8
    4f80:	76eb      	strb	r3, [r5, #27]
    4f82:	8a63      	ldrh	r3, [r4, #18]
    4f84:	752b      	strb	r3, [r5, #20]
    4f86:	8a63      	ldrh	r3, [r4, #18]
    4f88:	0a1b      	lsrs	r3, r3, #8
    4f8a:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    4f8c:	4b0b      	ldr	r3, [pc, #44]	; (4fbc <f_sync+0x84>)
    4f8e:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    4f90:	75a8      	strb	r0, [r5, #22]
    4f92:	0a03      	lsrs	r3, r0, #8
    4f94:	75eb      	strb	r3, [r5, #23]
    4f96:	0c03      	lsrs	r3, r0, #16
    4f98:	762b      	strb	r3, [r5, #24]
    4f9a:	0e00      	lsrs	r0, r0, #24
    4f9c:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    4f9e:	79a3      	ldrb	r3, [r4, #6]
    4fa0:	2220      	movs	r2, #32
    4fa2:	4393      	bics	r3, r2
    4fa4:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    4fa6:	2301      	movs	r3, #1
    4fa8:	6822      	ldr	r2, [r4, #0]
    4faa:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    4fac:	6820      	ldr	r0, [r4, #0]
    4fae:	4b04      	ldr	r3, [pc, #16]	; (4fc0 <f_sync+0x88>)
    4fb0:	4798      	blx	r3
    4fb2:	e7cc      	b.n	4f4e <f_sync+0x16>
    4fb4:	00003835 	.word	0x00003835
    4fb8:	00003cb9 	.word	0x00003cb9
    4fbc:	00003789 	.word	0x00003789
    4fc0:	00004711 	.word	0x00004711

00004fc4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    4fc4:	b510      	push	{r4, lr}
    4fc6:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    4fc8:	4b03      	ldr	r3, [pc, #12]	; (4fd8 <f_close+0x14>)
    4fca:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    4fcc:	2800      	cmp	r0, #0
    4fce:	d101      	bne.n	4fd4 <f_close+0x10>
    4fd0:	2300      	movs	r3, #0
    4fd2:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    4fd4:	bd10      	pop	{r4, pc}
    4fd6:	46c0      	nop			; (mov r8, r8)
    4fd8:	00004f39 	.word	0x00004f39

00004fdc <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    4fdc:	b510      	push	{r4, lr}
    4fde:	b082      	sub	sp, #8
    4fe0:	000c      	movs	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    4fe2:	466b      	mov	r3, sp
    4fe4:	7018      	strb	r0, [r3, #0]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    4fe6:	ab01      	add	r3, sp, #4
    4fe8:	2201      	movs	r2, #1
    4fea:	4669      	mov	r1, sp
    4fec:	0020      	movs	r0, r4
    4fee:	4c05      	ldr	r4, [pc, #20]	; (5004 <f_putc+0x28>)
    4ff0:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    4ff2:	9b01      	ldr	r3, [sp, #4]
    4ff4:	1e58      	subs	r0, r3, #1
    4ff6:	1e43      	subs	r3, r0, #1
    4ff8:	4198      	sbcs	r0, r3
    4ffa:	4240      	negs	r0, r0
    4ffc:	2301      	movs	r3, #1
    4ffe:	4318      	orrs	r0, r3
}
    5000:	b002      	add	sp, #8
    5002:	bd10      	pop	{r4, pc}
    5004:	00004d01 	.word	0x00004d01

00005008 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    5008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    500a:	0006      	movs	r6, r0
    500c:	000d      	movs	r5, r1
	int n;


	for (n = 0; *str; str++, n++) {
    500e:	7800      	ldrb	r0, [r0, #0]
    5010:	2800      	cmp	r0, #0
    5012:	d00b      	beq.n	502c <f_puts+0x24>
    5014:	2400      	movs	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
    5016:	4f06      	ldr	r7, [pc, #24]	; (5030 <f_puts+0x28>)
    5018:	0029      	movs	r1, r5
    501a:	47b8      	blx	r7
    501c:	1c43      	adds	r3, r0, #1
    501e:	d004      	beq.n	502a <f_puts+0x22>
	for (n = 0; *str; str++, n++) {
    5020:	3401      	adds	r4, #1
    5022:	5d30      	ldrb	r0, [r6, r4]
    5024:	2800      	cmp	r0, #0
    5026:	d1f7      	bne.n	5018 <f_puts+0x10>
    5028:	0020      	movs	r0, r4
	}
	return n;
}
    502a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (n = 0; *str; str++, n++) {
    502c:	2000      	movs	r0, #0
    502e:	e7fc      	b.n	502a <f_puts+0x22>
    5030:	00004fdd 	.word	0x00004fdd

00005034 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    5034:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    5036:	287f      	cmp	r0, #127	; 0x7f
    5038:	d911      	bls.n	505e <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    503a:	2900      	cmp	r1, #0
    503c:	d111      	bne.n	5062 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    503e:	28c7      	cmp	r0, #199	; 0xc7
    5040:	d017      	beq.n	5072 <ff_convert+0x3e>
    5042:	4a0d      	ldr	r2, [pc, #52]	; (5078 <ff_convert+0x44>)
    5044:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    5046:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    5048:	8811      	ldrh	r1, [r2, #0]
    504a:	4281      	cmp	r1, r0
    504c:	d004      	beq.n	5058 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    504e:	3301      	adds	r3, #1
    5050:	b29b      	uxth	r3, r3
    5052:	3202      	adds	r2, #2
    5054:	2b80      	cmp	r3, #128	; 0x80
    5056:	d1f7      	bne.n	5048 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    5058:	3380      	adds	r3, #128	; 0x80
    505a:	20ff      	movs	r0, #255	; 0xff
    505c:	4003      	ands	r3, r0
		}
	}

	return c;
}
    505e:	0018      	movs	r0, r3
    5060:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    5062:	2300      	movs	r3, #0
    5064:	28ff      	cmp	r0, #255	; 0xff
    5066:	d8fa      	bhi.n	505e <ff_convert+0x2a>
    5068:	3880      	subs	r0, #128	; 0x80
    506a:	0040      	lsls	r0, r0, #1
    506c:	4b02      	ldr	r3, [pc, #8]	; (5078 <ff_convert+0x44>)
    506e:	5ac3      	ldrh	r3, [r0, r3]
    5070:	e7f5      	b.n	505e <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    5072:	2300      	movs	r3, #0
    5074:	e7f0      	b.n	5058 <ff_convert+0x24>
    5076:	46c0      	nop			; (mov r8, r8)
    5078:	00006070 	.word	0x00006070

0000507c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    507c:	2861      	cmp	r0, #97	; 0x61
    507e:	d014      	beq.n	50aa <ff_wtoupper+0x2e>
    5080:	4b0b      	ldr	r3, [pc, #44]	; (50b0 <ff_wtoupper+0x34>)
    5082:	3304      	adds	r3, #4
    5084:	2101      	movs	r1, #1
    5086:	2262      	movs	r2, #98	; 0x62
    5088:	4290      	cmp	r0, r2
    508a:	d007      	beq.n	509c <ff_wtoupper+0x20>
    508c:	3101      	adds	r1, #1
    508e:	3302      	adds	r3, #2
    5090:	1e9a      	subs	r2, r3, #2
    5092:	8812      	ldrh	r2, [r2, #0]
    5094:	2a00      	cmp	r2, #0
    5096:	d1f7      	bne.n	5088 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    5098:	0003      	movs	r3, r0
    509a:	e004      	b.n	50a6 <ff_wtoupper+0x2a>
    509c:	1e03      	subs	r3, r0, #0
    509e:	d002      	beq.n	50a6 <ff_wtoupper+0x2a>
    50a0:	0049      	lsls	r1, r1, #1
    50a2:	4b04      	ldr	r3, [pc, #16]	; (50b4 <ff_wtoupper+0x38>)
    50a4:	5acb      	ldrh	r3, [r1, r3]
}
    50a6:	0018      	movs	r0, r3
    50a8:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    50aa:	2100      	movs	r1, #0
    50ac:	e7f8      	b.n	50a0 <ff_wtoupper+0x24>
    50ae:	46c0      	nop			; (mov r8, r8)
    50b0:	00006170 	.word	0x00006170
    50b4:	00006350 	.word	0x00006350

000050b8 <StartFilesystemAndTest>:
* @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
*				before performing the jump!
* @return       Returns true is SD card and file system test passed. False otherwise.
******************************************************************************/
static bool StartFilesystemAndTest(void)
{
    50b8:	b530      	push	{r4, r5, lr}
    50ba:	b0c3      	sub	sp, #268	; 0x10c
	bool sdCardPass = true;
	uint8_t binbuff[256];

	//Before we begin - fill buffer for binary write test
	//Fill binbuff with values 0x00 - 0xFF
	for(int i = 0; i < 256; i++)
    50bc:	2300      	movs	r3, #0
	{
		binbuff[i] = i;
    50be:	a902      	add	r1, sp, #8
	for(int i = 0; i < 256; i++)
    50c0:	2280      	movs	r2, #128	; 0x80
    50c2:	0052      	lsls	r2, r2, #1
		binbuff[i] = i;
    50c4:	545b      	strb	r3, [r3, r1]
	for(int i = 0; i < 256; i++)
    50c6:	3301      	adds	r3, #1
    50c8:	4293      	cmp	r3, r2
    50ca:	d1fb      	bne.n	50c4 <StartFilesystemAndTest+0xc>
	}

	//MOUNT SD CARD
	Ctrl_status sdStatus= SdCard_Initiate();
    50cc:	4b4a      	ldr	r3, [pc, #296]	; (51f8 <StartFilesystemAndTest+0x140>)
    50ce:	4798      	blx	r3
	if(sdStatus == CTRL_GOOD) //If the SD card is good we continue mounting the system!
    50d0:	2800      	cmp	r0, #0
    50d2:	d000      	beq.n	50d6 <StartFilesystemAndTest+0x1e>
    50d4:	e08a      	b.n	51ec <StartFilesystemAndTest+0x134>
	{
		SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    50d6:	4849      	ldr	r0, [pc, #292]	; (51fc <StartFilesystemAndTest+0x144>)
    50d8:	4c49      	ldr	r4, [pc, #292]	; (5200 <StartFilesystemAndTest+0x148>)
    50da:	47a0      	blx	r4

		//Attempt to mount a FAT file system on the SD Card using FATFS
		SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    50dc:	4849      	ldr	r0, [pc, #292]	; (5204 <StartFilesystemAndTest+0x14c>)
    50de:	47a0      	blx	r4
		memset(&fs, 0, sizeof(FATFS));
    50e0:	4c49      	ldr	r4, [pc, #292]	; (5208 <StartFilesystemAndTest+0x150>)
    50e2:	228c      	movs	r2, #140	; 0x8c
    50e4:	0092      	lsls	r2, r2, #2
    50e6:	2100      	movs	r1, #0
    50e8:	0020      	movs	r0, r4
    50ea:	4b48      	ldr	r3, [pc, #288]	; (520c <StartFilesystemAndTest+0x154>)
    50ec:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs); //Order FATFS Mount
    50ee:	0021      	movs	r1, r4
    50f0:	2000      	movs	r0, #0
    50f2:	4b47      	ldr	r3, [pc, #284]	; (5210 <StartFilesystemAndTest+0x158>)
    50f4:	4798      	blx	r3
    50f6:	4b47      	ldr	r3, [pc, #284]	; (5214 <StartFilesystemAndTest+0x15c>)
    50f8:	7018      	strb	r0, [r3, #0]
		if (FR_INVALID_DRIVE == res)
    50fa:	280b      	cmp	r0, #11
    50fc:	d01b      	beq.n	5136 <StartFilesystemAndTest+0x7e>
		{
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
			sdCardPass = false;
			goto main_end_of_test;
		}
		SerialConsoleWriteString("[OK]\r\n");
    50fe:	4846      	ldr	r0, [pc, #280]	; (5218 <StartFilesystemAndTest+0x160>)
    5100:	4c3f      	ldr	r4, [pc, #252]	; (5200 <StartFilesystemAndTest+0x148>)
    5102:	47a0      	blx	r4

		//Create and open a file
		SerialConsoleWriteString("Create a file (f_open)...\r\n");
    5104:	4845      	ldr	r0, [pc, #276]	; (521c <StartFilesystemAndTest+0x164>)
    5106:	47a0      	blx	r4

		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5108:	4945      	ldr	r1, [pc, #276]	; (5220 <StartFilesystemAndTest+0x168>)
    510a:	2330      	movs	r3, #48	; 0x30
    510c:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
    510e:	220a      	movs	r2, #10
    5110:	4844      	ldr	r0, [pc, #272]	; (5224 <StartFilesystemAndTest+0x16c>)
    5112:	4b45      	ldr	r3, [pc, #276]	; (5228 <StartFilesystemAndTest+0x170>)
    5114:	4798      	blx	r3
    5116:	4b3f      	ldr	r3, [pc, #252]	; (5214 <StartFilesystemAndTest+0x15c>)
    5118:	7018      	strb	r0, [r3, #0]
		(char const *)test_file_name,
		FA_CREATE_ALWAYS | FA_WRITE);
		
		if (res != FR_OK)
    511a:	2800      	cmp	r0, #0
    511c:	d012      	beq.n	5144 <StartFilesystemAndTest+0x8c>
		{
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    511e:	0002      	movs	r2, r0
    5120:	4942      	ldr	r1, [pc, #264]	; (522c <StartFilesystemAndTest+0x174>)
    5122:	2000      	movs	r0, #0
    5124:	4b42      	ldr	r3, [pc, #264]	; (5230 <StartFilesystemAndTest+0x178>)
    5126:	4798      	blx	r3
			sdCardPass = false;
    5128:	2400      	movs	r4, #0
		SerialConsoleWriteString("[OK]\r\n");
		f_close(&file_object); //Close file
		SerialConsoleWriteString("Test is successful.\n\r");
		
		main_end_of_test:
		SerialConsoleWriteString("End of Test.\n\r");
    512a:	4842      	ldr	r0, [pc, #264]	; (5234 <StartFilesystemAndTest+0x17c>)
    512c:	4b34      	ldr	r3, [pc, #208]	; (5200 <StartFilesystemAndTest+0x148>)
    512e:	4798      	blx	r3
		SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
		sdCardPass = false;
	}

	return sdCardPass;
}
    5130:	0020      	movs	r0, r4
    5132:	b043      	add	sp, #268	; 0x10c
    5134:	bd30      	pop	{r4, r5, pc}
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    5136:	220b      	movs	r2, #11
    5138:	493c      	ldr	r1, [pc, #240]	; (522c <StartFilesystemAndTest+0x174>)
    513a:	2000      	movs	r0, #0
    513c:	4b3c      	ldr	r3, [pc, #240]	; (5230 <StartFilesystemAndTest+0x178>)
    513e:	4798      	blx	r3
			sdCardPass = false;
    5140:	2400      	movs	r4, #0
			goto main_end_of_test;
    5142:	e7f2      	b.n	512a <StartFilesystemAndTest+0x72>
		SerialConsoleWriteString("[OK]\r\n");
    5144:	4834      	ldr	r0, [pc, #208]	; (5218 <StartFilesystemAndTest+0x160>)
    5146:	4c2e      	ldr	r4, [pc, #184]	; (5200 <StartFilesystemAndTest+0x148>)
    5148:	47a0      	blx	r4
		SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    514a:	483b      	ldr	r0, [pc, #236]	; (5238 <StartFilesystemAndTest+0x180>)
    514c:	47a0      	blx	r4
		if (0 == f_puts("Test SD/MMC stack\n", &file_object))
    514e:	4935      	ldr	r1, [pc, #212]	; (5224 <StartFilesystemAndTest+0x16c>)
    5150:	483a      	ldr	r0, [pc, #232]	; (523c <StartFilesystemAndTest+0x184>)
    5152:	4b3b      	ldr	r3, [pc, #236]	; (5240 <StartFilesystemAndTest+0x188>)
    5154:	4798      	blx	r3
    5156:	2800      	cmp	r0, #0
    5158:	d108      	bne.n	516c <StartFilesystemAndTest+0xb4>
			f_close(&file_object);
    515a:	4832      	ldr	r0, [pc, #200]	; (5224 <StartFilesystemAndTest+0x16c>)
    515c:	4b39      	ldr	r3, [pc, #228]	; (5244 <StartFilesystemAndTest+0x18c>)
    515e:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    5160:	4939      	ldr	r1, [pc, #228]	; (5248 <StartFilesystemAndTest+0x190>)
    5162:	2000      	movs	r0, #0
    5164:	4b32      	ldr	r3, [pc, #200]	; (5230 <StartFilesystemAndTest+0x178>)
    5166:	4798      	blx	r3
			sdCardPass = false;
    5168:	2400      	movs	r4, #0
			goto main_end_of_test;
    516a:	e7de      	b.n	512a <StartFilesystemAndTest+0x72>
		SerialConsoleWriteString("[OK]\r\n");
    516c:	482a      	ldr	r0, [pc, #168]	; (5218 <StartFilesystemAndTest+0x160>)
    516e:	4d24      	ldr	r5, [pc, #144]	; (5200 <StartFilesystemAndTest+0x148>)
    5170:	47a8      	blx	r5
		f_close(&file_object); //Close file
    5172:	4c2c      	ldr	r4, [pc, #176]	; (5224 <StartFilesystemAndTest+0x16c>)
    5174:	0020      	movs	r0, r4
    5176:	4b33      	ldr	r3, [pc, #204]	; (5244 <StartFilesystemAndTest+0x18c>)
    5178:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    517a:	4834      	ldr	r0, [pc, #208]	; (524c <StartFilesystemAndTest+0x194>)
    517c:	47a8      	blx	r5
		test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    517e:	4934      	ldr	r1, [pc, #208]	; (5250 <StartFilesystemAndTest+0x198>)
    5180:	2330      	movs	r3, #48	; 0x30
    5182:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object, (char const *)test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    5184:	220a      	movs	r2, #10
    5186:	0020      	movs	r0, r4
    5188:	4b27      	ldr	r3, [pc, #156]	; (5228 <StartFilesystemAndTest+0x170>)
    518a:	4798      	blx	r3
    518c:	4b21      	ldr	r3, [pc, #132]	; (5214 <StartFilesystemAndTest+0x15c>)
    518e:	7018      	strb	r0, [r3, #0]
		if (res != FR_OK)
    5190:	2800      	cmp	r0, #0
    5192:	d00a      	beq.n	51aa <StartFilesystemAndTest+0xf2>
			SerialConsoleWriteString("Could not open binary file!\r\n");
    5194:	482f      	ldr	r0, [pc, #188]	; (5254 <StartFilesystemAndTest+0x19c>)
    5196:	4b1a      	ldr	r3, [pc, #104]	; (5200 <StartFilesystemAndTest+0x148>)
    5198:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    519a:	4b1e      	ldr	r3, [pc, #120]	; (5214 <StartFilesystemAndTest+0x15c>)
    519c:	781a      	ldrb	r2, [r3, #0]
    519e:	4923      	ldr	r1, [pc, #140]	; (522c <StartFilesystemAndTest+0x174>)
    51a0:	2000      	movs	r0, #0
    51a2:	4b23      	ldr	r3, [pc, #140]	; (5230 <StartFilesystemAndTest+0x178>)
    51a4:	4798      	blx	r3
			sdCardPass = false;
    51a6:	2400      	movs	r4, #0
			goto main_end_of_test;
    51a8:	e7bf      	b.n	512a <StartFilesystemAndTest+0x72>
		SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    51aa:	482b      	ldr	r0, [pc, #172]	; (5258 <StartFilesystemAndTest+0x1a0>)
    51ac:	4b14      	ldr	r3, [pc, #80]	; (5200 <StartFilesystemAndTest+0x148>)
    51ae:	4798      	blx	r3
		uint32_t varWrite = 0;
    51b0:	2300      	movs	r3, #0
    51b2:	9301      	str	r3, [sp, #4]
		if (0 != f_write(&file_object, binbuff,256, (UINT*) &varWrite))
    51b4:	ab01      	add	r3, sp, #4
    51b6:	2280      	movs	r2, #128	; 0x80
    51b8:	0052      	lsls	r2, r2, #1
    51ba:	a902      	add	r1, sp, #8
    51bc:	4819      	ldr	r0, [pc, #100]	; (5224 <StartFilesystemAndTest+0x16c>)
    51be:	4c27      	ldr	r4, [pc, #156]	; (525c <StartFilesystemAndTest+0x1a4>)
    51c0:	47a0      	blx	r4
    51c2:	2800      	cmp	r0, #0
    51c4:	d008      	beq.n	51d8 <StartFilesystemAndTest+0x120>
			f_close(&file_object);
    51c6:	4817      	ldr	r0, [pc, #92]	; (5224 <StartFilesystemAndTest+0x16c>)
    51c8:	4b1e      	ldr	r3, [pc, #120]	; (5244 <StartFilesystemAndTest+0x18c>)
    51ca:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    51cc:	491e      	ldr	r1, [pc, #120]	; (5248 <StartFilesystemAndTest+0x190>)
    51ce:	2000      	movs	r0, #0
    51d0:	4b17      	ldr	r3, [pc, #92]	; (5230 <StartFilesystemAndTest+0x178>)
    51d2:	4798      	blx	r3
			sdCardPass = false;
    51d4:	2400      	movs	r4, #0
			goto main_end_of_test;
    51d6:	e7a8      	b.n	512a <StartFilesystemAndTest+0x72>
		SerialConsoleWriteString("[OK]\r\n");
    51d8:	480f      	ldr	r0, [pc, #60]	; (5218 <StartFilesystemAndTest+0x160>)
    51da:	4c09      	ldr	r4, [pc, #36]	; (5200 <StartFilesystemAndTest+0x148>)
    51dc:	47a0      	blx	r4
		f_close(&file_object); //Close file
    51de:	4811      	ldr	r0, [pc, #68]	; (5224 <StartFilesystemAndTest+0x16c>)
    51e0:	4b18      	ldr	r3, [pc, #96]	; (5244 <StartFilesystemAndTest+0x18c>)
    51e2:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    51e4:	4819      	ldr	r0, [pc, #100]	; (524c <StartFilesystemAndTest+0x194>)
    51e6:	47a0      	blx	r4
	bool sdCardPass = true;
    51e8:	2401      	movs	r4, #1
    51ea:	e79e      	b.n	512a <StartFilesystemAndTest+0x72>
		SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    51ec:	481c      	ldr	r0, [pc, #112]	; (5260 <StartFilesystemAndTest+0x1a8>)
    51ee:	4b04      	ldr	r3, [pc, #16]	; (5200 <StartFilesystemAndTest+0x148>)
    51f0:	4798      	blx	r3
		sdCardPass = false;
    51f2:	2400      	movs	r4, #0
    51f4:	e79c      	b.n	5130 <StartFilesystemAndTest+0x78>
    51f6:	46c0      	nop			; (mov r8, r8)
    51f8:	0000025d 	.word	0x0000025d
    51fc:	00006530 	.word	0x00006530
    5200:	0000057d 	.word	0x0000057d
    5204:	00006550 	.word	0x00006550
    5208:	20000a24 	.word	0x20000a24
    520c:	00005709 	.word	0x00005709
    5210:	00004b49 	.word	0x00004b49
    5214:	20000cac 	.word	0x20000cac
    5218:	0000657c 	.word	0x0000657c
    521c:	00006584 	.word	0x00006584
    5220:	2000001c 	.word	0x2000001c
    5224:	20000c54 	.word	0x20000c54
    5228:	00004b79 	.word	0x00004b79
    522c:	0000656c 	.word	0x0000656c
    5230:	00000645 	.word	0x00000645
    5234:	00006640 	.word	0x00006640
    5238:	000065a0 	.word	0x000065a0
    523c:	000065c4 	.word	0x000065c4
    5240:	00005009 	.word	0x00005009
    5244:	00004fc5 	.word	0x00004fc5
    5248:	000065d8 	.word	0x000065d8
    524c:	000065e4 	.word	0x000065e4
    5250:	2000000c 	.word	0x2000000c
    5254:	000065fc 	.word	0x000065fc
    5258:	0000661c 	.word	0x0000661c
    525c:	00004d01 	.word	0x00004d01
    5260:	00006650 	.word	0x00006650

00005264 <main>:
{
    5264:	b5b0      	push	{r4, r5, r7, lr}
    5266:	b082      	sub	sp, #8
    5268:	af00      	add	r7, sp, #0
	system_init();
    526a:	4b2a      	ldr	r3, [pc, #168]	; (5314 <main+0xb0>)
    526c:	4798      	blx	r3
	delay_init();
    526e:	4b2a      	ldr	r3, [pc, #168]	; (5318 <main+0xb4>)
    5270:	4798      	blx	r3
	InitializeSerialConsole();
    5272:	4b2a      	ldr	r3, [pc, #168]	; (531c <main+0xb8>)
    5274:	4798      	blx	r3
	cpu_irq_enable();
    5276:	4c2a      	ldr	r4, [pc, #168]	; (5320 <main+0xbc>)
    5278:	2501      	movs	r5, #1
    527a:	7025      	strb	r5, [r4, #0]
    527c:	f3bf 8f5f 	dmb	sy
    5280:	b662      	cpsie	i
	sd_mmc_init();
    5282:	4b28      	ldr	r3, [pc, #160]	; (5324 <main+0xc0>)
    5284:	4798      	blx	r3
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    5286:	2200      	movs	r2, #0
    5288:	703a      	strb	r2, [r7, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    528a:	4b27      	ldr	r3, [pc, #156]	; (5328 <main+0xc4>)
    528c:	685b      	ldr	r3, [r3, #4]
    528e:	06db      	lsls	r3, r3, #27
    5290:	0f1b      	lsrs	r3, r3, #28
    5292:	70bb      	strb	r3, [r7, #2]
	config->disable_cache     = false;
    5294:	70fa      	strb	r2, [r7, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    5296:	713a      	strb	r2, [r7, #4]
******************************************************************************/
static void configure_nvm(void)
{
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    config_nvm.manual_page_write = false;
    5298:	707a      	strb	r2, [r7, #1]
    nvm_set_config(&config_nvm);
    529a:	0038      	movs	r0, r7
    529c:	4b23      	ldr	r3, [pc, #140]	; (532c <main+0xc8>)
    529e:	4798      	blx	r3
	cpu_irq_enable();
    52a0:	7025      	strb	r5, [r4, #0]
    52a2:	f3bf 8f5f 	dmb	sy
    52a6:	b662      	cpsie	i
			PM->APBBMASK.reg |= mask;
    52a8:	4a21      	ldr	r2, [pc, #132]	; (5330 <main+0xcc>)
    52aa:	69d3      	ldr	r3, [r2, #28]
    52ac:	2102      	movs	r1, #2
    52ae:	430b      	orrs	r3, r1
    52b0:	61d3      	str	r3, [r2, #28]
	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    52b2:	4820      	ldr	r0, [pc, #128]	; (5334 <main+0xd0>)
    52b4:	4c20      	ldr	r4, [pc, #128]	; (5338 <main+0xd4>)
    52b6:	47a0      	blx	r4
	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    52b8:	4820      	ldr	r0, [pc, #128]	; (533c <main+0xd8>)
    52ba:	47a0      	blx	r4
	if(StartFilesystemAndTest() == false)
    52bc:	4b20      	ldr	r3, [pc, #128]	; (5340 <main+0xdc>)
    52be:	4798      	blx	r3
    52c0:	2800      	cmp	r0, #0
    52c2:	d019      	beq.n	52f8 <main+0x94>
		SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    52c4:	481f      	ldr	r0, [pc, #124]	; (5344 <main+0xe0>)
    52c6:	4c1c      	ldr	r4, [pc, #112]	; (5338 <main+0xd4>)
    52c8:	47a0      	blx	r4
	SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    52ca:	481f      	ldr	r0, [pc, #124]	; (5348 <main+0xe4>)
    52cc:	47a0      	blx	r4
	delay_cycles_ms(100); //Delay to allow print
    52ce:	2064      	movs	r0, #100	; 0x64
    52d0:	4b1e      	ldr	r3, [pc, #120]	; (534c <main+0xe8>)
    52d2:	4798      	blx	r3
		DeinitializeSerialConsole(); //Deinitializes UART
    52d4:	4b1e      	ldr	r3, [pc, #120]	; (5350 <main+0xec>)
    52d6:	4798      	blx	r3
		sd_mmc_deinit(); //Deinitialize SD CARD
    52d8:	4b1e      	ldr	r3, [pc, #120]	; (5354 <main+0xf0>)
    52da:	4798      	blx	r3
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    52dc:	2390      	movs	r3, #144	; 0x90
    52de:	025b      	lsls	r3, r3, #9
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    52e0:	681a      	ldr	r2, [r3, #0]
    52e2:	f382 8808 	msr	MSP, r2
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    52e6:	4a1c      	ldr	r2, [pc, #112]	; (5358 <main+0xf4>)
    52e8:	6093      	str	r3, [r2, #8]
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    52ea:	4b1c      	ldr	r3, [pc, #112]	; (535c <main+0xf8>)
applicationCodeEntry();
    52ec:	681b      	ldr	r3, [r3, #0]
    52ee:	4798      	blx	r3
}
    52f0:	2000      	movs	r0, #0
    52f2:	46bd      	mov	sp, r7
    52f4:	b002      	add	sp, #8
    52f6:	bdb0      	pop	{r4, r5, r7, pc}
		SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    52f8:	4819      	ldr	r0, [pc, #100]	; (5360 <main+0xfc>)
    52fa:	4b0f      	ldr	r3, [pc, #60]	; (5338 <main+0xd4>)
    52fc:	4798      	blx	r3
		delay_cycles_ms(5000);
    52fe:	4819      	ldr	r0, [pc, #100]	; (5364 <main+0x100>)
    5300:	4b12      	ldr	r3, [pc, #72]	; (534c <main+0xe8>)
    5302:	4798      	blx	r3
  __ASM volatile ("dsb");
    5304:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    5308:	4a17      	ldr	r2, [pc, #92]	; (5368 <main+0x104>)
    530a:	4b13      	ldr	r3, [pc, #76]	; (5358 <main+0xf4>)
    530c:	60da      	str	r2, [r3, #12]
    530e:	f3bf 8f4f 	dsb	sy
    5312:	e7fe      	b.n	5312 <main+0xae>
    5314:	0000337d 	.word	0x0000337d
    5318:	00000115 	.word	0x00000115
    531c:	000003dd 	.word	0x000003dd
    5320:	20000009 	.word	0x20000009
    5324:	00000771 	.word	0x00000771
    5328:	41004000 	.word	0x41004000
    532c:	000001d5 	.word	0x000001d5
    5330:	40000400 	.word	0x40000400
    5334:	00006680 	.word	0x00006680
    5338:	0000057d 	.word	0x0000057d
    533c:	0000669c 	.word	0x0000669c
    5340:	000050b9 	.word	0x000050b9
    5344:	00006710 	.word	0x00006710
    5348:	00006744 	.word	0x00006744
    534c:	00000155 	.word	0x00000155
    5350:	00000545 	.word	0x00000545
    5354:	000011f5 	.word	0x000011f5
    5358:	e000ed00 	.word	0xe000ed00
    535c:	00012004 	.word	0x00012004
    5360:	000066c4 	.word	0x000066c4
    5364:	00001388 	.word	0x00001388
    5368:	05fa0004 	.word	0x05fa0004

0000536c <__udivsi3>:
    536c:	2200      	movs	r2, #0
    536e:	0843      	lsrs	r3, r0, #1
    5370:	428b      	cmp	r3, r1
    5372:	d374      	bcc.n	545e <__udivsi3+0xf2>
    5374:	0903      	lsrs	r3, r0, #4
    5376:	428b      	cmp	r3, r1
    5378:	d35f      	bcc.n	543a <__udivsi3+0xce>
    537a:	0a03      	lsrs	r3, r0, #8
    537c:	428b      	cmp	r3, r1
    537e:	d344      	bcc.n	540a <__udivsi3+0x9e>
    5380:	0b03      	lsrs	r3, r0, #12
    5382:	428b      	cmp	r3, r1
    5384:	d328      	bcc.n	53d8 <__udivsi3+0x6c>
    5386:	0c03      	lsrs	r3, r0, #16
    5388:	428b      	cmp	r3, r1
    538a:	d30d      	bcc.n	53a8 <__udivsi3+0x3c>
    538c:	22ff      	movs	r2, #255	; 0xff
    538e:	0209      	lsls	r1, r1, #8
    5390:	ba12      	rev	r2, r2
    5392:	0c03      	lsrs	r3, r0, #16
    5394:	428b      	cmp	r3, r1
    5396:	d302      	bcc.n	539e <__udivsi3+0x32>
    5398:	1212      	asrs	r2, r2, #8
    539a:	0209      	lsls	r1, r1, #8
    539c:	d065      	beq.n	546a <__udivsi3+0xfe>
    539e:	0b03      	lsrs	r3, r0, #12
    53a0:	428b      	cmp	r3, r1
    53a2:	d319      	bcc.n	53d8 <__udivsi3+0x6c>
    53a4:	e000      	b.n	53a8 <__udivsi3+0x3c>
    53a6:	0a09      	lsrs	r1, r1, #8
    53a8:	0bc3      	lsrs	r3, r0, #15
    53aa:	428b      	cmp	r3, r1
    53ac:	d301      	bcc.n	53b2 <__udivsi3+0x46>
    53ae:	03cb      	lsls	r3, r1, #15
    53b0:	1ac0      	subs	r0, r0, r3
    53b2:	4152      	adcs	r2, r2
    53b4:	0b83      	lsrs	r3, r0, #14
    53b6:	428b      	cmp	r3, r1
    53b8:	d301      	bcc.n	53be <__udivsi3+0x52>
    53ba:	038b      	lsls	r3, r1, #14
    53bc:	1ac0      	subs	r0, r0, r3
    53be:	4152      	adcs	r2, r2
    53c0:	0b43      	lsrs	r3, r0, #13
    53c2:	428b      	cmp	r3, r1
    53c4:	d301      	bcc.n	53ca <__udivsi3+0x5e>
    53c6:	034b      	lsls	r3, r1, #13
    53c8:	1ac0      	subs	r0, r0, r3
    53ca:	4152      	adcs	r2, r2
    53cc:	0b03      	lsrs	r3, r0, #12
    53ce:	428b      	cmp	r3, r1
    53d0:	d301      	bcc.n	53d6 <__udivsi3+0x6a>
    53d2:	030b      	lsls	r3, r1, #12
    53d4:	1ac0      	subs	r0, r0, r3
    53d6:	4152      	adcs	r2, r2
    53d8:	0ac3      	lsrs	r3, r0, #11
    53da:	428b      	cmp	r3, r1
    53dc:	d301      	bcc.n	53e2 <__udivsi3+0x76>
    53de:	02cb      	lsls	r3, r1, #11
    53e0:	1ac0      	subs	r0, r0, r3
    53e2:	4152      	adcs	r2, r2
    53e4:	0a83      	lsrs	r3, r0, #10
    53e6:	428b      	cmp	r3, r1
    53e8:	d301      	bcc.n	53ee <__udivsi3+0x82>
    53ea:	028b      	lsls	r3, r1, #10
    53ec:	1ac0      	subs	r0, r0, r3
    53ee:	4152      	adcs	r2, r2
    53f0:	0a43      	lsrs	r3, r0, #9
    53f2:	428b      	cmp	r3, r1
    53f4:	d301      	bcc.n	53fa <__udivsi3+0x8e>
    53f6:	024b      	lsls	r3, r1, #9
    53f8:	1ac0      	subs	r0, r0, r3
    53fa:	4152      	adcs	r2, r2
    53fc:	0a03      	lsrs	r3, r0, #8
    53fe:	428b      	cmp	r3, r1
    5400:	d301      	bcc.n	5406 <__udivsi3+0x9a>
    5402:	020b      	lsls	r3, r1, #8
    5404:	1ac0      	subs	r0, r0, r3
    5406:	4152      	adcs	r2, r2
    5408:	d2cd      	bcs.n	53a6 <__udivsi3+0x3a>
    540a:	09c3      	lsrs	r3, r0, #7
    540c:	428b      	cmp	r3, r1
    540e:	d301      	bcc.n	5414 <__udivsi3+0xa8>
    5410:	01cb      	lsls	r3, r1, #7
    5412:	1ac0      	subs	r0, r0, r3
    5414:	4152      	adcs	r2, r2
    5416:	0983      	lsrs	r3, r0, #6
    5418:	428b      	cmp	r3, r1
    541a:	d301      	bcc.n	5420 <__udivsi3+0xb4>
    541c:	018b      	lsls	r3, r1, #6
    541e:	1ac0      	subs	r0, r0, r3
    5420:	4152      	adcs	r2, r2
    5422:	0943      	lsrs	r3, r0, #5
    5424:	428b      	cmp	r3, r1
    5426:	d301      	bcc.n	542c <__udivsi3+0xc0>
    5428:	014b      	lsls	r3, r1, #5
    542a:	1ac0      	subs	r0, r0, r3
    542c:	4152      	adcs	r2, r2
    542e:	0903      	lsrs	r3, r0, #4
    5430:	428b      	cmp	r3, r1
    5432:	d301      	bcc.n	5438 <__udivsi3+0xcc>
    5434:	010b      	lsls	r3, r1, #4
    5436:	1ac0      	subs	r0, r0, r3
    5438:	4152      	adcs	r2, r2
    543a:	08c3      	lsrs	r3, r0, #3
    543c:	428b      	cmp	r3, r1
    543e:	d301      	bcc.n	5444 <__udivsi3+0xd8>
    5440:	00cb      	lsls	r3, r1, #3
    5442:	1ac0      	subs	r0, r0, r3
    5444:	4152      	adcs	r2, r2
    5446:	0883      	lsrs	r3, r0, #2
    5448:	428b      	cmp	r3, r1
    544a:	d301      	bcc.n	5450 <__udivsi3+0xe4>
    544c:	008b      	lsls	r3, r1, #2
    544e:	1ac0      	subs	r0, r0, r3
    5450:	4152      	adcs	r2, r2
    5452:	0843      	lsrs	r3, r0, #1
    5454:	428b      	cmp	r3, r1
    5456:	d301      	bcc.n	545c <__udivsi3+0xf0>
    5458:	004b      	lsls	r3, r1, #1
    545a:	1ac0      	subs	r0, r0, r3
    545c:	4152      	adcs	r2, r2
    545e:	1a41      	subs	r1, r0, r1
    5460:	d200      	bcs.n	5464 <__udivsi3+0xf8>
    5462:	4601      	mov	r1, r0
    5464:	4152      	adcs	r2, r2
    5466:	4610      	mov	r0, r2
    5468:	4770      	bx	lr
    546a:	e7ff      	b.n	546c <__udivsi3+0x100>
    546c:	b501      	push	{r0, lr}
    546e:	2000      	movs	r0, #0
    5470:	f000 f8f0 	bl	5654 <__aeabi_idiv0>
    5474:	bd02      	pop	{r1, pc}
    5476:	46c0      	nop			; (mov r8, r8)

00005478 <__aeabi_uidivmod>:
    5478:	2900      	cmp	r1, #0
    547a:	d0f7      	beq.n	546c <__udivsi3+0x100>
    547c:	e776      	b.n	536c <__udivsi3>
    547e:	4770      	bx	lr

00005480 <__divsi3>:
    5480:	4603      	mov	r3, r0
    5482:	430b      	orrs	r3, r1
    5484:	d47f      	bmi.n	5586 <__divsi3+0x106>
    5486:	2200      	movs	r2, #0
    5488:	0843      	lsrs	r3, r0, #1
    548a:	428b      	cmp	r3, r1
    548c:	d374      	bcc.n	5578 <__divsi3+0xf8>
    548e:	0903      	lsrs	r3, r0, #4
    5490:	428b      	cmp	r3, r1
    5492:	d35f      	bcc.n	5554 <__divsi3+0xd4>
    5494:	0a03      	lsrs	r3, r0, #8
    5496:	428b      	cmp	r3, r1
    5498:	d344      	bcc.n	5524 <__divsi3+0xa4>
    549a:	0b03      	lsrs	r3, r0, #12
    549c:	428b      	cmp	r3, r1
    549e:	d328      	bcc.n	54f2 <__divsi3+0x72>
    54a0:	0c03      	lsrs	r3, r0, #16
    54a2:	428b      	cmp	r3, r1
    54a4:	d30d      	bcc.n	54c2 <__divsi3+0x42>
    54a6:	22ff      	movs	r2, #255	; 0xff
    54a8:	0209      	lsls	r1, r1, #8
    54aa:	ba12      	rev	r2, r2
    54ac:	0c03      	lsrs	r3, r0, #16
    54ae:	428b      	cmp	r3, r1
    54b0:	d302      	bcc.n	54b8 <__divsi3+0x38>
    54b2:	1212      	asrs	r2, r2, #8
    54b4:	0209      	lsls	r1, r1, #8
    54b6:	d065      	beq.n	5584 <__divsi3+0x104>
    54b8:	0b03      	lsrs	r3, r0, #12
    54ba:	428b      	cmp	r3, r1
    54bc:	d319      	bcc.n	54f2 <__divsi3+0x72>
    54be:	e000      	b.n	54c2 <__divsi3+0x42>
    54c0:	0a09      	lsrs	r1, r1, #8
    54c2:	0bc3      	lsrs	r3, r0, #15
    54c4:	428b      	cmp	r3, r1
    54c6:	d301      	bcc.n	54cc <__divsi3+0x4c>
    54c8:	03cb      	lsls	r3, r1, #15
    54ca:	1ac0      	subs	r0, r0, r3
    54cc:	4152      	adcs	r2, r2
    54ce:	0b83      	lsrs	r3, r0, #14
    54d0:	428b      	cmp	r3, r1
    54d2:	d301      	bcc.n	54d8 <__divsi3+0x58>
    54d4:	038b      	lsls	r3, r1, #14
    54d6:	1ac0      	subs	r0, r0, r3
    54d8:	4152      	adcs	r2, r2
    54da:	0b43      	lsrs	r3, r0, #13
    54dc:	428b      	cmp	r3, r1
    54de:	d301      	bcc.n	54e4 <__divsi3+0x64>
    54e0:	034b      	lsls	r3, r1, #13
    54e2:	1ac0      	subs	r0, r0, r3
    54e4:	4152      	adcs	r2, r2
    54e6:	0b03      	lsrs	r3, r0, #12
    54e8:	428b      	cmp	r3, r1
    54ea:	d301      	bcc.n	54f0 <__divsi3+0x70>
    54ec:	030b      	lsls	r3, r1, #12
    54ee:	1ac0      	subs	r0, r0, r3
    54f0:	4152      	adcs	r2, r2
    54f2:	0ac3      	lsrs	r3, r0, #11
    54f4:	428b      	cmp	r3, r1
    54f6:	d301      	bcc.n	54fc <__divsi3+0x7c>
    54f8:	02cb      	lsls	r3, r1, #11
    54fa:	1ac0      	subs	r0, r0, r3
    54fc:	4152      	adcs	r2, r2
    54fe:	0a83      	lsrs	r3, r0, #10
    5500:	428b      	cmp	r3, r1
    5502:	d301      	bcc.n	5508 <__divsi3+0x88>
    5504:	028b      	lsls	r3, r1, #10
    5506:	1ac0      	subs	r0, r0, r3
    5508:	4152      	adcs	r2, r2
    550a:	0a43      	lsrs	r3, r0, #9
    550c:	428b      	cmp	r3, r1
    550e:	d301      	bcc.n	5514 <__divsi3+0x94>
    5510:	024b      	lsls	r3, r1, #9
    5512:	1ac0      	subs	r0, r0, r3
    5514:	4152      	adcs	r2, r2
    5516:	0a03      	lsrs	r3, r0, #8
    5518:	428b      	cmp	r3, r1
    551a:	d301      	bcc.n	5520 <__divsi3+0xa0>
    551c:	020b      	lsls	r3, r1, #8
    551e:	1ac0      	subs	r0, r0, r3
    5520:	4152      	adcs	r2, r2
    5522:	d2cd      	bcs.n	54c0 <__divsi3+0x40>
    5524:	09c3      	lsrs	r3, r0, #7
    5526:	428b      	cmp	r3, r1
    5528:	d301      	bcc.n	552e <__divsi3+0xae>
    552a:	01cb      	lsls	r3, r1, #7
    552c:	1ac0      	subs	r0, r0, r3
    552e:	4152      	adcs	r2, r2
    5530:	0983      	lsrs	r3, r0, #6
    5532:	428b      	cmp	r3, r1
    5534:	d301      	bcc.n	553a <__divsi3+0xba>
    5536:	018b      	lsls	r3, r1, #6
    5538:	1ac0      	subs	r0, r0, r3
    553a:	4152      	adcs	r2, r2
    553c:	0943      	lsrs	r3, r0, #5
    553e:	428b      	cmp	r3, r1
    5540:	d301      	bcc.n	5546 <__divsi3+0xc6>
    5542:	014b      	lsls	r3, r1, #5
    5544:	1ac0      	subs	r0, r0, r3
    5546:	4152      	adcs	r2, r2
    5548:	0903      	lsrs	r3, r0, #4
    554a:	428b      	cmp	r3, r1
    554c:	d301      	bcc.n	5552 <__divsi3+0xd2>
    554e:	010b      	lsls	r3, r1, #4
    5550:	1ac0      	subs	r0, r0, r3
    5552:	4152      	adcs	r2, r2
    5554:	08c3      	lsrs	r3, r0, #3
    5556:	428b      	cmp	r3, r1
    5558:	d301      	bcc.n	555e <__divsi3+0xde>
    555a:	00cb      	lsls	r3, r1, #3
    555c:	1ac0      	subs	r0, r0, r3
    555e:	4152      	adcs	r2, r2
    5560:	0883      	lsrs	r3, r0, #2
    5562:	428b      	cmp	r3, r1
    5564:	d301      	bcc.n	556a <__divsi3+0xea>
    5566:	008b      	lsls	r3, r1, #2
    5568:	1ac0      	subs	r0, r0, r3
    556a:	4152      	adcs	r2, r2
    556c:	0843      	lsrs	r3, r0, #1
    556e:	428b      	cmp	r3, r1
    5570:	d301      	bcc.n	5576 <__divsi3+0xf6>
    5572:	004b      	lsls	r3, r1, #1
    5574:	1ac0      	subs	r0, r0, r3
    5576:	4152      	adcs	r2, r2
    5578:	1a41      	subs	r1, r0, r1
    557a:	d200      	bcs.n	557e <__divsi3+0xfe>
    557c:	4601      	mov	r1, r0
    557e:	4152      	adcs	r2, r2
    5580:	4610      	mov	r0, r2
    5582:	4770      	bx	lr
    5584:	e05d      	b.n	5642 <__divsi3+0x1c2>
    5586:	0fca      	lsrs	r2, r1, #31
    5588:	d000      	beq.n	558c <__divsi3+0x10c>
    558a:	4249      	negs	r1, r1
    558c:	1003      	asrs	r3, r0, #32
    558e:	d300      	bcc.n	5592 <__divsi3+0x112>
    5590:	4240      	negs	r0, r0
    5592:	4053      	eors	r3, r2
    5594:	2200      	movs	r2, #0
    5596:	469c      	mov	ip, r3
    5598:	0903      	lsrs	r3, r0, #4
    559a:	428b      	cmp	r3, r1
    559c:	d32d      	bcc.n	55fa <__divsi3+0x17a>
    559e:	0a03      	lsrs	r3, r0, #8
    55a0:	428b      	cmp	r3, r1
    55a2:	d312      	bcc.n	55ca <__divsi3+0x14a>
    55a4:	22fc      	movs	r2, #252	; 0xfc
    55a6:	0189      	lsls	r1, r1, #6
    55a8:	ba12      	rev	r2, r2
    55aa:	0a03      	lsrs	r3, r0, #8
    55ac:	428b      	cmp	r3, r1
    55ae:	d30c      	bcc.n	55ca <__divsi3+0x14a>
    55b0:	0189      	lsls	r1, r1, #6
    55b2:	1192      	asrs	r2, r2, #6
    55b4:	428b      	cmp	r3, r1
    55b6:	d308      	bcc.n	55ca <__divsi3+0x14a>
    55b8:	0189      	lsls	r1, r1, #6
    55ba:	1192      	asrs	r2, r2, #6
    55bc:	428b      	cmp	r3, r1
    55be:	d304      	bcc.n	55ca <__divsi3+0x14a>
    55c0:	0189      	lsls	r1, r1, #6
    55c2:	d03a      	beq.n	563a <__divsi3+0x1ba>
    55c4:	1192      	asrs	r2, r2, #6
    55c6:	e000      	b.n	55ca <__divsi3+0x14a>
    55c8:	0989      	lsrs	r1, r1, #6
    55ca:	09c3      	lsrs	r3, r0, #7
    55cc:	428b      	cmp	r3, r1
    55ce:	d301      	bcc.n	55d4 <__divsi3+0x154>
    55d0:	01cb      	lsls	r3, r1, #7
    55d2:	1ac0      	subs	r0, r0, r3
    55d4:	4152      	adcs	r2, r2
    55d6:	0983      	lsrs	r3, r0, #6
    55d8:	428b      	cmp	r3, r1
    55da:	d301      	bcc.n	55e0 <__divsi3+0x160>
    55dc:	018b      	lsls	r3, r1, #6
    55de:	1ac0      	subs	r0, r0, r3
    55e0:	4152      	adcs	r2, r2
    55e2:	0943      	lsrs	r3, r0, #5
    55e4:	428b      	cmp	r3, r1
    55e6:	d301      	bcc.n	55ec <__divsi3+0x16c>
    55e8:	014b      	lsls	r3, r1, #5
    55ea:	1ac0      	subs	r0, r0, r3
    55ec:	4152      	adcs	r2, r2
    55ee:	0903      	lsrs	r3, r0, #4
    55f0:	428b      	cmp	r3, r1
    55f2:	d301      	bcc.n	55f8 <__divsi3+0x178>
    55f4:	010b      	lsls	r3, r1, #4
    55f6:	1ac0      	subs	r0, r0, r3
    55f8:	4152      	adcs	r2, r2
    55fa:	08c3      	lsrs	r3, r0, #3
    55fc:	428b      	cmp	r3, r1
    55fe:	d301      	bcc.n	5604 <__divsi3+0x184>
    5600:	00cb      	lsls	r3, r1, #3
    5602:	1ac0      	subs	r0, r0, r3
    5604:	4152      	adcs	r2, r2
    5606:	0883      	lsrs	r3, r0, #2
    5608:	428b      	cmp	r3, r1
    560a:	d301      	bcc.n	5610 <__divsi3+0x190>
    560c:	008b      	lsls	r3, r1, #2
    560e:	1ac0      	subs	r0, r0, r3
    5610:	4152      	adcs	r2, r2
    5612:	d2d9      	bcs.n	55c8 <__divsi3+0x148>
    5614:	0843      	lsrs	r3, r0, #1
    5616:	428b      	cmp	r3, r1
    5618:	d301      	bcc.n	561e <__divsi3+0x19e>
    561a:	004b      	lsls	r3, r1, #1
    561c:	1ac0      	subs	r0, r0, r3
    561e:	4152      	adcs	r2, r2
    5620:	1a41      	subs	r1, r0, r1
    5622:	d200      	bcs.n	5626 <__divsi3+0x1a6>
    5624:	4601      	mov	r1, r0
    5626:	4663      	mov	r3, ip
    5628:	4152      	adcs	r2, r2
    562a:	105b      	asrs	r3, r3, #1
    562c:	4610      	mov	r0, r2
    562e:	d301      	bcc.n	5634 <__divsi3+0x1b4>
    5630:	4240      	negs	r0, r0
    5632:	2b00      	cmp	r3, #0
    5634:	d500      	bpl.n	5638 <__divsi3+0x1b8>
    5636:	4249      	negs	r1, r1
    5638:	4770      	bx	lr
    563a:	4663      	mov	r3, ip
    563c:	105b      	asrs	r3, r3, #1
    563e:	d300      	bcc.n	5642 <__divsi3+0x1c2>
    5640:	4240      	negs	r0, r0
    5642:	b501      	push	{r0, lr}
    5644:	2000      	movs	r0, #0
    5646:	f000 f805 	bl	5654 <__aeabi_idiv0>
    564a:	bd02      	pop	{r1, pc}

0000564c <__aeabi_idivmod>:
    564c:	2900      	cmp	r1, #0
    564e:	d0f8      	beq.n	5642 <__divsi3+0x1c2>
    5650:	e716      	b.n	5480 <__divsi3>
    5652:	4770      	bx	lr

00005654 <__aeabi_idiv0>:
    5654:	4770      	bx	lr
    5656:	46c0      	nop			; (mov r8, r8)

00005658 <__aeabi_lmul>:
    5658:	b5f0      	push	{r4, r5, r6, r7, lr}
    565a:	46ce      	mov	lr, r9
    565c:	4647      	mov	r7, r8
    565e:	0415      	lsls	r5, r2, #16
    5660:	0c2d      	lsrs	r5, r5, #16
    5662:	002e      	movs	r6, r5
    5664:	b580      	push	{r7, lr}
    5666:	0407      	lsls	r7, r0, #16
    5668:	0c14      	lsrs	r4, r2, #16
    566a:	0c3f      	lsrs	r7, r7, #16
    566c:	4699      	mov	r9, r3
    566e:	0c03      	lsrs	r3, r0, #16
    5670:	437e      	muls	r6, r7
    5672:	435d      	muls	r5, r3
    5674:	4367      	muls	r7, r4
    5676:	4363      	muls	r3, r4
    5678:	197f      	adds	r7, r7, r5
    567a:	0c34      	lsrs	r4, r6, #16
    567c:	19e4      	adds	r4, r4, r7
    567e:	469c      	mov	ip, r3
    5680:	42a5      	cmp	r5, r4
    5682:	d903      	bls.n	568c <__aeabi_lmul+0x34>
    5684:	2380      	movs	r3, #128	; 0x80
    5686:	025b      	lsls	r3, r3, #9
    5688:	4698      	mov	r8, r3
    568a:	44c4      	add	ip, r8
    568c:	464b      	mov	r3, r9
    568e:	4351      	muls	r1, r2
    5690:	4343      	muls	r3, r0
    5692:	0436      	lsls	r6, r6, #16
    5694:	0c36      	lsrs	r6, r6, #16
    5696:	0c25      	lsrs	r5, r4, #16
    5698:	0424      	lsls	r4, r4, #16
    569a:	4465      	add	r5, ip
    569c:	19a4      	adds	r4, r4, r6
    569e:	1859      	adds	r1, r3, r1
    56a0:	1949      	adds	r1, r1, r5
    56a2:	0020      	movs	r0, r4
    56a4:	bc0c      	pop	{r2, r3}
    56a6:	4690      	mov	r8, r2
    56a8:	4699      	mov	r9, r3
    56aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000056ac <__libc_init_array>:
    56ac:	b570      	push	{r4, r5, r6, lr}
    56ae:	2600      	movs	r6, #0
    56b0:	4d0c      	ldr	r5, [pc, #48]	; (56e4 <__libc_init_array+0x38>)
    56b2:	4c0d      	ldr	r4, [pc, #52]	; (56e8 <__libc_init_array+0x3c>)
    56b4:	1b64      	subs	r4, r4, r5
    56b6:	10a4      	asrs	r4, r4, #2
    56b8:	42a6      	cmp	r6, r4
    56ba:	d109      	bne.n	56d0 <__libc_init_array+0x24>
    56bc:	2600      	movs	r6, #0
    56be:	f001 f881 	bl	67c4 <_init>
    56c2:	4d0a      	ldr	r5, [pc, #40]	; (56ec <__libc_init_array+0x40>)
    56c4:	4c0a      	ldr	r4, [pc, #40]	; (56f0 <__libc_init_array+0x44>)
    56c6:	1b64      	subs	r4, r4, r5
    56c8:	10a4      	asrs	r4, r4, #2
    56ca:	42a6      	cmp	r6, r4
    56cc:	d105      	bne.n	56da <__libc_init_array+0x2e>
    56ce:	bd70      	pop	{r4, r5, r6, pc}
    56d0:	00b3      	lsls	r3, r6, #2
    56d2:	58eb      	ldr	r3, [r5, r3]
    56d4:	4798      	blx	r3
    56d6:	3601      	adds	r6, #1
    56d8:	e7ee      	b.n	56b8 <__libc_init_array+0xc>
    56da:	00b3      	lsls	r3, r6, #2
    56dc:	58eb      	ldr	r3, [r5, r3]
    56de:	4798      	blx	r3
    56e0:	3601      	adds	r6, #1
    56e2:	e7f2      	b.n	56ca <__libc_init_array+0x1e>
    56e4:	000067d0 	.word	0x000067d0
    56e8:	000067d0 	.word	0x000067d0
    56ec:	000067d0 	.word	0x000067d0
    56f0:	000067d4 	.word	0x000067d4

000056f4 <malloc>:
    56f4:	b510      	push	{r4, lr}
    56f6:	4b03      	ldr	r3, [pc, #12]	; (5704 <malloc+0x10>)
    56f8:	0001      	movs	r1, r0
    56fa:	6818      	ldr	r0, [r3, #0]
    56fc:	f000 f856 	bl	57ac <_malloc_r>
    5700:	bd10      	pop	{r4, pc}
    5702:	46c0      	nop			; (mov r8, r8)
    5704:	20000030 	.word	0x20000030

00005708 <memset>:
    5708:	0003      	movs	r3, r0
    570a:	1882      	adds	r2, r0, r2
    570c:	4293      	cmp	r3, r2
    570e:	d100      	bne.n	5712 <memset+0xa>
    5710:	4770      	bx	lr
    5712:	7019      	strb	r1, [r3, #0]
    5714:	3301      	adds	r3, #1
    5716:	e7f9      	b.n	570c <memset+0x4>

00005718 <_free_r>:
    5718:	b570      	push	{r4, r5, r6, lr}
    571a:	0005      	movs	r5, r0
    571c:	2900      	cmp	r1, #0
    571e:	d010      	beq.n	5742 <_free_r+0x2a>
    5720:	1f0c      	subs	r4, r1, #4
    5722:	6823      	ldr	r3, [r4, #0]
    5724:	2b00      	cmp	r3, #0
    5726:	da00      	bge.n	572a <_free_r+0x12>
    5728:	18e4      	adds	r4, r4, r3
    572a:	0028      	movs	r0, r5
    572c:	f000 fb22 	bl	5d74 <__malloc_lock>
    5730:	4a1d      	ldr	r2, [pc, #116]	; (57a8 <_free_r+0x90>)
    5732:	6813      	ldr	r3, [r2, #0]
    5734:	2b00      	cmp	r3, #0
    5736:	d105      	bne.n	5744 <_free_r+0x2c>
    5738:	6063      	str	r3, [r4, #4]
    573a:	6014      	str	r4, [r2, #0]
    573c:	0028      	movs	r0, r5
    573e:	f000 fb1a 	bl	5d76 <__malloc_unlock>
    5742:	bd70      	pop	{r4, r5, r6, pc}
    5744:	42a3      	cmp	r3, r4
    5746:	d909      	bls.n	575c <_free_r+0x44>
    5748:	6821      	ldr	r1, [r4, #0]
    574a:	1860      	adds	r0, r4, r1
    574c:	4283      	cmp	r3, r0
    574e:	d1f3      	bne.n	5738 <_free_r+0x20>
    5750:	6818      	ldr	r0, [r3, #0]
    5752:	685b      	ldr	r3, [r3, #4]
    5754:	1841      	adds	r1, r0, r1
    5756:	6021      	str	r1, [r4, #0]
    5758:	e7ee      	b.n	5738 <_free_r+0x20>
    575a:	0013      	movs	r3, r2
    575c:	685a      	ldr	r2, [r3, #4]
    575e:	2a00      	cmp	r2, #0
    5760:	d001      	beq.n	5766 <_free_r+0x4e>
    5762:	42a2      	cmp	r2, r4
    5764:	d9f9      	bls.n	575a <_free_r+0x42>
    5766:	6819      	ldr	r1, [r3, #0]
    5768:	1858      	adds	r0, r3, r1
    576a:	42a0      	cmp	r0, r4
    576c:	d10b      	bne.n	5786 <_free_r+0x6e>
    576e:	6820      	ldr	r0, [r4, #0]
    5770:	1809      	adds	r1, r1, r0
    5772:	1858      	adds	r0, r3, r1
    5774:	6019      	str	r1, [r3, #0]
    5776:	4282      	cmp	r2, r0
    5778:	d1e0      	bne.n	573c <_free_r+0x24>
    577a:	6810      	ldr	r0, [r2, #0]
    577c:	6852      	ldr	r2, [r2, #4]
    577e:	1841      	adds	r1, r0, r1
    5780:	6019      	str	r1, [r3, #0]
    5782:	605a      	str	r2, [r3, #4]
    5784:	e7da      	b.n	573c <_free_r+0x24>
    5786:	42a0      	cmp	r0, r4
    5788:	d902      	bls.n	5790 <_free_r+0x78>
    578a:	230c      	movs	r3, #12
    578c:	602b      	str	r3, [r5, #0]
    578e:	e7d5      	b.n	573c <_free_r+0x24>
    5790:	6821      	ldr	r1, [r4, #0]
    5792:	1860      	adds	r0, r4, r1
    5794:	4282      	cmp	r2, r0
    5796:	d103      	bne.n	57a0 <_free_r+0x88>
    5798:	6810      	ldr	r0, [r2, #0]
    579a:	6852      	ldr	r2, [r2, #4]
    579c:	1841      	adds	r1, r0, r1
    579e:	6021      	str	r1, [r4, #0]
    57a0:	6062      	str	r2, [r4, #4]
    57a2:	605c      	str	r4, [r3, #4]
    57a4:	e7ca      	b.n	573c <_free_r+0x24>
    57a6:	46c0      	nop			; (mov r8, r8)
    57a8:	200001a4 	.word	0x200001a4

000057ac <_malloc_r>:
    57ac:	2303      	movs	r3, #3
    57ae:	b570      	push	{r4, r5, r6, lr}
    57b0:	1ccd      	adds	r5, r1, #3
    57b2:	439d      	bics	r5, r3
    57b4:	3508      	adds	r5, #8
    57b6:	0006      	movs	r6, r0
    57b8:	2d0c      	cmp	r5, #12
    57ba:	d21e      	bcs.n	57fa <_malloc_r+0x4e>
    57bc:	250c      	movs	r5, #12
    57be:	42a9      	cmp	r1, r5
    57c0:	d81d      	bhi.n	57fe <_malloc_r+0x52>
    57c2:	0030      	movs	r0, r6
    57c4:	f000 fad6 	bl	5d74 <__malloc_lock>
    57c8:	4a25      	ldr	r2, [pc, #148]	; (5860 <_malloc_r+0xb4>)
    57ca:	6814      	ldr	r4, [r2, #0]
    57cc:	0021      	movs	r1, r4
    57ce:	2900      	cmp	r1, #0
    57d0:	d119      	bne.n	5806 <_malloc_r+0x5a>
    57d2:	4c24      	ldr	r4, [pc, #144]	; (5864 <_malloc_r+0xb8>)
    57d4:	6823      	ldr	r3, [r4, #0]
    57d6:	2b00      	cmp	r3, #0
    57d8:	d103      	bne.n	57e2 <_malloc_r+0x36>
    57da:	0030      	movs	r0, r6
    57dc:	f000 f844 	bl	5868 <_sbrk_r>
    57e0:	6020      	str	r0, [r4, #0]
    57e2:	0029      	movs	r1, r5
    57e4:	0030      	movs	r0, r6
    57e6:	f000 f83f 	bl	5868 <_sbrk_r>
    57ea:	1c43      	adds	r3, r0, #1
    57ec:	d12c      	bne.n	5848 <_malloc_r+0x9c>
    57ee:	230c      	movs	r3, #12
    57f0:	0030      	movs	r0, r6
    57f2:	6033      	str	r3, [r6, #0]
    57f4:	f000 fabf 	bl	5d76 <__malloc_unlock>
    57f8:	e003      	b.n	5802 <_malloc_r+0x56>
    57fa:	2d00      	cmp	r5, #0
    57fc:	dadf      	bge.n	57be <_malloc_r+0x12>
    57fe:	230c      	movs	r3, #12
    5800:	6033      	str	r3, [r6, #0]
    5802:	2000      	movs	r0, #0
    5804:	bd70      	pop	{r4, r5, r6, pc}
    5806:	680b      	ldr	r3, [r1, #0]
    5808:	1b5b      	subs	r3, r3, r5
    580a:	d41a      	bmi.n	5842 <_malloc_r+0x96>
    580c:	2b0b      	cmp	r3, #11
    580e:	d903      	bls.n	5818 <_malloc_r+0x6c>
    5810:	600b      	str	r3, [r1, #0]
    5812:	18cc      	adds	r4, r1, r3
    5814:	6025      	str	r5, [r4, #0]
    5816:	e003      	b.n	5820 <_malloc_r+0x74>
    5818:	428c      	cmp	r4, r1
    581a:	d10e      	bne.n	583a <_malloc_r+0x8e>
    581c:	6863      	ldr	r3, [r4, #4]
    581e:	6013      	str	r3, [r2, #0]
    5820:	0030      	movs	r0, r6
    5822:	f000 faa8 	bl	5d76 <__malloc_unlock>
    5826:	0020      	movs	r0, r4
    5828:	2207      	movs	r2, #7
    582a:	300b      	adds	r0, #11
    582c:	1d23      	adds	r3, r4, #4
    582e:	4390      	bics	r0, r2
    5830:	1ac3      	subs	r3, r0, r3
    5832:	d0e7      	beq.n	5804 <_malloc_r+0x58>
    5834:	425a      	negs	r2, r3
    5836:	50e2      	str	r2, [r4, r3]
    5838:	e7e4      	b.n	5804 <_malloc_r+0x58>
    583a:	684b      	ldr	r3, [r1, #4]
    583c:	6063      	str	r3, [r4, #4]
    583e:	000c      	movs	r4, r1
    5840:	e7ee      	b.n	5820 <_malloc_r+0x74>
    5842:	000c      	movs	r4, r1
    5844:	6849      	ldr	r1, [r1, #4]
    5846:	e7c2      	b.n	57ce <_malloc_r+0x22>
    5848:	2303      	movs	r3, #3
    584a:	1cc4      	adds	r4, r0, #3
    584c:	439c      	bics	r4, r3
    584e:	42a0      	cmp	r0, r4
    5850:	d0e0      	beq.n	5814 <_malloc_r+0x68>
    5852:	1a21      	subs	r1, r4, r0
    5854:	0030      	movs	r0, r6
    5856:	f000 f807 	bl	5868 <_sbrk_r>
    585a:	1c43      	adds	r3, r0, #1
    585c:	d1da      	bne.n	5814 <_malloc_r+0x68>
    585e:	e7c6      	b.n	57ee <_malloc_r+0x42>
    5860:	200001a4 	.word	0x200001a4
    5864:	200001a8 	.word	0x200001a8

00005868 <_sbrk_r>:
    5868:	2300      	movs	r3, #0
    586a:	b570      	push	{r4, r5, r6, lr}
    586c:	4c06      	ldr	r4, [pc, #24]	; (5888 <_sbrk_r+0x20>)
    586e:	0005      	movs	r5, r0
    5870:	0008      	movs	r0, r1
    5872:	6023      	str	r3, [r4, #0]
    5874:	f7fd fe56 	bl	3524 <_sbrk>
    5878:	1c43      	adds	r3, r0, #1
    587a:	d103      	bne.n	5884 <_sbrk_r+0x1c>
    587c:	6823      	ldr	r3, [r4, #0]
    587e:	2b00      	cmp	r3, #0
    5880:	d000      	beq.n	5884 <_sbrk_r+0x1c>
    5882:	602b      	str	r3, [r5, #0]
    5884:	bd70      	pop	{r4, r5, r6, pc}
    5886:	46c0      	nop			; (mov r8, r8)
    5888:	20000cb0 	.word	0x20000cb0

0000588c <setbuf>:
    588c:	424a      	negs	r2, r1
    588e:	414a      	adcs	r2, r1
    5890:	2380      	movs	r3, #128	; 0x80
    5892:	b510      	push	{r4, lr}
    5894:	0052      	lsls	r2, r2, #1
    5896:	00db      	lsls	r3, r3, #3
    5898:	f000 f802 	bl	58a0 <setvbuf>
    589c:	bd10      	pop	{r4, pc}
	...

000058a0 <setvbuf>:
    58a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58a2:	001d      	movs	r5, r3
    58a4:	4b4f      	ldr	r3, [pc, #316]	; (59e4 <setvbuf+0x144>)
    58a6:	b085      	sub	sp, #20
    58a8:	681e      	ldr	r6, [r3, #0]
    58aa:	0004      	movs	r4, r0
    58ac:	000f      	movs	r7, r1
    58ae:	9200      	str	r2, [sp, #0]
    58b0:	2e00      	cmp	r6, #0
    58b2:	d005      	beq.n	58c0 <setvbuf+0x20>
    58b4:	69b3      	ldr	r3, [r6, #24]
    58b6:	2b00      	cmp	r3, #0
    58b8:	d102      	bne.n	58c0 <setvbuf+0x20>
    58ba:	0030      	movs	r0, r6
    58bc:	f000 f99c 	bl	5bf8 <__sinit>
    58c0:	4b49      	ldr	r3, [pc, #292]	; (59e8 <setvbuf+0x148>)
    58c2:	429c      	cmp	r4, r3
    58c4:	d150      	bne.n	5968 <setvbuf+0xc8>
    58c6:	6874      	ldr	r4, [r6, #4]
    58c8:	9b00      	ldr	r3, [sp, #0]
    58ca:	2b02      	cmp	r3, #2
    58cc:	d005      	beq.n	58da <setvbuf+0x3a>
    58ce:	2b01      	cmp	r3, #1
    58d0:	d900      	bls.n	58d4 <setvbuf+0x34>
    58d2:	e084      	b.n	59de <setvbuf+0x13e>
    58d4:	2d00      	cmp	r5, #0
    58d6:	da00      	bge.n	58da <setvbuf+0x3a>
    58d8:	e081      	b.n	59de <setvbuf+0x13e>
    58da:	0021      	movs	r1, r4
    58dc:	0030      	movs	r0, r6
    58de:	f000 f91d 	bl	5b1c <_fflush_r>
    58e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    58e4:	2900      	cmp	r1, #0
    58e6:	d008      	beq.n	58fa <setvbuf+0x5a>
    58e8:	0023      	movs	r3, r4
    58ea:	3344      	adds	r3, #68	; 0x44
    58ec:	4299      	cmp	r1, r3
    58ee:	d002      	beq.n	58f6 <setvbuf+0x56>
    58f0:	0030      	movs	r0, r6
    58f2:	f7ff ff11 	bl	5718 <_free_r>
    58f6:	2300      	movs	r3, #0
    58f8:	6363      	str	r3, [r4, #52]	; 0x34
    58fa:	2300      	movs	r3, #0
    58fc:	61a3      	str	r3, [r4, #24]
    58fe:	6063      	str	r3, [r4, #4]
    5900:	89a3      	ldrh	r3, [r4, #12]
    5902:	061b      	lsls	r3, r3, #24
    5904:	d503      	bpl.n	590e <setvbuf+0x6e>
    5906:	6921      	ldr	r1, [r4, #16]
    5908:	0030      	movs	r0, r6
    590a:	f7ff ff05 	bl	5718 <_free_r>
    590e:	89a3      	ldrh	r3, [r4, #12]
    5910:	4a36      	ldr	r2, [pc, #216]	; (59ec <setvbuf+0x14c>)
    5912:	4013      	ands	r3, r2
    5914:	81a3      	strh	r3, [r4, #12]
    5916:	9b00      	ldr	r3, [sp, #0]
    5918:	2b02      	cmp	r3, #2
    591a:	d05a      	beq.n	59d2 <setvbuf+0x132>
    591c:	ab03      	add	r3, sp, #12
    591e:	aa02      	add	r2, sp, #8
    5920:	0021      	movs	r1, r4
    5922:	0030      	movs	r0, r6
    5924:	f000 f9fe 	bl	5d24 <__swhatbuf_r>
    5928:	89a3      	ldrh	r3, [r4, #12]
    592a:	4318      	orrs	r0, r3
    592c:	81a0      	strh	r0, [r4, #12]
    592e:	2d00      	cmp	r5, #0
    5930:	d124      	bne.n	597c <setvbuf+0xdc>
    5932:	9d02      	ldr	r5, [sp, #8]
    5934:	0028      	movs	r0, r5
    5936:	f7ff fedd 	bl	56f4 <malloc>
    593a:	9501      	str	r5, [sp, #4]
    593c:	1e07      	subs	r7, r0, #0
    593e:	d142      	bne.n	59c6 <setvbuf+0x126>
    5940:	9b02      	ldr	r3, [sp, #8]
    5942:	9301      	str	r3, [sp, #4]
    5944:	42ab      	cmp	r3, r5
    5946:	d139      	bne.n	59bc <setvbuf+0x11c>
    5948:	2001      	movs	r0, #1
    594a:	4240      	negs	r0, r0
    594c:	2302      	movs	r3, #2
    594e:	89a2      	ldrh	r2, [r4, #12]
    5950:	4313      	orrs	r3, r2
    5952:	81a3      	strh	r3, [r4, #12]
    5954:	2300      	movs	r3, #0
    5956:	60a3      	str	r3, [r4, #8]
    5958:	0023      	movs	r3, r4
    595a:	3347      	adds	r3, #71	; 0x47
    595c:	6023      	str	r3, [r4, #0]
    595e:	6123      	str	r3, [r4, #16]
    5960:	2301      	movs	r3, #1
    5962:	6163      	str	r3, [r4, #20]
    5964:	b005      	add	sp, #20
    5966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5968:	4b21      	ldr	r3, [pc, #132]	; (59f0 <setvbuf+0x150>)
    596a:	429c      	cmp	r4, r3
    596c:	d101      	bne.n	5972 <setvbuf+0xd2>
    596e:	68b4      	ldr	r4, [r6, #8]
    5970:	e7aa      	b.n	58c8 <setvbuf+0x28>
    5972:	4b20      	ldr	r3, [pc, #128]	; (59f4 <setvbuf+0x154>)
    5974:	429c      	cmp	r4, r3
    5976:	d1a7      	bne.n	58c8 <setvbuf+0x28>
    5978:	68f4      	ldr	r4, [r6, #12]
    597a:	e7a5      	b.n	58c8 <setvbuf+0x28>
    597c:	2f00      	cmp	r7, #0
    597e:	d0d9      	beq.n	5934 <setvbuf+0x94>
    5980:	69b3      	ldr	r3, [r6, #24]
    5982:	2b00      	cmp	r3, #0
    5984:	d102      	bne.n	598c <setvbuf+0xec>
    5986:	0030      	movs	r0, r6
    5988:	f000 f936 	bl	5bf8 <__sinit>
    598c:	9b00      	ldr	r3, [sp, #0]
    598e:	2b01      	cmp	r3, #1
    5990:	d103      	bne.n	599a <setvbuf+0xfa>
    5992:	89a3      	ldrh	r3, [r4, #12]
    5994:	9a00      	ldr	r2, [sp, #0]
    5996:	431a      	orrs	r2, r3
    5998:	81a2      	strh	r2, [r4, #12]
    599a:	2008      	movs	r0, #8
    599c:	89a3      	ldrh	r3, [r4, #12]
    599e:	6027      	str	r7, [r4, #0]
    59a0:	6127      	str	r7, [r4, #16]
    59a2:	6165      	str	r5, [r4, #20]
    59a4:	4018      	ands	r0, r3
    59a6:	d018      	beq.n	59da <setvbuf+0x13a>
    59a8:	2001      	movs	r0, #1
    59aa:	4018      	ands	r0, r3
    59ac:	2300      	movs	r3, #0
    59ae:	4298      	cmp	r0, r3
    59b0:	d011      	beq.n	59d6 <setvbuf+0x136>
    59b2:	426d      	negs	r5, r5
    59b4:	60a3      	str	r3, [r4, #8]
    59b6:	61a5      	str	r5, [r4, #24]
    59b8:	0018      	movs	r0, r3
    59ba:	e7d3      	b.n	5964 <setvbuf+0xc4>
    59bc:	9801      	ldr	r0, [sp, #4]
    59be:	f7ff fe99 	bl	56f4 <malloc>
    59c2:	1e07      	subs	r7, r0, #0
    59c4:	d0c0      	beq.n	5948 <setvbuf+0xa8>
    59c6:	2380      	movs	r3, #128	; 0x80
    59c8:	89a2      	ldrh	r2, [r4, #12]
    59ca:	9d01      	ldr	r5, [sp, #4]
    59cc:	4313      	orrs	r3, r2
    59ce:	81a3      	strh	r3, [r4, #12]
    59d0:	e7d6      	b.n	5980 <setvbuf+0xe0>
    59d2:	2000      	movs	r0, #0
    59d4:	e7ba      	b.n	594c <setvbuf+0xac>
    59d6:	60a5      	str	r5, [r4, #8]
    59d8:	e7c4      	b.n	5964 <setvbuf+0xc4>
    59da:	60a0      	str	r0, [r4, #8]
    59dc:	e7c2      	b.n	5964 <setvbuf+0xc4>
    59de:	2001      	movs	r0, #1
    59e0:	4240      	negs	r0, r0
    59e2:	e7bf      	b.n	5964 <setvbuf+0xc4>
    59e4:	20000030 	.word	0x20000030
    59e8:	00006784 	.word	0x00006784
    59ec:	fffff35c 	.word	0xfffff35c
    59f0:	000067a4 	.word	0x000067a4
    59f4:	00006764 	.word	0x00006764

000059f8 <strlen>:
    59f8:	2300      	movs	r3, #0
    59fa:	5cc2      	ldrb	r2, [r0, r3]
    59fc:	3301      	adds	r3, #1
    59fe:	2a00      	cmp	r2, #0
    5a00:	d1fb      	bne.n	59fa <strlen+0x2>
    5a02:	1e58      	subs	r0, r3, #1
    5a04:	4770      	bx	lr
	...

00005a08 <__sflush_r>:
    5a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5a0a:	898a      	ldrh	r2, [r1, #12]
    5a0c:	0005      	movs	r5, r0
    5a0e:	000c      	movs	r4, r1
    5a10:	0713      	lsls	r3, r2, #28
    5a12:	d460      	bmi.n	5ad6 <__sflush_r+0xce>
    5a14:	684b      	ldr	r3, [r1, #4]
    5a16:	2b00      	cmp	r3, #0
    5a18:	dc04      	bgt.n	5a24 <__sflush_r+0x1c>
    5a1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5a1c:	2b00      	cmp	r3, #0
    5a1e:	dc01      	bgt.n	5a24 <__sflush_r+0x1c>
    5a20:	2000      	movs	r0, #0
    5a22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5a24:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5a26:	2f00      	cmp	r7, #0
    5a28:	d0fa      	beq.n	5a20 <__sflush_r+0x18>
    5a2a:	2300      	movs	r3, #0
    5a2c:	682e      	ldr	r6, [r5, #0]
    5a2e:	602b      	str	r3, [r5, #0]
    5a30:	2380      	movs	r3, #128	; 0x80
    5a32:	015b      	lsls	r3, r3, #5
    5a34:	401a      	ands	r2, r3
    5a36:	d034      	beq.n	5aa2 <__sflush_r+0x9a>
    5a38:	6d60      	ldr	r0, [r4, #84]	; 0x54
    5a3a:	89a3      	ldrh	r3, [r4, #12]
    5a3c:	075b      	lsls	r3, r3, #29
    5a3e:	d506      	bpl.n	5a4e <__sflush_r+0x46>
    5a40:	6863      	ldr	r3, [r4, #4]
    5a42:	1ac0      	subs	r0, r0, r3
    5a44:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5a46:	2b00      	cmp	r3, #0
    5a48:	d001      	beq.n	5a4e <__sflush_r+0x46>
    5a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5a4c:	1ac0      	subs	r0, r0, r3
    5a4e:	0002      	movs	r2, r0
    5a50:	6a21      	ldr	r1, [r4, #32]
    5a52:	2300      	movs	r3, #0
    5a54:	0028      	movs	r0, r5
    5a56:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5a58:	47b8      	blx	r7
    5a5a:	89a1      	ldrh	r1, [r4, #12]
    5a5c:	1c43      	adds	r3, r0, #1
    5a5e:	d106      	bne.n	5a6e <__sflush_r+0x66>
    5a60:	682b      	ldr	r3, [r5, #0]
    5a62:	2b1d      	cmp	r3, #29
    5a64:	d831      	bhi.n	5aca <__sflush_r+0xc2>
    5a66:	4a2c      	ldr	r2, [pc, #176]	; (5b18 <__sflush_r+0x110>)
    5a68:	40da      	lsrs	r2, r3
    5a6a:	07d3      	lsls	r3, r2, #31
    5a6c:	d52d      	bpl.n	5aca <__sflush_r+0xc2>
    5a6e:	2300      	movs	r3, #0
    5a70:	6063      	str	r3, [r4, #4]
    5a72:	6923      	ldr	r3, [r4, #16]
    5a74:	6023      	str	r3, [r4, #0]
    5a76:	04cb      	lsls	r3, r1, #19
    5a78:	d505      	bpl.n	5a86 <__sflush_r+0x7e>
    5a7a:	1c43      	adds	r3, r0, #1
    5a7c:	d102      	bne.n	5a84 <__sflush_r+0x7c>
    5a7e:	682b      	ldr	r3, [r5, #0]
    5a80:	2b00      	cmp	r3, #0
    5a82:	d100      	bne.n	5a86 <__sflush_r+0x7e>
    5a84:	6560      	str	r0, [r4, #84]	; 0x54
    5a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5a88:	602e      	str	r6, [r5, #0]
    5a8a:	2900      	cmp	r1, #0
    5a8c:	d0c8      	beq.n	5a20 <__sflush_r+0x18>
    5a8e:	0023      	movs	r3, r4
    5a90:	3344      	adds	r3, #68	; 0x44
    5a92:	4299      	cmp	r1, r3
    5a94:	d002      	beq.n	5a9c <__sflush_r+0x94>
    5a96:	0028      	movs	r0, r5
    5a98:	f7ff fe3e 	bl	5718 <_free_r>
    5a9c:	2000      	movs	r0, #0
    5a9e:	6360      	str	r0, [r4, #52]	; 0x34
    5aa0:	e7bf      	b.n	5a22 <__sflush_r+0x1a>
    5aa2:	2301      	movs	r3, #1
    5aa4:	6a21      	ldr	r1, [r4, #32]
    5aa6:	0028      	movs	r0, r5
    5aa8:	47b8      	blx	r7
    5aaa:	1c43      	adds	r3, r0, #1
    5aac:	d1c5      	bne.n	5a3a <__sflush_r+0x32>
    5aae:	682b      	ldr	r3, [r5, #0]
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	d0c2      	beq.n	5a3a <__sflush_r+0x32>
    5ab4:	2b1d      	cmp	r3, #29
    5ab6:	d001      	beq.n	5abc <__sflush_r+0xb4>
    5ab8:	2b16      	cmp	r3, #22
    5aba:	d101      	bne.n	5ac0 <__sflush_r+0xb8>
    5abc:	602e      	str	r6, [r5, #0]
    5abe:	e7af      	b.n	5a20 <__sflush_r+0x18>
    5ac0:	2340      	movs	r3, #64	; 0x40
    5ac2:	89a2      	ldrh	r2, [r4, #12]
    5ac4:	4313      	orrs	r3, r2
    5ac6:	81a3      	strh	r3, [r4, #12]
    5ac8:	e7ab      	b.n	5a22 <__sflush_r+0x1a>
    5aca:	2340      	movs	r3, #64	; 0x40
    5acc:	430b      	orrs	r3, r1
    5ace:	2001      	movs	r0, #1
    5ad0:	81a3      	strh	r3, [r4, #12]
    5ad2:	4240      	negs	r0, r0
    5ad4:	e7a5      	b.n	5a22 <__sflush_r+0x1a>
    5ad6:	690f      	ldr	r7, [r1, #16]
    5ad8:	2f00      	cmp	r7, #0
    5ada:	d0a1      	beq.n	5a20 <__sflush_r+0x18>
    5adc:	680b      	ldr	r3, [r1, #0]
    5ade:	600f      	str	r7, [r1, #0]
    5ae0:	1bdb      	subs	r3, r3, r7
    5ae2:	9301      	str	r3, [sp, #4]
    5ae4:	2300      	movs	r3, #0
    5ae6:	0792      	lsls	r2, r2, #30
    5ae8:	d100      	bne.n	5aec <__sflush_r+0xe4>
    5aea:	694b      	ldr	r3, [r1, #20]
    5aec:	60a3      	str	r3, [r4, #8]
    5aee:	9b01      	ldr	r3, [sp, #4]
    5af0:	2b00      	cmp	r3, #0
    5af2:	dc00      	bgt.n	5af6 <__sflush_r+0xee>
    5af4:	e794      	b.n	5a20 <__sflush_r+0x18>
    5af6:	9b01      	ldr	r3, [sp, #4]
    5af8:	003a      	movs	r2, r7
    5afa:	6a21      	ldr	r1, [r4, #32]
    5afc:	0028      	movs	r0, r5
    5afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5b00:	47b0      	blx	r6
    5b02:	2800      	cmp	r0, #0
    5b04:	dc03      	bgt.n	5b0e <__sflush_r+0x106>
    5b06:	2340      	movs	r3, #64	; 0x40
    5b08:	89a2      	ldrh	r2, [r4, #12]
    5b0a:	4313      	orrs	r3, r2
    5b0c:	e7df      	b.n	5ace <__sflush_r+0xc6>
    5b0e:	9b01      	ldr	r3, [sp, #4]
    5b10:	183f      	adds	r7, r7, r0
    5b12:	1a1b      	subs	r3, r3, r0
    5b14:	9301      	str	r3, [sp, #4]
    5b16:	e7ea      	b.n	5aee <__sflush_r+0xe6>
    5b18:	20400001 	.word	0x20400001

00005b1c <_fflush_r>:
    5b1c:	690b      	ldr	r3, [r1, #16]
    5b1e:	b570      	push	{r4, r5, r6, lr}
    5b20:	0005      	movs	r5, r0
    5b22:	000c      	movs	r4, r1
    5b24:	2b00      	cmp	r3, #0
    5b26:	d101      	bne.n	5b2c <_fflush_r+0x10>
    5b28:	2000      	movs	r0, #0
    5b2a:	bd70      	pop	{r4, r5, r6, pc}
    5b2c:	2800      	cmp	r0, #0
    5b2e:	d004      	beq.n	5b3a <_fflush_r+0x1e>
    5b30:	6983      	ldr	r3, [r0, #24]
    5b32:	2b00      	cmp	r3, #0
    5b34:	d101      	bne.n	5b3a <_fflush_r+0x1e>
    5b36:	f000 f85f 	bl	5bf8 <__sinit>
    5b3a:	4b0b      	ldr	r3, [pc, #44]	; (5b68 <_fflush_r+0x4c>)
    5b3c:	429c      	cmp	r4, r3
    5b3e:	d109      	bne.n	5b54 <_fflush_r+0x38>
    5b40:	686c      	ldr	r4, [r5, #4]
    5b42:	220c      	movs	r2, #12
    5b44:	5ea3      	ldrsh	r3, [r4, r2]
    5b46:	2b00      	cmp	r3, #0
    5b48:	d0ee      	beq.n	5b28 <_fflush_r+0xc>
    5b4a:	0021      	movs	r1, r4
    5b4c:	0028      	movs	r0, r5
    5b4e:	f7ff ff5b 	bl	5a08 <__sflush_r>
    5b52:	e7ea      	b.n	5b2a <_fflush_r+0xe>
    5b54:	4b05      	ldr	r3, [pc, #20]	; (5b6c <_fflush_r+0x50>)
    5b56:	429c      	cmp	r4, r3
    5b58:	d101      	bne.n	5b5e <_fflush_r+0x42>
    5b5a:	68ac      	ldr	r4, [r5, #8]
    5b5c:	e7f1      	b.n	5b42 <_fflush_r+0x26>
    5b5e:	4b04      	ldr	r3, [pc, #16]	; (5b70 <_fflush_r+0x54>)
    5b60:	429c      	cmp	r4, r3
    5b62:	d1ee      	bne.n	5b42 <_fflush_r+0x26>
    5b64:	68ec      	ldr	r4, [r5, #12]
    5b66:	e7ec      	b.n	5b42 <_fflush_r+0x26>
    5b68:	00006784 	.word	0x00006784
    5b6c:	000067a4 	.word	0x000067a4
    5b70:	00006764 	.word	0x00006764

00005b74 <_cleanup_r>:
    5b74:	b510      	push	{r4, lr}
    5b76:	4902      	ldr	r1, [pc, #8]	; (5b80 <_cleanup_r+0xc>)
    5b78:	f000 f8b2 	bl	5ce0 <_fwalk_reent>
    5b7c:	bd10      	pop	{r4, pc}
    5b7e:	46c0      	nop			; (mov r8, r8)
    5b80:	00005b1d 	.word	0x00005b1d

00005b84 <std.isra.0>:
    5b84:	2300      	movs	r3, #0
    5b86:	b510      	push	{r4, lr}
    5b88:	0004      	movs	r4, r0
    5b8a:	6003      	str	r3, [r0, #0]
    5b8c:	6043      	str	r3, [r0, #4]
    5b8e:	6083      	str	r3, [r0, #8]
    5b90:	8181      	strh	r1, [r0, #12]
    5b92:	6643      	str	r3, [r0, #100]	; 0x64
    5b94:	81c2      	strh	r2, [r0, #14]
    5b96:	6103      	str	r3, [r0, #16]
    5b98:	6143      	str	r3, [r0, #20]
    5b9a:	6183      	str	r3, [r0, #24]
    5b9c:	0019      	movs	r1, r3
    5b9e:	2208      	movs	r2, #8
    5ba0:	305c      	adds	r0, #92	; 0x5c
    5ba2:	f7ff fdb1 	bl	5708 <memset>
    5ba6:	4b05      	ldr	r3, [pc, #20]	; (5bbc <std.isra.0+0x38>)
    5ba8:	6224      	str	r4, [r4, #32]
    5baa:	6263      	str	r3, [r4, #36]	; 0x24
    5bac:	4b04      	ldr	r3, [pc, #16]	; (5bc0 <std.isra.0+0x3c>)
    5bae:	62a3      	str	r3, [r4, #40]	; 0x28
    5bb0:	4b04      	ldr	r3, [pc, #16]	; (5bc4 <std.isra.0+0x40>)
    5bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
    5bb4:	4b04      	ldr	r3, [pc, #16]	; (5bc8 <std.isra.0+0x44>)
    5bb6:	6323      	str	r3, [r4, #48]	; 0x30
    5bb8:	bd10      	pop	{r4, pc}
    5bba:	46c0      	nop			; (mov r8, r8)
    5bbc:	00005d79 	.word	0x00005d79
    5bc0:	00005da1 	.word	0x00005da1
    5bc4:	00005dd9 	.word	0x00005dd9
    5bc8:	00005e05 	.word	0x00005e05

00005bcc <__sfmoreglue>:
    5bcc:	b570      	push	{r4, r5, r6, lr}
    5bce:	2568      	movs	r5, #104	; 0x68
    5bd0:	1e4a      	subs	r2, r1, #1
    5bd2:	4355      	muls	r5, r2
    5bd4:	000e      	movs	r6, r1
    5bd6:	0029      	movs	r1, r5
    5bd8:	3174      	adds	r1, #116	; 0x74
    5bda:	f7ff fde7 	bl	57ac <_malloc_r>
    5bde:	1e04      	subs	r4, r0, #0
    5be0:	d008      	beq.n	5bf4 <__sfmoreglue+0x28>
    5be2:	2100      	movs	r1, #0
    5be4:	002a      	movs	r2, r5
    5be6:	6001      	str	r1, [r0, #0]
    5be8:	6046      	str	r6, [r0, #4]
    5bea:	300c      	adds	r0, #12
    5bec:	60a0      	str	r0, [r4, #8]
    5bee:	3268      	adds	r2, #104	; 0x68
    5bf0:	f7ff fd8a 	bl	5708 <memset>
    5bf4:	0020      	movs	r0, r4
    5bf6:	bd70      	pop	{r4, r5, r6, pc}

00005bf8 <__sinit>:
    5bf8:	6983      	ldr	r3, [r0, #24]
    5bfa:	b513      	push	{r0, r1, r4, lr}
    5bfc:	0004      	movs	r4, r0
    5bfe:	2b00      	cmp	r3, #0
    5c00:	d128      	bne.n	5c54 <__sinit+0x5c>
    5c02:	6483      	str	r3, [r0, #72]	; 0x48
    5c04:	64c3      	str	r3, [r0, #76]	; 0x4c
    5c06:	6503      	str	r3, [r0, #80]	; 0x50
    5c08:	4b13      	ldr	r3, [pc, #76]	; (5c58 <__sinit+0x60>)
    5c0a:	4a14      	ldr	r2, [pc, #80]	; (5c5c <__sinit+0x64>)
    5c0c:	681b      	ldr	r3, [r3, #0]
    5c0e:	6282      	str	r2, [r0, #40]	; 0x28
    5c10:	9301      	str	r3, [sp, #4]
    5c12:	4298      	cmp	r0, r3
    5c14:	d101      	bne.n	5c1a <__sinit+0x22>
    5c16:	2301      	movs	r3, #1
    5c18:	6183      	str	r3, [r0, #24]
    5c1a:	0020      	movs	r0, r4
    5c1c:	f000 f820 	bl	5c60 <__sfp>
    5c20:	6060      	str	r0, [r4, #4]
    5c22:	0020      	movs	r0, r4
    5c24:	f000 f81c 	bl	5c60 <__sfp>
    5c28:	60a0      	str	r0, [r4, #8]
    5c2a:	0020      	movs	r0, r4
    5c2c:	f000 f818 	bl	5c60 <__sfp>
    5c30:	2200      	movs	r2, #0
    5c32:	60e0      	str	r0, [r4, #12]
    5c34:	2104      	movs	r1, #4
    5c36:	6860      	ldr	r0, [r4, #4]
    5c38:	f7ff ffa4 	bl	5b84 <std.isra.0>
    5c3c:	2201      	movs	r2, #1
    5c3e:	2109      	movs	r1, #9
    5c40:	68a0      	ldr	r0, [r4, #8]
    5c42:	f7ff ff9f 	bl	5b84 <std.isra.0>
    5c46:	2202      	movs	r2, #2
    5c48:	2112      	movs	r1, #18
    5c4a:	68e0      	ldr	r0, [r4, #12]
    5c4c:	f7ff ff9a 	bl	5b84 <std.isra.0>
    5c50:	2301      	movs	r3, #1
    5c52:	61a3      	str	r3, [r4, #24]
    5c54:	bd13      	pop	{r0, r1, r4, pc}
    5c56:	46c0      	nop			; (mov r8, r8)
    5c58:	00006760 	.word	0x00006760
    5c5c:	00005b75 	.word	0x00005b75

00005c60 <__sfp>:
    5c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c62:	4b1e      	ldr	r3, [pc, #120]	; (5cdc <__sfp+0x7c>)
    5c64:	0007      	movs	r7, r0
    5c66:	681e      	ldr	r6, [r3, #0]
    5c68:	69b3      	ldr	r3, [r6, #24]
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d102      	bne.n	5c74 <__sfp+0x14>
    5c6e:	0030      	movs	r0, r6
    5c70:	f7ff ffc2 	bl	5bf8 <__sinit>
    5c74:	3648      	adds	r6, #72	; 0x48
    5c76:	68b4      	ldr	r4, [r6, #8]
    5c78:	6873      	ldr	r3, [r6, #4]
    5c7a:	3b01      	subs	r3, #1
    5c7c:	d504      	bpl.n	5c88 <__sfp+0x28>
    5c7e:	6833      	ldr	r3, [r6, #0]
    5c80:	2b00      	cmp	r3, #0
    5c82:	d007      	beq.n	5c94 <__sfp+0x34>
    5c84:	6836      	ldr	r6, [r6, #0]
    5c86:	e7f6      	b.n	5c76 <__sfp+0x16>
    5c88:	220c      	movs	r2, #12
    5c8a:	5ea5      	ldrsh	r5, [r4, r2]
    5c8c:	2d00      	cmp	r5, #0
    5c8e:	d00d      	beq.n	5cac <__sfp+0x4c>
    5c90:	3468      	adds	r4, #104	; 0x68
    5c92:	e7f2      	b.n	5c7a <__sfp+0x1a>
    5c94:	2104      	movs	r1, #4
    5c96:	0038      	movs	r0, r7
    5c98:	f7ff ff98 	bl	5bcc <__sfmoreglue>
    5c9c:	6030      	str	r0, [r6, #0]
    5c9e:	2800      	cmp	r0, #0
    5ca0:	d1f0      	bne.n	5c84 <__sfp+0x24>
    5ca2:	230c      	movs	r3, #12
    5ca4:	0004      	movs	r4, r0
    5ca6:	603b      	str	r3, [r7, #0]
    5ca8:	0020      	movs	r0, r4
    5caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5cac:	2301      	movs	r3, #1
    5cae:	0020      	movs	r0, r4
    5cb0:	425b      	negs	r3, r3
    5cb2:	81e3      	strh	r3, [r4, #14]
    5cb4:	3302      	adds	r3, #2
    5cb6:	81a3      	strh	r3, [r4, #12]
    5cb8:	6665      	str	r5, [r4, #100]	; 0x64
    5cba:	6025      	str	r5, [r4, #0]
    5cbc:	60a5      	str	r5, [r4, #8]
    5cbe:	6065      	str	r5, [r4, #4]
    5cc0:	6125      	str	r5, [r4, #16]
    5cc2:	6165      	str	r5, [r4, #20]
    5cc4:	61a5      	str	r5, [r4, #24]
    5cc6:	2208      	movs	r2, #8
    5cc8:	0029      	movs	r1, r5
    5cca:	305c      	adds	r0, #92	; 0x5c
    5ccc:	f7ff fd1c 	bl	5708 <memset>
    5cd0:	6365      	str	r5, [r4, #52]	; 0x34
    5cd2:	63a5      	str	r5, [r4, #56]	; 0x38
    5cd4:	64a5      	str	r5, [r4, #72]	; 0x48
    5cd6:	64e5      	str	r5, [r4, #76]	; 0x4c
    5cd8:	e7e6      	b.n	5ca8 <__sfp+0x48>
    5cda:	46c0      	nop			; (mov r8, r8)
    5cdc:	00006760 	.word	0x00006760

00005ce0 <_fwalk_reent>:
    5ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5ce2:	0004      	movs	r4, r0
    5ce4:	0007      	movs	r7, r0
    5ce6:	2600      	movs	r6, #0
    5ce8:	9101      	str	r1, [sp, #4]
    5cea:	3448      	adds	r4, #72	; 0x48
    5cec:	2c00      	cmp	r4, #0
    5cee:	d101      	bne.n	5cf4 <_fwalk_reent+0x14>
    5cf0:	0030      	movs	r0, r6
    5cf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5cf4:	6863      	ldr	r3, [r4, #4]
    5cf6:	68a5      	ldr	r5, [r4, #8]
    5cf8:	9300      	str	r3, [sp, #0]
    5cfa:	9b00      	ldr	r3, [sp, #0]
    5cfc:	3b01      	subs	r3, #1
    5cfe:	9300      	str	r3, [sp, #0]
    5d00:	d501      	bpl.n	5d06 <_fwalk_reent+0x26>
    5d02:	6824      	ldr	r4, [r4, #0]
    5d04:	e7f2      	b.n	5cec <_fwalk_reent+0xc>
    5d06:	89ab      	ldrh	r3, [r5, #12]
    5d08:	2b01      	cmp	r3, #1
    5d0a:	d908      	bls.n	5d1e <_fwalk_reent+0x3e>
    5d0c:	220e      	movs	r2, #14
    5d0e:	5eab      	ldrsh	r3, [r5, r2]
    5d10:	3301      	adds	r3, #1
    5d12:	d004      	beq.n	5d1e <_fwalk_reent+0x3e>
    5d14:	0029      	movs	r1, r5
    5d16:	0038      	movs	r0, r7
    5d18:	9b01      	ldr	r3, [sp, #4]
    5d1a:	4798      	blx	r3
    5d1c:	4306      	orrs	r6, r0
    5d1e:	3568      	adds	r5, #104	; 0x68
    5d20:	e7eb      	b.n	5cfa <_fwalk_reent+0x1a>
	...

00005d24 <__swhatbuf_r>:
    5d24:	b570      	push	{r4, r5, r6, lr}
    5d26:	000e      	movs	r6, r1
    5d28:	001d      	movs	r5, r3
    5d2a:	230e      	movs	r3, #14
    5d2c:	5ec9      	ldrsh	r1, [r1, r3]
    5d2e:	b090      	sub	sp, #64	; 0x40
    5d30:	0014      	movs	r4, r2
    5d32:	2900      	cmp	r1, #0
    5d34:	da07      	bge.n	5d46 <__swhatbuf_r+0x22>
    5d36:	2300      	movs	r3, #0
    5d38:	602b      	str	r3, [r5, #0]
    5d3a:	89b3      	ldrh	r3, [r6, #12]
    5d3c:	061b      	lsls	r3, r3, #24
    5d3e:	d411      	bmi.n	5d64 <__swhatbuf_r+0x40>
    5d40:	2380      	movs	r3, #128	; 0x80
    5d42:	00db      	lsls	r3, r3, #3
    5d44:	e00f      	b.n	5d66 <__swhatbuf_r+0x42>
    5d46:	aa01      	add	r2, sp, #4
    5d48:	f000 f888 	bl	5e5c <_fstat_r>
    5d4c:	2800      	cmp	r0, #0
    5d4e:	dbf2      	blt.n	5d36 <__swhatbuf_r+0x12>
    5d50:	22f0      	movs	r2, #240	; 0xf0
    5d52:	9b02      	ldr	r3, [sp, #8]
    5d54:	0212      	lsls	r2, r2, #8
    5d56:	4013      	ands	r3, r2
    5d58:	4a05      	ldr	r2, [pc, #20]	; (5d70 <__swhatbuf_r+0x4c>)
    5d5a:	189b      	adds	r3, r3, r2
    5d5c:	425a      	negs	r2, r3
    5d5e:	4153      	adcs	r3, r2
    5d60:	602b      	str	r3, [r5, #0]
    5d62:	e7ed      	b.n	5d40 <__swhatbuf_r+0x1c>
    5d64:	2340      	movs	r3, #64	; 0x40
    5d66:	2000      	movs	r0, #0
    5d68:	6023      	str	r3, [r4, #0]
    5d6a:	b010      	add	sp, #64	; 0x40
    5d6c:	bd70      	pop	{r4, r5, r6, pc}
    5d6e:	46c0      	nop			; (mov r8, r8)
    5d70:	ffffe000 	.word	0xffffe000

00005d74 <__malloc_lock>:
    5d74:	4770      	bx	lr

00005d76 <__malloc_unlock>:
    5d76:	4770      	bx	lr

00005d78 <__sread>:
    5d78:	b570      	push	{r4, r5, r6, lr}
    5d7a:	000c      	movs	r4, r1
    5d7c:	250e      	movs	r5, #14
    5d7e:	5f49      	ldrsh	r1, [r1, r5]
    5d80:	f000 f892 	bl	5ea8 <_read_r>
    5d84:	2800      	cmp	r0, #0
    5d86:	db03      	blt.n	5d90 <__sread+0x18>
    5d88:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5d8a:	181b      	adds	r3, r3, r0
    5d8c:	6563      	str	r3, [r4, #84]	; 0x54
    5d8e:	bd70      	pop	{r4, r5, r6, pc}
    5d90:	89a3      	ldrh	r3, [r4, #12]
    5d92:	4a02      	ldr	r2, [pc, #8]	; (5d9c <__sread+0x24>)
    5d94:	4013      	ands	r3, r2
    5d96:	81a3      	strh	r3, [r4, #12]
    5d98:	e7f9      	b.n	5d8e <__sread+0x16>
    5d9a:	46c0      	nop			; (mov r8, r8)
    5d9c:	ffffefff 	.word	0xffffefff

00005da0 <__swrite>:
    5da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5da2:	001f      	movs	r7, r3
    5da4:	898b      	ldrh	r3, [r1, #12]
    5da6:	0005      	movs	r5, r0
    5da8:	000c      	movs	r4, r1
    5daa:	0016      	movs	r6, r2
    5dac:	05db      	lsls	r3, r3, #23
    5dae:	d505      	bpl.n	5dbc <__swrite+0x1c>
    5db0:	230e      	movs	r3, #14
    5db2:	5ec9      	ldrsh	r1, [r1, r3]
    5db4:	2200      	movs	r2, #0
    5db6:	2302      	movs	r3, #2
    5db8:	f000 f862 	bl	5e80 <_lseek_r>
    5dbc:	89a3      	ldrh	r3, [r4, #12]
    5dbe:	4a05      	ldr	r2, [pc, #20]	; (5dd4 <__swrite+0x34>)
    5dc0:	0028      	movs	r0, r5
    5dc2:	4013      	ands	r3, r2
    5dc4:	81a3      	strh	r3, [r4, #12]
    5dc6:	0032      	movs	r2, r6
    5dc8:	230e      	movs	r3, #14
    5dca:	5ee1      	ldrsh	r1, [r4, r3]
    5dcc:	003b      	movs	r3, r7
    5dce:	f000 f81f 	bl	5e10 <_write_r>
    5dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5dd4:	ffffefff 	.word	0xffffefff

00005dd8 <__sseek>:
    5dd8:	b570      	push	{r4, r5, r6, lr}
    5dda:	000c      	movs	r4, r1
    5ddc:	250e      	movs	r5, #14
    5dde:	5f49      	ldrsh	r1, [r1, r5]
    5de0:	f000 f84e 	bl	5e80 <_lseek_r>
    5de4:	89a3      	ldrh	r3, [r4, #12]
    5de6:	1c42      	adds	r2, r0, #1
    5de8:	d103      	bne.n	5df2 <__sseek+0x1a>
    5dea:	4a05      	ldr	r2, [pc, #20]	; (5e00 <__sseek+0x28>)
    5dec:	4013      	ands	r3, r2
    5dee:	81a3      	strh	r3, [r4, #12]
    5df0:	bd70      	pop	{r4, r5, r6, pc}
    5df2:	2280      	movs	r2, #128	; 0x80
    5df4:	0152      	lsls	r2, r2, #5
    5df6:	4313      	orrs	r3, r2
    5df8:	81a3      	strh	r3, [r4, #12]
    5dfa:	6560      	str	r0, [r4, #84]	; 0x54
    5dfc:	e7f8      	b.n	5df0 <__sseek+0x18>
    5dfe:	46c0      	nop			; (mov r8, r8)
    5e00:	ffffefff 	.word	0xffffefff

00005e04 <__sclose>:
    5e04:	b510      	push	{r4, lr}
    5e06:	230e      	movs	r3, #14
    5e08:	5ec9      	ldrsh	r1, [r1, r3]
    5e0a:	f000 f815 	bl	5e38 <_close_r>
    5e0e:	bd10      	pop	{r4, pc}

00005e10 <_write_r>:
    5e10:	b570      	push	{r4, r5, r6, lr}
    5e12:	0005      	movs	r5, r0
    5e14:	0008      	movs	r0, r1
    5e16:	0011      	movs	r1, r2
    5e18:	2200      	movs	r2, #0
    5e1a:	4c06      	ldr	r4, [pc, #24]	; (5e34 <_write_r+0x24>)
    5e1c:	6022      	str	r2, [r4, #0]
    5e1e:	001a      	movs	r2, r3
    5e20:	f7fd fb58 	bl	34d4 <_write>
    5e24:	1c43      	adds	r3, r0, #1
    5e26:	d103      	bne.n	5e30 <_write_r+0x20>
    5e28:	6823      	ldr	r3, [r4, #0]
    5e2a:	2b00      	cmp	r3, #0
    5e2c:	d000      	beq.n	5e30 <_write_r+0x20>
    5e2e:	602b      	str	r3, [r5, #0]
    5e30:	bd70      	pop	{r4, r5, r6, pc}
    5e32:	46c0      	nop			; (mov r8, r8)
    5e34:	20000cb0 	.word	0x20000cb0

00005e38 <_close_r>:
    5e38:	2300      	movs	r3, #0
    5e3a:	b570      	push	{r4, r5, r6, lr}
    5e3c:	4c06      	ldr	r4, [pc, #24]	; (5e58 <_close_r+0x20>)
    5e3e:	0005      	movs	r5, r0
    5e40:	0008      	movs	r0, r1
    5e42:	6023      	str	r3, [r4, #0]
    5e44:	f7fd fb80 	bl	3548 <_close>
    5e48:	1c43      	adds	r3, r0, #1
    5e4a:	d103      	bne.n	5e54 <_close_r+0x1c>
    5e4c:	6823      	ldr	r3, [r4, #0]
    5e4e:	2b00      	cmp	r3, #0
    5e50:	d000      	beq.n	5e54 <_close_r+0x1c>
    5e52:	602b      	str	r3, [r5, #0]
    5e54:	bd70      	pop	{r4, r5, r6, pc}
    5e56:	46c0      	nop			; (mov r8, r8)
    5e58:	20000cb0 	.word	0x20000cb0

00005e5c <_fstat_r>:
    5e5c:	2300      	movs	r3, #0
    5e5e:	b570      	push	{r4, r5, r6, lr}
    5e60:	4c06      	ldr	r4, [pc, #24]	; (5e7c <_fstat_r+0x20>)
    5e62:	0005      	movs	r5, r0
    5e64:	0008      	movs	r0, r1
    5e66:	0011      	movs	r1, r2
    5e68:	6023      	str	r3, [r4, #0]
    5e6a:	f7fd fb70 	bl	354e <_fstat>
    5e6e:	1c43      	adds	r3, r0, #1
    5e70:	d103      	bne.n	5e7a <_fstat_r+0x1e>
    5e72:	6823      	ldr	r3, [r4, #0]
    5e74:	2b00      	cmp	r3, #0
    5e76:	d000      	beq.n	5e7a <_fstat_r+0x1e>
    5e78:	602b      	str	r3, [r5, #0]
    5e7a:	bd70      	pop	{r4, r5, r6, pc}
    5e7c:	20000cb0 	.word	0x20000cb0

00005e80 <_lseek_r>:
    5e80:	b570      	push	{r4, r5, r6, lr}
    5e82:	0005      	movs	r5, r0
    5e84:	0008      	movs	r0, r1
    5e86:	0011      	movs	r1, r2
    5e88:	2200      	movs	r2, #0
    5e8a:	4c06      	ldr	r4, [pc, #24]	; (5ea4 <_lseek_r+0x24>)
    5e8c:	6022      	str	r2, [r4, #0]
    5e8e:	001a      	movs	r2, r3
    5e90:	f7fd fb62 	bl	3558 <_lseek>
    5e94:	1c43      	adds	r3, r0, #1
    5e96:	d103      	bne.n	5ea0 <_lseek_r+0x20>
    5e98:	6823      	ldr	r3, [r4, #0]
    5e9a:	2b00      	cmp	r3, #0
    5e9c:	d000      	beq.n	5ea0 <_lseek_r+0x20>
    5e9e:	602b      	str	r3, [r5, #0]
    5ea0:	bd70      	pop	{r4, r5, r6, pc}
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	20000cb0 	.word	0x20000cb0

00005ea8 <_read_r>:
    5ea8:	b570      	push	{r4, r5, r6, lr}
    5eaa:	0005      	movs	r5, r0
    5eac:	0008      	movs	r0, r1
    5eae:	0011      	movs	r1, r2
    5eb0:	2200      	movs	r2, #0
    5eb2:	4c06      	ldr	r4, [pc, #24]	; (5ecc <_read_r+0x24>)
    5eb4:	6022      	str	r2, [r4, #0]
    5eb6:	001a      	movs	r2, r3
    5eb8:	f7fd faea 	bl	3490 <_read>
    5ebc:	1c43      	adds	r3, r0, #1
    5ebe:	d103      	bne.n	5ec8 <_read_r+0x20>
    5ec0:	6823      	ldr	r3, [r4, #0]
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d000      	beq.n	5ec8 <_read_r+0x20>
    5ec6:	602b      	str	r3, [r5, #0]
    5ec8:	bd70      	pop	{r4, r5, r6, pc}
    5eca:	46c0      	nop			; (mov r8, r8)
    5ecc:	20000cb0 	.word	0x20000cb0

00005ed0 <mmc_trans_multipliers>:
    5ed0:	00000000 0000000a 0000000c 0000000d     ................
    5ee0:	0000000f 00000014 0000001a 0000001e     ................
    5ef0:	00000023 00000028 0000002d 00000034     #...(...-...4...
    5f00:	00000037 0000003c 00000046 00000050     7...<...F...P...

00005f10 <sd_mmc_trans_units>:
    5f10:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00005f2c <sd_trans_multipliers>:
    5f2c:	00000000 0000000a 0000000c 0000000d     ................
    5f3c:	0000000f 00000014 00000019 0000001e     ................
    5f4c:	00000023 00000028 0000002d 00000032     #...(...-...2...
    5f5c:	00000037 0000003c 00000046 00000050     7...<...F...P...
    5f6c:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    5f7c:	42001800 42001c00 00002c26 00002c22     ...B...B&,..",..
    5f8c:	00002c22 00002c88 00002c88 00002c3a     ",...,...,..:,..
    5f9c:	00002c2c 00002c40 00002c76 00002e48     ,,..@,..v,..H...
    5fac:	00002e28 00002e28 00002eb4 00002e3a     (...(.......:...
    5fbc:	00002e56 00002e2c 00002e64 00002ea4     V...,...d.......

00005fcc <LfnOfs>:
    5fcc:	07050301 12100e09 1c181614 0000001e     ................

00005fdc <excvt.4558>:
    5fdc:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    5fec:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    5ffc:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    600c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    601c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    602c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    603c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    604c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    605c:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    606c:	00005d5b                                []..

00006070 <Tbl>:
    6070:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    6080:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    6090:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    60a0:	00d600ff 00f800dc 00d800a3 019200d7     ................
    60b0:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    60c0:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    60d0:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    60e0:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    60f0:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    6100:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    6110:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    6120:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    6130:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    6140:	00da00de 00d900db 00dd00fd 00b400af     ................
    6150:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    6160:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00006170 <tbl_lower.4308>:
    6170:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    6180:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    6190:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    61a0:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    61b0:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    61c0:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    61d0:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    61e0:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    61f0:	01050103 01090107 010d010b 0111010f     ................
    6200:	01150113 01190117 011d011b 0121011f     ..............!.
    6210:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    6220:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    6230:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    6240:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    6250:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    6260:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    6270:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    6280:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    6290:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    62a0:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    62b0:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    62c0:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    62d0:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    62e0:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    62f0:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    6300:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    6310:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    6320:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    6330:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    6340:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00006350 <tbl_upper.4309>:
    6350:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    6360:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    6370:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    6380:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    6390:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    63a0:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    63b0:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    63c0:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    63d0:	01040102 01080106 010c010a 0110010e     ................
    63e0:	01140112 01180116 011c011a 0120011e     .............. .
    63f0:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    6400:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    6410:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    6420:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    6430:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    6440:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    6450:	03940393 03960395 03980397 039a0399     ................
    6460:	039c039b 039e039d 03a0039f 03a303a1     ................
    6470:	03a503a4 03a703a6 03a903a8 041003aa     ................
    6480:	04120411 04140413 04160415 04180417     ................
    6490:	041a0419 041c041b 041e041d 0420041f     .............. .
    64a0:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    64b0:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    64c0:	04030402 04050404 04070406 04090408     ................
    64d0:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    64e0:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    64f0:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    6500:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    6510:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    6520:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    6530:	43204453 20647261 74696e69 65746169     SD Card initiate
    6540:	6f632064 63657272 21796c74 00000d0a     d correctly!....
    6550:	6e756f4d 69642074 28206b73 6f6d5f66     Mount disk (f_mo
    6560:	29746e75 0d2e2e2e 0000000a 4941465b     unt)........[FAI
    6570:	72205d4c 25207365 000a0d64 5d4b4f5b     L] res %d...[OK]
    6580:	00000a0d 61657243 61206574 6c696620     ....Create a fil
    6590:	66282065 65706f5f 2e2e296e 000a0d2e     e (f_open)......
    65a0:	74697257 6f742065 73657420 69662074     Write to test fi
    65b0:	2820656c 75705f66 2e297374 0a0d2e2e     le (f_puts).....
    65c0:	00000000 74736554 2f445320 20434d4d     ....Test SD/MMC 
    65d0:	63617473 00000a6b 4941465b 0a0d5d4c     stack...[FAIL]..
    65e0:	00000000 74736554 20736920 63637573     ....Test is succ
    65f0:	66737365 0a2e6c75 0000000d 6c756f43     essful......Coul
    6600:	6f6e2064 706f2074 62206e65 72616e69     d not open binar
    6610:	69662079 0d21656c 0000000a 74697257     y file!.....Writ
    6620:	6f742065 73657420 69662074 2820656c     e to test file (
    6630:	72775f66 29657469 0d2e2e2e 0000000a     f_write)........
    6640:	20646e45 5420666f 2e747365 00000d0a     End of Test.....
    6650:	43204453 20647261 6c696166 69206465     SD Card failed i
    6660:	6974696e 6f697461 4320216e 6b636568     nitiation! Check
    6670:	6e6f6320 7463656e 736e6f69 000d0a21      connections!...
    6680:	35455345 2d203631 544e4520 42205245     ESE516 - ENTER B
    6690:	4c544f4f 4544414f 00000052 2d0d0a0c     OOTLOADER......-
    66a0:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    66b0:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    66c0:	000d0a2d 43204453 20445241 6c696166     -...SD CARD fail
    66d0:	20216465 63656843 6f79206b 63207275     ed! Check your c
    66e0:	656e6e6f 6f697463 202e736e 74737953     onnections. Syst
    66f0:	77206d65 206c6c69 74736572 20747261     em will restart 
    6700:	35206e69 63657320 73646e6f 002e2e2e     in 5 seconds....
    6710:	43204453 20445241 6e756f6d 75732074     SD CARD mount su
    6720:	73656363 46202173 73656c69 65747379     ccess! Filesyste
    6730:	6c61206d 6d206f73 746e756f 202e6465     m also mounted. 
    6740:	00000a0d 35455345 2d203631 49584520     ....ESE516 - EXI
    6750:	4f422054 4f4c544f 52454441 00000000     T BOOTLOADER....

00006760 <_global_impure_ptr>:
    6760:	20000034                                4.. 

00006764 <__sf_fake_stderr>:
	...

00006784 <__sf_fake_stdin>:
	...

000067a4 <__sf_fake_stdout>:
	...

000067c4 <_init>:
    67c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67c6:	46c0      	nop			; (mov r8, r8)
    67c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    67ca:	bc08      	pop	{r3}
    67cc:	469e      	mov	lr, r3
    67ce:	4770      	bx	lr

000067d0 <__init_array_start>:
    67d0:	000000dd 	.word	0x000000dd

000067d4 <_fini>:
    67d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67d6:	46c0      	nop			; (mov r8, r8)
    67d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    67da:	bc08      	pop	{r3}
    67dc:	469e      	mov	lr, r3
    67de:	4770      	bx	lr

000067e0 <__fini_array_start>:
    67e0:	000000b5 	.word	0x000000b5
