
WINC1500_HTTP_DOWNLOADER_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f714  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000344  20000000  0000f714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000eb4  20000344  0000fa58  00020344  2**2
                  ALLOC
  3 .stack        00002000  200011f8  0001090c  00020344  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0007f565  00000000  00000000  000203c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000bfbd  00000000  00000000  0009f92a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00021554  00000000  00000000  000ab8e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001710  00000000  00000000  000cce3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000020c0  00000000  00000000  000ce54b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000297f1  00000000  00000000  000d060b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00028b05  00000000  00000000  000f9dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a0528  00000000  00000000  00122901  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004da8  00000000  00000000  001c2e2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 31 00 20 e1 68 00 00 dd 68 00 00 dd 68 00 00     .1. .h...h...h..
	...
      2c:	dd 68 00 00 00 00 00 00 00 00 00 00 dd 68 00 00     .h...........h..
      3c:	05 8f 00 00 dd 68 00 00 dd 68 00 00 dd 68 00 00     .....h...h...h..
      4c:	ed 49 00 00 6d 46 00 00 dd 68 00 00 dd 68 00 00     .I..mF...h...h..
      5c:	dd 68 00 00 dd 68 00 00 15 4e 00 00 25 4e 00 00     .h...h...N..%N..
      6c:	35 4e 00 00 45 4e 00 00 55 4e 00 00 65 4e 00 00     5N..EN..UN..eN..
      7c:	ad 68 00 00 bd 68 00 00 cd 68 00 00 dd 68 00 00     .h...h...h...h..
      8c:	dd 68 00 00 dd 68 00 00 00 00 00 00 00 00 00 00     .h...h..........
      9c:	dd 68 00 00 dd 68 00 00 dd 68 00 00 dd 68 00 00     .h...h...h...h..
      ac:	dd 68 00 00 00 00 00 00                             .h......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000344 	.word	0x20000344
      d4:	00000000 	.word	0x00000000
      d8:	0000f714 	.word	0x0000f714

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000348 	.word	0x20000348
     108:	0000f714 	.word	0x0000f714
     10c:	0000f714 	.word	0x0000f714
     110:	00000000 	.word	0x00000000

00000114 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     114:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     116:	4b07      	ldr	r3, [pc, #28]	; (134 <sd_mmc_configure_slot+0x20>)
     118:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     11a:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     11c:	5ccb      	ldrb	r3, [r1, r3]
     11e:	1e5a      	subs	r2, r3, #1
     120:	4193      	sbcs	r3, r2
     122:	b2db      	uxtb	r3, r3
     124:	7c4a      	ldrb	r2, [r1, #17]
     126:	6809      	ldr	r1, [r1, #0]
     128:	4803      	ldr	r0, [pc, #12]	; (138 <sd_mmc_configure_slot+0x24>)
     12a:	7800      	ldrb	r0, [r0, #0]
     12c:	4c03      	ldr	r4, [pc, #12]	; (13c <sd_mmc_configure_slot+0x28>)
     12e:	47a0      	blx	r4
}
     130:	bd10      	pop	{r4, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	20000360 	.word	0x20000360
     138:	20000369 	.word	0x20000369
     13c:	00000e8d 	.word	0x00000e8d

00000140 <sd_mmc_select_slot>:
{
     140:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     142:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     144:	2800      	cmp	r0, #0
     146:	d001      	beq.n	14c <sd_mmc_select_slot+0xc>
}
     148:	0018      	movs	r0, r3
     14a:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     14c:	4b38      	ldr	r3, [pc, #224]	; (230 <sd_mmc_select_slot+0xf0>)
     14e:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     150:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     152:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     154:	2a00      	cmp	r2, #0
     156:	d104      	bne.n	162 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     158:	094b      	lsrs	r3, r1, #5
     15a:	01db      	lsls	r3, r3, #7
     15c:	4a35      	ldr	r2, [pc, #212]	; (234 <sd_mmc_select_slot+0xf4>)
     15e:	4694      	mov	ip, r2
     160:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     162:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     164:	221f      	movs	r2, #31
     166:	400a      	ands	r2, r1
     168:	2301      	movs	r3, #1
     16a:	4093      	lsls	r3, r2
     16c:	4218      	tst	r0, r3
     16e:	d010      	beq.n	192 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     170:	4b2f      	ldr	r3, [pc, #188]	; (230 <sd_mmc_select_slot+0xf0>)
     172:	7b9b      	ldrb	r3, [r3, #14]
     174:	2b01      	cmp	r3, #1
     176:	d004      	beq.n	182 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     178:	2204      	movs	r2, #4
     17a:	4b2d      	ldr	r3, [pc, #180]	; (230 <sd_mmc_select_slot+0xf0>)
     17c:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     17e:	2302      	movs	r3, #2
     180:	e7e2      	b.n	148 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     182:	4b2d      	ldr	r3, [pc, #180]	; (238 <sd_mmc_select_slot+0xf8>)
     184:	781b      	ldrb	r3, [r3, #0]
     186:	2b00      	cmp	r3, #0
     188:	d0f6      	beq.n	178 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     18a:	2200      	movs	r2, #0
     18c:	4b2b      	ldr	r3, [pc, #172]	; (23c <sd_mmc_select_slot+0xfc>)
     18e:	601a      	str	r2, [r3, #0]
     190:	e7f2      	b.n	178 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     192:	4b27      	ldr	r3, [pc, #156]	; (230 <sd_mmc_select_slot+0xf0>)
     194:	7b9a      	ldrb	r2, [r3, #14]
     196:	2a04      	cmp	r2, #4
     198:	d005      	beq.n	1a6 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     19a:	2a01      	cmp	r2, #1
     19c:	d024      	beq.n	1e8 <sd_mmc_select_slot+0xa8>
		return SD_MMC_ERR_UNUSABLE;
     19e:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     1a0:	2a03      	cmp	r2, #3
     1a2:	d0d1      	beq.n	148 <sd_mmc_select_slot+0x8>
     1a4:	e036      	b.n	214 <sd_mmc_select_slot+0xd4>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     1a6:	3a03      	subs	r2, #3
     1a8:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     1aa:	4b24      	ldr	r3, [pc, #144]	; (23c <sd_mmc_select_slot+0xfc>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	2b00      	cmp	r3, #0
     1b0:	d008      	beq.n	1c4 <sd_mmc_select_slot+0x84>
		sd_mmc_sam_systick_used = false;
     1b2:	2200      	movs	r2, #0
     1b4:	4b20      	ldr	r3, [pc, #128]	; (238 <sd_mmc_select_slot+0xf8>)
     1b6:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     1b8:	20fa      	movs	r0, #250	; 0xfa
     1ba:	0080      	lsls	r0, r0, #2
     1bc:	4b20      	ldr	r3, [pc, #128]	; (240 <sd_mmc_select_slot+0x100>)
     1be:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     1c0:	2302      	movs	r3, #2
     1c2:	e7c1      	b.n	148 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     1c4:	2401      	movs	r4, #1
     1c6:	4b1c      	ldr	r3, [pc, #112]	; (238 <sd_mmc_select_slot+0xf8>)
     1c8:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1ca:	2000      	movs	r0, #0
     1cc:	4b1d      	ldr	r3, [pc, #116]	; (244 <sd_mmc_select_slot+0x104>)
     1ce:	4798      	blx	r3
     1d0:	21fa      	movs	r1, #250	; 0xfa
     1d2:	0149      	lsls	r1, r1, #5
     1d4:	4b1c      	ldr	r3, [pc, #112]	; (248 <sd_mmc_select_slot+0x108>)
     1d6:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     1d8:	23fa      	movs	r3, #250	; 0xfa
     1da:	009b      	lsls	r3, r3, #2
     1dc:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1de:	4b17      	ldr	r3, [pc, #92]	; (23c <sd_mmc_select_slot+0xfc>)
     1e0:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     1e2:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     1e4:	2302      	movs	r3, #2
     1e6:	e7af      	b.n	148 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     1e8:	4b13      	ldr	r3, [pc, #76]	; (238 <sd_mmc_select_slot+0xf8>)
     1ea:	781b      	ldrb	r3, [r3, #0]
     1ec:	2b00      	cmp	r3, #0
     1ee:	d007      	beq.n	200 <sd_mmc_select_slot+0xc0>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     1f0:	4b12      	ldr	r3, [pc, #72]	; (23c <sd_mmc_select_slot+0xfc>)
     1f2:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     1f4:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     1f6:	03d2      	lsls	r2, r2, #15
     1f8:	d5a6      	bpl.n	148 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     1fa:	2200      	movs	r2, #0
     1fc:	4b0f      	ldr	r3, [pc, #60]	; (23c <sd_mmc_select_slot+0xfc>)
     1fe:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     200:	4b0b      	ldr	r3, [pc, #44]	; (230 <sd_mmc_select_slot+0xf0>)
     202:	2202      	movs	r2, #2
     204:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     206:	4a11      	ldr	r2, [pc, #68]	; (24c <sd_mmc_select_slot+0x10c>)
     208:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     20a:	2201      	movs	r2, #1
     20c:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     20e:	2100      	movs	r1, #0
     210:	3221      	adds	r2, #33	; 0x21
     212:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     214:	2200      	movs	r2, #0
     216:	4b0e      	ldr	r3, [pc, #56]	; (250 <sd_mmc_select_slot+0x110>)
     218:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     21a:	4c05      	ldr	r4, [pc, #20]	; (230 <sd_mmc_select_slot+0xf0>)
     21c:	4b0d      	ldr	r3, [pc, #52]	; (254 <sd_mmc_select_slot+0x114>)
     21e:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <sd_mmc_select_slot+0x118>)
     222:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     224:	7ba3      	ldrb	r3, [r4, #14]
     226:	3b02      	subs	r3, #2
     228:	425a      	negs	r2, r3
     22a:	4153      	adcs	r3, r2
     22c:	b2db      	uxtb	r3, r3
     22e:	e78b      	b.n	148 <sd_mmc_select_slot+0x8>
     230:	20000000 	.word	0x20000000
     234:	41004400 	.word	0x41004400
     238:	20000368 	.word	0x20000368
     23c:	e000e010 	.word	0xe000e010
     240:	000012e1 	.word	0x000012e1
     244:	0000600d 	.word	0x0000600d
     248:	0000b9bd 	.word	0x0000b9bd
     24c:	00061a80 	.word	0x00061a80
     250:	20000369 	.word	0x20000369
     254:	20000360 	.word	0x20000360
     258:	00000115 	.word	0x00000115

0000025c <sd_mmc_cmd13>:
{
     25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     25e:	4d09      	ldr	r5, [pc, #36]	; (284 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     260:	4f09      	ldr	r7, [pc, #36]	; (288 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     262:	4e0a      	ldr	r6, [pc, #40]	; (28c <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     264:	2100      	movs	r1, #0
     266:	480a      	ldr	r0, [pc, #40]	; (290 <sd_mmc_cmd13+0x34>)
     268:	47b8      	blx	r7
     26a:	1e04      	subs	r4, r0, #0
     26c:	d007      	beq.n	27e <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     26e:	47b0      	blx	r6
     270:	23ff      	movs	r3, #255	; 0xff
     272:	4203      	tst	r3, r0
     274:	d003      	beq.n	27e <sd_mmc_cmd13+0x22>
     276:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     278:	2d00      	cmp	r5, #0
     27a:	d1f3      	bne.n	264 <sd_mmc_cmd13+0x8>
			return false;
     27c:	2400      	movs	r4, #0
}
     27e:	0020      	movs	r0, r4
     280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	00030d41 	.word	0x00030d41
     288:	000010d1 	.word	0x000010d1
     28c:	000010e9 	.word	0x000010e9
     290:	00001b0d 	.word	0x00001b0d

00000294 <sd_mmc_cmd9_spi>:
{
     294:	b510      	push	{r4, lr}
     296:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     298:	4b0c      	ldr	r3, [pc, #48]	; (2cc <sd_mmc_cmd9_spi+0x38>)
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	8999      	ldrh	r1, [r3, #12]
     29e:	0409      	lsls	r1, r1, #16
     2a0:	2301      	movs	r3, #1
     2a2:	9300      	str	r3, [sp, #0]
     2a4:	2210      	movs	r2, #16
     2a6:	480a      	ldr	r0, [pc, #40]	; (2d0 <sd_mmc_cmd9_spi+0x3c>)
     2a8:	4c0a      	ldr	r4, [pc, #40]	; (2d4 <sd_mmc_cmd9_spi+0x40>)
     2aa:	47a0      	blx	r4
     2ac:	2800      	cmp	r0, #0
     2ae:	d101      	bne.n	2b4 <sd_mmc_cmd9_spi+0x20>
}
     2b0:	b002      	add	sp, #8
     2b2:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     2b4:	4b05      	ldr	r3, [pc, #20]	; (2cc <sd_mmc_cmd9_spi+0x38>)
     2b6:	6818      	ldr	r0, [r3, #0]
     2b8:	3012      	adds	r0, #18
     2ba:	2101      	movs	r1, #1
     2bc:	4b06      	ldr	r3, [pc, #24]	; (2d8 <sd_mmc_cmd9_spi+0x44>)
     2be:	4798      	blx	r3
     2c0:	2800      	cmp	r0, #0
     2c2:	d0f5      	beq.n	2b0 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     2c4:	4b05      	ldr	r3, [pc, #20]	; (2dc <sd_mmc_cmd9_spi+0x48>)
     2c6:	4798      	blx	r3
     2c8:	e7f2      	b.n	2b0 <sd_mmc_cmd9_spi+0x1c>
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	20000360 	.word	0x20000360
     2d0:	00081109 	.word	0x00081109
     2d4:	00000f41 	.word	0x00000f41
     2d8:	0000116d 	.word	0x0000116d
     2dc:	000011f9 	.word	0x000011f9

000002e0 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     2e0:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     2e2:	4b04      	ldr	r3, [pc, #16]	; (2f4 <sd_mmc_deselect_slot+0x14>)
     2e4:	781b      	ldrb	r3, [r3, #0]
     2e6:	2b00      	cmp	r3, #0
     2e8:	d000      	beq.n	2ec <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     2ea:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     2ec:	2000      	movs	r0, #0
     2ee:	4b02      	ldr	r3, [pc, #8]	; (2f8 <sd_mmc_deselect_slot+0x18>)
     2f0:	4798      	blx	r3
}
     2f2:	e7fa      	b.n	2ea <sd_mmc_deselect_slot+0xa>
     2f4:	20000369 	.word	0x20000369
     2f8:	00000ee1 	.word	0x00000ee1

000002fc <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     2fc:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     2fe:	2204      	movs	r2, #4
     300:	4b03      	ldr	r3, [pc, #12]	; (310 <sd_mmc_init+0x14>)
     302:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     304:	32fb      	adds	r2, #251	; 0xfb
     306:	4b03      	ldr	r3, [pc, #12]	; (314 <sd_mmc_init+0x18>)
     308:	701a      	strb	r2, [r3, #0]
	driver_init();
     30a:	4b03      	ldr	r3, [pc, #12]	; (318 <sd_mmc_init+0x1c>)
     30c:	4798      	blx	r3
}
     30e:	bd10      	pop	{r4, pc}
     310:	20000000 	.word	0x20000000
     314:	20000369 	.word	0x20000369
     318:	00000d81 	.word	0x00000d81

0000031c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     31c:	b5f0      	push	{r4, r5, r6, r7, lr}
     31e:	46c6      	mov	lr, r8
     320:	b500      	push	{lr}
     322:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     324:	4bcb      	ldr	r3, [pc, #812]	; (654 <sd_mmc_check+0x338>)
     326:	4798      	blx	r3
     328:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     32a:	2801      	cmp	r0, #1
     32c:	d006      	beq.n	33c <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     32e:	4bca      	ldr	r3, [pc, #808]	; (658 <sd_mmc_check+0x33c>)
     330:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     332:	0020      	movs	r0, r4
     334:	b008      	add	sp, #32
     336:	bc04      	pop	{r2}
     338:	4690      	mov	r8, r2
     33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     33c:	4bc7      	ldr	r3, [pc, #796]	; (65c <sd_mmc_check+0x340>)
     33e:	681b      	ldr	r3, [r3, #0]
     340:	2201      	movs	r2, #1
     342:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     344:	2200      	movs	r2, #0
     346:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     348:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     34a:	4bc5      	ldr	r3, [pc, #788]	; (660 <sd_mmc_check+0x344>)
     34c:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     34e:	2100      	movs	r1, #0
     350:	2088      	movs	r0, #136	; 0x88
     352:	0140      	lsls	r0, r0, #5
     354:	4bc3      	ldr	r3, [pc, #780]	; (664 <sd_mmc_check+0x348>)
     356:	4798      	blx	r3
     358:	2800      	cmp	r0, #0
     35a:	d107      	bne.n	36c <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     35c:	4bbf      	ldr	r3, [pc, #764]	; (65c <sd_mmc_check+0x340>)
     35e:	681b      	ldr	r3, [r3, #0]
     360:	2203      	movs	r2, #3
     362:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     364:	4bbc      	ldr	r3, [pc, #752]	; (658 <sd_mmc_check+0x33c>)
     366:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     368:	2403      	movs	r4, #3
     36a:	e7e2      	b.n	332 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     36c:	21d5      	movs	r1, #213	; 0xd5
     36e:	0049      	lsls	r1, r1, #1
     370:	48bd      	ldr	r0, [pc, #756]	; (668 <sd_mmc_check+0x34c>)
     372:	4bbc      	ldr	r3, [pc, #752]	; (664 <sd_mmc_check+0x348>)
     374:	4798      	blx	r3
	*v2 = 0;
     376:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     378:	2800      	cmp	r0, #0
     37a:	d125      	bne.n	3c8 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     37c:	4bb7      	ldr	r3, [pc, #732]	; (65c <sd_mmc_check+0x340>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	7bdb      	ldrb	r3, [r3, #15]
     382:	07db      	lsls	r3, r3, #31
     384:	d500      	bpl.n	388 <sd_mmc_check+0x6c>
     386:	e1eb      	b.n	760 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     388:	4bb4      	ldr	r3, [pc, #720]	; (65c <sd_mmc_check+0x340>)
     38a:	681b      	ldr	r3, [r3, #0]
     38c:	7bda      	ldrb	r2, [r3, #15]
     38e:	2309      	movs	r3, #9
     390:	4013      	ands	r3, r2
     392:	2b01      	cmp	r3, #1
     394:	d10f      	bne.n	3b6 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     396:	2180      	movs	r1, #128	; 0x80
     398:	0089      	lsls	r1, r1, #2
     39a:	48b4      	ldr	r0, [pc, #720]	; (66c <sd_mmc_check+0x350>)
     39c:	4bb1      	ldr	r3, [pc, #708]	; (664 <sd_mmc_check+0x348>)
     39e:	4798      	blx	r3
     3a0:	2800      	cmp	r0, #0
     3a2:	d0db      	beq.n	35c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     3a4:	4bad      	ldr	r3, [pc, #692]	; (65c <sd_mmc_check+0x340>)
     3a6:	681b      	ldr	r3, [r3, #0]
     3a8:	7bdb      	ldrb	r3, [r3, #15]
     3aa:	07db      	lsls	r3, r3, #31
     3ac:	d503      	bpl.n	3b6 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     3ae:	4bb0      	ldr	r3, [pc, #704]	; (670 <sd_mmc_check+0x354>)
     3b0:	4798      	blx	r3
     3b2:	2800      	cmp	r0, #0
     3b4:	d0d2      	beq.n	35c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     3b6:	4baf      	ldr	r3, [pc, #700]	; (674 <sd_mmc_check+0x358>)
     3b8:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     3ba:	4ba8      	ldr	r3, [pc, #672]	; (65c <sd_mmc_check+0x340>)
     3bc:	681b      	ldr	r3, [r3, #0]
     3be:	2200      	movs	r2, #0
     3c0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     3c2:	4ba5      	ldr	r3, [pc, #660]	; (658 <sd_mmc_check+0x33c>)
     3c4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     3c6:	e7b4      	b.n	332 <sd_mmc_check+0x16>
	resp = driver_get_response();
     3c8:	4bab      	ldr	r3, [pc, #684]	; (678 <sd_mmc_check+0x35c>)
     3ca:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     3cc:	1c43      	adds	r3, r0, #1
     3ce:	d100      	bne.n	3d2 <sd_mmc_check+0xb6>
     3d0:	e1c4      	b.n	75c <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     3d2:	0500      	lsls	r0, r0, #20
     3d4:	0d00      	lsrs	r0, r0, #20
     3d6:	23d5      	movs	r3, #213	; 0xd5
     3d8:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     3da:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     3dc:	4298      	cmp	r0, r3
     3de:	d1bd      	bne.n	35c <sd_mmc_check+0x40>
     3e0:	e7cc      	b.n	37c <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     3e2:	2100      	movs	r1, #0
     3e4:	48a5      	ldr	r0, [pc, #660]	; (67c <sd_mmc_check+0x360>)
     3e6:	4b9f      	ldr	r3, [pc, #636]	; (664 <sd_mmc_check+0x348>)
     3e8:	4798      	blx	r3
     3ea:	2800      	cmp	r0, #0
     3ec:	d119      	bne.n	422 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     3ee:	4b9b      	ldr	r3, [pc, #620]	; (65c <sd_mmc_check+0x340>)
     3f0:	681b      	ldr	r3, [r3, #0]
     3f2:	2202      	movs	r2, #2
     3f4:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     3f6:	2100      	movs	r1, #0
     3f8:	2088      	movs	r0, #136	; 0x88
     3fa:	0140      	lsls	r0, r0, #5
     3fc:	4b99      	ldr	r3, [pc, #612]	; (664 <sd_mmc_check+0x348>)
     3fe:	4798      	blx	r3
     400:	2800      	cmp	r0, #0
     402:	d0ab      	beq.n	35c <sd_mmc_check+0x40>
     404:	4d9e      	ldr	r5, [pc, #632]	; (680 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     406:	4f97      	ldr	r7, [pc, #604]	; (664 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     408:	4e9b      	ldr	r6, [pc, #620]	; (678 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     40a:	2100      	movs	r1, #0
     40c:	489d      	ldr	r0, [pc, #628]	; (684 <sd_mmc_check+0x368>)
     40e:	47b8      	blx	r7
     410:	2800      	cmp	r0, #0
     412:	d0a3      	beq.n	35c <sd_mmc_check+0x40>
		resp = driver_get_response();
     414:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     416:	07c3      	lsls	r3, r0, #31
     418:	d57d      	bpl.n	516 <sd_mmc_check+0x1fa>
     41a:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     41c:	2d00      	cmp	r5, #0
     41e:	d1f4      	bne.n	40a <sd_mmc_check+0xee>
     420:	e79c      	b.n	35c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     422:	4b95      	ldr	r3, [pc, #596]	; (678 <sd_mmc_check+0x35c>)
     424:	4798      	blx	r3
     426:	0043      	lsls	r3, r0, #1
     428:	d505      	bpl.n	436 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     42a:	4b8c      	ldr	r3, [pc, #560]	; (65c <sd_mmc_check+0x340>)
     42c:	681a      	ldr	r2, [r3, #0]
     42e:	7bd3      	ldrb	r3, [r2, #15]
     430:	2108      	movs	r1, #8
     432:	430b      	orrs	r3, r1
     434:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     436:	2100      	movs	r1, #0
     438:	4893      	ldr	r0, [pc, #588]	; (688 <sd_mmc_check+0x36c>)
     43a:	4b8a      	ldr	r3, [pc, #552]	; (664 <sd_mmc_check+0x348>)
     43c:	4798      	blx	r3
     43e:	2800      	cmp	r0, #0
     440:	d08c      	beq.n	35c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     442:	4b86      	ldr	r3, [pc, #536]	; (65c <sd_mmc_check+0x340>)
     444:	681b      	ldr	r3, [r3, #0]
     446:	7bdb      	ldrb	r3, [r3, #15]
     448:	07da      	lsls	r2, r3, #31
     44a:	d400      	bmi.n	44e <sd_mmc_check+0x132>
     44c:	e1a4      	b.n	798 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     44e:	4b8f      	ldr	r3, [pc, #572]	; (68c <sd_mmc_check+0x370>)
     450:	4798      	blx	r3
     452:	2800      	cmp	r0, #0
     454:	d082      	beq.n	35c <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     456:	4b81      	ldr	r3, [pc, #516]	; (65c <sd_mmc_check+0x340>)
     458:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     45a:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     45c:	2107      	movs	r1, #7
     45e:	4019      	ands	r1, r3
     460:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     462:	488b      	ldr	r0, [pc, #556]	; (690 <sd_mmc_check+0x374>)
     464:	5808      	ldr	r0, [r1, r0]
     466:	21fa      	movs	r1, #250	; 0xfa
     468:	0089      	lsls	r1, r1, #2
     46a:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     46c:	065b      	lsls	r3, r3, #25
     46e:	0f1b      	lsrs	r3, r3, #28
     470:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     472:	4888      	ldr	r0, [pc, #544]	; (694 <sd_mmc_check+0x378>)
     474:	581b      	ldr	r3, [r3, r0]
     476:	434b      	muls	r3, r1
     478:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     47a:	7c93      	ldrb	r3, [r2, #18]
     47c:	099b      	lsrs	r3, r3, #6
     47e:	d000      	beq.n	482 <sd_mmc_check+0x166>
     480:	e13c      	b.n	6fc <sd_mmc_check+0x3e0>
     482:	7e91      	ldrb	r1, [r2, #26]
     484:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     486:	7e53      	ldrb	r3, [r2, #25]
     488:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     48a:	7e10      	ldrb	r0, [r2, #24]
     48c:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     48e:	4303      	orrs	r3, r0
     490:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     492:	7f10      	ldrb	r0, [r2, #28]
     494:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     496:	7ed1      	ldrb	r1, [r2, #27]
     498:	0049      	lsls	r1, r1, #1
     49a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     49c:	051b      	lsls	r3, r3, #20
     49e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     4a0:	3301      	adds	r3, #1
     4a2:	2107      	movs	r1, #7
     4a4:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     4a6:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     4a8:	408b      	lsls	r3, r1
     4aa:	7dd0      	ldrb	r0, [r2, #23]
     4ac:	210f      	movs	r1, #15
     4ae:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     4b0:	408b      	lsls	r3, r1
				/ 1024;
     4b2:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     4b4:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     4b6:	8991      	ldrh	r1, [r2, #12]
     4b8:	0409      	lsls	r1, r1, #16
     4ba:	4877      	ldr	r0, [pc, #476]	; (698 <sd_mmc_check+0x37c>)
     4bc:	4b69      	ldr	r3, [pc, #420]	; (664 <sd_mmc_check+0x348>)
     4be:	4798      	blx	r3
     4c0:	2800      	cmp	r0, #0
     4c2:	d100      	bne.n	4c6 <sd_mmc_check+0x1aa>
     4c4:	e74a      	b.n	35c <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     4c6:	2301      	movs	r3, #1
     4c8:	9300      	str	r3, [sp, #0]
     4ca:	2208      	movs	r2, #8
     4cc:	2100      	movs	r1, #0
     4ce:	4873      	ldr	r0, [pc, #460]	; (69c <sd_mmc_check+0x380>)
     4d0:	4d73      	ldr	r5, [pc, #460]	; (6a0 <sd_mmc_check+0x384>)
     4d2:	47a8      	blx	r5
     4d4:	2800      	cmp	r0, #0
     4d6:	d100      	bne.n	4da <sd_mmc_check+0x1be>
     4d8:	e740      	b.n	35c <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     4da:	2101      	movs	r1, #1
     4dc:	a806      	add	r0, sp, #24
     4de:	4b71      	ldr	r3, [pc, #452]	; (6a4 <sd_mmc_check+0x388>)
     4e0:	4798      	blx	r3
     4e2:	2800      	cmp	r0, #0
     4e4:	d100      	bne.n	4e8 <sd_mmc_check+0x1cc>
     4e6:	e739      	b.n	35c <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     4e8:	4b6f      	ldr	r3, [pc, #444]	; (6a8 <sd_mmc_check+0x38c>)
     4ea:	4798      	blx	r3
     4ec:	2800      	cmp	r0, #0
     4ee:	d100      	bne.n	4f2 <sd_mmc_check+0x1d6>
     4f0:	e734      	b.n	35c <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4f2:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     4f4:	781b      	ldrb	r3, [r3, #0]
     4f6:	220f      	movs	r2, #15
     4f8:	4013      	ands	r3, r2
     4fa:	2b01      	cmp	r3, #1
     4fc:	d100      	bne.n	500 <sd_mmc_check+0x1e4>
     4fe:	e119      	b.n	734 <sd_mmc_check+0x418>
     500:	2b00      	cmp	r3, #0
     502:	d100      	bne.n	506 <sd_mmc_check+0x1ea>
     504:	e109      	b.n	71a <sd_mmc_check+0x3fe>
     506:	2b02      	cmp	r3, #2
     508:	d100      	bne.n	50c <sd_mmc_check+0x1f0>
     50a:	e118      	b.n	73e <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     50c:	4b53      	ldr	r3, [pc, #332]	; (65c <sd_mmc_check+0x340>)
     50e:	681b      	ldr	r3, [r3, #0]
     510:	2210      	movs	r2, #16
     512:	741a      	strb	r2, [r3, #16]
     514:	e105      	b.n	722 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     516:	2100      	movs	r1, #0
     518:	4858      	ldr	r0, [pc, #352]	; (67c <sd_mmc_check+0x360>)
     51a:	4b52      	ldr	r3, [pc, #328]	; (664 <sd_mmc_check+0x348>)
     51c:	4798      	blx	r3
     51e:	2800      	cmp	r0, #0
     520:	d100      	bne.n	524 <sd_mmc_check+0x208>
     522:	e71b      	b.n	35c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     524:	4b54      	ldr	r3, [pc, #336]	; (678 <sd_mmc_check+0x35c>)
     526:	4798      	blx	r3
     528:	23c0      	movs	r3, #192	; 0xc0
     52a:	05db      	lsls	r3, r3, #23
     52c:	4018      	ands	r0, r3
     52e:	2380      	movs	r3, #128	; 0x80
     530:	05db      	lsls	r3, r3, #23
     532:	4298      	cmp	r0, r3
     534:	d105      	bne.n	542 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     536:	4b49      	ldr	r3, [pc, #292]	; (65c <sd_mmc_check+0x340>)
     538:	681a      	ldr	r2, [r3, #0]
     53a:	7bd1      	ldrb	r1, [r2, #15]
     53c:	2308      	movs	r3, #8
     53e:	430b      	orrs	r3, r1
     540:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     542:	2100      	movs	r1, #0
     544:	4850      	ldr	r0, [pc, #320]	; (688 <sd_mmc_check+0x36c>)
     546:	4b47      	ldr	r3, [pc, #284]	; (664 <sd_mmc_check+0x348>)
     548:	4798      	blx	r3
     54a:	2800      	cmp	r0, #0
     54c:	d100      	bne.n	550 <sd_mmc_check+0x234>
     54e:	e705      	b.n	35c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     550:	4b4e      	ldr	r3, [pc, #312]	; (68c <sd_mmc_check+0x370>)
     552:	4798      	blx	r3
     554:	2800      	cmp	r0, #0
     556:	d100      	bne.n	55a <sd_mmc_check+0x23e>
     558:	e700      	b.n	35c <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     55a:	4b40      	ldr	r3, [pc, #256]	; (65c <sd_mmc_check+0x340>)
     55c:	681a      	ldr	r2, [r3, #0]
     55e:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     560:	069b      	lsls	r3, r3, #26
     562:	0f1b      	lsrs	r3, r3, #28
     564:	2b02      	cmp	r3, #2
     566:	d100      	bne.n	56a <sd_mmc_check+0x24e>
     568:	e0a8      	b.n	6bc <sd_mmc_check+0x3a0>
     56a:	d907      	bls.n	57c <sd_mmc_check+0x260>
     56c:	2b03      	cmp	r3, #3
     56e:	d100      	bne.n	572 <sd_mmc_check+0x256>
     570:	e0a7      	b.n	6c2 <sd_mmc_check+0x3a6>
     572:	2b04      	cmp	r3, #4
     574:	d104      	bne.n	580 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     576:	2340      	movs	r3, #64	; 0x40
     578:	7413      	strb	r3, [r2, #16]
     57a:	e003      	b.n	584 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     57c:	2b01      	cmp	r3, #1
     57e:	d066      	beq.n	64e <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     580:	2312      	movs	r3, #18
     582:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     584:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     586:	0659      	lsls	r1, r3, #25
     588:	0f09      	lsrs	r1, r1, #28
     58a:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     58c:	2007      	movs	r0, #7
     58e:	4003      	ands	r3, r0
     590:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     592:	483f      	ldr	r0, [pc, #252]	; (690 <sd_mmc_check+0x374>)
     594:	5818      	ldr	r0, [r3, r0]
     596:	23fa      	movs	r3, #250	; 0xfa
     598:	009b      	lsls	r3, r3, #2
     59a:	4343      	muls	r3, r0
     59c:	4843      	ldr	r0, [pc, #268]	; (6ac <sd_mmc_check+0x390>)
     59e:	5809      	ldr	r1, [r1, r0]
     5a0:	434b      	muls	r3, r1
     5a2:	6013      	str	r3, [r2, #0]
     5a4:	7e91      	ldrb	r1, [r2, #26]
     5a6:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     5a8:	7e53      	ldrb	r3, [r2, #25]
     5aa:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     5ac:	7e10      	ldrb	r0, [r2, #24]
     5ae:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     5b0:	4303      	orrs	r3, r0
     5b2:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     5b4:	051b      	lsls	r3, r3, #20
     5b6:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     5b8:	493d      	ldr	r1, [pc, #244]	; (6b0 <sd_mmc_check+0x394>)
     5ba:	428b      	cmp	r3, r1
     5bc:	d00f      	beq.n	5de <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     5be:	7f10      	ldrb	r0, [r2, #28]
     5c0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     5c2:	7ed1      	ldrb	r1, [r2, #27]
     5c4:	0049      	lsls	r1, r1, #1
     5c6:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     5c8:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     5ca:	2007      	movs	r0, #7
     5cc:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     5ce:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     5d0:	408b      	lsls	r3, r1
     5d2:	7dd1      	ldrb	r1, [r2, #23]
     5d4:	3008      	adds	r0, #8
     5d6:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     5d8:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     5da:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     5dc:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     5de:	7c13      	ldrb	r3, [r2, #16]
     5e0:	2b3f      	cmp	r3, #63	; 0x3f
     5e2:	d97b      	bls.n	6dc <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     5e4:	2100      	movs	r1, #0
     5e6:	9100      	str	r1, [sp, #0]
     5e8:	2301      	movs	r3, #1
     5ea:	2280      	movs	r2, #128	; 0x80
     5ec:	0092      	lsls	r2, r2, #2
     5ee:	4831      	ldr	r0, [pc, #196]	; (6b4 <sd_mmc_check+0x398>)
     5f0:	4d2b      	ldr	r5, [pc, #172]	; (6a0 <sd_mmc_check+0x384>)
     5f2:	47a8      	blx	r5
     5f4:	2800      	cmp	r0, #0
     5f6:	d100      	bne.n	5fa <sd_mmc_check+0x2de>
     5f8:	e6b0      	b.n	35c <sd_mmc_check+0x40>
     5fa:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     5fc:	4e2e      	ldr	r6, [pc, #184]	; (6b8 <sd_mmc_check+0x39c>)
     5fe:	a805      	add	r0, sp, #20
     600:	47b0      	blx	r6
     602:	2800      	cmp	r0, #0
     604:	d100      	bne.n	608 <sd_mmc_check+0x2ec>
     606:	e6a9      	b.n	35c <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     608:	3501      	adds	r5, #1
     60a:	b2ad      	uxth	r5, r5
     60c:	2d32      	cmp	r5, #50	; 0x32
     60e:	d1f6      	bne.n	5fe <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     610:	4b12      	ldr	r3, [pc, #72]	; (65c <sd_mmc_check+0x340>)
     612:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     614:	7e8a      	ldrb	r2, [r1, #26]
     616:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     618:	7e4b      	ldrb	r3, [r1, #25]
     61a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     61c:	7e09      	ldrb	r1, [r1, #24]
     61e:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     620:	430b      	orrs	r3, r1
     622:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     624:	051b      	lsls	r3, r3, #20
     626:	0d1b      	lsrs	r3, r3, #20
     628:	4a21      	ldr	r2, [pc, #132]	; (6b0 <sd_mmc_check+0x394>)
     62a:	4293      	cmp	r3, r2
     62c:	d154      	bne.n	6d8 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     62e:	4e22      	ldr	r6, [pc, #136]	; (6b8 <sd_mmc_check+0x39c>)
     630:	a806      	add	r0, sp, #24
     632:	47b0      	blx	r6
     634:	2800      	cmp	r0, #0
     636:	d100      	bne.n	63a <sd_mmc_check+0x31e>
     638:	e690      	b.n	35c <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     63a:	3501      	adds	r5, #1
     63c:	b2ad      	uxth	r5, r5
     63e:	2d35      	cmp	r5, #53	; 0x35
     640:	d9f6      	bls.n	630 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     642:	4b06      	ldr	r3, [pc, #24]	; (65c <sd_mmc_check+0x340>)
     644:	681a      	ldr	r2, [r3, #0]
     646:	9b06      	ldr	r3, [sp, #24]
     648:	085b      	lsrs	r3, r3, #1
     64a:	6053      	str	r3, [r2, #4]
     64c:	e044      	b.n	6d8 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     64e:	2314      	movs	r3, #20
     650:	7413      	strb	r3, [r2, #16]
     652:	e797      	b.n	584 <sd_mmc_check+0x268>
     654:	00000141 	.word	0x00000141
     658:	000002e1 	.word	0x000002e1
     65c:	20000360 	.word	0x20000360
     660:	00000f09 	.word	0x00000f09
     664:	000010d1 	.word	0x000010d1
     668:	00005508 	.word	0x00005508
     66c:	00001110 	.word	0x00001110
     670:	0000025d 	.word	0x0000025d
     674:	00000115 	.word	0x00000115
     678:	000010e9 	.word	0x000010e9
     67c:	0000053a 	.word	0x0000053a
     680:	00001bef 	.word	0x00001bef
     684:	00001101 	.word	0x00001101
     688:	0000113b 	.word	0x0000113b
     68c:	00000295 	.word	0x00000295
     690:	0000d5a4 	.word	0x0000d5a4
     694:	0000d5c0 	.word	0x0000d5c0
     698:	00001137 	.word	0x00001137
     69c:	00081133 	.word	0x00081133
     6a0:	00000f41 	.word	0x00000f41
     6a4:	0000116d 	.word	0x0000116d
     6a8:	000011f9 	.word	0x000011f9
     6ac:	0000d564 	.word	0x0000d564
     6b0:	00000fff 	.word	0x00000fff
     6b4:	00081108 	.word	0x00081108
     6b8:	000010f5 	.word	0x000010f5
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     6bc:	2322      	movs	r3, #34	; 0x22
     6be:	7413      	strb	r3, [r2, #16]
     6c0:	e760      	b.n	584 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     6c2:	2330      	movs	r3, #48	; 0x30
     6c4:	7413      	strb	r3, [r2, #16]
     6c6:	e75d      	b.n	584 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     6c8:	a806      	add	r0, sp, #24
     6ca:	4b36      	ldr	r3, [pc, #216]	; (7a4 <sd_mmc_check+0x488>)
     6cc:	4798      	blx	r3
     6ce:	2800      	cmp	r0, #0
     6d0:	d100      	bne.n	6d4 <sd_mmc_check+0x3b8>
     6d2:	e643      	b.n	35c <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     6d4:	3501      	adds	r5, #1
     6d6:	b2ad      	uxth	r5, r5
     6d8:	2d7f      	cmp	r5, #127	; 0x7f
     6da:	d9f5      	bls.n	6c8 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     6dc:	2180      	movs	r1, #128	; 0x80
     6de:	0089      	lsls	r1, r1, #2
     6e0:	4831      	ldr	r0, [pc, #196]	; (7a8 <sd_mmc_check+0x48c>)
     6e2:	4b32      	ldr	r3, [pc, #200]	; (7ac <sd_mmc_check+0x490>)
     6e4:	4798      	blx	r3
     6e6:	2800      	cmp	r0, #0
     6e8:	d100      	bne.n	6ec <sd_mmc_check+0x3d0>
     6ea:	e637      	b.n	35c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     6ec:	4b30      	ldr	r3, [pc, #192]	; (7b0 <sd_mmc_check+0x494>)
     6ee:	4798      	blx	r3
     6f0:	2800      	cmp	r0, #0
     6f2:	d100      	bne.n	6f6 <sd_mmc_check+0x3da>
     6f4:	e632      	b.n	35c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     6f6:	4b2f      	ldr	r3, [pc, #188]	; (7b4 <sd_mmc_check+0x498>)
     6f8:	4798      	blx	r3
     6fa:	e65e      	b.n	3ba <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     6fc:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     6fe:	7e93      	ldrb	r3, [r2, #26]
     700:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     702:	7e51      	ldrb	r1, [r2, #25]
     704:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     706:	430b      	orrs	r3, r1
     708:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     70a:	029b      	lsls	r3, r3, #10
				* 512;
     70c:	085b      	lsrs	r3, r3, #1
     70e:	2180      	movs	r1, #128	; 0x80
     710:	0089      	lsls	r1, r1, #2
     712:	468c      	mov	ip, r1
     714:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     716:	6053      	str	r3, [r2, #4]
     718:	e6cd      	b.n	4b6 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     71a:	4b27      	ldr	r3, [pc, #156]	; (7b8 <sd_mmc_check+0x49c>)
     71c:	681b      	ldr	r3, [r3, #0]
     71e:	2210      	movs	r2, #16
     720:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     722:	4b25      	ldr	r3, [pc, #148]	; (7b8 <sd_mmc_check+0x49c>)
     724:	681b      	ldr	r3, [r3, #0]
     726:	7bdb      	ldrb	r3, [r3, #15]
     728:	2209      	movs	r2, #9
     72a:	4013      	ands	r3, r2
     72c:	2b01      	cmp	r3, #1
     72e:	d000      	beq.n	732 <sd_mmc_check+0x416>
     730:	e638      	b.n	3a4 <sd_mmc_check+0x88>
     732:	e630      	b.n	396 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     734:	4b20      	ldr	r3, [pc, #128]	; (7b8 <sd_mmc_check+0x49c>)
     736:	681b      	ldr	r3, [r3, #0]
     738:	221a      	movs	r2, #26
     73a:	741a      	strb	r2, [r3, #16]
     73c:	e7f1      	b.n	722 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     73e:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     740:	789b      	ldrb	r3, [r3, #2]
     742:	09db      	lsrs	r3, r3, #7
     744:	2b01      	cmp	r3, #1
     746:	d104      	bne.n	752 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     748:	4b1b      	ldr	r3, [pc, #108]	; (7b8 <sd_mmc_check+0x49c>)
     74a:	681b      	ldr	r3, [r3, #0]
     74c:	2230      	movs	r2, #48	; 0x30
     74e:	741a      	strb	r2, [r3, #16]
     750:	e7e7      	b.n	722 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     752:	4b19      	ldr	r3, [pc, #100]	; (7b8 <sd_mmc_check+0x49c>)
     754:	681b      	ldr	r3, [r3, #0]
     756:	2220      	movs	r2, #32
     758:	741a      	strb	r2, [r3, #16]
     75a:	e7e2      	b.n	722 <sd_mmc_check+0x406>
	*v2 = 0;
     75c:	2600      	movs	r6, #0
     75e:	e60d      	b.n	37c <sd_mmc_check+0x60>
     760:	1e73      	subs	r3, r6, #1
     762:	419e      	sbcs	r6, r3
     764:	07b3      	lsls	r3, r6, #30
     766:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     768:	4d14      	ldr	r5, [pc, #80]	; (7bc <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     76a:	4f10      	ldr	r7, [pc, #64]	; (7ac <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     76c:	46b8      	mov	r8, r7
		resp = driver_get_response();
     76e:	4e14      	ldr	r6, [pc, #80]	; (7c0 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     770:	2100      	movs	r1, #0
     772:	4814      	ldr	r0, [pc, #80]	; (7c4 <sd_mmc_check+0x4a8>)
     774:	47b8      	blx	r7
     776:	2800      	cmp	r0, #0
     778:	d100      	bne.n	77c <sd_mmc_check+0x460>
     77a:	e638      	b.n	3ee <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     77c:	9903      	ldr	r1, [sp, #12]
     77e:	4812      	ldr	r0, [pc, #72]	; (7c8 <sd_mmc_check+0x4ac>)
     780:	47c0      	blx	r8
     782:	2800      	cmp	r0, #0
     784:	d100      	bne.n	788 <sd_mmc_check+0x46c>
     786:	e632      	b.n	3ee <sd_mmc_check+0xd2>
		resp = driver_get_response();
     788:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     78a:	07c3      	lsls	r3, r0, #31
     78c:	d400      	bmi.n	790 <sd_mmc_check+0x474>
     78e:	e628      	b.n	3e2 <sd_mmc_check+0xc6>
     790:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     792:	2d00      	cmp	r5, #0
     794:	d1ec      	bne.n	770 <sd_mmc_check+0x454>
     796:	e62a      	b.n	3ee <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     798:	2209      	movs	r2, #9
     79a:	4013      	ands	r3, r2
     79c:	2b01      	cmp	r3, #1
     79e:	d000      	beq.n	7a2 <sd_mmc_check+0x486>
     7a0:	e609      	b.n	3b6 <sd_mmc_check+0x9a>
     7a2:	e5f8      	b.n	396 <sd_mmc_check+0x7a>
     7a4:	000010f5 	.word	0x000010f5
     7a8:	00001110 	.word	0x00001110
     7ac:	000010d1 	.word	0x000010d1
     7b0:	0000025d 	.word	0x0000025d
     7b4:	00000115 	.word	0x00000115
     7b8:	20000360 	.word	0x20000360
     7bc:	00001bef 	.word	0x00001bef
     7c0:	000010e9 	.word	0x000010e9
     7c4:	00001137 	.word	0x00001137
     7c8:	00001129 	.word	0x00001129

000007cc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     7cc:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7ce:	4b06      	ldr	r3, [pc, #24]	; (7e8 <sd_mmc_get_type+0x1c>)
     7d0:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     7d2:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7d4:	2800      	cmp	r0, #0
     7d6:	d001      	beq.n	7dc <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     7d8:	0018      	movs	r0, r3
     7da:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     7dc:	4b03      	ldr	r3, [pc, #12]	; (7ec <sd_mmc_get_type+0x20>)
     7de:	4798      	blx	r3
	return sd_mmc_card->type;
     7e0:	4b03      	ldr	r3, [pc, #12]	; (7f0 <sd_mmc_get_type+0x24>)
     7e2:	681b      	ldr	r3, [r3, #0]
     7e4:	7bdb      	ldrb	r3, [r3, #15]
     7e6:	e7f7      	b.n	7d8 <sd_mmc_get_type+0xc>
     7e8:	00000141 	.word	0x00000141
     7ec:	000002e1 	.word	0x000002e1
     7f0:	20000360 	.word	0x20000360

000007f4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     7f4:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7f6:	4b06      	ldr	r3, [pc, #24]	; (810 <sd_mmc_get_capacity+0x1c>)
     7f8:	4798      	blx	r3
		return 0;
     7fa:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7fc:	2800      	cmp	r0, #0
     7fe:	d001      	beq.n	804 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     800:	0018      	movs	r0, r3
     802:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     804:	4b03      	ldr	r3, [pc, #12]	; (814 <sd_mmc_get_capacity+0x20>)
     806:	4798      	blx	r3
	return sd_mmc_card->capacity;
     808:	4b03      	ldr	r3, [pc, #12]	; (818 <sd_mmc_get_capacity+0x24>)
     80a:	681b      	ldr	r3, [r3, #0]
     80c:	685b      	ldr	r3, [r3, #4]
     80e:	e7f7      	b.n	800 <sd_mmc_get_capacity+0xc>
     810:	00000141 	.word	0x00000141
     814:	000002e1 	.word	0x000002e1
     818:	20000360 	.word	0x20000360

0000081c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     81c:	2000      	movs	r0, #0
     81e:	4770      	bx	lr

00000820 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     820:	b570      	push	{r4, r5, r6, lr}
     822:	b082      	sub	sp, #8
     824:	000e      	movs	r6, r1
     826:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     828:	4b16      	ldr	r3, [pc, #88]	; (884 <sd_mmc_init_read_blocks+0x64>)
     82a:	4798      	blx	r3
     82c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     82e:	d002      	beq.n	836 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     830:	0020      	movs	r0, r4
     832:	b002      	add	sp, #8
     834:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     836:	4b14      	ldr	r3, [pc, #80]	; (888 <sd_mmc_init_read_blocks+0x68>)
     838:	4798      	blx	r3
     83a:	2800      	cmp	r0, #0
     83c:	d017      	beq.n	86e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     83e:	2d01      	cmp	r5, #1
     840:	d919      	bls.n	876 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     842:	4812      	ldr	r0, [pc, #72]	; (88c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     844:	4b12      	ldr	r3, [pc, #72]	; (890 <sd_mmc_init_read_blocks+0x70>)
     846:	681b      	ldr	r3, [r3, #0]
     848:	7bdb      	ldrb	r3, [r3, #15]
     84a:	071b      	lsls	r3, r3, #28
     84c:	d400      	bmi.n	850 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     84e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     850:	2301      	movs	r3, #1
     852:	9300      	str	r3, [sp, #0]
     854:	002b      	movs	r3, r5
     856:	2280      	movs	r2, #128	; 0x80
     858:	0092      	lsls	r2, r2, #2
     85a:	0031      	movs	r1, r6
     85c:	4e0d      	ldr	r6, [pc, #52]	; (894 <sd_mmc_init_read_blocks+0x74>)
     85e:	47b0      	blx	r6
     860:	2800      	cmp	r0, #0
     862:	d00a      	beq.n	87a <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     864:	4b0c      	ldr	r3, [pc, #48]	; (898 <sd_mmc_init_read_blocks+0x78>)
     866:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     868:	4b0c      	ldr	r3, [pc, #48]	; (89c <sd_mmc_init_read_blocks+0x7c>)
     86a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     86c:	e7e0      	b.n	830 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     86e:	4b0c      	ldr	r3, [pc, #48]	; (8a0 <sd_mmc_init_read_blocks+0x80>)
     870:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     872:	3405      	adds	r4, #5
     874:	e7dc      	b.n	830 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     876:	480b      	ldr	r0, [pc, #44]	; (8a4 <sd_mmc_init_read_blocks+0x84>)
     878:	e7e4      	b.n	844 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     87a:	4b09      	ldr	r3, [pc, #36]	; (8a0 <sd_mmc_init_read_blocks+0x80>)
     87c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     87e:	2405      	movs	r4, #5
     880:	e7d6      	b.n	830 <sd_mmc_init_read_blocks+0x10>
     882:	46c0      	nop			; (mov r8, r8)
     884:	00000141 	.word	0x00000141
     888:	0000025d 	.word	0x0000025d
     88c:	00101112 	.word	0x00101112
     890:	20000360 	.word	0x20000360
     894:	00000f41 	.word	0x00000f41
     898:	20000364 	.word	0x20000364
     89c:	20000366 	.word	0x20000366
     8a0:	000002e1 	.word	0x000002e1
     8a4:	00081111 	.word	0x00081111

000008a8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     8a8:	b510      	push	{r4, lr}
     8aa:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     8ac:	4b07      	ldr	r3, [pc, #28]	; (8cc <sd_mmc_start_read_blocks+0x24>)
     8ae:	4798      	blx	r3
     8b0:	2800      	cmp	r0, #0
     8b2:	d104      	bne.n	8be <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     8b4:	2200      	movs	r2, #0
     8b6:	4b06      	ldr	r3, [pc, #24]	; (8d0 <sd_mmc_start_read_blocks+0x28>)
     8b8:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     8ba:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     8bc:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <sd_mmc_start_read_blocks+0x28>)
     8c0:	8813      	ldrh	r3, [r2, #0]
     8c2:	1b1c      	subs	r4, r3, r4
     8c4:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     8c6:	2000      	movs	r0, #0
     8c8:	e7f8      	b.n	8bc <sd_mmc_start_read_blocks+0x14>
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	0000116d 	.word	0x0000116d
     8d0:	20000364 	.word	0x20000364

000008d4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     8d4:	b510      	push	{r4, lr}
     8d6:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     8d8:	4b14      	ldr	r3, [pc, #80]	; (92c <sd_mmc_wait_end_of_read_blocks+0x58>)
     8da:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     8dc:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     8de:	2800      	cmp	r0, #0
     8e0:	d101      	bne.n	8e6 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     8e2:	0018      	movs	r0, r3
     8e4:	bd10      	pop	{r4, pc}
	if (abort) {
     8e6:	2c00      	cmp	r4, #0
     8e8:	d010      	beq.n	90c <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     8ea:	2200      	movs	r2, #0
     8ec:	4b10      	ldr	r3, [pc, #64]	; (930 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     8ee:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     8f0:	4b10      	ldr	r3, [pc, #64]	; (934 <sd_mmc_wait_end_of_read_blocks+0x60>)
     8f2:	881b      	ldrh	r3, [r3, #0]
     8f4:	2b01      	cmp	r3, #1
     8f6:	d00f      	beq.n	918 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     8f8:	2100      	movs	r1, #0
     8fa:	480f      	ldr	r0, [pc, #60]	; (938 <sd_mmc_wait_end_of_read_blocks+0x64>)
     8fc:	4b0f      	ldr	r3, [pc, #60]	; (93c <sd_mmc_wait_end_of_read_blocks+0x68>)
     8fe:	4798      	blx	r3
     900:	2800      	cmp	r0, #0
     902:	d00d      	beq.n	920 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     904:	4b0e      	ldr	r3, [pc, #56]	; (940 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     906:	4798      	blx	r3
	return SD_MMC_OK;
     908:	2300      	movs	r3, #0
     90a:	e7ea      	b.n	8e2 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     90c:	4b08      	ldr	r3, [pc, #32]	; (930 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     90e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     910:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     912:	2a00      	cmp	r2, #0
     914:	d0ec      	beq.n	8f0 <sd_mmc_wait_end_of_read_blocks+0x1c>
     916:	e7e4      	b.n	8e2 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     918:	4b09      	ldr	r3, [pc, #36]	; (940 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     91a:	4798      	blx	r3
		return SD_MMC_OK;
     91c:	2300      	movs	r3, #0
     91e:	e7e0      	b.n	8e2 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     920:	2100      	movs	r1, #0
     922:	4805      	ldr	r0, [pc, #20]	; (938 <sd_mmc_wait_end_of_read_blocks+0x64>)
     924:	4b05      	ldr	r3, [pc, #20]	; (93c <sd_mmc_wait_end_of_read_blocks+0x68>)
     926:	4798      	blx	r3
     928:	e7ec      	b.n	904 <sd_mmc_wait_end_of_read_blocks+0x30>
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	000011f9 	.word	0x000011f9
     930:	20000364 	.word	0x20000364
     934:	20000366 	.word	0x20000366
     938:	0000310c 	.word	0x0000310c
     93c:	000010d1 	.word	0x000010d1
     940:	000002e1 	.word	0x000002e1

00000944 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     944:	b570      	push	{r4, r5, r6, lr}
     946:	b082      	sub	sp, #8
     948:	000e      	movs	r6, r1
     94a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     94c:	4b11      	ldr	r3, [pc, #68]	; (994 <sd_mmc_init_write_blocks+0x50>)
     94e:	4798      	blx	r3
     950:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     952:	d116      	bne.n	982 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     954:	2d01      	cmp	r5, #1
     956:	d917      	bls.n	988 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     958:	480f      	ldr	r0, [pc, #60]	; (998 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     95a:	4b10      	ldr	r3, [pc, #64]	; (99c <sd_mmc_init_write_blocks+0x58>)
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	7bdb      	ldrb	r3, [r3, #15]
     960:	071b      	lsls	r3, r3, #28
     962:	d400      	bmi.n	966 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     964:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     966:	2301      	movs	r3, #1
     968:	9300      	str	r3, [sp, #0]
     96a:	002b      	movs	r3, r5
     96c:	2280      	movs	r2, #128	; 0x80
     96e:	0092      	lsls	r2, r2, #2
     970:	0031      	movs	r1, r6
     972:	4e0b      	ldr	r6, [pc, #44]	; (9a0 <sd_mmc_init_write_blocks+0x5c>)
     974:	47b0      	blx	r6
     976:	2800      	cmp	r0, #0
     978:	d008      	beq.n	98c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     97a:	4b0a      	ldr	r3, [pc, #40]	; (9a4 <sd_mmc_init_write_blocks+0x60>)
     97c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     97e:	4b0a      	ldr	r3, [pc, #40]	; (9a8 <sd_mmc_init_write_blocks+0x64>)
     980:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     982:	0020      	movs	r0, r4
     984:	b002      	add	sp, #8
     986:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     988:	4808      	ldr	r0, [pc, #32]	; (9ac <sd_mmc_init_write_blocks+0x68>)
     98a:	e7e6      	b.n	95a <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     98c:	4b08      	ldr	r3, [pc, #32]	; (9b0 <sd_mmc_init_write_blocks+0x6c>)
     98e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     990:	2405      	movs	r4, #5
     992:	e7f6      	b.n	982 <sd_mmc_init_write_blocks+0x3e>
     994:	00000141 	.word	0x00000141
     998:	00109119 	.word	0x00109119
     99c:	20000360 	.word	0x20000360
     9a0:	00000f41 	.word	0x00000f41
     9a4:	20000364 	.word	0x20000364
     9a8:	20000366 	.word	0x20000366
     9ac:	00089118 	.word	0x00089118
     9b0:	000002e1 	.word	0x000002e1

000009b4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     9b4:	b510      	push	{r4, lr}
     9b6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     9b8:	4b07      	ldr	r3, [pc, #28]	; (9d8 <sd_mmc_start_write_blocks+0x24>)
     9ba:	4798      	blx	r3
     9bc:	2800      	cmp	r0, #0
     9be:	d104      	bne.n	9ca <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     9c0:	2200      	movs	r2, #0
     9c2:	4b06      	ldr	r3, [pc, #24]	; (9dc <sd_mmc_start_write_blocks+0x28>)
     9c4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     9c6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     9c8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     9ca:	4a04      	ldr	r2, [pc, #16]	; (9dc <sd_mmc_start_write_blocks+0x28>)
     9cc:	8813      	ldrh	r3, [r2, #0]
     9ce:	1b1c      	subs	r4, r3, r4
     9d0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     9d2:	2000      	movs	r0, #0
     9d4:	e7f8      	b.n	9c8 <sd_mmc_start_write_blocks+0x14>
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	000011fd 	.word	0x000011fd
     9dc:	20000364 	.word	0x20000364

000009e0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     9e0:	b510      	push	{r4, lr}
     9e2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     9e4:	4b0e      	ldr	r3, [pc, #56]	; (a20 <sd_mmc_wait_end_of_write_blocks+0x40>)
     9e6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     9e8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     9ea:	2800      	cmp	r0, #0
     9ec:	d101      	bne.n	9f2 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     9ee:	0018      	movs	r0, r3
     9f0:	bd10      	pop	{r4, pc}
	if (abort) {
     9f2:	2c00      	cmp	r4, #0
     9f4:	d00a      	beq.n	a0c <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     9f6:	2200      	movs	r2, #0
     9f8:	4b0a      	ldr	r3, [pc, #40]	; (a24 <sd_mmc_wait_end_of_write_blocks+0x44>)
     9fa:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     9fc:	4b0a      	ldr	r3, [pc, #40]	; (a28 <sd_mmc_wait_end_of_write_blocks+0x48>)
     9fe:	881b      	ldrh	r3, [r3, #0]
     a00:	2b01      	cmp	r3, #1
     a02:	d009      	beq.n	a18 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     a04:	4b09      	ldr	r3, [pc, #36]	; (a2c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     a06:	4798      	blx	r3
	return SD_MMC_OK;
     a08:	2300      	movs	r3, #0
     a0a:	e7f0      	b.n	9ee <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     a0c:	4b05      	ldr	r3, [pc, #20]	; (a24 <sd_mmc_wait_end_of_write_blocks+0x44>)
     a0e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     a10:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     a12:	2a00      	cmp	r2, #0
     a14:	d0f2      	beq.n	9fc <sd_mmc_wait_end_of_write_blocks+0x1c>
     a16:	e7ea      	b.n	9ee <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     a18:	4b04      	ldr	r3, [pc, #16]	; (a2c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     a1a:	4798      	blx	r3
		return SD_MMC_OK;
     a1c:	2300      	movs	r3, #0
     a1e:	e7e6      	b.n	9ee <sd_mmc_wait_end_of_write_blocks+0xe>
     a20:	0000127d 	.word	0x0000127d
     a24:	20000364 	.word	0x20000364
     a28:	20000366 	.word	0x20000366
     a2c:	000002e1 	.word	0x000002e1

00000a30 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     a30:	b510      	push	{r4, lr}
     a32:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
     a34:	4b0f      	ldr	r3, [pc, #60]	; (a74 <sd_mmc_test_unit_ready+0x44>)
     a36:	4798      	blx	r3
     a38:	2801      	cmp	r0, #1
     a3a:	d019      	beq.n	a70 <sd_mmc_test_unit_ready+0x40>
     a3c:	2800      	cmp	r0, #0
     a3e:	d003      	beq.n	a48 <sd_mmc_test_unit_ready+0x18>
     a40:	2802      	cmp	r0, #2
     a42:	d010      	beq.n	a66 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     a44:	2001      	movs	r0, #1
	}
}
     a46:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
     a48:	4b0b      	ldr	r3, [pc, #44]	; (a78 <sd_mmc_test_unit_ready+0x48>)
     a4a:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
     a4c:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
     a4e:	2b00      	cmp	r3, #0
     a50:	d1f9      	bne.n	a46 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     a52:	0020      	movs	r0, r4
     a54:	4b09      	ldr	r3, [pc, #36]	; (a7c <sd_mmc_test_unit_ready+0x4c>)
     a56:	4798      	blx	r3
     a58:	0003      	movs	r3, r0
     a5a:	2003      	movs	r0, #3
     a5c:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
     a5e:	4243      	negs	r3, r0
     a60:	4158      	adcs	r0, r3
     a62:	0040      	lsls	r0, r0, #1
     a64:	e7ef      	b.n	a46 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
     a66:	2200      	movs	r2, #0
     a68:	4b03      	ldr	r3, [pc, #12]	; (a78 <sd_mmc_test_unit_ready+0x48>)
     a6a:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
     a6c:	2002      	movs	r0, #2
     a6e:	e7ea      	b.n	a46 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
     a70:	2003      	movs	r0, #3
     a72:	e7e8      	b.n	a46 <sd_mmc_test_unit_ready+0x16>
     a74:	0000031d 	.word	0x0000031d
     a78:	2000036c 	.word	0x2000036c
     a7c:	000007cd 	.word	0x000007cd

00000a80 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
     a80:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
     a82:	2000      	movs	r0, #0
     a84:	4b01      	ldr	r3, [pc, #4]	; (a8c <sd_mmc_test_unit_ready_0+0xc>)
     a86:	4798      	blx	r3
}
     a88:	bd10      	pop	{r4, pc}
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	00000a31 	.word	0x00000a31

00000a90 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     a90:	b570      	push	{r4, r5, r6, lr}
     a92:	0004      	movs	r4, r0
     a94:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     a96:	4b04      	ldr	r3, [pc, #16]	; (aa8 <sd_mmc_read_capacity+0x18>)
     a98:	4798      	blx	r3
     a9a:	0040      	lsls	r0, r0, #1
     a9c:	3801      	subs	r0, #1
     a9e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     aa0:	0020      	movs	r0, r4
     aa2:	4b02      	ldr	r3, [pc, #8]	; (aac <sd_mmc_read_capacity+0x1c>)
     aa4:	4798      	blx	r3
}
     aa6:	bd70      	pop	{r4, r5, r6, pc}
     aa8:	000007f5 	.word	0x000007f5
     aac:	00000a31 	.word	0x00000a31

00000ab0 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
     ab0:	b510      	push	{r4, lr}
     ab2:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
     ab4:	2000      	movs	r0, #0
     ab6:	4b01      	ldr	r3, [pc, #4]	; (abc <sd_mmc_read_capacity_0+0xc>)
     ab8:	4798      	blx	r3
}
     aba:	bd10      	pop	{r4, pc}
     abc:	00000a91 	.word	0x00000a91

00000ac0 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
     ac0:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
     ac2:	2000      	movs	r0, #0
     ac4:	4b01      	ldr	r3, [pc, #4]	; (acc <sd_mmc_wr_protect_0+0xc>)
     ac6:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
     ac8:	bd10      	pop	{r4, pc}
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	0000081d 	.word	0x0000081d

00000ad0 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     ad0:	b510      	push	{r4, lr}
     ad2:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     ad4:	2201      	movs	r2, #1
     ad6:	4b0c      	ldr	r3, [pc, #48]	; (b08 <sd_mmc_mem_2_ram+0x38>)
     ad8:	4798      	blx	r3
     ada:	2800      	cmp	r0, #0
     adc:	d004      	beq.n	ae8 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     ade:	3802      	subs	r0, #2
     ae0:	4243      	negs	r3, r0
     ae2:	4158      	adcs	r0, r3
     ae4:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     ae6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     ae8:	2101      	movs	r1, #1
     aea:	0020      	movs	r0, r4
     aec:	4b07      	ldr	r3, [pc, #28]	; (b0c <sd_mmc_mem_2_ram+0x3c>)
     aee:	4798      	blx	r3
     af0:	0003      	movs	r3, r0
		return CTRL_FAIL;
     af2:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     af4:	2b00      	cmp	r3, #0
     af6:	d1f6      	bne.n	ae6 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
     af8:	2000      	movs	r0, #0
     afa:	4b05      	ldr	r3, [pc, #20]	; (b10 <sd_mmc_mem_2_ram+0x40>)
     afc:	4798      	blx	r3
     afe:	1e43      	subs	r3, r0, #1
     b00:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     b02:	b2c0      	uxtb	r0, r0
     b04:	e7ef      	b.n	ae6 <sd_mmc_mem_2_ram+0x16>
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	00000821 	.word	0x00000821
     b0c:	000008a9 	.word	0x000008a9
     b10:	000008d5 	.word	0x000008d5

00000b14 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
     b14:	b510      	push	{r4, lr}
     b16:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
     b18:	0001      	movs	r1, r0
     b1a:	2000      	movs	r0, #0
     b1c:	4b01      	ldr	r3, [pc, #4]	; (b24 <sd_mmc_mem_2_ram_0+0x10>)
     b1e:	4798      	blx	r3
}
     b20:	bd10      	pop	{r4, pc}
     b22:	46c0      	nop			; (mov r8, r8)
     b24:	00000ad1 	.word	0x00000ad1

00000b28 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     b28:	b510      	push	{r4, lr}
     b2a:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     b2c:	2201      	movs	r2, #1
     b2e:	4b0c      	ldr	r3, [pc, #48]	; (b60 <sd_mmc_ram_2_mem+0x38>)
     b30:	4798      	blx	r3
     b32:	2800      	cmp	r0, #0
     b34:	d004      	beq.n	b40 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     b36:	3802      	subs	r0, #2
     b38:	4243      	negs	r3, r0
     b3a:	4158      	adcs	r0, r3
     b3c:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     b3e:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     b40:	2101      	movs	r1, #1
     b42:	0020      	movs	r0, r4
     b44:	4b07      	ldr	r3, [pc, #28]	; (b64 <sd_mmc_ram_2_mem+0x3c>)
     b46:	4798      	blx	r3
     b48:	0003      	movs	r3, r0
		return CTRL_FAIL;
     b4a:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     b4c:	2b00      	cmp	r3, #0
     b4e:	d1f6      	bne.n	b3e <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
     b50:	2000      	movs	r0, #0
     b52:	4b05      	ldr	r3, [pc, #20]	; (b68 <sd_mmc_ram_2_mem+0x40>)
     b54:	4798      	blx	r3
     b56:	1e43      	subs	r3, r0, #1
     b58:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     b5a:	b2c0      	uxtb	r0, r0
     b5c:	e7ef      	b.n	b3e <sd_mmc_ram_2_mem+0x16>
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	00000945 	.word	0x00000945
     b64:	000009b5 	.word	0x000009b5
     b68:	000009e1 	.word	0x000009e1

00000b6c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
     b6c:	b510      	push	{r4, lr}
     b6e:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
     b70:	0001      	movs	r1, r0
     b72:	2000      	movs	r0, #0
     b74:	4b01      	ldr	r3, [pc, #4]	; (b7c <sd_mmc_ram_2_mem_0+0x10>)
     b76:	4798      	blx	r3
}
     b78:	bd10      	pop	{r4, pc}
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	00000b29 	.word	0x00000b29

00000b80 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
     b80:	b500      	push	{lr}
     b82:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
     b84:	466b      	mov	r3, sp
     b86:	1dd9      	adds	r1, r3, #7
     b88:	23ff      	movs	r3, #255	; 0xff
     b8a:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
     b8c:	2201      	movs	r2, #1
     b8e:	480b      	ldr	r0, [pc, #44]	; (bbc <sd_mmc_spi_start_write_block+0x3c>)
     b90:	4b0b      	ldr	r3, [pc, #44]	; (bc0 <sd_mmc_spi_start_write_block+0x40>)
     b92:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
     b94:	4b0b      	ldr	r3, [pc, #44]	; (bc4 <sd_mmc_spi_start_write_block+0x44>)
     b96:	881b      	ldrh	r3, [r3, #0]
     b98:	2b01      	cmp	r3, #1
     b9a:	d00a      	beq.n	bb2 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
     b9c:	22fc      	movs	r2, #252	; 0xfc
     b9e:	466b      	mov	r3, sp
     ba0:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
     ba2:	2201      	movs	r2, #1
     ba4:	466b      	mov	r3, sp
     ba6:	1d99      	adds	r1, r3, #6
     ba8:	4804      	ldr	r0, [pc, #16]	; (bbc <sd_mmc_spi_start_write_block+0x3c>)
     baa:	4b05      	ldr	r3, [pc, #20]	; (bc0 <sd_mmc_spi_start_write_block+0x40>)
     bac:	4798      	blx	r3
}
     bae:	b003      	add	sp, #12
     bb0:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
     bb2:	22fe      	movs	r2, #254	; 0xfe
     bb4:	466b      	mov	r3, sp
     bb6:	719a      	strb	r2, [r3, #6]
     bb8:	e7f3      	b.n	ba2 <sd_mmc_spi_start_write_block+0x22>
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	20000370 	.word	0x20000370
     bc0:	000052cd 	.word	0x000052cd
     bc4:	200003b4 	.word	0x200003b4

00000bc8 <sd_mmc_spi_wait_busy>:
{
     bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bca:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
     bcc:	466b      	mov	r3, sp
     bce:	1ddc      	adds	r4, r3, #7
     bd0:	23ff      	movs	r3, #255	; 0xff
     bd2:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     bd4:	4e12      	ldr	r6, [pc, #72]	; (c20 <sd_mmc_spi_wait_busy+0x58>)
     bd6:	2201      	movs	r2, #1
     bd8:	0021      	movs	r1, r4
     bda:	0030      	movs	r0, r6
     bdc:	4d11      	ldr	r5, [pc, #68]	; (c24 <sd_mmc_spi_wait_busy+0x5c>)
     bde:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     be0:	23ff      	movs	r3, #255	; 0xff
     be2:	2201      	movs	r2, #1
     be4:	0021      	movs	r1, r4
     be6:	0030      	movs	r0, r6
     be8:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     bea:	23ff      	movs	r3, #255	; 0xff
     bec:	2201      	movs	r2, #1
     bee:	0021      	movs	r1, r4
     bf0:	0030      	movs	r0, r6
     bf2:	47a8      	blx	r5
     bf4:	4c0c      	ldr	r4, [pc, #48]	; (c28 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
     bf6:	466b      	mov	r3, sp
     bf8:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     bfa:	4e09      	ldr	r6, [pc, #36]	; (c20 <sd_mmc_spi_wait_busy+0x58>)
     bfc:	4f09      	ldr	r7, [pc, #36]	; (c24 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
     bfe:	782b      	ldrb	r3, [r5, #0]
     c00:	2bff      	cmp	r3, #255	; 0xff
     c02:	d009      	beq.n	c18 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     c04:	23ff      	movs	r3, #255	; 0xff
     c06:	2201      	movs	r2, #1
     c08:	0029      	movs	r1, r5
     c0a:	0030      	movs	r0, r6
     c0c:	47b8      	blx	r7
     c0e:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
     c10:	2c00      	cmp	r4, #0
     c12:	d1f4      	bne.n	bfe <sd_mmc_spi_wait_busy+0x36>
			return false;
     c14:	2000      	movs	r0, #0
     c16:	e000      	b.n	c1a <sd_mmc_spi_wait_busy+0x52>
	return true;
     c18:	2001      	movs	r0, #1
}
     c1a:	b003      	add	sp, #12
     c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	20000370 	.word	0x20000370
     c24:	00005105 	.word	0x00005105
     c28:	00030d40 	.word	0x00030d40

00000c2c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
     c2c:	b570      	push	{r4, r5, r6, lr}
     c2e:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
     c30:	4b14      	ldr	r3, [pc, #80]	; (c84 <sd_mmc_spi_stop_multiwrite_block+0x58>)
     c32:	881c      	ldrh	r4, [r3, #0]
     c34:	2c01      	cmp	r4, #1
     c36:	d023      	beq.n	c80 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
     c38:	4b13      	ldr	r3, [pc, #76]	; (c88 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
     c3a:	8819      	ldrh	r1, [r3, #0]
     c3c:	4b13      	ldr	r3, [pc, #76]	; (c8c <sd_mmc_spi_stop_multiwrite_block+0x60>)
     c3e:	6818      	ldr	r0, [r3, #0]
     c40:	4b13      	ldr	r3, [pc, #76]	; (c90 <sd_mmc_spi_stop_multiwrite_block+0x64>)
     c42:	4798      	blx	r3
		return true; // It is not the End of multi write
     c44:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
     c46:	4284      	cmp	r4, r0
     c48:	d902      	bls.n	c50 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
     c4a:	0018      	movs	r0, r3
     c4c:	b002      	add	sp, #8
     c4e:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
     c50:	466b      	mov	r3, sp
     c52:	1ddc      	adds	r4, r3, #7
     c54:	23ff      	movs	r3, #255	; 0xff
     c56:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     c58:	4e0e      	ldr	r6, [pc, #56]	; (c94 <sd_mmc_spi_stop_multiwrite_block+0x68>)
     c5a:	2201      	movs	r2, #1
     c5c:	0021      	movs	r1, r4
     c5e:	0030      	movs	r0, r6
     c60:	4d0d      	ldr	r5, [pc, #52]	; (c98 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
     c62:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
     c64:	23fd      	movs	r3, #253	; 0xfd
     c66:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     c68:	2201      	movs	r2, #1
     c6a:	0021      	movs	r1, r4
     c6c:	0030      	movs	r0, r6
     c6e:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
     c70:	4b0a      	ldr	r3, [pc, #40]	; (c9c <sd_mmc_spi_stop_multiwrite_block+0x70>)
     c72:	4798      	blx	r3
     c74:	1e03      	subs	r3, r0, #0
     c76:	d1e8      	bne.n	c4a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
     c78:	2105      	movs	r1, #5
     c7a:	4a09      	ldr	r2, [pc, #36]	; (ca0 <sd_mmc_spi_stop_multiwrite_block+0x74>)
     c7c:	7011      	strb	r1, [r2, #0]
		return false;
     c7e:	e7e4      	b.n	c4a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
     c80:	2301      	movs	r3, #1
     c82:	e7e2      	b.n	c4a <sd_mmc_spi_stop_multiwrite_block+0x1e>
     c84:	200003b4 	.word	0x200003b4
     c88:	200003ac 	.word	0x200003ac
     c8c:	200003bc 	.word	0x200003bc
     c90:	0000b9bd 	.word	0x0000b9bd
     c94:	20000370 	.word	0x20000370
     c98:	000052cd 	.word	0x000052cd
     c9c:	00000bc9 	.word	0x00000bc9
     ca0:	200003b3 	.word	0x200003b3

00000ca4 <sd_mmc_spi_start_read_block>:
{
     ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca6:	b083      	sub	sp, #12
	token = 0;
     ca8:	2200      	movs	r2, #0
     caa:	466b      	mov	r3, sp
     cac:	71da      	strb	r2, [r3, #7]
     cae:	4c14      	ldr	r4, [pc, #80]	; (d00 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
     cb0:	466b      	mov	r3, sp
     cb2:	1ddd      	adds	r5, r3, #7
     cb4:	4e13      	ldr	r6, [pc, #76]	; (d04 <sd_mmc_spi_start_read_block+0x60>)
     cb6:	4f14      	ldr	r7, [pc, #80]	; (d08 <sd_mmc_spi_start_read_block+0x64>)
     cb8:	23ff      	movs	r3, #255	; 0xff
     cba:	2201      	movs	r2, #1
     cbc:	0029      	movs	r1, r5
     cbe:	0030      	movs	r0, r6
     cc0:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
     cc2:	782b      	ldrb	r3, [r5, #0]
     cc4:	220f      	movs	r2, #15
     cc6:	0019      	movs	r1, r3
     cc8:	4391      	bics	r1, r2
     cca:	1e0a      	subs	r2, r1, #0
     ccc:	d009      	beq.n	ce2 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
     cce:	2bfe      	cmp	r3, #254	; 0xfe
     cd0:	d013      	beq.n	cfa <sd_mmc_spi_start_read_block+0x56>
     cd2:	3c01      	subs	r4, #1
		if (i-- == 0) {
     cd4:	2c00      	cmp	r4, #0
     cd6:	d1ef      	bne.n	cb8 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
     cd8:	2204      	movs	r2, #4
     cda:	4b0c      	ldr	r3, [pc, #48]	; (d0c <sd_mmc_spi_start_read_block+0x68>)
     cdc:	701a      	strb	r2, [r3, #0]
			return false;
     cde:	2000      	movs	r0, #0
     ce0:	e00c      	b.n	cfc <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
     ce2:	075b      	lsls	r3, r3, #29
     ce4:	d004      	beq.n	cf0 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
     ce6:	3207      	adds	r2, #7
     ce8:	4b08      	ldr	r3, [pc, #32]	; (d0c <sd_mmc_spi_start_read_block+0x68>)
     cea:	701a      	strb	r2, [r3, #0]
			return false;
     cec:	2000      	movs	r0, #0
     cee:	e005      	b.n	cfc <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
     cf0:	220b      	movs	r2, #11
     cf2:	4b06      	ldr	r3, [pc, #24]	; (d0c <sd_mmc_spi_start_read_block+0x68>)
     cf4:	701a      	strb	r2, [r3, #0]
			return false;
     cf6:	2000      	movs	r0, #0
     cf8:	e000      	b.n	cfc <sd_mmc_spi_start_read_block+0x58>
	return true;
     cfa:	2001      	movs	r0, #1
}
     cfc:	b003      	add	sp, #12
     cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d00:	0007a120 	.word	0x0007a120
     d04:	20000370 	.word	0x20000370
     d08:	00005105 	.word	0x00005105
     d0c:	200003b3 	.word	0x200003b3

00000d10 <sd_mmc_spi_stop_write_block>:
{
     d10:	b530      	push	{r4, r5, lr}
     d12:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
     d14:	a901      	add	r1, sp, #4
     d16:	2301      	movs	r3, #1
     d18:	425b      	negs	r3, r3
     d1a:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
     d1c:	4d14      	ldr	r5, [pc, #80]	; (d70 <sd_mmc_spi_stop_write_block+0x60>)
     d1e:	2202      	movs	r2, #2
     d20:	0028      	movs	r0, r5
     d22:	4b14      	ldr	r3, [pc, #80]	; (d74 <sd_mmc_spi_stop_write_block+0x64>)
     d24:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
     d26:	466b      	mov	r3, sp
     d28:	1ddc      	adds	r4, r3, #7
     d2a:	23ff      	movs	r3, #255	; 0xff
     d2c:	2201      	movs	r2, #1
     d2e:	0021      	movs	r1, r4
     d30:	0028      	movs	r0, r5
     d32:	4d11      	ldr	r5, [pc, #68]	; (d78 <sd_mmc_spi_stop_write_block+0x68>)
     d34:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
     d36:	7822      	ldrb	r2, [r4, #0]
     d38:	2311      	movs	r3, #17
     d3a:	4013      	ands	r3, r2
     d3c:	2b01      	cmp	r3, #1
     d3e:	d005      	beq.n	d4c <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     d40:	2201      	movs	r2, #1
     d42:	4b0e      	ldr	r3, [pc, #56]	; (d7c <sd_mmc_spi_stop_write_block+0x6c>)
     d44:	701a      	strb	r2, [r3, #0]
		return false;
     d46:	2000      	movs	r0, #0
}
     d48:	b003      	add	sp, #12
     d4a:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
     d4c:	231e      	movs	r3, #30
     d4e:	401a      	ands	r2, r3
     d50:	2a04      	cmp	r2, #4
     d52:	d00b      	beq.n	d6c <sd_mmc_spi_stop_write_block+0x5c>
     d54:	2a0a      	cmp	r2, #10
     d56:	d104      	bne.n	d62 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
     d58:	3a02      	subs	r2, #2
     d5a:	4b08      	ldr	r3, [pc, #32]	; (d7c <sd_mmc_spi_stop_write_block+0x6c>)
     d5c:	701a      	strb	r2, [r3, #0]
		return false;
     d5e:	2000      	movs	r0, #0
     d60:	e7f2      	b.n	d48 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
     d62:	220a      	movs	r2, #10
     d64:	4b05      	ldr	r3, [pc, #20]	; (d7c <sd_mmc_spi_stop_write_block+0x6c>)
     d66:	701a      	strb	r2, [r3, #0]
		return false;
     d68:	2000      	movs	r0, #0
     d6a:	e7ed      	b.n	d48 <sd_mmc_spi_stop_write_block+0x38>
	return true;
     d6c:	2001      	movs	r0, #1
     d6e:	e7eb      	b.n	d48 <sd_mmc_spi_stop_write_block+0x38>
     d70:	20000370 	.word	0x20000370
     d74:	000052cd 	.word	0x000052cd
     d78:	00005105 	.word	0x00005105
     d7c:	200003b3 	.word	0x200003b3

00000d80 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
     d80:	b570      	push	{r4, r5, r6, lr}
     d82:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     d84:	2500      	movs	r5, #0
     d86:	4b30      	ldr	r3, [pc, #192]	; (e48 <sd_mmc_spi_init+0xc8>)
     d88:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
     d8a:	a90f      	add	r1, sp, #60	; 0x3c
     d8c:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     d8e:	2601      	movs	r6, #1
     d90:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
     d92:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
     d94:	2015      	movs	r0, #21
     d96:	4b2d      	ldr	r3, [pc, #180]	; (e4c <sd_mmc_spi_init+0xcc>)
     d98:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     d9a:	ac01      	add	r4, sp, #4
     d9c:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     d9e:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     da0:	9503      	str	r5, [sp, #12]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     da2:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     da4:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     da6:	74a6      	strb	r6, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     da8:	74e6      	strb	r6, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     daa:	7525      	strb	r5, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     dac:	2324      	movs	r3, #36	; 0x24
     dae:	54e5      	strb	r5, [r4, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     db0:	220c      	movs	r2, #12
     db2:	2100      	movs	r1, #0
     db4:	a807      	add	r0, sp, #28
     db6:	4b26      	ldr	r3, [pc, #152]	; (e50 <sd_mmc_spi_init+0xd0>)
     db8:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
     dba:	2380      	movs	r3, #128	; 0x80
     dbc:	025b      	lsls	r3, r3, #9
     dbe:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
     dc0:	4b24      	ldr	r3, [pc, #144]	; (e54 <sd_mmc_spi_init+0xd4>)
     dc2:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
     dc4:	4b24      	ldr	r3, [pc, #144]	; (e58 <sd_mmc_spi_init+0xd8>)
     dc6:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
     dc8:	4b24      	ldr	r3, [pc, #144]	; (e5c <sd_mmc_spi_init+0xdc>)
     dca:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
     dcc:	4b24      	ldr	r3, [pc, #144]	; (e60 <sd_mmc_spi_init+0xe0>)
     dce:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
     dd0:	4b24      	ldr	r3, [pc, #144]	; (e64 <sd_mmc_spi_init+0xe4>)
     dd2:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
     dd4:	4d24      	ldr	r5, [pc, #144]	; (e68 <sd_mmc_spi_init+0xe8>)
     dd6:	0022      	movs	r2, r4
     dd8:	4924      	ldr	r1, [pc, #144]	; (e6c <sd_mmc_spi_init+0xec>)
     dda:	0028      	movs	r0, r5
     ddc:	4b24      	ldr	r3, [pc, #144]	; (e70 <sd_mmc_spi_init+0xf0>)
     dde:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     de0:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     de2:	0020      	movs	r0, r4
     de4:	4b23      	ldr	r3, [pc, #140]	; (e74 <sd_mmc_spi_init+0xf4>)
     de6:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     de8:	231f      	movs	r3, #31
     dea:	4018      	ands	r0, r3
     dec:	4086      	lsls	r6, r0
     dee:	4b22      	ldr	r3, [pc, #136]	; (e78 <sd_mmc_spi_init+0xf8>)
     df0:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     df2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     df4:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     df6:	2b00      	cmp	r3, #0
     df8:	d1fc      	bne.n	df4 <sd_mmc_spi_init+0x74>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     dfa:	6823      	ldr	r3, [r4, #0]
     dfc:	2202      	movs	r2, #2
     dfe:	4313      	orrs	r3, r2
     e00:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     e02:	4a1e      	ldr	r2, [pc, #120]	; (e7c <sd_mmc_spi_init+0xfc>)
     e04:	2300      	movs	r3, #0
     e06:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
     e08:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
     e0a:	491d      	ldr	r1, [pc, #116]	; (e80 <sd_mmc_spi_init+0x100>)
     e0c:	7808      	ldrb	r0, [r1, #0]
     e0e:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
     e10:	4c1c      	ldr	r4, [pc, #112]	; (e84 <sd_mmc_spi_init+0x104>)
     e12:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
     e14:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     e16:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     e18:	2201      	movs	r2, #1
     e1a:	4669      	mov	r1, sp
     e1c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     e1e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     e20:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     e22:	4b0a      	ldr	r3, [pc, #40]	; (e4c <sd_mmc_spi_init+0xcc>)
     e24:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     e26:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
     e28:	09d1      	lsrs	r1, r2, #7
		return NULL;
     e2a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e2c:	2900      	cmp	r1, #0
     e2e:	d104      	bne.n	e3a <sd_mmc_spi_init+0xba>
		return &(ports[port_index]->Group[group_index]);
     e30:	0953      	lsrs	r3, r2, #5
     e32:	01db      	lsls	r3, r3, #7
     e34:	4914      	ldr	r1, [pc, #80]	; (e88 <sd_mmc_spi_init+0x108>)
     e36:	468c      	mov	ip, r1
     e38:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e3a:	211f      	movs	r1, #31
     e3c:	4011      	ands	r1, r2
     e3e:	2201      	movs	r2, #1
     e40:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     e42:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
     e44:	b010      	add	sp, #64	; 0x40
     e46:	bd70      	pop	{r4, r5, r6, pc}
     e48:	200003b3 	.word	0x200003b3
     e4c:	000047d1 	.word	0x000047d1
     e50:	0000bdaf 	.word	0x0000bdaf
     e54:	00100002 	.word	0x00100002
     e58:	00110002 	.word	0x00110002
     e5c:	00120002 	.word	0x00120002
     e60:	00130002 	.word	0x00130002
     e64:	00061a80 	.word	0x00061a80
     e68:	20000370 	.word	0x20000370
     e6c:	42000c00 	.word	0x42000c00
     e70:	00004f2d 	.word	0x00004f2d
     e74:	00004de5 	.word	0x00004de5
     e78:	e000e100 	.word	0xe000e100
     e7c:	200003c0 	.word	0x200003c0
     e80:	20000024 	.word	0x20000024
     e84:	200003b0 	.word	0x200003b0
     e88:	41004400 	.word	0x41004400

00000e8c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
     e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e8e:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e90:	2200      	movs	r2, #0
     e92:	4b0d      	ldr	r3, [pc, #52]	; (ec8 <sd_mmc_spi_select_device+0x3c>)
     e94:	701a      	strb	r2, [r3, #0]
     e96:	000c      	movs	r4, r1
     e98:	4b0c      	ldr	r3, [pc, #48]	; (ecc <sd_mmc_spi_select_device+0x40>)
     e9a:	4299      	cmp	r1, r3
     e9c:	d900      	bls.n	ea0 <sd_mmc_spi_select_device+0x14>
     e9e:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     ea0:	4d0b      	ldr	r5, [pc, #44]	; (ed0 <sd_mmc_spi_select_device+0x44>)
     ea2:	4e0c      	ldr	r6, [pc, #48]	; (ed4 <sd_mmc_spi_select_device+0x48>)
     ea4:	e001      	b.n	eaa <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
     ea6:	08e3      	lsrs	r3, r4, #3
     ea8:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     eaa:	0021      	movs	r1, r4
     eac:	0028      	movs	r0, r5
     eae:	47b0      	blx	r6
     eb0:	2817      	cmp	r0, #23
     eb2:	d0f8      	beq.n	ea6 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
     eb4:	0079      	lsls	r1, r7, #1
     eb6:	19cf      	adds	r7, r1, r7
     eb8:	4907      	ldr	r1, [pc, #28]	; (ed8 <sd_mmc_spi_select_device+0x4c>)
     eba:	19c9      	adds	r1, r1, r7
     ebc:	2201      	movs	r2, #1
     ebe:	4804      	ldr	r0, [pc, #16]	; (ed0 <sd_mmc_spi_select_device+0x44>)
     ec0:	4b06      	ldr	r3, [pc, #24]	; (edc <sd_mmc_spi_select_device+0x50>)
     ec2:	4798      	blx	r3
}
     ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	200003b3 	.word	0x200003b3
     ecc:	00989680 	.word	0x00989680
     ed0:	20000370 	.word	0x20000370
     ed4:	00004e75 	.word	0x00004e75
     ed8:	200003b0 	.word	0x200003b0
     edc:	000051d9 	.word	0x000051d9

00000ee0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
     ee0:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     ee2:	2200      	movs	r2, #0
     ee4:	4b04      	ldr	r3, [pc, #16]	; (ef8 <sd_mmc_spi_deselect_device+0x18>)
     ee6:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
     ee8:	0041      	lsls	r1, r0, #1
     eea:	1808      	adds	r0, r1, r0
     eec:	4903      	ldr	r1, [pc, #12]	; (efc <sd_mmc_spi_deselect_device+0x1c>)
     eee:	1809      	adds	r1, r1, r0
     ef0:	4803      	ldr	r0, [pc, #12]	; (f00 <sd_mmc_spi_deselect_device+0x20>)
     ef2:	4b04      	ldr	r3, [pc, #16]	; (f04 <sd_mmc_spi_deselect_device+0x24>)
     ef4:	4798      	blx	r3
}
     ef6:	bd10      	pop	{r4, pc}
     ef8:	200003b3 	.word	0x200003b3
     efc:	200003b0 	.word	0x200003b0
     f00:	20000370 	.word	0x20000370
     f04:	000051d9 	.word	0x000051d9

00000f08 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
     f08:	b570      	push	{r4, r5, r6, lr}
     f0a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
     f0c:	22ff      	movs	r2, #255	; 0xff
     f0e:	466b      	mov	r3, sp
     f10:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     f12:	2200      	movs	r2, #0
     f14:	4b07      	ldr	r3, [pc, #28]	; (f34 <sd_mmc_spi_send_clock+0x2c>)
     f16:	701a      	strb	r2, [r3, #0]
     f18:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
     f1a:	4e07      	ldr	r6, [pc, #28]	; (f38 <sd_mmc_spi_send_clock+0x30>)
     f1c:	4d07      	ldr	r5, [pc, #28]	; (f3c <sd_mmc_spi_send_clock+0x34>)
     f1e:	2201      	movs	r2, #1
     f20:	466b      	mov	r3, sp
     f22:	1dd9      	adds	r1, r3, #7
     f24:	0030      	movs	r0, r6
     f26:	47a8      	blx	r5
     f28:	3c01      	subs	r4, #1
     f2a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
     f2c:	2c00      	cmp	r4, #0
     f2e:	d1f6      	bne.n	f1e <sd_mmc_spi_send_clock+0x16>
	}
}
     f30:	b002      	add	sp, #8
     f32:	bd70      	pop	{r4, r5, r6, pc}
     f34:	200003b3 	.word	0x200003b3
     f38:	20000370 	.word	0x20000370
     f3c:	000052cd 	.word	0x000052cd

00000f40 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
     f40:	b5f0      	push	{r4, r5, r6, r7, lr}
     f42:	46c6      	mov	lr, r8
     f44:	b500      	push	{lr}
     f46:	b086      	sub	sp, #24
     f48:	4680      	mov	r8, r0
     f4a:	9200      	str	r2, [sp, #0]
     f4c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
     f4e:	22ff      	movs	r2, #255	; 0xff
     f50:	230f      	movs	r3, #15
     f52:	a802      	add	r0, sp, #8
     f54:	4684      	mov	ip, r0
     f56:	4463      	add	r3, ip
     f58:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     f5a:	2200      	movs	r2, #0
     f5c:	4b53      	ldr	r3, [pc, #332]	; (10ac <sd_mmc_spi_adtc_start+0x16c>)
     f5e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
     f60:	ab04      	add	r3, sp, #16
     f62:	323f      	adds	r2, #63	; 0x3f
     f64:	4640      	mov	r0, r8
     f66:	4002      	ands	r2, r0
     f68:	2040      	movs	r0, #64	; 0x40
     f6a:	4302      	orrs	r2, r0
     f6c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
     f6e:	0e0a      	lsrs	r2, r1, #24
     f70:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
     f72:	0c0a      	lsrs	r2, r1, #16
     f74:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
     f76:	0a0a      	lsrs	r2, r1, #8
     f78:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
     f7a:	7119      	strb	r1, [r3, #4]
     f7c:	2700      	movs	r7, #0
	crc = 0;
     f7e:	2300      	movs	r3, #0
		value = *buf++;
     f80:	a904      	add	r1, sp, #16
     f82:	2208      	movs	r2, #8
				crc ^= 0x09;
     f84:	2409      	movs	r4, #9
     f86:	e011      	b.n	fac <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
     f88:	0076      	lsls	r6, r6, #1
     f8a:	b2f6      	uxtb	r6, r6
     f8c:	3801      	subs	r0, #1
     f8e:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
     f90:	2800      	cmp	r0, #0
     f92:	d008      	beq.n	fa6 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
     f94:	005b      	lsls	r3, r3, #1
     f96:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
     f98:	001d      	movs	r5, r3
     f9a:	4075      	eors	r5, r6
     f9c:	062d      	lsls	r5, r5, #24
     f9e:	d5f3      	bpl.n	f88 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
     fa0:	4063      	eors	r3, r4
     fa2:	b2db      	uxtb	r3, r3
     fa4:	e7f0      	b.n	f88 <sd_mmc_spi_adtc_start+0x48>
     fa6:	3701      	adds	r7, #1
	while (size--) {
     fa8:	2f05      	cmp	r7, #5
     faa:	d002      	beq.n	fb2 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
     fac:	5c7e      	ldrb	r6, [r7, r1]
     fae:	0010      	movs	r0, r2
     fb0:	e7f0      	b.n	f94 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
     fb2:	005b      	lsls	r3, r3, #1
     fb4:	2201      	movs	r2, #1
     fb6:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
     fb8:	ac04      	add	r4, sp, #16
     fba:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
     fbc:	4e3c      	ldr	r6, [pc, #240]	; (10b0 <sd_mmc_spi_adtc_start+0x170>)
     fbe:	2201      	movs	r2, #1
     fc0:	210f      	movs	r1, #15
     fc2:	ab02      	add	r3, sp, #8
     fc4:	469c      	mov	ip, r3
     fc6:	4461      	add	r1, ip
     fc8:	0030      	movs	r0, r6
     fca:	4f3a      	ldr	r7, [pc, #232]	; (10b4 <sd_mmc_spi_adtc_start+0x174>)
     fcc:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
     fce:	2206      	movs	r2, #6
     fd0:	0021      	movs	r1, r4
     fd2:	0030      	movs	r0, r6
     fd4:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
     fd6:	ab02      	add	r3, sp, #8
     fd8:	1dd9      	adds	r1, r3, #7
     fda:	23ff      	movs	r3, #255	; 0xff
     fdc:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     fde:	2201      	movs	r2, #1
     fe0:	0030      	movs	r0, r6
     fe2:	4e35      	ldr	r6, [pc, #212]	; (10b8 <sd_mmc_spi_adtc_start+0x178>)
     fe4:	47b0      	blx	r6
     fe6:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     fe8:	ab02      	add	r3, sp, #8
     fea:	1dde      	adds	r6, r3, #7
     fec:	4f30      	ldr	r7, [pc, #192]	; (10b0 <sd_mmc_spi_adtc_start+0x170>)
     fee:	4d32      	ldr	r5, [pc, #200]	; (10b8 <sd_mmc_spi_adtc_start+0x178>)
     ff0:	23ff      	movs	r3, #255	; 0xff
     ff2:	2201      	movs	r2, #1
     ff4:	0031      	movs	r1, r6
     ff6:	0038      	movs	r0, r7
     ff8:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
     ffa:	7833      	ldrb	r3, [r6, #0]
     ffc:	b25a      	sxtb	r2, r3
     ffe:	2a00      	cmp	r2, #0
    1000:	da0b      	bge.n	101a <sd_mmc_spi_adtc_start+0xda>
    1002:	3c01      	subs	r4, #1
    1004:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    1006:	2c00      	cmp	r4, #0
    1008:	d1f2      	bne.n	ff0 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    100a:	2202      	movs	r2, #2
    100c:	4b27      	ldr	r3, [pc, #156]	; (10ac <sd_mmc_spi_adtc_start+0x16c>)
    100e:	701a      	strb	r2, [r3, #0]
			return false;
    1010:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    1012:	b006      	add	sp, #24
    1014:	bc04      	pop	{r2}
    1016:	4690      	mov	r8, r2
    1018:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    101a:	4a28      	ldr	r2, [pc, #160]	; (10bc <sd_mmc_spi_adtc_start+0x17c>)
    101c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    101e:	071a      	lsls	r2, r3, #28
    1020:	d41a      	bmi.n	1058 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    1022:	075a      	lsls	r2, r3, #29
    1024:	d41d      	bmi.n	1062 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    1026:	2201      	movs	r2, #1
    1028:	4393      	bics	r3, r2
    102a:	d11f      	bne.n	106c <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    102c:	4643      	mov	r3, r8
    102e:	049b      	lsls	r3, r3, #18
    1030:	d420      	bmi.n	1074 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    1032:	4643      	mov	r3, r8
    1034:	059b      	lsls	r3, r3, #22
    1036:	d425      	bmi.n	1084 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    1038:	4643      	mov	r3, r8
    103a:	055b      	lsls	r3, r3, #21
    103c:	d42b      	bmi.n	1096 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    103e:	4b20      	ldr	r3, [pc, #128]	; (10c0 <sd_mmc_spi_adtc_start+0x180>)
    1040:	466a      	mov	r2, sp
    1042:	8812      	ldrh	r2, [r2, #0]
    1044:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    1046:	4b1f      	ldr	r3, [pc, #124]	; (10c4 <sd_mmc_spi_adtc_start+0x184>)
    1048:	466a      	mov	r2, sp
    104a:	8892      	ldrh	r2, [r2, #4]
    104c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    104e:	2200      	movs	r2, #0
    1050:	4b1d      	ldr	r3, [pc, #116]	; (10c8 <sd_mmc_spi_adtc_start+0x188>)
    1052:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    1054:	2001      	movs	r0, #1
    1056:	e7dc      	b.n	1012 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    1058:	2206      	movs	r2, #6
    105a:	4b14      	ldr	r3, [pc, #80]	; (10ac <sd_mmc_spi_adtc_start+0x16c>)
    105c:	701a      	strb	r2, [r3, #0]
		return false;
    105e:	2000      	movs	r0, #0
    1060:	e7d7      	b.n	1012 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    1062:	2209      	movs	r2, #9
    1064:	4b11      	ldr	r3, [pc, #68]	; (10ac <sd_mmc_spi_adtc_start+0x16c>)
    1066:	701a      	strb	r2, [r3, #0]
		return false;
    1068:	2000      	movs	r0, #0
    106a:	e7d2      	b.n	1012 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    106c:	4b0f      	ldr	r3, [pc, #60]	; (10ac <sd_mmc_spi_adtc_start+0x16c>)
    106e:	701a      	strb	r2, [r3, #0]
		return false;
    1070:	2000      	movs	r0, #0
    1072:	e7ce      	b.n	1012 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    1074:	4b15      	ldr	r3, [pc, #84]	; (10cc <sd_mmc_spi_adtc_start+0x18c>)
    1076:	4798      	blx	r3
    1078:	2800      	cmp	r0, #0
    107a:	d1da      	bne.n	1032 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    107c:	2203      	movs	r2, #3
    107e:	4b0b      	ldr	r3, [pc, #44]	; (10ac <sd_mmc_spi_adtc_start+0x16c>)
    1080:	701a      	strb	r2, [r3, #0]
			return false;
    1082:	e7c6      	b.n	1012 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    1084:	490d      	ldr	r1, [pc, #52]	; (10bc <sd_mmc_spi_adtc_start+0x17c>)
    1086:	2300      	movs	r3, #0
    1088:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    108a:	33ff      	adds	r3, #255	; 0xff
    108c:	2201      	movs	r2, #1
    108e:	4808      	ldr	r0, [pc, #32]	; (10b0 <sd_mmc_spi_adtc_start+0x170>)
    1090:	4e09      	ldr	r6, [pc, #36]	; (10b8 <sd_mmc_spi_adtc_start+0x178>)
    1092:	47b0      	blx	r6
    1094:	e7d0      	b.n	1038 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    1096:	4e09      	ldr	r6, [pc, #36]	; (10bc <sd_mmc_spi_adtc_start+0x17c>)
    1098:	23ff      	movs	r3, #255	; 0xff
    109a:	2204      	movs	r2, #4
    109c:	0031      	movs	r1, r6
    109e:	4804      	ldr	r0, [pc, #16]	; (10b0 <sd_mmc_spi_adtc_start+0x170>)
    10a0:	4f05      	ldr	r7, [pc, #20]	; (10b8 <sd_mmc_spi_adtc_start+0x178>)
    10a2:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    10a4:	6833      	ldr	r3, [r6, #0]
    10a6:	ba1b      	rev	r3, r3
    10a8:	6033      	str	r3, [r6, #0]
    10aa:	e7c8      	b.n	103e <sd_mmc_spi_adtc_start+0xfe>
    10ac:	200003b3 	.word	0x200003b3
    10b0:	20000370 	.word	0x20000370
    10b4:	000052cd 	.word	0x000052cd
    10b8:	00005105 	.word	0x00005105
    10bc:	200003b8 	.word	0x200003b8
    10c0:	200003ac 	.word	0x200003ac
    10c4:	200003b4 	.word	0x200003b4
    10c8:	200003bc 	.word	0x200003bc
    10cc:	00000bc9 	.word	0x00000bc9

000010d0 <sd_mmc_spi_send_cmd>:
{
    10d0:	b510      	push	{r4, lr}
    10d2:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    10d4:	2300      	movs	r3, #0
    10d6:	9300      	str	r3, [sp, #0]
    10d8:	2200      	movs	r2, #0
    10da:	4c02      	ldr	r4, [pc, #8]	; (10e4 <sd_mmc_spi_send_cmd+0x14>)
    10dc:	47a0      	blx	r4
}
    10de:	b002      	add	sp, #8
    10e0:	bd10      	pop	{r4, pc}
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	00000f41 	.word	0x00000f41

000010e8 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    10e8:	4b01      	ldr	r3, [pc, #4]	; (10f0 <sd_mmc_spi_get_response+0x8>)
    10ea:	6818      	ldr	r0, [r3, #0]
}
    10ec:	4770      	bx	lr
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	200003b8 	.word	0x200003b8

000010f4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    10f4:	b510      	push	{r4, lr}
    10f6:	b084      	sub	sp, #16
    10f8:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    10fa:	2200      	movs	r2, #0
    10fc:	4b14      	ldr	r3, [pc, #80]	; (1150 <sd_mmc_spi_read_word+0x5c>)
    10fe:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1100:	4b14      	ldr	r3, [pc, #80]	; (1154 <sd_mmc_spi_read_word+0x60>)
    1102:	8819      	ldrh	r1, [r3, #0]
    1104:	4b14      	ldr	r3, [pc, #80]	; (1158 <sd_mmc_spi_read_word+0x64>)
    1106:	6818      	ldr	r0, [r3, #0]
    1108:	4b14      	ldr	r3, [pc, #80]	; (115c <sd_mmc_spi_read_word+0x68>)
    110a:	4798      	blx	r3
    110c:	2900      	cmp	r1, #0
    110e:	d103      	bne.n	1118 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    1110:	4b13      	ldr	r3, [pc, #76]	; (1160 <sd_mmc_spi_read_word+0x6c>)
    1112:	4798      	blx	r3
    1114:	2800      	cmp	r0, #0
    1116:	d010      	beq.n	113a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    1118:	23ff      	movs	r3, #255	; 0xff
    111a:	2204      	movs	r2, #4
    111c:	a901      	add	r1, sp, #4
    111e:	4811      	ldr	r0, [pc, #68]	; (1164 <sd_mmc_spi_read_word+0x70>)
    1120:	4c11      	ldr	r4, [pc, #68]	; (1168 <sd_mmc_spi_read_word+0x74>)
    1122:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    1124:	4b0c      	ldr	r3, [pc, #48]	; (1158 <sd_mmc_spi_read_word+0x64>)
    1126:	681a      	ldr	r2, [r3, #0]
    1128:	1d10      	adds	r0, r2, #4
    112a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    112c:	4b09      	ldr	r3, [pc, #36]	; (1154 <sd_mmc_spi_read_word+0x60>)
    112e:	8819      	ldrh	r1, [r3, #0]
    1130:	4b0a      	ldr	r3, [pc, #40]	; (115c <sd_mmc_spi_read_word+0x68>)
    1132:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    1134:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1136:	2900      	cmp	r1, #0
    1138:	d001      	beq.n	113e <sd_mmc_spi_read_word+0x4a>
}
    113a:	b004      	add	sp, #16
    113c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    113e:	23ff      	movs	r3, #255	; 0xff
    1140:	2202      	movs	r2, #2
    1142:	a903      	add	r1, sp, #12
    1144:	4807      	ldr	r0, [pc, #28]	; (1164 <sd_mmc_spi_read_word+0x70>)
    1146:	4c08      	ldr	r4, [pc, #32]	; (1168 <sd_mmc_spi_read_word+0x74>)
    1148:	47a0      	blx	r4
	return true;
    114a:	2001      	movs	r0, #1
    114c:	e7f5      	b.n	113a <sd_mmc_spi_read_word+0x46>
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	200003b3 	.word	0x200003b3
    1154:	200003ac 	.word	0x200003ac
    1158:	200003bc 	.word	0x200003bc
    115c:	0000bac9 	.word	0x0000bac9
    1160:	00000ca5 	.word	0x00000ca5
    1164:	20000370 	.word	0x20000370
    1168:	00005105 	.word	0x00005105

0000116c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    116c:	b5f0      	push	{r4, r5, r6, r7, lr}
    116e:	46de      	mov	lr, fp
    1170:	4657      	mov	r7, sl
    1172:	4646      	mov	r6, r8
    1174:	b5c0      	push	{r6, r7, lr}
    1176:	b082      	sub	sp, #8
    1178:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    117a:	2200      	movs	r2, #0
    117c:	4b17      	ldr	r3, [pc, #92]	; (11dc <sd_mmc_spi_start_read_blocks+0x70>)
    117e:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    1180:	1e4c      	subs	r4, r1, #1
    1182:	b2a4      	uxth	r4, r4
    1184:	2900      	cmp	r1, #0
    1186:	d026      	beq.n	11d6 <sd_mmc_spi_start_read_blocks+0x6a>
    1188:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    118a:	4b15      	ldr	r3, [pc, #84]	; (11e0 <sd_mmc_spi_start_read_blocks+0x74>)
    118c:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    118e:	4f15      	ldr	r7, [pc, #84]	; (11e4 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    1190:	47d0      	blx	sl
    1192:	4680      	mov	r8, r0
    1194:	2800      	cmp	r0, #0
    1196:	d017      	beq.n	11c8 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1198:	883a      	ldrh	r2, [r7, #0]
    119a:	465b      	mov	r3, fp
    119c:	1999      	adds	r1, r3, r6
    119e:	23ff      	movs	r3, #255	; 0xff
    11a0:	4811      	ldr	r0, [pc, #68]	; (11e8 <sd_mmc_spi_start_read_blocks+0x7c>)
    11a2:	4d12      	ldr	r5, [pc, #72]	; (11ec <sd_mmc_spi_start_read_blocks+0x80>)
    11a4:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    11a6:	883b      	ldrh	r3, [r7, #0]
    11a8:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    11aa:	4a11      	ldr	r2, [pc, #68]	; (11f0 <sd_mmc_spi_start_read_blocks+0x84>)
    11ac:	6811      	ldr	r1, [r2, #0]
    11ae:	468c      	mov	ip, r1
    11b0:	4463      	add	r3, ip
    11b2:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    11b4:	23ff      	movs	r3, #255	; 0xff
    11b6:	2202      	movs	r2, #2
    11b8:	a901      	add	r1, sp, #4
    11ba:	480b      	ldr	r0, [pc, #44]	; (11e8 <sd_mmc_spi_start_read_blocks+0x7c>)
    11bc:	47a8      	blx	r5
	while (nb_block--) {
    11be:	3c01      	subs	r4, #1
    11c0:	b2a4      	uxth	r4, r4
    11c2:	4b0c      	ldr	r3, [pc, #48]	; (11f4 <sd_mmc_spi_start_read_blocks+0x88>)
    11c4:	429c      	cmp	r4, r3
    11c6:	d1e3      	bne.n	1190 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    11c8:	4640      	mov	r0, r8
    11ca:	b002      	add	sp, #8
    11cc:	bc1c      	pop	{r2, r3, r4}
    11ce:	4690      	mov	r8, r2
    11d0:	469a      	mov	sl, r3
    11d2:	46a3      	mov	fp, r4
    11d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    11d6:	2301      	movs	r3, #1
    11d8:	4698      	mov	r8, r3
    11da:	e7f5      	b.n	11c8 <sd_mmc_spi_start_read_blocks+0x5c>
    11dc:	200003b3 	.word	0x200003b3
    11e0:	00000ca5 	.word	0x00000ca5
    11e4:	200003ac 	.word	0x200003ac
    11e8:	20000370 	.word	0x20000370
    11ec:	00005105 	.word	0x00005105
    11f0:	200003bc 	.word	0x200003bc
    11f4:	0000ffff 	.word	0x0000ffff

000011f8 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    11f8:	2001      	movs	r0, #1
    11fa:	4770      	bx	lr

000011fc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    11fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    11fe:	46c6      	mov	lr, r8
    1200:	b500      	push	{lr}
    1202:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1204:	2200      	movs	r2, #0
    1206:	4b15      	ldr	r3, [pc, #84]	; (125c <sd_mmc_spi_start_write_blocks+0x60>)
    1208:	701a      	strb	r2, [r3, #0]
	pos = 0;
    120a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    120c:	4f14      	ldr	r7, [pc, #80]	; (1260 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    120e:	4e15      	ldr	r6, [pc, #84]	; (1264 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    1210:	e000      	b.n	1214 <sd_mmc_spi_start_write_blocks+0x18>
{
    1212:	0021      	movs	r1, r4
	while (nb_block--) {
    1214:	1e4c      	subs	r4, r1, #1
    1216:	b2a4      	uxth	r4, r4
    1218:	2900      	cmp	r1, #0
    121a:	d01b      	beq.n	1254 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    121c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    121e:	8832      	ldrh	r2, [r6, #0]
    1220:	4643      	mov	r3, r8
    1222:	1959      	adds	r1, r3, r5
    1224:	4810      	ldr	r0, [pc, #64]	; (1268 <sd_mmc_spi_start_write_blocks+0x6c>)
    1226:	4b11      	ldr	r3, [pc, #68]	; (126c <sd_mmc_spi_start_write_blocks+0x70>)
    1228:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    122a:	8833      	ldrh	r3, [r6, #0]
    122c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    122e:	4a10      	ldr	r2, [pc, #64]	; (1270 <sd_mmc_spi_start_write_blocks+0x74>)
    1230:	6811      	ldr	r1, [r2, #0]
    1232:	468c      	mov	ip, r1
    1234:	4463      	add	r3, ip
    1236:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    1238:	4b0e      	ldr	r3, [pc, #56]	; (1274 <sd_mmc_spi_start_write_blocks+0x78>)
    123a:	4798      	blx	r3
    123c:	2800      	cmp	r0, #0
    123e:	d00a      	beq.n	1256 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    1240:	2c00      	cmp	r4, #0
    1242:	d0e6      	beq.n	1212 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    1244:	4b0c      	ldr	r3, [pc, #48]	; (1278 <sd_mmc_spi_start_write_blocks+0x7c>)
    1246:	4798      	blx	r3
    1248:	2800      	cmp	r0, #0
    124a:	d1e2      	bne.n	1212 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    124c:	2205      	movs	r2, #5
    124e:	4b03      	ldr	r3, [pc, #12]	; (125c <sd_mmc_spi_start_write_blocks+0x60>)
    1250:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    1252:	e000      	b.n	1256 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    1254:	2001      	movs	r0, #1
}
    1256:	bc04      	pop	{r2}
    1258:	4690      	mov	r8, r2
    125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    125c:	200003b3 	.word	0x200003b3
    1260:	00000b81 	.word	0x00000b81
    1264:	200003ac 	.word	0x200003ac
    1268:	20000370 	.word	0x20000370
    126c:	000052cd 	.word	0x000052cd
    1270:	200003bc 	.word	0x200003bc
    1274:	00000d11 	.word	0x00000d11
    1278:	00000bc9 	.word	0x00000bc9

0000127c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    127c:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    127e:	4b05      	ldr	r3, [pc, #20]	; (1294 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    1280:	4798      	blx	r3
    1282:	2800      	cmp	r0, #0
    1284:	d103      	bne.n	128e <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1286:	2205      	movs	r2, #5
    1288:	4b03      	ldr	r3, [pc, #12]	; (1298 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    128a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    128c:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    128e:	4b03      	ldr	r3, [pc, #12]	; (129c <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    1290:	4798      	blx	r3
    1292:	e7fb      	b.n	128c <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    1294:	00000bc9 	.word	0x00000bc9
    1298:	200003b3 	.word	0x200003b3
    129c:	00000c2d 	.word	0x00000c2d

000012a0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    12a0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    12a2:	2000      	movs	r0, #0
    12a4:	4b08      	ldr	r3, [pc, #32]	; (12c8 <delay_init+0x28>)
    12a6:	4798      	blx	r3
    12a8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    12aa:	4c08      	ldr	r4, [pc, #32]	; (12cc <delay_init+0x2c>)
    12ac:	21fa      	movs	r1, #250	; 0xfa
    12ae:	0089      	lsls	r1, r1, #2
    12b0:	47a0      	blx	r4
    12b2:	4b07      	ldr	r3, [pc, #28]	; (12d0 <delay_init+0x30>)
    12b4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    12b6:	4907      	ldr	r1, [pc, #28]	; (12d4 <delay_init+0x34>)
    12b8:	0028      	movs	r0, r5
    12ba:	47a0      	blx	r4
    12bc:	4b06      	ldr	r3, [pc, #24]	; (12d8 <delay_init+0x38>)
    12be:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    12c0:	2205      	movs	r2, #5
    12c2:	4b06      	ldr	r3, [pc, #24]	; (12dc <delay_init+0x3c>)
    12c4:	601a      	str	r2, [r3, #0]
}
    12c6:	bd70      	pop	{r4, r5, r6, pc}
    12c8:	0000600d 	.word	0x0000600d
    12cc:	0000b9bd 	.word	0x0000b9bd
    12d0:	20000028 	.word	0x20000028
    12d4:	000f4240 	.word	0x000f4240
    12d8:	2000002c 	.word	0x2000002c
    12dc:	e000e010 	.word	0xe000e010

000012e0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    12e0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    12e2:	4b08      	ldr	r3, [pc, #32]	; (1304 <delay_cycles_ms+0x24>)
    12e4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    12e6:	4a08      	ldr	r2, [pc, #32]	; (1308 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    12e8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    12ea:	2180      	movs	r1, #128	; 0x80
    12ec:	0249      	lsls	r1, r1, #9
	while (n--) {
    12ee:	3801      	subs	r0, #1
    12f0:	d307      	bcc.n	1302 <delay_cycles_ms+0x22>
	if (n > 0) {
    12f2:	2c00      	cmp	r4, #0
    12f4:	d0fb      	beq.n	12ee <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    12f6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    12f8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    12fa:	6813      	ldr	r3, [r2, #0]
    12fc:	420b      	tst	r3, r1
    12fe:	d0fc      	beq.n	12fa <delay_cycles_ms+0x1a>
    1300:	e7f5      	b.n	12ee <delay_cycles_ms+0xe>
	}
}
    1302:	bd30      	pop	{r4, r5, pc}
    1304:	20000028 	.word	0x20000028
    1308:	e000e010 	.word	0xe000e010

0000130c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    130c:	b510      	push	{r4, lr}
	if (gpfIsr) {
    130e:	4b03      	ldr	r3, [pc, #12]	; (131c <chip_isr+0x10>)
    1310:	681b      	ldr	r3, [r3, #0]
    1312:	2b00      	cmp	r3, #0
    1314:	d000      	beq.n	1318 <chip_isr+0xc>
		gpfIsr();
    1316:	4798      	blx	r3
	}
}
    1318:	bd10      	pop	{r4, pc}
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	200003c4 	.word	0x200003c4

00001320 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    1320:	b570      	push	{r4, r5, r6, lr}
    1322:	b082      	sub	sp, #8
	gpfIsr = NULL;
    1324:	2300      	movs	r3, #0
    1326:	4a15      	ldr	r2, [pc, #84]	; (137c <nm_bsp_init+0x5c>)
    1328:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    132a:	ac01      	add	r4, sp, #4
    132c:	2501      	movs	r5, #1
    132e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1330:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1332:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    1334:	0021      	movs	r1, r4
    1336:	201b      	movs	r0, #27
    1338:	4e11      	ldr	r6, [pc, #68]	; (1380 <nm_bsp_init+0x60>)
    133a:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    133c:	0021      	movs	r1, r4
    133e:	201c      	movs	r0, #28
    1340:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    1342:	0021      	movs	r1, r4
    1344:	2028      	movs	r0, #40	; 0x28
    1346:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1348:	4b0e      	ldr	r3, [pc, #56]	; (1384 <nm_bsp_init+0x64>)
    134a:	2280      	movs	r2, #128	; 0x80
    134c:	0552      	lsls	r2, r2, #21
    134e:	615a      	str	r2, [r3, #20]
    1350:	2280      	movs	r2, #128	; 0x80
    1352:	0512      	lsls	r2, r2, #20
    1354:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    1356:	4b0c      	ldr	r3, [pc, #48]	; (1388 <nm_bsp_init+0x68>)
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	421d      	tst	r5, r3
    135c:	d003      	beq.n	1366 <nm_bsp_init+0x46>
    135e:	4b0a      	ldr	r3, [pc, #40]	; (1388 <nm_bsp_init+0x68>)
    1360:	681b      	ldr	r3, [r3, #0]
    1362:	079b      	lsls	r3, r3, #30
    1364:	d401      	bmi.n	136a <nm_bsp_init+0x4a>
	    delay_init();
    1366:	4b09      	ldr	r3, [pc, #36]	; (138c <nm_bsp_init+0x6c>)
    1368:	4798      	blx	r3
	cpu_irq_enable();
    136a:	2201      	movs	r2, #1
    136c:	4b08      	ldr	r3, [pc, #32]	; (1390 <nm_bsp_init+0x70>)
    136e:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1370:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1374:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    1376:	2000      	movs	r0, #0
    1378:	b002      	add	sp, #8
    137a:	bd70      	pop	{r4, r5, r6, pc}
    137c:	200003c4 	.word	0x200003c4
    1380:	000047d1 	.word	0x000047d1
    1384:	41004400 	.word	0x41004400
    1388:	e000e010 	.word	0xe000e010
    138c:	000012a1 	.word	0x000012a1
    1390:	20000032 	.word	0x20000032

00001394 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1394:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    1396:	1e44      	subs	r4, r0, #1
    1398:	2800      	cmp	r0, #0
    139a:	d004      	beq.n	13a6 <nm_bsp_sleep+0x12>
		delay_ms(1);
    139c:	4d02      	ldr	r5, [pc, #8]	; (13a8 <nm_bsp_sleep+0x14>)
    139e:	2001      	movs	r0, #1
    13a0:	47a8      	blx	r5
	while (u32TimeMsec--) {
    13a2:	3c01      	subs	r4, #1
    13a4:	d2fb      	bcs.n	139e <nm_bsp_sleep+0xa>
	}
}
    13a6:	bd70      	pop	{r4, r5, r6, pc}
    13a8:	000012e1 	.word	0x000012e1

000013ac <nm_bsp_reset>:
{
    13ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13ae:	4c07      	ldr	r4, [pc, #28]	; (13cc <nm_bsp_reset+0x20>)
    13b0:	2780      	movs	r7, #128	; 0x80
    13b2:	057f      	lsls	r7, r7, #21
    13b4:	6167      	str	r7, [r4, #20]
    13b6:	2580      	movs	r5, #128	; 0x80
    13b8:	052d      	lsls	r5, r5, #20
    13ba:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    13bc:	2001      	movs	r0, #1
    13be:	4e04      	ldr	r6, [pc, #16]	; (13d0 <nm_bsp_reset+0x24>)
    13c0:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    13c2:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    13c4:	200a      	movs	r0, #10
    13c6:	47b0      	blx	r6
    13c8:	61a5      	str	r5, [r4, #24]
}
    13ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13cc:	41004400 	.word	0x41004400
    13d0:	00001395 	.word	0x00001395

000013d4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    13d4:	b510      	push	{r4, lr}
    13d6:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    13d8:	4b0e      	ldr	r3, [pc, #56]	; (1414 <nm_bsp_register_isr+0x40>)
    13da:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    13dc:	ac01      	add	r4, sp, #4
    13de:	0020      	movs	r0, r4
    13e0:	4b0d      	ldr	r3, [pc, #52]	; (1418 <nm_bsp_register_isr+0x44>)
    13e2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    13e4:	2329      	movs	r3, #41	; 0x29
    13e6:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    13e8:	2300      	movs	r3, #0
    13ea:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    13ec:	3301      	adds	r3, #1
    13ee:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    13f0:	3301      	adds	r3, #1
    13f2:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    13f4:	0021      	movs	r1, r4
    13f6:	2009      	movs	r0, #9
    13f8:	4b08      	ldr	r3, [pc, #32]	; (141c <nm_bsp_register_isr+0x48>)
    13fa:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    13fc:	2200      	movs	r2, #0
    13fe:	2109      	movs	r1, #9
    1400:	4807      	ldr	r0, [pc, #28]	; (1420 <nm_bsp_register_isr+0x4c>)
    1402:	4b08      	ldr	r3, [pc, #32]	; (1424 <nm_bsp_register_isr+0x50>)
    1404:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1406:	2100      	movs	r1, #0
    1408:	2009      	movs	r0, #9
    140a:	4b07      	ldr	r3, [pc, #28]	; (1428 <nm_bsp_register_isr+0x54>)
    140c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    140e:	b004      	add	sp, #16
    1410:	bd10      	pop	{r4, pc}
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	200003c4 	.word	0x200003c4
    1418:	00004745 	.word	0x00004745
    141c:	00004759 	.word	0x00004759
    1420:	0000130d 	.word	0x0000130d
    1424:	00004601 	.word	0x00004601
    1428:	0000462d 	.word	0x0000462d

0000142c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    142c:	b510      	push	{r4, lr}
	if (u8Enable) {
    142e:	2800      	cmp	r0, #0
    1430:	d104      	bne.n	143c <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    1432:	2100      	movs	r1, #0
    1434:	2009      	movs	r0, #9
    1436:	4b04      	ldr	r3, [pc, #16]	; (1448 <nm_bsp_interrupt_ctrl+0x1c>)
    1438:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    143a:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    143c:	2100      	movs	r1, #0
    143e:	2009      	movs	r0, #9
    1440:	4b02      	ldr	r3, [pc, #8]	; (144c <nm_bsp_interrupt_ctrl+0x20>)
    1442:	4798      	blx	r3
    1444:	e7f9      	b.n	143a <nm_bsp_interrupt_ctrl+0xe>
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	0000464d 	.word	0x0000464d
    144c:	0000462d 	.word	0x0000462d

00001450 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    1450:	b530      	push	{r4, r5, lr}
    1452:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    1454:	4c30      	ldr	r4, [pc, #192]	; (1518 <nm_bus_init+0xc8>)
    1456:	230e      	movs	r3, #14
    1458:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    145a:	2300      	movs	r3, #0
    145c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    145e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1460:	a901      	add	r1, sp, #4
    1462:	2201      	movs	r2, #1
    1464:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1466:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1468:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    146a:	200e      	movs	r0, #14
    146c:	4b2b      	ldr	r3, [pc, #172]	; (151c <nm_bus_init+0xcc>)
    146e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1470:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    1472:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1474:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1476:	2900      	cmp	r1, #0
    1478:	d104      	bne.n	1484 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    147a:	0953      	lsrs	r3, r2, #5
    147c:	01db      	lsls	r3, r3, #7
    147e:	4928      	ldr	r1, [pc, #160]	; (1520 <nm_bus_init+0xd0>)
    1480:	468c      	mov	ip, r1
    1482:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1484:	211f      	movs	r1, #31
    1486:	4011      	ands	r1, r2
    1488:	2201      	movs	r2, #1
    148a:	0010      	movs	r0, r2
    148c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    148e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    1490:	ac02      	add	r4, sp, #8
    1492:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1494:	2300      	movs	r3, #0
    1496:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1498:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    149a:	21c0      	movs	r1, #192	; 0xc0
    149c:	0389      	lsls	r1, r1, #14
    149e:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    14a0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    14a2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    14a4:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    14a6:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    14a8:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    14aa:	3223      	adds	r2, #35	; 0x23
    14ac:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    14ae:	3a18      	subs	r2, #24
    14b0:	2100      	movs	r1, #0
    14b2:	a808      	add	r0, sp, #32
    14b4:	4b1b      	ldr	r3, [pc, #108]	; (1524 <nm_bus_init+0xd4>)
    14b6:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    14b8:	4b1b      	ldr	r3, [pc, #108]	; (1528 <nm_bus_init+0xd8>)
    14ba:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    14bc:	4b1b      	ldr	r3, [pc, #108]	; (152c <nm_bus_init+0xdc>)
    14be:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    14c0:	2301      	movs	r3, #1
    14c2:	425b      	negs	r3, r3
    14c4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    14c6:	4b1a      	ldr	r3, [pc, #104]	; (1530 <nm_bus_init+0xe0>)
    14c8:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    14ca:	4b1a      	ldr	r3, [pc, #104]	; (1534 <nm_bus_init+0xe4>)
    14cc:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    14ce:	0022      	movs	r2, r4
    14d0:	4919      	ldr	r1, [pc, #100]	; (1538 <nm_bus_init+0xe8>)
    14d2:	481a      	ldr	r0, [pc, #104]	; (153c <nm_bus_init+0xec>)
    14d4:	4b1a      	ldr	r3, [pc, #104]	; (1540 <nm_bus_init+0xf0>)
    14d6:	4798      	blx	r3
    14d8:	2800      	cmp	r0, #0
    14da:	d11a      	bne.n	1512 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    14dc:	4d17      	ldr	r5, [pc, #92]	; (153c <nm_bus_init+0xec>)
    14de:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14e0:	0020      	movs	r0, r4
    14e2:	4b18      	ldr	r3, [pc, #96]	; (1544 <nm_bus_init+0xf4>)
    14e4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14e6:	231f      	movs	r3, #31
    14e8:	4018      	ands	r0, r3
    14ea:	3b1e      	subs	r3, #30
    14ec:	4083      	lsls	r3, r0
    14ee:	4a16      	ldr	r2, [pc, #88]	; (1548 <nm_bus_init+0xf8>)
    14f0:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14f2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    14f4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    14f6:	2b00      	cmp	r3, #0
    14f8:	d1fc      	bne.n	14f4 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    14fa:	6823      	ldr	r3, [r4, #0]
    14fc:	2202      	movs	r2, #2
    14fe:	4313      	orrs	r3, r2
    1500:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    1502:	4b12      	ldr	r3, [pc, #72]	; (154c <nm_bus_init+0xfc>)
    1504:	4798      	blx	r3
	nm_bsp_sleep(1);
    1506:	2001      	movs	r0, #1
    1508:	4b11      	ldr	r3, [pc, #68]	; (1550 <nm_bus_init+0x100>)
    150a:	4798      	blx	r3
#endif
	return result;
    150c:	2000      	movs	r0, #0
}
    150e:	b011      	add	sp, #68	; 0x44
    1510:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    1512:	2006      	movs	r0, #6
    1514:	4240      	negs	r0, r0
    1516:	e7fa      	b.n	150e <nm_bus_init+0xbe>
    1518:	20000ef8 	.word	0x20000ef8
    151c:	000047d1 	.word	0x000047d1
    1520:	41004400 	.word	0x41004400
    1524:	0000bdaf 	.word	0x0000bdaf
    1528:	000c0002 	.word	0x000c0002
    152c:	000d0002 	.word	0x000d0002
    1530:	000f0002 	.word	0x000f0002
    1534:	00b71b00 	.word	0x00b71b00
    1538:	42001000 	.word	0x42001000
    153c:	20000efc 	.word	0x20000efc
    1540:	00004f2d 	.word	0x00004f2d
    1544:	00004de5 	.word	0x00004de5
    1548:	e000e100 	.word	0xe000e100
    154c:	000013ad 	.word	0x000013ad
    1550:	00001395 	.word	0x00001395

00001554 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    1554:	b5f0      	push	{r4, r5, r6, r7, lr}
    1556:	46de      	mov	lr, fp
    1558:	4657      	mov	r7, sl
    155a:	464e      	mov	r6, r9
    155c:	4645      	mov	r5, r8
    155e:	b5e0      	push	{r5, r6, r7, lr}
    1560:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    1562:	2803      	cmp	r0, #3
    1564:	d000      	beq.n	1568 <nm_bus_ioctl+0x14>
    1566:	e075      	b.n	1654 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    1568:	680e      	ldr	r6, [r1, #0]
    156a:	684d      	ldr	r5, [r1, #4]
    156c:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    156e:	2200      	movs	r2, #0
    1570:	466b      	mov	r3, sp
    1572:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    1574:	2d00      	cmp	r5, #0
    1576:	d027      	beq.n	15c8 <nm_bus_ioctl+0x74>
    1578:	2c00      	cmp	r4, #0
    157a:	d065      	beq.n	1648 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    157c:	2e00      	cmp	r6, #0
    157e:	d100      	bne.n	1582 <nm_bus_ioctl+0x2e>
    1580:	e077      	b.n	1672 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    1582:	2300      	movs	r3, #0
    1584:	4698      	mov	r8, r3
    1586:	2300      	movs	r3, #0
    1588:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    158a:	2201      	movs	r2, #1
    158c:	493b      	ldr	r1, [pc, #236]	; (167c <nm_bus_ioctl+0x128>)
    158e:	483c      	ldr	r0, [pc, #240]	; (1680 <nm_bus_ioctl+0x12c>)
    1590:	4b3c      	ldr	r3, [pc, #240]	; (1684 <nm_bus_ioctl+0x130>)
    1592:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1594:	4b3a      	ldr	r3, [pc, #232]	; (1680 <nm_bus_ioctl+0x12c>)
    1596:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    1598:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    159a:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    159c:	4699      	mov	r9, r3
			pu8Miso++;
    159e:	4659      	mov	r1, fp
    15a0:	424b      	negs	r3, r1
    15a2:	4159      	adcs	r1, r3
    15a4:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    15a6:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    15a8:	4653      	mov	r3, sl
    15aa:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    15ac:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    15ae:	4239      	tst	r1, r7
    15b0:	d0fc      	beq.n	15ac <nm_bus_ioctl+0x58>
    15b2:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    15b4:	4239      	tst	r1, r7
    15b6:	d0fc      	beq.n	15b2 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    15b8:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    15ba:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    15bc:	4211      	tst	r1, r2
    15be:	d0fc      	beq.n	15ba <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    15c0:	4649      	mov	r1, r9
    15c2:	7989      	ldrb	r1, [r1, #6]
    15c4:	468c      	mov	ip, r1
    15c6:	e011      	b.n	15ec <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    15c8:	2e00      	cmp	r6, #0
    15ca:	d03a      	beq.n	1642 <nm_bus_ioctl+0xee>
    15cc:	2c00      	cmp	r4, #0
    15ce:	d03e      	beq.n	164e <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    15d0:	2300      	movs	r3, #0
    15d2:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    15d4:	3301      	adds	r3, #1
    15d6:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    15d8:	466b      	mov	r3, sp
    15da:	1ddd      	adds	r5, r3, #7
    15dc:	e7d5      	b.n	158a <nm_bus_ioctl+0x36>
    15de:	4660      	mov	r0, ip
    15e0:	2801      	cmp	r0, #1
    15e2:	d00d      	beq.n	1600 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    15e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    15e6:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    15e8:	2900      	cmp	r1, #0
    15ea:	d00d      	beq.n	1608 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    15ec:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    15ee:	4211      	tst	r1, r2
    15f0:	d0fc      	beq.n	15ec <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    15f2:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    15f4:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    15f6:	4210      	tst	r0, r2
    15f8:	d0f1      	beq.n	15de <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    15fa:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    15fc:	311e      	adds	r1, #30
    15fe:	e7ee      	b.n	15de <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1600:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1602:	05c0      	lsls	r0, r0, #23
    1604:	0dc0      	lsrs	r0, r0, #23
    1606:	e7ef      	b.n	15e8 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    1608:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    160a:	3c01      	subs	r4, #1
    160c:	b2a4      	uxth	r4, r4
			pu8Miso++;
    160e:	445d      	add	r5, fp
			pu8Mosi++;
    1610:	4643      	mov	r3, r8
    1612:	4259      	negs	r1, r3
    1614:	414b      	adcs	r3, r1
    1616:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    1618:	2c00      	cmp	r4, #0
    161a:	d1c4      	bne.n	15a6 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    161c:	4b18      	ldr	r3, [pc, #96]	; (1680 <nm_bus_ioctl+0x12c>)
    161e:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    1620:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1622:	7e0b      	ldrb	r3, [r1, #24]
    1624:	4213      	tst	r3, r2
    1626:	d0fc      	beq.n	1622 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    1628:	2200      	movs	r2, #0
    162a:	4914      	ldr	r1, [pc, #80]	; (167c <nm_bus_ioctl+0x128>)
    162c:	4814      	ldr	r0, [pc, #80]	; (1680 <nm_bus_ioctl+0x12c>)
    162e:	4b15      	ldr	r3, [pc, #84]	; (1684 <nm_bus_ioctl+0x130>)
    1630:	4798      	blx	r3
	return M2M_SUCCESS;
    1632:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    1634:	b003      	add	sp, #12
    1636:	bc3c      	pop	{r2, r3, r4, r5}
    1638:	4690      	mov	r8, r2
    163a:	4699      	mov	r9, r3
    163c:	46a2      	mov	sl, r4
    163e:	46ab      	mov	fp, r5
    1640:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    1642:	200f      	movs	r0, #15
    1644:	4240      	negs	r0, r0
    1646:	e7f5      	b.n	1634 <nm_bus_ioctl+0xe0>
    1648:	200f      	movs	r0, #15
    164a:	4240      	negs	r0, r0
    164c:	e7f2      	b.n	1634 <nm_bus_ioctl+0xe0>
    164e:	200f      	movs	r0, #15
    1650:	4240      	negs	r0, r0
		break;
    1652:	e7ef      	b.n	1634 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    1654:	2283      	movs	r2, #131	; 0x83
    1656:	0052      	lsls	r2, r2, #1
    1658:	490b      	ldr	r1, [pc, #44]	; (1688 <nm_bus_ioctl+0x134>)
    165a:	480c      	ldr	r0, [pc, #48]	; (168c <nm_bus_ioctl+0x138>)
    165c:	4b0c      	ldr	r3, [pc, #48]	; (1690 <nm_bus_ioctl+0x13c>)
    165e:	4798      	blx	r3
    1660:	480c      	ldr	r0, [pc, #48]	; (1694 <nm_bus_ioctl+0x140>)
    1662:	4b0d      	ldr	r3, [pc, #52]	; (1698 <nm_bus_ioctl+0x144>)
    1664:	4798      	blx	r3
    1666:	200d      	movs	r0, #13
    1668:	4b0c      	ldr	r3, [pc, #48]	; (169c <nm_bus_ioctl+0x148>)
    166a:	4798      	blx	r3
			s8Ret = -1;
    166c:	2001      	movs	r0, #1
    166e:	4240      	negs	r0, r0
	return s8Ret;
    1670:	e7e0      	b.n	1634 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    1672:	2301      	movs	r3, #1
    1674:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    1676:	466b      	mov	r3, sp
    1678:	1dde      	adds	r6, r3, #7
    167a:	e784      	b.n	1586 <nm_bus_ioctl+0x32>
    167c:	20000ef8 	.word	0x20000ef8
    1680:	20000efc 	.word	0x20000efc
    1684:	000051d9 	.word	0x000051d9
    1688:	0000d600 	.word	0x0000d600
    168c:	0000d610 	.word	0x0000d610
    1690:	0000bf11 	.word	0x0000bf11
    1694:	0000d624 	.word	0x0000d624
    1698:	0000c02d 	.word	0x0000c02d
    169c:	0000bf45 	.word	0x0000bf45

000016a0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    16a0:	b530      	push	{r4, r5, lr}
    16a2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    16a4:	ab01      	add	r3, sp, #4
    16a6:	2200      	movs	r2, #0
    16a8:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    16aa:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    16ac:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    16ae:	4d13      	ldr	r5, [pc, #76]	; (16fc <nm_bus_deinit+0x5c>)
    16b0:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    16b2:	0020      	movs	r0, r4
    16b4:	4b12      	ldr	r3, [pc, #72]	; (1700 <nm_bus_deinit+0x60>)
    16b6:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    16b8:	231f      	movs	r3, #31
    16ba:	4018      	ands	r0, r3
    16bc:	3b1e      	subs	r3, #30
    16be:	4083      	lsls	r3, r0
    16c0:	2280      	movs	r2, #128	; 0x80
    16c2:	4910      	ldr	r1, [pc, #64]	; (1704 <nm_bus_deinit+0x64>)
    16c4:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    16c6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    16c8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    16ca:	2b00      	cmp	r3, #0
    16cc:	d1fc      	bne.n	16c8 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    16ce:	338f      	adds	r3, #143	; 0x8f
    16d0:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    16d2:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    16d4:	6823      	ldr	r3, [r4, #0]
    16d6:	2202      	movs	r2, #2
    16d8:	4393      	bics	r3, r2
    16da:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    16dc:	a901      	add	r1, sp, #4
    16de:	200c      	movs	r0, #12
    16e0:	4c09      	ldr	r4, [pc, #36]	; (1708 <nm_bus_deinit+0x68>)
    16e2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    16e4:	a901      	add	r1, sp, #4
    16e6:	200f      	movs	r0, #15
    16e8:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    16ea:	a901      	add	r1, sp, #4
    16ec:	200d      	movs	r0, #13
    16ee:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    16f0:	a901      	add	r1, sp, #4
    16f2:	200e      	movs	r0, #14
    16f4:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    16f6:	2000      	movs	r0, #0
    16f8:	b003      	add	sp, #12
    16fa:	bd30      	pop	{r4, r5, pc}
    16fc:	20000efc 	.word	0x20000efc
    1700:	00004de5 	.word	0x00004de5
    1704:	e000e100 	.word	0xe000e100
    1708:	000047d1 	.word	0x000047d1

0000170c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    170c:	2a00      	cmp	r2, #0
    170e:	d006      	beq.n	171e <m2m_memcpy+0x12>
    1710:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    1712:	780b      	ldrb	r3, [r1, #0]
    1714:	7003      	strb	r3, [r0, #0]
		pDst++;
    1716:	3001      	adds	r0, #1
		pSrc++;
    1718:	3101      	adds	r1, #1
	}while(--sz);
    171a:	4290      	cmp	r0, r2
    171c:	d1f9      	bne.n	1712 <m2m_memcpy+0x6>
}
    171e:	4770      	bx	lr

00001720 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    1720:	2a00      	cmp	r2, #0
    1722:	d004      	beq.n	172e <m2m_memset+0xe>
    1724:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    1726:	7001      	strb	r1, [r0, #0]
		pBuf++;
    1728:	3001      	adds	r0, #1
	}while(--sz);
    172a:	4290      	cmp	r0, r2
    172c:	d1fb      	bne.n	1726 <m2m_memset+0x6>
}
    172e:	4770      	bx	lr

00001730 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    1730:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    1732:	7802      	ldrb	r2, [r0, #0]
    1734:	2a00      	cmp	r2, #0
    1736:	d007      	beq.n	1748 <m2m_strlen+0x18>
    1738:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    173a:	3001      	adds	r0, #1
    173c:	b280      	uxth	r0, r0
		pcStr++;
    173e:	3301      	adds	r3, #1
	while(*pcStr)
    1740:	781a      	ldrb	r2, [r3, #0]
    1742:	2a00      	cmp	r2, #0
    1744:	d1f9      	bne.n	173a <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    1746:	4770      	bx	lr
	uint16	u16StrLen = 0;
    1748:	2000      	movs	r0, #0
    174a:	e7fc      	b.n	1746 <m2m_strlen+0x16>

0000174c <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    174c:	4a02      	ldr	r2, [pc, #8]	; (1758 <isr+0xc>)
    174e:	78d3      	ldrb	r3, [r2, #3]
    1750:	3301      	adds	r3, #1
    1752:	b2db      	uxtb	r3, r3
    1754:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    1756:	4770      	bx	lr
    1758:	20000f38 	.word	0x20000f38

0000175c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    175c:	4770      	bx	lr
	...

00001760 <hif_set_rx_done>:
{
    1760:	b500      	push	{lr}
    1762:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    1764:	2200      	movs	r2, #0
    1766:	4b0a      	ldr	r3, [pc, #40]	; (1790 <hif_set_rx_done+0x30>)
    1768:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    176a:	2001      	movs	r0, #1
    176c:	4b09      	ldr	r3, [pc, #36]	; (1794 <hif_set_rx_done+0x34>)
    176e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    1770:	a901      	add	r1, sp, #4
    1772:	4809      	ldr	r0, [pc, #36]	; (1798 <hif_set_rx_done+0x38>)
    1774:	4b09      	ldr	r3, [pc, #36]	; (179c <hif_set_rx_done+0x3c>)
    1776:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1778:	2800      	cmp	r0, #0
    177a:	d001      	beq.n	1780 <hif_set_rx_done+0x20>
}
    177c:	b003      	add	sp, #12
    177e:	bd00      	pop	{pc}
	reg |= NBIT1;
    1780:	2102      	movs	r1, #2
    1782:	9b01      	ldr	r3, [sp, #4]
    1784:	4319      	orrs	r1, r3
    1786:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1788:	4803      	ldr	r0, [pc, #12]	; (1798 <hif_set_rx_done+0x38>)
    178a:	4b05      	ldr	r3, [pc, #20]	; (17a0 <hif_set_rx_done+0x40>)
    178c:	4798      	blx	r3
    178e:	e7f5      	b.n	177c <hif_set_rx_done+0x1c>
    1790:	20000f38 	.word	0x20000f38
    1794:	0000142d 	.word	0x0000142d
    1798:	00001070 	.word	0x00001070
    179c:	00002b71 	.word	0x00002b71
    17a0:	00002b7d 	.word	0x00002b7d

000017a4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    17a4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    17a6:	4b0c      	ldr	r3, [pc, #48]	; (17d8 <hif_chip_wake+0x34>)
    17a8:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    17aa:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    17ac:	2b00      	cmp	r3, #0
    17ae:	d10d      	bne.n	17cc <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    17b0:	4b09      	ldr	r3, [pc, #36]	; (17d8 <hif_chip_wake+0x34>)
    17b2:	785b      	ldrb	r3, [r3, #1]
    17b4:	2b00      	cmp	r3, #0
    17b6:	d103      	bne.n	17c0 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    17b8:	4b07      	ldr	r3, [pc, #28]	; (17d8 <hif_chip_wake+0x34>)
    17ba:	781b      	ldrb	r3, [r3, #0]
    17bc:	2b00      	cmp	r3, #0
    17be:	d106      	bne.n	17ce <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    17c0:	4a05      	ldr	r2, [pc, #20]	; (17d8 <hif_chip_wake+0x34>)
    17c2:	7853      	ldrb	r3, [r2, #1]
    17c4:	3301      	adds	r3, #1
    17c6:	b2db      	uxtb	r3, r3
    17c8:	7053      	strb	r3, [r2, #1]
    17ca:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    17cc:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    17ce:	4b03      	ldr	r3, [pc, #12]	; (17dc <hif_chip_wake+0x38>)
    17d0:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    17d2:	2800      	cmp	r0, #0
    17d4:	d0f4      	beq.n	17c0 <hif_chip_wake+0x1c>
    17d6:	e7f9      	b.n	17cc <hif_chip_wake+0x28>
    17d8:	20000f38 	.word	0x20000f38
    17dc:	00002859 	.word	0x00002859

000017e0 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    17e0:	4b05      	ldr	r3, [pc, #20]	; (17f8 <hif_chip_sleep_sc+0x18>)
    17e2:	785b      	ldrb	r3, [r3, #1]
    17e4:	2b00      	cmp	r3, #0
    17e6:	d004      	beq.n	17f2 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    17e8:	4a03      	ldr	r2, [pc, #12]	; (17f8 <hif_chip_sleep_sc+0x18>)
    17ea:	7853      	ldrb	r3, [r2, #1]
    17ec:	3b01      	subs	r3, #1
    17ee:	b2db      	uxtb	r3, r3
    17f0:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    17f2:	2000      	movs	r0, #0
    17f4:	4770      	bx	lr
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	20000f38 	.word	0x20000f38

000017fc <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    17fc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    17fe:	4b0b      	ldr	r3, [pc, #44]	; (182c <hif_chip_sleep+0x30>)
    1800:	785b      	ldrb	r3, [r3, #1]
    1802:	2b00      	cmp	r3, #0
    1804:	d004      	beq.n	1810 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    1806:	4a09      	ldr	r2, [pc, #36]	; (182c <hif_chip_sleep+0x30>)
    1808:	7853      	ldrb	r3, [r2, #1]
    180a:	3b01      	subs	r3, #1
    180c:	b2db      	uxtb	r3, r3
    180e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    1810:	4b06      	ldr	r3, [pc, #24]	; (182c <hif_chip_sleep+0x30>)
    1812:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    1814:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    1816:	2b00      	cmp	r3, #0
    1818:	d103      	bne.n	1822 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    181a:	4b04      	ldr	r3, [pc, #16]	; (182c <hif_chip_sleep+0x30>)
    181c:	781b      	ldrb	r3, [r3, #0]
    181e:	2b00      	cmp	r3, #0
    1820:	d100      	bne.n	1824 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    1822:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    1824:	4b02      	ldr	r3, [pc, #8]	; (1830 <hif_chip_sleep+0x34>)
    1826:	4798      	blx	r3
    1828:	e7fb      	b.n	1822 <hif_chip_sleep+0x26>
    182a:	46c0      	nop			; (mov r8, r8)
    182c:	20000f38 	.word	0x20000f38
    1830:	000027f1 	.word	0x000027f1

00001834 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1834:	b5f0      	push	{r4, r5, r6, r7, lr}
    1836:	46de      	mov	lr, fp
    1838:	4657      	mov	r7, sl
    183a:	b580      	push	{r7, lr}
    183c:	b089      	sub	sp, #36	; 0x24
    183e:	4683      	mov	fp, r0
    1840:	468a      	mov	sl, r1
    1842:	9201      	str	r2, [sp, #4]
    1844:	9300      	str	r3, [sp, #0]
    1846:	ab10      	add	r3, sp, #64	; 0x40
    1848:	cb80      	ldmia	r3!, {r7}
    184a:	881e      	ldrh	r6, [r3, #0]
    184c:	ab12      	add	r3, sp, #72	; 0x48
    184e:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    1850:	227f      	movs	r2, #127	; 0x7f
    1852:	400a      	ands	r2, r1
    1854:	ab07      	add	r3, sp, #28
    1856:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    1858:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    185a:	2208      	movs	r2, #8
    185c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    185e:	2f00      	cmp	r7, #0
    1860:	d03d      	beq.n	18de <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    1862:	885a      	ldrh	r2, [r3, #2]
    1864:	1992      	adds	r2, r2, r6
    1866:	18aa      	adds	r2, r5, r2
    1868:	b292      	uxth	r2, r2
    186a:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    186c:	4b69      	ldr	r3, [pc, #420]	; (1a14 <hif_send+0x1e0>)
    186e:	4798      	blx	r3
    1870:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    1872:	d000      	beq.n	1876 <hif_send+0x42>
    1874:	e0c1      	b.n	19fa <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    1876:	2300      	movs	r3, #0
    1878:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    187a:	aa02      	add	r2, sp, #8
    187c:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    187e:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    1880:	9b04      	ldr	r3, [sp, #16]
    1882:	465a      	mov	r2, fp
    1884:	431a      	orrs	r2, r3
    1886:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    1888:	9a04      	ldr	r2, [sp, #16]
    188a:	4653      	mov	r3, sl
    188c:	021b      	lsls	r3, r3, #8
    188e:	4313      	orrs	r3, r2
    1890:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    1892:	ab07      	add	r3, sp, #28
    1894:	885b      	ldrh	r3, [r3, #2]
    1896:	9a04      	ldr	r2, [sp, #16]
    1898:	041b      	lsls	r3, r3, #16
    189a:	4313      	orrs	r3, r2
    189c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    189e:	9904      	ldr	r1, [sp, #16]
    18a0:	485d      	ldr	r0, [pc, #372]	; (1a18 <hif_send+0x1e4>)
    18a2:	4b5e      	ldr	r3, [pc, #376]	; (1a1c <hif_send+0x1e8>)
    18a4:	4798      	blx	r3
    18a6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    18a8:	d157      	bne.n	195a <hif_send+0x126>

		reg = 0UL;
    18aa:	2300      	movs	r3, #0
    18ac:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    18ae:	9b04      	ldr	r3, [sp, #16]
    18b0:	2202      	movs	r2, #2
    18b2:	4313      	orrs	r3, r2
    18b4:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    18b6:	9904      	ldr	r1, [sp, #16]
    18b8:	4859      	ldr	r0, [pc, #356]	; (1a20 <hif_send+0x1ec>)
    18ba:	4b58      	ldr	r3, [pc, #352]	; (1a1c <hif_send+0x1e8>)
    18bc:	4798      	blx	r3
    18be:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    18c0:	d14b      	bne.n	195a <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    18c2:	2200      	movs	r2, #0
    18c4:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    18c6:	ab02      	add	r3, sp, #8
    18c8:	80da      	strh	r2, [r3, #6]
    18ca:	3306      	adds	r3, #6
    18cc:	881b      	ldrh	r3, [r3, #0]
    18ce:	b29b      	uxth	r3, r3
    18d0:	4a54      	ldr	r2, [pc, #336]	; (1a24 <hif_send+0x1f0>)
    18d2:	4293      	cmp	r3, r2
    18d4:	d849      	bhi.n	196a <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    18d6:	4c54      	ldr	r4, [pc, #336]	; (1a28 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    18d8:	4b54      	ldr	r3, [pc, #336]	; (1a2c <hif_send+0x1f8>)
    18da:	469a      	mov	sl, r3
    18dc:	e017      	b.n	190e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    18de:	ab07      	add	r3, sp, #28
    18e0:	885a      	ldrh	r2, [r3, #2]
    18e2:	9900      	ldr	r1, [sp, #0]
    18e4:	468c      	mov	ip, r1
    18e6:	4462      	add	r2, ip
    18e8:	b292      	uxth	r2, r2
    18ea:	805a      	strh	r2, [r3, #2]
    18ec:	e7be      	b.n	186c <hif_send+0x38>
				nm_bsp_sleep(1);
    18ee:	2001      	movs	r0, #1
    18f0:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    18f2:	9b04      	ldr	r3, [sp, #16]
    18f4:	079b      	lsls	r3, r3, #30
    18f6:	d528      	bpl.n	194a <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    18f8:	ab02      	add	r3, sp, #8
    18fa:	88da      	ldrh	r2, [r3, #6]
    18fc:	3201      	adds	r2, #1
    18fe:	b292      	uxth	r2, r2
    1900:	80da      	strh	r2, [r3, #6]
    1902:	3306      	adds	r3, #6
    1904:	881b      	ldrh	r3, [r3, #0]
    1906:	b29b      	uxth	r3, r3
    1908:	4a46      	ldr	r2, [pc, #280]	; (1a24 <hif_send+0x1f0>)
    190a:	4293      	cmp	r3, r2
    190c:	d82d      	bhi.n	196a <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    190e:	a904      	add	r1, sp, #16
    1910:	4843      	ldr	r0, [pc, #268]	; (1a20 <hif_send+0x1ec>)
    1912:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    1914:	2800      	cmp	r0, #0
    1916:	d128      	bne.n	196a <hif_send+0x136>
			if(cnt >= 500) {
    1918:	ab02      	add	r3, sp, #8
    191a:	3306      	adds	r3, #6
    191c:	881b      	ldrh	r3, [r3, #0]
    191e:	b29b      	uxth	r3, r3
    1920:	22f4      	movs	r2, #244	; 0xf4
    1922:	32ff      	adds	r2, #255	; 0xff
    1924:	4293      	cmp	r3, r2
    1926:	d9e4      	bls.n	18f2 <hif_send+0xbe>
				if(cnt < 501) {
    1928:	ab02      	add	r3, sp, #8
    192a:	3306      	adds	r3, #6
    192c:	881b      	ldrh	r3, [r3, #0]
    192e:	b29b      	uxth	r3, r3
    1930:	3201      	adds	r2, #1
    1932:	4293      	cmp	r3, r2
    1934:	d8db      	bhi.n	18ee <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    1936:	483e      	ldr	r0, [pc, #248]	; (1a30 <hif_send+0x1fc>)
    1938:	4b3e      	ldr	r3, [pc, #248]	; (1a34 <hif_send+0x200>)
    193a:	4798      	blx	r3
    193c:	483e      	ldr	r0, [pc, #248]	; (1a38 <hif_send+0x204>)
    193e:	4b3f      	ldr	r3, [pc, #252]	; (1a3c <hif_send+0x208>)
    1940:	4798      	blx	r3
    1942:	200d      	movs	r0, #13
    1944:	4b3e      	ldr	r3, [pc, #248]	; (1a40 <hif_send+0x20c>)
    1946:	4798      	blx	r3
    1948:	e7d1      	b.n	18ee <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    194a:	a905      	add	r1, sp, #20
    194c:	483d      	ldr	r0, [pc, #244]	; (1a44 <hif_send+0x210>)
    194e:	4b36      	ldr	r3, [pc, #216]	; (1a28 <hif_send+0x1f4>)
    1950:	4798      	blx	r3
    1952:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    1954:	d009      	beq.n	196a <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    1956:	2300      	movs	r3, #0
    1958:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    195a:	4b3b      	ldr	r3, [pc, #236]	; (1a48 <hif_send+0x214>)
    195c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    195e:	0020      	movs	r0, r4
    1960:	b009      	add	sp, #36	; 0x24
    1962:	bc0c      	pop	{r2, r3}
    1964:	4692      	mov	sl, r2
    1966:	469b      	mov	fp, r3
    1968:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    196a:	9b05      	ldr	r3, [sp, #20]
    196c:	2b00      	cmp	r3, #0
    196e:	d03f      	beq.n	19f0 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    1970:	9b05      	ldr	r3, [sp, #20]
    1972:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    1974:	a907      	add	r1, sp, #28
    1976:	884b      	ldrh	r3, [r1, #2]
    1978:	b29b      	uxth	r3, r3
    197a:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    197c:	9806      	ldr	r0, [sp, #24]
    197e:	2208      	movs	r2, #8
    1980:	4b32      	ldr	r3, [pc, #200]	; (1a4c <hif_send+0x218>)
    1982:	4798      	blx	r3
    1984:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    1986:	d1e8      	bne.n	195a <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    1988:	9b06      	ldr	r3, [sp, #24]
    198a:	3308      	adds	r3, #8
    198c:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    198e:	9b01      	ldr	r3, [sp, #4]
    1990:	2b00      	cmp	r3, #0
    1992:	d00b      	beq.n	19ac <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    1994:	9806      	ldr	r0, [sp, #24]
    1996:	9a00      	ldr	r2, [sp, #0]
    1998:	0019      	movs	r1, r3
    199a:	4b2c      	ldr	r3, [pc, #176]	; (1a4c <hif_send+0x218>)
    199c:	4798      	blx	r3
    199e:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    19a0:	d1db      	bne.n	195a <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    19a2:	9b06      	ldr	r3, [sp, #24]
    19a4:	9a00      	ldr	r2, [sp, #0]
    19a6:	4694      	mov	ip, r2
    19a8:	4463      	add	r3, ip
    19aa:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    19ac:	2f00      	cmp	r7, #0
    19ae:	d00e      	beq.n	19ce <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    19b0:	9b06      	ldr	r3, [sp, #24]
    19b2:	9a00      	ldr	r2, [sp, #0]
    19b4:	1aad      	subs	r5, r5, r2
    19b6:	18ed      	adds	r5, r5, r3
    19b8:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    19ba:	9806      	ldr	r0, [sp, #24]
    19bc:	0032      	movs	r2, r6
    19be:	0039      	movs	r1, r7
    19c0:	4b22      	ldr	r3, [pc, #136]	; (1a4c <hif_send+0x218>)
    19c2:	4798      	blx	r3
    19c4:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    19c6:	d1c8      	bne.n	195a <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    19c8:	9b06      	ldr	r3, [sp, #24]
    19ca:	18f3      	adds	r3, r6, r3
    19cc:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    19ce:	9b05      	ldr	r3, [sp, #20]
    19d0:	009b      	lsls	r3, r3, #2
    19d2:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    19d4:	9b04      	ldr	r3, [sp, #16]
    19d6:	2202      	movs	r2, #2
    19d8:	4313      	orrs	r3, r2
    19da:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    19dc:	9904      	ldr	r1, [sp, #16]
    19de:	481c      	ldr	r0, [pc, #112]	; (1a50 <hif_send+0x21c>)
    19e0:	4b0e      	ldr	r3, [pc, #56]	; (1a1c <hif_send+0x1e8>)
    19e2:	4798      	blx	r3
    19e4:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    19e6:	d1b8      	bne.n	195a <hif_send+0x126>
 	ret = hif_chip_sleep();
    19e8:	4b1a      	ldr	r3, [pc, #104]	; (1a54 <hif_send+0x220>)
    19ea:	4798      	blx	r3
    19ec:	0004      	movs	r4, r0
	return ret;
    19ee:	e7b6      	b.n	195e <hif_send+0x12a>
			ret = hif_chip_sleep();
    19f0:	4b18      	ldr	r3, [pc, #96]	; (1a54 <hif_send+0x220>)
    19f2:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    19f4:	2403      	movs	r4, #3
    19f6:	4264      	negs	r4, r4
			goto ERR2;
    19f8:	e7b1      	b.n	195e <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    19fa:	2298      	movs	r2, #152	; 0x98
    19fc:	32ff      	adds	r2, #255	; 0xff
    19fe:	4916      	ldr	r1, [pc, #88]	; (1a58 <hif_send+0x224>)
    1a00:	4816      	ldr	r0, [pc, #88]	; (1a5c <hif_send+0x228>)
    1a02:	4b0c      	ldr	r3, [pc, #48]	; (1a34 <hif_send+0x200>)
    1a04:	4798      	blx	r3
    1a06:	4816      	ldr	r0, [pc, #88]	; (1a60 <hif_send+0x22c>)
    1a08:	4b0c      	ldr	r3, [pc, #48]	; (1a3c <hif_send+0x208>)
    1a0a:	4798      	blx	r3
    1a0c:	200d      	movs	r0, #13
    1a0e:	4b0c      	ldr	r3, [pc, #48]	; (1a40 <hif_send+0x20c>)
    1a10:	4798      	blx	r3
		goto ERR2;
    1a12:	e7a4      	b.n	195e <hif_send+0x12a>
    1a14:	000017a5 	.word	0x000017a5
    1a18:	0000108c 	.word	0x0000108c
    1a1c:	00002b7d 	.word	0x00002b7d
    1a20:	00001078 	.word	0x00001078
    1a24:	000003e7 	.word	0x000003e7
    1a28:	00002b71 	.word	0x00002b71
    1a2c:	00001395 	.word	0x00001395
    1a30:	0000d940 	.word	0x0000d940
    1a34:	0000bf11 	.word	0x0000bf11
    1a38:	0000d94c 	.word	0x0000d94c
    1a3c:	0000c02d 	.word	0x0000c02d
    1a40:	0000bf45 	.word	0x0000bf45
    1a44:	00150400 	.word	0x00150400
    1a48:	000017e1 	.word	0x000017e1
    1a4c:	00002bf1 	.word	0x00002bf1
    1a50:	0000106c 	.word	0x0000106c
    1a54:	000017fd 	.word	0x000017fd
    1a58:	0000d658 	.word	0x0000d658
    1a5c:	0000d610 	.word	0x0000d610
    1a60:	0000d95c 	.word	0x0000d95c

00001a64 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    1a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a66:	46ce      	mov	lr, r9
    1a68:	4647      	mov	r7, r8
    1a6a:	b580      	push	{r7, lr}
    1a6c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    1a6e:	2200      	movs	r2, #0
    1a70:	4bd1      	ldr	r3, [pc, #836]	; (1db8 <hif_handle_isr+0x354>)
    1a72:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    1a74:	4699      	mov	r9, r3
    1a76:	4698      	mov	r8, r3
    1a78:	e081      	b.n	1b7e <hif_handle_isr+0x11a>
				gstrHifCxt.u32RxAddr = address;
    1a7a:	4bcf      	ldr	r3, [pc, #828]	; (1db8 <hif_handle_isr+0x354>)
    1a7c:	9a05      	ldr	r2, [sp, #20]
    1a7e:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    1a80:	60de      	str	r6, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    1a82:	af04      	add	r7, sp, #16
    1a84:	2204      	movs	r2, #4
    1a86:	0039      	movs	r1, r7
    1a88:	9805      	ldr	r0, [sp, #20]
    1a8a:	4bcc      	ldr	r3, [pc, #816]	; (1dbc <hif_handle_isr+0x358>)
    1a8c:	4798      	blx	r3
    1a8e:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    1a90:	887b      	ldrh	r3, [r7, #2]
    1a92:	b29b      	uxth	r3, r3
    1a94:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    1a96:	2800      	cmp	r0, #0
    1a98:	d134      	bne.n	1b04 <hif_handle_isr+0xa0>
				if(strHif.u16Length != size)
    1a9a:	ab04      	add	r3, sp, #16
    1a9c:	885b      	ldrh	r3, [r3, #2]
    1a9e:	b29b      	uxth	r3, r3
    1aa0:	429e      	cmp	r6, r3
    1aa2:	d004      	beq.n	1aae <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    1aa4:	ab04      	add	r3, sp, #16
    1aa6:	885b      	ldrh	r3, [r3, #2]
    1aa8:	1af3      	subs	r3, r6, r3
    1aaa:	2b04      	cmp	r3, #4
    1aac:	dc3a      	bgt.n	1b24 <hif_handle_isr+0xc0>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1aae:	ab04      	add	r3, sp, #16
    1ab0:	781b      	ldrb	r3, [r3, #0]
    1ab2:	2b01      	cmp	r3, #1
    1ab4:	d04f      	beq.n	1b56 <hif_handle_isr+0xf2>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    1ab6:	ab04      	add	r3, sp, #16
    1ab8:	781b      	ldrb	r3, [r3, #0]
    1aba:	2b02      	cmp	r3, #2
    1abc:	d07d      	beq.n	1bba <hif_handle_isr+0x156>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1abe:	ab04      	add	r3, sp, #16
    1ac0:	781b      	ldrb	r3, [r3, #0]
    1ac2:	2b04      	cmp	r3, #4
    1ac4:	d100      	bne.n	1ac8 <hif_handle_isr+0x64>
    1ac6:	e095      	b.n	1bf4 <hif_handle_isr+0x190>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1ac8:	ab04      	add	r3, sp, #16
    1aca:	781b      	ldrb	r3, [r3, #0]
    1acc:	2b06      	cmp	r3, #6
    1ace:	d100      	bne.n	1ad2 <hif_handle_isr+0x6e>
    1ad0:	e0ad      	b.n	1c2e <hif_handle_isr+0x1ca>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    1ad2:	ab04      	add	r3, sp, #16
    1ad4:	781b      	ldrb	r3, [r3, #0]
    1ad6:	2b07      	cmp	r3, #7
    1ad8:	d100      	bne.n	1adc <hif_handle_isr+0x78>
    1ada:	e0c5      	b.n	1c68 <hif_handle_isr+0x204>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    1adc:	ab04      	add	r3, sp, #16
    1ade:	781b      	ldrb	r3, [r3, #0]
    1ae0:	2b05      	cmp	r3, #5
    1ae2:	d100      	bne.n	1ae6 <hif_handle_isr+0x82>
    1ae4:	e0dc      	b.n	1ca0 <hif_handle_isr+0x23c>
					M2M_ERR("(hif) invalid group ID\n");
    1ae6:	2284      	movs	r2, #132	; 0x84
    1ae8:	0092      	lsls	r2, r2, #2
    1aea:	49b5      	ldr	r1, [pc, #724]	; (1dc0 <hif_handle_isr+0x35c>)
    1aec:	48b5      	ldr	r0, [pc, #724]	; (1dc4 <hif_handle_isr+0x360>)
    1aee:	4bb6      	ldr	r3, [pc, #728]	; (1dc8 <hif_handle_isr+0x364>)
    1af0:	4798      	blx	r3
    1af2:	48b6      	ldr	r0, [pc, #728]	; (1dcc <hif_handle_isr+0x368>)
    1af4:	4bb6      	ldr	r3, [pc, #728]	; (1dd0 <hif_handle_isr+0x36c>)
    1af6:	4798      	blx	r3
    1af8:	200d      	movs	r0, #13
    1afa:	4bb6      	ldr	r3, [pc, #728]	; (1dd4 <hif_handle_isr+0x370>)
    1afc:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1afe:	2406      	movs	r4, #6
    1b00:	4264      	negs	r4, r4
    1b02:	e119      	b.n	1d38 <hif_handle_isr+0x2d4>
					M2M_ERR("(hif) address bus fail\n");
    1b04:	22e9      	movs	r2, #233	; 0xe9
    1b06:	0052      	lsls	r2, r2, #1
    1b08:	49ad      	ldr	r1, [pc, #692]	; (1dc0 <hif_handle_isr+0x35c>)
    1b0a:	48ae      	ldr	r0, [pc, #696]	; (1dc4 <hif_handle_isr+0x360>)
    1b0c:	4bae      	ldr	r3, [pc, #696]	; (1dc8 <hif_handle_isr+0x364>)
    1b0e:	4798      	blx	r3
    1b10:	48b1      	ldr	r0, [pc, #708]	; (1dd8 <hif_handle_isr+0x374>)
    1b12:	4baf      	ldr	r3, [pc, #700]	; (1dd0 <hif_handle_isr+0x36c>)
    1b14:	4798      	blx	r3
    1b16:	200d      	movs	r0, #13
    1b18:	4bae      	ldr	r3, [pc, #696]	; (1dd4 <hif_handle_isr+0x370>)
    1b1a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1b1c:	2001      	movs	r0, #1
    1b1e:	4baf      	ldr	r3, [pc, #700]	; (1ddc <hif_handle_isr+0x378>)
    1b20:	4798      	blx	r3
    1b22:	e109      	b.n	1d38 <hif_handle_isr+0x2d4>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    1b24:	22dc      	movs	r2, #220	; 0xdc
    1b26:	32ff      	adds	r2, #255	; 0xff
    1b28:	49a5      	ldr	r1, [pc, #660]	; (1dc0 <hif_handle_isr+0x35c>)
    1b2a:	48a6      	ldr	r0, [pc, #664]	; (1dc4 <hif_handle_isr+0x360>)
    1b2c:	4ca6      	ldr	r4, [pc, #664]	; (1dc8 <hif_handle_isr+0x364>)
    1b2e:	47a0      	blx	r4
    1b30:	a904      	add	r1, sp, #16
    1b32:	884a      	ldrh	r2, [r1, #2]
    1b34:	b292      	uxth	r2, r2
    1b36:	780b      	ldrb	r3, [r1, #0]
    1b38:	b2db      	uxtb	r3, r3
    1b3a:	7849      	ldrb	r1, [r1, #1]
    1b3c:	9100      	str	r1, [sp, #0]
    1b3e:	0031      	movs	r1, r6
    1b40:	48a7      	ldr	r0, [pc, #668]	; (1de0 <hif_handle_isr+0x37c>)
    1b42:	47a0      	blx	r4
    1b44:	200d      	movs	r0, #13
    1b46:	4ba3      	ldr	r3, [pc, #652]	; (1dd4 <hif_handle_isr+0x370>)
    1b48:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1b4a:	2001      	movs	r0, #1
    1b4c:	4ba3      	ldr	r3, [pc, #652]	; (1ddc <hif_handle_isr+0x378>)
    1b4e:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    1b50:	2406      	movs	r4, #6
    1b52:	4264      	negs	r4, r4
    1b54:	e0f0      	b.n	1d38 <hif_handle_isr+0x2d4>
					if(gstrHifCxt.pfWifiCb)
    1b56:	4b98      	ldr	r3, [pc, #608]	; (1db8 <hif_handle_isr+0x354>)
    1b58:	691b      	ldr	r3, [r3, #16]
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d020      	beq.n	1ba0 <hif_handle_isr+0x13c>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1b5e:	4b96      	ldr	r3, [pc, #600]	; (1db8 <hif_handle_isr+0x354>)
    1b60:	691b      	ldr	r3, [r3, #16]
    1b62:	aa04      	add	r2, sp, #16
    1b64:	7850      	ldrb	r0, [r2, #1]
    1b66:	b2c0      	uxtb	r0, r0
    1b68:	8851      	ldrh	r1, [r2, #2]
    1b6a:	9a05      	ldr	r2, [sp, #20]
    1b6c:	3208      	adds	r2, #8
    1b6e:	3908      	subs	r1, #8
    1b70:	b289      	uxth	r1, r1
    1b72:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    1b74:	4b90      	ldr	r3, [pc, #576]	; (1db8 <hif_handle_isr+0x354>)
    1b76:	789b      	ldrb	r3, [r3, #2]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d000      	beq.n	1b7e <hif_handle_isr+0x11a>
    1b7c:	e0a1      	b.n	1cc2 <hif_handle_isr+0x25e>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    1b7e:	464b      	mov	r3, r9
    1b80:	78db      	ldrb	r3, [r3, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d100      	bne.n	1b88 <hif_handle_isr+0x124>
    1b86:	e15b      	b.n	1e40 <hif_handle_isr+0x3dc>
    1b88:	4643      	mov	r3, r8
    1b8a:	791b      	ldrb	r3, [r3, #4]
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	d000      	beq.n	1b92 <hif_handle_isr+0x12e>
    1b90:	e156      	b.n	1e40 <hif_handle_isr+0x3dc>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    1b92:	4a89      	ldr	r2, [pc, #548]	; (1db8 <hif_handle_isr+0x354>)
    1b94:	78d3      	ldrb	r3, [r2, #3]
    1b96:	3b01      	subs	r3, #1
    1b98:	b2db      	uxtb	r3, r3
    1b9a:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1b9c:	4d91      	ldr	r5, [pc, #580]	; (1de4 <hif_handle_isr+0x380>)
    1b9e:	e0d6      	b.n	1d4e <hif_handle_isr+0x2ea>
						M2M_ERR("WIFI callback is not registered\n");
    1ba0:	22e8      	movs	r2, #232	; 0xe8
    1ba2:	32ff      	adds	r2, #255	; 0xff
    1ba4:	4986      	ldr	r1, [pc, #536]	; (1dc0 <hif_handle_isr+0x35c>)
    1ba6:	4887      	ldr	r0, [pc, #540]	; (1dc4 <hif_handle_isr+0x360>)
    1ba8:	4b87      	ldr	r3, [pc, #540]	; (1dc8 <hif_handle_isr+0x364>)
    1baa:	4798      	blx	r3
    1bac:	488e      	ldr	r0, [pc, #568]	; (1de8 <hif_handle_isr+0x384>)
    1bae:	4b88      	ldr	r3, [pc, #544]	; (1dd0 <hif_handle_isr+0x36c>)
    1bb0:	4798      	blx	r3
    1bb2:	200d      	movs	r0, #13
    1bb4:	4b87      	ldr	r3, [pc, #540]	; (1dd4 <hif_handle_isr+0x370>)
    1bb6:	4798      	blx	r3
    1bb8:	e7dc      	b.n	1b74 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfIpCb)
    1bba:	4b7f      	ldr	r3, [pc, #508]	; (1db8 <hif_handle_isr+0x354>)
    1bbc:	695b      	ldr	r3, [r3, #20]
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d00b      	beq.n	1bda <hif_handle_isr+0x176>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1bc2:	4b7d      	ldr	r3, [pc, #500]	; (1db8 <hif_handle_isr+0x354>)
    1bc4:	695b      	ldr	r3, [r3, #20]
    1bc6:	aa04      	add	r2, sp, #16
    1bc8:	7850      	ldrb	r0, [r2, #1]
    1bca:	b2c0      	uxtb	r0, r0
    1bcc:	8851      	ldrh	r1, [r2, #2]
    1bce:	9a05      	ldr	r2, [sp, #20]
    1bd0:	3208      	adds	r2, #8
    1bd2:	3908      	subs	r1, #8
    1bd4:	b289      	uxth	r1, r1
    1bd6:	4798      	blx	r3
    1bd8:	e7cc      	b.n	1b74 <hif_handle_isr+0x110>
						M2M_ERR("Scoket callback is not registered\n");
    1bda:	22f0      	movs	r2, #240	; 0xf0
    1bdc:	32ff      	adds	r2, #255	; 0xff
    1bde:	4978      	ldr	r1, [pc, #480]	; (1dc0 <hif_handle_isr+0x35c>)
    1be0:	4878      	ldr	r0, [pc, #480]	; (1dc4 <hif_handle_isr+0x360>)
    1be2:	4b79      	ldr	r3, [pc, #484]	; (1dc8 <hif_handle_isr+0x364>)
    1be4:	4798      	blx	r3
    1be6:	4881      	ldr	r0, [pc, #516]	; (1dec <hif_handle_isr+0x388>)
    1be8:	4b79      	ldr	r3, [pc, #484]	; (1dd0 <hif_handle_isr+0x36c>)
    1bea:	4798      	blx	r3
    1bec:	200d      	movs	r0, #13
    1bee:	4b79      	ldr	r3, [pc, #484]	; (1dd4 <hif_handle_isr+0x370>)
    1bf0:	4798      	blx	r3
    1bf2:	e7bf      	b.n	1b74 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfOtaCb)
    1bf4:	4b70      	ldr	r3, [pc, #448]	; (1db8 <hif_handle_isr+0x354>)
    1bf6:	699b      	ldr	r3, [r3, #24]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d00b      	beq.n	1c14 <hif_handle_isr+0x1b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1bfc:	4b6e      	ldr	r3, [pc, #440]	; (1db8 <hif_handle_isr+0x354>)
    1bfe:	699b      	ldr	r3, [r3, #24]
    1c00:	aa04      	add	r2, sp, #16
    1c02:	7850      	ldrb	r0, [r2, #1]
    1c04:	b2c0      	uxtb	r0, r0
    1c06:	8851      	ldrh	r1, [r2, #2]
    1c08:	9a05      	ldr	r2, [sp, #20]
    1c0a:	3208      	adds	r2, #8
    1c0c:	3908      	subs	r1, #8
    1c0e:	b289      	uxth	r1, r1
    1c10:	4798      	blx	r3
    1c12:	e7af      	b.n	1b74 <hif_handle_isr+0x110>
						M2M_ERR("Ota callback is not registered\n");
    1c14:	22f8      	movs	r2, #248	; 0xf8
    1c16:	32ff      	adds	r2, #255	; 0xff
    1c18:	4969      	ldr	r1, [pc, #420]	; (1dc0 <hif_handle_isr+0x35c>)
    1c1a:	486a      	ldr	r0, [pc, #424]	; (1dc4 <hif_handle_isr+0x360>)
    1c1c:	4b6a      	ldr	r3, [pc, #424]	; (1dc8 <hif_handle_isr+0x364>)
    1c1e:	4798      	blx	r3
    1c20:	4873      	ldr	r0, [pc, #460]	; (1df0 <hif_handle_isr+0x38c>)
    1c22:	4b6b      	ldr	r3, [pc, #428]	; (1dd0 <hif_handle_isr+0x36c>)
    1c24:	4798      	blx	r3
    1c26:	200d      	movs	r0, #13
    1c28:	4b6a      	ldr	r3, [pc, #424]	; (1dd4 <hif_handle_isr+0x370>)
    1c2a:	4798      	blx	r3
    1c2c:	e7a2      	b.n	1b74 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfCryptoCb)
    1c2e:	4b62      	ldr	r3, [pc, #392]	; (1db8 <hif_handle_isr+0x354>)
    1c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c32:	2b00      	cmp	r3, #0
    1c34:	d00b      	beq.n	1c4e <hif_handle_isr+0x1ea>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1c36:	4b60      	ldr	r3, [pc, #384]	; (1db8 <hif_handle_isr+0x354>)
    1c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c3a:	aa04      	add	r2, sp, #16
    1c3c:	7850      	ldrb	r0, [r2, #1]
    1c3e:	b2c0      	uxtb	r0, r0
    1c40:	8851      	ldrh	r1, [r2, #2]
    1c42:	9a05      	ldr	r2, [sp, #20]
    1c44:	3208      	adds	r2, #8
    1c46:	3908      	subs	r1, #8
    1c48:	b289      	uxth	r1, r1
    1c4a:	4798      	blx	r3
    1c4c:	e792      	b.n	1b74 <hif_handle_isr+0x110>
						M2M_ERR("Crypto callback is not registered\n");
    1c4e:	2280      	movs	r2, #128	; 0x80
    1c50:	0092      	lsls	r2, r2, #2
    1c52:	495b      	ldr	r1, [pc, #364]	; (1dc0 <hif_handle_isr+0x35c>)
    1c54:	485b      	ldr	r0, [pc, #364]	; (1dc4 <hif_handle_isr+0x360>)
    1c56:	4b5c      	ldr	r3, [pc, #368]	; (1dc8 <hif_handle_isr+0x364>)
    1c58:	4798      	blx	r3
    1c5a:	4866      	ldr	r0, [pc, #408]	; (1df4 <hif_handle_isr+0x390>)
    1c5c:	4b5c      	ldr	r3, [pc, #368]	; (1dd0 <hif_handle_isr+0x36c>)
    1c5e:	4798      	blx	r3
    1c60:	200d      	movs	r0, #13
    1c62:	4b5c      	ldr	r3, [pc, #368]	; (1dd4 <hif_handle_isr+0x370>)
    1c64:	4798      	blx	r3
    1c66:	e785      	b.n	1b74 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfSigmaCb)
    1c68:	4b53      	ldr	r3, [pc, #332]	; (1db8 <hif_handle_isr+0x354>)
    1c6a:	69db      	ldr	r3, [r3, #28]
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d00b      	beq.n	1c88 <hif_handle_isr+0x224>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1c70:	4b51      	ldr	r3, [pc, #324]	; (1db8 <hif_handle_isr+0x354>)
    1c72:	69db      	ldr	r3, [r3, #28]
    1c74:	aa04      	add	r2, sp, #16
    1c76:	7850      	ldrb	r0, [r2, #1]
    1c78:	b2c0      	uxtb	r0, r0
    1c7a:	8851      	ldrh	r1, [r2, #2]
    1c7c:	9a05      	ldr	r2, [sp, #20]
    1c7e:	3208      	adds	r2, #8
    1c80:	3908      	subs	r1, #8
    1c82:	b289      	uxth	r1, r1
    1c84:	4798      	blx	r3
    1c86:	e775      	b.n	1b74 <hif_handle_isr+0x110>
						M2M_ERR("Sigma callback is not registered\n");
    1c88:	4a5b      	ldr	r2, [pc, #364]	; (1df8 <hif_handle_isr+0x394>)
    1c8a:	494d      	ldr	r1, [pc, #308]	; (1dc0 <hif_handle_isr+0x35c>)
    1c8c:	484d      	ldr	r0, [pc, #308]	; (1dc4 <hif_handle_isr+0x360>)
    1c8e:	4b4e      	ldr	r3, [pc, #312]	; (1dc8 <hif_handle_isr+0x364>)
    1c90:	4798      	blx	r3
    1c92:	485a      	ldr	r0, [pc, #360]	; (1dfc <hif_handle_isr+0x398>)
    1c94:	4b4e      	ldr	r3, [pc, #312]	; (1dd0 <hif_handle_isr+0x36c>)
    1c96:	4798      	blx	r3
    1c98:	200d      	movs	r0, #13
    1c9a:	4b4e      	ldr	r3, [pc, #312]	; (1dd4 <hif_handle_isr+0x370>)
    1c9c:	4798      	blx	r3
    1c9e:	e769      	b.n	1b74 <hif_handle_isr+0x110>
				    if(gstrHifCxt.pfSslCb)
    1ca0:	4b45      	ldr	r3, [pc, #276]	; (1db8 <hif_handle_isr+0x354>)
    1ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	d100      	bne.n	1caa <hif_handle_isr+0x246>
    1ca8:	e764      	b.n	1b74 <hif_handle_isr+0x110>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1caa:	4b43      	ldr	r3, [pc, #268]	; (1db8 <hif_handle_isr+0x354>)
    1cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cae:	aa04      	add	r2, sp, #16
    1cb0:	7850      	ldrb	r0, [r2, #1]
    1cb2:	b2c0      	uxtb	r0, r0
    1cb4:	8851      	ldrh	r1, [r2, #2]
    1cb6:	9a05      	ldr	r2, [sp, #20]
    1cb8:	3208      	adds	r2, #8
    1cba:	3908      	subs	r1, #8
    1cbc:	b289      	uxth	r1, r1
    1cbe:	4798      	blx	r3
    1cc0:	e758      	b.n	1b74 <hif_handle_isr+0x110>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    1cc2:	4a4f      	ldr	r2, [pc, #316]	; (1e00 <hif_handle_isr+0x39c>)
    1cc4:	493e      	ldr	r1, [pc, #248]	; (1dc0 <hif_handle_isr+0x35c>)
    1cc6:	483f      	ldr	r0, [pc, #252]	; (1dc4 <hif_handle_isr+0x360>)
    1cc8:	4c3f      	ldr	r4, [pc, #252]	; (1dc8 <hif_handle_isr+0x364>)
    1cca:	47a0      	blx	r4
    1ccc:	ab04      	add	r3, sp, #16
    1cce:	7819      	ldrb	r1, [r3, #0]
    1cd0:	b2c9      	uxtb	r1, r1
    1cd2:	785a      	ldrb	r2, [r3, #1]
    1cd4:	b2d2      	uxtb	r2, r2
    1cd6:	484b      	ldr	r0, [pc, #300]	; (1e04 <hif_handle_isr+0x3a0>)
    1cd8:	47a0      	blx	r4
    1cda:	200d      	movs	r0, #13
    1cdc:	4b3d      	ldr	r3, [pc, #244]	; (1dd4 <hif_handle_isr+0x370>)
    1cde:	4798      	blx	r3
					ret = hif_set_rx_done();
    1ce0:	4b49      	ldr	r3, [pc, #292]	; (1e08 <hif_handle_isr+0x3a4>)
    1ce2:	4798      	blx	r3
    1ce4:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    1ce6:	d127      	bne.n	1d38 <hif_handle_isr+0x2d4>
    1ce8:	e749      	b.n	1b7e <hif_handle_isr+0x11a>
				M2M_ERR("(hif) Wrong Size\n");
    1cea:	4a48      	ldr	r2, [pc, #288]	; (1e0c <hif_handle_isr+0x3a8>)
    1cec:	4934      	ldr	r1, [pc, #208]	; (1dc0 <hif_handle_isr+0x35c>)
    1cee:	4835      	ldr	r0, [pc, #212]	; (1dc4 <hif_handle_isr+0x360>)
    1cf0:	4b35      	ldr	r3, [pc, #212]	; (1dc8 <hif_handle_isr+0x364>)
    1cf2:	4798      	blx	r3
    1cf4:	4846      	ldr	r0, [pc, #280]	; (1e10 <hif_handle_isr+0x3ac>)
    1cf6:	4b36      	ldr	r3, [pc, #216]	; (1dd0 <hif_handle_isr+0x36c>)
    1cf8:	4798      	blx	r3
    1cfa:	200d      	movs	r0, #13
    1cfc:	4b35      	ldr	r3, [pc, #212]	; (1dd4 <hif_handle_isr+0x370>)
    1cfe:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    1d00:	2402      	movs	r4, #2
    1d02:	4264      	negs	r4, r4
    1d04:	e018      	b.n	1d38 <hif_handle_isr+0x2d4>
			M2M_ERR("(hif) False interrupt %lx",reg);
    1d06:	4a43      	ldr	r2, [pc, #268]	; (1e14 <hif_handle_isr+0x3b0>)
    1d08:	492d      	ldr	r1, [pc, #180]	; (1dc0 <hif_handle_isr+0x35c>)
    1d0a:	482e      	ldr	r0, [pc, #184]	; (1dc4 <hif_handle_isr+0x360>)
    1d0c:	4c2e      	ldr	r4, [pc, #184]	; (1dc8 <hif_handle_isr+0x364>)
    1d0e:	47a0      	blx	r4
    1d10:	9903      	ldr	r1, [sp, #12]
    1d12:	4841      	ldr	r0, [pc, #260]	; (1e18 <hif_handle_isr+0x3b4>)
    1d14:	47a0      	blx	r4
    1d16:	200d      	movs	r0, #13
    1d18:	4b2e      	ldr	r3, [pc, #184]	; (1dd4 <hif_handle_isr+0x370>)
    1d1a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1d1c:	240c      	movs	r4, #12
    1d1e:	4264      	negs	r4, r4
    1d20:	e00a      	b.n	1d38 <hif_handle_isr+0x2d4>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1d22:	4a3e      	ldr	r2, [pc, #248]	; (1e1c <hif_handle_isr+0x3b8>)
    1d24:	4926      	ldr	r1, [pc, #152]	; (1dc0 <hif_handle_isr+0x35c>)
    1d26:	4827      	ldr	r0, [pc, #156]	; (1dc4 <hif_handle_isr+0x360>)
    1d28:	4b27      	ldr	r3, [pc, #156]	; (1dc8 <hif_handle_isr+0x364>)
    1d2a:	4798      	blx	r3
    1d2c:	483c      	ldr	r0, [pc, #240]	; (1e20 <hif_handle_isr+0x3bc>)
    1d2e:	4b28      	ldr	r3, [pc, #160]	; (1dd0 <hif_handle_isr+0x36c>)
    1d30:	4798      	blx	r3
    1d32:	200d      	movs	r0, #13
    1d34:	4b27      	ldr	r3, [pc, #156]	; (1dd4 <hif_handle_isr+0x370>)
    1d36:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1d38:	4a3a      	ldr	r2, [pc, #232]	; (1e24 <hif_handle_isr+0x3c0>)
    1d3a:	493b      	ldr	r1, [pc, #236]	; (1e28 <hif_handle_isr+0x3c4>)
    1d3c:	4821      	ldr	r0, [pc, #132]	; (1dc4 <hif_handle_isr+0x360>)
    1d3e:	4f22      	ldr	r7, [pc, #136]	; (1dc8 <hif_handle_isr+0x364>)
    1d40:	47b8      	blx	r7
    1d42:	0021      	movs	r1, r4
    1d44:	4839      	ldr	r0, [pc, #228]	; (1e2c <hif_handle_isr+0x3c8>)
    1d46:	47b8      	blx	r7
    1d48:	200d      	movs	r0, #13
    1d4a:	4b22      	ldr	r3, [pc, #136]	; (1dd4 <hif_handle_isr+0x370>)
    1d4c:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1d4e:	a903      	add	r1, sp, #12
    1d50:	4837      	ldr	r0, [pc, #220]	; (1e30 <hif_handle_isr+0x3cc>)
    1d52:	47a8      	blx	r5
    1d54:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    1d56:	d1e4      	bne.n	1d22 <hif_handle_isr+0x2be>
		if(reg & 0x1)	/* New interrupt has been received */
    1d58:	9b03      	ldr	r3, [sp, #12]
    1d5a:	07db      	lsls	r3, r3, #31
    1d5c:	d5d3      	bpl.n	1d06 <hif_handle_isr+0x2a2>
			nm_bsp_interrupt_ctrl(0);
    1d5e:	2000      	movs	r0, #0
    1d60:	4b1e      	ldr	r3, [pc, #120]	; (1ddc <hif_handle_isr+0x378>)
    1d62:	4798      	blx	r3
			reg &= ~NBIT0;
    1d64:	2301      	movs	r3, #1
    1d66:	9903      	ldr	r1, [sp, #12]
    1d68:	4399      	bics	r1, r3
    1d6a:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1d6c:	4830      	ldr	r0, [pc, #192]	; (1e30 <hif_handle_isr+0x3cc>)
    1d6e:	4b31      	ldr	r3, [pc, #196]	; (1e34 <hif_handle_isr+0x3d0>)
    1d70:	4798      	blx	r3
    1d72:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    1d74:	d1e0      	bne.n	1d38 <hif_handle_isr+0x2d4>
			gstrHifCxt.u8HifRXDone = 1;
    1d76:	2201      	movs	r2, #1
    1d78:	4b0f      	ldr	r3, [pc, #60]	; (1db8 <hif_handle_isr+0x354>)
    1d7a:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1d7c:	9b03      	ldr	r3, [sp, #12]
    1d7e:	049e      	lsls	r6, r3, #18
    1d80:	0d36      	lsrs	r6, r6, #20
			if (size > 0) {
    1d82:	d0b2      	beq.n	1cea <hif_handle_isr+0x286>
				uint32 address = 0;
    1d84:	2300      	movs	r3, #0
    1d86:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1d88:	a905      	add	r1, sp, #20
    1d8a:	482b      	ldr	r0, [pc, #172]	; (1e38 <hif_handle_isr+0x3d4>)
    1d8c:	4b15      	ldr	r3, [pc, #84]	; (1de4 <hif_handle_isr+0x380>)
    1d8e:	4798      	blx	r3
    1d90:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    1d92:	d100      	bne.n	1d96 <hif_handle_isr+0x332>
    1d94:	e671      	b.n	1a7a <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1d96:	22e4      	movs	r2, #228	; 0xe4
    1d98:	0052      	lsls	r2, r2, #1
    1d9a:	4909      	ldr	r1, [pc, #36]	; (1dc0 <hif_handle_isr+0x35c>)
    1d9c:	4809      	ldr	r0, [pc, #36]	; (1dc4 <hif_handle_isr+0x360>)
    1d9e:	4b0a      	ldr	r3, [pc, #40]	; (1dc8 <hif_handle_isr+0x364>)
    1da0:	4798      	blx	r3
    1da2:	4826      	ldr	r0, [pc, #152]	; (1e3c <hif_handle_isr+0x3d8>)
    1da4:	4b0a      	ldr	r3, [pc, #40]	; (1dd0 <hif_handle_isr+0x36c>)
    1da6:	4798      	blx	r3
    1da8:	200d      	movs	r0, #13
    1daa:	4b0a      	ldr	r3, [pc, #40]	; (1dd4 <hif_handle_isr+0x370>)
    1dac:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1dae:	2001      	movs	r0, #1
    1db0:	4b0a      	ldr	r3, [pc, #40]	; (1ddc <hif_handle_isr+0x378>)
    1db2:	4798      	blx	r3
    1db4:	e7c0      	b.n	1d38 <hif_handle_isr+0x2d4>
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	20000f38 	.word	0x20000f38
    1dbc:	00002b89 	.word	0x00002b89
    1dc0:	0000d664 	.word	0x0000d664
    1dc4:	0000d610 	.word	0x0000d610
    1dc8:	0000bf11 	.word	0x0000bf11
    1dcc:	0000d7c0 	.word	0x0000d7c0
    1dd0:	0000c02d 	.word	0x0000c02d
    1dd4:	0000bf45 	.word	0x0000bf45
    1dd8:	0000d6bc 	.word	0x0000d6bc
    1ddc:	0000142d 	.word	0x0000142d
    1de0:	0000d6d4 	.word	0x0000d6d4
    1de4:	00002b71 	.word	0x00002b71
    1de8:	0000d714 	.word	0x0000d714
    1dec:	0000d734 	.word	0x0000d734
    1df0:	0000d758 	.word	0x0000d758
    1df4:	0000d778 	.word	0x0000d778
    1df8:	00000207 	.word	0x00000207
    1dfc:	0000d79c 	.word	0x0000d79c
    1e00:	00000216 	.word	0x00000216
    1e04:	0000d7d8 	.word	0x0000d7d8
    1e08:	00001761 	.word	0x00001761
    1e0c:	0000021d 	.word	0x0000021d
    1e10:	0000d804 	.word	0x0000d804
    1e14:	00000225 	.word	0x00000225
    1e18:	0000d818 	.word	0x0000d818
    1e1c:	0000022e 	.word	0x0000022e
    1e20:	0000d834 	.word	0x0000d834
    1e24:	00000257 	.word	0x00000257
    1e28:	0000d66c 	.word	0x0000d66c
    1e2c:	0000d858 	.word	0x0000d858
    1e30:	00001070 	.word	0x00001070
    1e34:	00002b7d 	.word	0x00002b7d
    1e38:	00001084 	.word	0x00001084
    1e3c:	0000d698 	.word	0x0000d698
			}
		}
	}

	return ret;
}
    1e40:	2000      	movs	r0, #0
    1e42:	b007      	add	sp, #28
    1e44:	bc0c      	pop	{r2, r3}
    1e46:	4690      	mov	r8, r2
    1e48:	4699      	mov	r9, r3
    1e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e4c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
    1e4e:	0014      	movs	r4, r2
    1e50:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1e52:	2800      	cmp	r0, #0
    1e54:	d003      	beq.n	1e5e <hif_receive+0x12>
    1e56:	2900      	cmp	r1, #0
    1e58:	d001      	beq.n	1e5e <hif_receive+0x12>
    1e5a:	2a00      	cmp	r2, #0
    1e5c:	d113      	bne.n	1e86 <hif_receive+0x3a>
	{
		if(isDone)
    1e5e:	2d00      	cmp	r5, #0
    1e60:	d002      	beq.n	1e68 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    1e62:	4b28      	ldr	r3, [pc, #160]	; (1f04 <hif_receive+0xb8>)
    1e64:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    1e66:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    1e68:	229e      	movs	r2, #158	; 0x9e
    1e6a:	0092      	lsls	r2, r2, #2
    1e6c:	4926      	ldr	r1, [pc, #152]	; (1f08 <hif_receive+0xbc>)
    1e6e:	4827      	ldr	r0, [pc, #156]	; (1f0c <hif_receive+0xc0>)
    1e70:	4b27      	ldr	r3, [pc, #156]	; (1f10 <hif_receive+0xc4>)
    1e72:	4798      	blx	r3
    1e74:	4827      	ldr	r0, [pc, #156]	; (1f14 <hif_receive+0xc8>)
    1e76:	4b28      	ldr	r3, [pc, #160]	; (1f18 <hif_receive+0xcc>)
    1e78:	4798      	blx	r3
    1e7a:	200d      	movs	r0, #13
    1e7c:	4b27      	ldr	r3, [pc, #156]	; (1f1c <hif_receive+0xd0>)
    1e7e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1e80:	200c      	movs	r0, #12
    1e82:	4240      	negs	r0, r0
    1e84:	e7ef      	b.n	1e66 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    1e86:	4b26      	ldr	r3, [pc, #152]	; (1f20 <hif_receive+0xd4>)
    1e88:	68db      	ldr	r3, [r3, #12]
    1e8a:	429a      	cmp	r2, r3
    1e8c:	d81a      	bhi.n	1ec4 <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1e8e:	4b24      	ldr	r3, [pc, #144]	; (1f20 <hif_receive+0xd4>)
    1e90:	689b      	ldr	r3, [r3, #8]
    1e92:	4298      	cmp	r0, r3
    1e94:	d327      	bcc.n	1ee6 <hif_receive+0x9a>
    1e96:	1886      	adds	r6, r0, r2
    1e98:	4a21      	ldr	r2, [pc, #132]	; (1f20 <hif_receive+0xd4>)
    1e9a:	6893      	ldr	r3, [r2, #8]
    1e9c:	68d2      	ldr	r2, [r2, #12]
    1e9e:	189b      	adds	r3, r3, r2
    1ea0:	429e      	cmp	r6, r3
    1ea2:	d820      	bhi.n	1ee6 <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    1ea4:	0022      	movs	r2, r4
    1ea6:	4b1f      	ldr	r3, [pc, #124]	; (1f24 <hif_receive+0xd8>)
    1ea8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1eaa:	2800      	cmp	r0, #0
    1eac:	d1db      	bne.n	1e66 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    1eae:	4a1c      	ldr	r2, [pc, #112]	; (1f20 <hif_receive+0xd4>)
    1eb0:	6893      	ldr	r3, [r2, #8]
    1eb2:	68d2      	ldr	r2, [r2, #12]
    1eb4:	189b      	adds	r3, r3, r2
    1eb6:	429e      	cmp	r6, r3
    1eb8:	d001      	beq.n	1ebe <hif_receive+0x72>
    1eba:	2d00      	cmp	r5, #0
    1ebc:	d0d3      	beq.n	1e66 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    1ebe:	4b11      	ldr	r3, [pc, #68]	; (1f04 <hif_receive+0xb8>)
    1ec0:	4798      	blx	r3
    1ec2:	e7d0      	b.n	1e66 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    1ec4:	22a0      	movs	r2, #160	; 0xa0
    1ec6:	0092      	lsls	r2, r2, #2
    1ec8:	490f      	ldr	r1, [pc, #60]	; (1f08 <hif_receive+0xbc>)
    1eca:	4810      	ldr	r0, [pc, #64]	; (1f0c <hif_receive+0xc0>)
    1ecc:	4d10      	ldr	r5, [pc, #64]	; (1f10 <hif_receive+0xc4>)
    1ece:	47a8      	blx	r5
    1ed0:	4b13      	ldr	r3, [pc, #76]	; (1f20 <hif_receive+0xd4>)
    1ed2:	68da      	ldr	r2, [r3, #12]
    1ed4:	0021      	movs	r1, r4
    1ed6:	4814      	ldr	r0, [pc, #80]	; (1f28 <hif_receive+0xdc>)
    1ed8:	47a8      	blx	r5
    1eda:	200d      	movs	r0, #13
    1edc:	4b0f      	ldr	r3, [pc, #60]	; (1f1c <hif_receive+0xd0>)
    1ede:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1ee0:	200c      	movs	r0, #12
    1ee2:	4240      	negs	r0, r0
		goto ERR1;
    1ee4:	e7bf      	b.n	1e66 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1ee6:	4a11      	ldr	r2, [pc, #68]	; (1f2c <hif_receive+0xe0>)
    1ee8:	4907      	ldr	r1, [pc, #28]	; (1f08 <hif_receive+0xbc>)
    1eea:	4808      	ldr	r0, [pc, #32]	; (1f0c <hif_receive+0xc0>)
    1eec:	4b08      	ldr	r3, [pc, #32]	; (1f10 <hif_receive+0xc4>)
    1eee:	4798      	blx	r3
    1ef0:	480f      	ldr	r0, [pc, #60]	; (1f30 <hif_receive+0xe4>)
    1ef2:	4b09      	ldr	r3, [pc, #36]	; (1f18 <hif_receive+0xcc>)
    1ef4:	4798      	blx	r3
    1ef6:	200d      	movs	r0, #13
    1ef8:	4b08      	ldr	r3, [pc, #32]	; (1f1c <hif_receive+0xd0>)
    1efa:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1efc:	200c      	movs	r0, #12
    1efe:	4240      	negs	r0, r0
		goto ERR1;
    1f00:	e7b1      	b.n	1e66 <hif_receive+0x1a>
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	00001761 	.word	0x00001761
    1f08:	0000d67c 	.word	0x0000d67c
    1f0c:	0000d610 	.word	0x0000d610
    1f10:	0000bf11 	.word	0x0000bf11
    1f14:	0000d888 	.word	0x0000d888
    1f18:	0000c02d 	.word	0x0000c02d
    1f1c:	0000bf45 	.word	0x0000bf45
    1f20:	20000f38 	.word	0x20000f38
    1f24:	00002b89 	.word	0x00002b89
    1f28:	0000d8a8 	.word	0x0000d8a8
    1f2c:	00000286 	.word	0x00000286
    1f30:	0000d8f0 	.word	0x0000d8f0

00001f34 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1f34:	b570      	push	{r4, r5, r6, lr}
    1f36:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1f38:	2807      	cmp	r0, #7
    1f3a:	d81f      	bhi.n	1f7c <hif_register_cb+0x48>
    1f3c:	0083      	lsls	r3, r0, #2
    1f3e:	4a16      	ldr	r2, [pc, #88]	; (1f98 <hif_register_cb+0x64>)
    1f40:	58d3      	ldr	r3, [r2, r3]
    1f42:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1f44:	4b15      	ldr	r3, [pc, #84]	; (1f9c <hif_register_cb+0x68>)
    1f46:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    1f48:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    1f4a:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    1f4c:	4b13      	ldr	r3, [pc, #76]	; (1f9c <hif_register_cb+0x68>)
    1f4e:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    1f50:	2000      	movs	r0, #0
			break;
    1f52:	e7fa      	b.n	1f4a <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    1f54:	4b11      	ldr	r3, [pc, #68]	; (1f9c <hif_register_cb+0x68>)
    1f56:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    1f58:	2000      	movs	r0, #0
			break;
    1f5a:	e7f6      	b.n	1f4a <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    1f5c:	4b0f      	ldr	r3, [pc, #60]	; (1f9c <hif_register_cb+0x68>)
    1f5e:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    1f60:	2000      	movs	r0, #0
			break;
    1f62:	e7f2      	b.n	1f4a <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    1f64:	4b0d      	ldr	r3, [pc, #52]	; (1f9c <hif_register_cb+0x68>)
    1f66:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    1f68:	2000      	movs	r0, #0
			break;
    1f6a:	e7ee      	b.n	1f4a <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    1f6c:	4b0b      	ldr	r3, [pc, #44]	; (1f9c <hif_register_cb+0x68>)
    1f6e:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    1f70:	2000      	movs	r0, #0
			break;
    1f72:	e7ea      	b.n	1f4a <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    1f74:	4b09      	ldr	r3, [pc, #36]	; (1f9c <hif_register_cb+0x68>)
    1f76:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    1f78:	2000      	movs	r0, #0
			break;
    1f7a:	e7e6      	b.n	1f4a <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    1f7c:	4a08      	ldr	r2, [pc, #32]	; (1fa0 <hif_register_cb+0x6c>)
    1f7e:	4909      	ldr	r1, [pc, #36]	; (1fa4 <hif_register_cb+0x70>)
    1f80:	4809      	ldr	r0, [pc, #36]	; (1fa8 <hif_register_cb+0x74>)
    1f82:	4d0a      	ldr	r5, [pc, #40]	; (1fac <hif_register_cb+0x78>)
    1f84:	47a8      	blx	r5
    1f86:	0021      	movs	r1, r4
    1f88:	4809      	ldr	r0, [pc, #36]	; (1fb0 <hif_register_cb+0x7c>)
    1f8a:	47a8      	blx	r5
    1f8c:	200d      	movs	r0, #13
    1f8e:	4b09      	ldr	r3, [pc, #36]	; (1fb4 <hif_register_cb+0x80>)
    1f90:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1f92:	200c      	movs	r0, #12
    1f94:	4240      	negs	r0, r0
			break;
    1f96:	e7d8      	b.n	1f4a <hif_register_cb+0x16>
    1f98:	0000d638 	.word	0x0000d638
    1f9c:	20000f38 	.word	0x20000f38
    1fa0:	000002be 	.word	0x000002be
    1fa4:	0000d688 	.word	0x0000d688
    1fa8:	0000d610 	.word	0x0000d610
    1fac:	0000bf11 	.word	0x0000bf11
    1fb0:	0000d934 	.word	0x0000d934
    1fb4:	0000bf45 	.word	0x0000bf45

00001fb8 <hif_init>:
{
    1fb8:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    1fba:	222c      	movs	r2, #44	; 0x2c
    1fbc:	2100      	movs	r1, #0
    1fbe:	4806      	ldr	r0, [pc, #24]	; (1fd8 <hif_init+0x20>)
    1fc0:	4b06      	ldr	r3, [pc, #24]	; (1fdc <hif_init+0x24>)
    1fc2:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    1fc4:	4806      	ldr	r0, [pc, #24]	; (1fe0 <hif_init+0x28>)
    1fc6:	4b07      	ldr	r3, [pc, #28]	; (1fe4 <hif_init+0x2c>)
    1fc8:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    1fca:	4907      	ldr	r1, [pc, #28]	; (1fe8 <hif_init+0x30>)
    1fcc:	2003      	movs	r0, #3
    1fce:	4b07      	ldr	r3, [pc, #28]	; (1fec <hif_init+0x34>)
    1fd0:	4798      	blx	r3
}
    1fd2:	2000      	movs	r0, #0
    1fd4:	bd10      	pop	{r4, pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	20000f38 	.word	0x20000f38
    1fdc:	00001721 	.word	0x00001721
    1fe0:	0000174d 	.word	0x0000174d
    1fe4:	000013d5 	.word	0x000013d5
    1fe8:	0000175d 	.word	0x0000175d
    1fec:	00001f35 	.word	0x00001f35

00001ff0 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1ff0:	b530      	push	{r4, r5, lr}
    1ff2:	b09f      	sub	sp, #124	; 0x7c
    1ff4:	0004      	movs	r4, r0
    1ff6:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1ff8:	282c      	cmp	r0, #44	; 0x2c
    1ffa:	d02f      	beq.n	205c <STACK_SIZE+0x5c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1ffc:	281b      	cmp	r0, #27
    1ffe:	d03d      	beq.n	207c <STACK_SIZE+0x7c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    2000:	2806      	cmp	r0, #6
    2002:	d04b      	beq.n	209c <STACK_SIZE+0x9c>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    2004:	280e      	cmp	r0, #14
    2006:	d027      	beq.n	2058 <STACK_SIZE+0x58>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    2008:	2832      	cmp	r0, #50	; 0x32
    200a:	d057      	beq.n	20bc <STACK_SIZE+0xbc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    200c:	282f      	cmp	r0, #47	; 0x2f
    200e:	d065      	beq.n	20dc <STACK_SIZE+0xdc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    2010:	2834      	cmp	r0, #52	; 0x34
    2012:	d100      	bne.n	2016 <STACK_SIZE+0x16>
    2014:	e077      	b.n	2106 <STACK_SIZE+0x106>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    2016:	2811      	cmp	r0, #17
    2018:	d100      	bne.n	201c <STACK_SIZE+0x1c>
    201a:	e096      	b.n	214a <STACK_SIZE+0x14a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    201c:	2813      	cmp	r0, #19
    201e:	d100      	bne.n	2022 <STACK_SIZE+0x22>
    2020:	e0ac      	b.n	217c <STACK_SIZE+0x17c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    2022:	2804      	cmp	r0, #4
    2024:	d100      	bne.n	2028 <STACK_SIZE+0x28>
    2026:	e0bb      	b.n	21a0 <STACK_SIZE+0x1a0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    2028:	2865      	cmp	r0, #101	; 0x65
    202a:	d100      	bne.n	202e <STACK_SIZE+0x2e>
    202c:	e0ca      	b.n	21c4 <STACK_SIZE+0x1c4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    202e:	2809      	cmp	r0, #9
    2030:	d100      	bne.n	2034 <STACK_SIZE+0x34>
    2032:	e0d9      	b.n	21e8 <STACK_SIZE+0x1e8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    2034:	282a      	cmp	r0, #42	; 0x2a
    2036:	d100      	bne.n	203a <STACK_SIZE+0x3a>
    2038:	e0e8      	b.n	220c <STACK_SIZE+0x20c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    203a:	2820      	cmp	r0, #32
    203c:	d100      	bne.n	2040 <STACK_SIZE+0x40>
    203e:	e0f7      	b.n	2230 <STACK_SIZE+0x230>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    2040:	2224      	movs	r2, #36	; 0x24
    2042:	32ff      	adds	r2, #255	; 0xff
    2044:	4989      	ldr	r1, [pc, #548]	; (226c <STACK_SIZE+0x26c>)
    2046:	488a      	ldr	r0, [pc, #552]	; (2270 <STACK_SIZE+0x270>)
    2048:	4d8a      	ldr	r5, [pc, #552]	; (2274 <STACK_SIZE+0x274>)
    204a:	47a8      	blx	r5
    204c:	0021      	movs	r1, r4
    204e:	488a      	ldr	r0, [pc, #552]	; (2278 <STACK_SIZE+0x278>)
    2050:	47a8      	blx	r5
    2052:	200d      	movs	r0, #13
    2054:	4b89      	ldr	r3, [pc, #548]	; (227c <STACK_SIZE+0x27c>)
    2056:	4798      	blx	r3
	}
}
    2058:	b01f      	add	sp, #124	; 0x7c
    205a:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    205c:	2300      	movs	r3, #0
    205e:	2204      	movs	r2, #4
    2060:	a903      	add	r1, sp, #12
    2062:	0028      	movs	r0, r5
    2064:	4c86      	ldr	r4, [pc, #536]	; (2280 <STACK_SIZE+0x280>)
    2066:	47a0      	blx	r4
    2068:	2800      	cmp	r0, #0
    206a:	d1f5      	bne.n	2058 <STACK_SIZE+0x58>
			if (gpfAppWifiCb)
    206c:	4b85      	ldr	r3, [pc, #532]	; (2284 <STACK_SIZE+0x284>)
    206e:	681b      	ldr	r3, [r3, #0]
    2070:	2b00      	cmp	r3, #0
    2072:	d0f1      	beq.n	2058 <STACK_SIZE+0x58>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    2074:	a903      	add	r1, sp, #12
    2076:	302c      	adds	r0, #44	; 0x2c
    2078:	4798      	blx	r3
    207a:	e7ed      	b.n	2058 <STACK_SIZE+0x58>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    207c:	2300      	movs	r3, #0
    207e:	2208      	movs	r2, #8
    2080:	a903      	add	r1, sp, #12
    2082:	0028      	movs	r0, r5
    2084:	4c7e      	ldr	r4, [pc, #504]	; (2280 <STACK_SIZE+0x280>)
    2086:	47a0      	blx	r4
    2088:	2800      	cmp	r0, #0
    208a:	d1e5      	bne.n	2058 <STACK_SIZE+0x58>
			if (gpfAppWifiCb)
    208c:	4b7d      	ldr	r3, [pc, #500]	; (2284 <STACK_SIZE+0x284>)
    208e:	681b      	ldr	r3, [r3, #0]
    2090:	2b00      	cmp	r3, #0
    2092:	d0e1      	beq.n	2058 <STACK_SIZE+0x58>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    2094:	a903      	add	r1, sp, #12
    2096:	301b      	adds	r0, #27
    2098:	4798      	blx	r3
    209a:	e7dd      	b.n	2058 <STACK_SIZE+0x58>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    209c:	2301      	movs	r3, #1
    209e:	2230      	movs	r2, #48	; 0x30
    20a0:	a903      	add	r1, sp, #12
    20a2:	0028      	movs	r0, r5
    20a4:	4c76      	ldr	r4, [pc, #472]	; (2280 <STACK_SIZE+0x280>)
    20a6:	47a0      	blx	r4
    20a8:	2800      	cmp	r0, #0
    20aa:	d1d5      	bne.n	2058 <STACK_SIZE+0x58>
			if(gpfAppWifiCb)
    20ac:	4b75      	ldr	r3, [pc, #468]	; (2284 <STACK_SIZE+0x284>)
    20ae:	681b      	ldr	r3, [r3, #0]
    20b0:	2b00      	cmp	r3, #0
    20b2:	d0d1      	beq.n	2058 <STACK_SIZE+0x58>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    20b4:	a903      	add	r1, sp, #12
    20b6:	3006      	adds	r0, #6
    20b8:	4798      	blx	r3
    20ba:	e7cd      	b.n	2058 <STACK_SIZE+0x58>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    20bc:	2300      	movs	r3, #0
    20be:	2218      	movs	r2, #24
    20c0:	a903      	add	r1, sp, #12
    20c2:	0028      	movs	r0, r5
    20c4:	4c6e      	ldr	r4, [pc, #440]	; (2280 <STACK_SIZE+0x280>)
    20c6:	47a0      	blx	r4
    20c8:	2800      	cmp	r0, #0
    20ca:	d1c5      	bne.n	2058 <STACK_SIZE+0x58>
			if (gpfAppWifiCb)
    20cc:	4b6d      	ldr	r3, [pc, #436]	; (2284 <STACK_SIZE+0x284>)
    20ce:	681b      	ldr	r3, [r3, #0]
    20d0:	2b00      	cmp	r3, #0
    20d2:	d0c1      	beq.n	2058 <STACK_SIZE+0x58>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    20d4:	a903      	add	r1, sp, #12
    20d6:	3032      	adds	r0, #50	; 0x32
    20d8:	4798      	blx	r3
    20da:	e7bd      	b.n	2058 <STACK_SIZE+0x58>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    20dc:	2264      	movs	r2, #100	; 0x64
    20de:	2100      	movs	r1, #0
    20e0:	a803      	add	r0, sp, #12
    20e2:	4b69      	ldr	r3, [pc, #420]	; (2288 <STACK_SIZE+0x288>)
    20e4:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    20e6:	2300      	movs	r3, #0
    20e8:	2264      	movs	r2, #100	; 0x64
    20ea:	a903      	add	r1, sp, #12
    20ec:	0028      	movs	r0, r5
    20ee:	4c64      	ldr	r4, [pc, #400]	; (2280 <STACK_SIZE+0x280>)
    20f0:	47a0      	blx	r4
    20f2:	2800      	cmp	r0, #0
    20f4:	d1b0      	bne.n	2058 <STACK_SIZE+0x58>
			if (gpfAppWifiCb)
    20f6:	4b63      	ldr	r3, [pc, #396]	; (2284 <STACK_SIZE+0x284>)
    20f8:	681b      	ldr	r3, [r3, #0]
    20fa:	2b00      	cmp	r3, #0
    20fc:	d0ac      	beq.n	2058 <STACK_SIZE+0x58>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    20fe:	a903      	add	r1, sp, #12
    2100:	302f      	adds	r0, #47	; 0x2f
    2102:	4798      	blx	r3
    2104:	e7a8      	b.n	2058 <STACK_SIZE+0x58>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    2106:	2300      	movs	r3, #0
    2108:	2204      	movs	r2, #4
    210a:	a903      	add	r1, sp, #12
    210c:	0028      	movs	r0, r5
    210e:	4c5c      	ldr	r4, [pc, #368]	; (2280 <STACK_SIZE+0x280>)
    2110:	47a0      	blx	r4
    2112:	2800      	cmp	r0, #0
    2114:	d1a0      	bne.n	2058 <STACK_SIZE+0x58>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    2116:	485d      	ldr	r0, [pc, #372]	; (228c <STACK_SIZE+0x28c>)
    2118:	4d56      	ldr	r5, [pc, #344]	; (2274 <STACK_SIZE+0x274>)
    211a:	47a8      	blx	r5
    211c:	9c03      	ldr	r4, [sp, #12]
    211e:	0a23      	lsrs	r3, r4, #8
    2120:	20ff      	movs	r0, #255	; 0xff
    2122:	4003      	ands	r3, r0
    2124:	0c22      	lsrs	r2, r4, #16
    2126:	4002      	ands	r2, r0
    2128:	0e21      	lsrs	r1, r4, #24
    212a:	4020      	ands	r0, r4
    212c:	9000      	str	r0, [sp, #0]
    212e:	4858      	ldr	r0, [pc, #352]	; (2290 <STACK_SIZE+0x290>)
    2130:	47a8      	blx	r5
    2132:	200d      	movs	r0, #13
    2134:	4b51      	ldr	r3, [pc, #324]	; (227c <STACK_SIZE+0x27c>)
    2136:	4798      	blx	r3
			if (gpfAppWifiCb)
    2138:	4b52      	ldr	r3, [pc, #328]	; (2284 <STACK_SIZE+0x284>)
    213a:	681b      	ldr	r3, [r3, #0]
    213c:	2b00      	cmp	r3, #0
    213e:	d100      	bne.n	2142 <STACK_SIZE+0x142>
    2140:	e78a      	b.n	2058 <STACK_SIZE+0x58>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    2142:	2100      	movs	r1, #0
    2144:	2034      	movs	r0, #52	; 0x34
    2146:	4798      	blx	r3
    2148:	e786      	b.n	2058 <STACK_SIZE+0x58>
		gu8scanInProgress = 0;
    214a:	2200      	movs	r2, #0
    214c:	4b51      	ldr	r3, [pc, #324]	; (2294 <STACK_SIZE+0x294>)
    214e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    2150:	2300      	movs	r3, #0
    2152:	3204      	adds	r2, #4
    2154:	a903      	add	r1, sp, #12
    2156:	0028      	movs	r0, r5
    2158:	4c49      	ldr	r4, [pc, #292]	; (2280 <STACK_SIZE+0x280>)
    215a:	47a0      	blx	r4
    215c:	2800      	cmp	r0, #0
    215e:	d000      	beq.n	2162 <STACK_SIZE+0x162>
    2160:	e77a      	b.n	2058 <STACK_SIZE+0x58>
			gu8ChNum = strState.u8NumofCh;
    2162:	ab03      	add	r3, sp, #12
    2164:	781a      	ldrb	r2, [r3, #0]
    2166:	4b4c      	ldr	r3, [pc, #304]	; (2298 <STACK_SIZE+0x298>)
    2168:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    216a:	4b46      	ldr	r3, [pc, #280]	; (2284 <STACK_SIZE+0x284>)
    216c:	681b      	ldr	r3, [r3, #0]
    216e:	2b00      	cmp	r3, #0
    2170:	d100      	bne.n	2174 <STACK_SIZE+0x174>
    2172:	e771      	b.n	2058 <STACK_SIZE+0x58>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    2174:	a903      	add	r1, sp, #12
    2176:	3011      	adds	r0, #17
    2178:	4798      	blx	r3
    217a:	e76d      	b.n	2058 <STACK_SIZE+0x58>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    217c:	2300      	movs	r3, #0
    217e:	222c      	movs	r2, #44	; 0x2c
    2180:	a903      	add	r1, sp, #12
    2182:	0028      	movs	r0, r5
    2184:	4c3e      	ldr	r4, [pc, #248]	; (2280 <STACK_SIZE+0x280>)
    2186:	47a0      	blx	r4
    2188:	2800      	cmp	r0, #0
    218a:	d000      	beq.n	218e <STACK_SIZE+0x18e>
    218c:	e764      	b.n	2058 <STACK_SIZE+0x58>
			if (gpfAppWifiCb)
    218e:	4b3d      	ldr	r3, [pc, #244]	; (2284 <STACK_SIZE+0x284>)
    2190:	681b      	ldr	r3, [r3, #0]
    2192:	2b00      	cmp	r3, #0
    2194:	d100      	bne.n	2198 <STACK_SIZE+0x198>
    2196:	e75f      	b.n	2058 <STACK_SIZE+0x58>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    2198:	a903      	add	r1, sp, #12
    219a:	3013      	adds	r0, #19
    219c:	4798      	blx	r3
    219e:	e75b      	b.n	2058 <STACK_SIZE+0x58>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    21a0:	2300      	movs	r3, #0
    21a2:	2204      	movs	r2, #4
    21a4:	a91c      	add	r1, sp, #112	; 0x70
    21a6:	0028      	movs	r0, r5
    21a8:	4c35      	ldr	r4, [pc, #212]	; (2280 <STACK_SIZE+0x280>)
    21aa:	47a0      	blx	r4
    21ac:	2800      	cmp	r0, #0
    21ae:	d000      	beq.n	21b2 <STACK_SIZE+0x1b2>
    21b0:	e752      	b.n	2058 <STACK_SIZE+0x58>
			if (gpfAppWifiCb)
    21b2:	4b34      	ldr	r3, [pc, #208]	; (2284 <STACK_SIZE+0x284>)
    21b4:	681b      	ldr	r3, [r3, #0]
    21b6:	2b00      	cmp	r3, #0
    21b8:	d100      	bne.n	21bc <STACK_SIZE+0x1bc>
    21ba:	e74d      	b.n	2058 <STACK_SIZE+0x58>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    21bc:	a91c      	add	r1, sp, #112	; 0x70
    21be:	3004      	adds	r0, #4
    21c0:	4798      	blx	r3
    21c2:	e749      	b.n	2058 <STACK_SIZE+0x58>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    21c4:	2300      	movs	r3, #0
    21c6:	2204      	movs	r2, #4
    21c8:	a91c      	add	r1, sp, #112	; 0x70
    21ca:	0028      	movs	r0, r5
    21cc:	4c2c      	ldr	r4, [pc, #176]	; (2280 <STACK_SIZE+0x280>)
    21ce:	47a0      	blx	r4
    21d0:	2800      	cmp	r0, #0
    21d2:	d000      	beq.n	21d6 <STACK_SIZE+0x1d6>
    21d4:	e740      	b.n	2058 <STACK_SIZE+0x58>
			if (gpfAppWifiCb)
    21d6:	4b2b      	ldr	r3, [pc, #172]	; (2284 <STACK_SIZE+0x284>)
    21d8:	681b      	ldr	r3, [r3, #0]
    21da:	2b00      	cmp	r3, #0
    21dc:	d100      	bne.n	21e0 <STACK_SIZE+0x1e0>
    21de:	e73b      	b.n	2058 <STACK_SIZE+0x58>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    21e0:	a91c      	add	r1, sp, #112	; 0x70
    21e2:	3065      	adds	r0, #101	; 0x65
    21e4:	4798      	blx	r3
    21e6:	e737      	b.n	2058 <STACK_SIZE+0x58>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    21e8:	2301      	movs	r3, #1
    21ea:	2264      	movs	r2, #100	; 0x64
    21ec:	a903      	add	r1, sp, #12
    21ee:	0028      	movs	r0, r5
    21f0:	4c23      	ldr	r4, [pc, #140]	; (2280 <STACK_SIZE+0x280>)
    21f2:	47a0      	blx	r4
    21f4:	2800      	cmp	r0, #0
    21f6:	d000      	beq.n	21fa <STACK_SIZE+0x1fa>
    21f8:	e72e      	b.n	2058 <STACK_SIZE+0x58>
			if(gpfAppWifiCb)
    21fa:	4b22      	ldr	r3, [pc, #136]	; (2284 <STACK_SIZE+0x284>)
    21fc:	681b      	ldr	r3, [r3, #0]
    21fe:	2b00      	cmp	r3, #0
    2200:	d100      	bne.n	2204 <STACK_SIZE+0x204>
    2202:	e729      	b.n	2058 <STACK_SIZE+0x58>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    2204:	a903      	add	r1, sp, #12
    2206:	3009      	adds	r0, #9
    2208:	4798      	blx	r3
    220a:	e725      	b.n	2058 <STACK_SIZE+0x58>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    220c:	2301      	movs	r3, #1
    220e:	2204      	movs	r2, #4
    2210:	a903      	add	r1, sp, #12
    2212:	0028      	movs	r0, r5
    2214:	4c1a      	ldr	r4, [pc, #104]	; (2280 <STACK_SIZE+0x280>)
    2216:	47a0      	blx	r4
    2218:	2800      	cmp	r0, #0
    221a:	d000      	beq.n	221e <STACK_SIZE+0x21e>
    221c:	e71c      	b.n	2058 <STACK_SIZE+0x58>
			if(gpfAppWifiCb)
    221e:	4b19      	ldr	r3, [pc, #100]	; (2284 <STACK_SIZE+0x284>)
    2220:	681b      	ldr	r3, [r3, #0]
    2222:	2b00      	cmp	r3, #0
    2224:	d100      	bne.n	2228 <STACK_SIZE+0x228>
    2226:	e717      	b.n	2058 <STACK_SIZE+0x58>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    2228:	a903      	add	r1, sp, #12
    222a:	302a      	adds	r0, #42	; 0x2a
    222c:	4798      	blx	r3
    222e:	e713      	b.n	2058 <STACK_SIZE+0x58>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    2230:	2300      	movs	r3, #0
    2232:	2208      	movs	r2, #8
    2234:	a903      	add	r1, sp, #12
    2236:	0028      	movs	r0, r5
    2238:	4c11      	ldr	r4, [pc, #68]	; (2280 <STACK_SIZE+0x280>)
    223a:	47a0      	blx	r4
    223c:	2800      	cmp	r0, #0
    223e:	d000      	beq.n	2242 <STACK_SIZE+0x242>
    2240:	e70a      	b.n	2058 <STACK_SIZE+0x58>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    2242:	ab03      	add	r3, sp, #12
    2244:	889a      	ldrh	r2, [r3, #4]
    2246:	0028      	movs	r0, r5
    2248:	3008      	adds	r0, #8
    224a:	2301      	movs	r3, #1
    224c:	9903      	ldr	r1, [sp, #12]
    224e:	4c0c      	ldr	r4, [pc, #48]	; (2280 <STACK_SIZE+0x280>)
    2250:	47a0      	blx	r4
    2252:	2800      	cmp	r0, #0
    2254:	d000      	beq.n	2258 <STACK_SIZE+0x258>
    2256:	e6ff      	b.n	2058 <STACK_SIZE+0x58>
				if(gpfAppWifiCb)
    2258:	4b0a      	ldr	r3, [pc, #40]	; (2284 <STACK_SIZE+0x284>)
    225a:	681b      	ldr	r3, [r3, #0]
    225c:	2b00      	cmp	r3, #0
    225e:	d100      	bne.n	2262 <STACK_SIZE+0x262>
    2260:	e6fa      	b.n	2058 <STACK_SIZE+0x58>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    2262:	a903      	add	r1, sp, #12
    2264:	3020      	adds	r0, #32
    2266:	4798      	blx	r3
    2268:	e6f6      	b.n	2058 <STACK_SIZE+0x58>
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	0000d978 	.word	0x0000d978
    2270:	0000d610 	.word	0x0000d610
    2274:	0000bf11 	.word	0x0000bf11
    2278:	0000d9c8 	.word	0x0000d9c8
    227c:	0000bf45 	.word	0x0000bf45
    2280:	00001e4d 	.word	0x00001e4d
    2284:	200003c8 	.word	0x200003c8
    2288:	00001721 	.word	0x00001721
    228c:	0000d940 	.word	0x0000d940
    2290:	0000d9a8 	.word	0x0000d9a8
    2294:	200003cd 	.word	0x200003cd
    2298:	200003cc 	.word	0x200003cc

0000229c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    229c:	b5f0      	push	{r4, r5, r6, r7, lr}
    229e:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    22a0:	2201      	movs	r2, #1
    22a2:	230f      	movs	r3, #15
    22a4:	446b      	add	r3, sp
    22a6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    22a8:	2800      	cmp	r0, #0
    22aa:	d061      	beq.n	2370 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    22ac:	6802      	ldr	r2, [r0, #0]
    22ae:	4b32      	ldr	r3, [pc, #200]	; (2378 <m2m_wifi_init+0xdc>)
    22b0:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    22b2:	2200      	movs	r2, #0
    22b4:	4b31      	ldr	r3, [pc, #196]	; (237c <m2m_wifi_init+0xe0>)
    22b6:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    22b8:	200f      	movs	r0, #15
    22ba:	4468      	add	r0, sp
    22bc:	4b30      	ldr	r3, [pc, #192]	; (2380 <m2m_wifi_init+0xe4>)
    22be:	4798      	blx	r3
    22c0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    22c2:	d002      	beq.n	22ca <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    22c4:	0020      	movs	r0, r4
    22c6:	b00f      	add	sp, #60	; 0x3c
    22c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    22ca:	2000      	movs	r0, #0
    22cc:	4b2d      	ldr	r3, [pc, #180]	; (2384 <m2m_wifi_init+0xe8>)
    22ce:	4798      	blx	r3
    22d0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    22d2:	d149      	bne.n	2368 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    22d4:	492c      	ldr	r1, [pc, #176]	; (2388 <m2m_wifi_init+0xec>)
    22d6:	2001      	movs	r0, #1
    22d8:	4b2c      	ldr	r3, [pc, #176]	; (238c <m2m_wifi_init+0xf0>)
    22da:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    22dc:	ae04      	add	r6, sp, #16
    22de:	0030      	movs	r0, r6
    22e0:	4b2b      	ldr	r3, [pc, #172]	; (2390 <m2m_wifi_init+0xf4>)
    22e2:	4798      	blx	r3
    22e4:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    22e6:	482b      	ldr	r0, [pc, #172]	; (2394 <m2m_wifi_init+0xf8>)
    22e8:	4d2b      	ldr	r5, [pc, #172]	; (2398 <m2m_wifi_init+0xfc>)
    22ea:	47a8      	blx	r5
    22ec:	79b3      	ldrb	r3, [r6, #6]
    22ee:	7972      	ldrb	r2, [r6, #5]
    22f0:	7931      	ldrb	r1, [r6, #4]
    22f2:	8c30      	ldrh	r0, [r6, #32]
    22f4:	9000      	str	r0, [sp, #0]
    22f6:	4829      	ldr	r0, [pc, #164]	; (239c <m2m_wifi_init+0x100>)
    22f8:	47a8      	blx	r5
    22fa:	200d      	movs	r0, #13
    22fc:	4f28      	ldr	r7, [pc, #160]	; (23a0 <m2m_wifi_init+0x104>)
    22fe:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    2300:	4824      	ldr	r0, [pc, #144]	; (2394 <m2m_wifi_init+0xf8>)
    2302:	47a8      	blx	r5
    2304:	2226      	movs	r2, #38	; 0x26
    2306:	446a      	add	r2, sp
    2308:	211a      	movs	r1, #26
    230a:	4469      	add	r1, sp
    230c:	4825      	ldr	r0, [pc, #148]	; (23a4 <m2m_wifi_init+0x108>)
    230e:	47a8      	blx	r5
    2310:	200d      	movs	r0, #13
    2312:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    2314:	481f      	ldr	r0, [pc, #124]	; (2394 <m2m_wifi_init+0xf8>)
    2316:	47a8      	blx	r5
    2318:	7a73      	ldrb	r3, [r6, #9]
    231a:	7a32      	ldrb	r2, [r6, #8]
    231c:	79f1      	ldrb	r1, [r6, #7]
    231e:	4822      	ldr	r0, [pc, #136]	; (23a8 <m2m_wifi_init+0x10c>)
    2320:	47a8      	blx	r5
    2322:	200d      	movs	r0, #13
    2324:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    2326:	481b      	ldr	r0, [pc, #108]	; (2394 <m2m_wifi_init+0xf8>)
    2328:	47a8      	blx	r5
    232a:	2304      	movs	r3, #4
    232c:	2205      	movs	r2, #5
    232e:	2113      	movs	r1, #19
    2330:	481e      	ldr	r0, [pc, #120]	; (23ac <m2m_wifi_init+0x110>)
    2332:	47a8      	blx	r5
    2334:	200d      	movs	r0, #13
    2336:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    2338:	4816      	ldr	r0, [pc, #88]	; (2394 <m2m_wifi_init+0xf8>)
    233a:	47a8      	blx	r5
    233c:	4a1c      	ldr	r2, [pc, #112]	; (23b0 <m2m_wifi_init+0x114>)
    233e:	491d      	ldr	r1, [pc, #116]	; (23b4 <m2m_wifi_init+0x118>)
    2340:	481d      	ldr	r0, [pc, #116]	; (23b8 <m2m_wifi_init+0x11c>)
    2342:	47a8      	blx	r5
    2344:	200d      	movs	r0, #13
    2346:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    2348:	0023      	movs	r3, r4
    234a:	330d      	adds	r3, #13
    234c:	d1ba      	bne.n	22c4 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    234e:	22e8      	movs	r2, #232	; 0xe8
    2350:	32ff      	adds	r2, #255	; 0xff
    2352:	491a      	ldr	r1, [pc, #104]	; (23bc <m2m_wifi_init+0x120>)
    2354:	481a      	ldr	r0, [pc, #104]	; (23c0 <m2m_wifi_init+0x124>)
    2356:	4b10      	ldr	r3, [pc, #64]	; (2398 <m2m_wifi_init+0xfc>)
    2358:	4798      	blx	r3
    235a:	481a      	ldr	r0, [pc, #104]	; (23c4 <m2m_wifi_init+0x128>)
    235c:	4b1a      	ldr	r3, [pc, #104]	; (23c8 <m2m_wifi_init+0x12c>)
    235e:	4798      	blx	r3
    2360:	200d      	movs	r0, #13
    2362:	4b0f      	ldr	r3, [pc, #60]	; (23a0 <m2m_wifi_init+0x104>)
    2364:	4798      	blx	r3
    2366:	e7ad      	b.n	22c4 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    2368:	2000      	movs	r0, #0
    236a:	4b18      	ldr	r3, [pc, #96]	; (23cc <m2m_wifi_init+0x130>)
    236c:	4798      	blx	r3
    236e:	e7a9      	b.n	22c4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    2370:	240c      	movs	r4, #12
    2372:	4264      	negs	r4, r4
    2374:	e7a6      	b.n	22c4 <m2m_wifi_init+0x28>
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	200003c8 	.word	0x200003c8
    237c:	200003cd 	.word	0x200003cd
    2380:	00002d3d 	.word	0x00002d3d
    2384:	00001fb9 	.word	0x00001fb9
    2388:	00001ff1 	.word	0x00001ff1
    238c:	00001f35 	.word	0x00001f35
    2390:	00002c59 	.word	0x00002c59
    2394:	0000d940 	.word	0x0000d940
    2398:	0000bf11 	.word	0x0000bf11
    239c:	0000da84 	.word	0x0000da84
    23a0:	0000bf45 	.word	0x0000bf45
    23a4:	0000daac 	.word	0x0000daac
    23a8:	0000dac8 	.word	0x0000dac8
    23ac:	0000daec 	.word	0x0000daec
    23b0:	0000db04 	.word	0x0000db04
    23b4:	0000db10 	.word	0x0000db10
    23b8:	0000db1c 	.word	0x0000db1c
    23bc:	0000d984 	.word	0x0000d984
    23c0:	0000d610 	.word	0x0000d610
    23c4:	0000db34 	.word	0x0000db34
    23c8:	0000c02d 	.word	0x0000c02d
    23cc:	00002e11 	.word	0x00002e11

000023d0 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    23d0:	b510      	push	{r4, lr}
	return hif_handle_isr();
    23d2:	4b01      	ldr	r3, [pc, #4]	; (23d8 <m2m_wifi_handle_events+0x8>)
    23d4:	4798      	blx	r3
}
    23d6:	bd10      	pop	{r4, pc}
    23d8:	00001a65 	.word	0x00001a65

000023dc <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    23dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23de:	46ce      	mov	lr, r9
    23e0:	4647      	mov	r7, r8
    23e2:	b580      	push	{r7, lr}
    23e4:	b0a3      	sub	sp, #140	; 0x8c
    23e6:	9005      	str	r0, [sp, #20]
    23e8:	000c      	movs	r4, r1
    23ea:	0015      	movs	r5, r2
    23ec:	001f      	movs	r7, r3
    23ee:	ab2a      	add	r3, sp, #168	; 0xa8
    23f0:	881b      	ldrh	r3, [r3, #0]
    23f2:	4699      	mov	r9, r3
    23f4:	ab2b      	add	r3, sp, #172	; 0xac
    23f6:	781b      	ldrb	r3, [r3, #0]
    23f8:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    23fa:	2a01      	cmp	r2, #1
    23fc:	d003      	beq.n	2406 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    23fe:	2f00      	cmp	r7, #0
    2400:	d040      	beq.n	2484 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2402:	2a02      	cmp	r2, #2
    2404:	d04c      	beq.n	24a0 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    2406:	1e63      	subs	r3, r4, #1
    2408:	2b1f      	cmp	r3, #31
    240a:	d900      	bls.n	240e <m2m_wifi_connect_sc+0x32>
    240c:	e078      	b.n	2500 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    240e:	464b      	mov	r3, r9
    2410:	3b01      	subs	r3, #1
    2412:	b29b      	uxth	r3, r3
    2414:	2b0d      	cmp	r3, #13
    2416:	d903      	bls.n	2420 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    2418:	464b      	mov	r3, r9
    241a:	2bff      	cmp	r3, #255	; 0xff
    241c:	d000      	beq.n	2420 <m2m_wifi_connect_sc+0x44>
    241e:	e07e      	b.n	251e <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2420:	ae07      	add	r6, sp, #28
    2422:	0022      	movs	r2, r4
    2424:	9905      	ldr	r1, [sp, #20]
    2426:	205a      	movs	r0, #90	; 0x5a
    2428:	ab02      	add	r3, sp, #8
    242a:	469c      	mov	ip, r3
    242c:	4460      	add	r0, ip
    242e:	4b79      	ldr	r3, [pc, #484]	; (2614 <m2m_wifi_connect_sc+0x238>)
    2430:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2432:	1934      	adds	r4, r6, r4
    2434:	3446      	adds	r4, #70	; 0x46
    2436:	2300      	movs	r3, #0
    2438:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    243a:	3344      	adds	r3, #68	; 0x44
    243c:	464a      	mov	r2, r9
    243e:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2440:	4643      	mov	r3, r8
    2442:	1e5a      	subs	r2, r3, #1
    2444:	4193      	sbcs	r3, r2
    2446:	2267      	movs	r2, #103	; 0x67
    2448:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    244a:	2341      	movs	r3, #65	; 0x41
    244c:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    244e:	2d03      	cmp	r5, #3
    2450:	d100      	bne.n	2454 <m2m_wifi_connect_sc+0x78>
    2452:	e072      	b.n	253a <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    2454:	2d02      	cmp	r5, #2
    2456:	d100      	bne.n	245a <m2m_wifi_connect_sc+0x7e>
    2458:	e0ac      	b.n	25b4 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    245a:	2d04      	cmp	r5, #4
    245c:	d100      	bne.n	2460 <m2m_wifi_connect_sc+0x84>
    245e:	e0c4      	b.n	25ea <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    2460:	2d01      	cmp	r5, #1
    2462:	d000      	beq.n	2466 <m2m_wifi_connect_sc+0x8a>
    2464:	e0c7      	b.n	25f6 <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    2466:	2300      	movs	r3, #0
    2468:	9302      	str	r3, [sp, #8]
    246a:	9301      	str	r3, [sp, #4]
    246c:	9300      	str	r3, [sp, #0]
    246e:	336c      	adds	r3, #108	; 0x6c
    2470:	aa07      	add	r2, sp, #28
    2472:	2128      	movs	r1, #40	; 0x28
    2474:	2001      	movs	r0, #1
    2476:	4c68      	ldr	r4, [pc, #416]	; (2618 <m2m_wifi_connect_sc+0x23c>)
    2478:	47a0      	blx	r4

ERR1:
	return ret;
}
    247a:	b023      	add	sp, #140	; 0x8c
    247c:	bc0c      	pop	{r2, r3}
    247e:	4690      	mov	r8, r2
    2480:	4699      	mov	r9, r3
    2482:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    2484:	4a65      	ldr	r2, [pc, #404]	; (261c <m2m_wifi_connect_sc+0x240>)
    2486:	4966      	ldr	r1, [pc, #408]	; (2620 <m2m_wifi_connect_sc+0x244>)
    2488:	4866      	ldr	r0, [pc, #408]	; (2624 <m2m_wifi_connect_sc+0x248>)
    248a:	4b67      	ldr	r3, [pc, #412]	; (2628 <m2m_wifi_connect_sc+0x24c>)
    248c:	4798      	blx	r3
    248e:	4867      	ldr	r0, [pc, #412]	; (262c <m2m_wifi_connect_sc+0x250>)
    2490:	4b67      	ldr	r3, [pc, #412]	; (2630 <m2m_wifi_connect_sc+0x254>)
    2492:	4798      	blx	r3
    2494:	200d      	movs	r0, #13
    2496:	4b67      	ldr	r3, [pc, #412]	; (2634 <m2m_wifi_connect_sc+0x258>)
    2498:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    249a:	200c      	movs	r0, #12
    249c:	4240      	negs	r0, r0
			goto ERR1;
    249e:	e7ec      	b.n	247a <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    24a0:	0038      	movs	r0, r7
    24a2:	4b65      	ldr	r3, [pc, #404]	; (2638 <m2m_wifi_connect_sc+0x25c>)
    24a4:	4798      	blx	r3
    24a6:	2840      	cmp	r0, #64	; 0x40
    24a8:	d1ad      	bne.n	2406 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    24aa:	783b      	ldrb	r3, [r7, #0]
    24ac:	001a      	movs	r2, r3
    24ae:	3a30      	subs	r2, #48	; 0x30
    24b0:	2a36      	cmp	r2, #54	; 0x36
    24b2:	d817      	bhi.n	24e4 <m2m_wifi_connect_sc+0x108>
    24b4:	3a0a      	subs	r2, #10
    24b6:	2a06      	cmp	r2, #6
    24b8:	d914      	bls.n	24e4 <m2m_wifi_connect_sc+0x108>
    24ba:	3b47      	subs	r3, #71	; 0x47
    24bc:	2b19      	cmp	r3, #25
    24be:	d911      	bls.n	24e4 <m2m_wifi_connect_sc+0x108>
    24c0:	1c7a      	adds	r2, r7, #1
    24c2:	0038      	movs	r0, r7
    24c4:	3040      	adds	r0, #64	; 0x40
    24c6:	7813      	ldrb	r3, [r2, #0]
    24c8:	0019      	movs	r1, r3
    24ca:	3930      	subs	r1, #48	; 0x30
    24cc:	2936      	cmp	r1, #54	; 0x36
    24ce:	d809      	bhi.n	24e4 <m2m_wifi_connect_sc+0x108>
    24d0:	390a      	subs	r1, #10
    24d2:	2906      	cmp	r1, #6
    24d4:	d906      	bls.n	24e4 <m2m_wifi_connect_sc+0x108>
    24d6:	3b47      	subs	r3, #71	; 0x47
    24d8:	2b19      	cmp	r3, #25
    24da:	d903      	bls.n	24e4 <m2m_wifi_connect_sc+0x108>
    24dc:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    24de:	4282      	cmp	r2, r0
    24e0:	d1f1      	bne.n	24c6 <m2m_wifi_connect_sc+0xea>
    24e2:	e790      	b.n	2406 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    24e4:	4a55      	ldr	r2, [pc, #340]	; (263c <m2m_wifi_connect_sc+0x260>)
    24e6:	494e      	ldr	r1, [pc, #312]	; (2620 <m2m_wifi_connect_sc+0x244>)
    24e8:	484e      	ldr	r0, [pc, #312]	; (2624 <m2m_wifi_connect_sc+0x248>)
    24ea:	4b4f      	ldr	r3, [pc, #316]	; (2628 <m2m_wifi_connect_sc+0x24c>)
    24ec:	4798      	blx	r3
    24ee:	4854      	ldr	r0, [pc, #336]	; (2640 <m2m_wifi_connect_sc+0x264>)
    24f0:	4b4f      	ldr	r3, [pc, #316]	; (2630 <m2m_wifi_connect_sc+0x254>)
    24f2:	4798      	blx	r3
    24f4:	200d      	movs	r0, #13
    24f6:	4b4f      	ldr	r3, [pc, #316]	; (2634 <m2m_wifi_connect_sc+0x258>)
    24f8:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    24fa:	200c      	movs	r0, #12
    24fc:	4240      	negs	r0, r0
					goto ERR1;
    24fe:	e7bc      	b.n	247a <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    2500:	228c      	movs	r2, #140	; 0x8c
    2502:	0092      	lsls	r2, r2, #2
    2504:	4946      	ldr	r1, [pc, #280]	; (2620 <m2m_wifi_connect_sc+0x244>)
    2506:	4847      	ldr	r0, [pc, #284]	; (2624 <m2m_wifi_connect_sc+0x248>)
    2508:	4b47      	ldr	r3, [pc, #284]	; (2628 <m2m_wifi_connect_sc+0x24c>)
    250a:	4798      	blx	r3
    250c:	484d      	ldr	r0, [pc, #308]	; (2644 <m2m_wifi_connect_sc+0x268>)
    250e:	4b48      	ldr	r3, [pc, #288]	; (2630 <m2m_wifi_connect_sc+0x254>)
    2510:	4798      	blx	r3
    2512:	200d      	movs	r0, #13
    2514:	4b47      	ldr	r3, [pc, #284]	; (2634 <m2m_wifi_connect_sc+0x258>)
    2516:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2518:	200c      	movs	r0, #12
    251a:	4240      	negs	r0, r0
		goto ERR1;
    251c:	e7ad      	b.n	247a <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    251e:	4a4a      	ldr	r2, [pc, #296]	; (2648 <m2m_wifi_connect_sc+0x26c>)
    2520:	493f      	ldr	r1, [pc, #252]	; (2620 <m2m_wifi_connect_sc+0x244>)
    2522:	4840      	ldr	r0, [pc, #256]	; (2624 <m2m_wifi_connect_sc+0x248>)
    2524:	4b40      	ldr	r3, [pc, #256]	; (2628 <m2m_wifi_connect_sc+0x24c>)
    2526:	4798      	blx	r3
    2528:	4848      	ldr	r0, [pc, #288]	; (264c <m2m_wifi_connect_sc+0x270>)
    252a:	4b41      	ldr	r3, [pc, #260]	; (2630 <m2m_wifi_connect_sc+0x254>)
    252c:	4798      	blx	r3
    252e:	200d      	movs	r0, #13
    2530:	4b40      	ldr	r3, [pc, #256]	; (2634 <m2m_wifi_connect_sc+0x258>)
    2532:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2534:	200c      	movs	r0, #12
    2536:	4240      	negs	r0, r0
			goto ERR1;
    2538:	e79f      	b.n	247a <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    253a:	783b      	ldrb	r3, [r7, #0]
    253c:	3b01      	subs	r3, #1
    253e:	b2db      	uxtb	r3, r3
    2540:	aa07      	add	r2, sp, #28
    2542:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2544:	2b03      	cmp	r3, #3
    2546:	d817      	bhi.n	2578 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    2548:	787a      	ldrb	r2, [r7, #1]
    254a:	1e51      	subs	r1, r2, #1
    254c:	ab07      	add	r3, sp, #28
    254e:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2550:	2310      	movs	r3, #16
    2552:	0011      	movs	r1, r2
    2554:	4399      	bics	r1, r3
    2556:	290b      	cmp	r1, #11
    2558:	d01e      	beq.n	2598 <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    255a:	4a3d      	ldr	r2, [pc, #244]	; (2650 <m2m_wifi_connect_sc+0x274>)
    255c:	4930      	ldr	r1, [pc, #192]	; (2620 <m2m_wifi_connect_sc+0x244>)
    255e:	4831      	ldr	r0, [pc, #196]	; (2624 <m2m_wifi_connect_sc+0x248>)
    2560:	4c31      	ldr	r4, [pc, #196]	; (2628 <m2m_wifi_connect_sc+0x24c>)
    2562:	47a0      	blx	r4
    2564:	ab07      	add	r3, sp, #28
    2566:	7859      	ldrb	r1, [r3, #1]
    2568:	483a      	ldr	r0, [pc, #232]	; (2654 <m2m_wifi_connect_sc+0x278>)
    256a:	47a0      	blx	r4
    256c:	200d      	movs	r0, #13
    256e:	4b31      	ldr	r3, [pc, #196]	; (2634 <m2m_wifi_connect_sc+0x258>)
    2570:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2572:	200c      	movs	r0, #12
    2574:	4240      	negs	r0, r0
			goto ERR1;
    2576:	e780      	b.n	247a <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    2578:	2294      	movs	r2, #148	; 0x94
    257a:	0092      	lsls	r2, r2, #2
    257c:	4928      	ldr	r1, [pc, #160]	; (2620 <m2m_wifi_connect_sc+0x244>)
    257e:	4829      	ldr	r0, [pc, #164]	; (2624 <m2m_wifi_connect_sc+0x248>)
    2580:	4c29      	ldr	r4, [pc, #164]	; (2628 <m2m_wifi_connect_sc+0x24c>)
    2582:	47a0      	blx	r4
    2584:	ab07      	add	r3, sp, #28
    2586:	7819      	ldrb	r1, [r3, #0]
    2588:	4833      	ldr	r0, [pc, #204]	; (2658 <m2m_wifi_connect_sc+0x27c>)
    258a:	47a0      	blx	r4
    258c:	200d      	movs	r0, #13
    258e:	4b29      	ldr	r3, [pc, #164]	; (2634 <m2m_wifi_connect_sc+0x258>)
    2590:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2592:	200c      	movs	r0, #12
    2594:	4240      	negs	r0, r0
			goto ERR1;
    2596:	e770      	b.n	247a <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    2598:	1cb9      	adds	r1, r7, #2
    259a:	2016      	movs	r0, #22
    259c:	ab02      	add	r3, sp, #8
    259e:	469c      	mov	ip, r3
    25a0:	4460      	add	r0, ip
    25a2:	4b1c      	ldr	r3, [pc, #112]	; (2614 <m2m_wifi_connect_sc+0x238>)
    25a4:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    25a6:	787b      	ldrb	r3, [r7, #1]
    25a8:	aa07      	add	r2, sp, #28
    25aa:	4694      	mov	ip, r2
    25ac:	4463      	add	r3, ip
    25ae:	2200      	movs	r2, #0
    25b0:	709a      	strb	r2, [r3, #2]
    25b2:	e758      	b.n	2466 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    25b4:	0038      	movs	r0, r7
    25b6:	4b20      	ldr	r3, [pc, #128]	; (2638 <m2m_wifi_connect_sc+0x25c>)
    25b8:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    25ba:	1e43      	subs	r3, r0, #1
    25bc:	b29b      	uxth	r3, r3
    25be:	2b3f      	cmp	r3, #63	; 0x3f
    25c0:	d805      	bhi.n	25ce <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    25c2:	1c42      	adds	r2, r0, #1
    25c4:	0039      	movs	r1, r7
    25c6:	a807      	add	r0, sp, #28
    25c8:	4b12      	ldr	r3, [pc, #72]	; (2614 <m2m_wifi_connect_sc+0x238>)
    25ca:	4798      	blx	r3
    25cc:	e74b      	b.n	2466 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    25ce:	4a23      	ldr	r2, [pc, #140]	; (265c <m2m_wifi_connect_sc+0x280>)
    25d0:	4913      	ldr	r1, [pc, #76]	; (2620 <m2m_wifi_connect_sc+0x244>)
    25d2:	4814      	ldr	r0, [pc, #80]	; (2624 <m2m_wifi_connect_sc+0x248>)
    25d4:	4b14      	ldr	r3, [pc, #80]	; (2628 <m2m_wifi_connect_sc+0x24c>)
    25d6:	4798      	blx	r3
    25d8:	4821      	ldr	r0, [pc, #132]	; (2660 <m2m_wifi_connect_sc+0x284>)
    25da:	4b15      	ldr	r3, [pc, #84]	; (2630 <m2m_wifi_connect_sc+0x254>)
    25dc:	4798      	blx	r3
    25de:	200d      	movs	r0, #13
    25e0:	4b14      	ldr	r3, [pc, #80]	; (2634 <m2m_wifi_connect_sc+0x258>)
    25e2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    25e4:	200c      	movs	r0, #12
    25e6:	4240      	negs	r0, r0
			goto ERR1;
    25e8:	e747      	b.n	247a <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    25ea:	223e      	movs	r2, #62	; 0x3e
    25ec:	0039      	movs	r1, r7
    25ee:	a807      	add	r0, sp, #28
    25f0:	4b08      	ldr	r3, [pc, #32]	; (2614 <m2m_wifi_connect_sc+0x238>)
    25f2:	4798      	blx	r3
    25f4:	e737      	b.n	2466 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    25f6:	4a1b      	ldr	r2, [pc, #108]	; (2664 <m2m_wifi_connect_sc+0x288>)
    25f8:	4909      	ldr	r1, [pc, #36]	; (2620 <m2m_wifi_connect_sc+0x244>)
    25fa:	480a      	ldr	r0, [pc, #40]	; (2624 <m2m_wifi_connect_sc+0x248>)
    25fc:	4b0a      	ldr	r3, [pc, #40]	; (2628 <m2m_wifi_connect_sc+0x24c>)
    25fe:	4798      	blx	r3
    2600:	4819      	ldr	r0, [pc, #100]	; (2668 <m2m_wifi_connect_sc+0x28c>)
    2602:	4b0b      	ldr	r3, [pc, #44]	; (2630 <m2m_wifi_connect_sc+0x254>)
    2604:	4798      	blx	r3
    2606:	200d      	movs	r0, #13
    2608:	4b0a      	ldr	r3, [pc, #40]	; (2634 <m2m_wifi_connect_sc+0x258>)
    260a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    260c:	200c      	movs	r0, #12
    260e:	4240      	negs	r0, r0
		goto ERR1;
    2610:	e733      	b.n	247a <m2m_wifi_connect_sc+0x9e>
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	0000170d 	.word	0x0000170d
    2618:	00001835 	.word	0x00001835
    261c:	0000021a 	.word	0x0000021a
    2620:	0000d994 	.word	0x0000d994
    2624:	0000d610 	.word	0x0000d610
    2628:	0000bf11 	.word	0x0000bf11
    262c:	0000d9dc 	.word	0x0000d9dc
    2630:	0000c02d 	.word	0x0000c02d
    2634:	0000bf45 	.word	0x0000bf45
    2638:	00001731 	.word	0x00001731
    263c:	00000226 	.word	0x00000226
    2640:	0000d9f0 	.word	0x0000d9f0
    2644:	0000d9fc 	.word	0x0000d9fc
    2648:	00000239 	.word	0x00000239
    264c:	0000da10 	.word	0x0000da10
    2650:	00000257 	.word	0x00000257
    2654:	0000da38 	.word	0x0000da38
    2658:	0000da1c 	.word	0x0000da1c
    265c:	00000266 	.word	0x00000266
    2660:	0000da54 	.word	0x0000da54
    2664:	00000276 	.word	0x00000276
    2668:	0000da70 	.word	0x0000da70

0000266c <m2m_wifi_connect>:
{
    266c:	b530      	push	{r4, r5, lr}
    266e:	b083      	sub	sp, #12
    2670:	ac06      	add	r4, sp, #24
    2672:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    2674:	2500      	movs	r5, #0
    2676:	9501      	str	r5, [sp, #4]
    2678:	9400      	str	r4, [sp, #0]
    267a:	4c02      	ldr	r4, [pc, #8]	; (2684 <m2m_wifi_connect+0x18>)
    267c:	47a0      	blx	r4
}
    267e:	b003      	add	sp, #12
    2680:	bd30      	pop	{r4, r5, pc}
    2682:	46c0      	nop			; (mov r8, r8)
    2684:	000023dd 	.word	0x000023dd

00002688 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    2688:	2000      	movs	r0, #0
    268a:	4770      	bx	lr

0000268c <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    268c:	b5f0      	push	{r4, r5, r6, r7, lr}
    268e:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    2690:	2580      	movs	r5, #128	; 0x80
    2692:	006d      	lsls	r5, r5, #1
    2694:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    2696:	24a5      	movs	r4, #165	; 0xa5
    2698:	0164      	lsls	r4, r4, #5
    269a:	4f08      	ldr	r7, [pc, #32]	; (26bc <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    269c:	4e08      	ldr	r6, [pc, #32]	; (26c0 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    269e:	0029      	movs	r1, r5
    26a0:	0020      	movs	r0, r4
    26a2:	47b8      	blx	r7
			uint32 reg = 0;
    26a4:	2300      	movs	r3, #0
    26a6:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    26a8:	a901      	add	r1, sp, #4
    26aa:	0020      	movs	r0, r4
    26ac:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    26ae:	2800      	cmp	r0, #0
    26b0:	d1f5      	bne.n	269e <chip_apply_conf+0x12>
				if(reg == val32)
    26b2:	9b01      	ldr	r3, [sp, #4]
    26b4:	429d      	cmp	r5, r3
    26b6:	d1f2      	bne.n	269e <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    26b8:	b003      	add	sp, #12
    26ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26bc:	00002b7d 	.word	0x00002b7d
    26c0:	00002b71 	.word	0x00002b71

000026c4 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    26c4:	b500      	push	{lr}
    26c6:	b083      	sub	sp, #12
	uint32 reg = 0;
    26c8:	2300      	movs	r3, #0
    26ca:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    26cc:	a901      	add	r1, sp, #4
    26ce:	4811      	ldr	r0, [pc, #68]	; (2714 <enable_interrupts+0x50>)
    26d0:	4b11      	ldr	r3, [pc, #68]	; (2718 <enable_interrupts+0x54>)
    26d2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    26d4:	2800      	cmp	r0, #0
    26d6:	d001      	beq.n	26dc <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    26d8:	b003      	add	sp, #12
    26da:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    26dc:	2180      	movs	r1, #128	; 0x80
    26de:	0049      	lsls	r1, r1, #1
    26e0:	9b01      	ldr	r3, [sp, #4]
    26e2:	4319      	orrs	r1, r3
    26e4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    26e6:	480b      	ldr	r0, [pc, #44]	; (2714 <enable_interrupts+0x50>)
    26e8:	4b0c      	ldr	r3, [pc, #48]	; (271c <enable_interrupts+0x58>)
    26ea:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    26ec:	2800      	cmp	r0, #0
    26ee:	d1f3      	bne.n	26d8 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    26f0:	a901      	add	r1, sp, #4
    26f2:	20d0      	movs	r0, #208	; 0xd0
    26f4:	0140      	lsls	r0, r0, #5
    26f6:	4b08      	ldr	r3, [pc, #32]	; (2718 <enable_interrupts+0x54>)
    26f8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    26fa:	2800      	cmp	r0, #0
    26fc:	d1ec      	bne.n	26d8 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    26fe:	2180      	movs	r1, #128	; 0x80
    2700:	0249      	lsls	r1, r1, #9
    2702:	9b01      	ldr	r3, [sp, #4]
    2704:	4319      	orrs	r1, r3
    2706:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    2708:	20d0      	movs	r0, #208	; 0xd0
    270a:	0140      	lsls	r0, r0, #5
    270c:	4b03      	ldr	r3, [pc, #12]	; (271c <enable_interrupts+0x58>)
    270e:	4798      	blx	r3
    2710:	e7e2      	b.n	26d8 <enable_interrupts+0x14>
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	00001408 	.word	0x00001408
    2718:	00002b71 	.word	0x00002b71
    271c:	00002b7d 	.word	0x00002b7d

00002720 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2720:	b510      	push	{r4, lr}
    2722:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    2724:	4b28      	ldr	r3, [pc, #160]	; (27c8 <nmi_get_chipid+0xa8>)
    2726:	681c      	ldr	r4, [r3, #0]
    2728:	2c00      	cmp	r4, #0
    272a:	d004      	beq.n	2736 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    272c:	4b26      	ldr	r3, [pc, #152]	; (27c8 <nmi_get_chipid+0xa8>)
    272e:	681c      	ldr	r4, [r3, #0]
}
    2730:	0020      	movs	r0, r4
    2732:	b002      	add	sp, #8
    2734:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    2736:	0019      	movs	r1, r3
    2738:	2080      	movs	r0, #128	; 0x80
    273a:	0140      	lsls	r0, r0, #5
    273c:	4b23      	ldr	r3, [pc, #140]	; (27cc <nmi_get_chipid+0xac>)
    273e:	4798      	blx	r3
    2740:	2800      	cmp	r0, #0
    2742:	d003      	beq.n	274c <nmi_get_chipid+0x2c>
			chipid = 0;
    2744:	2200      	movs	r2, #0
    2746:	4b20      	ldr	r3, [pc, #128]	; (27c8 <nmi_get_chipid+0xa8>)
    2748:	601a      	str	r2, [r3, #0]
			return 0;
    274a:	e7f1      	b.n	2730 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    274c:	a901      	add	r1, sp, #4
    274e:	4820      	ldr	r0, [pc, #128]	; (27d0 <nmi_get_chipid+0xb0>)
    2750:	4b1e      	ldr	r3, [pc, #120]	; (27cc <nmi_get_chipid+0xac>)
    2752:	4798      	blx	r3
    2754:	2800      	cmp	r0, #0
    2756:	d003      	beq.n	2760 <nmi_get_chipid+0x40>
			chipid = 0;
    2758:	2200      	movs	r2, #0
    275a:	4b1b      	ldr	r3, [pc, #108]	; (27c8 <nmi_get_chipid+0xa8>)
    275c:	601a      	str	r2, [r3, #0]
			return 0;
    275e:	e7e7      	b.n	2730 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    2760:	4b19      	ldr	r3, [pc, #100]	; (27c8 <nmi_get_chipid+0xa8>)
    2762:	681b      	ldr	r3, [r3, #0]
    2764:	4a1b      	ldr	r2, [pc, #108]	; (27d4 <nmi_get_chipid+0xb4>)
    2766:	4293      	cmp	r3, r2
    2768:	d00e      	beq.n	2788 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    276a:	4a1b      	ldr	r2, [pc, #108]	; (27d8 <nmi_get_chipid+0xb8>)
    276c:	4293      	cmp	r3, r2
    276e:	d012      	beq.n	2796 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    2770:	4a1a      	ldr	r2, [pc, #104]	; (27dc <nmi_get_chipid+0xbc>)
    2772:	4293      	cmp	r3, r2
    2774:	d01c      	beq.n	27b0 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    2776:	4914      	ldr	r1, [pc, #80]	; (27c8 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    2778:	4a19      	ldr	r2, [pc, #100]	; (27e0 <nmi_get_chipid+0xc0>)
    277a:	680b      	ldr	r3, [r1, #0]
    277c:	401a      	ands	r2, r3
		chipid |= 0x050000;
    277e:	23a0      	movs	r3, #160	; 0xa0
    2780:	02db      	lsls	r3, r3, #11
    2782:	4313      	orrs	r3, r2
    2784:	600b      	str	r3, [r1, #0]
    2786:	e7d1      	b.n	272c <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    2788:	9b01      	ldr	r3, [sp, #4]
    278a:	2b01      	cmp	r3, #1
    278c:	d0f3      	beq.n	2776 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    278e:	4a15      	ldr	r2, [pc, #84]	; (27e4 <nmi_get_chipid+0xc4>)
    2790:	4b0d      	ldr	r3, [pc, #52]	; (27c8 <nmi_get_chipid+0xa8>)
    2792:	601a      	str	r2, [r3, #0]
    2794:	e7ef      	b.n	2776 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    2796:	9b01      	ldr	r3, [sp, #4]
    2798:	2b03      	cmp	r3, #3
    279a:	d0ec      	beq.n	2776 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    279c:	2b04      	cmp	r3, #4
    279e:	d003      	beq.n	27a8 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    27a0:	4a11      	ldr	r2, [pc, #68]	; (27e8 <nmi_get_chipid+0xc8>)
    27a2:	4b09      	ldr	r3, [pc, #36]	; (27c8 <nmi_get_chipid+0xa8>)
    27a4:	601a      	str	r2, [r3, #0]
    27a6:	e7e6      	b.n	2776 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    27a8:	4a10      	ldr	r2, [pc, #64]	; (27ec <nmi_get_chipid+0xcc>)
    27aa:	4b07      	ldr	r3, [pc, #28]	; (27c8 <nmi_get_chipid+0xa8>)
    27ac:	601a      	str	r2, [r3, #0]
    27ae:	e7e2      	b.n	2776 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    27b0:	4905      	ldr	r1, [pc, #20]	; (27c8 <nmi_get_chipid+0xa8>)
    27b2:	20ec      	movs	r0, #236	; 0xec
    27b4:	0380      	lsls	r0, r0, #14
    27b6:	4b05      	ldr	r3, [pc, #20]	; (27cc <nmi_get_chipid+0xac>)
    27b8:	4798      	blx	r3
    27ba:	2800      	cmp	r0, #0
    27bc:	d0db      	beq.n	2776 <nmi_get_chipid+0x56>
			chipid = 0;
    27be:	2200      	movs	r2, #0
    27c0:	4b01      	ldr	r3, [pc, #4]	; (27c8 <nmi_get_chipid+0xa8>)
    27c2:	601a      	str	r2, [r3, #0]
			return 0;
    27c4:	e7b4      	b.n	2730 <nmi_get_chipid+0x10>
    27c6:	46c0      	nop			; (mov r8, r8)
    27c8:	200003d0 	.word	0x200003d0
    27cc:	00002b71 	.word	0x00002b71
    27d0:	000013f4 	.word	0x000013f4
    27d4:	001002a0 	.word	0x001002a0
    27d8:	001002b0 	.word	0x001002b0
    27dc:	001000f0 	.word	0x001000f0
    27e0:	fff0ffff 	.word	0xfff0ffff
    27e4:	001002a1 	.word	0x001002a1
    27e8:	001002b2 	.word	0x001002b2
    27ec:	001002b1 	.word	0x001002b1

000027f0 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    27f0:	b530      	push	{r4, r5, lr}
    27f2:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    27f4:	4c16      	ldr	r4, [pc, #88]	; (2850 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    27f6:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    27f8:	a901      	add	r1, sp, #4
    27fa:	2010      	movs	r0, #16
    27fc:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    27fe:	2800      	cmp	r0, #0
    2800:	d11c      	bne.n	283c <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    2802:	9b01      	ldr	r3, [sp, #4]
    2804:	422b      	tst	r3, r5
    2806:	d1f7      	bne.n	27f8 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2808:	a901      	add	r1, sp, #4
    280a:	3001      	adds	r0, #1
    280c:	4b10      	ldr	r3, [pc, #64]	; (2850 <chip_sleep+0x60>)
    280e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2810:	2800      	cmp	r0, #0
    2812:	d113      	bne.n	283c <chip_sleep+0x4c>
	if(reg & NBIT1)
    2814:	9901      	ldr	r1, [sp, #4]
    2816:	078b      	lsls	r3, r1, #30
    2818:	d507      	bpl.n	282a <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    281a:	2302      	movs	r3, #2
    281c:	4399      	bics	r1, r3
    281e:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2820:	3001      	adds	r0, #1
    2822:	4b0c      	ldr	r3, [pc, #48]	; (2854 <chip_sleep+0x64>)
    2824:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    2826:	2800      	cmp	r0, #0
    2828:	d108      	bne.n	283c <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    282a:	a901      	add	r1, sp, #4
    282c:	200b      	movs	r0, #11
    282e:	4b08      	ldr	r3, [pc, #32]	; (2850 <chip_sleep+0x60>)
    2830:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2832:	2800      	cmp	r0, #0
    2834:	d102      	bne.n	283c <chip_sleep+0x4c>
	if(reg & NBIT0)
    2836:	9901      	ldr	r1, [sp, #4]
    2838:	07cb      	lsls	r3, r1, #31
    283a:	d401      	bmi.n	2840 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    283c:	b003      	add	sp, #12
    283e:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    2840:	2301      	movs	r3, #1
    2842:	4399      	bics	r1, r3
    2844:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    2846:	300b      	adds	r0, #11
    2848:	4b02      	ldr	r3, [pc, #8]	; (2854 <chip_sleep+0x64>)
    284a:	4798      	blx	r3
    284c:	e7f6      	b.n	283c <chip_sleep+0x4c>
    284e:	46c0      	nop			; (mov r8, r8)
    2850:	00002b71 	.word	0x00002b71
    2854:	00002b7d 	.word	0x00002b7d

00002858 <chip_wake>:
sint8 chip_wake(void)
{
    2858:	b5f0      	push	{r4, r5, r6, r7, lr}
    285a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    285c:	2300      	movs	r3, #0
    285e:	9301      	str	r3, [sp, #4]
    2860:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2862:	a901      	add	r1, sp, #4
    2864:	200b      	movs	r0, #11
    2866:	4b28      	ldr	r3, [pc, #160]	; (2908 <chip_wake+0xb0>)
    2868:	4798      	blx	r3
    286a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    286c:	d130      	bne.n	28d0 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    286e:	9901      	ldr	r1, [sp, #4]
    2870:	07cb      	lsls	r3, r1, #31
    2872:	d406      	bmi.n	2882 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    2874:	2301      	movs	r3, #1
    2876:	4319      	orrs	r1, r3
    2878:	200b      	movs	r0, #11
    287a:	4b24      	ldr	r3, [pc, #144]	; (290c <chip_wake+0xb4>)
    287c:	4798      	blx	r3
    287e:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2880:	d126      	bne.n	28d0 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2882:	a901      	add	r1, sp, #4
    2884:	2001      	movs	r0, #1
    2886:	4b20      	ldr	r3, [pc, #128]	; (2908 <chip_wake+0xb0>)
    2888:	4798      	blx	r3
    288a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    288c:	d120      	bne.n	28d0 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    288e:	9901      	ldr	r1, [sp, #4]
    2890:	078b      	lsls	r3, r1, #30
    2892:	d520      	bpl.n	28d6 <chip_wake+0x7e>
{
    2894:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    2896:	4f1c      	ldr	r7, [pc, #112]	; (2908 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    2898:	4e1d      	ldr	r6, [pc, #116]	; (2910 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    289a:	4669      	mov	r1, sp
    289c:	200f      	movs	r0, #15
    289e:	47b8      	blx	r7
    28a0:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    28a2:	d120      	bne.n	28e6 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    28a4:	9b00      	ldr	r3, [sp, #0]
    28a6:	075b      	lsls	r3, r3, #29
    28a8:	d42b      	bmi.n	2902 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    28aa:	2002      	movs	r0, #2
    28ac:	47b0      	blx	r6
    28ae:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    28b0:	2d00      	cmp	r5, #0
    28b2:	d1f2      	bne.n	289a <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    28b4:	22ad      	movs	r2, #173	; 0xad
    28b6:	0052      	lsls	r2, r2, #1
    28b8:	4916      	ldr	r1, [pc, #88]	; (2914 <chip_wake+0xbc>)
    28ba:	4817      	ldr	r0, [pc, #92]	; (2918 <chip_wake+0xc0>)
    28bc:	4b17      	ldr	r3, [pc, #92]	; (291c <chip_wake+0xc4>)
    28be:	4798      	blx	r3
    28c0:	4817      	ldr	r0, [pc, #92]	; (2920 <chip_wake+0xc8>)
    28c2:	4b18      	ldr	r3, [pc, #96]	; (2924 <chip_wake+0xcc>)
    28c4:	4798      	blx	r3
    28c6:	200d      	movs	r0, #13
    28c8:	4b17      	ldr	r3, [pc, #92]	; (2928 <chip_wake+0xd0>)
    28ca:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    28cc:	2404      	movs	r4, #4
    28ce:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    28d0:	0020      	movs	r0, r4
    28d2:	b003      	add	sp, #12
    28d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    28d6:	2302      	movs	r3, #2
    28d8:	4319      	orrs	r1, r3
    28da:	2001      	movs	r0, #1
    28dc:	4b0b      	ldr	r3, [pc, #44]	; (290c <chip_wake+0xb4>)
    28de:	4798      	blx	r3
    28e0:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    28e2:	d0d7      	beq.n	2894 <chip_wake+0x3c>
    28e4:	e7f4      	b.n	28d0 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    28e6:	22a8      	movs	r2, #168	; 0xa8
    28e8:	0052      	lsls	r2, r2, #1
    28ea:	490a      	ldr	r1, [pc, #40]	; (2914 <chip_wake+0xbc>)
    28ec:	480a      	ldr	r0, [pc, #40]	; (2918 <chip_wake+0xc0>)
    28ee:	4d0b      	ldr	r5, [pc, #44]	; (291c <chip_wake+0xc4>)
    28f0:	47a8      	blx	r5
    28f2:	9a00      	ldr	r2, [sp, #0]
    28f4:	0021      	movs	r1, r4
    28f6:	480d      	ldr	r0, [pc, #52]	; (292c <chip_wake+0xd4>)
    28f8:	47a8      	blx	r5
    28fa:	200d      	movs	r0, #13
    28fc:	4b0a      	ldr	r3, [pc, #40]	; (2928 <chip_wake+0xd0>)
    28fe:	4798      	blx	r3
			goto _WAKE_EXIT;
    2900:	e7e6      	b.n	28d0 <chip_wake+0x78>
	nm_bus_reset();
    2902:	4b0b      	ldr	r3, [pc, #44]	; (2930 <chip_wake+0xd8>)
    2904:	4798      	blx	r3
    2906:	e7e3      	b.n	28d0 <chip_wake+0x78>
    2908:	00002b71 	.word	0x00002b71
    290c:	00002b7d 	.word	0x00002b7d
    2910:	00001395 	.word	0x00001395
    2914:	0000db50 	.word	0x0000db50
    2918:	0000d610 	.word	0x0000d610
    291c:	0000bf11 	.word	0x0000bf11
    2920:	0000db98 	.word	0x0000db98
    2924:	0000c02d 	.word	0x0000c02d
    2928:	0000bf45 	.word	0x0000bf45
    292c:	0000db80 	.word	0x0000db80
    2930:	00002b59 	.word	0x00002b59

00002934 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2936:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2938:	4d2d      	ldr	r5, [pc, #180]	; (29f0 <wait_for_bootrom+0xbc>)
    293a:	4c2e      	ldr	r4, [pc, #184]	; (29f4 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    293c:	4e2e      	ldr	r6, [pc, #184]	; (29f8 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    293e:	0028      	movs	r0, r5
    2940:	47a0      	blx	r4
		if (reg & 0x80000000) {
    2942:	2800      	cmp	r0, #0
    2944:	db02      	blt.n	294c <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2946:	2001      	movs	r0, #1
    2948:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    294a:	e7f8      	b.n	293e <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    294c:	482b      	ldr	r0, [pc, #172]	; (29fc <wait_for_bootrom+0xc8>)
    294e:	4b29      	ldr	r3, [pc, #164]	; (29f4 <wait_for_bootrom+0xc0>)
    2950:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    2952:	07c3      	lsls	r3, r0, #31
    2954:	d409      	bmi.n	296a <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    2956:	4e28      	ldr	r6, [pc, #160]	; (29f8 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    2958:	4c29      	ldr	r4, [pc, #164]	; (2a00 <wait_for_bootrom+0xcc>)
    295a:	4d26      	ldr	r5, [pc, #152]	; (29f4 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    295c:	2001      	movs	r0, #1
    295e:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    2960:	0020      	movs	r0, r4
    2962:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    2964:	4b27      	ldr	r3, [pc, #156]	; (2a04 <wait_for_bootrom+0xd0>)
    2966:	4298      	cmp	r0, r3
    2968:	d1f8      	bne.n	295c <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    296a:	2f02      	cmp	r7, #2
    296c:	d021      	beq.n	29b2 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    296e:	2f03      	cmp	r7, #3
    2970:	d029      	beq.n	29c6 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    2972:	2f04      	cmp	r7, #4
    2974:	d030      	beq.n	29d8 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2976:	4924      	ldr	r1, [pc, #144]	; (2a08 <wait_for_bootrom+0xd4>)
    2978:	4824      	ldr	r0, [pc, #144]	; (2a0c <wait_for_bootrom+0xd8>)
    297a:	4b25      	ldr	r3, [pc, #148]	; (2a10 <wait_for_bootrom+0xdc>)
    297c:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    297e:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    2980:	4b24      	ldr	r3, [pc, #144]	; (2a14 <wait_for_bootrom+0xe0>)
    2982:	4798      	blx	r3
    2984:	0500      	lsls	r0, r0, #20
    2986:	0d00      	lsrs	r0, r0, #20
    2988:	4b23      	ldr	r3, [pc, #140]	; (2a18 <wait_for_bootrom+0xe4>)
    298a:	4298      	cmp	r0, r3
    298c:	d82a      	bhi.n	29e4 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    298e:	0020      	movs	r0, r4
    2990:	4b22      	ldr	r3, [pc, #136]	; (2a1c <wait_for_bootrom+0xe8>)
    2992:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    2994:	4822      	ldr	r0, [pc, #136]	; (2a20 <wait_for_bootrom+0xec>)
    2996:	4c23      	ldr	r4, [pc, #140]	; (2a24 <wait_for_bootrom+0xf0>)
    2998:	47a0      	blx	r4
    299a:	491b      	ldr	r1, [pc, #108]	; (2a08 <wait_for_bootrom+0xd4>)
    299c:	4822      	ldr	r0, [pc, #136]	; (2a28 <wait_for_bootrom+0xf4>)
    299e:	47a0      	blx	r4
    29a0:	200d      	movs	r0, #13
    29a2:	4b22      	ldr	r3, [pc, #136]	; (2a2c <wait_for_bootrom+0xf8>)
    29a4:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    29a6:	4922      	ldr	r1, [pc, #136]	; (2a30 <wait_for_bootrom+0xfc>)
    29a8:	4815      	ldr	r0, [pc, #84]	; (2a00 <wait_for_bootrom+0xcc>)
    29aa:	4b19      	ldr	r3, [pc, #100]	; (2a10 <wait_for_bootrom+0xdc>)
    29ac:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    29ae:	2000      	movs	r0, #0
    29b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    29b2:	4920      	ldr	r1, [pc, #128]	; (2a34 <wait_for_bootrom+0x100>)
    29b4:	4820      	ldr	r0, [pc, #128]	; (2a38 <wait_for_bootrom+0x104>)
    29b6:	4c16      	ldr	r4, [pc, #88]	; (2a10 <wait_for_bootrom+0xdc>)
    29b8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    29ba:	2180      	movs	r1, #128	; 0x80
    29bc:	0349      	lsls	r1, r1, #13
    29be:	4813      	ldr	r0, [pc, #76]	; (2a0c <wait_for_bootrom+0xd8>)
    29c0:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    29c2:	2400      	movs	r4, #0
    29c4:	e7dc      	b.n	2980 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    29c6:	491b      	ldr	r1, [pc, #108]	; (2a34 <wait_for_bootrom+0x100>)
    29c8:	481b      	ldr	r0, [pc, #108]	; (2a38 <wait_for_bootrom+0x104>)
    29ca:	4c11      	ldr	r4, [pc, #68]	; (2a10 <wait_for_bootrom+0xdc>)
    29cc:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    29ce:	2100      	movs	r1, #0
    29d0:	480e      	ldr	r0, [pc, #56]	; (2a0c <wait_for_bootrom+0xd8>)
    29d2:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    29d4:	2400      	movs	r4, #0
    29d6:	e7d3      	b.n	2980 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    29d8:	490b      	ldr	r1, [pc, #44]	; (2a08 <wait_for_bootrom+0xd4>)
    29da:	480c      	ldr	r0, [pc, #48]	; (2a0c <wait_for_bootrom+0xd8>)
    29dc:	4b0c      	ldr	r3, [pc, #48]	; (2a10 <wait_for_bootrom+0xdc>)
    29de:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    29e0:	2480      	movs	r4, #128	; 0x80
    29e2:	e7cd      	b.n	2980 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    29e4:	2002      	movs	r0, #2
    29e6:	4320      	orrs	r0, r4
    29e8:	4b0c      	ldr	r3, [pc, #48]	; (2a1c <wait_for_bootrom+0xe8>)
    29ea:	4798      	blx	r3
    29ec:	e7d2      	b.n	2994 <wait_for_bootrom+0x60>
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	00001014 	.word	0x00001014
    29f4:	00002b65 	.word	0x00002b65
    29f8:	00001395 	.word	0x00001395
    29fc:	000207bc 	.word	0x000207bc
    2a00:	000c000c 	.word	0x000c000c
    2a04:	10add09e 	.word	0x10add09e
    2a08:	13301354 	.word	0x13301354
    2a0c:	0000108c 	.word	0x0000108c
    2a10:	00002b7d 	.word	0x00002b7d
    2a14:	00002721 	.word	0x00002721
    2a18:	0000039f 	.word	0x0000039f
    2a1c:	0000268d 	.word	0x0000268d
    2a20:	0000d940 	.word	0x0000d940
    2a24:	0000bf11 	.word	0x0000bf11
    2a28:	0000dbb4 	.word	0x0000dbb4
    2a2c:	0000bf45 	.word	0x0000bf45
    2a30:	ef522f61 	.word	0xef522f61
    2a34:	3c1cd57d 	.word	0x3c1cd57d
    2a38:	000207ac 	.word	0x000207ac

00002a3c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2a3c:	b570      	push	{r4, r5, r6, lr}
    2a3e:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    2a40:	4b15      	ldr	r3, [pc, #84]	; (2a98 <wait_for_firmware_start+0x5c>)
    2a42:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2a44:	4b15      	ldr	r3, [pc, #84]	; (2a9c <wait_for_firmware_start+0x60>)
    2a46:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2a48:	3802      	subs	r0, #2
    2a4a:	2801      	cmp	r0, #1
    2a4c:	d911      	bls.n	2a72 <wait_for_firmware_start+0x36>
{
    2a4e:	2401      	movs	r4, #1
    2a50:	4264      	negs	r4, r4
    2a52:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2a54:	4e12      	ldr	r6, [pc, #72]	; (2aa0 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2a56:	4d13      	ldr	r5, [pc, #76]	; (2aa4 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    2a58:	9b00      	ldr	r3, [sp, #0]
    2a5a:	4298      	cmp	r0, r3
    2a5c:	d00e      	beq.n	2a7c <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2a5e:	2002      	movs	r0, #2
    2a60:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    2a62:	9801      	ldr	r0, [sp, #4]
    2a64:	47a8      	blx	r5
    2a66:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    2a68:	2c00      	cmp	r4, #0
    2a6a:	d1f5      	bne.n	2a58 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2a6c:	2005      	movs	r0, #5
    2a6e:	4240      	negs	r0, r0
    2a70:	e009      	b.n	2a86 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    2a72:	4b0d      	ldr	r3, [pc, #52]	; (2aa8 <wait_for_firmware_start+0x6c>)
    2a74:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2a76:	4b0d      	ldr	r3, [pc, #52]	; (2aac <wait_for_firmware_start+0x70>)
    2a78:	9300      	str	r3, [sp, #0]
    2a7a:	e7e8      	b.n	2a4e <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2a7c:	9a00      	ldr	r2, [sp, #0]
    2a7e:	4b07      	ldr	r3, [pc, #28]	; (2a9c <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    2a80:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    2a82:	429a      	cmp	r2, r3
    2a84:	d001      	beq.n	2a8a <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    2a86:	b002      	add	sp, #8
    2a88:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    2a8a:	2100      	movs	r1, #0
    2a8c:	4802      	ldr	r0, [pc, #8]	; (2a98 <wait_for_firmware_start+0x5c>)
    2a8e:	4b08      	ldr	r3, [pc, #32]	; (2ab0 <wait_for_firmware_start+0x74>)
    2a90:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    2a92:	2000      	movs	r0, #0
    2a94:	e7f7      	b.n	2a86 <wait_for_firmware_start+0x4a>
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	0000108c 	.word	0x0000108c
    2a9c:	02532636 	.word	0x02532636
    2aa0:	00001395 	.word	0x00001395
    2aa4:	00002b65 	.word	0x00002b65
    2aa8:	000207ac 	.word	0x000207ac
    2aac:	d75dc1c3 	.word	0xd75dc1c3
    2ab0:	00002b7d 	.word	0x00002b7d

00002ab4 <chip_deinit>:

sint8 chip_deinit(void)
{
    2ab4:	b510      	push	{r4, lr}
    2ab6:	b082      	sub	sp, #8
	uint32 reg = 0;
    2ab8:	2300      	movs	r3, #0
    2aba:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2abc:	a901      	add	r1, sp, #4
    2abe:	20a0      	movs	r0, #160	; 0xa0
    2ac0:	0140      	lsls	r0, r0, #5
    2ac2:	4b14      	ldr	r3, [pc, #80]	; (2b14 <chip_deinit+0x60>)
    2ac4:	4798      	blx	r3
    2ac6:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2ac8:	d115      	bne.n	2af6 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    2aca:	4913      	ldr	r1, [pc, #76]	; (2b18 <chip_deinit+0x64>)
    2acc:	9b01      	ldr	r3, [sp, #4]
    2ace:	4019      	ands	r1, r3
    2ad0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2ad2:	20a0      	movs	r0, #160	; 0xa0
    2ad4:	0140      	lsls	r0, r0, #5
    2ad6:	4b11      	ldr	r3, [pc, #68]	; (2b1c <chip_deinit+0x68>)
    2ad8:	4798      	blx	r3
    2ada:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2adc:	d016      	beq.n	2b0c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2ade:	4a10      	ldr	r2, [pc, #64]	; (2b20 <chip_deinit+0x6c>)
    2ae0:	4910      	ldr	r1, [pc, #64]	; (2b24 <chip_deinit+0x70>)
    2ae2:	4811      	ldr	r0, [pc, #68]	; (2b28 <chip_deinit+0x74>)
    2ae4:	4b11      	ldr	r3, [pc, #68]	; (2b2c <chip_deinit+0x78>)
    2ae6:	4798      	blx	r3
    2ae8:	4811      	ldr	r0, [pc, #68]	; (2b30 <chip_deinit+0x7c>)
    2aea:	4b12      	ldr	r3, [pc, #72]	; (2b34 <chip_deinit+0x80>)
    2aec:	4798      	blx	r3
    2aee:	200d      	movs	r0, #13
    2af0:	4b11      	ldr	r3, [pc, #68]	; (2b38 <chip_deinit+0x84>)
    2af2:	4798      	blx	r3
		goto ERR1;
    2af4:	e00a      	b.n	2b0c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2af6:	4a11      	ldr	r2, [pc, #68]	; (2b3c <chip_deinit+0x88>)
    2af8:	490a      	ldr	r1, [pc, #40]	; (2b24 <chip_deinit+0x70>)
    2afa:	480b      	ldr	r0, [pc, #44]	; (2b28 <chip_deinit+0x74>)
    2afc:	4b0b      	ldr	r3, [pc, #44]	; (2b2c <chip_deinit+0x78>)
    2afe:	4798      	blx	r3
    2b00:	480b      	ldr	r0, [pc, #44]	; (2b30 <chip_deinit+0x7c>)
    2b02:	4b0c      	ldr	r3, [pc, #48]	; (2b34 <chip_deinit+0x80>)
    2b04:	4798      	blx	r3
    2b06:	200d      	movs	r0, #13
    2b08:	4b0b      	ldr	r3, [pc, #44]	; (2b38 <chip_deinit+0x84>)
    2b0a:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    2b0c:	0020      	movs	r0, r4
    2b0e:	b002      	add	sp, #8
    2b10:	bd10      	pop	{r4, pc}
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	00002b71 	.word	0x00002b71
    2b18:	fffffbff 	.word	0xfffffbff
    2b1c:	00002b7d 	.word	0x00002b7d
    2b20:	00000207 	.word	0x00000207
    2b24:	0000db5c 	.word	0x0000db5c
    2b28:	0000d610 	.word	0x0000d610
    2b2c:	0000bf11 	.word	0x0000bf11
    2b30:	0000db68 	.word	0x0000db68
    2b34:	0000c02d 	.word	0x0000c02d
    2b38:	0000bf45 	.word	0x0000bf45
    2b3c:	00000201 	.word	0x00000201

00002b40 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2b40:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    2b42:	4b01      	ldr	r3, [pc, #4]	; (2b48 <nm_bus_iface_init+0x8>)
    2b44:	4798      	blx	r3
	return ret;
}
    2b46:	bd10      	pop	{r4, pc}
    2b48:	00001451 	.word	0x00001451

00002b4c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2b4c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    2b4e:	4b01      	ldr	r3, [pc, #4]	; (2b54 <nm_bus_iface_deinit+0x8>)
    2b50:	4798      	blx	r3

	return ret;
}
    2b52:	bd10      	pop	{r4, pc}
    2b54:	000016a1 	.word	0x000016a1

00002b58 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2b58:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2b5a:	4b01      	ldr	r3, [pc, #4]	; (2b60 <nm_bus_reset+0x8>)
    2b5c:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2b5e:	bd10      	pop	{r4, pc}
    2b60:	00003501 	.word	0x00003501

00002b64 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2b64:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2b66:	4b01      	ldr	r3, [pc, #4]	; (2b6c <nm_read_reg+0x8>)
    2b68:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2b6a:	bd10      	pop	{r4, pc}
    2b6c:	00003539 	.word	0x00003539

00002b70 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2b70:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2b72:	4b01      	ldr	r3, [pc, #4]	; (2b78 <nm_read_reg_with_ret+0x8>)
    2b74:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2b76:	bd10      	pop	{r4, pc}
    2b78:	0000354d 	.word	0x0000354d

00002b7c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2b7c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2b7e:	4b01      	ldr	r3, [pc, #4]	; (2b84 <nm_write_reg+0x8>)
    2b80:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2b82:	bd10      	pop	{r4, pc}
    2b84:	00003565 	.word	0x00003565

00002b88 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b8a:	46d6      	mov	lr, sl
    2b8c:	464f      	mov	r7, r9
    2b8e:	4646      	mov	r6, r8
    2b90:	b5c0      	push	{r6, r7, lr}
    2b92:	b082      	sub	sp, #8
    2b94:	4680      	mov	r8, r0
    2b96:	4689      	mov	r9, r1
    2b98:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2b9a:	4b13      	ldr	r3, [pc, #76]	; (2be8 <nm_read_block+0x60>)
    2b9c:	881f      	ldrh	r7, [r3, #0]
    2b9e:	3f08      	subs	r7, #8
    2ba0:	b2bb      	uxth	r3, r7
    2ba2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2ba4:	001e      	movs	r6, r3
    2ba6:	0004      	movs	r4, r0
    2ba8:	429a      	cmp	r2, r3
    2baa:	d91a      	bls.n	2be2 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2bac:	4b0f      	ldr	r3, [pc, #60]	; (2bec <nm_read_block+0x64>)
    2bae:	469a      	mov	sl, r3
    2bb0:	1a37      	subs	r7, r6, r0
    2bb2:	4643      	mov	r3, r8
    2bb4:	1ae1      	subs	r1, r4, r3
    2bb6:	4449      	add	r1, r9
    2bb8:	9a01      	ldr	r2, [sp, #4]
    2bba:	0020      	movs	r0, r4
    2bbc:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2bbe:	2800      	cmp	r0, #0
    2bc0:	d109      	bne.n	2bd6 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2bc2:	1bad      	subs	r5, r5, r6
    2bc4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2bc6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2bc8:	42b5      	cmp	r5, r6
    2bca:	d8f2      	bhi.n	2bb2 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2bcc:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2bce:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2bd0:	0020      	movs	r0, r4
    2bd2:	4b06      	ldr	r3, [pc, #24]	; (2bec <nm_read_block+0x64>)
    2bd4:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2bd6:	b002      	add	sp, #8
    2bd8:	bc1c      	pop	{r2, r3, r4}
    2bda:	4690      	mov	r8, r2
    2bdc:	4699      	mov	r9, r3
    2bde:	46a2      	mov	sl, r4
    2be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2be2:	2100      	movs	r1, #0
    2be4:	e7f2      	b.n	2bcc <nm_read_block+0x44>
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	20000030 	.word	0x20000030
    2bec:	000036a5 	.word	0x000036a5

00002bf0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bf2:	46d6      	mov	lr, sl
    2bf4:	464f      	mov	r7, r9
    2bf6:	4646      	mov	r6, r8
    2bf8:	b5c0      	push	{r6, r7, lr}
    2bfa:	b082      	sub	sp, #8
    2bfc:	4680      	mov	r8, r0
    2bfe:	4689      	mov	r9, r1
    2c00:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2c02:	4b13      	ldr	r3, [pc, #76]	; (2c50 <nm_write_block+0x60>)
    2c04:	881f      	ldrh	r7, [r3, #0]
    2c06:	3f08      	subs	r7, #8
    2c08:	b2bb      	uxth	r3, r7
    2c0a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2c0c:	001e      	movs	r6, r3
    2c0e:	0004      	movs	r4, r0
    2c10:	429a      	cmp	r2, r3
    2c12:	d91a      	bls.n	2c4a <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2c14:	4b0f      	ldr	r3, [pc, #60]	; (2c54 <nm_write_block+0x64>)
    2c16:	469a      	mov	sl, r3
    2c18:	1a37      	subs	r7, r6, r0
    2c1a:	4643      	mov	r3, r8
    2c1c:	1ae1      	subs	r1, r4, r3
    2c1e:	4449      	add	r1, r9
    2c20:	9a01      	ldr	r2, [sp, #4]
    2c22:	0020      	movs	r0, r4
    2c24:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2c26:	2800      	cmp	r0, #0
    2c28:	d109      	bne.n	2c3e <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2c2a:	1bad      	subs	r5, r5, r6
    2c2c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2c2e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2c30:	42b5      	cmp	r5, r6
    2c32:	d8f2      	bhi.n	2c1a <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2c34:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2c36:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2c38:	0020      	movs	r0, r4
    2c3a:	4b06      	ldr	r3, [pc, #24]	; (2c54 <nm_write_block+0x64>)
    2c3c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2c3e:	b002      	add	sp, #8
    2c40:	bc1c      	pop	{r2, r3, r4}
    2c42:	4690      	mov	r8, r2
    2c44:	4699      	mov	r9, r3
    2c46:	46a2      	mov	sl, r4
    2c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2c4a:	2100      	movs	r1, #0
    2c4c:	e7f2      	b.n	2c34 <nm_write_block+0x44>
    2c4e:	46c0      	nop			; (mov r8, r8)
    2c50:	20000030 	.word	0x20000030
    2c54:	00003801 	.word	0x00003801

00002c58 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2c58:	b570      	push	{r4, r5, r6, lr}
    2c5a:	b084      	sub	sp, #16
    2c5c:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2c5e:	2300      	movs	r3, #0
    2c60:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    2c62:	2208      	movs	r2, #8
    2c64:	2100      	movs	r1, #0
    2c66:	a801      	add	r0, sp, #4
    2c68:	4b2d      	ldr	r3, [pc, #180]	; (2d20 <nm_get_firmware_full_info+0xc8>)
    2c6a:	4798      	blx	r3
	if (pstrRev != NULL)
    2c6c:	2c00      	cmp	r4, #0
    2c6e:	d044      	beq.n	2cfa <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2c70:	2228      	movs	r2, #40	; 0x28
    2c72:	2100      	movs	r1, #0
    2c74:	0020      	movs	r0, r4
    2c76:	4b2b      	ldr	r3, [pc, #172]	; (2d24 <nm_get_firmware_full_info+0xcc>)
    2c78:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2c7a:	a903      	add	r1, sp, #12
    2c7c:	482a      	ldr	r0, [pc, #168]	; (2d28 <nm_get_firmware_full_info+0xd0>)
    2c7e:	4b2b      	ldr	r3, [pc, #172]	; (2d2c <nm_get_firmware_full_info+0xd4>)
    2c80:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    2c82:	2800      	cmp	r0, #0
    2c84:	d13a      	bne.n	2cfc <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    2c86:	9b03      	ldr	r3, [sp, #12]
    2c88:	2b00      	cmp	r3, #0
    2c8a:	d039      	beq.n	2d00 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2c8c:	20c0      	movs	r0, #192	; 0xc0
    2c8e:	0280      	lsls	r0, r0, #10
    2c90:	4318      	orrs	r0, r3
    2c92:	2208      	movs	r2, #8
    2c94:	a901      	add	r1, sp, #4
    2c96:	4b26      	ldr	r3, [pc, #152]	; (2d30 <nm_get_firmware_full_info+0xd8>)
    2c98:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    2c9a:	2800      	cmp	r0, #0
    2c9c:	d12e      	bne.n	2cfc <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    2c9e:	9b02      	ldr	r3, [sp, #8]
    2ca0:	0418      	lsls	r0, r3, #16
    2ca2:	0c00      	lsrs	r0, r0, #16
    2ca4:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    2ca6:	d02e      	beq.n	2d06 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2ca8:	23c0      	movs	r3, #192	; 0xc0
    2caa:	029b      	lsls	r3, r3, #10
    2cac:	4318      	orrs	r0, r3
    2cae:	2228      	movs	r2, #40	; 0x28
    2cb0:	0021      	movs	r1, r4
    2cb2:	4b1f      	ldr	r3, [pc, #124]	; (2d30 <nm_get_firmware_full_info+0xd8>)
    2cb4:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    2cb6:	2800      	cmp	r0, #0
    2cb8:	d120      	bne.n	2cfc <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    2cba:	7921      	ldrb	r1, [r4, #4]
    2cbc:	0209      	lsls	r1, r1, #8
    2cbe:	79a2      	ldrb	r2, [r4, #6]
    2cc0:	230f      	movs	r3, #15
    2cc2:	401a      	ands	r2, r3
    2cc4:	430a      	orrs	r2, r1
    2cc6:	7961      	ldrb	r1, [r4, #5]
    2cc8:	0109      	lsls	r1, r1, #4
    2cca:	25ff      	movs	r5, #255	; 0xff
    2ccc:	4029      	ands	r1, r5
    2cce:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2cd0:	79e1      	ldrb	r1, [r4, #7]
    2cd2:	0209      	lsls	r1, r1, #8
    2cd4:	7a66      	ldrb	r6, [r4, #9]
    2cd6:	4033      	ands	r3, r6
    2cd8:	430b      	orrs	r3, r1
    2cda:	7a21      	ldrb	r1, [r4, #8]
    2cdc:	0109      	lsls	r1, r1, #4
    2cde:	400d      	ands	r5, r1
    2ce0:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2ce2:	2a00      	cmp	r2, #0
    2ce4:	d012      	beq.n	2d0c <nm_get_firmware_full_info+0xb4>
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	d013      	beq.n	2d12 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    2cea:	4912      	ldr	r1, [pc, #72]	; (2d34 <nm_get_firmware_full_info+0xdc>)
    2cec:	428b      	cmp	r3, r1
    2cee:	d813      	bhi.n	2d18 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    2cf0:	4b11      	ldr	r3, [pc, #68]	; (2d38 <nm_get_firmware_full_info+0xe0>)
    2cf2:	429a      	cmp	r2, r3
    2cf4:	d802      	bhi.n	2cfc <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    2cf6:	380d      	subs	r0, #13
    2cf8:	e000      	b.n	2cfc <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    2cfa:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    2cfc:	b004      	add	sp, #16
    2cfe:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    2d00:	200c      	movs	r0, #12
    2d02:	4240      	negs	r0, r0
    2d04:	e7fa      	b.n	2cfc <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    2d06:	200c      	movs	r0, #12
    2d08:	4240      	negs	r0, r0
    2d0a:	e7f7      	b.n	2cfc <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    2d0c:	200c      	movs	r0, #12
    2d0e:	4240      	negs	r0, r0
    2d10:	e7f4      	b.n	2cfc <nm_get_firmware_full_info+0xa4>
    2d12:	200c      	movs	r0, #12
    2d14:	4240      	negs	r0, r0
    2d16:	e7f1      	b.n	2cfc <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    2d18:	200d      	movs	r0, #13
    2d1a:	4240      	negs	r0, r0
    2d1c:	e7ee      	b.n	2cfc <nm_get_firmware_full_info+0xa4>
    2d1e:	46c0      	nop			; (mov r8, r8)
    2d20:	0000bdaf 	.word	0x0000bdaf
    2d24:	00001721 	.word	0x00001721
    2d28:	000c0008 	.word	0x000c0008
    2d2c:	00002b71 	.word	0x00002b71
    2d30:	00002b89 	.word	0x00002b89
    2d34:	00001354 	.word	0x00001354
    2d38:	00001353 	.word	0x00001353

00002d3c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2d3c:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    2d3e:	2800      	cmp	r0, #0
    2d40:	d037      	beq.n	2db2 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    2d42:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    2d44:	1e6b      	subs	r3, r5, #1
    2d46:	2b03      	cmp	r3, #3
    2d48:	d900      	bls.n	2d4c <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    2d4a:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    2d4c:	2000      	movs	r0, #0
    2d4e:	4b20      	ldr	r3, [pc, #128]	; (2dd0 <nm_drv_init+0x94>)
    2d50:	4798      	blx	r3
    2d52:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d54:	d12f      	bne.n	2db6 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    2d56:	481f      	ldr	r0, [pc, #124]	; (2dd4 <nm_drv_init+0x98>)
    2d58:	4c1f      	ldr	r4, [pc, #124]	; (2dd8 <nm_drv_init+0x9c>)
    2d5a:	47a0      	blx	r4
    2d5c:	4b1f      	ldr	r3, [pc, #124]	; (2ddc <nm_drv_init+0xa0>)
    2d5e:	4798      	blx	r3
    2d60:	0001      	movs	r1, r0
    2d62:	481f      	ldr	r0, [pc, #124]	; (2de0 <nm_drv_init+0xa4>)
    2d64:	47a0      	blx	r4
    2d66:	200d      	movs	r0, #13
    2d68:	4b1e      	ldr	r3, [pc, #120]	; (2de4 <nm_drv_init+0xa8>)
    2d6a:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2d6c:	4b1e      	ldr	r3, [pc, #120]	; (2de8 <nm_drv_init+0xac>)
    2d6e:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    2d70:	0028      	movs	r0, r5
    2d72:	4b1e      	ldr	r3, [pc, #120]	; (2dec <nm_drv_init+0xb0>)
    2d74:	4798      	blx	r3
    2d76:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d78:	d117      	bne.n	2daa <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    2d7a:	0028      	movs	r0, r5
    2d7c:	4b1c      	ldr	r3, [pc, #112]	; (2df0 <nm_drv_init+0xb4>)
    2d7e:	4798      	blx	r3
    2d80:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d82:	d112      	bne.n	2daa <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    2d84:	3d02      	subs	r5, #2
    2d86:	2d01      	cmp	r5, #1
    2d88:	d911      	bls.n	2dae <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    2d8a:	4b1a      	ldr	r3, [pc, #104]	; (2df4 <nm_drv_init+0xb8>)
    2d8c:	4798      	blx	r3
    2d8e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d90:	d00d      	beq.n	2dae <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    2d92:	22a7      	movs	r2, #167	; 0xa7
    2d94:	0052      	lsls	r2, r2, #1
    2d96:	4918      	ldr	r1, [pc, #96]	; (2df8 <nm_drv_init+0xbc>)
    2d98:	4818      	ldr	r0, [pc, #96]	; (2dfc <nm_drv_init+0xc0>)
    2d9a:	4b0f      	ldr	r3, [pc, #60]	; (2dd8 <nm_drv_init+0x9c>)
    2d9c:	4798      	blx	r3
    2d9e:	4818      	ldr	r0, [pc, #96]	; (2e00 <nm_drv_init+0xc4>)
    2da0:	4b18      	ldr	r3, [pc, #96]	; (2e04 <nm_drv_init+0xc8>)
    2da2:	4798      	blx	r3
    2da4:	200d      	movs	r0, #13
    2da6:	4b0f      	ldr	r3, [pc, #60]	; (2de4 <nm_drv_init+0xa8>)
    2da8:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2daa:	4b17      	ldr	r3, [pc, #92]	; (2e08 <nm_drv_init+0xcc>)
    2dac:	4798      	blx	r3
ERR1:
	return ret;
}
    2dae:	0020      	movs	r0, r4
    2db0:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    2db2:	2501      	movs	r5, #1
    2db4:	e7ca      	b.n	2d4c <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    2db6:	2290      	movs	r2, #144	; 0x90
    2db8:	0052      	lsls	r2, r2, #1
    2dba:	490f      	ldr	r1, [pc, #60]	; (2df8 <nm_drv_init+0xbc>)
    2dbc:	480f      	ldr	r0, [pc, #60]	; (2dfc <nm_drv_init+0xc0>)
    2dbe:	4b06      	ldr	r3, [pc, #24]	; (2dd8 <nm_drv_init+0x9c>)
    2dc0:	4798      	blx	r3
    2dc2:	4812      	ldr	r0, [pc, #72]	; (2e0c <nm_drv_init+0xd0>)
    2dc4:	4b0f      	ldr	r3, [pc, #60]	; (2e04 <nm_drv_init+0xc8>)
    2dc6:	4798      	blx	r3
    2dc8:	200d      	movs	r0, #13
    2dca:	4b06      	ldr	r3, [pc, #24]	; (2de4 <nm_drv_init+0xa8>)
    2dcc:	4798      	blx	r3
		goto ERR1;
    2dce:	e7ee      	b.n	2dae <nm_drv_init+0x72>
    2dd0:	00002b41 	.word	0x00002b41
    2dd4:	0000d940 	.word	0x0000d940
    2dd8:	0000bf11 	.word	0x0000bf11
    2ddc:	00002721 	.word	0x00002721
    2de0:	0000dc84 	.word	0x0000dc84
    2de4:	0000bf45 	.word	0x0000bf45
    2de8:	0000357d 	.word	0x0000357d
    2dec:	00002935 	.word	0x00002935
    2df0:	00002a3d 	.word	0x00002a3d
    2df4:	000026c5 	.word	0x000026c5
    2df8:	0000dbcc 	.word	0x0000dbcc
    2dfc:	0000d610 	.word	0x0000d610
    2e00:	0000dc48 	.word	0x0000dc48
    2e04:	0000c02d 	.word	0x0000c02d
    2e08:	00002b4d 	.word	0x00002b4d
    2e0c:	0000dc68 	.word	0x0000dc68

00002e10 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    2e10:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    2e12:	4b1c      	ldr	r3, [pc, #112]	; (2e84 <nm_drv_deinit+0x74>)
    2e14:	4798      	blx	r3
    2e16:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2e18:	d10b      	bne.n	2e32 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    2e1a:	2000      	movs	r0, #0
    2e1c:	4b1a      	ldr	r3, [pc, #104]	; (2e88 <nm_drv_deinit+0x78>)
    2e1e:	4798      	blx	r3
    2e20:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2e22:	d114      	bne.n	2e4e <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    2e24:	4b19      	ldr	r3, [pc, #100]	; (2e8c <nm_drv_deinit+0x7c>)
    2e26:	4798      	blx	r3
    2e28:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2e2a:	d11d      	bne.n	2e68 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    2e2c:	4b18      	ldr	r3, [pc, #96]	; (2e90 <nm_drv_deinit+0x80>)
    2e2e:	4798      	blx	r3
    2e30:	e00b      	b.n	2e4a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    2e32:	2266      	movs	r2, #102	; 0x66
    2e34:	32ff      	adds	r2, #255	; 0xff
    2e36:	4917      	ldr	r1, [pc, #92]	; (2e94 <nm_drv_deinit+0x84>)
    2e38:	4817      	ldr	r0, [pc, #92]	; (2e98 <nm_drv_deinit+0x88>)
    2e3a:	4b18      	ldr	r3, [pc, #96]	; (2e9c <nm_drv_deinit+0x8c>)
    2e3c:	4798      	blx	r3
    2e3e:	4818      	ldr	r0, [pc, #96]	; (2ea0 <nm_drv_deinit+0x90>)
    2e40:	4b18      	ldr	r3, [pc, #96]	; (2ea4 <nm_drv_deinit+0x94>)
    2e42:	4798      	blx	r3
    2e44:	200d      	movs	r0, #13
    2e46:	4b18      	ldr	r3, [pc, #96]	; (2ea8 <nm_drv_deinit+0x98>)
    2e48:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    2e4a:	0020      	movs	r0, r4
    2e4c:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    2e4e:	22b6      	movs	r2, #182	; 0xb6
    2e50:	0052      	lsls	r2, r2, #1
    2e52:	4910      	ldr	r1, [pc, #64]	; (2e94 <nm_drv_deinit+0x84>)
    2e54:	4810      	ldr	r0, [pc, #64]	; (2e98 <nm_drv_deinit+0x88>)
    2e56:	4b11      	ldr	r3, [pc, #68]	; (2e9c <nm_drv_deinit+0x8c>)
    2e58:	4798      	blx	r3
    2e5a:	4814      	ldr	r0, [pc, #80]	; (2eac <nm_drv_deinit+0x9c>)
    2e5c:	4b11      	ldr	r3, [pc, #68]	; (2ea4 <nm_drv_deinit+0x94>)
    2e5e:	4798      	blx	r3
    2e60:	200d      	movs	r0, #13
    2e62:	4b11      	ldr	r3, [pc, #68]	; (2ea8 <nm_drv_deinit+0x98>)
    2e64:	4798      	blx	r3
		goto ERR1;
    2e66:	e7f0      	b.n	2e4a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    2e68:	22b9      	movs	r2, #185	; 0xb9
    2e6a:	0052      	lsls	r2, r2, #1
    2e6c:	4909      	ldr	r1, [pc, #36]	; (2e94 <nm_drv_deinit+0x84>)
    2e6e:	480a      	ldr	r0, [pc, #40]	; (2e98 <nm_drv_deinit+0x88>)
    2e70:	4b0a      	ldr	r3, [pc, #40]	; (2e9c <nm_drv_deinit+0x8c>)
    2e72:	4798      	blx	r3
    2e74:	480e      	ldr	r0, [pc, #56]	; (2eb0 <nm_drv_deinit+0xa0>)
    2e76:	4b0b      	ldr	r3, [pc, #44]	; (2ea4 <nm_drv_deinit+0x94>)
    2e78:	4798      	blx	r3
    2e7a:	200d      	movs	r0, #13
    2e7c:	4b0a      	ldr	r3, [pc, #40]	; (2ea8 <nm_drv_deinit+0x98>)
    2e7e:	4798      	blx	r3
		goto ERR1;
    2e80:	e7e3      	b.n	2e4a <nm_drv_deinit+0x3a>
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	00002ab5 	.word	0x00002ab5
    2e88:	000043dd 	.word	0x000043dd
    2e8c:	00002b4d 	.word	0x00002b4d
    2e90:	00003529 	.word	0x00003529
    2e94:	0000dbd8 	.word	0x0000dbd8
    2e98:	0000d610 	.word	0x0000d610
    2e9c:	0000bf11 	.word	0x0000bf11
    2ea0:	0000dbe8 	.word	0x0000dbe8
    2ea4:	0000c02d 	.word	0x0000c02d
    2ea8:	0000bf45 	.word	0x0000bf45
    2eac:	0000dc08 	.word	0x0000dc08
    2eb0:	0000dc2c 	.word	0x0000dc2c

00002eb4 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2eb4:	b500      	push	{lr}
    2eb6:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2eb8:	ab01      	add	r3, sp, #4
    2eba:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2ebc:	2200      	movs	r2, #0
    2ebe:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2ec0:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2ec2:	0019      	movs	r1, r3
    2ec4:	2003      	movs	r0, #3
    2ec6:	4b02      	ldr	r3, [pc, #8]	; (2ed0 <nmi_spi_write+0x1c>)
    2ec8:	4798      	blx	r3
}
    2eca:	b005      	add	sp, #20
    2ecc:	bd00      	pop	{pc}
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	00001555 	.word	0x00001555

00002ed4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2ed4:	b570      	push	{r4, r5, r6, lr}
    2ed6:	b084      	sub	sp, #16
    2ed8:	ac08      	add	r4, sp, #32
    2eda:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2edc:	ac01      	add	r4, sp, #4
    2ede:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2ee0:	303f      	adds	r0, #63	; 0x3f
    2ee2:	b2c4      	uxtb	r4, r0
    2ee4:	2c0e      	cmp	r4, #14
    2ee6:	d900      	bls.n	2eea <spi_cmd+0x16>
    2ee8:	e084      	b.n	2ff4 <spi_cmd+0x120>
    2eea:	00a0      	lsls	r0, r4, #2
    2eec:	4c4f      	ldr	r4, [pc, #316]	; (302c <spi_cmd+0x158>)
    2eee:	5820      	ldr	r0, [r4, r0]
    2ef0:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2ef2:	ab01      	add	r3, sp, #4
    2ef4:	0c0a      	lsrs	r2, r1, #16
    2ef6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2ef8:	0a0a      	lsrs	r2, r1, #8
    2efa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2efc:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2efe:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    2f00:	4b4b      	ldr	r3, [pc, #300]	; (3030 <spi_cmd+0x15c>)
    2f02:	781b      	ldrb	r3, [r3, #0]
    2f04:	2b00      	cmp	r3, #0
    2f06:	d077      	beq.n	2ff8 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    2f08:	3901      	subs	r1, #1
    2f0a:	b2c9      	uxtb	r1, r1
    2f0c:	e083      	b.n	3016 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    2f0e:	0a0b      	lsrs	r3, r1, #8
    2f10:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2f12:	2d00      	cmp	r5, #0
    2f14:	d107      	bne.n	2f26 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    2f16:	aa01      	add	r2, sp, #4
    2f18:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    2f1a:	ab01      	add	r3, sp, #4
    2f1c:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    2f1e:	2200      	movs	r2, #0
    2f20:	70da      	strb	r2, [r3, #3]
		len = 5;
    2f22:	2105      	movs	r1, #5
		break;
    2f24:	e7ec      	b.n	2f00 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2f26:	2280      	movs	r2, #128	; 0x80
    2f28:	4252      	negs	r2, r2
    2f2a:	4313      	orrs	r3, r2
    2f2c:	aa01      	add	r2, sp, #4
    2f2e:	7053      	strb	r3, [r2, #1]
    2f30:	e7f3      	b.n	2f1a <spi_cmd+0x46>
		bc[1] = 0x00;
    2f32:	ab01      	add	r3, sp, #4
    2f34:	2200      	movs	r2, #0
    2f36:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2f38:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2f3a:	70da      	strb	r2, [r3, #3]
		len = 5;
    2f3c:	2105      	movs	r1, #5
		break;
    2f3e:	e7df      	b.n	2f00 <spi_cmd+0x2c>
		bc[1] = 0x00;
    2f40:	ab01      	add	r3, sp, #4
    2f42:	2200      	movs	r2, #0
    2f44:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2f46:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2f48:	70da      	strb	r2, [r3, #3]
		len = 5;
    2f4a:	2105      	movs	r1, #5
		break;
    2f4c:	e7d8      	b.n	2f00 <spi_cmd+0x2c>
		bc[1] = 0xff;
    2f4e:	ab01      	add	r3, sp, #4
    2f50:	22ff      	movs	r2, #255	; 0xff
    2f52:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    2f54:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2f56:	70da      	strb	r2, [r3, #3]
		len = 5;
    2f58:	2105      	movs	r1, #5
		break;
    2f5a:	e7d1      	b.n	2f00 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2f5c:	aa01      	add	r2, sp, #4
    2f5e:	0c08      	lsrs	r0, r1, #16
    2f60:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2f62:	0a08      	lsrs	r0, r1, #8
    2f64:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2f66:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2f68:	0a19      	lsrs	r1, r3, #8
    2f6a:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    2f6c:	7153      	strb	r3, [r2, #5]
		len = 7;
    2f6e:	2107      	movs	r1, #7
		break;
    2f70:	e7c6      	b.n	2f00 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2f72:	aa01      	add	r2, sp, #4
    2f74:	0c08      	lsrs	r0, r1, #16
    2f76:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2f78:	0a08      	lsrs	r0, r1, #8
    2f7a:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2f7c:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    2f7e:	0c19      	lsrs	r1, r3, #16
    2f80:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    2f82:	0a19      	lsrs	r1, r3, #8
    2f84:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    2f86:	7193      	strb	r3, [r2, #6]
		len = 8;
    2f88:	2108      	movs	r1, #8
		break;
    2f8a:	e7b9      	b.n	2f00 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    2f8c:	0a0b      	lsrs	r3, r1, #8
    2f8e:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2f90:	2d00      	cmp	r5, #0
    2f92:	d10c      	bne.n	2fae <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    2f94:	a801      	add	r0, sp, #4
    2f96:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    2f98:	ab01      	add	r3, sp, #4
    2f9a:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2f9c:	0e11      	lsrs	r1, r2, #24
    2f9e:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2fa0:	0c11      	lsrs	r1, r2, #16
    2fa2:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2fa4:	0a11      	lsrs	r1, r2, #8
    2fa6:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    2fa8:	719a      	strb	r2, [r3, #6]
		len = 8;
    2faa:	2108      	movs	r1, #8
		break;
    2fac:	e7a8      	b.n	2f00 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2fae:	2080      	movs	r0, #128	; 0x80
    2fb0:	4240      	negs	r0, r0
    2fb2:	4303      	orrs	r3, r0
    2fb4:	a801      	add	r0, sp, #4
    2fb6:	7043      	strb	r3, [r0, #1]
    2fb8:	e7ee      	b.n	2f98 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    2fba:	ab01      	add	r3, sp, #4
    2fbc:	0c08      	lsrs	r0, r1, #16
    2fbe:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2fc0:	0a08      	lsrs	r0, r1, #8
    2fc2:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    2fc4:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2fc6:	0e11      	lsrs	r1, r2, #24
    2fc8:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2fca:	0c11      	lsrs	r1, r2, #16
    2fcc:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2fce:	0a11      	lsrs	r1, r2, #8
    2fd0:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    2fd2:	71da      	strb	r2, [r3, #7]
		len = 9;
    2fd4:	2109      	movs	r1, #9
		break;
    2fd6:	e793      	b.n	2f00 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2fd8:	2290      	movs	r2, #144	; 0x90
    2fda:	0052      	lsls	r2, r2, #1
    2fdc:	4915      	ldr	r1, [pc, #84]	; (3034 <spi_cmd+0x160>)
    2fde:	4816      	ldr	r0, [pc, #88]	; (3038 <spi_cmd+0x164>)
    2fe0:	4b16      	ldr	r3, [pc, #88]	; (303c <spi_cmd+0x168>)
    2fe2:	4798      	blx	r3
    2fe4:	4816      	ldr	r0, [pc, #88]	; (3040 <spi_cmd+0x16c>)
    2fe6:	4b17      	ldr	r3, [pc, #92]	; (3044 <spi_cmd+0x170>)
    2fe8:	4798      	blx	r3
    2fea:	200d      	movs	r0, #13
    2fec:	4b16      	ldr	r3, [pc, #88]	; (3048 <spi_cmd+0x174>)
    2fee:	4798      	blx	r3
			result = N_FAIL;
    2ff0:	2300      	movs	r3, #0
    2ff2:	e017      	b.n	3024 <spi_cmd+0x150>
	switch (cmd) {
    2ff4:	2300      	movs	r3, #0
    2ff6:	e015      	b.n	3024 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2ff8:	1e4e      	subs	r6, r1, #1
    2ffa:	aa01      	add	r2, sp, #4
    2ffc:	1995      	adds	r5, r2, r6
    2ffe:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    3000:	4c12      	ldr	r4, [pc, #72]	; (304c <spi_cmd+0x178>)
    3002:	005b      	lsls	r3, r3, #1
    3004:	7810      	ldrb	r0, [r2, #0]
    3006:	4043      	eors	r3, r0
    3008:	5ce3      	ldrb	r3, [r4, r3]
    300a:	3201      	adds	r2, #1
	while (len--)
    300c:	42aa      	cmp	r2, r5
    300e:	d1f8      	bne.n	3002 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    3010:	005b      	lsls	r3, r3, #1
    3012:	aa01      	add	r2, sp, #4
    3014:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    3016:	b289      	uxth	r1, r1
    3018:	a801      	add	r0, sp, #4
    301a:	4b0d      	ldr	r3, [pc, #52]	; (3050 <spi_cmd+0x17c>)
    301c:	4798      	blx	r3
    301e:	2301      	movs	r3, #1
    3020:	2800      	cmp	r0, #0
    3022:	d1d9      	bne.n	2fd8 <spi_cmd+0x104>
		}
	}

	return result;
}
    3024:	0018      	movs	r0, r3
    3026:	b004      	add	sp, #16
    3028:	bd70      	pop	{r4, r5, r6, pc}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	0000dc94 	.word	0x0000dc94
    3030:	200003d4 	.word	0x200003d4
    3034:	0000dcd4 	.word	0x0000dcd4
    3038:	0000d610 	.word	0x0000d610
    303c:	0000bf11 	.word	0x0000bf11
    3040:	0000e164 	.word	0x0000e164
    3044:	0000c02d 	.word	0x0000c02d
    3048:	0000bf45 	.word	0x0000bf45
    304c:	0000dd60 	.word	0x0000dd60
    3050:	00002eb5 	.word	0x00002eb5

00003054 <nmi_spi_read>:
{
    3054:	b500      	push	{lr}
    3056:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    3058:	ab01      	add	r3, sp, #4
    305a:	2200      	movs	r2, #0
    305c:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    305e:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    3060:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3062:	0019      	movs	r1, r3
    3064:	2003      	movs	r0, #3
    3066:	4b02      	ldr	r3, [pc, #8]	; (3070 <nmi_spi_read+0x1c>)
    3068:	4798      	blx	r3
}
    306a:	b005      	add	sp, #20
    306c:	bd00      	pop	{pc}
    306e:	46c0      	nop			; (mov r8, r8)
    3070:	00001555 	.word	0x00001555

00003074 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    3074:	b5f0      	push	{r4, r5, r6, r7, lr}
    3076:	46c6      	mov	lr, r8
    3078:	b500      	push	{lr}
    307a:	b082      	sub	sp, #8
    307c:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    307e:	28cf      	cmp	r0, #207	; 0xcf
    3080:	d02b      	beq.n	30da <spi_cmd_rsp+0x66>
    3082:	0003      	movs	r3, r0
    3084:	333b      	adds	r3, #59	; 0x3b
    3086:	b2db      	uxtb	r3, r3
    3088:	2b01      	cmp	r3, #1
    308a:	d926      	bls.n	30da <spi_cmd_rsp+0x66>
{
    308c:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    308e:	466b      	mov	r3, sp
    3090:	1dde      	adds	r6, r3, #7
    3092:	4b26      	ldr	r3, [pc, #152]	; (312c <spi_cmd_rsp+0xb8>)
    3094:	4698      	mov	r8, r3
    3096:	2101      	movs	r1, #1
    3098:	0030      	movs	r0, r6
    309a:	47c0      	blx	r8
    309c:	1e05      	subs	r5, r0, #0
    309e:	d125      	bne.n	30ec <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    30a0:	7833      	ldrb	r3, [r6, #0]
    30a2:	42bb      	cmp	r3, r7
    30a4:	d030      	beq.n	3108 <spi_cmd_rsp+0x94>
    30a6:	3c01      	subs	r4, #1
    30a8:	b2e4      	uxtb	r4, r4
    30aa:	2c00      	cmp	r4, #0
    30ac:	d1f3      	bne.n	3096 <spi_cmd_rsp+0x22>
    30ae:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    30b0:	466b      	mov	r3, sp
    30b2:	1dde      	adds	r6, r3, #7
    30b4:	4f1d      	ldr	r7, [pc, #116]	; (312c <spi_cmd_rsp+0xb8>)
    30b6:	2101      	movs	r1, #1
    30b8:	0030      	movs	r0, r6
    30ba:	47b8      	blx	r7
    30bc:	2800      	cmp	r0, #0
    30be:	d125      	bne.n	310c <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    30c0:	7833      	ldrb	r3, [r6, #0]
    30c2:	2b00      	cmp	r3, #0
    30c4:	d02f      	beq.n	3126 <spi_cmd_rsp+0xb2>
    30c6:	3c01      	subs	r4, #1
    30c8:	b2e4      	uxtb	r4, r4
    30ca:	2c00      	cmp	r4, #0
    30cc:	d1f3      	bne.n	30b6 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    30ce:	2501      	movs	r5, #1

_fail_:

	return result;
}
    30d0:	0028      	movs	r0, r5
    30d2:	b002      	add	sp, #8
    30d4:	bc04      	pop	{r2}
    30d6:	4690      	mov	r8, r2
    30d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    30da:	2101      	movs	r1, #1
    30dc:	466b      	mov	r3, sp
    30de:	1dd8      	adds	r0, r3, #7
    30e0:	4b12      	ldr	r3, [pc, #72]	; (312c <spi_cmd_rsp+0xb8>)
    30e2:	4798      	blx	r3
			result = N_FAIL;
    30e4:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    30e6:	2800      	cmp	r0, #0
    30e8:	d0d0      	beq.n	308c <spi_cmd_rsp+0x18>
    30ea:	e7f1      	b.n	30d0 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    30ec:	225c      	movs	r2, #92	; 0x5c
    30ee:	32ff      	adds	r2, #255	; 0xff
    30f0:	490f      	ldr	r1, [pc, #60]	; (3130 <spi_cmd_rsp+0xbc>)
    30f2:	4810      	ldr	r0, [pc, #64]	; (3134 <spi_cmd_rsp+0xc0>)
    30f4:	4b10      	ldr	r3, [pc, #64]	; (3138 <spi_cmd_rsp+0xc4>)
    30f6:	4798      	blx	r3
    30f8:	4810      	ldr	r0, [pc, #64]	; (313c <spi_cmd_rsp+0xc8>)
    30fa:	4b11      	ldr	r3, [pc, #68]	; (3140 <spi_cmd_rsp+0xcc>)
    30fc:	4798      	blx	r3
    30fe:	200d      	movs	r0, #13
    3100:	4b10      	ldr	r3, [pc, #64]	; (3144 <spi_cmd_rsp+0xd0>)
    3102:	4798      	blx	r3
			result = N_FAIL;
    3104:	2500      	movs	r5, #0
			goto _fail_;
    3106:	e7e3      	b.n	30d0 <spi_cmd_rsp+0x5c>
    3108:	240b      	movs	r4, #11
    310a:	e7d1      	b.n	30b0 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    310c:	226a      	movs	r2, #106	; 0x6a
    310e:	32ff      	adds	r2, #255	; 0xff
    3110:	4907      	ldr	r1, [pc, #28]	; (3130 <spi_cmd_rsp+0xbc>)
    3112:	4808      	ldr	r0, [pc, #32]	; (3134 <spi_cmd_rsp+0xc0>)
    3114:	4b08      	ldr	r3, [pc, #32]	; (3138 <spi_cmd_rsp+0xc4>)
    3116:	4798      	blx	r3
    3118:	4808      	ldr	r0, [pc, #32]	; (313c <spi_cmd_rsp+0xc8>)
    311a:	4b09      	ldr	r3, [pc, #36]	; (3140 <spi_cmd_rsp+0xcc>)
    311c:	4798      	blx	r3
    311e:	200d      	movs	r0, #13
    3120:	4b08      	ldr	r3, [pc, #32]	; (3144 <spi_cmd_rsp+0xd0>)
    3122:	4798      	blx	r3
			goto _fail_;
    3124:	e7d4      	b.n	30d0 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    3126:	2501      	movs	r5, #1
    3128:	e7d2      	b.n	30d0 <spi_cmd_rsp+0x5c>
    312a:	46c0      	nop			; (mov r8, r8)
    312c:	00003055 	.word	0x00003055
    3130:	0000dcec 	.word	0x0000dcec
    3134:	0000d610 	.word	0x0000d610
    3138:	0000bf11 	.word	0x0000bf11
    313c:	0000e190 	.word	0x0000e190
    3140:	0000c02d 	.word	0x0000c02d
    3144:	0000bf45 	.word	0x0000bf45

00003148 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    3148:	b5f0      	push	{r4, r5, r6, r7, lr}
    314a:	46de      	mov	lr, fp
    314c:	4657      	mov	r7, sl
    314e:	464e      	mov	r6, r9
    3150:	4645      	mov	r5, r8
    3152:	b5e0      	push	{r5, r6, r7, lr}
    3154:	b087      	sub	sp, #28
    3156:	9001      	str	r0, [sp, #4]
    3158:	4689      	mov	r9, r1
    315a:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    315c:	2300      	movs	r3, #0
    315e:	469a      	mov	sl, r3
    3160:	2380      	movs	r3, #128	; 0x80
    3162:	019b      	lsls	r3, r3, #6
    3164:	469b      	mov	fp, r3
    3166:	466a      	mov	r2, sp
    3168:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    316a:	4b3c      	ldr	r3, [pc, #240]	; (325c <spi_data_read+0x114>)
    316c:	4698      	mov	r8, r3
    316e:	e02f      	b.n	31d0 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    3170:	22be      	movs	r2, #190	; 0xbe
    3172:	0092      	lsls	r2, r2, #2
    3174:	493a      	ldr	r1, [pc, #232]	; (3260 <spi_data_read+0x118>)
    3176:	483b      	ldr	r0, [pc, #236]	; (3264 <spi_data_read+0x11c>)
    3178:	4b3b      	ldr	r3, [pc, #236]	; (3268 <spi_data_read+0x120>)
    317a:	4798      	blx	r3
    317c:	483b      	ldr	r0, [pc, #236]	; (326c <spi_data_read+0x124>)
    317e:	4b3c      	ldr	r3, [pc, #240]	; (3270 <spi_data_read+0x128>)
    3180:	4798      	blx	r3
    3182:	200d      	movs	r0, #13
    3184:	4b3b      	ldr	r3, [pc, #236]	; (3274 <spi_data_read+0x12c>)
    3186:	4798      	blx	r3
    3188:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    318a:	0028      	movs	r0, r5
    318c:	b007      	add	sp, #28
    318e:	bc3c      	pop	{r2, r3, r4, r5}
    3190:	4690      	mov	r8, r2
    3192:	4699      	mov	r9, r3
    3194:	46a2      	mov	sl, r4
    3196:	46ab      	mov	fp, r5
    3198:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    319a:	2c00      	cmp	r4, #0
    319c:	dd2e      	ble.n	31fc <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    319e:	9b01      	ldr	r3, [sp, #4]
    31a0:	4453      	add	r3, sl
    31a2:	0018      	movs	r0, r3
    31a4:	0039      	movs	r1, r7
    31a6:	4b2d      	ldr	r3, [pc, #180]	; (325c <spi_data_read+0x114>)
    31a8:	4798      	blx	r3
    31aa:	1e04      	subs	r4, r0, #0
    31ac:	d134      	bne.n	3218 <spi_data_read+0xd0>
		if(!clockless)
    31ae:	9b02      	ldr	r3, [sp, #8]
    31b0:	2b00      	cmp	r3, #0
    31b2:	d103      	bne.n	31bc <spi_data_read+0x74>
			if (!gu8Crc_off) {
    31b4:	4b30      	ldr	r3, [pc, #192]	; (3278 <spi_data_read+0x130>)
    31b6:	781b      	ldrb	r3, [r3, #0]
    31b8:	2b00      	cmp	r3, #0
    31ba:	d039      	beq.n	3230 <spi_data_read+0xe8>
		ix += nbytes;
    31bc:	4653      	mov	r3, sl
    31be:	18fb      	adds	r3, r7, r3
    31c0:	b21b      	sxth	r3, r3
    31c2:	469a      	mov	sl, r3
		sz -= nbytes;
    31c4:	464b      	mov	r3, r9
    31c6:	1bdf      	subs	r7, r3, r7
    31c8:	b2bb      	uxth	r3, r7
    31ca:	4699      	mov	r9, r3
	} while (sz);
    31cc:	2b00      	cmp	r3, #0
    31ce:	d043      	beq.n	3258 <spi_data_read+0x110>
    31d0:	464f      	mov	r7, r9
    31d2:	45d9      	cmp	r9, fp
    31d4:	d901      	bls.n	31da <spi_data_read+0x92>
    31d6:	466b      	mov	r3, sp
    31d8:	89df      	ldrh	r7, [r3, #14]
    31da:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    31dc:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    31de:	ab04      	add	r3, sp, #16
    31e0:	1cde      	adds	r6, r3, #3
    31e2:	2101      	movs	r1, #1
    31e4:	0030      	movs	r0, r6
    31e6:	47c0      	blx	r8
    31e8:	1e05      	subs	r5, r0, #0
    31ea:	d1c1      	bne.n	3170 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    31ec:	7833      	ldrb	r3, [r6, #0]
    31ee:	091b      	lsrs	r3, r3, #4
    31f0:	2b0f      	cmp	r3, #15
    31f2:	d0d2      	beq.n	319a <spi_data_read+0x52>
    31f4:	3c01      	subs	r4, #1
    31f6:	b224      	sxth	r4, r4
		} while (retry--);
    31f8:	1c63      	adds	r3, r4, #1
    31fa:	d1f2      	bne.n	31e2 <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    31fc:	22c1      	movs	r2, #193	; 0xc1
    31fe:	0092      	lsls	r2, r2, #2
    3200:	4917      	ldr	r1, [pc, #92]	; (3260 <spi_data_read+0x118>)
    3202:	4818      	ldr	r0, [pc, #96]	; (3264 <spi_data_read+0x11c>)
    3204:	4c18      	ldr	r4, [pc, #96]	; (3268 <spi_data_read+0x120>)
    3206:	47a0      	blx	r4
    3208:	ab04      	add	r3, sp, #16
    320a:	78d9      	ldrb	r1, [r3, #3]
    320c:	481b      	ldr	r0, [pc, #108]	; (327c <spi_data_read+0x134>)
    320e:	47a0      	blx	r4
    3210:	200d      	movs	r0, #13
    3212:	4b18      	ldr	r3, [pc, #96]	; (3274 <spi_data_read+0x12c>)
    3214:	4798      	blx	r3
			break;
    3216:	e7b8      	b.n	318a <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3218:	4a19      	ldr	r2, [pc, #100]	; (3280 <spi_data_read+0x138>)
    321a:	4911      	ldr	r1, [pc, #68]	; (3260 <spi_data_read+0x118>)
    321c:	4811      	ldr	r0, [pc, #68]	; (3264 <spi_data_read+0x11c>)
    321e:	4b12      	ldr	r3, [pc, #72]	; (3268 <spi_data_read+0x120>)
    3220:	4798      	blx	r3
    3222:	4818      	ldr	r0, [pc, #96]	; (3284 <spi_data_read+0x13c>)
    3224:	4b12      	ldr	r3, [pc, #72]	; (3270 <spi_data_read+0x128>)
    3226:	4798      	blx	r3
    3228:	200d      	movs	r0, #13
    322a:	4b12      	ldr	r3, [pc, #72]	; (3274 <spi_data_read+0x12c>)
    322c:	4798      	blx	r3
			break;
    322e:	e7ac      	b.n	318a <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3230:	2102      	movs	r1, #2
    3232:	a805      	add	r0, sp, #20
    3234:	4b09      	ldr	r3, [pc, #36]	; (325c <spi_data_read+0x114>)
    3236:	4798      	blx	r3
    3238:	2800      	cmp	r0, #0
    323a:	d0bf      	beq.n	31bc <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    323c:	22c6      	movs	r2, #198	; 0xc6
    323e:	0092      	lsls	r2, r2, #2
    3240:	4907      	ldr	r1, [pc, #28]	; (3260 <spi_data_read+0x118>)
    3242:	4808      	ldr	r0, [pc, #32]	; (3264 <spi_data_read+0x11c>)
    3244:	4b08      	ldr	r3, [pc, #32]	; (3268 <spi_data_read+0x120>)
    3246:	4798      	blx	r3
    3248:	480f      	ldr	r0, [pc, #60]	; (3288 <spi_data_read+0x140>)
    324a:	4b09      	ldr	r3, [pc, #36]	; (3270 <spi_data_read+0x128>)
    324c:	4798      	blx	r3
    324e:	200d      	movs	r0, #13
    3250:	4b08      	ldr	r3, [pc, #32]	; (3274 <spi_data_read+0x12c>)
    3252:	4798      	blx	r3
					result = N_FAIL;
    3254:	0025      	movs	r5, r4
					break;
    3256:	e798      	b.n	318a <spi_data_read+0x42>
    3258:	2501      	movs	r5, #1
    325a:	e796      	b.n	318a <spi_data_read+0x42>
    325c:	00003055 	.word	0x00003055
    3260:	0000dcf8 	.word	0x0000dcf8
    3264:	0000d610 	.word	0x0000d610
    3268:	0000bf11 	.word	0x0000bf11
    326c:	0000e1c4 	.word	0x0000e1c4
    3270:	0000c02d 	.word	0x0000c02d
    3274:	0000bf45 	.word	0x0000bf45
    3278:	200003d4 	.word	0x200003d4
    327c:	0000e1f8 	.word	0x0000e1f8
    3280:	0000030d 	.word	0x0000030d
    3284:	0000e228 	.word	0x0000e228
    3288:	0000e258 	.word	0x0000e258

0000328c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    328c:	b5f0      	push	{r4, r5, r6, r7, lr}
    328e:	46d6      	mov	lr, sl
    3290:	464f      	mov	r7, r9
    3292:	4646      	mov	r6, r8
    3294:	b5c0      	push	{r6, r7, lr}
    3296:	b086      	sub	sp, #24
    3298:	9003      	str	r0, [sp, #12]
    329a:	9104      	str	r1, [sp, #16]
    329c:	2830      	cmp	r0, #48	; 0x30
    329e:	d80f      	bhi.n	32c0 <spi_write_reg+0x34>
    32a0:	4b30      	ldr	r3, [pc, #192]	; (3364 <spi_write_reg+0xd8>)
    32a2:	781f      	ldrb	r7, [r3, #0]
    32a4:	b2fb      	uxtb	r3, r7
    32a6:	9305      	str	r3, [sp, #20]
    32a8:	2300      	movs	r3, #0
    32aa:	2230      	movs	r2, #48	; 0x30
    32ac:	9903      	ldr	r1, [sp, #12]
    32ae:	428a      	cmp	r2, r1
    32b0:	415b      	adcs	r3, r3
    32b2:	b2db      	uxtb	r3, r3
    32b4:	469a      	mov	sl, r3
    32b6:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    32b8:	4b2b      	ldr	r3, [pc, #172]	; (3368 <spi_write_reg+0xdc>)
    32ba:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    32bc:	46d1      	mov	r9, sl
    32be:	e033      	b.n	3328 <spi_write_reg+0x9c>
    32c0:	4b2a      	ldr	r3, [pc, #168]	; (336c <spi_write_reg+0xe0>)
    32c2:	781f      	ldrb	r7, [r3, #0]
    32c4:	e7ee      	b.n	32a4 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    32c6:	9805      	ldr	r0, [sp, #20]
    32c8:	4b29      	ldr	r3, [pc, #164]	; (3370 <spi_write_reg+0xe4>)
    32ca:	4798      	blx	r3
    32cc:	0004      	movs	r4, r0
	if (result != N_OK) {
    32ce:	2801      	cmp	r0, #1
    32d0:	d041      	beq.n	3356 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    32d2:	4a28      	ldr	r2, [pc, #160]	; (3374 <spi_write_reg+0xe8>)
    32d4:	4928      	ldr	r1, [pc, #160]	; (3378 <spi_write_reg+0xec>)
    32d6:	4829      	ldr	r0, [pc, #164]	; (337c <spi_write_reg+0xf0>)
    32d8:	4e29      	ldr	r6, [pc, #164]	; (3380 <spi_write_reg+0xf4>)
    32da:	47b0      	blx	r6
    32dc:	9903      	ldr	r1, [sp, #12]
    32de:	4829      	ldr	r0, [pc, #164]	; (3384 <spi_write_reg+0xf8>)
    32e0:	47b0      	blx	r6
    32e2:	200d      	movs	r0, #13
    32e4:	4b28      	ldr	r3, [pc, #160]	; (3388 <spi_write_reg+0xfc>)
    32e6:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    32e8:	2001      	movs	r0, #1
    32ea:	4e28      	ldr	r6, [pc, #160]	; (338c <spi_write_reg+0x100>)
    32ec:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    32ee:	2300      	movs	r3, #0
    32f0:	9300      	str	r3, [sp, #0]
    32f2:	2200      	movs	r2, #0
    32f4:	2100      	movs	r1, #0
    32f6:	20cf      	movs	r0, #207	; 0xcf
    32f8:	4f1b      	ldr	r7, [pc, #108]	; (3368 <spi_write_reg+0xdc>)
    32fa:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    32fc:	20cf      	movs	r0, #207	; 0xcf
    32fe:	4b1c      	ldr	r3, [pc, #112]	; (3370 <spi_write_reg+0xe4>)
    3300:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    3302:	22ea      	movs	r2, #234	; 0xea
    3304:	0092      	lsls	r2, r2, #2
    3306:	491c      	ldr	r1, [pc, #112]	; (3378 <spi_write_reg+0xec>)
    3308:	481c      	ldr	r0, [pc, #112]	; (337c <spi_write_reg+0xf0>)
    330a:	4f1d      	ldr	r7, [pc, #116]	; (3380 <spi_write_reg+0xf4>)
    330c:	47b8      	blx	r7
    330e:	9b04      	ldr	r3, [sp, #16]
    3310:	9a03      	ldr	r2, [sp, #12]
    3312:	0029      	movs	r1, r5
    3314:	481e      	ldr	r0, [pc, #120]	; (3390 <spi_write_reg+0x104>)
    3316:	47b8      	blx	r7
    3318:	200d      	movs	r0, #13
    331a:	4b1b      	ldr	r3, [pc, #108]	; (3388 <spi_write_reg+0xfc>)
    331c:	4798      	blx	r3
		nm_bsp_sleep(1);
    331e:	2001      	movs	r0, #1
    3320:	47b0      	blx	r6
    3322:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    3324:	2d00      	cmp	r5, #0
    3326:	d016      	beq.n	3356 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3328:	464b      	mov	r3, r9
    332a:	9300      	str	r3, [sp, #0]
    332c:	2304      	movs	r3, #4
    332e:	9a04      	ldr	r2, [sp, #16]
    3330:	9f03      	ldr	r7, [sp, #12]
    3332:	0039      	movs	r1, r7
    3334:	9805      	ldr	r0, [sp, #20]
    3336:	47c0      	blx	r8
    3338:	0004      	movs	r4, r0
	if (result != N_OK) {
    333a:	2801      	cmp	r0, #1
    333c:	d0c3      	beq.n	32c6 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    333e:	4a15      	ldr	r2, [pc, #84]	; (3394 <spi_write_reg+0x108>)
    3340:	490d      	ldr	r1, [pc, #52]	; (3378 <spi_write_reg+0xec>)
    3342:	480e      	ldr	r0, [pc, #56]	; (337c <spi_write_reg+0xf0>)
    3344:	4e0e      	ldr	r6, [pc, #56]	; (3380 <spi_write_reg+0xf4>)
    3346:	47b0      	blx	r6
    3348:	0039      	movs	r1, r7
    334a:	4813      	ldr	r0, [pc, #76]	; (3398 <spi_write_reg+0x10c>)
    334c:	47b0      	blx	r6
    334e:	200d      	movs	r0, #13
    3350:	4b0d      	ldr	r3, [pc, #52]	; (3388 <spi_write_reg+0xfc>)
    3352:	4798      	blx	r3
		goto _FAIL_;
    3354:	e7c8      	b.n	32e8 <spi_write_reg+0x5c>
	}

	return result;
}
    3356:	0020      	movs	r0, r4
    3358:	b006      	add	sp, #24
    335a:	bc1c      	pop	{r2, r3, r4}
    335c:	4690      	mov	r8, r2
    335e:	4699      	mov	r9, r3
    3360:	46a2      	mov	sl, r4
    3362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3364:	0000dcd0 	.word	0x0000dcd0
    3368:	00002ed5 	.word	0x00002ed5
    336c:	0000dcd1 	.word	0x0000dcd1
    3370:	00003075 	.word	0x00003075
    3374:	00000395 	.word	0x00000395
    3378:	0000dd18 	.word	0x0000dd18
    337c:	0000d610 	.word	0x0000d610
    3380:	0000bf11 	.word	0x0000bf11
    3384:	0000e350 	.word	0x0000e350
    3388:	0000bf45 	.word	0x0000bf45
    338c:	00001395 	.word	0x00001395
    3390:	0000e388 	.word	0x0000e388
    3394:	0000038f 	.word	0x0000038f
    3398:	0000e324 	.word	0x0000e324

0000339c <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    339c:	b5f0      	push	{r4, r5, r6, r7, lr}
    339e:	46de      	mov	lr, fp
    33a0:	4657      	mov	r7, sl
    33a2:	464e      	mov	r6, r9
    33a4:	4645      	mov	r5, r8
    33a6:	b5e0      	push	{r5, r6, r7, lr}
    33a8:	b087      	sub	sp, #28
    33aa:	9002      	str	r0, [sp, #8]
    33ac:	468b      	mov	fp, r1
    33ae:	28ff      	cmp	r0, #255	; 0xff
    33b0:	d80f      	bhi.n	33d2 <spi_read_reg+0x36>
    33b2:	4b41      	ldr	r3, [pc, #260]	; (34b8 <spi_read_reg+0x11c>)
    33b4:	781f      	ldrb	r7, [r3, #0]
    33b6:	b2fb      	uxtb	r3, r7
    33b8:	9303      	str	r3, [sp, #12]
    33ba:	2300      	movs	r3, #0
    33bc:	22ff      	movs	r2, #255	; 0xff
    33be:	9902      	ldr	r1, [sp, #8]
    33c0:	428a      	cmp	r2, r1
    33c2:	415b      	adcs	r3, r3
    33c4:	b2db      	uxtb	r3, r3
    33c6:	469a      	mov	sl, r3
    33c8:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    33ca:	4b3c      	ldr	r3, [pc, #240]	; (34bc <spi_read_reg+0x120>)
    33cc:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    33ce:	46d1      	mov	r9, sl
    33d0:	e031      	b.n	3436 <spi_read_reg+0x9a>
    33d2:	4b3b      	ldr	r3, [pc, #236]	; (34c0 <spi_read_reg+0x124>)
    33d4:	781f      	ldrb	r7, [r3, #0]
    33d6:	e7ee      	b.n	33b6 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    33d8:	9803      	ldr	r0, [sp, #12]
    33da:	4b3a      	ldr	r3, [pc, #232]	; (34c4 <spi_read_reg+0x128>)
    33dc:	4798      	blx	r3
    33de:	0004      	movs	r4, r0
	if (result != N_OK) {
    33e0:	2801      	cmp	r0, #1
    33e2:	d040      	beq.n	3466 <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    33e4:	4a38      	ldr	r2, [pc, #224]	; (34c8 <spi_read_reg+0x12c>)
    33e6:	4939      	ldr	r1, [pc, #228]	; (34cc <spi_read_reg+0x130>)
    33e8:	4839      	ldr	r0, [pc, #228]	; (34d0 <spi_read_reg+0x134>)
    33ea:	4e3a      	ldr	r6, [pc, #232]	; (34d4 <spi_read_reg+0x138>)
    33ec:	47b0      	blx	r6
    33ee:	9902      	ldr	r1, [sp, #8]
    33f0:	4839      	ldr	r0, [pc, #228]	; (34d8 <spi_read_reg+0x13c>)
    33f2:	47b0      	blx	r6
    33f4:	200d      	movs	r0, #13
    33f6:	4b39      	ldr	r3, [pc, #228]	; (34dc <spi_read_reg+0x140>)
    33f8:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    33fa:	2001      	movs	r0, #1
    33fc:	4e38      	ldr	r6, [pc, #224]	; (34e0 <spi_read_reg+0x144>)
    33fe:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3400:	2300      	movs	r3, #0
    3402:	9300      	str	r3, [sp, #0]
    3404:	2200      	movs	r2, #0
    3406:	2100      	movs	r1, #0
    3408:	20cf      	movs	r0, #207	; 0xcf
    340a:	4f2c      	ldr	r7, [pc, #176]	; (34bc <spi_read_reg+0x120>)
    340c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    340e:	20cf      	movs	r0, #207	; 0xcf
    3410:	4b2c      	ldr	r3, [pc, #176]	; (34c4 <spi_read_reg+0x128>)
    3412:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    3414:	4a33      	ldr	r2, [pc, #204]	; (34e4 <spi_read_reg+0x148>)
    3416:	492d      	ldr	r1, [pc, #180]	; (34cc <spi_read_reg+0x130>)
    3418:	482d      	ldr	r0, [pc, #180]	; (34d0 <spi_read_reg+0x134>)
    341a:	4f2e      	ldr	r7, [pc, #184]	; (34d4 <spi_read_reg+0x138>)
    341c:	47b8      	blx	r7
    341e:	9a02      	ldr	r2, [sp, #8]
    3420:	0029      	movs	r1, r5
    3422:	4831      	ldr	r0, [pc, #196]	; (34e8 <spi_read_reg+0x14c>)
    3424:	47b8      	blx	r7
    3426:	200d      	movs	r0, #13
    3428:	4b2c      	ldr	r3, [pc, #176]	; (34dc <spi_read_reg+0x140>)
    342a:	4798      	blx	r3
		nm_bsp_sleep(1);
    342c:	2001      	movs	r0, #1
    342e:	47b0      	blx	r6
    3430:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    3432:	2d00      	cmp	r5, #0
    3434:	d038      	beq.n	34a8 <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    3436:	464b      	mov	r3, r9
    3438:	9300      	str	r3, [sp, #0]
    343a:	2304      	movs	r3, #4
    343c:	2200      	movs	r2, #0
    343e:	9f02      	ldr	r7, [sp, #8]
    3440:	0039      	movs	r1, r7
    3442:	9803      	ldr	r0, [sp, #12]
    3444:	47c0      	blx	r8
    3446:	0004      	movs	r4, r0
	if (result != N_OK) {
    3448:	2801      	cmp	r0, #1
    344a:	d0c5      	beq.n	33d8 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    344c:	2282      	movs	r2, #130	; 0x82
    344e:	00d2      	lsls	r2, r2, #3
    3450:	491e      	ldr	r1, [pc, #120]	; (34cc <spi_read_reg+0x130>)
    3452:	481f      	ldr	r0, [pc, #124]	; (34d0 <spi_read_reg+0x134>)
    3454:	4e1f      	ldr	r6, [pc, #124]	; (34d4 <spi_read_reg+0x138>)
    3456:	47b0      	blx	r6
    3458:	0039      	movs	r1, r7
    345a:	4824      	ldr	r0, [pc, #144]	; (34ec <spi_read_reg+0x150>)
    345c:	47b0      	blx	r6
    345e:	200d      	movs	r0, #13
    3460:	4b1e      	ldr	r3, [pc, #120]	; (34dc <spi_read_reg+0x140>)
    3462:	4798      	blx	r3
		goto _FAIL_;
    3464:	e7c9      	b.n	33fa <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    3466:	464a      	mov	r2, r9
    3468:	2104      	movs	r1, #4
    346a:	a805      	add	r0, sp, #20
    346c:	4b20      	ldr	r3, [pc, #128]	; (34f0 <spi_read_reg+0x154>)
    346e:	4798      	blx	r3
    3470:	0004      	movs	r4, r0
	if (result != N_OK) {
    3472:	2801      	cmp	r0, #1
    3474:	d00b      	beq.n	348e <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    3476:	4a1f      	ldr	r2, [pc, #124]	; (34f4 <spi_read_reg+0x158>)
    3478:	4914      	ldr	r1, [pc, #80]	; (34cc <spi_read_reg+0x130>)
    347a:	4815      	ldr	r0, [pc, #84]	; (34d0 <spi_read_reg+0x134>)
    347c:	4b15      	ldr	r3, [pc, #84]	; (34d4 <spi_read_reg+0x138>)
    347e:	4798      	blx	r3
    3480:	481d      	ldr	r0, [pc, #116]	; (34f8 <spi_read_reg+0x15c>)
    3482:	4b1e      	ldr	r3, [pc, #120]	; (34fc <spi_read_reg+0x160>)
    3484:	4798      	blx	r3
    3486:	200d      	movs	r0, #13
    3488:	4b14      	ldr	r3, [pc, #80]	; (34dc <spi_read_reg+0x140>)
    348a:	4798      	blx	r3
		goto _FAIL_;
    348c:	e7b5      	b.n	33fa <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    348e:	aa05      	add	r2, sp, #20
    3490:	7853      	ldrb	r3, [r2, #1]
    3492:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    3494:	7891      	ldrb	r1, [r2, #2]
    3496:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    3498:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    349a:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    349c:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    349e:	78d2      	ldrb	r2, [r2, #3]
    34a0:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    34a2:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    34a4:	465a      	mov	r2, fp
    34a6:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    34a8:	0020      	movs	r0, r4
    34aa:	b007      	add	sp, #28
    34ac:	bc3c      	pop	{r2, r3, r4, r5}
    34ae:	4690      	mov	r8, r2
    34b0:	4699      	mov	r9, r3
    34b2:	46a2      	mov	sl, r4
    34b4:	46ab      	mov	fp, r5
    34b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34b8:	0000dcd2 	.word	0x0000dcd2
    34bc:	00002ed5 	.word	0x00002ed5
    34c0:	0000dcd3 	.word	0x0000dcd3
    34c4:	00003075 	.word	0x00003075
    34c8:	00000416 	.word	0x00000416
    34cc:	0000dd38 	.word	0x0000dd38
    34d0:	0000d610 	.word	0x0000d610
    34d4:	0000bf11 	.word	0x0000bf11
    34d8:	0000e2b8 	.word	0x0000e2b8
    34dc:	0000bf45 	.word	0x0000bf45
    34e0:	00001395 	.word	0x00001395
    34e4:	00000435 	.word	0x00000435
    34e8:	0000e30c 	.word	0x0000e30c
    34ec:	0000e28c 	.word	0x0000e28c
    34f0:	00003149 	.word	0x00003149
    34f4:	0000041d 	.word	0x0000041d
    34f8:	0000e2ec 	.word	0x0000e2ec
    34fc:	0000c02d 	.word	0x0000c02d

00003500 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    3500:	b510      	push	{r4, lr}
    3502:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3504:	2300      	movs	r3, #0
    3506:	9300      	str	r3, [sp, #0]
    3508:	2200      	movs	r2, #0
    350a:	2100      	movs	r1, #0
    350c:	20cf      	movs	r0, #207	; 0xcf
    350e:	4c04      	ldr	r4, [pc, #16]	; (3520 <nm_spi_reset+0x20>)
    3510:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    3512:	20cf      	movs	r0, #207	; 0xcf
    3514:	4b03      	ldr	r3, [pc, #12]	; (3524 <nm_spi_reset+0x24>)
    3516:	4798      	blx	r3
	return M2M_SUCCESS;
}
    3518:	2000      	movs	r0, #0
    351a:	b002      	add	sp, #8
    351c:	bd10      	pop	{r4, pc}
    351e:	46c0      	nop			; (mov r8, r8)
    3520:	00002ed5 	.word	0x00002ed5
    3524:	00003075 	.word	0x00003075

00003528 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    3528:	2200      	movs	r2, #0
    352a:	4b02      	ldr	r3, [pc, #8]	; (3534 <nm_spi_deinit+0xc>)
    352c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    352e:	2000      	movs	r0, #0
    3530:	4770      	bx	lr
    3532:	46c0      	nop			; (mov r8, r8)
    3534:	200003d4 	.word	0x200003d4

00003538 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    3538:	b500      	push	{lr}
    353a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    353c:	a901      	add	r1, sp, #4
    353e:	4b02      	ldr	r3, [pc, #8]	; (3548 <nm_spi_read_reg+0x10>)
    3540:	4798      	blx	r3

	return u32Val;
}
    3542:	9801      	ldr	r0, [sp, #4]
    3544:	b003      	add	sp, #12
    3546:	bd00      	pop	{pc}
    3548:	0000339d 	.word	0x0000339d

0000354c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    354c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    354e:	4b04      	ldr	r3, [pc, #16]	; (3560 <nm_spi_read_reg_with_ret+0x14>)
    3550:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3552:	2300      	movs	r3, #0
    3554:	2801      	cmp	r0, #1
    3556:	d101      	bne.n	355c <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    3558:	0018      	movs	r0, r3
    355a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    355c:	3b06      	subs	r3, #6
    355e:	e7fb      	b.n	3558 <nm_spi_read_reg_with_ret+0xc>
    3560:	0000339d 	.word	0x0000339d

00003564 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    3564:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    3566:	4b04      	ldr	r3, [pc, #16]	; (3578 <nm_spi_write_reg+0x14>)
    3568:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    356a:	2300      	movs	r3, #0
    356c:	2801      	cmp	r0, #1
    356e:	d101      	bne.n	3574 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    3570:	0018      	movs	r0, r3
    3572:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    3574:	3b06      	subs	r3, #6
    3576:	e7fb      	b.n	3570 <nm_spi_write_reg+0xc>
    3578:	0000328d 	.word	0x0000328d

0000357c <nm_spi_init>:
{
    357c:	b510      	push	{r4, lr}
    357e:	b082      	sub	sp, #8
	uint32 reg = 0;
    3580:	2300      	movs	r3, #0
    3582:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    3584:	4a35      	ldr	r2, [pc, #212]	; (365c <nm_spi_init+0xe0>)
    3586:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    3588:	4669      	mov	r1, sp
    358a:	4835      	ldr	r0, [pc, #212]	; (3660 <nm_spi_init+0xe4>)
    358c:	4b35      	ldr	r3, [pc, #212]	; (3664 <nm_spi_init+0xe8>)
    358e:	4798      	blx	r3
    3590:	2800      	cmp	r0, #0
    3592:	d028      	beq.n	35e6 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    3594:	4b31      	ldr	r3, [pc, #196]	; (365c <nm_spi_init+0xe0>)
    3596:	781b      	ldrb	r3, [r3, #0]
    3598:	2b00      	cmp	r3, #0
    359a:	d10d      	bne.n	35b8 <nm_spi_init+0x3c>
		reg &= ~0x70;
    359c:	337c      	adds	r3, #124	; 0x7c
    359e:	9900      	ldr	r1, [sp, #0]
    35a0:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    35a2:	3b2c      	subs	r3, #44	; 0x2c
    35a4:	4319      	orrs	r1, r3
    35a6:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    35a8:	482d      	ldr	r0, [pc, #180]	; (3660 <nm_spi_init+0xe4>)
    35aa:	4b2f      	ldr	r3, [pc, #188]	; (3668 <nm_spi_init+0xec>)
    35ac:	4798      	blx	r3
    35ae:	1e04      	subs	r4, r0, #0
    35b0:	d03a      	beq.n	3628 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    35b2:	2201      	movs	r2, #1
    35b4:	4b29      	ldr	r3, [pc, #164]	; (365c <nm_spi_init+0xe0>)
    35b6:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    35b8:	a901      	add	r1, sp, #4
    35ba:	2080      	movs	r0, #128	; 0x80
    35bc:	0140      	lsls	r0, r0, #5
    35be:	4b29      	ldr	r3, [pc, #164]	; (3664 <nm_spi_init+0xe8>)
    35c0:	4798      	blx	r3
    35c2:	2800      	cmp	r0, #0
    35c4:	d03c      	beq.n	3640 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    35c6:	4c26      	ldr	r4, [pc, #152]	; (3660 <nm_spi_init+0xe4>)
    35c8:	0020      	movs	r0, r4
    35ca:	4b28      	ldr	r3, [pc, #160]	; (366c <nm_spi_init+0xf0>)
    35cc:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    35ce:	2370      	movs	r3, #112	; 0x70
    35d0:	0001      	movs	r1, r0
    35d2:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    35d4:	2050      	movs	r0, #80	; 0x50
    35d6:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    35d8:	0020      	movs	r0, r4
    35da:	4b25      	ldr	r3, [pc, #148]	; (3670 <nm_spi_init+0xf4>)
    35dc:	4798      	blx	r3
	return M2M_SUCCESS;
    35de:	2400      	movs	r4, #0
}
    35e0:	0020      	movs	r0, r4
    35e2:	b002      	add	sp, #8
    35e4:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    35e6:	2201      	movs	r2, #1
    35e8:	4b1c      	ldr	r3, [pc, #112]	; (365c <nm_spi_init+0xe0>)
    35ea:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    35ec:	2298      	movs	r2, #152	; 0x98
    35ee:	00d2      	lsls	r2, r2, #3
    35f0:	4920      	ldr	r1, [pc, #128]	; (3674 <nm_spi_init+0xf8>)
    35f2:	4821      	ldr	r0, [pc, #132]	; (3678 <nm_spi_init+0xfc>)
    35f4:	4b21      	ldr	r3, [pc, #132]	; (367c <nm_spi_init+0x100>)
    35f6:	4798      	blx	r3
    35f8:	4821      	ldr	r0, [pc, #132]	; (3680 <nm_spi_init+0x104>)
    35fa:	4b22      	ldr	r3, [pc, #136]	; (3684 <nm_spi_init+0x108>)
    35fc:	4798      	blx	r3
    35fe:	200d      	movs	r0, #13
    3600:	4b21      	ldr	r3, [pc, #132]	; (3688 <nm_spi_init+0x10c>)
    3602:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    3604:	4669      	mov	r1, sp
    3606:	4816      	ldr	r0, [pc, #88]	; (3660 <nm_spi_init+0xe4>)
    3608:	4b16      	ldr	r3, [pc, #88]	; (3664 <nm_spi_init+0xe8>)
    360a:	4798      	blx	r3
    360c:	1e04      	subs	r4, r0, #0
    360e:	d1c1      	bne.n	3594 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    3610:	4a1e      	ldr	r2, [pc, #120]	; (368c <nm_spi_init+0x110>)
    3612:	4918      	ldr	r1, [pc, #96]	; (3674 <nm_spi_init+0xf8>)
    3614:	4818      	ldr	r0, [pc, #96]	; (3678 <nm_spi_init+0xfc>)
    3616:	4b19      	ldr	r3, [pc, #100]	; (367c <nm_spi_init+0x100>)
    3618:	4798      	blx	r3
    361a:	481d      	ldr	r0, [pc, #116]	; (3690 <nm_spi_init+0x114>)
    361c:	4b19      	ldr	r3, [pc, #100]	; (3684 <nm_spi_init+0x108>)
    361e:	4798      	blx	r3
    3620:	200d      	movs	r0, #13
    3622:	4b19      	ldr	r3, [pc, #100]	; (3688 <nm_spi_init+0x10c>)
    3624:	4798      	blx	r3
			return 0;
    3626:	e7db      	b.n	35e0 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    3628:	4a1a      	ldr	r2, [pc, #104]	; (3694 <nm_spi_init+0x118>)
    362a:	4912      	ldr	r1, [pc, #72]	; (3674 <nm_spi_init+0xf8>)
    362c:	4812      	ldr	r0, [pc, #72]	; (3678 <nm_spi_init+0xfc>)
    362e:	4b13      	ldr	r3, [pc, #76]	; (367c <nm_spi_init+0x100>)
    3630:	4798      	blx	r3
    3632:	4819      	ldr	r0, [pc, #100]	; (3698 <nm_spi_init+0x11c>)
    3634:	4b13      	ldr	r3, [pc, #76]	; (3684 <nm_spi_init+0x108>)
    3636:	4798      	blx	r3
    3638:	200d      	movs	r0, #13
    363a:	4b13      	ldr	r3, [pc, #76]	; (3688 <nm_spi_init+0x10c>)
    363c:	4798      	blx	r3
			return 0;
    363e:	e7cf      	b.n	35e0 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    3640:	4a16      	ldr	r2, [pc, #88]	; (369c <nm_spi_init+0x120>)
    3642:	490c      	ldr	r1, [pc, #48]	; (3674 <nm_spi_init+0xf8>)
    3644:	480c      	ldr	r0, [pc, #48]	; (3678 <nm_spi_init+0xfc>)
    3646:	4b0d      	ldr	r3, [pc, #52]	; (367c <nm_spi_init+0x100>)
    3648:	4798      	blx	r3
    364a:	4815      	ldr	r0, [pc, #84]	; (36a0 <nm_spi_init+0x124>)
    364c:	4b0d      	ldr	r3, [pc, #52]	; (3684 <nm_spi_init+0x108>)
    364e:	4798      	blx	r3
    3650:	200d      	movs	r0, #13
    3652:	4b0d      	ldr	r3, [pc, #52]	; (3688 <nm_spi_init+0x10c>)
    3654:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    3656:	2406      	movs	r4, #6
    3658:	4264      	negs	r4, r4
    365a:	e7c1      	b.n	35e0 <nm_spi_init+0x64>
    365c:	200003d4 	.word	0x200003d4
    3660:	0000e824 	.word	0x0000e824
    3664:	0000339d 	.word	0x0000339d
    3668:	0000328d 	.word	0x0000328d
    366c:	00003539 	.word	0x00003539
    3670:	00003565 	.word	0x00003565
    3674:	0000dd54 	.word	0x0000dd54
    3678:	0000d610 	.word	0x0000d610
    367c:	0000bf11 	.word	0x0000bf11
    3680:	0000de60 	.word	0x0000de60
    3684:	0000c02d 	.word	0x0000c02d
    3688:	0000bf45 	.word	0x0000bf45
    368c:	000004c3 	.word	0x000004c3
    3690:	0000deb0 	.word	0x0000deb0
    3694:	000004cd 	.word	0x000004cd
    3698:	0000dedc 	.word	0x0000dedc
    369c:	000004d7 	.word	0x000004d7
    36a0:	0000df10 	.word	0x0000df10

000036a4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    36a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36a6:	46de      	mov	lr, fp
    36a8:	4657      	mov	r7, sl
    36aa:	464e      	mov	r6, r9
    36ac:	4645      	mov	r5, r8
    36ae:	b5e0      	push	{r5, r6, r7, lr}
    36b0:	b087      	sub	sp, #28
    36b2:	9002      	str	r0, [sp, #8]
    36b4:	9103      	str	r1, [sp, #12]
    36b6:	0016      	movs	r6, r2
    36b8:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    36ba:	2300      	movs	r3, #0
    36bc:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    36be:	2400      	movs	r4, #0
    36c0:	4b3e      	ldr	r3, [pc, #248]	; (37bc <nm_spi_read_block+0x118>)
    36c2:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    36c4:	46a9      	mov	r9, r5
    36c6:	e037      	b.n	3738 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    36c8:	2301      	movs	r3, #1
    36ca:	469b      	mov	fp, r3
		size = 2;
    36cc:	3601      	adds	r6, #1
    36ce:	e035      	b.n	373c <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    36d0:	20c8      	movs	r0, #200	; 0xc8
    36d2:	4b3b      	ldr	r3, [pc, #236]	; (37c0 <nm_spi_read_block+0x11c>)
    36d4:	4798      	blx	r3
	if (result != N_OK) {
    36d6:	2801      	cmp	r0, #1
    36d8:	d045      	beq.n	3766 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    36da:	4a3a      	ldr	r2, [pc, #232]	; (37c4 <nm_spi_read_block+0x120>)
    36dc:	493a      	ldr	r1, [pc, #232]	; (37c8 <nm_spi_read_block+0x124>)
    36de:	483b      	ldr	r0, [pc, #236]	; (37cc <nm_spi_read_block+0x128>)
    36e0:	4f3b      	ldr	r7, [pc, #236]	; (37d0 <nm_spi_read_block+0x12c>)
    36e2:	47b8      	blx	r7
    36e4:	9902      	ldr	r1, [sp, #8]
    36e6:	483b      	ldr	r0, [pc, #236]	; (37d4 <nm_spi_read_block+0x130>)
    36e8:	47b8      	blx	r7
    36ea:	200d      	movs	r0, #13
    36ec:	4b3a      	ldr	r3, [pc, #232]	; (37d8 <nm_spi_read_block+0x134>)
    36ee:	4798      	blx	r3
		nm_bsp_sleep(1);
    36f0:	2001      	movs	r0, #1
    36f2:	4f3a      	ldr	r7, [pc, #232]	; (37dc <nm_spi_read_block+0x138>)
    36f4:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    36f6:	9400      	str	r4, [sp, #0]
    36f8:	0023      	movs	r3, r4
    36fa:	0022      	movs	r2, r4
    36fc:	0021      	movs	r1, r4
    36fe:	20cf      	movs	r0, #207	; 0xcf
    3700:	4d2e      	ldr	r5, [pc, #184]	; (37bc <nm_spi_read_block+0x118>)
    3702:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    3704:	20cf      	movs	r0, #207	; 0xcf
    3706:	4b2e      	ldr	r3, [pc, #184]	; (37c0 <nm_spi_read_block+0x11c>)
    3708:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    370a:	4a35      	ldr	r2, [pc, #212]	; (37e0 <nm_spi_read_block+0x13c>)
    370c:	492e      	ldr	r1, [pc, #184]	; (37c8 <nm_spi_read_block+0x124>)
    370e:	482f      	ldr	r0, [pc, #188]	; (37cc <nm_spi_read_block+0x128>)
    3710:	4b2f      	ldr	r3, [pc, #188]	; (37d0 <nm_spi_read_block+0x12c>)
    3712:	469a      	mov	sl, r3
    3714:	4798      	blx	r3
    3716:	0033      	movs	r3, r6
    3718:	9a02      	ldr	r2, [sp, #8]
    371a:	4649      	mov	r1, r9
    371c:	4831      	ldr	r0, [pc, #196]	; (37e4 <nm_spi_read_block+0x140>)
    371e:	47d0      	blx	sl
    3720:	200d      	movs	r0, #13
    3722:	4b2d      	ldr	r3, [pc, #180]	; (37d8 <nm_spi_read_block+0x134>)
    3724:	4798      	blx	r3
		nm_bsp_sleep(1);
    3726:	2001      	movs	r0, #1
    3728:	47b8      	blx	r7
    372a:	2301      	movs	r3, #1
    372c:	425b      	negs	r3, r3
    372e:	469c      	mov	ip, r3
    3730:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    3732:	464b      	mov	r3, r9
    3734:	2b00      	cmp	r3, #0
    3736:	d038      	beq.n	37aa <nm_spi_read_block+0x106>
	if (size == 1)
    3738:	2e01      	cmp	r6, #1
    373a:	d0c5      	beq.n	36c8 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    373c:	9400      	str	r4, [sp, #0]
    373e:	0033      	movs	r3, r6
    3740:	0022      	movs	r2, r4
    3742:	9d02      	ldr	r5, [sp, #8]
    3744:	0029      	movs	r1, r5
    3746:	20c8      	movs	r0, #200	; 0xc8
    3748:	47c0      	blx	r8
	if (result != N_OK) {
    374a:	2801      	cmp	r0, #1
    374c:	d0c0      	beq.n	36d0 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    374e:	4a26      	ldr	r2, [pc, #152]	; (37e8 <nm_spi_read_block+0x144>)
    3750:	491d      	ldr	r1, [pc, #116]	; (37c8 <nm_spi_read_block+0x124>)
    3752:	481e      	ldr	r0, [pc, #120]	; (37cc <nm_spi_read_block+0x128>)
    3754:	4f1e      	ldr	r7, [pc, #120]	; (37d0 <nm_spi_read_block+0x12c>)
    3756:	47b8      	blx	r7
    3758:	0029      	movs	r1, r5
    375a:	4824      	ldr	r0, [pc, #144]	; (37ec <nm_spi_read_block+0x148>)
    375c:	47b8      	blx	r7
    375e:	200d      	movs	r0, #13
    3760:	4b1d      	ldr	r3, [pc, #116]	; (37d8 <nm_spi_read_block+0x134>)
    3762:	4798      	blx	r3
    3764:	e7c4      	b.n	36f0 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    3766:	465b      	mov	r3, fp
    3768:	2b00      	cmp	r3, #0
    376a:	d016      	beq.n	379a <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    376c:	af05      	add	r7, sp, #20
    376e:	0022      	movs	r2, r4
    3770:	0031      	movs	r1, r6
    3772:	0038      	movs	r0, r7
    3774:	4b1e      	ldr	r3, [pc, #120]	; (37f0 <nm_spi_read_block+0x14c>)
    3776:	4798      	blx	r3
		buf[0] = tmp[0];
    3778:	783b      	ldrb	r3, [r7, #0]
    377a:	9a03      	ldr	r2, [sp, #12]
    377c:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    377e:	2801      	cmp	r0, #1
    3780:	d011      	beq.n	37a6 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    3782:	4a1c      	ldr	r2, [pc, #112]	; (37f4 <nm_spi_read_block+0x150>)
    3784:	4910      	ldr	r1, [pc, #64]	; (37c8 <nm_spi_read_block+0x124>)
    3786:	4811      	ldr	r0, [pc, #68]	; (37cc <nm_spi_read_block+0x128>)
    3788:	4b11      	ldr	r3, [pc, #68]	; (37d0 <nm_spi_read_block+0x12c>)
    378a:	4798      	blx	r3
    378c:	481a      	ldr	r0, [pc, #104]	; (37f8 <nm_spi_read_block+0x154>)
    378e:	4b1b      	ldr	r3, [pc, #108]	; (37fc <nm_spi_read_block+0x158>)
    3790:	4798      	blx	r3
    3792:	200d      	movs	r0, #13
    3794:	4b10      	ldr	r3, [pc, #64]	; (37d8 <nm_spi_read_block+0x134>)
    3796:	4798      	blx	r3
    3798:	e7aa      	b.n	36f0 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    379a:	0022      	movs	r2, r4
    379c:	0031      	movs	r1, r6
    379e:	9803      	ldr	r0, [sp, #12]
    37a0:	4b13      	ldr	r3, [pc, #76]	; (37f0 <nm_spi_read_block+0x14c>)
    37a2:	4798      	blx	r3
    37a4:	e7eb      	b.n	377e <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    37a6:	2000      	movs	r0, #0
    37a8:	e001      	b.n	37ae <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    37aa:	2006      	movs	r0, #6
    37ac:	4240      	negs	r0, r0

	return s8Ret;
}
    37ae:	b007      	add	sp, #28
    37b0:	bc3c      	pop	{r2, r3, r4, r5}
    37b2:	4690      	mov	r8, r2
    37b4:	4699      	mov	r9, r3
    37b6:	46a2      	mov	sl, r4
    37b8:	46ab      	mov	fp, r5
    37ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37bc:	00002ed5 	.word	0x00002ed5
    37c0:	00003075 	.word	0x00003075
    37c4:	0000045c 	.word	0x0000045c
    37c8:	0000dd48 	.word	0x0000dd48
    37cc:	0000d610 	.word	0x0000d610
    37d0:	0000bf11 	.word	0x0000bf11
    37d4:	0000df64 	.word	0x0000df64
    37d8:	0000bf45 	.word	0x0000bf45
    37dc:	00001395 	.word	0x00001395
    37e0:	0000047d 	.word	0x0000047d
    37e4:	0000dfc4 	.word	0x0000dfc4
    37e8:	00000456 	.word	0x00000456
    37ec:	0000df34 	.word	0x0000df34
    37f0:	00003149 	.word	0x00003149
    37f4:	0000046c 	.word	0x0000046c
    37f8:	0000df9c 	.word	0x0000df9c
    37fc:	0000c02d 	.word	0x0000c02d

00003800 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3800:	b5f0      	push	{r4, r5, r6, r7, lr}
    3802:	46de      	mov	lr, fp
    3804:	4647      	mov	r7, r8
    3806:	b580      	push	{r7, lr}
    3808:	b089      	sub	sp, #36	; 0x24
    380a:	9004      	str	r0, [sp, #16]
    380c:	468b      	mov	fp, r1
    380e:	9203      	str	r2, [sp, #12]
    3810:	260a      	movs	r6, #10
    3812:	2780      	movs	r7, #128	; 0x80
    3814:	01bf      	lsls	r7, r7, #6
    3816:	466b      	mov	r3, sp
    3818:	82df      	strh	r7, [r3, #22]
    381a:	0035      	movs	r5, r6
    381c:	e02d      	b.n	387a <nm_spi_write_block+0x7a>
		size = 2;
    381e:	3301      	adds	r3, #1
    3820:	9303      	str	r3, [sp, #12]
    3822:	e02d      	b.n	3880 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3824:	4a82      	ldr	r2, [pc, #520]	; (3a30 <nm_spi_write_block+0x230>)
    3826:	4983      	ldr	r1, [pc, #524]	; (3a34 <nm_spi_write_block+0x234>)
    3828:	4883      	ldr	r0, [pc, #524]	; (3a38 <nm_spi_write_block+0x238>)
    382a:	4c84      	ldr	r4, [pc, #528]	; (3a3c <nm_spi_write_block+0x23c>)
    382c:	47a0      	blx	r4
    382e:	0031      	movs	r1, r6
    3830:	4883      	ldr	r0, [pc, #524]	; (3a40 <nm_spi_write_block+0x240>)
    3832:	47a0      	blx	r4
    3834:	200d      	movs	r0, #13
    3836:	4b83      	ldr	r3, [pc, #524]	; (3a44 <nm_spi_write_block+0x244>)
    3838:	4798      	blx	r3
		nm_bsp_sleep(1);
    383a:	2001      	movs	r0, #1
    383c:	4c82      	ldr	r4, [pc, #520]	; (3a48 <nm_spi_write_block+0x248>)
    383e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3840:	2300      	movs	r3, #0
    3842:	9300      	str	r3, [sp, #0]
    3844:	2200      	movs	r2, #0
    3846:	2100      	movs	r1, #0
    3848:	20cf      	movs	r0, #207	; 0xcf
    384a:	4e80      	ldr	r6, [pc, #512]	; (3a4c <nm_spi_write_block+0x24c>)
    384c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    384e:	20cf      	movs	r0, #207	; 0xcf
    3850:	4b7f      	ldr	r3, [pc, #508]	; (3a50 <nm_spi_write_block+0x250>)
    3852:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    3854:	4a7f      	ldr	r2, [pc, #508]	; (3a54 <nm_spi_write_block+0x254>)
    3856:	4977      	ldr	r1, [pc, #476]	; (3a34 <nm_spi_write_block+0x234>)
    3858:	4877      	ldr	r0, [pc, #476]	; (3a38 <nm_spi_write_block+0x238>)
    385a:	4e78      	ldr	r6, [pc, #480]	; (3a3c <nm_spi_write_block+0x23c>)
    385c:	47b0      	blx	r6
    385e:	9b03      	ldr	r3, [sp, #12]
    3860:	9a04      	ldr	r2, [sp, #16]
    3862:	0029      	movs	r1, r5
    3864:	487c      	ldr	r0, [pc, #496]	; (3a58 <nm_spi_write_block+0x258>)
    3866:	47b0      	blx	r6
    3868:	200d      	movs	r0, #13
    386a:	4b76      	ldr	r3, [pc, #472]	; (3a44 <nm_spi_write_block+0x244>)
    386c:	4798      	blx	r3
		nm_bsp_sleep(1);
    386e:	2001      	movs	r0, #1
    3870:	47a0      	blx	r4
    3872:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    3874:	2d00      	cmp	r5, #0
    3876:	d100      	bne.n	387a <nm_spi_write_block+0x7a>
    3878:	e0d2      	b.n	3a20 <nm_spi_write_block+0x220>
	if (size == 1)
    387a:	9b03      	ldr	r3, [sp, #12]
    387c:	2b01      	cmp	r3, #1
    387e:	d0ce      	beq.n	381e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    3880:	2300      	movs	r3, #0
    3882:	9300      	str	r3, [sp, #0]
    3884:	9b03      	ldr	r3, [sp, #12]
    3886:	2200      	movs	r2, #0
    3888:	9e04      	ldr	r6, [sp, #16]
    388a:	0031      	movs	r1, r6
    388c:	20c7      	movs	r0, #199	; 0xc7
    388e:	4c6f      	ldr	r4, [pc, #444]	; (3a4c <nm_spi_write_block+0x24c>)
    3890:	47a0      	blx	r4
	if (result != N_OK) {
    3892:	2801      	cmp	r0, #1
    3894:	d1c6      	bne.n	3824 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    3896:	20c7      	movs	r0, #199	; 0xc7
    3898:	4b6d      	ldr	r3, [pc, #436]	; (3a50 <nm_spi_write_block+0x250>)
    389a:	4798      	blx	r3
	if (result != N_OK) {
    389c:	2801      	cmp	r0, #1
    389e:	d00b      	beq.n	38b8 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    38a0:	4a6e      	ldr	r2, [pc, #440]	; (3a5c <nm_spi_write_block+0x25c>)
    38a2:	4964      	ldr	r1, [pc, #400]	; (3a34 <nm_spi_write_block+0x234>)
    38a4:	4864      	ldr	r0, [pc, #400]	; (3a38 <nm_spi_write_block+0x238>)
    38a6:	4c65      	ldr	r4, [pc, #404]	; (3a3c <nm_spi_write_block+0x23c>)
    38a8:	47a0      	blx	r4
    38aa:	9904      	ldr	r1, [sp, #16]
    38ac:	486c      	ldr	r0, [pc, #432]	; (3a60 <nm_spi_write_block+0x260>)
    38ae:	47a0      	blx	r4
    38b0:	200d      	movs	r0, #13
    38b2:	4b64      	ldr	r3, [pc, #400]	; (3a44 <nm_spi_write_block+0x244>)
    38b4:	4798      	blx	r3
    38b6:	e7c0      	b.n	383a <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    38b8:	2200      	movs	r2, #0
    38ba:	ab07      	add	r3, sp, #28
    38bc:	801a      	strh	r2, [r3, #0]
    38be:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    38c0:	2600      	movs	r6, #0
				order = 0x1;
    38c2:	46a8      	mov	r8, r5
    38c4:	0035      	movs	r5, r6
    38c6:	0026      	movs	r6, r4
    38c8:	e021      	b.n	390e <nm_spi_write_block+0x10e>
				order = 0x2;
    38ca:	2300      	movs	r3, #0
    38cc:	42b7      	cmp	r7, r6
    38ce:	415b      	adcs	r3, r3
    38d0:	3302      	adds	r3, #2
		cmd |= order;
    38d2:	200b      	movs	r0, #11
    38d4:	aa04      	add	r2, sp, #16
    38d6:	4694      	mov	ip, r2
    38d8:	4460      	add	r0, ip
    38da:	2210      	movs	r2, #16
    38dc:	4252      	negs	r2, r2
    38de:	4313      	orrs	r3, r2
    38e0:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    38e2:	2101      	movs	r1, #1
    38e4:	4b5f      	ldr	r3, [pc, #380]	; (3a64 <nm_spi_write_block+0x264>)
    38e6:	4798      	blx	r3
    38e8:	2800      	cmp	r0, #0
    38ea:	d11d      	bne.n	3928 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    38ec:	465b      	mov	r3, fp
    38ee:	1958      	adds	r0, r3, r5
    38f0:	0021      	movs	r1, r4
    38f2:	4b5c      	ldr	r3, [pc, #368]	; (3a64 <nm_spi_write_block+0x264>)
    38f4:	4798      	blx	r3
    38f6:	2800      	cmp	r0, #0
    38f8:	d12e      	bne.n	3958 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    38fa:	4b5b      	ldr	r3, [pc, #364]	; (3a68 <nm_spi_write_block+0x268>)
    38fc:	781b      	ldrb	r3, [r3, #0]
    38fe:	2b00      	cmp	r3, #0
    3900:	d037      	beq.n	3972 <nm_spi_write_block+0x172>
		ix += nbytes;
    3902:	1965      	adds	r5, r4, r5
    3904:	b22d      	sxth	r5, r5
		sz -= nbytes;
    3906:	1b36      	subs	r6, r6, r4
    3908:	b2b6      	uxth	r6, r6
	} while (sz);
    390a:	2e00      	cmp	r6, #0
    390c:	d052      	beq.n	39b4 <nm_spi_write_block+0x1b4>
    390e:	1c34      	adds	r4, r6, #0
    3910:	42be      	cmp	r6, r7
    3912:	d901      	bls.n	3918 <nm_spi_write_block+0x118>
    3914:	466b      	mov	r3, sp
    3916:	8adc      	ldrh	r4, [r3, #22]
    3918:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    391a:	2d00      	cmp	r5, #0
    391c:	d1d5      	bne.n	38ca <nm_spi_write_block+0xca>
				order = 0x3;
    391e:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    3920:	42be      	cmp	r6, r7
    3922:	d9d6      	bls.n	38d2 <nm_spi_write_block+0xd2>
				order = 0x1;
    3924:	3b02      	subs	r3, #2
    3926:	e7d4      	b.n	38d2 <nm_spi_write_block+0xd2>
    3928:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    392a:	4a50      	ldr	r2, [pc, #320]	; (3a6c <nm_spi_write_block+0x26c>)
    392c:	4950      	ldr	r1, [pc, #320]	; (3a70 <nm_spi_write_block+0x270>)
    392e:	4842      	ldr	r0, [pc, #264]	; (3a38 <nm_spi_write_block+0x238>)
    3930:	4b42      	ldr	r3, [pc, #264]	; (3a3c <nm_spi_write_block+0x23c>)
    3932:	4798      	blx	r3
    3934:	484f      	ldr	r0, [pc, #316]	; (3a74 <nm_spi_write_block+0x274>)
    3936:	4b50      	ldr	r3, [pc, #320]	; (3a78 <nm_spi_write_block+0x278>)
    3938:	4798      	blx	r3
    393a:	200d      	movs	r0, #13
    393c:	4b41      	ldr	r3, [pc, #260]	; (3a44 <nm_spi_write_block+0x244>)
    393e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3940:	4a4e      	ldr	r2, [pc, #312]	; (3a7c <nm_spi_write_block+0x27c>)
    3942:	493c      	ldr	r1, [pc, #240]	; (3a34 <nm_spi_write_block+0x234>)
    3944:	483c      	ldr	r0, [pc, #240]	; (3a38 <nm_spi_write_block+0x238>)
    3946:	4b3d      	ldr	r3, [pc, #244]	; (3a3c <nm_spi_write_block+0x23c>)
    3948:	4798      	blx	r3
    394a:	484d      	ldr	r0, [pc, #308]	; (3a80 <nm_spi_write_block+0x280>)
    394c:	4b4a      	ldr	r3, [pc, #296]	; (3a78 <nm_spi_write_block+0x278>)
    394e:	4798      	blx	r3
    3950:	200d      	movs	r0, #13
    3952:	4b3c      	ldr	r3, [pc, #240]	; (3a44 <nm_spi_write_block+0x244>)
    3954:	4798      	blx	r3
    3956:	e770      	b.n	383a <nm_spi_write_block+0x3a>
    3958:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    395a:	4a4a      	ldr	r2, [pc, #296]	; (3a84 <nm_spi_write_block+0x284>)
    395c:	4944      	ldr	r1, [pc, #272]	; (3a70 <nm_spi_write_block+0x270>)
    395e:	4836      	ldr	r0, [pc, #216]	; (3a38 <nm_spi_write_block+0x238>)
    3960:	4b36      	ldr	r3, [pc, #216]	; (3a3c <nm_spi_write_block+0x23c>)
    3962:	4798      	blx	r3
    3964:	4848      	ldr	r0, [pc, #288]	; (3a88 <nm_spi_write_block+0x288>)
    3966:	4b44      	ldr	r3, [pc, #272]	; (3a78 <nm_spi_write_block+0x278>)
    3968:	4798      	blx	r3
    396a:	200d      	movs	r0, #13
    396c:	4b35      	ldr	r3, [pc, #212]	; (3a44 <nm_spi_write_block+0x244>)
    396e:	4798      	blx	r3
    3970:	e7e6      	b.n	3940 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    3972:	2102      	movs	r1, #2
    3974:	a807      	add	r0, sp, #28
    3976:	4b3b      	ldr	r3, [pc, #236]	; (3a64 <nm_spi_write_block+0x264>)
    3978:	4798      	blx	r3
    397a:	2800      	cmp	r0, #0
    397c:	d0c1      	beq.n	3902 <nm_spi_write_block+0x102>
    397e:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    3980:	22d7      	movs	r2, #215	; 0xd7
    3982:	0092      	lsls	r2, r2, #2
    3984:	493a      	ldr	r1, [pc, #232]	; (3a70 <nm_spi_write_block+0x270>)
    3986:	482c      	ldr	r0, [pc, #176]	; (3a38 <nm_spi_write_block+0x238>)
    3988:	4b2c      	ldr	r3, [pc, #176]	; (3a3c <nm_spi_write_block+0x23c>)
    398a:	4798      	blx	r3
    398c:	483f      	ldr	r0, [pc, #252]	; (3a8c <nm_spi_write_block+0x28c>)
    398e:	4b3a      	ldr	r3, [pc, #232]	; (3a78 <nm_spi_write_block+0x278>)
    3990:	4798      	blx	r3
    3992:	200d      	movs	r0, #13
    3994:	4b2b      	ldr	r3, [pc, #172]	; (3a44 <nm_spi_write_block+0x244>)
    3996:	4798      	blx	r3
    3998:	e7d2      	b.n	3940 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    399a:	229a      	movs	r2, #154	; 0x9a
    399c:	0052      	lsls	r2, r2, #1
    399e:	493c      	ldr	r1, [pc, #240]	; (3a90 <nm_spi_write_block+0x290>)
    39a0:	4825      	ldr	r0, [pc, #148]	; (3a38 <nm_spi_write_block+0x238>)
    39a2:	4b26      	ldr	r3, [pc, #152]	; (3a3c <nm_spi_write_block+0x23c>)
    39a4:	4798      	blx	r3
    39a6:	483b      	ldr	r0, [pc, #236]	; (3a94 <nm_spi_write_block+0x294>)
    39a8:	4b33      	ldr	r3, [pc, #204]	; (3a78 <nm_spi_write_block+0x278>)
    39aa:	4798      	blx	r3
    39ac:	200d      	movs	r0, #13
    39ae:	4b25      	ldr	r3, [pc, #148]	; (3a44 <nm_spi_write_block+0x244>)
    39b0:	4798      	blx	r3
    39b2:	e027      	b.n	3a04 <nm_spi_write_block+0x204>
    39b4:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    39b6:	4b2c      	ldr	r3, [pc, #176]	; (3a68 <nm_spi_write_block+0x268>)
    39b8:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    39ba:	1e63      	subs	r3, r4, #1
    39bc:	419c      	sbcs	r4, r3
    39be:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    39c0:	b2a1      	uxth	r1, r4
    39c2:	a807      	add	r0, sp, #28
    39c4:	4b34      	ldr	r3, [pc, #208]	; (3a98 <nm_spi_write_block+0x298>)
    39c6:	4798      	blx	r3
    39c8:	2800      	cmp	r0, #0
    39ca:	d1e6      	bne.n	399a <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    39cc:	ab08      	add	r3, sp, #32
    39ce:	191b      	adds	r3, r3, r4
    39d0:	3b05      	subs	r3, #5
    39d2:	781b      	ldrb	r3, [r3, #0]
    39d4:	2b00      	cmp	r3, #0
    39d6:	d106      	bne.n	39e6 <nm_spi_write_block+0x1e6>
    39d8:	ab08      	add	r3, sp, #32
    39da:	469c      	mov	ip, r3
    39dc:	4464      	add	r4, ip
    39de:	3c06      	subs	r4, #6
    39e0:	7823      	ldrb	r3, [r4, #0]
    39e2:	2bc3      	cmp	r3, #195	; 0xc3
    39e4:	d01a      	beq.n	3a1c <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    39e6:	223c      	movs	r2, #60	; 0x3c
    39e8:	32ff      	adds	r2, #255	; 0xff
    39ea:	4929      	ldr	r1, [pc, #164]	; (3a90 <nm_spi_write_block+0x290>)
    39ec:	4812      	ldr	r0, [pc, #72]	; (3a38 <nm_spi_write_block+0x238>)
    39ee:	4c13      	ldr	r4, [pc, #76]	; (3a3c <nm_spi_write_block+0x23c>)
    39f0:	47a0      	blx	r4
    39f2:	a907      	add	r1, sp, #28
    39f4:	788b      	ldrb	r3, [r1, #2]
    39f6:	784a      	ldrb	r2, [r1, #1]
    39f8:	7809      	ldrb	r1, [r1, #0]
    39fa:	4828      	ldr	r0, [pc, #160]	; (3a9c <nm_spi_write_block+0x29c>)
    39fc:	47a0      	blx	r4
    39fe:	200d      	movs	r0, #13
    3a00:	4b10      	ldr	r3, [pc, #64]	; (3a44 <nm_spi_write_block+0x244>)
    3a02:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3a04:	4a26      	ldr	r2, [pc, #152]	; (3aa0 <nm_spi_write_block+0x2a0>)
    3a06:	490b      	ldr	r1, [pc, #44]	; (3a34 <nm_spi_write_block+0x234>)
    3a08:	480b      	ldr	r0, [pc, #44]	; (3a38 <nm_spi_write_block+0x238>)
    3a0a:	4b0c      	ldr	r3, [pc, #48]	; (3a3c <nm_spi_write_block+0x23c>)
    3a0c:	4798      	blx	r3
    3a0e:	481c      	ldr	r0, [pc, #112]	; (3a80 <nm_spi_write_block+0x280>)
    3a10:	4b19      	ldr	r3, [pc, #100]	; (3a78 <nm_spi_write_block+0x278>)
    3a12:	4798      	blx	r3
    3a14:	200d      	movs	r0, #13
    3a16:	4b0b      	ldr	r3, [pc, #44]	; (3a44 <nm_spi_write_block+0x244>)
    3a18:	4798      	blx	r3
    3a1a:	e70e      	b.n	383a <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3a1c:	2000      	movs	r0, #0
    3a1e:	e001      	b.n	3a24 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3a20:	2006      	movs	r0, #6
    3a22:	4240      	negs	r0, r0

	return s8Ret;
}
    3a24:	b009      	add	sp, #36	; 0x24
    3a26:	bc0c      	pop	{r2, r3}
    3a28:	4690      	mov	r8, r2
    3a2a:	469b      	mov	fp, r3
    3a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a2e:	46c0      	nop			; (mov r8, r8)
    3a30:	000003c3 	.word	0x000003c3
    3a34:	0000dd28 	.word	0x0000dd28
    3a38:	0000d610 	.word	0x0000d610
    3a3c:	0000bf11 	.word	0x0000bf11
    3a40:	0000dfe0 	.word	0x0000dfe0
    3a44:	0000bf45 	.word	0x0000bf45
    3a48:	00001395 	.word	0x00001395
    3a4c:	00002ed5 	.word	0x00002ed5
    3a50:	00003075 	.word	0x00003075
    3a54:	000003eb 	.word	0x000003eb
    3a58:	0000dfc4 	.word	0x0000dfc4
    3a5c:	000003c9 	.word	0x000003c9
    3a60:	0000e010 	.word	0x0000e010
    3a64:	00002eb5 	.word	0x00002eb5
    3a68:	200003d4 	.word	0x200003d4
    3a6c:	00000349 	.word	0x00000349
    3a70:	0000dd08 	.word	0x0000dd08
    3a74:	0000e048 	.word	0x0000e048
    3a78:	0000c02d 	.word	0x0000c02d
    3a7c:	000003d9 	.word	0x000003d9
    3a80:	0000e13c 	.word	0x0000e13c
    3a84:	00000352 	.word	0x00000352
    3a88:	0000e080 	.word	0x0000e080
    3a8c:	0000e0b4 	.word	0x0000e0b4
    3a90:	0000dcdc 	.word	0x0000dcdc
    3a94:	0000e0ec 	.word	0x0000e0ec
    3a98:	00003055 	.word	0x00003055
    3a9c:	0000e10c 	.word	0x0000e10c
    3aa0:	000003e1 	.word	0x000003e1

00003aa4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    3aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aa6:	46de      	mov	lr, fp
    3aa8:	4657      	mov	r7, sl
    3aaa:	464e      	mov	r6, r9
    3aac:	4645      	mov	r5, r8
    3aae:	b5e0      	push	{r5, r6, r7, lr}
    3ab0:	b085      	sub	sp, #20
    3ab2:	9001      	str	r0, [sp, #4]
    3ab4:	000e      	movs	r6, r1
    3ab6:	9202      	str	r2, [sp, #8]
    3ab8:	001d      	movs	r5, r3
    3aba:	ab0e      	add	r3, sp, #56	; 0x38
    3abc:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    3abe:	2c00      	cmp	r4, #0
    3ac0:	d064      	beq.n	3b8c <Socket_ReadSocketData+0xe8>
    3ac2:	0103      	lsls	r3, r0, #4
    3ac4:	4935      	ldr	r1, [pc, #212]	; (3b9c <Socket_ReadSocketData+0xf8>)
    3ac6:	585b      	ldr	r3, [r3, r1]
    3ac8:	2b00      	cmp	r3, #0
    3aca:	d05f      	beq.n	3b8c <Socket_ReadSocketData+0xe8>
    3acc:	0101      	lsls	r1, r0, #4
    3ace:	4b33      	ldr	r3, [pc, #204]	; (3b9c <Socket_ReadSocketData+0xf8>)
    3ad0:	185b      	adds	r3, r3, r1
    3ad2:	889b      	ldrh	r3, [r3, #4]
    3ad4:	b29b      	uxth	r3, r3
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d058      	beq.n	3b8c <Socket_ReadSocketData+0xe8>
    3ada:	4b30      	ldr	r3, [pc, #192]	; (3b9c <Socket_ReadSocketData+0xf8>)
    3adc:	185b      	adds	r3, r3, r1
    3ade:	7a9b      	ldrb	r3, [r3, #10]
    3ae0:	2b01      	cmp	r3, #1
    3ae2:	d153      	bne.n	3b8c <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    3ae4:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3ae6:	4b2d      	ldr	r3, [pc, #180]	; (3b9c <Socket_ReadSocketData+0xf8>)
    3ae8:	469b      	mov	fp, r3
    3aea:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    3aec:	465b      	mov	r3, fp
    3aee:	220a      	movs	r2, #10
    3af0:	4690      	mov	r8, r2
    3af2:	44d8      	add	r8, fp
    3af4:	468a      	mov	sl, r1
    3af6:	9500      	str	r5, [sp, #0]
    3af8:	9303      	str	r3, [sp, #12]
    3afa:	e015      	b.n	3b28 <Socket_ReadSocketData+0x84>
    3afc:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    3afe:	2301      	movs	r3, #1
    3b00:	e01c      	b.n	3b3c <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    3b02:	3301      	adds	r3, #1
    3b04:	2200      	movs	r2, #0
    3b06:	2100      	movs	r1, #0
    3b08:	2000      	movs	r0, #0
    3b0a:	4c25      	ldr	r4, [pc, #148]	; (3ba0 <Socket_ReadSocketData+0xfc>)
    3b0c:	47a0      	blx	r4
    3b0e:	e03d      	b.n	3b8c <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    3b10:	4824      	ldr	r0, [pc, #144]	; (3ba4 <Socket_ReadSocketData+0x100>)
    3b12:	4d25      	ldr	r5, [pc, #148]	; (3ba8 <Socket_ReadSocketData+0x104>)
    3b14:	47a8      	blx	r5
    3b16:	0021      	movs	r1, r4
    3b18:	4824      	ldr	r0, [pc, #144]	; (3bac <Socket_ReadSocketData+0x108>)
    3b1a:	47a8      	blx	r5
    3b1c:	200d      	movs	r0, #13
    3b1e:	4b24      	ldr	r3, [pc, #144]	; (3bb0 <Socket_ReadSocketData+0x10c>)
    3b20:	4798      	blx	r3
				break;
    3b22:	e033      	b.n	3b8c <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    3b24:	2c00      	cmp	r4, #0
    3b26:	d031      	beq.n	3b8c <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3b28:	465b      	mov	r3, fp
    3b2a:	889b      	ldrh	r3, [r3, #4]
    3b2c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    3b2e:	b21b      	sxth	r3, r3
    3b30:	2b00      	cmp	r3, #0
    3b32:	dde3      	ble.n	3afc <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    3b34:	9b03      	ldr	r3, [sp, #12]
    3b36:	889d      	ldrh	r5, [r3, #4]
    3b38:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    3b3a:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    3b3c:	4a17      	ldr	r2, [pc, #92]	; (3b9c <Socket_ReadSocketData+0xf8>)
    3b3e:	4651      	mov	r1, sl
    3b40:	5889      	ldr	r1, [r1, r2]
    3b42:	002a      	movs	r2, r5
    3b44:	9800      	ldr	r0, [sp, #0]
    3b46:	4f16      	ldr	r7, [pc, #88]	; (3ba0 <Socket_ReadSocketData+0xfc>)
    3b48:	47b8      	blx	r7
    3b4a:	2800      	cmp	r0, #0
    3b4c:	d1e0      	bne.n	3b10 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    3b4e:	4b13      	ldr	r3, [pc, #76]	; (3b9c <Socket_ReadSocketData+0xf8>)
    3b50:	4652      	mov	r2, sl
    3b52:	58d3      	ldr	r3, [r2, r3]
    3b54:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    3b56:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    3b58:	88f3      	ldrh	r3, [r6, #6]
    3b5a:	1b5b      	subs	r3, r3, r5
    3b5c:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    3b5e:	4b15      	ldr	r3, [pc, #84]	; (3bb4 <Socket_ReadSocketData+0x110>)
    3b60:	681b      	ldr	r3, [r3, #0]
    3b62:	2b00      	cmp	r3, #0
    3b64:	d005      	beq.n	3b72 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    3b66:	4b13      	ldr	r3, [pc, #76]	; (3bb4 <Socket_ReadSocketData+0x110>)
    3b68:	681b      	ldr	r3, [r3, #0]
    3b6a:	0032      	movs	r2, r6
    3b6c:	9902      	ldr	r1, [sp, #8]
    3b6e:	9801      	ldr	r0, [sp, #4]
    3b70:	4798      	blx	r3
				u16ReadCount -= u16Read;
    3b72:	1b64      	subs	r4, r4, r5
    3b74:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    3b76:	9b00      	ldr	r3, [sp, #0]
    3b78:	469c      	mov	ip, r3
    3b7a:	44ac      	add	ip, r5
    3b7c:	4663      	mov	r3, ip
    3b7e:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    3b80:	4643      	mov	r3, r8
    3b82:	781b      	ldrb	r3, [r3, #0]
    3b84:	2b00      	cmp	r3, #0
    3b86:	d1cd      	bne.n	3b24 <Socket_ReadSocketData+0x80>
    3b88:	2c00      	cmp	r4, #0
    3b8a:	d1ba      	bne.n	3b02 <Socket_ReadSocketData+0x5e>
	}
}
    3b8c:	b005      	add	sp, #20
    3b8e:	bc3c      	pop	{r2, r3, r4, r5}
    3b90:	4690      	mov	r8, r2
    3b92:	4699      	mov	r9, r3
    3b94:	46a2      	mov	sl, r4
    3b96:	46ab      	mov	fp, r5
    3b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b9a:	46c0      	nop			; (mov r8, r8)
    3b9c:	20000f68 	.word	0x20000f68
    3ba0:	00001e4d 	.word	0x00001e4d
    3ba4:	0000d940 	.word	0x0000d940
    3ba8:	0000bf11 	.word	0x0000bf11
    3bac:	0000e3a4 	.word	0x0000e3a4
    3bb0:	0000bf45 	.word	0x0000bf45
    3bb4:	20001018 	.word	0x20001018

00003bb8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    3bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bba:	46d6      	mov	lr, sl
    3bbc:	464f      	mov	r7, r9
    3bbe:	4646      	mov	r6, r8
    3bc0:	b5c0      	push	{r6, r7, lr}
    3bc2:	b09a      	sub	sp, #104	; 0x68
    3bc4:	000d      	movs	r5, r1
    3bc6:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    3bc8:	2841      	cmp	r0, #65	; 0x41
    3bca:	d039      	beq.n	3c40 <m2m_ip_cb+0x88>
    3bcc:	2854      	cmp	r0, #84	; 0x54
    3bce:	d037      	beq.n	3c40 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    3bd0:	2842      	cmp	r0, #66	; 0x42
    3bd2:	d053      	beq.n	3c7c <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    3bd4:	2843      	cmp	r0, #67	; 0x43
    3bd6:	d06a      	beq.n	3cae <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    3bd8:	2844      	cmp	r0, #68	; 0x44
    3bda:	d100      	bne.n	3bde <m2m_ip_cb+0x26>
    3bdc:	e0af      	b.n	3d3e <m2m_ip_cb+0x186>
    3bde:	284b      	cmp	r0, #75	; 0x4b
    3be0:	d100      	bne.n	3be4 <m2m_ip_cb+0x2c>
    3be2:	e0ac      	b.n	3d3e <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    3be4:	284a      	cmp	r0, #74	; 0x4a
    3be6:	d100      	bne.n	3bea <m2m_ip_cb+0x32>
    3be8:	e0cf      	b.n	3d8a <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    3bea:	2846      	cmp	r0, #70	; 0x46
    3bec:	d100      	bne.n	3bf0 <m2m_ip_cb+0x38>
    3bee:	e0e5      	b.n	3dbc <m2m_ip_cb+0x204>
    3bf0:	2848      	cmp	r0, #72	; 0x48
    3bf2:	d100      	bne.n	3bf6 <m2m_ip_cb+0x3e>
    3bf4:	e10e      	b.n	3e14 <m2m_ip_cb+0x25c>
    3bf6:	284d      	cmp	r0, #77	; 0x4d
    3bf8:	d100      	bne.n	3bfc <m2m_ip_cb+0x44>
    3bfa:	e0dc      	b.n	3db6 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3bfc:	2845      	cmp	r0, #69	; 0x45
    3bfe:	d100      	bne.n	3c02 <m2m_ip_cb+0x4a>
    3c00:	e12c      	b.n	3e5c <m2m_ip_cb+0x2a4>
    3c02:	2847      	cmp	r0, #71	; 0x47
    3c04:	d100      	bne.n	3c08 <m2m_ip_cb+0x50>
    3c06:	e14d      	b.n	3ea4 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3c08:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3c0a:	284c      	cmp	r0, #76	; 0x4c
    3c0c:	d100      	bne.n	3c10 <m2m_ip_cb+0x58>
    3c0e:	e126      	b.n	3e5e <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    3c10:	2852      	cmp	r0, #82	; 0x52
    3c12:	d12d      	bne.n	3c70 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    3c14:	2301      	movs	r3, #1
    3c16:	2214      	movs	r2, #20
    3c18:	a909      	add	r1, sp, #36	; 0x24
    3c1a:	0020      	movs	r0, r4
    3c1c:	4ca2      	ldr	r4, [pc, #648]	; (3ea8 <m2m_ip_cb+0x2f0>)
    3c1e:	47a0      	blx	r4
    3c20:	2800      	cmp	r0, #0
    3c22:	d125      	bne.n	3c70 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    3c24:	4ba1      	ldr	r3, [pc, #644]	; (3eac <m2m_ip_cb+0x2f4>)
    3c26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3c28:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    3c2a:	681b      	ldr	r3, [r3, #0]
    3c2c:	2b00      	cmp	r3, #0
    3c2e:	d01f      	beq.n	3c70 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    3c30:	4b9e      	ldr	r3, [pc, #632]	; (3eac <m2m_ip_cb+0x2f4>)
    3c32:	681c      	ldr	r4, [r3, #0]
    3c34:	ab09      	add	r3, sp, #36	; 0x24
    3c36:	7c1a      	ldrb	r2, [r3, #16]
    3c38:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3c3a:	9809      	ldr	r0, [sp, #36]	; 0x24
    3c3c:	47a0      	blx	r4
			}
		}
	}
}
    3c3e:	e017      	b.n	3c70 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    3c40:	2300      	movs	r3, #0
    3c42:	2204      	movs	r2, #4
    3c44:	a909      	add	r1, sp, #36	; 0x24
    3c46:	0020      	movs	r0, r4
    3c48:	4c97      	ldr	r4, [pc, #604]	; (3ea8 <m2m_ip_cb+0x2f0>)
    3c4a:	47a0      	blx	r4
    3c4c:	2800      	cmp	r0, #0
    3c4e:	d10f      	bne.n	3c70 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    3c50:	ab09      	add	r3, sp, #36	; 0x24
    3c52:	785a      	ldrb	r2, [r3, #1]
    3c54:	ab05      	add	r3, sp, #20
    3c56:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3c58:	4b95      	ldr	r3, [pc, #596]	; (3eb0 <m2m_ip_cb+0x2f8>)
    3c5a:	681b      	ldr	r3, [r3, #0]
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	d007      	beq.n	3c70 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    3c60:	4b93      	ldr	r3, [pc, #588]	; (3eb0 <m2m_ip_cb+0x2f8>)
    3c62:	681b      	ldr	r3, [r3, #0]
    3c64:	aa09      	add	r2, sp, #36	; 0x24
    3c66:	2000      	movs	r0, #0
    3c68:	5610      	ldrsb	r0, [r2, r0]
    3c6a:	aa05      	add	r2, sp, #20
    3c6c:	2101      	movs	r1, #1
    3c6e:	4798      	blx	r3
}
    3c70:	b01a      	add	sp, #104	; 0x68
    3c72:	bc1c      	pop	{r2, r3, r4}
    3c74:	4690      	mov	r8, r2
    3c76:	4699      	mov	r9, r3
    3c78:	46a2      	mov	sl, r4
    3c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    3c7c:	2300      	movs	r3, #0
    3c7e:	2204      	movs	r2, #4
    3c80:	a909      	add	r1, sp, #36	; 0x24
    3c82:	0020      	movs	r0, r4
    3c84:	4c88      	ldr	r4, [pc, #544]	; (3ea8 <m2m_ip_cb+0x2f0>)
    3c86:	47a0      	blx	r4
    3c88:	2800      	cmp	r0, #0
    3c8a:	d1f1      	bne.n	3c70 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    3c8c:	ab09      	add	r3, sp, #36	; 0x24
    3c8e:	785a      	ldrb	r2, [r3, #1]
    3c90:	ab05      	add	r3, sp, #20
    3c92:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3c94:	4b86      	ldr	r3, [pc, #536]	; (3eb0 <m2m_ip_cb+0x2f8>)
    3c96:	681b      	ldr	r3, [r3, #0]
    3c98:	2b00      	cmp	r3, #0
    3c9a:	d0e9      	beq.n	3c70 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    3c9c:	4b84      	ldr	r3, [pc, #528]	; (3eb0 <m2m_ip_cb+0x2f8>)
    3c9e:	681b      	ldr	r3, [r3, #0]
    3ca0:	aa09      	add	r2, sp, #36	; 0x24
    3ca2:	2000      	movs	r0, #0
    3ca4:	5610      	ldrsb	r0, [r2, r0]
    3ca6:	aa05      	add	r2, sp, #20
    3ca8:	2102      	movs	r1, #2
    3caa:	4798      	blx	r3
    3cac:	e7e0      	b.n	3c70 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    3cae:	2300      	movs	r3, #0
    3cb0:	220c      	movs	r2, #12
    3cb2:	a905      	add	r1, sp, #20
    3cb4:	0020      	movs	r0, r4
    3cb6:	4c7c      	ldr	r4, [pc, #496]	; (3ea8 <m2m_ip_cb+0x2f0>)
    3cb8:	47a0      	blx	r4
    3cba:	2800      	cmp	r0, #0
    3cbc:	d1d8      	bne.n	3c70 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    3cbe:	ab05      	add	r3, sp, #20
    3cc0:	2209      	movs	r2, #9
    3cc2:	569a      	ldrsb	r2, [r3, r2]
    3cc4:	2a00      	cmp	r2, #0
    3cc6:	db24      	blt.n	3d12 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    3cc8:	0018      	movs	r0, r3
    3cca:	2108      	movs	r1, #8
    3ccc:	5659      	ldrsb	r1, [r3, r1]
    3cce:	4b79      	ldr	r3, [pc, #484]	; (3eb4 <m2m_ip_cb+0x2fc>)
    3cd0:	0109      	lsls	r1, r1, #4
    3cd2:	1859      	adds	r1, r3, r1
    3cd4:	7ac9      	ldrb	r1, [r1, #11]
    3cd6:	b2c9      	uxtb	r1, r1
    3cd8:	0114      	lsls	r4, r2, #4
    3cda:	191b      	adds	r3, r3, r4
    3cdc:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    3cde:	2101      	movs	r1, #1
    3ce0:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3ce2:	8941      	ldrh	r1, [r0, #10]
    3ce4:	3908      	subs	r1, #8
    3ce6:	b289      	uxth	r1, r1
    3ce8:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    3cea:	4973      	ldr	r1, [pc, #460]	; (3eb8 <m2m_ip_cb+0x300>)
    3cec:	880b      	ldrh	r3, [r1, #0]
    3cee:	3301      	adds	r3, #1
    3cf0:	b29b      	uxth	r3, r3
    3cf2:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    3cf4:	880b      	ldrh	r3, [r1, #0]
    3cf6:	b29b      	uxth	r3, r3
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d103      	bne.n	3d04 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    3cfc:	880b      	ldrh	r3, [r1, #0]
    3cfe:	3301      	adds	r3, #1
    3d00:	b29b      	uxth	r3, r3
    3d02:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    3d04:	4b6c      	ldr	r3, [pc, #432]	; (3eb8 <m2m_ip_cb+0x300>)
    3d06:	8819      	ldrh	r1, [r3, #0]
    3d08:	b289      	uxth	r1, r1
    3d0a:	0110      	lsls	r0, r2, #4
    3d0c:	4b69      	ldr	r3, [pc, #420]	; (3eb4 <m2m_ip_cb+0x2fc>)
    3d0e:	181b      	adds	r3, r3, r0
    3d10:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    3d12:	ab09      	add	r3, sp, #36	; 0x24
    3d14:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    3d16:	2202      	movs	r2, #2
    3d18:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    3d1a:	aa05      	add	r2, sp, #20
    3d1c:	8851      	ldrh	r1, [r2, #2]
    3d1e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    3d20:	9a06      	ldr	r2, [sp, #24]
    3d22:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    3d24:	4b62      	ldr	r3, [pc, #392]	; (3eb0 <m2m_ip_cb+0x2f8>)
    3d26:	681b      	ldr	r3, [r3, #0]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d0a1      	beq.n	3c70 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    3d2c:	4b60      	ldr	r3, [pc, #384]	; (3eb0 <m2m_ip_cb+0x2f8>)
    3d2e:	681b      	ldr	r3, [r3, #0]
    3d30:	aa05      	add	r2, sp, #20
    3d32:	2008      	movs	r0, #8
    3d34:	5610      	ldrsb	r0, [r2, r0]
    3d36:	aa09      	add	r2, sp, #36	; 0x24
    3d38:	2104      	movs	r1, #4
    3d3a:	4798      	blx	r3
    3d3c:	e798      	b.n	3c70 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    3d3e:	2300      	movs	r3, #0
    3d40:	2204      	movs	r2, #4
    3d42:	a909      	add	r1, sp, #36	; 0x24
    3d44:	0020      	movs	r0, r4
    3d46:	4c58      	ldr	r4, [pc, #352]	; (3ea8 <m2m_ip_cb+0x2f0>)
    3d48:	47a0      	blx	r4
    3d4a:	2800      	cmp	r0, #0
    3d4c:	d000      	beq.n	3d50 <m2m_ip_cb+0x198>
    3d4e:	e78f      	b.n	3c70 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    3d50:	ab09      	add	r3, sp, #36	; 0x24
    3d52:	2000      	movs	r0, #0
    3d54:	5618      	ldrsb	r0, [r3, r0]
    3d56:	aa05      	add	r2, sp, #20
    3d58:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    3d5a:	785b      	ldrb	r3, [r3, #1]
    3d5c:	b25b      	sxtb	r3, r3
    3d5e:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    3d60:	2b00      	cmp	r3, #0
    3d62:	d107      	bne.n	3d74 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3d64:	ab09      	add	r3, sp, #36	; 0x24
    3d66:	885b      	ldrh	r3, [r3, #2]
    3d68:	3b08      	subs	r3, #8
    3d6a:	b29b      	uxth	r3, r3
    3d6c:	0101      	lsls	r1, r0, #4
    3d6e:	4a51      	ldr	r2, [pc, #324]	; (3eb4 <m2m_ip_cb+0x2fc>)
    3d70:	1852      	adds	r2, r2, r1
    3d72:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    3d74:	4b4e      	ldr	r3, [pc, #312]	; (3eb0 <m2m_ip_cb+0x2f8>)
    3d76:	681b      	ldr	r3, [r3, #0]
    3d78:	2b00      	cmp	r3, #0
    3d7a:	d100      	bne.n	3d7e <m2m_ip_cb+0x1c6>
    3d7c:	e778      	b.n	3c70 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    3d7e:	4b4c      	ldr	r3, [pc, #304]	; (3eb0 <m2m_ip_cb+0x2f8>)
    3d80:	681b      	ldr	r3, [r3, #0]
    3d82:	aa05      	add	r2, sp, #20
    3d84:	2105      	movs	r1, #5
    3d86:	4798      	blx	r3
	{
    3d88:	e772      	b.n	3c70 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    3d8a:	2300      	movs	r3, #0
    3d8c:	2244      	movs	r2, #68	; 0x44
    3d8e:	a909      	add	r1, sp, #36	; 0x24
    3d90:	0020      	movs	r0, r4
    3d92:	4c45      	ldr	r4, [pc, #276]	; (3ea8 <m2m_ip_cb+0x2f0>)
    3d94:	47a0      	blx	r4
    3d96:	2800      	cmp	r0, #0
    3d98:	d000      	beq.n	3d9c <m2m_ip_cb+0x1e4>
    3d9a:	e769      	b.n	3c70 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    3d9c:	4b47      	ldr	r3, [pc, #284]	; (3ebc <m2m_ip_cb+0x304>)
    3d9e:	681b      	ldr	r3, [r3, #0]
    3da0:	2b00      	cmp	r3, #0
    3da2:	d100      	bne.n	3da6 <m2m_ip_cb+0x1ee>
    3da4:	e764      	b.n	3c70 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    3da6:	4b45      	ldr	r3, [pc, #276]	; (3ebc <m2m_ip_cb+0x304>)
    3da8:	681b      	ldr	r3, [r3, #0]
    3daa:	9a19      	ldr	r2, [sp, #100]	; 0x64
    3dac:	9203      	str	r2, [sp, #12]
    3dae:	0011      	movs	r1, r2
    3db0:	a809      	add	r0, sp, #36	; 0x24
    3db2:	4798      	blx	r3
    3db4:	e75c      	b.n	3c70 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    3db6:	2306      	movs	r3, #6
    3db8:	469a      	mov	sl, r3
    3dba:	e001      	b.n	3dc0 <m2m_ip_cb+0x208>
    3dbc:	2306      	movs	r3, #6
    3dbe:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    3dc0:	2300      	movs	r3, #0
    3dc2:	2210      	movs	r2, #16
    3dc4:	a905      	add	r1, sp, #20
    3dc6:	0020      	movs	r0, r4
    3dc8:	4f37      	ldr	r7, [pc, #220]	; (3ea8 <m2m_ip_cb+0x2f0>)
    3dca:	47b8      	blx	r7
    3dcc:	2800      	cmp	r0, #0
    3dce:	d000      	beq.n	3dd2 <m2m_ip_cb+0x21a>
    3dd0:	e74e      	b.n	3c70 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    3dd2:	aa05      	add	r2, sp, #20
    3dd4:	200c      	movs	r0, #12
    3dd6:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    3dd8:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    3dda:	0107      	lsls	r7, r0, #4
    3ddc:	4935      	ldr	r1, [pc, #212]	; (3eb4 <m2m_ip_cb+0x2fc>)
    3dde:	19c9      	adds	r1, r1, r7
    3de0:	2700      	movs	r7, #0
    3de2:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    3de4:	2608      	movs	r6, #8
    3de6:	5f97      	ldrsh	r7, [r2, r6]
    3de8:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    3dea:	8957      	ldrh	r7, [r2, #10]
    3dec:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    3dee:	af09      	add	r7, sp, #36	; 0x24
    3df0:	8856      	ldrh	r6, [r2, #2]
    3df2:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    3df4:	9a06      	ldr	r2, [sp, #24]
    3df6:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3df8:	88ca      	ldrh	r2, [r1, #6]
    3dfa:	b292      	uxth	r2, r2
    3dfc:	4293      	cmp	r3, r2
    3dfe:	d00c      	beq.n	3e1a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    3e00:	2d10      	cmp	r5, #16
    3e02:	d800      	bhi.n	3e06 <m2m_ip_cb+0x24e>
    3e04:	e734      	b.n	3c70 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    3e06:	2301      	movs	r3, #1
    3e08:	2200      	movs	r2, #0
    3e0a:	2100      	movs	r1, #0
    3e0c:	2000      	movs	r0, #0
    3e0e:	4c26      	ldr	r4, [pc, #152]	; (3ea8 <m2m_ip_cb+0x2f0>)
    3e10:	47a0      	blx	r4
	{
    3e12:	e72d      	b.n	3c70 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    3e14:	2309      	movs	r3, #9
    3e16:	469a      	mov	sl, r3
    3e18:	e7d2      	b.n	3dc0 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    3e1a:	4643      	mov	r3, r8
    3e1c:	2b00      	cmp	r3, #0
    3e1e:	dd01      	ble.n	3e24 <m2m_ip_cb+0x26c>
    3e20:	45a8      	cmp	r8, r5
    3e22:	db0f      	blt.n	3e44 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    3e24:	ab09      	add	r3, sp, #36	; 0x24
    3e26:	4642      	mov	r2, r8
    3e28:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    3e2a:	2300      	movs	r3, #0
    3e2c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    3e2e:	4b20      	ldr	r3, [pc, #128]	; (3eb0 <m2m_ip_cb+0x2f8>)
    3e30:	681b      	ldr	r3, [r3, #0]
    3e32:	2b00      	cmp	r3, #0
    3e34:	d100      	bne.n	3e38 <m2m_ip_cb+0x280>
    3e36:	e71b      	b.n	3c70 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    3e38:	4b1d      	ldr	r3, [pc, #116]	; (3eb0 <m2m_ip_cb+0x2f8>)
    3e3a:	681b      	ldr	r3, [r3, #0]
    3e3c:	aa09      	add	r2, sp, #36	; 0x24
    3e3e:	4651      	mov	r1, sl
    3e40:	4798      	blx	r3
    3e42:	e715      	b.n	3c70 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    3e44:	0023      	movs	r3, r4
    3e46:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    3e48:	4642      	mov	r2, r8
    3e4a:	4669      	mov	r1, sp
    3e4c:	818a      	strh	r2, [r1, #12]
    3e4e:	898a      	ldrh	r2, [r1, #12]
    3e50:	9200      	str	r2, [sp, #0]
    3e52:	4652      	mov	r2, sl
    3e54:	0039      	movs	r1, r7
    3e56:	4c1a      	ldr	r4, [pc, #104]	; (3ec0 <m2m_ip_cb+0x308>)
    3e58:	47a0      	blx	r4
    3e5a:	e709      	b.n	3c70 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3e5c:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    3e5e:	2300      	movs	r3, #0
    3e60:	2208      	movs	r2, #8
    3e62:	a909      	add	r1, sp, #36	; 0x24
    3e64:	0020      	movs	r0, r4
    3e66:	4c10      	ldr	r4, [pc, #64]	; (3ea8 <m2m_ip_cb+0x2f0>)
    3e68:	47a0      	blx	r4
    3e6a:	2800      	cmp	r0, #0
    3e6c:	d000      	beq.n	3e70 <m2m_ip_cb+0x2b8>
    3e6e:	e6ff      	b.n	3c70 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    3e70:	ab09      	add	r3, sp, #36	; 0x24
    3e72:	2000      	movs	r0, #0
    3e74:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    3e76:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    3e78:	8859      	ldrh	r1, [r3, #2]
    3e7a:	ab05      	add	r3, sp, #20
    3e7c:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3e7e:	0101      	lsls	r1, r0, #4
    3e80:	4b0c      	ldr	r3, [pc, #48]	; (3eb4 <m2m_ip_cb+0x2fc>)
    3e82:	185b      	adds	r3, r3, r1
    3e84:	88db      	ldrh	r3, [r3, #6]
    3e86:	b29b      	uxth	r3, r3
    3e88:	429a      	cmp	r2, r3
    3e8a:	d000      	beq.n	3e8e <m2m_ip_cb+0x2d6>
    3e8c:	e6f0      	b.n	3c70 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    3e8e:	4b08      	ldr	r3, [pc, #32]	; (3eb0 <m2m_ip_cb+0x2f8>)
    3e90:	681b      	ldr	r3, [r3, #0]
    3e92:	2b00      	cmp	r3, #0
    3e94:	d100      	bne.n	3e98 <m2m_ip_cb+0x2e0>
    3e96:	e6eb      	b.n	3c70 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    3e98:	4b05      	ldr	r3, [pc, #20]	; (3eb0 <m2m_ip_cb+0x2f8>)
    3e9a:	681b      	ldr	r3, [r3, #0]
    3e9c:	aa05      	add	r2, sp, #20
    3e9e:	0029      	movs	r1, r5
    3ea0:	4798      	blx	r3
	{
    3ea2:	e6e5      	b.n	3c70 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    3ea4:	2508      	movs	r5, #8
    3ea6:	e7da      	b.n	3e5e <m2m_ip_cb+0x2a6>
    3ea8:	00001e4d 	.word	0x00001e4d
    3eac:	2000101c 	.word	0x2000101c
    3eb0:	20001018 	.word	0x20001018
    3eb4:	20000f68 	.word	0x20000f68
    3eb8:	200003d6 	.word	0x200003d6
    3ebc:	20001020 	.word	0x20001020
    3ec0:	00003aa5 	.word	0x00003aa5

00003ec4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    3ec4:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    3ec6:	4b0a      	ldr	r3, [pc, #40]	; (3ef0 <socketInit+0x2c>)
    3ec8:	781b      	ldrb	r3, [r3, #0]
    3eca:	2b00      	cmp	r3, #0
    3ecc:	d000      	beq.n	3ed0 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    3ece:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    3ed0:	22b0      	movs	r2, #176	; 0xb0
    3ed2:	2100      	movs	r1, #0
    3ed4:	4807      	ldr	r0, [pc, #28]	; (3ef4 <socketInit+0x30>)
    3ed6:	4b08      	ldr	r3, [pc, #32]	; (3ef8 <socketInit+0x34>)
    3ed8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    3eda:	4908      	ldr	r1, [pc, #32]	; (3efc <socketInit+0x38>)
    3edc:	2002      	movs	r0, #2
    3ede:	4b08      	ldr	r3, [pc, #32]	; (3f00 <socketInit+0x3c>)
    3ee0:	4798      	blx	r3
		gbSocketInit	= 1;
    3ee2:	2201      	movs	r2, #1
    3ee4:	4b02      	ldr	r3, [pc, #8]	; (3ef0 <socketInit+0x2c>)
    3ee6:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    3ee8:	2200      	movs	r2, #0
    3eea:	4b06      	ldr	r3, [pc, #24]	; (3f04 <socketInit+0x40>)
    3eec:	801a      	strh	r2, [r3, #0]
}
    3eee:	e7ee      	b.n	3ece <socketInit+0xa>
    3ef0:	200003d5 	.word	0x200003d5
    3ef4:	20000f68 	.word	0x20000f68
    3ef8:	00001721 	.word	0x00001721
    3efc:	00003bb9 	.word	0x00003bb9
    3f00:	00001f35 	.word	0x00001f35
    3f04:	200003d6 	.word	0x200003d6

00003f08 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    3f08:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    3f0a:	22b0      	movs	r2, #176	; 0xb0
    3f0c:	2100      	movs	r1, #0
    3f0e:	4807      	ldr	r0, [pc, #28]	; (3f2c <socketDeinit+0x24>)
    3f10:	4b07      	ldr	r3, [pc, #28]	; (3f30 <socketDeinit+0x28>)
    3f12:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    3f14:	2100      	movs	r1, #0
    3f16:	2002      	movs	r0, #2
    3f18:	4b06      	ldr	r3, [pc, #24]	; (3f34 <socketDeinit+0x2c>)
    3f1a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    3f1c:	2300      	movs	r3, #0
    3f1e:	4a06      	ldr	r2, [pc, #24]	; (3f38 <socketDeinit+0x30>)
    3f20:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    3f22:	4a06      	ldr	r2, [pc, #24]	; (3f3c <socketDeinit+0x34>)
    3f24:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    3f26:	4a06      	ldr	r2, [pc, #24]	; (3f40 <socketDeinit+0x38>)
    3f28:	7013      	strb	r3, [r2, #0]
}
    3f2a:	bd10      	pop	{r4, pc}
    3f2c:	20000f68 	.word	0x20000f68
    3f30:	00001721 	.word	0x00001721
    3f34:	00001f35 	.word	0x00001f35
    3f38:	20001018 	.word	0x20001018
    3f3c:	20001020 	.word	0x20001020
    3f40:	200003d5 	.word	0x200003d5

00003f44 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    3f44:	4b02      	ldr	r3, [pc, #8]	; (3f50 <registerSocketCallback+0xc>)
    3f46:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    3f48:	4b02      	ldr	r3, [pc, #8]	; (3f54 <registerSocketCallback+0x10>)
    3f4a:	6019      	str	r1, [r3, #0]
}
    3f4c:	4770      	bx	lr
    3f4e:	46c0      	nop			; (mov r8, r8)
    3f50:	20001018 	.word	0x20001018
    3f54:	20001020 	.word	0x20001020

00003f58 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    3f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f5a:	46d6      	mov	lr, sl
    3f5c:	4647      	mov	r7, r8
    3f5e:	b580      	push	{r7, lr}
    3f60:	b089      	sub	sp, #36	; 0x24
    3f62:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    3f64:	2802      	cmp	r0, #2
    3f66:	d000      	beq.n	3f6a <socket+0x12>
    3f68:	e09c      	b.n	40a4 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    3f6a:	2901      	cmp	r1, #1
    3f6c:	d00a      	beq.n	3f84 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    3f6e:	2902      	cmp	r1, #2
    3f70:	d100      	bne.n	3f74 <socket+0x1c>
    3f72:	e070      	b.n	4056 <socket+0xfe>
	SOCKET					sock = -1;
    3f74:	2501      	movs	r5, #1
    3f76:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    3f78:	0028      	movs	r0, r5
    3f7a:	b009      	add	sp, #36	; 0x24
    3f7c:	bc0c      	pop	{r2, r3}
    3f7e:	4690      	mov	r8, r2
    3f80:	469a      	mov	sl, r3
    3f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    3f84:	4c49      	ldr	r4, [pc, #292]	; (40ac <socket+0x154>)
    3f86:	7827      	ldrb	r7, [r4, #0]
    3f88:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3f8a:	7826      	ldrb	r6, [r4, #0]
    3f8c:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3f8e:	7820      	ldrb	r0, [r4, #0]
    3f90:	3001      	adds	r0, #1
    3f92:	3106      	adds	r1, #6
    3f94:	4b46      	ldr	r3, [pc, #280]	; (40b0 <socket+0x158>)
    3f96:	4798      	blx	r3
    3f98:	b2c9      	uxtb	r1, r1
    3f9a:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    3f9c:	0132      	lsls	r2, r6, #4
    3f9e:	4b45      	ldr	r3, [pc, #276]	; (40b4 <socket+0x15c>)
    3fa0:	189b      	adds	r3, r3, r2
    3fa2:	7a9b      	ldrb	r3, [r3, #10]
    3fa4:	2506      	movs	r5, #6
    3fa6:	2b00      	cmp	r3, #0
    3fa8:	d018      	beq.n	3fdc <socket+0x84>
				u8SockID	= u8NextTcpSock;
    3faa:	4e40      	ldr	r6, [pc, #256]	; (40ac <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3fac:	4b40      	ldr	r3, [pc, #256]	; (40b0 <socket+0x158>)
    3fae:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    3fb0:	4b40      	ldr	r3, [pc, #256]	; (40b4 <socket+0x15c>)
    3fb2:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    3fb4:	7837      	ldrb	r7, [r6, #0]
    3fb6:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3fb8:	7834      	ldrb	r4, [r6, #0]
    3fba:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3fbc:	7830      	ldrb	r0, [r6, #0]
    3fbe:	3001      	adds	r0, #1
    3fc0:	2107      	movs	r1, #7
    3fc2:	47d0      	blx	sl
    3fc4:	b2c9      	uxtb	r1, r1
    3fc6:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    3fc8:	0123      	lsls	r3, r4, #4
    3fca:	4443      	add	r3, r8
    3fcc:	7a9b      	ldrb	r3, [r3, #10]
    3fce:	2b00      	cmp	r3, #0
    3fd0:	d007      	beq.n	3fe2 <socket+0x8a>
    3fd2:	3d01      	subs	r5, #1
    3fd4:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    3fd6:	2d00      	cmp	r5, #0
    3fd8:	d1ec      	bne.n	3fb4 <socket+0x5c>
    3fda:	e7cb      	b.n	3f74 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3fdc:	4b35      	ldr	r3, [pc, #212]	; (40b4 <socket+0x15c>)
    3fde:	18d4      	adds	r4, r2, r3
    3fe0:	e002      	b.n	3fe8 <socket+0x90>
    3fe2:	0124      	lsls	r4, r4, #4
    3fe4:	4b33      	ldr	r3, [pc, #204]	; (40b4 <socket+0x15c>)
    3fe6:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    3fe8:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    3fea:	2d00      	cmp	r5, #0
    3fec:	dbc4      	blt.n	3f78 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    3fee:	2210      	movs	r2, #16
    3ff0:	2100      	movs	r1, #0
    3ff2:	0020      	movs	r0, r4
    3ff4:	4b30      	ldr	r3, [pc, #192]	; (40b8 <socket+0x160>)
    3ff6:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    3ff8:	2301      	movs	r3, #1
    3ffa:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    3ffc:	4a2f      	ldr	r2, [pc, #188]	; (40bc <socket+0x164>)
    3ffe:	8813      	ldrh	r3, [r2, #0]
    4000:	3301      	adds	r3, #1
    4002:	b29b      	uxth	r3, r3
    4004:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    4006:	8813      	ldrh	r3, [r2, #0]
    4008:	b29b      	uxth	r3, r3
    400a:	2b00      	cmp	r3, #0
    400c:	d103      	bne.n	4016 <socket+0xbe>
				++gu16SessionID;
    400e:	8813      	ldrh	r3, [r2, #0]
    4010:	3301      	adds	r3, #1
    4012:	b29b      	uxth	r3, r3
    4014:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    4016:	4e29      	ldr	r6, [pc, #164]	; (40bc <socket+0x164>)
    4018:	8833      	ldrh	r3, [r6, #0]
    401a:	b29b      	uxth	r3, r3
    401c:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    401e:	4828      	ldr	r0, [pc, #160]	; (40c0 <socket+0x168>)
    4020:	4f28      	ldr	r7, [pc, #160]	; (40c4 <socket+0x16c>)
    4022:	47b8      	blx	r7
    4024:	8832      	ldrh	r2, [r6, #0]
    4026:	b292      	uxth	r2, r2
    4028:	0029      	movs	r1, r5
    402a:	4827      	ldr	r0, [pc, #156]	; (40c8 <socket+0x170>)
    402c:	47b8      	blx	r7
    402e:	200d      	movs	r0, #13
    4030:	4b26      	ldr	r3, [pc, #152]	; (40cc <socket+0x174>)
    4032:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    4034:	9b05      	ldr	r3, [sp, #20]
    4036:	07db      	lsls	r3, r3, #31
    4038:	d59e      	bpl.n	3f78 <socket+0x20>
				strSSLCreate.sslSock = sock;
    403a:	aa07      	add	r2, sp, #28
    403c:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    403e:	2321      	movs	r3, #33	; 0x21
    4040:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    4042:	2300      	movs	r3, #0
    4044:	9302      	str	r3, [sp, #8]
    4046:	9301      	str	r3, [sp, #4]
    4048:	9300      	str	r3, [sp, #0]
    404a:	3304      	adds	r3, #4
    404c:	2150      	movs	r1, #80	; 0x50
    404e:	2002      	movs	r0, #2
    4050:	4c1f      	ldr	r4, [pc, #124]	; (40d0 <socket+0x178>)
    4052:	47a0      	blx	r4
    4054:	e790      	b.n	3f78 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    4056:	4b1f      	ldr	r3, [pc, #124]	; (40d4 <socket+0x17c>)
    4058:	781d      	ldrb	r5, [r3, #0]
    405a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    405c:	781c      	ldrb	r4, [r3, #0]
    405e:	0124      	lsls	r4, r4, #4
    4060:	4a1d      	ldr	r2, [pc, #116]	; (40d8 <socket+0x180>)
    4062:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    4064:	7819      	ldrb	r1, [r3, #0]
    4066:	3101      	adds	r1, #1
    4068:	2203      	movs	r2, #3
    406a:	400a      	ands	r2, r1
    406c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    406e:	7aa3      	ldrb	r3, [r4, #10]
    4070:	2b00      	cmp	r3, #0
    4072:	d014      	beq.n	409e <socket+0x146>
    4074:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    4076:	4917      	ldr	r1, [pc, #92]	; (40d4 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    4078:	4f17      	ldr	r7, [pc, #92]	; (40d8 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    407a:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    407c:	780d      	ldrb	r5, [r1, #0]
    407e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    4080:	780c      	ldrb	r4, [r1, #0]
    4082:	0124      	lsls	r4, r4, #4
    4084:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    4086:	780b      	ldrb	r3, [r1, #0]
    4088:	3301      	adds	r3, #1
    408a:	4003      	ands	r3, r0
    408c:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    408e:	7aa3      	ldrb	r3, [r4, #10]
    4090:	2b00      	cmp	r3, #0
    4092:	d004      	beq.n	409e <socket+0x146>
    4094:	3a01      	subs	r2, #1
    4096:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    4098:	2a00      	cmp	r2, #0
    409a:	d1ef      	bne.n	407c <socket+0x124>
    409c:	e76a      	b.n	3f74 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    409e:	3507      	adds	r5, #7
    40a0:	b26d      	sxtb	r5, r5
					break;
    40a2:	e7a2      	b.n	3fea <socket+0x92>
	SOCKET					sock = -1;
    40a4:	2501      	movs	r5, #1
    40a6:	426d      	negs	r5, r5
    40a8:	e766      	b.n	3f78 <socket+0x20>
    40aa:	46c0      	nop			; (mov r8, r8)
    40ac:	200003d8 	.word	0x200003d8
    40b0:	0000bc9d 	.word	0x0000bc9d
    40b4:	20000f68 	.word	0x20000f68
    40b8:	00001721 	.word	0x00001721
    40bc:	200003d6 	.word	0x200003d6
    40c0:	0000d940 	.word	0x0000d940
    40c4:	0000bf11 	.word	0x0000bf11
    40c8:	0000e3d0 	.word	0x0000e3d0
    40cc:	0000bf45 	.word	0x0000bf45
    40d0:	00001835 	.word	0x00001835
    40d4:	200003d9 	.word	0x200003d9
    40d8:	20000fd8 	.word	0x20000fd8

000040dc <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    40dc:	b570      	push	{r4, r5, r6, lr}
    40de:	b088      	sub	sp, #32
    40e0:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    40e2:	db30      	blt.n	4146 <connect+0x6a>
    40e4:	2900      	cmp	r1, #0
    40e6:	d031      	beq.n	414c <connect+0x70>
    40e8:	0100      	lsls	r0, r0, #4
    40ea:	4b1d      	ldr	r3, [pc, #116]	; (4160 <connect+0x84>)
    40ec:	181b      	adds	r3, r3, r0
    40ee:	7a9b      	ldrb	r3, [r3, #10]
    40f0:	2b01      	cmp	r3, #1
    40f2:	d12e      	bne.n	4152 <connect+0x76>
    40f4:	2a00      	cmp	r2, #0
    40f6:	d02f      	beq.n	4158 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    40f8:	4b19      	ldr	r3, [pc, #100]	; (4160 <connect+0x84>)
    40fa:	181b      	adds	r3, r3, r0
    40fc:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    40fe:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    4100:	07db      	lsls	r3, r3, #31
    4102:	d505      	bpl.n	4110 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    4104:	4b16      	ldr	r3, [pc, #88]	; (4160 <connect+0x84>)
    4106:	181b      	adds	r3, r3, r0
    4108:	7ada      	ldrb	r2, [r3, #11]
    410a:	ab05      	add	r3, sp, #20
    410c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    410e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    4110:	ad05      	add	r5, sp, #20
    4112:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    4114:	2208      	movs	r2, #8
    4116:	0028      	movs	r0, r5
    4118:	4b12      	ldr	r3, [pc, #72]	; (4164 <connect+0x88>)
    411a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    411c:	0124      	lsls	r4, r4, #4
    411e:	4b10      	ldr	r3, [pc, #64]	; (4160 <connect+0x84>)
    4120:	191c      	adds	r4, r3, r4
    4122:	88e3      	ldrh	r3, [r4, #6]
    4124:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    4126:	2300      	movs	r3, #0
    4128:	9302      	str	r3, [sp, #8]
    412a:	9301      	str	r3, [sp, #4]
    412c:	9300      	str	r3, [sp, #0]
    412e:	330c      	adds	r3, #12
    4130:	002a      	movs	r2, r5
    4132:	0031      	movs	r1, r6
    4134:	2002      	movs	r0, #2
    4136:	4c0c      	ldr	r4, [pc, #48]	; (4168 <connect+0x8c>)
    4138:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    413a:	2800      	cmp	r0, #0
    413c:	d001      	beq.n	4142 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    413e:	2009      	movs	r0, #9
    4140:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    4142:	b008      	add	sp, #32
    4144:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    4146:	2006      	movs	r0, #6
    4148:	4240      	negs	r0, r0
    414a:	e7fa      	b.n	4142 <connect+0x66>
    414c:	2006      	movs	r0, #6
    414e:	4240      	negs	r0, r0
    4150:	e7f7      	b.n	4142 <connect+0x66>
    4152:	2006      	movs	r0, #6
    4154:	4240      	negs	r0, r0
    4156:	e7f4      	b.n	4142 <connect+0x66>
    4158:	2006      	movs	r0, #6
    415a:	4240      	negs	r0, r0
    415c:	e7f1      	b.n	4142 <connect+0x66>
    415e:	46c0      	nop			; (mov r8, r8)
    4160:	20000f68 	.word	0x20000f68
    4164:	0000170d 	.word	0x0000170d
    4168:	00001835 	.word	0x00001835

0000416c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    416c:	b530      	push	{r4, r5, lr}
    416e:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    4170:	2800      	cmp	r0, #0
    4172:	db36      	blt.n	41e2 <send+0x76>
    4174:	2900      	cmp	r1, #0
    4176:	d037      	beq.n	41e8 <send+0x7c>
    4178:	23af      	movs	r3, #175	; 0xaf
    417a:	00db      	lsls	r3, r3, #3
    417c:	429a      	cmp	r2, r3
    417e:	d836      	bhi.n	41ee <send+0x82>
    4180:	0104      	lsls	r4, r0, #4
    4182:	4b1e      	ldr	r3, [pc, #120]	; (41fc <send+0x90>)
    4184:	191b      	adds	r3, r3, r4
    4186:	7a9b      	ldrb	r3, [r3, #10]
    4188:	2b01      	cmp	r3, #1
    418a:	d133      	bne.n	41f4 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    418c:	ab04      	add	r3, sp, #16
    418e:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    4190:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    4192:	0025      	movs	r5, r4
    4194:	4c19      	ldr	r4, [pc, #100]	; (41fc <send+0x90>)
    4196:	1964      	adds	r4, r4, r5
    4198:	88e4      	ldrh	r4, [r4, #6]
    419a:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    419c:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    419e:	2806      	cmp	r0, #6
    41a0:	dd00      	ble.n	41a4 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    41a2:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    41a4:	0104      	lsls	r4, r0, #4
    41a6:	4b15      	ldr	r3, [pc, #84]	; (41fc <send+0x90>)
    41a8:	191b      	adds	r3, r3, r4
    41aa:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    41ac:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    41ae:	07e4      	lsls	r4, r4, #31
    41b0:	d505      	bpl.n	41be <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    41b2:	0100      	lsls	r0, r0, #4
    41b4:	4b11      	ldr	r3, [pc, #68]	; (41fc <send+0x90>)
    41b6:	1818      	adds	r0, r3, r0
    41b8:	8905      	ldrh	r5, [r0, #8]
    41ba:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    41bc:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    41be:	2080      	movs	r0, #128	; 0x80
    41c0:	4318      	orrs	r0, r3
    41c2:	9502      	str	r5, [sp, #8]
    41c4:	9201      	str	r2, [sp, #4]
    41c6:	9100      	str	r1, [sp, #0]
    41c8:	2310      	movs	r3, #16
    41ca:	aa04      	add	r2, sp, #16
    41cc:	0001      	movs	r1, r0
    41ce:	2002      	movs	r0, #2
    41d0:	4c0b      	ldr	r4, [pc, #44]	; (4200 <send+0x94>)
    41d2:	47a0      	blx	r4
    41d4:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    41d6:	2800      	cmp	r0, #0
    41d8:	d000      	beq.n	41dc <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    41da:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    41dc:	0018      	movs	r0, r3
    41de:	b009      	add	sp, #36	; 0x24
    41e0:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    41e2:	2306      	movs	r3, #6
    41e4:	425b      	negs	r3, r3
    41e6:	e7f9      	b.n	41dc <send+0x70>
    41e8:	2306      	movs	r3, #6
    41ea:	425b      	negs	r3, r3
    41ec:	e7f6      	b.n	41dc <send+0x70>
    41ee:	2306      	movs	r3, #6
    41f0:	425b      	negs	r3, r3
    41f2:	e7f3      	b.n	41dc <send+0x70>
    41f4:	2306      	movs	r3, #6
    41f6:	425b      	negs	r3, r3
    41f8:	e7f0      	b.n	41dc <send+0x70>
    41fa:	46c0      	nop			; (mov r8, r8)
    41fc:	20000f68 	.word	0x20000f68
    4200:	00001835 	.word	0x00001835

00004204 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    4204:	b530      	push	{r4, r5, lr}
    4206:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    4208:	2800      	cmp	r0, #0
    420a:	db34      	blt.n	4276 <recv+0x72>
    420c:	2900      	cmp	r1, #0
    420e:	d035      	beq.n	427c <recv+0x78>
    4210:	2a00      	cmp	r2, #0
    4212:	d036      	beq.n	4282 <recv+0x7e>
    4214:	0105      	lsls	r5, r0, #4
    4216:	4c1e      	ldr	r4, [pc, #120]	; (4290 <recv+0x8c>)
    4218:	1964      	adds	r4, r4, r5
    421a:	7aa4      	ldrb	r4, [r4, #10]
    421c:	2c01      	cmp	r4, #1
    421e:	d133      	bne.n	4288 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    4220:	4c1b      	ldr	r4, [pc, #108]	; (4290 <recv+0x8c>)
    4222:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    4224:	1964      	adds	r4, r4, r5
    4226:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    4228:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    422a:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    422c:	2900      	cmp	r1, #0
    422e:	d11d      	bne.n	426c <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    4230:	2101      	movs	r1, #1
    4232:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4234:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    4236:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4238:	07d2      	lsls	r2, r2, #31
    423a:	d500      	bpl.n	423e <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    423c:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    423e:	2b00      	cmp	r3, #0
    4240:	d117      	bne.n	4272 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    4242:	3b01      	subs	r3, #1
    4244:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    4246:	aa04      	add	r2, sp, #16
    4248:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    424a:	0100      	lsls	r0, r0, #4
    424c:	4b10      	ldr	r3, [pc, #64]	; (4290 <recv+0x8c>)
    424e:	1818      	adds	r0, r3, r0
    4250:	88c3      	ldrh	r3, [r0, #6]
    4252:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    4254:	2300      	movs	r3, #0
    4256:	9302      	str	r3, [sp, #8]
    4258:	9301      	str	r3, [sp, #4]
    425a:	9300      	str	r3, [sp, #0]
    425c:	3308      	adds	r3, #8
    425e:	2002      	movs	r0, #2
    4260:	4c0c      	ldr	r4, [pc, #48]	; (4294 <recv+0x90>)
    4262:	47a0      	blx	r4
    4264:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    4266:	2800      	cmp	r0, #0
    4268:	d000      	beq.n	426c <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    426a:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    426c:	0010      	movs	r0, r2
    426e:	b007      	add	sp, #28
    4270:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    4272:	9304      	str	r3, [sp, #16]
    4274:	e7e7      	b.n	4246 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    4276:	2206      	movs	r2, #6
    4278:	4252      	negs	r2, r2
    427a:	e7f7      	b.n	426c <recv+0x68>
    427c:	2206      	movs	r2, #6
    427e:	4252      	negs	r2, r2
    4280:	e7f4      	b.n	426c <recv+0x68>
    4282:	2206      	movs	r2, #6
    4284:	4252      	negs	r2, r2
    4286:	e7f1      	b.n	426c <recv+0x68>
    4288:	2206      	movs	r2, #6
    428a:	4252      	negs	r2, r2
    428c:	e7ee      	b.n	426c <recv+0x68>
    428e:	46c0      	nop			; (mov r8, r8)
    4290:	20000f68 	.word	0x20000f68
    4294:	00001835 	.word	0x00001835

00004298 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    4298:	b530      	push	{r4, r5, lr}
    429a:	b087      	sub	sp, #28
    429c:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    429e:	481e      	ldr	r0, [pc, #120]	; (4318 <close+0x80>)
    42a0:	4d1e      	ldr	r5, [pc, #120]	; (431c <close+0x84>)
    42a2:	47a8      	blx	r5
    42a4:	0021      	movs	r1, r4
    42a6:	481e      	ldr	r0, [pc, #120]	; (4320 <close+0x88>)
    42a8:	47a8      	blx	r5
    42aa:	200d      	movs	r0, #13
    42ac:	4b1d      	ldr	r3, [pc, #116]	; (4324 <close+0x8c>)
    42ae:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    42b0:	2c00      	cmp	r4, #0
    42b2:	db2a      	blt.n	430a <close+0x72>
    42b4:	0122      	lsls	r2, r4, #4
    42b6:	4b1c      	ldr	r3, [pc, #112]	; (4328 <close+0x90>)
    42b8:	189b      	adds	r3, r3, r2
    42ba:	7a9b      	ldrb	r3, [r3, #10]
    42bc:	2b01      	cmp	r3, #1
    42be:	d127      	bne.n	4310 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    42c0:	a905      	add	r1, sp, #20
    42c2:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    42c4:	4b18      	ldr	r3, [pc, #96]	; (4328 <close+0x90>)
    42c6:	189b      	adds	r3, r3, r2
    42c8:	88da      	ldrh	r2, [r3, #6]
    42ca:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    42cc:	2200      	movs	r2, #0
    42ce:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    42d0:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    42d2:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    42d4:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    42d6:	07db      	lsls	r3, r3, #31
    42d8:	d500      	bpl.n	42dc <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    42da:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    42dc:	2300      	movs	r3, #0
    42de:	9302      	str	r3, [sp, #8]
    42e0:	9301      	str	r3, [sp, #4]
    42e2:	9300      	str	r3, [sp, #0]
    42e4:	3304      	adds	r3, #4
    42e6:	aa05      	add	r2, sp, #20
    42e8:	2002      	movs	r0, #2
    42ea:	4d10      	ldr	r5, [pc, #64]	; (432c <close+0x94>)
    42ec:	47a8      	blx	r5
    42ee:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    42f0:	d001      	beq.n	42f6 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    42f2:	2509      	movs	r5, #9
    42f4:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    42f6:	0124      	lsls	r4, r4, #4
    42f8:	480b      	ldr	r0, [pc, #44]	; (4328 <close+0x90>)
    42fa:	1820      	adds	r0, r4, r0
    42fc:	2210      	movs	r2, #16
    42fe:	2100      	movs	r1, #0
    4300:	4b0b      	ldr	r3, [pc, #44]	; (4330 <close+0x98>)
    4302:	4798      	blx	r3
	}
	return s8Ret;
}
    4304:	0028      	movs	r0, r5
    4306:	b007      	add	sp, #28
    4308:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    430a:	2506      	movs	r5, #6
    430c:	426d      	negs	r5, r5
    430e:	e7f9      	b.n	4304 <close+0x6c>
    4310:	2506      	movs	r5, #6
    4312:	426d      	negs	r5, r5
    4314:	e7f6      	b.n	4304 <close+0x6c>
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	0000d940 	.word	0x0000d940
    431c:	0000bf11 	.word	0x0000bf11
    4320:	0000e3b8 	.word	0x0000e3b8
    4324:	0000bf45 	.word	0x0000bf45
    4328:	20000f68 	.word	0x20000f68
    432c:	00001835 	.word	0x00001835
    4330:	00001721 	.word	0x00001721

00004334 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    4334:	b570      	push	{r4, r5, r6, lr}
    4336:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    4338:	2300      	movs	r3, #0
    433a:	9301      	str	r3, [sp, #4]
    433c:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    433e:	2100      	movs	r1, #0
    4340:	7802      	ldrb	r2, [r0, #0]
    4342:	1c44      	adds	r4, r0, #1
    4344:	3005      	adds	r0, #5
    4346:	000b      	movs	r3, r1
    4348:	e009      	b.n	435e <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    434a:	009d      	lsls	r5, r3, #2
    434c:	195b      	adds	r3, r3, r5
    434e:	005b      	lsls	r3, r3, #1
    4350:	189b      	adds	r3, r3, r2
    4352:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    4354:	0022      	movs	r2, r4
    4356:	3401      	adds	r4, #1
			if(j > 4)
    4358:	42a0      	cmp	r0, r4
    435a:	d00a      	beq.n	4372 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    435c:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    435e:	2a2e      	cmp	r2, #46	; 0x2e
    4360:	d00a      	beq.n	4378 <nmi_inet_addr+0x44>
    4362:	2a00      	cmp	r2, #0
    4364:	d00c      	beq.n	4380 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    4366:	3a30      	subs	r2, #48	; 0x30
    4368:	b2d2      	uxtb	r2, r2
    436a:	2a09      	cmp	r2, #9
    436c:	d9ed      	bls.n	434a <nmi_inet_addr+0x16>
				return 0;
    436e:	2000      	movs	r0, #0
    4370:	e000      	b.n	4374 <nmi_inet_addr+0x40>
				return 0;
    4372:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    4374:	b002      	add	sp, #8
    4376:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    4378:	466a      	mov	r2, sp
    437a:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    437c:	0020      	movs	r0, r4
    437e:	e002      	b.n	4386 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    4380:	466a      	mov	r2, sp
    4382:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    4384:	0020      	movs	r0, r4
    4386:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    4388:	2e04      	cmp	r6, #4
    438a:	d1d9      	bne.n	4340 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    438c:	2204      	movs	r2, #4
    438e:	4669      	mov	r1, sp
    4390:	a801      	add	r0, sp, #4
    4392:	4b02      	ldr	r3, [pc, #8]	; (439c <nmi_inet_addr+0x68>)
    4394:	4798      	blx	r3
	return u32IP;
    4396:	9801      	ldr	r0, [sp, #4]
    4398:	e7ec      	b.n	4374 <nmi_inet_addr+0x40>
    439a:	46c0      	nop			; (mov r8, r8)
    439c:	0000170d 	.word	0x0000170d

000043a0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    43a0:	b510      	push	{r4, lr}
    43a2:	b084      	sub	sp, #16
    43a4:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    43a6:	4b0b      	ldr	r3, [pc, #44]	; (43d4 <gethostbyname+0x34>)
    43a8:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    43aa:	b2c3      	uxtb	r3, r0
    43ac:	2b40      	cmp	r3, #64	; 0x40
    43ae:	d80d      	bhi.n	43cc <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    43b0:	23ff      	movs	r3, #255	; 0xff
    43b2:	4003      	ands	r3, r0
    43b4:	3301      	adds	r3, #1
    43b6:	2200      	movs	r2, #0
    43b8:	9202      	str	r2, [sp, #8]
    43ba:	9201      	str	r2, [sp, #4]
    43bc:	9200      	str	r2, [sp, #0]
    43be:	0022      	movs	r2, r4
    43c0:	214a      	movs	r1, #74	; 0x4a
    43c2:	2002      	movs	r0, #2
    43c4:	4c04      	ldr	r4, [pc, #16]	; (43d8 <gethostbyname+0x38>)
    43c6:	47a0      	blx	r4
	}
	return s8Err;
}
    43c8:	b004      	add	sp, #16
    43ca:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    43cc:	2006      	movs	r0, #6
    43ce:	4240      	negs	r0, r0
    43d0:	e7fa      	b.n	43c8 <gethostbyname+0x28>
    43d2:	46c0      	nop			; (mov r8, r8)
    43d4:	00001731 	.word	0x00001731
    43d8:	00001835 	.word	0x00001835

000043dc <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    43dc:	b570      	push	{r4, r5, r6, lr}
    43de:	b082      	sub	sp, #8
    43e0:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    43e2:	4b2a      	ldr	r3, [pc, #168]	; (448c <spi_flash_enable+0xb0>)
    43e4:	4798      	blx	r3
    43e6:	0500      	lsls	r0, r0, #20
    43e8:	0d00      	lsrs	r0, r0, #20
    43ea:	4b29      	ldr	r3, [pc, #164]	; (4490 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    43ec:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    43ee:	4298      	cmp	r0, r3
    43f0:	d802      	bhi.n	43f8 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    43f2:	0028      	movs	r0, r5
    43f4:	b002      	add	sp, #8
    43f6:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    43f8:	a901      	add	r1, sp, #4
    43fa:	4826      	ldr	r0, [pc, #152]	; (4494 <spi_flash_enable+0xb8>)
    43fc:	4b26      	ldr	r3, [pc, #152]	; (4498 <spi_flash_enable+0xbc>)
    43fe:	4798      	blx	r3
    4400:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    4402:	d1f6      	bne.n	43f2 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    4404:	4b25      	ldr	r3, [pc, #148]	; (449c <spi_flash_enable+0xc0>)
    4406:	9a01      	ldr	r2, [sp, #4]
    4408:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    440a:	4925      	ldr	r1, [pc, #148]	; (44a0 <spi_flash_enable+0xc4>)
    440c:	4319      	orrs	r1, r3
    440e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    4410:	4820      	ldr	r0, [pc, #128]	; (4494 <spi_flash_enable+0xb8>)
    4412:	4b24      	ldr	r3, [pc, #144]	; (44a4 <spi_flash_enable+0xc8>)
    4414:	4798      	blx	r3
		if(enable) {
    4416:	2c00      	cmp	r4, #0
    4418:	d020      	beq.n	445c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    441a:	2100      	movs	r1, #0
    441c:	4822      	ldr	r0, [pc, #136]	; (44a8 <spi_flash_enable+0xcc>)
    441e:	4c21      	ldr	r4, [pc, #132]	; (44a4 <spi_flash_enable+0xc8>)
    4420:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    4422:	21ab      	movs	r1, #171	; 0xab
    4424:	4821      	ldr	r0, [pc, #132]	; (44ac <spi_flash_enable+0xd0>)
    4426:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    4428:	2101      	movs	r1, #1
    442a:	4821      	ldr	r0, [pc, #132]	; (44b0 <spi_flash_enable+0xd4>)
    442c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    442e:	2100      	movs	r1, #0
    4430:	4820      	ldr	r0, [pc, #128]	; (44b4 <spi_flash_enable+0xd8>)
    4432:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    4434:	2181      	movs	r1, #129	; 0x81
    4436:	4820      	ldr	r0, [pc, #128]	; (44b8 <spi_flash_enable+0xdc>)
    4438:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    443a:	4e20      	ldr	r6, [pc, #128]	; (44bc <spi_flash_enable+0xe0>)
    443c:	4c20      	ldr	r4, [pc, #128]	; (44c0 <spi_flash_enable+0xe4>)
    443e:	0030      	movs	r0, r6
    4440:	47a0      	blx	r4
    4442:	2801      	cmp	r0, #1
    4444:	d1fb      	bne.n	443e <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    4446:	4b15      	ldr	r3, [pc, #84]	; (449c <spi_flash_enable+0xc0>)
    4448:	9a01      	ldr	r2, [sp, #4]
    444a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    444c:	2180      	movs	r1, #128	; 0x80
    444e:	0249      	lsls	r1, r1, #9
    4450:	4319      	orrs	r1, r3
    4452:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    4454:	480f      	ldr	r0, [pc, #60]	; (4494 <spi_flash_enable+0xb8>)
    4456:	4b13      	ldr	r3, [pc, #76]	; (44a4 <spi_flash_enable+0xc8>)
    4458:	4798      	blx	r3
    445a:	e7ca      	b.n	43f2 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    445c:	2100      	movs	r1, #0
    445e:	4812      	ldr	r0, [pc, #72]	; (44a8 <spi_flash_enable+0xcc>)
    4460:	4c10      	ldr	r4, [pc, #64]	; (44a4 <spi_flash_enable+0xc8>)
    4462:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    4464:	21b9      	movs	r1, #185	; 0xb9
    4466:	4811      	ldr	r0, [pc, #68]	; (44ac <spi_flash_enable+0xd0>)
    4468:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    446a:	2101      	movs	r1, #1
    446c:	4810      	ldr	r0, [pc, #64]	; (44b0 <spi_flash_enable+0xd4>)
    446e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    4470:	2100      	movs	r1, #0
    4472:	4810      	ldr	r0, [pc, #64]	; (44b4 <spi_flash_enable+0xd8>)
    4474:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    4476:	2181      	movs	r1, #129	; 0x81
    4478:	480f      	ldr	r0, [pc, #60]	; (44b8 <spi_flash_enable+0xdc>)
    447a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    447c:	4e0f      	ldr	r6, [pc, #60]	; (44bc <spi_flash_enable+0xe0>)
    447e:	4c10      	ldr	r4, [pc, #64]	; (44c0 <spi_flash_enable+0xe4>)
    4480:	0030      	movs	r0, r6
    4482:	47a0      	blx	r4
    4484:	2801      	cmp	r0, #1
    4486:	d1fb      	bne.n	4480 <spi_flash_enable+0xa4>
    4488:	e7dd      	b.n	4446 <spi_flash_enable+0x6a>
    448a:	46c0      	nop			; (mov r8, r8)
    448c:	00002721 	.word	0x00002721
    4490:	0000039f 	.word	0x0000039f
    4494:	00001410 	.word	0x00001410
    4498:	00002b71 	.word	0x00002b71
    449c:	f8888fff 	.word	0xf8888fff
    44a0:	01111000 	.word	0x01111000
    44a4:	00002b7d 	.word	0x00002b7d
    44a8:	00010208 	.word	0x00010208
    44ac:	0001020c 	.word	0x0001020c
    44b0:	00010214 	.word	0x00010214
    44b4:	0001021c 	.word	0x0001021c
    44b8:	00010204 	.word	0x00010204
    44bc:	00010218 	.word	0x00010218
    44c0:	00002b65 	.word	0x00002b65

000044c4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    44c4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    44c6:	2301      	movs	r3, #1
    44c8:	2800      	cmp	r0, #0
    44ca:	d001      	beq.n	44d0 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    44cc:	0018      	movs	r0, r3
    44ce:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    44d0:	4b01      	ldr	r3, [pc, #4]	; (44d8 <mem_test_unit_ready+0x14>)
    44d2:	4798      	blx	r3
    44d4:	0003      	movs	r3, r0
    44d6:	e7f9      	b.n	44cc <mem_test_unit_ready+0x8>
    44d8:	00000a81 	.word	0x00000a81

000044dc <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    44dc:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    44de:	2301      	movs	r3, #1
    44e0:	2800      	cmp	r0, #0
    44e2:	d001      	beq.n	44e8 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    44e4:	0018      	movs	r0, r3
    44e6:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    44e8:	0008      	movs	r0, r1
    44ea:	4b02      	ldr	r3, [pc, #8]	; (44f4 <mem_read_capacity+0x18>)
    44ec:	4798      	blx	r3
    44ee:	0003      	movs	r3, r0
    44f0:	e7f8      	b.n	44e4 <mem_read_capacity+0x8>
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	00000ab1 	.word	0x00000ab1

000044f8 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    44f8:	4243      	negs	r3, r0
    44fa:	4158      	adcs	r0, r3
    44fc:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    44fe:	4770      	bx	lr

00004500 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    4500:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    4502:	2301      	movs	r3, #1
    4504:	2800      	cmp	r0, #0
    4506:	d001      	beq.n	450c <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    4508:	0018      	movs	r0, r3
    450a:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    450c:	4b01      	ldr	r3, [pc, #4]	; (4514 <mem_wr_protect+0x14>)
    450e:	4798      	blx	r3
    4510:	0003      	movs	r3, r0
    4512:	e7f9      	b.n	4508 <mem_wr_protect+0x8>
    4514:	00000ac1 	.word	0x00000ac1

00004518 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    4518:	b510      	push	{r4, lr}
    451a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    451c:	2301      	movs	r3, #1
    451e:	2800      	cmp	r0, #0
    4520:	d001      	beq.n	4526 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    4522:	0018      	movs	r0, r3
    4524:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    4526:	0011      	movs	r1, r2
    4528:	0020      	movs	r0, r4
    452a:	4b02      	ldr	r3, [pc, #8]	; (4534 <memory_2_ram+0x1c>)
    452c:	4798      	blx	r3
    452e:	0003      	movs	r3, r0
    4530:	e7f7      	b.n	4522 <memory_2_ram+0xa>
    4532:	46c0      	nop			; (mov r8, r8)
    4534:	00000b15 	.word	0x00000b15

00004538 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    4538:	b510      	push	{r4, lr}
    453a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    453c:	2301      	movs	r3, #1
    453e:	2800      	cmp	r0, #0
    4540:	d001      	beq.n	4546 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    4542:	0018      	movs	r0, r3
    4544:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    4546:	0011      	movs	r1, r2
    4548:	0020      	movs	r0, r4
    454a:	4b02      	ldr	r3, [pc, #8]	; (4554 <ram_2_memory+0x1c>)
    454c:	4798      	blx	r3
    454e:	0003      	movs	r3, r0
    4550:	e7f7      	b.n	4542 <ram_2_memory+0xa>
    4552:	46c0      	nop			; (mov r8, r8)
    4554:	00000b6d 	.word	0x00000b6d

00004558 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4558:	4b0c      	ldr	r3, [pc, #48]	; (458c <cpu_irq_enter_critical+0x34>)
    455a:	681b      	ldr	r3, [r3, #0]
    455c:	2b00      	cmp	r3, #0
    455e:	d106      	bne.n	456e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4560:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4564:	2b00      	cmp	r3, #0
    4566:	d007      	beq.n	4578 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4568:	2200      	movs	r2, #0
    456a:	4b09      	ldr	r3, [pc, #36]	; (4590 <cpu_irq_enter_critical+0x38>)
    456c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    456e:	4a07      	ldr	r2, [pc, #28]	; (458c <cpu_irq_enter_critical+0x34>)
    4570:	6813      	ldr	r3, [r2, #0]
    4572:	3301      	adds	r3, #1
    4574:	6013      	str	r3, [r2, #0]
}
    4576:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4578:	b672      	cpsid	i
    457a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    457e:	2200      	movs	r2, #0
    4580:	4b04      	ldr	r3, [pc, #16]	; (4594 <cpu_irq_enter_critical+0x3c>)
    4582:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4584:	3201      	adds	r2, #1
    4586:	4b02      	ldr	r3, [pc, #8]	; (4590 <cpu_irq_enter_critical+0x38>)
    4588:	701a      	strb	r2, [r3, #0]
    458a:	e7f0      	b.n	456e <cpu_irq_enter_critical+0x16>
    458c:	200003dc 	.word	0x200003dc
    4590:	200003e0 	.word	0x200003e0
    4594:	20000032 	.word	0x20000032

00004598 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4598:	4b08      	ldr	r3, [pc, #32]	; (45bc <cpu_irq_leave_critical+0x24>)
    459a:	681a      	ldr	r2, [r3, #0]
    459c:	3a01      	subs	r2, #1
    459e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    45a0:	681b      	ldr	r3, [r3, #0]
    45a2:	2b00      	cmp	r3, #0
    45a4:	d109      	bne.n	45ba <cpu_irq_leave_critical+0x22>
    45a6:	4b06      	ldr	r3, [pc, #24]	; (45c0 <cpu_irq_leave_critical+0x28>)
    45a8:	781b      	ldrb	r3, [r3, #0]
    45aa:	2b00      	cmp	r3, #0
    45ac:	d005      	beq.n	45ba <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    45ae:	2201      	movs	r2, #1
    45b0:	4b04      	ldr	r3, [pc, #16]	; (45c4 <cpu_irq_leave_critical+0x2c>)
    45b2:	701a      	strb	r2, [r3, #0]
    45b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    45b8:	b662      	cpsie	i
	}
}
    45ba:	4770      	bx	lr
    45bc:	200003dc 	.word	0x200003dc
    45c0:	200003e0 	.word	0x200003e0
    45c4:	20000032 	.word	0x20000032

000045c8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    45c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ca:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    45cc:	ac01      	add	r4, sp, #4
    45ce:	2501      	movs	r5, #1
    45d0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    45d2:	2700      	movs	r7, #0
    45d4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45d6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    45d8:	0021      	movs	r1, r4
    45da:	2017      	movs	r0, #23
    45dc:	4e06      	ldr	r6, [pc, #24]	; (45f8 <system_board_init+0x30>)
    45de:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    45e0:	2280      	movs	r2, #128	; 0x80
    45e2:	0412      	lsls	r2, r2, #16
    45e4:	4b05      	ldr	r3, [pc, #20]	; (45fc <system_board_init+0x34>)
    45e6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    45e8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    45ea:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    45ec:	0021      	movs	r1, r4
    45ee:	2037      	movs	r0, #55	; 0x37
    45f0:	47b0      	blx	r6
}
    45f2:	b003      	add	sp, #12
    45f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45f6:	46c0      	nop			; (mov r8, r8)
    45f8:	000047d1 	.word	0x000047d1
    45fc:	41004400 	.word	0x41004400

00004600 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4600:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4602:	2a00      	cmp	r2, #0
    4604:	d001      	beq.n	460a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4606:	0018      	movs	r0, r3
    4608:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    460a:	008b      	lsls	r3, r1, #2
    460c:	4a06      	ldr	r2, [pc, #24]	; (4628 <extint_register_callback+0x28>)
    460e:	589b      	ldr	r3, [r3, r2]
    4610:	2b00      	cmp	r3, #0
    4612:	d003      	beq.n	461c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4614:	4283      	cmp	r3, r0
    4616:	d005      	beq.n	4624 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4618:	231d      	movs	r3, #29
    461a:	e7f4      	b.n	4606 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    461c:	0089      	lsls	r1, r1, #2
    461e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4620:	2300      	movs	r3, #0
    4622:	e7f0      	b.n	4606 <extint_register_callback+0x6>
		return STATUS_OK;
    4624:	2300      	movs	r3, #0
    4626:	e7ee      	b.n	4606 <extint_register_callback+0x6>
    4628:	20001028 	.word	0x20001028

0000462c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    462c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    462e:	2900      	cmp	r1, #0
    4630:	d001      	beq.n	4636 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4632:	0018      	movs	r0, r3
    4634:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    4636:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4638:	281f      	cmp	r0, #31
    463a:	d800      	bhi.n	463e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    463c:	4a02      	ldr	r2, [pc, #8]	; (4648 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    463e:	2301      	movs	r3, #1
    4640:	4083      	lsls	r3, r0
    4642:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4644:	2300      	movs	r3, #0
    4646:	e7f4      	b.n	4632 <extint_chan_enable_callback+0x6>
    4648:	40001800 	.word	0x40001800

0000464c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    464c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    464e:	2900      	cmp	r1, #0
    4650:	d001      	beq.n	4656 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    4652:	0018      	movs	r0, r3
    4654:	4770      	bx	lr
		return NULL;
    4656:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4658:	281f      	cmp	r0, #31
    465a:	d800      	bhi.n	465e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    465c:	4a02      	ldr	r2, [pc, #8]	; (4668 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    465e:	2301      	movs	r3, #1
    4660:	4083      	lsls	r3, r0
    4662:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    4664:	2300      	movs	r3, #0
    4666:	e7f4      	b.n	4652 <extint_chan_disable_callback+0x6>
    4668:	40001800 	.word	0x40001800

0000466c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    466c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    466e:	2200      	movs	r2, #0
    4670:	4b10      	ldr	r3, [pc, #64]	; (46b4 <EIC_Handler+0x48>)
    4672:	701a      	strb	r2, [r3, #0]
    4674:	2300      	movs	r3, #0
    4676:	4910      	ldr	r1, [pc, #64]	; (46b8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4678:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    467a:	4e10      	ldr	r6, [pc, #64]	; (46bc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    467c:	4c0d      	ldr	r4, [pc, #52]	; (46b4 <EIC_Handler+0x48>)
    467e:	e00a      	b.n	4696 <EIC_Handler+0x2a>
		return eics[eic_index];
    4680:	490d      	ldr	r1, [pc, #52]	; (46b8 <EIC_Handler+0x4c>)
    4682:	e008      	b.n	4696 <EIC_Handler+0x2a>
    4684:	7823      	ldrb	r3, [r4, #0]
    4686:	3301      	adds	r3, #1
    4688:	b2db      	uxtb	r3, r3
    468a:	7023      	strb	r3, [r4, #0]
    468c:	2b0f      	cmp	r3, #15
    468e:	d810      	bhi.n	46b2 <EIC_Handler+0x46>
		return NULL;
    4690:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4692:	2b1f      	cmp	r3, #31
    4694:	d9f4      	bls.n	4680 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4696:	0028      	movs	r0, r5
    4698:	4018      	ands	r0, r3
    469a:	2201      	movs	r2, #1
    469c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    469e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    46a0:	4210      	tst	r0, r2
    46a2:	d0ef      	beq.n	4684 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    46a4:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    46a6:	009b      	lsls	r3, r3, #2
    46a8:	599b      	ldr	r3, [r3, r6]
    46aa:	2b00      	cmp	r3, #0
    46ac:	d0ea      	beq.n	4684 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    46ae:	4798      	blx	r3
    46b0:	e7e8      	b.n	4684 <EIC_Handler+0x18>
			}
		}
	}
}
    46b2:	bd70      	pop	{r4, r5, r6, pc}
    46b4:	20001024 	.word	0x20001024
    46b8:	40001800 	.word	0x40001800
    46bc:	20001028 	.word	0x20001028

000046c0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    46c0:	4a04      	ldr	r2, [pc, #16]	; (46d4 <_extint_enable+0x14>)
    46c2:	7813      	ldrb	r3, [r2, #0]
    46c4:	2102      	movs	r1, #2
    46c6:	430b      	orrs	r3, r1
    46c8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    46ca:	7853      	ldrb	r3, [r2, #1]
    46cc:	b25b      	sxtb	r3, r3
    46ce:	2b00      	cmp	r3, #0
    46d0:	dbfb      	blt.n	46ca <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    46d2:	4770      	bx	lr
    46d4:	40001800 	.word	0x40001800

000046d8 <_system_extint_init>:
{
    46d8:	b500      	push	{lr}
    46da:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    46dc:	4a12      	ldr	r2, [pc, #72]	; (4728 <_system_extint_init+0x50>)
    46de:	6993      	ldr	r3, [r2, #24]
    46e0:	2140      	movs	r1, #64	; 0x40
    46e2:	430b      	orrs	r3, r1
    46e4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    46e6:	a901      	add	r1, sp, #4
    46e8:	2300      	movs	r3, #0
    46ea:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    46ec:	2005      	movs	r0, #5
    46ee:	4b0f      	ldr	r3, [pc, #60]	; (472c <_system_extint_init+0x54>)
    46f0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    46f2:	2005      	movs	r0, #5
    46f4:	4b0e      	ldr	r3, [pc, #56]	; (4730 <_system_extint_init+0x58>)
    46f6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    46f8:	4a0e      	ldr	r2, [pc, #56]	; (4734 <_system_extint_init+0x5c>)
    46fa:	7813      	ldrb	r3, [r2, #0]
    46fc:	2101      	movs	r1, #1
    46fe:	430b      	orrs	r3, r1
    4700:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4702:	7853      	ldrb	r3, [r2, #1]
    4704:	b25b      	sxtb	r3, r3
    4706:	2b00      	cmp	r3, #0
    4708:	dbfb      	blt.n	4702 <_system_extint_init+0x2a>
    470a:	4b0b      	ldr	r3, [pc, #44]	; (4738 <_system_extint_init+0x60>)
    470c:	0019      	movs	r1, r3
    470e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4710:	2200      	movs	r2, #0
    4712:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4714:	4299      	cmp	r1, r3
    4716:	d1fc      	bne.n	4712 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4718:	2210      	movs	r2, #16
    471a:	4b08      	ldr	r3, [pc, #32]	; (473c <_system_extint_init+0x64>)
    471c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    471e:	4b08      	ldr	r3, [pc, #32]	; (4740 <_system_extint_init+0x68>)
    4720:	4798      	blx	r3
}
    4722:	b003      	add	sp, #12
    4724:	bd00      	pop	{pc}
    4726:	46c0      	nop			; (mov r8, r8)
    4728:	40000400 	.word	0x40000400
    472c:	00006125 	.word	0x00006125
    4730:	00006099 	.word	0x00006099
    4734:	40001800 	.word	0x40001800
    4738:	20001028 	.word	0x20001028
    473c:	e000e100 	.word	0xe000e100
    4740:	000046c1 	.word	0x000046c1

00004744 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4744:	2300      	movs	r3, #0
    4746:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4748:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    474a:	2201      	movs	r2, #1
    474c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    474e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    4750:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4752:	3302      	adds	r3, #2
    4754:	72c3      	strb	r3, [r0, #11]
}
    4756:	4770      	bx	lr

00004758 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4758:	b5f0      	push	{r4, r5, r6, r7, lr}
    475a:	b083      	sub	sp, #12
    475c:	0005      	movs	r5, r0
    475e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4760:	a901      	add	r1, sp, #4
    4762:	2300      	movs	r3, #0
    4764:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4766:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4768:	7923      	ldrb	r3, [r4, #4]
    476a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    476c:	7a23      	ldrb	r3, [r4, #8]
    476e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4770:	7820      	ldrb	r0, [r4, #0]
    4772:	4b15      	ldr	r3, [pc, #84]	; (47c8 <extint_chan_set_config+0x70>)
    4774:	4798      	blx	r3
		return NULL;
    4776:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    4778:	2d1f      	cmp	r5, #31
    477a:	d800      	bhi.n	477e <extint_chan_set_config+0x26>
		return eics[eic_index];
    477c:	4813      	ldr	r0, [pc, #76]	; (47cc <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    477e:	2207      	movs	r2, #7
    4780:	402a      	ands	r2, r5
    4782:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4784:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4786:	7aa3      	ldrb	r3, [r4, #10]
    4788:	2b00      	cmp	r3, #0
    478a:	d001      	beq.n	4790 <extint_chan_set_config+0x38>
    478c:	2308      	movs	r3, #8
    478e:	431f      	orrs	r7, r3
    4790:	08eb      	lsrs	r3, r5, #3
    4792:	009b      	lsls	r3, r3, #2
    4794:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4796:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4798:	260f      	movs	r6, #15
    479a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    479c:	43b1      	bics	r1, r6
			(new_config << config_pos);
    479e:	4097      	lsls	r7, r2
    47a0:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    47a2:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    47a4:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    47a6:	7a63      	ldrb	r3, [r4, #9]
    47a8:	2b00      	cmp	r3, #0
    47aa:	d106      	bne.n	47ba <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    47ac:	6943      	ldr	r3, [r0, #20]
    47ae:	2201      	movs	r2, #1
    47b0:	40aa      	lsls	r2, r5
    47b2:	4393      	bics	r3, r2
    47b4:	6143      	str	r3, [r0, #20]
	}
}
    47b6:	b003      	add	sp, #12
    47b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    47ba:	6942      	ldr	r2, [r0, #20]
    47bc:	2301      	movs	r3, #1
    47be:	40ab      	lsls	r3, r5
    47c0:	4313      	orrs	r3, r2
    47c2:	6143      	str	r3, [r0, #20]
    47c4:	e7f7      	b.n	47b6 <extint_chan_set_config+0x5e>
    47c6:	46c0      	nop			; (mov r8, r8)
    47c8:	0000621d 	.word	0x0000621d
    47cc:	40001800 	.word	0x40001800

000047d0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    47d0:	b500      	push	{lr}
    47d2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    47d4:	ab01      	add	r3, sp, #4
    47d6:	2280      	movs	r2, #128	; 0x80
    47d8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    47da:	780a      	ldrb	r2, [r1, #0]
    47dc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    47de:	784a      	ldrb	r2, [r1, #1]
    47e0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    47e2:	788a      	ldrb	r2, [r1, #2]
    47e4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    47e6:	0019      	movs	r1, r3
    47e8:	4b01      	ldr	r3, [pc, #4]	; (47f0 <port_pin_set_config+0x20>)
    47ea:	4798      	blx	r3
}
    47ec:	b003      	add	sp, #12
    47ee:	bd00      	pop	{pc}
    47f0:	0000621d 	.word	0x0000621d

000047f4 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    47f4:	6801      	ldr	r1, [r0, #0]
    47f6:	2208      	movs	r2, #8
    47f8:	4b05      	ldr	r3, [pc, #20]	; (4810 <rtc_calendar_enable+0x1c>)
    47fa:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    47fc:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    47fe:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    4800:	b25b      	sxtb	r3, r3
    4802:	2b00      	cmp	r3, #0
    4804:	dbfb      	blt.n	47fe <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    4806:	880b      	ldrh	r3, [r1, #0]
    4808:	2202      	movs	r2, #2
    480a:	4313      	orrs	r3, r2
    480c:	800b      	strh	r3, [r1, #0]
}
    480e:	4770      	bx	lr
    4810:	e000e100 	.word	0xe000e100

00004814 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    4814:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4816:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4818:	2408      	movs	r4, #8
    481a:	2380      	movs	r3, #128	; 0x80
    481c:	4907      	ldr	r1, [pc, #28]	; (483c <rtc_calendar_disable+0x28>)
    481e:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    4820:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4822:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    4824:	b25b      	sxtb	r3, r3
    4826:	2b00      	cmp	r3, #0
    4828:	dbfb      	blt.n	4822 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    482a:	23c1      	movs	r3, #193	; 0xc1
    482c:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    482e:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    4830:	8813      	ldrh	r3, [r2, #0]
    4832:	2102      	movs	r1, #2
    4834:	438b      	bics	r3, r1
    4836:	8013      	strh	r3, [r2, #0]
}
    4838:	bd10      	pop	{r4, pc}
    483a:	46c0      	nop			; (mov r8, r8)
    483c:	e000e100 	.word	0xe000e100

00004840 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    4840:	b570      	push	{r4, r5, r6, lr}
    4842:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4844:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    4846:	4b07      	ldr	r3, [pc, #28]	; (4864 <rtc_calendar_reset+0x24>)
    4848:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    484a:	2300      	movs	r3, #0
    484c:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    484e:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    4850:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4852:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    4854:	b25b      	sxtb	r3, r3
    4856:	2b00      	cmp	r3, #0
    4858:	dbfb      	blt.n	4852 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    485a:	882b      	ldrh	r3, [r5, #0]
    485c:	2201      	movs	r2, #1
    485e:	4313      	orrs	r3, r2
    4860:	802b      	strh	r3, [r5, #0]
}
    4862:	bd70      	pop	{r4, r5, r6, pc}
    4864:	00004815 	.word	0x00004815

00004868 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    4868:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    486a:	88cb      	ldrh	r3, [r1, #6]
    486c:	88c2      	ldrh	r2, [r0, #6]
    486e:	1a9a      	subs	r2, r3, r2
    4870:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    4872:	794b      	ldrb	r3, [r1, #5]
    4874:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    4876:	790c      	ldrb	r4, [r1, #4]
    4878:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    487a:	4323      	orrs	r3, r4
    487c:	788c      	ldrb	r4, [r1, #2]
    487e:	0324      	lsls	r4, r4, #12
    4880:	4323      	orrs	r3, r4
    4882:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    4884:	7902      	ldrb	r2, [r0, #4]
    4886:	2a00      	cmp	r2, #0
    4888:	d105      	bne.n	4896 <rtc_calendar_time_to_register_value+0x2e>
    488a:	78ca      	ldrb	r2, [r1, #3]
    488c:	2a00      	cmp	r2, #0
    488e:	d002      	beq.n	4896 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    4890:	2280      	movs	r2, #128	; 0x80
    4892:	0252      	lsls	r2, r2, #9
    4894:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    4896:	7848      	ldrb	r0, [r1, #1]
    4898:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    489a:	780a      	ldrb	r2, [r1, #0]
    489c:	4310      	orrs	r0, r2
    489e:	4318      	orrs	r0, r3

	return register_value;
}
    48a0:	bd10      	pop	{r4, pc}

000048a2 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    48a2:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    48a4:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    48a6:	88c4      	ldrh	r4, [r0, #6]
    48a8:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    48aa:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    48ac:	018b      	lsls	r3, r1, #6
    48ae:	0f1b      	lsrs	r3, r3, #28
    48b0:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    48b2:	028b      	lsls	r3, r1, #10
    48b4:	0edb      	lsrs	r3, r3, #27
    48b6:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    48b8:	7903      	ldrb	r3, [r0, #4]
    48ba:	2b00      	cmp	r3, #0
    48bc:	d10c      	bne.n	48d8 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    48be:	040b      	lsls	r3, r1, #16
    48c0:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    48c2:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    48c4:	03cb      	lsls	r3, r1, #15
    48c6:	0fdb      	lsrs	r3, r3, #31
    48c8:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    48ca:	0988      	lsrs	r0, r1, #6
    48cc:	233f      	movs	r3, #63	; 0x3f
    48ce:	4018      	ands	r0, r3
    48d0:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    48d2:	4019      	ands	r1, r3
    48d4:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    48d6:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    48d8:	03cb      	lsls	r3, r1, #15
    48da:	0edb      	lsrs	r3, r3, #27
    48dc:	7093      	strb	r3, [r2, #2]
    48de:	e7f4      	b.n	48ca <rtc_calendar_register_value_to_time+0x28>

000048e0 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    48e0:	b510      	push	{r4, lr}
    48e2:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    48e4:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    48e6:	7941      	ldrb	r1, [r0, #5]
    48e8:	2900      	cmp	r1, #0
    48ea:	d006      	beq.n	48fa <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    48ec:	8859      	ldrh	r1, [r3, #2]
    48ee:	0449      	lsls	r1, r1, #17
    48f0:	d50b      	bpl.n	490a <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    48f2:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    48f4:	4b0a      	ldr	r3, [pc, #40]	; (4920 <rtc_calendar_get_time+0x40>)
    48f6:	4798      	blx	r3
}
    48f8:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    48fa:	490a      	ldr	r1, [pc, #40]	; (4924 <rtc_calendar_get_time+0x44>)
    48fc:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    48fe:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4900:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    4902:	b249      	sxtb	r1, r1
    4904:	2900      	cmp	r1, #0
    4906:	dbfb      	blt.n	4900 <rtc_calendar_get_time+0x20>
    4908:	e7f3      	b.n	48f2 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    490a:	8859      	ldrh	r1, [r3, #2]
    490c:	24c0      	movs	r4, #192	; 0xc0
    490e:	0224      	lsls	r4, r4, #8
    4910:	4321      	orrs	r1, r4
    4912:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    4914:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4916:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    4918:	b249      	sxtb	r1, r1
    491a:	2900      	cmp	r1, #0
    491c:	dbfb      	blt.n	4916 <rtc_calendar_get_time+0x36>
    491e:	e7e8      	b.n	48f2 <rtc_calendar_get_time+0x12>
    4920:	000048a3 	.word	0x000048a3
    4924:	ffff8000 	.word	0xffff8000

00004928 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    4928:	b570      	push	{r4, r5, r6, lr}
    492a:	000d      	movs	r5, r1
    492c:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    492e:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    4930:	2a01      	cmp	r2, #1
    4932:	d901      	bls.n	4938 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    4934:	0018      	movs	r0, r3
    4936:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    4938:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    493a:	4b06      	ldr	r3, [pc, #24]	; (4954 <rtc_calendar_set_alarm+0x2c>)
    493c:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    493e:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    4940:	b25b      	sxtb	r3, r3
    4942:	2b00      	cmp	r3, #0
    4944:	dbfb      	blt.n	493e <rtc_calendar_set_alarm+0x16>
    4946:	00e4      	lsls	r4, r4, #3
    4948:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    494a:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    494c:	7a2b      	ldrb	r3, [r5, #8]
    494e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    4950:	2300      	movs	r3, #0
    4952:	e7ef      	b.n	4934 <rtc_calendar_set_alarm+0xc>
    4954:	00004869 	.word	0x00004869

00004958 <rtc_calendar_init>:
{
    4958:	b530      	push	{r4, r5, lr}
    495a:	b083      	sub	sp, #12
    495c:	0005      	movs	r5, r0
    495e:	0014      	movs	r4, r2
	module->hw = hw;
    4960:	6001      	str	r1, [r0, #0]
    4962:	4a1c      	ldr	r2, [pc, #112]	; (49d4 <rtc_calendar_init+0x7c>)
    4964:	6993      	ldr	r3, [r2, #24]
    4966:	2120      	movs	r1, #32
    4968:	430b      	orrs	r3, r1
    496a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    496c:	a901      	add	r1, sp, #4
    496e:	2302      	movs	r3, #2
    4970:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    4972:	2004      	movs	r0, #4
    4974:	4b18      	ldr	r3, [pc, #96]	; (49d8 <rtc_calendar_init+0x80>)
    4976:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    4978:	2004      	movs	r0, #4
    497a:	4b18      	ldr	r3, [pc, #96]	; (49dc <rtc_calendar_init+0x84>)
    497c:	4798      	blx	r3
	rtc_calendar_reset(module);
    497e:	0028      	movs	r0, r5
    4980:	4b17      	ldr	r3, [pc, #92]	; (49e0 <rtc_calendar_init+0x88>)
    4982:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    4984:	7923      	ldrb	r3, [r4, #4]
    4986:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    4988:	78e3      	ldrb	r3, [r4, #3]
    498a:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    498c:	88e3      	ldrh	r3, [r4, #6]
    498e:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    4990:	4b14      	ldr	r3, [pc, #80]	; (49e4 <rtc_calendar_init+0x8c>)
    4992:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    4994:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    4996:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    4998:	7921      	ldrb	r1, [r4, #4]
    499a:	2900      	cmp	r1, #0
    499c:	d017      	beq.n	49ce <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    499e:	2108      	movs	r1, #8
    49a0:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    49a2:	78a1      	ldrb	r1, [r4, #2]
    49a4:	2900      	cmp	r1, #0
    49a6:	d001      	beq.n	49ac <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    49a8:	2180      	movs	r1, #128	; 0x80
    49aa:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    49ac:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    49ae:	78e3      	ldrb	r3, [r4, #3]
    49b0:	2b00      	cmp	r3, #0
    49b2:	d004      	beq.n	49be <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    49b4:	8853      	ldrh	r3, [r2, #2]
    49b6:	2180      	movs	r1, #128	; 0x80
    49b8:	01c9      	lsls	r1, r1, #7
    49ba:	430b      	orrs	r3, r1
    49bc:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    49be:	0021      	movs	r1, r4
    49c0:	3108      	adds	r1, #8
    49c2:	2200      	movs	r2, #0
    49c4:	0028      	movs	r0, r5
    49c6:	4b08      	ldr	r3, [pc, #32]	; (49e8 <rtc_calendar_init+0x90>)
    49c8:	4798      	blx	r3
}
    49ca:	b003      	add	sp, #12
    49cc:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    49ce:	2148      	movs	r1, #72	; 0x48
    49d0:	430b      	orrs	r3, r1
    49d2:	e7e6      	b.n	49a2 <rtc_calendar_init+0x4a>
    49d4:	40000400 	.word	0x40000400
    49d8:	00006125 	.word	0x00006125
    49dc:	00006099 	.word	0x00006099
    49e0:	00004841 	.word	0x00004841
    49e4:	20001068 	.word	0x20001068
    49e8:	00004929 	.word	0x00004929

000049ec <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    49ec:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    49ee:	4b0f      	ldr	r3, [pc, #60]	; (4a2c <RTC_Handler+0x40>)
    49f0:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    49f2:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    49f4:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    49f6:	8a13      	ldrh	r3, [r2, #16]
    49f8:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    49fa:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    49fc:	79e3      	ldrb	r3, [r4, #7]
    49fe:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    4a00:	b258      	sxtb	r0, r3
    4a02:	2800      	cmp	r0, #0
    4a04:	db06      	blt.n	4a14 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    4a06:	07db      	lsls	r3, r3, #31
    4a08:	d503      	bpl.n	4a12 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    4a0a:	07cb      	lsls	r3, r1, #31
    4a0c:	d40a      	bmi.n	4a24 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    4a0e:	2301      	movs	r3, #1
    4a10:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    4a12:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    4a14:	078b      	lsls	r3, r1, #30
    4a16:	d402      	bmi.n	4a1e <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    4a18:	2380      	movs	r3, #128	; 0x80
    4a1a:	7223      	strb	r3, [r4, #8]
    4a1c:	e7f9      	b.n	4a12 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    4a1e:	68d3      	ldr	r3, [r2, #12]
    4a20:	4798      	blx	r3
    4a22:	e7f9      	b.n	4a18 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    4a24:	6893      	ldr	r3, [r2, #8]
    4a26:	4798      	blx	r3
    4a28:	e7f1      	b.n	4a0e <RTC_Handler+0x22>
    4a2a:	46c0      	nop			; (mov r8, r8)
    4a2c:	20001068 	.word	0x20001068

00004a30 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a32:	46de      	mov	lr, fp
    4a34:	4657      	mov	r7, sl
    4a36:	464e      	mov	r6, r9
    4a38:	4645      	mov	r5, r8
    4a3a:	b5e0      	push	{r5, r6, r7, lr}
    4a3c:	b087      	sub	sp, #28
    4a3e:	4680      	mov	r8, r0
    4a40:	9104      	str	r1, [sp, #16]
    4a42:	0016      	movs	r6, r2
    4a44:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4a46:	2200      	movs	r2, #0
    4a48:	2300      	movs	r3, #0
    4a4a:	2100      	movs	r1, #0
    4a4c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    4a4e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4a50:	2001      	movs	r0, #1
    4a52:	0021      	movs	r1, r4
    4a54:	9600      	str	r6, [sp, #0]
    4a56:	9701      	str	r7, [sp, #4]
    4a58:	465c      	mov	r4, fp
    4a5a:	9403      	str	r4, [sp, #12]
    4a5c:	4644      	mov	r4, r8
    4a5e:	9405      	str	r4, [sp, #20]
    4a60:	e013      	b.n	4a8a <long_division+0x5a>
    4a62:	2420      	movs	r4, #32
    4a64:	1a64      	subs	r4, r4, r1
    4a66:	0005      	movs	r5, r0
    4a68:	40e5      	lsrs	r5, r4
    4a6a:	46a8      	mov	r8, r5
    4a6c:	e014      	b.n	4a98 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    4a6e:	9c00      	ldr	r4, [sp, #0]
    4a70:	9d01      	ldr	r5, [sp, #4]
    4a72:	1b12      	subs	r2, r2, r4
    4a74:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4a76:	465c      	mov	r4, fp
    4a78:	464d      	mov	r5, r9
    4a7a:	432c      	orrs	r4, r5
    4a7c:	46a3      	mov	fp, r4
    4a7e:	9c03      	ldr	r4, [sp, #12]
    4a80:	4645      	mov	r5, r8
    4a82:	432c      	orrs	r4, r5
    4a84:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4a86:	3901      	subs	r1, #1
    4a88:	d325      	bcc.n	4ad6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4a8a:	2420      	movs	r4, #32
    4a8c:	4264      	negs	r4, r4
    4a8e:	190c      	adds	r4, r1, r4
    4a90:	d4e7      	bmi.n	4a62 <long_division+0x32>
    4a92:	0005      	movs	r5, r0
    4a94:	40a5      	lsls	r5, r4
    4a96:	46a8      	mov	r8, r5
    4a98:	0004      	movs	r4, r0
    4a9a:	408c      	lsls	r4, r1
    4a9c:	46a1      	mov	r9, r4
		r = r << 1;
    4a9e:	1892      	adds	r2, r2, r2
    4aa0:	415b      	adcs	r3, r3
    4aa2:	0014      	movs	r4, r2
    4aa4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4aa6:	9e05      	ldr	r6, [sp, #20]
    4aa8:	464f      	mov	r7, r9
    4aaa:	403e      	ands	r6, r7
    4aac:	46b4      	mov	ip, r6
    4aae:	9e04      	ldr	r6, [sp, #16]
    4ab0:	4647      	mov	r7, r8
    4ab2:	403e      	ands	r6, r7
    4ab4:	46b2      	mov	sl, r6
    4ab6:	4666      	mov	r6, ip
    4ab8:	4657      	mov	r7, sl
    4aba:	433e      	orrs	r6, r7
    4abc:	d003      	beq.n	4ac6 <long_division+0x96>
			r |= 0x01;
    4abe:	0006      	movs	r6, r0
    4ac0:	4326      	orrs	r6, r4
    4ac2:	0032      	movs	r2, r6
    4ac4:	002b      	movs	r3, r5
		if (r >= d) {
    4ac6:	9c00      	ldr	r4, [sp, #0]
    4ac8:	9d01      	ldr	r5, [sp, #4]
    4aca:	429d      	cmp	r5, r3
    4acc:	d8db      	bhi.n	4a86 <long_division+0x56>
    4ace:	d1ce      	bne.n	4a6e <long_division+0x3e>
    4ad0:	4294      	cmp	r4, r2
    4ad2:	d8d8      	bhi.n	4a86 <long_division+0x56>
    4ad4:	e7cb      	b.n	4a6e <long_division+0x3e>
    4ad6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4ad8:	4658      	mov	r0, fp
    4ada:	0019      	movs	r1, r3
    4adc:	b007      	add	sp, #28
    4ade:	bc3c      	pop	{r2, r3, r4, r5}
    4ae0:	4690      	mov	r8, r2
    4ae2:	4699      	mov	r9, r3
    4ae4:	46a2      	mov	sl, r4
    4ae6:	46ab      	mov	fp, r5
    4ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004aea <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4aea:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4aec:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4aee:	2340      	movs	r3, #64	; 0x40
    4af0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    4af2:	4281      	cmp	r1, r0
    4af4:	d202      	bcs.n	4afc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    4af6:	0018      	movs	r0, r3
    4af8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4afa:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4afc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4afe:	1c63      	adds	r3, r4, #1
    4b00:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    4b02:	4288      	cmp	r0, r1
    4b04:	d9f9      	bls.n	4afa <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4b06:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4b08:	2cff      	cmp	r4, #255	; 0xff
    4b0a:	d8f4      	bhi.n	4af6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4b0c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4b0e:	2300      	movs	r3, #0
    4b10:	e7f1      	b.n	4af6 <_sercom_get_sync_baud_val+0xc>
	...

00004b14 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b16:	b083      	sub	sp, #12
    4b18:	000f      	movs	r7, r1
    4b1a:	0016      	movs	r6, r2
    4b1c:	aa08      	add	r2, sp, #32
    4b1e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4b20:	0004      	movs	r4, r0
    4b22:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4b24:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    4b26:	42bc      	cmp	r4, r7
    4b28:	d902      	bls.n	4b30 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4b2a:	0010      	movs	r0, r2
    4b2c:	b003      	add	sp, #12
    4b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4b30:	2b00      	cmp	r3, #0
    4b32:	d114      	bne.n	4b5e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4b34:	0002      	movs	r2, r0
    4b36:	0008      	movs	r0, r1
    4b38:	2100      	movs	r1, #0
    4b3a:	4c19      	ldr	r4, [pc, #100]	; (4ba0 <_sercom_get_async_baud_val+0x8c>)
    4b3c:	47a0      	blx	r4
    4b3e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    4b40:	003a      	movs	r2, r7
    4b42:	2300      	movs	r3, #0
    4b44:	2000      	movs	r0, #0
    4b46:	4c17      	ldr	r4, [pc, #92]	; (4ba4 <_sercom_get_async_baud_val+0x90>)
    4b48:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4b4a:	2200      	movs	r2, #0
    4b4c:	2301      	movs	r3, #1
    4b4e:	1a12      	subs	r2, r2, r0
    4b50:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    4b52:	0c12      	lsrs	r2, r2, #16
    4b54:	041b      	lsls	r3, r3, #16
    4b56:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4b58:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4b5a:	2200      	movs	r2, #0
    4b5c:	e7e5      	b.n	4b2a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    4b5e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4b60:	2b01      	cmp	r3, #1
    4b62:	d1f9      	bne.n	4b58 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4b64:	000a      	movs	r2, r1
    4b66:	2300      	movs	r3, #0
    4b68:	2100      	movs	r1, #0
    4b6a:	4c0d      	ldr	r4, [pc, #52]	; (4ba0 <_sercom_get_async_baud_val+0x8c>)
    4b6c:	47a0      	blx	r4
    4b6e:	0002      	movs	r2, r0
    4b70:	000b      	movs	r3, r1
    4b72:	9200      	str	r2, [sp, #0]
    4b74:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4b76:	0038      	movs	r0, r7
    4b78:	2100      	movs	r1, #0
    4b7a:	4c0a      	ldr	r4, [pc, #40]	; (4ba4 <_sercom_get_async_baud_val+0x90>)
    4b7c:	47a0      	blx	r4
    4b7e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4b80:	2380      	movs	r3, #128	; 0x80
    4b82:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4b84:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    4b86:	4298      	cmp	r0, r3
    4b88:	d8cf      	bhi.n	4b2a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4b8a:	0f79      	lsrs	r1, r7, #29
    4b8c:	00f8      	lsls	r0, r7, #3
    4b8e:	9a00      	ldr	r2, [sp, #0]
    4b90:	9b01      	ldr	r3, [sp, #4]
    4b92:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4b94:	00ea      	lsls	r2, r5, #3
    4b96:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4b98:	b2d2      	uxtb	r2, r2
    4b9a:	0352      	lsls	r2, r2, #13
    4b9c:	432a      	orrs	r2, r5
    4b9e:	e7db      	b.n	4b58 <_sercom_get_async_baud_val+0x44>
    4ba0:	0000bca9 	.word	0x0000bca9
    4ba4:	00004a31 	.word	0x00004a31

00004ba8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4ba8:	b510      	push	{r4, lr}
    4baa:	b082      	sub	sp, #8
    4bac:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4bae:	4b0e      	ldr	r3, [pc, #56]	; (4be8 <sercom_set_gclk_generator+0x40>)
    4bb0:	781b      	ldrb	r3, [r3, #0]
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d007      	beq.n	4bc6 <sercom_set_gclk_generator+0x1e>
    4bb6:	2900      	cmp	r1, #0
    4bb8:	d105      	bne.n	4bc6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4bba:	4b0b      	ldr	r3, [pc, #44]	; (4be8 <sercom_set_gclk_generator+0x40>)
    4bbc:	785b      	ldrb	r3, [r3, #1]
    4bbe:	4283      	cmp	r3, r0
    4bc0:	d010      	beq.n	4be4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4bc2:	201d      	movs	r0, #29
    4bc4:	e00c      	b.n	4be0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4bc6:	a901      	add	r1, sp, #4
    4bc8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4bca:	2013      	movs	r0, #19
    4bcc:	4b07      	ldr	r3, [pc, #28]	; (4bec <sercom_set_gclk_generator+0x44>)
    4bce:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4bd0:	2013      	movs	r0, #19
    4bd2:	4b07      	ldr	r3, [pc, #28]	; (4bf0 <sercom_set_gclk_generator+0x48>)
    4bd4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    4bd6:	4b04      	ldr	r3, [pc, #16]	; (4be8 <sercom_set_gclk_generator+0x40>)
    4bd8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4bda:	2201      	movs	r2, #1
    4bdc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4bde:	2000      	movs	r0, #0
}
    4be0:	b002      	add	sp, #8
    4be2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4be4:	2000      	movs	r0, #0
    4be6:	e7fb      	b.n	4be0 <sercom_set_gclk_generator+0x38>
    4be8:	200003e4 	.word	0x200003e4
    4bec:	00006125 	.word	0x00006125
    4bf0:	00006099 	.word	0x00006099

00004bf4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4bf4:	4b40      	ldr	r3, [pc, #256]	; (4cf8 <_sercom_get_default_pad+0x104>)
    4bf6:	4298      	cmp	r0, r3
    4bf8:	d031      	beq.n	4c5e <_sercom_get_default_pad+0x6a>
    4bfa:	d90a      	bls.n	4c12 <_sercom_get_default_pad+0x1e>
    4bfc:	4b3f      	ldr	r3, [pc, #252]	; (4cfc <_sercom_get_default_pad+0x108>)
    4bfe:	4298      	cmp	r0, r3
    4c00:	d04d      	beq.n	4c9e <_sercom_get_default_pad+0xaa>
    4c02:	4b3f      	ldr	r3, [pc, #252]	; (4d00 <_sercom_get_default_pad+0x10c>)
    4c04:	4298      	cmp	r0, r3
    4c06:	d05a      	beq.n	4cbe <_sercom_get_default_pad+0xca>
    4c08:	4b3e      	ldr	r3, [pc, #248]	; (4d04 <_sercom_get_default_pad+0x110>)
    4c0a:	4298      	cmp	r0, r3
    4c0c:	d037      	beq.n	4c7e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4c0e:	2000      	movs	r0, #0
}
    4c10:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    4c12:	4b3d      	ldr	r3, [pc, #244]	; (4d08 <_sercom_get_default_pad+0x114>)
    4c14:	4298      	cmp	r0, r3
    4c16:	d00c      	beq.n	4c32 <_sercom_get_default_pad+0x3e>
    4c18:	4b3c      	ldr	r3, [pc, #240]	; (4d0c <_sercom_get_default_pad+0x118>)
    4c1a:	4298      	cmp	r0, r3
    4c1c:	d1f7      	bne.n	4c0e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c1e:	2901      	cmp	r1, #1
    4c20:	d017      	beq.n	4c52 <_sercom_get_default_pad+0x5e>
    4c22:	2900      	cmp	r1, #0
    4c24:	d05d      	beq.n	4ce2 <_sercom_get_default_pad+0xee>
    4c26:	2902      	cmp	r1, #2
    4c28:	d015      	beq.n	4c56 <_sercom_get_default_pad+0x62>
    4c2a:	2903      	cmp	r1, #3
    4c2c:	d015      	beq.n	4c5a <_sercom_get_default_pad+0x66>
	return 0;
    4c2e:	2000      	movs	r0, #0
    4c30:	e7ee      	b.n	4c10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c32:	2901      	cmp	r1, #1
    4c34:	d007      	beq.n	4c46 <_sercom_get_default_pad+0x52>
    4c36:	2900      	cmp	r1, #0
    4c38:	d051      	beq.n	4cde <_sercom_get_default_pad+0xea>
    4c3a:	2902      	cmp	r1, #2
    4c3c:	d005      	beq.n	4c4a <_sercom_get_default_pad+0x56>
    4c3e:	2903      	cmp	r1, #3
    4c40:	d005      	beq.n	4c4e <_sercom_get_default_pad+0x5a>
	return 0;
    4c42:	2000      	movs	r0, #0
    4c44:	e7e4      	b.n	4c10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c46:	4832      	ldr	r0, [pc, #200]	; (4d10 <_sercom_get_default_pad+0x11c>)
    4c48:	e7e2      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4c4a:	4832      	ldr	r0, [pc, #200]	; (4d14 <_sercom_get_default_pad+0x120>)
    4c4c:	e7e0      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4c4e:	4832      	ldr	r0, [pc, #200]	; (4d18 <_sercom_get_default_pad+0x124>)
    4c50:	e7de      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4c52:	4832      	ldr	r0, [pc, #200]	; (4d1c <_sercom_get_default_pad+0x128>)
    4c54:	e7dc      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4c56:	4832      	ldr	r0, [pc, #200]	; (4d20 <_sercom_get_default_pad+0x12c>)
    4c58:	e7da      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4c5a:	4832      	ldr	r0, [pc, #200]	; (4d24 <_sercom_get_default_pad+0x130>)
    4c5c:	e7d8      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4c5e:	2901      	cmp	r1, #1
    4c60:	d007      	beq.n	4c72 <_sercom_get_default_pad+0x7e>
    4c62:	2900      	cmp	r1, #0
    4c64:	d03f      	beq.n	4ce6 <_sercom_get_default_pad+0xf2>
    4c66:	2902      	cmp	r1, #2
    4c68:	d005      	beq.n	4c76 <_sercom_get_default_pad+0x82>
    4c6a:	2903      	cmp	r1, #3
    4c6c:	d005      	beq.n	4c7a <_sercom_get_default_pad+0x86>
	return 0;
    4c6e:	2000      	movs	r0, #0
    4c70:	e7ce      	b.n	4c10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c72:	482d      	ldr	r0, [pc, #180]	; (4d28 <_sercom_get_default_pad+0x134>)
    4c74:	e7cc      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4c76:	482d      	ldr	r0, [pc, #180]	; (4d2c <_sercom_get_default_pad+0x138>)
    4c78:	e7ca      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4c7a:	482d      	ldr	r0, [pc, #180]	; (4d30 <_sercom_get_default_pad+0x13c>)
    4c7c:	e7c8      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4c7e:	2901      	cmp	r1, #1
    4c80:	d007      	beq.n	4c92 <_sercom_get_default_pad+0x9e>
    4c82:	2900      	cmp	r1, #0
    4c84:	d031      	beq.n	4cea <_sercom_get_default_pad+0xf6>
    4c86:	2902      	cmp	r1, #2
    4c88:	d005      	beq.n	4c96 <_sercom_get_default_pad+0xa2>
    4c8a:	2903      	cmp	r1, #3
    4c8c:	d005      	beq.n	4c9a <_sercom_get_default_pad+0xa6>
	return 0;
    4c8e:	2000      	movs	r0, #0
    4c90:	e7be      	b.n	4c10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c92:	4828      	ldr	r0, [pc, #160]	; (4d34 <_sercom_get_default_pad+0x140>)
    4c94:	e7bc      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4c96:	4828      	ldr	r0, [pc, #160]	; (4d38 <_sercom_get_default_pad+0x144>)
    4c98:	e7ba      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4c9a:	4828      	ldr	r0, [pc, #160]	; (4d3c <_sercom_get_default_pad+0x148>)
    4c9c:	e7b8      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4c9e:	2901      	cmp	r1, #1
    4ca0:	d007      	beq.n	4cb2 <_sercom_get_default_pad+0xbe>
    4ca2:	2900      	cmp	r1, #0
    4ca4:	d023      	beq.n	4cee <_sercom_get_default_pad+0xfa>
    4ca6:	2902      	cmp	r1, #2
    4ca8:	d005      	beq.n	4cb6 <_sercom_get_default_pad+0xc2>
    4caa:	2903      	cmp	r1, #3
    4cac:	d005      	beq.n	4cba <_sercom_get_default_pad+0xc6>
	return 0;
    4cae:	2000      	movs	r0, #0
    4cb0:	e7ae      	b.n	4c10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4cb2:	4823      	ldr	r0, [pc, #140]	; (4d40 <_sercom_get_default_pad+0x14c>)
    4cb4:	e7ac      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4cb6:	4823      	ldr	r0, [pc, #140]	; (4d44 <_sercom_get_default_pad+0x150>)
    4cb8:	e7aa      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4cba:	4823      	ldr	r0, [pc, #140]	; (4d48 <_sercom_get_default_pad+0x154>)
    4cbc:	e7a8      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4cbe:	2901      	cmp	r1, #1
    4cc0:	d007      	beq.n	4cd2 <_sercom_get_default_pad+0xde>
    4cc2:	2900      	cmp	r1, #0
    4cc4:	d015      	beq.n	4cf2 <_sercom_get_default_pad+0xfe>
    4cc6:	2902      	cmp	r1, #2
    4cc8:	d005      	beq.n	4cd6 <_sercom_get_default_pad+0xe2>
    4cca:	2903      	cmp	r1, #3
    4ccc:	d005      	beq.n	4cda <_sercom_get_default_pad+0xe6>
	return 0;
    4cce:	2000      	movs	r0, #0
    4cd0:	e79e      	b.n	4c10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4cd2:	481e      	ldr	r0, [pc, #120]	; (4d4c <_sercom_get_default_pad+0x158>)
    4cd4:	e79c      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4cd6:	481e      	ldr	r0, [pc, #120]	; (4d50 <_sercom_get_default_pad+0x15c>)
    4cd8:	e79a      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4cda:	481e      	ldr	r0, [pc, #120]	; (4d54 <_sercom_get_default_pad+0x160>)
    4cdc:	e798      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4cde:	481e      	ldr	r0, [pc, #120]	; (4d58 <_sercom_get_default_pad+0x164>)
    4ce0:	e796      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4ce2:	2003      	movs	r0, #3
    4ce4:	e794      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4ce6:	481d      	ldr	r0, [pc, #116]	; (4d5c <_sercom_get_default_pad+0x168>)
    4ce8:	e792      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4cea:	481d      	ldr	r0, [pc, #116]	; (4d60 <_sercom_get_default_pad+0x16c>)
    4cec:	e790      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4cee:	481d      	ldr	r0, [pc, #116]	; (4d64 <_sercom_get_default_pad+0x170>)
    4cf0:	e78e      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4cf2:	481d      	ldr	r0, [pc, #116]	; (4d68 <_sercom_get_default_pad+0x174>)
    4cf4:	e78c      	b.n	4c10 <_sercom_get_default_pad+0x1c>
    4cf6:	46c0      	nop			; (mov r8, r8)
    4cf8:	42001000 	.word	0x42001000
    4cfc:	42001800 	.word	0x42001800
    4d00:	42001c00 	.word	0x42001c00
    4d04:	42001400 	.word	0x42001400
    4d08:	42000800 	.word	0x42000800
    4d0c:	42000c00 	.word	0x42000c00
    4d10:	00050003 	.word	0x00050003
    4d14:	00060003 	.word	0x00060003
    4d18:	00070003 	.word	0x00070003
    4d1c:	00010003 	.word	0x00010003
    4d20:	001e0003 	.word	0x001e0003
    4d24:	001f0003 	.word	0x001f0003
    4d28:	00090003 	.word	0x00090003
    4d2c:	000a0003 	.word	0x000a0003
    4d30:	000b0003 	.word	0x000b0003
    4d34:	00110003 	.word	0x00110003
    4d38:	00120003 	.word	0x00120003
    4d3c:	00130003 	.word	0x00130003
    4d40:	000d0003 	.word	0x000d0003
    4d44:	000e0003 	.word	0x000e0003
    4d48:	000f0003 	.word	0x000f0003
    4d4c:	00170003 	.word	0x00170003
    4d50:	00180003 	.word	0x00180003
    4d54:	00190003 	.word	0x00190003
    4d58:	00040003 	.word	0x00040003
    4d5c:	00080003 	.word	0x00080003
    4d60:	00100003 	.word	0x00100003
    4d64:	000c0003 	.word	0x000c0003
    4d68:	00160003 	.word	0x00160003

00004d6c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4d6c:	b530      	push	{r4, r5, lr}
    4d6e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4d70:	4b0b      	ldr	r3, [pc, #44]	; (4da0 <_sercom_get_sercom_inst_index+0x34>)
    4d72:	466a      	mov	r2, sp
    4d74:	cb32      	ldmia	r3!, {r1, r4, r5}
    4d76:	c232      	stmia	r2!, {r1, r4, r5}
    4d78:	cb32      	ldmia	r3!, {r1, r4, r5}
    4d7a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4d7c:	9b00      	ldr	r3, [sp, #0]
    4d7e:	4283      	cmp	r3, r0
    4d80:	d00b      	beq.n	4d9a <_sercom_get_sercom_inst_index+0x2e>
    4d82:	2301      	movs	r3, #1
    4d84:	009a      	lsls	r2, r3, #2
    4d86:	4669      	mov	r1, sp
    4d88:	5852      	ldr	r2, [r2, r1]
    4d8a:	4282      	cmp	r2, r0
    4d8c:	d006      	beq.n	4d9c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4d8e:	3301      	adds	r3, #1
    4d90:	2b06      	cmp	r3, #6
    4d92:	d1f7      	bne.n	4d84 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4d94:	2000      	movs	r0, #0
}
    4d96:	b007      	add	sp, #28
    4d98:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4d9a:	2300      	movs	r3, #0
			return i;
    4d9c:	b2d8      	uxtb	r0, r3
    4d9e:	e7fa      	b.n	4d96 <_sercom_get_sercom_inst_index+0x2a>
    4da0:	0000e3ec 	.word	0x0000e3ec

00004da4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4da4:	4770      	bx	lr
	...

00004da8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4da8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4daa:	4b0a      	ldr	r3, [pc, #40]	; (4dd4 <_sercom_set_handler+0x2c>)
    4dac:	781b      	ldrb	r3, [r3, #0]
    4dae:	2b00      	cmp	r3, #0
    4db0:	d10c      	bne.n	4dcc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4db2:	4f09      	ldr	r7, [pc, #36]	; (4dd8 <_sercom_set_handler+0x30>)
    4db4:	4e09      	ldr	r6, [pc, #36]	; (4ddc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    4db6:	4d0a      	ldr	r5, [pc, #40]	; (4de0 <_sercom_set_handler+0x38>)
    4db8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4dba:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4dbc:	195a      	adds	r2, r3, r5
    4dbe:	6014      	str	r4, [r2, #0]
    4dc0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4dc2:	2b18      	cmp	r3, #24
    4dc4:	d1f9      	bne.n	4dba <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    4dc6:	2201      	movs	r2, #1
    4dc8:	4b02      	ldr	r3, [pc, #8]	; (4dd4 <_sercom_set_handler+0x2c>)
    4dca:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4dcc:	0080      	lsls	r0, r0, #2
    4dce:	4b02      	ldr	r3, [pc, #8]	; (4dd8 <_sercom_set_handler+0x30>)
    4dd0:	50c1      	str	r1, [r0, r3]
}
    4dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dd4:	200003e6 	.word	0x200003e6
    4dd8:	200003e8 	.word	0x200003e8
    4ddc:	00004da5 	.word	0x00004da5
    4de0:	2000106c 	.word	0x2000106c

00004de4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4de4:	b500      	push	{lr}
    4de6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4de8:	2309      	movs	r3, #9
    4dea:	466a      	mov	r2, sp
    4dec:	7013      	strb	r3, [r2, #0]
    4dee:	3301      	adds	r3, #1
    4df0:	7053      	strb	r3, [r2, #1]
    4df2:	3301      	adds	r3, #1
    4df4:	7093      	strb	r3, [r2, #2]
    4df6:	3301      	adds	r3, #1
    4df8:	70d3      	strb	r3, [r2, #3]
    4dfa:	3301      	adds	r3, #1
    4dfc:	7113      	strb	r3, [r2, #4]
    4dfe:	3301      	adds	r3, #1
    4e00:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4e02:	4b03      	ldr	r3, [pc, #12]	; (4e10 <_sercom_get_interrupt_vector+0x2c>)
    4e04:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4e06:	466b      	mov	r3, sp
    4e08:	5618      	ldrsb	r0, [r3, r0]
}
    4e0a:	b003      	add	sp, #12
    4e0c:	bd00      	pop	{pc}
    4e0e:	46c0      	nop			; (mov r8, r8)
    4e10:	00004d6d 	.word	0x00004d6d

00004e14 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4e14:	b510      	push	{r4, lr}
    4e16:	4b02      	ldr	r3, [pc, #8]	; (4e20 <SERCOM0_Handler+0xc>)
    4e18:	681b      	ldr	r3, [r3, #0]
    4e1a:	2000      	movs	r0, #0
    4e1c:	4798      	blx	r3
    4e1e:	bd10      	pop	{r4, pc}
    4e20:	200003e8 	.word	0x200003e8

00004e24 <SERCOM1_Handler>:
    4e24:	b510      	push	{r4, lr}
    4e26:	4b02      	ldr	r3, [pc, #8]	; (4e30 <SERCOM1_Handler+0xc>)
    4e28:	685b      	ldr	r3, [r3, #4]
    4e2a:	2001      	movs	r0, #1
    4e2c:	4798      	blx	r3
    4e2e:	bd10      	pop	{r4, pc}
    4e30:	200003e8 	.word	0x200003e8

00004e34 <SERCOM2_Handler>:
    4e34:	b510      	push	{r4, lr}
    4e36:	4b02      	ldr	r3, [pc, #8]	; (4e40 <SERCOM2_Handler+0xc>)
    4e38:	689b      	ldr	r3, [r3, #8]
    4e3a:	2002      	movs	r0, #2
    4e3c:	4798      	blx	r3
    4e3e:	bd10      	pop	{r4, pc}
    4e40:	200003e8 	.word	0x200003e8

00004e44 <SERCOM3_Handler>:
    4e44:	b510      	push	{r4, lr}
    4e46:	4b02      	ldr	r3, [pc, #8]	; (4e50 <SERCOM3_Handler+0xc>)
    4e48:	68db      	ldr	r3, [r3, #12]
    4e4a:	2003      	movs	r0, #3
    4e4c:	4798      	blx	r3
    4e4e:	bd10      	pop	{r4, pc}
    4e50:	200003e8 	.word	0x200003e8

00004e54 <SERCOM4_Handler>:
    4e54:	b510      	push	{r4, lr}
    4e56:	4b02      	ldr	r3, [pc, #8]	; (4e60 <SERCOM4_Handler+0xc>)
    4e58:	691b      	ldr	r3, [r3, #16]
    4e5a:	2004      	movs	r0, #4
    4e5c:	4798      	blx	r3
    4e5e:	bd10      	pop	{r4, pc}
    4e60:	200003e8 	.word	0x200003e8

00004e64 <SERCOM5_Handler>:
    4e64:	b510      	push	{r4, lr}
    4e66:	4b02      	ldr	r3, [pc, #8]	; (4e70 <SERCOM5_Handler+0xc>)
    4e68:	695b      	ldr	r3, [r3, #20]
    4e6a:	2005      	movs	r0, #5
    4e6c:	4798      	blx	r3
    4e6e:	bd10      	pop	{r4, pc}
    4e70:	200003e8 	.word	0x200003e8

00004e74 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4e74:	b570      	push	{r4, r5, r6, lr}
    4e76:	b082      	sub	sp, #8
    4e78:	0005      	movs	r5, r0
    4e7a:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4e7c:	2200      	movs	r2, #0
    4e7e:	466b      	mov	r3, sp
    4e80:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4e82:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4e84:	0030      	movs	r0, r6
    4e86:	4b24      	ldr	r3, [pc, #144]	; (4f18 <spi_set_baudrate+0xa4>)
    4e88:	4798      	blx	r3
    4e8a:	231f      	movs	r3, #31
    4e8c:	4018      	ands	r0, r3
    4e8e:	3b1e      	subs	r3, #30
    4e90:	4083      	lsls	r3, r0
    4e92:	2280      	movs	r2, #128	; 0x80
    4e94:	4921      	ldr	r1, [pc, #132]	; (4f1c <spi_set_baudrate+0xa8>)
    4e96:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4e98:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4e9a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	d1fc      	bne.n	4e9a <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4ea0:	338f      	adds	r3, #143	; 0x8f
    4ea2:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4ea4:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4ea6:	6833      	ldr	r3, [r6, #0]
    4ea8:	2202      	movs	r2, #2
    4eaa:	4393      	bics	r3, r2
    4eac:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4eae:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4eb0:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d1fc      	bne.n	4eb0 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4eb6:	4b1a      	ldr	r3, [pc, #104]	; (4f20 <spi_set_baudrate+0xac>)
    4eb8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4eba:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4ebc:	b2c0      	uxtb	r0, r0
    4ebe:	4b19      	ldr	r3, [pc, #100]	; (4f24 <spi_set_baudrate+0xb0>)
    4ec0:	4798      	blx	r3
    4ec2:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4ec4:	466b      	mov	r3, sp
    4ec6:	1d9a      	adds	r2, r3, #6
    4ec8:	0020      	movs	r0, r4
    4eca:	4b17      	ldr	r3, [pc, #92]	; (4f28 <spi_set_baudrate+0xb4>)
    4ecc:	4798      	blx	r3
    4ece:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    4ed0:	d003      	beq.n	4eda <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4ed2:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    4ed4:	0020      	movs	r0, r4
    4ed6:	b002      	add	sp, #8
    4ed8:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    4eda:	466b      	mov	r3, sp
    4edc:	3306      	adds	r3, #6
    4ede:	781b      	ldrb	r3, [r3, #0]
    4ee0:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4ee2:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4ee4:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d1fc      	bne.n	4ee4 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4eea:	0030      	movs	r0, r6
    4eec:	4b0a      	ldr	r3, [pc, #40]	; (4f18 <spi_set_baudrate+0xa4>)
    4eee:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4ef0:	231f      	movs	r3, #31
    4ef2:	4018      	ands	r0, r3
    4ef4:	3b1e      	subs	r3, #30
    4ef6:	4083      	lsls	r3, r0
    4ef8:	4a08      	ldr	r2, [pc, #32]	; (4f1c <spi_set_baudrate+0xa8>)
    4efa:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4efc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4efe:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4f00:	2b00      	cmp	r3, #0
    4f02:	d1fc      	bne.n	4efe <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4f04:	6833      	ldr	r3, [r6, #0]
    4f06:	2202      	movs	r2, #2
    4f08:	4313      	orrs	r3, r2
    4f0a:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4f0c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4f0e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4f10:	2b00      	cmp	r3, #0
    4f12:	d1fc      	bne.n	4f0e <spi_set_baudrate+0x9a>
    4f14:	e7de      	b.n	4ed4 <spi_set_baudrate+0x60>
    4f16:	46c0      	nop			; (mov r8, r8)
    4f18:	00004de5 	.word	0x00004de5
    4f1c:	e000e100 	.word	0xe000e100
    4f20:	00004d6d 	.word	0x00004d6d
    4f24:	00006141 	.word	0x00006141
    4f28:	00004aeb 	.word	0x00004aeb

00004f2c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f2e:	b08b      	sub	sp, #44	; 0x2c
    4f30:	0005      	movs	r5, r0
    4f32:	000c      	movs	r4, r1
    4f34:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4f36:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4f38:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    4f3a:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4f3c:	079b      	lsls	r3, r3, #30
    4f3e:	d501      	bpl.n	4f44 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4f40:	b00b      	add	sp, #44	; 0x2c
    4f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4f44:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    4f46:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4f48:	07db      	lsls	r3, r3, #31
    4f4a:	d4f9      	bmi.n	4f40 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4f4c:	0008      	movs	r0, r1
    4f4e:	4b60      	ldr	r3, [pc, #384]	; (50d0 <spi_init+0x1a4>)
    4f50:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4f52:	4a60      	ldr	r2, [pc, #384]	; (50d4 <spi_init+0x1a8>)
    4f54:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4f56:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4f58:	2301      	movs	r3, #1
    4f5a:	40bb      	lsls	r3, r7
    4f5c:	430b      	orrs	r3, r1
    4f5e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4f60:	a909      	add	r1, sp, #36	; 0x24
    4f62:	2724      	movs	r7, #36	; 0x24
    4f64:	5df3      	ldrb	r3, [r6, r7]
    4f66:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4f68:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4f6a:	b2c3      	uxtb	r3, r0
    4f6c:	9301      	str	r3, [sp, #4]
    4f6e:	0018      	movs	r0, r3
    4f70:	4b59      	ldr	r3, [pc, #356]	; (50d8 <spi_init+0x1ac>)
    4f72:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4f74:	9801      	ldr	r0, [sp, #4]
    4f76:	4b59      	ldr	r3, [pc, #356]	; (50dc <spi_init+0x1b0>)
    4f78:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4f7a:	5df0      	ldrb	r0, [r6, r7]
    4f7c:	2100      	movs	r1, #0
    4f7e:	4b58      	ldr	r3, [pc, #352]	; (50e0 <spi_init+0x1b4>)
    4f80:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4f82:	7833      	ldrb	r3, [r6, #0]
    4f84:	2b01      	cmp	r3, #1
    4f86:	d038      	beq.n	4ffa <spi_init+0xce>
    4f88:	002b      	movs	r3, r5
    4f8a:	330c      	adds	r3, #12
    4f8c:	0029      	movs	r1, r5
    4f8e:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    4f90:	2200      	movs	r2, #0
    4f92:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4f94:	428b      	cmp	r3, r1
    4f96:	d1fc      	bne.n	4f92 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    4f98:	2300      	movs	r3, #0
    4f9a:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4f9c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4f9e:	2400      	movs	r4, #0
    4fa0:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4fa2:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4fa4:	3336      	adds	r3, #54	; 0x36
    4fa6:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4fa8:	3301      	adds	r3, #1
    4faa:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4fac:	3301      	adds	r3, #1
    4fae:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    4fb0:	3b35      	subs	r3, #53	; 0x35
    4fb2:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4fb4:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4fb6:	6828      	ldr	r0, [r5, #0]
    4fb8:	4b45      	ldr	r3, [pc, #276]	; (50d0 <spi_init+0x1a4>)
    4fba:	4798      	blx	r3
    4fbc:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4fbe:	4949      	ldr	r1, [pc, #292]	; (50e4 <spi_init+0x1b8>)
    4fc0:	4b49      	ldr	r3, [pc, #292]	; (50e8 <spi_init+0x1bc>)
    4fc2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4fc4:	00bf      	lsls	r7, r7, #2
    4fc6:	4b49      	ldr	r3, [pc, #292]	; (50ec <spi_init+0x1c0>)
    4fc8:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4fca:	682f      	ldr	r7, [r5, #0]
    4fcc:	ab04      	add	r3, sp, #16
    4fce:	2280      	movs	r2, #128	; 0x80
    4fd0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4fd2:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4fd4:	3a7f      	subs	r2, #127	; 0x7f
    4fd6:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4fd8:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    4fda:	7833      	ldrb	r3, [r6, #0]
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d102      	bne.n	4fe6 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4fe0:	2200      	movs	r2, #0
    4fe2:	ab04      	add	r3, sp, #16
    4fe4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4fe6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4fe8:	9305      	str	r3, [sp, #20]
    4fea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4fec:	9306      	str	r3, [sp, #24]
    4fee:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4ff0:	9307      	str	r3, [sp, #28]
    4ff2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4ff4:	9308      	str	r3, [sp, #32]
    4ff6:	2400      	movs	r4, #0
    4ff8:	e00b      	b.n	5012 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4ffa:	6823      	ldr	r3, [r4, #0]
    4ffc:	220c      	movs	r2, #12
    4ffe:	4313      	orrs	r3, r2
    5000:	6023      	str	r3, [r4, #0]
    5002:	e7c1      	b.n	4f88 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5004:	0038      	movs	r0, r7
    5006:	4b3a      	ldr	r3, [pc, #232]	; (50f0 <spi_init+0x1c4>)
    5008:	4798      	blx	r3
    500a:	e00a      	b.n	5022 <spi_init+0xf6>
    500c:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    500e:	2c04      	cmp	r4, #4
    5010:	d010      	beq.n	5034 <spi_init+0x108>
    5012:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5014:	00a3      	lsls	r3, r4, #2
    5016:	aa02      	add	r2, sp, #8
    5018:	200c      	movs	r0, #12
    501a:	1812      	adds	r2, r2, r0
    501c:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    501e:	2800      	cmp	r0, #0
    5020:	d0f0      	beq.n	5004 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    5022:	1c43      	adds	r3, r0, #1
    5024:	d0f2      	beq.n	500c <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5026:	a904      	add	r1, sp, #16
    5028:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    502a:	0c00      	lsrs	r0, r0, #16
    502c:	b2c0      	uxtb	r0, r0
    502e:	4b31      	ldr	r3, [pc, #196]	; (50f4 <spi_init+0x1c8>)
    5030:	4798      	blx	r3
    5032:	e7eb      	b.n	500c <spi_init+0xe0>
	module->mode             = config->mode;
    5034:	7833      	ldrb	r3, [r6, #0]
    5036:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    5038:	7c33      	ldrb	r3, [r6, #16]
    503a:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    503c:	7cb3      	ldrb	r3, [r6, #18]
    503e:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5040:	7d33      	ldrb	r3, [r6, #20]
    5042:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    5044:	2200      	movs	r2, #0
    5046:	ab02      	add	r3, sp, #8
    5048:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    504a:	7833      	ldrb	r3, [r6, #0]
    504c:	2b01      	cmp	r3, #1
    504e:	d028      	beq.n	50a2 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    5050:	6873      	ldr	r3, [r6, #4]
    5052:	68b2      	ldr	r2, [r6, #8]
    5054:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    5056:	68f2      	ldr	r2, [r6, #12]
    5058:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    505a:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    505c:	7c72      	ldrb	r2, [r6, #17]
    505e:	2a00      	cmp	r2, #0
    5060:	d103      	bne.n	506a <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5062:	4a25      	ldr	r2, [pc, #148]	; (50f8 <spi_init+0x1cc>)
    5064:	7892      	ldrb	r2, [r2, #2]
    5066:	0792      	lsls	r2, r2, #30
    5068:	d501      	bpl.n	506e <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    506a:	2280      	movs	r2, #128	; 0x80
    506c:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    506e:	7cb2      	ldrb	r2, [r6, #18]
    5070:	2a00      	cmp	r2, #0
    5072:	d002      	beq.n	507a <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5074:	2280      	movs	r2, #128	; 0x80
    5076:	0292      	lsls	r2, r2, #10
    5078:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    507a:	7cf2      	ldrb	r2, [r6, #19]
    507c:	2a00      	cmp	r2, #0
    507e:	d002      	beq.n	5086 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5080:	2280      	movs	r2, #128	; 0x80
    5082:	0092      	lsls	r2, r2, #2
    5084:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    5086:	7d32      	ldrb	r2, [r6, #20]
    5088:	2a00      	cmp	r2, #0
    508a:	d002      	beq.n	5092 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    508c:	2280      	movs	r2, #128	; 0x80
    508e:	0192      	lsls	r2, r2, #6
    5090:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    5092:	683a      	ldr	r2, [r7, #0]
    5094:	4313      	orrs	r3, r2
    5096:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5098:	687b      	ldr	r3, [r7, #4]
    509a:	430b      	orrs	r3, r1
    509c:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    509e:	2000      	movs	r0, #0
    50a0:	e74e      	b.n	4f40 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    50a2:	6828      	ldr	r0, [r5, #0]
    50a4:	4b0a      	ldr	r3, [pc, #40]	; (50d0 <spi_init+0x1a4>)
    50a6:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    50a8:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    50aa:	b2c0      	uxtb	r0, r0
    50ac:	4b13      	ldr	r3, [pc, #76]	; (50fc <spi_init+0x1d0>)
    50ae:	4798      	blx	r3
    50b0:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    50b2:	ab02      	add	r3, sp, #8
    50b4:	1d9a      	adds	r2, r3, #6
    50b6:	69b0      	ldr	r0, [r6, #24]
    50b8:	4b11      	ldr	r3, [pc, #68]	; (5100 <spi_init+0x1d4>)
    50ba:	4798      	blx	r3
    50bc:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    50be:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    50c0:	2b00      	cmp	r3, #0
    50c2:	d000      	beq.n	50c6 <spi_init+0x19a>
    50c4:	e73c      	b.n	4f40 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    50c6:	ab02      	add	r3, sp, #8
    50c8:	3306      	adds	r3, #6
    50ca:	781b      	ldrb	r3, [r3, #0]
    50cc:	733b      	strb	r3, [r7, #12]
    50ce:	e7bf      	b.n	5050 <spi_init+0x124>
    50d0:	00004d6d 	.word	0x00004d6d
    50d4:	40000400 	.word	0x40000400
    50d8:	00006125 	.word	0x00006125
    50dc:	00006099 	.word	0x00006099
    50e0:	00004ba9 	.word	0x00004ba9
    50e4:	00005399 	.word	0x00005399
    50e8:	00004da9 	.word	0x00004da9
    50ec:	2000106c 	.word	0x2000106c
    50f0:	00004bf5 	.word	0x00004bf5
    50f4:	0000621d 	.word	0x0000621d
    50f8:	41002000 	.word	0x41002000
    50fc:	00006141 	.word	0x00006141
    5100:	00004aeb 	.word	0x00004aeb

00005104 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    5104:	b5f0      	push	{r4, r5, r6, r7, lr}
    5106:	46d6      	mov	lr, sl
    5108:	4647      	mov	r7, r8
    510a:	b580      	push	{r7, lr}
    510c:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    510e:	2438      	movs	r4, #56	; 0x38
    5110:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    5112:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    5114:	2d05      	cmp	r5, #5
    5116:	d002      	beq.n	511e <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5118:	3412      	adds	r4, #18
	if (length == 0) {
    511a:	2a00      	cmp	r2, #0
    511c:	d105      	bne.n	512a <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    511e:	0020      	movs	r0, r4
    5120:	b003      	add	sp, #12
    5122:	bc0c      	pop	{r2, r3}
    5124:	4690      	mov	r8, r2
    5126:	469a      	mov	sl, r3
    5128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    512a:	79c4      	ldrb	r4, [r0, #7]
    512c:	2c00      	cmp	r4, #0
    512e:	d144      	bne.n	51ba <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    5130:	341c      	adds	r4, #28
    5132:	e7f4      	b.n	511e <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5134:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5136:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    5138:	423c      	tst	r4, r7
    513a:	d0fc      	beq.n	5136 <spi_read_buffer_wait+0x32>
    513c:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    513e:	423c      	tst	r4, r7
    5140:	d01a      	beq.n	5178 <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5142:	4644      	mov	r4, r8
    5144:	62ac      	str	r4, [r5, #40]	; 0x28
    5146:	e017      	b.n	5178 <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5148:	7984      	ldrb	r4, [r0, #6]
    514a:	2c01      	cmp	r4, #1
    514c:	d026      	beq.n	519c <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    514e:	6aad      	ldr	r5, [r5, #40]	; 0x28
    5150:	b2ec      	uxtb	r4, r5
    5152:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    5154:	9c01      	ldr	r4, [sp, #4]
    5156:	2c00      	cmp	r4, #0
    5158:	d13a      	bne.n	51d0 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    515a:	1c75      	adds	r5, r6, #1
    515c:	b2ad      	uxth	r5, r5
    515e:	4664      	mov	r4, ip
    5160:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5162:	7984      	ldrb	r4, [r0, #6]
    5164:	2c01      	cmp	r4, #1
    5166:	d01e      	beq.n	51a6 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    5168:	002e      	movs	r6, r5
	while (length--) {
    516a:	3a01      	subs	r2, #1
    516c:	b292      	uxth	r2, r2
    516e:	4552      	cmp	r2, sl
    5170:	d01f      	beq.n	51b2 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    5172:	7944      	ldrb	r4, [r0, #5]
    5174:	2c01      	cmp	r4, #1
    5176:	d0dd      	beq.n	5134 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5178:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    517a:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    517c:	421c      	tst	r4, r3
    517e:	d0fc      	beq.n	517a <spi_read_buffer_wait+0x76>
    5180:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    5182:	421c      	tst	r4, r3
    5184:	d017      	beq.n	51b6 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5186:	8b6c      	ldrh	r4, [r5, #26]
    5188:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    518a:	2400      	movs	r4, #0
    518c:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    518e:	4664      	mov	r4, ip
    5190:	421c      	tst	r4, r3
    5192:	d0d9      	beq.n	5148 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5194:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    5196:	241e      	movs	r4, #30
    5198:	9401      	str	r4, [sp, #4]
    519a:	e7d5      	b.n	5148 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    519c:	6aac      	ldr	r4, [r5, #40]	; 0x28
    519e:	05e4      	lsls	r4, r4, #23
    51a0:	0de4      	lsrs	r4, r4, #23
    51a2:	46a4      	mov	ip, r4
    51a4:	e7d6      	b.n	5154 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    51a6:	3602      	adds	r6, #2
    51a8:	b2b6      	uxth	r6, r6
    51aa:	4664      	mov	r4, ip
    51ac:	0a24      	lsrs	r4, r4, #8
    51ae:	554c      	strb	r4, [r1, r5]
    51b0:	e7db      	b.n	516a <spi_read_buffer_wait+0x66>
    51b2:	9c01      	ldr	r4, [sp, #4]
    51b4:	e7b3      	b.n	511e <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    51b6:	2410      	movs	r4, #16
    51b8:	e7b1      	b.n	511e <spi_read_buffer_wait+0x1a>
	while (length--) {
    51ba:	3a01      	subs	r2, #1
    51bc:	b292      	uxth	r2, r2
    51be:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    51c0:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    51c2:	05db      	lsls	r3, r3, #23
    51c4:	0ddb      	lsrs	r3, r3, #23
    51c6:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    51c8:	2304      	movs	r3, #4
	while (length--) {
    51ca:	4c02      	ldr	r4, [pc, #8]	; (51d4 <spi_read_buffer_wait+0xd0>)
    51cc:	46a2      	mov	sl, r4
    51ce:	e7d0      	b.n	5172 <spi_read_buffer_wait+0x6e>
    51d0:	9c01      	ldr	r4, [sp, #4]
    51d2:	e7a4      	b.n	511e <spi_read_buffer_wait+0x1a>
    51d4:	0000ffff 	.word	0x0000ffff

000051d8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    51d8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    51da:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    51dc:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    51de:	2c01      	cmp	r4, #1
    51e0:	d001      	beq.n	51e6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    51e2:	0018      	movs	r0, r3
    51e4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    51e6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    51e8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    51ea:	2c00      	cmp	r4, #0
    51ec:	d1f9      	bne.n	51e2 <spi_select_slave+0xa>
		if (select) {
    51ee:	2a00      	cmp	r2, #0
    51f0:	d058      	beq.n	52a4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    51f2:	784b      	ldrb	r3, [r1, #1]
    51f4:	2b00      	cmp	r3, #0
    51f6:	d044      	beq.n	5282 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    51f8:	6803      	ldr	r3, [r0, #0]
    51fa:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    51fc:	07db      	lsls	r3, r3, #31
    51fe:	d410      	bmi.n	5222 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5200:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5202:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5204:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5206:	2900      	cmp	r1, #0
    5208:	d104      	bne.n	5214 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    520a:	0953      	lsrs	r3, r2, #5
    520c:	01db      	lsls	r3, r3, #7
    520e:	492e      	ldr	r1, [pc, #184]	; (52c8 <spi_select_slave+0xf0>)
    5210:	468c      	mov	ip, r1
    5212:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5214:	211f      	movs	r1, #31
    5216:	4011      	ands	r1, r2
    5218:	2201      	movs	r2, #1
    521a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    521c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    521e:	2305      	movs	r3, #5
    5220:	e7df      	b.n	51e2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5222:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5224:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5226:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5228:	2c00      	cmp	r4, #0
    522a:	d104      	bne.n	5236 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    522c:	0953      	lsrs	r3, r2, #5
    522e:	01db      	lsls	r3, r3, #7
    5230:	4c25      	ldr	r4, [pc, #148]	; (52c8 <spi_select_slave+0xf0>)
    5232:	46a4      	mov	ip, r4
    5234:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5236:	241f      	movs	r4, #31
    5238:	4014      	ands	r4, r2
    523a:	2201      	movs	r2, #1
    523c:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    523e:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5240:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5242:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5244:	07d2      	lsls	r2, r2, #31
    5246:	d501      	bpl.n	524c <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5248:	788a      	ldrb	r2, [r1, #2]
    524a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    524c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    524e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5250:	2a00      	cmp	r2, #0
    5252:	d1c6      	bne.n	51e2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5254:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    5256:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5258:	7e13      	ldrb	r3, [r2, #24]
    525a:	420b      	tst	r3, r1
    525c:	d0fc      	beq.n	5258 <spi_select_slave+0x80>
    525e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5260:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    5262:	0749      	lsls	r1, r1, #29
    5264:	d5bd      	bpl.n	51e2 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5266:	8b53      	ldrh	r3, [r2, #26]
    5268:	075b      	lsls	r3, r3, #29
    526a:	d501      	bpl.n	5270 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    526c:	2304      	movs	r3, #4
    526e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5270:	7983      	ldrb	r3, [r0, #6]
    5272:	2b01      	cmp	r3, #1
    5274:	d002      	beq.n	527c <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5276:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5278:	2300      	movs	r3, #0
    527a:	e7b2      	b.n	51e2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    527c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    527e:	2300      	movs	r3, #0
    5280:	e7af      	b.n	51e2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5282:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5284:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5286:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5288:	2900      	cmp	r1, #0
    528a:	d104      	bne.n	5296 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    528c:	0953      	lsrs	r3, r2, #5
    528e:	01db      	lsls	r3, r3, #7
    5290:	490d      	ldr	r1, [pc, #52]	; (52c8 <spi_select_slave+0xf0>)
    5292:	468c      	mov	ip, r1
    5294:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5296:	211f      	movs	r1, #31
    5298:	4011      	ands	r1, r2
    529a:	2201      	movs	r2, #1
    529c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    529e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    52a0:	2300      	movs	r3, #0
    52a2:	e79e      	b.n	51e2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    52a4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    52a6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    52a8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    52aa:	2900      	cmp	r1, #0
    52ac:	d104      	bne.n	52b8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    52ae:	0953      	lsrs	r3, r2, #5
    52b0:	01db      	lsls	r3, r3, #7
    52b2:	4905      	ldr	r1, [pc, #20]	; (52c8 <spi_select_slave+0xf0>)
    52b4:	468c      	mov	ip, r1
    52b6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    52b8:	211f      	movs	r1, #31
    52ba:	4011      	ands	r1, r2
    52bc:	2201      	movs	r2, #1
    52be:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    52c0:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    52c2:	2300      	movs	r3, #0
    52c4:	e78d      	b.n	51e2 <spi_select_slave+0xa>
    52c6:	46c0      	nop			; (mov r8, r8)
    52c8:	41004400 	.word	0x41004400

000052cc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    52cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    52ce:	46de      	mov	lr, fp
    52d0:	4657      	mov	r7, sl
    52d2:	464e      	mov	r6, r9
    52d4:	4645      	mov	r5, r8
    52d6:	b5e0      	push	{r5, r6, r7, lr}
    52d8:	b083      	sub	sp, #12
    52da:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    52dc:	2338      	movs	r3, #56	; 0x38
    52de:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    52e0:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    52e2:	2c05      	cmp	r4, #5
    52e4:	d002      	beq.n	52ec <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    52e6:	3312      	adds	r3, #18
	if (length == 0) {
    52e8:	2a00      	cmp	r2, #0
    52ea:	d14b      	bne.n	5384 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    52ec:	0018      	movs	r0, r3
    52ee:	b003      	add	sp, #12
    52f0:	bc3c      	pop	{r2, r3, r4, r5}
    52f2:	4690      	mov	r8, r2
    52f4:	4699      	mov	r9, r3
    52f6:	46a2      	mov	sl, r4
    52f8:	46ab      	mov	fp, r5
    52fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    52fc:	3702      	adds	r7, #2
    52fe:	b2bf      	uxth	r7, r7
    5300:	4641      	mov	r1, r8
    5302:	4653      	mov	r3, sl
    5304:	5c59      	ldrb	r1, [r3, r1]
    5306:	0209      	lsls	r1, r1, #8
    5308:	465b      	mov	r3, fp
    530a:	430b      	orrs	r3, r1
    530c:	e018      	b.n	5340 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    530e:	7983      	ldrb	r3, [r0, #6]
    5310:	2b01      	cmp	r3, #1
    5312:	d02a      	beq.n	536a <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5314:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    5316:	3e01      	subs	r6, #1
    5318:	b2b6      	uxth	r6, r6
    531a:	4566      	cmp	r6, ip
    531c:	d027      	beq.n	536e <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    531e:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5320:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    5322:	4223      	tst	r3, r4
    5324:	d0fc      	beq.n	5320 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    5326:	1c7b      	adds	r3, r7, #1
    5328:	b29b      	uxth	r3, r3
    532a:	4698      	mov	r8, r3
    532c:	4653      	mov	r3, sl
    532e:	5ddb      	ldrb	r3, [r3, r7]
    5330:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5332:	7981      	ldrb	r1, [r0, #6]
    5334:	2901      	cmp	r1, #1
    5336:	d0e1      	beq.n	52fc <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    5338:	4669      	mov	r1, sp
    533a:	80cb      	strh	r3, [r1, #6]
    533c:	88cb      	ldrh	r3, [r1, #6]
    533e:	4647      	mov	r7, r8
    5340:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    5342:	4221      	tst	r1, r4
    5344:	d002      	beq.n	534c <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5346:	05db      	lsls	r3, r3, #23
    5348:	0ddb      	lsrs	r3, r3, #23
    534a:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    534c:	79c3      	ldrb	r3, [r0, #7]
    534e:	2b00      	cmp	r3, #0
    5350:	d0e1      	beq.n	5316 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5352:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5354:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    5356:	422b      	tst	r3, r5
    5358:	d0fc      	beq.n	5354 <spi_write_buffer_wait+0x88>
    535a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    535c:	422b      	tst	r3, r5
    535e:	d0da      	beq.n	5316 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5360:	8b53      	ldrh	r3, [r2, #26]
    5362:	422b      	tst	r3, r5
    5364:	d0d3      	beq.n	530e <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5366:	8355      	strh	r5, [r2, #26]
    5368:	e7d1      	b.n	530e <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    536a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    536c:	e7d3      	b.n	5316 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    536e:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    5370:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    5372:	2a01      	cmp	r2, #1
    5374:	d1ba      	bne.n	52ec <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5376:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    5378:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    537a:	7e0b      	ldrb	r3, [r1, #24]
    537c:	4213      	tst	r3, r2
    537e:	d0fc      	beq.n	537a <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    5380:	2300      	movs	r3, #0
    5382:	e7b3      	b.n	52ec <spi_write_buffer_wait+0x20>
	while (length--) {
    5384:	3a01      	subs	r2, #1
    5386:	b296      	uxth	r6, r2
    5388:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    538a:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    538c:	2504      	movs	r5, #4
	while (length--) {
    538e:	4b01      	ldr	r3, [pc, #4]	; (5394 <spi_write_buffer_wait+0xc8>)
    5390:	469c      	mov	ip, r3
    5392:	e7c4      	b.n	531e <spi_write_buffer_wait+0x52>
    5394:	0000ffff 	.word	0x0000ffff

00005398 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    5398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    539a:	0080      	lsls	r0, r0, #2
    539c:	4b70      	ldr	r3, [pc, #448]	; (5560 <_spi_interrupt_handler+0x1c8>)
    539e:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    53a0:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    53a2:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    53a4:	5ce7      	ldrb	r7, [r4, r3]
    53a6:	2236      	movs	r2, #54	; 0x36
    53a8:	5ca2      	ldrb	r2, [r4, r2]
    53aa:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    53ac:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    53ae:	7db5      	ldrb	r5, [r6, #22]
    53b0:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    53b2:	07eb      	lsls	r3, r5, #31
    53b4:	d502      	bpl.n	53bc <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    53b6:	7963      	ldrb	r3, [r4, #5]
    53b8:	2b01      	cmp	r3, #1
    53ba:	d01e      	beq.n	53fa <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    53bc:	076b      	lsls	r3, r5, #29
    53be:	d511      	bpl.n	53e4 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    53c0:	8b73      	ldrh	r3, [r6, #26]
    53c2:	075b      	lsls	r3, r3, #29
    53c4:	d55a      	bpl.n	547c <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    53c6:	7a63      	ldrb	r3, [r4, #9]
    53c8:	2b01      	cmp	r3, #1
    53ca:	d008      	beq.n	53de <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    53cc:	221e      	movs	r2, #30
    53ce:	2338      	movs	r3, #56	; 0x38
    53d0:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    53d2:	3b35      	subs	r3, #53	; 0x35
    53d4:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    53d6:	3302      	adds	r3, #2
    53d8:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    53da:	073b      	lsls	r3, r7, #28
    53dc:	d44a      	bmi.n	5474 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    53de:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    53e0:	2304      	movs	r3, #4
    53e2:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    53e4:	07ab      	lsls	r3, r5, #30
    53e6:	d503      	bpl.n	53f0 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    53e8:	7963      	ldrb	r3, [r4, #5]
    53ea:	2b01      	cmp	r3, #1
    53ec:	d100      	bne.n	53f0 <_spi_interrupt_handler+0x58>
    53ee:	e097      	b.n	5520 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    53f0:	b26d      	sxtb	r5, r5
    53f2:	2d00      	cmp	r5, #0
    53f4:	da00      	bge.n	53f8 <_spi_interrupt_handler+0x60>
    53f6:	e0a9      	b.n	554c <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    53f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    53fa:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    53fc:	2b00      	cmp	r3, #0
    53fe:	d022      	beq.n	5446 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    5400:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    5402:	2b00      	cmp	r3, #0
    5404:	d0da      	beq.n	53bc <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5406:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    5408:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    540a:	7813      	ldrb	r3, [r2, #0]
    540c:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    540e:	1c50      	adds	r0, r2, #1
    5410:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5412:	79a0      	ldrb	r0, [r4, #6]
    5414:	2801      	cmp	r0, #1
    5416:	d027      	beq.n	5468 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    5418:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    541a:	05db      	lsls	r3, r3, #23
    541c:	0ddb      	lsrs	r3, r3, #23
    541e:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    5420:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    5422:	3b01      	subs	r3, #1
    5424:	b29b      	uxth	r3, r3
    5426:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    5428:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    542a:	b29b      	uxth	r3, r3
    542c:	2b00      	cmp	r3, #0
    542e:	d1c5      	bne.n	53bc <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5430:	3301      	adds	r3, #1
    5432:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    5434:	7a63      	ldrb	r3, [r4, #9]
    5436:	2b01      	cmp	r3, #1
    5438:	d1c0      	bne.n	53bc <_spi_interrupt_handler+0x24>
    543a:	79e3      	ldrb	r3, [r4, #7]
    543c:	2b00      	cmp	r3, #0
    543e:	d1bd      	bne.n	53bc <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5440:	3302      	adds	r3, #2
    5442:	75b3      	strb	r3, [r6, #22]
    5444:	e7ba      	b.n	53bc <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    5446:	4b47      	ldr	r3, [pc, #284]	; (5564 <_spi_interrupt_handler+0x1cc>)
    5448:	881b      	ldrh	r3, [r3, #0]
    544a:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    544c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    544e:	3b01      	subs	r3, #1
    5450:	b29b      	uxth	r3, r3
    5452:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    5454:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5456:	b29b      	uxth	r3, r3
    5458:	2b00      	cmp	r3, #0
    545a:	d101      	bne.n	5460 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    545c:	3301      	adds	r3, #1
    545e:	7533      	strb	r3, [r6, #20]
		if (0
    5460:	7963      	ldrb	r3, [r4, #5]
    5462:	2b01      	cmp	r3, #1
    5464:	d0cc      	beq.n	5400 <_spi_interrupt_handler+0x68>
    5466:	e7a9      	b.n	53bc <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    5468:	7850      	ldrb	r0, [r2, #1]
    546a:	0200      	lsls	r0, r0, #8
    546c:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    546e:	3202      	adds	r2, #2
    5470:	62e2      	str	r2, [r4, #44]	; 0x2c
    5472:	e7d2      	b.n	541a <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    5474:	0020      	movs	r0, r4
    5476:	69a3      	ldr	r3, [r4, #24]
    5478:	4798      	blx	r3
    547a:	e7b0      	b.n	53de <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    547c:	7a63      	ldrb	r3, [r4, #9]
    547e:	2b01      	cmp	r3, #1
    5480:	d028      	beq.n	54d4 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5482:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    5484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5486:	05db      	lsls	r3, r3, #23
    5488:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    548a:	b2da      	uxtb	r2, r3
    548c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    548e:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    5490:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5492:	1c51      	adds	r1, r2, #1
    5494:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5496:	79a1      	ldrb	r1, [r4, #6]
    5498:	2901      	cmp	r1, #1
    549a:	d034      	beq.n	5506 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    549c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    549e:	3b01      	subs	r3, #1
    54a0:	b29b      	uxth	r3, r3
    54a2:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    54a4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    54a6:	b29b      	uxth	r3, r3
    54a8:	2b00      	cmp	r3, #0
    54aa:	d000      	beq.n	54ae <_spi_interrupt_handler+0x116>
    54ac:	e79a      	b.n	53e4 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    54ae:	2200      	movs	r2, #0
    54b0:	3338      	adds	r3, #56	; 0x38
    54b2:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    54b4:	3b34      	subs	r3, #52	; 0x34
    54b6:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    54b8:	7a63      	ldrb	r3, [r4, #9]
    54ba:	2b02      	cmp	r3, #2
    54bc:	d029      	beq.n	5512 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    54be:	7a63      	ldrb	r3, [r4, #9]
    54c0:	2b00      	cmp	r3, #0
    54c2:	d000      	beq.n	54c6 <_spi_interrupt_handler+0x12e>
    54c4:	e78e      	b.n	53e4 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    54c6:	07bb      	lsls	r3, r7, #30
    54c8:	d400      	bmi.n	54cc <_spi_interrupt_handler+0x134>
    54ca:	e78b      	b.n	53e4 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    54cc:	0020      	movs	r0, r4
    54ce:	6923      	ldr	r3, [r4, #16]
    54d0:	4798      	blx	r3
    54d2:	e787      	b.n	53e4 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    54d4:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    54d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    54d8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    54da:	3b01      	subs	r3, #1
    54dc:	b29b      	uxth	r3, r3
    54de:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    54e0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    54e2:	b29b      	uxth	r3, r3
    54e4:	2b00      	cmp	r3, #0
    54e6:	d000      	beq.n	54ea <_spi_interrupt_handler+0x152>
    54e8:	e77c      	b.n	53e4 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    54ea:	3304      	adds	r3, #4
    54ec:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    54ee:	2200      	movs	r2, #0
    54f0:	3334      	adds	r3, #52	; 0x34
    54f2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    54f4:	3b35      	subs	r3, #53	; 0x35
    54f6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    54f8:	07fb      	lsls	r3, r7, #31
    54fa:	d400      	bmi.n	54fe <_spi_interrupt_handler+0x166>
    54fc:	e772      	b.n	53e4 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    54fe:	0020      	movs	r0, r4
    5500:	68e3      	ldr	r3, [r4, #12]
    5502:	4798      	blx	r3
    5504:	e76e      	b.n	53e4 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    5506:	0a1b      	lsrs	r3, r3, #8
    5508:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    550a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    550c:	3301      	adds	r3, #1
    550e:	62a3      	str	r3, [r4, #40]	; 0x28
    5510:	e7c4      	b.n	549c <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    5512:	077b      	lsls	r3, r7, #29
    5514:	d400      	bmi.n	5518 <_spi_interrupt_handler+0x180>
    5516:	e765      	b.n	53e4 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    5518:	0020      	movs	r0, r4
    551a:	6963      	ldr	r3, [r4, #20]
    551c:	4798      	blx	r3
    551e:	e761      	b.n	53e4 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5520:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    5522:	2b01      	cmp	r3, #1
    5524:	d000      	beq.n	5528 <_spi_interrupt_handler+0x190>
    5526:	e763      	b.n	53f0 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5528:	79e3      	ldrb	r3, [r4, #7]
    552a:	2b00      	cmp	r3, #0
    552c:	d000      	beq.n	5530 <_spi_interrupt_handler+0x198>
    552e:	e75f      	b.n	53f0 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5530:	3302      	adds	r3, #2
    5532:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    5534:	3301      	adds	r3, #1
    5536:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    5538:	2200      	movs	r2, #0
    553a:	3335      	adds	r3, #53	; 0x35
    553c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    553e:	07fb      	lsls	r3, r7, #31
    5540:	d400      	bmi.n	5544 <_spi_interrupt_handler+0x1ac>
    5542:	e755      	b.n	53f0 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    5544:	0020      	movs	r0, r4
    5546:	68e3      	ldr	r3, [r4, #12]
    5548:	4798      	blx	r3
    554a:	e751      	b.n	53f0 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    554c:	2380      	movs	r3, #128	; 0x80
    554e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5550:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    5552:	067b      	lsls	r3, r7, #25
    5554:	d400      	bmi.n	5558 <_spi_interrupt_handler+0x1c0>
    5556:	e74f      	b.n	53f8 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    5558:	6a63      	ldr	r3, [r4, #36]	; 0x24
    555a:	0020      	movs	r0, r4
    555c:	4798      	blx	r3
}
    555e:	e74b      	b.n	53f8 <_spi_interrupt_handler+0x60>
    5560:	2000106c 	.word	0x2000106c
    5564:	20001084 	.word	0x20001084

00005568 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5568:	b5f0      	push	{r4, r5, r6, r7, lr}
    556a:	46de      	mov	lr, fp
    556c:	4657      	mov	r7, sl
    556e:	464e      	mov	r6, r9
    5570:	4645      	mov	r5, r8
    5572:	b5e0      	push	{r5, r6, r7, lr}
    5574:	b091      	sub	sp, #68	; 0x44
    5576:	0005      	movs	r5, r0
    5578:	000c      	movs	r4, r1
    557a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    557c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    557e:	0008      	movs	r0, r1
    5580:	4bbc      	ldr	r3, [pc, #752]	; (5874 <usart_init+0x30c>)
    5582:	4798      	blx	r3
    5584:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5586:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5588:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    558a:	07db      	lsls	r3, r3, #31
    558c:	d506      	bpl.n	559c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    558e:	b011      	add	sp, #68	; 0x44
    5590:	bc3c      	pop	{r2, r3, r4, r5}
    5592:	4690      	mov	r8, r2
    5594:	4699      	mov	r9, r3
    5596:	46a2      	mov	sl, r4
    5598:	46ab      	mov	fp, r5
    559a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    559c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    559e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    55a0:	079b      	lsls	r3, r3, #30
    55a2:	d4f4      	bmi.n	558e <usart_init+0x26>
    55a4:	49b4      	ldr	r1, [pc, #720]	; (5878 <usart_init+0x310>)
    55a6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    55a8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    55aa:	2301      	movs	r3, #1
    55ac:	40bb      	lsls	r3, r7
    55ae:	4303      	orrs	r3, r0
    55b0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    55b2:	a90f      	add	r1, sp, #60	; 0x3c
    55b4:	272d      	movs	r7, #45	; 0x2d
    55b6:	5df3      	ldrb	r3, [r6, r7]
    55b8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    55ba:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    55bc:	b2d3      	uxtb	r3, r2
    55be:	9302      	str	r3, [sp, #8]
    55c0:	0018      	movs	r0, r3
    55c2:	4bae      	ldr	r3, [pc, #696]	; (587c <usart_init+0x314>)
    55c4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    55c6:	9802      	ldr	r0, [sp, #8]
    55c8:	4bad      	ldr	r3, [pc, #692]	; (5880 <usart_init+0x318>)
    55ca:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    55cc:	5df0      	ldrb	r0, [r6, r7]
    55ce:	2100      	movs	r1, #0
    55d0:	4bac      	ldr	r3, [pc, #688]	; (5884 <usart_init+0x31c>)
    55d2:	4798      	blx	r3
	module->character_size = config->character_size;
    55d4:	7af3      	ldrb	r3, [r6, #11]
    55d6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    55d8:	2324      	movs	r3, #36	; 0x24
    55da:	5cf3      	ldrb	r3, [r6, r3]
    55dc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    55de:	2325      	movs	r3, #37	; 0x25
    55e0:	5cf3      	ldrb	r3, [r6, r3]
    55e2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    55e4:	7ef3      	ldrb	r3, [r6, #27]
    55e6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    55e8:	7f33      	ldrb	r3, [r6, #28]
    55ea:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    55ec:	682b      	ldr	r3, [r5, #0]
    55ee:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    55f0:	0018      	movs	r0, r3
    55f2:	4ba0      	ldr	r3, [pc, #640]	; (5874 <usart_init+0x30c>)
    55f4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    55f6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    55f8:	2200      	movs	r2, #0
    55fa:	230e      	movs	r3, #14
    55fc:	a906      	add	r1, sp, #24
    55fe:	468c      	mov	ip, r1
    5600:	4463      	add	r3, ip
    5602:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    5604:	8a32      	ldrh	r2, [r6, #16]
    5606:	9202      	str	r2, [sp, #8]
    5608:	2380      	movs	r3, #128	; 0x80
    560a:	01db      	lsls	r3, r3, #7
    560c:	429a      	cmp	r2, r3
    560e:	d100      	bne.n	5612 <usart_init+0xaa>
    5610:	e09e      	b.n	5750 <usart_init+0x1e8>
    5612:	d90f      	bls.n	5634 <usart_init+0xcc>
    5614:	23c0      	movs	r3, #192	; 0xc0
    5616:	01db      	lsls	r3, r3, #7
    5618:	9a02      	ldr	r2, [sp, #8]
    561a:	429a      	cmp	r2, r3
    561c:	d100      	bne.n	5620 <usart_init+0xb8>
    561e:	e092      	b.n	5746 <usart_init+0x1de>
    5620:	2380      	movs	r3, #128	; 0x80
    5622:	021b      	lsls	r3, r3, #8
    5624:	429a      	cmp	r2, r3
    5626:	d000      	beq.n	562a <usart_init+0xc2>
    5628:	e11f      	b.n	586a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    562a:	2303      	movs	r3, #3
    562c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    562e:	2300      	movs	r3, #0
    5630:	9307      	str	r3, [sp, #28]
    5632:	e008      	b.n	5646 <usart_init+0xde>
	switch (config->sample_rate) {
    5634:	2380      	movs	r3, #128	; 0x80
    5636:	019b      	lsls	r3, r3, #6
    5638:	429a      	cmp	r2, r3
    563a:	d000      	beq.n	563e <usart_init+0xd6>
    563c:	e115      	b.n	586a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    563e:	2310      	movs	r3, #16
    5640:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5642:	3b0f      	subs	r3, #15
    5644:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    5646:	6833      	ldr	r3, [r6, #0]
    5648:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    564a:	68f3      	ldr	r3, [r6, #12]
    564c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    564e:	6973      	ldr	r3, [r6, #20]
    5650:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5652:	7e33      	ldrb	r3, [r6, #24]
    5654:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5656:	2326      	movs	r3, #38	; 0x26
    5658:	5cf3      	ldrb	r3, [r6, r3]
    565a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    565c:	6873      	ldr	r3, [r6, #4]
    565e:	4699      	mov	r9, r3
	switch (transfer_mode)
    5660:	2b00      	cmp	r3, #0
    5662:	d100      	bne.n	5666 <usart_init+0xfe>
    5664:	e0a0      	b.n	57a8 <usart_init+0x240>
    5666:	2380      	movs	r3, #128	; 0x80
    5668:	055b      	lsls	r3, r3, #21
    566a:	4599      	cmp	r9, r3
    566c:	d100      	bne.n	5670 <usart_init+0x108>
    566e:	e084      	b.n	577a <usart_init+0x212>
	if(config->encoding_format_enable) {
    5670:	7e73      	ldrb	r3, [r6, #25]
    5672:	2b00      	cmp	r3, #0
    5674:	d002      	beq.n	567c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5676:	7eb3      	ldrb	r3, [r6, #26]
    5678:	4642      	mov	r2, r8
    567a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    567c:	682a      	ldr	r2, [r5, #0]
    567e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5680:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5682:	2b00      	cmp	r3, #0
    5684:	d1fc      	bne.n	5680 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    5686:	330e      	adds	r3, #14
    5688:	aa06      	add	r2, sp, #24
    568a:	4694      	mov	ip, r2
    568c:	4463      	add	r3, ip
    568e:	881b      	ldrh	r3, [r3, #0]
    5690:	4642      	mov	r2, r8
    5692:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5694:	9b05      	ldr	r3, [sp, #20]
    5696:	9a03      	ldr	r2, [sp, #12]
    5698:	4313      	orrs	r3, r2
    569a:	9a04      	ldr	r2, [sp, #16]
    569c:	4313      	orrs	r3, r2
    569e:	464a      	mov	r2, r9
    56a0:	4313      	orrs	r3, r2
    56a2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    56a4:	465b      	mov	r3, fp
    56a6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    56a8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    56aa:	4653      	mov	r3, sl
    56ac:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    56ae:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    56b0:	2327      	movs	r3, #39	; 0x27
    56b2:	5cf3      	ldrb	r3, [r6, r3]
    56b4:	2b00      	cmp	r3, #0
    56b6:	d101      	bne.n	56bc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    56b8:	3304      	adds	r3, #4
    56ba:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    56bc:	7e73      	ldrb	r3, [r6, #25]
    56be:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    56c0:	7f32      	ldrb	r2, [r6, #28]
    56c2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    56c4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    56c6:	7f72      	ldrb	r2, [r6, #29]
    56c8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    56ca:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    56cc:	2224      	movs	r2, #36	; 0x24
    56ce:	5cb2      	ldrb	r2, [r6, r2]
    56d0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    56d2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    56d4:	2225      	movs	r2, #37	; 0x25
    56d6:	5cb2      	ldrb	r2, [r6, r2]
    56d8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    56da:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    56dc:	7ab1      	ldrb	r1, [r6, #10]
    56de:	7af2      	ldrb	r2, [r6, #11]
    56e0:	4311      	orrs	r1, r2
    56e2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    56e4:	8933      	ldrh	r3, [r6, #8]
    56e6:	2bff      	cmp	r3, #255	; 0xff
    56e8:	d100      	bne.n	56ec <usart_init+0x184>
    56ea:	e081      	b.n	57f0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    56ec:	2280      	movs	r2, #128	; 0x80
    56ee:	0452      	lsls	r2, r2, #17
    56f0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    56f2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    56f4:	232c      	movs	r3, #44	; 0x2c
    56f6:	5cf3      	ldrb	r3, [r6, r3]
    56f8:	2b00      	cmp	r3, #0
    56fa:	d103      	bne.n	5704 <usart_init+0x19c>
    56fc:	4b62      	ldr	r3, [pc, #392]	; (5888 <usart_init+0x320>)
    56fe:	789b      	ldrb	r3, [r3, #2]
    5700:	079b      	lsls	r3, r3, #30
    5702:	d501      	bpl.n	5708 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5704:	2380      	movs	r3, #128	; 0x80
    5706:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    5708:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    570a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    570c:	2b00      	cmp	r3, #0
    570e:	d1fc      	bne.n	570a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    5710:	4643      	mov	r3, r8
    5712:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5714:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5716:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5718:	2b00      	cmp	r3, #0
    571a:	d1fc      	bne.n	5716 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    571c:	4643      	mov	r3, r8
    571e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5720:	ab0e      	add	r3, sp, #56	; 0x38
    5722:	2280      	movs	r2, #128	; 0x80
    5724:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5726:	2200      	movs	r2, #0
    5728:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    572a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    572c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    572e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5730:	930a      	str	r3, [sp, #40]	; 0x28
    5732:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5734:	930b      	str	r3, [sp, #44]	; 0x2c
    5736:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    5738:	930c      	str	r3, [sp, #48]	; 0x30
    573a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    573c:	9302      	str	r3, [sp, #8]
    573e:	930d      	str	r3, [sp, #52]	; 0x34
    5740:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5742:	ae0a      	add	r6, sp, #40	; 0x28
    5744:	e063      	b.n	580e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5746:	2308      	movs	r3, #8
    5748:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    574a:	3b07      	subs	r3, #7
    574c:	9307      	str	r3, [sp, #28]
    574e:	e77a      	b.n	5646 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    5750:	6833      	ldr	r3, [r6, #0]
    5752:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5754:	68f3      	ldr	r3, [r6, #12]
    5756:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5758:	6973      	ldr	r3, [r6, #20]
    575a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    575c:	7e33      	ldrb	r3, [r6, #24]
    575e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5760:	2326      	movs	r3, #38	; 0x26
    5762:	5cf3      	ldrb	r3, [r6, r3]
    5764:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5766:	6873      	ldr	r3, [r6, #4]
    5768:	4699      	mov	r9, r3
	switch (transfer_mode)
    576a:	2b00      	cmp	r3, #0
    576c:	d018      	beq.n	57a0 <usart_init+0x238>
    576e:	2380      	movs	r3, #128	; 0x80
    5770:	055b      	lsls	r3, r3, #21
    5772:	4599      	cmp	r9, r3
    5774:	d001      	beq.n	577a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    5776:	2000      	movs	r0, #0
    5778:	e025      	b.n	57c6 <usart_init+0x25e>
			if (!config->use_external_clock) {
    577a:	2327      	movs	r3, #39	; 0x27
    577c:	5cf3      	ldrb	r3, [r6, r3]
    577e:	2b00      	cmp	r3, #0
    5780:	d000      	beq.n	5784 <usart_init+0x21c>
    5782:	e775      	b.n	5670 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5784:	6a33      	ldr	r3, [r6, #32]
    5786:	001f      	movs	r7, r3
    5788:	b2c0      	uxtb	r0, r0
    578a:	4b40      	ldr	r3, [pc, #256]	; (588c <usart_init+0x324>)
    578c:	4798      	blx	r3
    578e:	0001      	movs	r1, r0
    5790:	220e      	movs	r2, #14
    5792:	ab06      	add	r3, sp, #24
    5794:	469c      	mov	ip, r3
    5796:	4462      	add	r2, ip
    5798:	0038      	movs	r0, r7
    579a:	4b3d      	ldr	r3, [pc, #244]	; (5890 <usart_init+0x328>)
    579c:	4798      	blx	r3
    579e:	e012      	b.n	57c6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    57a0:	2308      	movs	r3, #8
    57a2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    57a4:	2300      	movs	r3, #0
    57a6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    57a8:	2327      	movs	r3, #39	; 0x27
    57aa:	5cf3      	ldrb	r3, [r6, r3]
    57ac:	2b00      	cmp	r3, #0
    57ae:	d00e      	beq.n	57ce <usart_init+0x266>
				status_code =
    57b0:	9b06      	ldr	r3, [sp, #24]
    57b2:	9300      	str	r3, [sp, #0]
    57b4:	9b07      	ldr	r3, [sp, #28]
    57b6:	220e      	movs	r2, #14
    57b8:	a906      	add	r1, sp, #24
    57ba:	468c      	mov	ip, r1
    57bc:	4462      	add	r2, ip
    57be:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    57c0:	6a30      	ldr	r0, [r6, #32]
    57c2:	4f34      	ldr	r7, [pc, #208]	; (5894 <usart_init+0x32c>)
    57c4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    57c6:	2800      	cmp	r0, #0
    57c8:	d000      	beq.n	57cc <usart_init+0x264>
    57ca:	e6e0      	b.n	558e <usart_init+0x26>
    57cc:	e750      	b.n	5670 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    57ce:	6a33      	ldr	r3, [r6, #32]
    57d0:	001f      	movs	r7, r3
    57d2:	b2c0      	uxtb	r0, r0
    57d4:	4b2d      	ldr	r3, [pc, #180]	; (588c <usart_init+0x324>)
    57d6:	4798      	blx	r3
    57d8:	0001      	movs	r1, r0
				status_code =
    57da:	9b06      	ldr	r3, [sp, #24]
    57dc:	9300      	str	r3, [sp, #0]
    57de:	9b07      	ldr	r3, [sp, #28]
    57e0:	220e      	movs	r2, #14
    57e2:	a806      	add	r0, sp, #24
    57e4:	4684      	mov	ip, r0
    57e6:	4462      	add	r2, ip
    57e8:	0038      	movs	r0, r7
    57ea:	4f2a      	ldr	r7, [pc, #168]	; (5894 <usart_init+0x32c>)
    57ec:	47b8      	blx	r7
    57ee:	e7ea      	b.n	57c6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    57f0:	7ef3      	ldrb	r3, [r6, #27]
    57f2:	2b00      	cmp	r3, #0
    57f4:	d100      	bne.n	57f8 <usart_init+0x290>
    57f6:	e77d      	b.n	56f4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    57f8:	2380      	movs	r3, #128	; 0x80
    57fa:	04db      	lsls	r3, r3, #19
    57fc:	431f      	orrs	r7, r3
    57fe:	e779      	b.n	56f4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5800:	0020      	movs	r0, r4
    5802:	4b25      	ldr	r3, [pc, #148]	; (5898 <usart_init+0x330>)
    5804:	4798      	blx	r3
    5806:	e007      	b.n	5818 <usart_init+0x2b0>
    5808:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    580a:	2f04      	cmp	r7, #4
    580c:	d00d      	beq.n	582a <usart_init+0x2c2>
    580e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5810:	00bb      	lsls	r3, r7, #2
    5812:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    5814:	2800      	cmp	r0, #0
    5816:	d0f3      	beq.n	5800 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    5818:	1c43      	adds	r3, r0, #1
    581a:	d0f5      	beq.n	5808 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    581c:	a90e      	add	r1, sp, #56	; 0x38
    581e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5820:	0c00      	lsrs	r0, r0, #16
    5822:	b2c0      	uxtb	r0, r0
    5824:	4b1d      	ldr	r3, [pc, #116]	; (589c <usart_init+0x334>)
    5826:	4798      	blx	r3
    5828:	e7ee      	b.n	5808 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    582a:	2300      	movs	r3, #0
    582c:	60eb      	str	r3, [r5, #12]
    582e:	612b      	str	r3, [r5, #16]
    5830:	616b      	str	r3, [r5, #20]
    5832:	61ab      	str	r3, [r5, #24]
    5834:	61eb      	str	r3, [r5, #28]
    5836:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    5838:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    583a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    583c:	2200      	movs	r2, #0
    583e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5840:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5842:	3330      	adds	r3, #48	; 0x30
    5844:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    5846:	3301      	adds	r3, #1
    5848:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    584a:	3301      	adds	r3, #1
    584c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    584e:	3301      	adds	r3, #1
    5850:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5852:	6828      	ldr	r0, [r5, #0]
    5854:	4b07      	ldr	r3, [pc, #28]	; (5874 <usart_init+0x30c>)
    5856:	4798      	blx	r3
    5858:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    585a:	4911      	ldr	r1, [pc, #68]	; (58a0 <usart_init+0x338>)
    585c:	4b11      	ldr	r3, [pc, #68]	; (58a4 <usart_init+0x33c>)
    585e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5860:	00a4      	lsls	r4, r4, #2
    5862:	4b11      	ldr	r3, [pc, #68]	; (58a8 <usart_init+0x340>)
    5864:	50e5      	str	r5, [r4, r3]
	return status_code;
    5866:	2000      	movs	r0, #0
    5868:	e691      	b.n	558e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    586a:	2310      	movs	r3, #16
    586c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    586e:	2300      	movs	r3, #0
    5870:	9307      	str	r3, [sp, #28]
    5872:	e6e8      	b.n	5646 <usart_init+0xde>
    5874:	00004d6d 	.word	0x00004d6d
    5878:	40000400 	.word	0x40000400
    587c:	00006125 	.word	0x00006125
    5880:	00006099 	.word	0x00006099
    5884:	00004ba9 	.word	0x00004ba9
    5888:	41002000 	.word	0x41002000
    588c:	00006141 	.word	0x00006141
    5890:	00004aeb 	.word	0x00004aeb
    5894:	00004b15 	.word	0x00004b15
    5898:	00004bf5 	.word	0x00004bf5
    589c:	0000621d 	.word	0x0000621d
    58a0:	00005949 	.word	0x00005949
    58a4:	00004da9 	.word	0x00004da9
    58a8:	2000106c 	.word	0x2000106c

000058ac <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    58ac:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    58ae:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    58b0:	2a00      	cmp	r2, #0
    58b2:	d101      	bne.n	58b8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    58b4:	0018      	movs	r0, r3
    58b6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    58b8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    58ba:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    58bc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    58be:	2a00      	cmp	r2, #0
    58c0:	d1f8      	bne.n	58b4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    58c2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    58c4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    58c6:	2a00      	cmp	r2, #0
    58c8:	d1fc      	bne.n	58c4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    58ca:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    58cc:	2102      	movs	r1, #2
    58ce:	7e1a      	ldrb	r2, [r3, #24]
    58d0:	420a      	tst	r2, r1
    58d2:	d0fc      	beq.n	58ce <usart_write_wait+0x22>
	return STATUS_OK;
    58d4:	2300      	movs	r3, #0
    58d6:	e7ed      	b.n	58b4 <usart_write_wait+0x8>

000058d8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    58d8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    58da:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    58dc:	2a00      	cmp	r2, #0
    58de:	d101      	bne.n	58e4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    58e0:	0018      	movs	r0, r3
    58e2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    58e4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    58e6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    58e8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    58ea:	2a00      	cmp	r2, #0
    58ec:	d1f8      	bne.n	58e0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    58ee:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    58f0:	7e10      	ldrb	r0, [r2, #24]
    58f2:	0740      	lsls	r0, r0, #29
    58f4:	d5f4      	bpl.n	58e0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    58f6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    58f8:	2b00      	cmp	r3, #0
    58fa:	d1fc      	bne.n	58f6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    58fc:	8b53      	ldrh	r3, [r2, #26]
    58fe:	b2db      	uxtb	r3, r3
	if (error_code) {
    5900:	0698      	lsls	r0, r3, #26
    5902:	d01d      	beq.n	5940 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    5904:	0798      	lsls	r0, r3, #30
    5906:	d503      	bpl.n	5910 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5908:	2302      	movs	r3, #2
    590a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    590c:	3318      	adds	r3, #24
    590e:	e7e7      	b.n	58e0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5910:	0758      	lsls	r0, r3, #29
    5912:	d503      	bpl.n	591c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5914:	2304      	movs	r3, #4
    5916:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    5918:	331a      	adds	r3, #26
    591a:	e7e1      	b.n	58e0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    591c:	07d8      	lsls	r0, r3, #31
    591e:	d503      	bpl.n	5928 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5920:	2301      	movs	r3, #1
    5922:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    5924:	3312      	adds	r3, #18
    5926:	e7db      	b.n	58e0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    5928:	06d8      	lsls	r0, r3, #27
    592a:	d503      	bpl.n	5934 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    592c:	2310      	movs	r3, #16
    592e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    5930:	3332      	adds	r3, #50	; 0x32
    5932:	e7d5      	b.n	58e0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5934:	069b      	lsls	r3, r3, #26
    5936:	d503      	bpl.n	5940 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5938:	2320      	movs	r3, #32
    593a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    593c:	3321      	adds	r3, #33	; 0x21
    593e:	e7cf      	b.n	58e0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    5940:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    5942:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    5944:	2300      	movs	r3, #0
    5946:	e7cb      	b.n	58e0 <usart_read_wait+0x8>

00005948 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    594a:	0080      	lsls	r0, r0, #2
    594c:	4b62      	ldr	r3, [pc, #392]	; (5ad8 <_usart_interrupt_handler+0x190>)
    594e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5950:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5952:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    5954:	2b00      	cmp	r3, #0
    5956:	d1fc      	bne.n	5952 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5958:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    595a:	7da6      	ldrb	r6, [r4, #22]
    595c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    595e:	2330      	movs	r3, #48	; 0x30
    5960:	5ceb      	ldrb	r3, [r5, r3]
    5962:	2231      	movs	r2, #49	; 0x31
    5964:	5caf      	ldrb	r7, [r5, r2]
    5966:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5968:	07f3      	lsls	r3, r6, #31
    596a:	d522      	bpl.n	59b2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    596c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    596e:	b29b      	uxth	r3, r3
    5970:	2b00      	cmp	r3, #0
    5972:	d01c      	beq.n	59ae <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5974:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5976:	7813      	ldrb	r3, [r2, #0]
    5978:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    597a:	1c51      	adds	r1, r2, #1
    597c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    597e:	7969      	ldrb	r1, [r5, #5]
    5980:	2901      	cmp	r1, #1
    5982:	d00e      	beq.n	59a2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5984:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5986:	05db      	lsls	r3, r3, #23
    5988:	0ddb      	lsrs	r3, r3, #23
    598a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    598c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    598e:	3b01      	subs	r3, #1
    5990:	b29b      	uxth	r3, r3
    5992:	85eb      	strh	r3, [r5, #46]	; 0x2e
    5994:	2b00      	cmp	r3, #0
    5996:	d10c      	bne.n	59b2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5998:	3301      	adds	r3, #1
    599a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    599c:	3301      	adds	r3, #1
    599e:	75a3      	strb	r3, [r4, #22]
    59a0:	e007      	b.n	59b2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    59a2:	7851      	ldrb	r1, [r2, #1]
    59a4:	0209      	lsls	r1, r1, #8
    59a6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    59a8:	3202      	adds	r2, #2
    59aa:	62aa      	str	r2, [r5, #40]	; 0x28
    59ac:	e7eb      	b.n	5986 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    59ae:	2301      	movs	r3, #1
    59b0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    59b2:	07b3      	lsls	r3, r6, #30
    59b4:	d506      	bpl.n	59c4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    59b6:	2302      	movs	r3, #2
    59b8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    59ba:	2200      	movs	r2, #0
    59bc:	3331      	adds	r3, #49	; 0x31
    59be:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    59c0:	07fb      	lsls	r3, r7, #31
    59c2:	d41a      	bmi.n	59fa <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    59c4:	0773      	lsls	r3, r6, #29
    59c6:	d565      	bpl.n	5a94 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    59c8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    59ca:	b29b      	uxth	r3, r3
    59cc:	2b00      	cmp	r3, #0
    59ce:	d05f      	beq.n	5a90 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    59d0:	8b63      	ldrh	r3, [r4, #26]
    59d2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    59d4:	071a      	lsls	r2, r3, #28
    59d6:	d414      	bmi.n	5a02 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    59d8:	223f      	movs	r2, #63	; 0x3f
    59da:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    59dc:	2b00      	cmp	r3, #0
    59de:	d034      	beq.n	5a4a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    59e0:	079a      	lsls	r2, r3, #30
    59e2:	d511      	bpl.n	5a08 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    59e4:	221a      	movs	r2, #26
    59e6:	2332      	movs	r3, #50	; 0x32
    59e8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    59ea:	3b30      	subs	r3, #48	; 0x30
    59ec:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    59ee:	077b      	lsls	r3, r7, #29
    59f0:	d550      	bpl.n	5a94 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    59f2:	0028      	movs	r0, r5
    59f4:	696b      	ldr	r3, [r5, #20]
    59f6:	4798      	blx	r3
    59f8:	e04c      	b.n	5a94 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    59fa:	0028      	movs	r0, r5
    59fc:	68eb      	ldr	r3, [r5, #12]
    59fe:	4798      	blx	r3
    5a00:	e7e0      	b.n	59c4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5a02:	2237      	movs	r2, #55	; 0x37
    5a04:	4013      	ands	r3, r2
    5a06:	e7e9      	b.n	59dc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5a08:	075a      	lsls	r2, r3, #29
    5a0a:	d505      	bpl.n	5a18 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    5a0c:	221e      	movs	r2, #30
    5a0e:	2332      	movs	r3, #50	; 0x32
    5a10:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5a12:	3b2e      	subs	r3, #46	; 0x2e
    5a14:	8363      	strh	r3, [r4, #26]
    5a16:	e7ea      	b.n	59ee <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5a18:	07da      	lsls	r2, r3, #31
    5a1a:	d505      	bpl.n	5a28 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    5a1c:	2213      	movs	r2, #19
    5a1e:	2332      	movs	r3, #50	; 0x32
    5a20:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5a22:	3b31      	subs	r3, #49	; 0x31
    5a24:	8363      	strh	r3, [r4, #26]
    5a26:	e7e2      	b.n	59ee <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5a28:	06da      	lsls	r2, r3, #27
    5a2a:	d505      	bpl.n	5a38 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    5a2c:	2242      	movs	r2, #66	; 0x42
    5a2e:	2332      	movs	r3, #50	; 0x32
    5a30:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5a32:	3b22      	subs	r3, #34	; 0x22
    5a34:	8363      	strh	r3, [r4, #26]
    5a36:	e7da      	b.n	59ee <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5a38:	2220      	movs	r2, #32
    5a3a:	421a      	tst	r2, r3
    5a3c:	d0d7      	beq.n	59ee <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5a3e:	3221      	adds	r2, #33	; 0x21
    5a40:	2332      	movs	r3, #50	; 0x32
    5a42:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5a44:	3b12      	subs	r3, #18
    5a46:	8363      	strh	r3, [r4, #26]
    5a48:	e7d1      	b.n	59ee <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5a4a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    5a4c:	05db      	lsls	r3, r3, #23
    5a4e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5a50:	b2da      	uxtb	r2, r3
    5a52:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5a54:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5a56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5a58:	1c51      	adds	r1, r2, #1
    5a5a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5a5c:	7969      	ldrb	r1, [r5, #5]
    5a5e:	2901      	cmp	r1, #1
    5a60:	d010      	beq.n	5a84 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5a62:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5a64:	3b01      	subs	r3, #1
    5a66:	b29b      	uxth	r3, r3
    5a68:	85ab      	strh	r3, [r5, #44]	; 0x2c
    5a6a:	2b00      	cmp	r3, #0
    5a6c:	d112      	bne.n	5a94 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5a6e:	3304      	adds	r3, #4
    5a70:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    5a72:	2200      	movs	r2, #0
    5a74:	332e      	adds	r3, #46	; 0x2e
    5a76:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    5a78:	07bb      	lsls	r3, r7, #30
    5a7a:	d50b      	bpl.n	5a94 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5a7c:	0028      	movs	r0, r5
    5a7e:	692b      	ldr	r3, [r5, #16]
    5a80:	4798      	blx	r3
    5a82:	e007      	b.n	5a94 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5a84:	0a1b      	lsrs	r3, r3, #8
    5a86:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    5a88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5a8a:	3301      	adds	r3, #1
    5a8c:	626b      	str	r3, [r5, #36]	; 0x24
    5a8e:	e7e8      	b.n	5a62 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5a90:	2304      	movs	r3, #4
    5a92:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5a94:	06f3      	lsls	r3, r6, #27
    5a96:	d504      	bpl.n	5aa2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5a98:	2310      	movs	r3, #16
    5a9a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5a9c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5a9e:	06fb      	lsls	r3, r7, #27
    5aa0:	d40e      	bmi.n	5ac0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5aa2:	06b3      	lsls	r3, r6, #26
    5aa4:	d504      	bpl.n	5ab0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5aa6:	2320      	movs	r3, #32
    5aa8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5aaa:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5aac:	073b      	lsls	r3, r7, #28
    5aae:	d40b      	bmi.n	5ac8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5ab0:	0733      	lsls	r3, r6, #28
    5ab2:	d504      	bpl.n	5abe <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5ab4:	2308      	movs	r3, #8
    5ab6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5ab8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5aba:	06bb      	lsls	r3, r7, #26
    5abc:	d408      	bmi.n	5ad0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    5abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5ac0:	0028      	movs	r0, r5
    5ac2:	69eb      	ldr	r3, [r5, #28]
    5ac4:	4798      	blx	r3
    5ac6:	e7ec      	b.n	5aa2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5ac8:	0028      	movs	r0, r5
    5aca:	69ab      	ldr	r3, [r5, #24]
    5acc:	4798      	blx	r3
    5ace:	e7ef      	b.n	5ab0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5ad0:	6a2b      	ldr	r3, [r5, #32]
    5ad2:	0028      	movs	r0, r5
    5ad4:	4798      	blx	r3
}
    5ad6:	e7f2      	b.n	5abe <_usart_interrupt_handler+0x176>
    5ad8:	2000106c 	.word	0x2000106c

00005adc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5adc:	b510      	push	{r4, lr}
	switch (clock_source) {
    5ade:	2808      	cmp	r0, #8
    5ae0:	d803      	bhi.n	5aea <system_clock_source_get_hz+0xe>
    5ae2:	0080      	lsls	r0, r0, #2
    5ae4:	4b1c      	ldr	r3, [pc, #112]	; (5b58 <system_clock_source_get_hz+0x7c>)
    5ae6:	581b      	ldr	r3, [r3, r0]
    5ae8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    5aea:	2000      	movs	r0, #0
    5aec:	e032      	b.n	5b54 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    5aee:	4b1b      	ldr	r3, [pc, #108]	; (5b5c <system_clock_source_get_hz+0x80>)
    5af0:	6918      	ldr	r0, [r3, #16]
    5af2:	e02f      	b.n	5b54 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5af4:	4b1a      	ldr	r3, [pc, #104]	; (5b60 <system_clock_source_get_hz+0x84>)
    5af6:	6a1b      	ldr	r3, [r3, #32]
    5af8:	059b      	lsls	r3, r3, #22
    5afa:	0f9b      	lsrs	r3, r3, #30
    5afc:	4819      	ldr	r0, [pc, #100]	; (5b64 <system_clock_source_get_hz+0x88>)
    5afe:	40d8      	lsrs	r0, r3
    5b00:	e028      	b.n	5b54 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    5b02:	4b16      	ldr	r3, [pc, #88]	; (5b5c <system_clock_source_get_hz+0x80>)
    5b04:	6958      	ldr	r0, [r3, #20]
    5b06:	e025      	b.n	5b54 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5b08:	4b14      	ldr	r3, [pc, #80]	; (5b5c <system_clock_source_get_hz+0x80>)
    5b0a:	681b      	ldr	r3, [r3, #0]
			return 0;
    5b0c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5b0e:	079b      	lsls	r3, r3, #30
    5b10:	d520      	bpl.n	5b54 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5b12:	4913      	ldr	r1, [pc, #76]	; (5b60 <system_clock_source_get_hz+0x84>)
    5b14:	2210      	movs	r2, #16
    5b16:	68cb      	ldr	r3, [r1, #12]
    5b18:	421a      	tst	r2, r3
    5b1a:	d0fc      	beq.n	5b16 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    5b1c:	4b0f      	ldr	r3, [pc, #60]	; (5b5c <system_clock_source_get_hz+0x80>)
    5b1e:	681a      	ldr	r2, [r3, #0]
    5b20:	2324      	movs	r3, #36	; 0x24
    5b22:	4013      	ands	r3, r2
    5b24:	2b04      	cmp	r3, #4
    5b26:	d001      	beq.n	5b2c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    5b28:	480f      	ldr	r0, [pc, #60]	; (5b68 <system_clock_source_get_hz+0x8c>)
    5b2a:	e013      	b.n	5b54 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5b2c:	2000      	movs	r0, #0
    5b2e:	4b0f      	ldr	r3, [pc, #60]	; (5b6c <system_clock_source_get_hz+0x90>)
    5b30:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    5b32:	4b0a      	ldr	r3, [pc, #40]	; (5b5c <system_clock_source_get_hz+0x80>)
    5b34:	689b      	ldr	r3, [r3, #8]
    5b36:	041b      	lsls	r3, r3, #16
    5b38:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5b3a:	4358      	muls	r0, r3
    5b3c:	e00a      	b.n	5b54 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5b3e:	2350      	movs	r3, #80	; 0x50
    5b40:	4a07      	ldr	r2, [pc, #28]	; (5b60 <system_clock_source_get_hz+0x84>)
    5b42:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    5b44:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5b46:	075b      	lsls	r3, r3, #29
    5b48:	d504      	bpl.n	5b54 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    5b4a:	4b04      	ldr	r3, [pc, #16]	; (5b5c <system_clock_source_get_hz+0x80>)
    5b4c:	68d8      	ldr	r0, [r3, #12]
    5b4e:	e001      	b.n	5b54 <system_clock_source_get_hz+0x78>
		return 32768UL;
    5b50:	2080      	movs	r0, #128	; 0x80
    5b52:	0200      	lsls	r0, r0, #8
	}
}
    5b54:	bd10      	pop	{r4, pc}
    5b56:	46c0      	nop			; (mov r8, r8)
    5b58:	0000e404 	.word	0x0000e404
    5b5c:	20000400 	.word	0x20000400
    5b60:	40000800 	.word	0x40000800
    5b64:	007a1200 	.word	0x007a1200
    5b68:	02dc6c00 	.word	0x02dc6c00
    5b6c:	00006141 	.word	0x00006141

00005b70 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5b70:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5b72:	490c      	ldr	r1, [pc, #48]	; (5ba4 <system_clock_source_osc8m_set_config+0x34>)
    5b74:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5b76:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5b78:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    5b7a:	7840      	ldrb	r0, [r0, #1]
    5b7c:	2201      	movs	r2, #1
    5b7e:	4010      	ands	r0, r2
    5b80:	0180      	lsls	r0, r0, #6
    5b82:	2640      	movs	r6, #64	; 0x40
    5b84:	43b3      	bics	r3, r6
    5b86:	4303      	orrs	r3, r0
    5b88:	402a      	ands	r2, r5
    5b8a:	01d2      	lsls	r2, r2, #7
    5b8c:	2080      	movs	r0, #128	; 0x80
    5b8e:	4383      	bics	r3, r0
    5b90:	4313      	orrs	r3, r2
    5b92:	2203      	movs	r2, #3
    5b94:	4022      	ands	r2, r4
    5b96:	0212      	lsls	r2, r2, #8
    5b98:	4803      	ldr	r0, [pc, #12]	; (5ba8 <system_clock_source_osc8m_set_config+0x38>)
    5b9a:	4003      	ands	r3, r0
    5b9c:	4313      	orrs	r3, r2
    5b9e:	620b      	str	r3, [r1, #32]
}
    5ba0:	bd70      	pop	{r4, r5, r6, pc}
    5ba2:	46c0      	nop			; (mov r8, r8)
    5ba4:	40000800 	.word	0x40000800
    5ba8:	fffffcff 	.word	0xfffffcff

00005bac <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bae:	46de      	mov	lr, fp
    5bb0:	4657      	mov	r7, sl
    5bb2:	464e      	mov	r6, r9
    5bb4:	4645      	mov	r5, r8
    5bb6:	b5e0      	push	{r5, r6, r7, lr}
    5bb8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5bba:	4b26      	ldr	r3, [pc, #152]	; (5c54 <system_clock_source_xosc32k_set_config+0xa8>)
    5bbc:	469b      	mov	fp, r3
    5bbe:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    5bc0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5bc2:	7800      	ldrb	r0, [r0, #0]
    5bc4:	4242      	negs	r2, r0
    5bc6:	4142      	adcs	r2, r0
    5bc8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5bca:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    5bcc:	78ca      	ldrb	r2, [r1, #3]
    5bce:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    5bd0:	790a      	ldrb	r2, [r1, #4]
    5bd2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    5bd4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5bd6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    5bd8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5bda:	688a      	ldr	r2, [r1, #8]
    5bdc:	491e      	ldr	r1, [pc, #120]	; (5c58 <system_clock_source_xosc32k_set_config+0xac>)
    5bde:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    5be0:	2101      	movs	r1, #1
    5be2:	464a      	mov	r2, r9
    5be4:	0092      	lsls	r2, r2, #2
    5be6:	4691      	mov	r9, r2
    5be8:	2204      	movs	r2, #4
    5bea:	4393      	bics	r3, r2
    5bec:	464a      	mov	r2, r9
    5bee:	4313      	orrs	r3, r2
    5bf0:	4642      	mov	r2, r8
    5bf2:	400a      	ands	r2, r1
    5bf4:	00d2      	lsls	r2, r2, #3
    5bf6:	4690      	mov	r8, r2
    5bf8:	2208      	movs	r2, #8
    5bfa:	4393      	bics	r3, r2
    5bfc:	4642      	mov	r2, r8
    5bfe:	4313      	orrs	r3, r2
    5c00:	4662      	mov	r2, ip
    5c02:	400a      	ands	r2, r1
    5c04:	0112      	lsls	r2, r2, #4
    5c06:	4694      	mov	ip, r2
    5c08:	2210      	movs	r2, #16
    5c0a:	4393      	bics	r3, r2
    5c0c:	4662      	mov	r2, ip
    5c0e:	4313      	orrs	r3, r2
    5c10:	4008      	ands	r0, r1
    5c12:	0140      	lsls	r0, r0, #5
    5c14:	2220      	movs	r2, #32
    5c16:	4393      	bics	r3, r2
    5c18:	4303      	orrs	r3, r0
    5c1a:	400f      	ands	r7, r1
    5c1c:	01bf      	lsls	r7, r7, #6
    5c1e:	2040      	movs	r0, #64	; 0x40
    5c20:	4383      	bics	r3, r0
    5c22:	433b      	orrs	r3, r7
    5c24:	400e      	ands	r6, r1
    5c26:	01f6      	lsls	r6, r6, #7
    5c28:	3040      	adds	r0, #64	; 0x40
    5c2a:	4383      	bics	r3, r0
    5c2c:	4333      	orrs	r3, r6
    5c2e:	3879      	subs	r0, #121	; 0x79
    5c30:	4005      	ands	r5, r0
    5c32:	022d      	lsls	r5, r5, #8
    5c34:	4809      	ldr	r0, [pc, #36]	; (5c5c <system_clock_source_xosc32k_set_config+0xb0>)
    5c36:	4003      	ands	r3, r0
    5c38:	432b      	orrs	r3, r5
    5c3a:	4021      	ands	r1, r4
    5c3c:	0309      	lsls	r1, r1, #12
    5c3e:	4808      	ldr	r0, [pc, #32]	; (5c60 <system_clock_source_xosc32k_set_config+0xb4>)
    5c40:	4003      	ands	r3, r0
    5c42:	430b      	orrs	r3, r1
    5c44:	465a      	mov	r2, fp
    5c46:	8293      	strh	r3, [r2, #20]
}
    5c48:	bc3c      	pop	{r2, r3, r4, r5}
    5c4a:	4690      	mov	r8, r2
    5c4c:	4699      	mov	r9, r3
    5c4e:	46a2      	mov	sl, r4
    5c50:	46ab      	mov	fp, r5
    5c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c54:	40000800 	.word	0x40000800
    5c58:	20000400 	.word	0x20000400
    5c5c:	fffff8ff 	.word	0xfffff8ff
    5c60:	ffffefff 	.word	0xffffefff

00005c64 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5c64:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5c66:	7a03      	ldrb	r3, [r0, #8]
    5c68:	069b      	lsls	r3, r3, #26
    5c6a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5c6c:	8942      	ldrh	r2, [r0, #10]
    5c6e:	0592      	lsls	r2, r2, #22
    5c70:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5c72:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    5c74:	4918      	ldr	r1, [pc, #96]	; (5cd8 <system_clock_source_dfll_set_config+0x74>)
    5c76:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5c78:	7983      	ldrb	r3, [r0, #6]
    5c7a:	79c2      	ldrb	r2, [r0, #7]
    5c7c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5c7e:	8842      	ldrh	r2, [r0, #2]
    5c80:	8884      	ldrh	r4, [r0, #4]
    5c82:	4322      	orrs	r2, r4
    5c84:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5c86:	7842      	ldrb	r2, [r0, #1]
    5c88:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    5c8a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    5c8c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5c8e:	7803      	ldrb	r3, [r0, #0]
    5c90:	2b04      	cmp	r3, #4
    5c92:	d011      	beq.n	5cb8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5c94:	2b20      	cmp	r3, #32
    5c96:	d10e      	bne.n	5cb6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5c98:	7b03      	ldrb	r3, [r0, #12]
    5c9a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5c9c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5c9e:	4313      	orrs	r3, r2
    5ca0:	89c2      	ldrh	r2, [r0, #14]
    5ca2:	0412      	lsls	r2, r2, #16
    5ca4:	490d      	ldr	r1, [pc, #52]	; (5cdc <system_clock_source_dfll_set_config+0x78>)
    5ca6:	400a      	ands	r2, r1
    5ca8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5caa:	4a0b      	ldr	r2, [pc, #44]	; (5cd8 <system_clock_source_dfll_set_config+0x74>)
    5cac:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5cae:	6811      	ldr	r1, [r2, #0]
    5cb0:	4b0b      	ldr	r3, [pc, #44]	; (5ce0 <system_clock_source_dfll_set_config+0x7c>)
    5cb2:	430b      	orrs	r3, r1
    5cb4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5cb6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5cb8:	7b03      	ldrb	r3, [r0, #12]
    5cba:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5cbc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5cbe:	4313      	orrs	r3, r2
    5cc0:	89c2      	ldrh	r2, [r0, #14]
    5cc2:	0412      	lsls	r2, r2, #16
    5cc4:	4905      	ldr	r1, [pc, #20]	; (5cdc <system_clock_source_dfll_set_config+0x78>)
    5cc6:	400a      	ands	r2, r1
    5cc8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5cca:	4a03      	ldr	r2, [pc, #12]	; (5cd8 <system_clock_source_dfll_set_config+0x74>)
    5ccc:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    5cce:	6813      	ldr	r3, [r2, #0]
    5cd0:	2104      	movs	r1, #4
    5cd2:	430b      	orrs	r3, r1
    5cd4:	6013      	str	r3, [r2, #0]
    5cd6:	e7ee      	b.n	5cb6 <system_clock_source_dfll_set_config+0x52>
    5cd8:	20000400 	.word	0x20000400
    5cdc:	03ff0000 	.word	0x03ff0000
    5ce0:	00000424 	.word	0x00000424

00005ce4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5ce4:	2808      	cmp	r0, #8
    5ce6:	d803      	bhi.n	5cf0 <system_clock_source_enable+0xc>
    5ce8:	0080      	lsls	r0, r0, #2
    5cea:	4b25      	ldr	r3, [pc, #148]	; (5d80 <system_clock_source_enable+0x9c>)
    5cec:	581b      	ldr	r3, [r3, r0]
    5cee:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5cf0:	2017      	movs	r0, #23
    5cf2:	e044      	b.n	5d7e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5cf4:	4a23      	ldr	r2, [pc, #140]	; (5d84 <system_clock_source_enable+0xa0>)
    5cf6:	6a13      	ldr	r3, [r2, #32]
    5cf8:	2102      	movs	r1, #2
    5cfa:	430b      	orrs	r3, r1
    5cfc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    5cfe:	2000      	movs	r0, #0
    5d00:	e03d      	b.n	5d7e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5d02:	4a20      	ldr	r2, [pc, #128]	; (5d84 <system_clock_source_enable+0xa0>)
    5d04:	6993      	ldr	r3, [r2, #24]
    5d06:	2102      	movs	r1, #2
    5d08:	430b      	orrs	r3, r1
    5d0a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    5d0c:	2000      	movs	r0, #0
		break;
    5d0e:	e036      	b.n	5d7e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5d10:	4a1c      	ldr	r2, [pc, #112]	; (5d84 <system_clock_source_enable+0xa0>)
    5d12:	8a13      	ldrh	r3, [r2, #16]
    5d14:	2102      	movs	r1, #2
    5d16:	430b      	orrs	r3, r1
    5d18:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    5d1a:	2000      	movs	r0, #0
		break;
    5d1c:	e02f      	b.n	5d7e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5d1e:	4a19      	ldr	r2, [pc, #100]	; (5d84 <system_clock_source_enable+0xa0>)
    5d20:	8a93      	ldrh	r3, [r2, #20]
    5d22:	2102      	movs	r1, #2
    5d24:	430b      	orrs	r3, r1
    5d26:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    5d28:	2000      	movs	r0, #0
		break;
    5d2a:	e028      	b.n	5d7e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5d2c:	4916      	ldr	r1, [pc, #88]	; (5d88 <system_clock_source_enable+0xa4>)
    5d2e:	680b      	ldr	r3, [r1, #0]
    5d30:	2202      	movs	r2, #2
    5d32:	4313      	orrs	r3, r2
    5d34:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5d36:	4b13      	ldr	r3, [pc, #76]	; (5d84 <system_clock_source_enable+0xa0>)
    5d38:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5d3a:	0019      	movs	r1, r3
    5d3c:	320e      	adds	r2, #14
    5d3e:	68cb      	ldr	r3, [r1, #12]
    5d40:	421a      	tst	r2, r3
    5d42:	d0fc      	beq.n	5d3e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5d44:	4a10      	ldr	r2, [pc, #64]	; (5d88 <system_clock_source_enable+0xa4>)
    5d46:	6891      	ldr	r1, [r2, #8]
    5d48:	4b0e      	ldr	r3, [pc, #56]	; (5d84 <system_clock_source_enable+0xa0>)
    5d4a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5d4c:	6852      	ldr	r2, [r2, #4]
    5d4e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    5d50:	2200      	movs	r2, #0
    5d52:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5d54:	0019      	movs	r1, r3
    5d56:	3210      	adds	r2, #16
    5d58:	68cb      	ldr	r3, [r1, #12]
    5d5a:	421a      	tst	r2, r3
    5d5c:	d0fc      	beq.n	5d58 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5d5e:	4b0a      	ldr	r3, [pc, #40]	; (5d88 <system_clock_source_enable+0xa4>)
    5d60:	681b      	ldr	r3, [r3, #0]
    5d62:	b29b      	uxth	r3, r3
    5d64:	4a07      	ldr	r2, [pc, #28]	; (5d84 <system_clock_source_enable+0xa0>)
    5d66:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    5d68:	2000      	movs	r0, #0
    5d6a:	e008      	b.n	5d7e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5d6c:	4905      	ldr	r1, [pc, #20]	; (5d84 <system_clock_source_enable+0xa0>)
    5d6e:	2244      	movs	r2, #68	; 0x44
    5d70:	5c8b      	ldrb	r3, [r1, r2]
    5d72:	2002      	movs	r0, #2
    5d74:	4303      	orrs	r3, r0
    5d76:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    5d78:	2000      	movs	r0, #0
		break;
    5d7a:	e000      	b.n	5d7e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    5d7c:	2000      	movs	r0, #0
}
    5d7e:	4770      	bx	lr
    5d80:	0000e428 	.word	0x0000e428
    5d84:	40000800 	.word	0x40000800
    5d88:	20000400 	.word	0x20000400

00005d8c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d8e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5d90:	22c2      	movs	r2, #194	; 0xc2
    5d92:	00d2      	lsls	r2, r2, #3
    5d94:	4b47      	ldr	r3, [pc, #284]	; (5eb4 <system_clock_init+0x128>)
    5d96:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5d98:	4a47      	ldr	r2, [pc, #284]	; (5eb8 <system_clock_init+0x12c>)
    5d9a:	6853      	ldr	r3, [r2, #4]
    5d9c:	211e      	movs	r1, #30
    5d9e:	438b      	bics	r3, r1
    5da0:	391a      	subs	r1, #26
    5da2:	430b      	orrs	r3, r1
    5da4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5da6:	2202      	movs	r2, #2
    5da8:	ab01      	add	r3, sp, #4
    5daa:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5dac:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5dae:	4d43      	ldr	r5, [pc, #268]	; (5ebc <system_clock_init+0x130>)
    5db0:	b2e0      	uxtb	r0, r4
    5db2:	a901      	add	r1, sp, #4
    5db4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5db6:	3401      	adds	r4, #1
    5db8:	2c25      	cmp	r4, #37	; 0x25
    5dba:	d1f9      	bne.n	5db0 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5dbc:	a80a      	add	r0, sp, #40	; 0x28
    5dbe:	2300      	movs	r3, #0
    5dc0:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    5dc2:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    5dc4:	2280      	movs	r2, #128	; 0x80
    5dc6:	0212      	lsls	r2, r2, #8
    5dc8:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    5dca:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    5dcc:	2201      	movs	r2, #1
    5dce:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    5dd0:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    5dd2:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5dd4:	3202      	adds	r2, #2
    5dd6:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    5dd8:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5dda:	4b39      	ldr	r3, [pc, #228]	; (5ec0 <system_clock_init+0x134>)
    5ddc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5dde:	2005      	movs	r0, #5
    5de0:	4b38      	ldr	r3, [pc, #224]	; (5ec4 <system_clock_init+0x138>)
    5de2:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5de4:	4933      	ldr	r1, [pc, #204]	; (5eb4 <system_clock_init+0x128>)
    5de6:	2202      	movs	r2, #2
    5de8:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5dea:	421a      	tst	r2, r3
    5dec:	d0fc      	beq.n	5de8 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    5dee:	4a31      	ldr	r2, [pc, #196]	; (5eb4 <system_clock_init+0x128>)
    5df0:	8a93      	ldrh	r3, [r2, #20]
    5df2:	2180      	movs	r1, #128	; 0x80
    5df4:	430b      	orrs	r3, r1
    5df6:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5df8:	ab05      	add	r3, sp, #20
    5dfa:	2100      	movs	r1, #0
    5dfc:	2200      	movs	r2, #0
    5dfe:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5e00:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5e02:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5e04:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5e06:	313f      	adds	r1, #63	; 0x3f
    5e08:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5e0a:	393b      	subs	r1, #59	; 0x3b
    5e0c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    5e0e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5e10:	4b2d      	ldr	r3, [pc, #180]	; (5ec8 <system_clock_init+0x13c>)
    5e12:	681b      	ldr	r3, [r3, #0]
    5e14:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    5e16:	2b3f      	cmp	r3, #63	; 0x3f
    5e18:	d04a      	beq.n	5eb0 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    5e1a:	a805      	add	r0, sp, #20
    5e1c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5e1e:	4b2b      	ldr	r3, [pc, #172]	; (5ecc <system_clock_init+0x140>)
    5e20:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5e22:	2307      	movs	r3, #7
    5e24:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5e26:	3338      	adds	r3, #56	; 0x38
    5e28:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5e2a:	4b29      	ldr	r3, [pc, #164]	; (5ed0 <system_clock_init+0x144>)
    5e2c:	4798      	blx	r3
	config->run_in_standby  = false;
    5e2e:	a804      	add	r0, sp, #16
    5e30:	2500      	movs	r5, #0
    5e32:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    5e34:	2601      	movs	r6, #1
    5e36:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5e38:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5e3a:	4b26      	ldr	r3, [pc, #152]	; (5ed4 <system_clock_init+0x148>)
    5e3c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5e3e:	2006      	movs	r0, #6
    5e40:	4f20      	ldr	r7, [pc, #128]	; (5ec4 <system_clock_init+0x138>)
    5e42:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5e44:	4b24      	ldr	r3, [pc, #144]	; (5ed8 <system_clock_init+0x14c>)
    5e46:	4798      	blx	r3
	config->division_factor    = 1;
    5e48:	ac01      	add	r4, sp, #4
    5e4a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    5e4c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    5e4e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5e50:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5e52:	2305      	movs	r3, #5
    5e54:	7023      	strb	r3, [r4, #0]
    5e56:	0021      	movs	r1, r4
    5e58:	2001      	movs	r0, #1
    5e5a:	4b20      	ldr	r3, [pc, #128]	; (5edc <system_clock_init+0x150>)
    5e5c:	4798      	blx	r3
    5e5e:	2001      	movs	r0, #1
    5e60:	4b1f      	ldr	r3, [pc, #124]	; (5ee0 <system_clock_init+0x154>)
    5e62:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5e64:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    5e66:	0021      	movs	r1, r4
    5e68:	2000      	movs	r0, #0
    5e6a:	4b14      	ldr	r3, [pc, #80]	; (5ebc <system_clock_init+0x130>)
    5e6c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    5e6e:	2000      	movs	r0, #0
    5e70:	4b1c      	ldr	r3, [pc, #112]	; (5ee4 <system_clock_init+0x158>)
    5e72:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5e74:	2007      	movs	r0, #7
    5e76:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5e78:	490e      	ldr	r1, [pc, #56]	; (5eb4 <system_clock_init+0x128>)
    5e7a:	22d0      	movs	r2, #208	; 0xd0
    5e7c:	68cb      	ldr	r3, [r1, #12]
    5e7e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5e80:	2bd0      	cmp	r3, #208	; 0xd0
    5e82:	d1fb      	bne.n	5e7c <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    5e84:	4a18      	ldr	r2, [pc, #96]	; (5ee8 <system_clock_init+0x15c>)
    5e86:	2300      	movs	r3, #0
    5e88:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    5e8a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    5e8c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    5e8e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    5e90:	a901      	add	r1, sp, #4
    5e92:	2201      	movs	r2, #1
    5e94:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    5e96:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    5e98:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    5e9a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5e9c:	3307      	adds	r3, #7
    5e9e:	700b      	strb	r3, [r1, #0]
    5ea0:	2000      	movs	r0, #0
    5ea2:	4b0e      	ldr	r3, [pc, #56]	; (5edc <system_clock_init+0x150>)
    5ea4:	4798      	blx	r3
    5ea6:	2000      	movs	r0, #0
    5ea8:	4b0d      	ldr	r3, [pc, #52]	; (5ee0 <system_clock_init+0x154>)
    5eaa:	4798      	blx	r3
#endif
}
    5eac:	b00f      	add	sp, #60	; 0x3c
    5eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    5eb0:	3b20      	subs	r3, #32
    5eb2:	e7b2      	b.n	5e1a <system_clock_init+0x8e>
    5eb4:	40000800 	.word	0x40000800
    5eb8:	41004000 	.word	0x41004000
    5ebc:	00006125 	.word	0x00006125
    5ec0:	00005bad 	.word	0x00005bad
    5ec4:	00005ce5 	.word	0x00005ce5
    5ec8:	00806024 	.word	0x00806024
    5ecc:	000005b9 	.word	0x000005b9
    5ed0:	00005c65 	.word	0x00005c65
    5ed4:	00005b71 	.word	0x00005b71
    5ed8:	00005eed 	.word	0x00005eed
    5edc:	00005f11 	.word	0x00005f11
    5ee0:	00005fc9 	.word	0x00005fc9
    5ee4:	00006099 	.word	0x00006099
    5ee8:	40000400 	.word	0x40000400

00005eec <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    5eec:	4a06      	ldr	r2, [pc, #24]	; (5f08 <system_gclk_init+0x1c>)
    5eee:	6993      	ldr	r3, [r2, #24]
    5ef0:	2108      	movs	r1, #8
    5ef2:	430b      	orrs	r3, r1
    5ef4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5ef6:	2201      	movs	r2, #1
    5ef8:	4b04      	ldr	r3, [pc, #16]	; (5f0c <system_gclk_init+0x20>)
    5efa:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5efc:	0019      	movs	r1, r3
    5efe:	780b      	ldrb	r3, [r1, #0]
    5f00:	4213      	tst	r3, r2
    5f02:	d1fc      	bne.n	5efe <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5f04:	4770      	bx	lr
    5f06:	46c0      	nop			; (mov r8, r8)
    5f08:	40000400 	.word	0x40000400
    5f0c:	40000c00 	.word	0x40000c00

00005f10 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5f10:	b570      	push	{r4, r5, r6, lr}
    5f12:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5f14:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5f16:	780d      	ldrb	r5, [r1, #0]
    5f18:	022d      	lsls	r5, r5, #8
    5f1a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5f1c:	784b      	ldrb	r3, [r1, #1]
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d002      	beq.n	5f28 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5f22:	2380      	movs	r3, #128	; 0x80
    5f24:	02db      	lsls	r3, r3, #11
    5f26:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5f28:	7a4b      	ldrb	r3, [r1, #9]
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d002      	beq.n	5f34 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5f2e:	2380      	movs	r3, #128	; 0x80
    5f30:	031b      	lsls	r3, r3, #12
    5f32:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5f34:	6848      	ldr	r0, [r1, #4]
    5f36:	2801      	cmp	r0, #1
    5f38:	d910      	bls.n	5f5c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5f3a:	1e43      	subs	r3, r0, #1
    5f3c:	4218      	tst	r0, r3
    5f3e:	d134      	bne.n	5faa <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5f40:	2802      	cmp	r0, #2
    5f42:	d930      	bls.n	5fa6 <system_gclk_gen_set_config+0x96>
    5f44:	2302      	movs	r3, #2
    5f46:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5f48:	3201      	adds	r2, #1
						mask <<= 1) {
    5f4a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5f4c:	4298      	cmp	r0, r3
    5f4e:	d8fb      	bhi.n	5f48 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5f50:	0212      	lsls	r2, r2, #8
    5f52:	4332      	orrs	r2, r6
    5f54:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5f56:	2380      	movs	r3, #128	; 0x80
    5f58:	035b      	lsls	r3, r3, #13
    5f5a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5f5c:	7a0b      	ldrb	r3, [r1, #8]
    5f5e:	2b00      	cmp	r3, #0
    5f60:	d002      	beq.n	5f68 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5f62:	2380      	movs	r3, #128	; 0x80
    5f64:	039b      	lsls	r3, r3, #14
    5f66:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5f68:	4a13      	ldr	r2, [pc, #76]	; (5fb8 <system_gclk_gen_set_config+0xa8>)
    5f6a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    5f6c:	b25b      	sxtb	r3, r3
    5f6e:	2b00      	cmp	r3, #0
    5f70:	dbfb      	blt.n	5f6a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    5f72:	4b12      	ldr	r3, [pc, #72]	; (5fbc <system_gclk_gen_set_config+0xac>)
    5f74:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5f76:	4b12      	ldr	r3, [pc, #72]	; (5fc0 <system_gclk_gen_set_config+0xb0>)
    5f78:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5f7a:	4a0f      	ldr	r2, [pc, #60]	; (5fb8 <system_gclk_gen_set_config+0xa8>)
    5f7c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5f7e:	b25b      	sxtb	r3, r3
    5f80:	2b00      	cmp	r3, #0
    5f82:	dbfb      	blt.n	5f7c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5f84:	4b0c      	ldr	r3, [pc, #48]	; (5fb8 <system_gclk_gen_set_config+0xa8>)
    5f86:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5f88:	001a      	movs	r2, r3
    5f8a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5f8c:	b25b      	sxtb	r3, r3
    5f8e:	2b00      	cmp	r3, #0
    5f90:	dbfb      	blt.n	5f8a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5f92:	4a09      	ldr	r2, [pc, #36]	; (5fb8 <system_gclk_gen_set_config+0xa8>)
    5f94:	6853      	ldr	r3, [r2, #4]
    5f96:	2180      	movs	r1, #128	; 0x80
    5f98:	0249      	lsls	r1, r1, #9
    5f9a:	400b      	ands	r3, r1
    5f9c:	431d      	orrs	r5, r3
    5f9e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    5fa0:	4b08      	ldr	r3, [pc, #32]	; (5fc4 <system_gclk_gen_set_config+0xb4>)
    5fa2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5fa4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5fa6:	2200      	movs	r2, #0
    5fa8:	e7d2      	b.n	5f50 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5faa:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5fac:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5fae:	2380      	movs	r3, #128	; 0x80
    5fb0:	029b      	lsls	r3, r3, #10
    5fb2:	431d      	orrs	r5, r3
    5fb4:	e7d2      	b.n	5f5c <system_gclk_gen_set_config+0x4c>
    5fb6:	46c0      	nop			; (mov r8, r8)
    5fb8:	40000c00 	.word	0x40000c00
    5fbc:	00004559 	.word	0x00004559
    5fc0:	40000c08 	.word	0x40000c08
    5fc4:	00004599 	.word	0x00004599

00005fc8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5fc8:	b510      	push	{r4, lr}
    5fca:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5fcc:	4a0b      	ldr	r2, [pc, #44]	; (5ffc <system_gclk_gen_enable+0x34>)
    5fce:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5fd0:	b25b      	sxtb	r3, r3
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	dbfb      	blt.n	5fce <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    5fd6:	4b0a      	ldr	r3, [pc, #40]	; (6000 <system_gclk_gen_enable+0x38>)
    5fd8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5fda:	4b0a      	ldr	r3, [pc, #40]	; (6004 <system_gclk_gen_enable+0x3c>)
    5fdc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5fde:	4a07      	ldr	r2, [pc, #28]	; (5ffc <system_gclk_gen_enable+0x34>)
    5fe0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5fe2:	b25b      	sxtb	r3, r3
    5fe4:	2b00      	cmp	r3, #0
    5fe6:	dbfb      	blt.n	5fe0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5fe8:	4a04      	ldr	r2, [pc, #16]	; (5ffc <system_gclk_gen_enable+0x34>)
    5fea:	6851      	ldr	r1, [r2, #4]
    5fec:	2380      	movs	r3, #128	; 0x80
    5fee:	025b      	lsls	r3, r3, #9
    5ff0:	430b      	orrs	r3, r1
    5ff2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    5ff4:	4b04      	ldr	r3, [pc, #16]	; (6008 <system_gclk_gen_enable+0x40>)
    5ff6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5ff8:	bd10      	pop	{r4, pc}
    5ffa:	46c0      	nop			; (mov r8, r8)
    5ffc:	40000c00 	.word	0x40000c00
    6000:	00004559 	.word	0x00004559
    6004:	40000c04 	.word	0x40000c04
    6008:	00004599 	.word	0x00004599

0000600c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    600c:	b570      	push	{r4, r5, r6, lr}
    600e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6010:	4a1a      	ldr	r2, [pc, #104]	; (607c <system_gclk_gen_get_hz+0x70>)
    6012:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6014:	b25b      	sxtb	r3, r3
    6016:	2b00      	cmp	r3, #0
    6018:	dbfb      	blt.n	6012 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    601a:	4b19      	ldr	r3, [pc, #100]	; (6080 <system_gclk_gen_get_hz+0x74>)
    601c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    601e:	4b19      	ldr	r3, [pc, #100]	; (6084 <system_gclk_gen_get_hz+0x78>)
    6020:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6022:	4a16      	ldr	r2, [pc, #88]	; (607c <system_gclk_gen_get_hz+0x70>)
    6024:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6026:	b25b      	sxtb	r3, r3
    6028:	2b00      	cmp	r3, #0
    602a:	dbfb      	blt.n	6024 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    602c:	4e13      	ldr	r6, [pc, #76]	; (607c <system_gclk_gen_get_hz+0x70>)
    602e:	6870      	ldr	r0, [r6, #4]
    6030:	04c0      	lsls	r0, r0, #19
    6032:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6034:	4b14      	ldr	r3, [pc, #80]	; (6088 <system_gclk_gen_get_hz+0x7c>)
    6036:	4798      	blx	r3
    6038:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    603a:	4b12      	ldr	r3, [pc, #72]	; (6084 <system_gclk_gen_get_hz+0x78>)
    603c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    603e:	6876      	ldr	r6, [r6, #4]
    6040:	02f6      	lsls	r6, r6, #11
    6042:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6044:	4b11      	ldr	r3, [pc, #68]	; (608c <system_gclk_gen_get_hz+0x80>)
    6046:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6048:	4a0c      	ldr	r2, [pc, #48]	; (607c <system_gclk_gen_get_hz+0x70>)
    604a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    604c:	b25b      	sxtb	r3, r3
    604e:	2b00      	cmp	r3, #0
    6050:	dbfb      	blt.n	604a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6052:	4b0a      	ldr	r3, [pc, #40]	; (607c <system_gclk_gen_get_hz+0x70>)
    6054:	689c      	ldr	r4, [r3, #8]
    6056:	0224      	lsls	r4, r4, #8
    6058:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    605a:	4b0d      	ldr	r3, [pc, #52]	; (6090 <system_gclk_gen_get_hz+0x84>)
    605c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    605e:	2e00      	cmp	r6, #0
    6060:	d107      	bne.n	6072 <system_gclk_gen_get_hz+0x66>
    6062:	2c01      	cmp	r4, #1
    6064:	d907      	bls.n	6076 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    6066:	0021      	movs	r1, r4
    6068:	0028      	movs	r0, r5
    606a:	4b0a      	ldr	r3, [pc, #40]	; (6094 <system_gclk_gen_get_hz+0x88>)
    606c:	4798      	blx	r3
    606e:	0005      	movs	r5, r0
    6070:	e001      	b.n	6076 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    6072:	3401      	adds	r4, #1
    6074:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    6076:	0028      	movs	r0, r5
    6078:	bd70      	pop	{r4, r5, r6, pc}
    607a:	46c0      	nop			; (mov r8, r8)
    607c:	40000c00 	.word	0x40000c00
    6080:	00004559 	.word	0x00004559
    6084:	40000c04 	.word	0x40000c04
    6088:	00005add 	.word	0x00005add
    608c:	40000c08 	.word	0x40000c08
    6090:	00004599 	.word	0x00004599
    6094:	0000b9bd 	.word	0x0000b9bd

00006098 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6098:	b510      	push	{r4, lr}
    609a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    609c:	4b06      	ldr	r3, [pc, #24]	; (60b8 <system_gclk_chan_enable+0x20>)
    609e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    60a0:	4b06      	ldr	r3, [pc, #24]	; (60bc <system_gclk_chan_enable+0x24>)
    60a2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    60a4:	4a06      	ldr	r2, [pc, #24]	; (60c0 <system_gclk_chan_enable+0x28>)
    60a6:	8853      	ldrh	r3, [r2, #2]
    60a8:	2180      	movs	r1, #128	; 0x80
    60aa:	01c9      	lsls	r1, r1, #7
    60ac:	430b      	orrs	r3, r1
    60ae:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    60b0:	4b04      	ldr	r3, [pc, #16]	; (60c4 <system_gclk_chan_enable+0x2c>)
    60b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    60b4:	bd10      	pop	{r4, pc}
    60b6:	46c0      	nop			; (mov r8, r8)
    60b8:	00004559 	.word	0x00004559
    60bc:	40000c02 	.word	0x40000c02
    60c0:	40000c00 	.word	0x40000c00
    60c4:	00004599 	.word	0x00004599

000060c8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    60c8:	b510      	push	{r4, lr}
    60ca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    60cc:	4b0f      	ldr	r3, [pc, #60]	; (610c <system_gclk_chan_disable+0x44>)
    60ce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    60d0:	4b0f      	ldr	r3, [pc, #60]	; (6110 <system_gclk_chan_disable+0x48>)
    60d2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    60d4:	4a0f      	ldr	r2, [pc, #60]	; (6114 <system_gclk_chan_disable+0x4c>)
    60d6:	8853      	ldrh	r3, [r2, #2]
    60d8:	051b      	lsls	r3, r3, #20
    60da:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    60dc:	8853      	ldrh	r3, [r2, #2]
    60de:	490e      	ldr	r1, [pc, #56]	; (6118 <system_gclk_chan_disable+0x50>)
    60e0:	400b      	ands	r3, r1
    60e2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    60e4:	8853      	ldrh	r3, [r2, #2]
    60e6:	490d      	ldr	r1, [pc, #52]	; (611c <system_gclk_chan_disable+0x54>)
    60e8:	400b      	ands	r3, r1
    60ea:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    60ec:	0011      	movs	r1, r2
    60ee:	2280      	movs	r2, #128	; 0x80
    60f0:	01d2      	lsls	r2, r2, #7
    60f2:	884b      	ldrh	r3, [r1, #2]
    60f4:	4213      	tst	r3, r2
    60f6:	d1fc      	bne.n	60f2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    60f8:	4906      	ldr	r1, [pc, #24]	; (6114 <system_gclk_chan_disable+0x4c>)
    60fa:	884a      	ldrh	r2, [r1, #2]
    60fc:	0203      	lsls	r3, r0, #8
    60fe:	4806      	ldr	r0, [pc, #24]	; (6118 <system_gclk_chan_disable+0x50>)
    6100:	4002      	ands	r2, r0
    6102:	4313      	orrs	r3, r2
    6104:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    6106:	4b06      	ldr	r3, [pc, #24]	; (6120 <system_gclk_chan_disable+0x58>)
    6108:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    610a:	bd10      	pop	{r4, pc}
    610c:	00004559 	.word	0x00004559
    6110:	40000c02 	.word	0x40000c02
    6114:	40000c00 	.word	0x40000c00
    6118:	fffff0ff 	.word	0xfffff0ff
    611c:	ffffbfff 	.word	0xffffbfff
    6120:	00004599 	.word	0x00004599

00006124 <system_gclk_chan_set_config>:
{
    6124:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6126:	780c      	ldrb	r4, [r1, #0]
    6128:	0224      	lsls	r4, r4, #8
    612a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    612c:	4b02      	ldr	r3, [pc, #8]	; (6138 <system_gclk_chan_set_config+0x14>)
    612e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6130:	b2a4      	uxth	r4, r4
    6132:	4b02      	ldr	r3, [pc, #8]	; (613c <system_gclk_chan_set_config+0x18>)
    6134:	805c      	strh	r4, [r3, #2]
}
    6136:	bd10      	pop	{r4, pc}
    6138:	000060c9 	.word	0x000060c9
    613c:	40000c00 	.word	0x40000c00

00006140 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6140:	b510      	push	{r4, lr}
    6142:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6144:	4b06      	ldr	r3, [pc, #24]	; (6160 <system_gclk_chan_get_hz+0x20>)
    6146:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6148:	4b06      	ldr	r3, [pc, #24]	; (6164 <system_gclk_chan_get_hz+0x24>)
    614a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    614c:	4b06      	ldr	r3, [pc, #24]	; (6168 <system_gclk_chan_get_hz+0x28>)
    614e:	885c      	ldrh	r4, [r3, #2]
    6150:	0524      	lsls	r4, r4, #20
    6152:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6154:	4b05      	ldr	r3, [pc, #20]	; (616c <system_gclk_chan_get_hz+0x2c>)
    6156:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6158:	0020      	movs	r0, r4
    615a:	4b05      	ldr	r3, [pc, #20]	; (6170 <system_gclk_chan_get_hz+0x30>)
    615c:	4798      	blx	r3
}
    615e:	bd10      	pop	{r4, pc}
    6160:	00004559 	.word	0x00004559
    6164:	40000c02 	.word	0x40000c02
    6168:	40000c00 	.word	0x40000c00
    616c:	00004599 	.word	0x00004599
    6170:	0000600d 	.word	0x0000600d

00006174 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6174:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6176:	78d3      	ldrb	r3, [r2, #3]
    6178:	2b00      	cmp	r3, #0
    617a:	d135      	bne.n	61e8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    617c:	7813      	ldrb	r3, [r2, #0]
    617e:	2b80      	cmp	r3, #128	; 0x80
    6180:	d029      	beq.n	61d6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6182:	061b      	lsls	r3, r3, #24
    6184:	2480      	movs	r4, #128	; 0x80
    6186:	0264      	lsls	r4, r4, #9
    6188:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    618a:	7854      	ldrb	r4, [r2, #1]
    618c:	2502      	movs	r5, #2
    618e:	43ac      	bics	r4, r5
    6190:	d106      	bne.n	61a0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6192:	7894      	ldrb	r4, [r2, #2]
    6194:	2c00      	cmp	r4, #0
    6196:	d120      	bne.n	61da <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6198:	2480      	movs	r4, #128	; 0x80
    619a:	02a4      	lsls	r4, r4, #10
    619c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    619e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    61a0:	7854      	ldrb	r4, [r2, #1]
    61a2:	3c01      	subs	r4, #1
    61a4:	2c01      	cmp	r4, #1
    61a6:	d91c      	bls.n	61e2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    61a8:	040d      	lsls	r5, r1, #16
    61aa:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    61ac:	24a0      	movs	r4, #160	; 0xa0
    61ae:	05e4      	lsls	r4, r4, #23
    61b0:	432c      	orrs	r4, r5
    61b2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61b4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    61b6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    61b8:	24d0      	movs	r4, #208	; 0xd0
    61ba:	0624      	lsls	r4, r4, #24
    61bc:	432c      	orrs	r4, r5
    61be:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61c0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    61c2:	78d4      	ldrb	r4, [r2, #3]
    61c4:	2c00      	cmp	r4, #0
    61c6:	d122      	bne.n	620e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    61c8:	035b      	lsls	r3, r3, #13
    61ca:	d51c      	bpl.n	6206 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    61cc:	7893      	ldrb	r3, [r2, #2]
    61ce:	2b01      	cmp	r3, #1
    61d0:	d01e      	beq.n	6210 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    61d2:	6141      	str	r1, [r0, #20]
    61d4:	e017      	b.n	6206 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    61d6:	2300      	movs	r3, #0
    61d8:	e7d7      	b.n	618a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    61da:	24c0      	movs	r4, #192	; 0xc0
    61dc:	02e4      	lsls	r4, r4, #11
    61de:	4323      	orrs	r3, r4
    61e0:	e7dd      	b.n	619e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    61e2:	4c0d      	ldr	r4, [pc, #52]	; (6218 <_system_pinmux_config+0xa4>)
    61e4:	4023      	ands	r3, r4
    61e6:	e7df      	b.n	61a8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    61e8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    61ea:	040c      	lsls	r4, r1, #16
    61ec:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    61ee:	23a0      	movs	r3, #160	; 0xa0
    61f0:	05db      	lsls	r3, r3, #23
    61f2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61f4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    61f6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    61f8:	23d0      	movs	r3, #208	; 0xd0
    61fa:	061b      	lsls	r3, r3, #24
    61fc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61fe:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6200:	78d3      	ldrb	r3, [r2, #3]
    6202:	2b00      	cmp	r3, #0
    6204:	d103      	bne.n	620e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6206:	7853      	ldrb	r3, [r2, #1]
    6208:	3b01      	subs	r3, #1
    620a:	2b01      	cmp	r3, #1
    620c:	d902      	bls.n	6214 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    620e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6210:	6181      	str	r1, [r0, #24]
    6212:	e7f8      	b.n	6206 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6214:	6081      	str	r1, [r0, #8]
}
    6216:	e7fa      	b.n	620e <_system_pinmux_config+0x9a>
    6218:	fffbffff 	.word	0xfffbffff

0000621c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    621c:	b510      	push	{r4, lr}
    621e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6220:	09c1      	lsrs	r1, r0, #7
		return NULL;
    6222:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6224:	2900      	cmp	r1, #0
    6226:	d104      	bne.n	6232 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6228:	0943      	lsrs	r3, r0, #5
    622a:	01db      	lsls	r3, r3, #7
    622c:	4905      	ldr	r1, [pc, #20]	; (6244 <system_pinmux_pin_set_config+0x28>)
    622e:	468c      	mov	ip, r1
    6230:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6232:	241f      	movs	r4, #31
    6234:	4020      	ands	r0, r4
    6236:	2101      	movs	r1, #1
    6238:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    623a:	0018      	movs	r0, r3
    623c:	4b02      	ldr	r3, [pc, #8]	; (6248 <system_pinmux_pin_set_config+0x2c>)
    623e:	4798      	blx	r3
}
    6240:	bd10      	pop	{r4, pc}
    6242:	46c0      	nop			; (mov r8, r8)
    6244:	41004400 	.word	0x41004400
    6248:	00006175 	.word	0x00006175

0000624c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    624c:	4770      	bx	lr
	...

00006250 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6250:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6252:	4b05      	ldr	r3, [pc, #20]	; (6268 <system_init+0x18>)
    6254:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6256:	4b05      	ldr	r3, [pc, #20]	; (626c <system_init+0x1c>)
    6258:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    625a:	4b05      	ldr	r3, [pc, #20]	; (6270 <system_init+0x20>)
    625c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    625e:	4b05      	ldr	r3, [pc, #20]	; (6274 <system_init+0x24>)
    6260:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6262:	4b05      	ldr	r3, [pc, #20]	; (6278 <system_init+0x28>)
    6264:	4798      	blx	r3
}
    6266:	bd10      	pop	{r4, pc}
    6268:	00005d8d 	.word	0x00005d8d
    626c:	000045c9 	.word	0x000045c9
    6270:	0000624d 	.word	0x0000624d
    6274:	000046d9 	.word	0x000046d9
    6278:	0000624d 	.word	0x0000624d

0000627c <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    627c:	4b09      	ldr	r3, [pc, #36]	; (62a4 <_tcc_get_inst_index+0x28>)
    627e:	4298      	cmp	r0, r3
    6280:	d00c      	beq.n	629c <_tcc_get_inst_index+0x20>
    6282:	4b09      	ldr	r3, [pc, #36]	; (62a8 <_tcc_get_inst_index+0x2c>)
    6284:	4298      	cmp	r0, r3
    6286:	d007      	beq.n	6298 <_tcc_get_inst_index+0x1c>
    6288:	4a08      	ldr	r2, [pc, #32]	; (62ac <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    628a:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    628c:	4290      	cmp	r0, r2
    628e:	d001      	beq.n	6294 <_tcc_get_inst_index+0x18>
}
    6290:	0018      	movs	r0, r3
    6292:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    6294:	3302      	adds	r3, #2
    6296:	e002      	b.n	629e <_tcc_get_inst_index+0x22>
    6298:	2301      	movs	r3, #1
    629a:	e000      	b.n	629e <_tcc_get_inst_index+0x22>
    629c:	2300      	movs	r3, #0
			return i;
    629e:	b2db      	uxtb	r3, r3
    62a0:	e7f6      	b.n	6290 <_tcc_get_inst_index+0x14>
    62a2:	46c0      	nop			; (mov r8, r8)
    62a4:	42002000 	.word	0x42002000
    62a8:	42002400 	.word	0x42002400
    62ac:	42002800 	.word	0x42002800

000062b0 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    62b0:	b510      	push	{r4, lr}
    62b2:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    62b4:	0008      	movs	r0, r1
    62b6:	4b4f      	ldr	r3, [pc, #316]	; (63f4 <tcc_get_config_defaults+0x144>)
    62b8:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    62ba:	2300      	movs	r3, #0
    62bc:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    62be:	0080      	lsls	r0, r0, #2
    62c0:	4a4d      	ldr	r2, [pc, #308]	; (63f8 <tcc_get_config_defaults+0x148>)
    62c2:	5882      	ldr	r2, [r0, r2]
    62c4:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    62c6:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    62c8:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    62ca:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    62cc:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    62ce:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    62d0:	61e3      	str	r3, [r4, #28]
    62d2:	6223      	str	r3, [r4, #32]
    62d4:	6263      	str	r3, [r4, #36]	; 0x24
    62d6:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    62d8:	7523      	strb	r3, [r4, #20]
    62da:	7563      	strb	r3, [r4, #21]
    62dc:	75a3      	strb	r3, [r4, #22]
    62de:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    62e0:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    62e2:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    62e4:	7423      	strb	r3, [r4, #16]
    62e6:	7463      	strb	r3, [r4, #17]
    62e8:	74a3      	strb	r3, [r4, #18]
    62ea:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    62ec:	222c      	movs	r2, #44	; 0x2c
    62ee:	54a3      	strb	r3, [r4, r2]
    62f0:	3201      	adds	r2, #1
    62f2:	54a3      	strb	r3, [r4, r2]
    62f4:	3201      	adds	r2, #1
    62f6:	54a3      	strb	r3, [r4, r2]
    62f8:	3201      	adds	r2, #1
    62fa:	54a3      	strb	r3, [r4, r2]
    62fc:	3201      	adds	r2, #1
    62fe:	54a3      	strb	r3, [r4, r2]
    6300:	3201      	adds	r2, #1
    6302:	54a3      	strb	r3, [r4, r2]
    6304:	3201      	adds	r2, #1
    6306:	54a3      	strb	r3, [r4, r2]
    6308:	3201      	adds	r2, #1
    630a:	54a3      	strb	r3, [r4, r2]
    630c:	3201      	adds	r2, #1
    630e:	54a3      	strb	r3, [r4, r2]
    6310:	3201      	adds	r2, #1
    6312:	54a3      	strb	r3, [r4, r2]
    6314:	3201      	adds	r2, #1
    6316:	54a3      	strb	r3, [r4, r2]
    6318:	3201      	adds	r2, #1
    631a:	54a3      	strb	r3, [r4, r2]
    631c:	3201      	adds	r2, #1
    631e:	54a3      	strb	r3, [r4, r2]
    6320:	3201      	adds	r2, #1
    6322:	54a3      	strb	r3, [r4, r2]
    6324:	3201      	adds	r2, #1
    6326:	54a3      	strb	r3, [r4, r2]
    6328:	3201      	adds	r2, #1
    632a:	54a3      	strb	r3, [r4, r2]
    632c:	3201      	adds	r2, #1
    632e:	54a3      	strb	r3, [r4, r2]
    6330:	3201      	adds	r2, #1
    6332:	54a3      	strb	r3, [r4, r2]
    6334:	3201      	adds	r2, #1
    6336:	54a3      	strb	r3, [r4, r2]
    6338:	3201      	adds	r2, #1
    633a:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    633c:	3201      	adds	r2, #1
    633e:	54a3      	strb	r3, [r4, r2]
    6340:	3201      	adds	r2, #1
    6342:	54a3      	strb	r3, [r4, r2]
    6344:	3201      	adds	r2, #1
    6346:	54a3      	strb	r3, [r4, r2]
    6348:	3201      	adds	r2, #1
    634a:	54a3      	strb	r3, [r4, r2]
    634c:	3201      	adds	r2, #1
    634e:	54a3      	strb	r3, [r4, r2]
    6350:	3201      	adds	r2, #1
    6352:	54a3      	strb	r3, [r4, r2]
    6354:	3201      	adds	r2, #1
    6356:	54a3      	strb	r3, [r4, r2]
    6358:	3201      	adds	r2, #1
    635a:	54a3      	strb	r3, [r4, r2]
    635c:	3201      	adds	r2, #1
    635e:	54a3      	strb	r3, [r4, r2]
    6360:	3201      	adds	r2, #1
    6362:	54a3      	strb	r3, [r4, r2]
    6364:	3201      	adds	r2, #1
    6366:	54a3      	strb	r3, [r4, r2]
    6368:	3201      	adds	r2, #1
    636a:	54a3      	strb	r3, [r4, r2]
    636c:	3201      	adds	r2, #1
    636e:	54a3      	strb	r3, [r4, r2]
    6370:	3201      	adds	r2, #1
    6372:	54a3      	strb	r3, [r4, r2]
    6374:	3201      	adds	r2, #1
    6376:	54a3      	strb	r3, [r4, r2]
    6378:	3201      	adds	r2, #1
    637a:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    637c:	3201      	adds	r2, #1
    637e:	54a3      	strb	r3, [r4, r2]
    6380:	3201      	adds	r2, #1
    6382:	54a3      	strb	r3, [r4, r2]
    6384:	3201      	adds	r2, #1
    6386:	54a3      	strb	r3, [r4, r2]
    6388:	3201      	adds	r2, #1
    638a:	54a3      	strb	r3, [r4, r2]
    638c:	3201      	adds	r2, #1
    638e:	54a3      	strb	r3, [r4, r2]
    6390:	3201      	adds	r2, #1
    6392:	54a3      	strb	r3, [r4, r2]
    6394:	3201      	adds	r2, #1
    6396:	54a3      	strb	r3, [r4, r2]
    6398:	3201      	adds	r2, #1
    639a:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    639c:	3241      	adds	r2, #65	; 0x41
    639e:	54a3      	strb	r3, [r4, r2]
    63a0:	65a3      	str	r3, [r4, #88]	; 0x58
    63a2:	67a3      	str	r3, [r4, #120]	; 0x78
    63a4:	3201      	adds	r2, #1
    63a6:	54a3      	strb	r3, [r4, r2]
    63a8:	65e3      	str	r3, [r4, #92]	; 0x5c
    63aa:	67e3      	str	r3, [r4, #124]	; 0x7c
    63ac:	3201      	adds	r2, #1
    63ae:	54a3      	strb	r3, [r4, r2]
    63b0:	6623      	str	r3, [r4, #96]	; 0x60
    63b2:	3a1a      	subs	r2, #26
    63b4:	50a3      	str	r3, [r4, r2]
    63b6:	321b      	adds	r2, #27
    63b8:	54a3      	strb	r3, [r4, r2]
    63ba:	6663      	str	r3, [r4, #100]	; 0x64
    63bc:	3a17      	subs	r2, #23
    63be:	50a3      	str	r3, [r4, r2]
    63c0:	3218      	adds	r2, #24
    63c2:	54a3      	strb	r3, [r4, r2]
    63c4:	66a3      	str	r3, [r4, #104]	; 0x68
    63c6:	3a14      	subs	r2, #20
    63c8:	50a3      	str	r3, [r4, r2]
    63ca:	3215      	adds	r2, #21
    63cc:	54a3      	strb	r3, [r4, r2]
    63ce:	66e3      	str	r3, [r4, #108]	; 0x6c
    63d0:	3a11      	subs	r2, #17
    63d2:	50a3      	str	r3, [r4, r2]
    63d4:	3212      	adds	r2, #18
    63d6:	54a3      	strb	r3, [r4, r2]
    63d8:	6723      	str	r3, [r4, #112]	; 0x70
    63da:	3a0e      	subs	r2, #14
    63dc:	50a3      	str	r3, [r4, r2]
    63de:	320f      	adds	r2, #15
    63e0:	54a3      	strb	r3, [r4, r2]
    63e2:	6763      	str	r3, [r4, #116]	; 0x74
    63e4:	3a0b      	subs	r2, #11
    63e6:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    63e8:	2101      	movs	r1, #1
    63ea:	320c      	adds	r2, #12
    63ec:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    63ee:	3201      	adds	r2, #1
    63f0:	54a3      	strb	r3, [r4, r2]
}
    63f2:	bd10      	pop	{r4, pc}
    63f4:	0000627d 	.word	0x0000627d
    63f8:	0000e460 	.word	0x0000e460

000063fc <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    63fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    63fe:	46de      	mov	lr, fp
    6400:	4657      	mov	r7, sl
    6402:	464e      	mov	r6, r9
    6404:	4645      	mov	r5, r8
    6406:	b5e0      	push	{r5, r6, r7, lr}
    6408:	b091      	sub	sp, #68	; 0x44
    640a:	9001      	str	r0, [sp, #4]
    640c:	000c      	movs	r4, r1
    640e:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    6410:	0008      	movs	r0, r1
    6412:	4bc3      	ldr	r3, [pc, #780]	; (6720 <tcc_init+0x324>)
    6414:	4798      	blx	r3
    6416:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    6418:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    641a:	48c2      	ldr	r0, [pc, #776]	; (6724 <tcc_init+0x328>)
    641c:	6a02      	ldr	r2, [r0, #32]
    641e:	009e      	lsls	r6, r3, #2
    6420:	4fc1      	ldr	r7, [pc, #772]	; (6728 <tcc_init+0x32c>)
    6422:	59f7      	ldr	r7, [r6, r7]
    6424:	433a      	orrs	r2, r7
    6426:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    6428:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    642a:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    642c:	0792      	lsls	r2, r2, #30
    642e:	d506      	bpl.n	643e <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    6430:	b011      	add	sp, #68	; 0x44
    6432:	bc3c      	pop	{r2, r3, r4, r5}
    6434:	4690      	mov	r8, r2
    6436:	4699      	mov	r9, r3
    6438:	46a2      	mov	sl, r4
    643a:	46ab      	mov	fp, r5
    643c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    643e:	6822      	ldr	r2, [r4, #0]
    6440:	2701      	movs	r7, #1
    6442:	4017      	ands	r7, r2
    6444:	d1f4      	bne.n	6430 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    6446:	48b9      	ldr	r0, [pc, #740]	; (672c <tcc_init+0x330>)
    6448:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    644a:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    644c:	682e      	ldr	r6, [r5, #0]
    644e:	42b2      	cmp	r2, r6
    6450:	d3ee      	bcc.n	6430 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    6452:	686e      	ldr	r6, [r5, #4]
    6454:	42b2      	cmp	r2, r6
    6456:	d3eb      	bcc.n	6430 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    6458:	69e8      	ldr	r0, [r5, #28]
    645a:	4282      	cmp	r2, r0
    645c:	d200      	bcs.n	6460 <tcc_init+0x64>
    645e:	e1b9      	b.n	67d4 <tcc_init+0x3d8>
    6460:	6a28      	ldr	r0, [r5, #32]
    6462:	4282      	cmp	r2, r0
    6464:	d200      	bcs.n	6468 <tcc_init+0x6c>
    6466:	e1b7      	b.n	67d8 <tcc_init+0x3dc>
    6468:	6a68      	ldr	r0, [r5, #36]	; 0x24
    646a:	4282      	cmp	r2, r0
    646c:	d200      	bcs.n	6470 <tcc_init+0x74>
    646e:	e1b5      	b.n	67dc <tcc_init+0x3e0>
    6470:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6472:	4282      	cmp	r2, r0
    6474:	d200      	bcs.n	6478 <tcc_init+0x7c>
    6476:	e1b3      	b.n	67e0 <tcc_init+0x3e4>
    6478:	2298      	movs	r2, #152	; 0x98
    647a:	4694      	mov	ip, r2
    647c:	44ac      	add	ip, r5
    647e:	4662      	mov	r2, ip
    6480:	9208      	str	r2, [sp, #32]
    6482:	2000      	movs	r0, #0
    6484:	e003      	b.n	648e <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    6486:	3001      	adds	r0, #1
    6488:	3201      	adds	r2, #1
    648a:	2808      	cmp	r0, #8
    648c:	d008      	beq.n	64a0 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    648e:	7816      	ldrb	r6, [r2, #0]
    6490:	2e00      	cmp	r6, #0
    6492:	d0f8      	beq.n	6486 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    6494:	4ea6      	ldr	r6, [pc, #664]	; (6730 <tcc_init+0x334>)
    6496:	5c76      	ldrb	r6, [r6, r1]
    6498:	4286      	cmp	r6, r0
    649a:	dcf4      	bgt.n	6486 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    649c:	2017      	movs	r0, #23
    649e:	e7c7      	b.n	6430 <tcc_init+0x34>
    64a0:	2200      	movs	r2, #0
    64a2:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    64a4:	2080      	movs	r0, #128	; 0x80
    64a6:	0440      	lsls	r0, r0, #17
    64a8:	4684      	mov	ip, r0
    64aa:	e002      	b.n	64b2 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    64ac:	3201      	adds	r2, #1
    64ae:	2a04      	cmp	r2, #4
    64b0:	d00e      	beq.n	64d0 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    64b2:	18a8      	adds	r0, r5, r2
    64b4:	7c00      	ldrb	r0, [r0, #16]
    64b6:	2801      	cmp	r0, #1
    64b8:	d1f8      	bne.n	64ac <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    64ba:	489e      	ldr	r0, [pc, #632]	; (6734 <tcc_init+0x338>)
    64bc:	5c40      	ldrb	r0, [r0, r1]
    64be:	4290      	cmp	r0, r2
    64c0:	da00      	bge.n	64c4 <tcc_init+0xc8>
    64c2:	e18f      	b.n	67e4 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    64c4:	4660      	mov	r0, ip
    64c6:	4090      	lsls	r0, r2
    64c8:	9e02      	ldr	r6, [sp, #8]
    64ca:	4306      	orrs	r6, r0
    64cc:	9602      	str	r6, [sp, #8]
    64ce:	e7ed      	b.n	64ac <tcc_init+0xb0>
	if (config->run_in_standby) {
    64d0:	329d      	adds	r2, #157	; 0x9d
    64d2:	5caa      	ldrb	r2, [r5, r2]
    64d4:	2a00      	cmp	r2, #0
    64d6:	d004      	beq.n	64e2 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    64d8:	2280      	movs	r2, #128	; 0x80
    64da:	0112      	lsls	r2, r2, #4
    64dc:	9902      	ldr	r1, [sp, #8]
    64de:	4311      	orrs	r1, r2
    64e0:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    64e2:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    64e4:	1e51      	subs	r1, r2, #1
    64e6:	418a      	sbcs	r2, r1
    64e8:	0092      	lsls	r2, r2, #2
    64ea:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    64ec:	7a6a      	ldrb	r2, [r5, #9]
    64ee:	2a01      	cmp	r2, #1
    64f0:	d022      	beq.n	6538 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    64f2:	4a90      	ldr	r2, [pc, #576]	; (6734 <tcc_init+0x338>)
    64f4:	5cd2      	ldrb	r2, [r2, r3]
    64f6:	0011      	movs	r1, r2
    64f8:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    64fa:	2235      	movs	r2, #53	; 0x35
    64fc:	5caa      	ldrb	r2, [r5, r2]
    64fe:	428a      	cmp	r2, r1
    6500:	d300      	bcc.n	6504 <tcc_init+0x108>
    6502:	e179      	b.n	67f8 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    6504:	212c      	movs	r1, #44	; 0x2c
    6506:	5c69      	ldrb	r1, [r5, r1]
    6508:	290f      	cmp	r1, #15
    650a:	d900      	bls.n	650e <tcc_init+0x112>
    650c:	e174      	b.n	67f8 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    650e:	7b28      	ldrb	r0, [r5, #12]
    6510:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    6512:	7ae8      	ldrb	r0, [r5, #11]
    6514:	900b      	str	r0, [sp, #44]	; 0x2c
    6516:	202d      	movs	r0, #45	; 0x2d
    6518:	4682      	mov	sl, r0
    651a:	44aa      	add	sl, r5
    651c:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    651e:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    6520:	ae0e      	add	r6, sp, #56	; 0x38
    6522:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    6524:	26c0      	movs	r6, #192	; 0xc0
    6526:	0136      	lsls	r6, r6, #4
    6528:	46b1      	mov	r9, r6
    652a:	4684      	mov	ip, r0
    652c:	46a0      	mov	r8, r4
    652e:	0028      	movs	r0, r5
    6530:	4655      	mov	r5, sl
    6532:	9309      	str	r3, [sp, #36]	; 0x24
    6534:	4682      	mov	sl, r0
    6536:	e035      	b.n	65a4 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    6538:	9906      	ldr	r1, [sp, #24]
    653a:	4311      	orrs	r1, r2
    653c:	9106      	str	r1, [sp, #24]
    653e:	e7d8      	b.n	64f2 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    6540:	0292      	lsls	r2, r2, #10
    6542:	464f      	mov	r7, r9
    6544:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6546:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    6548:	7919      	ldrb	r1, [r3, #4]
    654a:	468b      	mov	fp, r1
    654c:	2103      	movs	r1, #3
    654e:	465f      	mov	r7, fp
    6550:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6552:	430a      	orrs	r2, r1
    6554:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    6556:	795a      	ldrb	r2, [r3, #5]
    6558:	0152      	lsls	r2, r2, #5
    655a:	2160      	movs	r1, #96	; 0x60
    655c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    655e:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    6560:	7999      	ldrb	r1, [r3, #6]
    6562:	0209      	lsls	r1, r1, #8
    6564:	26c0      	movs	r6, #192	; 0xc0
    6566:	00b6      	lsls	r6, r6, #2
    6568:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    656a:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    656c:	79da      	ldrb	r2, [r3, #7]
    656e:	0312      	lsls	r2, r2, #12
    6570:	21e0      	movs	r1, #224	; 0xe0
    6572:	01c9      	lsls	r1, r1, #7
    6574:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6576:	4316      	orrs	r6, r2
    6578:	4334      	orrs	r4, r6
    657a:	9a03      	ldr	r2, [sp, #12]
    657c:	4314      	orrs	r4, r2
    657e:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    6580:	4662      	mov	r2, ip
    6582:	9907      	ldr	r1, [sp, #28]
    6584:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    6586:	2a04      	cmp	r2, #4
    6588:	d02a      	beq.n	65e0 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    658a:	7c9a      	ldrb	r2, [r3, #18]
    658c:	9905      	ldr	r1, [sp, #20]
    658e:	4291      	cmp	r1, r2
    6590:	d800      	bhi.n	6594 <tcc_init+0x198>
    6592:	e131      	b.n	67f8 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    6594:	7a59      	ldrb	r1, [r3, #9]
    6596:	350a      	adds	r5, #10
    6598:	2304      	movs	r3, #4
    659a:	469b      	mov	fp, r3
    659c:	44dc      	add	ip, fp
    659e:	290f      	cmp	r1, #15
    65a0:	d900      	bls.n	65a4 <tcc_init+0x1a8>
    65a2:	e129      	b.n	67f8 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    65a4:	0609      	lsls	r1, r1, #24
    65a6:	23f0      	movs	r3, #240	; 0xf0
    65a8:	051b      	lsls	r3, r3, #20
    65aa:	4019      	ands	r1, r3
    65ac:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    65ae:	782e      	ldrb	r6, [r5, #0]
    65b0:	0436      	lsls	r6, r6, #16
    65b2:	20ff      	movs	r0, #255	; 0xff
    65b4:	0400      	lsls	r0, r0, #16
    65b6:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    65b8:	7868      	ldrb	r0, [r5, #1]
    65ba:	2480      	movs	r4, #128	; 0x80
    65bc:	2800      	cmp	r0, #0
    65be:	d100      	bne.n	65c2 <tcc_init+0x1c6>
    65c0:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    65c2:	7898      	ldrb	r0, [r3, #2]
    65c4:	2708      	movs	r7, #8
    65c6:	9703      	str	r7, [sp, #12]
    65c8:	2800      	cmp	r0, #0
    65ca:	d101      	bne.n	65d0 <tcc_init+0x1d4>
    65cc:	9804      	ldr	r0, [sp, #16]
    65ce:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    65d0:	78d8      	ldrb	r0, [r3, #3]
    65d2:	4683      	mov	fp, r0
    65d4:	2010      	movs	r0, #16
    65d6:	465f      	mov	r7, fp
    65d8:	2f00      	cmp	r7, #0
    65da:	d1b1      	bne.n	6540 <tcc_init+0x144>
    65dc:	9804      	ldr	r0, [sp, #16]
    65de:	e7af      	b.n	6540 <tcc_init+0x144>
    65e0:	4644      	mov	r4, r8
    65e2:	4655      	mov	r5, sl
    65e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    65e6:	4a52      	ldr	r2, [pc, #328]	; (6730 <tcc_init+0x334>)
    65e8:	5cd2      	ldrb	r2, [r2, r3]
    65ea:	4691      	mov	r9, r2
    65ec:	4651      	mov	r1, sl
    65ee:	3150      	adds	r1, #80	; 0x50
    65f0:	4650      	mov	r0, sl
    65f2:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    65f4:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    65f6:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    65f8:	2601      	movs	r6, #1
    65fa:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    65fc:	2602      	movs	r6, #2
    65fe:	36ff      	adds	r6, #255	; 0xff
    6600:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    6602:	2680      	movs	r6, #128	; 0x80
    6604:	0276      	lsls	r6, r6, #9
    6606:	46b0      	mov	r8, r6
    6608:	46a4      	mov	ip, r4
    660a:	001c      	movs	r4, r3
    660c:	464b      	mov	r3, r9
    660e:	e00f      	b.n	6630 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    6610:	7806      	ldrb	r6, [r0, #0]
    6612:	2e00      	cmp	r6, #0
    6614:	d007      	beq.n	6626 <tcc_init+0x22a>
			if (i >= ow_num) {
    6616:	4293      	cmp	r3, r2
    6618:	d800      	bhi.n	661c <tcc_init+0x220>
    661a:	e0e7      	b.n	67ec <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    661c:	2e02      	cmp	r6, #2
    661e:	d014      	beq.n	664a <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    6620:	4656      	mov	r6, sl
    6622:	4096      	lsls	r6, r2
    6624:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    6626:	3201      	adds	r2, #1
    6628:	3101      	adds	r1, #1
    662a:	3002      	adds	r0, #2
    662c:	2a08      	cmp	r2, #8
    662e:	d010      	beq.n	6652 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    6630:	780e      	ldrb	r6, [r1, #0]
    6632:	2e00      	cmp	r6, #0
    6634:	d0ec      	beq.n	6610 <tcc_init+0x214>
			if (i >= ow_num) {
    6636:	4293      	cmp	r3, r2
    6638:	d800      	bhi.n	663c <tcc_init+0x240>
    663a:	e0d5      	b.n	67e8 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    663c:	4646      	mov	r6, r8
    663e:	4096      	lsls	r6, r2
    6640:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    6642:	7806      	ldrb	r6, [r0, #0]
    6644:	2e00      	cmp	r6, #0
    6646:	d1e9      	bne.n	661c <tcc_init+0x220>
    6648:	e7ed      	b.n	6626 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    664a:	465e      	mov	r6, fp
    664c:	4096      	lsls	r6, r2
    664e:	4337      	orrs	r7, r6
    6650:	e7e9      	b.n	6626 <tcc_init+0x22a>
    6652:	4699      	mov	r9, r3
    6654:	0023      	movs	r3, r4
    6656:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    6658:	7e6a      	ldrb	r2, [r5, #25]
    665a:	0112      	lsls	r2, r2, #4
    665c:	2130      	movs	r1, #48	; 0x30
    665e:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    6660:	7e28      	ldrb	r0, [r5, #24]
    6662:	2207      	movs	r2, #7
    6664:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    6666:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    6668:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    666a:	2080      	movs	r0, #128	; 0x80
    666c:	0240      	lsls	r0, r0, #9
    666e:	000e      	movs	r6, r1
    6670:	e002      	b.n	6678 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    6672:	3201      	adds	r2, #1
    6674:	2a04      	cmp	r2, #4
    6676:	d00b      	beq.n	6690 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    6678:	18a9      	adds	r1, r5, r2
    667a:	7d09      	ldrb	r1, [r1, #20]
    667c:	2900      	cmp	r1, #0
    667e:	d0f8      	beq.n	6672 <tcc_init+0x276>
			if (n >= cc_num) {
    6680:	9905      	ldr	r1, [sp, #20]
    6682:	4291      	cmp	r1, r2
    6684:	dc00      	bgt.n	6688 <tcc_init+0x28c>
    6686:	e0b3      	b.n	67f0 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    6688:	0001      	movs	r1, r0
    668a:	4091      	lsls	r1, r2
    668c:	430e      	orrs	r6, r1
    668e:	e7f0      	b.n	6672 <tcc_init+0x276>
    6690:	46b2      	mov	sl, r6
    6692:	9801      	ldr	r0, [sp, #4]
    6694:	0002      	movs	r2, r0
    6696:	3204      	adds	r2, #4
    6698:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    669a:	2100      	movs	r1, #0
    669c:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    669e:	4282      	cmp	r2, r0
    66a0:	d1fc      	bne.n	669c <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    66a2:	2200      	movs	r2, #0
    66a4:	9801      	ldr	r0, [sp, #4]
    66a6:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    66a8:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    66aa:	0099      	lsls	r1, r3, #2
    66ac:	4a22      	ldr	r2, [pc, #136]	; (6738 <tcc_init+0x33c>)
    66ae:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    66b0:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    66b2:	22a0      	movs	r2, #160	; 0xa0
    66b4:	5ca9      	ldrb	r1, [r5, r2]
    66b6:	3a64      	subs	r2, #100	; 0x64
    66b8:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    66ba:	a90d      	add	r1, sp, #52	; 0x34
    66bc:	7aaa      	ldrb	r2, [r5, #10]
    66be:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    66c0:	4a1e      	ldr	r2, [pc, #120]	; (673c <tcc_init+0x340>)
    66c2:	5cd6      	ldrb	r6, [r2, r3]
    66c4:	0030      	movs	r0, r6
    66c6:	4b1e      	ldr	r3, [pc, #120]	; (6740 <tcc_init+0x344>)
    66c8:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    66ca:	0030      	movs	r0, r6
    66cc:	4b1d      	ldr	r3, [pc, #116]	; (6744 <tcc_init+0x348>)
    66ce:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    66d0:	464b      	mov	r3, r9
    66d2:	2b00      	cmp	r3, #0
    66d4:	dd3c      	ble.n	6750 <tcc_init+0x354>
    66d6:	002e      	movs	r6, r5
    66d8:	3658      	adds	r6, #88	; 0x58
    66da:	3398      	adds	r3, #152	; 0x98
    66dc:	4698      	mov	r8, r3
    66de:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    66e0:	2301      	movs	r3, #1
    66e2:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    66e4:	46ab      	mov	fp, r5
    66e6:	4645      	mov	r5, r8
    66e8:	46a0      	mov	r8, r4
    66ea:	9c08      	ldr	r4, [sp, #32]
    66ec:	e003      	b.n	66f6 <tcc_init+0x2fa>
    66ee:	3401      	adds	r4, #1
    66f0:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    66f2:	42ac      	cmp	r4, r5
    66f4:	d02a      	beq.n	674c <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    66f6:	7823      	ldrb	r3, [r4, #0]
    66f8:	2b00      	cmp	r3, #0
    66fa:	d0f8      	beq.n	66ee <tcc_init+0x2f2>
    66fc:	ab0c      	add	r3, sp, #48	; 0x30
    66fe:	464a      	mov	r2, r9
    6700:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6702:	2300      	movs	r3, #0
    6704:	aa0c      	add	r2, sp, #48	; 0x30
    6706:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    6708:	0013      	movs	r3, r2
    670a:	2220      	movs	r2, #32
    670c:	18b2      	adds	r2, r6, r2
    670e:	7812      	ldrb	r2, [r2, #0]
    6710:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6712:	464a      	mov	r2, r9
    6714:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    6716:	7830      	ldrb	r0, [r6, #0]
    6718:	0019      	movs	r1, r3
    671a:	4b0b      	ldr	r3, [pc, #44]	; (6748 <tcc_init+0x34c>)
    671c:	4798      	blx	r3
    671e:	e7e6      	b.n	66ee <tcc_init+0x2f2>
    6720:	0000627d 	.word	0x0000627d
    6724:	40000400 	.word	0x40000400
    6728:	0000e44c 	.word	0x0000e44c
    672c:	0000e460 	.word	0x0000e460
    6730:	0000e46c 	.word	0x0000e46c
    6734:	0000e458 	.word	0x0000e458
    6738:	20001088 	.word	0x20001088
    673c:	0000e45c 	.word	0x0000e45c
    6740:	00006125 	.word	0x00006125
    6744:	00006099 	.word	0x00006099
    6748:	0000621d 	.word	0x0000621d
    674c:	4644      	mov	r4, r8
    674e:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    6750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6752:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    6754:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6756:	0212      	lsls	r2, r2, #8
    6758:	4313      	orrs	r3, r2
    675a:	9a02      	ldr	r2, [sp, #8]
    675c:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    675e:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6760:	2204      	movs	r2, #4
    6762:	68a3      	ldr	r3, [r4, #8]
    6764:	421a      	tst	r2, r3
    6766:	d1fc      	bne.n	6762 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    6768:	23ff      	movs	r3, #255	; 0xff
    676a:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    676c:	2204      	movs	r2, #4
    676e:	68a3      	ldr	r3, [r4, #8]
    6770:	421a      	tst	r2, r3
    6772:	d1fc      	bne.n	676e <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    6774:	466b      	mov	r3, sp
    6776:	7e1b      	ldrb	r3, [r3, #24]
    6778:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    677a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    677c:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    677e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6780:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    6782:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    6784:	4a1d      	ldr	r2, [pc, #116]	; (67fc <tcc_init+0x400>)
    6786:	68a3      	ldr	r3, [r4, #8]
    6788:	4213      	tst	r3, r2
    678a:	d1fc      	bne.n	6786 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    678c:	4653      	mov	r3, sl
    678e:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    6790:	2210      	movs	r2, #16
    6792:	68a3      	ldr	r3, [r4, #8]
    6794:	421a      	tst	r2, r3
    6796:	d1fc      	bne.n	6792 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    6798:	682b      	ldr	r3, [r5, #0]
    679a:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    679c:	4a18      	ldr	r2, [pc, #96]	; (6800 <tcc_init+0x404>)
    679e:	68a3      	ldr	r3, [r4, #8]
    67a0:	4213      	tst	r3, r2
    67a2:	d1fc      	bne.n	679e <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    67a4:	686b      	ldr	r3, [r5, #4]
    67a6:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    67a8:	9805      	ldr	r0, [sp, #20]
    67aa:	2800      	cmp	r0, #0
    67ac:	dd22      	ble.n	67f4 <tcc_init+0x3f8>
    67ae:	351c      	adds	r5, #28
    67b0:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    67b2:	4e14      	ldr	r6, [pc, #80]	; (6804 <tcc_init+0x408>)
    67b4:	0032      	movs	r2, r6
    67b6:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    67b8:	68a3      	ldr	r3, [r4, #8]
    67ba:	421a      	tst	r2, r3
    67bc:	d1fc      	bne.n	67b8 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    67be:	cd04      	ldmia	r5!, {r2}
    67c0:	000b      	movs	r3, r1
    67c2:	3310      	adds	r3, #16
    67c4:	009b      	lsls	r3, r3, #2
    67c6:	18e3      	adds	r3, r4, r3
    67c8:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    67ca:	3101      	adds	r1, #1
    67cc:	4288      	cmp	r0, r1
    67ce:	dcf1      	bgt.n	67b4 <tcc_init+0x3b8>
	return STATUS_OK;
    67d0:	2000      	movs	r0, #0
    67d2:	e62d      	b.n	6430 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    67d4:	2017      	movs	r0, #23
    67d6:	e62b      	b.n	6430 <tcc_init+0x34>
    67d8:	2017      	movs	r0, #23
    67da:	e629      	b.n	6430 <tcc_init+0x34>
    67dc:	2017      	movs	r0, #23
    67de:	e627      	b.n	6430 <tcc_init+0x34>
    67e0:	2017      	movs	r0, #23
    67e2:	e625      	b.n	6430 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    67e4:	2017      	movs	r0, #23
    67e6:	e623      	b.n	6430 <tcc_init+0x34>
			if (i >= ow_num) {
    67e8:	2017      	movs	r0, #23
    67ea:	e621      	b.n	6430 <tcc_init+0x34>
			if (i >= ow_num) {
    67ec:	2017      	movs	r0, #23
    67ee:	e61f      	b.n	6430 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    67f0:	2017      	movs	r0, #23
    67f2:	e61d      	b.n	6430 <tcc_init+0x34>
	return STATUS_OK;
    67f4:	2000      	movs	r0, #0
    67f6:	e61b      	b.n	6430 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    67f8:	2017      	movs	r0, #23
    67fa:	e619      	b.n	6430 <tcc_init+0x34>
    67fc:	00020040 	.word	0x00020040
    6800:	00040080 	.word	0x00040080
    6804:	00080100 	.word	0x00080100

00006808 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6808:	0092      	lsls	r2, r2, #2
    680a:	1883      	adds	r3, r0, r2
    680c:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    680e:	4b03      	ldr	r3, [pc, #12]	; (681c <tcc_register_callback+0x14>)
    6810:	58d3      	ldr	r3, [r2, r3]
    6812:	6b42      	ldr	r2, [r0, #52]	; 0x34
    6814:	4313      	orrs	r3, r2
    6816:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    6818:	2000      	movs	r0, #0
    681a:	4770      	bx	lr
    681c:	0000e470 	.word	0x0000e470

00006820 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    6820:	b570      	push	{r4, r5, r6, lr}
    6822:	0004      	movs	r4, r0
    6824:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    6826:	6800      	ldr	r0, [r0, #0]
    6828:	4b09      	ldr	r3, [pc, #36]	; (6850 <tcc_enable_callback+0x30>)
    682a:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    682c:	4b09      	ldr	r3, [pc, #36]	; (6854 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    682e:	5c1b      	ldrb	r3, [r3, r0]
    6830:	221f      	movs	r2, #31
    6832:	401a      	ands	r2, r3
    6834:	2301      	movs	r3, #1
    6836:	4093      	lsls	r3, r2
    6838:	4a07      	ldr	r2, [pc, #28]	; (6858 <tcc_enable_callback+0x38>)
    683a:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    683c:	00ad      	lsls	r5, r5, #2
    683e:	4b07      	ldr	r3, [pc, #28]	; (685c <tcc_enable_callback+0x3c>)
    6840:	58ea      	ldr	r2, [r5, r3]
    6842:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6844:	4313      	orrs	r3, r2
    6846:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    6848:	6823      	ldr	r3, [r4, #0]
    684a:	629a      	str	r2, [r3, #40]	; 0x28
}
    684c:	bd70      	pop	{r4, r5, r6, pc}
    684e:	46c0      	nop			; (mov r8, r8)
    6850:	0000627d 	.word	0x0000627d
    6854:	0000e4a0 	.word	0x0000e4a0
    6858:	e000e100 	.word	0xe000e100
    685c:	0000e470 	.word	0x0000e470

00006860 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6860:	b5f0      	push	{r4, r5, r6, r7, lr}
    6862:	46c6      	mov	lr, r8
    6864:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    6866:	0080      	lsls	r0, r0, #2
    6868:	4b0e      	ldr	r3, [pc, #56]	; (68a4 <_tcc_interrupt_handler+0x44>)
    686a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    686c:	683b      	ldr	r3, [r7, #0]
    686e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    6870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6874:	4013      	ands	r3, r2
    6876:	401e      	ands	r6, r3
    6878:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    687a:	4b0b      	ldr	r3, [pc, #44]	; (68a8 <_tcc_interrupt_handler+0x48>)
    687c:	4698      	mov	r8, r3
    687e:	e002      	b.n	6886 <_tcc_interrupt_handler+0x26>
    6880:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6882:	2c30      	cmp	r4, #48	; 0x30
    6884:	d00a      	beq.n	689c <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6886:	4643      	mov	r3, r8
    6888:	58e5      	ldr	r5, [r4, r3]
    688a:	4235      	tst	r5, r6
    688c:	d0f8      	beq.n	6880 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    688e:	193b      	adds	r3, r7, r4
    6890:	685b      	ldr	r3, [r3, #4]
    6892:	0038      	movs	r0, r7
    6894:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    6896:	683b      	ldr	r3, [r7, #0]
    6898:	62dd      	str	r5, [r3, #44]	; 0x2c
    689a:	e7f1      	b.n	6880 <_tcc_interrupt_handler+0x20>
		}
	}
}
    689c:	bc04      	pop	{r2}
    689e:	4690      	mov	r8, r2
    68a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68a2:	46c0      	nop			; (mov r8, r8)
    68a4:	20001088 	.word	0x20001088
    68a8:	0000e470 	.word	0x0000e470

000068ac <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    68ac:	b510      	push	{r4, lr}
    68ae:	2000      	movs	r0, #0
    68b0:	4b01      	ldr	r3, [pc, #4]	; (68b8 <TCC0_Handler+0xc>)
    68b2:	4798      	blx	r3
    68b4:	bd10      	pop	{r4, pc}
    68b6:	46c0      	nop			; (mov r8, r8)
    68b8:	00006861 	.word	0x00006861

000068bc <TCC1_Handler>:
    68bc:	b510      	push	{r4, lr}
    68be:	2001      	movs	r0, #1
    68c0:	4b01      	ldr	r3, [pc, #4]	; (68c8 <TCC1_Handler+0xc>)
    68c2:	4798      	blx	r3
    68c4:	bd10      	pop	{r4, pc}
    68c6:	46c0      	nop			; (mov r8, r8)
    68c8:	00006861 	.word	0x00006861

000068cc <TCC2_Handler>:
    68cc:	b510      	push	{r4, lr}
    68ce:	2002      	movs	r0, #2
    68d0:	4b01      	ldr	r3, [pc, #4]	; (68d8 <TCC2_Handler+0xc>)
    68d2:	4798      	blx	r3
    68d4:	bd10      	pop	{r4, pc}
    68d6:	46c0      	nop			; (mov r8, r8)
    68d8:	00006861 	.word	0x00006861

000068dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    68dc:	e7fe      	b.n	68dc <Dummy_Handler>
	...

000068e0 <Reset_Handler>:
{
    68e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    68e2:	4a2a      	ldr	r2, [pc, #168]	; (698c <Reset_Handler+0xac>)
    68e4:	4b2a      	ldr	r3, [pc, #168]	; (6990 <Reset_Handler+0xb0>)
    68e6:	429a      	cmp	r2, r3
    68e8:	d011      	beq.n	690e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    68ea:	001a      	movs	r2, r3
    68ec:	4b29      	ldr	r3, [pc, #164]	; (6994 <Reset_Handler+0xb4>)
    68ee:	429a      	cmp	r2, r3
    68f0:	d20d      	bcs.n	690e <Reset_Handler+0x2e>
    68f2:	4a29      	ldr	r2, [pc, #164]	; (6998 <Reset_Handler+0xb8>)
    68f4:	3303      	adds	r3, #3
    68f6:	1a9b      	subs	r3, r3, r2
    68f8:	089b      	lsrs	r3, r3, #2
    68fa:	3301      	adds	r3, #1
    68fc:	009b      	lsls	r3, r3, #2
    68fe:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6900:	4823      	ldr	r0, [pc, #140]	; (6990 <Reset_Handler+0xb0>)
    6902:	4922      	ldr	r1, [pc, #136]	; (698c <Reset_Handler+0xac>)
    6904:	588c      	ldr	r4, [r1, r2]
    6906:	5084      	str	r4, [r0, r2]
    6908:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    690a:	429a      	cmp	r2, r3
    690c:	d1fa      	bne.n	6904 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    690e:	4a23      	ldr	r2, [pc, #140]	; (699c <Reset_Handler+0xbc>)
    6910:	4b23      	ldr	r3, [pc, #140]	; (69a0 <Reset_Handler+0xc0>)
    6912:	429a      	cmp	r2, r3
    6914:	d20a      	bcs.n	692c <Reset_Handler+0x4c>
    6916:	43d3      	mvns	r3, r2
    6918:	4921      	ldr	r1, [pc, #132]	; (69a0 <Reset_Handler+0xc0>)
    691a:	185b      	adds	r3, r3, r1
    691c:	2103      	movs	r1, #3
    691e:	438b      	bics	r3, r1
    6920:	3304      	adds	r3, #4
    6922:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6924:	2100      	movs	r1, #0
    6926:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6928:	4293      	cmp	r3, r2
    692a:	d1fc      	bne.n	6926 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    692c:	4a1d      	ldr	r2, [pc, #116]	; (69a4 <Reset_Handler+0xc4>)
    692e:	21ff      	movs	r1, #255	; 0xff
    6930:	4b1d      	ldr	r3, [pc, #116]	; (69a8 <Reset_Handler+0xc8>)
    6932:	438b      	bics	r3, r1
    6934:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6936:	39fd      	subs	r1, #253	; 0xfd
    6938:	2390      	movs	r3, #144	; 0x90
    693a:	005b      	lsls	r3, r3, #1
    693c:	4a1b      	ldr	r2, [pc, #108]	; (69ac <Reset_Handler+0xcc>)
    693e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6940:	4a1b      	ldr	r2, [pc, #108]	; (69b0 <Reset_Handler+0xd0>)
    6942:	78d3      	ldrb	r3, [r2, #3]
    6944:	2503      	movs	r5, #3
    6946:	43ab      	bics	r3, r5
    6948:	2402      	movs	r4, #2
    694a:	4323      	orrs	r3, r4
    694c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    694e:	78d3      	ldrb	r3, [r2, #3]
    6950:	270c      	movs	r7, #12
    6952:	43bb      	bics	r3, r7
    6954:	2608      	movs	r6, #8
    6956:	4333      	orrs	r3, r6
    6958:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    695a:	4b16      	ldr	r3, [pc, #88]	; (69b4 <Reset_Handler+0xd4>)
    695c:	7b98      	ldrb	r0, [r3, #14]
    695e:	2230      	movs	r2, #48	; 0x30
    6960:	4390      	bics	r0, r2
    6962:	2220      	movs	r2, #32
    6964:	4310      	orrs	r0, r2
    6966:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6968:	7b99      	ldrb	r1, [r3, #14]
    696a:	43b9      	bics	r1, r7
    696c:	4331      	orrs	r1, r6
    696e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6970:	7b9a      	ldrb	r2, [r3, #14]
    6972:	43aa      	bics	r2, r5
    6974:	4322      	orrs	r2, r4
    6976:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6978:	4a0f      	ldr	r2, [pc, #60]	; (69b8 <Reset_Handler+0xd8>)
    697a:	6853      	ldr	r3, [r2, #4]
    697c:	2180      	movs	r1, #128	; 0x80
    697e:	430b      	orrs	r3, r1
    6980:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    6982:	4b0e      	ldr	r3, [pc, #56]	; (69bc <Reset_Handler+0xdc>)
    6984:	4798      	blx	r3
        main();
    6986:	4b0e      	ldr	r3, [pc, #56]	; (69c0 <Reset_Handler+0xe0>)
    6988:	4798      	blx	r3
    698a:	e7fe      	b.n	698a <Reset_Handler+0xaa>
    698c:	0000f714 	.word	0x0000f714
    6990:	20000000 	.word	0x20000000
    6994:	20000344 	.word	0x20000344
    6998:	20000004 	.word	0x20000004
    699c:	20000344 	.word	0x20000344
    69a0:	200011f8 	.word	0x200011f8
    69a4:	e000ed00 	.word	0xe000ed00
    69a8:	00000000 	.word	0x00000000
    69ac:	41007000 	.word	0x41007000
    69b0:	41005000 	.word	0x41005000
    69b4:	41004800 	.word	0x41004800
    69b8:	41004000 	.word	0x41004000
    69bc:	0000bd09 	.word	0x0000bd09
    69c0:	0000b54d 	.word	0x0000b54d

000069c4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    69c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    69c6:	46c6      	mov	lr, r8
    69c8:	b500      	push	{lr}
    69ca:	000c      	movs	r4, r1
    69cc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    69ce:	2800      	cmp	r0, #0
    69d0:	d10f      	bne.n	69f2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    69d2:	2a00      	cmp	r2, #0
    69d4:	dd11      	ble.n	69fa <_read+0x36>
    69d6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    69d8:	4e09      	ldr	r6, [pc, #36]	; (6a00 <_read+0x3c>)
    69da:	4d0a      	ldr	r5, [pc, #40]	; (6a04 <_read+0x40>)
    69dc:	6830      	ldr	r0, [r6, #0]
    69de:	0021      	movs	r1, r4
    69e0:	682b      	ldr	r3, [r5, #0]
    69e2:	4798      	blx	r3
		ptr++;
    69e4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    69e6:	42bc      	cmp	r4, r7
    69e8:	d1f8      	bne.n	69dc <_read+0x18>
		nChars++;
	}
	return nChars;
}
    69ea:	4640      	mov	r0, r8
    69ec:	bc04      	pop	{r2}
    69ee:	4690      	mov	r8, r2
    69f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    69f2:	2301      	movs	r3, #1
    69f4:	425b      	negs	r3, r3
    69f6:	4698      	mov	r8, r3
    69f8:	e7f7      	b.n	69ea <_read+0x26>
	for (; len > 0; --len) {
    69fa:	4680      	mov	r8, r0
    69fc:	e7f5      	b.n	69ea <_read+0x26>
    69fe:	46c0      	nop			; (mov r8, r8)
    6a00:	2000109c 	.word	0x2000109c
    6a04:	20001094 	.word	0x20001094

00006a08 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a0a:	46c6      	mov	lr, r8
    6a0c:	b500      	push	{lr}
    6a0e:	000e      	movs	r6, r1
    6a10:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    6a12:	3801      	subs	r0, #1
    6a14:	2802      	cmp	r0, #2
    6a16:	d810      	bhi.n	6a3a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    6a18:	2a00      	cmp	r2, #0
    6a1a:	d011      	beq.n	6a40 <_write+0x38>
    6a1c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6a1e:	4b0c      	ldr	r3, [pc, #48]	; (6a50 <_write+0x48>)
    6a20:	4698      	mov	r8, r3
    6a22:	4f0c      	ldr	r7, [pc, #48]	; (6a54 <_write+0x4c>)
    6a24:	4643      	mov	r3, r8
    6a26:	6818      	ldr	r0, [r3, #0]
    6a28:	5d31      	ldrb	r1, [r6, r4]
    6a2a:	683b      	ldr	r3, [r7, #0]
    6a2c:	4798      	blx	r3
    6a2e:	2800      	cmp	r0, #0
    6a30:	db08      	blt.n	6a44 <_write+0x3c>
			return -1;
		}
		++nChars;
    6a32:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    6a34:	42a5      	cmp	r5, r4
    6a36:	d1f5      	bne.n	6a24 <_write+0x1c>
    6a38:	e006      	b.n	6a48 <_write+0x40>
		return -1;
    6a3a:	2401      	movs	r4, #1
    6a3c:	4264      	negs	r4, r4
    6a3e:	e003      	b.n	6a48 <_write+0x40>
	for (; len != 0; --len) {
    6a40:	0014      	movs	r4, r2
    6a42:	e001      	b.n	6a48 <_write+0x40>
			return -1;
    6a44:	2401      	movs	r4, #1
    6a46:	4264      	negs	r4, r4
	}
	return nChars;
}
    6a48:	0020      	movs	r0, r4
    6a4a:	bc04      	pop	{r2}
    6a4c:	4690      	mov	r8, r2
    6a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a50:	2000109c 	.word	0x2000109c
    6a54:	20001098 	.word	0x20001098

00006a58 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6a58:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6a5a:	4a06      	ldr	r2, [pc, #24]	; (6a74 <_sbrk+0x1c>)
    6a5c:	6812      	ldr	r2, [r2, #0]
    6a5e:	2a00      	cmp	r2, #0
    6a60:	d004      	beq.n	6a6c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6a62:	4a04      	ldr	r2, [pc, #16]	; (6a74 <_sbrk+0x1c>)
    6a64:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6a66:	18c3      	adds	r3, r0, r3
    6a68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    6a6a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6a6c:	4902      	ldr	r1, [pc, #8]	; (6a78 <_sbrk+0x20>)
    6a6e:	4a01      	ldr	r2, [pc, #4]	; (6a74 <_sbrk+0x1c>)
    6a70:	6011      	str	r1, [r2, #0]
    6a72:	e7f6      	b.n	6a62 <_sbrk+0xa>
    6a74:	20000418 	.word	0x20000418
    6a78:	200031f8 	.word	0x200031f8

00006a7c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6a7c:	2001      	movs	r0, #1
    6a7e:	4240      	negs	r0, r0
    6a80:	4770      	bx	lr

00006a82 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    6a82:	2380      	movs	r3, #128	; 0x80
    6a84:	019b      	lsls	r3, r3, #6
    6a86:	604b      	str	r3, [r1, #4]

	return 0;
}
    6a88:	2000      	movs	r0, #0
    6a8a:	4770      	bx	lr

00006a8c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    6a8c:	2001      	movs	r0, #1
    6a8e:	4770      	bx	lr

00006a90 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    6a90:	2000      	movs	r0, #0
    6a92:	4770      	bx	lr

00006a94 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    6a94:	b530      	push	{r4, r5, lr}
    6a96:	b087      	sub	sp, #28
    6a98:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    6a9a:	aa01      	add	r2, sp, #4
    6a9c:	23a0      	movs	r3, #160	; 0xa0
    6a9e:	011b      	lsls	r3, r3, #4
    6aa0:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    6aa2:	2300      	movs	r3, #0
    6aa4:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    6aa6:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    6aa8:	21fa      	movs	r1, #250	; 0xfa
    6aaa:	00c9      	lsls	r1, r1, #3
    6aac:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    6aae:	2101      	movs	r1, #1
    6ab0:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    6ab2:	2004      	movs	r0, #4
    6ab4:	7210      	strb	r0, [r2, #8]
    6ab6:	7253      	strb	r3, [r2, #9]
    6ab8:	7293      	strb	r3, [r2, #10]
    6aba:	72d3      	strb	r3, [r2, #11]
    6abc:	7311      	strb	r1, [r2, #12]
    6abe:	7351      	strb	r1, [r2, #13]
    6ac0:	4b14      	ldr	r3, [pc, #80]	; (6b14 <disk_initialize+0x80>)
    6ac2:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6ac4:	2306      	movs	r3, #6
    6ac6:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    6ac8:	4d13      	ldr	r5, [pc, #76]	; (6b18 <disk_initialize+0x84>)
    6aca:	4914      	ldr	r1, [pc, #80]	; (6b1c <disk_initialize+0x88>)
    6acc:	0028      	movs	r0, r5
    6ace:	4b14      	ldr	r3, [pc, #80]	; (6b20 <disk_initialize+0x8c>)
    6ad0:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    6ad2:	0028      	movs	r0, r5
    6ad4:	4b13      	ldr	r3, [pc, #76]	; (6b24 <disk_initialize+0x90>)
    6ad6:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    6ad8:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    6ada:	2c01      	cmp	r4, #1
    6adc:	d901      	bls.n	6ae2 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    6ade:	b007      	add	sp, #28
    6ae0:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    6ae2:	0020      	movs	r0, r4
    6ae4:	4b10      	ldr	r3, [pc, #64]	; (6b28 <disk_initialize+0x94>)
    6ae6:	4798      	blx	r3
    6ae8:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    6aea:	2803      	cmp	r0, #3
    6aec:	d106      	bne.n	6afc <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    6aee:	0020      	movs	r0, r4
    6af0:	4b0d      	ldr	r3, [pc, #52]	; (6b28 <disk_initialize+0x94>)
    6af2:	4798      	blx	r3
    6af4:	0003      	movs	r3, r0
		return STA_NOINIT;
    6af6:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    6af8:	2b03      	cmp	r3, #3
    6afa:	d0f0      	beq.n	6ade <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    6afc:	2b00      	cmp	r3, #0
    6afe:	d106      	bne.n	6b0e <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    6b00:	0020      	movs	r0, r4
    6b02:	4b0a      	ldr	r3, [pc, #40]	; (6b2c <disk_initialize+0x98>)
    6b04:	4798      	blx	r3
	return 0;
    6b06:	1e43      	subs	r3, r0, #1
    6b08:	4198      	sbcs	r0, r3
    6b0a:	0080      	lsls	r0, r0, #2
    6b0c:	e7e7      	b.n	6ade <disk_initialize+0x4a>
		return STA_NOINIT;
    6b0e:	2001      	movs	r0, #1
    6b10:	e7e5      	b.n	6ade <disk_initialize+0x4a>
    6b12:	46c0      	nop			; (mov r8, r8)
    6b14:	000007de 	.word	0x000007de
    6b18:	200010a0 	.word	0x200010a0
    6b1c:	40001400 	.word	0x40001400
    6b20:	00004959 	.word	0x00004959
    6b24:	000047f5 	.word	0x000047f5
    6b28:	000044c5 	.word	0x000044c5
    6b2c:	00004501 	.word	0x00004501

00006b30 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    6b30:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    6b32:	4b05      	ldr	r3, [pc, #20]	; (6b48 <disk_status+0x18>)
    6b34:	4798      	blx	r3
    6b36:	1e03      	subs	r3, r0, #0
    6b38:	d004      	beq.n	6b44 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    6b3a:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    6b3c:	2b02      	cmp	r3, #2
    6b3e:	d000      	beq.n	6b42 <disk_status+0x12>
	default:
		return STA_NOINIT;
    6b40:	3802      	subs	r0, #2
	}
}
    6b42:	bd10      	pop	{r4, pc}
		return 0;
    6b44:	2000      	movs	r0, #0
    6b46:	e7fc      	b.n	6b42 <disk_status+0x12>
    6b48:	000044c5 	.word	0x000044c5

00006b4c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    6b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b4e:	46de      	mov	lr, fp
    6b50:	464f      	mov	r7, r9
    6b52:	4646      	mov	r6, r8
    6b54:	b5c0      	push	{r6, r7, lr}
    6b56:	b084      	sub	sp, #16
    6b58:	9001      	str	r0, [sp, #4]
    6b5a:	000d      	movs	r5, r1
    6b5c:	0014      	movs	r4, r2
    6b5e:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6b60:	4b18      	ldr	r3, [pc, #96]	; (6bc4 <disk_read+0x78>)
    6b62:	4798      	blx	r3
    6b64:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    6b66:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    6b68:	2e00      	cmp	r6, #0
    6b6a:	d105      	bne.n	6b78 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    6b6c:	b004      	add	sp, #16
    6b6e:	bc1c      	pop	{r2, r3, r4}
    6b70:	4690      	mov	r8, r2
    6b72:	4699      	mov	r9, r3
    6b74:	46a3      	mov	fp, r4
    6b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    6b78:	a903      	add	r1, sp, #12
    6b7a:	9801      	ldr	r0, [sp, #4]
    6b7c:	4b12      	ldr	r3, [pc, #72]	; (6bc8 <disk_read+0x7c>)
    6b7e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6b80:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    6b82:	0032      	movs	r2, r6
    6b84:	437a      	muls	r2, r7
    6b86:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    6b88:	9b03      	ldr	r3, [sp, #12]
    6b8a:	3301      	adds	r3, #1
    6b8c:	4373      	muls	r3, r6
		return RES_PARERR;
    6b8e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    6b90:	429a      	cmp	r2, r3
    6b92:	d8eb      	bhi.n	6b6c <disk_read+0x20>
	for (i = 0; i < count; i++) {
    6b94:	2f00      	cmp	r7, #0
    6b96:	d011      	beq.n	6bbc <disk_read+0x70>
    6b98:	0273      	lsls	r3, r6, #9
    6b9a:	4698      	mov	r8, r3
    6b9c:	1c7b      	adds	r3, r7, #1
    6b9e:	469b      	mov	fp, r3
    6ba0:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    6ba2:	4e0a      	ldr	r6, [pc, #40]	; (6bcc <disk_read+0x80>)
    6ba4:	002a      	movs	r2, r5
    6ba6:	0021      	movs	r1, r4
    6ba8:	9801      	ldr	r0, [sp, #4]
    6baa:	47b0      	blx	r6
    6bac:	2800      	cmp	r0, #0
    6bae:	d107      	bne.n	6bc0 <disk_read+0x74>
    6bb0:	3701      	adds	r7, #1
    6bb2:	444c      	add	r4, r9
    6bb4:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    6bb6:	455f      	cmp	r7, fp
    6bb8:	d1f4      	bne.n	6ba4 <disk_read+0x58>
    6bba:	e7d7      	b.n	6b6c <disk_read+0x20>
	return RES_OK;
    6bbc:	2000      	movs	r0, #0
    6bbe:	e7d5      	b.n	6b6c <disk_read+0x20>
			return RES_ERROR;
    6bc0:	2001      	movs	r0, #1
    6bc2:	e7d3      	b.n	6b6c <disk_read+0x20>
    6bc4:	000044f9 	.word	0x000044f9
    6bc8:	000044dd 	.word	0x000044dd
    6bcc:	00004519 	.word	0x00004519

00006bd0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    6bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bd2:	46de      	mov	lr, fp
    6bd4:	464f      	mov	r7, r9
    6bd6:	4646      	mov	r6, r8
    6bd8:	b5c0      	push	{r6, r7, lr}
    6bda:	b084      	sub	sp, #16
    6bdc:	9001      	str	r0, [sp, #4]
    6bde:	000d      	movs	r5, r1
    6be0:	0014      	movs	r4, r2
    6be2:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6be4:	4b18      	ldr	r3, [pc, #96]	; (6c48 <disk_write+0x78>)
    6be6:	4798      	blx	r3
    6be8:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    6bea:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    6bec:	2e00      	cmp	r6, #0
    6bee:	d105      	bne.n	6bfc <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    6bf0:	b004      	add	sp, #16
    6bf2:	bc1c      	pop	{r2, r3, r4}
    6bf4:	4690      	mov	r8, r2
    6bf6:	4699      	mov	r9, r3
    6bf8:	46a3      	mov	fp, r4
    6bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    6bfc:	a903      	add	r1, sp, #12
    6bfe:	9801      	ldr	r0, [sp, #4]
    6c00:	4b12      	ldr	r3, [pc, #72]	; (6c4c <disk_write+0x7c>)
    6c02:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6c04:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    6c06:	0032      	movs	r2, r6
    6c08:	437a      	muls	r2, r7
    6c0a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    6c0c:	9b03      	ldr	r3, [sp, #12]
    6c0e:	3301      	adds	r3, #1
    6c10:	4373      	muls	r3, r6
		return RES_PARERR;
    6c12:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    6c14:	429a      	cmp	r2, r3
    6c16:	d8eb      	bhi.n	6bf0 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    6c18:	2f00      	cmp	r7, #0
    6c1a:	d011      	beq.n	6c40 <disk_write+0x70>
    6c1c:	0273      	lsls	r3, r6, #9
    6c1e:	4698      	mov	r8, r3
    6c20:	1c7b      	adds	r3, r7, #1
    6c22:	469b      	mov	fp, r3
    6c24:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    6c26:	4e0a      	ldr	r6, [pc, #40]	; (6c50 <disk_write+0x80>)
    6c28:	002a      	movs	r2, r5
    6c2a:	0021      	movs	r1, r4
    6c2c:	9801      	ldr	r0, [sp, #4]
    6c2e:	47b0      	blx	r6
    6c30:	2800      	cmp	r0, #0
    6c32:	d107      	bne.n	6c44 <disk_write+0x74>
    6c34:	3701      	adds	r7, #1
    6c36:	444c      	add	r4, r9
    6c38:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    6c3a:	455f      	cmp	r7, fp
    6c3c:	d1f4      	bne.n	6c28 <disk_write+0x58>
    6c3e:	e7d7      	b.n	6bf0 <disk_write+0x20>
	return RES_OK;
    6c40:	2000      	movs	r0, #0
    6c42:	e7d5      	b.n	6bf0 <disk_write+0x20>
			return RES_ERROR;
    6c44:	2001      	movs	r0, #1
    6c46:	e7d3      	b.n	6bf0 <disk_write+0x20>
    6c48:	000044f9 	.word	0x000044f9
    6c4c:	000044dd 	.word	0x000044dd
    6c50:	00004539 	.word	0x00004539

00006c54 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    6c54:	b510      	push	{r4, lr}
    6c56:	b082      	sub	sp, #8
    6c58:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    6c5a:	2901      	cmp	r1, #1
    6c5c:	d00b      	beq.n	6c76 <disk_ioctl+0x22>
    6c5e:	2900      	cmp	r1, #0
    6c60:	d020      	beq.n	6ca4 <disk_ioctl+0x50>
    6c62:	2902      	cmp	r1, #2
    6c64:	d00f      	beq.n	6c86 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    6c66:	2004      	movs	r0, #4
	switch (ctrl) {
    6c68:	2903      	cmp	r1, #3
    6c6a:	d102      	bne.n	6c72 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    6c6c:	2301      	movs	r3, #1
    6c6e:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    6c70:	2000      	movs	r0, #0
	}

	return res;
}
    6c72:	b002      	add	sp, #8
    6c74:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    6c76:	a901      	add	r1, sp, #4
    6c78:	4b0e      	ldr	r3, [pc, #56]	; (6cb4 <disk_ioctl+0x60>)
    6c7a:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    6c7c:	9b01      	ldr	r3, [sp, #4]
    6c7e:	3301      	adds	r3, #1
    6c80:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    6c82:	2000      	movs	r0, #0
	break;
    6c84:	e7f5      	b.n	6c72 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    6c86:	4b0c      	ldr	r3, [pc, #48]	; (6cb8 <disk_ioctl+0x64>)
    6c88:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    6c8a:	1e43      	subs	r3, r0, #1
    6c8c:	b2db      	uxtb	r3, r3
    6c8e:	2b01      	cmp	r3, #1
    6c90:	d904      	bls.n	6c9c <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    6c92:	1f03      	subs	r3, r0, #4
    6c94:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    6c96:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    6c98:	4213      	tst	r3, r2
    6c9a:	d1ea      	bne.n	6c72 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    6c9c:	2300      	movs	r3, #0
    6c9e:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    6ca0:	2000      	movs	r0, #0
	break;
    6ca2:	e7e6      	b.n	6c72 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    6ca4:	4b05      	ldr	r3, [pc, #20]	; (6cbc <disk_ioctl+0x68>)
    6ca6:	4798      	blx	r3
    6ca8:	2800      	cmp	r0, #0
    6caa:	d001      	beq.n	6cb0 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    6cac:	2003      	movs	r0, #3
    6cae:	e7e0      	b.n	6c72 <disk_ioctl+0x1e>
			res = RES_OK;
    6cb0:	2000      	movs	r0, #0
    6cb2:	e7de      	b.n	6c72 <disk_ioctl+0x1e>
    6cb4:	000044dd 	.word	0x000044dd
    6cb8:	000044f9 	.word	0x000044f9
    6cbc:	000044c5 	.word	0x000044c5

00006cc0 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    6cc0:	b500      	push	{lr}
    6cc2:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    6cc4:	4669      	mov	r1, sp
    6cc6:	480f      	ldr	r0, [pc, #60]	; (6d04 <get_fattime+0x44>)
    6cc8:	4b0f      	ldr	r3, [pc, #60]	; (6d08 <get_fattime+0x48>)
    6cca:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    6ccc:	466b      	mov	r3, sp
    6cce:	7958      	ldrb	r0, [r3, #5]
    6cd0:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    6cd2:	791b      	ldrb	r3, [r3, #4]
    6cd4:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    6cd6:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    6cd8:	466b      	mov	r3, sp
    6cda:	789b      	ldrb	r3, [r3, #2]
    6cdc:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    6cde:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    6ce0:	466b      	mov	r3, sp
    6ce2:	785b      	ldrb	r3, [r3, #1]
    6ce4:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    6ce6:	4318      	orrs	r0, r3
    6ce8:	466b      	mov	r3, sp
    6cea:	781b      	ldrb	r3, [r3, #0]
    6cec:	085b      	lsrs	r3, r3, #1
    6cee:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    6cf0:	466b      	mov	r3, sp
    6cf2:	88db      	ldrh	r3, [r3, #6]
    6cf4:	4a05      	ldr	r2, [pc, #20]	; (6d0c <get_fattime+0x4c>)
    6cf6:	4694      	mov	ip, r2
    6cf8:	4463      	add	r3, ip
    6cfa:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    6cfc:	4318      	orrs	r0, r3

	return ul_time;
}
    6cfe:	b003      	add	sp, #12
    6d00:	bd00      	pop	{pc}
    6d02:	46c0      	nop			; (mov r8, r8)
    6d04:	200010a0 	.word	0x200010a0
    6d08:	000048e1 	.word	0x000048e1
    6d0c:	fffff844 	.word	0xfffff844

00006d10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    6d10:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    6d12:	2a00      	cmp	r2, #0
    6d14:	d005      	beq.n	6d22 <mem_cpy+0x12>
    6d16:	2300      	movs	r3, #0
		*d++ = *s++;
    6d18:	5ccc      	ldrb	r4, [r1, r3]
    6d1a:	54c4      	strb	r4, [r0, r3]
    6d1c:	3301      	adds	r3, #1
	while (cnt--)
    6d1e:	4293      	cmp	r3, r2
    6d20:	d1fa      	bne.n	6d18 <mem_cpy+0x8>
}
    6d22:	bd10      	pop	{r4, pc}

00006d24 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    6d24:	2a00      	cmp	r2, #0
    6d26:	d005      	beq.n	6d34 <mem_set+0x10>
    6d28:	0003      	movs	r3, r0
    6d2a:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    6d2c:	7019      	strb	r1, [r3, #0]
    6d2e:	3301      	adds	r3, #1
	while (cnt--)
    6d30:	4293      	cmp	r3, r2
    6d32:	d1fb      	bne.n	6d2c <mem_set+0x8>
}
    6d34:	4770      	bx	lr

00006d36 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    6d36:	0002      	movs	r2, r0
	clst -= 2;
    6d38:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    6d3a:	6983      	ldr	r3, [r0, #24]
    6d3c:	3b02      	subs	r3, #2
    6d3e:	2000      	movs	r0, #0
    6d40:	4299      	cmp	r1, r3
    6d42:	d203      	bcs.n	6d4c <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    6d44:	7890      	ldrb	r0, [r2, #2]
    6d46:	4341      	muls	r1, r0
    6d48:	6a90      	ldr	r0, [r2, #40]	; 0x28
    6d4a:	1808      	adds	r0, r1, r0
}
    6d4c:	4770      	bx	lr

00006d4e <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    6d4e:	0002      	movs	r2, r0
    6d50:	0001      	movs	r1, r0
    6d52:	310b      	adds	r1, #11
	BYTE sum = 0;
    6d54:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    6d56:	0843      	lsrs	r3, r0, #1
    6d58:	01c0      	lsls	r0, r0, #7
    6d5a:	4303      	orrs	r3, r0
    6d5c:	7810      	ldrb	r0, [r2, #0]
    6d5e:	1818      	adds	r0, r3, r0
    6d60:	b2c0      	uxtb	r0, r0
    6d62:	3201      	adds	r2, #1
    6d64:	428a      	cmp	r2, r1
    6d66:	d1f6      	bne.n	6d56 <sum_sfn+0x8>
	return sum;
}
    6d68:	4770      	bx	lr
	...

00006d6c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    6d6c:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    6d6e:	2800      	cmp	r0, #0
    6d70:	d010      	beq.n	6d94 <validate+0x28>
    6d72:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    6d74:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    6d76:	2a00      	cmp	r2, #0
    6d78:	d101      	bne.n	6d7e <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    6d7a:	0018      	movs	r0, r3
    6d7c:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    6d7e:	88c2      	ldrh	r2, [r0, #6]
    6d80:	428a      	cmp	r2, r1
    6d82:	d1fa      	bne.n	6d7a <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    6d84:	7840      	ldrb	r0, [r0, #1]
    6d86:	4b04      	ldr	r3, [pc, #16]	; (6d98 <validate+0x2c>)
    6d88:	4798      	blx	r3
		return FR_NOT_READY;
    6d8a:	2303      	movs	r3, #3
	return FR_OK;
    6d8c:	07c0      	lsls	r0, r0, #31
    6d8e:	17c0      	asrs	r0, r0, #31
    6d90:	4003      	ands	r3, r0
    6d92:	e7f2      	b.n	6d7a <validate+0xe>
		return FR_INVALID_OBJECT;
    6d94:	2309      	movs	r3, #9
    6d96:	e7f0      	b.n	6d7a <validate+0xe>
    6d98:	00006b31 	.word	0x00006b31

00006d9c <check_fs>:
{
    6d9c:	b570      	push	{r4, r5, r6, lr}
    6d9e:	0004      	movs	r4, r0
    6da0:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6da2:	0001      	movs	r1, r0
    6da4:	3130      	adds	r1, #48	; 0x30
    6da6:	7840      	ldrb	r0, [r0, #1]
    6da8:	2301      	movs	r3, #1
    6daa:	4d1f      	ldr	r5, [pc, #124]	; (6e28 <check_fs+0x8c>)
    6dac:	47a8      	blx	r5
		return 3;
    6dae:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6db0:	2800      	cmp	r0, #0
    6db2:	d001      	beq.n	6db8 <check_fs+0x1c>
}
    6db4:	0018      	movs	r0, r3
    6db6:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6db8:	4b1c      	ldr	r3, [pc, #112]	; (6e2c <check_fs+0x90>)
    6dba:	5ce3      	ldrb	r3, [r4, r3]
    6dbc:	021b      	lsls	r3, r3, #8
    6dbe:	4a1c      	ldr	r2, [pc, #112]	; (6e30 <check_fs+0x94>)
    6dc0:	5ca2      	ldrb	r2, [r4, r2]
    6dc2:	431a      	orrs	r2, r3
    6dc4:	491b      	ldr	r1, [pc, #108]	; (6e34 <check_fs+0x98>)
    6dc6:	b212      	sxth	r2, r2
		return 2;
    6dc8:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6dca:	428a      	cmp	r2, r1
    6dcc:	d1f2      	bne.n	6db4 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    6dce:	3367      	adds	r3, #103	; 0x67
    6dd0:	5ce3      	ldrb	r3, [r4, r3]
    6dd2:	061b      	lsls	r3, r3, #24
    6dd4:	2268      	movs	r2, #104	; 0x68
    6dd6:	5ca2      	ldrb	r2, [r4, r2]
    6dd8:	0412      	lsls	r2, r2, #16
    6dda:	4313      	orrs	r3, r2
    6ddc:	2266      	movs	r2, #102	; 0x66
    6dde:	5ca2      	ldrb	r2, [r4, r2]
    6de0:	4313      	orrs	r3, r2
    6de2:	2267      	movs	r2, #103	; 0x67
    6de4:	5ca2      	ldrb	r2, [r4, r2]
    6de6:	0212      	lsls	r2, r2, #8
    6de8:	4313      	orrs	r3, r2
    6dea:	021b      	lsls	r3, r3, #8
    6dec:	0a1b      	lsrs	r3, r3, #8
    6dee:	4a12      	ldr	r2, [pc, #72]	; (6e38 <check_fs+0x9c>)
    6df0:	4293      	cmp	r3, r2
    6df2:	d016      	beq.n	6e22 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    6df4:	2385      	movs	r3, #133	; 0x85
    6df6:	5ce3      	ldrb	r3, [r4, r3]
    6df8:	061b      	lsls	r3, r3, #24
    6dfa:	2284      	movs	r2, #132	; 0x84
    6dfc:	5ca2      	ldrb	r2, [r4, r2]
    6dfe:	0412      	lsls	r2, r2, #16
    6e00:	4313      	orrs	r3, r2
    6e02:	2282      	movs	r2, #130	; 0x82
    6e04:	5ca2      	ldrb	r2, [r4, r2]
    6e06:	4313      	orrs	r3, r2
    6e08:	2283      	movs	r2, #131	; 0x83
    6e0a:	5ca2      	ldrb	r2, [r4, r2]
    6e0c:	0212      	lsls	r2, r2, #8
    6e0e:	4313      	orrs	r3, r2
    6e10:	021b      	lsls	r3, r3, #8
    6e12:	0a1b      	lsrs	r3, r3, #8
    6e14:	4a09      	ldr	r2, [pc, #36]	; (6e3c <check_fs+0xa0>)
    6e16:	4694      	mov	ip, r2
    6e18:	4463      	add	r3, ip
    6e1a:	1e58      	subs	r0, r3, #1
    6e1c:	4183      	sbcs	r3, r0
		return 3;
    6e1e:	b2db      	uxtb	r3, r3
    6e20:	e7c8      	b.n	6db4 <check_fs+0x18>
		return 0;
    6e22:	2300      	movs	r3, #0
    6e24:	e7c6      	b.n	6db4 <check_fs+0x18>
    6e26:	46c0      	nop			; (mov r8, r8)
    6e28:	00006b4d 	.word	0x00006b4d
    6e2c:	0000022f 	.word	0x0000022f
    6e30:	0000022e 	.word	0x0000022e
    6e34:	ffffaa55 	.word	0xffffaa55
    6e38:	00544146 	.word	0x00544146
    6e3c:	ffabbeba 	.word	0xffabbeba

00006e40 <chk_mounted>:
{
    6e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e42:	46d6      	mov	lr, sl
    6e44:	464f      	mov	r7, r9
    6e46:	4646      	mov	r6, r8
    6e48:	b5c0      	push	{r6, r7, lr}
    6e4a:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    6e4c:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    6e4e:	781c      	ldrb	r4, [r3, #0]
    6e50:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    6e52:	2c09      	cmp	r4, #9
    6e54:	d80e      	bhi.n	6e74 <chk_mounted+0x34>
    6e56:	785a      	ldrb	r2, [r3, #1]
    6e58:	2a3a      	cmp	r2, #58	; 0x3a
    6e5a:	d001      	beq.n	6e60 <chk_mounted+0x20>
    6e5c:	2400      	movs	r4, #0
    6e5e:	e00a      	b.n	6e76 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    6e60:	3302      	adds	r3, #2
    6e62:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    6e64:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    6e66:	2c07      	cmp	r4, #7
    6e68:	d905      	bls.n	6e76 <chk_mounted+0x36>
}
    6e6a:	bc1c      	pop	{r2, r3, r4}
    6e6c:	4690      	mov	r8, r2
    6e6e:	4699      	mov	r9, r3
    6e70:	46a2      	mov	sl, r4
    6e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e74:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    6e76:	00a3      	lsls	r3, r4, #2
    6e78:	4ac5      	ldr	r2, [pc, #788]	; (7190 <chk_mounted+0x350>)
    6e7a:	589e      	ldr	r6, [r3, r2]
    6e7c:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    6e7e:	2e00      	cmp	r6, #0
    6e80:	d100      	bne.n	6e84 <chk_mounted+0x44>
    6e82:	e0e8      	b.n	7056 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    6e84:	7833      	ldrb	r3, [r6, #0]
    6e86:	2b00      	cmp	r3, #0
    6e88:	d00d      	beq.n	6ea6 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    6e8a:	7870      	ldrb	r0, [r6, #1]
    6e8c:	4bc1      	ldr	r3, [pc, #772]	; (7194 <chk_mounted+0x354>)
    6e8e:	4798      	blx	r3
    6e90:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    6e92:	07c2      	lsls	r2, r0, #31
    6e94:	d407      	bmi.n	6ea6 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    6e96:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    6e98:	2d00      	cmp	r5, #0
    6e9a:	d0e6      	beq.n	6e6a <chk_mounted+0x2a>
    6e9c:	075b      	lsls	r3, r3, #29
    6e9e:	d400      	bmi.n	6ea2 <chk_mounted+0x62>
    6ea0:	e0db      	b.n	705a <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    6ea2:	300a      	adds	r0, #10
    6ea4:	e7e1      	b.n	6e6a <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    6ea6:	2300      	movs	r3, #0
    6ea8:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    6eaa:	b2e0      	uxtb	r0, r4
    6eac:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    6eae:	4bba      	ldr	r3, [pc, #744]	; (7198 <chk_mounted+0x358>)
    6eb0:	4798      	blx	r3
    6eb2:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    6eb4:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    6eb6:	07da      	lsls	r2, r3, #31
    6eb8:	d4d7      	bmi.n	6e6a <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    6eba:	2d00      	cmp	r5, #0
    6ebc:	d002      	beq.n	6ec4 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    6ebe:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    6ec0:	075b      	lsls	r3, r3, #29
    6ec2:	d4d2      	bmi.n	6e6a <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    6ec4:	2100      	movs	r1, #0
    6ec6:	0030      	movs	r0, r6
    6ec8:	4bb4      	ldr	r3, [pc, #720]	; (719c <chk_mounted+0x35c>)
    6eca:	4798      	blx	r3
    6ecc:	0003      	movs	r3, r0
    6ece:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    6ed0:	2801      	cmp	r0, #1
    6ed2:	d100      	bne.n	6ed6 <chk_mounted+0x96>
    6ed4:	e09a      	b.n	700c <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    6ed6:	2b03      	cmp	r3, #3
    6ed8:	d100      	bne.n	6edc <chk_mounted+0x9c>
    6eda:	e0c0      	b.n	705e <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    6edc:	200d      	movs	r0, #13
    6ede:	2b00      	cmp	r3, #0
    6ee0:	d1c3      	bne.n	6e6a <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    6ee2:	333c      	adds	r3, #60	; 0x3c
    6ee4:	5cf2      	ldrb	r2, [r6, r3]
    6ee6:	0212      	lsls	r2, r2, #8
    6ee8:	3b01      	subs	r3, #1
    6eea:	5cf3      	ldrb	r3, [r6, r3]
    6eec:	4313      	orrs	r3, r2
    6eee:	2280      	movs	r2, #128	; 0x80
    6ef0:	0092      	lsls	r2, r2, #2
    6ef2:	b21b      	sxth	r3, r3
    6ef4:	4293      	cmp	r3, r2
    6ef6:	d1b8      	bne.n	6e6a <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    6ef8:	2347      	movs	r3, #71	; 0x47
    6efa:	5cf3      	ldrb	r3, [r6, r3]
    6efc:	021b      	lsls	r3, r3, #8
    6efe:	3abb      	subs	r2, #187	; 0xbb
    6f00:	3aff      	subs	r2, #255	; 0xff
    6f02:	5cb5      	ldrb	r5, [r6, r2]
    6f04:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    6f06:	d10d      	bne.n	6f24 <chk_mounted+0xe4>
    6f08:	2357      	movs	r3, #87	; 0x57
    6f0a:	5cf5      	ldrb	r5, [r6, r3]
    6f0c:	062d      	lsls	r5, r5, #24
    6f0e:	3b01      	subs	r3, #1
    6f10:	5cf3      	ldrb	r3, [r6, r3]
    6f12:	041b      	lsls	r3, r3, #16
    6f14:	431d      	orrs	r5, r3
    6f16:	2354      	movs	r3, #84	; 0x54
    6f18:	5cf3      	ldrb	r3, [r6, r3]
    6f1a:	431d      	orrs	r5, r3
    6f1c:	2355      	movs	r3, #85	; 0x55
    6f1e:	5cf3      	ldrb	r3, [r6, r3]
    6f20:	021b      	lsls	r3, r3, #8
    6f22:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    6f24:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    6f26:	2340      	movs	r3, #64	; 0x40
    6f28:	5cf2      	ldrb	r2, [r6, r3]
    6f2a:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    6f2c:	1e53      	subs	r3, r2, #1
    6f2e:	200d      	movs	r0, #13
    6f30:	2b01      	cmp	r3, #1
    6f32:	d89a      	bhi.n	6e6a <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    6f34:	233d      	movs	r3, #61	; 0x3d
    6f36:	5cf1      	ldrb	r1, [r6, r3]
    6f38:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    6f3a:	2900      	cmp	r1, #0
    6f3c:	d095      	beq.n	6e6a <chk_mounted+0x2a>
    6f3e:	1e4b      	subs	r3, r1, #1
    6f40:	4219      	tst	r1, r3
    6f42:	d192      	bne.n	6e6a <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    6f44:	2342      	movs	r3, #66	; 0x42
    6f46:	5cf3      	ldrb	r3, [r6, r3]
    6f48:	021b      	lsls	r3, r3, #8
    6f4a:	3034      	adds	r0, #52	; 0x34
    6f4c:	5c30      	ldrb	r0, [r6, r0]
    6f4e:	4318      	orrs	r0, r3
    6f50:	4680      	mov	r8, r0
    6f52:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    6f54:	200d      	movs	r0, #13
    6f56:	4643      	mov	r3, r8
    6f58:	071b      	lsls	r3, r3, #28
    6f5a:	d000      	beq.n	6f5e <chk_mounted+0x11e>
    6f5c:	e785      	b.n	6e6a <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    6f5e:	2344      	movs	r3, #68	; 0x44
    6f60:	5cf3      	ldrb	r3, [r6, r3]
    6f62:	021b      	lsls	r3, r3, #8
    6f64:	3036      	adds	r0, #54	; 0x36
    6f66:	5c30      	ldrb	r0, [r6, r0]
    6f68:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    6f6a:	d10d      	bne.n	6f88 <chk_mounted+0x148>
    6f6c:	3353      	adds	r3, #83	; 0x53
    6f6e:	5cf3      	ldrb	r3, [r6, r3]
    6f70:	061b      	lsls	r3, r3, #24
    6f72:	2052      	movs	r0, #82	; 0x52
    6f74:	5c30      	ldrb	r0, [r6, r0]
    6f76:	0400      	lsls	r0, r0, #16
    6f78:	4303      	orrs	r3, r0
    6f7a:	2050      	movs	r0, #80	; 0x50
    6f7c:	5c30      	ldrb	r0, [r6, r0]
    6f7e:	4303      	orrs	r3, r0
    6f80:	2051      	movs	r0, #81	; 0x51
    6f82:	5c30      	ldrb	r0, [r6, r0]
    6f84:	0200      	lsls	r0, r0, #8
    6f86:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    6f88:	203f      	movs	r0, #63	; 0x3f
    6f8a:	5c30      	ldrb	r0, [r6, r0]
    6f8c:	0200      	lsls	r0, r0, #8
    6f8e:	273e      	movs	r7, #62	; 0x3e
    6f90:	5df7      	ldrb	r7, [r6, r7]
    6f92:	4307      	orrs	r7, r0
    6f94:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    6f96:	200d      	movs	r0, #13
    6f98:	2f00      	cmp	r7, #0
    6f9a:	d100      	bne.n	6f9e <chk_mounted+0x15e>
    6f9c:	e765      	b.n	6e6a <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    6f9e:	436a      	muls	r2, r5
    6fa0:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    6fa2:	4642      	mov	r2, r8
    6fa4:	0917      	lsrs	r7, r2, #4
    6fa6:	4457      	add	r7, sl
    6fa8:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    6faa:	42bb      	cmp	r3, r7
    6fac:	d200      	bcs.n	6fb0 <chk_mounted+0x170>
    6fae:	e75c      	b.n	6e6a <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    6fb0:	1bd8      	subs	r0, r3, r7
    6fb2:	4b7b      	ldr	r3, [pc, #492]	; (71a0 <chk_mounted+0x360>)
    6fb4:	4798      	blx	r3
    6fb6:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    6fb8:	200d      	movs	r0, #13
    6fba:	2b00      	cmp	r3, #0
    6fbc:	d100      	bne.n	6fc0 <chk_mounted+0x180>
    6fbe:	e754      	b.n	6e6a <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    6fc0:	4a78      	ldr	r2, [pc, #480]	; (71a4 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    6fc2:	429a      	cmp	r2, r3
    6fc4:	4192      	sbcs	r2, r2
    6fc6:	4252      	negs	r2, r2
    6fc8:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    6fca:	4977      	ldr	r1, [pc, #476]	; (71a8 <chk_mounted+0x368>)
    6fcc:	428b      	cmp	r3, r1
    6fce:	d848      	bhi.n	7062 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6fd0:	3302      	adds	r3, #2
    6fd2:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    6fd4:	19e7      	adds	r7, r4, r7
    6fd6:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    6fd8:	4454      	add	r4, sl
    6fda:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    6fdc:	200d      	movs	r0, #13
    6fde:	4641      	mov	r1, r8
    6fe0:	2900      	cmp	r1, #0
    6fe2:	d100      	bne.n	6fe6 <chk_mounted+0x1a6>
    6fe4:	e741      	b.n	6e6a <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    6fe6:	444c      	add	r4, r9
    6fe8:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    6fea:	2a02      	cmp	r2, #2
    6fec:	d12c      	bne.n	7048 <chk_mounted+0x208>
    6fee:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6ff0:	496e      	ldr	r1, [pc, #440]	; (71ac <chk_mounted+0x36c>)
    6ff2:	468c      	mov	ip, r1
    6ff4:	4463      	add	r3, ip
    6ff6:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    6ff8:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6ffa:	429d      	cmp	r5, r3
    6ffc:	d200      	bcs.n	7000 <chk_mounted+0x1c0>
    6ffe:	e734      	b.n	6e6a <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    7000:	2301      	movs	r3, #1
    7002:	425b      	negs	r3, r3
    7004:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    7006:	2300      	movs	r3, #0
    7008:	60f3      	str	r3, [r6, #12]
    700a:	e0b6      	b.n	717a <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    700c:	33f2      	adds	r3, #242	; 0xf2
    700e:	33ff      	adds	r3, #255	; 0xff
    7010:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    7012:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    7014:	2b00      	cmp	r3, #0
    7016:	d100      	bne.n	701a <chk_mounted+0x1da>
    7018:	e727      	b.n	6e6a <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    701a:	23fa      	movs	r3, #250	; 0xfa
    701c:	33ff      	adds	r3, #255	; 0xff
    701e:	5cf4      	ldrb	r4, [r6, r3]
    7020:	0624      	lsls	r4, r4, #24
    7022:	3b01      	subs	r3, #1
    7024:	5cf3      	ldrb	r3, [r6, r3]
    7026:	041b      	lsls	r3, r3, #16
    7028:	431c      	orrs	r4, r3
    702a:	23fb      	movs	r3, #251	; 0xfb
    702c:	005b      	lsls	r3, r3, #1
    702e:	5cf3      	ldrb	r3, [r6, r3]
    7030:	431c      	orrs	r4, r3
    7032:	23f8      	movs	r3, #248	; 0xf8
    7034:	33ff      	adds	r3, #255	; 0xff
    7036:	5cf2      	ldrb	r2, [r6, r3]
    7038:	0212      	lsls	r2, r2, #8
    703a:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    703c:	0021      	movs	r1, r4
    703e:	0030      	movs	r0, r6
    7040:	4b56      	ldr	r3, [pc, #344]	; (719c <chk_mounted+0x35c>)
    7042:	4798      	blx	r3
    7044:	0003      	movs	r3, r0
    7046:	e746      	b.n	6ed6 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    7048:	2103      	movs	r1, #3
    704a:	4359      	muls	r1, r3
    704c:	0849      	lsrs	r1, r1, #1
    704e:	2001      	movs	r0, #1
    7050:	4003      	ands	r3, r0
    7052:	18cb      	adds	r3, r1, r3
    7054:	e7cc      	b.n	6ff0 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    7056:	200c      	movs	r0, #12
    7058:	e707      	b.n	6e6a <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    705a:	2000      	movs	r0, #0
    705c:	e705      	b.n	6e6a <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    705e:	2001      	movs	r0, #1
    7060:	e703      	b.n	6e6a <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    7062:	3302      	adds	r3, #2
    7064:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    7066:	19e7      	adds	r7, r4, r7
    7068:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    706a:	4652      	mov	r2, sl
    706c:	18a2      	adds	r2, r4, r2
    706e:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    7070:	200d      	movs	r0, #13
    7072:	4642      	mov	r2, r8
    7074:	2a00      	cmp	r2, #0
    7076:	d000      	beq.n	707a <chk_mounted+0x23a>
    7078:	e6f7      	b.n	6e6a <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    707a:	225f      	movs	r2, #95	; 0x5f
    707c:	5cb2      	ldrb	r2, [r6, r2]
    707e:	0612      	lsls	r2, r2, #24
    7080:	215e      	movs	r1, #94	; 0x5e
    7082:	5c71      	ldrb	r1, [r6, r1]
    7084:	0409      	lsls	r1, r1, #16
    7086:	430a      	orrs	r2, r1
    7088:	215c      	movs	r1, #92	; 0x5c
    708a:	5c71      	ldrb	r1, [r6, r1]
    708c:	430a      	orrs	r2, r1
    708e:	215d      	movs	r1, #93	; 0x5d
    7090:	5c71      	ldrb	r1, [r6, r1]
    7092:	0209      	lsls	r1, r1, #8
    7094:	430a      	orrs	r2, r1
    7096:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    7098:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    709a:	4a44      	ldr	r2, [pc, #272]	; (71ac <chk_mounted+0x36c>)
    709c:	4694      	mov	ip, r2
    709e:	4463      	add	r3, ip
    70a0:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    70a2:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    70a4:	429d      	cmp	r5, r3
    70a6:	d200      	bcs.n	70aa <chk_mounted+0x26a>
    70a8:	e6df      	b.n	6e6a <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    70aa:	2301      	movs	r3, #1
    70ac:	425b      	negs	r3, r3
    70ae:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    70b0:	2300      	movs	r3, #0
    70b2:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    70b4:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    70b6:	3361      	adds	r3, #97	; 0x61
    70b8:	5cf3      	ldrb	r3, [r6, r3]
    70ba:	021b      	lsls	r3, r3, #8
    70bc:	2260      	movs	r2, #96	; 0x60
    70be:	5cb2      	ldrb	r2, [r6, r2]
    70c0:	431a      	orrs	r2, r3
    70c2:	1912      	adds	r2, r2, r4
    70c4:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    70c6:	0031      	movs	r1, r6
    70c8:	3130      	adds	r1, #48	; 0x30
    70ca:	7870      	ldrb	r0, [r6, #1]
    70cc:	2301      	movs	r3, #1
    70ce:	4c38      	ldr	r4, [pc, #224]	; (71b0 <chk_mounted+0x370>)
    70d0:	47a0      	blx	r4
    70d2:	2203      	movs	r2, #3
    70d4:	2800      	cmp	r0, #0
    70d6:	d150      	bne.n	717a <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    70d8:	4b36      	ldr	r3, [pc, #216]	; (71b4 <chk_mounted+0x374>)
    70da:	5cf2      	ldrb	r2, [r6, r3]
    70dc:	0212      	lsls	r2, r2, #8
    70de:	4b36      	ldr	r3, [pc, #216]	; (71b8 <chk_mounted+0x378>)
    70e0:	5cf3      	ldrb	r3, [r6, r3]
    70e2:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    70e4:	4935      	ldr	r1, [pc, #212]	; (71bc <chk_mounted+0x37c>)
    70e6:	b21b      	sxth	r3, r3
    70e8:	2203      	movs	r2, #3
    70ea:	428b      	cmp	r3, r1
    70ec:	d145      	bne.n	717a <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    70ee:	2333      	movs	r3, #51	; 0x33
    70f0:	5cf3      	ldrb	r3, [r6, r3]
    70f2:	061b      	lsls	r3, r3, #24
    70f4:	322f      	adds	r2, #47	; 0x2f
    70f6:	5cb2      	ldrb	r2, [r6, r2]
    70f8:	0412      	lsls	r2, r2, #16
    70fa:	4313      	orrs	r3, r2
    70fc:	2230      	movs	r2, #48	; 0x30
    70fe:	5cb2      	ldrb	r2, [r6, r2]
    7100:	4313      	orrs	r3, r2
    7102:	2231      	movs	r2, #49	; 0x31
    7104:	5cb2      	ldrb	r2, [r6, r2]
    7106:	0212      	lsls	r2, r2, #8
    7108:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    710a:	492d      	ldr	r1, [pc, #180]	; (71c0 <chk_mounted+0x380>)
    710c:	2203      	movs	r2, #3
    710e:	428b      	cmp	r3, r1
    7110:	d133      	bne.n	717a <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    7112:	4b2c      	ldr	r3, [pc, #176]	; (71c4 <chk_mounted+0x384>)
    7114:	5cf3      	ldrb	r3, [r6, r3]
    7116:	061b      	lsls	r3, r3, #24
    7118:	4a2b      	ldr	r2, [pc, #172]	; (71c8 <chk_mounted+0x388>)
    711a:	5cb2      	ldrb	r2, [r6, r2]
    711c:	0412      	lsls	r2, r2, #16
    711e:	4313      	orrs	r3, r2
    7120:	2285      	movs	r2, #133	; 0x85
    7122:	0092      	lsls	r2, r2, #2
    7124:	5cb2      	ldrb	r2, [r6, r2]
    7126:	4313      	orrs	r3, r2
    7128:	4a28      	ldr	r2, [pc, #160]	; (71cc <chk_mounted+0x38c>)
    712a:	5cb2      	ldrb	r2, [r6, r2]
    712c:	0212      	lsls	r2, r2, #8
    712e:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    7130:	4927      	ldr	r1, [pc, #156]	; (71d0 <chk_mounted+0x390>)
    7132:	2203      	movs	r2, #3
    7134:	428b      	cmp	r3, r1
    7136:	d120      	bne.n	717a <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    7138:	4b26      	ldr	r3, [pc, #152]	; (71d4 <chk_mounted+0x394>)
    713a:	5cf3      	ldrb	r3, [r6, r3]
    713c:	061b      	lsls	r3, r3, #24
    713e:	4a26      	ldr	r2, [pc, #152]	; (71d8 <chk_mounted+0x398>)
    7140:	5cb2      	ldrb	r2, [r6, r2]
    7142:	0412      	lsls	r2, r2, #16
    7144:	4313      	orrs	r3, r2
    7146:	2287      	movs	r2, #135	; 0x87
    7148:	0092      	lsls	r2, r2, #2
    714a:	5cb2      	ldrb	r2, [r6, r2]
    714c:	4313      	orrs	r3, r2
    714e:	4a23      	ldr	r2, [pc, #140]	; (71dc <chk_mounted+0x39c>)
    7150:	5cb2      	ldrb	r2, [r6, r2]
    7152:	0212      	lsls	r2, r2, #8
    7154:	4313      	orrs	r3, r2
    7156:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    7158:	4b21      	ldr	r3, [pc, #132]	; (71e0 <chk_mounted+0x3a0>)
    715a:	5cf3      	ldrb	r3, [r6, r3]
    715c:	061b      	lsls	r3, r3, #24
    715e:	4a21      	ldr	r2, [pc, #132]	; (71e4 <chk_mounted+0x3a4>)
    7160:	5cb2      	ldrb	r2, [r6, r2]
    7162:	0412      	lsls	r2, r2, #16
    7164:	4313      	orrs	r3, r2
    7166:	2286      	movs	r2, #134	; 0x86
    7168:	0092      	lsls	r2, r2, #2
    716a:	5cb2      	ldrb	r2, [r6, r2]
    716c:	4313      	orrs	r3, r2
    716e:	4a1e      	ldr	r2, [pc, #120]	; (71e8 <chk_mounted+0x3a8>)
    7170:	5cb2      	ldrb	r2, [r6, r2]
    7172:	0212      	lsls	r2, r2, #8
    7174:	4313      	orrs	r3, r2
    7176:	6133      	str	r3, [r6, #16]
    7178:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    717a:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    717c:	4a1b      	ldr	r2, [pc, #108]	; (71ec <chk_mounted+0x3ac>)
    717e:	8813      	ldrh	r3, [r2, #0]
    7180:	3301      	adds	r3, #1
    7182:	b29b      	uxth	r3, r3
    7184:	8013      	strh	r3, [r2, #0]
    7186:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    7188:	2000      	movs	r0, #0
    718a:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    718c:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    718e:	e66c      	b.n	6e6a <chk_mounted+0x2a>
    7190:	2000041c 	.word	0x2000041c
    7194:	00006b31 	.word	0x00006b31
    7198:	00006a95 	.word	0x00006a95
    719c:	00006d9d 	.word	0x00006d9d
    71a0:	0000b9bd 	.word	0x0000b9bd
    71a4:	00000ff5 	.word	0x00000ff5
    71a8:	0000fff5 	.word	0x0000fff5
    71ac:	000001ff 	.word	0x000001ff
    71b0:	00006b4d 	.word	0x00006b4d
    71b4:	0000022f 	.word	0x0000022f
    71b8:	0000022e 	.word	0x0000022e
    71bc:	ffffaa55 	.word	0xffffaa55
    71c0:	41615252 	.word	0x41615252
    71c4:	00000217 	.word	0x00000217
    71c8:	00000216 	.word	0x00000216
    71cc:	00000215 	.word	0x00000215
    71d0:	61417272 	.word	0x61417272
    71d4:	0000021f 	.word	0x0000021f
    71d8:	0000021e 	.word	0x0000021e
    71dc:	0000021d 	.word	0x0000021d
    71e0:	0000021b 	.word	0x0000021b
    71e4:	0000021a 	.word	0x0000021a
    71e8:	00000219 	.word	0x00000219
    71ec:	2000043c 	.word	0x2000043c

000071f0 <move_window>:
{
    71f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    71f2:	46ce      	mov	lr, r9
    71f4:	b500      	push	{lr}
    71f6:	b082      	sub	sp, #8
    71f8:	0004      	movs	r4, r0
    71fa:	000f      	movs	r7, r1
	wsect = fs->winsect;
    71fc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    71fe:	428d      	cmp	r5, r1
    7200:	d03f      	beq.n	7282 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    7202:	7903      	ldrb	r3, [r0, #4]
    7204:	2b00      	cmp	r3, #0
    7206:	d107      	bne.n	7218 <move_window+0x28>
	return FR_OK;
    7208:	2300      	movs	r3, #0
		if (sector) {
    720a:	2f00      	cmp	r7, #0
    720c:	d12c      	bne.n	7268 <move_window+0x78>
}
    720e:	0018      	movs	r0, r3
    7210:	b002      	add	sp, #8
    7212:	bc04      	pop	{r2}
    7214:	4691      	mov	r9, r2
    7216:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    7218:	2330      	movs	r3, #48	; 0x30
    721a:	469c      	mov	ip, r3
    721c:	4484      	add	ip, r0
    721e:	4663      	mov	r3, ip
    7220:	4661      	mov	r1, ip
    7222:	9301      	str	r3, [sp, #4]
    7224:	7840      	ldrb	r0, [r0, #1]
    7226:	2301      	movs	r3, #1
    7228:	002a      	movs	r2, r5
    722a:	4e17      	ldr	r6, [pc, #92]	; (7288 <move_window+0x98>)
    722c:	47b0      	blx	r6
				return FR_DISK_ERR;
    722e:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    7230:	2800      	cmp	r0, #0
    7232:	d1ec      	bne.n	720e <move_window+0x1e>
			fs->wflag = 0;
    7234:	2300      	movs	r3, #0
    7236:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    7238:	6a23      	ldr	r3, [r4, #32]
    723a:	69e2      	ldr	r2, [r4, #28]
    723c:	4694      	mov	ip, r2
    723e:	4463      	add	r3, ip
    7240:	429d      	cmp	r5, r3
    7242:	d2e1      	bcs.n	7208 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7244:	78e6      	ldrb	r6, [r4, #3]
    7246:	2e01      	cmp	r6, #1
    7248:	d9de      	bls.n	7208 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    724a:	4b0f      	ldr	r3, [pc, #60]	; (7288 <move_window+0x98>)
    724c:	4699      	mov	r9, r3
					wsect += fs->fsize;
    724e:	69e3      	ldr	r3, [r4, #28]
    7250:	469c      	mov	ip, r3
    7252:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    7254:	7860      	ldrb	r0, [r4, #1]
    7256:	2301      	movs	r3, #1
    7258:	002a      	movs	r2, r5
    725a:	9901      	ldr	r1, [sp, #4]
    725c:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    725e:	3e01      	subs	r6, #1
    7260:	b2f6      	uxtb	r6, r6
    7262:	2e01      	cmp	r6, #1
    7264:	d1f3      	bne.n	724e <move_window+0x5e>
    7266:	e7cf      	b.n	7208 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    7268:	0021      	movs	r1, r4
    726a:	3130      	adds	r1, #48	; 0x30
    726c:	7860      	ldrb	r0, [r4, #1]
    726e:	3301      	adds	r3, #1
    7270:	003a      	movs	r2, r7
    7272:	4d06      	ldr	r5, [pc, #24]	; (728c <move_window+0x9c>)
    7274:	47a8      	blx	r5
				return FR_DISK_ERR;
    7276:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    7278:	2800      	cmp	r0, #0
    727a:	d1c8      	bne.n	720e <move_window+0x1e>
			fs->winsect = sector;
    727c:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    727e:	2300      	movs	r3, #0
    7280:	e7c5      	b.n	720e <move_window+0x1e>
    7282:	2300      	movs	r3, #0
    7284:	e7c3      	b.n	720e <move_window+0x1e>
    7286:	46c0      	nop			; (mov r8, r8)
    7288:	00006bd1 	.word	0x00006bd1
    728c:	00006b4d 	.word	0x00006b4d

00007290 <get_fat>:
{
    7290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7292:	0005      	movs	r5, r0
    7294:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    7296:	2901      	cmp	r1, #1
    7298:	d974      	bls.n	7384 <get_fat+0xf4>
		return 1;
    729a:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    729c:	69ab      	ldr	r3, [r5, #24]
    729e:	4299      	cmp	r1, r3
    72a0:	d271      	bcs.n	7386 <get_fat+0xf6>
	switch (fs->fs_type) {
    72a2:	782b      	ldrb	r3, [r5, #0]
    72a4:	2b02      	cmp	r3, #2
    72a6:	d034      	beq.n	7312 <get_fat+0x82>
    72a8:	2b03      	cmp	r3, #3
    72aa:	d049      	beq.n	7340 <get_fat+0xb0>
    72ac:	2b01      	cmp	r3, #1
    72ae:	d002      	beq.n	72b6 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    72b0:	2001      	movs	r0, #1
    72b2:	4240      	negs	r0, r0
    72b4:	e067      	b.n	7386 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    72b6:	084e      	lsrs	r6, r1, #1
    72b8:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    72ba:	0a71      	lsrs	r1, r6, #9
    72bc:	6a2b      	ldr	r3, [r5, #32]
    72be:	469c      	mov	ip, r3
    72c0:	4461      	add	r1, ip
    72c2:	0028      	movs	r0, r5
    72c4:	4b30      	ldr	r3, [pc, #192]	; (7388 <get_fat+0xf8>)
    72c6:	4798      	blx	r3
    72c8:	2800      	cmp	r0, #0
    72ca:	d002      	beq.n	72d2 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    72cc:	2001      	movs	r0, #1
    72ce:	4240      	negs	r0, r0
    72d0:	e059      	b.n	7386 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    72d2:	05f3      	lsls	r3, r6, #23
    72d4:	0ddb      	lsrs	r3, r3, #23
    72d6:	18eb      	adds	r3, r5, r3
    72d8:	3330      	adds	r3, #48	; 0x30
    72da:	781f      	ldrb	r7, [r3, #0]
    72dc:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    72de:	0a71      	lsrs	r1, r6, #9
    72e0:	6a2b      	ldr	r3, [r5, #32]
    72e2:	469c      	mov	ip, r3
    72e4:	4461      	add	r1, ip
    72e6:	0028      	movs	r0, r5
    72e8:	4b27      	ldr	r3, [pc, #156]	; (7388 <get_fat+0xf8>)
    72ea:	4798      	blx	r3
    72ec:	2800      	cmp	r0, #0
    72ee:	d002      	beq.n	72f6 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    72f0:	2001      	movs	r0, #1
    72f2:	4240      	negs	r0, r0
    72f4:	e047      	b.n	7386 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    72f6:	05f6      	lsls	r6, r6, #23
    72f8:	0df6      	lsrs	r6, r6, #23
    72fa:	19ad      	adds	r5, r5, r6
    72fc:	3530      	adds	r5, #48	; 0x30
    72fe:	7828      	ldrb	r0, [r5, #0]
    7300:	0200      	lsls	r0, r0, #8
    7302:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    7304:	07e3      	lsls	r3, r4, #31
    7306:	d501      	bpl.n	730c <get_fat+0x7c>
    7308:	0900      	lsrs	r0, r0, #4
    730a:	e03c      	b.n	7386 <get_fat+0xf6>
    730c:	0500      	lsls	r0, r0, #20
    730e:	0d00      	lsrs	r0, r0, #20
    7310:	e039      	b.n	7386 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7312:	0a09      	lsrs	r1, r1, #8
    7314:	6a2b      	ldr	r3, [r5, #32]
    7316:	469c      	mov	ip, r3
    7318:	4461      	add	r1, ip
    731a:	0028      	movs	r0, r5
    731c:	4b1a      	ldr	r3, [pc, #104]	; (7388 <get_fat+0xf8>)
    731e:	4798      	blx	r3
    7320:	2800      	cmp	r0, #0
    7322:	d002      	beq.n	732a <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7324:	2001      	movs	r0, #1
    7326:	4240      	negs	r0, r0
    7328:	e02d      	b.n	7386 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    732a:	0064      	lsls	r4, r4, #1
    732c:	23ff      	movs	r3, #255	; 0xff
    732e:	005b      	lsls	r3, r3, #1
    7330:	401c      	ands	r4, r3
		return LD_WORD(p);
    7332:	192d      	adds	r5, r5, r4
    7334:	3530      	adds	r5, #48	; 0x30
    7336:	786b      	ldrb	r3, [r5, #1]
    7338:	021b      	lsls	r3, r3, #8
    733a:	7828      	ldrb	r0, [r5, #0]
    733c:	4318      	orrs	r0, r3
    733e:	e022      	b.n	7386 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7340:	09c9      	lsrs	r1, r1, #7
    7342:	6a2b      	ldr	r3, [r5, #32]
    7344:	469c      	mov	ip, r3
    7346:	4461      	add	r1, ip
    7348:	0028      	movs	r0, r5
    734a:	4b0f      	ldr	r3, [pc, #60]	; (7388 <get_fat+0xf8>)
    734c:	4798      	blx	r3
    734e:	2800      	cmp	r0, #0
    7350:	d002      	beq.n	7358 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7352:	2001      	movs	r0, #1
    7354:	4240      	negs	r0, r0
    7356:	e016      	b.n	7386 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    7358:	00a4      	lsls	r4, r4, #2
    735a:	23fe      	movs	r3, #254	; 0xfe
    735c:	005b      	lsls	r3, r3, #1
    735e:	401c      	ands	r4, r3
    7360:	0023      	movs	r3, r4
    7362:	3330      	adds	r3, #48	; 0x30
    7364:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    7366:	78d8      	ldrb	r0, [r3, #3]
    7368:	0600      	lsls	r0, r0, #24
    736a:	789a      	ldrb	r2, [r3, #2]
    736c:	0412      	lsls	r2, r2, #16
    736e:	4310      	orrs	r0, r2
    7370:	192c      	adds	r4, r5, r4
    7372:	3430      	adds	r4, #48	; 0x30
    7374:	7822      	ldrb	r2, [r4, #0]
    7376:	4310      	orrs	r0, r2
    7378:	785b      	ldrb	r3, [r3, #1]
    737a:	021b      	lsls	r3, r3, #8
    737c:	4318      	orrs	r0, r3
    737e:	0100      	lsls	r0, r0, #4
    7380:	0900      	lsrs	r0, r0, #4
    7382:	e000      	b.n	7386 <get_fat+0xf6>
		return 1;
    7384:	2001      	movs	r0, #1
}
    7386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7388:	000071f1 	.word	0x000071f1

0000738c <dir_sdi>:
{
    738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    738e:	0004      	movs	r4, r0
    7390:	000d      	movs	r5, r1
	dj->index = idx;
    7392:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    7394:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    7396:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7398:	2901      	cmp	r1, #1
    739a:	d003      	beq.n	73a4 <dir_sdi+0x18>
    739c:	6823      	ldr	r3, [r4, #0]
    739e:	699a      	ldr	r2, [r3, #24]
    73a0:	4291      	cmp	r1, r2
    73a2:	d300      	bcc.n	73a6 <dir_sdi+0x1a>
}
    73a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    73a6:	2900      	cmp	r1, #0
    73a8:	d119      	bne.n	73de <dir_sdi+0x52>
    73aa:	781a      	ldrb	r2, [r3, #0]
    73ac:	2a03      	cmp	r2, #3
    73ae:	d013      	beq.n	73d8 <dir_sdi+0x4c>
		dj->clust = clst;
    73b0:	2200      	movs	r2, #0
    73b2:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    73b4:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    73b6:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    73b8:	42aa      	cmp	r2, r5
    73ba:	d9f3      	bls.n	73a4 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    73bc:	092a      	lsrs	r2, r5, #4
    73be:	b292      	uxth	r2, r2
    73c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    73c2:	189b      	adds	r3, r3, r2
    73c4:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    73c6:	6823      	ldr	r3, [r4, #0]
    73c8:	3330      	adds	r3, #48	; 0x30
    73ca:	220f      	movs	r2, #15
    73cc:	4015      	ands	r5, r2
    73ce:	016d      	lsls	r5, r5, #5
    73d0:	195d      	adds	r5, r3, r5
    73d2:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    73d4:	2000      	movs	r0, #0
    73d6:	e7e5      	b.n	73a4 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    73d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    73da:	2900      	cmp	r1, #0
    73dc:	d0e8      	beq.n	73b0 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    73de:	789e      	ldrb	r6, [r3, #2]
    73e0:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    73e2:	42b5      	cmp	r5, r6
    73e4:	d313      	bcc.n	740e <dir_sdi+0x82>
    73e6:	1bad      	subs	r5, r5, r6
    73e8:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    73ea:	4f10      	ldr	r7, [pc, #64]	; (742c <dir_sdi+0xa0>)
    73ec:	e000      	b.n	73f0 <dir_sdi+0x64>
    73ee:	001d      	movs	r5, r3
    73f0:	6820      	ldr	r0, [r4, #0]
    73f2:	47b8      	blx	r7
    73f4:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    73f6:	1c43      	adds	r3, r0, #1
    73f8:	d012      	beq.n	7420 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    73fa:	2801      	cmp	r0, #1
    73fc:	d912      	bls.n	7424 <dir_sdi+0x98>
    73fe:	6823      	ldr	r3, [r4, #0]
    7400:	699b      	ldr	r3, [r3, #24]
    7402:	4298      	cmp	r0, r3
    7404:	d210      	bcs.n	7428 <dir_sdi+0x9c>
    7406:	1bab      	subs	r3, r5, r6
    7408:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    740a:	42b5      	cmp	r5, r6
    740c:	d2ef      	bcs.n	73ee <dir_sdi+0x62>
		dj->clust = clst;
    740e:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7410:	6820      	ldr	r0, [r4, #0]
    7412:	4b07      	ldr	r3, [pc, #28]	; (7430 <dir_sdi+0xa4>)
    7414:	4798      	blx	r3
    7416:	092b      	lsrs	r3, r5, #4
    7418:	b29b      	uxth	r3, r3
    741a:	1818      	adds	r0, r3, r0
    741c:	6120      	str	r0, [r4, #16]
    741e:	e7d2      	b.n	73c6 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7420:	2001      	movs	r0, #1
    7422:	e7bf      	b.n	73a4 <dir_sdi+0x18>
				return FR_INT_ERR;
    7424:	2002      	movs	r0, #2
    7426:	e7bd      	b.n	73a4 <dir_sdi+0x18>
    7428:	2002      	movs	r0, #2
    742a:	e7bb      	b.n	73a4 <dir_sdi+0x18>
    742c:	00007291 	.word	0x00007291
    7430:	00006d37 	.word	0x00006d37

00007434 <put_fat>:
{
    7434:	b5f0      	push	{r4, r5, r6, r7, lr}
    7436:	46c6      	mov	lr, r8
    7438:	b500      	push	{lr}
    743a:	0007      	movs	r7, r0
    743c:	000c      	movs	r4, r1
    743e:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    7440:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7442:	2901      	cmp	r1, #1
    7444:	d902      	bls.n	744c <put_fat+0x18>
    7446:	6983      	ldr	r3, [r0, #24]
    7448:	4299      	cmp	r1, r3
    744a:	d303      	bcc.n	7454 <put_fat+0x20>
}
    744c:	0028      	movs	r0, r5
    744e:	bc04      	pop	{r2}
    7450:	4690      	mov	r8, r2
    7452:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    7454:	7803      	ldrb	r3, [r0, #0]
    7456:	2b02      	cmp	r3, #2
    7458:	d053      	beq.n	7502 <put_fat+0xce>
    745a:	2b03      	cmp	r3, #3
    745c:	d063      	beq.n	7526 <put_fat+0xf2>
			res = FR_INT_ERR;
    745e:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    7460:	2b01      	cmp	r3, #1
    7462:	d002      	beq.n	746a <put_fat+0x36>
		fs->wflag = 1;
    7464:	2301      	movs	r3, #1
    7466:	713b      	strb	r3, [r7, #4]
    7468:	e7f0      	b.n	744c <put_fat+0x18>
			bc = clst; bc += bc / 2;
    746a:	084b      	lsrs	r3, r1, #1
    746c:	4698      	mov	r8, r3
    746e:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7470:	4643      	mov	r3, r8
    7472:	0a59      	lsrs	r1, r3, #9
    7474:	6a03      	ldr	r3, [r0, #32]
    7476:	469c      	mov	ip, r3
    7478:	4461      	add	r1, ip
    747a:	4b3b      	ldr	r3, [pc, #236]	; (7568 <put_fat+0x134>)
    747c:	4798      	blx	r3
    747e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    7480:	d1f0      	bne.n	7464 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    7482:	4643      	mov	r3, r8
    7484:	05db      	lsls	r3, r3, #23
    7486:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7488:	07e2      	lsls	r2, r4, #31
    748a:	d51f      	bpl.n	74cc <put_fat+0x98>
    748c:	18fb      	adds	r3, r7, r3
    748e:	3330      	adds	r3, #48	; 0x30
    7490:	7819      	ldrb	r1, [r3, #0]
    7492:	220f      	movs	r2, #15
    7494:	400a      	ands	r2, r1
    7496:	0131      	lsls	r1, r6, #4
    7498:	20ff      	movs	r0, #255	; 0xff
    749a:	0100      	lsls	r0, r0, #4
    749c:	4001      	ands	r1, r0
    749e:	430a      	orrs	r2, r1
    74a0:	701a      	strb	r2, [r3, #0]
			bc++;
    74a2:	4644      	mov	r4, r8
    74a4:	3401      	adds	r4, #1
			fs->wflag = 1;
    74a6:	2301      	movs	r3, #1
    74a8:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    74aa:	0a61      	lsrs	r1, r4, #9
    74ac:	6a3b      	ldr	r3, [r7, #32]
    74ae:	469c      	mov	ip, r3
    74b0:	4461      	add	r1, ip
    74b2:	0038      	movs	r0, r7
    74b4:	4b2c      	ldr	r3, [pc, #176]	; (7568 <put_fat+0x134>)
    74b6:	4798      	blx	r3
			if (res != FR_OK) break;
    74b8:	2800      	cmp	r0, #0
    74ba:	d151      	bne.n	7560 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    74bc:	05e4      	lsls	r4, r4, #23
    74be:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    74c0:	0936      	lsrs	r6, r6, #4
    74c2:	b2f6      	uxtb	r6, r6
    74c4:	193c      	adds	r4, r7, r4
    74c6:	3430      	adds	r4, #48	; 0x30
    74c8:	7026      	strb	r6, [r4, #0]
			break;
    74ca:	e7cb      	b.n	7464 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    74cc:	18fb      	adds	r3, r7, r3
    74ce:	3330      	adds	r3, #48	; 0x30
    74d0:	701e      	strb	r6, [r3, #0]
			bc++;
    74d2:	4644      	mov	r4, r8
    74d4:	3401      	adds	r4, #1
			fs->wflag = 1;
    74d6:	2301      	movs	r3, #1
    74d8:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    74da:	0a61      	lsrs	r1, r4, #9
    74dc:	6a3b      	ldr	r3, [r7, #32]
    74de:	469c      	mov	ip, r3
    74e0:	4461      	add	r1, ip
    74e2:	0038      	movs	r0, r7
    74e4:	4b20      	ldr	r3, [pc, #128]	; (7568 <put_fat+0x134>)
    74e6:	4798      	blx	r3
			if (res != FR_OK) break;
    74e8:	2800      	cmp	r0, #0
    74ea:	d13b      	bne.n	7564 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    74ec:	05e4      	lsls	r4, r4, #23
    74ee:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    74f0:	193b      	adds	r3, r7, r4
    74f2:	3330      	adds	r3, #48	; 0x30
    74f4:	781b      	ldrb	r3, [r3, #0]
    74f6:	220f      	movs	r2, #15
    74f8:	4393      	bics	r3, r2
    74fa:	0536      	lsls	r6, r6, #20
    74fc:	0f36      	lsrs	r6, r6, #28
    74fe:	431e      	orrs	r6, r3
    7500:	e7e0      	b.n	74c4 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    7502:	0a09      	lsrs	r1, r1, #8
    7504:	6a03      	ldr	r3, [r0, #32]
    7506:	469c      	mov	ip, r3
    7508:	4461      	add	r1, ip
    750a:	4b17      	ldr	r3, [pc, #92]	; (7568 <put_fat+0x134>)
    750c:	4798      	blx	r3
    750e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    7510:	d1a8      	bne.n	7464 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    7512:	0063      	lsls	r3, r4, #1
    7514:	24ff      	movs	r4, #255	; 0xff
    7516:	0064      	lsls	r4, r4, #1
    7518:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    751a:	18fb      	adds	r3, r7, r3
    751c:	3330      	adds	r3, #48	; 0x30
    751e:	701e      	strb	r6, [r3, #0]
    7520:	0a36      	lsrs	r6, r6, #8
    7522:	705e      	strb	r6, [r3, #1]
			break;
    7524:	e79e      	b.n	7464 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    7526:	09c9      	lsrs	r1, r1, #7
    7528:	6a03      	ldr	r3, [r0, #32]
    752a:	469c      	mov	ip, r3
    752c:	4461      	add	r1, ip
    752e:	4b0e      	ldr	r3, [pc, #56]	; (7568 <put_fat+0x134>)
    7530:	4798      	blx	r3
    7532:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    7534:	d196      	bne.n	7464 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    7536:	00a4      	lsls	r4, r4, #2
    7538:	23fe      	movs	r3, #254	; 0xfe
    753a:	005b      	lsls	r3, r3, #1
    753c:	401c      	ands	r4, r3
    753e:	0022      	movs	r2, r4
    7540:	3230      	adds	r2, #48	; 0x30
    7542:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    7544:	78d3      	ldrb	r3, [r2, #3]
    7546:	193c      	adds	r4, r7, r4
    7548:	3430      	adds	r4, #48	; 0x30
    754a:	091b      	lsrs	r3, r3, #4
    754c:	071b      	lsls	r3, r3, #28
    754e:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    7550:	7026      	strb	r6, [r4, #0]
    7552:	0a33      	lsrs	r3, r6, #8
    7554:	7053      	strb	r3, [r2, #1]
    7556:	0c33      	lsrs	r3, r6, #16
    7558:	7093      	strb	r3, [r2, #2]
    755a:	0e36      	lsrs	r6, r6, #24
    755c:	70d6      	strb	r6, [r2, #3]
			break;
    755e:	e781      	b.n	7464 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7560:	0005      	movs	r5, r0
    7562:	e77f      	b.n	7464 <put_fat+0x30>
    7564:	0005      	movs	r5, r0
    7566:	e77d      	b.n	7464 <put_fat+0x30>
    7568:	000071f1 	.word	0x000071f1

0000756c <create_chain>:
{
    756c:	b5f0      	push	{r4, r5, r6, r7, lr}
    756e:	46c6      	mov	lr, r8
    7570:	b500      	push	{lr}
    7572:	0005      	movs	r5, r0
    7574:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    7576:	2900      	cmp	r1, #0
    7578:	d107      	bne.n	758a <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    757a:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    757c:	2e00      	cmp	r6, #0
    757e:	d00d      	beq.n	759c <create_chain+0x30>
    7580:	6983      	ldr	r3, [r0, #24]
    7582:	429e      	cmp	r6, r3
    7584:	d30b      	bcc.n	759e <create_chain+0x32>
    7586:	2601      	movs	r6, #1
    7588:	e009      	b.n	759e <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    758a:	4b26      	ldr	r3, [pc, #152]	; (7624 <create_chain+0xb8>)
    758c:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    758e:	2801      	cmp	r0, #1
    7590:	d93d      	bls.n	760e <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    7592:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    7594:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    7596:	4298      	cmp	r0, r3
    7598:	d201      	bcs.n	759e <create_chain+0x32>
    759a:	e03d      	b.n	7618 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    759c:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    759e:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    75a0:	4f20      	ldr	r7, [pc, #128]	; (7624 <create_chain+0xb8>)
    75a2:	e00a      	b.n	75ba <create_chain+0x4e>
    75a4:	0021      	movs	r1, r4
    75a6:	0028      	movs	r0, r5
    75a8:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    75aa:	2800      	cmp	r0, #0
    75ac:	d00d      	beq.n	75ca <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    75ae:	1c43      	adds	r3, r0, #1
    75b0:	d032      	beq.n	7618 <create_chain+0xac>
    75b2:	2801      	cmp	r0, #1
    75b4:	d030      	beq.n	7618 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    75b6:	42b4      	cmp	r4, r6
    75b8:	d02d      	beq.n	7616 <create_chain+0xaa>
		ncl++;							/* Next cluster */
    75ba:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    75bc:	69ab      	ldr	r3, [r5, #24]
    75be:	429c      	cmp	r4, r3
    75c0:	d3f0      	bcc.n	75a4 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    75c2:	2e01      	cmp	r6, #1
    75c4:	d925      	bls.n	7612 <create_chain+0xa6>
			ncl = 2;
    75c6:	2402      	movs	r4, #2
    75c8:	e7ec      	b.n	75a4 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    75ca:	4a17      	ldr	r2, [pc, #92]	; (7628 <create_chain+0xbc>)
    75cc:	0021      	movs	r1, r4
    75ce:	0028      	movs	r0, r5
    75d0:	4b16      	ldr	r3, [pc, #88]	; (762c <create_chain+0xc0>)
    75d2:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    75d4:	2800      	cmp	r0, #0
    75d6:	d113      	bne.n	7600 <create_chain+0x94>
    75d8:	4643      	mov	r3, r8
    75da:	2b00      	cmp	r3, #0
    75dc:	d109      	bne.n	75f2 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    75de:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    75e0:	692b      	ldr	r3, [r5, #16]
    75e2:	1c5a      	adds	r2, r3, #1
    75e4:	d01b      	beq.n	761e <create_chain+0xb2>
			fs->free_clust--;
    75e6:	3b01      	subs	r3, #1
    75e8:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    75ea:	2301      	movs	r3, #1
    75ec:	716b      	strb	r3, [r5, #5]
    75ee:	0020      	movs	r0, r4
    75f0:	e012      	b.n	7618 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    75f2:	0022      	movs	r2, r4
    75f4:	4641      	mov	r1, r8
    75f6:	0028      	movs	r0, r5
    75f8:	4b0c      	ldr	r3, [pc, #48]	; (762c <create_chain+0xc0>)
    75fa:	4798      	blx	r3
	if (res == FR_OK) {
    75fc:	2800      	cmp	r0, #0
    75fe:	d0ee      	beq.n	75de <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    7600:	3801      	subs	r0, #1
    7602:	4242      	negs	r2, r0
    7604:	4142      	adcs	r2, r0
    7606:	4250      	negs	r0, r2
    7608:	2301      	movs	r3, #1
    760a:	4318      	orrs	r0, r3
    760c:	e004      	b.n	7618 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    760e:	2001      	movs	r0, #1
    7610:	e002      	b.n	7618 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    7612:	2000      	movs	r0, #0
    7614:	e000      	b.n	7618 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    7616:	2000      	movs	r0, #0
}
    7618:	bc04      	pop	{r2}
    761a:	4690      	mov	r8, r2
    761c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    761e:	0020      	movs	r0, r4
    7620:	e7fa      	b.n	7618 <create_chain+0xac>
    7622:	46c0      	nop			; (mov r8, r8)
    7624:	00007291 	.word	0x00007291
    7628:	0fffffff 	.word	0x0fffffff
    762c:	00007435 	.word	0x00007435

00007630 <remove_chain>:
{
    7630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7632:	46ce      	mov	lr, r9
    7634:	4647      	mov	r7, r8
    7636:	b580      	push	{r7, lr}
    7638:	0004      	movs	r4, r0
    763a:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    763c:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    763e:	2901      	cmp	r1, #1
    7640:	d902      	bls.n	7648 <remove_chain+0x18>
    7642:	69a3      	ldr	r3, [r4, #24]
    7644:	4299      	cmp	r1, r3
    7646:	d303      	bcc.n	7650 <remove_chain+0x20>
}
    7648:	bc0c      	pop	{r2, r3}
    764a:	4690      	mov	r8, r2
    764c:	4699      	mov	r9, r3
    764e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7650:	4f13      	ldr	r7, [pc, #76]	; (76a0 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7652:	4b14      	ldr	r3, [pc, #80]	; (76a4 <remove_chain+0x74>)
    7654:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    7656:	2301      	movs	r3, #1
    7658:	4699      	mov	r9, r3
    765a:	e003      	b.n	7664 <remove_chain+0x34>
    765c:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    765e:	69a3      	ldr	r3, [r4, #24]
    7660:	42b3      	cmp	r3, r6
    7662:	d9f1      	bls.n	7648 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7664:	0029      	movs	r1, r5
    7666:	0020      	movs	r0, r4
    7668:	47b8      	blx	r7
    766a:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    766c:	d011      	beq.n	7692 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    766e:	2801      	cmp	r0, #1
    7670:	d011      	beq.n	7696 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7672:	1c43      	adds	r3, r0, #1
    7674:	d011      	beq.n	769a <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7676:	2200      	movs	r2, #0
    7678:	0029      	movs	r1, r5
    767a:	0020      	movs	r0, r4
    767c:	47c0      	blx	r8
			if (res != FR_OK) break;
    767e:	2800      	cmp	r0, #0
    7680:	d1e2      	bne.n	7648 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7682:	6923      	ldr	r3, [r4, #16]
    7684:	1c5a      	adds	r2, r3, #1
    7686:	d0e9      	beq.n	765c <remove_chain+0x2c>
				fs->free_clust++;
    7688:	3301      	adds	r3, #1
    768a:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    768c:	464b      	mov	r3, r9
    768e:	7163      	strb	r3, [r4, #5]
    7690:	e7e4      	b.n	765c <remove_chain+0x2c>
    7692:	2000      	movs	r0, #0
    7694:	e7d8      	b.n	7648 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7696:	2002      	movs	r0, #2
    7698:	e7d6      	b.n	7648 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    769a:	2001      	movs	r0, #1
    769c:	e7d4      	b.n	7648 <remove_chain+0x18>
    769e:	46c0      	nop			; (mov r8, r8)
    76a0:	00007291 	.word	0x00007291
    76a4:	00007435 	.word	0x00007435

000076a8 <dir_next>:
{
    76a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76aa:	46d6      	mov	lr, sl
    76ac:	4647      	mov	r7, r8
    76ae:	b580      	push	{r7, lr}
    76b0:	0006      	movs	r6, r0
    76b2:	000d      	movs	r5, r1
	i = dj->index + 1;
    76b4:	88c4      	ldrh	r4, [r0, #6]
    76b6:	3401      	adds	r4, #1
    76b8:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    76ba:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    76bc:	2c00      	cmp	r4, #0
    76be:	d103      	bne.n	76c8 <dir_next+0x20>
}
    76c0:	bc0c      	pop	{r2, r3}
    76c2:	4690      	mov	r8, r2
    76c4:	469a      	mov	sl, r3
    76c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    76c8:	6933      	ldr	r3, [r6, #16]
    76ca:	2b00      	cmp	r3, #0
    76cc:	d0f8      	beq.n	76c0 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    76ce:	270f      	movs	r7, #15
    76d0:	4027      	ands	r7, r4
    76d2:	d10f      	bne.n	76f4 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    76d4:	3301      	adds	r3, #1
    76d6:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    76d8:	68f1      	ldr	r1, [r6, #12]
    76da:	2900      	cmp	r1, #0
    76dc:	d104      	bne.n	76e8 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    76de:	6833      	ldr	r3, [r6, #0]
    76e0:	891b      	ldrh	r3, [r3, #8]
    76e2:	42a3      	cmp	r3, r4
    76e4:	d9ec      	bls.n	76c0 <dir_next+0x18>
    76e6:	e005      	b.n	76f4 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    76e8:	6830      	ldr	r0, [r6, #0]
    76ea:	7883      	ldrb	r3, [r0, #2]
    76ec:	3b01      	subs	r3, #1
    76ee:	0922      	lsrs	r2, r4, #4
    76f0:	421a      	tst	r2, r3
    76f2:	d007      	beq.n	7704 <dir_next+0x5c>
	dj->index = i;
    76f4:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    76f6:	6833      	ldr	r3, [r6, #0]
    76f8:	3330      	adds	r3, #48	; 0x30
    76fa:	017f      	lsls	r7, r7, #5
    76fc:	19df      	adds	r7, r3, r7
    76fe:	6177      	str	r7, [r6, #20]
	return FR_OK;
    7700:	2000      	movs	r0, #0
    7702:	e7dd      	b.n	76c0 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    7704:	4b2c      	ldr	r3, [pc, #176]	; (77b8 <dir_next+0x110>)
    7706:	4798      	blx	r3
    7708:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    770a:	2002      	movs	r0, #2
    770c:	4643      	mov	r3, r8
    770e:	2b01      	cmp	r3, #1
    7710:	d9d6      	bls.n	76c0 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7712:	3301      	adds	r3, #1
    7714:	d04b      	beq.n	77ae <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    7716:	6833      	ldr	r3, [r6, #0]
    7718:	699a      	ldr	r2, [r3, #24]
    771a:	4590      	cmp	r8, r2
    771c:	d33f      	bcc.n	779e <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    771e:	3002      	adds	r0, #2
    7720:	2d00      	cmp	r5, #0
    7722:	d0cd      	beq.n	76c0 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    7724:	68f1      	ldr	r1, [r6, #12]
    7726:	0018      	movs	r0, r3
    7728:	4b24      	ldr	r3, [pc, #144]	; (77bc <dir_next+0x114>)
    772a:	4798      	blx	r3
    772c:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    772e:	2007      	movs	r0, #7
    7730:	4643      	mov	r3, r8
    7732:	2b00      	cmp	r3, #0
    7734:	d0c4      	beq.n	76c0 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    7736:	3805      	subs	r0, #5
    7738:	2b01      	cmp	r3, #1
    773a:	d0c1      	beq.n	76c0 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    773c:	3801      	subs	r0, #1
    773e:	3301      	adds	r3, #1
    7740:	d0be      	beq.n	76c0 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    7742:	2100      	movs	r1, #0
    7744:	6830      	ldr	r0, [r6, #0]
    7746:	4b1e      	ldr	r3, [pc, #120]	; (77c0 <dir_next+0x118>)
    7748:	4798      	blx	r3
    774a:	0003      	movs	r3, r0
    774c:	2001      	movs	r0, #1
    774e:	2b00      	cmp	r3, #0
    7750:	d1b6      	bne.n	76c0 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    7752:	6830      	ldr	r0, [r6, #0]
    7754:	3030      	adds	r0, #48	; 0x30
    7756:	2280      	movs	r2, #128	; 0x80
    7758:	0092      	lsls	r2, r2, #2
    775a:	2100      	movs	r1, #0
    775c:	4b19      	ldr	r3, [pc, #100]	; (77c4 <dir_next+0x11c>)
    775e:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7760:	6835      	ldr	r5, [r6, #0]
    7762:	4641      	mov	r1, r8
    7764:	0028      	movs	r0, r5
    7766:	4b18      	ldr	r3, [pc, #96]	; (77c8 <dir_next+0x120>)
    7768:	4798      	blx	r3
    776a:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    776c:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    776e:	2301      	movs	r3, #1
    7770:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7772:	6833      	ldr	r3, [r6, #0]
    7774:	789a      	ldrb	r2, [r3, #2]
    7776:	42aa      	cmp	r2, r5
    7778:	d90e      	bls.n	7798 <dir_next+0xf0>
						dj->fs->wflag = 1;
    777a:	4652      	mov	r2, sl
    777c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    777e:	2100      	movs	r1, #0
    7780:	6830      	ldr	r0, [r6, #0]
    7782:	4b0f      	ldr	r3, [pc, #60]	; (77c0 <dir_next+0x118>)
    7784:	4798      	blx	r3
    7786:	2800      	cmp	r0, #0
    7788:	d113      	bne.n	77b2 <dir_next+0x10a>
						dj->fs->winsect++;
    778a:	6832      	ldr	r2, [r6, #0]
    778c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    778e:	3301      	adds	r3, #1
    7790:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7792:	3501      	adds	r5, #1
    7794:	b2ed      	uxtb	r5, r5
    7796:	e7ec      	b.n	7772 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    7798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    779a:	1b52      	subs	r2, r2, r5
    779c:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    779e:	4643      	mov	r3, r8
    77a0:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    77a2:	4641      	mov	r1, r8
    77a4:	6830      	ldr	r0, [r6, #0]
    77a6:	4b08      	ldr	r3, [pc, #32]	; (77c8 <dir_next+0x120>)
    77a8:	4798      	blx	r3
    77aa:	6130      	str	r0, [r6, #16]
    77ac:	e7a2      	b.n	76f4 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    77ae:	2001      	movs	r0, #1
    77b0:	e786      	b.n	76c0 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    77b2:	2001      	movs	r0, #1
    77b4:	e784      	b.n	76c0 <dir_next+0x18>
    77b6:	46c0      	nop			; (mov r8, r8)
    77b8:	00007291 	.word	0x00007291
    77bc:	0000756d 	.word	0x0000756d
    77c0:	000071f1 	.word	0x000071f1
    77c4:	00006d25 	.word	0x00006d25
    77c8:	00006d37 	.word	0x00006d37

000077cc <dir_find>:
{
    77cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    77ce:	46de      	mov	lr, fp
    77d0:	4657      	mov	r7, sl
    77d2:	464e      	mov	r6, r9
    77d4:	4645      	mov	r5, r8
    77d6:	b5e0      	push	{r5, r6, r7, lr}
    77d8:	b083      	sub	sp, #12
    77da:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    77dc:	2100      	movs	r1, #0
    77de:	4b5a      	ldr	r3, [pc, #360]	; (7948 <dir_find+0x17c>)
    77e0:	4798      	blx	r3
    77e2:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    77e4:	d000      	beq.n	77e8 <dir_find+0x1c>
    77e6:	e09e      	b.n	7926 <dir_find+0x15a>
    77e8:	23ff      	movs	r3, #255	; 0xff
    77ea:	4699      	mov	r9, r3
    77ec:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    77ee:	4b57      	ldr	r3, [pc, #348]	; (794c <dir_find+0x180>)
    77f0:	469b      	mov	fp, r3
    77f2:	e01b      	b.n	782c <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    77f4:	2b0f      	cmp	r3, #15
    77f6:	d030      	beq.n	785a <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    77f8:	4653      	mov	r3, sl
    77fa:	2b00      	cmp	r3, #0
    77fc:	d105      	bne.n	780a <dir_find+0x3e>
    77fe:	0020      	movs	r0, r4
    7800:	4b53      	ldr	r3, [pc, #332]	; (7950 <dir_find+0x184>)
    7802:	4798      	blx	r3
    7804:	4581      	cmp	r9, r0
    7806:	d100      	bne.n	780a <dir_find+0x3e>
    7808:	e08d      	b.n	7926 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    780a:	2301      	movs	r3, #1
    780c:	425b      	negs	r3, r3
    780e:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    7810:	69a8      	ldr	r0, [r5, #24]
    7812:	7ac3      	ldrb	r3, [r0, #11]
    7814:	07db      	lsls	r3, r3, #31
    7816:	d400      	bmi.n	781a <dir_find+0x4e>
    7818:	e07d      	b.n	7916 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    781a:	23ff      	movs	r3, #255	; 0xff
    781c:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    781e:	2100      	movs	r1, #0
    7820:	0028      	movs	r0, r5
    7822:	4b4c      	ldr	r3, [pc, #304]	; (7954 <dir_find+0x188>)
    7824:	4798      	blx	r3
    7826:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    7828:	d000      	beq.n	782c <dir_find+0x60>
    782a:	e07c      	b.n	7926 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    782c:	6929      	ldr	r1, [r5, #16]
    782e:	6828      	ldr	r0, [r5, #0]
    7830:	47d8      	blx	fp
    7832:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    7834:	d177      	bne.n	7926 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    7836:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    7838:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    783a:	2e00      	cmp	r6, #0
    783c:	d100      	bne.n	7840 <dir_find+0x74>
    783e:	e080      	b.n	7942 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    7840:	7ae2      	ldrb	r2, [r4, #11]
    7842:	233f      	movs	r3, #63	; 0x3f
    7844:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    7846:	2ee5      	cmp	r6, #229	; 0xe5
    7848:	d100      	bne.n	784c <dir_find+0x80>
    784a:	e077      	b.n	793c <dir_find+0x170>
    784c:	0712      	lsls	r2, r2, #28
    784e:	d5d1      	bpl.n	77f4 <dir_find+0x28>
    7850:	2b0f      	cmp	r3, #15
    7852:	d002      	beq.n	785a <dir_find+0x8e>
			ord = 0xFF;
    7854:	23ff      	movs	r3, #255	; 0xff
    7856:	469a      	mov	sl, r3
    7858:	e7e1      	b.n	781e <dir_find+0x52>
				if (dj->lfn) {
    785a:	69ef      	ldr	r7, [r5, #28]
    785c:	2f00      	cmp	r7, #0
    785e:	d0de      	beq.n	781e <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    7860:	0673      	lsls	r3, r6, #25
    7862:	d518      	bpl.n	7896 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    7864:	7b63      	ldrb	r3, [r4, #13]
    7866:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    7868:	2340      	movs	r3, #64	; 0x40
    786a:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    786c:	88eb      	ldrh	r3, [r5, #6]
    786e:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    7870:	7b63      	ldrb	r3, [r4, #13]
    7872:	9300      	str	r3, [sp, #0]
    7874:	22ff      	movs	r2, #255	; 0xff
    7876:	4692      	mov	sl, r2
    7878:	454b      	cmp	r3, r9
    787a:	d1d0      	bne.n	781e <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    787c:	7823      	ldrb	r3, [r4, #0]
    787e:	3abf      	subs	r2, #191	; 0xbf
    7880:	4393      	bics	r3, r2
    7882:	3b01      	subs	r3, #1
    7884:	005a      	lsls	r2, r3, #1
    7886:	18d2      	adds	r2, r2, r3
    7888:	0092      	lsls	r2, r2, #2
    788a:	4692      	mov	sl, r2
    788c:	449a      	add	sl, r3
	s = 0; wc = 1;
    788e:	2201      	movs	r2, #1
    7890:	2300      	movs	r3, #0
    7892:	4699      	mov	r9, r3
    7894:	e01d      	b.n	78d2 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    7896:	45b2      	cmp	sl, r6
    7898:	d0ea      	beq.n	7870 <dir_find+0xa4>
    789a:	23ff      	movs	r3, #255	; 0xff
    789c:	469a      	mov	sl, r3
    789e:	e7be      	b.n	781e <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    78a0:	4b2d      	ldr	r3, [pc, #180]	; (7958 <dir_find+0x18c>)
    78a2:	4798      	blx	r3
    78a4:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    78a6:	4653      	mov	r3, sl
    78a8:	2bfe      	cmp	r3, #254	; 0xfe
    78aa:	d81f      	bhi.n	78ec <dir_find+0x120>
    78ac:	2301      	movs	r3, #1
    78ae:	4453      	add	r3, sl
    78b0:	4698      	mov	r8, r3
    78b2:	4653      	mov	r3, sl
    78b4:	005b      	lsls	r3, r3, #1
    78b6:	5bd8      	ldrh	r0, [r3, r7]
    78b8:	4b27      	ldr	r3, [pc, #156]	; (7958 <dir_find+0x18c>)
    78ba:	4798      	blx	r3
    78bc:	0002      	movs	r2, r0
    78be:	9b01      	ldr	r3, [sp, #4]
    78c0:	4283      	cmp	r3, r0
    78c2:	d113      	bne.n	78ec <dir_find+0x120>
    78c4:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    78c6:	2301      	movs	r3, #1
    78c8:	469c      	mov	ip, r3
    78ca:	44e1      	add	r9, ip
    78cc:	464b      	mov	r3, r9
    78ce:	2b0d      	cmp	r3, #13
    78d0:	d011      	beq.n	78f6 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    78d2:	4b22      	ldr	r3, [pc, #136]	; (795c <dir_find+0x190>)
    78d4:	4649      	mov	r1, r9
    78d6:	5cc9      	ldrb	r1, [r1, r3]
    78d8:	1863      	adds	r3, r4, r1
    78da:	785b      	ldrb	r3, [r3, #1]
    78dc:	021b      	lsls	r3, r3, #8
    78de:	5c60      	ldrb	r0, [r4, r1]
    78e0:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    78e2:	2a00      	cmp	r2, #0
    78e4:	d1dc      	bne.n	78a0 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    78e6:	4b1e      	ldr	r3, [pc, #120]	; (7960 <dir_find+0x194>)
    78e8:	4298      	cmp	r0, r3
    78ea:	d0ec      	beq.n	78c6 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    78ec:	9b00      	ldr	r3, [sp, #0]
    78ee:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    78f0:	23ff      	movs	r3, #255	; 0xff
    78f2:	469a      	mov	sl, r3
    78f4:	e793      	b.n	781e <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    78f6:	7823      	ldrb	r3, [r4, #0]
    78f8:	065b      	lsls	r3, r3, #25
    78fa:	d506      	bpl.n	790a <dir_find+0x13e>
    78fc:	2a00      	cmp	r2, #0
    78fe:	d004      	beq.n	790a <dir_find+0x13e>
    7900:	4653      	mov	r3, sl
    7902:	005b      	lsls	r3, r3, #1
    7904:	5bdb      	ldrh	r3, [r3, r7]
    7906:	2b00      	cmp	r3, #0
    7908:	d1f0      	bne.n	78ec <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    790a:	3e01      	subs	r6, #1
    790c:	b2f3      	uxtb	r3, r6
    790e:	469a      	mov	sl, r3
    7910:	9b00      	ldr	r3, [sp, #0]
    7912:	4699      	mov	r9, r3
    7914:	e783      	b.n	781e <dir_find+0x52>
    7916:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    7918:	5ce1      	ldrb	r1, [r4, r3]
    791a:	5cc2      	ldrb	r2, [r0, r3]
    791c:	4291      	cmp	r1, r2
    791e:	d10a      	bne.n	7936 <dir_find+0x16a>
    7920:	3301      	adds	r3, #1
    7922:	2b0b      	cmp	r3, #11
    7924:	d1f8      	bne.n	7918 <dir_find+0x14c>
}
    7926:	0038      	movs	r0, r7
    7928:	b003      	add	sp, #12
    792a:	bc3c      	pop	{r2, r3, r4, r5}
    792c:	4690      	mov	r8, r2
    792e:	4699      	mov	r9, r3
    7930:	46a2      	mov	sl, r4
    7932:	46ab      	mov	fp, r5
    7934:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    7936:	23ff      	movs	r3, #255	; 0xff
    7938:	469a      	mov	sl, r3
    793a:	e770      	b.n	781e <dir_find+0x52>
			ord = 0xFF;
    793c:	23ff      	movs	r3, #255	; 0xff
    793e:	469a      	mov	sl, r3
    7940:	e76d      	b.n	781e <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    7942:	2704      	movs	r7, #4
    7944:	e7ef      	b.n	7926 <dir_find+0x15a>
    7946:	46c0      	nop			; (mov r8, r8)
    7948:	0000738d 	.word	0x0000738d
    794c:	000071f1 	.word	0x000071f1
    7950:	00006d4f 	.word	0x00006d4f
    7954:	000076a9 	.word	0x000076a9
    7958:	0000855d 	.word	0x0000855d
    795c:	0000e4a4 	.word	0x0000e4a4
    7960:	0000ffff 	.word	0x0000ffff

00007964 <dir_register>:
{
    7964:	b5f0      	push	{r4, r5, r6, r7, lr}
    7966:	46de      	mov	lr, fp
    7968:	4657      	mov	r7, sl
    796a:	464e      	mov	r6, r9
    796c:	4645      	mov	r5, r8
    796e:	b5e0      	push	{r5, r6, r7, lr}
    7970:	b089      	sub	sp, #36	; 0x24
    7972:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    7974:	6987      	ldr	r7, [r0, #24]
    7976:	69c3      	ldr	r3, [r0, #28]
    7978:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    797a:	ad05      	add	r5, sp, #20
    797c:	220c      	movs	r2, #12
    797e:	0039      	movs	r1, r7
    7980:	0028      	movs	r0, r5
    7982:	4ba7      	ldr	r3, [pc, #668]	; (7c20 <dir_register+0x2bc>)
    7984:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    7986:	7aeb      	ldrb	r3, [r5, #11]
    7988:	07db      	lsls	r3, r3, #31
    798a:	d400      	bmi.n	798e <dir_register+0x2a>
    798c:	e070      	b.n	7a70 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    798e:	2300      	movs	r3, #0
    7990:	72fb      	strb	r3, [r7, #11]
    7992:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    7994:	220b      	movs	r2, #11
    7996:	a905      	add	r1, sp, #20
    7998:	0038      	movs	r0, r7
    799a:	4ba1      	ldr	r3, [pc, #644]	; (7c20 <dir_register+0x2bc>)
    799c:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    799e:	2301      	movs	r3, #1
		ns[i--] = c;
    79a0:	ad03      	add	r5, sp, #12
    79a2:	001e      	movs	r6, r3
    79a4:	46a0      	mov	r8, r4
    79a6:	e049      	b.n	7a3c <dir_register+0xd8>
    79a8:	3801      	subs	r0, #1
    79aa:	1829      	adds	r1, r5, r0
    79ac:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    79ae:	091b      	lsrs	r3, r3, #4
    79b0:	b29b      	uxth	r3, r3
	} while (seq);
    79b2:	2b00      	cmp	r3, #0
    79b4:	d007      	beq.n	79c6 <dir_register+0x62>
		c = (seq % 16) + '0';
    79b6:	0021      	movs	r1, r4
    79b8:	4019      	ands	r1, r3
    79ba:	000a      	movs	r2, r1
    79bc:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    79be:	2a39      	cmp	r2, #57	; 0x39
    79c0:	d9f2      	bls.n	79a8 <dir_register+0x44>
    79c2:	3207      	adds	r2, #7
    79c4:	e7f0      	b.n	79a8 <dir_register+0x44>
	ns[i] = '~';
    79c6:	337e      	adds	r3, #126	; 0x7e
    79c8:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    79ca:	2800      	cmp	r0, #0
    79cc:	d00a      	beq.n	79e4 <dir_register+0x80>
    79ce:	783b      	ldrb	r3, [r7, #0]
    79d0:	2b20      	cmp	r3, #32
    79d2:	d009      	beq.n	79e8 <dir_register+0x84>
    79d4:	2300      	movs	r3, #0
    79d6:	3301      	adds	r3, #1
    79d8:	4298      	cmp	r0, r3
    79da:	d007      	beq.n	79ec <dir_register+0x88>
    79dc:	5cfa      	ldrb	r2, [r7, r3]
    79de:	2a20      	cmp	r2, #32
    79e0:	d1f9      	bne.n	79d6 <dir_register+0x72>
    79e2:	e009      	b.n	79f8 <dir_register+0x94>
    79e4:	0003      	movs	r3, r0
    79e6:	e007      	b.n	79f8 <dir_register+0x94>
    79e8:	2300      	movs	r3, #0
    79ea:	e005      	b.n	79f8 <dir_register+0x94>
    79ec:	0003      	movs	r3, r0
    79ee:	e003      	b.n	79f8 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    79f0:	54fa      	strb	r2, [r7, r3]
    79f2:	3301      	adds	r3, #1
	} while (j < 8);
    79f4:	2b07      	cmp	r3, #7
    79f6:	d805      	bhi.n	7a04 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    79f8:	2220      	movs	r2, #32
    79fa:	2807      	cmp	r0, #7
    79fc:	d8f8      	bhi.n	79f0 <dir_register+0x8c>
    79fe:	5c2a      	ldrb	r2, [r5, r0]
    7a00:	3001      	adds	r0, #1
    7a02:	e7f5      	b.n	79f0 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    7a04:	4640      	mov	r0, r8
    7a06:	4b87      	ldr	r3, [pc, #540]	; (7c24 <dir_register+0x2c0>)
    7a08:	4798      	blx	r3
			if (res != FR_OK) break;
    7a0a:	2800      	cmp	r0, #0
    7a0c:	d11c      	bne.n	7a48 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    7a0e:	3601      	adds	r6, #1
    7a10:	b2b6      	uxth	r6, r6
    7a12:	2e64      	cmp	r6, #100	; 0x64
    7a14:	d015      	beq.n	7a42 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    7a16:	220b      	movs	r2, #11
    7a18:	a905      	add	r1, sp, #20
    7a1a:	0038      	movs	r0, r7
    7a1c:	4b80      	ldr	r3, [pc, #512]	; (7c20 <dir_register+0x2bc>)
    7a1e:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    7a20:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    7a22:	2e05      	cmp	r6, #5
    7a24:	d90a      	bls.n	7a3c <dir_register+0xd8>
    7a26:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    7a28:	085a      	lsrs	r2, r3, #1
    7a2a:	03db      	lsls	r3, r3, #15
    7a2c:	4313      	orrs	r3, r2
    7a2e:	880a      	ldrh	r2, [r1, #0]
    7a30:	189b      	adds	r3, r3, r2
    7a32:	b29b      	uxth	r3, r3
    7a34:	3102      	adds	r1, #2
    7a36:	880a      	ldrh	r2, [r1, #0]
    7a38:	2a00      	cmp	r2, #0
    7a3a:	d1f5      	bne.n	7a28 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    7a3c:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    7a3e:	240f      	movs	r4, #15
    7a40:	e7b9      	b.n	79b6 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    7a42:	2307      	movs	r3, #7
    7a44:	4698      	mov	r8, r3
    7a46:	e006      	b.n	7a56 <dir_register+0xf2>
    7a48:	4644      	mov	r4, r8
    7a4a:	4680      	mov	r8, r0
    7a4c:	2e64      	cmp	r6, #100	; 0x64
    7a4e:	d100      	bne.n	7a52 <dir_register+0xee>
    7a50:	e0a5      	b.n	7b9e <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    7a52:	2804      	cmp	r0, #4
    7a54:	d007      	beq.n	7a66 <dir_register+0x102>
}
    7a56:	4640      	mov	r0, r8
    7a58:	b009      	add	sp, #36	; 0x24
    7a5a:	bc3c      	pop	{r2, r3, r4, r5}
    7a5c:	4690      	mov	r8, r2
    7a5e:	4699      	mov	r9, r3
    7a60:	46a2      	mov	sl, r4
    7a62:	46ab      	mov	fp, r5
    7a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    7a66:	ab05      	add	r3, sp, #20
    7a68:	7adb      	ldrb	r3, [r3, #11]
    7a6a:	72fb      	strb	r3, [r7, #11]
    7a6c:	4653      	mov	r3, sl
    7a6e:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    7a70:	ab05      	add	r3, sp, #20
    7a72:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    7a74:	2201      	movs	r2, #1
    7a76:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    7a78:	079b      	lsls	r3, r3, #30
    7a7a:	d511      	bpl.n	7aa0 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    7a7c:	4653      	mov	r3, sl
    7a7e:	881b      	ldrh	r3, [r3, #0]
    7a80:	2b00      	cmp	r3, #0
    7a82:	d01b      	beq.n	7abc <dir_register+0x158>
    7a84:	2000      	movs	r0, #0
    7a86:	4652      	mov	r2, sl
    7a88:	3001      	adds	r0, #1
    7a8a:	b280      	uxth	r0, r0
    7a8c:	0043      	lsls	r3, r0, #1
    7a8e:	5a9b      	ldrh	r3, [r3, r2]
    7a90:	2b00      	cmp	r3, #0
    7a92:	d1f9      	bne.n	7a88 <dir_register+0x124>
		ne = (ne + 25) / 13;
    7a94:	3019      	adds	r0, #25
    7a96:	210d      	movs	r1, #13
    7a98:	4b63      	ldr	r3, [pc, #396]	; (7c28 <dir_register+0x2c4>)
    7a9a:	4798      	blx	r3
    7a9c:	b283      	uxth	r3, r0
    7a9e:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    7aa0:	2100      	movs	r1, #0
    7aa2:	0020      	movs	r0, r4
    7aa4:	4b61      	ldr	r3, [pc, #388]	; (7c2c <dir_register+0x2c8>)
    7aa6:	4798      	blx	r3
    7aa8:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    7aaa:	2800      	cmp	r0, #0
    7aac:	d1d3      	bne.n	7a56 <dir_register+0xf2>
    7aae:	4682      	mov	sl, r0
    7ab0:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    7ab2:	4f5f      	ldr	r7, [pc, #380]	; (7c30 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    7ab4:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    7ab6:	4b5f      	ldr	r3, [pc, #380]	; (7c34 <dir_register+0x2d0>)
    7ab8:	4699      	mov	r9, r3
    7aba:	e00b      	b.n	7ad4 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    7abc:	2000      	movs	r0, #0
    7abe:	e7e9      	b.n	7a94 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    7ac0:	1c6b      	adds	r3, r5, #1
    7ac2:	b29b      	uxth	r3, r3
    7ac4:	459b      	cmp	fp, r3
    7ac6:	d06d      	beq.n	7ba4 <dir_register+0x240>
    7ac8:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    7aca:	2101      	movs	r1, #1
    7acc:	0020      	movs	r0, r4
    7ace:	47c8      	blx	r9
	} while (res == FR_OK);
    7ad0:	2800      	cmp	r0, #0
    7ad2:	d112      	bne.n	7afa <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    7ad4:	6921      	ldr	r1, [r4, #16]
    7ad6:	6820      	ldr	r0, [r4, #0]
    7ad8:	47b8      	blx	r7
		if (res != FR_OK) break;
    7ada:	2800      	cmp	r0, #0
    7adc:	d000      	beq.n	7ae0 <dir_register+0x17c>
    7ade:	e098      	b.n	7c12 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    7ae0:	6963      	ldr	r3, [r4, #20]
    7ae2:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    7ae4:	2be5      	cmp	r3, #229	; 0xe5
    7ae6:	d001      	beq.n	7aec <dir_register+0x188>
    7ae8:	2b00      	cmp	r3, #0
    7aea:	d104      	bne.n	7af6 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    7aec:	2d00      	cmp	r5, #0
    7aee:	d1e7      	bne.n	7ac0 <dir_register+0x15c>
    7af0:	88e3      	ldrh	r3, [r4, #6]
    7af2:	469a      	mov	sl, r3
    7af4:	e7e4      	b.n	7ac0 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    7af6:	0035      	movs	r5, r6
    7af8:	e7e7      	b.n	7aca <dir_register+0x166>
    7afa:	4680      	mov	r8, r0
    7afc:	e7ab      	b.n	7a56 <dir_register+0xf2>
		res = dir_sdi(dj, is);
    7afe:	4651      	mov	r1, sl
    7b00:	0020      	movs	r0, r4
    7b02:	4b4a      	ldr	r3, [pc, #296]	; (7c2c <dir_register+0x2c8>)
    7b04:	4798      	blx	r3
    7b06:	4680      	mov	r8, r0
		if (res == FR_OK) {
    7b08:	2800      	cmp	r0, #0
    7b0a:	d1a4      	bne.n	7a56 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    7b0c:	69a0      	ldr	r0, [r4, #24]
    7b0e:	4b4a      	ldr	r3, [pc, #296]	; (7c38 <dir_register+0x2d4>)
    7b10:	4798      	blx	r3
    7b12:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    7b14:	46a8      	mov	r8, r5
    7b16:	e01f      	b.n	7b58 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7b18:	0022      	movs	r2, r4
    7b1a:	e067      	b.n	7bec <dir_register+0x288>
    7b1c:	465e      	mov	r6, fp
    7b1e:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    7b20:	4946      	ldr	r1, [pc, #280]	; (7c3c <dir_register+0x2d8>)
    7b22:	428b      	cmp	r3, r1
    7b24:	d003      	beq.n	7b2e <dir_register+0x1ca>
    7b26:	0052      	lsls	r2, r2, #1
    7b28:	5b93      	ldrh	r3, [r2, r6]
    7b2a:	2b00      	cmp	r3, #0
    7b2c:	d103      	bne.n	7b36 <dir_register+0x1d2>
    7b2e:	2340      	movs	r3, #64	; 0x40
    7b30:	464a      	mov	r2, r9
    7b32:	431a      	orrs	r2, r3
    7b34:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    7b36:	464b      	mov	r3, r9
    7b38:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    7b3a:	2301      	movs	r3, #1
    7b3c:	6822      	ldr	r2, [r4, #0]
    7b3e:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    7b40:	2100      	movs	r1, #0
    7b42:	0020      	movs	r0, r4
    7b44:	4b3b      	ldr	r3, [pc, #236]	; (7c34 <dir_register+0x2d0>)
    7b46:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    7b48:	2800      	cmp	r0, #0
    7b4a:	d166      	bne.n	7c1a <dir_register+0x2b6>
    7b4c:	4645      	mov	r5, r8
    7b4e:	3d01      	subs	r5, #1
    7b50:	b2ab      	uxth	r3, r5
    7b52:	4698      	mov	r8, r3
    7b54:	2b00      	cmp	r3, #0
    7b56:	d027      	beq.n	7ba8 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    7b58:	6921      	ldr	r1, [r4, #16]
    7b5a:	6820      	ldr	r0, [r4, #0]
    7b5c:	4b34      	ldr	r3, [pc, #208]	; (7c30 <dir_register+0x2cc>)
    7b5e:	4798      	blx	r3
				if (res != FR_OK) break;
    7b60:	2800      	cmp	r0, #0
    7b62:	d158      	bne.n	7c16 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    7b64:	69e6      	ldr	r6, [r4, #28]
    7b66:	6960      	ldr	r0, [r4, #20]
    7b68:	4643      	mov	r3, r8
    7b6a:	466a      	mov	r2, sp
    7b6c:	70d3      	strb	r3, [r2, #3]
    7b6e:	78d3      	ldrb	r3, [r2, #3]
    7b70:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    7b72:	7913      	ldrb	r3, [r2, #4]
    7b74:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    7b76:	230f      	movs	r3, #15
    7b78:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    7b7a:	2300      	movs	r3, #0
    7b7c:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    7b7e:	7683      	strb	r3, [r0, #26]
    7b80:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    7b82:	464b      	mov	r3, r9
    7b84:	3b01      	subs	r3, #1
    7b86:	005a      	lsls	r2, r3, #1
    7b88:	18d2      	adds	r2, r2, r3
    7b8a:	0092      	lsls	r2, r2, #2
    7b8c:	18d2      	adds	r2, r2, r3
    7b8e:	492c      	ldr	r1, [pc, #176]	; (7c40 <dir_register+0x2dc>)
    7b90:	000d      	movs	r5, r1
    7b92:	350d      	adds	r5, #13
	s = wc = 0;
    7b94:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7b96:	4f29      	ldr	r7, [pc, #164]	; (7c3c <dir_register+0x2d8>)
    7b98:	46b3      	mov	fp, r6
    7b9a:	46a4      	mov	ip, r4
    7b9c:	e029      	b.n	7bf2 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    7b9e:	2307      	movs	r3, #7
    7ba0:	4698      	mov	r8, r3
    7ba2:	e758      	b.n	7a56 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    7ba4:	2b01      	cmp	r3, #1
    7ba6:	d8aa      	bhi.n	7afe <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    7ba8:	6921      	ldr	r1, [r4, #16]
    7baa:	6820      	ldr	r0, [r4, #0]
    7bac:	4b20      	ldr	r3, [pc, #128]	; (7c30 <dir_register+0x2cc>)
    7bae:	4798      	blx	r3
    7bb0:	4680      	mov	r8, r0
		if (res == FR_OK) {
    7bb2:	2800      	cmp	r0, #0
    7bb4:	d000      	beq.n	7bb8 <dir_register+0x254>
    7bb6:	e74e      	b.n	7a56 <dir_register+0xf2>
			dir = dj->dir;
    7bb8:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    7bba:	2220      	movs	r2, #32
    7bbc:	2100      	movs	r1, #0
    7bbe:	0028      	movs	r0, r5
    7bc0:	4b20      	ldr	r3, [pc, #128]	; (7c44 <dir_register+0x2e0>)
    7bc2:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    7bc4:	220b      	movs	r2, #11
    7bc6:	69a1      	ldr	r1, [r4, #24]
    7bc8:	0028      	movs	r0, r5
    7bca:	4b15      	ldr	r3, [pc, #84]	; (7c20 <dir_register+0x2bc>)
    7bcc:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    7bce:	69a3      	ldr	r3, [r4, #24]
    7bd0:	7ada      	ldrb	r2, [r3, #11]
    7bd2:	2318      	movs	r3, #24
    7bd4:	4013      	ands	r3, r2
    7bd6:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    7bd8:	6823      	ldr	r3, [r4, #0]
    7bda:	2201      	movs	r2, #1
    7bdc:	711a      	strb	r2, [r3, #4]
    7bde:	e73a      	b.n	7a56 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    7be0:	780c      	ldrb	r4, [r1, #0]
    7be2:	26ff      	movs	r6, #255	; 0xff
    7be4:	5506      	strb	r6, [r0, r4]
    7be6:	1904      	adds	r4, r0, r4
    7be8:	26ff      	movs	r6, #255	; 0xff
    7bea:	7066      	strb	r6, [r4, #1]
    7bec:	3101      	adds	r1, #1
	} while (++s < 13);
    7bee:	42a9      	cmp	r1, r5
    7bf0:	d094      	beq.n	7b1c <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7bf2:	42bb      	cmp	r3, r7
    7bf4:	d0f4      	beq.n	7be0 <dir_register+0x27c>
    7bf6:	1c54      	adds	r4, r2, #1
    7bf8:	0052      	lsls	r2, r2, #1
    7bfa:	465b      	mov	r3, fp
    7bfc:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    7bfe:	780a      	ldrb	r2, [r1, #0]
    7c00:	5483      	strb	r3, [r0, r2]
    7c02:	1882      	adds	r2, r0, r2
    7c04:	0a1e      	lsrs	r6, r3, #8
    7c06:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    7c08:	2b00      	cmp	r3, #0
    7c0a:	d185      	bne.n	7b18 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7c0c:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    7c0e:	003b      	movs	r3, r7
    7c10:	e7ec      	b.n	7bec <dir_register+0x288>
    7c12:	4680      	mov	r8, r0
    7c14:	e71f      	b.n	7a56 <dir_register+0xf2>
    7c16:	4680      	mov	r8, r0
    7c18:	e71d      	b.n	7a56 <dir_register+0xf2>
    7c1a:	4680      	mov	r8, r0
    7c1c:	e71b      	b.n	7a56 <dir_register+0xf2>
    7c1e:	46c0      	nop			; (mov r8, r8)
    7c20:	00006d11 	.word	0x00006d11
    7c24:	000077cd 	.word	0x000077cd
    7c28:	0000bad1 	.word	0x0000bad1
    7c2c:	0000738d 	.word	0x0000738d
    7c30:	000071f1 	.word	0x000071f1
    7c34:	000076a9 	.word	0x000076a9
    7c38:	00006d4f 	.word	0x00006d4f
    7c3c:	0000ffff 	.word	0x0000ffff
    7c40:	0000e4a4 	.word	0x0000e4a4
    7c44:	00006d25 	.word	0x00006d25

00007c48 <sync>:
{
    7c48:	b570      	push	{r4, r5, r6, lr}
    7c4a:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    7c4c:	2100      	movs	r1, #0
    7c4e:	4b2c      	ldr	r3, [pc, #176]	; (7d00 <sync+0xb8>)
    7c50:	4798      	blx	r3
	if (res == FR_OK) {
    7c52:	2800      	cmp	r0, #0
    7c54:	d10a      	bne.n	7c6c <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    7c56:	7823      	ldrb	r3, [r4, #0]
    7c58:	2b03      	cmp	r3, #3
    7c5a:	d008      	beq.n	7c6e <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    7c5c:	7860      	ldrb	r0, [r4, #1]
    7c5e:	2200      	movs	r2, #0
    7c60:	2100      	movs	r1, #0
    7c62:	4b28      	ldr	r3, [pc, #160]	; (7d04 <sync+0xbc>)
    7c64:	4798      	blx	r3
    7c66:	1e43      	subs	r3, r0, #1
    7c68:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    7c6a:	b2c0      	uxtb	r0, r0
}
    7c6c:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    7c6e:	7963      	ldrb	r3, [r4, #5]
    7c70:	2b00      	cmp	r3, #0
    7c72:	d0f3      	beq.n	7c5c <sync+0x14>
			fs->winsect = 0;
    7c74:	2600      	movs	r6, #0
    7c76:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    7c78:	0025      	movs	r5, r4
    7c7a:	3530      	adds	r5, #48	; 0x30
    7c7c:	2280      	movs	r2, #128	; 0x80
    7c7e:	0092      	lsls	r2, r2, #2
    7c80:	2100      	movs	r1, #0
    7c82:	0028      	movs	r0, r5
    7c84:	4b20      	ldr	r3, [pc, #128]	; (7d08 <sync+0xc0>)
    7c86:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    7c88:	2255      	movs	r2, #85	; 0x55
    7c8a:	4b20      	ldr	r3, [pc, #128]	; (7d0c <sync+0xc4>)
    7c8c:	54e2      	strb	r2, [r4, r3]
    7c8e:	3255      	adds	r2, #85	; 0x55
    7c90:	4b1f      	ldr	r3, [pc, #124]	; (7d10 <sync+0xc8>)
    7c92:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    7c94:	3bde      	subs	r3, #222	; 0xde
    7c96:	3bff      	subs	r3, #255	; 0xff
    7c98:	3a7a      	subs	r2, #122	; 0x7a
    7c9a:	54a3      	strb	r3, [r4, r2]
    7c9c:	3201      	adds	r2, #1
    7c9e:	54a3      	strb	r3, [r4, r2]
    7ca0:	330f      	adds	r3, #15
    7ca2:	3201      	adds	r2, #1
    7ca4:	54a3      	strb	r3, [r4, r2]
    7ca6:	320f      	adds	r2, #15
    7ca8:	2133      	movs	r1, #51	; 0x33
    7caa:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    7cac:	313f      	adds	r1, #63	; 0x3f
    7cae:	2085      	movs	r0, #133	; 0x85
    7cb0:	0080      	lsls	r0, r0, #2
    7cb2:	5421      	strb	r1, [r4, r0]
    7cb4:	4817      	ldr	r0, [pc, #92]	; (7d14 <sync+0xcc>)
    7cb6:	5421      	strb	r1, [r4, r0]
    7cb8:	4917      	ldr	r1, [pc, #92]	; (7d18 <sync+0xd0>)
    7cba:	5462      	strb	r2, [r4, r1]
    7cbc:	4a17      	ldr	r2, [pc, #92]	; (7d1c <sync+0xd4>)
    7cbe:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    7cc0:	6923      	ldr	r3, [r4, #16]
    7cc2:	3201      	adds	r2, #1
    7cc4:	54a3      	strb	r3, [r4, r2]
    7cc6:	0a19      	lsrs	r1, r3, #8
    7cc8:	4a15      	ldr	r2, [pc, #84]	; (7d20 <sync+0xd8>)
    7cca:	54a1      	strb	r1, [r4, r2]
    7ccc:	0c19      	lsrs	r1, r3, #16
    7cce:	4a15      	ldr	r2, [pc, #84]	; (7d24 <sync+0xdc>)
    7cd0:	54a1      	strb	r1, [r4, r2]
    7cd2:	0e1b      	lsrs	r3, r3, #24
    7cd4:	4a14      	ldr	r2, [pc, #80]	; (7d28 <sync+0xe0>)
    7cd6:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    7cd8:	68e3      	ldr	r3, [r4, #12]
    7cda:	3201      	adds	r2, #1
    7cdc:	54a3      	strb	r3, [r4, r2]
    7cde:	0a19      	lsrs	r1, r3, #8
    7ce0:	4a12      	ldr	r2, [pc, #72]	; (7d2c <sync+0xe4>)
    7ce2:	54a1      	strb	r1, [r4, r2]
    7ce4:	0c19      	lsrs	r1, r3, #16
    7ce6:	4a12      	ldr	r2, [pc, #72]	; (7d30 <sync+0xe8>)
    7ce8:	54a1      	strb	r1, [r4, r2]
    7cea:	0e1b      	lsrs	r3, r3, #24
    7cec:	4a11      	ldr	r2, [pc, #68]	; (7d34 <sync+0xec>)
    7cee:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    7cf0:	7860      	ldrb	r0, [r4, #1]
    7cf2:	2301      	movs	r3, #1
    7cf4:	6962      	ldr	r2, [r4, #20]
    7cf6:	0029      	movs	r1, r5
    7cf8:	4d0f      	ldr	r5, [pc, #60]	; (7d38 <sync+0xf0>)
    7cfa:	47a8      	blx	r5
			fs->fsi_flag = 0;
    7cfc:	7166      	strb	r6, [r4, #5]
    7cfe:	e7ad      	b.n	7c5c <sync+0x14>
    7d00:	000071f1 	.word	0x000071f1
    7d04:	00006c55 	.word	0x00006c55
    7d08:	00006d25 	.word	0x00006d25
    7d0c:	0000022e 	.word	0x0000022e
    7d10:	0000022f 	.word	0x0000022f
    7d14:	00000215 	.word	0x00000215
    7d18:	00000216 	.word	0x00000216
    7d1c:	00000217 	.word	0x00000217
    7d20:	00000219 	.word	0x00000219
    7d24:	0000021a 	.word	0x0000021a
    7d28:	0000021b 	.word	0x0000021b
    7d2c:	0000021d 	.word	0x0000021d
    7d30:	0000021e 	.word	0x0000021e
    7d34:	0000021f 	.word	0x0000021f
    7d38:	00006bd1 	.word	0x00006bd1

00007d3c <follow_path>:
{
    7d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d3e:	46de      	mov	lr, fp
    7d40:	4657      	mov	r7, sl
    7d42:	464e      	mov	r6, r9
    7d44:	4645      	mov	r5, r8
    7d46:	b5e0      	push	{r5, r6, r7, lr}
    7d48:	b083      	sub	sp, #12
    7d4a:	4682      	mov	sl, r0
    7d4c:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    7d4e:	780b      	ldrb	r3, [r1, #0]
    7d50:	2b2f      	cmp	r3, #47	; 0x2f
    7d52:	d00f      	beq.n	7d74 <follow_path+0x38>
    7d54:	2b5c      	cmp	r3, #92	; 0x5c
    7d56:	d00d      	beq.n	7d74 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    7d58:	2300      	movs	r3, #0
    7d5a:	4652      	mov	r2, sl
    7d5c:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    7d5e:	782b      	ldrb	r3, [r5, #0]
    7d60:	4657      	mov	r7, sl
    7d62:	2b1f      	cmp	r3, #31
    7d64:	d809      	bhi.n	7d7a <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    7d66:	2100      	movs	r1, #0
    7d68:	4650      	mov	r0, sl
    7d6a:	4bb2      	ldr	r3, [pc, #712]	; (8034 <follow_path+0x2f8>)
    7d6c:	4798      	blx	r3
		dj->dir = 0;
    7d6e:	2300      	movs	r3, #0
    7d70:	617b      	str	r3, [r7, #20]
    7d72:	e13a      	b.n	7fea <follow_path+0x2ae>
		path++;
    7d74:	3501      	adds	r5, #1
    7d76:	e7ef      	b.n	7d58 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    7d78:	3501      	adds	r5, #1
    7d7a:	7828      	ldrb	r0, [r5, #0]
    7d7c:	282f      	cmp	r0, #47	; 0x2f
    7d7e:	d0fb      	beq.n	7d78 <follow_path+0x3c>
    7d80:	285c      	cmp	r0, #92	; 0x5c
    7d82:	d0f9      	beq.n	7d78 <follow_path+0x3c>
	lfn = dj->lfn;
    7d84:	69fb      	ldr	r3, [r7, #28]
    7d86:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    7d88:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    7d8a:	281f      	cmp	r0, #31
    7d8c:	d800      	bhi.n	7d90 <follow_path+0x54>
    7d8e:	e13b      	b.n	8008 <follow_path+0x2cc>
    7d90:	282f      	cmp	r0, #47	; 0x2f
    7d92:	d100      	bne.n	7d96 <follow_path+0x5a>
    7d94:	e13b      	b.n	800e <follow_path+0x2d2>
    7d96:	285c      	cmp	r0, #92	; 0x5c
    7d98:	d100      	bne.n	7d9c <follow_path+0x60>
    7d9a:	e13b      	b.n	8014 <follow_path+0x2d8>
    7d9c:	1c6e      	adds	r6, r5, #1
    7d9e:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    7da0:	2380      	movs	r3, #128	; 0x80
    7da2:	005b      	lsls	r3, r3, #1
    7da4:	4698      	mov	r8, r3
    7da6:	46bb      	mov	fp, r7
    7da8:	002b      	movs	r3, r5
    7daa:	0025      	movs	r5, r4
    7dac:	0034      	movs	r4, r6
    7dae:	4656      	mov	r6, sl
    7db0:	4699      	mov	r9, r3
    7db2:	e011      	b.n	7dd8 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    7db4:	2b00      	cmp	r3, #0
    7db6:	d135      	bne.n	7e24 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    7db8:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    7dba:	1c6b      	adds	r3, r5, #1
    7dbc:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    7dbe:	281f      	cmp	r0, #31
    7dc0:	d91e      	bls.n	7e00 <follow_path+0xc4>
    7dc2:	282f      	cmp	r0, #47	; 0x2f
    7dc4:	d100      	bne.n	7dc8 <follow_path+0x8c>
    7dc6:	e128      	b.n	801a <follow_path+0x2de>
    7dc8:	285c      	cmp	r0, #92	; 0x5c
    7dca:	d100      	bne.n	7dce <follow_path+0x92>
    7dcc:	e142      	b.n	8054 <follow_path+0x318>
    7dce:	3602      	adds	r6, #2
    7dd0:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    7dd2:	4543      	cmp	r3, r8
    7dd4:	d026      	beq.n	7e24 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    7dd6:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    7dd8:	2101      	movs	r1, #1
    7dda:	4b97      	ldr	r3, [pc, #604]	; (8038 <follow_path+0x2fc>)
    7ddc:	4798      	blx	r3
    7dde:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    7de0:	d020      	beq.n	7e24 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    7de2:	287f      	cmp	r0, #127	; 0x7f
    7de4:	d8e8      	bhi.n	7db8 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    7de6:	2822      	cmp	r0, #34	; 0x22
    7de8:	d100      	bne.n	7dec <follow_path+0xb0>
    7dea:	e0fd      	b.n	7fe8 <follow_path+0x2ac>
    7dec:	232a      	movs	r3, #42	; 0x2a
    7dee:	4a93      	ldr	r2, [pc, #588]	; (803c <follow_path+0x300>)
    7df0:	b29f      	uxth	r7, r3
    7df2:	428f      	cmp	r7, r1
    7df4:	d0de      	beq.n	7db4 <follow_path+0x78>
    7df6:	3201      	adds	r2, #1
    7df8:	7813      	ldrb	r3, [r2, #0]
    7dfa:	2b00      	cmp	r3, #0
    7dfc:	d1f8      	bne.n	7df0 <follow_path+0xb4>
    7dfe:	e7db      	b.n	7db8 <follow_path+0x7c>
    7e00:	002c      	movs	r4, r5
    7e02:	465f      	mov	r7, fp
    7e04:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    7e06:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    7e08:	2604      	movs	r6, #4
    7e0a:	e10b      	b.n	8024 <follow_path+0x2e8>
		di--;
    7e0c:	3c01      	subs	r4, #1
    7e0e:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    7e10:	2c00      	cmp	r4, #0
    7e12:	d100      	bne.n	7e16 <follow_path+0xda>
    7e14:	e0e8      	b.n	7fe8 <follow_path+0x2ac>
		w = lfn[di-1];
    7e16:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    7e18:	2a20      	cmp	r2, #32
    7e1a:	d0f7      	beq.n	7e0c <follow_path+0xd0>
    7e1c:	2a2e      	cmp	r2, #46	; 0x2e
    7e1e:	d0f5      	beq.n	7e0c <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    7e20:	2c00      	cmp	r4, #0
    7e22:	d101      	bne.n	7e28 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    7e24:	2006      	movs	r0, #6
	return res;
    7e26:	e0e0      	b.n	7fea <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    7e28:	0063      	lsls	r3, r4, #1
    7e2a:	4698      	mov	r8, r3
    7e2c:	2300      	movs	r3, #0
    7e2e:	4652      	mov	r2, sl
    7e30:	4641      	mov	r1, r8
    7e32:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    7e34:	220b      	movs	r2, #11
    7e36:	2120      	movs	r1, #32
    7e38:	69b8      	ldr	r0, [r7, #24]
    7e3a:	4b81      	ldr	r3, [pc, #516]	; (8040 <follow_path+0x304>)
    7e3c:	4798      	blx	r3
    7e3e:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    7e40:	2300      	movs	r3, #0
    7e42:	e001      	b.n	7e48 <follow_path+0x10c>
    7e44:	3301      	adds	r3, #1
    7e46:	3202      	adds	r2, #2
    7e48:	8811      	ldrh	r1, [r2, #0]
    7e4a:	2920      	cmp	r1, #32
    7e4c:	d0fa      	beq.n	7e44 <follow_path+0x108>
    7e4e:	292e      	cmp	r1, #46	; 0x2e
    7e50:	d0f8      	beq.n	7e44 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    7e52:	2b00      	cmp	r3, #0
    7e54:	d001      	beq.n	7e5a <follow_path+0x11e>
    7e56:	2203      	movs	r2, #3
    7e58:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    7e5a:	4652      	mov	r2, sl
    7e5c:	4442      	add	r2, r8
    7e5e:	3a02      	subs	r2, #2
    7e60:	8812      	ldrh	r2, [r2, #0]
    7e62:	2a2e      	cmp	r2, #46	; 0x2e
    7e64:	d009      	beq.n	7e7a <follow_path+0x13e>
    7e66:	4642      	mov	r2, r8
    7e68:	3a04      	subs	r2, #4
    7e6a:	4452      	add	r2, sl
    7e6c:	3c01      	subs	r4, #1
    7e6e:	2c00      	cmp	r4, #0
    7e70:	d003      	beq.n	7e7a <follow_path+0x13e>
    7e72:	3a02      	subs	r2, #2
    7e74:	8851      	ldrh	r1, [r2, #2]
    7e76:	292e      	cmp	r1, #46	; 0x2e
    7e78:	d1f8      	bne.n	7e6c <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    7e7a:	2208      	movs	r2, #8
    7e7c:	9201      	str	r2, [sp, #4]
    7e7e:	2200      	movs	r2, #0
    7e80:	4693      	mov	fp, r2
    7e82:	4691      	mov	r9, r2
    7e84:	46a0      	mov	r8, r4
    7e86:	e006      	b.n	7e96 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    7e88:	4544      	cmp	r4, r8
    7e8a:	d100      	bne.n	7e8e <follow_path+0x152>
    7e8c:	e0e6      	b.n	805c <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    7e8e:	2303      	movs	r3, #3
    7e90:	431e      	orrs	r6, r3
    7e92:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    7e94:	0023      	movs	r3, r4
    7e96:	1c5c      	adds	r4, r3, #1
    7e98:	005b      	lsls	r3, r3, #1
    7e9a:	4652      	mov	r2, sl
    7e9c:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    7e9e:	2800      	cmp	r0, #0
    7ea0:	d02c      	beq.n	7efc <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    7ea2:	2820      	cmp	r0, #32
    7ea4:	d0f3      	beq.n	7e8e <follow_path+0x152>
    7ea6:	282e      	cmp	r0, #46	; 0x2e
    7ea8:	d0ee      	beq.n	7e88 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    7eaa:	9b01      	ldr	r3, [sp, #4]
    7eac:	459b      	cmp	fp, r3
    7eae:	d219      	bcs.n	7ee4 <follow_path+0x1a8>
    7eb0:	4544      	cmp	r4, r8
    7eb2:	d100      	bne.n	7eb6 <follow_path+0x17a>
    7eb4:	e0d2      	b.n	805c <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    7eb6:	287f      	cmp	r0, #127	; 0x7f
    7eb8:	d85e      	bhi.n	7f78 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    7eba:	282b      	cmp	r0, #43	; 0x2b
    7ebc:	d06e      	beq.n	7f9c <follow_path+0x260>
    7ebe:	232c      	movs	r3, #44	; 0x2c
    7ec0:	4a60      	ldr	r2, [pc, #384]	; (8044 <follow_path+0x308>)
    7ec2:	b299      	uxth	r1, r3
    7ec4:	4281      	cmp	r1, r0
    7ec6:	d067      	beq.n	7f98 <follow_path+0x25c>
    7ec8:	3201      	adds	r2, #1
    7eca:	7813      	ldrb	r3, [r2, #0]
    7ecc:	2b00      	cmp	r3, #0
    7ece:	d1f8      	bne.n	7ec2 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    7ed0:	0003      	movs	r3, r0
    7ed2:	3b41      	subs	r3, #65	; 0x41
    7ed4:	b29b      	uxth	r3, r3
    7ed6:	2b19      	cmp	r3, #25
    7ed8:	d86c      	bhi.n	7fb4 <follow_path+0x278>
					b |= 2;
    7eda:	2302      	movs	r3, #2
    7edc:	464a      	mov	r2, r9
    7ede:	431a      	orrs	r2, r3
    7ee0:	4691      	mov	r9, r2
    7ee2:	e05f      	b.n	7fa4 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    7ee4:	9b01      	ldr	r3, [sp, #4]
    7ee6:	2b0b      	cmp	r3, #11
    7ee8:	d03b      	beq.n	7f62 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    7eea:	4544      	cmp	r4, r8
    7eec:	d100      	bne.n	7ef0 <follow_path+0x1b4>
    7eee:	e0b9      	b.n	8064 <follow_path+0x328>
    7ef0:	2303      	movs	r3, #3
    7ef2:	431e      	orrs	r6, r3
    7ef4:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    7ef6:	4544      	cmp	r4, r8
    7ef8:	d800      	bhi.n	7efc <follow_path+0x1c0>
    7efa:	e0b3      	b.n	8064 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    7efc:	69bb      	ldr	r3, [r7, #24]
    7efe:	781a      	ldrb	r2, [r3, #0]
    7f00:	2ae5      	cmp	r2, #229	; 0xe5
    7f02:	d036      	beq.n	7f72 <follow_path+0x236>
	if (ni == 8) b <<= 2;
    7f04:	9b01      	ldr	r3, [sp, #4]
    7f06:	2b08      	cmp	r3, #8
    7f08:	d060      	beq.n	7fcc <follow_path+0x290>
    7f0a:	230c      	movs	r3, #12
    7f0c:	464a      	mov	r2, r9
    7f0e:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    7f10:	2b0c      	cmp	r3, #12
    7f12:	d060      	beq.n	7fd6 <follow_path+0x29a>
    7f14:	43d2      	mvns	r2, r2
    7f16:	0792      	lsls	r2, r2, #30
    7f18:	d05d      	beq.n	7fd6 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    7f1a:	07b2      	lsls	r2, r6, #30
    7f1c:	d406      	bmi.n	7f2c <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    7f1e:	2203      	movs	r2, #3
    7f20:	4649      	mov	r1, r9
    7f22:	400a      	ands	r2, r1
    7f24:	2a01      	cmp	r2, #1
    7f26:	d059      	beq.n	7fdc <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    7f28:	2b04      	cmp	r3, #4
    7f2a:	d05a      	beq.n	7fe2 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    7f2c:	69bb      	ldr	r3, [r7, #24]
    7f2e:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    7f30:	0038      	movs	r0, r7
    7f32:	4b45      	ldr	r3, [pc, #276]	; (8048 <follow_path+0x30c>)
    7f34:	4798      	blx	r3
			ns = *(dj->fn+NS);
    7f36:	69bb      	ldr	r3, [r7, #24]
    7f38:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    7f3a:	2800      	cmp	r0, #0
    7f3c:	d15c      	bne.n	7ff8 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    7f3e:	075b      	lsls	r3, r3, #29
    7f40:	d453      	bmi.n	7fea <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    7f42:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    7f44:	7ad3      	ldrb	r3, [r2, #11]
    7f46:	06db      	lsls	r3, r3, #27
    7f48:	d55c      	bpl.n	8004 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    7f4a:	7d51      	ldrb	r1, [r2, #21]
    7f4c:	0209      	lsls	r1, r1, #8
    7f4e:	7d13      	ldrb	r3, [r2, #20]
    7f50:	430b      	orrs	r3, r1
    7f52:	041b      	lsls	r3, r3, #16
    7f54:	7ed1      	ldrb	r1, [r2, #27]
    7f56:	0209      	lsls	r1, r1, #8
    7f58:	7e92      	ldrb	r2, [r2, #26]
    7f5a:	430a      	orrs	r2, r1
    7f5c:	4313      	orrs	r3, r2
    7f5e:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    7f60:	e70b      	b.n	7d7a <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    7f62:	2303      	movs	r3, #3
    7f64:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    7f66:	69bb      	ldr	r3, [r7, #24]
    7f68:	781a      	ldrb	r2, [r3, #0]
    7f6a:	2ae5      	cmp	r2, #229	; 0xe5
    7f6c:	d1cd      	bne.n	7f0a <follow_path+0x1ce>
    7f6e:	220b      	movs	r2, #11
    7f70:	9201      	str	r2, [sp, #4]
    7f72:	2205      	movs	r2, #5
    7f74:	701a      	strb	r2, [r3, #0]
    7f76:	e7c5      	b.n	7f04 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    7f78:	2100      	movs	r1, #0
    7f7a:	4b2f      	ldr	r3, [pc, #188]	; (8038 <follow_path+0x2fc>)
    7f7c:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    7f7e:	2800      	cmp	r0, #0
    7f80:	d100      	bne.n	7f84 <follow_path+0x248>
    7f82:	e079      	b.n	8078 <follow_path+0x33c>
    7f84:	4b31      	ldr	r3, [pc, #196]	; (804c <follow_path+0x310>)
    7f86:	469c      	mov	ip, r3
    7f88:	4460      	add	r0, ip
    7f8a:	3880      	subs	r0, #128	; 0x80
    7f8c:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    7f8e:	2302      	movs	r3, #2
    7f90:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    7f92:	2800      	cmp	r0, #0
    7f94:	d002      	beq.n	7f9c <follow_path+0x260>
    7f96:	e790      	b.n	7eba <follow_path+0x17e>
    7f98:	2b00      	cmp	r3, #0
    7f9a:	d099      	beq.n	7ed0 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    7f9c:	2303      	movs	r3, #3
    7f9e:	431e      	orrs	r6, r3
    7fa0:	b2f6      	uxtb	r6, r6
    7fa2:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    7fa4:	69bb      	ldr	r3, [r7, #24]
    7fa6:	465a      	mov	r2, fp
    7fa8:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    7faa:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    7fac:	2201      	movs	r2, #1
    7fae:	4694      	mov	ip, r2
    7fb0:	44e3      	add	fp, ip
    7fb2:	e770      	b.n	7e96 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    7fb4:	0003      	movs	r3, r0
    7fb6:	3b61      	subs	r3, #97	; 0x61
    7fb8:	b29b      	uxth	r3, r3
    7fba:	2b19      	cmp	r3, #25
    7fbc:	d8f2      	bhi.n	7fa4 <follow_path+0x268>
						b |= 1; w -= 0x20;
    7fbe:	2301      	movs	r3, #1
    7fc0:	464a      	mov	r2, r9
    7fc2:	431a      	orrs	r2, r3
    7fc4:	4691      	mov	r9, r2
    7fc6:	3820      	subs	r0, #32
    7fc8:	b280      	uxth	r0, r0
    7fca:	e7eb      	b.n	7fa4 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    7fcc:	464b      	mov	r3, r9
    7fce:	009b      	lsls	r3, r3, #2
    7fd0:	b2db      	uxtb	r3, r3
    7fd2:	4699      	mov	r9, r3
    7fd4:	e799      	b.n	7f0a <follow_path+0x1ce>
		cf |= NS_LFN;
    7fd6:	2202      	movs	r2, #2
    7fd8:	4316      	orrs	r6, r2
    7fda:	e79e      	b.n	7f1a <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    7fdc:	320f      	adds	r2, #15
    7fde:	4316      	orrs	r6, r2
    7fe0:	e7a2      	b.n	7f28 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    7fe2:	3304      	adds	r3, #4
    7fe4:	431e      	orrs	r6, r3
    7fe6:	e7a1      	b.n	7f2c <follow_path+0x1f0>
    7fe8:	2006      	movs	r0, #6
}
    7fea:	b003      	add	sp, #12
    7fec:	bc3c      	pop	{r2, r3, r4, r5}
    7fee:	4690      	mov	r8, r2
    7ff0:	4699      	mov	r9, r3
    7ff2:	46a2      	mov	sl, r4
    7ff4:	46ab      	mov	fp, r5
    7ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    7ff8:	2804      	cmp	r0, #4
    7ffa:	d1f6      	bne.n	7fea <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    7ffc:	075b      	lsls	r3, r3, #29
    7ffe:	d4f4      	bmi.n	7fea <follow_path+0x2ae>
    8000:	3001      	adds	r0, #1
    8002:	e7f2      	b.n	7fea <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    8004:	2005      	movs	r0, #5
    8006:	e7f0      	b.n	7fea <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    8008:	2301      	movs	r3, #1
	si = di = 0;
    800a:	2400      	movs	r4, #0
    800c:	e6fb      	b.n	7e06 <follow_path+0xca>
		w = p[si++];					/* Get a character */
    800e:	2301      	movs	r3, #1
	si = di = 0;
    8010:	2400      	movs	r4, #0
    8012:	e005      	b.n	8020 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    8014:	2301      	movs	r3, #1
	si = di = 0;
    8016:	2400      	movs	r4, #0
    8018:	e002      	b.n	8020 <follow_path+0x2e4>
    801a:	002c      	movs	r4, r5
    801c:	465f      	mov	r7, fp
    801e:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    8020:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    8022:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    8024:	2c00      	cmp	r4, #0
    8026:	d0df      	beq.n	7fe8 <follow_path+0x2ac>
    8028:	4b09      	ldr	r3, [pc, #36]	; (8050 <follow_path+0x314>)
    802a:	18e3      	adds	r3, r4, r3
    802c:	005b      	lsls	r3, r3, #1
    802e:	4453      	add	r3, sl
    8030:	e6f1      	b.n	7e16 <follow_path+0xda>
    8032:	46c0      	nop			; (mov r8, r8)
    8034:	0000738d 	.word	0x0000738d
    8038:	00008515 	.word	0x00008515
    803c:	0000e535 	.word	0x0000e535
    8040:	00006d25 	.word	0x00006d25
    8044:	0000e541 	.word	0x0000e541
    8048:	000077cd 	.word	0x000077cd
    804c:	0000e4b4 	.word	0x0000e4b4
    8050:	7fffffff 	.word	0x7fffffff
    8054:	002c      	movs	r4, r5
    8056:	465f      	mov	r7, fp
    8058:	464d      	mov	r5, r9
    805a:	e7e1      	b.n	8020 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    805c:	9b01      	ldr	r3, [sp, #4]
    805e:	2b0b      	cmp	r3, #11
    8060:	d100      	bne.n	8064 <follow_path+0x328>
    8062:	e77e      	b.n	7f62 <follow_path+0x226>
			b <<= 2; continue;
    8064:	464b      	mov	r3, r9
    8066:	009b      	lsls	r3, r3, #2
    8068:	b2db      	uxtb	r3, r3
    806a:	4699      	mov	r9, r3
    806c:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    806e:	220b      	movs	r2, #11
    8070:	9201      	str	r2, [sp, #4]
    8072:	3a03      	subs	r2, #3
    8074:	4693      	mov	fp, r2
    8076:	e70e      	b.n	7e96 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    8078:	2302      	movs	r3, #2
    807a:	431e      	orrs	r6, r3
    807c:	e78e      	b.n	7f9c <follow_path+0x260>
    807e:	46c0      	nop			; (mov r8, r8)

00008080 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    8080:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    8082:	2807      	cmp	r0, #7
    8084:	d901      	bls.n	808a <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    8086:	0018      	movs	r0, r3
    8088:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    808a:	0083      	lsls	r3, r0, #2
    808c:	4a07      	ldr	r2, [pc, #28]	; (80ac <f_mount+0x2c>)
    808e:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    8090:	2b00      	cmp	r3, #0
    8092:	d001      	beq.n	8098 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    8094:	2200      	movs	r2, #0
    8096:	701a      	strb	r2, [r3, #0]
	if (fs) {
    8098:	2900      	cmp	r1, #0
    809a:	d001      	beq.n	80a0 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    809c:	2300      	movs	r3, #0
    809e:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    80a0:	0080      	lsls	r0, r0, #2
    80a2:	4b02      	ldr	r3, [pc, #8]	; (80ac <f_mount+0x2c>)
    80a4:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    80a6:	2300      	movs	r3, #0
    80a8:	e7ed      	b.n	8086 <f_mount+0x6>
    80aa:	46c0      	nop			; (mov r8, r8)
    80ac:	2000041c 	.word	0x2000041c

000080b0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    80b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    80b2:	46c6      	mov	lr, r8
    80b4:	b500      	push	{lr}
    80b6:	4c59      	ldr	r4, [pc, #356]	; (821c <f_open+0x16c>)
    80b8:	44a5      	add	sp, r4
    80ba:	0005      	movs	r5, r0
    80bc:	9101      	str	r1, [sp, #4]
    80be:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    80c0:	2300      	movs	r3, #0
    80c2:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    80c4:	261f      	movs	r6, #31
    80c6:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    80c8:	221e      	movs	r2, #30
    80ca:	403a      	ands	r2, r7
    80cc:	a985      	add	r1, sp, #532	; 0x214
    80ce:	a801      	add	r0, sp, #4
    80d0:	4b53      	ldr	r3, [pc, #332]	; (8220 <f_open+0x170>)
    80d2:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    80d4:	ab82      	add	r3, sp, #520	; 0x208
    80d6:	938b      	str	r3, [sp, #556]	; 0x22c
    80d8:	ab02      	add	r3, sp, #8
    80da:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    80dc:	2800      	cmp	r0, #0
    80de:	d006      	beq.n	80ee <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    80e0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    80e2:	231c      	movs	r3, #28
    80e4:	423b      	tst	r3, r7
    80e6:	d145      	bne.n	8174 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    80e8:	2800      	cmp	r0, #0
    80ea:	d13d      	bne.n	8168 <f_open+0xb8>
    80ec:	e00c      	b.n	8108 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    80ee:	9901      	ldr	r1, [sp, #4]
    80f0:	a885      	add	r0, sp, #532	; 0x214
    80f2:	4b4c      	ldr	r3, [pc, #304]	; (8224 <f_open+0x174>)
    80f4:	4798      	blx	r3
	dir = dj.dir;
    80f6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    80f8:	2800      	cmp	r0, #0
    80fa:	d1f2      	bne.n	80e2 <f_open+0x32>
		if (!dir)	/* Current dir itself */
    80fc:	2c00      	cmp	r4, #0
    80fe:	d100      	bne.n	8102 <f_open+0x52>
    8100:	e086      	b.n	8210 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    8102:	231c      	movs	r3, #28
    8104:	423b      	tst	r3, r7
    8106:	d146      	bne.n	8196 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    8108:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    810a:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    810c:	06da      	lsls	r2, r3, #27
    810e:	d42b      	bmi.n	8168 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    8110:	07ba      	lsls	r2, r7, #30
    8112:	d502      	bpl.n	811a <f_open+0x6a>
					res = FR_DENIED;
    8114:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    8116:	07db      	lsls	r3, r3, #31
    8118:	d426      	bmi.n	8168 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    811a:	073b      	lsls	r3, r7, #28
    811c:	d501      	bpl.n	8122 <f_open+0x72>
			mode |= FA__WRITTEN;
    811e:	2320      	movs	r3, #32
    8120:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    8122:	9b85      	ldr	r3, [sp, #532]	; 0x214
    8124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8126:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    8128:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    812a:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    812c:	7d62      	ldrb	r2, [r4, #21]
    812e:	0212      	lsls	r2, r2, #8
    8130:	7d23      	ldrb	r3, [r4, #20]
    8132:	4313      	orrs	r3, r2
    8134:	041b      	lsls	r3, r3, #16
    8136:	7ee1      	ldrb	r1, [r4, #27]
    8138:	0209      	lsls	r1, r1, #8
    813a:	7ea2      	ldrb	r2, [r4, #26]
    813c:	430a      	orrs	r2, r1
    813e:	4313      	orrs	r3, r2
    8140:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    8142:	7fe3      	ldrb	r3, [r4, #31]
    8144:	061b      	lsls	r3, r3, #24
    8146:	7fa2      	ldrb	r2, [r4, #30]
    8148:	0412      	lsls	r2, r2, #16
    814a:	4313      	orrs	r3, r2
    814c:	7f22      	ldrb	r2, [r4, #28]
    814e:	4313      	orrs	r3, r2
    8150:	7f62      	ldrb	r2, [r4, #29]
    8152:	0212      	lsls	r2, r2, #8
    8154:	4313      	orrs	r3, r2
    8156:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    8158:	2300      	movs	r3, #0
    815a:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    815c:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    815e:	9b85      	ldr	r3, [sp, #532]	; 0x214
    8160:	602b      	str	r3, [r5, #0]
    8162:	88db      	ldrh	r3, [r3, #6]
    8164:	80ab      	strh	r3, [r5, #4]
    8166:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    8168:	238e      	movs	r3, #142	; 0x8e
    816a:	009b      	lsls	r3, r3, #2
    816c:	449d      	add	sp, r3
    816e:	bc04      	pop	{r2}
    8170:	4690      	mov	r8, r2
    8172:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    8174:	2804      	cmp	r0, #4
    8176:	d005      	beq.n	8184 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    8178:	2308      	movs	r3, #8
    817a:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    817c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    817e:	2800      	cmp	r0, #0
    8180:	d0d3      	beq.n	812a <f_open+0x7a>
    8182:	e7f1      	b.n	8168 <f_open+0xb8>
				res = dir_register(&dj);
    8184:	a885      	add	r0, sp, #532	; 0x214
    8186:	4b28      	ldr	r3, [pc, #160]	; (8228 <f_open+0x178>)
    8188:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    818a:	2308      	movs	r3, #8
    818c:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    818e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    8190:	2800      	cmp	r0, #0
    8192:	d008      	beq.n	81a6 <f_open+0xf6>
    8194:	e7e8      	b.n	8168 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    8196:	7ae3      	ldrb	r3, [r4, #11]
    8198:	2211      	movs	r2, #17
				res = FR_DENIED;
    819a:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    819c:	421a      	tst	r2, r3
    819e:	d1e3      	bne.n	8168 <f_open+0xb8>
					res = FR_EXIST;
    81a0:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    81a2:	077b      	lsls	r3, r7, #29
    81a4:	d4e0      	bmi.n	8168 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    81a6:	0733      	lsls	r3, r6, #28
    81a8:	d5bb      	bpl.n	8122 <f_open+0x72>
			dw = get_fattime();					/* Created time */
    81aa:	4b20      	ldr	r3, [pc, #128]	; (822c <f_open+0x17c>)
    81ac:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    81ae:	73a0      	strb	r0, [r4, #14]
    81b0:	0a03      	lsrs	r3, r0, #8
    81b2:	73e3      	strb	r3, [r4, #15]
    81b4:	0c03      	lsrs	r3, r0, #16
    81b6:	7423      	strb	r3, [r4, #16]
    81b8:	0e00      	lsrs	r0, r0, #24
    81ba:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    81bc:	2300      	movs	r3, #0
    81be:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    81c0:	7723      	strb	r3, [r4, #28]
    81c2:	7763      	strb	r3, [r4, #29]
    81c4:	77a3      	strb	r3, [r4, #30]
    81c6:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    81c8:	7d62      	ldrb	r2, [r4, #21]
    81ca:	0212      	lsls	r2, r2, #8
    81cc:	7d27      	ldrb	r7, [r4, #20]
    81ce:	4317      	orrs	r7, r2
    81d0:	043f      	lsls	r7, r7, #16
    81d2:	7ee1      	ldrb	r1, [r4, #27]
    81d4:	0209      	lsls	r1, r1, #8
    81d6:	7ea2      	ldrb	r2, [r4, #26]
    81d8:	430a      	orrs	r2, r1
    81da:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    81dc:	76a3      	strb	r3, [r4, #26]
    81de:	76e3      	strb	r3, [r4, #27]
    81e0:	7523      	strb	r3, [r4, #20]
    81e2:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    81e4:	9885      	ldr	r0, [sp, #532]	; 0x214
    81e6:	3301      	adds	r3, #1
    81e8:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    81ea:	2f00      	cmp	r7, #0
    81ec:	d097      	beq.n	811e <f_open+0x6e>
				dw = dj.fs->winsect;
    81ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    81f0:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    81f2:	0039      	movs	r1, r7
    81f4:	4b0e      	ldr	r3, [pc, #56]	; (8230 <f_open+0x180>)
    81f6:	4798      	blx	r3
				if (res == FR_OK) {
    81f8:	2800      	cmp	r0, #0
    81fa:	d1b5      	bne.n	8168 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    81fc:	9885      	ldr	r0, [sp, #532]	; 0x214
    81fe:	3f01      	subs	r7, #1
    8200:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    8202:	4641      	mov	r1, r8
    8204:	4b0b      	ldr	r3, [pc, #44]	; (8234 <f_open+0x184>)
    8206:	4798      	blx	r3
	if (res == FR_OK) {
    8208:	2800      	cmp	r0, #0
    820a:	d100      	bne.n	820e <f_open+0x15e>
    820c:	e787      	b.n	811e <f_open+0x6e>
    820e:	e7ab      	b.n	8168 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    8210:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    8212:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    8214:	423b      	tst	r3, r7
    8216:	d0b2      	beq.n	817e <f_open+0xce>
			res = FR_INVALID_NAME;
    8218:	2006      	movs	r0, #6
    821a:	e7ad      	b.n	8178 <f_open+0xc8>
    821c:	fffffdc8 	.word	0xfffffdc8
    8220:	00006e41 	.word	0x00006e41
    8224:	00007d3d 	.word	0x00007d3d
    8228:	00007965 	.word	0x00007965
    822c:	00006cc1 	.word	0x00006cc1
    8230:	00007631 	.word	0x00007631
    8234:	000071f1 	.word	0x000071f1

00008238 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    8238:	b5f0      	push	{r4, r5, r6, r7, lr}
    823a:	46de      	mov	lr, fp
    823c:	4657      	mov	r7, sl
    823e:	464e      	mov	r6, r9
    8240:	4645      	mov	r5, r8
    8242:	b5e0      	push	{r5, r6, r7, lr}
    8244:	b083      	sub	sp, #12
    8246:	0004      	movs	r4, r0
    8248:	000d      	movs	r5, r1
    824a:	0016      	movs	r6, r2
    824c:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    824e:	2300      	movs	r3, #0
    8250:	464a      	mov	r2, r9
    8252:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    8254:	8881      	ldrh	r1, [r0, #4]
    8256:	6800      	ldr	r0, [r0, #0]
    8258:	4b7f      	ldr	r3, [pc, #508]	; (8458 <f_write+0x220>)
    825a:	4798      	blx	r3
    825c:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    825e:	2800      	cmp	r0, #0
    8260:	d000      	beq.n	8264 <f_write+0x2c>
    8262:	e0f1      	b.n	8448 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    8264:	79a3      	ldrb	r3, [r4, #6]
    8266:	b25a      	sxtb	r2, r3
    8268:	2a00      	cmp	r2, #0
    826a:	da00      	bge.n	826e <f_write+0x36>
    826c:	e0ea      	b.n	8444 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    826e:	079b      	lsls	r3, r3, #30
    8270:	d402      	bmi.n	8278 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    8272:	2307      	movs	r3, #7
    8274:	9300      	str	r3, [sp, #0]
    8276:	e0e7      	b.n	8448 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    8278:	68e3      	ldr	r3, [r4, #12]
    827a:	199a      	adds	r2, r3, r6
    827c:	4293      	cmp	r3, r2
    827e:	d810      	bhi.n	82a2 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    8280:	2e00      	cmp	r6, #0
    8282:	d00e      	beq.n	82a2 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    8284:	002f      	movs	r7, r5
    8286:	e07b      	b.n	8380 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    8288:	2100      	movs	r1, #0
    828a:	4b74      	ldr	r3, [pc, #464]	; (845c <f_write+0x224>)
    828c:	4798      	blx	r3
    828e:	0003      	movs	r3, r0
    8290:	6120      	str	r0, [r4, #16]
    8292:	e003      	b.n	829c <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    8294:	6961      	ldr	r1, [r4, #20]
    8296:	4b71      	ldr	r3, [pc, #452]	; (845c <f_write+0x224>)
    8298:	4798      	blx	r3
    829a:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    829c:	2b00      	cmp	r3, #0
    829e:	d000      	beq.n	82a2 <f_write+0x6a>
    82a0:	e080      	b.n	83a4 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    82a2:	68a3      	ldr	r3, [r4, #8]
    82a4:	68e2      	ldr	r2, [r4, #12]
    82a6:	4293      	cmp	r3, r2
    82a8:	d900      	bls.n	82ac <f_write+0x74>
    82aa:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    82ac:	79a3      	ldrb	r3, [r4, #6]
    82ae:	2220      	movs	r2, #32
    82b0:	4313      	orrs	r3, r2
    82b2:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    82b4:	e0c8      	b.n	8448 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    82b6:	79a2      	ldrb	r2, [r4, #6]
    82b8:	3b81      	subs	r3, #129	; 0x81
    82ba:	4313      	orrs	r3, r2
    82bc:	71a3      	strb	r3, [r4, #6]
    82be:	2302      	movs	r3, #2
    82c0:	9300      	str	r3, [sp, #0]
    82c2:	e0c1      	b.n	8448 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    82c4:	79a2      	ldrb	r2, [r4, #6]
    82c6:	3b7f      	subs	r3, #127	; 0x7f
    82c8:	4313      	orrs	r3, r2
    82ca:	71a3      	strb	r3, [r4, #6]
    82cc:	2301      	movs	r3, #1
    82ce:	9300      	str	r3, [sp, #0]
    82d0:	e0ba      	b.n	8448 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    82d2:	2100      	movs	r1, #0
    82d4:	4b62      	ldr	r3, [pc, #392]	; (8460 <f_write+0x228>)
    82d6:	4798      	blx	r3
    82d8:	2800      	cmp	r0, #0
    82da:	d06d      	beq.n	83b8 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    82dc:	79a2      	ldrb	r2, [r4, #6]
    82de:	2380      	movs	r3, #128	; 0x80
    82e0:	425b      	negs	r3, r3
    82e2:	4313      	orrs	r3, r2
    82e4:	71a3      	strb	r3, [r4, #6]
    82e6:	2301      	movs	r3, #1
    82e8:	9300      	str	r3, [sp, #0]
    82ea:	e0ad      	b.n	8448 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    82ec:	79a2      	ldrb	r2, [r4, #6]
    82ee:	2380      	movs	r3, #128	; 0x80
    82f0:	425b      	negs	r3, r3
    82f2:	4313      	orrs	r3, r2
    82f4:	71a3      	strb	r3, [r4, #6]
    82f6:	2302      	movs	r3, #2
    82f8:	9300      	str	r3, [sp, #0]
    82fa:	e0a5      	b.n	8448 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    82fc:	79a2      	ldrb	r2, [r4, #6]
    82fe:	2380      	movs	r3, #128	; 0x80
    8300:	425b      	negs	r3, r3
    8302:	4313      	orrs	r3, r2
    8304:	71a3      	strb	r3, [r4, #6]
    8306:	2301      	movs	r3, #1
    8308:	9300      	str	r3, [sp, #0]
    830a:	e09d      	b.n	8448 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    830c:	0240      	lsls	r0, r0, #9
    830e:	1839      	adds	r1, r7, r0
    8310:	3330      	adds	r3, #48	; 0x30
    8312:	0018      	movs	r0, r3
    8314:	2280      	movs	r2, #128	; 0x80
    8316:	0092      	lsls	r2, r2, #2
    8318:	4b52      	ldr	r3, [pc, #328]	; (8464 <f_write+0x22c>)
    831a:	4798      	blx	r3
					fp->fs->wflag = 0;
    831c:	2300      	movs	r3, #0
    831e:	6822      	ldr	r2, [r4, #0]
    8320:	7113      	strb	r3, [r2, #4]
    8322:	e072      	b.n	840a <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    8324:	68a3      	ldr	r3, [r4, #8]
    8326:	68e2      	ldr	r2, [r4, #12]
    8328:	4293      	cmp	r3, r2
    832a:	d271      	bcs.n	8410 <f_write+0x1d8>
			fp->dsect = sect;
    832c:	4643      	mov	r3, r8
    832e:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    8330:	68a3      	ldr	r3, [r4, #8]
    8332:	05dd      	lsls	r5, r3, #23
    8334:	0ded      	lsrs	r5, r5, #23
    8336:	2380      	movs	r3, #128	; 0x80
    8338:	009b      	lsls	r3, r3, #2
    833a:	1b5d      	subs	r5, r3, r5
    833c:	42b5      	cmp	r5, r6
    833e:	d900      	bls.n	8342 <f_write+0x10a>
    8340:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    8342:	69a1      	ldr	r1, [r4, #24]
    8344:	6820      	ldr	r0, [r4, #0]
    8346:	4b46      	ldr	r3, [pc, #280]	; (8460 <f_write+0x228>)
    8348:	4798      	blx	r3
    834a:	2800      	cmp	r0, #0
    834c:	d172      	bne.n	8434 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    834e:	68a3      	ldr	r3, [r4, #8]
    8350:	05d8      	lsls	r0, r3, #23
    8352:	0dc0      	lsrs	r0, r0, #23
    8354:	3030      	adds	r0, #48	; 0x30
    8356:	6823      	ldr	r3, [r4, #0]
    8358:	469c      	mov	ip, r3
    835a:	4460      	add	r0, ip
    835c:	002a      	movs	r2, r5
    835e:	0039      	movs	r1, r7
    8360:	4b40      	ldr	r3, [pc, #256]	; (8464 <f_write+0x22c>)
    8362:	4798      	blx	r3
		fp->fs->wflag = 1;
    8364:	2301      	movs	r3, #1
    8366:	6822      	ldr	r2, [r4, #0]
    8368:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    836a:	197f      	adds	r7, r7, r5
    836c:	68a3      	ldr	r3, [r4, #8]
    836e:	195b      	adds	r3, r3, r5
    8370:	60a3      	str	r3, [r4, #8]
    8372:	464b      	mov	r3, r9
    8374:	681b      	ldr	r3, [r3, #0]
    8376:	195b      	adds	r3, r3, r5
    8378:	464a      	mov	r2, r9
    837a:	6013      	str	r3, [r2, #0]
    837c:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    837e:	d090      	beq.n	82a2 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    8380:	68a3      	ldr	r3, [r4, #8]
    8382:	05da      	lsls	r2, r3, #23
    8384:	d1d4      	bne.n	8330 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    8386:	6820      	ldr	r0, [r4, #0]
    8388:	7882      	ldrb	r2, [r0, #2]
    838a:	3a01      	subs	r2, #1
    838c:	0a5d      	lsrs	r5, r3, #9
    838e:	4015      	ands	r5, r2
    8390:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    8392:	2d00      	cmp	r5, #0
    8394:	d10b      	bne.n	83ae <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    8396:	2b00      	cmp	r3, #0
    8398:	d000      	beq.n	839c <f_write+0x164>
    839a:	e77b      	b.n	8294 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    839c:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    839e:	2b00      	cmp	r3, #0
    83a0:	d100      	bne.n	83a4 <f_write+0x16c>
    83a2:	e771      	b.n	8288 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    83a4:	2b01      	cmp	r3, #1
    83a6:	d086      	beq.n	82b6 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    83a8:	1c5a      	adds	r2, r3, #1
    83aa:	d08b      	beq.n	82c4 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    83ac:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    83ae:	6820      	ldr	r0, [r4, #0]
    83b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    83b2:	69a2      	ldr	r2, [r4, #24]
    83b4:	4293      	cmp	r3, r2
    83b6:	d08c      	beq.n	82d2 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    83b8:	6823      	ldr	r3, [r4, #0]
    83ba:	469a      	mov	sl, r3
    83bc:	6961      	ldr	r1, [r4, #20]
    83be:	0018      	movs	r0, r3
    83c0:	4b29      	ldr	r3, [pc, #164]	; (8468 <f_write+0x230>)
    83c2:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    83c4:	2800      	cmp	r0, #0
    83c6:	d091      	beq.n	82ec <f_write+0xb4>
			sect += csect;
    83c8:	4680      	mov	r8, r0
    83ca:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    83cc:	0a73      	lsrs	r3, r6, #9
    83ce:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    83d0:	d0a8      	beq.n	8324 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    83d2:	4653      	mov	r3, sl
    83d4:	789b      	ldrb	r3, [r3, #2]
    83d6:	465a      	mov	r2, fp
    83d8:	18aa      	adds	r2, r5, r2
    83da:	429a      	cmp	r2, r3
    83dc:	d901      	bls.n	83e2 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    83de:	1b5b      	subs	r3, r3, r5
    83e0:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    83e2:	465b      	mov	r3, fp
    83e4:	466a      	mov	r2, sp
    83e6:	71d3      	strb	r3, [r2, #7]
    83e8:	79d3      	ldrb	r3, [r2, #7]
    83ea:	4652      	mov	r2, sl
    83ec:	7850      	ldrb	r0, [r2, #1]
    83ee:	4642      	mov	r2, r8
    83f0:	0039      	movs	r1, r7
    83f2:	4d1e      	ldr	r5, [pc, #120]	; (846c <f_write+0x234>)
    83f4:	47a8      	blx	r5
    83f6:	2800      	cmp	r0, #0
    83f8:	d000      	beq.n	83fc <f_write+0x1c4>
    83fa:	e77f      	b.n	82fc <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    83fc:	6823      	ldr	r3, [r4, #0]
    83fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8400:	4641      	mov	r1, r8
    8402:	1a50      	subs	r0, r2, r1
    8404:	4583      	cmp	fp, r0
    8406:	d900      	bls.n	840a <f_write+0x1d2>
    8408:	e780      	b.n	830c <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    840a:	465b      	mov	r3, fp
    840c:	025d      	lsls	r5, r3, #9
				continue;
    840e:	e7ac      	b.n	836a <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    8410:	2100      	movs	r1, #0
    8412:	4650      	mov	r0, sl
    8414:	4b12      	ldr	r3, [pc, #72]	; (8460 <f_write+0x228>)
    8416:	4798      	blx	r3
    8418:	2800      	cmp	r0, #0
    841a:	d103      	bne.n	8424 <f_write+0x1ec>
				fp->fs->winsect = sect;
    841c:	6823      	ldr	r3, [r4, #0]
    841e:	4642      	mov	r2, r8
    8420:	62da      	str	r2, [r3, #44]	; 0x2c
    8422:	e783      	b.n	832c <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    8424:	79a2      	ldrb	r2, [r4, #6]
    8426:	2380      	movs	r3, #128	; 0x80
    8428:	425b      	negs	r3, r3
    842a:	4313      	orrs	r3, r2
    842c:	71a3      	strb	r3, [r4, #6]
    842e:	2301      	movs	r3, #1
    8430:	9300      	str	r3, [sp, #0]
    8432:	e009      	b.n	8448 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    8434:	79a2      	ldrb	r2, [r4, #6]
    8436:	2380      	movs	r3, #128	; 0x80
    8438:	425b      	negs	r3, r3
    843a:	4313      	orrs	r3, r2
    843c:	71a3      	strb	r3, [r4, #6]
    843e:	2301      	movs	r3, #1
    8440:	9300      	str	r3, [sp, #0]
    8442:	e001      	b.n	8448 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    8444:	2302      	movs	r3, #2
    8446:	9300      	str	r3, [sp, #0]
}
    8448:	9800      	ldr	r0, [sp, #0]
    844a:	b003      	add	sp, #12
    844c:	bc3c      	pop	{r2, r3, r4, r5}
    844e:	4690      	mov	r8, r2
    8450:	4699      	mov	r9, r3
    8452:	46a2      	mov	sl, r4
    8454:	46ab      	mov	fp, r5
    8456:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8458:	00006d6d 	.word	0x00006d6d
    845c:	0000756d 	.word	0x0000756d
    8460:	000071f1 	.word	0x000071f1
    8464:	00006d11 	.word	0x00006d11
    8468:	00006d37 	.word	0x00006d37
    846c:	00006bd1 	.word	0x00006bd1

00008470 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    8470:	b570      	push	{r4, r5, r6, lr}
    8472:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    8474:	8881      	ldrh	r1, [r0, #4]
    8476:	6800      	ldr	r0, [r0, #0]
    8478:	4b1c      	ldr	r3, [pc, #112]	; (84ec <f_sync+0x7c>)
    847a:	4798      	blx	r3
	if (res == FR_OK) {
    847c:	2800      	cmp	r0, #0
    847e:	d102      	bne.n	8486 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    8480:	79a3      	ldrb	r3, [r4, #6]
    8482:	069b      	lsls	r3, r3, #26
    8484:	d400      	bmi.n	8488 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    8486:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    8488:	69e1      	ldr	r1, [r4, #28]
    848a:	6820      	ldr	r0, [r4, #0]
    848c:	4b18      	ldr	r3, [pc, #96]	; (84f0 <f_sync+0x80>)
    848e:	4798      	blx	r3
			if (res == FR_OK) {
    8490:	2800      	cmp	r0, #0
    8492:	d1f8      	bne.n	8486 <f_sync+0x16>
				dir = fp->dir_ptr;
    8494:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    8496:	7aeb      	ldrb	r3, [r5, #11]
    8498:	2220      	movs	r2, #32
    849a:	4313      	orrs	r3, r2
    849c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    849e:	7b23      	ldrb	r3, [r4, #12]
    84a0:	772b      	strb	r3, [r5, #28]
    84a2:	89a3      	ldrh	r3, [r4, #12]
    84a4:	0a1b      	lsrs	r3, r3, #8
    84a6:	776b      	strb	r3, [r5, #29]
    84a8:	89e3      	ldrh	r3, [r4, #14]
    84aa:	77ab      	strb	r3, [r5, #30]
    84ac:	7be3      	ldrb	r3, [r4, #15]
    84ae:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    84b0:	7c23      	ldrb	r3, [r4, #16]
    84b2:	76ab      	strb	r3, [r5, #26]
    84b4:	8a23      	ldrh	r3, [r4, #16]
    84b6:	0a1b      	lsrs	r3, r3, #8
    84b8:	76eb      	strb	r3, [r5, #27]
    84ba:	8a63      	ldrh	r3, [r4, #18]
    84bc:	752b      	strb	r3, [r5, #20]
    84be:	8a63      	ldrh	r3, [r4, #18]
    84c0:	0a1b      	lsrs	r3, r3, #8
    84c2:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    84c4:	4b0b      	ldr	r3, [pc, #44]	; (84f4 <f_sync+0x84>)
    84c6:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    84c8:	75a8      	strb	r0, [r5, #22]
    84ca:	0a03      	lsrs	r3, r0, #8
    84cc:	75eb      	strb	r3, [r5, #23]
    84ce:	0c03      	lsrs	r3, r0, #16
    84d0:	762b      	strb	r3, [r5, #24]
    84d2:	0e00      	lsrs	r0, r0, #24
    84d4:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    84d6:	79a3      	ldrb	r3, [r4, #6]
    84d8:	2220      	movs	r2, #32
    84da:	4393      	bics	r3, r2
    84dc:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    84de:	2301      	movs	r3, #1
    84e0:	6822      	ldr	r2, [r4, #0]
    84e2:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    84e4:	6820      	ldr	r0, [r4, #0]
    84e6:	4b04      	ldr	r3, [pc, #16]	; (84f8 <f_sync+0x88>)
    84e8:	4798      	blx	r3
    84ea:	e7cc      	b.n	8486 <f_sync+0x16>
    84ec:	00006d6d 	.word	0x00006d6d
    84f0:	000071f1 	.word	0x000071f1
    84f4:	00006cc1 	.word	0x00006cc1
    84f8:	00007c49 	.word	0x00007c49

000084fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    84fc:	b510      	push	{r4, lr}
    84fe:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    8500:	4b03      	ldr	r3, [pc, #12]	; (8510 <f_close+0x14>)
    8502:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    8504:	2800      	cmp	r0, #0
    8506:	d101      	bne.n	850c <f_close+0x10>
    8508:	2300      	movs	r3, #0
    850a:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    850c:	bd10      	pop	{r4, pc}
    850e:	46c0      	nop			; (mov r8, r8)
    8510:	00008471 	.word	0x00008471

00008514 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    8514:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    8516:	287f      	cmp	r0, #127	; 0x7f
    8518:	d911      	bls.n	853e <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    851a:	2900      	cmp	r1, #0
    851c:	d111      	bne.n	8542 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    851e:	28c7      	cmp	r0, #199	; 0xc7
    8520:	d017      	beq.n	8552 <ff_convert+0x3e>
    8522:	4a0d      	ldr	r2, [pc, #52]	; (8558 <ff_convert+0x44>)
    8524:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    8526:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    8528:	8811      	ldrh	r1, [r2, #0]
    852a:	4281      	cmp	r1, r0
    852c:	d004      	beq.n	8538 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    852e:	3301      	adds	r3, #1
    8530:	b29b      	uxth	r3, r3
    8532:	3202      	adds	r2, #2
    8534:	2b80      	cmp	r3, #128	; 0x80
    8536:	d1f7      	bne.n	8528 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    8538:	3380      	adds	r3, #128	; 0x80
    853a:	20ff      	movs	r0, #255	; 0xff
    853c:	4003      	ands	r3, r0
		}
	}

	return c;
}
    853e:	0018      	movs	r0, r3
    8540:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    8542:	2300      	movs	r3, #0
    8544:	28ff      	cmp	r0, #255	; 0xff
    8546:	d8fa      	bhi.n	853e <ff_convert+0x2a>
    8548:	3880      	subs	r0, #128	; 0x80
    854a:	0040      	lsls	r0, r0, #1
    854c:	4b02      	ldr	r3, [pc, #8]	; (8558 <ff_convert+0x44>)
    854e:	5ac3      	ldrh	r3, [r0, r3]
    8550:	e7f5      	b.n	853e <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    8552:	2300      	movs	r3, #0
    8554:	e7f0      	b.n	8538 <ff_convert+0x24>
    8556:	46c0      	nop			; (mov r8, r8)
    8558:	0000e548 	.word	0x0000e548

0000855c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    855c:	2861      	cmp	r0, #97	; 0x61
    855e:	d014      	beq.n	858a <ff_wtoupper+0x2e>
    8560:	4b0b      	ldr	r3, [pc, #44]	; (8590 <ff_wtoupper+0x34>)
    8562:	3304      	adds	r3, #4
    8564:	2101      	movs	r1, #1
    8566:	2262      	movs	r2, #98	; 0x62
    8568:	4290      	cmp	r0, r2
    856a:	d007      	beq.n	857c <ff_wtoupper+0x20>
    856c:	3101      	adds	r1, #1
    856e:	3302      	adds	r3, #2
    8570:	1e9a      	subs	r2, r3, #2
    8572:	8812      	ldrh	r2, [r2, #0]
    8574:	2a00      	cmp	r2, #0
    8576:	d1f7      	bne.n	8568 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    8578:	0003      	movs	r3, r0
    857a:	e004      	b.n	8586 <ff_wtoupper+0x2a>
    857c:	1e03      	subs	r3, r0, #0
    857e:	d002      	beq.n	8586 <ff_wtoupper+0x2a>
    8580:	0049      	lsls	r1, r1, #1
    8582:	4b04      	ldr	r3, [pc, #16]	; (8594 <ff_wtoupper+0x38>)
    8584:	5acb      	ldrh	r3, [r1, r3]
}
    8586:	0018      	movs	r0, r3
    8588:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    858a:	2100      	movs	r1, #0
    858c:	e7f8      	b.n	8580 <ff_wtoupper+0x24>
    858e:	46c0      	nop			; (mov r8, r8)
    8590:	0000e648 	.word	0x0000e648
    8594:	0000e828 	.word	0x0000e828

00008598 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
    8598:	b5f0      	push	{r4, r5, r6, r7, lr}
    859a:	46de      	mov	lr, fp
    859c:	4657      	mov	r7, sl
    859e:	464e      	mov	r6, r9
    85a0:	4645      	mov	r5, r8
    85a2:	b5e0      	push	{r5, r6, r7, lr}
    85a4:	b083      	sub	sp, #12
    85a6:	0007      	movs	r7, r0
    85a8:	4688      	mov	r8, r1
    85aa:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
    85ac:	2400      	movs	r4, #0
    85ae:	2900      	cmp	r1, #0
    85b0:	dd18      	ble.n	85e4 <sendPacket+0x4c>
    85b2:	4b15      	ldr	r3, [pc, #84]	; (8608 <sendPacket+0x70>)
    85b4:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
    85b6:	4b15      	ldr	r3, [pc, #84]	; (860c <sendPacket+0x74>)
    85b8:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
    85ba:	9801      	ldr	r0, [sp, #4]
    85bc:	47d0      	blx	sl
    85be:	2800      	cmp	r0, #0
    85c0:	d110      	bne.n	85e4 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
    85c2:	6d3e      	ldr	r6, [r7, #80]	; 0x50
    85c4:	68f3      	ldr	r3, [r6, #12]
    85c6:	4699      	mov	r9, r3
    85c8:	693b      	ldr	r3, [r7, #16]
    85ca:	191d      	adds	r5, r3, r4
    85cc:	9801      	ldr	r0, [sp, #4]
    85ce:	47d8      	blx	fp
    85d0:	0003      	movs	r3, r0
    85d2:	4642      	mov	r2, r8
    85d4:	0029      	movs	r1, r5
    85d6:	0030      	movs	r0, r6
    85d8:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
    85da:	2800      	cmp	r0, #0
    85dc:	db02      	blt.n	85e4 <sendPacket+0x4c>
            break;
        sent += rc;
    85de:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
    85e0:	45a0      	cmp	r8, r4
    85e2:	dcea      	bgt.n	85ba <sendPacket+0x22>
    }
    if (sent == length)
    85e4:	45a0      	cmp	r8, r4
    85e6:	d10c      	bne.n	8602 <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
    85e8:	69b9      	ldr	r1, [r7, #24]
    85ea:	0038      	movs	r0, r7
    85ec:	3054      	adds	r0, #84	; 0x54
    85ee:	4b08      	ldr	r3, [pc, #32]	; (8610 <sendPacket+0x78>)
    85f0:	4798      	blx	r3
        rc = SUCCESS;
    85f2:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
    85f4:	b003      	add	sp, #12
    85f6:	bc3c      	pop	{r2, r3, r4, r5}
    85f8:	4690      	mov	r8, r2
    85fa:	4699      	mov	r9, r3
    85fc:	46a2      	mov	sl, r4
    85fe:	46ab      	mov	fp, r5
    8600:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
    8602:	2001      	movs	r0, #1
    8604:	4240      	negs	r0, r0
    return rc;
    8606:	e7f5      	b.n	85f4 <sendPacket+0x5c>
    8608:	00008f15 	.word	0x00008f15
    860c:	00008f49 	.word	0x00008f49
    8610:	00008f35 	.word	0x00008f35

00008614 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
    8614:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
    8616:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
    8618:	2100      	movs	r1, #0
    861a:	6241      	str	r1, [r0, #36]	; 0x24
    861c:	62c1      	str	r1, [r0, #44]	; 0x2c
    861e:	6341      	str	r1, [r0, #52]	; 0x34
    8620:	63c1      	str	r1, [r0, #60]	; 0x3c
    8622:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
    8624:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
    8626:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
    8628:	9b02      	ldr	r3, [sp, #8]
    862a:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
    862c:	9b03      	ldr	r3, [sp, #12]
    862e:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
    8630:	9b04      	ldr	r3, [sp, #16]
    8632:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
    8634:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
    8636:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
    8638:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
    863a:	2301      	movs	r3, #1
    863c:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
    863e:	3054      	adds	r0, #84	; 0x54
    8640:	4b01      	ldr	r3, [pc, #4]	; (8648 <MQTTClientInit+0x34>)
    8642:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
    8644:	bd10      	pop	{r4, pc}
    8646:	46c0      	nop			; (mov r8, r8)
    8648:	00008f5d 	.word	0x00008f5d

0000864c <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
    864c:	b5f0      	push	{r4, r5, r6, r7, lr}
    864e:	46de      	mov	lr, fp
    8650:	4657      	mov	r7, sl
    8652:	464e      	mov	r6, r9
    8654:	4645      	mov	r5, r8
    8656:	b5e0      	push	{r5, r6, r7, lr}
    8658:	b085      	sub	sp, #20
    865a:	4682      	mov	sl, r0
    865c:	000f      	movs	r7, r1
    865e:	4691      	mov	r9, r2
    8660:	0004      	movs	r4, r0
    8662:	3424      	adds	r4, #36	; 0x24
    8664:	234c      	movs	r3, #76	; 0x4c
    8666:	4453      	add	r3, sl
    8668:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
    866a:	2301      	movs	r3, #1
    866c:	425b      	negs	r3, r3
    866e:	9301      	str	r3, [sp, #4]
    8670:	e056      	b.n	8720 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
    8672:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
    8674:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
    8676:	687a      	ldr	r2, [r7, #4]
    8678:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
    867a:	780a      	ldrb	r2, [r1, #0]
    867c:	2a00      	cmp	r2, #0
    867e:	d04a      	beq.n	8716 <deliverMessage+0xca>
    8680:	42b3      	cmp	r3, r6
    8682:	d24a      	bcs.n	871a <deliverMessage+0xce>
    8684:	3101      	adds	r1, #1
    8686:	1e70      	subs	r0, r6, #1
    8688:	e008      	b.n	869c <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
    868a:	2a2f      	cmp	r2, #47	; 0x2f
    868c:	d10f      	bne.n	86ae <deliverMessage+0x62>
        curn++;
    868e:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
    8690:	780a      	ldrb	r2, [r1, #0]
    8692:	2a00      	cmp	r2, #0
    8694:	d03f      	beq.n	8716 <deliverMessage+0xca>
    8696:	429e      	cmp	r6, r3
    8698:	d93f      	bls.n	871a <deliverMessage+0xce>
    869a:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
    869c:	781d      	ldrb	r5, [r3, #0]
    869e:	2d2f      	cmp	r5, #47	; 0x2f
    86a0:	d0f3      	beq.n	868a <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
    86a2:	2a2b      	cmp	r2, #43	; 0x2b
    86a4:	d008      	beq.n	86b8 <deliverMessage+0x6c>
    86a6:	2a23      	cmp	r2, #35	; 0x23
    86a8:	d013      	beq.n	86d2 <deliverMessage+0x86>
    86aa:	4295      	cmp	r5, r2
    86ac:	d0ef      	beq.n	868e <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
    86ae:	429e      	cmp	r6, r3
    86b0:	d133      	bne.n	871a <deliverMessage+0xce>
    86b2:	2a00      	cmp	r2, #0
    86b4:	d03d      	beq.n	8732 <deliverMessage+0xe6>
    86b6:	e030      	b.n	871a <deliverMessage+0xce>
            char* nextpos = curn + 1;
    86b8:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
    86ba:	42ae      	cmp	r6, r5
    86bc:	d927      	bls.n	870e <deliverMessage+0xc2>
    86be:	785a      	ldrb	r2, [r3, #1]
    86c0:	2a2f      	cmp	r2, #47	; 0x2f
    86c2:	d01f      	beq.n	8704 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
    86c4:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
    86c6:	4283      	cmp	r3, r0
    86c8:	d0e1      	beq.n	868e <deliverMessage+0x42>
    86ca:	785a      	ldrb	r2, [r3, #1]
    86cc:	2a2f      	cmp	r2, #47	; 0x2f
    86ce:	d1f9      	bne.n	86c4 <deliverMessage+0x78>
    86d0:	e7dd      	b.n	868e <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
    86d2:	1e73      	subs	r3, r6, #1
    86d4:	e7db      	b.n	868e <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
    86d6:	9b01      	ldr	r3, [sp, #4]
    86d8:	3301      	adds	r3, #1
    86da:	d007      	beq.n	86ec <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
    86dc:	9801      	ldr	r0, [sp, #4]
    86de:	b005      	add	sp, #20
    86e0:	bc3c      	pop	{r2, r3, r4, r5}
    86e2:	4690      	mov	r8, r2
    86e4:	4699      	mov	r9, r3
    86e6:	46a2      	mov	sl, r4
    86e8:	46ab      	mov	fp, r5
    86ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
    86ec:	4653      	mov	r3, sl
    86ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    86f0:	2b00      	cmp	r3, #0
    86f2:	d0f3      	beq.n	86dc <deliverMessage+0x90>
    md->topicName = aTopicName;
    86f4:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
    86f6:	464a      	mov	r2, r9
    86f8:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
    86fa:	a802      	add	r0, sp, #8
    86fc:	4798      	blx	r3
        rc = SUCCESS;
    86fe:	2300      	movs	r3, #0
    8700:	9301      	str	r3, [sp, #4]
    return rc;
    8702:	e7eb      	b.n	86dc <deliverMessage+0x90>
    while (*curf && curn < curn_end)
    8704:	780a      	ldrb	r2, [r1, #0]
    8706:	2a00      	cmp	r2, #0
    8708:	d007      	beq.n	871a <deliverMessage+0xce>
        curn++;
    870a:	002b      	movs	r3, r5
    870c:	e7c5      	b.n	869a <deliverMessage+0x4e>
    870e:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
    8710:	780a      	ldrb	r2, [r1, #0]
    8712:	2a00      	cmp	r2, #0
    8714:	d101      	bne.n	871a <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
    8716:	429e      	cmp	r6, r3
    8718:	d00b      	beq.n	8732 <deliverMessage+0xe6>
    871a:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    871c:	4544      	cmp	r4, r8
    871e:	d0da      	beq.n	86d6 <deliverMessage+0x8a>
    8720:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
    8722:	6821      	ldr	r1, [r4, #0]
    8724:	2900      	cmp	r1, #0
    8726:	d0f8      	beq.n	871a <deliverMessage+0xce>
    8728:	0038      	movs	r0, r7
    872a:	4b08      	ldr	r3, [pc, #32]	; (874c <deliverMessage+0x100>)
    872c:	4798      	blx	r3
    872e:	2800      	cmp	r0, #0
    8730:	d09f      	beq.n	8672 <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
    8732:	465b      	mov	r3, fp
    8734:	685b      	ldr	r3, [r3, #4]
    8736:	2b00      	cmp	r3, #0
    8738:	d0ef      	beq.n	871a <deliverMessage+0xce>
    md->topicName = aTopicName;
    873a:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
    873c:	464a      	mov	r2, r9
    873e:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
    8740:	a802      	add	r0, sp, #8
    8742:	4798      	blx	r3
                rc = SUCCESS;
    8744:	2300      	movs	r3, #0
    8746:	9301      	str	r3, [sp, #4]
    8748:	e7e7      	b.n	871a <deliverMessage+0xce>
    874a:	46c0      	nop			; (mov r8, r8)
    874c:	00009831 	.word	0x00009831

00008750 <keepalive>:


int keepalive(MQTTClient* c)
{
    8750:	b510      	push	{r4, lr}
    8752:	b082      	sub	sp, #8
    8754:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
    8756:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
    8758:	69a3      	ldr	r3, [r4, #24]
    875a:	2b00      	cmp	r3, #0
    875c:	d101      	bne.n	8762 <keepalive+0x12>
        }
    }

exit:
    return rc;
}
    875e:	b002      	add	sp, #8
    8760:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
    8762:	0020      	movs	r0, r4
    8764:	3054      	adds	r0, #84	; 0x54
    8766:	4b14      	ldr	r3, [pc, #80]	; (87b8 <keepalive+0x68>)
    8768:	4798      	blx	r3
    876a:	2800      	cmp	r0, #0
    876c:	d01d      	beq.n	87aa <keepalive+0x5a>
        if (!c->ping_outstanding)
    876e:	7f23      	ldrb	r3, [r4, #28]
    8770:	2b00      	cmp	r3, #0
    8772:	d11d      	bne.n	87b0 <keepalive+0x60>
            TimerInit(&timer);
    8774:	4668      	mov	r0, sp
    8776:	4b11      	ldr	r3, [pc, #68]	; (87bc <keepalive+0x6c>)
    8778:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
    877a:	21fa      	movs	r1, #250	; 0xfa
    877c:	0089      	lsls	r1, r1, #2
    877e:	4668      	mov	r0, sp
    8780:	4b0f      	ldr	r3, [pc, #60]	; (87c0 <keepalive+0x70>)
    8782:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
    8784:	68a1      	ldr	r1, [r4, #8]
    8786:	6920      	ldr	r0, [r4, #16]
    8788:	4b0e      	ldr	r3, [pc, #56]	; (87c4 <keepalive+0x74>)
    878a:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
    878c:	2800      	cmp	r0, #0
    878e:	dd09      	ble.n	87a4 <keepalive+0x54>
    8790:	466a      	mov	r2, sp
    8792:	0001      	movs	r1, r0
    8794:	0020      	movs	r0, r4
    8796:	4b0c      	ldr	r3, [pc, #48]	; (87c8 <keepalive+0x78>)
    8798:	4798      	blx	r3
    879a:	2800      	cmp	r0, #0
    879c:	d1df      	bne.n	875e <keepalive+0xe>
                c->ping_outstanding = 1;
    879e:	2301      	movs	r3, #1
    87a0:	7723      	strb	r3, [r4, #28]
    87a2:	e7dc      	b.n	875e <keepalive+0xe>
    int rc = FAILURE;
    87a4:	2001      	movs	r0, #1
    87a6:	4240      	negs	r0, r0
    87a8:	e7d9      	b.n	875e <keepalive+0xe>
    87aa:	2001      	movs	r0, #1
    87ac:	4240      	negs	r0, r0
    87ae:	e7d6      	b.n	875e <keepalive+0xe>
    87b0:	2001      	movs	r0, #1
    87b2:	4240      	negs	r0, r0
    return rc;
    87b4:	e7d3      	b.n	875e <keepalive+0xe>
    87b6:	46c0      	nop			; (mov r8, r8)
    87b8:	00008f15 	.word	0x00008f15
    87bc:	00008f5d 	.word	0x00008f5d
    87c0:	00008f25 	.word	0x00008f25
    87c4:	00009519 	.word	0x00009519
    87c8:	00008599 	.word	0x00008599

000087cc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
    87cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    87ce:	46de      	mov	lr, fp
    87d0:	464f      	mov	r7, r9
    87d2:	4646      	mov	r6, r8
    87d4:	b5c0      	push	{r6, r7, lr}
    87d6:	b090      	sub	sp, #64	; 0x40
    87d8:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
    87da:	6d05      	ldr	r5, [r0, #80]	; 0x50
    87dc:	68ae      	ldr	r6, [r5, #8]
    87de:	6947      	ldr	r7, [r0, #20]
    87e0:	9107      	str	r1, [sp, #28]
    87e2:	0008      	movs	r0, r1
    87e4:	4b65      	ldr	r3, [pc, #404]	; (897c <cycle+0x1b0>)
    87e6:	4798      	blx	r3
    87e8:	0003      	movs	r3, r0
    87ea:	2201      	movs	r2, #1
    87ec:	0039      	movs	r1, r7
    87ee:	0028      	movs	r0, r5
    87f0:	47b0      	blx	r6
    87f2:	0005      	movs	r5, r0
    87f4:	2801      	cmp	r0, #1
    87f6:	d000      	beq.n	87fa <cycle+0x2e>
    87f8:	e0bd      	b.n	8976 <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
    87fa:	9807      	ldr	r0, [sp, #28]
    87fc:	4b5f      	ldr	r3, [pc, #380]	; (897c <cycle+0x1b0>)
    87fe:	4798      	blx	r3
    8800:	9006      	str	r0, [sp, #24]
    8802:	2604      	movs	r6, #4
    *value = 0;
    8804:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
    8806:	237f      	movs	r3, #127	; 0x7f
    8808:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
    880a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    880c:	6883      	ldr	r3, [r0, #8]
    880e:	4698      	mov	r8, r3
    8810:	9b06      	ldr	r3, [sp, #24]
    8812:	2201      	movs	r2, #1
    8814:	a90c      	add	r1, sp, #48	; 0x30
    8816:	47c0      	blx	r8
        if (rc != 1)
    8818:	2801      	cmp	r0, #1
    881a:	d10e      	bne.n	883a <cycle+0x6e>
        *value += (i & 127) * multiplier;
    881c:	ab02      	add	r3, sp, #8
    881e:	2228      	movs	r2, #40	; 0x28
    8820:	189b      	adds	r3, r3, r2
    8822:	781b      	ldrb	r3, [r3, #0]
    8824:	465a      	mov	r2, fp
    8826:	401a      	ands	r2, r3
    8828:	436a      	muls	r2, r5
    882a:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
    882c:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
    882e:	b25b      	sxtb	r3, r3
    8830:	2b00      	cmp	r3, #0
    8832:	da02      	bge.n	883a <cycle+0x6e>
    8834:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    8836:	2e00      	cmp	r6, #0
    8838:	d1e7      	bne.n	880a <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    883a:	6963      	ldr	r3, [r4, #20]
    883c:	1c58      	adds	r0, r3, #1
    883e:	0039      	movs	r1, r7
    8840:	4b4f      	ldr	r3, [pc, #316]	; (8980 <cycle+0x1b4>)
    8842:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
    8844:	2f00      	cmp	r7, #0
    8846:	dd10      	ble.n	886a <cycle+0x9e>
    8848:	6d26      	ldr	r6, [r4, #80]	; 0x50
    884a:	68b3      	ldr	r3, [r6, #8]
    884c:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    884e:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
    8850:	6963      	ldr	r3, [r4, #20]
    8852:	181d      	adds	r5, r3, r0
    8854:	9807      	ldr	r0, [sp, #28]
    8856:	4b49      	ldr	r3, [pc, #292]	; (897c <cycle+0x1b0>)
    8858:	4798      	blx	r3
    885a:	0003      	movs	r3, r0
    885c:	003a      	movs	r2, r7
    885e:	0029      	movs	r1, r5
    8860:	0030      	movs	r0, r6
    8862:	47c8      	blx	r9
    8864:	42b8      	cmp	r0, r7
    8866:	d000      	beq.n	886a <cycle+0x9e>
    8868:	e085      	b.n	8976 <cycle+0x1aa>
    header.byte = c->readbuf[0];
    886a:	6963      	ldr	r3, [r4, #20]
    886c:	781d      	ldrb	r5, [r3, #0]
    886e:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
    8870:	2d05      	cmp	r5, #5
    8872:	d051      	beq.n	8918 <cycle+0x14c>
    8874:	2d0d      	cmp	r5, #13
    8876:	d06e      	beq.n	8956 <cycle+0x18a>
        rc = SUCCESS;
    8878:	2600      	movs	r6, #0
    switch (packet_type)
    887a:	2d03      	cmp	r5, #3
    887c:	d16e      	bne.n	895c <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
    887e:	68e2      	ldr	r2, [r4, #12]
    8880:	9204      	str	r2, [sp, #16]
    8882:	9303      	str	r3, [sp, #12]
    8884:	ab0f      	add	r3, sp, #60	; 0x3c
    8886:	9302      	str	r3, [sp, #8]
    8888:	ab0e      	add	r3, sp, #56	; 0x38
    888a:	9301      	str	r3, [sp, #4]
    888c:	ab09      	add	r3, sp, #36	; 0x24
    888e:	9300      	str	r3, [sp, #0]
    8890:	ab0d      	add	r3, sp, #52	; 0x34
    8892:	2229      	movs	r2, #41	; 0x29
    8894:	a902      	add	r1, sp, #8
    8896:	468c      	mov	ip, r1
    8898:	4462      	add	r2, ip
    889a:	a908      	add	r1, sp, #32
    889c:	202a      	movs	r0, #42	; 0x2a
    889e:	4460      	add	r0, ip
    88a0:	4e38      	ldr	r6, [pc, #224]	; (8984 <cycle+0x1b8>)
    88a2:	47b0      	blx	r6
        rc = SUCCESS;
    88a4:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
    88a6:	2801      	cmp	r0, #1
    88a8:	d15b      	bne.n	8962 <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
    88aa:	ae0c      	add	r6, sp, #48	; 0x30
    88ac:	ab02      	add	r3, sp, #8
    88ae:	7e1b      	ldrb	r3, [r3, #24]
    88b0:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
    88b2:	0032      	movs	r2, r6
    88b4:	a909      	add	r1, sp, #36	; 0x24
    88b6:	0020      	movs	r0, r4
    88b8:	4b33      	ldr	r3, [pc, #204]	; (8988 <cycle+0x1bc>)
    88ba:	4798      	blx	r3
            if (msg.qos != QOS0)
    88bc:	7833      	ldrb	r3, [r6, #0]
    88be:	2b00      	cmp	r3, #0
    88c0:	d028      	beq.n	8914 <cycle+0x148>
            {
                if (msg.qos == QOS1)
    88c2:	2b01      	cmp	r3, #1
    88c4:	d004      	beq.n	88d0 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
    88c6:	2b02      	cmp	r3, #2
    88c8:	d016      	beq.n	88f8 <cycle+0x12c>
    88ca:	2601      	movs	r6, #1
    88cc:	4276      	negs	r6, r6
    88ce:	e048      	b.n	8962 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
    88d0:	ab0c      	add	r3, sp, #48	; 0x30
    88d2:	889b      	ldrh	r3, [r3, #4]
    88d4:	9300      	str	r3, [sp, #0]
    88d6:	2300      	movs	r3, #0
    88d8:	2204      	movs	r2, #4
    88da:	68a1      	ldr	r1, [r4, #8]
    88dc:	6920      	ldr	r0, [r4, #16]
    88de:	4e2b      	ldr	r6, [pc, #172]	; (898c <cycle+0x1c0>)
    88e0:	47b0      	blx	r6
    88e2:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
    88e4:	2900      	cmp	r1, #0
    88e6:	dd12      	ble.n	890e <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
    88e8:	9a07      	ldr	r2, [sp, #28]
    88ea:	0020      	movs	r0, r4
    88ec:	4b28      	ldr	r3, [pc, #160]	; (8990 <cycle+0x1c4>)
    88ee:	4798      	blx	r3
    88f0:	0006      	movs	r6, r0
                if (rc == FAILURE)
    88f2:	1c43      	adds	r3, r0, #1
    88f4:	d132      	bne.n	895c <cycle+0x190>
    88f6:	e034      	b.n	8962 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
    88f8:	ab0c      	add	r3, sp, #48	; 0x30
    88fa:	889b      	ldrh	r3, [r3, #4]
    88fc:	9300      	str	r3, [sp, #0]
    88fe:	2300      	movs	r3, #0
    8900:	2205      	movs	r2, #5
    8902:	68a1      	ldr	r1, [r4, #8]
    8904:	6920      	ldr	r0, [r4, #16]
    8906:	4e21      	ldr	r6, [pc, #132]	; (898c <cycle+0x1c0>)
    8908:	47b0      	blx	r6
    890a:	0001      	movs	r1, r0
    890c:	e7ea      	b.n	88e4 <cycle+0x118>
    890e:	2601      	movs	r6, #1
    8910:	4276      	negs	r6, r6
    8912:	e026      	b.n	8962 <cycle+0x196>
        rc = SUCCESS;
    8914:	2600      	movs	r6, #0
    8916:	e021      	b.n	895c <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    8918:	68e2      	ldr	r2, [r4, #12]
    891a:	9200      	str	r2, [sp, #0]
    891c:	aa0c      	add	r2, sp, #48	; 0x30
    891e:	a908      	add	r1, sp, #32
    8920:	a809      	add	r0, sp, #36	; 0x24
    8922:	4e1c      	ldr	r6, [pc, #112]	; (8994 <cycle+0x1c8>)
    8924:	47b0      	blx	r6
    8926:	2801      	cmp	r0, #1
    8928:	d002      	beq.n	8930 <cycle+0x164>
    892a:	2601      	movs	r6, #1
    892c:	4276      	negs	r6, r6
    892e:	e01b      	b.n	8968 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
    8930:	ab0c      	add	r3, sp, #48	; 0x30
    8932:	881b      	ldrh	r3, [r3, #0]
    8934:	9300      	str	r3, [sp, #0]
    8936:	2300      	movs	r3, #0
    8938:	2206      	movs	r2, #6
    893a:	68a1      	ldr	r1, [r4, #8]
    893c:	6920      	ldr	r0, [r4, #16]
    893e:	4e13      	ldr	r6, [pc, #76]	; (898c <cycle+0x1c0>)
    8940:	47b0      	blx	r6
    8942:	2800      	cmp	r0, #0
    8944:	ddf1      	ble.n	892a <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
    8946:	9a07      	ldr	r2, [sp, #28]
    8948:	0001      	movs	r1, r0
    894a:	0020      	movs	r0, r4
    894c:	4b10      	ldr	r3, [pc, #64]	; (8990 <cycle+0x1c4>)
    894e:	4798      	blx	r3
    8950:	1e06      	subs	r6, r0, #0
    8952:	d1ea      	bne.n	892a <cycle+0x15e>
    8954:	e002      	b.n	895c <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
    8956:	2300      	movs	r3, #0
    8958:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
    895a:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
    895c:	0020      	movs	r0, r4
    895e:	4b0e      	ldr	r3, [pc, #56]	; (8998 <cycle+0x1cc>)
    8960:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
    8962:	2e00      	cmp	r6, #0
    8964:	d100      	bne.n	8968 <cycle+0x19c>
    8966:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
    8968:	0030      	movs	r0, r6
    896a:	b010      	add	sp, #64	; 0x40
    896c:	bc1c      	pop	{r2, r3, r4}
    896e:	4690      	mov	r8, r2
    8970:	4699      	mov	r9, r3
    8972:	46a3      	mov	fp, r4
    8974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8976:	4d09      	ldr	r5, [pc, #36]	; (899c <cycle+0x1d0>)
        rc = SUCCESS;
    8978:	2600      	movs	r6, #0
    897a:	e7ef      	b.n	895c <cycle+0x190>
    897c:	00008f49 	.word	0x00008f49
    8980:	00009631 	.word	0x00009631
    8984:	00009529 	.word	0x00009529
    8988:	0000864d 	.word	0x0000864d
    898c:	00009965 	.word	0x00009965
    8990:	00008599 	.word	0x00008599
    8994:	000095c1 	.word	0x000095c1
    8998:	00008751 	.word	0x00008751
    899c:	0000ffff 	.word	0x0000ffff

000089a0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
    89a0:	b570      	push	{r4, r5, r6, lr}
    89a2:	b082      	sub	sp, #8
    89a4:	0005      	movs	r5, r0
    89a6:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
    89a8:	4668      	mov	r0, sp
    89aa:	4b0a      	ldr	r3, [pc, #40]	; (89d4 <MQTTYield+0x34>)
    89ac:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
    89ae:	0021      	movs	r1, r4
    89b0:	4668      	mov	r0, sp
    89b2:	4b09      	ldr	r3, [pc, #36]	; (89d8 <MQTTYield+0x38>)
    89b4:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
    89b6:	4c09      	ldr	r4, [pc, #36]	; (89dc <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
    89b8:	4e09      	ldr	r6, [pc, #36]	; (89e0 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
    89ba:	4669      	mov	r1, sp
    89bc:	0028      	movs	r0, r5
    89be:	47a0      	blx	r4
    89c0:	1c43      	adds	r3, r0, #1
    89c2:	d004      	beq.n	89ce <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
    89c4:	4668      	mov	r0, sp
    89c6:	47b0      	blx	r6
    89c8:	2800      	cmp	r0, #0
    89ca:	d0f6      	beq.n	89ba <MQTTYield+0x1a>
    int rc = SUCCESS;
    89cc:	2000      	movs	r0, #0
        
    return rc;
}
    89ce:	b002      	add	sp, #8
    89d0:	bd70      	pop	{r4, r5, r6, pc}
    89d2:	46c0      	nop			; (mov r8, r8)
    89d4:	00008f5d 	.word	0x00008f5d
    89d8:	00008f25 	.word	0x00008f25
    89dc:	000087cd 	.word	0x000087cd
    89e0:	00008f15 	.word	0x00008f15

000089e4 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
    89e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    89e6:	b083      	sub	sp, #12
    89e8:	9001      	str	r0, [sp, #4]
    89ea:	000e      	movs	r6, r1
    89ec:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
    89ee:	2401      	movs	r4, #1
    89f0:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
    89f2:	4f08      	ldr	r7, [pc, #32]	; (8a14 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
    89f4:	4d08      	ldr	r5, [pc, #32]	; (8a18 <waitfor+0x34>)
        if (TimerIsExpired(timer))
    89f6:	9800      	ldr	r0, [sp, #0]
    89f8:	47b8      	blx	r7
    89fa:	2800      	cmp	r0, #0
    89fc:	d106      	bne.n	8a0c <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
    89fe:	9900      	ldr	r1, [sp, #0]
    8a00:	9801      	ldr	r0, [sp, #4]
    8a02:	47a8      	blx	r5
    8a04:	0004      	movs	r4, r0
    8a06:	42b0      	cmp	r0, r6
    8a08:	d1f5      	bne.n	89f6 <waitfor+0x12>
    8a0a:	0034      	movs	r4, r6
    
    return rc;
}
    8a0c:	0020      	movs	r0, r4
    8a0e:	b003      	add	sp, #12
    8a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a12:	46c0      	nop			; (mov r8, r8)
    8a14:	00008f15 	.word	0x00008f15
    8a18:	000087cd 	.word	0x000087cd

00008a1c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
    8a1c:	b530      	push	{r4, r5, lr}
    8a1e:	b09b      	sub	sp, #108	; 0x6c
    8a20:	0004      	movs	r4, r0
    8a22:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
    8a24:	2258      	movs	r2, #88	; 0x58
    8a26:	4928      	ldr	r1, [pc, #160]	; (8ac8 <MQTTConnect+0xac>)
    8a28:	a802      	add	r0, sp, #8
    8a2a:	4b28      	ldr	r3, [pc, #160]	; (8acc <MQTTConnect+0xb0>)
    8a2c:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
    8a2e:	6a23      	ldr	r3, [r4, #32]
    8a30:	2b00      	cmp	r3, #0
    8a32:	d13f      	bne.n	8ab4 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
    8a34:	a818      	add	r0, sp, #96	; 0x60
    8a36:	4b26      	ldr	r3, [pc, #152]	; (8ad0 <MQTTConnect+0xb4>)
    8a38:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
    8a3a:	6861      	ldr	r1, [r4, #4]
    8a3c:	a818      	add	r0, sp, #96	; 0x60
    8a3e:	4b25      	ldr	r3, [pc, #148]	; (8ad4 <MQTTConnect+0xb8>)
    8a40:	4798      	blx	r3

    if (options == 0)
    8a42:	2d00      	cmp	r5, #0
    8a44:	d015      	beq.n	8a72 <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
    8a46:	8b29      	ldrh	r1, [r5, #24]
    8a48:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
    8a4a:	0020      	movs	r0, r4
    8a4c:	3054      	adds	r0, #84	; 0x54
    8a4e:	4b22      	ldr	r3, [pc, #136]	; (8ad8 <MQTTConnect+0xbc>)
    8a50:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
    8a52:	002a      	movs	r2, r5
    8a54:	68a1      	ldr	r1, [r4, #8]
    8a56:	6920      	ldr	r0, [r4, #16]
    8a58:	4b20      	ldr	r3, [pc, #128]	; (8adc <MQTTConnect+0xc0>)
    8a5a:	4798      	blx	r3
    8a5c:	2800      	cmp	r0, #0
    8a5e:	dd2c      	ble.n	8aba <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
    8a60:	aa18      	add	r2, sp, #96	; 0x60
    8a62:	0001      	movs	r1, r0
    8a64:	0020      	movs	r0, r4
    8a66:	4b1e      	ldr	r3, [pc, #120]	; (8ae0 <MQTTConnect+0xc4>)
    8a68:	4798      	blx	r3
    8a6a:	2800      	cmp	r0, #0
    8a6c:	d003      	beq.n	8a76 <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
    8a6e:	b01b      	add	sp, #108	; 0x6c
    8a70:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
    8a72:	ad02      	add	r5, sp, #8
    8a74:	e7e7      	b.n	8a46 <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
    8a76:	aa18      	add	r2, sp, #96	; 0x60
    8a78:	2102      	movs	r1, #2
    8a7a:	0020      	movs	r0, r4
    8a7c:	4b19      	ldr	r3, [pc, #100]	; (8ae4 <MQTTConnect+0xc8>)
    8a7e:	4798      	blx	r3
    8a80:	2802      	cmp	r0, #2
    8a82:	d11d      	bne.n	8ac0 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
    8a84:	466b      	mov	r3, sp
    8a86:	1d99      	adds	r1, r3, #6
    8a88:	23ff      	movs	r3, #255	; 0xff
    8a8a:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
    8a8c:	466b      	mov	r3, sp
    8a8e:	1dd8      	adds	r0, r3, #7
    8a90:	2300      	movs	r3, #0
    8a92:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
    8a94:	68e3      	ldr	r3, [r4, #12]
    8a96:	6962      	ldr	r2, [r4, #20]
    8a98:	4d13      	ldr	r5, [pc, #76]	; (8ae8 <MQTTConnect+0xcc>)
    8a9a:	47a8      	blx	r5
    8a9c:	2801      	cmp	r0, #1
    8a9e:	d002      	beq.n	8aa6 <MQTTConnect+0x8a>
            rc = FAILURE;
    8aa0:	2001      	movs	r0, #1
    8aa2:	4240      	negs	r0, r0
    8aa4:	e7e3      	b.n	8a6e <MQTTConnect+0x52>
            rc = connack_rc;
    8aa6:	466b      	mov	r3, sp
    8aa8:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
    8aaa:	2800      	cmp	r0, #0
    8aac:	d1df      	bne.n	8a6e <MQTTConnect+0x52>
        c->isconnected = 1;
    8aae:	2301      	movs	r3, #1
    8ab0:	6223      	str	r3, [r4, #32]
    return rc;
    8ab2:	e7dc      	b.n	8a6e <MQTTConnect+0x52>
    int rc = FAILURE;
    8ab4:	2001      	movs	r0, #1
    8ab6:	4240      	negs	r0, r0
    8ab8:	e7d9      	b.n	8a6e <MQTTConnect+0x52>
    8aba:	2001      	movs	r0, #1
    8abc:	4240      	negs	r0, r0
    8abe:	e7d6      	b.n	8a6e <MQTTConnect+0x52>
        rc = FAILURE;
    8ac0:	2001      	movs	r0, #1
    8ac2:	4240      	negs	r0, r0
    8ac4:	e7d3      	b.n	8a6e <MQTTConnect+0x52>
    8ac6:	46c0      	nop			; (mov r8, r8)
    8ac8:	0000ea08 	.word	0x0000ea08
    8acc:	0000bd79 	.word	0x0000bd79
    8ad0:	00008f5d 	.word	0x00008f5d
    8ad4:	00008f25 	.word	0x00008f25
    8ad8:	00008f35 	.word	0x00008f35
    8adc:	00009335 	.word	0x00009335
    8ae0:	00008599 	.word	0x00008599
    8ae4:	000089e5 	.word	0x000089e5
    8ae8:	0000947d 	.word	0x0000947d

00008aec <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
    8aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    8aee:	b091      	sub	sp, #68	; 0x44
    8af0:	0004      	movs	r4, r0
    8af2:	000f      	movs	r7, r1
    8af4:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
    8af6:	2300      	movs	r3, #0
    8af8:	930c      	str	r3, [sp, #48]	; 0x30
    8afa:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
    8afc:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
    8afe:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
    8b00:	6a03      	ldr	r3, [r0, #32]
    8b02:	2b00      	cmp	r3, #0
    8b04:	d05c      	beq.n	8bc0 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
    8b06:	a80e      	add	r0, sp, #56	; 0x38
    8b08:	4b32      	ldr	r3, [pc, #200]	; (8bd4 <MQTTSubscribe+0xe8>)
    8b0a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    8b0c:	6861      	ldr	r1, [r4, #4]
    8b0e:	a80e      	add	r0, sp, #56	; 0x38
    8b10:	4b31      	ldr	r3, [pc, #196]	; (8bd8 <MQTTSubscribe+0xec>)
    8b12:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
    8b14:	6920      	ldr	r0, [r4, #16]
    8b16:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    8b18:	6823      	ldr	r3, [r4, #0]
    8b1a:	4a30      	ldr	r2, [pc, #192]	; (8bdc <MQTTSubscribe+0xf0>)
    8b1c:	4293      	cmp	r3, r2
    8b1e:	d017      	beq.n	8b50 <MQTTSubscribe+0x64>
    8b20:	3301      	adds	r3, #1
    8b22:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
    8b24:	b29b      	uxth	r3, r3
    8b26:	aa0a      	add	r2, sp, #40	; 0x28
    8b28:	9202      	str	r2, [sp, #8]
    8b2a:	aa0b      	add	r2, sp, #44	; 0x2c
    8b2c:	9201      	str	r2, [sp, #4]
    8b2e:	2201      	movs	r2, #1
    8b30:	9200      	str	r2, [sp, #0]
    8b32:	2200      	movs	r2, #0
    8b34:	4e2a      	ldr	r6, [pc, #168]	; (8be0 <MQTTSubscribe+0xf4>)
    8b36:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
    8b38:	2800      	cmp	r0, #0
    8b3a:	dd44      	ble.n	8bc6 <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
    8b3c:	aa0e      	add	r2, sp, #56	; 0x38
    8b3e:	0001      	movs	r1, r0
    8b40:	0020      	movs	r0, r4
    8b42:	4b28      	ldr	r3, [pc, #160]	; (8be4 <MQTTSubscribe+0xf8>)
    8b44:	4798      	blx	r3
    8b46:	1e06      	subs	r6, r0, #0
    8b48:	d004      	beq.n	8b54 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    8b4a:	0030      	movs	r0, r6
    8b4c:	b011      	add	sp, #68	; 0x44
    8b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    8b50:	2301      	movs	r3, #1
    8b52:	e7e6      	b.n	8b22 <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
    8b54:	aa0e      	add	r2, sp, #56	; 0x38
    8b56:	2109      	movs	r1, #9
    8b58:	0020      	movs	r0, r4
    8b5a:	4b23      	ldr	r3, [pc, #140]	; (8be8 <MQTTSubscribe+0xfc>)
    8b5c:	4798      	blx	r3
    8b5e:	2809      	cmp	r0, #9
    8b60:	d134      	bne.n	8bcc <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
    8b62:	2300      	movs	r3, #0
    8b64:	9308      	str	r3, [sp, #32]
    8b66:	3b01      	subs	r3, #1
    8b68:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
    8b6a:	68e3      	ldr	r3, [r4, #12]
    8b6c:	9301      	str	r3, [sp, #4]
    8b6e:	6963      	ldr	r3, [r4, #20]
    8b70:	9300      	str	r3, [sp, #0]
    8b72:	ab09      	add	r3, sp, #36	; 0x24
    8b74:	aa08      	add	r2, sp, #32
    8b76:	2101      	movs	r1, #1
    8b78:	300d      	adds	r0, #13
    8b7a:	ad02      	add	r5, sp, #8
    8b7c:	46ac      	mov	ip, r5
    8b7e:	4460      	add	r0, ip
    8b80:	4d1a      	ldr	r5, [pc, #104]	; (8bec <MQTTSubscribe+0x100>)
    8b82:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
    8b84:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
    8b86:	2801      	cmp	r0, #1
    8b88:	d00e      	beq.n	8ba8 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
    8b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8b8c:	2b00      	cmp	r3, #0
    8b8e:	d010      	beq.n	8bb2 <MQTTSubscribe+0xc6>
    8b90:	0022      	movs	r2, r4
    8b92:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    8b94:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
    8b96:	6810      	ldr	r0, [r2, #0]
    8b98:	2800      	cmp	r0, #0
    8b9a:	d00b      	beq.n	8bb4 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    8b9c:	3301      	adds	r3, #1
    8b9e:	3208      	adds	r2, #8
    8ba0:	2b05      	cmp	r3, #5
    8ba2:	d1f8      	bne.n	8b96 <MQTTSubscribe+0xaa>
    8ba4:	000e      	movs	r6, r1
    8ba6:	e7d0      	b.n	8b4a <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
    8ba8:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
    8baa:	2980      	cmp	r1, #128	; 0x80
    8bac:	d1ed      	bne.n	8b8a <MQTTSubscribe+0x9e>
    8bae:	000e      	movs	r6, r1
    8bb0:	e7cb      	b.n	8b4a <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
    8bb2:	0033      	movs	r3, r6
    8bb4:	00db      	lsls	r3, r3, #3
    8bb6:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
    8bb8:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
    8bba:	9b05      	ldr	r3, [sp, #20]
    8bbc:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
    8bbe:	e7c4      	b.n	8b4a <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
    8bc0:	2601      	movs	r6, #1
    8bc2:	4276      	negs	r6, r6
    8bc4:	e7c1      	b.n	8b4a <MQTTSubscribe+0x5e>
    8bc6:	2601      	movs	r6, #1
    8bc8:	4276      	negs	r6, r6
    8bca:	e7be      	b.n	8b4a <MQTTSubscribe+0x5e>
        rc = FAILURE;
    8bcc:	2601      	movs	r6, #1
    8bce:	4276      	negs	r6, r6
    return rc;
    8bd0:	e7bb      	b.n	8b4a <MQTTSubscribe+0x5e>
    8bd2:	46c0      	nop			; (mov r8, r8)
    8bd4:	00008f5d 	.word	0x00008f5d
    8bd8:	00008f25 	.word	0x00008f25
    8bdc:	0000ffff 	.word	0x0000ffff
    8be0:	000099fd 	.word	0x000099fd
    8be4:	00008599 	.word	0x00008599
    8be8:	000089e5 	.word	0x000089e5
    8bec:	00009ab1 	.word	0x00009ab1

00008bf0 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
    8bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8bf2:	b08f      	sub	sp, #60	; 0x3c
    8bf4:	0005      	movs	r5, r0
    8bf6:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
    8bf8:	2300      	movs	r3, #0
    8bfa:	930a      	str	r3, [sp, #40]	; 0x28
    8bfc:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
    8bfe:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
    8c00:	6a03      	ldr	r3, [r0, #32]
    8c02:	2b00      	cmp	r3, #0
    8c04:	d062      	beq.n	8ccc <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
    8c06:	a80c      	add	r0, sp, #48	; 0x30
    8c08:	4b36      	ldr	r3, [pc, #216]	; (8ce4 <MQTTPublish+0xf4>)
    8c0a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    8c0c:	6869      	ldr	r1, [r5, #4]
    8c0e:	a80c      	add	r0, sp, #48	; 0x30
    8c10:	4b35      	ldr	r3, [pc, #212]	; (8ce8 <MQTTPublish+0xf8>)
    8c12:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
    8c14:	7823      	ldrb	r3, [r4, #0]
    8c16:	3b01      	subs	r3, #1
    8c18:	2b01      	cmp	r3, #1
    8c1a:	d921      	bls.n	8c60 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
    8c1c:	7823      	ldrb	r3, [r4, #0]
    8c1e:	68e2      	ldr	r2, [r4, #12]
    8c20:	9206      	str	r2, [sp, #24]
    8c22:	68a2      	ldr	r2, [r4, #8]
    8c24:	9205      	str	r2, [sp, #20]
    8c26:	aa09      	add	r2, sp, #36	; 0x24
    8c28:	a902      	add	r1, sp, #8
    8c2a:	cac1      	ldmia	r2!, {r0, r6, r7}
    8c2c:	c1c1      	stmia	r1!, {r0, r6, r7}
    8c2e:	88a2      	ldrh	r2, [r4, #4]
    8c30:	9201      	str	r2, [sp, #4]
    8c32:	7862      	ldrb	r2, [r4, #1]
    8c34:	9200      	str	r2, [sp, #0]
    8c36:	2200      	movs	r2, #0
    8c38:	68a9      	ldr	r1, [r5, #8]
    8c3a:	6928      	ldr	r0, [r5, #16]
    8c3c:	4e2b      	ldr	r6, [pc, #172]	; (8cec <MQTTPublish+0xfc>)
    8c3e:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
    8c40:	2800      	cmp	r0, #0
    8c42:	dd46      	ble.n	8cd2 <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
    8c44:	aa0c      	add	r2, sp, #48	; 0x30
    8c46:	0001      	movs	r1, r0
    8c48:	0028      	movs	r0, r5
    8c4a:	4b29      	ldr	r3, [pc, #164]	; (8cf0 <MQTTPublish+0x100>)
    8c4c:	4798      	blx	r3
    8c4e:	2800      	cmp	r0, #0
    8c50:	d104      	bne.n	8c5c <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
    8c52:	7823      	ldrb	r3, [r4, #0]
    8c54:	2b01      	cmp	r3, #1
    8c56:	d00d      	beq.n	8c74 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
    8c58:	2b02      	cmp	r3, #2
    8c5a:	d021      	beq.n	8ca0 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    8c5c:	b00f      	add	sp, #60	; 0x3c
    8c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    8c60:	682b      	ldr	r3, [r5, #0]
    8c62:	4a24      	ldr	r2, [pc, #144]	; (8cf4 <MQTTPublish+0x104>)
    8c64:	4293      	cmp	r3, r2
    8c66:	d003      	beq.n	8c70 <MQTTPublish+0x80>
    8c68:	3301      	adds	r3, #1
    8c6a:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
    8c6c:	80a3      	strh	r3, [r4, #4]
    8c6e:	e7d5      	b.n	8c1c <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    8c70:	2301      	movs	r3, #1
    8c72:	e7fa      	b.n	8c6a <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
    8c74:	aa0c      	add	r2, sp, #48	; 0x30
    8c76:	2104      	movs	r1, #4
    8c78:	0028      	movs	r0, r5
    8c7a:	4b1f      	ldr	r3, [pc, #124]	; (8cf8 <MQTTPublish+0x108>)
    8c7c:	4798      	blx	r3
    8c7e:	2804      	cmp	r0, #4
    8c80:	d12a      	bne.n	8cd8 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    8c82:	696b      	ldr	r3, [r5, #20]
    8c84:	68ea      	ldr	r2, [r5, #12]
    8c86:	9200      	str	r2, [sp, #0]
    8c88:	2222      	movs	r2, #34	; 0x22
    8c8a:	446a      	add	r2, sp
    8c8c:	a908      	add	r1, sp, #32
    8c8e:	301d      	adds	r0, #29
    8c90:	4468      	add	r0, sp
    8c92:	4c1a      	ldr	r4, [pc, #104]	; (8cfc <MQTTPublish+0x10c>)
    8c94:	47a0      	blx	r4
    8c96:	3801      	subs	r0, #1
    8c98:	1e43      	subs	r3, r0, #1
    8c9a:	4198      	sbcs	r0, r3
    8c9c:	4240      	negs	r0, r0
    8c9e:	e7dd      	b.n	8c5c <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
    8ca0:	aa0c      	add	r2, sp, #48	; 0x30
    8ca2:	2107      	movs	r1, #7
    8ca4:	0028      	movs	r0, r5
    8ca6:	4b14      	ldr	r3, [pc, #80]	; (8cf8 <MQTTPublish+0x108>)
    8ca8:	4798      	blx	r3
    8caa:	2807      	cmp	r0, #7
    8cac:	d117      	bne.n	8cde <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    8cae:	696b      	ldr	r3, [r5, #20]
    8cb0:	68ea      	ldr	r2, [r5, #12]
    8cb2:	9200      	str	r2, [sp, #0]
    8cb4:	2222      	movs	r2, #34	; 0x22
    8cb6:	446a      	add	r2, sp
    8cb8:	a908      	add	r1, sp, #32
    8cba:	301a      	adds	r0, #26
    8cbc:	4468      	add	r0, sp
    8cbe:	4c0f      	ldr	r4, [pc, #60]	; (8cfc <MQTTPublish+0x10c>)
    8cc0:	47a0      	blx	r4
    8cc2:	3801      	subs	r0, #1
    8cc4:	1e43      	subs	r3, r0, #1
    8cc6:	4198      	sbcs	r0, r3
    8cc8:	4240      	negs	r0, r0
    8cca:	e7c7      	b.n	8c5c <MQTTPublish+0x6c>
    int rc = FAILURE;
    8ccc:	2001      	movs	r0, #1
    8cce:	4240      	negs	r0, r0
    8cd0:	e7c4      	b.n	8c5c <MQTTPublish+0x6c>
    8cd2:	2001      	movs	r0, #1
    8cd4:	4240      	negs	r0, r0
    8cd6:	e7c1      	b.n	8c5c <MQTTPublish+0x6c>
            rc = FAILURE;
    8cd8:	2001      	movs	r0, #1
    8cda:	4240      	negs	r0, r0
    8cdc:	e7be      	b.n	8c5c <MQTTPublish+0x6c>
            rc = FAILURE;
    8cde:	2001      	movs	r0, #1
    8ce0:	4240      	negs	r0, r0
    return rc;
    8ce2:	e7bb      	b.n	8c5c <MQTTPublish+0x6c>
    8ce4:	00008f5d 	.word	0x00008f5d
    8ce8:	00008f25 	.word	0x00008f25
    8cec:	0000989d 	.word	0x0000989d
    8cf0:	00008599 	.word	0x00008599
    8cf4:	0000ffff 	.word	0x0000ffff
    8cf8:	000089e5 	.word	0x000089e5
    8cfc:	000095c1 	.word	0x000095c1

00008d00 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
    8d00:	b510      	push	{r4, lr}
    8d02:	b082      	sub	sp, #8
    8d04:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
    8d06:	4668      	mov	r0, sp
    8d08:	4b0b      	ldr	r3, [pc, #44]	; (8d38 <MQTTDisconnect+0x38>)
    8d0a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    8d0c:	6861      	ldr	r1, [r4, #4]
    8d0e:	4668      	mov	r0, sp
    8d10:	4b0a      	ldr	r3, [pc, #40]	; (8d3c <MQTTDisconnect+0x3c>)
    8d12:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
    8d14:	68a1      	ldr	r1, [r4, #8]
    8d16:	6920      	ldr	r0, [r4, #16]
    8d18:	4b09      	ldr	r3, [pc, #36]	; (8d40 <MQTTDisconnect+0x40>)
    8d1a:	4798      	blx	r3
    if (len > 0)
    8d1c:	2800      	cmp	r0, #0
    8d1e:	dd08      	ble.n	8d32 <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
    8d20:	466a      	mov	r2, sp
    8d22:	0001      	movs	r1, r0
    8d24:	0020      	movs	r0, r4
    8d26:	4b07      	ldr	r3, [pc, #28]	; (8d44 <MQTTDisconnect+0x44>)
    8d28:	4798      	blx	r3
        
    c->isconnected = 0;
    8d2a:	2300      	movs	r3, #0
    8d2c:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    8d2e:	b002      	add	sp, #8
    8d30:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
    8d32:	2001      	movs	r0, #1
    8d34:	4240      	negs	r0, r0
    8d36:	e7f8      	b.n	8d2a <MQTTDisconnect+0x2a>
    8d38:	00008f5d 	.word	0x00008f5d
    8d3c:	00008f25 	.word	0x00008f25
    8d40:	00009509 	.word	0x00009509
    8d44:	00008599 	.word	0x00008599

00008d48 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
    8d48:	b510      	push	{r4, lr}
    8d4a:	0004      	movs	r4, r0
	close(n->socket);
    8d4c:	2000      	movs	r0, #0
    8d4e:	5620      	ldrsb	r0, [r4, r0]
    8d50:	4b04      	ldr	r3, [pc, #16]	; (8d64 <WINC1500_disconnect+0x1c>)
    8d52:	4798      	blx	r3
	n->socket=-1;
    8d54:	2301      	movs	r3, #1
    8d56:	425b      	negs	r3, r3
    8d58:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
    8d5a:	2200      	movs	r2, #0
    8d5c:	4b02      	ldr	r3, [pc, #8]	; (8d68 <WINC1500_disconnect+0x20>)
    8d5e:	701a      	strb	r2, [r3, #0]
}
    8d60:	bd10      	pop	{r4, pc}
    8d62:	46c0      	nop			; (mov r8, r8)
    8d64:	00004299 	.word	0x00004299
    8d68:	20000444 	.word	0x20000444

00008d6c <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
    8d6c:	b570      	push	{r4, r5, r6, lr}
    8d6e:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
    8d70:	2200      	movs	r2, #0
    8d72:	4b0d      	ldr	r3, [pc, #52]	; (8da8 <WINC1500_write+0x3c>)
    8d74:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
    8d76:	b2b2      	uxth	r2, r6
    8d78:	7800      	ldrb	r0, [r0, #0]
    8d7a:	b240      	sxtb	r0, r0
    8d7c:	2300      	movs	r3, #0
    8d7e:	4c0b      	ldr	r4, [pc, #44]	; (8dac <WINC1500_write+0x40>)
    8d80:	47a0      	blx	r4
    8d82:	2800      	cmp	r0, #0
    8d84:	d10c      	bne.n	8da0 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
    8d86:	4b08      	ldr	r3, [pc, #32]	; (8da8 <WINC1500_write+0x3c>)
    8d88:	781b      	ldrb	r3, [r3, #0]
    8d8a:	2b00      	cmp	r3, #0
    8d8c:	d106      	bne.n	8d9c <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
    8d8e:	4d08      	ldr	r5, [pc, #32]	; (8db0 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
    8d90:	4c05      	ldr	r4, [pc, #20]	; (8da8 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
    8d92:	2000      	movs	r0, #0
    8d94:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
    8d96:	7823      	ldrb	r3, [r4, #0]
    8d98:	2b00      	cmp	r3, #0
    8d9a:	d0fa      	beq.n	8d92 <WINC1500_write+0x26>
}
    8d9c:	0030      	movs	r0, r6
    8d9e:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
    8da0:	2601      	movs	r6, #1
    8da2:	4276      	negs	r6, r6
    8da4:	e7fa      	b.n	8d9c <WINC1500_write+0x30>
    8da6:	46c0      	nop			; (mov r8, r8)
    8da8:	20000447 	.word	0x20000447
    8dac:	0000416d 	.word	0x0000416d
    8db0:	000023d1 	.word	0x000023d1

00008db4 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
    8db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8db6:	b083      	sub	sp, #12
    8db8:	9101      	str	r1, [sp, #4]
    8dba:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
    8dbc:	2b00      	cmp	r3, #0
    8dbe:	d100      	bne.n	8dc2 <WINC1500_read+0xe>
    8dc0:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
    8dc2:	4a22      	ldr	r2, [pc, #136]	; (8e4c <WINC1500_read+0x98>)
    8dc4:	6812      	ldr	r2, [r2, #0]
    8dc6:	2a00      	cmp	r2, #0
    8dc8:	d013      	beq.n	8df2 <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
    8dca:	4b20      	ldr	r3, [pc, #128]	; (8e4c <WINC1500_read+0x98>)
    8dcc:	681d      	ldr	r5, [r3, #0]
    8dce:	42a5      	cmp	r5, r4
    8dd0:	db39      	blt.n	8e46 <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
    8dd2:	4e1f      	ldr	r6, [pc, #124]	; (8e50 <WINC1500_read+0x9c>)
    8dd4:	6837      	ldr	r7, [r6, #0]
    8dd6:	491f      	ldr	r1, [pc, #124]	; (8e54 <WINC1500_read+0xa0>)
    8dd8:	19c9      	adds	r1, r1, r7
    8dda:	0022      	movs	r2, r4
    8ddc:	9801      	ldr	r0, [sp, #4]
    8dde:	4b1e      	ldr	r3, [pc, #120]	; (8e58 <WINC1500_read+0xa4>)
    8de0:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
    8de2:	1b2d      	subs	r5, r5, r4
    8de4:	4b19      	ldr	r3, [pc, #100]	; (8e4c <WINC1500_read+0x98>)
    8de6:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
    8de8:	193f      	adds	r7, r7, r4
    8dea:	6037      	str	r7, [r6, #0]
  return len;
    8dec:	0020      	movs	r0, r4
}
    8dee:	b003      	add	sp, #12
    8df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
    8df2:	2100      	movs	r1, #0
    8df4:	4a19      	ldr	r2, [pc, #100]	; (8e5c <WINC1500_read+0xa8>)
    8df6:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
    8df8:	7800      	ldrb	r0, [r0, #0]
    8dfa:	b240      	sxtb	r0, r0
    8dfc:	2280      	movs	r2, #128	; 0x80
    8dfe:	0052      	lsls	r2, r2, #1
    8e00:	4914      	ldr	r1, [pc, #80]	; (8e54 <WINC1500_read+0xa0>)
    8e02:	4d17      	ldr	r5, [pc, #92]	; (8e60 <WINC1500_read+0xac>)
    8e04:	47a8      	blx	r5
    8e06:	2800      	cmp	r0, #0
    8e08:	d11a      	bne.n	8e40 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
    8e0a:	4b14      	ldr	r3, [pc, #80]	; (8e5c <WINC1500_read+0xa8>)
    8e0c:	781b      	ldrb	r3, [r3, #0]
    8e0e:	2b00      	cmp	r3, #0
    8e10:	d106      	bne.n	8e20 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
    8e12:	4f14      	ldr	r7, [pc, #80]	; (8e64 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
    8e14:	4d11      	ldr	r5, [pc, #68]	; (8e5c <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
    8e16:	2000      	movs	r0, #0
    8e18:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
    8e1a:	782b      	ldrb	r3, [r5, #0]
    8e1c:	2b00      	cmp	r3, #0
    8e1e:	d0fa      	beq.n	8e16 <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
    8e20:	4b11      	ldr	r3, [pc, #68]	; (8e68 <WINC1500_read+0xb4>)
    8e22:	6818      	ldr	r0, [r3, #0]
    8e24:	2800      	cmp	r0, #0
    8e26:	dd05      	ble.n	8e34 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
    8e28:	4b08      	ldr	r3, [pc, #32]	; (8e4c <WINC1500_read+0x98>)
    8e2a:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
    8e2c:	2200      	movs	r2, #0
    8e2e:	4b08      	ldr	r3, [pc, #32]	; (8e50 <WINC1500_read+0x9c>)
    8e30:	601a      	str	r2, [r3, #0]
    8e32:	e7ca      	b.n	8dca <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
    8e34:	2300      	movs	r3, #0
    8e36:	4a05      	ldr	r2, [pc, #20]	; (8e4c <WINC1500_read+0x98>)
    8e38:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
    8e3a:	4a05      	ldr	r2, [pc, #20]	; (8e50 <WINC1500_read+0x9c>)
    8e3c:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
    8e3e:	e7d6      	b.n	8dee <WINC1500_read+0x3a>
		  return -1;
    8e40:	2001      	movs	r0, #1
    8e42:	4240      	negs	r0, r0
    8e44:	e7d3      	b.n	8dee <WINC1500_read+0x3a>
	  return -1;
    8e46:	2001      	movs	r0, #1
    8e48:	4240      	negs	r0, r0
    8e4a:	e7d0      	b.n	8dee <WINC1500_read+0x3a>
    8e4c:	20000554 	.word	0x20000554
    8e50:	20000558 	.word	0x20000558
    8e54:	20000448 	.word	0x20000448
    8e58:	0000bd79 	.word	0x0000bd79
    8e5c:	20000446 	.word	0x20000446
    8e60:	00004205 	.word	0x00004205
    8e64:	000023d1 	.word	0x000023d1
    8e68:	2000054c 	.word	0x2000054c

00008e6c <dnsResolveCallback>:
{
    8e6c:	b510      	push	{r4, lr}
    8e6e:	0002      	movs	r2, r0
    8e70:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
    8e72:	4b08      	ldr	r3, [pc, #32]	; (8e94 <dnsResolveCallback+0x28>)
    8e74:	781b      	ldrb	r3, [r3, #0]
    8e76:	2b00      	cmp	r3, #0
    8e78:	d10b      	bne.n	8e92 <dnsResolveCallback+0x26>
    8e7a:	4b07      	ldr	r3, [pc, #28]	; (8e98 <dnsResolveCallback+0x2c>)
    8e7c:	6818      	ldr	r0, [r3, #0]
    8e7e:	0011      	movs	r1, r2
    8e80:	4b06      	ldr	r3, [pc, #24]	; (8e9c <dnsResolveCallback+0x30>)
    8e82:	4798      	blx	r3
    8e84:	2800      	cmp	r0, #0
    8e86:	d104      	bne.n	8e92 <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
    8e88:	4b05      	ldr	r3, [pc, #20]	; (8ea0 <dnsResolveCallback+0x34>)
    8e8a:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
    8e8c:	2201      	movs	r2, #1
    8e8e:	4b01      	ldr	r3, [pc, #4]	; (8e94 <dnsResolveCallback+0x28>)
    8e90:	701a      	strb	r2, [r3, #0]
}
    8e92:	bd10      	pop	{r4, pc}
    8e94:	20000445 	.word	0x20000445
    8e98:	20000550 	.word	0x20000550
    8e9c:	0000c279 	.word	0x0000c279
    8ea0:	20000548 	.word	0x20000548

00008ea4 <tcpClientSocketEventHandler>:
{
    8ea4:	b530      	push	{r4, r5, lr}
    8ea6:	4b12      	ldr	r3, [pc, #72]	; (8ef0 <tcpClientSocketEventHandler+0x4c>)
    8ea8:	24a8      	movs	r4, #168	; 0xa8
    8eaa:	00a4      	lsls	r4, r4, #2
    8eac:	191d      	adds	r5, r3, r4
    8eae:	e002      	b.n	8eb6 <tcpClientSocketEventHandler+0x12>
    8eb0:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    8eb2:	42ab      	cmp	r3, r5
    8eb4:	d00b      	beq.n	8ece <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
    8eb6:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    8eb8:	2c00      	cmp	r4, #0
    8eba:	d0f9      	beq.n	8eb0 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
    8ebc:	6a24      	ldr	r4, [r4, #32]
    8ebe:	4284      	cmp	r4, r0
    8ec0:	d1f6      	bne.n	8eb0 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
    8ec2:	2906      	cmp	r1, #6
    8ec4:	d00c      	beq.n	8ee0 <tcpClientSocketEventHandler+0x3c>
    8ec6:	2907      	cmp	r1, #7
    8ec8:	d006      	beq.n	8ed8 <tcpClientSocketEventHandler+0x34>
    8eca:	2905      	cmp	r1, #5
    8ecc:	d000      	beq.n	8ed0 <tcpClientSocketEventHandler+0x2c>
}
    8ece:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
    8ed0:	2201      	movs	r2, #1
    8ed2:	4b08      	ldr	r3, [pc, #32]	; (8ef4 <tcpClientSocketEventHandler+0x50>)
    8ed4:	701a      	strb	r2, [r3, #0]
			break;
    8ed6:	e7fa      	b.n	8ece <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
    8ed8:	2201      	movs	r2, #1
    8eda:	4b07      	ldr	r3, [pc, #28]	; (8ef8 <tcpClientSocketEventHandler+0x54>)
    8edc:	701a      	strb	r2, [r3, #0]
			break;
    8ede:	e7f6      	b.n	8ece <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
    8ee0:	2304      	movs	r3, #4
    8ee2:	5ed2      	ldrsh	r2, [r2, r3]
    8ee4:	4b05      	ldr	r3, [pc, #20]	; (8efc <tcpClientSocketEventHandler+0x58>)
    8ee6:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
    8ee8:	2201      	movs	r2, #1
    8eea:	4b05      	ldr	r3, [pc, #20]	; (8f00 <tcpClientSocketEventHandler+0x5c>)
    8eec:	701a      	strb	r2, [r3, #0]
}
    8eee:	e7ee      	b.n	8ece <tcpClientSocketEventHandler+0x2a>
    8ef0:	2000055c 	.word	0x2000055c
    8ef4:	20000444 	.word	0x20000444
    8ef8:	20000447 	.word	0x20000447
    8efc:	2000054c 	.word	0x2000054c
    8f00:	20000446 	.word	0x20000446

00008f04 <SysTick_Handler>:
	MilliTimer++;
    8f04:	4a02      	ldr	r2, [pc, #8]	; (8f10 <SysTick_Handler+0xc>)
    8f06:	6813      	ldr	r3, [r2, #0]
    8f08:	3301      	adds	r3, #1
    8f0a:	6013      	str	r3, [r2, #0]
}
    8f0c:	4770      	bx	lr
    8f0e:	46c0      	nop			; (mov r8, r8)
    8f10:	20000440 	.word	0x20000440

00008f14 <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
    8f14:	6840      	ldr	r0, [r0, #4]
    8f16:	4b02      	ldr	r3, [pc, #8]	; (8f20 <TimerIsExpired+0xc>)
    8f18:	681b      	ldr	r3, [r3, #0]
    8f1a:	1ac0      	subs	r0, r0, r3
	return (left < 0);
    8f1c:	0fc0      	lsrs	r0, r0, #31
}
    8f1e:	4770      	bx	lr
    8f20:	20000440 	.word	0x20000440

00008f24 <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
    8f24:	4b02      	ldr	r3, [pc, #8]	; (8f30 <TimerCountdownMS+0xc>)
    8f26:	681b      	ldr	r3, [r3, #0]
    8f28:	1859      	adds	r1, r3, r1
    8f2a:	6041      	str	r1, [r0, #4]
}
    8f2c:	4770      	bx	lr
    8f2e:	46c0      	nop			; (mov r8, r8)
    8f30:	20000440 	.word	0x20000440

00008f34 <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
    8f34:	23fa      	movs	r3, #250	; 0xfa
    8f36:	009b      	lsls	r3, r3, #2
    8f38:	4359      	muls	r1, r3
    8f3a:	4b02      	ldr	r3, [pc, #8]	; (8f44 <TimerCountdown+0x10>)
    8f3c:	681b      	ldr	r3, [r3, #0]
    8f3e:	18c9      	adds	r1, r1, r3
    8f40:	6041      	str	r1, [r0, #4]
}
    8f42:	4770      	bx	lr
    8f44:	20000440 	.word	0x20000440

00008f48 <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
    8f48:	6840      	ldr	r0, [r0, #4]
    8f4a:	4b03      	ldr	r3, [pc, #12]	; (8f58 <TimerLeftMS+0x10>)
    8f4c:	681b      	ldr	r3, [r3, #0]
    8f4e:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
    8f50:	43c3      	mvns	r3, r0
    8f52:	17db      	asrs	r3, r3, #31
    8f54:	4018      	ands	r0, r3
}
    8f56:	4770      	bx	lr
    8f58:	20000440 	.word	0x20000440

00008f5c <TimerInit>:
	timer->end_time = 0;
    8f5c:	2300      	movs	r3, #0
    8f5e:	6043      	str	r3, [r0, #4]
}
    8f60:	4770      	bx	lr
	...

00008f64 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
    8f64:	2301      	movs	r3, #1
    8f66:	425b      	negs	r3, r3
    8f68:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
    8f6a:	4b03      	ldr	r3, [pc, #12]	; (8f78 <NetworkInit+0x14>)
    8f6c:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
    8f6e:	4b03      	ldr	r3, [pc, #12]	; (8f7c <NetworkInit+0x18>)
    8f70:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
    8f72:	4b03      	ldr	r3, [pc, #12]	; (8f80 <NetworkInit+0x1c>)
    8f74:	6103      	str	r3, [r0, #16]
}
    8f76:	4770      	bx	lr
    8f78:	00008db5 	.word	0x00008db5
    8f7c:	00008d6d 	.word	0x00008d6d
    8f80:	00008d49 	.word	0x00008d49

00008f84 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
    8f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f86:	b087      	sub	sp, #28
    8f88:	0006      	movs	r6, r0
    8f8a:	0015      	movs	r5, r2
    8f8c:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
    8f8e:	4c25      	ldr	r4, [pc, #148]	; (9024 <ConnectNetwork+0xa0>)
    8f90:	2300      	movs	r3, #0
    8f92:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
    8f94:	4b24      	ldr	r3, [pc, #144]	; (9028 <ConnectNetwork+0xa4>)
    8f96:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
    8f98:	0008      	movs	r0, r1
    8f9a:	4b24      	ldr	r3, [pc, #144]	; (902c <ConnectNetwork+0xa8>)
    8f9c:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
    8f9e:	7823      	ldrb	r3, [r4, #0]
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	d106      	bne.n	8fb2 <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
    8fa4:	4f22      	ldr	r7, [pc, #136]	; (9030 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
    8fa6:	4c1f      	ldr	r4, [pc, #124]	; (9024 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
    8fa8:	2000      	movs	r0, #0
    8faa:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
    8fac:	7823      	ldrb	r3, [r4, #0]
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d0fa      	beq.n	8fa8 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
    8fb2:	4b20      	ldr	r3, [pc, #128]	; (9034 <ConnectNetwork+0xb0>)
    8fb4:	681a      	ldr	r2, [r3, #0]
    8fb6:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
    8fb8:	2302      	movs	r3, #2
    8fba:	a902      	add	r1, sp, #8
    8fbc:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
    8fbe:	022b      	lsls	r3, r5, #8
    8fc0:	491d      	ldr	r1, [pc, #116]	; (9038 <ConnectNetwork+0xb4>)
    8fc2:	400b      	ands	r3, r1
    8fc4:	b2ad      	uxth	r5, r5
    8fc6:	0a2d      	lsrs	r5, r5, #8
    8fc8:	431d      	orrs	r5, r3
    8fca:	ab02      	add	r3, sp, #8
    8fcc:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
    8fce:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
    8fd0:	6833      	ldr	r3, [r6, #0]
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	db16      	blt.n	9004 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
    8fd6:	6830      	ldr	r0, [r6, #0]
    8fd8:	1c43      	adds	r3, r0, #1
    8fda:	d01b      	beq.n	9014 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
    8fdc:	b240      	sxtb	r0, r0
    8fde:	2210      	movs	r2, #16
    8fe0:	a902      	add	r1, sp, #8
    8fe2:	4b16      	ldr	r3, [pc, #88]	; (903c <ConnectNetwork+0xb8>)
    8fe4:	4798      	blx	r3
    8fe6:	2800      	cmp	r0, #0
    8fe8:	d119      	bne.n	901e <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
    8fea:	2200      	movs	r2, #0
    8fec:	4b14      	ldr	r3, [pc, #80]	; (9040 <ConnectNetwork+0xbc>)
    8fee:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
    8ff0:	4d0f      	ldr	r5, [pc, #60]	; (9030 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
    8ff2:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
    8ff4:	2000      	movs	r0, #0
    8ff6:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
    8ff8:	7823      	ldrb	r3, [r4, #0]
    8ffa:	2b00      	cmp	r3, #0
    8ffc:	d0fa      	beq.n	8ff4 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
    8ffe:	2000      	movs	r0, #0
    9000:	b007      	add	sp, #28
    9002:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
    9004:	466b      	mov	r3, sp
    9006:	791a      	ldrb	r2, [r3, #4]
    9008:	2101      	movs	r1, #1
    900a:	2002      	movs	r0, #2
    900c:	4b0d      	ldr	r3, [pc, #52]	; (9044 <ConnectNetwork+0xc0>)
    900e:	4798      	blx	r3
    9010:	6030      	str	r0, [r6, #0]
    9012:	e7e0      	b.n	8fd6 <ConnectNetwork+0x52>
   close(n->socket);
    9014:	4b0c      	ldr	r3, [pc, #48]	; (9048 <ConnectNetwork+0xc4>)
    9016:	4798      	blx	r3
   return SOCK_ERR_INVALID;
    9018:	2009      	movs	r0, #9
    901a:	4240      	negs	r0, r0
    901c:	e7f0      	b.n	9000 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
    901e:	2009      	movs	r0, #9
    9020:	4240      	negs	r0, r0
    9022:	e7ed      	b.n	9000 <ConnectNetwork+0x7c>
    9024:	20000445 	.word	0x20000445
    9028:	20000550 	.word	0x20000550
    902c:	000043a1 	.word	0x000043a1
    9030:	000023d1 	.word	0x000023d1
    9034:	20000548 	.word	0x20000548
    9038:	00ffff00 	.word	0x00ffff00
    903c:	000040dd 	.word	0x000040dd
    9040:	20000444 	.word	0x20000444
    9044:	00003f59 	.word	0x00003f59
    9048:	00004299 	.word	0x00004299

0000904c <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
    904c:	b5f0      	push	{r4, r5, r6, r7, lr}
    904e:	b085      	sub	sp, #20
    9050:	0006      	movs	r6, r0
    9052:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
    9054:	2800      	cmp	r0, #0
    9056:	d03d      	beq.n	90d4 <mqtt_init+0x88>
    9058:	2900      	cmp	r1, #0
    905a:	d03e      	beq.n	90da <mqtt_init+0x8e>
    905c:	690b      	ldr	r3, [r1, #16]
    905e:	2b00      	cmp	r3, #0
    9060:	d03e      	beq.n	90e0 <mqtt_init+0x94>
    9062:	688b      	ldr	r3, [r1, #8]
    9064:	2b00      	cmp	r3, #0
    9066:	d03e      	beq.n	90e6 <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
    9068:	888b      	ldrh	r3, [r1, #4]
    906a:	27fa      	movs	r7, #250	; 0xfa
    906c:	00bf      	lsls	r7, r7, #2
    906e:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
    9070:	0004      	movs	r4, r0
    9072:	3420      	adds	r4, #32
    9074:	0020      	movs	r0, r4
    9076:	4b1f      	ldr	r3, [pc, #124]	; (90f4 <mqtt_init+0xa8>)
    9078:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
    907a:	1d30      	adds	r0, r6, #4
    907c:	2218      	movs	r2, #24
    907e:	0029      	movs	r1, r5
    9080:	4b1d      	ldr	r3, [pc, #116]	; (90f8 <mqtt_init+0xac>)
    9082:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    9084:	4b1d      	ldr	r3, [pc, #116]	; (90fc <mqtt_init+0xb0>)
    9086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    9088:	2b00      	cmp	r3, #0
    908a:	d01a      	beq.n	90c2 <mqtt_init+0x76>
    908c:	4b1b      	ldr	r3, [pc, #108]	; (90fc <mqtt_init+0xb0>)
    908e:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    9090:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    9092:	6819      	ldr	r1, [r3, #0]
    9094:	2900      	cmp	r1, #0
    9096:	d015      	beq.n	90c4 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    9098:	3201      	adds	r2, #1
    909a:	3360      	adds	r3, #96	; 0x60
    909c:	2a07      	cmp	r2, #7
    909e:	d1f8      	bne.n	9092 <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
    90a0:	69f0      	ldr	r0, [r6, #28]
    90a2:	2800      	cmp	r0, #0
    90a4:	d022      	beq.n	90ec <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
    90a6:	692b      	ldr	r3, [r5, #16]
    90a8:	68ea      	ldr	r2, [r5, #12]
    90aa:	9202      	str	r2, [sp, #8]
    90ac:	68aa      	ldr	r2, [r5, #8]
    90ae:	9201      	str	r2, [sp, #4]
    90b0:	696a      	ldr	r2, [r5, #20]
    90b2:	9200      	str	r2, [sp, #0]
    90b4:	003a      	movs	r2, r7
    90b6:	0021      	movs	r1, r4
    90b8:	4c11      	ldr	r4, [pc, #68]	; (9100 <mqtt_init+0xb4>)
    90ba:	47a0      	blx	r4
		return SUCCESS;
    90bc:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
    90be:	b005      	add	sp, #20
    90c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    90c2:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
    90c4:	480d      	ldr	r0, [pc, #52]	; (90fc <mqtt_init+0xb0>)
    90c6:	0053      	lsls	r3, r2, #1
    90c8:	1899      	adds	r1, r3, r2
    90ca:	0149      	lsls	r1, r1, #5
    90cc:	1841      	adds	r1, r0, r1
    90ce:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
    90d0:	61f1      	str	r1, [r6, #28]
    90d2:	e7e5      	b.n	90a0 <mqtt_init+0x54>
		return FAILURE;
    90d4:	2001      	movs	r0, #1
    90d6:	4240      	negs	r0, r0
    90d8:	e7f1      	b.n	90be <mqtt_init+0x72>
    90da:	2001      	movs	r0, #1
    90dc:	4240      	negs	r0, r0
    90de:	e7ee      	b.n	90be <mqtt_init+0x72>
    90e0:	2001      	movs	r0, #1
    90e2:	4240      	negs	r0, r0
    90e4:	e7eb      	b.n	90be <mqtt_init+0x72>
    90e6:	2001      	movs	r0, #1
    90e8:	4240      	negs	r0, r0
    90ea:	e7e8      	b.n	90be <mqtt_init+0x72>
		return FAILURE;
    90ec:	2001      	movs	r0, #1
    90ee:	4240      	negs	r0, r0
    90f0:	e7e5      	b.n	90be <mqtt_init+0x72>
    90f2:	46c0      	nop			; (mov r8, r8)
    90f4:	00008f65 	.word	0x00008f65
    90f8:	0000bd79 	.word	0x0000bd79
    90fc:	2000055c 	.word	0x2000055c
    9100:	00008615 	.word	0x00008615

00009104 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
    9104:	4b05      	ldr	r3, [pc, #20]	; (911c <mqtt_get_config_defaults+0x18>)
    9106:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    9108:	2300      	movs	r3, #0
    910a:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
    910c:	223c      	movs	r2, #60	; 0x3c
    910e:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
    9110:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
    9112:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
    9114:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
    9116:	6143      	str	r3, [r0, #20]
}
    9118:	4770      	bx	lr
    911a:	46c0      	nop			; (mov r8, r8)
    911c:	0000075b 	.word	0x0000075b

00009120 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
    9120:	2800      	cmp	r0, #0
    9122:	d002      	beq.n	912a <mqtt_register_callback+0xa>
	{
		module->callback = callback;
    9124:	6001      	str	r1, [r0, #0]
		return SUCCESS;
    9126:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
    9128:	4770      	bx	lr
		return FAILURE;
    912a:	2001      	movs	r0, #1
    912c:	4240      	negs	r0, r0
    912e:	e7fb      	b.n	9128 <mqtt_register_callback+0x8>

00009130 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    9130:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
    9132:	4b01      	ldr	r3, [pc, #4]	; (9138 <mqtt_socket_event_handler+0x8>)
    9134:	4798      	blx	r3
}
    9136:	bd10      	pop	{r4, pc}
    9138:	00008ea5 	.word	0x00008ea5

0000913c <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
    913c:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
    913e:	4b01      	ldr	r3, [pc, #4]	; (9144 <mqtt_socket_resolve_handler+0x8>)
    9140:	4798      	blx	r3
}
    9142:	bd10      	pop	{r4, pc}
    9144:	00008e6d 	.word	0x00008e6d

00009148 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
    9148:	b530      	push	{r4, r5, lr}
    914a:	b083      	sub	sp, #12
    914c:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
    914e:	7983      	ldrb	r3, [r0, #6]
    9150:	8882      	ldrh	r2, [r0, #4]
    9152:	3020      	adds	r0, #32
    9154:	4d06      	ldr	r5, [pc, #24]	; (9170 <mqtt_connect+0x28>)
    9156:	47a8      	blx	r5
    9158:	9001      	str	r0, [sp, #4]
	if(module->callback)
    915a:	6823      	ldr	r3, [r4, #0]
    915c:	2b00      	cmp	r3, #0
    915e:	d003      	beq.n	9168 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
    9160:	aa01      	add	r2, sp, #4
    9162:	2100      	movs	r1, #0
    9164:	0020      	movs	r0, r4
    9166:	4798      	blx	r3
	return connResult.sock_connected.result;
}
    9168:	9801      	ldr	r0, [sp, #4]
    916a:	b003      	add	sp, #12
    916c:	bd30      	pop	{r4, r5, pc}
    916e:	46c0      	nop			; (mov r8, r8)
    9170:	00008f85 	.word	0x00008f85

00009174 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
    9174:	b5f0      	push	{r4, r5, r6, r7, lr}
    9176:	46de      	mov	lr, fp
    9178:	4657      	mov	r7, sl
    917a:	464e      	mov	r6, r9
    917c:	b5c0      	push	{r6, r7, lr}
    917e:	b098      	sub	sp, #96	; 0x60
    9180:	0005      	movs	r5, r0
    9182:	4689      	mov	r9, r1
    9184:	4693      	mov	fp, r2
    9186:	469a      	mov	sl, r3
    9188:	ab24      	add	r3, sp, #144	; 0x90
    918a:	781f      	ldrb	r7, [r3, #0]
    918c:	ab25      	add	r3, sp, #148	; 0x94
    918e:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
    9190:	ac01      	add	r4, sp, #4
    9192:	2258      	movs	r2, #88	; 0x58
    9194:	491a      	ldr	r1, [pc, #104]	; (9200 <mqtt_connect_broker+0x8c>)
    9196:	0020      	movs	r0, r4
    9198:	4b1a      	ldr	r3, [pc, #104]	; (9204 <mqtt_connect_broker+0x90>)
    919a:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
    919c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    919e:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
    91a0:	465b      	mov	r3, fp
    91a2:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
    91a4:	4653      	mov	r3, sl
    91a6:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
    91a8:	464b      	mov	r3, r9
    91aa:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
    91ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
    91ae:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
    91b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    91b2:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
    91b4:	233c      	movs	r3, #60	; 0x3c
    91b6:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
    91b8:	3301      	adds	r3, #1
    91ba:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
    91bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    91be:	2b00      	cmp	r3, #0
    91c0:	d005      	beq.n	91ce <mqtt_connect_broker+0x5a>
    91c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    91c4:	2b00      	cmp	r3, #0
    91c6:	d002      	beq.n	91ce <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
    91c8:	2201      	movs	r2, #1
    91ca:	ab01      	add	r3, sp, #4
    91cc:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
    91ce:	a901      	add	r1, sp, #4
    91d0:	69e8      	ldr	r0, [r5, #28]
    91d2:	4b0d      	ldr	r3, [pc, #52]	; (9208 <mqtt_connect_broker+0x94>)
    91d4:	4798      	blx	r3
    91d6:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
    91d8:	ab17      	add	r3, sp, #92	; 0x5c
    91da:	7018      	strb	r0, [r3, #0]
	if(module->callback)
    91dc:	682b      	ldr	r3, [r5, #0]
    91de:	2b00      	cmp	r3, #0
    91e0:	d003      	beq.n	91ea <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
    91e2:	aa17      	add	r2, sp, #92	; 0x5c
    91e4:	2101      	movs	r1, #1
    91e6:	0028      	movs	r0, r5
    91e8:	4798      	blx	r3
	
	module->isConnected = true;
    91ea:	2201      	movs	r2, #1
    91ec:	2334      	movs	r3, #52	; 0x34
    91ee:	54ea      	strb	r2, [r5, r3]
	return rc;
}
    91f0:	0020      	movs	r0, r4
    91f2:	b018      	add	sp, #96	; 0x60
    91f4:	bc1c      	pop	{r2, r3, r4}
    91f6:	4691      	mov	r9, r2
    91f8:	469a      	mov	sl, r3
    91fa:	46a3      	mov	fp, r4
    91fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91fe:	46c0      	nop			; (mov r8, r8)
    9200:	0000ea60 	.word	0x0000ea60
    9204:	0000bd79 	.word	0x0000bd79
    9208:	00008a1d 	.word	0x00008a1d

0000920c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
    920c:	b530      	push	{r4, r5, lr}
    920e:	b083      	sub	sp, #12
    9210:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
    9212:	69c0      	ldr	r0, [r0, #28]
    9214:	4b08      	ldr	r3, [pc, #32]	; (9238 <mqtt_disconnect+0x2c>)
    9216:	4798      	blx	r3
    9218:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
    921a:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
    921c:	6823      	ldr	r3, [r4, #0]
    921e:	2b00      	cmp	r3, #0
    9220:	d003      	beq.n	922a <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
    9222:	aa01      	add	r2, sp, #4
    9224:	2105      	movs	r1, #5
    9226:	0020      	movs	r0, r4
    9228:	4798      	blx	r3
	
	module->isConnected = false;
    922a:	2200      	movs	r2, #0
    922c:	2334      	movs	r3, #52	; 0x34
    922e:	54e2      	strb	r2, [r4, r3]
	return rc;
}
    9230:	0028      	movs	r0, r5
    9232:	b003      	add	sp, #12
    9234:	bd30      	pop	{r4, r5, pc}
    9236:	46c0      	nop			; (mov r8, r8)
    9238:	00008d01 	.word	0x00008d01

0000923c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
    923c:	b570      	push	{r4, r5, r6, lr}
    923e:	b084      	sub	sp, #16
    9240:	0004      	movs	r4, r0
    9242:	a808      	add	r0, sp, #32
    9244:	7805      	ldrb	r5, [r0, #0]
    9246:	a809      	add	r0, sp, #36	; 0x24
    9248:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
    924a:	466e      	mov	r6, sp
    924c:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
    924e:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
    9250:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
    9252:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
    9254:	466a      	mov	r2, sp
    9256:	69e0      	ldr	r0, [r4, #28]
    9258:	4b06      	ldr	r3, [pc, #24]	; (9274 <mqtt_publish+0x38>)
    925a:	4798      	blx	r3
    925c:	0005      	movs	r5, r0
	
	if(module->callback)
    925e:	6823      	ldr	r3, [r4, #0]
    9260:	2b00      	cmp	r3, #0
    9262:	d003      	beq.n	926c <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
    9264:	2200      	movs	r2, #0
    9266:	2102      	movs	r1, #2
    9268:	0020      	movs	r0, r4
    926a:	4798      	blx	r3
	
	return rc;
}
    926c:	0028      	movs	r0, r5
    926e:	b004      	add	sp, #16
    9270:	bd70      	pop	{r4, r5, r6, pc}
    9272:	46c0      	nop			; (mov r8, r8)
    9274:	00008bf1 	.word	0x00008bf1

00009278 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
    9278:	b570      	push	{r4, r5, r6, lr}
    927a:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
    927c:	69c0      	ldr	r0, [r0, #28]
    927e:	4d06      	ldr	r5, [pc, #24]	; (9298 <mqtt_subscribe+0x20>)
    9280:	47a8      	blx	r5
    9282:	0005      	movs	r5, r0
	
	if(module->callback)
    9284:	6823      	ldr	r3, [r4, #0]
    9286:	2b00      	cmp	r3, #0
    9288:	d003      	beq.n	9292 <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
    928a:	2200      	movs	r2, #0
    928c:	2103      	movs	r1, #3
    928e:	0020      	movs	r0, r4
    9290:	4798      	blx	r3
	
	return rc;
}
    9292:	0028      	movs	r0, r5
    9294:	bd70      	pop	{r4, r5, r6, pc}
    9296:	46c0      	nop			; (mov r8, r8)
    9298:	00008aed 	.word	0x00008aed

0000929c <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
    929c:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
    929e:	69c0      	ldr	r0, [r0, #28]
    92a0:	4b01      	ldr	r3, [pc, #4]	; (92a8 <mqtt_yield+0xc>)
    92a2:	4798      	blx	r3
    92a4:	bd10      	pop	{r4, pc}
    92a6:	46c0      	nop			; (mov r8, r8)
    92a8:	000089a1 	.word	0x000089a1

000092ac <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
    92ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92ae:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
    92b0:	7a03      	ldrb	r3, [r0, #8]
    92b2:	2b03      	cmp	r3, #3
    92b4:	d024      	beq.n	9300 <MQTTSerialize_connectLength+0x54>
	int len = 0;
    92b6:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
    92b8:	2b04      	cmp	r3, #4
    92ba:	d01f      	beq.n	92fc <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
    92bc:	68e0      	ldr	r0, [r4, #12]
    92be:	6921      	ldr	r1, [r4, #16]
    92c0:	6962      	ldr	r2, [r4, #20]
    92c2:	4b1b      	ldr	r3, [pc, #108]	; (9330 <MQTTSerialize_connectLength+0x84>)
    92c4:	4798      	blx	r3
    92c6:	1c85      	adds	r5, r0, #2
    92c8:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
    92ca:	7ee3      	ldrb	r3, [r4, #27]
    92cc:	2b00      	cmp	r3, #0
    92ce:	d119      	bne.n	9304 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
    92d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    92d2:	2b00      	cmp	r3, #0
    92d4:	d024      	beq.n	9320 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
    92d6:	6c20      	ldr	r0, [r4, #64]	; 0x40
    92d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    92da:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    92dc:	4b14      	ldr	r3, [pc, #80]	; (9330 <MQTTSerialize_connectLength+0x84>)
    92de:	4798      	blx	r3
    92e0:	3002      	adds	r0, #2
    92e2:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
    92e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    92e6:	2b00      	cmp	r3, #0
    92e8:	d01e      	beq.n	9328 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
    92ea:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    92ec:	6d21      	ldr	r1, [r4, #80]	; 0x50
    92ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
    92f0:	4b0f      	ldr	r3, [pc, #60]	; (9330 <MQTTSerialize_connectLength+0x84>)
    92f2:	4798      	blx	r3
    92f4:	3002      	adds	r0, #2
    92f6:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
    92f8:	0028      	movs	r0, r5
    92fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
    92fc:	360a      	adds	r6, #10
    92fe:	e7dd      	b.n	92bc <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
    9300:	260c      	movs	r6, #12
    9302:	e7db      	b.n	92bc <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
    9304:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9306:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9308:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    930a:	4f09      	ldr	r7, [pc, #36]	; (9330 <MQTTSerialize_connectLength+0x84>)
    930c:	47b8      	blx	r7
    930e:	0006      	movs	r6, r0
    9310:	6b20      	ldr	r0, [r4, #48]	; 0x30
    9312:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9314:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    9316:	47b8      	blx	r7
    9318:	1836      	adds	r6, r6, r0
    931a:	3604      	adds	r6, #4
    931c:	19ad      	adds	r5, r5, r6
    931e:	e7d7      	b.n	92d0 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
    9320:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9322:	2b00      	cmp	r3, #0
    9324:	d1d7      	bne.n	92d6 <MQTTSerialize_connectLength+0x2a>
    9326:	e7dd      	b.n	92e4 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
    9328:	6d63      	ldr	r3, [r4, #84]	; 0x54
    932a:	2b00      	cmp	r3, #0
    932c:	d1dd      	bne.n	92ea <MQTTSerialize_connectLength+0x3e>
    932e:	e7e3      	b.n	92f8 <MQTTSerialize_connectLength+0x4c>
    9330:	00009815 	.word	0x00009815

00009334 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
    9334:	b5f0      	push	{r4, r5, r6, r7, lr}
    9336:	b083      	sub	sp, #12
    9338:	0006      	movs	r6, r0
    933a:	000f      	movs	r7, r1
    933c:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
    933e:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
    9340:	0010      	movs	r0, r2
    9342:	4b45      	ldr	r3, [pc, #276]	; (9458 <MQTTSerialize_connect+0x124>)
    9344:	4798      	blx	r3
    9346:	0004      	movs	r4, r0
    9348:	4b44      	ldr	r3, [pc, #272]	; (945c <MQTTSerialize_connect+0x128>)
    934a:	4798      	blx	r3
    934c:	42b8      	cmp	r0, r7
    934e:	dd00      	ble.n	9352 <MQTTSerialize_connect+0x1e>
    9350:	e07f      	b.n	9452 <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
    9352:	2110      	movs	r1, #16
    9354:	a801      	add	r0, sp, #4
    9356:	4b42      	ldr	r3, [pc, #264]	; (9460 <MQTTSerialize_connect+0x12c>)
    9358:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
    935a:	0021      	movs	r1, r4
    935c:	9801      	ldr	r0, [sp, #4]
    935e:	4b41      	ldr	r3, [pc, #260]	; (9464 <MQTTSerialize_connect+0x130>)
    9360:	4798      	blx	r3
    9362:	9b01      	ldr	r3, [sp, #4]
    9364:	469c      	mov	ip, r3
    9366:	4460      	add	r0, ip
    9368:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
    936a:	7a2b      	ldrb	r3, [r5, #8]
    936c:	2b04      	cmp	r3, #4
    936e:	d045      	beq.n	93fc <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
    9370:	493d      	ldr	r1, [pc, #244]	; (9468 <MQTTSerialize_connect+0x134>)
    9372:	a801      	add	r0, sp, #4
    9374:	4b3d      	ldr	r3, [pc, #244]	; (946c <MQTTSerialize_connect+0x138>)
    9376:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
    9378:	2103      	movs	r1, #3
    937a:	a801      	add	r0, sp, #4
    937c:	4b38      	ldr	r3, [pc, #224]	; (9460 <MQTTSerialize_connect+0x12c>)
    937e:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
    9380:	7ea9      	ldrb	r1, [r5, #26]
    9382:	2301      	movs	r3, #1
    9384:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
    9386:	7eea      	ldrb	r2, [r5, #27]
    9388:	1e50      	subs	r0, r2, #1
    938a:	4182      	sbcs	r2, r0
    938c:	b2d2      	uxtb	r2, r2
    938e:	4013      	ands	r3, r2
    9390:	009b      	lsls	r3, r3, #2
    9392:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
    9394:	4319      	orrs	r1, r3
    9396:	2b00      	cmp	r3, #0
    9398:	d00b      	beq.n	93b2 <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
    939a:	233d      	movs	r3, #61	; 0x3d
    939c:	5cea      	ldrb	r2, [r5, r3]
    939e:	3b3a      	subs	r3, #58	; 0x3a
    93a0:	4013      	ands	r3, r2
    93a2:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
    93a4:	223c      	movs	r2, #60	; 0x3c
    93a6:	5ca8      	ldrb	r0, [r5, r2]
    93a8:	3a3b      	subs	r2, #59	; 0x3b
    93aa:	4002      	ands	r2, r0
    93ac:	0152      	lsls	r2, r2, #5
    93ae:	4319      	orrs	r1, r3
    93b0:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
    93b2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    93b4:	2b00      	cmp	r3, #0
    93b6:	d02a      	beq.n	940e <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
    93b8:	2380      	movs	r3, #128	; 0x80
    93ba:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
    93bc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    93be:	2b00      	cmp	r3, #0
    93c0:	d029      	beq.n	9416 <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
    93c2:	2340      	movs	r3, #64	; 0x40
    93c4:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
    93c6:	b2cc      	uxtb	r4, r1
    93c8:	0021      	movs	r1, r4
    93ca:	a801      	add	r0, sp, #4
    93cc:	4b24      	ldr	r3, [pc, #144]	; (9460 <MQTTSerialize_connect+0x12c>)
    93ce:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
    93d0:	8b29      	ldrh	r1, [r5, #24]
    93d2:	a801      	add	r0, sp, #4
    93d4:	4b26      	ldr	r3, [pc, #152]	; (9470 <MQTTSerialize_connect+0x13c>)
    93d6:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
    93d8:	68e9      	ldr	r1, [r5, #12]
    93da:	692a      	ldr	r2, [r5, #16]
    93dc:	696b      	ldr	r3, [r5, #20]
    93de:	a801      	add	r0, sp, #4
    93e0:	4f24      	ldr	r7, [pc, #144]	; (9474 <MQTTSerialize_connect+0x140>)
    93e2:	47b8      	blx	r7
	if (options->willFlag)
    93e4:	7eeb      	ldrb	r3, [r5, #27]
    93e6:	2b00      	cmp	r3, #0
    93e8:	d119      	bne.n	941e <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
    93ea:	b263      	sxtb	r3, r4
    93ec:	2b00      	cmp	r3, #0
    93ee:	db22      	blt.n	9436 <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
    93f0:	0663      	lsls	r3, r4, #25
    93f2:	d427      	bmi.n	9444 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
    93f4:	9b01      	ldr	r3, [sp, #4]
    93f6:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
    93f8:	b003      	add	sp, #12
    93fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
    93fc:	491e      	ldr	r1, [pc, #120]	; (9478 <MQTTSerialize_connect+0x144>)
    93fe:	a801      	add	r0, sp, #4
    9400:	4b1a      	ldr	r3, [pc, #104]	; (946c <MQTTSerialize_connect+0x138>)
    9402:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
    9404:	2104      	movs	r1, #4
    9406:	a801      	add	r0, sp, #4
    9408:	4b15      	ldr	r3, [pc, #84]	; (9460 <MQTTSerialize_connect+0x12c>)
    940a:	4798      	blx	r3
    940c:	e7b8      	b.n	9380 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
    940e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    9410:	2b00      	cmp	r3, #0
    9412:	d1d1      	bne.n	93b8 <MQTTSerialize_connect+0x84>
    9414:	e7d2      	b.n	93bc <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
    9416:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    9418:	2b00      	cmp	r3, #0
    941a:	d1d2      	bne.n	93c2 <MQTTSerialize_connect+0x8e>
    941c:	e7d3      	b.n	93c6 <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
    941e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    9420:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    9422:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    9424:	a801      	add	r0, sp, #4
    9426:	4f13      	ldr	r7, [pc, #76]	; (9474 <MQTTSerialize_connect+0x140>)
    9428:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
    942a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    942c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    942e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    9430:	a801      	add	r0, sp, #4
    9432:	47b8      	blx	r7
    9434:	e7d9      	b.n	93ea <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
    9436:	6c29      	ldr	r1, [r5, #64]	; 0x40
    9438:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    943a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    943c:	a801      	add	r0, sp, #4
    943e:	4f0d      	ldr	r7, [pc, #52]	; (9474 <MQTTSerialize_connect+0x140>)
    9440:	47b8      	blx	r7
    9442:	e7d5      	b.n	93f0 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
    9444:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    9446:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    9448:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    944a:	a801      	add	r0, sp, #4
    944c:	4c09      	ldr	r4, [pc, #36]	; (9474 <MQTTSerialize_connect+0x140>)
    944e:	47a0      	blx	r4
    9450:	e7d0      	b.n	93f4 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    9452:	2002      	movs	r0, #2
    9454:	4240      	negs	r0, r0
	return rc;
    9456:	e7cf      	b.n	93f8 <MQTTSerialize_connect+0xc4>
    9458:	000092ad 	.word	0x000092ad
    945c:	000096b9 	.word	0x000096b9
    9460:	0000971b 	.word	0x0000971b
    9464:	00009631 	.word	0x00009631
    9468:	0000eac0 	.word	0x0000eac0
    946c:	00009751 	.word	0x00009751
    9470:	00009727 	.word	0x00009727
    9474:	00009789 	.word	0x00009789
    9478:	0000eab8 	.word	0x0000eab8

0000947c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
    947c:	b570      	push	{r4, r5, r6, lr}
    947e:	b082      	sub	sp, #8
    9480:	0005      	movs	r5, r0
    9482:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    9484:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    9486:	a801      	add	r0, sp, #4
    9488:	4b0e      	ldr	r3, [pc, #56]	; (94c4 <MQTTDeserialize_connack+0x48>)
    948a:	4798      	blx	r3
	if (header.bits.type != CONNACK)
    948c:	23f0      	movs	r3, #240	; 0xf0
    948e:	4003      	ands	r3, r0
	int rc = 0;
    9490:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
    9492:	2b20      	cmp	r3, #32
    9494:	d001      	beq.n	949a <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9496:	b002      	add	sp, #8
    9498:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    949a:	4669      	mov	r1, sp
    949c:	9801      	ldr	r0, [sp, #4]
    949e:	4b0a      	ldr	r3, [pc, #40]	; (94c8 <MQTTDeserialize_connack+0x4c>)
    94a0:	4798      	blx	r3
    94a2:	9b01      	ldr	r3, [sp, #4]
    94a4:	181b      	adds	r3, r3, r0
    94a6:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
    94a8:	9b00      	ldr	r3, [sp, #0]
    94aa:	2b01      	cmp	r3, #1
    94ac:	ddf3      	ble.n	9496 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
    94ae:	a801      	add	r0, sp, #4
    94b0:	4e04      	ldr	r6, [pc, #16]	; (94c4 <MQTTDeserialize_connack+0x48>)
    94b2:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
    94b4:	0600      	lsls	r0, r0, #24
    94b6:	0fc0      	lsrs	r0, r0, #31
    94b8:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
    94ba:	a801      	add	r0, sp, #4
    94bc:	47b0      	blx	r6
    94be:	7020      	strb	r0, [r4, #0]
	rc = 1;
    94c0:	2001      	movs	r0, #1
    94c2:	e7e8      	b.n	9496 <MQTTDeserialize_connack+0x1a>
    94c4:	0000970f 	.word	0x0000970f
    94c8:	000096e1 	.word	0x000096e1

000094cc <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    94cc:	b510      	push	{r4, lr}
    94ce:	b082      	sub	sp, #8
    94d0:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    94d2:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
    94d4:	2901      	cmp	r1, #1
    94d6:	dd0f      	ble.n	94f8 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    94d8:	210f      	movs	r1, #15
    94da:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    94dc:	0109      	lsls	r1, r1, #4
    94de:	a801      	add	r0, sp, #4
    94e0:	4b07      	ldr	r3, [pc, #28]	; (9500 <MQTTSerialize_zero+0x34>)
    94e2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    94e4:	2100      	movs	r1, #0
    94e6:	9801      	ldr	r0, [sp, #4]
    94e8:	4b06      	ldr	r3, [pc, #24]	; (9504 <MQTTSerialize_zero+0x38>)
    94ea:	4798      	blx	r3
    94ec:	9b01      	ldr	r3, [sp, #4]
    94ee:	469c      	mov	ip, r3
    94f0:	4460      	add	r0, ip
	rc = ptr - buf;
    94f2:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    94f4:	b002      	add	sp, #8
    94f6:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    94f8:	2002      	movs	r0, #2
    94fa:	4240      	negs	r0, r0
	return rc;
    94fc:	e7fa      	b.n	94f4 <MQTTSerialize_zero+0x28>
    94fe:	46c0      	nop			; (mov r8, r8)
    9500:	0000971b 	.word	0x0000971b
    9504:	00009631 	.word	0x00009631

00009508 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
    9508:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
    950a:	220e      	movs	r2, #14
    950c:	4b01      	ldr	r3, [pc, #4]	; (9514 <MQTTSerialize_disconnect+0xc>)
    950e:	4798      	blx	r3
}
    9510:	bd10      	pop	{r4, pc}
    9512:	46c0      	nop			; (mov r8, r8)
    9514:	000094cd 	.word	0x000094cd

00009518 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
    9518:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
    951a:	220c      	movs	r2, #12
    951c:	4b01      	ldr	r3, [pc, #4]	; (9524 <MQTTSerialize_pingreq+0xc>)
    951e:	4798      	blx	r3
}
    9520:	bd10      	pop	{r4, pc}
    9522:	46c0      	nop			; (mov r8, r8)
    9524:	000094cd 	.word	0x000094cd

00009528 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
    9528:	b5f0      	push	{r4, r5, r6, r7, lr}
    952a:	b085      	sub	sp, #20
    952c:	0005      	movs	r5, r0
    952e:	000e      	movs	r6, r1
    9530:	0014      	movs	r4, r2
    9532:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    9534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9536:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
    9538:	2300      	movs	r3, #0
    953a:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    953c:	a803      	add	r0, sp, #12
    953e:	4b1c      	ldr	r3, [pc, #112]	; (95b0 <MQTTDeserialize_publish+0x88>)
    9540:	4798      	blx	r3
    9542:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
    9544:	22f0      	movs	r2, #240	; 0xf0
    9546:	4010      	ands	r0, r2
	int rc = 0;
    9548:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
    954a:	2830      	cmp	r0, #48	; 0x30
    954c:	d002      	beq.n	9554 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    954e:	0038      	movs	r0, r7
    9550:	b005      	add	sp, #20
    9552:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
    9554:	071a      	lsls	r2, r3, #28
    9556:	0fd2      	lsrs	r2, r2, #31
    9558:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
    955a:	075a      	lsls	r2, r3, #29
    955c:	0f92      	lsrs	r2, r2, #30
    955e:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
    9560:	07db      	lsls	r3, r3, #31
    9562:	0fdb      	lsrs	r3, r3, #31
    9564:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    9566:	a902      	add	r1, sp, #8
    9568:	9803      	ldr	r0, [sp, #12]
    956a:	4b12      	ldr	r3, [pc, #72]	; (95b4 <MQTTDeserialize_publish+0x8c>)
    956c:	4798      	blx	r3
    956e:	0007      	movs	r7, r0
    9570:	9b03      	ldr	r3, [sp, #12]
    9572:	181c      	adds	r4, r3, r0
    9574:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
    9576:	9b02      	ldr	r3, [sp, #8]
    9578:	469c      	mov	ip, r3
    957a:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
    957c:	0022      	movs	r2, r4
    957e:	a903      	add	r1, sp, #12
    9580:	980a      	ldr	r0, [sp, #40]	; 0x28
    9582:	4b0d      	ldr	r3, [pc, #52]	; (95b8 <MQTTDeserialize_publish+0x90>)
    9584:	4798      	blx	r3
    9586:	2800      	cmp	r0, #0
    9588:	d0e1      	beq.n	954e <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
    958a:	9b03      	ldr	r3, [sp, #12]
    958c:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
    958e:	d4de      	bmi.n	954e <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
    9590:	6833      	ldr	r3, [r6, #0]
    9592:	2b00      	cmp	r3, #0
    9594:	dd04      	ble.n	95a0 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
    9596:	a803      	add	r0, sp, #12
    9598:	4b08      	ldr	r3, [pc, #32]	; (95bc <MQTTDeserialize_publish+0x94>)
    959a:	4798      	blx	r3
    959c:	9b01      	ldr	r3, [sp, #4]
    959e:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
    95a0:	9b03      	ldr	r3, [sp, #12]
    95a2:	1ae4      	subs	r4, r4, r3
    95a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    95a6:	6014      	str	r4, [r2, #0]
	*payload = curdata;
    95a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    95aa:	6013      	str	r3, [r2, #0]
	rc = 1;
    95ac:	2701      	movs	r7, #1
    95ae:	e7ce      	b.n	954e <MQTTDeserialize_publish+0x26>
    95b0:	0000970f 	.word	0x0000970f
    95b4:	000096e1 	.word	0x000096e1
    95b8:	000097d5 	.word	0x000097d5
    95bc:	000096fd 	.word	0x000096fd

000095c0 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
    95c0:	b570      	push	{r4, r5, r6, lr}
    95c2:	b082      	sub	sp, #8
    95c4:	0005      	movs	r5, r0
    95c6:	000e      	movs	r6, r1
    95c8:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    95ca:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    95cc:	a801      	add	r0, sp, #4
    95ce:	4b0c      	ldr	r3, [pc, #48]	; (9600 <MQTTDeserialize_ack+0x40>)
    95d0:	4798      	blx	r3
	*dup = header.bits.dup;
    95d2:	0703      	lsls	r3, r0, #28
    95d4:	0fdb      	lsrs	r3, r3, #31
    95d6:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
    95d8:	0600      	lsls	r0, r0, #24
    95da:	0f00      	lsrs	r0, r0, #28
    95dc:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    95de:	4669      	mov	r1, sp
    95e0:	9801      	ldr	r0, [sp, #4]
    95e2:	4b08      	ldr	r3, [pc, #32]	; (9604 <MQTTDeserialize_ack+0x44>)
    95e4:	4798      	blx	r3
    95e6:	9b01      	ldr	r3, [sp, #4]
    95e8:	181b      	adds	r3, r3, r0
    95ea:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
    95ec:	9b00      	ldr	r3, [sp, #0]
    95ee:	2b01      	cmp	r3, #1
    95f0:	dd04      	ble.n	95fc <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
    95f2:	a801      	add	r0, sp, #4
    95f4:	4b04      	ldr	r3, [pc, #16]	; (9608 <MQTTDeserialize_ack+0x48>)
    95f6:	4798      	blx	r3
    95f8:	8020      	strh	r0, [r4, #0]

	rc = 1;
    95fa:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    95fc:	b002      	add	sp, #8
    95fe:	bd70      	pop	{r4, r5, r6, pc}
    9600:	0000970f 	.word	0x0000970f
    9604:	000096e1 	.word	0x000096e1
    9608:	000096fd 	.word	0x000096fd

0000960c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
    960c:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
    960e:	2900      	cmp	r1, #0
    9610:	dd0a      	ble.n	9628 <bufchar+0x1c>
    9612:	4b06      	ldr	r3, [pc, #24]	; (962c <bufchar+0x20>)
    9614:	681b      	ldr	r3, [r3, #0]
    9616:	185d      	adds	r5, r3, r1
    9618:	002c      	movs	r4, r5
		*c = *bufptr++;
    961a:	781a      	ldrb	r2, [r3, #0]
    961c:	7002      	strb	r2, [r0, #0]
    961e:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
    9620:	42a3      	cmp	r3, r4
    9622:	d1fa      	bne.n	961a <bufchar+0xe>
    9624:	4b01      	ldr	r3, [pc, #4]	; (962c <bufchar+0x20>)
    9626:	601d      	str	r5, [r3, #0]
	return count;
}
    9628:	0008      	movs	r0, r1
    962a:	bd30      	pop	{r4, r5, pc}
    962c:	200007fc 	.word	0x200007fc

00009630 <MQTTPacket_encode>:
{
    9630:	b5f0      	push	{r4, r5, r6, r7, lr}
    9632:	b083      	sub	sp, #12
    9634:	2500      	movs	r5, #0
		char d = length % 128;
    9636:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
    9638:	2780      	movs	r7, #128	; 0x80
    963a:	427f      	negs	r7, r7
    963c:	9501      	str	r5, [sp, #4]
		char d = length % 128;
    963e:	17ca      	asrs	r2, r1, #31
    9640:	0e54      	lsrs	r4, r2, #25
    9642:	190b      	adds	r3, r1, r4
    9644:	4033      	ands	r3, r6
    9646:	1b1b      	subs	r3, r3, r4
    9648:	b2db      	uxtb	r3, r3
		length /= 128;
    964a:	4032      	ands	r2, r6
    964c:	1851      	adds	r1, r2, r1
    964e:	11c9      	asrs	r1, r1, #7
		if (length > 0)
    9650:	2900      	cmp	r1, #0
    9652:	dd03      	ble.n	965c <MQTTPacket_encode+0x2c>
			d |= 0x80;
    9654:	433b      	orrs	r3, r7
		buf[rc++] = d;
    9656:	5543      	strb	r3, [r0, r5]
    9658:	3501      	adds	r5, #1
    965a:	e7ef      	b.n	963c <MQTTPacket_encode+0xc>
    965c:	5543      	strb	r3, [r0, r5]
    965e:	9801      	ldr	r0, [sp, #4]
    9660:	3001      	adds	r0, #1
}
    9662:	b003      	add	sp, #12
    9664:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009666 <MQTTPacket_decode>:
{
    9666:	b5f0      	push	{r4, r5, r6, r7, lr}
    9668:	46ce      	mov	lr, r9
    966a:	4647      	mov	r7, r8
    966c:	b580      	push	{r7, lr}
    966e:	b083      	sub	sp, #12
    9670:	4680      	mov	r8, r0
    9672:	000f      	movs	r7, r1
	*value = 0;
    9674:	2300      	movs	r3, #0
    9676:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    9678:	2401      	movs	r4, #1
	int multiplier = 1;
    967a:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
    967c:	466b      	mov	r3, sp
    967e:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
    9680:	237f      	movs	r3, #127	; 0x7f
    9682:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
    9684:	2101      	movs	r1, #1
    9686:	0028      	movs	r0, r5
    9688:	47c0      	blx	r8
		if (rc != 1)
    968a:	2801      	cmp	r0, #1
    968c:	d10e      	bne.n	96ac <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
    968e:	782b      	ldrb	r3, [r5, #0]
    9690:	464a      	mov	r2, r9
    9692:	401a      	ands	r2, r3
    9694:	4372      	muls	r2, r6
    9696:	6839      	ldr	r1, [r7, #0]
    9698:	468c      	mov	ip, r1
    969a:	4462      	add	r2, ip
    969c:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
    969e:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
    96a0:	b25b      	sxtb	r3, r3
    96a2:	2b00      	cmp	r3, #0
    96a4:	da02      	bge.n	96ac <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    96a6:	3401      	adds	r4, #1
    96a8:	2c05      	cmp	r4, #5
    96aa:	d1eb      	bne.n	9684 <MQTTPacket_decode+0x1e>
}
    96ac:	0020      	movs	r0, r4
    96ae:	b003      	add	sp, #12
    96b0:	bc0c      	pop	{r2, r3}
    96b2:	4690      	mov	r8, r2
    96b4:	4699      	mov	r9, r3
    96b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000096b8 <MQTTPacket_len>:
{
    96b8:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
    96ba:	1c42      	adds	r2, r0, #1
		rem_len += 1;
    96bc:	3002      	adds	r0, #2
	if (rem_len < 128)
    96be:	2a7f      	cmp	r2, #127	; 0x7f
    96c0:	dd07      	ble.n	96d2 <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
    96c2:	4905      	ldr	r1, [pc, #20]	; (96d8 <MQTTPacket_len+0x20>)
		rem_len += 2;
    96c4:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
    96c6:	428a      	cmp	r2, r1
    96c8:	dd03      	ble.n	96d2 <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
    96ca:	4904      	ldr	r1, [pc, #16]	; (96dc <MQTTPacket_len+0x24>)
		rem_len += 4;
    96cc:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
    96ce:	428a      	cmp	r2, r1
    96d0:	dd00      	ble.n	96d4 <MQTTPacket_len+0x1c>
}
    96d2:	4770      	bx	lr
		rem_len += 3;
    96d4:	1d18      	adds	r0, r3, #4
    96d6:	e7fc      	b.n	96d2 <MQTTPacket_len+0x1a>
    96d8:	00003fff 	.word	0x00003fff
    96dc:	001ffffe 	.word	0x001ffffe

000096e0 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
    96e0:	b510      	push	{r4, lr}
	bufptr = buf;
    96e2:	4b03      	ldr	r3, [pc, #12]	; (96f0 <MQTTPacket_decodeBuf+0x10>)
    96e4:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
    96e6:	4803      	ldr	r0, [pc, #12]	; (96f4 <MQTTPacket_decodeBuf+0x14>)
    96e8:	4b03      	ldr	r3, [pc, #12]	; (96f8 <MQTTPacket_decodeBuf+0x18>)
    96ea:	4798      	blx	r3
}
    96ec:	bd10      	pop	{r4, pc}
    96ee:	46c0      	nop			; (mov r8, r8)
    96f0:	200007fc 	.word	0x200007fc
    96f4:	0000960d 	.word	0x0000960d
    96f8:	00009667 	.word	0x00009667

000096fc <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
    96fc:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
    96fe:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
    9700:	7813      	ldrb	r3, [r2, #0]
    9702:	021b      	lsls	r3, r3, #8
    9704:	7850      	ldrb	r0, [r2, #1]
    9706:	1818      	adds	r0, r3, r0
	*pptr += 2;
    9708:	3202      	adds	r2, #2
    970a:	600a      	str	r2, [r1, #0]
	return len;
}
    970c:	4770      	bx	lr

0000970e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
    970e:	0002      	movs	r2, r0
	char c = **pptr;
    9710:	6803      	ldr	r3, [r0, #0]
    9712:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
    9714:	3301      	adds	r3, #1
    9716:	6013      	str	r3, [r2, #0]
	return c;
}
    9718:	4770      	bx	lr

0000971a <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
    971a:	6803      	ldr	r3, [r0, #0]
    971c:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
    971e:	6803      	ldr	r3, [r0, #0]
    9720:	3301      	adds	r3, #1
    9722:	6003      	str	r3, [r0, #0]
}
    9724:	4770      	bx	lr

00009726 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
    9726:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
    9728:	17ca      	asrs	r2, r1, #31
    972a:	23ff      	movs	r3, #255	; 0xff
    972c:	001c      	movs	r4, r3
    972e:	4014      	ands	r4, r2
    9730:	1864      	adds	r4, r4, r1
    9732:	1224      	asrs	r4, r4, #8
    9734:	6805      	ldr	r5, [r0, #0]
    9736:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
    9738:	6804      	ldr	r4, [r0, #0]
    973a:	1c65      	adds	r5, r4, #1
    973c:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
    973e:	0e12      	lsrs	r2, r2, #24
    9740:	1889      	adds	r1, r1, r2
    9742:	400b      	ands	r3, r1
    9744:	1a9b      	subs	r3, r3, r2
    9746:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
    9748:	6803      	ldr	r3, [r0, #0]
    974a:	3301      	adds	r3, #1
    974c:	6003      	str	r3, [r0, #0]
}
    974e:	bd30      	pop	{r4, r5, pc}

00009750 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
    9750:	b570      	push	{r4, r5, r6, lr}
    9752:	0004      	movs	r4, r0
    9754:	000e      	movs	r6, r1
	int len = strlen(string);
    9756:	0008      	movs	r0, r1
    9758:	4b08      	ldr	r3, [pc, #32]	; (977c <writeCString+0x2c>)
    975a:	4798      	blx	r3
    975c:	0005      	movs	r5, r0
	writeInt(pptr, len);
    975e:	0001      	movs	r1, r0
    9760:	0020      	movs	r0, r4
    9762:	4b07      	ldr	r3, [pc, #28]	; (9780 <writeCString+0x30>)
    9764:	4798      	blx	r3
	memcpy(*pptr, string, len);
    9766:	002a      	movs	r2, r5
    9768:	0031      	movs	r1, r6
    976a:	6820      	ldr	r0, [r4, #0]
    976c:	4b05      	ldr	r3, [pc, #20]	; (9784 <writeCString+0x34>)
    976e:	4798      	blx	r3
	*pptr += len;
    9770:	6823      	ldr	r3, [r4, #0]
    9772:	469c      	mov	ip, r3
    9774:	4465      	add	r5, ip
    9776:	6025      	str	r5, [r4, #0]
}
    9778:	bd70      	pop	{r4, r5, r6, pc}
    977a:	46c0      	nop			; (mov r8, r8)
    977c:	0000c2d7 	.word	0x0000c2d7
    9780:	00009727 	.word	0x00009727
    9784:	0000bd79 	.word	0x0000bd79

00009788 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
    9788:	b530      	push	{r4, r5, lr}
    978a:	b085      	sub	sp, #20
    978c:	0005      	movs	r5, r0
    978e:	9101      	str	r1, [sp, #4]
    9790:	9303      	str	r3, [sp, #12]
    9792:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
    9794:	dc06      	bgt.n	97a4 <writeMQTTString+0x1c>
    9796:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
    9798:	2900      	cmp	r1, #0
    979a:	d010      	beq.n	97be <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
    979c:	4b0a      	ldr	r3, [pc, #40]	; (97c8 <writeMQTTString+0x40>)
    979e:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
    97a0:	b005      	add	sp, #20
    97a2:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
    97a4:	0011      	movs	r1, r2
    97a6:	4b09      	ldr	r3, [pc, #36]	; (97cc <writeMQTTString+0x44>)
    97a8:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    97aa:	0022      	movs	r2, r4
    97ac:	9903      	ldr	r1, [sp, #12]
    97ae:	6828      	ldr	r0, [r5, #0]
    97b0:	4b07      	ldr	r3, [pc, #28]	; (97d0 <writeMQTTString+0x48>)
    97b2:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
    97b4:	682b      	ldr	r3, [r5, #0]
    97b6:	469c      	mov	ip, r3
    97b8:	4464      	add	r4, ip
    97ba:	602c      	str	r4, [r5, #0]
    97bc:	e7f0      	b.n	97a0 <writeMQTTString+0x18>
		writeInt(pptr, 0);
    97be:	2100      	movs	r1, #0
    97c0:	4b02      	ldr	r3, [pc, #8]	; (97cc <writeMQTTString+0x44>)
    97c2:	4798      	blx	r3
}
    97c4:	e7ec      	b.n	97a0 <writeMQTTString+0x18>
    97c6:	46c0      	nop			; (mov r8, r8)
    97c8:	00009751 	.word	0x00009751
    97cc:	00009727 	.word	0x00009727
    97d0:	0000bd79 	.word	0x0000bd79

000097d4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
    97d4:	b570      	push	{r4, r5, r6, lr}
    97d6:	0005      	movs	r5, r0
    97d8:	000c      	movs	r4, r1
    97da:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
    97dc:	680b      	ldr	r3, [r1, #0]
    97de:	1ad3      	subs	r3, r2, r3
    97e0:	2b01      	cmp	r3, #1
    97e2:	dd12      	ble.n	980a <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
    97e4:	0008      	movs	r0, r1
    97e6:	4b0a      	ldr	r3, [pc, #40]	; (9810 <readMQTTLenString+0x3c>)
    97e8:	4798      	blx	r3
    97ea:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    97ec:	6822      	ldr	r2, [r4, #0]
    97ee:	1811      	adds	r1, r2, r0
	int rc = 0;
    97f0:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    97f2:	428e      	cmp	r6, r1
    97f4:	d305      	bcc.n	9802 <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
    97f6:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
    97f8:	6823      	ldr	r3, [r4, #0]
    97fa:	469c      	mov	ip, r3
    97fc:	4460      	add	r0, ip
    97fe:	6020      	str	r0, [r4, #0]
			rc = 1;
    9800:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
    9802:	2200      	movs	r2, #0
    9804:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
    9806:	0018      	movs	r0, r3
    9808:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
    980a:	2300      	movs	r3, #0
    980c:	e7f9      	b.n	9802 <readMQTTLenString+0x2e>
    980e:	46c0      	nop			; (mov r8, r8)
    9810:	000096fd 	.word	0x000096fd

00009814 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    9814:	b500      	push	{lr}
    9816:	b085      	sub	sp, #20
    9818:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
    981a:	2800      	cmp	r0, #0
    981c:	d003      	beq.n	9826 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
    981e:	4b03      	ldr	r3, [pc, #12]	; (982c <MQTTstrlen+0x18>)
    9820:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
    9822:	b005      	add	sp, #20
    9824:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
    9826:	9802      	ldr	r0, [sp, #8]
	return rc;
    9828:	e7fb      	b.n	9822 <MQTTstrlen+0xe>
    982a:	46c0      	nop			; (mov r8, r8)
    982c:	0000c2d7 	.word	0x0000c2d7

00009830 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
    9830:	b570      	push	{r4, r5, r6, lr}
    9832:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
    9834:	6806      	ldr	r6, [r0, #0]
    9836:	2e00      	cmp	r6, #0
    9838:	d00b      	beq.n	9852 <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
    983a:	0030      	movs	r0, r6
    983c:	4b0b      	ldr	r3, [pc, #44]	; (986c <MQTTPacket_equals+0x3c>)
    983e:	4798      	blx	r3
    9840:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
    9842:	0028      	movs	r0, r5
    9844:	4b09      	ldr	r3, [pc, #36]	; (986c <MQTTPacket_equals+0x3c>)
    9846:	4798      	blx	r3
    9848:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    984a:	4284      	cmp	r4, r0
    984c:	d004      	beq.n	9858 <MQTTPacket_equals+0x28>
}
    984e:	0018      	movs	r0, r3
    9850:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
    9852:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
    9854:	6844      	ldr	r4, [r0, #4]
    9856:	e7f4      	b.n	9842 <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    9858:	0022      	movs	r2, r4
    985a:	0029      	movs	r1, r5
    985c:	0030      	movs	r0, r6
    985e:	4b04      	ldr	r3, [pc, #16]	; (9870 <MQTTPacket_equals+0x40>)
    9860:	4798      	blx	r3
    9862:	4243      	negs	r3, r0
    9864:	4143      	adcs	r3, r0
    9866:	b2db      	uxtb	r3, r3
    9868:	e7f1      	b.n	984e <MQTTPacket_equals+0x1e>
    986a:	46c0      	nop			; (mov r8, r8)
    986c:	0000c2d7 	.word	0x0000c2d7
    9870:	0000c2e5 	.word	0x0000c2e5

00009874 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    9874:	b510      	push	{r4, lr}
    9876:	b084      	sub	sp, #16
    9878:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    987a:	0008      	movs	r0, r1
    987c:	0011      	movs	r1, r2
    987e:	001a      	movs	r2, r3
    9880:	4b05      	ldr	r3, [pc, #20]	; (9898 <MQTTSerialize_publishLength+0x24>)
    9882:	4798      	blx	r3
    9884:	3002      	adds	r0, #2
    9886:	9b06      	ldr	r3, [sp, #24]
    9888:	469c      	mov	ip, r3
    988a:	4460      	add	r0, ip
	if (qos > 0)
    988c:	2c00      	cmp	r4, #0
    988e:	dd00      	ble.n	9892 <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
    9890:	3002      	adds	r0, #2
	return len;
}
    9892:	b004      	add	sp, #16
    9894:	bd10      	pop	{r4, pc}
    9896:	46c0      	nop			; (mov r8, r8)
    9898:	00009815 	.word	0x00009815

0000989c <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    989c:	b5f0      	push	{r4, r5, r6, r7, lr}
    989e:	46de      	mov	lr, fp
    98a0:	4657      	mov	r7, sl
    98a2:	464e      	mov	r6, r9
    98a4:	b5c0      	push	{r6, r7, lr}
    98a6:	b084      	sub	sp, #16
    98a8:	0007      	movs	r7, r0
    98aa:	468b      	mov	fp, r1
    98ac:	4692      	mov	sl, r2
    98ae:	001e      	movs	r6, r3
    98b0:	ab0c      	add	r3, sp, #48	; 0x30
    98b2:	781b      	ldrb	r3, [r3, #0]
    98b4:	4699      	mov	r9, r3
    98b6:	ab0d      	add	r3, sp, #52	; 0x34
    98b8:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
    98ba:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    98bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    98be:	9300      	str	r3, [sp, #0]
    98c0:	990e      	ldr	r1, [sp, #56]	; 0x38
    98c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    98c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    98c6:	0030      	movs	r0, r6
    98c8:	4d1f      	ldr	r5, [pc, #124]	; (9948 <MQTTSerialize_publish+0xac>)
    98ca:	47a8      	blx	r5
    98cc:	0005      	movs	r5, r0
    98ce:	4b1f      	ldr	r3, [pc, #124]	; (994c <MQTTSerialize_publish+0xb0>)
    98d0:	4798      	blx	r3
    98d2:	4558      	cmp	r0, fp
    98d4:	dc34      	bgt.n	9940 <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
    98d6:	2201      	movs	r2, #1
    98d8:	4653      	mov	r3, sl
    98da:	4013      	ands	r3, r2
    98dc:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
    98de:	2103      	movs	r1, #3
    98e0:	4031      	ands	r1, r6
    98e2:	0048      	lsls	r0, r1, #1
    98e4:	2130      	movs	r1, #48	; 0x30
    98e6:	4319      	orrs	r1, r3
    98e8:	4301      	orrs	r1, r0
	header.bits.retain = retained;
    98ea:	464b      	mov	r3, r9
    98ec:	4013      	ands	r3, r2
    98ee:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    98f0:	4319      	orrs	r1, r3
    98f2:	a803      	add	r0, sp, #12
    98f4:	4b16      	ldr	r3, [pc, #88]	; (9950 <MQTTSerialize_publish+0xb4>)
    98f6:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    98f8:	0029      	movs	r1, r5
    98fa:	9803      	ldr	r0, [sp, #12]
    98fc:	4b15      	ldr	r3, [pc, #84]	; (9954 <MQTTSerialize_publish+0xb8>)
    98fe:	4798      	blx	r3
    9900:	9b03      	ldr	r3, [sp, #12]
    9902:	469c      	mov	ip, r3
    9904:	4460      	add	r0, ip
    9906:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
    9908:	990e      	ldr	r1, [sp, #56]	; 0x38
    990a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    990c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    990e:	a803      	add	r0, sp, #12
    9910:	4d11      	ldr	r5, [pc, #68]	; (9958 <MQTTSerialize_publish+0xbc>)
    9912:	47a8      	blx	r5

	if (qos > 0)
    9914:	2e00      	cmp	r6, #0
    9916:	dd03      	ble.n	9920 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
    9918:	0021      	movs	r1, r4
    991a:	a803      	add	r0, sp, #12
    991c:	4b0f      	ldr	r3, [pc, #60]	; (995c <MQTTSerialize_publish+0xc0>)
    991e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
    9920:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9922:	9911      	ldr	r1, [sp, #68]	; 0x44
    9924:	9803      	ldr	r0, [sp, #12]
    9926:	4b0e      	ldr	r3, [pc, #56]	; (9960 <MQTTSerialize_publish+0xc4>)
    9928:	4798      	blx	r3
	ptr += payloadlen;
    992a:	9b03      	ldr	r3, [sp, #12]
    992c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    992e:	4694      	mov	ip, r2
    9930:	4463      	add	r3, ip

	rc = ptr - buf;
    9932:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9934:	b004      	add	sp, #16
    9936:	bc1c      	pop	{r2, r3, r4}
    9938:	4691      	mov	r9, r2
    993a:	469a      	mov	sl, r3
    993c:	46a3      	mov	fp, r4
    993e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    9940:	2002      	movs	r0, #2
    9942:	4240      	negs	r0, r0
	return rc;
    9944:	e7f6      	b.n	9934 <MQTTSerialize_publish+0x98>
    9946:	46c0      	nop			; (mov r8, r8)
    9948:	00009875 	.word	0x00009875
    994c:	000096b9 	.word	0x000096b9
    9950:	0000971b 	.word	0x0000971b
    9954:	00009631 	.word	0x00009631
    9958:	00009789 	.word	0x00009789
    995c:	00009727 	.word	0x00009727
    9960:	0000bd79 	.word	0x0000bd79

00009964 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
    9964:	b530      	push	{r4, r5, lr}
    9966:	b083      	sub	sp, #12
    9968:	0004      	movs	r4, r0
    996a:	a806      	add	r0, sp, #24
    996c:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
    996e:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
    9970:	2903      	cmp	r1, #3
    9972:	dd1e      	ble.n	99b2 <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
    9974:	210f      	movs	r1, #15
    9976:	4011      	ands	r1, r2
	header.bits.dup = dup;
    9978:	2001      	movs	r0, #1
    997a:	4003      	ands	r3, r0
    997c:	00db      	lsls	r3, r3, #3
    997e:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
    9980:	3a06      	subs	r2, #6
    9982:	4250      	negs	r0, r2
    9984:	4142      	adcs	r2, r0
    9986:	0052      	lsls	r2, r2, #1
    9988:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
    998a:	4311      	orrs	r1, r2
    998c:	a801      	add	r0, sp, #4
    998e:	4b0a      	ldr	r3, [pc, #40]	; (99b8 <MQTTSerialize_ack+0x54>)
    9990:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    9992:	2102      	movs	r1, #2
    9994:	9801      	ldr	r0, [sp, #4]
    9996:	4b09      	ldr	r3, [pc, #36]	; (99bc <MQTTSerialize_ack+0x58>)
    9998:	4798      	blx	r3
    999a:	9b01      	ldr	r3, [sp, #4]
    999c:	469c      	mov	ip, r3
    999e:	4460      	add	r0, ip
    99a0:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
    99a2:	0029      	movs	r1, r5
    99a4:	a801      	add	r0, sp, #4
    99a6:	4b06      	ldr	r3, [pc, #24]	; (99c0 <MQTTSerialize_ack+0x5c>)
    99a8:	4798      	blx	r3
	rc = ptr - buf;
    99aa:	9b01      	ldr	r3, [sp, #4]
    99ac:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    99ae:	b003      	add	sp, #12
    99b0:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    99b2:	2002      	movs	r0, #2
    99b4:	4240      	negs	r0, r0
	return rc;
    99b6:	e7fa      	b.n	99ae <MQTTSerialize_ack+0x4a>
    99b8:	0000971b 	.word	0x0000971b
    99bc:	00009631 	.word	0x00009631
    99c0:	00009727 	.word	0x00009727

000099c4 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
    99c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    99c6:	46c6      	mov	lr, r8
    99c8:	b500      	push	{lr}
    99ca:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
    99cc:	dd12      	ble.n	99f4 <MQTTSerialize_subscribeLength+0x30>
    99ce:	000c      	movs	r4, r1
    99d0:	2602      	movs	r6, #2
    99d2:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
    99d4:	4b08      	ldr	r3, [pc, #32]	; (99f8 <MQTTSerialize_subscribeLength+0x34>)
    99d6:	4698      	mov	r8, r3
    99d8:	6820      	ldr	r0, [r4, #0]
    99da:	6861      	ldr	r1, [r4, #4]
    99dc:	68a2      	ldr	r2, [r4, #8]
    99de:	47c0      	blx	r8
    99e0:	3003      	adds	r0, #3
    99e2:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
    99e4:	3501      	adds	r5, #1
    99e6:	340c      	adds	r4, #12
    99e8:	42af      	cmp	r7, r5
    99ea:	d1f5      	bne.n	99d8 <MQTTSerialize_subscribeLength+0x14>
	return len;
}
    99ec:	0030      	movs	r0, r6
    99ee:	bc04      	pop	{r2}
    99f0:	4690      	mov	r8, r2
    99f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
    99f4:	2602      	movs	r6, #2
	return len;
    99f6:	e7f9      	b.n	99ec <MQTTSerialize_subscribeLength+0x28>
    99f8:	00009815 	.word	0x00009815

000099fc <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
    99fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    99fe:	46d6      	mov	lr, sl
    9a00:	464f      	mov	r7, r9
    9a02:	4646      	mov	r6, r8
    9a04:	b5c0      	push	{r6, r7, lr}
    9a06:	b084      	sub	sp, #16
    9a08:	4682      	mov	sl, r0
    9a0a:	000e      	movs	r6, r1
    9a0c:	0015      	movs	r5, r2
    9a0e:	9301      	str	r3, [sp, #4]
    9a10:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
    9a12:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
    9a14:	990d      	ldr	r1, [sp, #52]	; 0x34
    9a16:	0038      	movs	r0, r7
    9a18:	4b1f      	ldr	r3, [pc, #124]	; (9a98 <MQTTSerialize_subscribe+0x9c>)
    9a1a:	4798      	blx	r3
    9a1c:	0004      	movs	r4, r0
    9a1e:	4b1f      	ldr	r3, [pc, #124]	; (9a9c <MQTTSerialize_subscribe+0xa0>)
    9a20:	4798      	blx	r3
    9a22:	42b0      	cmp	r0, r6
    9a24:	dc34      	bgt.n	9a90 <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
    9a26:	2101      	movs	r1, #1
    9a28:	4029      	ands	r1, r5
    9a2a:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
    9a2c:	2180      	movs	r1, #128	; 0x80
    9a2e:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    9a30:	2302      	movs	r3, #2
    9a32:	4319      	orrs	r1, r3
    9a34:	a803      	add	r0, sp, #12
    9a36:	4b1a      	ldr	r3, [pc, #104]	; (9aa0 <MQTTSerialize_subscribe+0xa4>)
    9a38:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    9a3a:	0021      	movs	r1, r4
    9a3c:	9803      	ldr	r0, [sp, #12]
    9a3e:	4b19      	ldr	r3, [pc, #100]	; (9aa4 <MQTTSerialize_subscribe+0xa8>)
    9a40:	4798      	blx	r3
    9a42:	9a03      	ldr	r2, [sp, #12]
    9a44:	4694      	mov	ip, r2
    9a46:	4460      	add	r0, ip
    9a48:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
    9a4a:	9901      	ldr	r1, [sp, #4]
    9a4c:	a803      	add	r0, sp, #12
    9a4e:	4b16      	ldr	r3, [pc, #88]	; (9aa8 <MQTTSerialize_subscribe+0xac>)
    9a50:	4798      	blx	r3

	for (i = 0; i < count; ++i)
    9a52:	2f00      	cmp	r7, #0
    9a54:	dd13      	ble.n	9a7e <MQTTSerialize_subscribe+0x82>
    9a56:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    9a58:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    9a5a:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
    9a5c:	4b13      	ldr	r3, [pc, #76]	; (9aac <MQTTSerialize_subscribe+0xb0>)
    9a5e:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
    9a60:	4b0f      	ldr	r3, [pc, #60]	; (9aa0 <MQTTSerialize_subscribe+0xa4>)
    9a62:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
    9a64:	6821      	ldr	r1, [r4, #0]
    9a66:	6862      	ldr	r2, [r4, #4]
    9a68:	68a3      	ldr	r3, [r4, #8]
    9a6a:	a803      	add	r0, sp, #12
    9a6c:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
    9a6e:	ce02      	ldmia	r6!, {r1}
    9a70:	b2c9      	uxtb	r1, r1
    9a72:	a803      	add	r0, sp, #12
    9a74:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
    9a76:	3501      	adds	r5, #1
    9a78:	340c      	adds	r4, #12
    9a7a:	42af      	cmp	r7, r5
    9a7c:	d1f2      	bne.n	9a64 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
    9a7e:	9b03      	ldr	r3, [sp, #12]
    9a80:	4652      	mov	r2, sl
    9a82:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9a84:	b004      	add	sp, #16
    9a86:	bc1c      	pop	{r2, r3, r4}
    9a88:	4690      	mov	r8, r2
    9a8a:	4699      	mov	r9, r3
    9a8c:	46a2      	mov	sl, r4
    9a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    9a90:	2002      	movs	r0, #2
    9a92:	4240      	negs	r0, r0
	return rc;
    9a94:	e7f6      	b.n	9a84 <MQTTSerialize_subscribe+0x88>
    9a96:	46c0      	nop			; (mov r8, r8)
    9a98:	000099c5 	.word	0x000099c5
    9a9c:	000096b9 	.word	0x000096b9
    9aa0:	0000971b 	.word	0x0000971b
    9aa4:	00009631 	.word	0x00009631
    9aa8:	00009727 	.word	0x00009727
    9aac:	00009789 	.word	0x00009789

00009ab0 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
    9ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ab2:	46ce      	mov	lr, r9
    9ab4:	4647      	mov	r7, r8
    9ab6:	b580      	push	{r7, lr}
    9ab8:	b083      	sub	sp, #12
    9aba:	0004      	movs	r4, r0
    9abc:	000e      	movs	r6, r1
    9abe:	0015      	movs	r5, r2
    9ac0:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    9ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9ac4:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    9ac6:	a801      	add	r0, sp, #4
    9ac8:	4b1e      	ldr	r3, [pc, #120]	; (9b44 <MQTTDeserialize_suback+0x94>)
    9aca:	4798      	blx	r3
	if (header.bits.type != SUBACK)
    9acc:	23f0      	movs	r3, #240	; 0xf0
    9ace:	4003      	ands	r3, r0
	int rc = 0;
    9ad0:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
    9ad2:	2b90      	cmp	r3, #144	; 0x90
    9ad4:	d004      	beq.n	9ae0 <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9ad6:	b003      	add	sp, #12
    9ad8:	bc0c      	pop	{r2, r3}
    9ada:	4690      	mov	r8, r2
    9adc:	4699      	mov	r9, r3
    9ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    9ae0:	4669      	mov	r1, sp
    9ae2:	9801      	ldr	r0, [sp, #4]
    9ae4:	4b18      	ldr	r3, [pc, #96]	; (9b48 <MQTTDeserialize_suback+0x98>)
    9ae6:	4798      	blx	r3
    9ae8:	9b01      	ldr	r3, [sp, #4]
    9aea:	181b      	adds	r3, r3, r0
    9aec:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
    9aee:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
    9af0:	2a01      	cmp	r2, #1
    9af2:	ddf0      	ble.n	9ad6 <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
    9af4:	4698      	mov	r8, r3
    9af6:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
    9af8:	a801      	add	r0, sp, #4
    9afa:	4b14      	ldr	r3, [pc, #80]	; (9b4c <MQTTDeserialize_suback+0x9c>)
    9afc:	4798      	blx	r3
    9afe:	8020      	strh	r0, [r4, #0]
	*count = 0;
    9b00:	2300      	movs	r3, #0
    9b02:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
    9b04:	9b01      	ldr	r3, [sp, #4]
    9b06:	4598      	cmp	r8, r3
    9b08:	d916      	bls.n	9b38 <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
    9b0a:	2e00      	cmp	r6, #0
    9b0c:	db16      	blt.n	9b3c <MQTTDeserialize_suback+0x8c>
    9b0e:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
    9b10:	4a0c      	ldr	r2, [pc, #48]	; (9b44 <MQTTDeserialize_suback+0x94>)
    9b12:	4691      	mov	r9, r2
    9b14:	1c5a      	adds	r2, r3, #1
    9b16:	602a      	str	r2, [r5, #0]
    9b18:	009b      	lsls	r3, r3, #2
    9b1a:	18fc      	adds	r4, r7, r3
    9b1c:	a801      	add	r0, sp, #4
    9b1e:	47c8      	blx	r9
    9b20:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
    9b22:	9b01      	ldr	r3, [sp, #4]
    9b24:	4598      	cmp	r8, r3
    9b26:	d905      	bls.n	9b34 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
    9b28:	682b      	ldr	r3, [r5, #0]
    9b2a:	42b3      	cmp	r3, r6
    9b2c:	ddf2      	ble.n	9b14 <MQTTDeserialize_suback+0x64>
			rc = -1;
    9b2e:	2001      	movs	r0, #1
    9b30:	4240      	negs	r0, r0
	return rc;
    9b32:	e7d0      	b.n	9ad6 <MQTTDeserialize_suback+0x26>
	rc = 1;
    9b34:	2001      	movs	r0, #1
    9b36:	e7ce      	b.n	9ad6 <MQTTDeserialize_suback+0x26>
    9b38:	2001      	movs	r0, #1
    9b3a:	e7cc      	b.n	9ad6 <MQTTDeserialize_suback+0x26>
			rc = -1;
    9b3c:	2001      	movs	r0, #1
    9b3e:	4240      	negs	r0, r0
    9b40:	e7c9      	b.n	9ad6 <MQTTDeserialize_suback+0x26>
    9b42:	46c0      	nop			; (mov r8, r8)
    9b44:	0000970f 	.word	0x0000970f
    9b48:	000096e1 	.word	0x000096e1
    9b4c:	000096fd 	.word	0x000096fd

00009b50 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    9b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b52:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    9b54:	2041      	movs	r0, #65	; 0x41
    9b56:	5c23      	ldrb	r3, [r4, r0]
    9b58:	2501      	movs	r5, #1
    9b5a:	432b      	orrs	r3, r5
    9b5c:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    9b5e:	b292      	uxth	r2, r2
    9b60:	2000      	movs	r0, #0
    9b62:	5620      	ldrsb	r0, [r4, r0]
    9b64:	2300      	movs	r3, #0
    9b66:	4d12      	ldr	r5, [pc, #72]	; (9bb0 <_http_client_send_wait+0x60>)
    9b68:	47a8      	blx	r5
    9b6a:	2800      	cmp	r0, #0
    9b6c:	db16      	blt.n	9b9c <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9b6e:	2341      	movs	r3, #65	; 0x41
    9b70:	5ce3      	ldrb	r3, [r4, r3]
    9b72:	07db      	lsls	r3, r3, #31
    9b74:	d518      	bpl.n	9ba8 <_http_client_send_wait+0x58>
    9b76:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    9b78:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9b7a:	2b02      	cmp	r3, #2
    9b7c:	d917      	bls.n	9bae <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    9b7e:	4f0d      	ldr	r7, [pc, #52]	; (9bb4 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    9b80:	4e0d      	ldr	r6, [pc, #52]	; (9bb8 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9b82:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    9b84:	2000      	movs	r0, #0
    9b86:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    9b88:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9b8a:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9b8c:	5d63      	ldrb	r3, [r4, r5]
    9b8e:	07db      	lsls	r3, r3, #31
    9b90:	d50c      	bpl.n	9bac <_http_client_send_wait+0x5c>
    9b92:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9b94:	2b02      	cmp	r3, #2
    9b96:	d8f5      	bhi.n	9b84 <_http_client_send_wait+0x34>
	return 0;
    9b98:	2000      	movs	r0, #0
    9b9a:	e008      	b.n	9bae <_http_client_send_wait+0x5e>
		module->sending = 0;
    9b9c:	2241      	movs	r2, #65	; 0x41
    9b9e:	5ca3      	ldrb	r3, [r4, r2]
    9ba0:	2101      	movs	r1, #1
    9ba2:	438b      	bics	r3, r1
    9ba4:	54a3      	strb	r3, [r4, r2]
		return result;
    9ba6:	e002      	b.n	9bae <_http_client_send_wait+0x5e>
	return 0;
    9ba8:	2000      	movs	r0, #0
    9baa:	e000      	b.n	9bae <_http_client_send_wait+0x5e>
    9bac:	2000      	movs	r0, #0
}
    9bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9bb0:	0000416d 	.word	0x0000416d
    9bb4:	000023d1 	.word	0x000023d1
    9bb8:	0000ace5 	.word	0x0000ace5

00009bbc <http_client_get_config_defaults>:
	config->port = 80;
    9bbc:	2350      	movs	r3, #80	; 0x50
    9bbe:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    9bc0:	2300      	movs	r3, #0
    9bc2:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    9bc4:	4a05      	ldr	r2, [pc, #20]	; (9bdc <http_client_get_config_defaults+0x20>)
    9bc6:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    9bc8:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    9bca:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    9bcc:	3301      	adds	r3, #1
    9bce:	33ff      	adds	r3, #255	; 0xff
    9bd0:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    9bd2:	3bae      	subs	r3, #174	; 0xae
    9bd4:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    9bd6:	4b02      	ldr	r3, [pc, #8]	; (9be0 <http_client_get_config_defaults+0x24>)
    9bd8:	6183      	str	r3, [r0, #24]
}
    9bda:	4770      	bx	lr
    9bdc:	00004e20 	.word	0x00004e20
    9be0:	0000ec90 	.word	0x0000ec90

00009be4 <http_client_init>:
{
    9be4:	b570      	push	{r4, r5, r6, lr}
    9be6:	0004      	movs	r4, r0
    9be8:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    9bea:	2800      	cmp	r0, #0
    9bec:	d038      	beq.n	9c60 <http_client_init+0x7c>
    9bee:	2900      	cmp	r1, #0
    9bf0:	d039      	beq.n	9c66 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    9bf2:	690b      	ldr	r3, [r1, #16]
    9bf4:	2b00      	cmp	r3, #0
    9bf6:	d039      	beq.n	9c6c <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    9bf8:	684b      	ldr	r3, [r1, #4]
    9bfa:	2b00      	cmp	r3, #0
    9bfc:	d039      	beq.n	9c72 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    9bfe:	694b      	ldr	r3, [r1, #20]
    9c00:	2b51      	cmp	r3, #81	; 0x51
    9c02:	d939      	bls.n	9c78 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    9c04:	22e8      	movs	r2, #232	; 0xe8
    9c06:	2100      	movs	r1, #0
    9c08:	4b1e      	ldr	r3, [pc, #120]	; (9c84 <http_client_init+0xa0>)
    9c0a:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    9c0c:	0020      	movs	r0, r4
    9c0e:	3050      	adds	r0, #80	; 0x50
    9c10:	221c      	movs	r2, #28
    9c12:	0029      	movs	r1, r5
    9c14:	4b1c      	ldr	r3, [pc, #112]	; (9c88 <http_client_init+0xa4>)
    9c16:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    9c18:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    9c1a:	2b00      	cmp	r3, #0
    9c1c:	d008      	beq.n	9c30 <http_client_init+0x4c>
	if (config->timeout > 0) {
    9c1e:	892b      	ldrh	r3, [r5, #8]
    9c20:	2b00      	cmp	r3, #0
    9c22:	d111      	bne.n	9c48 <http_client_init+0x64>
	module->req.state = STATE_INIT;
    9c24:	2300      	movs	r3, #0
    9c26:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    9c28:	22d8      	movs	r2, #216	; 0xd8
    9c2a:	50a3      	str	r3, [r4, r2]
	return 0;
    9c2c:	2000      	movs	r0, #0
}
    9c2e:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    9c30:	6928      	ldr	r0, [r5, #16]
    9c32:	4b16      	ldr	r3, [pc, #88]	; (9c8c <http_client_init+0xa8>)
    9c34:	4798      	blx	r3
    9c36:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    9c38:	2800      	cmp	r0, #0
    9c3a:	d020      	beq.n	9c7e <http_client_init+0x9a>
		module->alloc_buffer = 1;
    9c3c:	2241      	movs	r2, #65	; 0x41
    9c3e:	5ca3      	ldrb	r3, [r4, r2]
    9c40:	2104      	movs	r1, #4
    9c42:	430b      	orrs	r3, r1
    9c44:	54a3      	strb	r3, [r4, r2]
    9c46:	e7ea      	b.n	9c1e <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    9c48:	6868      	ldr	r0, [r5, #4]
    9c4a:	2300      	movs	r3, #0
    9c4c:	0022      	movs	r2, r4
    9c4e:	4910      	ldr	r1, [pc, #64]	; (9c90 <http_client_init+0xac>)
    9c50:	4d10      	ldr	r5, [pc, #64]	; (9c94 <http_client_init+0xb0>)
    9c52:	47a8      	blx	r5
    9c54:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    9c56:	2800      	cmp	r0, #0
    9c58:	dae4      	bge.n	9c24 <http_client_init+0x40>
			return -ENOSPC;
    9c5a:	201c      	movs	r0, #28
    9c5c:	4240      	negs	r0, r0
    9c5e:	e7e6      	b.n	9c2e <http_client_init+0x4a>
		return -EINVAL;
    9c60:	2016      	movs	r0, #22
    9c62:	4240      	negs	r0, r0
    9c64:	e7e3      	b.n	9c2e <http_client_init+0x4a>
    9c66:	2016      	movs	r0, #22
    9c68:	4240      	negs	r0, r0
    9c6a:	e7e0      	b.n	9c2e <http_client_init+0x4a>
		return -EINVAL;
    9c6c:	2016      	movs	r0, #22
    9c6e:	4240      	negs	r0, r0
    9c70:	e7dd      	b.n	9c2e <http_client_init+0x4a>
		return -EINVAL;
    9c72:	2016      	movs	r0, #22
    9c74:	4240      	negs	r0, r0
    9c76:	e7da      	b.n	9c2e <http_client_init+0x4a>
		return -EINVAL;
    9c78:	2016      	movs	r0, #22
    9c7a:	4240      	negs	r0, r0
    9c7c:	e7d7      	b.n	9c2e <http_client_init+0x4a>
			return -ENOMEM;
    9c7e:	200c      	movs	r0, #12
    9c80:	4240      	negs	r0, r0
    9c82:	e7d4      	b.n	9c2e <http_client_init+0x4a>
    9c84:	0000bdaf 	.word	0x0000bdaf
    9c88:	0000bd79 	.word	0x0000bd79
    9c8c:	0000bd51 	.word	0x0000bd51
    9c90:	00009da9 	.word	0x00009da9
    9c94:	0000ac71 	.word	0x0000ac71

00009c98 <http_client_register_callback>:
	if (module == NULL) {
    9c98:	2800      	cmp	r0, #0
    9c9a:	d002      	beq.n	9ca2 <http_client_register_callback+0xa>
	module->cb = callback;
    9c9c:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    9c9e:	2000      	movs	r0, #0
}
    9ca0:	4770      	bx	lr
		return -EINVAL;
    9ca2:	2016      	movs	r0, #22
    9ca4:	4240      	negs	r0, r0
    9ca6:	e7fb      	b.n	9ca0 <http_client_register_callback+0x8>

00009ca8 <_http_client_clear_conn>:
{
    9ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9caa:	b085      	sub	sp, #20
    9cac:	0004      	movs	r4, r0
    9cae:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    9cb0:	23c0      	movs	r3, #192	; 0xc0
    9cb2:	58c3      	ldr	r3, [r0, r3]
    9cb4:	2b00      	cmp	r3, #0
    9cb6:	d002      	beq.n	9cbe <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    9cb8:	22c4      	movs	r2, #196	; 0xc4
    9cba:	5880      	ldr	r0, [r0, r2]
    9cbc:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    9cbe:	0020      	movs	r0, r4
    9cc0:	30b0      	adds	r0, #176	; 0xb0
    9cc2:	2218      	movs	r2, #24
    9cc4:	2100      	movs	r1, #0
    9cc6:	4b17      	ldr	r3, [pc, #92]	; (9d24 <_http_client_clear_conn+0x7c>)
    9cc8:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    9cca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9ccc:	2b00      	cmp	r3, #0
    9cce:	d124      	bne.n	9d1a <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    9cd0:	2300      	movs	r3, #0
    9cd2:	56e3      	ldrsb	r3, [r4, r3]
    9cd4:	009b      	lsls	r3, r3, #2
    9cd6:	2500      	movs	r5, #0
    9cd8:	4a13      	ldr	r2, [pc, #76]	; (9d28 <_http_client_clear_conn+0x80>)
    9cda:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    9cdc:	0020      	movs	r0, r4
    9cde:	306c      	adds	r0, #108	; 0x6c
    9ce0:	226c      	movs	r2, #108	; 0x6c
    9ce2:	2100      	movs	r1, #0
    9ce4:	4f0f      	ldr	r7, [pc, #60]	; (9d24 <_http_client_clear_conn+0x7c>)
    9ce6:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    9ce8:	0020      	movs	r0, r4
    9cea:	30d8      	adds	r0, #216	; 0xd8
    9cec:	2210      	movs	r2, #16
    9cee:	2100      	movs	r1, #0
    9cf0:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    9cf2:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    9cf4:	23d8      	movs	r3, #216	; 0xd8
    9cf6:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    9cf8:	2241      	movs	r2, #65	; 0x41
    9cfa:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    9cfc:	2101      	movs	r1, #1
    9cfe:	438b      	bics	r3, r1
    9d00:	3101      	adds	r1, #1
    9d02:	438b      	bics	r3, r1
    9d04:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    9d06:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    9d08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9d0a:	2b00      	cmp	r3, #0
    9d0c:	d003      	beq.n	9d16 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    9d0e:	aa01      	add	r2, sp, #4
    9d10:	3102      	adds	r1, #2
    9d12:	0020      	movs	r0, r4
    9d14:	4798      	blx	r3
}
    9d16:	b005      	add	sp, #20
    9d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    9d1a:	2000      	movs	r0, #0
    9d1c:	5620      	ldrsb	r0, [r4, r0]
    9d1e:	4b03      	ldr	r3, [pc, #12]	; (9d2c <_http_client_clear_conn+0x84>)
    9d20:	4798      	blx	r3
    9d22:	e7d5      	b.n	9cd0 <_http_client_clear_conn+0x28>
    9d24:	0000bdaf 	.word	0x0000bdaf
    9d28:	20000800 	.word	0x20000800
    9d2c:	00004299 	.word	0x00004299

00009d30 <http_client_socket_resolve_handler>:
{
    9d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d32:	b087      	sub	sp, #28
    9d34:	9000      	str	r0, [sp, #0]
    9d36:	9101      	str	r1, [sp, #4]
    9d38:	4c17      	ldr	r4, [pc, #92]	; (9d98 <http_client_socket_resolve_handler+0x68>)
    9d3a:	0026      	movs	r6, r4
    9d3c:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    9d3e:	4f17      	ldr	r7, [pc, #92]	; (9d9c <http_client_socket_resolve_handler+0x6c>)
    9d40:	e015      	b.n	9d6e <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    9d42:	2302      	movs	r3, #2
    9d44:	aa02      	add	r2, sp, #8
    9d46:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    9d48:	334e      	adds	r3, #78	; 0x4e
    9d4a:	5aeb      	ldrh	r3, [r5, r3]
    9d4c:	021a      	lsls	r2, r3, #8
    9d4e:	0a1b      	lsrs	r3, r3, #8
    9d50:	4313      	orrs	r3, r2
    9d52:	aa02      	add	r2, sp, #8
    9d54:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    9d56:	9b01      	ldr	r3, [sp, #4]
    9d58:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    9d5a:	2000      	movs	r0, #0
    9d5c:	5628      	ldrsb	r0, [r5, r0]
    9d5e:	2210      	movs	r2, #16
    9d60:	a902      	add	r1, sp, #8
    9d62:	4b0f      	ldr	r3, [pc, #60]	; (9da0 <http_client_socket_resolve_handler+0x70>)
    9d64:	4798      	blx	r3
				return;
    9d66:	e015      	b.n	9d94 <http_client_socket_resolve_handler+0x64>
    9d68:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    9d6a:	42b4      	cmp	r4, r6
    9d6c:	d012      	beq.n	9d94 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    9d6e:	6825      	ldr	r5, [r4, #0]
    9d70:	2d00      	cmp	r5, #0
    9d72:	d0f9      	beq.n	9d68 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    9d74:	1c69      	adds	r1, r5, #1
    9d76:	9800      	ldr	r0, [sp, #0]
    9d78:	47b8      	blx	r7
    9d7a:	2800      	cmp	r0, #0
    9d7c:	d1f4      	bne.n	9d68 <http_client_socket_resolve_handler+0x38>
    9d7e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    9d80:	2b01      	cmp	r3, #1
    9d82:	d1f1      	bne.n	9d68 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    9d84:	9b01      	ldr	r3, [sp, #4]
    9d86:	2b00      	cmp	r3, #0
    9d88:	d1db      	bne.n	9d42 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    9d8a:	2176      	movs	r1, #118	; 0x76
    9d8c:	4249      	negs	r1, r1
    9d8e:	0028      	movs	r0, r5
    9d90:	4b04      	ldr	r3, [pc, #16]	; (9da4 <http_client_socket_resolve_handler+0x74>)
    9d92:	4798      	blx	r3
}
    9d94:	b007      	add	sp, #28
    9d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d98:	20000800 	.word	0x20000800
    9d9c:	0000c279 	.word	0x0000c279
    9da0:	000040dd 	.word	0x000040dd
    9da4:	00009ca9 	.word	0x00009ca9

00009da8 <http_client_timer_callback>:
{
    9da8:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    9daa:	2a00      	cmp	r2, #0
    9dac:	d004      	beq.n	9db8 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    9dae:	213e      	movs	r1, #62	; 0x3e
    9db0:	4249      	negs	r1, r1
    9db2:	0010      	movs	r0, r2
    9db4:	4b01      	ldr	r3, [pc, #4]	; (9dbc <http_client_timer_callback+0x14>)
    9db6:	4798      	blx	r3
}
    9db8:	bd10      	pop	{r4, pc}
    9dba:	46c0      	nop			; (mov r8, r8)
    9dbc:	00009ca9 	.word	0x00009ca9

00009dc0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    9dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dc2:	46de      	mov	lr, fp
    9dc4:	4657      	mov	r7, sl
    9dc6:	b580      	push	{r7, lr}
    9dc8:	b095      	sub	sp, #84	; 0x54
    9dca:	af02      	add	r7, sp, #8
    9dcc:	0004      	movs	r4, r0
    9dce:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    9dd0:	2310      	movs	r3, #16
    9dd2:	2208      	movs	r2, #8
    9dd4:	18ba      	adds	r2, r7, r2
    9dd6:	18d2      	adds	r2, r2, r3
    9dd8:	4bb1      	ldr	r3, [pc, #708]	; (a0a0 <_http_client_request+0x2e0>)
    9dda:	cb23      	ldmia	r3!, {r0, r1, r5}
    9ddc:	c223      	stmia	r2!, {r0, r1, r5}
    9dde:	681b      	ldr	r3, [r3, #0]
    9de0:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    9de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9de4:	1dd3      	adds	r3, r2, #7
    9de6:	08db      	lsrs	r3, r3, #3
    9de8:	00db      	lsls	r3, r3, #3
    9dea:	4669      	mov	r1, sp
    9dec:	1acb      	subs	r3, r1, r3
    9dee:	469d      	mov	sp, r3
    9df0:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    9df2:	2c00      	cmp	r4, #0
    9df4:	d100      	bne.n	9df8 <_http_client_request+0x38>
    9df6:	e1f0      	b.n	a1da <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    9df8:	2341      	movs	r3, #65	; 0x41
    9dfa:	5ce3      	ldrb	r3, [r4, r3]
    9dfc:	07db      	lsls	r3, r3, #31
    9dfe:	d500      	bpl.n	9e02 <_http_client_request+0x42>
    9e00:	e1eb      	b.n	a1da <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    9e02:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9e04:	2b03      	cmp	r3, #3
    9e06:	d004      	beq.n	9e12 <_http_client_request+0x52>
    9e08:	2b04      	cmp	r3, #4
    9e0a:	d100      	bne.n	9e0e <_http_client_request+0x4e>
    9e0c:	e120      	b.n	a050 <_http_client_request+0x290>
    9e0e:	46dd      	mov	sp, fp
    9e10:	e1e4      	b.n	a1dc <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    9e12:	2300      	movs	r3, #0
    9e14:	21cc      	movs	r1, #204	; 0xcc
    9e16:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    9e18:	3104      	adds	r1, #4
    9e1a:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    9e1c:	9400      	str	r4, [sp, #0]
    9e1e:	4ba1      	ldr	r3, [pc, #644]	; (a0a4 <_http_client_request+0x2e4>)
    9e20:	0031      	movs	r1, r6
    9e22:	202c      	movs	r0, #44	; 0x2c
    9e24:	2508      	movs	r5, #8
    9e26:	46ac      	mov	ip, r5
    9e28:	44bc      	add	ip, r7
    9e2a:	4460      	add	r0, ip
    9e2c:	4d9e      	ldr	r5, [pc, #632]	; (a0a8 <_http_client_request+0x2e8>)
    9e2e:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    9e30:	23c8      	movs	r3, #200	; 0xc8
    9e32:	5ce3      	ldrb	r3, [r4, r3]
    9e34:	2b01      	cmp	r3, #1
    9e36:	d100      	bne.n	9e3a <_http_client_request+0x7a>
    9e38:	e0a9      	b.n	9f8e <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    9e3a:	2b02      	cmp	r3, #2
    9e3c:	d100      	bne.n	9e40 <_http_client_request+0x80>
    9e3e:	e0af      	b.n	9fa0 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    9e40:	2b03      	cmp	r3, #3
    9e42:	d100      	bne.n	9e46 <_http_client_request+0x86>
    9e44:	e0b5      	b.n	9fb2 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    9e46:	2b04      	cmp	r3, #4
    9e48:	d100      	bne.n	9e4c <_http_client_request+0x8c>
    9e4a:	e0bb      	b.n	9fc4 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    9e4c:	2b05      	cmp	r3, #5
    9e4e:	d100      	bne.n	9e52 <_http_client_request+0x92>
    9e50:	e0c1      	b.n	9fd6 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    9e52:	2b06      	cmp	r3, #6
    9e54:	d100      	bne.n	9e58 <_http_client_request+0x98>
    9e56:	e0c7      	b.n	9fe8 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    9e58:	0025      	movs	r5, r4
    9e5a:	3570      	adds	r5, #112	; 0x70
    9e5c:	0028      	movs	r0, r5
    9e5e:	4b93      	ldr	r3, [pc, #588]	; (a0ac <_http_client_request+0x2ec>)
    9e60:	469a      	mov	sl, r3
    9e62:	4798      	blx	r3
    9e64:	0002      	movs	r2, r0
    9e66:	0029      	movs	r1, r5
    9e68:	232c      	movs	r3, #44	; 0x2c
    9e6a:	2008      	movs	r0, #8
    9e6c:	1838      	adds	r0, r7, r0
    9e6e:	18c0      	adds	r0, r0, r3
    9e70:	4d8f      	ldr	r5, [pc, #572]	; (a0b0 <_http_client_request+0x2f0>)
    9e72:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    9e74:	220b      	movs	r2, #11
    9e76:	498f      	ldr	r1, [pc, #572]	; (a0b4 <_http_client_request+0x2f4>)
    9e78:	232c      	movs	r3, #44	; 0x2c
    9e7a:	2008      	movs	r0, #8
    9e7c:	1838      	adds	r0, r7, r0
    9e7e:	18c0      	adds	r0, r0, r3
    9e80:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    9e82:	220c      	movs	r2, #12
    9e84:	498c      	ldr	r1, [pc, #560]	; (a0b8 <_http_client_request+0x2f8>)
    9e86:	232c      	movs	r3, #44	; 0x2c
    9e88:	2008      	movs	r0, #8
    9e8a:	1838      	adds	r0, r7, r0
    9e8c:	18c0      	adds	r0, r0, r3
    9e8e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    9e90:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    9e92:	607b      	str	r3, [r7, #4]
    9e94:	0018      	movs	r0, r3
    9e96:	47d0      	blx	sl
    9e98:	0002      	movs	r2, r0
    9e9a:	6879      	ldr	r1, [r7, #4]
    9e9c:	232c      	movs	r3, #44	; 0x2c
    9e9e:	2008      	movs	r0, #8
    9ea0:	1838      	adds	r0, r7, r0
    9ea2:	18c0      	adds	r0, r0, r3
    9ea4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9ea6:	2202      	movs	r2, #2
    9ea8:	4984      	ldr	r1, [pc, #528]	; (a0bc <_http_client_request+0x2fc>)
    9eaa:	232c      	movs	r3, #44	; 0x2c
    9eac:	2008      	movs	r0, #8
    9eae:	1838      	adds	r0, r7, r0
    9eb0:	18c0      	adds	r0, r0, r3
    9eb2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    9eb4:	2206      	movs	r2, #6
    9eb6:	4982      	ldr	r1, [pc, #520]	; (a0c0 <_http_client_request+0x300>)
    9eb8:	232c      	movs	r3, #44	; 0x2c
    9eba:	2008      	movs	r0, #8
    9ebc:	1838      	adds	r0, r7, r0
    9ebe:	18c0      	adds	r0, r0, r3
    9ec0:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    9ec2:	1c63      	adds	r3, r4, #1
    9ec4:	607b      	str	r3, [r7, #4]
    9ec6:	0018      	movs	r0, r3
    9ec8:	47d0      	blx	sl
    9eca:	0002      	movs	r2, r0
    9ecc:	6879      	ldr	r1, [r7, #4]
    9ece:	232c      	movs	r3, #44	; 0x2c
    9ed0:	2008      	movs	r0, #8
    9ed2:	1838      	adds	r0, r7, r0
    9ed4:	18c0      	adds	r0, r0, r3
    9ed6:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9ed8:	2202      	movs	r2, #2
    9eda:	4978      	ldr	r1, [pc, #480]	; (a0bc <_http_client_request+0x2fc>)
    9edc:	232c      	movs	r3, #44	; 0x2c
    9ede:	2008      	movs	r0, #8
    9ee0:	1838      	adds	r0, r7, r0
    9ee2:	18c0      	adds	r0, r0, r3
    9ee4:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    9ee6:	2218      	movs	r2, #24
    9ee8:	4976      	ldr	r1, [pc, #472]	; (a0c4 <_http_client_request+0x304>)
    9eea:	232c      	movs	r3, #44	; 0x2c
    9eec:	2008      	movs	r0, #8
    9eee:	1838      	adds	r0, r7, r0
    9ef0:	18c0      	adds	r0, r0, r3
    9ef2:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    9ef4:	2213      	movs	r2, #19
    9ef6:	4974      	ldr	r1, [pc, #464]	; (a0c8 <_http_client_request+0x308>)
    9ef8:	232c      	movs	r3, #44	; 0x2c
    9efa:	2008      	movs	r0, #8
    9efc:	1838      	adds	r0, r7, r0
    9efe:	18c0      	adds	r0, r0, r3
    9f00:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    9f02:	2217      	movs	r2, #23
    9f04:	4971      	ldr	r1, [pc, #452]	; (a0cc <_http_client_request+0x30c>)
    9f06:	232c      	movs	r3, #44	; 0x2c
    9f08:	2008      	movs	r0, #8
    9f0a:	1838      	adds	r0, r7, r0
    9f0c:	18c0      	adds	r0, r0, r3
    9f0e:	47a8      	blx	r5

		if (entity->read != NULL) {
    9f10:	0023      	movs	r3, r4
    9f12:	33b0      	adds	r3, #176	; 0xb0
    9f14:	68db      	ldr	r3, [r3, #12]
    9f16:	2b00      	cmp	r3, #0
    9f18:	d07b      	beq.n	a012 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    9f1a:	23b0      	movs	r3, #176	; 0xb0
    9f1c:	5ce3      	ldrb	r3, [r4, r3]
    9f1e:	2b00      	cmp	r3, #0
    9f20:	d16b      	bne.n	9ffa <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    9f22:	0023      	movs	r3, r4
    9f24:	33b0      	adds	r3, #176	; 0xb0
    9f26:	689b      	ldr	r3, [r3, #8]
    9f28:	2b00      	cmp	r3, #0
    9f2a:	d072      	beq.n	a012 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    9f2c:	0022      	movs	r2, r4
    9f2e:	32b0      	adds	r2, #176	; 0xb0
    9f30:	6950      	ldr	r0, [r2, #20]
    9f32:	4798      	blx	r3
    9f34:	23cc      	movs	r3, #204	; 0xcc
    9f36:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    9f38:	2800      	cmp	r0, #0
    9f3a:	da00      	bge.n	9f3e <_http_client_request+0x17e>
    9f3c:	e0ac      	b.n	a098 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    9f3e:	0002      	movs	r2, r0
    9f40:	4963      	ldr	r1, [pc, #396]	; (a0d0 <_http_client_request+0x310>)
    9f42:	2320      	movs	r3, #32
    9f44:	2008      	movs	r0, #8
    9f46:	1838      	adds	r0, r7, r0
    9f48:	18c0      	adds	r0, r0, r3
    9f4a:	4b62      	ldr	r3, [pc, #392]	; (a0d4 <_http_client_request+0x314>)
    9f4c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    9f4e:	2210      	movs	r2, #16
    9f50:	4961      	ldr	r1, [pc, #388]	; (a0d8 <_http_client_request+0x318>)
    9f52:	232c      	movs	r3, #44	; 0x2c
    9f54:	2008      	movs	r0, #8
    9f56:	1838      	adds	r0, r7, r0
    9f58:	18c0      	adds	r0, r0, r3
    9f5a:	4d55      	ldr	r5, [pc, #340]	; (a0b0 <_http_client_request+0x2f0>)
    9f5c:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    9f5e:	2320      	movs	r3, #32
    9f60:	2208      	movs	r2, #8
    9f62:	18ba      	adds	r2, r7, r2
    9f64:	18d0      	adds	r0, r2, r3
    9f66:	4b51      	ldr	r3, [pc, #324]	; (a0ac <_http_client_request+0x2ec>)
    9f68:	4798      	blx	r3
    9f6a:	0002      	movs	r2, r0
    9f6c:	2320      	movs	r3, #32
    9f6e:	2108      	movs	r1, #8
    9f70:	1879      	adds	r1, r7, r1
    9f72:	18c9      	adds	r1, r1, r3
    9f74:	330c      	adds	r3, #12
    9f76:	2008      	movs	r0, #8
    9f78:	1838      	adds	r0, r7, r0
    9f7a:	18c0      	adds	r0, r0, r3
    9f7c:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9f7e:	2202      	movs	r2, #2
    9f80:	494e      	ldr	r1, [pc, #312]	; (a0bc <_http_client_request+0x2fc>)
    9f82:	232c      	movs	r3, #44	; 0x2c
    9f84:	2008      	movs	r0, #8
    9f86:	1838      	adds	r0, r7, r0
    9f88:	18c0      	adds	r0, r0, r3
    9f8a:	47a8      	blx	r5
    9f8c:	e041      	b.n	a012 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
    9f8e:	2204      	movs	r2, #4
    9f90:	4952      	ldr	r1, [pc, #328]	; (a0dc <_http_client_request+0x31c>)
    9f92:	332b      	adds	r3, #43	; 0x2b
    9f94:	2008      	movs	r0, #8
    9f96:	1838      	adds	r0, r7, r0
    9f98:	18c0      	adds	r0, r0, r3
    9f9a:	4b45      	ldr	r3, [pc, #276]	; (a0b0 <_http_client_request+0x2f0>)
    9f9c:	4798      	blx	r3
    9f9e:	e75b      	b.n	9e58 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
    9fa0:	2205      	movs	r2, #5
    9fa2:	494f      	ldr	r1, [pc, #316]	; (a0e0 <_http_client_request+0x320>)
    9fa4:	332a      	adds	r3, #42	; 0x2a
    9fa6:	2008      	movs	r0, #8
    9fa8:	1838      	adds	r0, r7, r0
    9faa:	18c0      	adds	r0, r0, r3
    9fac:	4b40      	ldr	r3, [pc, #256]	; (a0b0 <_http_client_request+0x2f0>)
    9fae:	4798      	blx	r3
    9fb0:	e752      	b.n	9e58 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    9fb2:	2207      	movs	r2, #7
    9fb4:	494b      	ldr	r1, [pc, #300]	; (a0e4 <_http_client_request+0x324>)
    9fb6:	3329      	adds	r3, #41	; 0x29
    9fb8:	2008      	movs	r0, #8
    9fba:	1838      	adds	r0, r7, r0
    9fbc:	18c0      	adds	r0, r0, r3
    9fbe:	4b3c      	ldr	r3, [pc, #240]	; (a0b0 <_http_client_request+0x2f0>)
    9fc0:	4798      	blx	r3
    9fc2:	e749      	b.n	9e58 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    9fc4:	2204      	movs	r2, #4
    9fc6:	4948      	ldr	r1, [pc, #288]	; (a0e8 <_http_client_request+0x328>)
    9fc8:	3328      	adds	r3, #40	; 0x28
    9fca:	2008      	movs	r0, #8
    9fcc:	1838      	adds	r0, r7, r0
    9fce:	18c0      	adds	r0, r0, r3
    9fd0:	4b37      	ldr	r3, [pc, #220]	; (a0b0 <_http_client_request+0x2f0>)
    9fd2:	4798      	blx	r3
    9fd4:	e740      	b.n	9e58 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    9fd6:	2208      	movs	r2, #8
    9fd8:	4944      	ldr	r1, [pc, #272]	; (a0ec <_http_client_request+0x32c>)
    9fda:	3327      	adds	r3, #39	; 0x27
    9fdc:	2008      	movs	r0, #8
    9fde:	1838      	adds	r0, r7, r0
    9fe0:	18c0      	adds	r0, r0, r3
    9fe2:	4b33      	ldr	r3, [pc, #204]	; (a0b0 <_http_client_request+0x2f0>)
    9fe4:	4798      	blx	r3
    9fe6:	e737      	b.n	9e58 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    9fe8:	2205      	movs	r2, #5
    9fea:	4941      	ldr	r1, [pc, #260]	; (a0f0 <_http_client_request+0x330>)
    9fec:	3326      	adds	r3, #38	; 0x26
    9fee:	2008      	movs	r0, #8
    9ff0:	1838      	adds	r0, r7, r0
    9ff2:	18c0      	adds	r0, r0, r3
    9ff4:	4b2e      	ldr	r3, [pc, #184]	; (a0b0 <_http_client_request+0x2f0>)
    9ff6:	4798      	blx	r3
    9ff8:	e72e      	b.n	9e58 <_http_client_request+0x98>
				module->req.content_length = -1;
    9ffa:	2201      	movs	r2, #1
    9ffc:	4252      	negs	r2, r2
    9ffe:	23cc      	movs	r3, #204	; 0xcc
    a000:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    a002:	321d      	adds	r2, #29
    a004:	493b      	ldr	r1, [pc, #236]	; (a0f4 <_http_client_request+0x334>)
    a006:	3ba0      	subs	r3, #160	; 0xa0
    a008:	2008      	movs	r0, #8
    a00a:	1838      	adds	r0, r7, r0
    a00c:	18c0      	adds	r0, r0, r3
    a00e:	4b28      	ldr	r3, [pc, #160]	; (a0b0 <_http_client_request+0x2f0>)
    a010:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    a012:	23d4      	movs	r3, #212	; 0xd4
    a014:	58e5      	ldr	r5, [r4, r3]
    a016:	2d00      	cmp	r5, #0
    a018:	d00a      	beq.n	a030 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
    a01a:	0028      	movs	r0, r5
    a01c:	4b23      	ldr	r3, [pc, #140]	; (a0ac <_http_client_request+0x2ec>)
    a01e:	4798      	blx	r3
    a020:	0002      	movs	r2, r0
    a022:	0029      	movs	r1, r5
    a024:	232c      	movs	r3, #44	; 0x2c
    a026:	2008      	movs	r0, #8
    a028:	1838      	adds	r0, r7, r0
    a02a:	18c0      	adds	r0, r0, r3
    a02c:	4b20      	ldr	r3, [pc, #128]	; (a0b0 <_http_client_request+0x2f0>)
    a02e:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    a030:	2202      	movs	r2, #2
    a032:	4922      	ldr	r1, [pc, #136]	; (a0bc <_http_client_request+0x2fc>)
    a034:	232c      	movs	r3, #44	; 0x2c
    a036:	2008      	movs	r0, #8
    a038:	1838      	adds	r0, r7, r0
    a03a:	18c0      	adds	r0, r0, r3
    a03c:	4b1c      	ldr	r3, [pc, #112]	; (a0b0 <_http_client_request+0x2f0>)
    a03e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    a040:	232c      	movs	r3, #44	; 0x2c
    a042:	2208      	movs	r2, #8
    a044:	18ba      	adds	r2, r7, r2
    a046:	18d0      	adds	r0, r2, r3
    a048:	4b2b      	ldr	r3, [pc, #172]	; (a0f8 <_http_client_request+0x338>)
    a04a:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    a04c:	2304      	movs	r3, #4
    a04e:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    a050:	23cc      	movs	r3, #204	; 0xcc
    a052:	58e2      	ldr	r2, [r4, r3]
    a054:	2a00      	cmp	r2, #0
    a056:	db51      	blt.n	a0fc <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    a058:	dc00      	bgt.n	a05c <_http_client_request+0x29c>
    a05a:	e0f0      	b.n	a23e <_http_client_request+0x47e>
    a05c:	0023      	movs	r3, r4
    a05e:	33b0      	adds	r3, #176	; 0xb0
    a060:	68dd      	ldr	r5, [r3, #12]
    a062:	2d00      	cmp	r5, #0
    a064:	d100      	bne.n	a068 <_http_client_request+0x2a8>
    a066:	e0ea      	b.n	a23e <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    a068:	23d0      	movs	r3, #208	; 0xd0
    a06a:	58e3      	ldr	r3, [r4, r3]
    a06c:	429a      	cmp	r2, r3
    a06e:	dd00      	ble.n	a072 <_http_client_request+0x2b2>
    a070:	e0ba      	b.n	a1e8 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    a072:	23c0      	movs	r3, #192	; 0xc0
    a074:	58e3      	ldr	r3, [r4, r3]
    a076:	2b00      	cmp	r3, #0
    a078:	d002      	beq.n	a080 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
    a07a:	22c4      	movs	r2, #196	; 0xc4
    a07c:	58a0      	ldr	r0, [r4, r2]
    a07e:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    a080:	2302      	movs	r3, #2
    a082:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    a084:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a086:	2b00      	cmp	r3, #0
    a088:	d100      	bne.n	a08c <_http_client_request+0x2cc>
    a08a:	e6c0      	b.n	9e0e <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    a08c:	220c      	movs	r2, #12
    a08e:	18ba      	adds	r2, r7, r2
    a090:	2101      	movs	r1, #1
    a092:	0020      	movs	r0, r4
    a094:	4798      	blx	r3
    a096:	e6ba      	b.n	9e0e <_http_client_request+0x4e>
					module->req.content_length = 0;
    a098:	2200      	movs	r2, #0
    a09a:	50e2      	str	r2, [r4, r3]
    a09c:	e7b9      	b.n	a012 <_http_client_request+0x252>
    a09e:	46c0      	nop			; (mov r8, r8)
    a0a0:	0000eb78 	.word	0x0000eb78
    a0a4:	00009b51 	.word	0x00009b51
    a0a8:	0000ab1d 	.word	0x0000ab1d
    a0ac:	0000c2d7 	.word	0x0000c2d7
    a0b0:	0000ab71 	.word	0x0000ab71
    a0b4:	0000ebec 	.word	0x0000ebec
    a0b8:	0000ebf8 	.word	0x0000ebf8
    a0bc:	0000f018 	.word	0x0000f018
    a0c0:	0000ec08 	.word	0x0000ec08
    a0c4:	0000ec10 	.word	0x0000ec10
    a0c8:	0000ec2c 	.word	0x0000ec2c
    a0cc:	0000ec40 	.word	0x0000ec40
    a0d0:	0000ec78 	.word	0x0000ec78
    a0d4:	0000c235 	.word	0x0000c235
    a0d8:	0000ec7c 	.word	0x0000ec7c
    a0dc:	0000ebb8 	.word	0x0000ebb8
    a0e0:	0000ebc0 	.word	0x0000ebc0
    a0e4:	0000ebc8 	.word	0x0000ebc8
    a0e8:	0000ebd0 	.word	0x0000ebd0
    a0ec:	0000ebd8 	.word	0x0000ebd8
    a0f0:	0000ebe4 	.word	0x0000ebe4
    a0f4:	0000ec58 	.word	0x0000ec58
    a0f8:	0000ab2d 	.word	0x0000ab2d
		if (module->req.content_length < 0 && entity->read) {
    a0fc:	0023      	movs	r3, r4
    a0fe:	33b0      	adds	r3, #176	; 0xb0
    a100:	68dd      	ldr	r5, [r3, #12]
    a102:	2d00      	cmp	r5, #0
    a104:	d100      	bne.n	a108 <_http_client_request+0x348>
    a106:	e09a      	b.n	a23e <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    a108:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    a10a:	58e3      	ldr	r3, [r4, r3]
    a10c:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a10e:	3a07      	subs	r2, #7
    a110:	1d71      	adds	r1, r6, #5
    a112:	0020      	movs	r0, r4
    a114:	30b0      	adds	r0, #176	; 0xb0
    a116:	6940      	ldr	r0, [r0, #20]
    a118:	47a8      	blx	r5
    a11a:	0005      	movs	r5, r0
    a11c:	43c3      	mvns	r3, r0
    a11e:	17db      	asrs	r3, r3, #31
    a120:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    a122:	220a      	movs	r2, #10
    a124:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    a126:	210d      	movs	r1, #13
    a128:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    a12a:	1973      	adds	r3, r6, r5
    a12c:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    a12e:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    a130:	230f      	movs	r3, #15
    a132:	402b      	ands	r3, r5
    a134:	3206      	adds	r2, #6
    a136:	3905      	subs	r1, #5
    a138:	468c      	mov	ip, r1
    a13a:	44bc      	add	ip, r7
    a13c:	4462      	add	r2, ip
    a13e:	5cd3      	ldrb	r3, [r2, r3]
    a140:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    a142:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    a144:	2d0f      	cmp	r5, #15
    a146:	dd0d      	ble.n	a164 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    a148:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    a14a:	17eb      	asrs	r3, r5, #31
    a14c:	220f      	movs	r2, #15
    a14e:	4013      	ands	r3, r2
    a150:	195b      	adds	r3, r3, r5
    a152:	111b      	asrs	r3, r3, #4
    a154:	4013      	ands	r3, r2
    a156:	3201      	adds	r2, #1
    a158:	2008      	movs	r0, #8
    a15a:	4684      	mov	ip, r0
    a15c:	44bc      	add	ip, r7
    a15e:	4462      	add	r2, ip
    a160:	5cd3      	ldrb	r3, [r2, r3]
    a162:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    a164:	2dff      	cmp	r5, #255	; 0xff
    a166:	dd0d      	ble.n	a184 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    a168:	17ea      	asrs	r2, r5, #31
    a16a:	23ff      	movs	r3, #255	; 0xff
    a16c:	4013      	ands	r3, r2
    a16e:	195b      	adds	r3, r3, r5
    a170:	051b      	lsls	r3, r3, #20
    a172:	0f1b      	lsrs	r3, r3, #28
    a174:	2210      	movs	r2, #16
    a176:	2108      	movs	r1, #8
    a178:	468c      	mov	ip, r1
    a17a:	44bc      	add	ip, r7
    a17c:	4462      	add	r2, ip
    a17e:	5cd3      	ldrb	r3, [r2, r3]
    a180:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    a182:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    a184:	1cca      	adds	r2, r1, #3
    a186:	1b92      	subs	r2, r2, r6
    a188:	1d2b      	adds	r3, r5, #4
    a18a:	18d2      	adds	r2, r2, r3
    a18c:	b292      	uxth	r2, r2
    a18e:	2000      	movs	r0, #0
    a190:	5620      	ldrsb	r0, [r4, r0]
    a192:	2300      	movs	r3, #0
    a194:	4e30      	ldr	r6, [pc, #192]	; (a258 <_http_client_request+0x498>)
    a196:	47b0      	blx	r6
    a198:	2800      	cmp	r0, #0
    a19a:	db19      	blt.n	a1d0 <_http_client_request+0x410>
			module->req.sent_length += size;
    a19c:	22d0      	movs	r2, #208	; 0xd0
    a19e:	58a3      	ldr	r3, [r4, r2]
    a1a0:	195b      	adds	r3, r3, r5
    a1a2:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    a1a4:	2d00      	cmp	r5, #0
    a1a6:	d000      	beq.n	a1aa <_http_client_request+0x3ea>
    a1a8:	e631      	b.n	9e0e <_http_client_request+0x4e>
				if (module->req.entity.close) {
    a1aa:	23c0      	movs	r3, #192	; 0xc0
    a1ac:	58e3      	ldr	r3, [r4, r3]
    a1ae:	2b00      	cmp	r3, #0
    a1b0:	d002      	beq.n	a1b8 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    a1b2:	3a0c      	subs	r2, #12
    a1b4:	58a0      	ldr	r0, [r4, r2]
    a1b6:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    a1b8:	2302      	movs	r3, #2
    a1ba:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    a1bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d100      	bne.n	a1c4 <_http_client_request+0x404>
    a1c2:	e624      	b.n	9e0e <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    a1c4:	220c      	movs	r2, #12
    a1c6:	18ba      	adds	r2, r7, r2
    a1c8:	2101      	movs	r1, #1
    a1ca:	0020      	movs	r0, r4
    a1cc:	4798      	blx	r3
    a1ce:	e61e      	b.n	9e0e <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
    a1d0:	2105      	movs	r1, #5
    a1d2:	4249      	negs	r1, r1
    a1d4:	0020      	movs	r0, r4
    a1d6:	4b21      	ldr	r3, [pc, #132]	; (a25c <_http_client_request+0x49c>)
    a1d8:	4798      	blx	r3
    a1da:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    a1dc:	46bd      	mov	sp, r7
    a1de:	b013      	add	sp, #76	; 0x4c
    a1e0:	bc0c      	pop	{r2, r3}
    a1e2:	4692      	mov	sl, r2
    a1e4:	469b      	mov	fp, r3
    a1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    a1e8:	0022      	movs	r2, r4
    a1ea:	32b0      	adds	r2, #176	; 0xb0
    a1ec:	6950      	ldr	r0, [r2, #20]
    a1ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a1f0:	0031      	movs	r1, r6
    a1f2:	47a8      	blx	r5
			if (size < 0) {
    a1f4:	2800      	cmp	r0, #0
    a1f6:	db16      	blt.n	a226 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    a1f8:	23cc      	movs	r3, #204	; 0xcc
    a1fa:	58e5      	ldr	r5, [r4, r3]
    a1fc:	3304      	adds	r3, #4
    a1fe:	58e3      	ldr	r3, [r4, r3]
    a200:	1aed      	subs	r5, r5, r3
    a202:	4285      	cmp	r5, r0
    a204:	dd00      	ble.n	a208 <_http_client_request+0x448>
    a206:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    a208:	b2aa      	uxth	r2, r5
    a20a:	2000      	movs	r0, #0
    a20c:	5620      	ldrsb	r0, [r4, r0]
    a20e:	2300      	movs	r3, #0
    a210:	0031      	movs	r1, r6
    a212:	4e11      	ldr	r6, [pc, #68]	; (a258 <_http_client_request+0x498>)
    a214:	47b0      	blx	r6
    a216:	2800      	cmp	r0, #0
    a218:	db0b      	blt.n	a232 <_http_client_request+0x472>
				module->req.sent_length += size;
    a21a:	23d0      	movs	r3, #208	; 0xd0
    a21c:	58e2      	ldr	r2, [r4, r3]
    a21e:	4694      	mov	ip, r2
    a220:	4465      	add	r5, ip
    a222:	50e5      	str	r5, [r4, r3]
    a224:	e5f3      	b.n	9e0e <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    a226:	2105      	movs	r1, #5
    a228:	4249      	negs	r1, r1
    a22a:	0020      	movs	r0, r4
    a22c:	4b0b      	ldr	r3, [pc, #44]	; (a25c <_http_client_request+0x49c>)
    a22e:	4798      	blx	r3
    a230:	e5ed      	b.n	9e0e <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
    a232:	2105      	movs	r1, #5
    a234:	4249      	negs	r1, r1
    a236:	0020      	movs	r0, r4
    a238:	4b08      	ldr	r3, [pc, #32]	; (a25c <_http_client_request+0x49c>)
    a23a:	4798      	blx	r3
					return;
    a23c:	e7cd      	b.n	a1da <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    a23e:	2302      	movs	r3, #2
    a240:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    a242:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a244:	2b00      	cmp	r3, #0
    a246:	d100      	bne.n	a24a <_http_client_request+0x48a>
    a248:	e5e1      	b.n	9e0e <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    a24a:	220c      	movs	r2, #12
    a24c:	18ba      	adds	r2, r7, r2
    a24e:	2101      	movs	r1, #1
    a250:	0020      	movs	r0, r4
    a252:	4798      	blx	r3
    a254:	e5db      	b.n	9e0e <_http_client_request+0x4e>
    a256:	46c0      	nop			; (mov r8, r8)
    a258:	0000416d 	.word	0x0000416d
    a25c:	00009ca9 	.word	0x00009ca9

0000a260 <http_client_send_request>:
{
    a260:	b5f0      	push	{r4, r5, r6, r7, lr}
    a262:	46d6      	mov	lr, sl
    a264:	b500      	push	{lr}
    a266:	b088      	sub	sp, #32
    a268:	0004      	movs	r4, r0
    a26a:	000f      	movs	r7, r1
    a26c:	4692      	mov	sl, r2
    a26e:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    a270:	2800      	cmp	r0, #0
    a272:	d100      	bne.n	a276 <http_client_send_request+0x16>
    a274:	e0d3      	b.n	a41e <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    a276:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    a278:	2b02      	cmp	r3, #2
    a27a:	d900      	bls.n	a27e <http_client_send_request+0x1e>
    a27c:	e0d3      	b.n	a426 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    a27e:	2207      	movs	r2, #7
    a280:	4981      	ldr	r1, [pc, #516]	; (a488 <http_client_send_request+0x228>)
    a282:	0038      	movs	r0, r7
    a284:	4b81      	ldr	r3, [pc, #516]	; (a48c <http_client_send_request+0x22c>)
    a286:	4798      	blx	r3
		i = 7;
    a288:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    a28a:	2800      	cmp	r0, #0
    a28c:	d007      	beq.n	a29e <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    a28e:	2208      	movs	r2, #8
    a290:	497f      	ldr	r1, [pc, #508]	; (a490 <http_client_send_request+0x230>)
    a292:	0038      	movs	r0, r7
    a294:	4b7d      	ldr	r3, [pc, #500]	; (a48c <http_client_send_request+0x22c>)
    a296:	4798      	blx	r3
		i = 8;
    a298:	4246      	negs	r6, r0
    a29a:	4146      	adcs	r6, r0
    a29c:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    a29e:	1c63      	adds	r3, r4, #1
    a2a0:	19bd      	adds	r5, r7, r6
    a2a2:	9302      	str	r3, [sp, #8]
    a2a4:	0018      	movs	r0, r3
    a2a6:	4b7b      	ldr	r3, [pc, #492]	; (a494 <http_client_send_request+0x234>)
    a2a8:	4798      	blx	r3
    a2aa:	0002      	movs	r2, r0
    a2ac:	0029      	movs	r1, r5
    a2ae:	9802      	ldr	r0, [sp, #8]
    a2b0:	4b76      	ldr	r3, [pc, #472]	; (a48c <http_client_send_request+0x22c>)
    a2b2:	4798      	blx	r3
    a2b4:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    a2b6:	782b      	ldrb	r3, [r5, #0]
    a2b8:	2b00      	cmp	r3, #0
    a2ba:	d052      	beq.n	a362 <http_client_send_request+0x102>
    a2bc:	2b2f      	cmp	r3, #47	; 0x2f
    a2be:	d052      	beq.n	a366 <http_client_send_request+0x106>
    a2c0:	1c71      	adds	r1, r6, #1
    a2c2:	1879      	adds	r1, r7, r1
    a2c4:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    a2c6:	3201      	adds	r2, #1
    a2c8:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    a2ca:	000d      	movs	r5, r1
    a2cc:	780b      	ldrb	r3, [r1, #0]
    a2ce:	2b00      	cmp	r3, #0
    a2d0:	d002      	beq.n	a2d8 <http_client_send_request+0x78>
    a2d2:	3101      	adds	r1, #1
    a2d4:	2b2f      	cmp	r3, #47	; 0x2f
    a2d6:	d1f6      	bne.n	a2c6 <http_client_send_request+0x66>
	module->host[j] = '\0';
    a2d8:	18a2      	adds	r2, r4, r2
    a2da:	2300      	movs	r3, #0
    a2dc:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    a2de:	7863      	ldrb	r3, [r4, #1]
    a2e0:	2b00      	cmp	r3, #0
    a2e2:	d100      	bne.n	a2e6 <http_client_send_request+0x86>
    a2e4:	e0a3      	b.n	a42e <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    a2e6:	0028      	movs	r0, r5
    a2e8:	4b6a      	ldr	r3, [pc, #424]	; (a494 <http_client_send_request+0x234>)
    a2ea:	4798      	blx	r3
    a2ec:	283f      	cmp	r0, #63	; 0x3f
    a2ee:	d900      	bls.n	a2f2 <http_client_send_request+0x92>
    a2f0:	e0a1      	b.n	a436 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    a2f2:	23d4      	movs	r3, #212	; 0xd4
    a2f4:	58e0      	ldr	r0, [r4, r3]
    a2f6:	2800      	cmp	r0, #0
    a2f8:	d001      	beq.n	a2fe <http_client_send_request+0x9e>
		free(module->req.ext_header);
    a2fa:	4b67      	ldr	r3, [pc, #412]	; (a498 <http_client_send_request+0x238>)
    a2fc:	4798      	blx	r3
	if (ext_header != NULL) {
    a2fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a300:	2b00      	cmp	r3, #0
    a302:	d032      	beq.n	a36a <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    a304:	0018      	movs	r0, r3
    a306:	4b65      	ldr	r3, [pc, #404]	; (a49c <http_client_send_request+0x23c>)
    a308:	4798      	blx	r3
    a30a:	23d4      	movs	r3, #212	; 0xd4
    a30c:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    a30e:	2800      	cmp	r0, #0
    a310:	d100      	bne.n	a314 <http_client_send_request+0xb4>
    a312:	e094      	b.n	a43e <http_client_send_request+0x1de>
	module->sending = 0;
    a314:	2241      	movs	r2, #65	; 0x41
    a316:	5ca3      	ldrb	r3, [r4, r2]
    a318:	2101      	movs	r1, #1
    a31a:	438b      	bics	r3, r1
    a31c:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    a31e:	2300      	movs	r3, #0
    a320:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    a322:	782b      	ldrb	r3, [r5, #0]
    a324:	2b2f      	cmp	r3, #47	; 0x2f
    a326:	d024      	beq.n	a372 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    a328:	222f      	movs	r2, #47	; 0x2f
    a32a:	2370      	movs	r3, #112	; 0x70
    a32c:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    a32e:	782b      	ldrb	r3, [r5, #0]
    a330:	2b00      	cmp	r3, #0
    a332:	d124      	bne.n	a37e <http_client_send_request+0x11e>
	if (entity != NULL) {
    a334:	9b03      	ldr	r3, [sp, #12]
    a336:	2b00      	cmp	r3, #0
    a338:	d027      	beq.n	a38a <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    a33a:	0020      	movs	r0, r4
    a33c:	30b0      	adds	r0, #176	; 0xb0
    a33e:	2218      	movs	r2, #24
    a340:	0019      	movs	r1, r3
    a342:	4b57      	ldr	r3, [pc, #348]	; (a4a0 <http_client_send_request+0x240>)
    a344:	4798      	blx	r3
	module->req.method = method;
    a346:	23c8      	movs	r3, #200	; 0xc8
    a348:	4652      	mov	r2, sl
    a34a:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    a34c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    a34e:	2b01      	cmp	r3, #1
    a350:	d022      	beq.n	a398 <http_client_send_request+0x138>
    a352:	2b00      	cmp	r3, #0
    a354:	d027      	beq.n	a3a6 <http_client_send_request+0x146>
    a356:	2b02      	cmp	r3, #2
    a358:	d03a      	beq.n	a3d0 <http_client_send_request+0x170>
		return -EAGAIN;
    a35a:	230b      	movs	r3, #11
    a35c:	425b      	negs	r3, r3
    a35e:	9301      	str	r3, [sp, #4]
    a360:	e08d      	b.n	a47e <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    a362:	2200      	movs	r2, #0
    a364:	e7b8      	b.n	a2d8 <http_client_send_request+0x78>
    a366:	2200      	movs	r2, #0
    a368:	e7b6      	b.n	a2d8 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    a36a:	2200      	movs	r2, #0
    a36c:	23d4      	movs	r3, #212	; 0xd4
    a36e:	50e2      	str	r2, [r4, r3]
    a370:	e7d0      	b.n	a314 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    a372:	0020      	movs	r0, r4
    a374:	3070      	adds	r0, #112	; 0x70
    a376:	0029      	movs	r1, r5
    a378:	4b4a      	ldr	r3, [pc, #296]	; (a4a4 <http_client_send_request+0x244>)
    a37a:	4798      	blx	r3
    a37c:	e7da      	b.n	a334 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    a37e:	0029      	movs	r1, r5
    a380:	0020      	movs	r0, r4
    a382:	3071      	adds	r0, #113	; 0x71
    a384:	4b47      	ldr	r3, [pc, #284]	; (a4a4 <http_client_send_request+0x244>)
    a386:	4798      	blx	r3
    a388:	e7d4      	b.n	a334 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    a38a:	0020      	movs	r0, r4
    a38c:	30b0      	adds	r0, #176	; 0xb0
    a38e:	2218      	movs	r2, #24
    a390:	2100      	movs	r1, #0
    a392:	4b45      	ldr	r3, [pc, #276]	; (a4a8 <http_client_send_request+0x248>)
    a394:	4798      	blx	r3
    a396:	e7d6      	b.n	a346 <http_client_send_request+0xe6>
		if (!reconnect) {
    a398:	9b01      	ldr	r3, [sp, #4]
    a39a:	2b00      	cmp	r3, #0
    a39c:	d06f      	beq.n	a47e <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    a39e:	2100      	movs	r1, #0
    a3a0:	0020      	movs	r0, r4
    a3a2:	4b42      	ldr	r3, [pc, #264]	; (a4ac <http_client_send_request+0x24c>)
    a3a4:	4798      	blx	r3
		if (module->config.tls) {
    a3a6:	2352      	movs	r3, #82	; 0x52
    a3a8:	5ce2      	ldrb	r2, [r4, r3]
    a3aa:	1e53      	subs	r3, r2, #1
    a3ac:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    a3ae:	b2d2      	uxtb	r2, r2
    a3b0:	2101      	movs	r1, #1
    a3b2:	2002      	movs	r0, #2
    a3b4:	4b3e      	ldr	r3, [pc, #248]	; (a4b0 <http_client_send_request+0x250>)
    a3b6:	4798      	blx	r3
    a3b8:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    a3ba:	2800      	cmp	r0, #0
    a3bc:	db43      	blt.n	a446 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    a3be:	0080      	lsls	r0, r0, #2
    a3c0:	4b3c      	ldr	r3, [pc, #240]	; (a4b4 <http_client_send_request+0x254>)
    a3c2:	50c4      	str	r4, [r0, r3]
    a3c4:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    a3c6:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    a3c8:	2620      	movs	r6, #32
			isv6 = 1;
    a3ca:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    a3cc:	2730      	movs	r7, #48	; 0x30
    a3ce:	e00c      	b.n	a3ea <http_client_send_request+0x18a>
		if (!reconnect) {
    a3d0:	9b01      	ldr	r3, [sp, #4]
    a3d2:	2b00      	cmp	r3, #0
    a3d4:	d1e3      	bne.n	a39e <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    a3d6:	3303      	adds	r3, #3
    a3d8:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    a3da:	0020      	movs	r0, r4
    a3dc:	4b36      	ldr	r3, [pc, #216]	; (a4b8 <http_client_send_request+0x258>)
    a3de:	4798      	blx	r3
			break;
    a3e0:	e04d      	b.n	a47e <http_client_send_request+0x21e>
			if (isv6) {
    a3e2:	2900      	cmp	r1, #0
    a3e4:	d001      	beq.n	a3ea <http_client_send_request+0x18a>
    a3e6:	e012      	b.n	a40e <http_client_send_request+0x1ae>
			isv6 = 1;
    a3e8:	0001      	movs	r1, r0
	while (*host != '\0') {
    a3ea:	782a      	ldrb	r2, [r5, #0]
    a3ec:	2a00      	cmp	r2, #0
    a3ee:	d02e      	beq.n	a44e <http_client_send_request+0x1ee>
		ch = *host++;
    a3f0:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    a3f2:	0013      	movs	r3, r2
    a3f4:	43b3      	bics	r3, r6
    a3f6:	3b41      	subs	r3, #65	; 0x41
    a3f8:	2b05      	cmp	r3, #5
    a3fa:	d9f5      	bls.n	a3e8 <http_client_send_request+0x188>
    a3fc:	2a3a      	cmp	r2, #58	; 0x3a
    a3fe:	d00a      	beq.n	a416 <http_client_send_request+0x1b6>
    a400:	2a2f      	cmp	r2, #47	; 0x2f
    a402:	d00a      	beq.n	a41a <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    a404:	2a2e      	cmp	r2, #46	; 0x2e
    a406:	d0ec      	beq.n	a3e2 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    a408:	403a      	ands	r2, r7
    a40a:	2a30      	cmp	r2, #48	; 0x30
    a40c:	d0ed      	beq.n	a3ea <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    a40e:	9802      	ldr	r0, [sp, #8]
    a410:	4b2a      	ldr	r3, [pc, #168]	; (a4bc <http_client_send_request+0x25c>)
    a412:	4798      	blx	r3
    a414:	e02f      	b.n	a476 <http_client_send_request+0x216>
			isv6 = 1;
    a416:	0001      	movs	r1, r0
    a418:	e7e7      	b.n	a3ea <http_client_send_request+0x18a>
    a41a:	0001      	movs	r1, r0
    a41c:	e7e5      	b.n	a3ea <http_client_send_request+0x18a>
		return -EINVAL;
    a41e:	2316      	movs	r3, #22
    a420:	425b      	negs	r3, r3
    a422:	9301      	str	r3, [sp, #4]
    a424:	e02b      	b.n	a47e <http_client_send_request+0x21e>
		return -EBUSY;
    a426:	2310      	movs	r3, #16
    a428:	425b      	negs	r3, r3
    a42a:	9301      	str	r3, [sp, #4]
    a42c:	e027      	b.n	a47e <http_client_send_request+0x21e>
		return -EINVAL;
    a42e:	2316      	movs	r3, #22
    a430:	425b      	negs	r3, r3
    a432:	9301      	str	r3, [sp, #4]
    a434:	e023      	b.n	a47e <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    a436:	235b      	movs	r3, #91	; 0x5b
    a438:	425b      	negs	r3, r3
    a43a:	9301      	str	r3, [sp, #4]
    a43c:	e01f      	b.n	a47e <http_client_send_request+0x21e>
			return -ENOMEM;
    a43e:	230c      	movs	r3, #12
    a440:	425b      	negs	r3, r3
    a442:	9301      	str	r3, [sp, #4]
    a444:	e01b      	b.n	a47e <http_client_send_request+0x21e>
			return -ENOSPC;
    a446:	231c      	movs	r3, #28
    a448:	425b      	negs	r3, r3
    a44a:	9301      	str	r3, [sp, #4]
    a44c:	e017      	b.n	a47e <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    a44e:	2302      	movs	r3, #2
    a450:	aa04      	add	r2, sp, #16
    a452:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    a454:	334e      	adds	r3, #78	; 0x4e
    a456:	5ae3      	ldrh	r3, [r4, r3]
    a458:	021a      	lsls	r2, r3, #8
    a45a:	0a1b      	lsrs	r3, r3, #8
    a45c:	4313      	orrs	r3, r2
    a45e:	aa04      	add	r2, sp, #16
    a460:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    a462:	9802      	ldr	r0, [sp, #8]
    a464:	4b16      	ldr	r3, [pc, #88]	; (a4c0 <http_client_send_request+0x260>)
    a466:	4798      	blx	r3
    a468:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    a46a:	2000      	movs	r0, #0
    a46c:	5620      	ldrsb	r0, [r4, r0]
    a46e:	2210      	movs	r2, #16
    a470:	a904      	add	r1, sp, #16
    a472:	4b14      	ldr	r3, [pc, #80]	; (a4c4 <http_client_send_request+0x264>)
    a474:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    a476:	2301      	movs	r3, #1
    a478:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    a47a:	2300      	movs	r3, #0
    a47c:	9301      	str	r3, [sp, #4]
}
    a47e:	9801      	ldr	r0, [sp, #4]
    a480:	b008      	add	sp, #32
    a482:	bc04      	pop	{r2}
    a484:	4692      	mov	sl, r2
    a486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a488:	0000ec9c 	.word	0x0000ec9c
    a48c:	0000c2e5 	.word	0x0000c2e5
    a490:	0000eca4 	.word	0x0000eca4
    a494:	0000c2d7 	.word	0x0000c2d7
    a498:	0000bd65 	.word	0x0000bd65
    a49c:	0000c29d 	.word	0x0000c29d
    a4a0:	0000bd79 	.word	0x0000bd79
    a4a4:	0000c28d 	.word	0x0000c28d
    a4a8:	0000bdaf 	.word	0x0000bdaf
    a4ac:	00009ca9 	.word	0x00009ca9
    a4b0:	00003f59 	.word	0x00003f59
    a4b4:	20000800 	.word	0x20000800
    a4b8:	00009dc1 	.word	0x00009dc1
    a4bc:	000043a1 	.word	0x000043a1
    a4c0:	00004335 	.word	0x00004335
    a4c4:	000040dd 	.word	0x000040dd

0000a4c8 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    a4c8:	b510      	push	{r4, lr}
	if (module == NULL) {
    a4ca:	2800      	cmp	r0, #0
    a4cc:	d00d      	beq.n	a4ea <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    a4ce:	6c41      	ldr	r1, [r0, #68]	; 0x44
    a4d0:	6e02      	ldr	r2, [r0, #96]	; 0x60
    a4d2:	4291      	cmp	r1, r2
    a4d4:	d20a      	bcs.n	a4ec <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    a4d6:	1a52      	subs	r2, r2, r1
    a4d8:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    a4da:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    a4dc:	469c      	mov	ip, r3
    a4de:	4461      	add	r1, ip
	recv(module->sock,
    a4e0:	7800      	ldrb	r0, [r0, #0]
    a4e2:	b240      	sxtb	r0, r0
    a4e4:	2300      	movs	r3, #0
    a4e6:	4c04      	ldr	r4, [pc, #16]	; (a4f8 <_http_client_recv_packet+0x30>)
    a4e8:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    a4ea:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    a4ec:	218b      	movs	r1, #139	; 0x8b
    a4ee:	4249      	negs	r1, r1
    a4f0:	4b02      	ldr	r3, [pc, #8]	; (a4fc <_http_client_recv_packet+0x34>)
    a4f2:	4798      	blx	r3
		return;
    a4f4:	e7f9      	b.n	a4ea <_http_client_recv_packet+0x22>
    a4f6:	46c0      	nop			; (mov r8, r8)
    a4f8:	00004205 	.word	0x00004205
    a4fc:	00009ca9 	.word	0x00009ca9

0000a500 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    a500:	b570      	push	{r4, r5, r6, lr}
    a502:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    a504:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    a506:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    a508:	1a5c      	subs	r4, r3, r1
    a50a:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    a50c:	2c00      	cmp	r4, #0
    a50e:	dc02      	bgt.n	a516 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    a510:	2300      	movs	r3, #0
    a512:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    a514:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    a516:	0022      	movs	r2, r4
    a518:	4b01      	ldr	r3, [pc, #4]	; (a520 <_http_client_move_buffer+0x20>)
    a51a:	4798      	blx	r3
		module->recved_size = remain;
    a51c:	646c      	str	r4, [r5, #68]	; 0x44
    a51e:	e7f9      	b.n	a514 <_http_client_move_buffer+0x14>
    a520:	0000bd8b 	.word	0x0000bd8b

0000a524 <_http_client_handle_header>:
{
    a524:	b5f0      	push	{r4, r5, r6, r7, lr}
    a526:	46ce      	mov	lr, r9
    a528:	b500      	push	{lr}
    a52a:	b084      	sub	sp, #16
    a52c:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    a52e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    a530:	4b62      	ldr	r3, [pc, #392]	; (a6bc <_http_client_handle_header+0x198>)
    a532:	4699      	mov	r9, r3
    a534:	e049      	b.n	a5ca <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    a536:	0021      	movs	r1, r4
    a538:	0038      	movs	r0, r7
    a53a:	4b61      	ldr	r3, [pc, #388]	; (a6c0 <_http_client_handle_header+0x19c>)
    a53c:	4798      	blx	r3
			return 0;
    a53e:	2600      	movs	r6, #0
}
    a540:	0030      	movs	r0, r6
    a542:	b004      	add	sp, #16
    a544:	bc04      	pop	{r2}
    a546:	4691      	mov	r9, r2
    a548:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    a54a:	1ca1      	adds	r1, r4, #2
    a54c:	0038      	movs	r0, r7
    a54e:	4b5c      	ldr	r3, [pc, #368]	; (a6c0 <_http_client_handle_header+0x19c>)
    a550:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    a552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a554:	2b00      	cmp	r3, #0
    a556:	d00a      	beq.n	a56e <_http_client_handle_header+0x4a>
    a558:	22e4      	movs	r2, #228	; 0xe4
    a55a:	5ab9      	ldrh	r1, [r7, r2]
    a55c:	2900      	cmp	r1, #0
    a55e:	d006      	beq.n	a56e <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    a560:	3a08      	subs	r2, #8
    a562:	58b8      	ldr	r0, [r7, r2]
    a564:	2800      	cmp	r0, #0
    a566:	db07      	blt.n	a578 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    a568:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    a56a:	4290      	cmp	r0, r2
    a56c:	dc10      	bgt.n	a590 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    a56e:	2201      	movs	r2, #1
    a570:	23d8      	movs	r3, #216	; 0xd8
    a572:	50fa      	str	r2, [r7, r3]
			return 1;
    a574:	2601      	movs	r6, #1
    a576:	e7e3      	b.n	a540 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    a578:	aa01      	add	r2, sp, #4
    a57a:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    a57c:	2101      	movs	r1, #1
    a57e:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    a580:	2100      	movs	r1, #0
    a582:	20e0      	movs	r0, #224	; 0xe0
    a584:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    a586:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    a588:	3102      	adds	r1, #2
    a58a:	0038      	movs	r0, r7
    a58c:	4798      	blx	r3
    a58e:	e7ee      	b.n	a56e <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    a590:	aa01      	add	r2, sp, #4
    a592:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    a594:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    a596:	2100      	movs	r1, #0
    a598:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    a59a:	20e0      	movs	r0, #224	; 0xe0
    a59c:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    a59e:	3102      	adds	r1, #2
    a5a0:	0038      	movs	r0, r7
    a5a2:	4798      	blx	r3
    a5a4:	e7e3      	b.n	a56e <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    a5a6:	0020      	movs	r0, r4
    a5a8:	3010      	adds	r0, #16
    a5aa:	4b46      	ldr	r3, [pc, #280]	; (a6c4 <_http_client_handle_header+0x1a0>)
    a5ac:	4798      	blx	r3
    a5ae:	23dc      	movs	r3, #220	; 0xdc
    a5b0:	50f8      	str	r0, [r7, r3]
    a5b2:	e009      	b.n	a5c8 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    a5b4:	3201      	adds	r2, #1
    a5b6:	4295      	cmp	r5, r2
    a5b8:	d006      	beq.n	a5c8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    a5ba:	7813      	ldrb	r3, [r2, #0]
    a5bc:	2b20      	cmp	r3, #32
    a5be:	d12b      	bne.n	a618 <_http_client_handle_header+0xf4>
    a5c0:	e7f8      	b.n	a5b4 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    a5c2:	3a21      	subs	r2, #33	; 0x21
    a5c4:	3389      	adds	r3, #137	; 0x89
    a5c6:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    a5c8:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    a5ca:	493f      	ldr	r1, [pc, #252]	; (a6c8 <_http_client_handle_header+0x1a4>)
    a5cc:	0020      	movs	r0, r4
    a5ce:	47c8      	blx	r9
    a5d0:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    a5d2:	d0b0      	beq.n	a536 <_http_client_handle_header+0x12>
    a5d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a5d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    a5d8:	4694      	mov	ip, r2
    a5da:	4463      	add	r3, ip
    a5dc:	4298      	cmp	r0, r3
    a5de:	d2aa      	bcs.n	a536 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    a5e0:	2202      	movs	r2, #2
    a5e2:	4939      	ldr	r1, [pc, #228]	; (a6c8 <_http_client_handle_header+0x1a4>)
    a5e4:	0020      	movs	r0, r4
    a5e6:	4b39      	ldr	r3, [pc, #228]	; (a6cc <_http_client_handle_header+0x1a8>)
    a5e8:	4798      	blx	r3
    a5ea:	2800      	cmp	r0, #0
    a5ec:	d0ad      	beq.n	a54a <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    a5ee:	2210      	movs	r2, #16
    a5f0:	4937      	ldr	r1, [pc, #220]	; (a6d0 <_http_client_handle_header+0x1ac>)
    a5f2:	0020      	movs	r0, r4
    a5f4:	4b35      	ldr	r3, [pc, #212]	; (a6cc <_http_client_handle_header+0x1a8>)
    a5f6:	4798      	blx	r3
    a5f8:	2800      	cmp	r0, #0
    a5fa:	d0d4      	beq.n	a5a6 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    a5fc:	2213      	movs	r2, #19
    a5fe:	4935      	ldr	r1, [pc, #212]	; (a6d4 <_http_client_handle_header+0x1b0>)
    a600:	0020      	movs	r0, r4
    a602:	4b32      	ldr	r3, [pc, #200]	; (a6cc <_http_client_handle_header+0x1a8>)
    a604:	4798      	blx	r3
    a606:	1e06      	subs	r6, r0, #0
    a608:	d110      	bne.n	a62c <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    a60a:	0022      	movs	r2, r4
    a60c:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    a60e:	4295      	cmp	r5, r2
    a610:	d9da      	bls.n	a5c8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    a612:	7ce3      	ldrb	r3, [r4, #19]
    a614:	2b20      	cmp	r3, #32
    a616:	d0cd      	beq.n	a5b4 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    a618:	2220      	movs	r2, #32
    a61a:	4393      	bics	r3, r2
    a61c:	2b43      	cmp	r3, #67	; 0x43
    a61e:	d0d0      	beq.n	a5c2 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    a620:	2186      	movs	r1, #134	; 0x86
    a622:	4249      	negs	r1, r1
    a624:	0038      	movs	r0, r7
    a626:	4b2c      	ldr	r3, [pc, #176]	; (a6d8 <_http_client_handle_header+0x1b4>)
    a628:	4798      	blx	r3
					return 0;
    a62a:	e789      	b.n	a540 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    a62c:	220c      	movs	r2, #12
    a62e:	492b      	ldr	r1, [pc, #172]	; (a6dc <_http_client_handle_header+0x1b8>)
    a630:	0020      	movs	r0, r4
    a632:	4b26      	ldr	r3, [pc, #152]	; (a6cc <_http_client_handle_header+0x1a8>)
    a634:	4798      	blx	r3
    a636:	2800      	cmp	r0, #0
    a638:	d11d      	bne.n	a676 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    a63a:	0022      	movs	r2, r4
    a63c:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    a63e:	4295      	cmp	r5, r2
    a640:	d9c2      	bls.n	a5c8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    a642:	7b23      	ldrb	r3, [r4, #12]
    a644:	2b20      	cmp	r3, #32
    a646:	d009      	beq.n	a65c <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    a648:	2220      	movs	r2, #32
    a64a:	4393      	bics	r3, r2
    a64c:	2b4b      	cmp	r3, #75	; 0x4b
    a64e:	d00c      	beq.n	a66a <_http_client_handle_header+0x146>
					module->permanent = 0;
    a650:	2241      	movs	r2, #65	; 0x41
    a652:	5cbb      	ldrb	r3, [r7, r2]
    a654:	2102      	movs	r1, #2
    a656:	438b      	bics	r3, r1
    a658:	54bb      	strb	r3, [r7, r2]
    a65a:	e7b5      	b.n	a5c8 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    a65c:	3201      	adds	r2, #1
    a65e:	4295      	cmp	r5, r2
    a660:	d0b2      	beq.n	a5c8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    a662:	7813      	ldrb	r3, [r2, #0]
    a664:	2b20      	cmp	r3, #32
    a666:	d1ef      	bne.n	a648 <_http_client_handle_header+0x124>
    a668:	e7f8      	b.n	a65c <_http_client_handle_header+0x138>
					module->permanent = 1;
    a66a:	3221      	adds	r2, #33	; 0x21
    a66c:	5cbb      	ldrb	r3, [r7, r2]
    a66e:	2102      	movs	r1, #2
    a670:	430b      	orrs	r3, r1
    a672:	54bb      	strb	r3, [r7, r2]
    a674:	e7a8      	b.n	a5c8 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    a676:	2205      	movs	r2, #5
    a678:	4919      	ldr	r1, [pc, #100]	; (a6e0 <_http_client_handle_header+0x1bc>)
    a67a:	0020      	movs	r0, r4
    a67c:	4b13      	ldr	r3, [pc, #76]	; (a6cc <_http_client_handle_header+0x1a8>)
    a67e:	4798      	blx	r3
    a680:	2800      	cmp	r0, #0
    a682:	d1a1      	bne.n	a5c8 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    a684:	0020      	movs	r0, r4
    a686:	3009      	adds	r0, #9
    a688:	4b0e      	ldr	r3, [pc, #56]	; (a6c4 <_http_client_handle_header+0x1a0>)
    a68a:	4798      	blx	r3
    a68c:	23e4      	movs	r3, #228	; 0xe4
    a68e:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    a690:	2200      	movs	r2, #0
    a692:	3b08      	subs	r3, #8
    a694:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    a696:	7963      	ldrb	r3, [r4, #5]
    a698:	2b31      	cmp	r3, #49	; 0x31
    a69a:	d802      	bhi.n	a6a2 <_http_client_handle_header+0x17e>
    a69c:	79e3      	ldrb	r3, [r4, #7]
    a69e:	2b30      	cmp	r3, #48	; 0x30
    a6a0:	d905      	bls.n	a6ae <_http_client_handle_header+0x18a>
				module->permanent = 1;
    a6a2:	2241      	movs	r2, #65	; 0x41
    a6a4:	5cbb      	ldrb	r3, [r7, r2]
    a6a6:	2102      	movs	r1, #2
    a6a8:	430b      	orrs	r3, r1
    a6aa:	54bb      	strb	r3, [r7, r2]
    a6ac:	e78c      	b.n	a5c8 <_http_client_handle_header+0xa4>
				module->permanent = 0;
    a6ae:	2241      	movs	r2, #65	; 0x41
    a6b0:	5cbb      	ldrb	r3, [r7, r2]
    a6b2:	2102      	movs	r1, #2
    a6b4:	438b      	bics	r3, r1
    a6b6:	54bb      	strb	r3, [r7, r2]
    a6b8:	e786      	b.n	a5c8 <_http_client_handle_header+0xa4>
    a6ba:	46c0      	nop			; (mov r8, r8)
    a6bc:	0000c355 	.word	0x0000c355
    a6c0:	0000a501 	.word	0x0000a501
    a6c4:	0000bcfd 	.word	0x0000bcfd
    a6c8:	0000f018 	.word	0x0000f018
    a6cc:	0000c2e5 	.word	0x0000c2e5
    a6d0:	0000ec7c 	.word	0x0000ec7c
    a6d4:	0000eb8c 	.word	0x0000eb8c
    a6d8:	00009ca9 	.word	0x00009ca9
    a6dc:	0000eba0 	.word	0x0000eba0
    a6e0:	0000ebb0 	.word	0x0000ebb0

0000a6e4 <_http_client_handle_entity>:
{
    a6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6e6:	46ce      	mov	lr, r9
    a6e8:	b500      	push	{lr}
    a6ea:	b086      	sub	sp, #24
    a6ec:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    a6ee:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    a6f0:	23dc      	movs	r3, #220	; 0xdc
    a6f2:	58c3      	ldr	r3, [r0, r3]
    a6f4:	2b00      	cmp	r3, #0
    a6f6:	db69      	blt.n	a7cc <_http_client_handle_entity+0xe8>
    a6f8:	6e02      	ldr	r2, [r0, #96]	; 0x60
    a6fa:	4293      	cmp	r3, r2
    a6fc:	dc2b      	bgt.n	a756 <_http_client_handle_entity+0x72>
	return 0;
    a6fe:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    a700:	6c62      	ldr	r2, [r4, #68]	; 0x44
    a702:	4293      	cmp	r3, r2
    a704:	dc4e      	bgt.n	a7a4 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    a706:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    a708:	2e00      	cmp	r6, #0
    a70a:	d003      	beq.n	a714 <_http_client_handle_entity+0x30>
    a70c:	22e4      	movs	r2, #228	; 0xe4
    a70e:	5aa1      	ldrh	r1, [r4, r2]
    a710:	2900      	cmp	r1, #0
    a712:	d10e      	bne.n	a732 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    a714:	2300      	movs	r3, #0
    a716:	22d8      	movs	r2, #216	; 0xd8
    a718:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    a71a:	320c      	adds	r2, #12
    a71c:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    a71e:	3341      	adds	r3, #65	; 0x41
    a720:	5ce3      	ldrb	r3, [r4, r3]
    a722:	079b      	lsls	r3, r3, #30
    a724:	d40f      	bmi.n	a746 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    a726:	2100      	movs	r1, #0
    a728:	0020      	movs	r0, r4
    a72a:	4b71      	ldr	r3, [pc, #452]	; (a8f0 <_http_client_handle_entity+0x20c>)
    a72c:	4798      	blx	r3
	return 0;
    a72e:	2000      	movs	r0, #0
    a730:	e038      	b.n	a7a4 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    a732:	aa03      	add	r2, sp, #12
    a734:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    a736:	2100      	movs	r1, #0
    a738:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    a73a:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    a73c:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    a73e:	3102      	adds	r1, #2
    a740:	0020      	movs	r0, r4
    a742:	47b0      	blx	r6
    a744:	e7e6      	b.n	a714 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    a746:	23dc      	movs	r3, #220	; 0xdc
    a748:	58e1      	ldr	r1, [r4, r3]
    a74a:	1869      	adds	r1, r5, r1
    a74c:	0020      	movs	r0, r4
    a74e:	4b69      	ldr	r3, [pc, #420]	; (a8f4 <_http_client_handle_entity+0x210>)
    a750:	4798      	blx	r3
				return module->recved_size;
    a752:	6c60      	ldr	r0, [r4, #68]	; 0x44
    a754:	e026      	b.n	a7a4 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    a756:	6c42      	ldr	r2, [r0, #68]	; 0x44
    a758:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    a75a:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    a75c:	21e0      	movs	r1, #224	; 0xe0
    a75e:	5840      	ldr	r0, [r0, r1]
    a760:	4684      	mov	ip, r0
    a762:	4462      	add	r2, ip
    a764:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    a766:	4293      	cmp	r3, r2
    a768:	dc20      	bgt.n	a7ac <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    a76a:	2300      	movs	r3, #0
    a76c:	22d8      	movs	r2, #216	; 0xd8
    a76e:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    a770:	320c      	adds	r2, #12
    a772:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    a774:	3ae3      	subs	r2, #227	; 0xe3
    a776:	ab03      	add	r3, sp, #12
    a778:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    a77a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a77c:	2b00      	cmp	r3, #0
    a77e:	d007      	beq.n	a790 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    a780:	ae03      	add	r6, sp, #12
    a782:	0032      	movs	r2, r6
    a784:	2103      	movs	r1, #3
    a786:	0020      	movs	r0, r4
    a788:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    a78a:	7a33      	ldrb	r3, [r6, #8]
    a78c:	2b01      	cmp	r3, #1
    a78e:	d103      	bne.n	a798 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    a790:	2341      	movs	r3, #65	; 0x41
    a792:	5ce3      	ldrb	r3, [r4, r3]
    a794:	079b      	lsls	r3, r3, #30
    a796:	d510      	bpl.n	a7ba <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    a798:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a79a:	18e9      	adds	r1, r5, r3
    a79c:	0020      	movs	r0, r4
    a79e:	4b55      	ldr	r3, [pc, #340]	; (a8f4 <_http_client_handle_entity+0x210>)
    a7a0:	4798      	blx	r3
	return 0;
    a7a2:	2000      	movs	r0, #0
}
    a7a4:	b006      	add	sp, #24
    a7a6:	bc04      	pop	{r2}
    a7a8:	4691      	mov	r9, r2
    a7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    a7ac:	2200      	movs	r2, #0
    a7ae:	ab03      	add	r3, sp, #12
    a7b0:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    a7b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a7b4:	2b00      	cmp	r3, #0
    a7b6:	d0ef      	beq.n	a798 <_http_client_handle_entity+0xb4>
    a7b8:	e7e2      	b.n	a780 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    a7ba:	484f      	ldr	r0, [pc, #316]	; (a8f8 <_http_client_handle_entity+0x214>)
    a7bc:	4b4f      	ldr	r3, [pc, #316]	; (a8fc <_http_client_handle_entity+0x218>)
    a7be:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    a7c0:	2100      	movs	r1, #0
    a7c2:	0020      	movs	r0, r4
    a7c4:	4b4a      	ldr	r3, [pc, #296]	; (a8f0 <_http_client_handle_entity+0x20c>)
    a7c6:	4798      	blx	r3
					return 0;
    a7c8:	2000      	movs	r0, #0
    a7ca:	e7eb      	b.n	a7a4 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    a7cc:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    a7ce:	2300      	movs	r3, #0
    a7d0:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    a7d2:	26e0      	movs	r6, #224	; 0xe0
    a7d4:	e00a      	b.n	a7ec <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    a7d6:	2341      	movs	r3, #65	; 0x41
    a7d8:	5ce3      	ldrb	r3, [r4, r3]
    a7da:	079b      	lsls	r3, r3, #30
    a7dc:	d51b      	bpl.n	a816 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    a7de:	1ca9      	adds	r1, r5, #2
    a7e0:	0020      	movs	r0, r4
    a7e2:	4b44      	ldr	r3, [pc, #272]	; (a8f4 <_http_client_handle_entity+0x210>)
    a7e4:	4798      	blx	r3
	} while(module->recved_size > 0);
    a7e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a7e8:	2b00      	cmp	r3, #0
    a7ea:	d073      	beq.n	a8d4 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    a7ec:	59a3      	ldr	r3, [r4, r6]
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	db30      	blt.n	a854 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    a7f2:	d116      	bne.n	a822 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    a7f4:	22d8      	movs	r2, #216	; 0xd8
    a7f6:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    a7f8:	320c      	adds	r2, #12
    a7fa:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    a7fc:	3ae3      	subs	r2, #227	; 0xe3
    a7fe:	4669      	mov	r1, sp
    a800:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    a802:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    a804:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    a806:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a808:	2b00      	cmp	r3, #0
    a80a:	d0e4      	beq.n	a7d6 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    a80c:	466a      	mov	r2, sp
    a80e:	2103      	movs	r1, #3
    a810:	0020      	movs	r0, r4
    a812:	4798      	blx	r3
    a814:	e7df      	b.n	a7d6 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    a816:	2100      	movs	r1, #0
    a818:	0020      	movs	r0, r4
    a81a:	4b35      	ldr	r3, [pc, #212]	; (a8f0 <_http_client_handle_entity+0x20c>)
    a81c:	4798      	blx	r3
	return 0;
    a81e:	2000      	movs	r0, #0
    a820:	e7c0      	b.n	a7a4 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    a822:	42bb      	cmp	r3, r7
    a824:	dcdf      	bgt.n	a7e6 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    a826:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    a828:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    a82a:	2300      	movs	r3, #0
    a82c:	466a      	mov	r2, sp
    a82e:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    a830:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a832:	2b00      	cmp	r3, #0
    a834:	d002      	beq.n	a83c <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    a836:	2103      	movs	r1, #3
    a838:	0020      	movs	r0, r4
    a83a:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    a83c:	59a3      	ldr	r3, [r4, r6]
    a83e:	1c99      	adds	r1, r3, #2
    a840:	1869      	adds	r1, r5, r1
    a842:	0020      	movs	r0, r4
    a844:	4b2b      	ldr	r3, [pc, #172]	; (a8f4 <_http_client_handle_entity+0x210>)
    a846:	4798      	blx	r3
				length = (int)module->recved_size;
    a848:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    a84a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    a84c:	2301      	movs	r3, #1
    a84e:	425b      	negs	r3, r3
    a850:	51a3      	str	r3, [r4, r6]
    a852:	e7c8      	b.n	a7e6 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    a854:	2300      	movs	r3, #0
    a856:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    a858:	2f00      	cmp	r7, #0
    a85a:	dd04      	ble.n	a866 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    a85c:	782b      	ldrb	r3, [r5, #0]
    a85e:	2b0a      	cmp	r3, #10
    a860:	d11c      	bne.n	a89c <_http_client_handle_entity+0x1b8>
					buffer++;
    a862:	3501      	adds	r5, #1
					length--;
    a864:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    a866:	59a3      	ldr	r3, [r4, r6]
    a868:	6e22      	ldr	r2, [r4, #96]	; 0x60
    a86a:	4293      	cmp	r3, r2
    a86c:	dc39      	bgt.n	a8e2 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    a86e:	2f00      	cmp	r7, #0
    a870:	d1b9      	bne.n	a7e6 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    a872:	2201      	movs	r2, #1
    a874:	4252      	negs	r2, r2
    a876:	23e0      	movs	r3, #224	; 0xe0
    a878:	50e2      	str	r2, [r4, r3]
    a87a:	e7d0      	b.n	a81e <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    a87c:	001a      	movs	r2, r3
    a87e:	3a61      	subs	r2, #97	; 0x61
    a880:	2a05      	cmp	r2, #5
    a882:	d818      	bhi.n	a8b6 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    a884:	59a2      	ldr	r2, [r4, r6]
    a886:	0112      	lsls	r2, r2, #4
    a888:	18d3      	adds	r3, r2, r3
    a88a:	3b61      	subs	r3, #97	; 0x61
    a88c:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    a88e:	3501      	adds	r5, #1
    a890:	3f01      	subs	r7, #1
    a892:	2f00      	cmp	r7, #0
    a894:	d020      	beq.n	a8d8 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    a896:	782b      	ldrb	r3, [r5, #0]
    a898:	2b0a      	cmp	r3, #10
    a89a:	d0e2      	beq.n	a862 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    a89c:	464a      	mov	r2, r9
    a89e:	2a00      	cmp	r2, #0
    a8a0:	d1f5      	bne.n	a88e <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    a8a2:	001a      	movs	r2, r3
    a8a4:	3a30      	subs	r2, #48	; 0x30
    a8a6:	2a09      	cmp	r2, #9
    a8a8:	d8e8      	bhi.n	a87c <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    a8aa:	59a2      	ldr	r2, [r4, r6]
    a8ac:	0112      	lsls	r2, r2, #4
    a8ae:	18d3      	adds	r3, r2, r3
    a8b0:	3b30      	subs	r3, #48	; 0x30
    a8b2:	51a3      	str	r3, [r4, r6]
    a8b4:	e7eb      	b.n	a88e <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    a8b6:	001a      	movs	r2, r3
    a8b8:	3a41      	subs	r2, #65	; 0x41
    a8ba:	2a05      	cmp	r2, #5
    a8bc:	d805      	bhi.n	a8ca <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    a8be:	59a2      	ldr	r2, [r4, r6]
    a8c0:	0112      	lsls	r2, r2, #4
    a8c2:	18d3      	adds	r3, r2, r3
    a8c4:	3b41      	subs	r3, #65	; 0x41
    a8c6:	51a3      	str	r3, [r4, r6]
    a8c8:	e7e1      	b.n	a88e <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    a8ca:	3b3b      	subs	r3, #59	; 0x3b
    a8cc:	425a      	negs	r2, r3
    a8ce:	415a      	adcs	r2, r3
    a8d0:	4691      	mov	r9, r2
    a8d2:	e7dc      	b.n	a88e <_http_client_handle_entity+0x1aa>
	return 0;
    a8d4:	2000      	movs	r0, #0
    a8d6:	e765      	b.n	a7a4 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    a8d8:	23e0      	movs	r3, #224	; 0xe0
    a8da:	58e3      	ldr	r3, [r4, r3]
    a8dc:	6e22      	ldr	r2, [r4, #96]	; 0x60
    a8de:	4293      	cmp	r3, r2
    a8e0:	ddc7      	ble.n	a872 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    a8e2:	218b      	movs	r1, #139	; 0x8b
    a8e4:	4249      	negs	r1, r1
    a8e6:	0020      	movs	r0, r4
    a8e8:	4b01      	ldr	r3, [pc, #4]	; (a8f0 <_http_client_handle_entity+0x20c>)
    a8ea:	4798      	blx	r3
    a8ec:	e797      	b.n	a81e <_http_client_handle_entity+0x13a>
    a8ee:	46c0      	nop			; (mov r8, r8)
    a8f0:	00009ca9 	.word	0x00009ca9
    a8f4:	0000a501 	.word	0x0000a501
    a8f8:	0000eb88 	.word	0x0000eb88
    a8fc:	0000c02d 	.word	0x0000c02d

0000a900 <_http_client_handle_response>:
{
    a900:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    a902:	23d8      	movs	r3, #216	; 0xd8
    a904:	58c3      	ldr	r3, [r0, r3]
    a906:	2b00      	cmp	r3, #0
    a908:	d003      	beq.n	a912 <_http_client_handle_response+0x12>
    a90a:	2b01      	cmp	r3, #1
    a90c:	d004      	beq.n	a918 <_http_client_handle_response+0x18>
	return 0;
    a90e:	2000      	movs	r0, #0
    a910:	e001      	b.n	a916 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    a912:	4b03      	ldr	r3, [pc, #12]	; (a920 <_http_client_handle_response+0x20>)
    a914:	4798      	blx	r3
}
    a916:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    a918:	4b02      	ldr	r3, [pc, #8]	; (a924 <_http_client_handle_response+0x24>)
    a91a:	4798      	blx	r3
    a91c:	e7fb      	b.n	a916 <_http_client_handle_response+0x16>
    a91e:	46c0      	nop			; (mov r8, r8)
    a920:	0000a525 	.word	0x0000a525
    a924:	0000a6e5 	.word	0x0000a6e5

0000a928 <_http_client_recved_packet>:
{
    a928:	b570      	push	{r4, r5, r6, lr}
    a92a:	0004      	movs	r4, r0
	module->recved_size += read_len;
    a92c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    a92e:	469c      	mov	ip, r3
    a930:	4461      	add	r1, ip
    a932:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    a934:	2358      	movs	r3, #88	; 0x58
    a936:	5ac3      	ldrh	r3, [r0, r3]
    a938:	2b00      	cmp	r3, #0
    a93a:	d105      	bne.n	a948 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    a93c:	4d05      	ldr	r5, [pc, #20]	; (a954 <_http_client_recved_packet+0x2c>)
    a93e:	0020      	movs	r0, r4
    a940:	47a8      	blx	r5
    a942:	2800      	cmp	r0, #0
    a944:	d1fb      	bne.n	a93e <_http_client_recved_packet+0x16>
}
    a946:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    a948:	6c81      	ldr	r1, [r0, #72]	; 0x48
    a94a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    a94c:	4b02      	ldr	r3, [pc, #8]	; (a958 <_http_client_recved_packet+0x30>)
    a94e:	4798      	blx	r3
    a950:	e7f4      	b.n	a93c <_http_client_recved_packet+0x14>
    a952:	46c0      	nop			; (mov r8, r8)
    a954:	0000a901 	.word	0x0000a901
    a958:	0000acd5 	.word	0x0000acd5

0000a95c <http_client_socket_event_handler>:
{
    a95c:	b510      	push	{r4, lr}
    a95e:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    a960:	0080      	lsls	r0, r0, #2
    a962:	4b65      	ldr	r3, [pc, #404]	; (aaf8 <http_client_socket_event_handler+0x19c>)
    a964:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    a966:	2c00      	cmp	r4, #0
    a968:	d006      	beq.n	a978 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    a96a:	2906      	cmp	r1, #6
    a96c:	d051      	beq.n	aa12 <http_client_socket_event_handler+0xb6>
    a96e:	2907      	cmp	r1, #7
    a970:	d100      	bne.n	a974 <http_client_socket_event_handler+0x18>
    a972:	e08a      	b.n	aa8a <http_client_socket_event_handler+0x12e>
    a974:	2905      	cmp	r1, #5
    a976:	d001      	beq.n	a97c <http_client_socket_event_handler+0x20>
}
    a978:	b004      	add	sp, #16
    a97a:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    a97c:	2301      	movs	r3, #1
    a97e:	56d3      	ldrsb	r3, [r2, r3]
    a980:	1e1a      	subs	r2, r3, #0
    a982:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    a984:	db15      	blt.n	a9b2 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    a986:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a988:	2b00      	cmp	r3, #0
    a98a:	d003      	beq.n	a994 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    a98c:	aa01      	add	r2, sp, #4
    a98e:	2100      	movs	r1, #0
    a990:	0020      	movs	r0, r4
    a992:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    a994:	2303      	movs	r3, #3
    a996:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    a998:	3355      	adds	r3, #85	; 0x55
    a99a:	5ae2      	ldrh	r2, [r4, r3]
    a99c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a99e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    a9a0:	4b56      	ldr	r3, [pc, #344]	; (aafc <http_client_socket_event_handler+0x1a0>)
    a9a2:	4798      	blx	r3
    		_http_client_recv_packet(module);
    a9a4:	0020      	movs	r0, r4
    a9a6:	4b56      	ldr	r3, [pc, #344]	; (ab00 <http_client_socket_event_handler+0x1a4>)
    a9a8:	4798      	blx	r3
			_http_client_request(module);
    a9aa:	0020      	movs	r0, r4
    a9ac:	4b55      	ldr	r3, [pc, #340]	; (ab04 <http_client_socket_event_handler+0x1a8>)
    a9ae:	4798      	blx	r3
    a9b0:	e7e2      	b.n	a978 <http_client_socket_event_handler+0x1c>
	switch (err) {
    a9b2:	330e      	adds	r3, #14
    a9b4:	b2d9      	uxtb	r1, r3
    a9b6:	290e      	cmp	r1, #14
    a9b8:	d81e      	bhi.n	a9f8 <http_client_socket_event_handler+0x9c>
    a9ba:	008b      	lsls	r3, r1, #2
    a9bc:	4952      	ldr	r1, [pc, #328]	; (ab08 <http_client_socket_event_handler+0x1ac>)
    a9be:	58cb      	ldr	r3, [r1, r3]
    a9c0:	469f      	mov	pc, r3
			return -ENOENT;
    a9c2:	2102      	movs	r1, #2
    a9c4:	4249      	negs	r1, r1
    a9c6:	e01d      	b.n	aa04 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    a9c8:	2170      	movs	r1, #112	; 0x70
    a9ca:	4249      	negs	r1, r1
    a9cc:	e01a      	b.n	aa04 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    a9ce:	210c      	movs	r1, #12
    a9d0:	4249      	negs	r1, r1
    a9d2:	e017      	b.n	aa04 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    a9d4:	2116      	movs	r1, #22
    a9d6:	4249      	negs	r1, r1
    a9d8:	e014      	b.n	aa04 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    a9da:	210c      	movs	r1, #12
    a9dc:	4249      	negs	r1, r1
    a9de:	e011      	b.n	aa04 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    a9e0:	2179      	movs	r1, #121	; 0x79
    a9e2:	4249      	negs	r1, r1
    a9e4:	e00e      	b.n	aa04 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    a9e6:	2168      	movs	r1, #104	; 0x68
    a9e8:	4249      	negs	r1, r1
    a9ea:	e00b      	b.n	aa04 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    a9ec:	210b      	movs	r1, #11
    a9ee:	4249      	negs	r1, r1
    a9f0:	e008      	b.n	aa04 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    a9f2:	2110      	movs	r1, #16
    a9f4:	4249      	negs	r1, r1
    a9f6:	e005      	b.n	aa04 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    a9f8:	2a00      	cmp	r2, #0
    a9fa:	db07      	blt.n	aa0c <http_client_socket_event_handler+0xb0>
			return 0;
    a9fc:	2100      	movs	r1, #0
    a9fe:	e001      	b.n	aa04 <http_client_socket_event_handler+0xa8>
			return -EIO;
    aa00:	2105      	movs	r1, #5
    aa02:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    aa04:	0020      	movs	r0, r4
    aa06:	4b41      	ldr	r3, [pc, #260]	; (ab0c <http_client_socket_event_handler+0x1b0>)
    aa08:	4798      	blx	r3
    aa0a:	e7b5      	b.n	a978 <http_client_socket_event_handler+0x1c>
				return -EIO;
    aa0c:	2105      	movs	r1, #5
    aa0e:	4249      	negs	r1, r1
    aa10:	e7f8      	b.n	aa04 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    aa12:	2304      	movs	r3, #4
    aa14:	5ed1      	ldrsh	r1, [r2, r3]
    aa16:	2900      	cmp	r1, #0
    aa18:	dd06      	ble.n	aa28 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    aa1a:	0020      	movs	r0, r4
    aa1c:	4b3c      	ldr	r3, [pc, #240]	; (ab10 <http_client_socket_event_handler+0x1b4>)
    aa1e:	4798      	blx	r3
		_http_client_recv_packet(module);
    aa20:	0020      	movs	r0, r4
    aa22:	4b37      	ldr	r3, [pc, #220]	; (ab00 <http_client_socket_event_handler+0x1a4>)
    aa24:	4798      	blx	r3
		break;
    aa26:	e7a7      	b.n	a978 <http_client_socket_event_handler+0x1c>
	switch (err) {
    aa28:	000b      	movs	r3, r1
    aa2a:	330e      	adds	r3, #14
    aa2c:	b29a      	uxth	r2, r3
    aa2e:	2a0e      	cmp	r2, #14
    aa30:	d81e      	bhi.n	aa70 <http_client_socket_event_handler+0x114>
    aa32:	0093      	lsls	r3, r2, #2
    aa34:	4a37      	ldr	r2, [pc, #220]	; (ab14 <http_client_socket_event_handler+0x1b8>)
    aa36:	58d3      	ldr	r3, [r2, r3]
    aa38:	469f      	mov	pc, r3
			return -ENOENT;
    aa3a:	2102      	movs	r1, #2
    aa3c:	4249      	negs	r1, r1
    aa3e:	e01d      	b.n	aa7c <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    aa40:	2170      	movs	r1, #112	; 0x70
    aa42:	4249      	negs	r1, r1
    aa44:	e01a      	b.n	aa7c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    aa46:	210c      	movs	r1, #12
    aa48:	4249      	negs	r1, r1
    aa4a:	e017      	b.n	aa7c <http_client_socket_event_handler+0x120>
			return -EINVAL;
    aa4c:	2116      	movs	r1, #22
    aa4e:	4249      	negs	r1, r1
    aa50:	e014      	b.n	aa7c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    aa52:	210c      	movs	r1, #12
    aa54:	4249      	negs	r1, r1
    aa56:	e011      	b.n	aa7c <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    aa58:	2179      	movs	r1, #121	; 0x79
    aa5a:	4249      	negs	r1, r1
    aa5c:	e00e      	b.n	aa7c <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    aa5e:	2168      	movs	r1, #104	; 0x68
    aa60:	4249      	negs	r1, r1
    aa62:	e00b      	b.n	aa7c <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    aa64:	210b      	movs	r1, #11
    aa66:	4249      	negs	r1, r1
    aa68:	e008      	b.n	aa7c <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    aa6a:	2110      	movs	r1, #16
    aa6c:	4249      	negs	r1, r1
    aa6e:	e005      	b.n	aa7c <http_client_socket_event_handler+0x120>
			if (err < 0) {
    aa70:	2900      	cmp	r1, #0
    aa72:	db07      	blt.n	aa84 <http_client_socket_event_handler+0x128>
			return 0;
    aa74:	2100      	movs	r1, #0
    aa76:	e001      	b.n	aa7c <http_client_socket_event_handler+0x120>
			return -EIO;
    aa78:	2105      	movs	r1, #5
    aa7a:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    aa7c:	0020      	movs	r0, r4
    aa7e:	4b23      	ldr	r3, [pc, #140]	; (ab0c <http_client_socket_event_handler+0x1b0>)
    aa80:	4798      	blx	r3
    aa82:	e7cd      	b.n	aa20 <http_client_socket_event_handler+0xc4>
				return -EIO;
    aa84:	2105      	movs	r1, #5
    aa86:	4249      	negs	r1, r1
    aa88:	e7f8      	b.n	aa7c <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    aa8a:	2300      	movs	r3, #0
    aa8c:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    aa8e:	2b00      	cmp	r3, #0
    aa90:	db08      	blt.n	aaa4 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    aa92:	0020      	movs	r0, r4
    aa94:	4b1b      	ldr	r3, [pc, #108]	; (ab04 <http_client_socket_event_handler+0x1a8>)
    aa96:	4798      	blx	r3
		module->sending = 0;
    aa98:	2241      	movs	r2, #65	; 0x41
    aa9a:	5ca3      	ldrb	r3, [r4, r2]
    aa9c:	2101      	movs	r1, #1
    aa9e:	438b      	bics	r3, r1
    aaa0:	54a3      	strb	r3, [r4, r2]
    	break;
    aaa2:	e769      	b.n	a978 <http_client_socket_event_handler+0x1c>
	switch (err) {
    aaa4:	330e      	adds	r3, #14
    aaa6:	b29a      	uxth	r2, r3
    aaa8:	2a0d      	cmp	r2, #13
    aaaa:	d81e      	bhi.n	aaea <http_client_socket_event_handler+0x18e>
    aaac:	0093      	lsls	r3, r2, #2
    aaae:	4a1a      	ldr	r2, [pc, #104]	; (ab18 <http_client_socket_event_handler+0x1bc>)
    aab0:	58d3      	ldr	r3, [r2, r3]
    aab2:	469f      	mov	pc, r3
			return -ENOENT;
    aab4:	2102      	movs	r1, #2
    aab6:	4249      	negs	r1, r1
    aab8:	e019      	b.n	aaee <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    aaba:	2170      	movs	r1, #112	; 0x70
    aabc:	4249      	negs	r1, r1
    aabe:	e016      	b.n	aaee <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    aac0:	210c      	movs	r1, #12
    aac2:	4249      	negs	r1, r1
    aac4:	e013      	b.n	aaee <http_client_socket_event_handler+0x192>
			return -EINVAL;
    aac6:	2116      	movs	r1, #22
    aac8:	4249      	negs	r1, r1
    aaca:	e010      	b.n	aaee <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    aacc:	210c      	movs	r1, #12
    aace:	4249      	negs	r1, r1
    aad0:	e00d      	b.n	aaee <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    aad2:	2179      	movs	r1, #121	; 0x79
    aad4:	4249      	negs	r1, r1
    aad6:	e00a      	b.n	aaee <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    aad8:	2168      	movs	r1, #104	; 0x68
    aada:	4249      	negs	r1, r1
    aadc:	e007      	b.n	aaee <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    aade:	210b      	movs	r1, #11
    aae0:	4249      	negs	r1, r1
    aae2:	e004      	b.n	aaee <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    aae4:	2110      	movs	r1, #16
    aae6:	4249      	negs	r1, r1
    aae8:	e001      	b.n	aaee <http_client_socket_event_handler+0x192>
			return -EIO;
    aaea:	2105      	movs	r1, #5
    aaec:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    aaee:	0020      	movs	r0, r4
    aaf0:	4b06      	ldr	r3, [pc, #24]	; (ab0c <http_client_socket_event_handler+0x1b0>)
    aaf2:	4798      	blx	r3
    aaf4:	e7d0      	b.n	aa98 <http_client_socket_event_handler+0x13c>
    aaf6:	46c0      	nop			; (mov r8, r8)
    aaf8:	20000800 	.word	0x20000800
    aafc:	0000aca9 	.word	0x0000aca9
    ab00:	0000a4c9 	.word	0x0000a4c9
    ab04:	00009dc1 	.word	0x00009dc1
    ab08:	0000eac8 	.word	0x0000eac8
    ab0c:	00009ca9 	.word	0x00009ca9
    ab10:	0000a929 	.word	0x0000a929
    ab14:	0000eb04 	.word	0x0000eb04
    ab18:	0000eb40 	.word	0x0000eb40

0000ab1c <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    ab1c:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    ab1e:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    ab20:	2200      	movs	r2, #0
    ab22:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    ab24:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    ab26:	9b00      	ldr	r3, [sp, #0]
    ab28:	60c3      	str	r3, [r0, #12]
}
    ab2a:	4770      	bx	lr

0000ab2c <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    ab2c:	b510      	push	{r4, lr}
    ab2e:	0004      	movs	r4, r0
	if(writer->written > 0) {
    ab30:	6842      	ldr	r2, [r0, #4]
    ab32:	2a00      	cmp	r2, #0
    ab34:	d100      	bne.n	ab38 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    ab36:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    ab38:	6901      	ldr	r1, [r0, #16]
    ab3a:	68c0      	ldr	r0, [r0, #12]
    ab3c:	68a3      	ldr	r3, [r4, #8]
    ab3e:	4798      	blx	r3
		writer->written = 0;
    ab40:	2300      	movs	r3, #0
    ab42:	6063      	str	r3, [r4, #4]
}
    ab44:	e7f7      	b.n	ab36 <stream_writer_send_remain+0xa>
	...

0000ab48 <stream_writer_send_8>:
{
    ab48:	b570      	push	{r4, r5, r6, lr}
    ab4a:	0004      	movs	r4, r0
    ab4c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    ab4e:	6803      	ldr	r3, [r0, #0]
    ab50:	6842      	ldr	r2, [r0, #4]
    ab52:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    ab54:	2b00      	cmp	r3, #0
    ab56:	dd05      	ble.n	ab64 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    ab58:	6922      	ldr	r2, [r4, #16]
    ab5a:	6863      	ldr	r3, [r4, #4]
    ab5c:	1c59      	adds	r1, r3, #1
    ab5e:	6061      	str	r1, [r4, #4]
    ab60:	54d5      	strb	r5, [r2, r3]
}
    ab62:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    ab64:	4b01      	ldr	r3, [pc, #4]	; (ab6c <stream_writer_send_8+0x24>)
    ab66:	4798      	blx	r3
    ab68:	e7f6      	b.n	ab58 <stream_writer_send_8+0x10>
    ab6a:	46c0      	nop			; (mov r8, r8)
    ab6c:	0000ab2d 	.word	0x0000ab2d

0000ab70 <stream_writer_send_buffer>:
{
    ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab72:	0006      	movs	r6, r0
    ab74:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    ab76:	2a00      	cmp	r2, #0
    ab78:	d008      	beq.n	ab8c <stream_writer_send_buffer+0x1c>
    ab7a:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    ab7c:	4f04      	ldr	r7, [pc, #16]	; (ab90 <stream_writer_send_buffer+0x20>)
    ab7e:	2100      	movs	r1, #0
    ab80:	5661      	ldrsb	r1, [r4, r1]
    ab82:	0030      	movs	r0, r6
    ab84:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    ab86:	3401      	adds	r4, #1
    ab88:	42a5      	cmp	r5, r4
    ab8a:	d1f8      	bne.n	ab7e <stream_writer_send_buffer+0xe>
}
    ab8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab8e:	46c0      	nop			; (mov r8, r8)
    ab90:	0000ab49 	.word	0x0000ab49

0000ab94 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    ab94:	4a02      	ldr	r2, [pc, #8]	; (aba0 <sw_timer_tcc_callback+0xc>)
    ab96:	6813      	ldr	r3, [r2, #0]
    ab98:	3301      	adds	r3, #1
    ab9a:	6013      	str	r3, [r2, #0]
}
    ab9c:	4770      	bx	lr
    ab9e:	46c0      	nop			; (mov r8, r8)
    aba0:	2000081c 	.word	0x2000081c

0000aba4 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    aba4:	2364      	movs	r3, #100	; 0x64
    aba6:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    aba8:	2300      	movs	r3, #0
    abaa:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    abac:	7043      	strb	r3, [r0, #1]
}
    abae:	4770      	bx	lr

0000abb0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    abb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    abb2:	46c6      	mov	lr, r8
    abb4:	b500      	push	{lr}
    abb6:	b0ac      	sub	sp, #176	; 0xb0
    abb8:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    abba:	466e      	mov	r6, sp
    abbc:	4b1d      	ldr	r3, [pc, #116]	; (ac34 <sw_timer_init+0x84>)
    abbe:	466a      	mov	r2, sp
    abc0:	cb92      	ldmia	r3!, {r1, r4, r7}
    abc2:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    abc4:	886b      	ldrh	r3, [r5, #2]
    abc6:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    abc8:	3014      	adds	r0, #20
    abca:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    abcc:	782b      	ldrb	r3, [r5, #0]
    abce:	009b      	lsls	r3, r3, #2
    abd0:	5999      	ldr	r1, [r3, r6]
    abd2:	0017      	movs	r7, r2
    abd4:	0010      	movs	r0, r2
    abd6:	4b18      	ldr	r3, [pc, #96]	; (ac38 <sw_timer_init+0x88>)
    abd8:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    abda:	2000      	movs	r0, #0
    abdc:	4b17      	ldr	r3, [pc, #92]	; (ac3c <sw_timer_init+0x8c>)
    abde:	4798      	blx	r3
    abe0:	4b17      	ldr	r3, [pc, #92]	; (ac40 <sw_timer_init+0x90>)
    abe2:	7a1b      	ldrb	r3, [r3, #8]
    abe4:	b2db      	uxtb	r3, r3
    abe6:	40d8      	lsrs	r0, r3
    abe8:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    abea:	8869      	ldrh	r1, [r5, #2]
    abec:	20fa      	movs	r0, #250	; 0xfa
    abee:	0200      	lsls	r0, r0, #8
    abf0:	4b14      	ldr	r3, [pc, #80]	; (ac44 <sw_timer_init+0x94>)
    abf2:	4798      	blx	r3
    abf4:	0001      	movs	r1, r0
    abf6:	4640      	mov	r0, r8
    abf8:	4b13      	ldr	r3, [pc, #76]	; (ac48 <sw_timer_init+0x98>)
    abfa:	4798      	blx	r3
    abfc:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    abfe:	2305      	movs	r3, #5
    ac00:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    ac02:	782b      	ldrb	r3, [r5, #0]
    ac04:	009b      	lsls	r3, r3, #2
    ac06:	5999      	ldr	r1, [r3, r6]
    ac08:	003a      	movs	r2, r7
    ac0a:	0020      	movs	r0, r4
    ac0c:	4b0f      	ldr	r3, [pc, #60]	; (ac4c <sw_timer_init+0x9c>)
    ac0e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    ac10:	786a      	ldrb	r2, [r5, #1]
    ac12:	3208      	adds	r2, #8
    ac14:	b2d2      	uxtb	r2, r2
    ac16:	490e      	ldr	r1, [pc, #56]	; (ac50 <sw_timer_init+0xa0>)
    ac18:	0020      	movs	r0, r4
    ac1a:	4b0e      	ldr	r3, [pc, #56]	; (ac54 <sw_timer_init+0xa4>)
    ac1c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    ac1e:	7869      	ldrb	r1, [r5, #1]
    ac20:	3108      	adds	r1, #8
    ac22:	b2c9      	uxtb	r1, r1
    ac24:	0020      	movs	r0, r4
    ac26:	4b0c      	ldr	r3, [pc, #48]	; (ac58 <sw_timer_init+0xa8>)
    ac28:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    ac2a:	b02c      	add	sp, #176	; 0xb0
    ac2c:	bc04      	pop	{r2}
    ac2e:	4690      	mov	r8, r2
    ac30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac32:	46c0      	nop			; (mov r8, r8)
    ac34:	0000ecb0 	.word	0x0000ecb0
    ac38:	000062b1 	.word	0x000062b1
    ac3c:	0000600d 	.word	0x0000600d
    ac40:	40000400 	.word	0x40000400
    ac44:	0000bad1 	.word	0x0000bad1
    ac48:	0000b9bd 	.word	0x0000b9bd
    ac4c:	000063fd 	.word	0x000063fd
    ac50:	0000ab95 	.word	0x0000ab95
    ac54:	00006809 	.word	0x00006809
    ac58:	00006821 	.word	0x00006821

0000ac5c <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    ac5c:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    ac5e:	2102      	movs	r1, #2
    ac60:	6893      	ldr	r3, [r2, #8]
    ac62:	4219      	tst	r1, r3
    ac64:	d1fc      	bne.n	ac60 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    ac66:	6813      	ldr	r3, [r2, #0]
    ac68:	2102      	movs	r1, #2
    ac6a:	430b      	orrs	r3, r1
    ac6c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    ac6e:	4770      	bx	lr

0000ac70 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    ac70:	b570      	push	{r4, r5, r6, lr}
    ac72:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    ac74:	7805      	ldrb	r5, [r0, #0]
    ac76:	07e8      	lsls	r0, r5, #31
    ac78:	d502      	bpl.n	ac80 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    ac7a:	2001      	movs	r0, #1
    ac7c:	4240      	negs	r0, r0
}
    ac7e:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    ac80:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    ac82:	0029      	movs	r1, r5
    ac84:	2002      	movs	r0, #2
    ac86:	4381      	bics	r1, r0
    ac88:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    ac8a:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    ac8c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    ac8e:	0018      	movs	r0, r3
    ac90:	4b04      	ldr	r3, [pc, #16]	; (aca4 <sw_timer_register_callback+0x34>)
    ac92:	4798      	blx	r3
    ac94:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    ac96:	7823      	ldrb	r3, [r4, #0]
    ac98:	2201      	movs	r2, #1
    ac9a:	4313      	orrs	r3, r2
    ac9c:	7023      	strb	r3, [r4, #0]
			return index;
    ac9e:	2000      	movs	r0, #0
    aca0:	e7ed      	b.n	ac7e <sw_timer_register_callback+0xe>
    aca2:	46c0      	nop			; (mov r8, r8)
    aca4:	0000b9bd 	.word	0x0000b9bd

0000aca8 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    aca8:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    acaa:	008b      	lsls	r3, r1, #2
    acac:	185d      	adds	r5, r3, r1
    acae:	00ad      	lsls	r5, r5, #2
    acb0:	5c29      	ldrb	r1, [r5, r0]
    acb2:	2602      	movs	r6, #2
    acb4:	4331      	orrs	r1, r6
    acb6:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    acb8:	1944      	adds	r4, r0, r5
    acba:	6d41      	ldr	r1, [r0, #84]	; 0x54
    acbc:	0010      	movs	r0, r2
    acbe:	4b03      	ldr	r3, [pc, #12]	; (accc <sw_timer_enable_callback+0x24>)
    acc0:	4798      	blx	r3
    acc2:	4b03      	ldr	r3, [pc, #12]	; (acd0 <sw_timer_enable_callback+0x28>)
    acc4:	681b      	ldr	r3, [r3, #0]
    acc6:	18c0      	adds	r0, r0, r3
    acc8:	6120      	str	r0, [r4, #16]
}
    acca:	bd70      	pop	{r4, r5, r6, pc}
    accc:	0000b9bd 	.word	0x0000b9bd
    acd0:	2000081c 	.word	0x2000081c

0000acd4 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    acd4:	008b      	lsls	r3, r1, #2
    acd6:	1859      	adds	r1, r3, r1
    acd8:	0089      	lsls	r1, r1, #2
    acda:	5c0b      	ldrb	r3, [r1, r0]
    acdc:	2202      	movs	r2, #2
    acde:	4393      	bics	r3, r2
    ace0:	540b      	strb	r3, [r1, r0]
}
    ace2:	4770      	bx	lr

0000ace4 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    ace4:	b570      	push	{r4, r5, r6, lr}
    ace6:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    ace8:	7803      	ldrb	r3, [r0, #0]
    acea:	07db      	lsls	r3, r3, #31
    acec:	d507      	bpl.n	acfe <sw_timer_task+0x1a>
    acee:	7803      	ldrb	r3, [r0, #0]
    acf0:	079b      	lsls	r3, r3, #30
    acf2:	d504      	bpl.n	acfe <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    acf4:	4b10      	ldr	r3, [pc, #64]	; (ad38 <sw_timer_task+0x54>)
    acf6:	681a      	ldr	r2, [r3, #0]
    acf8:	6903      	ldr	r3, [r0, #16]
    acfa:	1a9b      	subs	r3, r3, r2
    acfc:	d400      	bmi.n	ad00 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    acfe:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    ad00:	7803      	ldrb	r3, [r0, #0]
    ad02:	075b      	lsls	r3, r3, #29
    ad04:	d4fb      	bmi.n	acfe <sw_timer_task+0x1a>
				handler->busy = 1;
    ad06:	7803      	ldrb	r3, [r0, #0]
    ad08:	2104      	movs	r1, #4
    ad0a:	430b      	orrs	r3, r1
    ad0c:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    ad0e:	68c3      	ldr	r3, [r0, #12]
    ad10:	2b00      	cmp	r3, #0
    ad12:	d00b      	beq.n	ad2c <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    ad14:	18d2      	adds	r2, r2, r3
    ad16:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    ad18:	68a2      	ldr	r2, [r4, #8]
    ad1a:	2100      	movs	r1, #0
    ad1c:	0020      	movs	r0, r4
    ad1e:	6865      	ldr	r5, [r4, #4]
    ad20:	47a8      	blx	r5
				handler->busy = 0;
    ad22:	7823      	ldrb	r3, [r4, #0]
    ad24:	2204      	movs	r2, #4
    ad26:	4393      	bics	r3, r2
    ad28:	7023      	strb	r3, [r4, #0]
}
    ad2a:	e7e8      	b.n	acfe <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    ad2c:	7802      	ldrb	r2, [r0, #0]
    ad2e:	2102      	movs	r1, #2
    ad30:	438a      	bics	r2, r1
    ad32:	7002      	strb	r2, [r0, #0]
    ad34:	e7f0      	b.n	ad18 <sw_timer_task+0x34>
    ad36:	46c0      	nop			; (mov r8, r8)
    ad38:	2000081c 	.word	0x2000081c

0000ad3c <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
    ad3c:	4b02      	ldr	r3, [pc, #8]	; (ad48 <add_state+0xc>)
    ad3e:	781a      	ldrb	r2, [r3, #0]
    ad40:	4310      	orrs	r0, r2
    ad42:	7018      	strb	r0, [r3, #0]
}
    ad44:	4770      	bx	lr
    ad46:	46c0      	nop			; (mov r8, r8)
    ad48:	20000855 	.word	0x20000855

0000ad4c <SubscribeHandler>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandler(MessageData *msgData)
{
    ad4c:	b570      	push	{r4, r5, r6, lr}
    ad4e:	0004      	movs	r4, r0
	/* You received publish message which you had subscribed. */
	/* Print Topic and message */
	printf("\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
    ad50:	6843      	ldr	r3, [r0, #4]
    ad52:	689a      	ldr	r2, [r3, #8]
    ad54:	6859      	ldr	r1, [r3, #4]
    ad56:	4816      	ldr	r0, [pc, #88]	; (adb0 <SubscribeHandler+0x64>)
    ad58:	4d16      	ldr	r5, [pc, #88]	; (adb4 <SubscribeHandler+0x68>)
    ad5a:	47a8      	blx	r5
	printf(" >> ");
    ad5c:	4816      	ldr	r0, [pc, #88]	; (adb8 <SubscribeHandler+0x6c>)
    ad5e:	47a8      	blx	r5
	printf("%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);	
    ad60:	6823      	ldr	r3, [r4, #0]
    ad62:	689a      	ldr	r2, [r3, #8]
    ad64:	68d9      	ldr	r1, [r3, #12]
    ad66:	4815      	ldr	r0, [pc, #84]	; (adbc <SubscribeHandler+0x70>)
    ad68:	47a8      	blx	r5

	//Handle LedData message
	if(strncmp((char *) msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0)
    ad6a:	6826      	ldr	r6, [r4, #0]
    ad6c:	68f5      	ldr	r5, [r6, #12]
    ad6e:	6863      	ldr	r3, [r4, #4]
    ad70:	6898      	ldr	r0, [r3, #8]
    ad72:	002a      	movs	r2, r5
    ad74:	4912      	ldr	r1, [pc, #72]	; (adc0 <SubscribeHandler+0x74>)
    ad76:	4b13      	ldr	r3, [pc, #76]	; (adc4 <SubscribeHandler+0x78>)
    ad78:	4798      	blx	r3
    ad7a:	2800      	cmp	r0, #0
    ad7c:	d117      	bne.n	adae <SubscribeHandler+0x62>
	{
		if(strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0)
    ad7e:	68b4      	ldr	r4, [r6, #8]
    ad80:	002a      	movs	r2, r5
    ad82:	4911      	ldr	r1, [pc, #68]	; (adc8 <SubscribeHandler+0x7c>)
    ad84:	0020      	movs	r0, r4
    ad86:	4b0f      	ldr	r3, [pc, #60]	; (adc4 <SubscribeHandler+0x78>)
    ad88:	4798      	blx	r3
    ad8a:	2800      	cmp	r0, #0
    ad8c:	d00b      	beq.n	ada6 <SubscribeHandler+0x5a>
		{
			port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
		} 
		else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0)
    ad8e:	002a      	movs	r2, r5
    ad90:	490e      	ldr	r1, [pc, #56]	; (adcc <SubscribeHandler+0x80>)
    ad92:	0020      	movs	r0, r4
    ad94:	4b0b      	ldr	r3, [pc, #44]	; (adc4 <SubscribeHandler+0x78>)
    ad96:	4798      	blx	r3
    ad98:	2800      	cmp	r0, #0
    ad9a:	d108      	bne.n	adae <SubscribeHandler+0x62>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    ad9c:	2280      	movs	r2, #128	; 0x80
    ad9e:	0412      	lsls	r2, r2, #16
    ada0:	4b0b      	ldr	r3, [pc, #44]	; (add0 <SubscribeHandler+0x84>)
    ada2:	615a      	str	r2, [r3, #20]
		{
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		}
	}
}
    ada4:	e003      	b.n	adae <SubscribeHandler+0x62>
		port_base->OUTSET.reg = pin_mask;
    ada6:	2280      	movs	r2, #128	; 0x80
    ada8:	0412      	lsls	r2, r2, #16
    adaa:	4b09      	ldr	r3, [pc, #36]	; (add0 <SubscribeHandler+0x84>)
    adac:	619a      	str	r2, [r3, #24]
    adae:	bd70      	pop	{r4, r5, r6, pc}
    adb0:	0000ecd0 	.word	0x0000ecd0
    adb4:	0000bf11 	.word	0x0000bf11
    adb8:	0000ecd8 	.word	0x0000ecd8
    adbc:	0000ece0 	.word	0x0000ece0
    adc0:	0000ece8 	.word	0x0000ece8
    adc4:	0000c2e5 	.word	0x0000c2e5
    adc8:	0000ecf0 	.word	0x0000ecf0
    adcc:	0000ecf8 	.word	0x0000ecf8
    add0:	41004400 	.word	0x41004400

0000add4 <extint_detection_callback>:
}


volatile bool isPressed = false;
void extint_detection_callback(void)
{
    add4:	b510      	push	{r4, lr}
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
    add6:	4b0a      	ldr	r3, [pc, #40]	; (ae00 <extint_detection_callback+0x2c>)
    add8:	681a      	ldr	r2, [r3, #0]
    adda:	3201      	adds	r2, #1
    addc:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
    adde:	681b      	ldr	r3, [r3, #0]
    ade0:	2b28      	cmp	r3, #40	; 0x28
    ade2:	d902      	bls.n	adea <extint_detection_callback+0x16>
    ade4:	2201      	movs	r2, #1
    ade6:	4b06      	ldr	r3, [pc, #24]	; (ae00 <extint_detection_callback+0x2c>)
    ade8:	601a      	str	r2, [r3, #0]
	snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);
    adea:	4b05      	ldr	r3, [pc, #20]	; (ae00 <extint_detection_callback+0x2c>)
    adec:	681b      	ldr	r3, [r3, #0]
    adee:	4a05      	ldr	r2, [pc, #20]	; (ae04 <extint_detection_callback+0x30>)
    adf0:	213f      	movs	r1, #63	; 0x3f
    adf2:	4805      	ldr	r0, [pc, #20]	; (ae08 <extint_detection_callback+0x34>)
    adf4:	4c05      	ldr	r4, [pc, #20]	; (ae0c <extint_detection_callback+0x38>)
    adf6:	47a0      	blx	r4
	isPressed = true;
    adf8:	2201      	movs	r2, #1
    adfa:	4b05      	ldr	r3, [pc, #20]	; (ae10 <extint_detection_callback+0x3c>)
    adfc:	701a      	strb	r2, [r3, #0]
	
}
    adfe:	bd10      	pop	{r4, pc}
    ae00:	20000170 	.word	0x20000170
    ae04:	0000ed00 	.word	0x0000ed00
    ae08:	20000034 	.word	0x20000034
    ae0c:	0000c1d1 	.word	0x0000c1d1
    ae10:	20000ab0 	.word	0x20000ab0

0000ae14 <socket_resolve_handler>:
{
    ae14:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    ae16:	4b01      	ldr	r3, [pc, #4]	; (ae1c <socket_resolve_handler+0x8>)
    ae18:	4798      	blx	r3
}
    ae1a:	bd10      	pop	{r4, pc}
    ae1c:	0000913d 	.word	0x0000913d

0000ae20 <socket_event_handler>:
{
    ae20:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    ae22:	4b01      	ldr	r3, [pc, #4]	; (ae28 <socket_event_handler+0x8>)
    ae24:	4798      	blx	r3
}
    ae26:	bd10      	pop	{r4, pc}
    ae28:	00009131 	.word	0x00009131

0000ae2c <resolve_cb>:
{
    ae2c:	b570      	push	{r4, r5, r6, lr}
    ae2e:	b082      	sub	sp, #8
    ae30:	0005      	movs	r5, r0
    ae32:	000c      	movs	r4, r1
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    ae34:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    ae36:	21ff      	movs	r1, #255	; 0xff
    ae38:	400b      	ands	r3, r1
    ae3a:	000a      	movs	r2, r1
    ae3c:	4022      	ands	r2, r4
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    ae3e:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    ae40:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    ae42:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    ae44:	4001      	ands	r1, r0
    ae46:	9100      	str	r1, [sp, #0]
    ae48:	0029      	movs	r1, r5
    ae4a:	4804      	ldr	r0, [pc, #16]	; (ae5c <resolve_cb+0x30>)
    ae4c:	4e04      	ldr	r6, [pc, #16]	; (ae60 <resolve_cb+0x34>)
    ae4e:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    ae50:	0021      	movs	r1, r4
    ae52:	0028      	movs	r0, r5
    ae54:	4b03      	ldr	r3, [pc, #12]	; (ae64 <resolve_cb+0x38>)
    ae56:	4798      	blx	r3
}
    ae58:	b002      	add	sp, #8
    ae5a:	bd70      	pop	{r4, r5, r6, pc}
    ae5c:	0000f220 	.word	0x0000f220
    ae60:	0000bf11 	.word	0x0000bf11
    ae64:	00009d31 	.word	0x00009d31

0000ae68 <socket_cb>:
{
    ae68:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    ae6a:	4b01      	ldr	r3, [pc, #4]	; (ae70 <socket_cb+0x8>)
    ae6c:	4798      	blx	r3
}
    ae6e:	bd10      	pop	{r4, pc}
    ae70:	0000a95d 	.word	0x0000a95d

0000ae74 <start_download>:
{
    ae74:	b510      	push	{r4, lr}
    ae76:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
    ae78:	4b12      	ldr	r3, [pc, #72]	; (aec4 <start_download+0x50>)
    ae7a:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
    ae7c:	07da      	lsls	r2, r3, #31
    ae7e:	d511      	bpl.n	aea4 <start_download+0x30>
	if (!is_state_set(WIFI_CONNECTED)) {
    ae80:	079a      	lsls	r2, r3, #30
    ae82:	d513      	bpl.n	aeac <start_download+0x38>
	if (is_state_set(GET_REQUESTED)) {
    ae84:	075a      	lsls	r2, r3, #29
    ae86:	d415      	bmi.n	aeb4 <start_download+0x40>
	if (is_state_set(DOWNLOADING)) {
    ae88:	071b      	lsls	r3, r3, #28
    ae8a:	d417      	bmi.n	aebc <start_download+0x48>
	printf("start_download: sending HTTP request...\r\n");
    ae8c:	480e      	ldr	r0, [pc, #56]	; (aec8 <start_download+0x54>)
    ae8e:	4b0f      	ldr	r3, [pc, #60]	; (aecc <start_download+0x58>)
    ae90:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    ae92:	2300      	movs	r3, #0
    ae94:	9300      	str	r3, [sp, #0]
    ae96:	2201      	movs	r2, #1
    ae98:	490d      	ldr	r1, [pc, #52]	; (aed0 <start_download+0x5c>)
    ae9a:	480e      	ldr	r0, [pc, #56]	; (aed4 <start_download+0x60>)
    ae9c:	4c0e      	ldr	r4, [pc, #56]	; (aed8 <start_download+0x64>)
    ae9e:	47a0      	blx	r4
}
    aea0:	b002      	add	sp, #8
    aea2:	bd10      	pop	{r4, pc}
		printf("start_download: MMC storage not ready.\r\n");
    aea4:	480d      	ldr	r0, [pc, #52]	; (aedc <start_download+0x68>)
    aea6:	4b09      	ldr	r3, [pc, #36]	; (aecc <start_download+0x58>)
    aea8:	4798      	blx	r3
		return;
    aeaa:	e7f9      	b.n	aea0 <start_download+0x2c>
		printf("start_download: Wi-Fi is not connected.\r\n");
    aeac:	480c      	ldr	r0, [pc, #48]	; (aee0 <start_download+0x6c>)
    aeae:	4b07      	ldr	r3, [pc, #28]	; (aecc <start_download+0x58>)
    aeb0:	4798      	blx	r3
		return;
    aeb2:	e7f5      	b.n	aea0 <start_download+0x2c>
		printf("start_download: request is sent already.\r\n");
    aeb4:	480b      	ldr	r0, [pc, #44]	; (aee4 <start_download+0x70>)
    aeb6:	4b05      	ldr	r3, [pc, #20]	; (aecc <start_download+0x58>)
    aeb8:	4798      	blx	r3
		return;
    aeba:	e7f1      	b.n	aea0 <start_download+0x2c>
		printf("start_download: running download already.\r\n");
    aebc:	480a      	ldr	r0, [pc, #40]	; (aee8 <start_download+0x74>)
    aebe:	4b03      	ldr	r3, [pc, #12]	; (aecc <start_download+0x58>)
    aec0:	4798      	blx	r3
		return;
    aec2:	e7ed      	b.n	aea0 <start_download+0x2c>
    aec4:	20000855 	.word	0x20000855
    aec8:	0000f2fc 	.word	0x0000f2fc
    aecc:	0000c02d 	.word	0x0000c02d
    aed0:	0000f328 	.word	0x0000f328
    aed4:	2000110c 	.word	0x2000110c
    aed8:	0000a261 	.word	0x0000a261
    aedc:	0000f250 	.word	0x0000f250
    aee0:	0000f278 	.word	0x0000f278
    aee4:	0000f2a4 	.word	0x0000f2a4
    aee8:	0000f2d0 	.word	0x0000f2d0

0000aeec <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    aeec:	b570      	push	{r4, r5, r6, lr}
    aeee:	b082      	sub	sp, #8
    aef0:	0005      	movs	r5, r0
    aef2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    aef4:	2200      	movs	r2, #0
    aef6:	466b      	mov	r3, sp
    aef8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    aefa:	4c06      	ldr	r4, [pc, #24]	; (af14 <usart_serial_getchar+0x28>)
    aefc:	466b      	mov	r3, sp
    aefe:	1d99      	adds	r1, r3, #6
    af00:	0028      	movs	r0, r5
    af02:	47a0      	blx	r4
    af04:	2800      	cmp	r0, #0
    af06:	d1f9      	bne.n	aefc <usart_serial_getchar+0x10>

	*c = temp;
    af08:	466b      	mov	r3, sp
    af0a:	3306      	adds	r3, #6
    af0c:	881b      	ldrh	r3, [r3, #0]
    af0e:	7033      	strb	r3, [r6, #0]
}
    af10:	b002      	add	sp, #8
    af12:	bd70      	pop	{r4, r5, r6, pc}
    af14:	000058d9 	.word	0x000058d9

0000af18 <usart_serial_putchar>:
{
    af18:	b570      	push	{r4, r5, r6, lr}
    af1a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    af1c:	b28c      	uxth	r4, r1
    af1e:	4e03      	ldr	r6, [pc, #12]	; (af2c <usart_serial_putchar+0x14>)
    af20:	0021      	movs	r1, r4
    af22:	0028      	movs	r0, r5
    af24:	47b0      	blx	r6
    af26:	2800      	cmp	r0, #0
    af28:	d1fa      	bne.n	af20 <usart_serial_putchar+0x8>
}
    af2a:	bd70      	pop	{r4, r5, r6, pc}
    af2c:	000058ad 	.word	0x000058ad

0000af30 <mqtt_callback>:
{
    af30:	b570      	push	{r4, r5, r6, lr}
    af32:	b086      	sub	sp, #24
    af34:	0004      	movs	r4, r0
	switch (type) {
    af36:	2901      	cmp	r1, #1
    af38:	d02c      	beq.n	af94 <mqtt_callback+0x64>
    af3a:	2905      	cmp	r1, #5
    af3c:	d040      	beq.n	afc0 <mqtt_callback+0x90>
    af3e:	2900      	cmp	r1, #0
    af40:	d001      	beq.n	af46 <mqtt_callback+0x16>
}
    af42:	b006      	add	sp, #24
    af44:	bd70      	pop	{r4, r5, r6, pc}
		if (data->sock_connected.result >= 0) {
    af46:	6813      	ldr	r3, [r2, #0]
    af48:	2b00      	cmp	r3, #0
    af4a:	db19      	blt.n	af80 <mqtt_callback+0x50>
			printf("\r\nConnecting to Broker...");
    af4c:	4821      	ldr	r0, [pc, #132]	; (afd4 <mqtt_callback+0xa4>)
    af4e:	4b22      	ldr	r3, [pc, #136]	; (afd8 <mqtt_callback+0xa8>)
    af50:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
    af52:	4a22      	ldr	r2, [pc, #136]	; (afdc <mqtt_callback+0xac>)
    af54:	2300      	movs	r3, #0
    af56:	9305      	str	r3, [sp, #20]
    af58:	9304      	str	r3, [sp, #16]
    af5a:	9303      	str	r3, [sp, #12]
    af5c:	9302      	str	r3, [sp, #8]
    af5e:	9301      	str	r3, [sp, #4]
    af60:	9200      	str	r2, [sp, #0]
    af62:	4b1f      	ldr	r3, [pc, #124]	; (afe0 <mqtt_callback+0xb0>)
    af64:	2101      	movs	r1, #1
    af66:	0020      	movs	r0, r4
    af68:	4c1e      	ldr	r4, [pc, #120]	; (afe4 <mqtt_callback+0xb4>)
    af6a:	47a0      	blx	r4
    af6c:	2800      	cmp	r0, #0
    af6e:	d003      	beq.n	af78 <mqtt_callback+0x48>
				printf("MQTT  Error - NOT Connected to broker\r\n");
    af70:	481d      	ldr	r0, [pc, #116]	; (afe8 <mqtt_callback+0xb8>)
    af72:	4b1e      	ldr	r3, [pc, #120]	; (afec <mqtt_callback+0xbc>)
    af74:	4798      	blx	r3
    af76:	e7e4      	b.n	af42 <mqtt_callback+0x12>
				printf("MQTT Connected to broker\r\n");
    af78:	481d      	ldr	r0, [pc, #116]	; (aff0 <mqtt_callback+0xc0>)
    af7a:	4b1c      	ldr	r3, [pc, #112]	; (afec <mqtt_callback+0xbc>)
    af7c:	4798      	blx	r3
    af7e:	e7e0      	b.n	af42 <mqtt_callback+0x12>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    af80:	4d1c      	ldr	r5, [pc, #112]	; (aff4 <mqtt_callback+0xc4>)
    af82:	0029      	movs	r1, r5
    af84:	481c      	ldr	r0, [pc, #112]	; (aff8 <mqtt_callback+0xc8>)
    af86:	4b14      	ldr	r3, [pc, #80]	; (afd8 <mqtt_callback+0xa8>)
    af88:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    af8a:	0029      	movs	r1, r5
    af8c:	0020      	movs	r0, r4
    af8e:	4b1b      	ldr	r3, [pc, #108]	; (affc <mqtt_callback+0xcc>)
    af90:	4798      	blx	r3
    af92:	e7d6      	b.n	af42 <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    af94:	7811      	ldrb	r1, [r2, #0]
    af96:	2900      	cmp	r1, #0
    af98:	d10e      	bne.n	afb8 <mqtt_callback+0x88>
			mqtt_subscribe(module_inst, TEMPERATURE_TOPIC, 2, SubscribeHandler);
    af9a:	4e19      	ldr	r6, [pc, #100]	; (b000 <mqtt_callback+0xd0>)
    af9c:	0033      	movs	r3, r6
    af9e:	2202      	movs	r2, #2
    afa0:	4918      	ldr	r1, [pc, #96]	; (b004 <mqtt_callback+0xd4>)
    afa2:	4d19      	ldr	r5, [pc, #100]	; (b008 <mqtt_callback+0xd8>)
    afa4:	47a8      	blx	r5
			mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
    afa6:	0033      	movs	r3, r6
    afa8:	2202      	movs	r2, #2
    afaa:	4918      	ldr	r1, [pc, #96]	; (b00c <mqtt_callback+0xdc>)
    afac:	0020      	movs	r0, r4
    afae:	47a8      	blx	r5
			printf("MQTT Connected\r\n");
    afb0:	4817      	ldr	r0, [pc, #92]	; (b010 <mqtt_callback+0xe0>)
    afb2:	4b0e      	ldr	r3, [pc, #56]	; (afec <mqtt_callback+0xbc>)
    afb4:	4798      	blx	r3
    afb6:	e7c4      	b.n	af42 <mqtt_callback+0x12>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    afb8:	4816      	ldr	r0, [pc, #88]	; (b014 <mqtt_callback+0xe4>)
    afba:	4b07      	ldr	r3, [pc, #28]	; (afd8 <mqtt_callback+0xa8>)
    afbc:	4798      	blx	r3
    afbe:	e7c0      	b.n	af42 <mqtt_callback+0x12>
		printf("MQTT disconnected\r\n");
    afc0:	4815      	ldr	r0, [pc, #84]	; (b018 <mqtt_callback+0xe8>)
    afc2:	4b0a      	ldr	r3, [pc, #40]	; (afec <mqtt_callback+0xbc>)
    afc4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    afc6:	4915      	ldr	r1, [pc, #84]	; (b01c <mqtt_callback+0xec>)
    afc8:	2231      	movs	r2, #49	; 0x31
    afca:	5c8b      	ldrb	r3, [r1, r2]
    afcc:	2002      	movs	r0, #2
    afce:	4383      	bics	r3, r0
    afd0:	548b      	strb	r3, [r1, r2]
}
    afd2:	e7b6      	b.n	af42 <mqtt_callback+0x12>
    afd4:	0000f100 	.word	0x0000f100
    afd8:	0000bf11 	.word	0x0000bf11
    afdc:	0000f12c 	.word	0x0000f12c
    afe0:	0000f11c 	.word	0x0000f11c
    afe4:	00009175 	.word	0x00009175
    afe8:	0000f138 	.word	0x0000f138
    afec:	0000c02d 	.word	0x0000c02d
    aff0:	0000f160 	.word	0x0000f160
    aff4:	0000f0ec 	.word	0x0000f0ec
    aff8:	0000f17c 	.word	0x0000f17c
    affc:	00009149 	.word	0x00009149
    b000:	0000ad4d 	.word	0x0000ad4d
    b004:	0000f1b4 	.word	0x0000f1b4
    b008:	00009279 	.word	0x00009279
    b00c:	0000ece8 	.word	0x0000ece8
    b010:	0000f1c0 	.word	0x0000f1c0
    b014:	0000f1d0 	.word	0x0000f1d0
    b018:	0000f204 	.word	0x0000f204
    b01c:	20000820 	.word	0x20000820

0000b020 <rename_to_unique>:
{
    b020:	b5f0      	push	{r4, r5, r6, r7, lr}
    b022:	46de      	mov	lr, fp
    b024:	b500      	push	{lr}
    b026:	b0c8      	sub	sp, #288	; 0x120
    b028:	0007      	movs	r7, r0
    b02a:	000e      	movs	r6, r1
    b02c:	9101      	str	r1, [sp, #4]
    b02e:	9203      	str	r2, [sp, #12]
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    b030:	22fb      	movs	r2, #251	; 0xfb
    b032:	2100      	movs	r1, #0
    b034:	a809      	add	r0, sp, #36	; 0x24
    b036:	4d52      	ldr	r5, [pc, #328]	; (b180 <rename_to_unique+0x160>)
    b038:	47a8      	blx	r5
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    b03a:	2209      	movs	r2, #9
    b03c:	2100      	movs	r1, #0
    b03e:	a806      	add	r0, sp, #24
    b040:	47a8      	blx	r5
	char numbering[NUMBRING_MAX + 1] = {0};
    b042:	2300      	movs	r3, #0
    b044:	9305      	str	r3, [sp, #20]
	if (file_path_name == NULL) {
    b046:	2e00      	cmp	r6, #0
    b048:	d100      	bne.n	b04c <rename_to_unique+0x2c>
    b04a:	e090      	b.n	b16e <rename_to_unique+0x14e>
	if (fp == NULL || file_path_name == NULL) {
    b04c:	2f00      	cmp	r7, #0
    b04e:	d100      	bne.n	b052 <rename_to_unique+0x32>
    b050:	e08f      	b.n	b172 <rename_to_unique+0x152>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    b052:	4d4c      	ldr	r5, [pc, #304]	; (b184 <rename_to_unique+0x164>)
    b054:	2200      	movs	r2, #0
    b056:	0031      	movs	r1, r6
    b058:	0028      	movs	r0, r5
    b05a:	4b4b      	ldr	r3, [pc, #300]	; (b188 <rename_to_unique+0x168>)
    b05c:	4798      	blx	r3
    b05e:	0007      	movs	r7, r0
	f_close(&file_object);
    b060:	0028      	movs	r0, r5
    b062:	4b4a      	ldr	r3, [pc, #296]	; (b18c <rename_to_unique+0x16c>)
    b064:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
    b066:	2f00      	cmp	r7, #0
    b068:	d000      	beq.n	b06c <rename_to_unique+0x4c>
    b06a:	e084      	b.n	b176 <rename_to_unique+0x156>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    b06c:	0030      	movs	r0, r6
    b06e:	4b48      	ldr	r3, [pc, #288]	; (b190 <rename_to_unique+0x170>)
    b070:	4798      	blx	r3
    b072:	0003      	movs	r3, r0
		return false;
    b074:	2000      	movs	r0, #0
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    b076:	2bfa      	cmp	r3, #250	; 0xfa
    b078:	d87e      	bhi.n	b178 <rename_to_unique+0x158>
	p = strrchr(file_path_name, '.');
    b07a:	212e      	movs	r1, #46	; 0x2e
    b07c:	0030      	movs	r0, r6
    b07e:	4b45      	ldr	r3, [pc, #276]	; (b194 <rename_to_unique+0x174>)
    b080:	4798      	blx	r3
    b082:	1e05      	subs	r5, r0, #0
	if (p != NULL) {
    b084:	d039      	beq.n	b0fa <rename_to_unique+0xda>
		ext_len = strlen(p);
    b086:	4b42      	ldr	r3, [pc, #264]	; (b190 <rename_to_unique+0x170>)
    b088:	4798      	blx	r3
    b08a:	0007      	movs	r7, r0
    b08c:	b284      	uxth	r4, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    b08e:	2c07      	cmp	r4, #7
    b090:	d820      	bhi.n	b0d4 <rename_to_unique+0xb4>
			strcpy(ext, p);
    b092:	0029      	movs	r1, r5
    b094:	a806      	add	r0, sp, #24
    b096:	4b40      	ldr	r3, [pc, #256]	; (b198 <rename_to_unique+0x178>)
    b098:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    b09a:	0030      	movs	r0, r6
    b09c:	4b3c      	ldr	r3, [pc, #240]	; (b190 <rename_to_unique+0x170>)
    b09e:	4798      	blx	r3
    b0a0:	043f      	lsls	r7, r7, #16
    b0a2:	0c3f      	lsrs	r7, r7, #16
    b0a4:	1bc7      	subs	r7, r0, r7
    b0a6:	2ff6      	cmp	r7, #246	; 0xf6
    b0a8:	d909      	bls.n	b0be <rename_to_unique+0x9e>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    b0aa:	25f6      	movs	r5, #246	; 0xf6
    b0ac:	1b2d      	subs	r5, r5, r4
    b0ae:	b2ad      	uxth	r5, r5
				strncpy(name, file_path_name, name_len);
    b0b0:	002a      	movs	r2, r5
    b0b2:	0031      	movs	r1, r6
    b0b4:	a809      	add	r0, sp, #36	; 0x24
    b0b6:	4b39      	ldr	r3, [pc, #228]	; (b19c <rename_to_unique+0x17c>)
    b0b8:	4798      	blx	r3
			valid_ext = true;
    b0ba:	2401      	movs	r4, #1
    b0bc:	e011      	b.n	b0e2 <rename_to_unique+0xc2>
				name_len = (p - file_path_name);
    b0be:	9b01      	ldr	r3, [sp, #4]
    b0c0:	1aea      	subs	r2, r5, r3
    b0c2:	b295      	uxth	r5, r2
				strncpy(name, file_path_name, name_len);
    b0c4:	0412      	lsls	r2, r2, #16
    b0c6:	0c12      	lsrs	r2, r2, #16
    b0c8:	0019      	movs	r1, r3
    b0ca:	a809      	add	r0, sp, #36	; 0x24
    b0cc:	4b33      	ldr	r3, [pc, #204]	; (b19c <rename_to_unique+0x17c>)
    b0ce:	4798      	blx	r3
			valid_ext = true;
    b0d0:	2401      	movs	r4, #1
    b0d2:	e006      	b.n	b0e2 <rename_to_unique+0xc2>
			strncpy(name, file_path_name, name_len);
    b0d4:	22f6      	movs	r2, #246	; 0xf6
    b0d6:	9901      	ldr	r1, [sp, #4]
    b0d8:	a809      	add	r0, sp, #36	; 0x24
    b0da:	4b30      	ldr	r3, [pc, #192]	; (b19c <rename_to_unique+0x17c>)
    b0dc:	4798      	blx	r3
	bool valid_ext = false;
    b0de:	2400      	movs	r4, #0
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    b0e0:	25f6      	movs	r5, #246	; 0xf6
	name[name_len++] = '-';
    b0e2:	1c6e      	adds	r6, r5, #1
    b0e4:	b2b6      	uxth	r6, r6
    b0e6:	222d      	movs	r2, #45	; 0x2d
    b0e8:	ab09      	add	r3, sp, #36	; 0x24
    b0ea:	555a      	strb	r2, [r3, r5]
    b0ec:	2501      	movs	r5, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    b0ee:	1cf3      	adds	r3, r6, #3
    b0f0:	aa09      	add	r2, sp, #36	; 0x24
    b0f2:	4694      	mov	ip, r2
    b0f4:	4463      	add	r3, ip
    b0f6:	9302      	str	r3, [sp, #8]
    b0f8:	e019      	b.n	b12e <rename_to_unique+0x10e>
		strncpy(name, file_path_name, name_len);
    b0fa:	22f6      	movs	r2, #246	; 0xf6
    b0fc:	9901      	ldr	r1, [sp, #4]
    b0fe:	a809      	add	r0, sp, #36	; 0x24
    b100:	4b26      	ldr	r3, [pc, #152]	; (b19c <rename_to_unique+0x17c>)
    b102:	4798      	blx	r3
	bool valid_ext = false;
    b104:	2400      	movs	r4, #0
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    b106:	25f6      	movs	r5, #246	; 0xf6
    b108:	e7eb      	b.n	b0e2 <rename_to_unique+0xc2>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    b10a:	4f1e      	ldr	r7, [pc, #120]	; (b184 <rename_to_unique+0x164>)
    b10c:	2200      	movs	r2, #0
    b10e:	a909      	add	r1, sp, #36	; 0x24
    b110:	0038      	movs	r0, r7
    b112:	4b1d      	ldr	r3, [pc, #116]	; (b188 <rename_to_unique+0x168>)
    b114:	4798      	blx	r3
    b116:	4683      	mov	fp, r0
	f_close(&file_object);
    b118:	0038      	movs	r0, r7
    b11a:	4b1c      	ldr	r3, [pc, #112]	; (b18c <rename_to_unique+0x16c>)
    b11c:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
    b11e:	465b      	mov	r3, fp
    b120:	2b00      	cmp	r3, #0
    b122:	d116      	bne.n	b152 <rename_to_unique+0x132>
    b124:	3501      	adds	r5, #1
	for (i = 1; i < count; i++) {
    b126:	4b1e      	ldr	r3, [pc, #120]	; (b1a0 <rename_to_unique+0x180>)
    b128:	b2aa      	uxth	r2, r5
    b12a:	429a      	cmp	r2, r3
    b12c:	d81d      	bhi.n	b16a <rename_to_unique+0x14a>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    b12e:	002a      	movs	r2, r5
    b130:	491c      	ldr	r1, [pc, #112]	; (b1a4 <rename_to_unique+0x184>)
    b132:	a805      	add	r0, sp, #20
    b134:	4b1c      	ldr	r3, [pc, #112]	; (b1a8 <rename_to_unique+0x188>)
    b136:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
    b138:	ab09      	add	r3, sp, #36	; 0x24
    b13a:	1998      	adds	r0, r3, r6
    b13c:	2203      	movs	r2, #3
    b13e:	a905      	add	r1, sp, #20
    b140:	4b16      	ldr	r3, [pc, #88]	; (b19c <rename_to_unique+0x17c>)
    b142:	4798      	blx	r3
		if (valid_ext) {
    b144:	2c00      	cmp	r4, #0
    b146:	d0e0      	beq.n	b10a <rename_to_unique+0xea>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    b148:	a906      	add	r1, sp, #24
    b14a:	9802      	ldr	r0, [sp, #8]
    b14c:	4b12      	ldr	r3, [pc, #72]	; (b198 <rename_to_unique+0x178>)
    b14e:	4798      	blx	r3
    b150:	e7db      	b.n	b10a <rename_to_unique+0xea>
			memset(file_path_name, 0, max_len);
    b152:	9a03      	ldr	r2, [sp, #12]
    b154:	2100      	movs	r1, #0
    b156:	9c01      	ldr	r4, [sp, #4]
    b158:	0020      	movs	r0, r4
    b15a:	4b09      	ldr	r3, [pc, #36]	; (b180 <rename_to_unique+0x160>)
    b15c:	4798      	blx	r3
			strcpy(file_path_name, name);
    b15e:	a909      	add	r1, sp, #36	; 0x24
    b160:	0020      	movs	r0, r4
    b162:	4b0d      	ldr	r3, [pc, #52]	; (b198 <rename_to_unique+0x178>)
    b164:	4798      	blx	r3
			return true;
    b166:	2001      	movs	r0, #1
    b168:	e006      	b.n	b178 <rename_to_unique+0x158>
	return false;
    b16a:	2000      	movs	r0, #0
    b16c:	e004      	b.n	b178 <rename_to_unique+0x158>
		return false;
    b16e:	2000      	movs	r0, #0
    b170:	e002      	b.n	b178 <rename_to_unique+0x158>
		return true;
    b172:	2001      	movs	r0, #1
    b174:	e000      	b.n	b178 <rename_to_unique+0x158>
    b176:	2001      	movs	r0, #1
}
    b178:	b048      	add	sp, #288	; 0x120
    b17a:	bc04      	pop	{r2}
    b17c:	4693      	mov	fp, r2
    b17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b180:	0000bdaf 	.word	0x0000bdaf
    b184:	20000a88 	.word	0x20000a88
    b188:	000080b1 	.word	0x000080b1
    b18c:	000084fd 	.word	0x000084fd
    b190:	0000c2d7 	.word	0x0000c2d7
    b194:	0000c331 	.word	0x0000c331
    b198:	0000c28d 	.word	0x0000c28d
    b19c:	0000c307 	.word	0x0000c307
    b1a0:	000003e7 	.word	0x000003e7
    b1a4:	0000f218 	.word	0x0000f218
    b1a8:	0000c235 	.word	0x0000c235

0000b1ac <store_file_packet>:
{
    b1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1ae:	b083      	sub	sp, #12
    b1b0:	0005      	movs	r5, r0
    b1b2:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
    b1b4:	2800      	cmp	r0, #0
    b1b6:	d00c      	beq.n	b1d2 <store_file_packet+0x26>
    b1b8:	2900      	cmp	r1, #0
    b1ba:	d00a      	beq.n	b1d2 <store_file_packet+0x26>
	return ((down_state & mask) != 0);
    b1bc:	4b39      	ldr	r3, [pc, #228]	; (b2a4 <store_file_packet+0xf8>)
    b1be:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
    b1c0:	071b      	lsls	r3, r3, #28
    b1c2:	d430      	bmi.n	b226 <store_file_packet+0x7a>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b1c4:	4b38      	ldr	r3, [pc, #224]	; (b2a8 <store_file_packet+0xfc>)
    b1c6:	2230      	movs	r2, #48	; 0x30
    b1c8:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
    b1ca:	320a      	adds	r2, #10
    b1cc:	705a      	strb	r2, [r3, #1]
    b1ce:	4c37      	ldr	r4, [pc, #220]	; (b2ac <store_file_packet+0x100>)
    b1d0:	e005      	b.n	b1de <store_file_packet+0x32>
		printf("store_file_packet: empty data.\r\n");
    b1d2:	4837      	ldr	r0, [pc, #220]	; (b2b0 <store_file_packet+0x104>)
    b1d4:	4b37      	ldr	r3, [pc, #220]	; (b2b4 <store_file_packet+0x108>)
    b1d6:	4798      	blx	r3
}
    b1d8:	b003      	add	sp, #12
    b1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
    b1dc:	0004      	movs	r4, r0
    b1de:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
    b1e0:	7803      	ldrb	r3, [r0, #0]
    b1e2:	2b2f      	cmp	r3, #47	; 0x2f
    b1e4:	d1fa      	bne.n	b1dc <store_file_packet+0x30>
		if (strlen(cp) > 1) {
    b1e6:	4b34      	ldr	r3, [pc, #208]	; (b2b8 <store_file_packet+0x10c>)
    b1e8:	4798      	blx	r3
    b1ea:	2801      	cmp	r0, #1
    b1ec:	d92f      	bls.n	b24e <store_file_packet+0xa2>
			strcpy(&save_file_name[2], cp);
    b1ee:	4f2e      	ldr	r7, [pc, #184]	; (b2a8 <store_file_packet+0xfc>)
    b1f0:	1cb8      	adds	r0, r7, #2
    b1f2:	0021      	movs	r1, r4
    b1f4:	4b31      	ldr	r3, [pc, #196]	; (b2bc <store_file_packet+0x110>)
    b1f6:	4798      	blx	r3
		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    b1f8:	4c31      	ldr	r4, [pc, #196]	; (b2c0 <store_file_packet+0x114>)
    b1fa:	22fa      	movs	r2, #250	; 0xfa
    b1fc:	0039      	movs	r1, r7
    b1fe:	0020      	movs	r0, r4
    b200:	4b30      	ldr	r3, [pc, #192]	; (b2c4 <store_file_packet+0x118>)
    b202:	4798      	blx	r3
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
    b204:	0039      	movs	r1, r7
    b206:	4830      	ldr	r0, [pc, #192]	; (b2c8 <store_file_packet+0x11c>)
    b208:	4b30      	ldr	r3, [pc, #192]	; (b2cc <store_file_packet+0x120>)
    b20a:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    b20c:	220a      	movs	r2, #10
    b20e:	0039      	movs	r1, r7
    b210:	0020      	movs	r0, r4
    b212:	4b2f      	ldr	r3, [pc, #188]	; (b2d0 <store_file_packet+0x124>)
    b214:	4798      	blx	r3
		if (ret != FR_OK) {
    b216:	2800      	cmp	r0, #0
    b218:	d120      	bne.n	b25c <store_file_packet+0xb0>
		received_file_size = 0;
    b21a:	2200      	movs	r2, #0
    b21c:	4b2d      	ldr	r3, [pc, #180]	; (b2d4 <store_file_packet+0x128>)
    b21e:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
    b220:	2008      	movs	r0, #8
    b222:	4b2d      	ldr	r3, [pc, #180]	; (b2d8 <store_file_packet+0x12c>)
    b224:	4798      	blx	r3
		UINT wsize = 0;
    b226:	2300      	movs	r3, #0
    b228:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
    b22a:	ab01      	add	r3, sp, #4
    b22c:	0032      	movs	r2, r6
    b22e:	0029      	movs	r1, r5
    b230:	4823      	ldr	r0, [pc, #140]	; (b2c0 <store_file_packet+0x114>)
    b232:	4c2a      	ldr	r4, [pc, #168]	; (b2dc <store_file_packet+0x130>)
    b234:	47a0      	blx	r4
		if (ret != FR_OK) {
    b236:	2800      	cmp	r0, #0
    b238:	d015      	beq.n	b266 <store_file_packet+0xba>
			f_close(&file_object);
    b23a:	4821      	ldr	r0, [pc, #132]	; (b2c0 <store_file_packet+0x114>)
    b23c:	4b28      	ldr	r3, [pc, #160]	; (b2e0 <store_file_packet+0x134>)
    b23e:	4798      	blx	r3
			add_state(CANCELED);
    b240:	2020      	movs	r0, #32
    b242:	4b25      	ldr	r3, [pc, #148]	; (b2d8 <store_file_packet+0x12c>)
    b244:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
    b246:	4827      	ldr	r0, [pc, #156]	; (b2e4 <store_file_packet+0x138>)
    b248:	4b1a      	ldr	r3, [pc, #104]	; (b2b4 <store_file_packet+0x108>)
    b24a:	4798      	blx	r3
			return;
    b24c:	e7c4      	b.n	b1d8 <store_file_packet+0x2c>
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
    b24e:	4826      	ldr	r0, [pc, #152]	; (b2e8 <store_file_packet+0x13c>)
    b250:	4b18      	ldr	r3, [pc, #96]	; (b2b4 <store_file_packet+0x108>)
    b252:	4798      	blx	r3
			add_state(CANCELED);
    b254:	2020      	movs	r0, #32
    b256:	4b20      	ldr	r3, [pc, #128]	; (b2d8 <store_file_packet+0x12c>)
    b258:	4798      	blx	r3
			return;
    b25a:	e7bd      	b.n	b1d8 <store_file_packet+0x2c>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
    b25c:	0001      	movs	r1, r0
    b25e:	4823      	ldr	r0, [pc, #140]	; (b2ec <store_file_packet+0x140>)
    b260:	4b1a      	ldr	r3, [pc, #104]	; (b2cc <store_file_packet+0x120>)
    b262:	4798      	blx	r3
			return;
    b264:	e7b8      	b.n	b1d8 <store_file_packet+0x2c>
		received_file_size += wsize;
    b266:	4c1b      	ldr	r4, [pc, #108]	; (b2d4 <store_file_packet+0x128>)
    b268:	6823      	ldr	r3, [r4, #0]
    b26a:	9a01      	ldr	r2, [sp, #4]
    b26c:	4694      	mov	ip, r2
    b26e:	4463      	add	r3, ip
    b270:	0019      	movs	r1, r3
    b272:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    b274:	4d1e      	ldr	r5, [pc, #120]	; (b2f0 <store_file_packet+0x144>)
    b276:	682a      	ldr	r2, [r5, #0]
    b278:	481e      	ldr	r0, [pc, #120]	; (b2f4 <store_file_packet+0x148>)
    b27a:	4b14      	ldr	r3, [pc, #80]	; (b2cc <store_file_packet+0x120>)
    b27c:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
    b27e:	6822      	ldr	r2, [r4, #0]
    b280:	682b      	ldr	r3, [r5, #0]
    b282:	429a      	cmp	r2, r3
    b284:	d3a8      	bcc.n	b1d8 <store_file_packet+0x2c>
			f_close(&file_object);
    b286:	480e      	ldr	r0, [pc, #56]	; (b2c0 <store_file_packet+0x114>)
    b288:	4b15      	ldr	r3, [pc, #84]	; (b2e0 <store_file_packet+0x134>)
    b28a:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
    b28c:	481a      	ldr	r0, [pc, #104]	; (b2f8 <store_file_packet+0x14c>)
    b28e:	4b09      	ldr	r3, [pc, #36]	; (b2b4 <store_file_packet+0x108>)
    b290:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    b292:	2280      	movs	r2, #128	; 0x80
    b294:	0412      	lsls	r2, r2, #16
    b296:	4b19      	ldr	r3, [pc, #100]	; (b2fc <store_file_packet+0x150>)
    b298:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
    b29a:	2010      	movs	r0, #16
    b29c:	4b0e      	ldr	r3, [pc, #56]	; (b2d8 <store_file_packet+0x12c>)
    b29e:	4798      	blx	r3
			return;
    b2a0:	e79a      	b.n	b1d8 <store_file_packet+0x2c>
    b2a2:	46c0      	nop			; (mov r8, r8)
    b2a4:	20000855 	.word	0x20000855
    b2a8:	20000074 	.word	0x20000074
    b2ac:	0000f349 	.word	0x0000f349
    b2b0:	0000f34c 	.word	0x0000f34c
    b2b4:	0000c02d 	.word	0x0000c02d
    b2b8:	0000c2d7 	.word	0x0000c2d7
    b2bc:	0000c28d 	.word	0x0000c28d
    b2c0:	20000a88 	.word	0x20000a88
    b2c4:	0000b021 	.word	0x0000b021
    b2c8:	0000f36c 	.word	0x0000f36c
    b2cc:	0000bf11 	.word	0x0000bf11
    b2d0:	000080b1 	.word	0x000080b1
    b2d4:	20000eec 	.word	0x20000eec
    b2d8:	0000ad3d 	.word	0x0000ad3d
    b2dc:	00008239 	.word	0x00008239
    b2e0:	000084fd 	.word	0x000084fd
    b2e4:	0000f408 	.word	0x0000f408
    b2e8:	0000f394 	.word	0x0000f394
    b2ec:	0000f3d4 	.word	0x0000f3d4
    b2f0:	20000aac 	.word	0x20000aac
    b2f4:	0000f444 	.word	0x0000f444
    b2f8:	0000f478 	.word	0x0000f478
    b2fc:	41004400 	.word	0x41004400

0000b300 <http_client_callback>:
{
    b300:	b510      	push	{r4, lr}
    b302:	0014      	movs	r4, r2
	switch (type) {
    b304:	2904      	cmp	r1, #4
    b306:	d806      	bhi.n	b316 <http_client_callback+0x16>
    b308:	0089      	lsls	r1, r1, #2
    b30a:	4b2a      	ldr	r3, [pc, #168]	; (b3b4 <http_client_callback+0xb4>)
    b30c:	585b      	ldr	r3, [r3, r1]
    b30e:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    b310:	4829      	ldr	r0, [pc, #164]	; (b3b8 <http_client_callback+0xb8>)
    b312:	4b2a      	ldr	r3, [pc, #168]	; (b3bc <http_client_callback+0xbc>)
    b314:	4798      	blx	r3
}
    b316:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
    b318:	4829      	ldr	r0, [pc, #164]	; (b3c0 <http_client_callback+0xc0>)
    b31a:	4b28      	ldr	r3, [pc, #160]	; (b3bc <http_client_callback+0xbc>)
    b31c:	4798      	blx	r3
		add_state(GET_REQUESTED);
    b31e:	2004      	movs	r0, #4
    b320:	4b28      	ldr	r3, [pc, #160]	; (b3c4 <http_client_callback+0xc4>)
    b322:	4798      	blx	r3
		break;
    b324:	e7f7      	b.n	b316 <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
    b326:	8811      	ldrh	r1, [r2, #0]
    b328:	6852      	ldr	r2, [r2, #4]
    b32a:	4827      	ldr	r0, [pc, #156]	; (b3c8 <http_client_callback+0xc8>)
    b32c:	4b27      	ldr	r3, [pc, #156]	; (b3cc <http_client_callback+0xcc>)
    b32e:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    b330:	8823      	ldrh	r3, [r4, #0]
    b332:	2bc8      	cmp	r3, #200	; 0xc8
    b334:	d10f      	bne.n	b356 <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
    b336:	6861      	ldr	r1, [r4, #4]
    b338:	4b25      	ldr	r3, [pc, #148]	; (b3d0 <http_client_callback+0xd0>)
    b33a:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
    b33c:	2200      	movs	r2, #0
    b33e:	4b25      	ldr	r3, [pc, #148]	; (b3d4 <http_client_callback+0xd4>)
    b340:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    b342:	4b25      	ldr	r3, [pc, #148]	; (b3d8 <http_client_callback+0xd8>)
    b344:	4299      	cmp	r1, r3
    b346:	d8e6      	bhi.n	b316 <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    b348:	68a0      	ldr	r0, [r4, #8]
    b34a:	4b24      	ldr	r3, [pc, #144]	; (b3dc <http_client_callback+0xdc>)
    b34c:	4798      	blx	r3
			add_state(COMPLETED);
    b34e:	2010      	movs	r0, #16
    b350:	4b1c      	ldr	r3, [pc, #112]	; (b3c4 <http_client_callback+0xc4>)
    b352:	4798      	blx	r3
    b354:	e7df      	b.n	b316 <http_client_callback+0x16>
			add_state(CANCELED);
    b356:	2020      	movs	r0, #32
    b358:	4b1a      	ldr	r3, [pc, #104]	; (b3c4 <http_client_callback+0xc4>)
    b35a:	4798      	blx	r3
			return;
    b35c:	e7db      	b.n	b316 <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    b35e:	6811      	ldr	r1, [r2, #0]
    b360:	6850      	ldr	r0, [r2, #4]
    b362:	4b1e      	ldr	r3, [pc, #120]	; (b3dc <http_client_callback+0xdc>)
    b364:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
    b366:	7a23      	ldrb	r3, [r4, #8]
    b368:	2b00      	cmp	r3, #0
    b36a:	d0d4      	beq.n	b316 <http_client_callback+0x16>
			add_state(COMPLETED);
    b36c:	2010      	movs	r0, #16
    b36e:	4b15      	ldr	r3, [pc, #84]	; (b3c4 <http_client_callback+0xc4>)
    b370:	4798      	blx	r3
    b372:	e7d0      	b.n	b316 <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    b374:	6811      	ldr	r1, [r2, #0]
    b376:	481a      	ldr	r0, [pc, #104]	; (b3e0 <http_client_callback+0xe0>)
    b378:	4b14      	ldr	r3, [pc, #80]	; (b3cc <http_client_callback+0xcc>)
    b37a:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    b37c:	6823      	ldr	r3, [r4, #0]
    b37e:	330b      	adds	r3, #11
    b380:	d1c9      	bne.n	b316 <http_client_callback+0x16>
	return ((down_state & mask) != 0);
    b382:	4b18      	ldr	r3, [pc, #96]	; (b3e4 <http_client_callback+0xe4>)
    b384:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    b386:	071b      	lsls	r3, r3, #28
    b388:	d406      	bmi.n	b398 <http_client_callback+0x98>
	return ((down_state & mask) != 0);
    b38a:	4b16      	ldr	r3, [pc, #88]	; (b3e4 <http_client_callback+0xe4>)
    b38c:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    b38e:	075a      	lsls	r2, r3, #29
    b390:	d40b      	bmi.n	b3aa <http_client_callback+0xaa>
			start_download();
    b392:	4b15      	ldr	r3, [pc, #84]	; (b3e8 <http_client_callback+0xe8>)
    b394:	4798      	blx	r3
    b396:	e7be      	b.n	b316 <http_client_callback+0x16>
				f_close(&file_object);
    b398:	4814      	ldr	r0, [pc, #80]	; (b3ec <http_client_callback+0xec>)
    b39a:	4b15      	ldr	r3, [pc, #84]	; (b3f0 <http_client_callback+0xf0>)
    b39c:	4798      	blx	r3
	down_state &= ~mask;
    b39e:	4a11      	ldr	r2, [pc, #68]	; (b3e4 <http_client_callback+0xe4>)
    b3a0:	7813      	ldrb	r3, [r2, #0]
    b3a2:	2108      	movs	r1, #8
    b3a4:	438b      	bics	r3, r1
    b3a6:	7013      	strb	r3, [r2, #0]
    b3a8:	e7ef      	b.n	b38a <http_client_callback+0x8a>
    b3aa:	2204      	movs	r2, #4
    b3ac:	4393      	bics	r3, r2
    b3ae:	4a0d      	ldr	r2, [pc, #52]	; (b3e4 <http_client_callback+0xe4>)
    b3b0:	7013      	strb	r3, [r2, #0]
    b3b2:	e7ee      	b.n	b392 <http_client_callback+0x92>
    b3b4:	0000ecbc 	.word	0x0000ecbc
    b3b8:	0000ed14 	.word	0x0000ed14
    b3bc:	0000c02d 	.word	0x0000c02d
    b3c0:	0000ed4c 	.word	0x0000ed4c
    b3c4:	0000ad3d 	.word	0x0000ad3d
    b3c8:	0000ed78 	.word	0x0000ed78
    b3cc:	0000bf11 	.word	0x0000bf11
    b3d0:	20000aac 	.word	0x20000aac
    b3d4:	20000eec 	.word	0x20000eec
    b3d8:	000005a6 	.word	0x000005a6
    b3dc:	0000b1ad 	.word	0x0000b1ad
    b3e0:	0000edb4 	.word	0x0000edb4
    b3e4:	20000855 	.word	0x20000855
    b3e8:	0000ae75 	.word	0x0000ae75
    b3ec:	20000a88 	.word	0x20000a88
    b3f0:	000084fd 	.word	0x000084fd

0000b3f4 <wifi_cb>:
{
    b3f4:	b510      	push	{r4, lr}
    b3f6:	b082      	sub	sp, #8
	switch (u8MsgType) {
    b3f8:	282c      	cmp	r0, #44	; 0x2c
    b3fa:	d003      	beq.n	b404 <wifi_cb+0x10>
    b3fc:	2832      	cmp	r0, #50	; 0x32
    b3fe:	d035      	beq.n	b46c <wifi_cb+0x78>
}
    b400:	b002      	add	sp, #8
    b402:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    b404:	780b      	ldrb	r3, [r1, #0]
    b406:	2b01      	cmp	r3, #1
    b408:	d01c      	beq.n	b444 <wifi_cb+0x50>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    b40a:	2b00      	cmp	r3, #0
    b40c:	d1f8      	bne.n	b400 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    b40e:	4826      	ldr	r0, [pc, #152]	; (b4a8 <wifi_cb+0xb4>)
    b410:	4b26      	ldr	r3, [pc, #152]	; (b4ac <wifi_cb+0xb8>)
    b412:	4798      	blx	r3
	down_state &= ~mask;
    b414:	4a26      	ldr	r2, [pc, #152]	; (b4b0 <wifi_cb+0xbc>)
    b416:	7813      	ldrb	r3, [r2, #0]
    b418:	2102      	movs	r1, #2
    b41a:	438b      	bics	r3, r1
    b41c:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
    b41e:	071b      	lsls	r3, r3, #28
    b420:	d416      	bmi.n	b450 <wifi_cb+0x5c>
	return ((down_state & mask) != 0);
    b422:	4b23      	ldr	r3, [pc, #140]	; (b4b0 <wifi_cb+0xbc>)
    b424:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    b426:	075a      	lsls	r2, r3, #29
    b428:	d41b      	bmi.n	b462 <wifi_cb+0x6e>
			mqtt_disconnect(&mqtt_inst, 1);
    b42a:	2101      	movs	r1, #1
    b42c:	4821      	ldr	r0, [pc, #132]	; (b4b4 <wifi_cb+0xc0>)
    b42e:	4b22      	ldr	r3, [pc, #136]	; (b4b8 <wifi_cb+0xc4>)
    b430:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    b432:	23ff      	movs	r3, #255	; 0xff
    b434:	9300      	str	r3, [sp, #0]
    b436:	4b21      	ldr	r3, [pc, #132]	; (b4bc <wifi_cb+0xc8>)
    b438:	2202      	movs	r2, #2
    b43a:	210b      	movs	r1, #11
    b43c:	4820      	ldr	r0, [pc, #128]	; (b4c0 <wifi_cb+0xcc>)
    b43e:	4c21      	ldr	r4, [pc, #132]	; (b4c4 <wifi_cb+0xd0>)
    b440:	47a0      	blx	r4
    b442:	e7dd      	b.n	b400 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    b444:	4820      	ldr	r0, [pc, #128]	; (b4c8 <wifi_cb+0xd4>)
    b446:	4b19      	ldr	r3, [pc, #100]	; (b4ac <wifi_cb+0xb8>)
    b448:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    b44a:	4b20      	ldr	r3, [pc, #128]	; (b4cc <wifi_cb+0xd8>)
    b44c:	4798      	blx	r3
    b44e:	e7d7      	b.n	b400 <wifi_cb+0xc>
				f_close(&file_object);
    b450:	481f      	ldr	r0, [pc, #124]	; (b4d0 <wifi_cb+0xdc>)
    b452:	4b20      	ldr	r3, [pc, #128]	; (b4d4 <wifi_cb+0xe0>)
    b454:	4798      	blx	r3
	down_state &= ~mask;
    b456:	4a16      	ldr	r2, [pc, #88]	; (b4b0 <wifi_cb+0xbc>)
    b458:	7813      	ldrb	r3, [r2, #0]
    b45a:	2108      	movs	r1, #8
    b45c:	438b      	bics	r3, r1
    b45e:	7013      	strb	r3, [r2, #0]
    b460:	e7df      	b.n	b422 <wifi_cb+0x2e>
    b462:	2204      	movs	r2, #4
    b464:	4393      	bics	r3, r2
    b466:	4a12      	ldr	r2, [pc, #72]	; (b4b0 <wifi_cb+0xbc>)
    b468:	7013      	strb	r3, [r2, #0]
    b46a:	e7de      	b.n	b42a <wifi_cb+0x36>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    b46c:	788b      	ldrb	r3, [r1, #2]
    b46e:	784a      	ldrb	r2, [r1, #1]
    b470:	7808      	ldrb	r0, [r1, #0]
    b472:	78c9      	ldrb	r1, [r1, #3]
    b474:	9100      	str	r1, [sp, #0]
    b476:	0001      	movs	r1, r0
    b478:	4817      	ldr	r0, [pc, #92]	; (b4d8 <wifi_cb+0xe4>)
    b47a:	4c18      	ldr	r4, [pc, #96]	; (b4dc <wifi_cb+0xe8>)
    b47c:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
    b47e:	2002      	movs	r0, #2
    b480:	4b17      	ldr	r3, [pc, #92]	; (b4e0 <wifi_cb+0xec>)
    b482:	4798      	blx	r3
		if(do_download_flag == 1)
    b484:	4b17      	ldr	r3, [pc, #92]	; (b4e4 <wifi_cb+0xf0>)
    b486:	781b      	ldrb	r3, [r3, #0]
    b488:	2b01      	cmp	r3, #1
    b48a:	d009      	beq.n	b4a0 <wifi_cb+0xac>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
    b48c:	4916      	ldr	r1, [pc, #88]	; (b4e8 <wifi_cb+0xf4>)
    b48e:	4809      	ldr	r0, [pc, #36]	; (b4b4 <wifi_cb+0xc0>)
    b490:	4b16      	ldr	r3, [pc, #88]	; (b4ec <wifi_cb+0xf8>)
    b492:	4798      	blx	r3
    b494:	2800      	cmp	r0, #0
    b496:	d0b3      	beq.n	b400 <wifi_cb+0xc>
			printf("Error connecting to MQTT Broker!\r\n");
    b498:	4815      	ldr	r0, [pc, #84]	; (b4f0 <wifi_cb+0xfc>)
    b49a:	4b04      	ldr	r3, [pc, #16]	; (b4ac <wifi_cb+0xb8>)
    b49c:	4798      	blx	r3
}
    b49e:	e7af      	b.n	b400 <wifi_cb+0xc>
			start_download();
    b4a0:	4b14      	ldr	r3, [pc, #80]	; (b4f4 <wifi_cb+0x100>)
    b4a2:	4798      	blx	r3
    b4a4:	e7ac      	b.n	b400 <wifi_cb+0xc>
    b4a6:	46c0      	nop			; (mov r8, r8)
    b4a8:	0000f4cc 	.word	0x0000f4cc
    b4ac:	0000c02d 	.word	0x0000c02d
    b4b0:	20000855 	.word	0x20000855
    b4b4:	20000ab4 	.word	0x20000ab4
    b4b8:	0000920d 	.word	0x0000920d
    b4bc:	0000f4ec 	.word	0x0000f4ec
    b4c0:	0000f4f8 	.word	0x0000f4f8
    b4c4:	0000266d 	.word	0x0000266d
    b4c8:	0000f4ac 	.word	0x0000f4ac
    b4cc:	00002689 	.word	0x00002689
    b4d0:	20000a88 	.word	0x20000a88
    b4d4:	000084fd 	.word	0x000084fd
    b4d8:	0000f504 	.word	0x0000f504
    b4dc:	0000bf11 	.word	0x0000bf11
    b4e0:	0000ad3d 	.word	0x0000ad3d
    b4e4:	20000854 	.word	0x20000854
    b4e8:	0000f0ec 	.word	0x0000f0ec
    b4ec:	00009149 	.word	0x00009149
    b4f0:	0000f52c 	.word	0x0000f52c
    b4f4:	0000ae75 	.word	0x0000ae75

0000b4f8 <configure_extint_channel>:
{
    b4f8:	b510      	push	{r4, lr}
    b4fa:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
    b4fc:	ac01      	add	r4, sp, #4
    b4fe:	0020      	movs	r0, r4
    b500:	4b07      	ldr	r3, [pc, #28]	; (b520 <configure_extint_channel+0x28>)
    b502:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
    b504:	2337      	movs	r3, #55	; 0x37
    b506:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    b508:	2300      	movs	r3, #0
    b50a:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    b50c:	3301      	adds	r3, #1
    b50e:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b510:	3301      	adds	r3, #1
    b512:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    b514:	0021      	movs	r1, r4
    b516:	2007      	movs	r0, #7
    b518:	4b02      	ldr	r3, [pc, #8]	; (b524 <configure_extint_channel+0x2c>)
    b51a:	4798      	blx	r3
}
    b51c:	b004      	add	sp, #16
    b51e:	bd10      	pop	{r4, pc}
    b520:	00004745 	.word	0x00004745
    b524:	00004759 	.word	0x00004759

0000b528 <configure_extint_callbacks>:
{
    b528:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
    b52a:	2200      	movs	r2, #0
    b52c:	2107      	movs	r1, #7
    b52e:	4804      	ldr	r0, [pc, #16]	; (b540 <configure_extint_callbacks+0x18>)
    b530:	4b04      	ldr	r3, [pc, #16]	; (b544 <configure_extint_callbacks+0x1c>)
    b532:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
    b534:	2100      	movs	r1, #0
    b536:	2007      	movs	r0, #7
    b538:	4b03      	ldr	r3, [pc, #12]	; (b548 <configure_extint_callbacks+0x20>)
    b53a:	4798      	blx	r3
}
    b53c:	bd10      	pop	{r4, pc}
    b53e:	46c0      	nop			; (mov r8, r8)
    b540:	0000add5 	.word	0x0000add5
    b544:	00004601 	.word	0x00004601
    b548:	0000462d 	.word	0x0000462d

0000b54c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    b54c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b54e:	b099      	sub	sp, #100	; 0x64
	down_state = NOT_READY;
    b550:	2400      	movs	r4, #0
    b552:	2600      	movs	r6, #0
    b554:	4bbb      	ldr	r3, [pc, #748]	; (b844 <main+0x2f8>)
    b556:	701c      	strb	r4, [r3, #0]
	tstrWifiInitParam param;
	int8_t ret;
	init_state();

	/* Initialize the board. */
	system_init();
    b558:	4bbb      	ldr	r3, [pc, #748]	; (b848 <main+0x2fc>)
    b55a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    b55c:	aa02      	add	r2, sp, #8
    b55e:	2380      	movs	r3, #128	; 0x80
    b560:	05db      	lsls	r3, r3, #23
    b562:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    b564:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    b566:	23ff      	movs	r3, #255	; 0xff
    b568:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    b56a:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    b56c:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    b56e:	2501      	movs	r5, #1
    b570:	3bdb      	subs	r3, #219	; 0xdb
    b572:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    b574:	3301      	adds	r3, #1
    b576:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    b578:	3301      	adds	r3, #1
    b57a:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    b57c:	3301      	adds	r3, #1
    b57e:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    b580:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    b582:	3305      	adds	r3, #5
    b584:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    b586:	3301      	adds	r3, #1
    b588:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    b58a:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    b58c:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    b58e:	2300      	movs	r3, #0
    b590:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    b592:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    b594:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    b596:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    b598:	2313      	movs	r3, #19
    b59a:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    b59c:	7756      	strb	r6, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    b59e:	23c4      	movs	r3, #196	; 0xc4
    b5a0:	039b      	lsls	r3, r3, #14
    b5a2:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    b5a4:	2301      	movs	r3, #1
    b5a6:	425b      	negs	r3, r3
    b5a8:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    b5aa:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    b5ac:	4ba7      	ldr	r3, [pc, #668]	; (b84c <main+0x300>)
    b5ae:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    b5b0:	4ba7      	ldr	r3, [pc, #668]	; (b850 <main+0x304>)
    b5b2:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    b5b4:	23e1      	movs	r3, #225	; 0xe1
    b5b6:	025b      	lsls	r3, r3, #9
    b5b8:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    b5ba:	4ca6      	ldr	r4, [pc, #664]	; (b854 <main+0x308>)
    b5bc:	4ba6      	ldr	r3, [pc, #664]	; (b858 <main+0x30c>)
    b5be:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    b5c0:	49a6      	ldr	r1, [pc, #664]	; (b85c <main+0x310>)
    b5c2:	4ba7      	ldr	r3, [pc, #668]	; (b860 <main+0x314>)
    b5c4:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    b5c6:	49a7      	ldr	r1, [pc, #668]	; (b864 <main+0x318>)
    b5c8:	4ba7      	ldr	r3, [pc, #668]	; (b868 <main+0x31c>)
    b5ca:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    b5cc:	49a7      	ldr	r1, [pc, #668]	; (b86c <main+0x320>)
    b5ce:	0020      	movs	r0, r4
    b5d0:	4ba7      	ldr	r3, [pc, #668]	; (b870 <main+0x324>)
    b5d2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    b5d4:	4fa7      	ldr	r7, [pc, #668]	; (b874 <main+0x328>)
    b5d6:	683b      	ldr	r3, [r7, #0]
    b5d8:	6898      	ldr	r0, [r3, #8]
    b5da:	2100      	movs	r1, #0
    b5dc:	4ea6      	ldr	r6, [pc, #664]	; (b878 <main+0x32c>)
    b5de:	47b0      	blx	r6
	setbuf(stdin, NULL);
    b5e0:	683b      	ldr	r3, [r7, #0]
    b5e2:	6858      	ldr	r0, [r3, #4]
    b5e4:	2100      	movs	r1, #0
    b5e6:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b5e8:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b5ea:	0030      	movs	r0, r6
    b5ec:	4ba3      	ldr	r3, [pc, #652]	; (b87c <main+0x330>)
    b5ee:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b5f0:	231f      	movs	r3, #31
    b5f2:	4018      	ands	r0, r3
    b5f4:	4085      	lsls	r5, r0
    b5f6:	4ba2      	ldr	r3, [pc, #648]	; (b880 <main+0x334>)
    b5f8:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b5fa:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    b5fc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    b5fe:	2a00      	cmp	r2, #0
    b600:	d1fc      	bne.n	b5fc <main+0xb0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b602:	6833      	ldr	r3, [r6, #0]
    b604:	3202      	adds	r2, #2
    b606:	4313      	orrs	r3, r2
    b608:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
    b60a:	489e      	ldr	r0, [pc, #632]	; (b884 <main+0x338>)
    b60c:	4c9e      	ldr	r4, [pc, #632]	; (b888 <main+0x33c>)
    b60e:	47a0      	blx	r4
	printf("\r\nThis example requires the AP to have internet access.\r\n\r\n");
    b610:	489e      	ldr	r0, [pc, #632]	; (b88c <main+0x340>)
    b612:	47a0      	blx	r4
	sw_timer_get_config_defaults(&swt_conf);
    b614:	a802      	add	r0, sp, #8
    b616:	4b9e      	ldr	r3, [pc, #632]	; (b890 <main+0x344>)
    b618:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    b61a:	4c9e      	ldr	r4, [pc, #632]	; (b894 <main+0x348>)
    b61c:	a902      	add	r1, sp, #8
    b61e:	0020      	movs	r0, r4
    b620:	4b9d      	ldr	r3, [pc, #628]	; (b898 <main+0x34c>)
    b622:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    b624:	0020      	movs	r0, r4
    b626:	4b9d      	ldr	r3, [pc, #628]	; (b89c <main+0x350>)
    b628:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
    b62a:	a802      	add	r0, sp, #8
    b62c:	4b9c      	ldr	r3, [pc, #624]	; (b8a0 <main+0x354>)
    b62e:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    b630:	4b9c      	ldr	r3, [pc, #624]	; (b8a4 <main+0x358>)
    b632:	9306      	str	r3, [sp, #24]
	httpc_conf.timer_inst = &swt_module_inst;
    b634:	9403      	str	r4, [sp, #12]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    b636:	a902      	add	r1, sp, #8
    b638:	489b      	ldr	r0, [pc, #620]	; (b8a8 <main+0x35c>)
    b63a:	4b9c      	ldr	r3, [pc, #624]	; (b8ac <main+0x360>)
    b63c:	4798      	blx	r3
    b63e:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    b640:	db23      	blt.n	b68a <main+0x13e>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    b642:	499b      	ldr	r1, [pc, #620]	; (b8b0 <main+0x364>)
    b644:	4898      	ldr	r0, [pc, #608]	; (b8a8 <main+0x35c>)
    b646:	4b9b      	ldr	r3, [pc, #620]	; (b8b4 <main+0x368>)
    b648:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
    b64a:	ac02      	add	r4, sp, #8
    b64c:	0020      	movs	r0, r4
    b64e:	4b9a      	ldr	r3, [pc, #616]	; (b8b8 <main+0x36c>)
    b650:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
    b652:	4b9a      	ldr	r3, [pc, #616]	; (b8bc <main+0x370>)
    b654:	60a3      	str	r3, [r4, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    b656:	2380      	movs	r3, #128	; 0x80
    b658:	009b      	lsls	r3, r3, #2
    b65a:	60e3      	str	r3, [r4, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
    b65c:	4a98      	ldr	r2, [pc, #608]	; (b8c0 <main+0x374>)
    b65e:	6122      	str	r2, [r4, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    b660:	6163      	str	r3, [r4, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
    b662:	4b98      	ldr	r3, [pc, #608]	; (b8c4 <main+0x378>)
    b664:	8023      	strh	r3, [r4, #0]
	mqtt_conf.keep_alive = 6000;
    b666:	4b98      	ldr	r3, [pc, #608]	; (b8c8 <main+0x37c>)
    b668:	80a3      	strh	r3, [r4, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    b66a:	0021      	movs	r1, r4
    b66c:	4897      	ldr	r0, [pc, #604]	; (b8cc <main+0x380>)
    b66e:	4b98      	ldr	r3, [pc, #608]	; (b8d0 <main+0x384>)
    b670:	4798      	blx	r3
    b672:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    b674:	db0d      	blt.n	b692 <main+0x146>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    b676:	4997      	ldr	r1, [pc, #604]	; (b8d4 <main+0x388>)
    b678:	4894      	ldr	r0, [pc, #592]	; (b8cc <main+0x380>)
    b67a:	4b97      	ldr	r3, [pc, #604]	; (b8d8 <main+0x38c>)
    b67c:	4798      	blx	r3
    b67e:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    b680:	da0b      	bge.n	b69a <main+0x14e>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    b682:	4896      	ldr	r0, [pc, #600]	; (b8dc <main+0x390>)
    b684:	4b96      	ldr	r3, [pc, #600]	; (b8e0 <main+0x394>)
    b686:	4798      	blx	r3
    b688:	e7fe      	b.n	b688 <main+0x13c>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    b68a:	4896      	ldr	r0, [pc, #600]	; (b8e4 <main+0x398>)
    b68c:	4b94      	ldr	r3, [pc, #592]	; (b8e0 <main+0x394>)
    b68e:	4798      	blx	r3
    b690:	e7fe      	b.n	b690 <main+0x144>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    b692:	4895      	ldr	r0, [pc, #596]	; (b8e8 <main+0x39c>)
    b694:	4b92      	ldr	r3, [pc, #584]	; (b8e0 <main+0x394>)
    b696:	4798      	blx	r3
    b698:	e7fe      	b.n	b698 <main+0x14c>

	/* Initialize the MQTT service. */
	configure_mqtt();

	/* Initialize the BSP. */
	nm_bsp_init();
    b69a:	4b94      	ldr	r3, [pc, #592]	; (b8ec <main+0x3a0>)
    b69c:	4798      	blx	r3
	sd_mmc_init();
    b69e:	4b94      	ldr	r3, [pc, #592]	; (b8f0 <main+0x3a4>)
    b6a0:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");
    b6a2:	4894      	ldr	r0, [pc, #592]	; (b8f4 <main+0x3a8>)
    b6a4:	4b78      	ldr	r3, [pc, #480]	; (b888 <main+0x33c>)
    b6a6:	4798      	blx	r3
			status = sd_mmc_test_unit_ready(0);
    b6a8:	4d93      	ldr	r5, [pc, #588]	; (b8f8 <main+0x3ac>)
				printf("init_storage: SD Card install failed.\r\n");
    b6aa:	4c77      	ldr	r4, [pc, #476]	; (b888 <main+0x33c>)
    b6ac:	e008      	b.n	b6c0 <main+0x174>
    b6ae:	4893      	ldr	r0, [pc, #588]	; (b8fc <main+0x3b0>)
    b6b0:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
    b6b2:	4893      	ldr	r0, [pc, #588]	; (b900 <main+0x3b4>)
    b6b4:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    b6b6:	4e93      	ldr	r6, [pc, #588]	; (b904 <main+0x3b8>)
    b6b8:	2000      	movs	r0, #0
    b6ba:	47b0      	blx	r6
    b6bc:	2802      	cmp	r0, #2
    b6be:	d1fb      	bne.n	b6b8 <main+0x16c>
			status = sd_mmc_test_unit_ready(0);
    b6c0:	2000      	movs	r0, #0
    b6c2:	47a8      	blx	r5
			if (CTRL_FAIL == status) {
    b6c4:	2801      	cmp	r0, #1
    b6c6:	d0f2      	beq.n	b6ae <main+0x162>
		} while (CTRL_GOOD != status);
    b6c8:	2800      	cmp	r0, #0
    b6ca:	d1f9      	bne.n	b6c0 <main+0x174>
		printf("init_storage: mounting SD card...\r\n");
    b6cc:	488e      	ldr	r0, [pc, #568]	; (b908 <main+0x3bc>)
    b6ce:	4b6e      	ldr	r3, [pc, #440]	; (b888 <main+0x33c>)
    b6d0:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
    b6d2:	4c8e      	ldr	r4, [pc, #568]	; (b90c <main+0x3c0>)
    b6d4:	228c      	movs	r2, #140	; 0x8c
    b6d6:	0092      	lsls	r2, r2, #2
    b6d8:	2100      	movs	r1, #0
    b6da:	0020      	movs	r0, r4
    b6dc:	4b8c      	ldr	r3, [pc, #560]	; (b910 <main+0x3c4>)
    b6de:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    b6e0:	0021      	movs	r1, r4
    b6e2:	2000      	movs	r0, #0
    b6e4:	4b8b      	ldr	r3, [pc, #556]	; (b914 <main+0x3c8>)
    b6e6:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    b6e8:	280b      	cmp	r0, #11
    b6ea:	d117      	bne.n	b71c <main+0x1d0>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
    b6ec:	210b      	movs	r1, #11
    b6ee:	488a      	ldr	r0, [pc, #552]	; (b918 <main+0x3cc>)
    b6f0:	4b7b      	ldr	r3, [pc, #492]	; (b8e0 <main+0x394>)
    b6f2:	4798      	blx	r3

	/* Initialize SD/MMC storage. */
	init_storage();

	/*Initialize BUTTON 0 as an external interrupt*/
	configure_extint_channel();
    b6f4:	4b89      	ldr	r3, [pc, #548]	; (b91c <main+0x3d0>)
    b6f6:	4798      	blx	r3
	configure_extint_callbacks();
    b6f8:	4b89      	ldr	r3, [pc, #548]	; (b920 <main+0x3d4>)
    b6fa:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    b6fc:	2218      	movs	r2, #24
    b6fe:	2100      	movs	r1, #0
    b700:	a812      	add	r0, sp, #72	; 0x48
    b702:	4b83      	ldr	r3, [pc, #524]	; (b910 <main+0x3c4>)
    b704:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    b706:	4b87      	ldr	r3, [pc, #540]	; (b924 <main+0x3d8>)
    b708:	9312      	str	r3, [sp, #72]	; 0x48
	ret = m2m_wifi_init(&param);
    b70a:	a812      	add	r0, sp, #72	; 0x48
    b70c:	4b86      	ldr	r3, [pc, #536]	; (b928 <main+0x3dc>)
    b70e:	4798      	blx	r3
    b710:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    b712:	d00a      	beq.n	b72a <main+0x1de>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    b714:	4885      	ldr	r0, [pc, #532]	; (b92c <main+0x3e0>)
    b716:	4b72      	ldr	r3, [pc, #456]	; (b8e0 <main+0x394>)
    b718:	4798      	blx	r3
    b71a:	e7fe      	b.n	b71a <main+0x1ce>
		printf("init_storage: SD card mount OK.\r\n");
    b71c:	4884      	ldr	r0, [pc, #528]	; (b930 <main+0x3e4>)
    b71e:	4b5a      	ldr	r3, [pc, #360]	; (b888 <main+0x33c>)
    b720:	4798      	blx	r3
		add_state(STORAGE_READY);
    b722:	2001      	movs	r0, #1
    b724:	4b83      	ldr	r3, [pc, #524]	; (b934 <main+0x3e8>)
    b726:	4798      	blx	r3
    b728:	e7e4      	b.n	b6f4 <main+0x1a8>
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    b72a:	2000      	movs	r0, #0
    b72c:	4b82      	ldr	r3, [pc, #520]	; (b938 <main+0x3ec>)
    b72e:	4798      	blx	r3
    b730:	4b82      	ldr	r3, [pc, #520]	; (b93c <main+0x3f0>)
    b732:	7a1b      	ldrb	r3, [r3, #8]
    b734:	b2db      	uxtb	r3, r3
    b736:	40d8      	lsrs	r0, r3
		while (1) {
				}
		}

	if (SysTick_Config(system_cpu_clock_get_hz() / 1000)) 
    b738:	21fa      	movs	r1, #250	; 0xfa
    b73a:	0089      	lsls	r1, r1, #2
    b73c:	4b80      	ldr	r3, [pc, #512]	; (b940 <main+0x3f4>)
    b73e:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    b740:	3801      	subs	r0, #1
    b742:	4b80      	ldr	r3, [pc, #512]	; (b944 <main+0x3f8>)
    b744:	4298      	cmp	r0, r3
    b746:	d878      	bhi.n	b83a <main+0x2ee>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    b748:	4a7f      	ldr	r2, [pc, #508]	; (b948 <main+0x3fc>)
    b74a:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    b74c:	487f      	ldr	r0, [pc, #508]	; (b94c <main+0x400>)
    b74e:	6a03      	ldr	r3, [r0, #32]
    b750:	021b      	lsls	r3, r3, #8
    b752:	0a1b      	lsrs	r3, r3, #8
    b754:	21c0      	movs	r1, #192	; 0xc0
    b756:	0609      	lsls	r1, r1, #24
    b758:	430b      	orrs	r3, r1
    b75a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    b75c:	2300      	movs	r3, #0
    b75e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    b760:	3307      	adds	r3, #7
    b762:	6013      	str	r3, [r2, #0]
		puts("ERR>> Systick configuration error\r\n");
		while (1);
	}

	//DOWNLOAD A FILE
	do_download_flag = true;
    b764:	2201      	movs	r2, #1
    b766:	4b7a      	ldr	r3, [pc, #488]	; (b950 <main+0x404>)
    b768:	701a      	strb	r2, [r3, #0]

	/* Initialize socket module. */
	socketInit();
    b76a:	4b7a      	ldr	r3, [pc, #488]	; (b954 <main+0x408>)
    b76c:	4798      	blx	r3
	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
    b76e:	497a      	ldr	r1, [pc, #488]	; (b958 <main+0x40c>)
    b770:	487a      	ldr	r0, [pc, #488]	; (b95c <main+0x410>)
    b772:	4b7b      	ldr	r3, [pc, #492]	; (b960 <main+0x414>)
    b774:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    b776:	4c7b      	ldr	r4, [pc, #492]	; (b964 <main+0x418>)
    b778:	0021      	movs	r1, r4
    b77a:	487b      	ldr	r0, [pc, #492]	; (b968 <main+0x41c>)
    b77c:	4b58      	ldr	r3, [pc, #352]	; (b8e0 <main+0x394>)
    b77e:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    b780:	23ff      	movs	r3, #255	; 0xff
    b782:	9300      	str	r3, [sp, #0]
    b784:	4b79      	ldr	r3, [pc, #484]	; (b96c <main+0x420>)
    b786:	2202      	movs	r2, #2
    b788:	210b      	movs	r1, #11
    b78a:	0020      	movs	r0, r4
    b78c:	4c78      	ldr	r4, [pc, #480]	; (b970 <main+0x424>)
    b78e:	47a0      	blx	r4
	return ((down_state & mask) != 0);
    b790:	4b2c      	ldr	r3, [pc, #176]	; (b844 <main+0x2f8>)

	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    b792:	781b      	ldrb	r3, [r3, #0]
    b794:	2230      	movs	r2, #48	; 0x30
    b796:	421a      	tst	r2, r3
    b798:	d01f      	beq.n	b7da <main+0x28e>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
	}
	printf("main: please unplug the SD/MMC card.\r\n");
    b79a:	4876      	ldr	r0, [pc, #472]	; (b974 <main+0x428>)
    b79c:	4c3a      	ldr	r4, [pc, #232]	; (b888 <main+0x33c>)
    b79e:	47a0      	blx	r4
	printf("main: done.\r\n");
    b7a0:	4875      	ldr	r0, [pc, #468]	; (b978 <main+0x42c>)
    b7a2:	47a0      	blx	r4


	//Disable socket for HTTP Transfer
	socketDeinit();
    b7a4:	4b75      	ldr	r3, [pc, #468]	; (b97c <main+0x430>)
    b7a6:	4798      	blx	r3


	delay_s(1);
    b7a8:	20fa      	movs	r0, #250	; 0xfa
    b7aa:	0080      	lsls	r0, r0, #2
    b7ac:	4b74      	ldr	r3, [pc, #464]	; (b980 <main+0x434>)
    b7ae:	4798      	blx	r3
	//CONNECT TO MQTT BROKER

	do_download_flag = false;
    b7b0:	2200      	movs	r2, #0
    b7b2:	4b67      	ldr	r3, [pc, #412]	; (b950 <main+0x404>)
    b7b4:	701a      	strb	r2, [r3, #0]

	//Re-enable socket for MQTT Transfer
	socketInit();
    b7b6:	4b67      	ldr	r3, [pc, #412]	; (b954 <main+0x408>)
    b7b8:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    b7ba:	4972      	ldr	r1, [pc, #456]	; (b984 <main+0x438>)
    b7bc:	4872      	ldr	r0, [pc, #456]	; (b988 <main+0x43c>)
    b7be:	4b68      	ldr	r3, [pc, #416]	; (b960 <main+0x414>)
    b7c0:	4798      	blx	r3

		/* Connect to router. */
	
	if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
    b7c2:	4972      	ldr	r1, [pc, #456]	; (b98c <main+0x440>)
    b7c4:	4841      	ldr	r0, [pc, #260]	; (b8cc <main+0x380>)
    b7c6:	4b72      	ldr	r3, [pc, #456]	; (b990 <main+0x444>)
    b7c8:	4798      	blx	r3
    b7ca:	2800      	cmp	r0, #0
    b7cc:	d002      	beq.n	b7d4 <main+0x288>
	{
		printf("Error connecting to MQTT Broker!\r\n");
    b7ce:	4871      	ldr	r0, [pc, #452]	; (b994 <main+0x448>)
    b7d0:	4b2d      	ldr	r3, [pc, #180]	; (b888 <main+0x33c>)
    b7d2:	4798      	blx	r3
	}
	
	while (1) {

	/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    b7d4:	4e70      	ldr	r6, [pc, #448]	; (b998 <main+0x44c>)
		sw_timer_task(&swt_module_inst);
    b7d6:	4d71      	ldr	r5, [pc, #452]	; (b99c <main+0x450>)
    b7d8:	e011      	b.n	b7fe <main+0x2b2>
		m2m_wifi_handle_events(NULL);
    b7da:	4e6f      	ldr	r6, [pc, #444]	; (b998 <main+0x44c>)
		sw_timer_task(&swt_module_inst);
    b7dc:	4d2d      	ldr	r5, [pc, #180]	; (b894 <main+0x348>)
    b7de:	4c6f      	ldr	r4, [pc, #444]	; (b99c <main+0x450>)
		m2m_wifi_handle_events(NULL);
    b7e0:	2000      	movs	r0, #0
    b7e2:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    b7e4:	0028      	movs	r0, r5
    b7e6:	47a0      	blx	r4
	return ((down_state & mask) != 0);
    b7e8:	4b16      	ldr	r3, [pc, #88]	; (b844 <main+0x2f8>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    b7ea:	781b      	ldrb	r3, [r3, #0]
    b7ec:	2230      	movs	r2, #48	; 0x30
    b7ee:	421a      	tst	r2, r3
    b7f0:	d0f6      	beq.n	b7e0 <main+0x294>
    b7f2:	e7d2      	b.n	b79a <main+0x24e>
			mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
			isPressed = false;
		}

		//Handle MQTT messages
			if(mqtt_inst.isConnected)
    b7f4:	2334      	movs	r3, #52	; 0x34
    b7f6:	4a35      	ldr	r2, [pc, #212]	; (b8cc <main+0x380>)
    b7f8:	5cd3      	ldrb	r3, [r2, r3]
    b7fa:	2b00      	cmp	r3, #0
    b7fc:	d118      	bne.n	b830 <main+0x2e4>
		m2m_wifi_handle_events(NULL);
    b7fe:	2000      	movs	r0, #0
    b800:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    b802:	4824      	ldr	r0, [pc, #144]	; (b894 <main+0x348>)
    b804:	47a8      	blx	r5
		if(isPressed)
    b806:	4b66      	ldr	r3, [pc, #408]	; (b9a0 <main+0x454>)
    b808:	781b      	ldrb	r3, [r3, #0]
    b80a:	2b00      	cmp	r3, #0
    b80c:	d0f2      	beq.n	b7f4 <main+0x2a8>
			mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
    b80e:	4f65      	ldr	r7, [pc, #404]	; (b9a4 <main+0x458>)
    b810:	0038      	movs	r0, r7
    b812:	4b65      	ldr	r3, [pc, #404]	; (b9a8 <main+0x45c>)
    b814:	4798      	blx	r3
    b816:	0003      	movs	r3, r0
    b818:	2400      	movs	r4, #0
    b81a:	9401      	str	r4, [sp, #4]
    b81c:	2202      	movs	r2, #2
    b81e:	9200      	str	r2, [sp, #0]
    b820:	003a      	movs	r2, r7
    b822:	4962      	ldr	r1, [pc, #392]	; (b9ac <main+0x460>)
    b824:	4829      	ldr	r0, [pc, #164]	; (b8cc <main+0x380>)
    b826:	4f62      	ldr	r7, [pc, #392]	; (b9b0 <main+0x464>)
    b828:	47b8      	blx	r7
			isPressed = false;
    b82a:	4b5d      	ldr	r3, [pc, #372]	; (b9a0 <main+0x454>)
    b82c:	701c      	strb	r4, [r3, #0]
    b82e:	e7e1      	b.n	b7f4 <main+0x2a8>
			mqtt_yield(&mqtt_inst, 100);
    b830:	2164      	movs	r1, #100	; 0x64
    b832:	0010      	movs	r0, r2
    b834:	4b5f      	ldr	r3, [pc, #380]	; (b9b4 <main+0x468>)
    b836:	4798      	blx	r3
    b838:	e7e1      	b.n	b7fe <main+0x2b2>
		puts("ERR>> Systick configuration error\r\n");
    b83a:	485f      	ldr	r0, [pc, #380]	; (b9b8 <main+0x46c>)
    b83c:	4b12      	ldr	r3, [pc, #72]	; (b888 <main+0x33c>)
    b83e:	4798      	blx	r3
    b840:	e7fe      	b.n	b840 <main+0x2f4>
    b842:	46c0      	nop			; (mov r8, r8)
    b844:	20000855 	.word	0x20000855
    b848:	00006251 	.word	0x00006251
    b84c:	002a0003 	.word	0x002a0003
    b850:	002b0003 	.word	0x002b0003
    b854:	20000820 	.word	0x20000820
    b858:	2000109c 	.word	0x2000109c
    b85c:	0000af19 	.word	0x0000af19
    b860:	20001098 	.word	0x20001098
    b864:	0000aeed 	.word	0x0000aeed
    b868:	20001094 	.word	0x20001094
    b86c:	42001800 	.word	0x42001800
    b870:	00005569 	.word	0x00005569
    b874:	20000174 	.word	0x20000174
    b878:	0000c065 	.word	0x0000c065
    b87c:	00004de5 	.word	0x00004de5
    b880:	e000e100 	.word	0xe000e100
    b884:	0000ede4 	.word	0x0000ede4
    b888:	0000c02d 	.word	0x0000c02d
    b88c:	0000ee4c 	.word	0x0000ee4c
    b890:	0000aba5 	.word	0x0000aba5
    b894:	200010b4 	.word	0x200010b4
    b898:	0000abb1 	.word	0x0000abb1
    b89c:	0000ac5d 	.word	0x0000ac5d
    b8a0:	00009bbd 	.word	0x00009bbd
    b8a4:	000005a6 	.word	0x000005a6
    b8a8:	2000110c 	.word	0x2000110c
    b8ac:	00009be5 	.word	0x00009be5
    b8b0:	0000b301 	.word	0x0000b301
    b8b4:	00009c99 	.word	0x00009c99
    b8b8:	00009105 	.word	0x00009105
    b8bc:	20000aec 	.word	0x20000aec
    b8c0:	20000cec 	.word	0x20000cec
    b8c4:	00002d69 	.word	0x00002d69
    b8c8:	00001770 	.word	0x00001770
    b8cc:	20000ab4 	.word	0x20000ab4
    b8d0:	0000904d 	.word	0x0000904d
    b8d4:	0000af31 	.word	0x0000af31
    b8d8:	00009121 	.word	0x00009121
    b8dc:	0000ef04 	.word	0x0000ef04
    b8e0:	0000bf11 	.word	0x0000bf11
    b8e4:	0000ee88 	.word	0x0000ee88
    b8e8:	0000eed0 	.word	0x0000eed0
    b8ec:	00001321 	.word	0x00001321
    b8f0:	000002fd 	.word	0x000002fd
    b8f4:	0000ef38 	.word	0x0000ef38
    b8f8:	00000a31 	.word	0x00000a31
    b8fc:	0000ef70 	.word	0x0000ef70
    b900:	0000ef98 	.word	0x0000ef98
    b904:	0000031d 	.word	0x0000031d
    b908:	0000efc8 	.word	0x0000efc8
    b90c:	20000858 	.word	0x20000858
    b910:	0000bdaf 	.word	0x0000bdaf
    b914:	00008081 	.word	0x00008081
    b918:	0000efec 	.word	0x0000efec
    b91c:	0000b4f9 	.word	0x0000b4f9
    b920:	0000b529 	.word	0x0000b529
    b924:	0000b3f5 	.word	0x0000b3f5
    b928:	0000229d 	.word	0x0000229d
    b92c:	0000f040 	.word	0x0000f040
    b930:	0000f01c 	.word	0x0000f01c
    b934:	0000ad3d 	.word	0x0000ad3d
    b938:	0000600d 	.word	0x0000600d
    b93c:	40000400 	.word	0x40000400
    b940:	0000b9bd 	.word	0x0000b9bd
    b944:	00ffffff 	.word	0x00ffffff
    b948:	e000e010 	.word	0xe000e010
    b94c:	e000ed00 	.word	0xe000ed00
    b950:	20000854 	.word	0x20000854
    b954:	00003ec5 	.word	0x00003ec5
    b958:	0000ae2d 	.word	0x0000ae2d
    b95c:	0000ae69 	.word	0x0000ae69
    b960:	00003f45 	.word	0x00003f45
    b964:	0000f4f8 	.word	0x0000f4f8
    b968:	0000f06c 	.word	0x0000f06c
    b96c:	0000f4ec 	.word	0x0000f4ec
    b970:	0000266d 	.word	0x0000266d
    b974:	0000f090 	.word	0x0000f090
    b978:	0000f0b8 	.word	0x0000f0b8
    b97c:	00003f09 	.word	0x00003f09
    b980:	000012e1 	.word	0x000012e1
    b984:	0000ae15 	.word	0x0000ae15
    b988:	0000ae21 	.word	0x0000ae21
    b98c:	0000f0ec 	.word	0x0000f0ec
    b990:	00009149 	.word	0x00009149
    b994:	0000f52c 	.word	0x0000f52c
    b998:	000023d1 	.word	0x000023d1
    b99c:	0000ace5 	.word	0x0000ace5
    b9a0:	20000ab0 	.word	0x20000ab0
    b9a4:	20000034 	.word	0x20000034
    b9a8:	0000c2d7 	.word	0x0000c2d7
    b9ac:	0000f1b4 	.word	0x0000f1b4
    b9b0:	0000923d 	.word	0x0000923d
    b9b4:	0000929d 	.word	0x0000929d
    b9b8:	0000f0c8 	.word	0x0000f0c8

0000b9bc <__udivsi3>:
    b9bc:	2200      	movs	r2, #0
    b9be:	0843      	lsrs	r3, r0, #1
    b9c0:	428b      	cmp	r3, r1
    b9c2:	d374      	bcc.n	baae <__udivsi3+0xf2>
    b9c4:	0903      	lsrs	r3, r0, #4
    b9c6:	428b      	cmp	r3, r1
    b9c8:	d35f      	bcc.n	ba8a <__udivsi3+0xce>
    b9ca:	0a03      	lsrs	r3, r0, #8
    b9cc:	428b      	cmp	r3, r1
    b9ce:	d344      	bcc.n	ba5a <__udivsi3+0x9e>
    b9d0:	0b03      	lsrs	r3, r0, #12
    b9d2:	428b      	cmp	r3, r1
    b9d4:	d328      	bcc.n	ba28 <__udivsi3+0x6c>
    b9d6:	0c03      	lsrs	r3, r0, #16
    b9d8:	428b      	cmp	r3, r1
    b9da:	d30d      	bcc.n	b9f8 <__udivsi3+0x3c>
    b9dc:	22ff      	movs	r2, #255	; 0xff
    b9de:	0209      	lsls	r1, r1, #8
    b9e0:	ba12      	rev	r2, r2
    b9e2:	0c03      	lsrs	r3, r0, #16
    b9e4:	428b      	cmp	r3, r1
    b9e6:	d302      	bcc.n	b9ee <__udivsi3+0x32>
    b9e8:	1212      	asrs	r2, r2, #8
    b9ea:	0209      	lsls	r1, r1, #8
    b9ec:	d065      	beq.n	baba <__udivsi3+0xfe>
    b9ee:	0b03      	lsrs	r3, r0, #12
    b9f0:	428b      	cmp	r3, r1
    b9f2:	d319      	bcc.n	ba28 <__udivsi3+0x6c>
    b9f4:	e000      	b.n	b9f8 <__udivsi3+0x3c>
    b9f6:	0a09      	lsrs	r1, r1, #8
    b9f8:	0bc3      	lsrs	r3, r0, #15
    b9fa:	428b      	cmp	r3, r1
    b9fc:	d301      	bcc.n	ba02 <__udivsi3+0x46>
    b9fe:	03cb      	lsls	r3, r1, #15
    ba00:	1ac0      	subs	r0, r0, r3
    ba02:	4152      	adcs	r2, r2
    ba04:	0b83      	lsrs	r3, r0, #14
    ba06:	428b      	cmp	r3, r1
    ba08:	d301      	bcc.n	ba0e <__udivsi3+0x52>
    ba0a:	038b      	lsls	r3, r1, #14
    ba0c:	1ac0      	subs	r0, r0, r3
    ba0e:	4152      	adcs	r2, r2
    ba10:	0b43      	lsrs	r3, r0, #13
    ba12:	428b      	cmp	r3, r1
    ba14:	d301      	bcc.n	ba1a <__udivsi3+0x5e>
    ba16:	034b      	lsls	r3, r1, #13
    ba18:	1ac0      	subs	r0, r0, r3
    ba1a:	4152      	adcs	r2, r2
    ba1c:	0b03      	lsrs	r3, r0, #12
    ba1e:	428b      	cmp	r3, r1
    ba20:	d301      	bcc.n	ba26 <__udivsi3+0x6a>
    ba22:	030b      	lsls	r3, r1, #12
    ba24:	1ac0      	subs	r0, r0, r3
    ba26:	4152      	adcs	r2, r2
    ba28:	0ac3      	lsrs	r3, r0, #11
    ba2a:	428b      	cmp	r3, r1
    ba2c:	d301      	bcc.n	ba32 <__udivsi3+0x76>
    ba2e:	02cb      	lsls	r3, r1, #11
    ba30:	1ac0      	subs	r0, r0, r3
    ba32:	4152      	adcs	r2, r2
    ba34:	0a83      	lsrs	r3, r0, #10
    ba36:	428b      	cmp	r3, r1
    ba38:	d301      	bcc.n	ba3e <__udivsi3+0x82>
    ba3a:	028b      	lsls	r3, r1, #10
    ba3c:	1ac0      	subs	r0, r0, r3
    ba3e:	4152      	adcs	r2, r2
    ba40:	0a43      	lsrs	r3, r0, #9
    ba42:	428b      	cmp	r3, r1
    ba44:	d301      	bcc.n	ba4a <__udivsi3+0x8e>
    ba46:	024b      	lsls	r3, r1, #9
    ba48:	1ac0      	subs	r0, r0, r3
    ba4a:	4152      	adcs	r2, r2
    ba4c:	0a03      	lsrs	r3, r0, #8
    ba4e:	428b      	cmp	r3, r1
    ba50:	d301      	bcc.n	ba56 <__udivsi3+0x9a>
    ba52:	020b      	lsls	r3, r1, #8
    ba54:	1ac0      	subs	r0, r0, r3
    ba56:	4152      	adcs	r2, r2
    ba58:	d2cd      	bcs.n	b9f6 <__udivsi3+0x3a>
    ba5a:	09c3      	lsrs	r3, r0, #7
    ba5c:	428b      	cmp	r3, r1
    ba5e:	d301      	bcc.n	ba64 <__udivsi3+0xa8>
    ba60:	01cb      	lsls	r3, r1, #7
    ba62:	1ac0      	subs	r0, r0, r3
    ba64:	4152      	adcs	r2, r2
    ba66:	0983      	lsrs	r3, r0, #6
    ba68:	428b      	cmp	r3, r1
    ba6a:	d301      	bcc.n	ba70 <__udivsi3+0xb4>
    ba6c:	018b      	lsls	r3, r1, #6
    ba6e:	1ac0      	subs	r0, r0, r3
    ba70:	4152      	adcs	r2, r2
    ba72:	0943      	lsrs	r3, r0, #5
    ba74:	428b      	cmp	r3, r1
    ba76:	d301      	bcc.n	ba7c <__udivsi3+0xc0>
    ba78:	014b      	lsls	r3, r1, #5
    ba7a:	1ac0      	subs	r0, r0, r3
    ba7c:	4152      	adcs	r2, r2
    ba7e:	0903      	lsrs	r3, r0, #4
    ba80:	428b      	cmp	r3, r1
    ba82:	d301      	bcc.n	ba88 <__udivsi3+0xcc>
    ba84:	010b      	lsls	r3, r1, #4
    ba86:	1ac0      	subs	r0, r0, r3
    ba88:	4152      	adcs	r2, r2
    ba8a:	08c3      	lsrs	r3, r0, #3
    ba8c:	428b      	cmp	r3, r1
    ba8e:	d301      	bcc.n	ba94 <__udivsi3+0xd8>
    ba90:	00cb      	lsls	r3, r1, #3
    ba92:	1ac0      	subs	r0, r0, r3
    ba94:	4152      	adcs	r2, r2
    ba96:	0883      	lsrs	r3, r0, #2
    ba98:	428b      	cmp	r3, r1
    ba9a:	d301      	bcc.n	baa0 <__udivsi3+0xe4>
    ba9c:	008b      	lsls	r3, r1, #2
    ba9e:	1ac0      	subs	r0, r0, r3
    baa0:	4152      	adcs	r2, r2
    baa2:	0843      	lsrs	r3, r0, #1
    baa4:	428b      	cmp	r3, r1
    baa6:	d301      	bcc.n	baac <__udivsi3+0xf0>
    baa8:	004b      	lsls	r3, r1, #1
    baaa:	1ac0      	subs	r0, r0, r3
    baac:	4152      	adcs	r2, r2
    baae:	1a41      	subs	r1, r0, r1
    bab0:	d200      	bcs.n	bab4 <__udivsi3+0xf8>
    bab2:	4601      	mov	r1, r0
    bab4:	4152      	adcs	r2, r2
    bab6:	4610      	mov	r0, r2
    bab8:	4770      	bx	lr
    baba:	e7ff      	b.n	babc <__udivsi3+0x100>
    babc:	b501      	push	{r0, lr}
    babe:	2000      	movs	r0, #0
    bac0:	f000 f8f0 	bl	bca4 <__aeabi_idiv0>
    bac4:	bd02      	pop	{r1, pc}
    bac6:	46c0      	nop			; (mov r8, r8)

0000bac8 <__aeabi_uidivmod>:
    bac8:	2900      	cmp	r1, #0
    baca:	d0f7      	beq.n	babc <__udivsi3+0x100>
    bacc:	e776      	b.n	b9bc <__udivsi3>
    bace:	4770      	bx	lr

0000bad0 <__divsi3>:
    bad0:	4603      	mov	r3, r0
    bad2:	430b      	orrs	r3, r1
    bad4:	d47f      	bmi.n	bbd6 <__divsi3+0x106>
    bad6:	2200      	movs	r2, #0
    bad8:	0843      	lsrs	r3, r0, #1
    bada:	428b      	cmp	r3, r1
    badc:	d374      	bcc.n	bbc8 <__divsi3+0xf8>
    bade:	0903      	lsrs	r3, r0, #4
    bae0:	428b      	cmp	r3, r1
    bae2:	d35f      	bcc.n	bba4 <__divsi3+0xd4>
    bae4:	0a03      	lsrs	r3, r0, #8
    bae6:	428b      	cmp	r3, r1
    bae8:	d344      	bcc.n	bb74 <__divsi3+0xa4>
    baea:	0b03      	lsrs	r3, r0, #12
    baec:	428b      	cmp	r3, r1
    baee:	d328      	bcc.n	bb42 <__divsi3+0x72>
    baf0:	0c03      	lsrs	r3, r0, #16
    baf2:	428b      	cmp	r3, r1
    baf4:	d30d      	bcc.n	bb12 <__divsi3+0x42>
    baf6:	22ff      	movs	r2, #255	; 0xff
    baf8:	0209      	lsls	r1, r1, #8
    bafa:	ba12      	rev	r2, r2
    bafc:	0c03      	lsrs	r3, r0, #16
    bafe:	428b      	cmp	r3, r1
    bb00:	d302      	bcc.n	bb08 <__divsi3+0x38>
    bb02:	1212      	asrs	r2, r2, #8
    bb04:	0209      	lsls	r1, r1, #8
    bb06:	d065      	beq.n	bbd4 <__divsi3+0x104>
    bb08:	0b03      	lsrs	r3, r0, #12
    bb0a:	428b      	cmp	r3, r1
    bb0c:	d319      	bcc.n	bb42 <__divsi3+0x72>
    bb0e:	e000      	b.n	bb12 <__divsi3+0x42>
    bb10:	0a09      	lsrs	r1, r1, #8
    bb12:	0bc3      	lsrs	r3, r0, #15
    bb14:	428b      	cmp	r3, r1
    bb16:	d301      	bcc.n	bb1c <__divsi3+0x4c>
    bb18:	03cb      	lsls	r3, r1, #15
    bb1a:	1ac0      	subs	r0, r0, r3
    bb1c:	4152      	adcs	r2, r2
    bb1e:	0b83      	lsrs	r3, r0, #14
    bb20:	428b      	cmp	r3, r1
    bb22:	d301      	bcc.n	bb28 <__divsi3+0x58>
    bb24:	038b      	lsls	r3, r1, #14
    bb26:	1ac0      	subs	r0, r0, r3
    bb28:	4152      	adcs	r2, r2
    bb2a:	0b43      	lsrs	r3, r0, #13
    bb2c:	428b      	cmp	r3, r1
    bb2e:	d301      	bcc.n	bb34 <__divsi3+0x64>
    bb30:	034b      	lsls	r3, r1, #13
    bb32:	1ac0      	subs	r0, r0, r3
    bb34:	4152      	adcs	r2, r2
    bb36:	0b03      	lsrs	r3, r0, #12
    bb38:	428b      	cmp	r3, r1
    bb3a:	d301      	bcc.n	bb40 <__divsi3+0x70>
    bb3c:	030b      	lsls	r3, r1, #12
    bb3e:	1ac0      	subs	r0, r0, r3
    bb40:	4152      	adcs	r2, r2
    bb42:	0ac3      	lsrs	r3, r0, #11
    bb44:	428b      	cmp	r3, r1
    bb46:	d301      	bcc.n	bb4c <__divsi3+0x7c>
    bb48:	02cb      	lsls	r3, r1, #11
    bb4a:	1ac0      	subs	r0, r0, r3
    bb4c:	4152      	adcs	r2, r2
    bb4e:	0a83      	lsrs	r3, r0, #10
    bb50:	428b      	cmp	r3, r1
    bb52:	d301      	bcc.n	bb58 <__divsi3+0x88>
    bb54:	028b      	lsls	r3, r1, #10
    bb56:	1ac0      	subs	r0, r0, r3
    bb58:	4152      	adcs	r2, r2
    bb5a:	0a43      	lsrs	r3, r0, #9
    bb5c:	428b      	cmp	r3, r1
    bb5e:	d301      	bcc.n	bb64 <__divsi3+0x94>
    bb60:	024b      	lsls	r3, r1, #9
    bb62:	1ac0      	subs	r0, r0, r3
    bb64:	4152      	adcs	r2, r2
    bb66:	0a03      	lsrs	r3, r0, #8
    bb68:	428b      	cmp	r3, r1
    bb6a:	d301      	bcc.n	bb70 <__divsi3+0xa0>
    bb6c:	020b      	lsls	r3, r1, #8
    bb6e:	1ac0      	subs	r0, r0, r3
    bb70:	4152      	adcs	r2, r2
    bb72:	d2cd      	bcs.n	bb10 <__divsi3+0x40>
    bb74:	09c3      	lsrs	r3, r0, #7
    bb76:	428b      	cmp	r3, r1
    bb78:	d301      	bcc.n	bb7e <__divsi3+0xae>
    bb7a:	01cb      	lsls	r3, r1, #7
    bb7c:	1ac0      	subs	r0, r0, r3
    bb7e:	4152      	adcs	r2, r2
    bb80:	0983      	lsrs	r3, r0, #6
    bb82:	428b      	cmp	r3, r1
    bb84:	d301      	bcc.n	bb8a <__divsi3+0xba>
    bb86:	018b      	lsls	r3, r1, #6
    bb88:	1ac0      	subs	r0, r0, r3
    bb8a:	4152      	adcs	r2, r2
    bb8c:	0943      	lsrs	r3, r0, #5
    bb8e:	428b      	cmp	r3, r1
    bb90:	d301      	bcc.n	bb96 <__divsi3+0xc6>
    bb92:	014b      	lsls	r3, r1, #5
    bb94:	1ac0      	subs	r0, r0, r3
    bb96:	4152      	adcs	r2, r2
    bb98:	0903      	lsrs	r3, r0, #4
    bb9a:	428b      	cmp	r3, r1
    bb9c:	d301      	bcc.n	bba2 <__divsi3+0xd2>
    bb9e:	010b      	lsls	r3, r1, #4
    bba0:	1ac0      	subs	r0, r0, r3
    bba2:	4152      	adcs	r2, r2
    bba4:	08c3      	lsrs	r3, r0, #3
    bba6:	428b      	cmp	r3, r1
    bba8:	d301      	bcc.n	bbae <__divsi3+0xde>
    bbaa:	00cb      	lsls	r3, r1, #3
    bbac:	1ac0      	subs	r0, r0, r3
    bbae:	4152      	adcs	r2, r2
    bbb0:	0883      	lsrs	r3, r0, #2
    bbb2:	428b      	cmp	r3, r1
    bbb4:	d301      	bcc.n	bbba <__divsi3+0xea>
    bbb6:	008b      	lsls	r3, r1, #2
    bbb8:	1ac0      	subs	r0, r0, r3
    bbba:	4152      	adcs	r2, r2
    bbbc:	0843      	lsrs	r3, r0, #1
    bbbe:	428b      	cmp	r3, r1
    bbc0:	d301      	bcc.n	bbc6 <__divsi3+0xf6>
    bbc2:	004b      	lsls	r3, r1, #1
    bbc4:	1ac0      	subs	r0, r0, r3
    bbc6:	4152      	adcs	r2, r2
    bbc8:	1a41      	subs	r1, r0, r1
    bbca:	d200      	bcs.n	bbce <__divsi3+0xfe>
    bbcc:	4601      	mov	r1, r0
    bbce:	4152      	adcs	r2, r2
    bbd0:	4610      	mov	r0, r2
    bbd2:	4770      	bx	lr
    bbd4:	e05d      	b.n	bc92 <__divsi3+0x1c2>
    bbd6:	0fca      	lsrs	r2, r1, #31
    bbd8:	d000      	beq.n	bbdc <__divsi3+0x10c>
    bbda:	4249      	negs	r1, r1
    bbdc:	1003      	asrs	r3, r0, #32
    bbde:	d300      	bcc.n	bbe2 <__divsi3+0x112>
    bbe0:	4240      	negs	r0, r0
    bbe2:	4053      	eors	r3, r2
    bbe4:	2200      	movs	r2, #0
    bbe6:	469c      	mov	ip, r3
    bbe8:	0903      	lsrs	r3, r0, #4
    bbea:	428b      	cmp	r3, r1
    bbec:	d32d      	bcc.n	bc4a <__divsi3+0x17a>
    bbee:	0a03      	lsrs	r3, r0, #8
    bbf0:	428b      	cmp	r3, r1
    bbf2:	d312      	bcc.n	bc1a <__divsi3+0x14a>
    bbf4:	22fc      	movs	r2, #252	; 0xfc
    bbf6:	0189      	lsls	r1, r1, #6
    bbf8:	ba12      	rev	r2, r2
    bbfa:	0a03      	lsrs	r3, r0, #8
    bbfc:	428b      	cmp	r3, r1
    bbfe:	d30c      	bcc.n	bc1a <__divsi3+0x14a>
    bc00:	0189      	lsls	r1, r1, #6
    bc02:	1192      	asrs	r2, r2, #6
    bc04:	428b      	cmp	r3, r1
    bc06:	d308      	bcc.n	bc1a <__divsi3+0x14a>
    bc08:	0189      	lsls	r1, r1, #6
    bc0a:	1192      	asrs	r2, r2, #6
    bc0c:	428b      	cmp	r3, r1
    bc0e:	d304      	bcc.n	bc1a <__divsi3+0x14a>
    bc10:	0189      	lsls	r1, r1, #6
    bc12:	d03a      	beq.n	bc8a <__divsi3+0x1ba>
    bc14:	1192      	asrs	r2, r2, #6
    bc16:	e000      	b.n	bc1a <__divsi3+0x14a>
    bc18:	0989      	lsrs	r1, r1, #6
    bc1a:	09c3      	lsrs	r3, r0, #7
    bc1c:	428b      	cmp	r3, r1
    bc1e:	d301      	bcc.n	bc24 <__divsi3+0x154>
    bc20:	01cb      	lsls	r3, r1, #7
    bc22:	1ac0      	subs	r0, r0, r3
    bc24:	4152      	adcs	r2, r2
    bc26:	0983      	lsrs	r3, r0, #6
    bc28:	428b      	cmp	r3, r1
    bc2a:	d301      	bcc.n	bc30 <__divsi3+0x160>
    bc2c:	018b      	lsls	r3, r1, #6
    bc2e:	1ac0      	subs	r0, r0, r3
    bc30:	4152      	adcs	r2, r2
    bc32:	0943      	lsrs	r3, r0, #5
    bc34:	428b      	cmp	r3, r1
    bc36:	d301      	bcc.n	bc3c <__divsi3+0x16c>
    bc38:	014b      	lsls	r3, r1, #5
    bc3a:	1ac0      	subs	r0, r0, r3
    bc3c:	4152      	adcs	r2, r2
    bc3e:	0903      	lsrs	r3, r0, #4
    bc40:	428b      	cmp	r3, r1
    bc42:	d301      	bcc.n	bc48 <__divsi3+0x178>
    bc44:	010b      	lsls	r3, r1, #4
    bc46:	1ac0      	subs	r0, r0, r3
    bc48:	4152      	adcs	r2, r2
    bc4a:	08c3      	lsrs	r3, r0, #3
    bc4c:	428b      	cmp	r3, r1
    bc4e:	d301      	bcc.n	bc54 <__divsi3+0x184>
    bc50:	00cb      	lsls	r3, r1, #3
    bc52:	1ac0      	subs	r0, r0, r3
    bc54:	4152      	adcs	r2, r2
    bc56:	0883      	lsrs	r3, r0, #2
    bc58:	428b      	cmp	r3, r1
    bc5a:	d301      	bcc.n	bc60 <__divsi3+0x190>
    bc5c:	008b      	lsls	r3, r1, #2
    bc5e:	1ac0      	subs	r0, r0, r3
    bc60:	4152      	adcs	r2, r2
    bc62:	d2d9      	bcs.n	bc18 <__divsi3+0x148>
    bc64:	0843      	lsrs	r3, r0, #1
    bc66:	428b      	cmp	r3, r1
    bc68:	d301      	bcc.n	bc6e <__divsi3+0x19e>
    bc6a:	004b      	lsls	r3, r1, #1
    bc6c:	1ac0      	subs	r0, r0, r3
    bc6e:	4152      	adcs	r2, r2
    bc70:	1a41      	subs	r1, r0, r1
    bc72:	d200      	bcs.n	bc76 <__divsi3+0x1a6>
    bc74:	4601      	mov	r1, r0
    bc76:	4663      	mov	r3, ip
    bc78:	4152      	adcs	r2, r2
    bc7a:	105b      	asrs	r3, r3, #1
    bc7c:	4610      	mov	r0, r2
    bc7e:	d301      	bcc.n	bc84 <__divsi3+0x1b4>
    bc80:	4240      	negs	r0, r0
    bc82:	2b00      	cmp	r3, #0
    bc84:	d500      	bpl.n	bc88 <__divsi3+0x1b8>
    bc86:	4249      	negs	r1, r1
    bc88:	4770      	bx	lr
    bc8a:	4663      	mov	r3, ip
    bc8c:	105b      	asrs	r3, r3, #1
    bc8e:	d300      	bcc.n	bc92 <__divsi3+0x1c2>
    bc90:	4240      	negs	r0, r0
    bc92:	b501      	push	{r0, lr}
    bc94:	2000      	movs	r0, #0
    bc96:	f000 f805 	bl	bca4 <__aeabi_idiv0>
    bc9a:	bd02      	pop	{r1, pc}

0000bc9c <__aeabi_idivmod>:
    bc9c:	2900      	cmp	r1, #0
    bc9e:	d0f8      	beq.n	bc92 <__divsi3+0x1c2>
    bca0:	e716      	b.n	bad0 <__divsi3>
    bca2:	4770      	bx	lr

0000bca4 <__aeabi_idiv0>:
    bca4:	4770      	bx	lr
    bca6:	46c0      	nop			; (mov r8, r8)

0000bca8 <__aeabi_lmul>:
    bca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcaa:	46ce      	mov	lr, r9
    bcac:	4647      	mov	r7, r8
    bcae:	0415      	lsls	r5, r2, #16
    bcb0:	0c2d      	lsrs	r5, r5, #16
    bcb2:	002e      	movs	r6, r5
    bcb4:	b580      	push	{r7, lr}
    bcb6:	0407      	lsls	r7, r0, #16
    bcb8:	0c14      	lsrs	r4, r2, #16
    bcba:	0c3f      	lsrs	r7, r7, #16
    bcbc:	4699      	mov	r9, r3
    bcbe:	0c03      	lsrs	r3, r0, #16
    bcc0:	437e      	muls	r6, r7
    bcc2:	435d      	muls	r5, r3
    bcc4:	4367      	muls	r7, r4
    bcc6:	4363      	muls	r3, r4
    bcc8:	197f      	adds	r7, r7, r5
    bcca:	0c34      	lsrs	r4, r6, #16
    bccc:	19e4      	adds	r4, r4, r7
    bcce:	469c      	mov	ip, r3
    bcd0:	42a5      	cmp	r5, r4
    bcd2:	d903      	bls.n	bcdc <__aeabi_lmul+0x34>
    bcd4:	2380      	movs	r3, #128	; 0x80
    bcd6:	025b      	lsls	r3, r3, #9
    bcd8:	4698      	mov	r8, r3
    bcda:	44c4      	add	ip, r8
    bcdc:	464b      	mov	r3, r9
    bcde:	4351      	muls	r1, r2
    bce0:	4343      	muls	r3, r0
    bce2:	0436      	lsls	r6, r6, #16
    bce4:	0c36      	lsrs	r6, r6, #16
    bce6:	0c25      	lsrs	r5, r4, #16
    bce8:	0424      	lsls	r4, r4, #16
    bcea:	4465      	add	r5, ip
    bcec:	19a4      	adds	r4, r4, r6
    bcee:	1859      	adds	r1, r3, r1
    bcf0:	1949      	adds	r1, r1, r5
    bcf2:	0020      	movs	r0, r4
    bcf4:	bc0c      	pop	{r2, r3}
    bcf6:	4690      	mov	r8, r2
    bcf8:	4699      	mov	r9, r3
    bcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bcfc <atoi>:
    bcfc:	b510      	push	{r4, lr}
    bcfe:	220a      	movs	r2, #10
    bd00:	2100      	movs	r1, #0
    bd02:	f000 fbc5 	bl	c490 <strtol>
    bd06:	bd10      	pop	{r4, pc}

0000bd08 <__libc_init_array>:
    bd08:	b570      	push	{r4, r5, r6, lr}
    bd0a:	2600      	movs	r6, #0
    bd0c:	4d0c      	ldr	r5, [pc, #48]	; (bd40 <__libc_init_array+0x38>)
    bd0e:	4c0d      	ldr	r4, [pc, #52]	; (bd44 <__libc_init_array+0x3c>)
    bd10:	1b64      	subs	r4, r4, r5
    bd12:	10a4      	asrs	r4, r4, #2
    bd14:	42a6      	cmp	r6, r4
    bd16:	d109      	bne.n	bd2c <__libc_init_array+0x24>
    bd18:	2600      	movs	r6, #0
    bd1a:	f003 fceb 	bl	f6f4 <_init>
    bd1e:	4d0a      	ldr	r5, [pc, #40]	; (bd48 <__libc_init_array+0x40>)
    bd20:	4c0a      	ldr	r4, [pc, #40]	; (bd4c <__libc_init_array+0x44>)
    bd22:	1b64      	subs	r4, r4, r5
    bd24:	10a4      	asrs	r4, r4, #2
    bd26:	42a6      	cmp	r6, r4
    bd28:	d105      	bne.n	bd36 <__libc_init_array+0x2e>
    bd2a:	bd70      	pop	{r4, r5, r6, pc}
    bd2c:	00b3      	lsls	r3, r6, #2
    bd2e:	58eb      	ldr	r3, [r5, r3]
    bd30:	4798      	blx	r3
    bd32:	3601      	adds	r6, #1
    bd34:	e7ee      	b.n	bd14 <__libc_init_array+0xc>
    bd36:	00b3      	lsls	r3, r6, #2
    bd38:	58eb      	ldr	r3, [r5, r3]
    bd3a:	4798      	blx	r3
    bd3c:	3601      	adds	r6, #1
    bd3e:	e7f2      	b.n	bd26 <__libc_init_array+0x1e>
    bd40:	0000f700 	.word	0x0000f700
    bd44:	0000f700 	.word	0x0000f700
    bd48:	0000f700 	.word	0x0000f700
    bd4c:	0000f704 	.word	0x0000f704

0000bd50 <malloc>:
    bd50:	b510      	push	{r4, lr}
    bd52:	4b03      	ldr	r3, [pc, #12]	; (bd60 <malloc+0x10>)
    bd54:	0001      	movs	r1, r0
    bd56:	6818      	ldr	r0, [r3, #0]
    bd58:	f000 f87c 	bl	be54 <_malloc_r>
    bd5c:	bd10      	pop	{r4, pc}
    bd5e:	46c0      	nop			; (mov r8, r8)
    bd60:	20000174 	.word	0x20000174

0000bd64 <free>:
    bd64:	b510      	push	{r4, lr}
    bd66:	4b03      	ldr	r3, [pc, #12]	; (bd74 <free+0x10>)
    bd68:	0001      	movs	r1, r0
    bd6a:	6818      	ldr	r0, [r3, #0]
    bd6c:	f000 f828 	bl	bdc0 <_free_r>
    bd70:	bd10      	pop	{r4, pc}
    bd72:	46c0      	nop			; (mov r8, r8)
    bd74:	20000174 	.word	0x20000174

0000bd78 <memcpy>:
    bd78:	2300      	movs	r3, #0
    bd7a:	b510      	push	{r4, lr}
    bd7c:	429a      	cmp	r2, r3
    bd7e:	d100      	bne.n	bd82 <memcpy+0xa>
    bd80:	bd10      	pop	{r4, pc}
    bd82:	5ccc      	ldrb	r4, [r1, r3]
    bd84:	54c4      	strb	r4, [r0, r3]
    bd86:	3301      	adds	r3, #1
    bd88:	e7f8      	b.n	bd7c <memcpy+0x4>

0000bd8a <memmove>:
    bd8a:	b510      	push	{r4, lr}
    bd8c:	4288      	cmp	r0, r1
    bd8e:	d902      	bls.n	bd96 <memmove+0xc>
    bd90:	188b      	adds	r3, r1, r2
    bd92:	4298      	cmp	r0, r3
    bd94:	d308      	bcc.n	bda8 <memmove+0x1e>
    bd96:	2300      	movs	r3, #0
    bd98:	429a      	cmp	r2, r3
    bd9a:	d007      	beq.n	bdac <memmove+0x22>
    bd9c:	5ccc      	ldrb	r4, [r1, r3]
    bd9e:	54c4      	strb	r4, [r0, r3]
    bda0:	3301      	adds	r3, #1
    bda2:	e7f9      	b.n	bd98 <memmove+0xe>
    bda4:	5c8b      	ldrb	r3, [r1, r2]
    bda6:	5483      	strb	r3, [r0, r2]
    bda8:	3a01      	subs	r2, #1
    bdaa:	d2fb      	bcs.n	bda4 <memmove+0x1a>
    bdac:	bd10      	pop	{r4, pc}

0000bdae <memset>:
    bdae:	0003      	movs	r3, r0
    bdb0:	1882      	adds	r2, r0, r2
    bdb2:	4293      	cmp	r3, r2
    bdb4:	d100      	bne.n	bdb8 <memset+0xa>
    bdb6:	4770      	bx	lr
    bdb8:	7019      	strb	r1, [r3, #0]
    bdba:	3301      	adds	r3, #1
    bdbc:	e7f9      	b.n	bdb2 <memset+0x4>
	...

0000bdc0 <_free_r>:
    bdc0:	b570      	push	{r4, r5, r6, lr}
    bdc2:	0005      	movs	r5, r0
    bdc4:	2900      	cmp	r1, #0
    bdc6:	d010      	beq.n	bdea <_free_r+0x2a>
    bdc8:	1f0c      	subs	r4, r1, #4
    bdca:	6823      	ldr	r3, [r4, #0]
    bdcc:	2b00      	cmp	r3, #0
    bdce:	da00      	bge.n	bdd2 <_free_r+0x12>
    bdd0:	18e4      	adds	r4, r4, r3
    bdd2:	0028      	movs	r0, r5
    bdd4:	f000 fe4a 	bl	ca6c <__malloc_lock>
    bdd8:	4a1d      	ldr	r2, [pc, #116]	; (be50 <_free_r+0x90>)
    bdda:	6813      	ldr	r3, [r2, #0]
    bddc:	2b00      	cmp	r3, #0
    bdde:	d105      	bne.n	bdec <_free_r+0x2c>
    bde0:	6063      	str	r3, [r4, #4]
    bde2:	6014      	str	r4, [r2, #0]
    bde4:	0028      	movs	r0, r5
    bde6:	f000 fe42 	bl	ca6e <__malloc_unlock>
    bdea:	bd70      	pop	{r4, r5, r6, pc}
    bdec:	42a3      	cmp	r3, r4
    bdee:	d909      	bls.n	be04 <_free_r+0x44>
    bdf0:	6821      	ldr	r1, [r4, #0]
    bdf2:	1860      	adds	r0, r4, r1
    bdf4:	4283      	cmp	r3, r0
    bdf6:	d1f3      	bne.n	bde0 <_free_r+0x20>
    bdf8:	6818      	ldr	r0, [r3, #0]
    bdfa:	685b      	ldr	r3, [r3, #4]
    bdfc:	1841      	adds	r1, r0, r1
    bdfe:	6021      	str	r1, [r4, #0]
    be00:	e7ee      	b.n	bde0 <_free_r+0x20>
    be02:	0013      	movs	r3, r2
    be04:	685a      	ldr	r2, [r3, #4]
    be06:	2a00      	cmp	r2, #0
    be08:	d001      	beq.n	be0e <_free_r+0x4e>
    be0a:	42a2      	cmp	r2, r4
    be0c:	d9f9      	bls.n	be02 <_free_r+0x42>
    be0e:	6819      	ldr	r1, [r3, #0]
    be10:	1858      	adds	r0, r3, r1
    be12:	42a0      	cmp	r0, r4
    be14:	d10b      	bne.n	be2e <_free_r+0x6e>
    be16:	6820      	ldr	r0, [r4, #0]
    be18:	1809      	adds	r1, r1, r0
    be1a:	1858      	adds	r0, r3, r1
    be1c:	6019      	str	r1, [r3, #0]
    be1e:	4282      	cmp	r2, r0
    be20:	d1e0      	bne.n	bde4 <_free_r+0x24>
    be22:	6810      	ldr	r0, [r2, #0]
    be24:	6852      	ldr	r2, [r2, #4]
    be26:	1841      	adds	r1, r0, r1
    be28:	6019      	str	r1, [r3, #0]
    be2a:	605a      	str	r2, [r3, #4]
    be2c:	e7da      	b.n	bde4 <_free_r+0x24>
    be2e:	42a0      	cmp	r0, r4
    be30:	d902      	bls.n	be38 <_free_r+0x78>
    be32:	230c      	movs	r3, #12
    be34:	602b      	str	r3, [r5, #0]
    be36:	e7d5      	b.n	bde4 <_free_r+0x24>
    be38:	6821      	ldr	r1, [r4, #0]
    be3a:	1860      	adds	r0, r4, r1
    be3c:	4282      	cmp	r2, r0
    be3e:	d103      	bne.n	be48 <_free_r+0x88>
    be40:	6810      	ldr	r0, [r2, #0]
    be42:	6852      	ldr	r2, [r2, #4]
    be44:	1841      	adds	r1, r0, r1
    be46:	6021      	str	r1, [r4, #0]
    be48:	6062      	str	r2, [r4, #4]
    be4a:	605c      	str	r4, [r3, #4]
    be4c:	e7ca      	b.n	bde4 <_free_r+0x24>
    be4e:	46c0      	nop			; (mov r8, r8)
    be50:	20000ef0 	.word	0x20000ef0

0000be54 <_malloc_r>:
    be54:	2303      	movs	r3, #3
    be56:	b570      	push	{r4, r5, r6, lr}
    be58:	1ccd      	adds	r5, r1, #3
    be5a:	439d      	bics	r5, r3
    be5c:	3508      	adds	r5, #8
    be5e:	0006      	movs	r6, r0
    be60:	2d0c      	cmp	r5, #12
    be62:	d21e      	bcs.n	bea2 <_malloc_r+0x4e>
    be64:	250c      	movs	r5, #12
    be66:	42a9      	cmp	r1, r5
    be68:	d81d      	bhi.n	bea6 <_malloc_r+0x52>
    be6a:	0030      	movs	r0, r6
    be6c:	f000 fdfe 	bl	ca6c <__malloc_lock>
    be70:	4a25      	ldr	r2, [pc, #148]	; (bf08 <_malloc_r+0xb4>)
    be72:	6814      	ldr	r4, [r2, #0]
    be74:	0021      	movs	r1, r4
    be76:	2900      	cmp	r1, #0
    be78:	d119      	bne.n	beae <_malloc_r+0x5a>
    be7a:	4c24      	ldr	r4, [pc, #144]	; (bf0c <_malloc_r+0xb8>)
    be7c:	6823      	ldr	r3, [r4, #0]
    be7e:	2b00      	cmp	r3, #0
    be80:	d103      	bne.n	be8a <_malloc_r+0x36>
    be82:	0030      	movs	r0, r6
    be84:	f000 f8dc 	bl	c040 <_sbrk_r>
    be88:	6020      	str	r0, [r4, #0]
    be8a:	0029      	movs	r1, r5
    be8c:	0030      	movs	r0, r6
    be8e:	f000 f8d7 	bl	c040 <_sbrk_r>
    be92:	1c43      	adds	r3, r0, #1
    be94:	d12c      	bne.n	bef0 <_malloc_r+0x9c>
    be96:	230c      	movs	r3, #12
    be98:	0030      	movs	r0, r6
    be9a:	6033      	str	r3, [r6, #0]
    be9c:	f000 fde7 	bl	ca6e <__malloc_unlock>
    bea0:	e003      	b.n	beaa <_malloc_r+0x56>
    bea2:	2d00      	cmp	r5, #0
    bea4:	dadf      	bge.n	be66 <_malloc_r+0x12>
    bea6:	230c      	movs	r3, #12
    bea8:	6033      	str	r3, [r6, #0]
    beaa:	2000      	movs	r0, #0
    beac:	bd70      	pop	{r4, r5, r6, pc}
    beae:	680b      	ldr	r3, [r1, #0]
    beb0:	1b5b      	subs	r3, r3, r5
    beb2:	d41a      	bmi.n	beea <_malloc_r+0x96>
    beb4:	2b0b      	cmp	r3, #11
    beb6:	d903      	bls.n	bec0 <_malloc_r+0x6c>
    beb8:	600b      	str	r3, [r1, #0]
    beba:	18cc      	adds	r4, r1, r3
    bebc:	6025      	str	r5, [r4, #0]
    bebe:	e003      	b.n	bec8 <_malloc_r+0x74>
    bec0:	428c      	cmp	r4, r1
    bec2:	d10e      	bne.n	bee2 <_malloc_r+0x8e>
    bec4:	6863      	ldr	r3, [r4, #4]
    bec6:	6013      	str	r3, [r2, #0]
    bec8:	0030      	movs	r0, r6
    beca:	f000 fdd0 	bl	ca6e <__malloc_unlock>
    bece:	0020      	movs	r0, r4
    bed0:	2207      	movs	r2, #7
    bed2:	300b      	adds	r0, #11
    bed4:	1d23      	adds	r3, r4, #4
    bed6:	4390      	bics	r0, r2
    bed8:	1ac3      	subs	r3, r0, r3
    beda:	d0e7      	beq.n	beac <_malloc_r+0x58>
    bedc:	425a      	negs	r2, r3
    bede:	50e2      	str	r2, [r4, r3]
    bee0:	e7e4      	b.n	beac <_malloc_r+0x58>
    bee2:	684b      	ldr	r3, [r1, #4]
    bee4:	6063      	str	r3, [r4, #4]
    bee6:	000c      	movs	r4, r1
    bee8:	e7ee      	b.n	bec8 <_malloc_r+0x74>
    beea:	000c      	movs	r4, r1
    beec:	6849      	ldr	r1, [r1, #4]
    beee:	e7c2      	b.n	be76 <_malloc_r+0x22>
    bef0:	2303      	movs	r3, #3
    bef2:	1cc4      	adds	r4, r0, #3
    bef4:	439c      	bics	r4, r3
    bef6:	42a0      	cmp	r0, r4
    bef8:	d0e0      	beq.n	bebc <_malloc_r+0x68>
    befa:	1a21      	subs	r1, r4, r0
    befc:	0030      	movs	r0, r6
    befe:	f000 f89f 	bl	c040 <_sbrk_r>
    bf02:	1c43      	adds	r3, r0, #1
    bf04:	d1da      	bne.n	bebc <_malloc_r+0x68>
    bf06:	e7c6      	b.n	be96 <_malloc_r+0x42>
    bf08:	20000ef0 	.word	0x20000ef0
    bf0c:	20000ef4 	.word	0x20000ef4

0000bf10 <iprintf>:
    bf10:	b40f      	push	{r0, r1, r2, r3}
    bf12:	4b0b      	ldr	r3, [pc, #44]	; (bf40 <iprintf+0x30>)
    bf14:	b513      	push	{r0, r1, r4, lr}
    bf16:	681c      	ldr	r4, [r3, #0]
    bf18:	2c00      	cmp	r4, #0
    bf1a:	d005      	beq.n	bf28 <iprintf+0x18>
    bf1c:	69a3      	ldr	r3, [r4, #24]
    bf1e:	2b00      	cmp	r3, #0
    bf20:	d102      	bne.n	bf28 <iprintf+0x18>
    bf22:	0020      	movs	r0, r4
    bf24:	f000 fc8c 	bl	c840 <__sinit>
    bf28:	ab05      	add	r3, sp, #20
    bf2a:	9a04      	ldr	r2, [sp, #16]
    bf2c:	68a1      	ldr	r1, [r4, #8]
    bf2e:	0020      	movs	r0, r4
    bf30:	9301      	str	r3, [sp, #4]
    bf32:	f000 ff2b 	bl	cd8c <_vfiprintf_r>
    bf36:	bc16      	pop	{r1, r2, r4}
    bf38:	bc08      	pop	{r3}
    bf3a:	b004      	add	sp, #16
    bf3c:	4718      	bx	r3
    bf3e:	46c0      	nop			; (mov r8, r8)
    bf40:	20000174 	.word	0x20000174

0000bf44 <putchar>:
    bf44:	4b08      	ldr	r3, [pc, #32]	; (bf68 <putchar+0x24>)
    bf46:	b570      	push	{r4, r5, r6, lr}
    bf48:	681c      	ldr	r4, [r3, #0]
    bf4a:	0005      	movs	r5, r0
    bf4c:	2c00      	cmp	r4, #0
    bf4e:	d005      	beq.n	bf5c <putchar+0x18>
    bf50:	69a3      	ldr	r3, [r4, #24]
    bf52:	2b00      	cmp	r3, #0
    bf54:	d102      	bne.n	bf5c <putchar+0x18>
    bf56:	0020      	movs	r0, r4
    bf58:	f000 fc72 	bl	c840 <__sinit>
    bf5c:	0029      	movs	r1, r5
    bf5e:	68a2      	ldr	r2, [r4, #8]
    bf60:	0020      	movs	r0, r4
    bf62:	f001 f9b7 	bl	d2d4 <_putc_r>
    bf66:	bd70      	pop	{r4, r5, r6, pc}
    bf68:	20000174 	.word	0x20000174

0000bf6c <_puts_r>:
    bf6c:	b570      	push	{r4, r5, r6, lr}
    bf6e:	0005      	movs	r5, r0
    bf70:	000e      	movs	r6, r1
    bf72:	2800      	cmp	r0, #0
    bf74:	d004      	beq.n	bf80 <_puts_r+0x14>
    bf76:	6983      	ldr	r3, [r0, #24]
    bf78:	2b00      	cmp	r3, #0
    bf7a:	d101      	bne.n	bf80 <_puts_r+0x14>
    bf7c:	f000 fc60 	bl	c840 <__sinit>
    bf80:	69ab      	ldr	r3, [r5, #24]
    bf82:	68ac      	ldr	r4, [r5, #8]
    bf84:	2b00      	cmp	r3, #0
    bf86:	d102      	bne.n	bf8e <_puts_r+0x22>
    bf88:	0028      	movs	r0, r5
    bf8a:	f000 fc59 	bl	c840 <__sinit>
    bf8e:	4b24      	ldr	r3, [pc, #144]	; (c020 <_puts_r+0xb4>)
    bf90:	429c      	cmp	r4, r3
    bf92:	d10f      	bne.n	bfb4 <_puts_r+0x48>
    bf94:	686c      	ldr	r4, [r5, #4]
    bf96:	89a3      	ldrh	r3, [r4, #12]
    bf98:	071b      	lsls	r3, r3, #28
    bf9a:	d502      	bpl.n	bfa2 <_puts_r+0x36>
    bf9c:	6923      	ldr	r3, [r4, #16]
    bf9e:	2b00      	cmp	r3, #0
    bfa0:	d120      	bne.n	bfe4 <_puts_r+0x78>
    bfa2:	0021      	movs	r1, r4
    bfa4:	0028      	movs	r0, r5
    bfa6:	f000 fadd 	bl	c564 <__swsetup_r>
    bfaa:	2800      	cmp	r0, #0
    bfac:	d01a      	beq.n	bfe4 <_puts_r+0x78>
    bfae:	2001      	movs	r0, #1
    bfb0:	4240      	negs	r0, r0
    bfb2:	bd70      	pop	{r4, r5, r6, pc}
    bfb4:	4b1b      	ldr	r3, [pc, #108]	; (c024 <_puts_r+0xb8>)
    bfb6:	429c      	cmp	r4, r3
    bfb8:	d101      	bne.n	bfbe <_puts_r+0x52>
    bfba:	68ac      	ldr	r4, [r5, #8]
    bfbc:	e7eb      	b.n	bf96 <_puts_r+0x2a>
    bfbe:	4b1a      	ldr	r3, [pc, #104]	; (c028 <_puts_r+0xbc>)
    bfc0:	429c      	cmp	r4, r3
    bfc2:	d1e8      	bne.n	bf96 <_puts_r+0x2a>
    bfc4:	68ec      	ldr	r4, [r5, #12]
    bfc6:	e7e6      	b.n	bf96 <_puts_r+0x2a>
    bfc8:	3b01      	subs	r3, #1
    bfca:	3601      	adds	r6, #1
    bfcc:	60a3      	str	r3, [r4, #8]
    bfce:	2b00      	cmp	r3, #0
    bfd0:	da04      	bge.n	bfdc <_puts_r+0x70>
    bfd2:	69a2      	ldr	r2, [r4, #24]
    bfd4:	4293      	cmp	r3, r2
    bfd6:	db16      	blt.n	c006 <_puts_r+0x9a>
    bfd8:	290a      	cmp	r1, #10
    bfda:	d014      	beq.n	c006 <_puts_r+0x9a>
    bfdc:	6823      	ldr	r3, [r4, #0]
    bfde:	1c5a      	adds	r2, r3, #1
    bfe0:	6022      	str	r2, [r4, #0]
    bfe2:	7019      	strb	r1, [r3, #0]
    bfe4:	7831      	ldrb	r1, [r6, #0]
    bfe6:	68a3      	ldr	r3, [r4, #8]
    bfe8:	2900      	cmp	r1, #0
    bfea:	d1ed      	bne.n	bfc8 <_puts_r+0x5c>
    bfec:	3b01      	subs	r3, #1
    bfee:	60a3      	str	r3, [r4, #8]
    bff0:	2b00      	cmp	r3, #0
    bff2:	da0f      	bge.n	c014 <_puts_r+0xa8>
    bff4:	0022      	movs	r2, r4
    bff6:	310a      	adds	r1, #10
    bff8:	0028      	movs	r0, r5
    bffa:	f000 fa5d 	bl	c4b8 <__swbuf_r>
    bffe:	1c43      	adds	r3, r0, #1
    c000:	d0d5      	beq.n	bfae <_puts_r+0x42>
    c002:	200a      	movs	r0, #10
    c004:	e7d5      	b.n	bfb2 <_puts_r+0x46>
    c006:	0022      	movs	r2, r4
    c008:	0028      	movs	r0, r5
    c00a:	f000 fa55 	bl	c4b8 <__swbuf_r>
    c00e:	1c43      	adds	r3, r0, #1
    c010:	d1e8      	bne.n	bfe4 <_puts_r+0x78>
    c012:	e7cc      	b.n	bfae <_puts_r+0x42>
    c014:	200a      	movs	r0, #10
    c016:	6823      	ldr	r3, [r4, #0]
    c018:	1c5a      	adds	r2, r3, #1
    c01a:	6022      	str	r2, [r4, #0]
    c01c:	7018      	strb	r0, [r3, #0]
    c01e:	e7c8      	b.n	bfb2 <_puts_r+0x46>
    c020:	0000f574 	.word	0x0000f574
    c024:	0000f594 	.word	0x0000f594
    c028:	0000f554 	.word	0x0000f554

0000c02c <puts>:
    c02c:	b510      	push	{r4, lr}
    c02e:	4b03      	ldr	r3, [pc, #12]	; (c03c <puts+0x10>)
    c030:	0001      	movs	r1, r0
    c032:	6818      	ldr	r0, [r3, #0]
    c034:	f7ff ff9a 	bl	bf6c <_puts_r>
    c038:	bd10      	pop	{r4, pc}
    c03a:	46c0      	nop			; (mov r8, r8)
    c03c:	20000174 	.word	0x20000174

0000c040 <_sbrk_r>:
    c040:	2300      	movs	r3, #0
    c042:	b570      	push	{r4, r5, r6, lr}
    c044:	4c06      	ldr	r4, [pc, #24]	; (c060 <_sbrk_r+0x20>)
    c046:	0005      	movs	r5, r0
    c048:	0008      	movs	r0, r1
    c04a:	6023      	str	r3, [r4, #0]
    c04c:	f7fa fd04 	bl	6a58 <_sbrk>
    c050:	1c43      	adds	r3, r0, #1
    c052:	d103      	bne.n	c05c <_sbrk_r+0x1c>
    c054:	6823      	ldr	r3, [r4, #0]
    c056:	2b00      	cmp	r3, #0
    c058:	d000      	beq.n	c05c <_sbrk_r+0x1c>
    c05a:	602b      	str	r3, [r5, #0]
    c05c:	bd70      	pop	{r4, r5, r6, pc}
    c05e:	46c0      	nop			; (mov r8, r8)
    c060:	200011f4 	.word	0x200011f4

0000c064 <setbuf>:
    c064:	424a      	negs	r2, r1
    c066:	414a      	adcs	r2, r1
    c068:	2380      	movs	r3, #128	; 0x80
    c06a:	b510      	push	{r4, lr}
    c06c:	0052      	lsls	r2, r2, #1
    c06e:	00db      	lsls	r3, r3, #3
    c070:	f000 f802 	bl	c078 <setvbuf>
    c074:	bd10      	pop	{r4, pc}
	...

0000c078 <setvbuf>:
    c078:	b5f0      	push	{r4, r5, r6, r7, lr}
    c07a:	001d      	movs	r5, r3
    c07c:	4b4f      	ldr	r3, [pc, #316]	; (c1bc <setvbuf+0x144>)
    c07e:	b085      	sub	sp, #20
    c080:	681e      	ldr	r6, [r3, #0]
    c082:	0004      	movs	r4, r0
    c084:	000f      	movs	r7, r1
    c086:	9200      	str	r2, [sp, #0]
    c088:	2e00      	cmp	r6, #0
    c08a:	d005      	beq.n	c098 <setvbuf+0x20>
    c08c:	69b3      	ldr	r3, [r6, #24]
    c08e:	2b00      	cmp	r3, #0
    c090:	d102      	bne.n	c098 <setvbuf+0x20>
    c092:	0030      	movs	r0, r6
    c094:	f000 fbd4 	bl	c840 <__sinit>
    c098:	4b49      	ldr	r3, [pc, #292]	; (c1c0 <setvbuf+0x148>)
    c09a:	429c      	cmp	r4, r3
    c09c:	d150      	bne.n	c140 <setvbuf+0xc8>
    c09e:	6874      	ldr	r4, [r6, #4]
    c0a0:	9b00      	ldr	r3, [sp, #0]
    c0a2:	2b02      	cmp	r3, #2
    c0a4:	d005      	beq.n	c0b2 <setvbuf+0x3a>
    c0a6:	2b01      	cmp	r3, #1
    c0a8:	d900      	bls.n	c0ac <setvbuf+0x34>
    c0aa:	e084      	b.n	c1b6 <setvbuf+0x13e>
    c0ac:	2d00      	cmp	r5, #0
    c0ae:	da00      	bge.n	c0b2 <setvbuf+0x3a>
    c0b0:	e081      	b.n	c1b6 <setvbuf+0x13e>
    c0b2:	0021      	movs	r1, r4
    c0b4:	0030      	movs	r0, r6
    c0b6:	f000 fb55 	bl	c764 <_fflush_r>
    c0ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c0bc:	2900      	cmp	r1, #0
    c0be:	d008      	beq.n	c0d2 <setvbuf+0x5a>
    c0c0:	0023      	movs	r3, r4
    c0c2:	3344      	adds	r3, #68	; 0x44
    c0c4:	4299      	cmp	r1, r3
    c0c6:	d002      	beq.n	c0ce <setvbuf+0x56>
    c0c8:	0030      	movs	r0, r6
    c0ca:	f7ff fe79 	bl	bdc0 <_free_r>
    c0ce:	2300      	movs	r3, #0
    c0d0:	6363      	str	r3, [r4, #52]	; 0x34
    c0d2:	2300      	movs	r3, #0
    c0d4:	61a3      	str	r3, [r4, #24]
    c0d6:	6063      	str	r3, [r4, #4]
    c0d8:	89a3      	ldrh	r3, [r4, #12]
    c0da:	061b      	lsls	r3, r3, #24
    c0dc:	d503      	bpl.n	c0e6 <setvbuf+0x6e>
    c0de:	6921      	ldr	r1, [r4, #16]
    c0e0:	0030      	movs	r0, r6
    c0e2:	f7ff fe6d 	bl	bdc0 <_free_r>
    c0e6:	89a3      	ldrh	r3, [r4, #12]
    c0e8:	4a36      	ldr	r2, [pc, #216]	; (c1c4 <setvbuf+0x14c>)
    c0ea:	4013      	ands	r3, r2
    c0ec:	81a3      	strh	r3, [r4, #12]
    c0ee:	9b00      	ldr	r3, [sp, #0]
    c0f0:	2b02      	cmp	r3, #2
    c0f2:	d05a      	beq.n	c1aa <setvbuf+0x132>
    c0f4:	ab03      	add	r3, sp, #12
    c0f6:	aa02      	add	r2, sp, #8
    c0f8:	0021      	movs	r1, r4
    c0fa:	0030      	movs	r0, r6
    c0fc:	f000 fc38 	bl	c970 <__swhatbuf_r>
    c100:	89a3      	ldrh	r3, [r4, #12]
    c102:	4318      	orrs	r0, r3
    c104:	81a0      	strh	r0, [r4, #12]
    c106:	2d00      	cmp	r5, #0
    c108:	d124      	bne.n	c154 <setvbuf+0xdc>
    c10a:	9d02      	ldr	r5, [sp, #8]
    c10c:	0028      	movs	r0, r5
    c10e:	f7ff fe1f 	bl	bd50 <malloc>
    c112:	9501      	str	r5, [sp, #4]
    c114:	1e07      	subs	r7, r0, #0
    c116:	d142      	bne.n	c19e <setvbuf+0x126>
    c118:	9b02      	ldr	r3, [sp, #8]
    c11a:	9301      	str	r3, [sp, #4]
    c11c:	42ab      	cmp	r3, r5
    c11e:	d139      	bne.n	c194 <setvbuf+0x11c>
    c120:	2001      	movs	r0, #1
    c122:	4240      	negs	r0, r0
    c124:	2302      	movs	r3, #2
    c126:	89a2      	ldrh	r2, [r4, #12]
    c128:	4313      	orrs	r3, r2
    c12a:	81a3      	strh	r3, [r4, #12]
    c12c:	2300      	movs	r3, #0
    c12e:	60a3      	str	r3, [r4, #8]
    c130:	0023      	movs	r3, r4
    c132:	3347      	adds	r3, #71	; 0x47
    c134:	6023      	str	r3, [r4, #0]
    c136:	6123      	str	r3, [r4, #16]
    c138:	2301      	movs	r3, #1
    c13a:	6163      	str	r3, [r4, #20]
    c13c:	b005      	add	sp, #20
    c13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c140:	4b21      	ldr	r3, [pc, #132]	; (c1c8 <setvbuf+0x150>)
    c142:	429c      	cmp	r4, r3
    c144:	d101      	bne.n	c14a <setvbuf+0xd2>
    c146:	68b4      	ldr	r4, [r6, #8]
    c148:	e7aa      	b.n	c0a0 <setvbuf+0x28>
    c14a:	4b20      	ldr	r3, [pc, #128]	; (c1cc <setvbuf+0x154>)
    c14c:	429c      	cmp	r4, r3
    c14e:	d1a7      	bne.n	c0a0 <setvbuf+0x28>
    c150:	68f4      	ldr	r4, [r6, #12]
    c152:	e7a5      	b.n	c0a0 <setvbuf+0x28>
    c154:	2f00      	cmp	r7, #0
    c156:	d0d9      	beq.n	c10c <setvbuf+0x94>
    c158:	69b3      	ldr	r3, [r6, #24]
    c15a:	2b00      	cmp	r3, #0
    c15c:	d102      	bne.n	c164 <setvbuf+0xec>
    c15e:	0030      	movs	r0, r6
    c160:	f000 fb6e 	bl	c840 <__sinit>
    c164:	9b00      	ldr	r3, [sp, #0]
    c166:	2b01      	cmp	r3, #1
    c168:	d103      	bne.n	c172 <setvbuf+0xfa>
    c16a:	89a3      	ldrh	r3, [r4, #12]
    c16c:	9a00      	ldr	r2, [sp, #0]
    c16e:	431a      	orrs	r2, r3
    c170:	81a2      	strh	r2, [r4, #12]
    c172:	2008      	movs	r0, #8
    c174:	89a3      	ldrh	r3, [r4, #12]
    c176:	6027      	str	r7, [r4, #0]
    c178:	6127      	str	r7, [r4, #16]
    c17a:	6165      	str	r5, [r4, #20]
    c17c:	4018      	ands	r0, r3
    c17e:	d018      	beq.n	c1b2 <setvbuf+0x13a>
    c180:	2001      	movs	r0, #1
    c182:	4018      	ands	r0, r3
    c184:	2300      	movs	r3, #0
    c186:	4298      	cmp	r0, r3
    c188:	d011      	beq.n	c1ae <setvbuf+0x136>
    c18a:	426d      	negs	r5, r5
    c18c:	60a3      	str	r3, [r4, #8]
    c18e:	61a5      	str	r5, [r4, #24]
    c190:	0018      	movs	r0, r3
    c192:	e7d3      	b.n	c13c <setvbuf+0xc4>
    c194:	9801      	ldr	r0, [sp, #4]
    c196:	f7ff fddb 	bl	bd50 <malloc>
    c19a:	1e07      	subs	r7, r0, #0
    c19c:	d0c0      	beq.n	c120 <setvbuf+0xa8>
    c19e:	2380      	movs	r3, #128	; 0x80
    c1a0:	89a2      	ldrh	r2, [r4, #12]
    c1a2:	9d01      	ldr	r5, [sp, #4]
    c1a4:	4313      	orrs	r3, r2
    c1a6:	81a3      	strh	r3, [r4, #12]
    c1a8:	e7d6      	b.n	c158 <setvbuf+0xe0>
    c1aa:	2000      	movs	r0, #0
    c1ac:	e7ba      	b.n	c124 <setvbuf+0xac>
    c1ae:	60a5      	str	r5, [r4, #8]
    c1b0:	e7c4      	b.n	c13c <setvbuf+0xc4>
    c1b2:	60a0      	str	r0, [r4, #8]
    c1b4:	e7c2      	b.n	c13c <setvbuf+0xc4>
    c1b6:	2001      	movs	r0, #1
    c1b8:	4240      	negs	r0, r0
    c1ba:	e7bf      	b.n	c13c <setvbuf+0xc4>
    c1bc:	20000174 	.word	0x20000174
    c1c0:	0000f574 	.word	0x0000f574
    c1c4:	fffff35c 	.word	0xfffff35c
    c1c8:	0000f594 	.word	0x0000f594
    c1cc:	0000f554 	.word	0x0000f554

0000c1d0 <sniprintf>:
    c1d0:	b40c      	push	{r2, r3}
    c1d2:	b530      	push	{r4, r5, lr}
    c1d4:	4b16      	ldr	r3, [pc, #88]	; (c230 <sniprintf+0x60>)
    c1d6:	b09d      	sub	sp, #116	; 0x74
    c1d8:	1e0c      	subs	r4, r1, #0
    c1da:	681d      	ldr	r5, [r3, #0]
    c1dc:	da08      	bge.n	c1f0 <sniprintf+0x20>
    c1de:	238b      	movs	r3, #139	; 0x8b
    c1e0:	2001      	movs	r0, #1
    c1e2:	602b      	str	r3, [r5, #0]
    c1e4:	4240      	negs	r0, r0
    c1e6:	b01d      	add	sp, #116	; 0x74
    c1e8:	bc30      	pop	{r4, r5}
    c1ea:	bc08      	pop	{r3}
    c1ec:	b002      	add	sp, #8
    c1ee:	4718      	bx	r3
    c1f0:	2382      	movs	r3, #130	; 0x82
    c1f2:	a902      	add	r1, sp, #8
    c1f4:	009b      	lsls	r3, r3, #2
    c1f6:	818b      	strh	r3, [r1, #12]
    c1f8:	2300      	movs	r3, #0
    c1fa:	9002      	str	r0, [sp, #8]
    c1fc:	6108      	str	r0, [r1, #16]
    c1fe:	429c      	cmp	r4, r3
    c200:	d000      	beq.n	c204 <sniprintf+0x34>
    c202:	1e63      	subs	r3, r4, #1
    c204:	608b      	str	r3, [r1, #8]
    c206:	614b      	str	r3, [r1, #20]
    c208:	2301      	movs	r3, #1
    c20a:	425b      	negs	r3, r3
    c20c:	81cb      	strh	r3, [r1, #14]
    c20e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    c210:	ab21      	add	r3, sp, #132	; 0x84
    c212:	0028      	movs	r0, r5
    c214:	9301      	str	r3, [sp, #4]
    c216:	f000 fc8d 	bl	cb34 <_svfiprintf_r>
    c21a:	1c43      	adds	r3, r0, #1
    c21c:	da01      	bge.n	c222 <sniprintf+0x52>
    c21e:	238b      	movs	r3, #139	; 0x8b
    c220:	602b      	str	r3, [r5, #0]
    c222:	2c00      	cmp	r4, #0
    c224:	d0df      	beq.n	c1e6 <sniprintf+0x16>
    c226:	2300      	movs	r3, #0
    c228:	9a02      	ldr	r2, [sp, #8]
    c22a:	7013      	strb	r3, [r2, #0]
    c22c:	e7db      	b.n	c1e6 <sniprintf+0x16>
    c22e:	46c0      	nop			; (mov r8, r8)
    c230:	20000174 	.word	0x20000174

0000c234 <siprintf>:
    c234:	b40e      	push	{r1, r2, r3}
    c236:	b510      	push	{r4, lr}
    c238:	b09d      	sub	sp, #116	; 0x74
    c23a:	a902      	add	r1, sp, #8
    c23c:	9002      	str	r0, [sp, #8]
    c23e:	6108      	str	r0, [r1, #16]
    c240:	480b      	ldr	r0, [pc, #44]	; (c270 <siprintf+0x3c>)
    c242:	2482      	movs	r4, #130	; 0x82
    c244:	6088      	str	r0, [r1, #8]
    c246:	6148      	str	r0, [r1, #20]
    c248:	2001      	movs	r0, #1
    c24a:	4240      	negs	r0, r0
    c24c:	ab1f      	add	r3, sp, #124	; 0x7c
    c24e:	81c8      	strh	r0, [r1, #14]
    c250:	4808      	ldr	r0, [pc, #32]	; (c274 <siprintf+0x40>)
    c252:	cb04      	ldmia	r3!, {r2}
    c254:	00a4      	lsls	r4, r4, #2
    c256:	6800      	ldr	r0, [r0, #0]
    c258:	9301      	str	r3, [sp, #4]
    c25a:	818c      	strh	r4, [r1, #12]
    c25c:	f000 fc6a 	bl	cb34 <_svfiprintf_r>
    c260:	2300      	movs	r3, #0
    c262:	9a02      	ldr	r2, [sp, #8]
    c264:	7013      	strb	r3, [r2, #0]
    c266:	b01d      	add	sp, #116	; 0x74
    c268:	bc10      	pop	{r4}
    c26a:	bc08      	pop	{r3}
    c26c:	b003      	add	sp, #12
    c26e:	4718      	bx	r3
    c270:	7fffffff 	.word	0x7fffffff
    c274:	20000174 	.word	0x20000174

0000c278 <strcmp>:
    c278:	7802      	ldrb	r2, [r0, #0]
    c27a:	780b      	ldrb	r3, [r1, #0]
    c27c:	2a00      	cmp	r2, #0
    c27e:	d003      	beq.n	c288 <strcmp+0x10>
    c280:	3001      	adds	r0, #1
    c282:	3101      	adds	r1, #1
    c284:	429a      	cmp	r2, r3
    c286:	d0f7      	beq.n	c278 <strcmp>
    c288:	1ad0      	subs	r0, r2, r3
    c28a:	4770      	bx	lr

0000c28c <strcpy>:
    c28c:	1c03      	adds	r3, r0, #0
    c28e:	780a      	ldrb	r2, [r1, #0]
    c290:	3101      	adds	r1, #1
    c292:	701a      	strb	r2, [r3, #0]
    c294:	3301      	adds	r3, #1
    c296:	2a00      	cmp	r2, #0
    c298:	d1f9      	bne.n	c28e <strcpy+0x2>
    c29a:	4770      	bx	lr

0000c29c <strdup>:
    c29c:	b510      	push	{r4, lr}
    c29e:	4b03      	ldr	r3, [pc, #12]	; (c2ac <strdup+0x10>)
    c2a0:	0001      	movs	r1, r0
    c2a2:	6818      	ldr	r0, [r3, #0]
    c2a4:	f000 f804 	bl	c2b0 <_strdup_r>
    c2a8:	bd10      	pop	{r4, pc}
    c2aa:	46c0      	nop			; (mov r8, r8)
    c2ac:	20000174 	.word	0x20000174

0000c2b0 <_strdup_r>:
    c2b0:	b570      	push	{r4, r5, r6, lr}
    c2b2:	0005      	movs	r5, r0
    c2b4:	0008      	movs	r0, r1
    c2b6:	000e      	movs	r6, r1
    c2b8:	f000 f80d 	bl	c2d6 <strlen>
    c2bc:	1c44      	adds	r4, r0, #1
    c2be:	0021      	movs	r1, r4
    c2c0:	0028      	movs	r0, r5
    c2c2:	f7ff fdc7 	bl	be54 <_malloc_r>
    c2c6:	1e05      	subs	r5, r0, #0
    c2c8:	d003      	beq.n	c2d2 <_strdup_r+0x22>
    c2ca:	0022      	movs	r2, r4
    c2cc:	0031      	movs	r1, r6
    c2ce:	f7ff fd53 	bl	bd78 <memcpy>
    c2d2:	0028      	movs	r0, r5
    c2d4:	bd70      	pop	{r4, r5, r6, pc}

0000c2d6 <strlen>:
    c2d6:	2300      	movs	r3, #0
    c2d8:	5cc2      	ldrb	r2, [r0, r3]
    c2da:	3301      	adds	r3, #1
    c2dc:	2a00      	cmp	r2, #0
    c2de:	d1fb      	bne.n	c2d8 <strlen+0x2>
    c2e0:	1e58      	subs	r0, r3, #1
    c2e2:	4770      	bx	lr

0000c2e4 <strncmp>:
    c2e4:	2300      	movs	r3, #0
    c2e6:	b530      	push	{r4, r5, lr}
    c2e8:	429a      	cmp	r2, r3
    c2ea:	d00a      	beq.n	c302 <strncmp+0x1e>
    c2ec:	3a01      	subs	r2, #1
    c2ee:	5cc4      	ldrb	r4, [r0, r3]
    c2f0:	5ccd      	ldrb	r5, [r1, r3]
    c2f2:	42ac      	cmp	r4, r5
    c2f4:	d104      	bne.n	c300 <strncmp+0x1c>
    c2f6:	429a      	cmp	r2, r3
    c2f8:	d002      	beq.n	c300 <strncmp+0x1c>
    c2fa:	3301      	adds	r3, #1
    c2fc:	2c00      	cmp	r4, #0
    c2fe:	d1f6      	bne.n	c2ee <strncmp+0xa>
    c300:	1b63      	subs	r3, r4, r5
    c302:	0018      	movs	r0, r3
    c304:	bd30      	pop	{r4, r5, pc}

0000c306 <strncpy>:
    c306:	b570      	push	{r4, r5, r6, lr}
    c308:	0004      	movs	r4, r0
    c30a:	2a00      	cmp	r2, #0
    c30c:	d100      	bne.n	c310 <strncpy+0xa>
    c30e:	bd70      	pop	{r4, r5, r6, pc}
    c310:	780d      	ldrb	r5, [r1, #0]
    c312:	1e56      	subs	r6, r2, #1
    c314:	1c63      	adds	r3, r4, #1
    c316:	7025      	strb	r5, [r4, #0]
    c318:	3101      	adds	r1, #1
    c31a:	2d00      	cmp	r5, #0
    c31c:	d105      	bne.n	c32a <strncpy+0x24>
    c31e:	18a4      	adds	r4, r4, r2
    c320:	429c      	cmp	r4, r3
    c322:	d0f4      	beq.n	c30e <strncpy+0x8>
    c324:	701d      	strb	r5, [r3, #0]
    c326:	3301      	adds	r3, #1
    c328:	e7fa      	b.n	c320 <strncpy+0x1a>
    c32a:	001c      	movs	r4, r3
    c32c:	0032      	movs	r2, r6
    c32e:	e7ec      	b.n	c30a <strncpy+0x4>

0000c330 <strrchr>:
    c330:	b570      	push	{r4, r5, r6, lr}
    c332:	000d      	movs	r5, r1
    c334:	2400      	movs	r4, #0
    c336:	2900      	cmp	r1, #0
    c338:	d105      	bne.n	c346 <strrchr+0x16>
    c33a:	f001 f84d 	bl	d3d8 <strchr>
    c33e:	0004      	movs	r4, r0
    c340:	e006      	b.n	c350 <strrchr+0x20>
    c342:	001c      	movs	r4, r3
    c344:	1c58      	adds	r0, r3, #1
    c346:	0029      	movs	r1, r5
    c348:	f001 f846 	bl	d3d8 <strchr>
    c34c:	1e03      	subs	r3, r0, #0
    c34e:	d1f8      	bne.n	c342 <strrchr+0x12>
    c350:	0020      	movs	r0, r4
    c352:	bd70      	pop	{r4, r5, r6, pc}

0000c354 <strstr>:
    c354:	b510      	push	{r4, lr}
    c356:	0002      	movs	r2, r0
    c358:	7800      	ldrb	r0, [r0, #0]
    c35a:	2800      	cmp	r0, #0
    c35c:	d104      	bne.n	c368 <strstr+0x14>
    c35e:	7809      	ldrb	r1, [r1, #0]
    c360:	2900      	cmp	r1, #0
    c362:	d00d      	beq.n	c380 <strstr+0x2c>
    c364:	bd10      	pop	{r4, pc}
    c366:	3201      	adds	r2, #1
    c368:	7810      	ldrb	r0, [r2, #0]
    c36a:	2800      	cmp	r0, #0
    c36c:	d0fa      	beq.n	c364 <strstr+0x10>
    c36e:	2300      	movs	r3, #0
    c370:	5cc8      	ldrb	r0, [r1, r3]
    c372:	2800      	cmp	r0, #0
    c374:	d004      	beq.n	c380 <strstr+0x2c>
    c376:	5cd4      	ldrb	r4, [r2, r3]
    c378:	4284      	cmp	r4, r0
    c37a:	d1f4      	bne.n	c366 <strstr+0x12>
    c37c:	3301      	adds	r3, #1
    c37e:	e7f7      	b.n	c370 <strstr+0x1c>
    c380:	0010      	movs	r0, r2
    c382:	e7ef      	b.n	c364 <strstr+0x10>

0000c384 <_strtol_l.isra.0>:
    c384:	b5f0      	push	{r4, r5, r6, r7, lr}
    c386:	001f      	movs	r7, r3
    c388:	000e      	movs	r6, r1
    c38a:	b087      	sub	sp, #28
    c38c:	9005      	str	r0, [sp, #20]
    c38e:	9103      	str	r1, [sp, #12]
    c390:	9202      	str	r2, [sp, #8]
    c392:	980c      	ldr	r0, [sp, #48]	; 0x30
    c394:	7834      	ldrb	r4, [r6, #0]
    c396:	f000 fae8 	bl	c96a <__locale_ctype_ptr_l>
    c39a:	2208      	movs	r2, #8
    c39c:	1900      	adds	r0, r0, r4
    c39e:	7843      	ldrb	r3, [r0, #1]
    c3a0:	1c75      	adds	r5, r6, #1
    c3a2:	4013      	ands	r3, r2
    c3a4:	d10c      	bne.n	c3c0 <_strtol_l.isra.0+0x3c>
    c3a6:	2c2d      	cmp	r4, #45	; 0x2d
    c3a8:	d10c      	bne.n	c3c4 <_strtol_l.isra.0+0x40>
    c3aa:	3301      	adds	r3, #1
    c3ac:	782c      	ldrb	r4, [r5, #0]
    c3ae:	9301      	str	r3, [sp, #4]
    c3b0:	1cb5      	adds	r5, r6, #2
    c3b2:	2f00      	cmp	r7, #0
    c3b4:	d00c      	beq.n	c3d0 <_strtol_l.isra.0+0x4c>
    c3b6:	2f10      	cmp	r7, #16
    c3b8:	d114      	bne.n	c3e4 <_strtol_l.isra.0+0x60>
    c3ba:	2c30      	cmp	r4, #48	; 0x30
    c3bc:	d00a      	beq.n	c3d4 <_strtol_l.isra.0+0x50>
    c3be:	e011      	b.n	c3e4 <_strtol_l.isra.0+0x60>
    c3c0:	002e      	movs	r6, r5
    c3c2:	e7e6      	b.n	c392 <_strtol_l.isra.0+0xe>
    c3c4:	9301      	str	r3, [sp, #4]
    c3c6:	2c2b      	cmp	r4, #43	; 0x2b
    c3c8:	d1f3      	bne.n	c3b2 <_strtol_l.isra.0+0x2e>
    c3ca:	782c      	ldrb	r4, [r5, #0]
    c3cc:	1cb5      	adds	r5, r6, #2
    c3ce:	e7f0      	b.n	c3b2 <_strtol_l.isra.0+0x2e>
    c3d0:	2c30      	cmp	r4, #48	; 0x30
    c3d2:	d12f      	bne.n	c434 <_strtol_l.isra.0+0xb0>
    c3d4:	2220      	movs	r2, #32
    c3d6:	782b      	ldrb	r3, [r5, #0]
    c3d8:	4393      	bics	r3, r2
    c3da:	2b58      	cmp	r3, #88	; 0x58
    c3dc:	d151      	bne.n	c482 <_strtol_l.isra.0+0xfe>
    c3de:	2710      	movs	r7, #16
    c3e0:	786c      	ldrb	r4, [r5, #1]
    c3e2:	3502      	adds	r5, #2
    c3e4:	9b01      	ldr	r3, [sp, #4]
    c3e6:	4a29      	ldr	r2, [pc, #164]	; (c48c <_strtol_l.isra.0+0x108>)
    c3e8:	0039      	movs	r1, r7
    c3ea:	189e      	adds	r6, r3, r2
    c3ec:	0030      	movs	r0, r6
    c3ee:	f7ff fb6b 	bl	bac8 <__aeabi_uidivmod>
    c3f2:	0030      	movs	r0, r6
    c3f4:	9104      	str	r1, [sp, #16]
    c3f6:	0039      	movs	r1, r7
    c3f8:	f7ff fae0 	bl	b9bc <__udivsi3>
    c3fc:	2101      	movs	r1, #1
    c3fe:	2300      	movs	r3, #0
    c400:	4249      	negs	r1, r1
    c402:	0002      	movs	r2, r0
    c404:	468c      	mov	ip, r1
    c406:	0018      	movs	r0, r3
    c408:	0021      	movs	r1, r4
    c40a:	3930      	subs	r1, #48	; 0x30
    c40c:	2909      	cmp	r1, #9
    c40e:	d813      	bhi.n	c438 <_strtol_l.isra.0+0xb4>
    c410:	000c      	movs	r4, r1
    c412:	42a7      	cmp	r7, r4
    c414:	dd1c      	ble.n	c450 <_strtol_l.isra.0+0xcc>
    c416:	1c59      	adds	r1, r3, #1
    c418:	d009      	beq.n	c42e <_strtol_l.isra.0+0xaa>
    c41a:	4663      	mov	r3, ip
    c41c:	4282      	cmp	r2, r0
    c41e:	d306      	bcc.n	c42e <_strtol_l.isra.0+0xaa>
    c420:	d102      	bne.n	c428 <_strtol_l.isra.0+0xa4>
    c422:	9904      	ldr	r1, [sp, #16]
    c424:	42a1      	cmp	r1, r4
    c426:	db02      	blt.n	c42e <_strtol_l.isra.0+0xaa>
    c428:	2301      	movs	r3, #1
    c42a:	4378      	muls	r0, r7
    c42c:	1820      	adds	r0, r4, r0
    c42e:	782c      	ldrb	r4, [r5, #0]
    c430:	3501      	adds	r5, #1
    c432:	e7e9      	b.n	c408 <_strtol_l.isra.0+0x84>
    c434:	270a      	movs	r7, #10
    c436:	e7d5      	b.n	c3e4 <_strtol_l.isra.0+0x60>
    c438:	0021      	movs	r1, r4
    c43a:	3941      	subs	r1, #65	; 0x41
    c43c:	2919      	cmp	r1, #25
    c43e:	d801      	bhi.n	c444 <_strtol_l.isra.0+0xc0>
    c440:	3c37      	subs	r4, #55	; 0x37
    c442:	e7e6      	b.n	c412 <_strtol_l.isra.0+0x8e>
    c444:	0021      	movs	r1, r4
    c446:	3961      	subs	r1, #97	; 0x61
    c448:	2919      	cmp	r1, #25
    c44a:	d801      	bhi.n	c450 <_strtol_l.isra.0+0xcc>
    c44c:	3c57      	subs	r4, #87	; 0x57
    c44e:	e7e0      	b.n	c412 <_strtol_l.isra.0+0x8e>
    c450:	1c5a      	adds	r2, r3, #1
    c452:	d108      	bne.n	c466 <_strtol_l.isra.0+0xe2>
    c454:	9a05      	ldr	r2, [sp, #20]
    c456:	3323      	adds	r3, #35	; 0x23
    c458:	6013      	str	r3, [r2, #0]
    c45a:	9b02      	ldr	r3, [sp, #8]
    c45c:	0030      	movs	r0, r6
    c45e:	2b00      	cmp	r3, #0
    c460:	d10b      	bne.n	c47a <_strtol_l.isra.0+0xf6>
    c462:	b007      	add	sp, #28
    c464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c466:	9a01      	ldr	r2, [sp, #4]
    c468:	2a00      	cmp	r2, #0
    c46a:	d000      	beq.n	c46e <_strtol_l.isra.0+0xea>
    c46c:	4240      	negs	r0, r0
    c46e:	9a02      	ldr	r2, [sp, #8]
    c470:	2a00      	cmp	r2, #0
    c472:	d0f6      	beq.n	c462 <_strtol_l.isra.0+0xde>
    c474:	9a03      	ldr	r2, [sp, #12]
    c476:	2b00      	cmp	r3, #0
    c478:	d000      	beq.n	c47c <_strtol_l.isra.0+0xf8>
    c47a:	1e6a      	subs	r2, r5, #1
    c47c:	9b02      	ldr	r3, [sp, #8]
    c47e:	601a      	str	r2, [r3, #0]
    c480:	e7ef      	b.n	c462 <_strtol_l.isra.0+0xde>
    c482:	2430      	movs	r4, #48	; 0x30
    c484:	2f00      	cmp	r7, #0
    c486:	d1ad      	bne.n	c3e4 <_strtol_l.isra.0+0x60>
    c488:	3708      	adds	r7, #8
    c48a:	e7ab      	b.n	c3e4 <_strtol_l.isra.0+0x60>
    c48c:	7fffffff 	.word	0x7fffffff

0000c490 <strtol>:
    c490:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c492:	0013      	movs	r3, r2
    c494:	4a06      	ldr	r2, [pc, #24]	; (c4b0 <strtol+0x20>)
    c496:	0005      	movs	r5, r0
    c498:	6810      	ldr	r0, [r2, #0]
    c49a:	6a04      	ldr	r4, [r0, #32]
    c49c:	2c00      	cmp	r4, #0
    c49e:	d100      	bne.n	c4a2 <strtol+0x12>
    c4a0:	4c04      	ldr	r4, [pc, #16]	; (c4b4 <strtol+0x24>)
    c4a2:	000a      	movs	r2, r1
    c4a4:	9400      	str	r4, [sp, #0]
    c4a6:	0029      	movs	r1, r5
    c4a8:	f7ff ff6c 	bl	c384 <_strtol_l.isra.0>
    c4ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c4ae:	46c0      	nop			; (mov r8, r8)
    c4b0:	20000174 	.word	0x20000174
    c4b4:	200001d8 	.word	0x200001d8

0000c4b8 <__swbuf_r>:
    c4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4ba:	0005      	movs	r5, r0
    c4bc:	000e      	movs	r6, r1
    c4be:	0014      	movs	r4, r2
    c4c0:	2800      	cmp	r0, #0
    c4c2:	d004      	beq.n	c4ce <__swbuf_r+0x16>
    c4c4:	6983      	ldr	r3, [r0, #24]
    c4c6:	2b00      	cmp	r3, #0
    c4c8:	d101      	bne.n	c4ce <__swbuf_r+0x16>
    c4ca:	f000 f9b9 	bl	c840 <__sinit>
    c4ce:	4b22      	ldr	r3, [pc, #136]	; (c558 <__swbuf_r+0xa0>)
    c4d0:	429c      	cmp	r4, r3
    c4d2:	d12d      	bne.n	c530 <__swbuf_r+0x78>
    c4d4:	686c      	ldr	r4, [r5, #4]
    c4d6:	69a3      	ldr	r3, [r4, #24]
    c4d8:	60a3      	str	r3, [r4, #8]
    c4da:	89a3      	ldrh	r3, [r4, #12]
    c4dc:	071b      	lsls	r3, r3, #28
    c4de:	d531      	bpl.n	c544 <__swbuf_r+0x8c>
    c4e0:	6923      	ldr	r3, [r4, #16]
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d02e      	beq.n	c544 <__swbuf_r+0x8c>
    c4e6:	6823      	ldr	r3, [r4, #0]
    c4e8:	6922      	ldr	r2, [r4, #16]
    c4ea:	b2f7      	uxtb	r7, r6
    c4ec:	1a98      	subs	r0, r3, r2
    c4ee:	6963      	ldr	r3, [r4, #20]
    c4f0:	b2f6      	uxtb	r6, r6
    c4f2:	4298      	cmp	r0, r3
    c4f4:	db05      	blt.n	c502 <__swbuf_r+0x4a>
    c4f6:	0021      	movs	r1, r4
    c4f8:	0028      	movs	r0, r5
    c4fa:	f000 f933 	bl	c764 <_fflush_r>
    c4fe:	2800      	cmp	r0, #0
    c500:	d126      	bne.n	c550 <__swbuf_r+0x98>
    c502:	68a3      	ldr	r3, [r4, #8]
    c504:	3001      	adds	r0, #1
    c506:	3b01      	subs	r3, #1
    c508:	60a3      	str	r3, [r4, #8]
    c50a:	6823      	ldr	r3, [r4, #0]
    c50c:	1c5a      	adds	r2, r3, #1
    c50e:	6022      	str	r2, [r4, #0]
    c510:	701f      	strb	r7, [r3, #0]
    c512:	6963      	ldr	r3, [r4, #20]
    c514:	4298      	cmp	r0, r3
    c516:	d004      	beq.n	c522 <__swbuf_r+0x6a>
    c518:	89a3      	ldrh	r3, [r4, #12]
    c51a:	07db      	lsls	r3, r3, #31
    c51c:	d51a      	bpl.n	c554 <__swbuf_r+0x9c>
    c51e:	2e0a      	cmp	r6, #10
    c520:	d118      	bne.n	c554 <__swbuf_r+0x9c>
    c522:	0021      	movs	r1, r4
    c524:	0028      	movs	r0, r5
    c526:	f000 f91d 	bl	c764 <_fflush_r>
    c52a:	2800      	cmp	r0, #0
    c52c:	d012      	beq.n	c554 <__swbuf_r+0x9c>
    c52e:	e00f      	b.n	c550 <__swbuf_r+0x98>
    c530:	4b0a      	ldr	r3, [pc, #40]	; (c55c <__swbuf_r+0xa4>)
    c532:	429c      	cmp	r4, r3
    c534:	d101      	bne.n	c53a <__swbuf_r+0x82>
    c536:	68ac      	ldr	r4, [r5, #8]
    c538:	e7cd      	b.n	c4d6 <__swbuf_r+0x1e>
    c53a:	4b09      	ldr	r3, [pc, #36]	; (c560 <__swbuf_r+0xa8>)
    c53c:	429c      	cmp	r4, r3
    c53e:	d1ca      	bne.n	c4d6 <__swbuf_r+0x1e>
    c540:	68ec      	ldr	r4, [r5, #12]
    c542:	e7c8      	b.n	c4d6 <__swbuf_r+0x1e>
    c544:	0021      	movs	r1, r4
    c546:	0028      	movs	r0, r5
    c548:	f000 f80c 	bl	c564 <__swsetup_r>
    c54c:	2800      	cmp	r0, #0
    c54e:	d0ca      	beq.n	c4e6 <__swbuf_r+0x2e>
    c550:	2601      	movs	r6, #1
    c552:	4276      	negs	r6, r6
    c554:	0030      	movs	r0, r6
    c556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c558:	0000f574 	.word	0x0000f574
    c55c:	0000f594 	.word	0x0000f594
    c560:	0000f554 	.word	0x0000f554

0000c564 <__swsetup_r>:
    c564:	4b36      	ldr	r3, [pc, #216]	; (c640 <__swsetup_r+0xdc>)
    c566:	b570      	push	{r4, r5, r6, lr}
    c568:	681d      	ldr	r5, [r3, #0]
    c56a:	0006      	movs	r6, r0
    c56c:	000c      	movs	r4, r1
    c56e:	2d00      	cmp	r5, #0
    c570:	d005      	beq.n	c57e <__swsetup_r+0x1a>
    c572:	69ab      	ldr	r3, [r5, #24]
    c574:	2b00      	cmp	r3, #0
    c576:	d102      	bne.n	c57e <__swsetup_r+0x1a>
    c578:	0028      	movs	r0, r5
    c57a:	f000 f961 	bl	c840 <__sinit>
    c57e:	4b31      	ldr	r3, [pc, #196]	; (c644 <__swsetup_r+0xe0>)
    c580:	429c      	cmp	r4, r3
    c582:	d10f      	bne.n	c5a4 <__swsetup_r+0x40>
    c584:	686c      	ldr	r4, [r5, #4]
    c586:	230c      	movs	r3, #12
    c588:	5ee2      	ldrsh	r2, [r4, r3]
    c58a:	b293      	uxth	r3, r2
    c58c:	0719      	lsls	r1, r3, #28
    c58e:	d42d      	bmi.n	c5ec <__swsetup_r+0x88>
    c590:	06d9      	lsls	r1, r3, #27
    c592:	d411      	bmi.n	c5b8 <__swsetup_r+0x54>
    c594:	2309      	movs	r3, #9
    c596:	2001      	movs	r0, #1
    c598:	6033      	str	r3, [r6, #0]
    c59a:	3337      	adds	r3, #55	; 0x37
    c59c:	4313      	orrs	r3, r2
    c59e:	81a3      	strh	r3, [r4, #12]
    c5a0:	4240      	negs	r0, r0
    c5a2:	bd70      	pop	{r4, r5, r6, pc}
    c5a4:	4b28      	ldr	r3, [pc, #160]	; (c648 <__swsetup_r+0xe4>)
    c5a6:	429c      	cmp	r4, r3
    c5a8:	d101      	bne.n	c5ae <__swsetup_r+0x4a>
    c5aa:	68ac      	ldr	r4, [r5, #8]
    c5ac:	e7eb      	b.n	c586 <__swsetup_r+0x22>
    c5ae:	4b27      	ldr	r3, [pc, #156]	; (c64c <__swsetup_r+0xe8>)
    c5b0:	429c      	cmp	r4, r3
    c5b2:	d1e8      	bne.n	c586 <__swsetup_r+0x22>
    c5b4:	68ec      	ldr	r4, [r5, #12]
    c5b6:	e7e6      	b.n	c586 <__swsetup_r+0x22>
    c5b8:	075b      	lsls	r3, r3, #29
    c5ba:	d513      	bpl.n	c5e4 <__swsetup_r+0x80>
    c5bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c5be:	2900      	cmp	r1, #0
    c5c0:	d008      	beq.n	c5d4 <__swsetup_r+0x70>
    c5c2:	0023      	movs	r3, r4
    c5c4:	3344      	adds	r3, #68	; 0x44
    c5c6:	4299      	cmp	r1, r3
    c5c8:	d002      	beq.n	c5d0 <__swsetup_r+0x6c>
    c5ca:	0030      	movs	r0, r6
    c5cc:	f7ff fbf8 	bl	bdc0 <_free_r>
    c5d0:	2300      	movs	r3, #0
    c5d2:	6363      	str	r3, [r4, #52]	; 0x34
    c5d4:	2224      	movs	r2, #36	; 0x24
    c5d6:	89a3      	ldrh	r3, [r4, #12]
    c5d8:	4393      	bics	r3, r2
    c5da:	81a3      	strh	r3, [r4, #12]
    c5dc:	2300      	movs	r3, #0
    c5de:	6063      	str	r3, [r4, #4]
    c5e0:	6923      	ldr	r3, [r4, #16]
    c5e2:	6023      	str	r3, [r4, #0]
    c5e4:	2308      	movs	r3, #8
    c5e6:	89a2      	ldrh	r2, [r4, #12]
    c5e8:	4313      	orrs	r3, r2
    c5ea:	81a3      	strh	r3, [r4, #12]
    c5ec:	6923      	ldr	r3, [r4, #16]
    c5ee:	2b00      	cmp	r3, #0
    c5f0:	d10b      	bne.n	c60a <__swsetup_r+0xa6>
    c5f2:	21a0      	movs	r1, #160	; 0xa0
    c5f4:	2280      	movs	r2, #128	; 0x80
    c5f6:	89a3      	ldrh	r3, [r4, #12]
    c5f8:	0089      	lsls	r1, r1, #2
    c5fa:	0092      	lsls	r2, r2, #2
    c5fc:	400b      	ands	r3, r1
    c5fe:	4293      	cmp	r3, r2
    c600:	d003      	beq.n	c60a <__swsetup_r+0xa6>
    c602:	0021      	movs	r1, r4
    c604:	0030      	movs	r0, r6
    c606:	f000 f9db 	bl	c9c0 <__smakebuf_r>
    c60a:	2301      	movs	r3, #1
    c60c:	89a2      	ldrh	r2, [r4, #12]
    c60e:	4013      	ands	r3, r2
    c610:	d011      	beq.n	c636 <__swsetup_r+0xd2>
    c612:	2300      	movs	r3, #0
    c614:	60a3      	str	r3, [r4, #8]
    c616:	6963      	ldr	r3, [r4, #20]
    c618:	425b      	negs	r3, r3
    c61a:	61a3      	str	r3, [r4, #24]
    c61c:	2000      	movs	r0, #0
    c61e:	6923      	ldr	r3, [r4, #16]
    c620:	4283      	cmp	r3, r0
    c622:	d1be      	bne.n	c5a2 <__swsetup_r+0x3e>
    c624:	230c      	movs	r3, #12
    c626:	5ee2      	ldrsh	r2, [r4, r3]
    c628:	0613      	lsls	r3, r2, #24
    c62a:	d5ba      	bpl.n	c5a2 <__swsetup_r+0x3e>
    c62c:	2340      	movs	r3, #64	; 0x40
    c62e:	4313      	orrs	r3, r2
    c630:	81a3      	strh	r3, [r4, #12]
    c632:	3801      	subs	r0, #1
    c634:	e7b5      	b.n	c5a2 <__swsetup_r+0x3e>
    c636:	0792      	lsls	r2, r2, #30
    c638:	d400      	bmi.n	c63c <__swsetup_r+0xd8>
    c63a:	6963      	ldr	r3, [r4, #20]
    c63c:	60a3      	str	r3, [r4, #8]
    c63e:	e7ed      	b.n	c61c <__swsetup_r+0xb8>
    c640:	20000174 	.word	0x20000174
    c644:	0000f574 	.word	0x0000f574
    c648:	0000f594 	.word	0x0000f594
    c64c:	0000f554 	.word	0x0000f554

0000c650 <__sflush_r>:
    c650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c652:	898a      	ldrh	r2, [r1, #12]
    c654:	0005      	movs	r5, r0
    c656:	000c      	movs	r4, r1
    c658:	0713      	lsls	r3, r2, #28
    c65a:	d460      	bmi.n	c71e <__sflush_r+0xce>
    c65c:	684b      	ldr	r3, [r1, #4]
    c65e:	2b00      	cmp	r3, #0
    c660:	dc04      	bgt.n	c66c <__sflush_r+0x1c>
    c662:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c664:	2b00      	cmp	r3, #0
    c666:	dc01      	bgt.n	c66c <__sflush_r+0x1c>
    c668:	2000      	movs	r0, #0
    c66a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c66c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c66e:	2f00      	cmp	r7, #0
    c670:	d0fa      	beq.n	c668 <__sflush_r+0x18>
    c672:	2300      	movs	r3, #0
    c674:	682e      	ldr	r6, [r5, #0]
    c676:	602b      	str	r3, [r5, #0]
    c678:	2380      	movs	r3, #128	; 0x80
    c67a:	015b      	lsls	r3, r3, #5
    c67c:	401a      	ands	r2, r3
    c67e:	d034      	beq.n	c6ea <__sflush_r+0x9a>
    c680:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c682:	89a3      	ldrh	r3, [r4, #12]
    c684:	075b      	lsls	r3, r3, #29
    c686:	d506      	bpl.n	c696 <__sflush_r+0x46>
    c688:	6863      	ldr	r3, [r4, #4]
    c68a:	1ac0      	subs	r0, r0, r3
    c68c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c68e:	2b00      	cmp	r3, #0
    c690:	d001      	beq.n	c696 <__sflush_r+0x46>
    c692:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c694:	1ac0      	subs	r0, r0, r3
    c696:	0002      	movs	r2, r0
    c698:	6a21      	ldr	r1, [r4, #32]
    c69a:	2300      	movs	r3, #0
    c69c:	0028      	movs	r0, r5
    c69e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c6a0:	47b8      	blx	r7
    c6a2:	89a1      	ldrh	r1, [r4, #12]
    c6a4:	1c43      	adds	r3, r0, #1
    c6a6:	d106      	bne.n	c6b6 <__sflush_r+0x66>
    c6a8:	682b      	ldr	r3, [r5, #0]
    c6aa:	2b1d      	cmp	r3, #29
    c6ac:	d831      	bhi.n	c712 <__sflush_r+0xc2>
    c6ae:	4a2c      	ldr	r2, [pc, #176]	; (c760 <__sflush_r+0x110>)
    c6b0:	40da      	lsrs	r2, r3
    c6b2:	07d3      	lsls	r3, r2, #31
    c6b4:	d52d      	bpl.n	c712 <__sflush_r+0xc2>
    c6b6:	2300      	movs	r3, #0
    c6b8:	6063      	str	r3, [r4, #4]
    c6ba:	6923      	ldr	r3, [r4, #16]
    c6bc:	6023      	str	r3, [r4, #0]
    c6be:	04cb      	lsls	r3, r1, #19
    c6c0:	d505      	bpl.n	c6ce <__sflush_r+0x7e>
    c6c2:	1c43      	adds	r3, r0, #1
    c6c4:	d102      	bne.n	c6cc <__sflush_r+0x7c>
    c6c6:	682b      	ldr	r3, [r5, #0]
    c6c8:	2b00      	cmp	r3, #0
    c6ca:	d100      	bne.n	c6ce <__sflush_r+0x7e>
    c6cc:	6560      	str	r0, [r4, #84]	; 0x54
    c6ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c6d0:	602e      	str	r6, [r5, #0]
    c6d2:	2900      	cmp	r1, #0
    c6d4:	d0c8      	beq.n	c668 <__sflush_r+0x18>
    c6d6:	0023      	movs	r3, r4
    c6d8:	3344      	adds	r3, #68	; 0x44
    c6da:	4299      	cmp	r1, r3
    c6dc:	d002      	beq.n	c6e4 <__sflush_r+0x94>
    c6de:	0028      	movs	r0, r5
    c6e0:	f7ff fb6e 	bl	bdc0 <_free_r>
    c6e4:	2000      	movs	r0, #0
    c6e6:	6360      	str	r0, [r4, #52]	; 0x34
    c6e8:	e7bf      	b.n	c66a <__sflush_r+0x1a>
    c6ea:	2301      	movs	r3, #1
    c6ec:	6a21      	ldr	r1, [r4, #32]
    c6ee:	0028      	movs	r0, r5
    c6f0:	47b8      	blx	r7
    c6f2:	1c43      	adds	r3, r0, #1
    c6f4:	d1c5      	bne.n	c682 <__sflush_r+0x32>
    c6f6:	682b      	ldr	r3, [r5, #0]
    c6f8:	2b00      	cmp	r3, #0
    c6fa:	d0c2      	beq.n	c682 <__sflush_r+0x32>
    c6fc:	2b1d      	cmp	r3, #29
    c6fe:	d001      	beq.n	c704 <__sflush_r+0xb4>
    c700:	2b16      	cmp	r3, #22
    c702:	d101      	bne.n	c708 <__sflush_r+0xb8>
    c704:	602e      	str	r6, [r5, #0]
    c706:	e7af      	b.n	c668 <__sflush_r+0x18>
    c708:	2340      	movs	r3, #64	; 0x40
    c70a:	89a2      	ldrh	r2, [r4, #12]
    c70c:	4313      	orrs	r3, r2
    c70e:	81a3      	strh	r3, [r4, #12]
    c710:	e7ab      	b.n	c66a <__sflush_r+0x1a>
    c712:	2340      	movs	r3, #64	; 0x40
    c714:	430b      	orrs	r3, r1
    c716:	2001      	movs	r0, #1
    c718:	81a3      	strh	r3, [r4, #12]
    c71a:	4240      	negs	r0, r0
    c71c:	e7a5      	b.n	c66a <__sflush_r+0x1a>
    c71e:	690f      	ldr	r7, [r1, #16]
    c720:	2f00      	cmp	r7, #0
    c722:	d0a1      	beq.n	c668 <__sflush_r+0x18>
    c724:	680b      	ldr	r3, [r1, #0]
    c726:	600f      	str	r7, [r1, #0]
    c728:	1bdb      	subs	r3, r3, r7
    c72a:	9301      	str	r3, [sp, #4]
    c72c:	2300      	movs	r3, #0
    c72e:	0792      	lsls	r2, r2, #30
    c730:	d100      	bne.n	c734 <__sflush_r+0xe4>
    c732:	694b      	ldr	r3, [r1, #20]
    c734:	60a3      	str	r3, [r4, #8]
    c736:	9b01      	ldr	r3, [sp, #4]
    c738:	2b00      	cmp	r3, #0
    c73a:	dc00      	bgt.n	c73e <__sflush_r+0xee>
    c73c:	e794      	b.n	c668 <__sflush_r+0x18>
    c73e:	9b01      	ldr	r3, [sp, #4]
    c740:	003a      	movs	r2, r7
    c742:	6a21      	ldr	r1, [r4, #32]
    c744:	0028      	movs	r0, r5
    c746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c748:	47b0      	blx	r6
    c74a:	2800      	cmp	r0, #0
    c74c:	dc03      	bgt.n	c756 <__sflush_r+0x106>
    c74e:	2340      	movs	r3, #64	; 0x40
    c750:	89a2      	ldrh	r2, [r4, #12]
    c752:	4313      	orrs	r3, r2
    c754:	e7df      	b.n	c716 <__sflush_r+0xc6>
    c756:	9b01      	ldr	r3, [sp, #4]
    c758:	183f      	adds	r7, r7, r0
    c75a:	1a1b      	subs	r3, r3, r0
    c75c:	9301      	str	r3, [sp, #4]
    c75e:	e7ea      	b.n	c736 <__sflush_r+0xe6>
    c760:	20400001 	.word	0x20400001

0000c764 <_fflush_r>:
    c764:	690b      	ldr	r3, [r1, #16]
    c766:	b570      	push	{r4, r5, r6, lr}
    c768:	0005      	movs	r5, r0
    c76a:	000c      	movs	r4, r1
    c76c:	2b00      	cmp	r3, #0
    c76e:	d101      	bne.n	c774 <_fflush_r+0x10>
    c770:	2000      	movs	r0, #0
    c772:	bd70      	pop	{r4, r5, r6, pc}
    c774:	2800      	cmp	r0, #0
    c776:	d004      	beq.n	c782 <_fflush_r+0x1e>
    c778:	6983      	ldr	r3, [r0, #24]
    c77a:	2b00      	cmp	r3, #0
    c77c:	d101      	bne.n	c782 <_fflush_r+0x1e>
    c77e:	f000 f85f 	bl	c840 <__sinit>
    c782:	4b0b      	ldr	r3, [pc, #44]	; (c7b0 <_fflush_r+0x4c>)
    c784:	429c      	cmp	r4, r3
    c786:	d109      	bne.n	c79c <_fflush_r+0x38>
    c788:	686c      	ldr	r4, [r5, #4]
    c78a:	220c      	movs	r2, #12
    c78c:	5ea3      	ldrsh	r3, [r4, r2]
    c78e:	2b00      	cmp	r3, #0
    c790:	d0ee      	beq.n	c770 <_fflush_r+0xc>
    c792:	0021      	movs	r1, r4
    c794:	0028      	movs	r0, r5
    c796:	f7ff ff5b 	bl	c650 <__sflush_r>
    c79a:	e7ea      	b.n	c772 <_fflush_r+0xe>
    c79c:	4b05      	ldr	r3, [pc, #20]	; (c7b4 <_fflush_r+0x50>)
    c79e:	429c      	cmp	r4, r3
    c7a0:	d101      	bne.n	c7a6 <_fflush_r+0x42>
    c7a2:	68ac      	ldr	r4, [r5, #8]
    c7a4:	e7f1      	b.n	c78a <_fflush_r+0x26>
    c7a6:	4b04      	ldr	r3, [pc, #16]	; (c7b8 <_fflush_r+0x54>)
    c7a8:	429c      	cmp	r4, r3
    c7aa:	d1ee      	bne.n	c78a <_fflush_r+0x26>
    c7ac:	68ec      	ldr	r4, [r5, #12]
    c7ae:	e7ec      	b.n	c78a <_fflush_r+0x26>
    c7b0:	0000f574 	.word	0x0000f574
    c7b4:	0000f594 	.word	0x0000f594
    c7b8:	0000f554 	.word	0x0000f554

0000c7bc <_cleanup_r>:
    c7bc:	b510      	push	{r4, lr}
    c7be:	4902      	ldr	r1, [pc, #8]	; (c7c8 <_cleanup_r+0xc>)
    c7c0:	f000 f8b2 	bl	c928 <_fwalk_reent>
    c7c4:	bd10      	pop	{r4, pc}
    c7c6:	46c0      	nop			; (mov r8, r8)
    c7c8:	0000c765 	.word	0x0000c765

0000c7cc <std.isra.0>:
    c7cc:	2300      	movs	r3, #0
    c7ce:	b510      	push	{r4, lr}
    c7d0:	0004      	movs	r4, r0
    c7d2:	6003      	str	r3, [r0, #0]
    c7d4:	6043      	str	r3, [r0, #4]
    c7d6:	6083      	str	r3, [r0, #8]
    c7d8:	8181      	strh	r1, [r0, #12]
    c7da:	6643      	str	r3, [r0, #100]	; 0x64
    c7dc:	81c2      	strh	r2, [r0, #14]
    c7de:	6103      	str	r3, [r0, #16]
    c7e0:	6143      	str	r3, [r0, #20]
    c7e2:	6183      	str	r3, [r0, #24]
    c7e4:	0019      	movs	r1, r3
    c7e6:	2208      	movs	r2, #8
    c7e8:	305c      	adds	r0, #92	; 0x5c
    c7ea:	f7ff fae0 	bl	bdae <memset>
    c7ee:	4b05      	ldr	r3, [pc, #20]	; (c804 <std.isra.0+0x38>)
    c7f0:	6224      	str	r4, [r4, #32]
    c7f2:	6263      	str	r3, [r4, #36]	; 0x24
    c7f4:	4b04      	ldr	r3, [pc, #16]	; (c808 <std.isra.0+0x3c>)
    c7f6:	62a3      	str	r3, [r4, #40]	; 0x28
    c7f8:	4b04      	ldr	r3, [pc, #16]	; (c80c <std.isra.0+0x40>)
    c7fa:	62e3      	str	r3, [r4, #44]	; 0x2c
    c7fc:	4b04      	ldr	r3, [pc, #16]	; (c810 <std.isra.0+0x44>)
    c7fe:	6323      	str	r3, [r4, #48]	; 0x30
    c800:	bd10      	pop	{r4, pc}
    c802:	46c0      	nop			; (mov r8, r8)
    c804:	0000d341 	.word	0x0000d341
    c808:	0000d369 	.word	0x0000d369
    c80c:	0000d3a1 	.word	0x0000d3a1
    c810:	0000d3cd 	.word	0x0000d3cd

0000c814 <__sfmoreglue>:
    c814:	b570      	push	{r4, r5, r6, lr}
    c816:	2568      	movs	r5, #104	; 0x68
    c818:	1e4a      	subs	r2, r1, #1
    c81a:	4355      	muls	r5, r2
    c81c:	000e      	movs	r6, r1
    c81e:	0029      	movs	r1, r5
    c820:	3174      	adds	r1, #116	; 0x74
    c822:	f7ff fb17 	bl	be54 <_malloc_r>
    c826:	1e04      	subs	r4, r0, #0
    c828:	d008      	beq.n	c83c <__sfmoreglue+0x28>
    c82a:	2100      	movs	r1, #0
    c82c:	002a      	movs	r2, r5
    c82e:	6001      	str	r1, [r0, #0]
    c830:	6046      	str	r6, [r0, #4]
    c832:	300c      	adds	r0, #12
    c834:	60a0      	str	r0, [r4, #8]
    c836:	3268      	adds	r2, #104	; 0x68
    c838:	f7ff fab9 	bl	bdae <memset>
    c83c:	0020      	movs	r0, r4
    c83e:	bd70      	pop	{r4, r5, r6, pc}

0000c840 <__sinit>:
    c840:	6983      	ldr	r3, [r0, #24]
    c842:	b513      	push	{r0, r1, r4, lr}
    c844:	0004      	movs	r4, r0
    c846:	2b00      	cmp	r3, #0
    c848:	d128      	bne.n	c89c <__sinit+0x5c>
    c84a:	6483      	str	r3, [r0, #72]	; 0x48
    c84c:	64c3      	str	r3, [r0, #76]	; 0x4c
    c84e:	6503      	str	r3, [r0, #80]	; 0x50
    c850:	4b13      	ldr	r3, [pc, #76]	; (c8a0 <__sinit+0x60>)
    c852:	4a14      	ldr	r2, [pc, #80]	; (c8a4 <__sinit+0x64>)
    c854:	681b      	ldr	r3, [r3, #0]
    c856:	6282      	str	r2, [r0, #40]	; 0x28
    c858:	9301      	str	r3, [sp, #4]
    c85a:	4298      	cmp	r0, r3
    c85c:	d101      	bne.n	c862 <__sinit+0x22>
    c85e:	2301      	movs	r3, #1
    c860:	6183      	str	r3, [r0, #24]
    c862:	0020      	movs	r0, r4
    c864:	f000 f820 	bl	c8a8 <__sfp>
    c868:	6060      	str	r0, [r4, #4]
    c86a:	0020      	movs	r0, r4
    c86c:	f000 f81c 	bl	c8a8 <__sfp>
    c870:	60a0      	str	r0, [r4, #8]
    c872:	0020      	movs	r0, r4
    c874:	f000 f818 	bl	c8a8 <__sfp>
    c878:	2200      	movs	r2, #0
    c87a:	60e0      	str	r0, [r4, #12]
    c87c:	2104      	movs	r1, #4
    c87e:	6860      	ldr	r0, [r4, #4]
    c880:	f7ff ffa4 	bl	c7cc <std.isra.0>
    c884:	2201      	movs	r2, #1
    c886:	2109      	movs	r1, #9
    c888:	68a0      	ldr	r0, [r4, #8]
    c88a:	f7ff ff9f 	bl	c7cc <std.isra.0>
    c88e:	2202      	movs	r2, #2
    c890:	2112      	movs	r1, #18
    c892:	68e0      	ldr	r0, [r4, #12]
    c894:	f7ff ff9a 	bl	c7cc <std.isra.0>
    c898:	2301      	movs	r3, #1
    c89a:	61a3      	str	r3, [r4, #24]
    c89c:	bd13      	pop	{r0, r1, r4, pc}
    c89e:	46c0      	nop			; (mov r8, r8)
    c8a0:	0000f550 	.word	0x0000f550
    c8a4:	0000c7bd 	.word	0x0000c7bd

0000c8a8 <__sfp>:
    c8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8aa:	4b1e      	ldr	r3, [pc, #120]	; (c924 <__sfp+0x7c>)
    c8ac:	0007      	movs	r7, r0
    c8ae:	681e      	ldr	r6, [r3, #0]
    c8b0:	69b3      	ldr	r3, [r6, #24]
    c8b2:	2b00      	cmp	r3, #0
    c8b4:	d102      	bne.n	c8bc <__sfp+0x14>
    c8b6:	0030      	movs	r0, r6
    c8b8:	f7ff ffc2 	bl	c840 <__sinit>
    c8bc:	3648      	adds	r6, #72	; 0x48
    c8be:	68b4      	ldr	r4, [r6, #8]
    c8c0:	6873      	ldr	r3, [r6, #4]
    c8c2:	3b01      	subs	r3, #1
    c8c4:	d504      	bpl.n	c8d0 <__sfp+0x28>
    c8c6:	6833      	ldr	r3, [r6, #0]
    c8c8:	2b00      	cmp	r3, #0
    c8ca:	d007      	beq.n	c8dc <__sfp+0x34>
    c8cc:	6836      	ldr	r6, [r6, #0]
    c8ce:	e7f6      	b.n	c8be <__sfp+0x16>
    c8d0:	220c      	movs	r2, #12
    c8d2:	5ea5      	ldrsh	r5, [r4, r2]
    c8d4:	2d00      	cmp	r5, #0
    c8d6:	d00d      	beq.n	c8f4 <__sfp+0x4c>
    c8d8:	3468      	adds	r4, #104	; 0x68
    c8da:	e7f2      	b.n	c8c2 <__sfp+0x1a>
    c8dc:	2104      	movs	r1, #4
    c8de:	0038      	movs	r0, r7
    c8e0:	f7ff ff98 	bl	c814 <__sfmoreglue>
    c8e4:	6030      	str	r0, [r6, #0]
    c8e6:	2800      	cmp	r0, #0
    c8e8:	d1f0      	bne.n	c8cc <__sfp+0x24>
    c8ea:	230c      	movs	r3, #12
    c8ec:	0004      	movs	r4, r0
    c8ee:	603b      	str	r3, [r7, #0]
    c8f0:	0020      	movs	r0, r4
    c8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c8f4:	2301      	movs	r3, #1
    c8f6:	0020      	movs	r0, r4
    c8f8:	425b      	negs	r3, r3
    c8fa:	81e3      	strh	r3, [r4, #14]
    c8fc:	3302      	adds	r3, #2
    c8fe:	81a3      	strh	r3, [r4, #12]
    c900:	6665      	str	r5, [r4, #100]	; 0x64
    c902:	6025      	str	r5, [r4, #0]
    c904:	60a5      	str	r5, [r4, #8]
    c906:	6065      	str	r5, [r4, #4]
    c908:	6125      	str	r5, [r4, #16]
    c90a:	6165      	str	r5, [r4, #20]
    c90c:	61a5      	str	r5, [r4, #24]
    c90e:	2208      	movs	r2, #8
    c910:	0029      	movs	r1, r5
    c912:	305c      	adds	r0, #92	; 0x5c
    c914:	f7ff fa4b 	bl	bdae <memset>
    c918:	6365      	str	r5, [r4, #52]	; 0x34
    c91a:	63a5      	str	r5, [r4, #56]	; 0x38
    c91c:	64a5      	str	r5, [r4, #72]	; 0x48
    c91e:	64e5      	str	r5, [r4, #76]	; 0x4c
    c920:	e7e6      	b.n	c8f0 <__sfp+0x48>
    c922:	46c0      	nop			; (mov r8, r8)
    c924:	0000f550 	.word	0x0000f550

0000c928 <_fwalk_reent>:
    c928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c92a:	0004      	movs	r4, r0
    c92c:	0007      	movs	r7, r0
    c92e:	2600      	movs	r6, #0
    c930:	9101      	str	r1, [sp, #4]
    c932:	3448      	adds	r4, #72	; 0x48
    c934:	2c00      	cmp	r4, #0
    c936:	d101      	bne.n	c93c <_fwalk_reent+0x14>
    c938:	0030      	movs	r0, r6
    c93a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c93c:	6863      	ldr	r3, [r4, #4]
    c93e:	68a5      	ldr	r5, [r4, #8]
    c940:	9300      	str	r3, [sp, #0]
    c942:	9b00      	ldr	r3, [sp, #0]
    c944:	3b01      	subs	r3, #1
    c946:	9300      	str	r3, [sp, #0]
    c948:	d501      	bpl.n	c94e <_fwalk_reent+0x26>
    c94a:	6824      	ldr	r4, [r4, #0]
    c94c:	e7f2      	b.n	c934 <_fwalk_reent+0xc>
    c94e:	89ab      	ldrh	r3, [r5, #12]
    c950:	2b01      	cmp	r3, #1
    c952:	d908      	bls.n	c966 <_fwalk_reent+0x3e>
    c954:	220e      	movs	r2, #14
    c956:	5eab      	ldrsh	r3, [r5, r2]
    c958:	3301      	adds	r3, #1
    c95a:	d004      	beq.n	c966 <_fwalk_reent+0x3e>
    c95c:	0029      	movs	r1, r5
    c95e:	0038      	movs	r0, r7
    c960:	9b01      	ldr	r3, [sp, #4]
    c962:	4798      	blx	r3
    c964:	4306      	orrs	r6, r0
    c966:	3568      	adds	r5, #104	; 0x68
    c968:	e7eb      	b.n	c942 <_fwalk_reent+0x1a>

0000c96a <__locale_ctype_ptr_l>:
    c96a:	30ec      	adds	r0, #236	; 0xec
    c96c:	6800      	ldr	r0, [r0, #0]
    c96e:	4770      	bx	lr

0000c970 <__swhatbuf_r>:
    c970:	b570      	push	{r4, r5, r6, lr}
    c972:	000e      	movs	r6, r1
    c974:	001d      	movs	r5, r3
    c976:	230e      	movs	r3, #14
    c978:	5ec9      	ldrsh	r1, [r1, r3]
    c97a:	b090      	sub	sp, #64	; 0x40
    c97c:	0014      	movs	r4, r2
    c97e:	2900      	cmp	r1, #0
    c980:	da07      	bge.n	c992 <__swhatbuf_r+0x22>
    c982:	2300      	movs	r3, #0
    c984:	602b      	str	r3, [r5, #0]
    c986:	89b3      	ldrh	r3, [r6, #12]
    c988:	061b      	lsls	r3, r3, #24
    c98a:	d411      	bmi.n	c9b0 <__swhatbuf_r+0x40>
    c98c:	2380      	movs	r3, #128	; 0x80
    c98e:	00db      	lsls	r3, r3, #3
    c990:	e00f      	b.n	c9b2 <__swhatbuf_r+0x42>
    c992:	aa01      	add	r2, sp, #4
    c994:	f000 fd60 	bl	d458 <_fstat_r>
    c998:	2800      	cmp	r0, #0
    c99a:	dbf2      	blt.n	c982 <__swhatbuf_r+0x12>
    c99c:	22f0      	movs	r2, #240	; 0xf0
    c99e:	9b02      	ldr	r3, [sp, #8]
    c9a0:	0212      	lsls	r2, r2, #8
    c9a2:	4013      	ands	r3, r2
    c9a4:	4a05      	ldr	r2, [pc, #20]	; (c9bc <__swhatbuf_r+0x4c>)
    c9a6:	189b      	adds	r3, r3, r2
    c9a8:	425a      	negs	r2, r3
    c9aa:	4153      	adcs	r3, r2
    c9ac:	602b      	str	r3, [r5, #0]
    c9ae:	e7ed      	b.n	c98c <__swhatbuf_r+0x1c>
    c9b0:	2340      	movs	r3, #64	; 0x40
    c9b2:	2000      	movs	r0, #0
    c9b4:	6023      	str	r3, [r4, #0]
    c9b6:	b010      	add	sp, #64	; 0x40
    c9b8:	bd70      	pop	{r4, r5, r6, pc}
    c9ba:	46c0      	nop			; (mov r8, r8)
    c9bc:	ffffe000 	.word	0xffffe000

0000c9c0 <__smakebuf_r>:
    c9c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c9c2:	2602      	movs	r6, #2
    c9c4:	898b      	ldrh	r3, [r1, #12]
    c9c6:	0005      	movs	r5, r0
    c9c8:	000c      	movs	r4, r1
    c9ca:	4233      	tst	r3, r6
    c9cc:	d006      	beq.n	c9dc <__smakebuf_r+0x1c>
    c9ce:	0023      	movs	r3, r4
    c9d0:	3347      	adds	r3, #71	; 0x47
    c9d2:	6023      	str	r3, [r4, #0]
    c9d4:	6123      	str	r3, [r4, #16]
    c9d6:	2301      	movs	r3, #1
    c9d8:	6163      	str	r3, [r4, #20]
    c9da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    c9dc:	ab01      	add	r3, sp, #4
    c9de:	466a      	mov	r2, sp
    c9e0:	f7ff ffc6 	bl	c970 <__swhatbuf_r>
    c9e4:	9900      	ldr	r1, [sp, #0]
    c9e6:	0007      	movs	r7, r0
    c9e8:	0028      	movs	r0, r5
    c9ea:	f7ff fa33 	bl	be54 <_malloc_r>
    c9ee:	2800      	cmp	r0, #0
    c9f0:	d108      	bne.n	ca04 <__smakebuf_r+0x44>
    c9f2:	220c      	movs	r2, #12
    c9f4:	5ea3      	ldrsh	r3, [r4, r2]
    c9f6:	059a      	lsls	r2, r3, #22
    c9f8:	d4ef      	bmi.n	c9da <__smakebuf_r+0x1a>
    c9fa:	2203      	movs	r2, #3
    c9fc:	4393      	bics	r3, r2
    c9fe:	431e      	orrs	r6, r3
    ca00:	81a6      	strh	r6, [r4, #12]
    ca02:	e7e4      	b.n	c9ce <__smakebuf_r+0xe>
    ca04:	4b0f      	ldr	r3, [pc, #60]	; (ca44 <__smakebuf_r+0x84>)
    ca06:	62ab      	str	r3, [r5, #40]	; 0x28
    ca08:	2380      	movs	r3, #128	; 0x80
    ca0a:	89a2      	ldrh	r2, [r4, #12]
    ca0c:	6020      	str	r0, [r4, #0]
    ca0e:	4313      	orrs	r3, r2
    ca10:	81a3      	strh	r3, [r4, #12]
    ca12:	9b00      	ldr	r3, [sp, #0]
    ca14:	6120      	str	r0, [r4, #16]
    ca16:	6163      	str	r3, [r4, #20]
    ca18:	9b01      	ldr	r3, [sp, #4]
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	d00d      	beq.n	ca3a <__smakebuf_r+0x7a>
    ca1e:	230e      	movs	r3, #14
    ca20:	5ee1      	ldrsh	r1, [r4, r3]
    ca22:	0028      	movs	r0, r5
    ca24:	f000 fd2a 	bl	d47c <_isatty_r>
    ca28:	2800      	cmp	r0, #0
    ca2a:	d006      	beq.n	ca3a <__smakebuf_r+0x7a>
    ca2c:	2203      	movs	r2, #3
    ca2e:	89a3      	ldrh	r3, [r4, #12]
    ca30:	4393      	bics	r3, r2
    ca32:	001a      	movs	r2, r3
    ca34:	2301      	movs	r3, #1
    ca36:	4313      	orrs	r3, r2
    ca38:	81a3      	strh	r3, [r4, #12]
    ca3a:	89a0      	ldrh	r0, [r4, #12]
    ca3c:	4338      	orrs	r0, r7
    ca3e:	81a0      	strh	r0, [r4, #12]
    ca40:	e7cb      	b.n	c9da <__smakebuf_r+0x1a>
    ca42:	46c0      	nop			; (mov r8, r8)
    ca44:	0000c7bd 	.word	0x0000c7bd

0000ca48 <__ascii_mbtowc>:
    ca48:	b082      	sub	sp, #8
    ca4a:	2900      	cmp	r1, #0
    ca4c:	d100      	bne.n	ca50 <__ascii_mbtowc+0x8>
    ca4e:	a901      	add	r1, sp, #4
    ca50:	1e10      	subs	r0, r2, #0
    ca52:	d006      	beq.n	ca62 <__ascii_mbtowc+0x1a>
    ca54:	2b00      	cmp	r3, #0
    ca56:	d006      	beq.n	ca66 <__ascii_mbtowc+0x1e>
    ca58:	7813      	ldrb	r3, [r2, #0]
    ca5a:	600b      	str	r3, [r1, #0]
    ca5c:	7810      	ldrb	r0, [r2, #0]
    ca5e:	1e43      	subs	r3, r0, #1
    ca60:	4198      	sbcs	r0, r3
    ca62:	b002      	add	sp, #8
    ca64:	4770      	bx	lr
    ca66:	2002      	movs	r0, #2
    ca68:	4240      	negs	r0, r0
    ca6a:	e7fa      	b.n	ca62 <__ascii_mbtowc+0x1a>

0000ca6c <__malloc_lock>:
    ca6c:	4770      	bx	lr

0000ca6e <__malloc_unlock>:
    ca6e:	4770      	bx	lr

0000ca70 <__ssputs_r>:
    ca70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca72:	688e      	ldr	r6, [r1, #8]
    ca74:	b085      	sub	sp, #20
    ca76:	0007      	movs	r7, r0
    ca78:	000c      	movs	r4, r1
    ca7a:	9203      	str	r2, [sp, #12]
    ca7c:	9301      	str	r3, [sp, #4]
    ca7e:	429e      	cmp	r6, r3
    ca80:	d839      	bhi.n	caf6 <__ssputs_r+0x86>
    ca82:	2390      	movs	r3, #144	; 0x90
    ca84:	898a      	ldrh	r2, [r1, #12]
    ca86:	00db      	lsls	r3, r3, #3
    ca88:	421a      	tst	r2, r3
    ca8a:	d034      	beq.n	caf6 <__ssputs_r+0x86>
    ca8c:	2503      	movs	r5, #3
    ca8e:	6909      	ldr	r1, [r1, #16]
    ca90:	6823      	ldr	r3, [r4, #0]
    ca92:	1a5b      	subs	r3, r3, r1
    ca94:	9302      	str	r3, [sp, #8]
    ca96:	6963      	ldr	r3, [r4, #20]
    ca98:	9802      	ldr	r0, [sp, #8]
    ca9a:	435d      	muls	r5, r3
    ca9c:	0feb      	lsrs	r3, r5, #31
    ca9e:	195d      	adds	r5, r3, r5
    caa0:	9b01      	ldr	r3, [sp, #4]
    caa2:	106d      	asrs	r5, r5, #1
    caa4:	3301      	adds	r3, #1
    caa6:	181b      	adds	r3, r3, r0
    caa8:	42ab      	cmp	r3, r5
    caaa:	d900      	bls.n	caae <__ssputs_r+0x3e>
    caac:	001d      	movs	r5, r3
    caae:	0553      	lsls	r3, r2, #21
    cab0:	d532      	bpl.n	cb18 <__ssputs_r+0xa8>
    cab2:	0029      	movs	r1, r5
    cab4:	0038      	movs	r0, r7
    cab6:	f7ff f9cd 	bl	be54 <_malloc_r>
    caba:	1e06      	subs	r6, r0, #0
    cabc:	d109      	bne.n	cad2 <__ssputs_r+0x62>
    cabe:	230c      	movs	r3, #12
    cac0:	603b      	str	r3, [r7, #0]
    cac2:	2340      	movs	r3, #64	; 0x40
    cac4:	2001      	movs	r0, #1
    cac6:	89a2      	ldrh	r2, [r4, #12]
    cac8:	4240      	negs	r0, r0
    caca:	4313      	orrs	r3, r2
    cacc:	81a3      	strh	r3, [r4, #12]
    cace:	b005      	add	sp, #20
    cad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cad2:	9a02      	ldr	r2, [sp, #8]
    cad4:	6921      	ldr	r1, [r4, #16]
    cad6:	f7ff f94f 	bl	bd78 <memcpy>
    cada:	89a3      	ldrh	r3, [r4, #12]
    cadc:	4a14      	ldr	r2, [pc, #80]	; (cb30 <__ssputs_r+0xc0>)
    cade:	401a      	ands	r2, r3
    cae0:	2380      	movs	r3, #128	; 0x80
    cae2:	4313      	orrs	r3, r2
    cae4:	81a3      	strh	r3, [r4, #12]
    cae6:	9b02      	ldr	r3, [sp, #8]
    cae8:	6126      	str	r6, [r4, #16]
    caea:	18f6      	adds	r6, r6, r3
    caec:	6026      	str	r6, [r4, #0]
    caee:	6165      	str	r5, [r4, #20]
    caf0:	9e01      	ldr	r6, [sp, #4]
    caf2:	1aed      	subs	r5, r5, r3
    caf4:	60a5      	str	r5, [r4, #8]
    caf6:	9b01      	ldr	r3, [sp, #4]
    caf8:	42b3      	cmp	r3, r6
    cafa:	d200      	bcs.n	cafe <__ssputs_r+0x8e>
    cafc:	001e      	movs	r6, r3
    cafe:	0032      	movs	r2, r6
    cb00:	9903      	ldr	r1, [sp, #12]
    cb02:	6820      	ldr	r0, [r4, #0]
    cb04:	f7ff f941 	bl	bd8a <memmove>
    cb08:	68a3      	ldr	r3, [r4, #8]
    cb0a:	2000      	movs	r0, #0
    cb0c:	1b9b      	subs	r3, r3, r6
    cb0e:	60a3      	str	r3, [r4, #8]
    cb10:	6823      	ldr	r3, [r4, #0]
    cb12:	199e      	adds	r6, r3, r6
    cb14:	6026      	str	r6, [r4, #0]
    cb16:	e7da      	b.n	cace <__ssputs_r+0x5e>
    cb18:	002a      	movs	r2, r5
    cb1a:	0038      	movs	r0, r7
    cb1c:	f000 fcdf 	bl	d4de <_realloc_r>
    cb20:	1e06      	subs	r6, r0, #0
    cb22:	d1e0      	bne.n	cae6 <__ssputs_r+0x76>
    cb24:	6921      	ldr	r1, [r4, #16]
    cb26:	0038      	movs	r0, r7
    cb28:	f7ff f94a 	bl	bdc0 <_free_r>
    cb2c:	e7c7      	b.n	cabe <__ssputs_r+0x4e>
    cb2e:	46c0      	nop			; (mov r8, r8)
    cb30:	fffffb7f 	.word	0xfffffb7f

0000cb34 <_svfiprintf_r>:
    cb34:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb36:	b09f      	sub	sp, #124	; 0x7c
    cb38:	9002      	str	r0, [sp, #8]
    cb3a:	9305      	str	r3, [sp, #20]
    cb3c:	898b      	ldrh	r3, [r1, #12]
    cb3e:	000f      	movs	r7, r1
    cb40:	0016      	movs	r6, r2
    cb42:	061b      	lsls	r3, r3, #24
    cb44:	d511      	bpl.n	cb6a <_svfiprintf_r+0x36>
    cb46:	690b      	ldr	r3, [r1, #16]
    cb48:	2b00      	cmp	r3, #0
    cb4a:	d10e      	bne.n	cb6a <_svfiprintf_r+0x36>
    cb4c:	2140      	movs	r1, #64	; 0x40
    cb4e:	f7ff f981 	bl	be54 <_malloc_r>
    cb52:	6038      	str	r0, [r7, #0]
    cb54:	6138      	str	r0, [r7, #16]
    cb56:	2800      	cmp	r0, #0
    cb58:	d105      	bne.n	cb66 <_svfiprintf_r+0x32>
    cb5a:	230c      	movs	r3, #12
    cb5c:	9a02      	ldr	r2, [sp, #8]
    cb5e:	3801      	subs	r0, #1
    cb60:	6013      	str	r3, [r2, #0]
    cb62:	b01f      	add	sp, #124	; 0x7c
    cb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb66:	2340      	movs	r3, #64	; 0x40
    cb68:	617b      	str	r3, [r7, #20]
    cb6a:	2300      	movs	r3, #0
    cb6c:	ad06      	add	r5, sp, #24
    cb6e:	616b      	str	r3, [r5, #20]
    cb70:	3320      	adds	r3, #32
    cb72:	766b      	strb	r3, [r5, #25]
    cb74:	3310      	adds	r3, #16
    cb76:	76ab      	strb	r3, [r5, #26]
    cb78:	0034      	movs	r4, r6
    cb7a:	7823      	ldrb	r3, [r4, #0]
    cb7c:	2b00      	cmp	r3, #0
    cb7e:	d147      	bne.n	cc10 <_svfiprintf_r+0xdc>
    cb80:	1ba3      	subs	r3, r4, r6
    cb82:	9304      	str	r3, [sp, #16]
    cb84:	d00d      	beq.n	cba2 <_svfiprintf_r+0x6e>
    cb86:	1ba3      	subs	r3, r4, r6
    cb88:	0032      	movs	r2, r6
    cb8a:	0039      	movs	r1, r7
    cb8c:	9802      	ldr	r0, [sp, #8]
    cb8e:	f7ff ff6f 	bl	ca70 <__ssputs_r>
    cb92:	1c43      	adds	r3, r0, #1
    cb94:	d100      	bne.n	cb98 <_svfiprintf_r+0x64>
    cb96:	e0b5      	b.n	cd04 <_svfiprintf_r+0x1d0>
    cb98:	696a      	ldr	r2, [r5, #20]
    cb9a:	9b04      	ldr	r3, [sp, #16]
    cb9c:	4694      	mov	ip, r2
    cb9e:	4463      	add	r3, ip
    cba0:	616b      	str	r3, [r5, #20]
    cba2:	7823      	ldrb	r3, [r4, #0]
    cba4:	2b00      	cmp	r3, #0
    cba6:	d100      	bne.n	cbaa <_svfiprintf_r+0x76>
    cba8:	e0ac      	b.n	cd04 <_svfiprintf_r+0x1d0>
    cbaa:	2201      	movs	r2, #1
    cbac:	2300      	movs	r3, #0
    cbae:	4252      	negs	r2, r2
    cbb0:	606a      	str	r2, [r5, #4]
    cbb2:	a902      	add	r1, sp, #8
    cbb4:	3254      	adds	r2, #84	; 0x54
    cbb6:	1852      	adds	r2, r2, r1
    cbb8:	3401      	adds	r4, #1
    cbba:	602b      	str	r3, [r5, #0]
    cbbc:	60eb      	str	r3, [r5, #12]
    cbbe:	60ab      	str	r3, [r5, #8]
    cbc0:	7013      	strb	r3, [r2, #0]
    cbc2:	65ab      	str	r3, [r5, #88]	; 0x58
    cbc4:	4e58      	ldr	r6, [pc, #352]	; (cd28 <_svfiprintf_r+0x1f4>)
    cbc6:	2205      	movs	r2, #5
    cbc8:	7821      	ldrb	r1, [r4, #0]
    cbca:	0030      	movs	r0, r6
    cbcc:	f000 fc7c 	bl	d4c8 <memchr>
    cbd0:	1c62      	adds	r2, r4, #1
    cbd2:	2800      	cmp	r0, #0
    cbd4:	d120      	bne.n	cc18 <_svfiprintf_r+0xe4>
    cbd6:	6829      	ldr	r1, [r5, #0]
    cbd8:	06cb      	lsls	r3, r1, #27
    cbda:	d504      	bpl.n	cbe6 <_svfiprintf_r+0xb2>
    cbdc:	2353      	movs	r3, #83	; 0x53
    cbde:	ae02      	add	r6, sp, #8
    cbe0:	3020      	adds	r0, #32
    cbe2:	199b      	adds	r3, r3, r6
    cbe4:	7018      	strb	r0, [r3, #0]
    cbe6:	070b      	lsls	r3, r1, #28
    cbe8:	d504      	bpl.n	cbf4 <_svfiprintf_r+0xc0>
    cbea:	2353      	movs	r3, #83	; 0x53
    cbec:	202b      	movs	r0, #43	; 0x2b
    cbee:	ae02      	add	r6, sp, #8
    cbf0:	199b      	adds	r3, r3, r6
    cbf2:	7018      	strb	r0, [r3, #0]
    cbf4:	7823      	ldrb	r3, [r4, #0]
    cbf6:	2b2a      	cmp	r3, #42	; 0x2a
    cbf8:	d016      	beq.n	cc28 <_svfiprintf_r+0xf4>
    cbfa:	2000      	movs	r0, #0
    cbfc:	210a      	movs	r1, #10
    cbfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc00:	7822      	ldrb	r2, [r4, #0]
    cc02:	3a30      	subs	r2, #48	; 0x30
    cc04:	2a09      	cmp	r2, #9
    cc06:	d955      	bls.n	ccb4 <_svfiprintf_r+0x180>
    cc08:	2800      	cmp	r0, #0
    cc0a:	d015      	beq.n	cc38 <_svfiprintf_r+0x104>
    cc0c:	9309      	str	r3, [sp, #36]	; 0x24
    cc0e:	e013      	b.n	cc38 <_svfiprintf_r+0x104>
    cc10:	2b25      	cmp	r3, #37	; 0x25
    cc12:	d0b5      	beq.n	cb80 <_svfiprintf_r+0x4c>
    cc14:	3401      	adds	r4, #1
    cc16:	e7b0      	b.n	cb7a <_svfiprintf_r+0x46>
    cc18:	2301      	movs	r3, #1
    cc1a:	1b80      	subs	r0, r0, r6
    cc1c:	4083      	lsls	r3, r0
    cc1e:	6829      	ldr	r1, [r5, #0]
    cc20:	0014      	movs	r4, r2
    cc22:	430b      	orrs	r3, r1
    cc24:	602b      	str	r3, [r5, #0]
    cc26:	e7cd      	b.n	cbc4 <_svfiprintf_r+0x90>
    cc28:	9b05      	ldr	r3, [sp, #20]
    cc2a:	1d18      	adds	r0, r3, #4
    cc2c:	681b      	ldr	r3, [r3, #0]
    cc2e:	9005      	str	r0, [sp, #20]
    cc30:	2b00      	cmp	r3, #0
    cc32:	db39      	blt.n	cca8 <_svfiprintf_r+0x174>
    cc34:	9309      	str	r3, [sp, #36]	; 0x24
    cc36:	0014      	movs	r4, r2
    cc38:	7823      	ldrb	r3, [r4, #0]
    cc3a:	2b2e      	cmp	r3, #46	; 0x2e
    cc3c:	d10b      	bne.n	cc56 <_svfiprintf_r+0x122>
    cc3e:	7863      	ldrb	r3, [r4, #1]
    cc40:	1c62      	adds	r2, r4, #1
    cc42:	2b2a      	cmp	r3, #42	; 0x2a
    cc44:	d13e      	bne.n	ccc4 <_svfiprintf_r+0x190>
    cc46:	9b05      	ldr	r3, [sp, #20]
    cc48:	3402      	adds	r4, #2
    cc4a:	1d1a      	adds	r2, r3, #4
    cc4c:	681b      	ldr	r3, [r3, #0]
    cc4e:	9205      	str	r2, [sp, #20]
    cc50:	2b00      	cmp	r3, #0
    cc52:	db34      	blt.n	ccbe <_svfiprintf_r+0x18a>
    cc54:	9307      	str	r3, [sp, #28]
    cc56:	4e35      	ldr	r6, [pc, #212]	; (cd2c <_svfiprintf_r+0x1f8>)
    cc58:	7821      	ldrb	r1, [r4, #0]
    cc5a:	2203      	movs	r2, #3
    cc5c:	0030      	movs	r0, r6
    cc5e:	f000 fc33 	bl	d4c8 <memchr>
    cc62:	2800      	cmp	r0, #0
    cc64:	d006      	beq.n	cc74 <_svfiprintf_r+0x140>
    cc66:	2340      	movs	r3, #64	; 0x40
    cc68:	1b80      	subs	r0, r0, r6
    cc6a:	4083      	lsls	r3, r0
    cc6c:	682a      	ldr	r2, [r5, #0]
    cc6e:	3401      	adds	r4, #1
    cc70:	4313      	orrs	r3, r2
    cc72:	602b      	str	r3, [r5, #0]
    cc74:	7821      	ldrb	r1, [r4, #0]
    cc76:	2206      	movs	r2, #6
    cc78:	482d      	ldr	r0, [pc, #180]	; (cd30 <_svfiprintf_r+0x1fc>)
    cc7a:	1c66      	adds	r6, r4, #1
    cc7c:	7629      	strb	r1, [r5, #24]
    cc7e:	f000 fc23 	bl	d4c8 <memchr>
    cc82:	2800      	cmp	r0, #0
    cc84:	d046      	beq.n	cd14 <_svfiprintf_r+0x1e0>
    cc86:	4b2b      	ldr	r3, [pc, #172]	; (cd34 <_svfiprintf_r+0x200>)
    cc88:	2b00      	cmp	r3, #0
    cc8a:	d12f      	bne.n	ccec <_svfiprintf_r+0x1b8>
    cc8c:	6829      	ldr	r1, [r5, #0]
    cc8e:	9b05      	ldr	r3, [sp, #20]
    cc90:	2207      	movs	r2, #7
    cc92:	05c9      	lsls	r1, r1, #23
    cc94:	d528      	bpl.n	cce8 <_svfiprintf_r+0x1b4>
    cc96:	189b      	adds	r3, r3, r2
    cc98:	4393      	bics	r3, r2
    cc9a:	3308      	adds	r3, #8
    cc9c:	9305      	str	r3, [sp, #20]
    cc9e:	696b      	ldr	r3, [r5, #20]
    cca0:	9a03      	ldr	r2, [sp, #12]
    cca2:	189b      	adds	r3, r3, r2
    cca4:	616b      	str	r3, [r5, #20]
    cca6:	e767      	b.n	cb78 <_svfiprintf_r+0x44>
    cca8:	425b      	negs	r3, r3
    ccaa:	60eb      	str	r3, [r5, #12]
    ccac:	2302      	movs	r3, #2
    ccae:	430b      	orrs	r3, r1
    ccb0:	602b      	str	r3, [r5, #0]
    ccb2:	e7c0      	b.n	cc36 <_svfiprintf_r+0x102>
    ccb4:	434b      	muls	r3, r1
    ccb6:	3401      	adds	r4, #1
    ccb8:	189b      	adds	r3, r3, r2
    ccba:	2001      	movs	r0, #1
    ccbc:	e7a0      	b.n	cc00 <_svfiprintf_r+0xcc>
    ccbe:	2301      	movs	r3, #1
    ccc0:	425b      	negs	r3, r3
    ccc2:	e7c7      	b.n	cc54 <_svfiprintf_r+0x120>
    ccc4:	2300      	movs	r3, #0
    ccc6:	0014      	movs	r4, r2
    ccc8:	200a      	movs	r0, #10
    ccca:	001a      	movs	r2, r3
    cccc:	606b      	str	r3, [r5, #4]
    ccce:	7821      	ldrb	r1, [r4, #0]
    ccd0:	3930      	subs	r1, #48	; 0x30
    ccd2:	2909      	cmp	r1, #9
    ccd4:	d903      	bls.n	ccde <_svfiprintf_r+0x1aa>
    ccd6:	2b00      	cmp	r3, #0
    ccd8:	d0bd      	beq.n	cc56 <_svfiprintf_r+0x122>
    ccda:	9207      	str	r2, [sp, #28]
    ccdc:	e7bb      	b.n	cc56 <_svfiprintf_r+0x122>
    ccde:	4342      	muls	r2, r0
    cce0:	3401      	adds	r4, #1
    cce2:	1852      	adds	r2, r2, r1
    cce4:	2301      	movs	r3, #1
    cce6:	e7f2      	b.n	ccce <_svfiprintf_r+0x19a>
    cce8:	3307      	adds	r3, #7
    ccea:	e7d5      	b.n	cc98 <_svfiprintf_r+0x164>
    ccec:	ab05      	add	r3, sp, #20
    ccee:	9300      	str	r3, [sp, #0]
    ccf0:	003a      	movs	r2, r7
    ccf2:	4b11      	ldr	r3, [pc, #68]	; (cd38 <_svfiprintf_r+0x204>)
    ccf4:	0029      	movs	r1, r5
    ccf6:	9802      	ldr	r0, [sp, #8]
    ccf8:	e000      	b.n	ccfc <_svfiprintf_r+0x1c8>
    ccfa:	bf00      	nop
    ccfc:	9003      	str	r0, [sp, #12]
    ccfe:	9b03      	ldr	r3, [sp, #12]
    cd00:	3301      	adds	r3, #1
    cd02:	d1cc      	bne.n	cc9e <_svfiprintf_r+0x16a>
    cd04:	89bb      	ldrh	r3, [r7, #12]
    cd06:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cd08:	065b      	lsls	r3, r3, #25
    cd0a:	d400      	bmi.n	cd0e <_svfiprintf_r+0x1da>
    cd0c:	e729      	b.n	cb62 <_svfiprintf_r+0x2e>
    cd0e:	2001      	movs	r0, #1
    cd10:	4240      	negs	r0, r0
    cd12:	e726      	b.n	cb62 <_svfiprintf_r+0x2e>
    cd14:	ab05      	add	r3, sp, #20
    cd16:	9300      	str	r3, [sp, #0]
    cd18:	003a      	movs	r2, r7
    cd1a:	4b07      	ldr	r3, [pc, #28]	; (cd38 <_svfiprintf_r+0x204>)
    cd1c:	0029      	movs	r1, r5
    cd1e:	9802      	ldr	r0, [sp, #8]
    cd20:	f000 f9be 	bl	d0a0 <_printf_i>
    cd24:	e7ea      	b.n	ccfc <_svfiprintf_r+0x1c8>
    cd26:	46c0      	nop			; (mov r8, r8)
    cd28:	0000f5be 	.word	0x0000f5be
    cd2c:	0000f5c4 	.word	0x0000f5c4
    cd30:	0000f5c8 	.word	0x0000f5c8
    cd34:	00000000 	.word	0x00000000
    cd38:	0000ca71 	.word	0x0000ca71

0000cd3c <__sfputc_r>:
    cd3c:	6893      	ldr	r3, [r2, #8]
    cd3e:	b510      	push	{r4, lr}
    cd40:	3b01      	subs	r3, #1
    cd42:	6093      	str	r3, [r2, #8]
    cd44:	2b00      	cmp	r3, #0
    cd46:	da05      	bge.n	cd54 <__sfputc_r+0x18>
    cd48:	6994      	ldr	r4, [r2, #24]
    cd4a:	42a3      	cmp	r3, r4
    cd4c:	db08      	blt.n	cd60 <__sfputc_r+0x24>
    cd4e:	b2cb      	uxtb	r3, r1
    cd50:	2b0a      	cmp	r3, #10
    cd52:	d005      	beq.n	cd60 <__sfputc_r+0x24>
    cd54:	6813      	ldr	r3, [r2, #0]
    cd56:	1c58      	adds	r0, r3, #1
    cd58:	6010      	str	r0, [r2, #0]
    cd5a:	7019      	strb	r1, [r3, #0]
    cd5c:	b2c8      	uxtb	r0, r1
    cd5e:	bd10      	pop	{r4, pc}
    cd60:	f7ff fbaa 	bl	c4b8 <__swbuf_r>
    cd64:	e7fb      	b.n	cd5e <__sfputc_r+0x22>

0000cd66 <__sfputs_r>:
    cd66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd68:	0006      	movs	r6, r0
    cd6a:	000f      	movs	r7, r1
    cd6c:	0014      	movs	r4, r2
    cd6e:	18d5      	adds	r5, r2, r3
    cd70:	42ac      	cmp	r4, r5
    cd72:	d101      	bne.n	cd78 <__sfputs_r+0x12>
    cd74:	2000      	movs	r0, #0
    cd76:	e007      	b.n	cd88 <__sfputs_r+0x22>
    cd78:	7821      	ldrb	r1, [r4, #0]
    cd7a:	003a      	movs	r2, r7
    cd7c:	0030      	movs	r0, r6
    cd7e:	f7ff ffdd 	bl	cd3c <__sfputc_r>
    cd82:	3401      	adds	r4, #1
    cd84:	1c43      	adds	r3, r0, #1
    cd86:	d1f3      	bne.n	cd70 <__sfputs_r+0xa>
    cd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000cd8c <_vfiprintf_r>:
    cd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd8e:	b09f      	sub	sp, #124	; 0x7c
    cd90:	0006      	movs	r6, r0
    cd92:	000f      	movs	r7, r1
    cd94:	0014      	movs	r4, r2
    cd96:	9305      	str	r3, [sp, #20]
    cd98:	2800      	cmp	r0, #0
    cd9a:	d004      	beq.n	cda6 <_vfiprintf_r+0x1a>
    cd9c:	6983      	ldr	r3, [r0, #24]
    cd9e:	2b00      	cmp	r3, #0
    cda0:	d101      	bne.n	cda6 <_vfiprintf_r+0x1a>
    cda2:	f7ff fd4d 	bl	c840 <__sinit>
    cda6:	4b7f      	ldr	r3, [pc, #508]	; (cfa4 <_vfiprintf_r+0x218>)
    cda8:	429f      	cmp	r7, r3
    cdaa:	d15c      	bne.n	ce66 <_vfiprintf_r+0xda>
    cdac:	6877      	ldr	r7, [r6, #4]
    cdae:	89bb      	ldrh	r3, [r7, #12]
    cdb0:	071b      	lsls	r3, r3, #28
    cdb2:	d562      	bpl.n	ce7a <_vfiprintf_r+0xee>
    cdb4:	693b      	ldr	r3, [r7, #16]
    cdb6:	2b00      	cmp	r3, #0
    cdb8:	d05f      	beq.n	ce7a <_vfiprintf_r+0xee>
    cdba:	2300      	movs	r3, #0
    cdbc:	ad06      	add	r5, sp, #24
    cdbe:	616b      	str	r3, [r5, #20]
    cdc0:	3320      	adds	r3, #32
    cdc2:	766b      	strb	r3, [r5, #25]
    cdc4:	3310      	adds	r3, #16
    cdc6:	76ab      	strb	r3, [r5, #26]
    cdc8:	9402      	str	r4, [sp, #8]
    cdca:	9c02      	ldr	r4, [sp, #8]
    cdcc:	7823      	ldrb	r3, [r4, #0]
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d15d      	bne.n	ce8e <_vfiprintf_r+0x102>
    cdd2:	9b02      	ldr	r3, [sp, #8]
    cdd4:	1ae3      	subs	r3, r4, r3
    cdd6:	9304      	str	r3, [sp, #16]
    cdd8:	d00d      	beq.n	cdf6 <_vfiprintf_r+0x6a>
    cdda:	9b04      	ldr	r3, [sp, #16]
    cddc:	9a02      	ldr	r2, [sp, #8]
    cdde:	0039      	movs	r1, r7
    cde0:	0030      	movs	r0, r6
    cde2:	f7ff ffc0 	bl	cd66 <__sfputs_r>
    cde6:	1c43      	adds	r3, r0, #1
    cde8:	d100      	bne.n	cdec <_vfiprintf_r+0x60>
    cdea:	e0cc      	b.n	cf86 <_vfiprintf_r+0x1fa>
    cdec:	696a      	ldr	r2, [r5, #20]
    cdee:	9b04      	ldr	r3, [sp, #16]
    cdf0:	4694      	mov	ip, r2
    cdf2:	4463      	add	r3, ip
    cdf4:	616b      	str	r3, [r5, #20]
    cdf6:	7823      	ldrb	r3, [r4, #0]
    cdf8:	2b00      	cmp	r3, #0
    cdfa:	d100      	bne.n	cdfe <_vfiprintf_r+0x72>
    cdfc:	e0c3      	b.n	cf86 <_vfiprintf_r+0x1fa>
    cdfe:	2201      	movs	r2, #1
    ce00:	2300      	movs	r3, #0
    ce02:	4252      	negs	r2, r2
    ce04:	606a      	str	r2, [r5, #4]
    ce06:	a902      	add	r1, sp, #8
    ce08:	3254      	adds	r2, #84	; 0x54
    ce0a:	1852      	adds	r2, r2, r1
    ce0c:	3401      	adds	r4, #1
    ce0e:	602b      	str	r3, [r5, #0]
    ce10:	60eb      	str	r3, [r5, #12]
    ce12:	60ab      	str	r3, [r5, #8]
    ce14:	7013      	strb	r3, [r2, #0]
    ce16:	65ab      	str	r3, [r5, #88]	; 0x58
    ce18:	7821      	ldrb	r1, [r4, #0]
    ce1a:	2205      	movs	r2, #5
    ce1c:	4862      	ldr	r0, [pc, #392]	; (cfa8 <_vfiprintf_r+0x21c>)
    ce1e:	f000 fb53 	bl	d4c8 <memchr>
    ce22:	1c63      	adds	r3, r4, #1
    ce24:	469c      	mov	ip, r3
    ce26:	2800      	cmp	r0, #0
    ce28:	d135      	bne.n	ce96 <_vfiprintf_r+0x10a>
    ce2a:	6829      	ldr	r1, [r5, #0]
    ce2c:	06cb      	lsls	r3, r1, #27
    ce2e:	d504      	bpl.n	ce3a <_vfiprintf_r+0xae>
    ce30:	2353      	movs	r3, #83	; 0x53
    ce32:	aa02      	add	r2, sp, #8
    ce34:	3020      	adds	r0, #32
    ce36:	189b      	adds	r3, r3, r2
    ce38:	7018      	strb	r0, [r3, #0]
    ce3a:	070b      	lsls	r3, r1, #28
    ce3c:	d504      	bpl.n	ce48 <_vfiprintf_r+0xbc>
    ce3e:	2353      	movs	r3, #83	; 0x53
    ce40:	202b      	movs	r0, #43	; 0x2b
    ce42:	aa02      	add	r2, sp, #8
    ce44:	189b      	adds	r3, r3, r2
    ce46:	7018      	strb	r0, [r3, #0]
    ce48:	7823      	ldrb	r3, [r4, #0]
    ce4a:	2b2a      	cmp	r3, #42	; 0x2a
    ce4c:	d02c      	beq.n	cea8 <_vfiprintf_r+0x11c>
    ce4e:	2000      	movs	r0, #0
    ce50:	210a      	movs	r1, #10
    ce52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce54:	7822      	ldrb	r2, [r4, #0]
    ce56:	3a30      	subs	r2, #48	; 0x30
    ce58:	2a09      	cmp	r2, #9
    ce5a:	d800      	bhi.n	ce5e <_vfiprintf_r+0xd2>
    ce5c:	e06b      	b.n	cf36 <_vfiprintf_r+0x1aa>
    ce5e:	2800      	cmp	r0, #0
    ce60:	d02a      	beq.n	ceb8 <_vfiprintf_r+0x12c>
    ce62:	9309      	str	r3, [sp, #36]	; 0x24
    ce64:	e028      	b.n	ceb8 <_vfiprintf_r+0x12c>
    ce66:	4b51      	ldr	r3, [pc, #324]	; (cfac <_vfiprintf_r+0x220>)
    ce68:	429f      	cmp	r7, r3
    ce6a:	d101      	bne.n	ce70 <_vfiprintf_r+0xe4>
    ce6c:	68b7      	ldr	r7, [r6, #8]
    ce6e:	e79e      	b.n	cdae <_vfiprintf_r+0x22>
    ce70:	4b4f      	ldr	r3, [pc, #316]	; (cfb0 <_vfiprintf_r+0x224>)
    ce72:	429f      	cmp	r7, r3
    ce74:	d19b      	bne.n	cdae <_vfiprintf_r+0x22>
    ce76:	68f7      	ldr	r7, [r6, #12]
    ce78:	e799      	b.n	cdae <_vfiprintf_r+0x22>
    ce7a:	0039      	movs	r1, r7
    ce7c:	0030      	movs	r0, r6
    ce7e:	f7ff fb71 	bl	c564 <__swsetup_r>
    ce82:	2800      	cmp	r0, #0
    ce84:	d099      	beq.n	cdba <_vfiprintf_r+0x2e>
    ce86:	2001      	movs	r0, #1
    ce88:	4240      	negs	r0, r0
    ce8a:	b01f      	add	sp, #124	; 0x7c
    ce8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce8e:	2b25      	cmp	r3, #37	; 0x25
    ce90:	d09f      	beq.n	cdd2 <_vfiprintf_r+0x46>
    ce92:	3401      	adds	r4, #1
    ce94:	e79a      	b.n	cdcc <_vfiprintf_r+0x40>
    ce96:	4b44      	ldr	r3, [pc, #272]	; (cfa8 <_vfiprintf_r+0x21c>)
    ce98:	6829      	ldr	r1, [r5, #0]
    ce9a:	1ac0      	subs	r0, r0, r3
    ce9c:	2301      	movs	r3, #1
    ce9e:	4083      	lsls	r3, r0
    cea0:	430b      	orrs	r3, r1
    cea2:	602b      	str	r3, [r5, #0]
    cea4:	4664      	mov	r4, ip
    cea6:	e7b7      	b.n	ce18 <_vfiprintf_r+0x8c>
    cea8:	9b05      	ldr	r3, [sp, #20]
    ceaa:	1d18      	adds	r0, r3, #4
    ceac:	681b      	ldr	r3, [r3, #0]
    ceae:	9005      	str	r0, [sp, #20]
    ceb0:	2b00      	cmp	r3, #0
    ceb2:	db3a      	blt.n	cf2a <_vfiprintf_r+0x19e>
    ceb4:	9309      	str	r3, [sp, #36]	; 0x24
    ceb6:	4664      	mov	r4, ip
    ceb8:	7823      	ldrb	r3, [r4, #0]
    ceba:	2b2e      	cmp	r3, #46	; 0x2e
    cebc:	d10b      	bne.n	ced6 <_vfiprintf_r+0x14a>
    cebe:	7863      	ldrb	r3, [r4, #1]
    cec0:	1c62      	adds	r2, r4, #1
    cec2:	2b2a      	cmp	r3, #42	; 0x2a
    cec4:	d13f      	bne.n	cf46 <_vfiprintf_r+0x1ba>
    cec6:	9b05      	ldr	r3, [sp, #20]
    cec8:	3402      	adds	r4, #2
    ceca:	1d1a      	adds	r2, r3, #4
    cecc:	681b      	ldr	r3, [r3, #0]
    cece:	9205      	str	r2, [sp, #20]
    ced0:	2b00      	cmp	r3, #0
    ced2:	db35      	blt.n	cf40 <_vfiprintf_r+0x1b4>
    ced4:	9307      	str	r3, [sp, #28]
    ced6:	7821      	ldrb	r1, [r4, #0]
    ced8:	2203      	movs	r2, #3
    ceda:	4836      	ldr	r0, [pc, #216]	; (cfb4 <_vfiprintf_r+0x228>)
    cedc:	f000 faf4 	bl	d4c8 <memchr>
    cee0:	2800      	cmp	r0, #0
    cee2:	d007      	beq.n	cef4 <_vfiprintf_r+0x168>
    cee4:	4b33      	ldr	r3, [pc, #204]	; (cfb4 <_vfiprintf_r+0x228>)
    cee6:	682a      	ldr	r2, [r5, #0]
    cee8:	1ac0      	subs	r0, r0, r3
    ceea:	2340      	movs	r3, #64	; 0x40
    ceec:	4083      	lsls	r3, r0
    ceee:	4313      	orrs	r3, r2
    cef0:	602b      	str	r3, [r5, #0]
    cef2:	3401      	adds	r4, #1
    cef4:	7821      	ldrb	r1, [r4, #0]
    cef6:	1c63      	adds	r3, r4, #1
    cef8:	2206      	movs	r2, #6
    cefa:	482f      	ldr	r0, [pc, #188]	; (cfb8 <_vfiprintf_r+0x22c>)
    cefc:	9302      	str	r3, [sp, #8]
    cefe:	7629      	strb	r1, [r5, #24]
    cf00:	f000 fae2 	bl	d4c8 <memchr>
    cf04:	2800      	cmp	r0, #0
    cf06:	d044      	beq.n	cf92 <_vfiprintf_r+0x206>
    cf08:	4b2c      	ldr	r3, [pc, #176]	; (cfbc <_vfiprintf_r+0x230>)
    cf0a:	2b00      	cmp	r3, #0
    cf0c:	d12f      	bne.n	cf6e <_vfiprintf_r+0x1e2>
    cf0e:	6829      	ldr	r1, [r5, #0]
    cf10:	9b05      	ldr	r3, [sp, #20]
    cf12:	2207      	movs	r2, #7
    cf14:	05c9      	lsls	r1, r1, #23
    cf16:	d528      	bpl.n	cf6a <_vfiprintf_r+0x1de>
    cf18:	189b      	adds	r3, r3, r2
    cf1a:	4393      	bics	r3, r2
    cf1c:	3308      	adds	r3, #8
    cf1e:	9305      	str	r3, [sp, #20]
    cf20:	696b      	ldr	r3, [r5, #20]
    cf22:	9a03      	ldr	r2, [sp, #12]
    cf24:	189b      	adds	r3, r3, r2
    cf26:	616b      	str	r3, [r5, #20]
    cf28:	e74f      	b.n	cdca <_vfiprintf_r+0x3e>
    cf2a:	425b      	negs	r3, r3
    cf2c:	60eb      	str	r3, [r5, #12]
    cf2e:	2302      	movs	r3, #2
    cf30:	430b      	orrs	r3, r1
    cf32:	602b      	str	r3, [r5, #0]
    cf34:	e7bf      	b.n	ceb6 <_vfiprintf_r+0x12a>
    cf36:	434b      	muls	r3, r1
    cf38:	3401      	adds	r4, #1
    cf3a:	189b      	adds	r3, r3, r2
    cf3c:	2001      	movs	r0, #1
    cf3e:	e789      	b.n	ce54 <_vfiprintf_r+0xc8>
    cf40:	2301      	movs	r3, #1
    cf42:	425b      	negs	r3, r3
    cf44:	e7c6      	b.n	ced4 <_vfiprintf_r+0x148>
    cf46:	2300      	movs	r3, #0
    cf48:	0014      	movs	r4, r2
    cf4a:	200a      	movs	r0, #10
    cf4c:	001a      	movs	r2, r3
    cf4e:	606b      	str	r3, [r5, #4]
    cf50:	7821      	ldrb	r1, [r4, #0]
    cf52:	3930      	subs	r1, #48	; 0x30
    cf54:	2909      	cmp	r1, #9
    cf56:	d903      	bls.n	cf60 <_vfiprintf_r+0x1d4>
    cf58:	2b00      	cmp	r3, #0
    cf5a:	d0bc      	beq.n	ced6 <_vfiprintf_r+0x14a>
    cf5c:	9207      	str	r2, [sp, #28]
    cf5e:	e7ba      	b.n	ced6 <_vfiprintf_r+0x14a>
    cf60:	4342      	muls	r2, r0
    cf62:	3401      	adds	r4, #1
    cf64:	1852      	adds	r2, r2, r1
    cf66:	2301      	movs	r3, #1
    cf68:	e7f2      	b.n	cf50 <_vfiprintf_r+0x1c4>
    cf6a:	3307      	adds	r3, #7
    cf6c:	e7d5      	b.n	cf1a <_vfiprintf_r+0x18e>
    cf6e:	ab05      	add	r3, sp, #20
    cf70:	9300      	str	r3, [sp, #0]
    cf72:	003a      	movs	r2, r7
    cf74:	4b12      	ldr	r3, [pc, #72]	; (cfc0 <_vfiprintf_r+0x234>)
    cf76:	0029      	movs	r1, r5
    cf78:	0030      	movs	r0, r6
    cf7a:	e000      	b.n	cf7e <_vfiprintf_r+0x1f2>
    cf7c:	bf00      	nop
    cf7e:	9003      	str	r0, [sp, #12]
    cf80:	9b03      	ldr	r3, [sp, #12]
    cf82:	3301      	adds	r3, #1
    cf84:	d1cc      	bne.n	cf20 <_vfiprintf_r+0x194>
    cf86:	89bb      	ldrh	r3, [r7, #12]
    cf88:	065b      	lsls	r3, r3, #25
    cf8a:	d500      	bpl.n	cf8e <_vfiprintf_r+0x202>
    cf8c:	e77b      	b.n	ce86 <_vfiprintf_r+0xfa>
    cf8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cf90:	e77b      	b.n	ce8a <_vfiprintf_r+0xfe>
    cf92:	ab05      	add	r3, sp, #20
    cf94:	9300      	str	r3, [sp, #0]
    cf96:	003a      	movs	r2, r7
    cf98:	4b09      	ldr	r3, [pc, #36]	; (cfc0 <_vfiprintf_r+0x234>)
    cf9a:	0029      	movs	r1, r5
    cf9c:	0030      	movs	r0, r6
    cf9e:	f000 f87f 	bl	d0a0 <_printf_i>
    cfa2:	e7ec      	b.n	cf7e <_vfiprintf_r+0x1f2>
    cfa4:	0000f574 	.word	0x0000f574
    cfa8:	0000f5be 	.word	0x0000f5be
    cfac:	0000f594 	.word	0x0000f594
    cfb0:	0000f554 	.word	0x0000f554
    cfb4:	0000f5c4 	.word	0x0000f5c4
    cfb8:	0000f5c8 	.word	0x0000f5c8
    cfbc:	00000000 	.word	0x00000000
    cfc0:	0000cd67 	.word	0x0000cd67

0000cfc4 <_printf_common>:
    cfc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cfc6:	0015      	movs	r5, r2
    cfc8:	9301      	str	r3, [sp, #4]
    cfca:	688a      	ldr	r2, [r1, #8]
    cfcc:	690b      	ldr	r3, [r1, #16]
    cfce:	9000      	str	r0, [sp, #0]
    cfd0:	000c      	movs	r4, r1
    cfd2:	4293      	cmp	r3, r2
    cfd4:	da00      	bge.n	cfd8 <_printf_common+0x14>
    cfd6:	0013      	movs	r3, r2
    cfd8:	0022      	movs	r2, r4
    cfda:	602b      	str	r3, [r5, #0]
    cfdc:	3243      	adds	r2, #67	; 0x43
    cfde:	7812      	ldrb	r2, [r2, #0]
    cfe0:	2a00      	cmp	r2, #0
    cfe2:	d001      	beq.n	cfe8 <_printf_common+0x24>
    cfe4:	3301      	adds	r3, #1
    cfe6:	602b      	str	r3, [r5, #0]
    cfe8:	6823      	ldr	r3, [r4, #0]
    cfea:	069b      	lsls	r3, r3, #26
    cfec:	d502      	bpl.n	cff4 <_printf_common+0x30>
    cfee:	682b      	ldr	r3, [r5, #0]
    cff0:	3302      	adds	r3, #2
    cff2:	602b      	str	r3, [r5, #0]
    cff4:	2706      	movs	r7, #6
    cff6:	6823      	ldr	r3, [r4, #0]
    cff8:	401f      	ands	r7, r3
    cffa:	d027      	beq.n	d04c <_printf_common+0x88>
    cffc:	0023      	movs	r3, r4
    cffe:	3343      	adds	r3, #67	; 0x43
    d000:	781b      	ldrb	r3, [r3, #0]
    d002:	1e5a      	subs	r2, r3, #1
    d004:	4193      	sbcs	r3, r2
    d006:	6822      	ldr	r2, [r4, #0]
    d008:	0692      	lsls	r2, r2, #26
    d00a:	d430      	bmi.n	d06e <_printf_common+0xaa>
    d00c:	0022      	movs	r2, r4
    d00e:	9901      	ldr	r1, [sp, #4]
    d010:	3243      	adds	r2, #67	; 0x43
    d012:	9800      	ldr	r0, [sp, #0]
    d014:	9e08      	ldr	r6, [sp, #32]
    d016:	47b0      	blx	r6
    d018:	1c43      	adds	r3, r0, #1
    d01a:	d025      	beq.n	d068 <_printf_common+0xa4>
    d01c:	2306      	movs	r3, #6
    d01e:	6820      	ldr	r0, [r4, #0]
    d020:	682a      	ldr	r2, [r5, #0]
    d022:	68e1      	ldr	r1, [r4, #12]
    d024:	4003      	ands	r3, r0
    d026:	2500      	movs	r5, #0
    d028:	2b04      	cmp	r3, #4
    d02a:	d103      	bne.n	d034 <_printf_common+0x70>
    d02c:	1a8d      	subs	r5, r1, r2
    d02e:	43eb      	mvns	r3, r5
    d030:	17db      	asrs	r3, r3, #31
    d032:	401d      	ands	r5, r3
    d034:	68a3      	ldr	r3, [r4, #8]
    d036:	6922      	ldr	r2, [r4, #16]
    d038:	4293      	cmp	r3, r2
    d03a:	dd01      	ble.n	d040 <_printf_common+0x7c>
    d03c:	1a9b      	subs	r3, r3, r2
    d03e:	18ed      	adds	r5, r5, r3
    d040:	2700      	movs	r7, #0
    d042:	42bd      	cmp	r5, r7
    d044:	d120      	bne.n	d088 <_printf_common+0xc4>
    d046:	2000      	movs	r0, #0
    d048:	e010      	b.n	d06c <_printf_common+0xa8>
    d04a:	3701      	adds	r7, #1
    d04c:	68e3      	ldr	r3, [r4, #12]
    d04e:	682a      	ldr	r2, [r5, #0]
    d050:	1a9b      	subs	r3, r3, r2
    d052:	429f      	cmp	r7, r3
    d054:	dad2      	bge.n	cffc <_printf_common+0x38>
    d056:	0022      	movs	r2, r4
    d058:	2301      	movs	r3, #1
    d05a:	3219      	adds	r2, #25
    d05c:	9901      	ldr	r1, [sp, #4]
    d05e:	9800      	ldr	r0, [sp, #0]
    d060:	9e08      	ldr	r6, [sp, #32]
    d062:	47b0      	blx	r6
    d064:	1c43      	adds	r3, r0, #1
    d066:	d1f0      	bne.n	d04a <_printf_common+0x86>
    d068:	2001      	movs	r0, #1
    d06a:	4240      	negs	r0, r0
    d06c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d06e:	2030      	movs	r0, #48	; 0x30
    d070:	18e1      	adds	r1, r4, r3
    d072:	3143      	adds	r1, #67	; 0x43
    d074:	7008      	strb	r0, [r1, #0]
    d076:	0021      	movs	r1, r4
    d078:	1c5a      	adds	r2, r3, #1
    d07a:	3145      	adds	r1, #69	; 0x45
    d07c:	7809      	ldrb	r1, [r1, #0]
    d07e:	18a2      	adds	r2, r4, r2
    d080:	3243      	adds	r2, #67	; 0x43
    d082:	3302      	adds	r3, #2
    d084:	7011      	strb	r1, [r2, #0]
    d086:	e7c1      	b.n	d00c <_printf_common+0x48>
    d088:	0022      	movs	r2, r4
    d08a:	2301      	movs	r3, #1
    d08c:	321a      	adds	r2, #26
    d08e:	9901      	ldr	r1, [sp, #4]
    d090:	9800      	ldr	r0, [sp, #0]
    d092:	9e08      	ldr	r6, [sp, #32]
    d094:	47b0      	blx	r6
    d096:	1c43      	adds	r3, r0, #1
    d098:	d0e6      	beq.n	d068 <_printf_common+0xa4>
    d09a:	3701      	adds	r7, #1
    d09c:	e7d1      	b.n	d042 <_printf_common+0x7e>
	...

0000d0a0 <_printf_i>:
    d0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0a2:	b08b      	sub	sp, #44	; 0x2c
    d0a4:	9206      	str	r2, [sp, #24]
    d0a6:	000a      	movs	r2, r1
    d0a8:	3243      	adds	r2, #67	; 0x43
    d0aa:	9307      	str	r3, [sp, #28]
    d0ac:	9005      	str	r0, [sp, #20]
    d0ae:	9204      	str	r2, [sp, #16]
    d0b0:	7e0a      	ldrb	r2, [r1, #24]
    d0b2:	000c      	movs	r4, r1
    d0b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0b6:	2a6e      	cmp	r2, #110	; 0x6e
    d0b8:	d100      	bne.n	d0bc <_printf_i+0x1c>
    d0ba:	e08f      	b.n	d1dc <_printf_i+0x13c>
    d0bc:	d817      	bhi.n	d0ee <_printf_i+0x4e>
    d0be:	2a63      	cmp	r2, #99	; 0x63
    d0c0:	d02c      	beq.n	d11c <_printf_i+0x7c>
    d0c2:	d808      	bhi.n	d0d6 <_printf_i+0x36>
    d0c4:	2a00      	cmp	r2, #0
    d0c6:	d100      	bne.n	d0ca <_printf_i+0x2a>
    d0c8:	e099      	b.n	d1fe <_printf_i+0x15e>
    d0ca:	2a58      	cmp	r2, #88	; 0x58
    d0cc:	d054      	beq.n	d178 <_printf_i+0xd8>
    d0ce:	0026      	movs	r6, r4
    d0d0:	3642      	adds	r6, #66	; 0x42
    d0d2:	7032      	strb	r2, [r6, #0]
    d0d4:	e029      	b.n	d12a <_printf_i+0x8a>
    d0d6:	2a64      	cmp	r2, #100	; 0x64
    d0d8:	d001      	beq.n	d0de <_printf_i+0x3e>
    d0da:	2a69      	cmp	r2, #105	; 0x69
    d0dc:	d1f7      	bne.n	d0ce <_printf_i+0x2e>
    d0de:	6821      	ldr	r1, [r4, #0]
    d0e0:	681a      	ldr	r2, [r3, #0]
    d0e2:	0608      	lsls	r0, r1, #24
    d0e4:	d523      	bpl.n	d12e <_printf_i+0x8e>
    d0e6:	1d11      	adds	r1, r2, #4
    d0e8:	6019      	str	r1, [r3, #0]
    d0ea:	6815      	ldr	r5, [r2, #0]
    d0ec:	e025      	b.n	d13a <_printf_i+0x9a>
    d0ee:	2a73      	cmp	r2, #115	; 0x73
    d0f0:	d100      	bne.n	d0f4 <_printf_i+0x54>
    d0f2:	e088      	b.n	d206 <_printf_i+0x166>
    d0f4:	d808      	bhi.n	d108 <_printf_i+0x68>
    d0f6:	2a6f      	cmp	r2, #111	; 0x6f
    d0f8:	d029      	beq.n	d14e <_printf_i+0xae>
    d0fa:	2a70      	cmp	r2, #112	; 0x70
    d0fc:	d1e7      	bne.n	d0ce <_printf_i+0x2e>
    d0fe:	2220      	movs	r2, #32
    d100:	6809      	ldr	r1, [r1, #0]
    d102:	430a      	orrs	r2, r1
    d104:	6022      	str	r2, [r4, #0]
    d106:	e003      	b.n	d110 <_printf_i+0x70>
    d108:	2a75      	cmp	r2, #117	; 0x75
    d10a:	d020      	beq.n	d14e <_printf_i+0xae>
    d10c:	2a78      	cmp	r2, #120	; 0x78
    d10e:	d1de      	bne.n	d0ce <_printf_i+0x2e>
    d110:	0022      	movs	r2, r4
    d112:	2178      	movs	r1, #120	; 0x78
    d114:	3245      	adds	r2, #69	; 0x45
    d116:	7011      	strb	r1, [r2, #0]
    d118:	4a6c      	ldr	r2, [pc, #432]	; (d2cc <_printf_i+0x22c>)
    d11a:	e030      	b.n	d17e <_printf_i+0xde>
    d11c:	000e      	movs	r6, r1
    d11e:	681a      	ldr	r2, [r3, #0]
    d120:	3642      	adds	r6, #66	; 0x42
    d122:	1d11      	adds	r1, r2, #4
    d124:	6019      	str	r1, [r3, #0]
    d126:	6813      	ldr	r3, [r2, #0]
    d128:	7033      	strb	r3, [r6, #0]
    d12a:	2301      	movs	r3, #1
    d12c:	e079      	b.n	d222 <_printf_i+0x182>
    d12e:	0649      	lsls	r1, r1, #25
    d130:	d5d9      	bpl.n	d0e6 <_printf_i+0x46>
    d132:	1d11      	adds	r1, r2, #4
    d134:	6019      	str	r1, [r3, #0]
    d136:	2300      	movs	r3, #0
    d138:	5ed5      	ldrsh	r5, [r2, r3]
    d13a:	2d00      	cmp	r5, #0
    d13c:	da03      	bge.n	d146 <_printf_i+0xa6>
    d13e:	232d      	movs	r3, #45	; 0x2d
    d140:	9a04      	ldr	r2, [sp, #16]
    d142:	426d      	negs	r5, r5
    d144:	7013      	strb	r3, [r2, #0]
    d146:	4b62      	ldr	r3, [pc, #392]	; (d2d0 <_printf_i+0x230>)
    d148:	270a      	movs	r7, #10
    d14a:	9303      	str	r3, [sp, #12]
    d14c:	e02f      	b.n	d1ae <_printf_i+0x10e>
    d14e:	6820      	ldr	r0, [r4, #0]
    d150:	6819      	ldr	r1, [r3, #0]
    d152:	0605      	lsls	r5, r0, #24
    d154:	d503      	bpl.n	d15e <_printf_i+0xbe>
    d156:	1d08      	adds	r0, r1, #4
    d158:	6018      	str	r0, [r3, #0]
    d15a:	680d      	ldr	r5, [r1, #0]
    d15c:	e005      	b.n	d16a <_printf_i+0xca>
    d15e:	0640      	lsls	r0, r0, #25
    d160:	d5f9      	bpl.n	d156 <_printf_i+0xb6>
    d162:	680d      	ldr	r5, [r1, #0]
    d164:	1d08      	adds	r0, r1, #4
    d166:	6018      	str	r0, [r3, #0]
    d168:	b2ad      	uxth	r5, r5
    d16a:	4b59      	ldr	r3, [pc, #356]	; (d2d0 <_printf_i+0x230>)
    d16c:	2708      	movs	r7, #8
    d16e:	9303      	str	r3, [sp, #12]
    d170:	2a6f      	cmp	r2, #111	; 0x6f
    d172:	d018      	beq.n	d1a6 <_printf_i+0x106>
    d174:	270a      	movs	r7, #10
    d176:	e016      	b.n	d1a6 <_printf_i+0x106>
    d178:	3145      	adds	r1, #69	; 0x45
    d17a:	700a      	strb	r2, [r1, #0]
    d17c:	4a54      	ldr	r2, [pc, #336]	; (d2d0 <_printf_i+0x230>)
    d17e:	9203      	str	r2, [sp, #12]
    d180:	681a      	ldr	r2, [r3, #0]
    d182:	6821      	ldr	r1, [r4, #0]
    d184:	1d10      	adds	r0, r2, #4
    d186:	6018      	str	r0, [r3, #0]
    d188:	6815      	ldr	r5, [r2, #0]
    d18a:	0608      	lsls	r0, r1, #24
    d18c:	d522      	bpl.n	d1d4 <_printf_i+0x134>
    d18e:	07cb      	lsls	r3, r1, #31
    d190:	d502      	bpl.n	d198 <_printf_i+0xf8>
    d192:	2320      	movs	r3, #32
    d194:	4319      	orrs	r1, r3
    d196:	6021      	str	r1, [r4, #0]
    d198:	2710      	movs	r7, #16
    d19a:	2d00      	cmp	r5, #0
    d19c:	d103      	bne.n	d1a6 <_printf_i+0x106>
    d19e:	2320      	movs	r3, #32
    d1a0:	6822      	ldr	r2, [r4, #0]
    d1a2:	439a      	bics	r2, r3
    d1a4:	6022      	str	r2, [r4, #0]
    d1a6:	0023      	movs	r3, r4
    d1a8:	2200      	movs	r2, #0
    d1aa:	3343      	adds	r3, #67	; 0x43
    d1ac:	701a      	strb	r2, [r3, #0]
    d1ae:	6863      	ldr	r3, [r4, #4]
    d1b0:	60a3      	str	r3, [r4, #8]
    d1b2:	2b00      	cmp	r3, #0
    d1b4:	db5c      	blt.n	d270 <_printf_i+0x1d0>
    d1b6:	2204      	movs	r2, #4
    d1b8:	6821      	ldr	r1, [r4, #0]
    d1ba:	4391      	bics	r1, r2
    d1bc:	6021      	str	r1, [r4, #0]
    d1be:	2d00      	cmp	r5, #0
    d1c0:	d158      	bne.n	d274 <_printf_i+0x1d4>
    d1c2:	9e04      	ldr	r6, [sp, #16]
    d1c4:	2b00      	cmp	r3, #0
    d1c6:	d064      	beq.n	d292 <_printf_i+0x1f2>
    d1c8:	0026      	movs	r6, r4
    d1ca:	9b03      	ldr	r3, [sp, #12]
    d1cc:	3642      	adds	r6, #66	; 0x42
    d1ce:	781b      	ldrb	r3, [r3, #0]
    d1d0:	7033      	strb	r3, [r6, #0]
    d1d2:	e05e      	b.n	d292 <_printf_i+0x1f2>
    d1d4:	0648      	lsls	r0, r1, #25
    d1d6:	d5da      	bpl.n	d18e <_printf_i+0xee>
    d1d8:	b2ad      	uxth	r5, r5
    d1da:	e7d8      	b.n	d18e <_printf_i+0xee>
    d1dc:	6809      	ldr	r1, [r1, #0]
    d1de:	681a      	ldr	r2, [r3, #0]
    d1e0:	0608      	lsls	r0, r1, #24
    d1e2:	d505      	bpl.n	d1f0 <_printf_i+0x150>
    d1e4:	1d11      	adds	r1, r2, #4
    d1e6:	6019      	str	r1, [r3, #0]
    d1e8:	6813      	ldr	r3, [r2, #0]
    d1ea:	6962      	ldr	r2, [r4, #20]
    d1ec:	601a      	str	r2, [r3, #0]
    d1ee:	e006      	b.n	d1fe <_printf_i+0x15e>
    d1f0:	0649      	lsls	r1, r1, #25
    d1f2:	d5f7      	bpl.n	d1e4 <_printf_i+0x144>
    d1f4:	1d11      	adds	r1, r2, #4
    d1f6:	6019      	str	r1, [r3, #0]
    d1f8:	6813      	ldr	r3, [r2, #0]
    d1fa:	8aa2      	ldrh	r2, [r4, #20]
    d1fc:	801a      	strh	r2, [r3, #0]
    d1fe:	2300      	movs	r3, #0
    d200:	9e04      	ldr	r6, [sp, #16]
    d202:	6123      	str	r3, [r4, #16]
    d204:	e054      	b.n	d2b0 <_printf_i+0x210>
    d206:	681a      	ldr	r2, [r3, #0]
    d208:	1d11      	adds	r1, r2, #4
    d20a:	6019      	str	r1, [r3, #0]
    d20c:	6816      	ldr	r6, [r2, #0]
    d20e:	2100      	movs	r1, #0
    d210:	6862      	ldr	r2, [r4, #4]
    d212:	0030      	movs	r0, r6
    d214:	f000 f958 	bl	d4c8 <memchr>
    d218:	2800      	cmp	r0, #0
    d21a:	d001      	beq.n	d220 <_printf_i+0x180>
    d21c:	1b80      	subs	r0, r0, r6
    d21e:	6060      	str	r0, [r4, #4]
    d220:	6863      	ldr	r3, [r4, #4]
    d222:	6123      	str	r3, [r4, #16]
    d224:	2300      	movs	r3, #0
    d226:	9a04      	ldr	r2, [sp, #16]
    d228:	7013      	strb	r3, [r2, #0]
    d22a:	e041      	b.n	d2b0 <_printf_i+0x210>
    d22c:	6923      	ldr	r3, [r4, #16]
    d22e:	0032      	movs	r2, r6
    d230:	9906      	ldr	r1, [sp, #24]
    d232:	9805      	ldr	r0, [sp, #20]
    d234:	9d07      	ldr	r5, [sp, #28]
    d236:	47a8      	blx	r5
    d238:	1c43      	adds	r3, r0, #1
    d23a:	d043      	beq.n	d2c4 <_printf_i+0x224>
    d23c:	6823      	ldr	r3, [r4, #0]
    d23e:	2500      	movs	r5, #0
    d240:	079b      	lsls	r3, r3, #30
    d242:	d40f      	bmi.n	d264 <_printf_i+0x1c4>
    d244:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d246:	68e0      	ldr	r0, [r4, #12]
    d248:	4298      	cmp	r0, r3
    d24a:	da3d      	bge.n	d2c8 <_printf_i+0x228>
    d24c:	0018      	movs	r0, r3
    d24e:	e03b      	b.n	d2c8 <_printf_i+0x228>
    d250:	0022      	movs	r2, r4
    d252:	2301      	movs	r3, #1
    d254:	3219      	adds	r2, #25
    d256:	9906      	ldr	r1, [sp, #24]
    d258:	9805      	ldr	r0, [sp, #20]
    d25a:	9e07      	ldr	r6, [sp, #28]
    d25c:	47b0      	blx	r6
    d25e:	1c43      	adds	r3, r0, #1
    d260:	d030      	beq.n	d2c4 <_printf_i+0x224>
    d262:	3501      	adds	r5, #1
    d264:	68e3      	ldr	r3, [r4, #12]
    d266:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d268:	1a9b      	subs	r3, r3, r2
    d26a:	429d      	cmp	r5, r3
    d26c:	dbf0      	blt.n	d250 <_printf_i+0x1b0>
    d26e:	e7e9      	b.n	d244 <_printf_i+0x1a4>
    d270:	2d00      	cmp	r5, #0
    d272:	d0a9      	beq.n	d1c8 <_printf_i+0x128>
    d274:	9e04      	ldr	r6, [sp, #16]
    d276:	0028      	movs	r0, r5
    d278:	0039      	movs	r1, r7
    d27a:	f7fe fc25 	bl	bac8 <__aeabi_uidivmod>
    d27e:	9b03      	ldr	r3, [sp, #12]
    d280:	3e01      	subs	r6, #1
    d282:	5c5b      	ldrb	r3, [r3, r1]
    d284:	0028      	movs	r0, r5
    d286:	7033      	strb	r3, [r6, #0]
    d288:	0039      	movs	r1, r7
    d28a:	f7fe fb97 	bl	b9bc <__udivsi3>
    d28e:	1e05      	subs	r5, r0, #0
    d290:	d1f1      	bne.n	d276 <_printf_i+0x1d6>
    d292:	2f08      	cmp	r7, #8
    d294:	d109      	bne.n	d2aa <_printf_i+0x20a>
    d296:	6823      	ldr	r3, [r4, #0]
    d298:	07db      	lsls	r3, r3, #31
    d29a:	d506      	bpl.n	d2aa <_printf_i+0x20a>
    d29c:	6863      	ldr	r3, [r4, #4]
    d29e:	6922      	ldr	r2, [r4, #16]
    d2a0:	4293      	cmp	r3, r2
    d2a2:	dc02      	bgt.n	d2aa <_printf_i+0x20a>
    d2a4:	2330      	movs	r3, #48	; 0x30
    d2a6:	3e01      	subs	r6, #1
    d2a8:	7033      	strb	r3, [r6, #0]
    d2aa:	9b04      	ldr	r3, [sp, #16]
    d2ac:	1b9b      	subs	r3, r3, r6
    d2ae:	6123      	str	r3, [r4, #16]
    d2b0:	9b07      	ldr	r3, [sp, #28]
    d2b2:	aa09      	add	r2, sp, #36	; 0x24
    d2b4:	9300      	str	r3, [sp, #0]
    d2b6:	0021      	movs	r1, r4
    d2b8:	9b06      	ldr	r3, [sp, #24]
    d2ba:	9805      	ldr	r0, [sp, #20]
    d2bc:	f7ff fe82 	bl	cfc4 <_printf_common>
    d2c0:	1c43      	adds	r3, r0, #1
    d2c2:	d1b3      	bne.n	d22c <_printf_i+0x18c>
    d2c4:	2001      	movs	r0, #1
    d2c6:	4240      	negs	r0, r0
    d2c8:	b00b      	add	sp, #44	; 0x2c
    d2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2cc:	0000f5e0 	.word	0x0000f5e0
    d2d0:	0000f5cf 	.word	0x0000f5cf

0000d2d4 <_putc_r>:
    d2d4:	b570      	push	{r4, r5, r6, lr}
    d2d6:	0006      	movs	r6, r0
    d2d8:	000d      	movs	r5, r1
    d2da:	0014      	movs	r4, r2
    d2dc:	2800      	cmp	r0, #0
    d2de:	d004      	beq.n	d2ea <_putc_r+0x16>
    d2e0:	6983      	ldr	r3, [r0, #24]
    d2e2:	2b00      	cmp	r3, #0
    d2e4:	d101      	bne.n	d2ea <_putc_r+0x16>
    d2e6:	f7ff faab 	bl	c840 <__sinit>
    d2ea:	4b12      	ldr	r3, [pc, #72]	; (d334 <_putc_r+0x60>)
    d2ec:	429c      	cmp	r4, r3
    d2ee:	d111      	bne.n	d314 <_putc_r+0x40>
    d2f0:	6874      	ldr	r4, [r6, #4]
    d2f2:	68a3      	ldr	r3, [r4, #8]
    d2f4:	3b01      	subs	r3, #1
    d2f6:	60a3      	str	r3, [r4, #8]
    d2f8:	2b00      	cmp	r3, #0
    d2fa:	da05      	bge.n	d308 <_putc_r+0x34>
    d2fc:	69a2      	ldr	r2, [r4, #24]
    d2fe:	4293      	cmp	r3, r2
    d300:	db12      	blt.n	d328 <_putc_r+0x54>
    d302:	b2eb      	uxtb	r3, r5
    d304:	2b0a      	cmp	r3, #10
    d306:	d00f      	beq.n	d328 <_putc_r+0x54>
    d308:	6823      	ldr	r3, [r4, #0]
    d30a:	b2e8      	uxtb	r0, r5
    d30c:	1c5a      	adds	r2, r3, #1
    d30e:	6022      	str	r2, [r4, #0]
    d310:	701d      	strb	r5, [r3, #0]
    d312:	bd70      	pop	{r4, r5, r6, pc}
    d314:	4b08      	ldr	r3, [pc, #32]	; (d338 <_putc_r+0x64>)
    d316:	429c      	cmp	r4, r3
    d318:	d101      	bne.n	d31e <_putc_r+0x4a>
    d31a:	68b4      	ldr	r4, [r6, #8]
    d31c:	e7e9      	b.n	d2f2 <_putc_r+0x1e>
    d31e:	4b07      	ldr	r3, [pc, #28]	; (d33c <_putc_r+0x68>)
    d320:	429c      	cmp	r4, r3
    d322:	d1e6      	bne.n	d2f2 <_putc_r+0x1e>
    d324:	68f4      	ldr	r4, [r6, #12]
    d326:	e7e4      	b.n	d2f2 <_putc_r+0x1e>
    d328:	0022      	movs	r2, r4
    d32a:	0029      	movs	r1, r5
    d32c:	0030      	movs	r0, r6
    d32e:	f7ff f8c3 	bl	c4b8 <__swbuf_r>
    d332:	e7ee      	b.n	d312 <_putc_r+0x3e>
    d334:	0000f574 	.word	0x0000f574
    d338:	0000f594 	.word	0x0000f594
    d33c:	0000f554 	.word	0x0000f554

0000d340 <__sread>:
    d340:	b570      	push	{r4, r5, r6, lr}
    d342:	000c      	movs	r4, r1
    d344:	250e      	movs	r5, #14
    d346:	5f49      	ldrsh	r1, [r1, r5]
    d348:	f000 f8f0 	bl	d52c <_read_r>
    d34c:	2800      	cmp	r0, #0
    d34e:	db03      	blt.n	d358 <__sread+0x18>
    d350:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d352:	181b      	adds	r3, r3, r0
    d354:	6563      	str	r3, [r4, #84]	; 0x54
    d356:	bd70      	pop	{r4, r5, r6, pc}
    d358:	89a3      	ldrh	r3, [r4, #12]
    d35a:	4a02      	ldr	r2, [pc, #8]	; (d364 <__sread+0x24>)
    d35c:	4013      	ands	r3, r2
    d35e:	81a3      	strh	r3, [r4, #12]
    d360:	e7f9      	b.n	d356 <__sread+0x16>
    d362:	46c0      	nop			; (mov r8, r8)
    d364:	ffffefff 	.word	0xffffefff

0000d368 <__swrite>:
    d368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d36a:	001f      	movs	r7, r3
    d36c:	898b      	ldrh	r3, [r1, #12]
    d36e:	0005      	movs	r5, r0
    d370:	000c      	movs	r4, r1
    d372:	0016      	movs	r6, r2
    d374:	05db      	lsls	r3, r3, #23
    d376:	d505      	bpl.n	d384 <__swrite+0x1c>
    d378:	230e      	movs	r3, #14
    d37a:	5ec9      	ldrsh	r1, [r1, r3]
    d37c:	2200      	movs	r2, #0
    d37e:	2302      	movs	r3, #2
    d380:	f000 f88e 	bl	d4a0 <_lseek_r>
    d384:	89a3      	ldrh	r3, [r4, #12]
    d386:	4a05      	ldr	r2, [pc, #20]	; (d39c <__swrite+0x34>)
    d388:	0028      	movs	r0, r5
    d38a:	4013      	ands	r3, r2
    d38c:	81a3      	strh	r3, [r4, #12]
    d38e:	0032      	movs	r2, r6
    d390:	230e      	movs	r3, #14
    d392:	5ee1      	ldrsh	r1, [r4, r3]
    d394:	003b      	movs	r3, r7
    d396:	f000 f839 	bl	d40c <_write_r>
    d39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d39c:	ffffefff 	.word	0xffffefff

0000d3a0 <__sseek>:
    d3a0:	b570      	push	{r4, r5, r6, lr}
    d3a2:	000c      	movs	r4, r1
    d3a4:	250e      	movs	r5, #14
    d3a6:	5f49      	ldrsh	r1, [r1, r5]
    d3a8:	f000 f87a 	bl	d4a0 <_lseek_r>
    d3ac:	89a3      	ldrh	r3, [r4, #12]
    d3ae:	1c42      	adds	r2, r0, #1
    d3b0:	d103      	bne.n	d3ba <__sseek+0x1a>
    d3b2:	4a05      	ldr	r2, [pc, #20]	; (d3c8 <__sseek+0x28>)
    d3b4:	4013      	ands	r3, r2
    d3b6:	81a3      	strh	r3, [r4, #12]
    d3b8:	bd70      	pop	{r4, r5, r6, pc}
    d3ba:	2280      	movs	r2, #128	; 0x80
    d3bc:	0152      	lsls	r2, r2, #5
    d3be:	4313      	orrs	r3, r2
    d3c0:	81a3      	strh	r3, [r4, #12]
    d3c2:	6560      	str	r0, [r4, #84]	; 0x54
    d3c4:	e7f8      	b.n	d3b8 <__sseek+0x18>
    d3c6:	46c0      	nop			; (mov r8, r8)
    d3c8:	ffffefff 	.word	0xffffefff

0000d3cc <__sclose>:
    d3cc:	b510      	push	{r4, lr}
    d3ce:	230e      	movs	r3, #14
    d3d0:	5ec9      	ldrsh	r1, [r1, r3]
    d3d2:	f000 f82f 	bl	d434 <_close_r>
    d3d6:	bd10      	pop	{r4, pc}

0000d3d8 <strchr>:
    d3d8:	b2c9      	uxtb	r1, r1
    d3da:	7803      	ldrb	r3, [r0, #0]
    d3dc:	2b00      	cmp	r3, #0
    d3de:	d004      	beq.n	d3ea <strchr+0x12>
    d3e0:	4299      	cmp	r1, r3
    d3e2:	d100      	bne.n	d3e6 <strchr+0xe>
    d3e4:	4770      	bx	lr
    d3e6:	3001      	adds	r0, #1
    d3e8:	e7f7      	b.n	d3da <strchr+0x2>
    d3ea:	424b      	negs	r3, r1
    d3ec:	4159      	adcs	r1, r3
    d3ee:	4249      	negs	r1, r1
    d3f0:	4008      	ands	r0, r1
    d3f2:	e7f7      	b.n	d3e4 <strchr+0xc>

0000d3f4 <__ascii_wctomb>:
    d3f4:	1e0b      	subs	r3, r1, #0
    d3f6:	d004      	beq.n	d402 <__ascii_wctomb+0xe>
    d3f8:	2aff      	cmp	r2, #255	; 0xff
    d3fa:	d904      	bls.n	d406 <__ascii_wctomb+0x12>
    d3fc:	238a      	movs	r3, #138	; 0x8a
    d3fe:	6003      	str	r3, [r0, #0]
    d400:	3b8b      	subs	r3, #139	; 0x8b
    d402:	0018      	movs	r0, r3
    d404:	4770      	bx	lr
    d406:	700a      	strb	r2, [r1, #0]
    d408:	2301      	movs	r3, #1
    d40a:	e7fa      	b.n	d402 <__ascii_wctomb+0xe>

0000d40c <_write_r>:
    d40c:	b570      	push	{r4, r5, r6, lr}
    d40e:	0005      	movs	r5, r0
    d410:	0008      	movs	r0, r1
    d412:	0011      	movs	r1, r2
    d414:	2200      	movs	r2, #0
    d416:	4c06      	ldr	r4, [pc, #24]	; (d430 <_write_r+0x24>)
    d418:	6022      	str	r2, [r4, #0]
    d41a:	001a      	movs	r2, r3
    d41c:	f7f9 faf4 	bl	6a08 <_write>
    d420:	1c43      	adds	r3, r0, #1
    d422:	d103      	bne.n	d42c <_write_r+0x20>
    d424:	6823      	ldr	r3, [r4, #0]
    d426:	2b00      	cmp	r3, #0
    d428:	d000      	beq.n	d42c <_write_r+0x20>
    d42a:	602b      	str	r3, [r5, #0]
    d42c:	bd70      	pop	{r4, r5, r6, pc}
    d42e:	46c0      	nop			; (mov r8, r8)
    d430:	200011f4 	.word	0x200011f4

0000d434 <_close_r>:
    d434:	2300      	movs	r3, #0
    d436:	b570      	push	{r4, r5, r6, lr}
    d438:	4c06      	ldr	r4, [pc, #24]	; (d454 <_close_r+0x20>)
    d43a:	0005      	movs	r5, r0
    d43c:	0008      	movs	r0, r1
    d43e:	6023      	str	r3, [r4, #0]
    d440:	f7f9 fb1c 	bl	6a7c <_close>
    d444:	1c43      	adds	r3, r0, #1
    d446:	d103      	bne.n	d450 <_close_r+0x1c>
    d448:	6823      	ldr	r3, [r4, #0]
    d44a:	2b00      	cmp	r3, #0
    d44c:	d000      	beq.n	d450 <_close_r+0x1c>
    d44e:	602b      	str	r3, [r5, #0]
    d450:	bd70      	pop	{r4, r5, r6, pc}
    d452:	46c0      	nop			; (mov r8, r8)
    d454:	200011f4 	.word	0x200011f4

0000d458 <_fstat_r>:
    d458:	2300      	movs	r3, #0
    d45a:	b570      	push	{r4, r5, r6, lr}
    d45c:	4c06      	ldr	r4, [pc, #24]	; (d478 <_fstat_r+0x20>)
    d45e:	0005      	movs	r5, r0
    d460:	0008      	movs	r0, r1
    d462:	0011      	movs	r1, r2
    d464:	6023      	str	r3, [r4, #0]
    d466:	f7f9 fb0c 	bl	6a82 <_fstat>
    d46a:	1c43      	adds	r3, r0, #1
    d46c:	d103      	bne.n	d476 <_fstat_r+0x1e>
    d46e:	6823      	ldr	r3, [r4, #0]
    d470:	2b00      	cmp	r3, #0
    d472:	d000      	beq.n	d476 <_fstat_r+0x1e>
    d474:	602b      	str	r3, [r5, #0]
    d476:	bd70      	pop	{r4, r5, r6, pc}
    d478:	200011f4 	.word	0x200011f4

0000d47c <_isatty_r>:
    d47c:	2300      	movs	r3, #0
    d47e:	b570      	push	{r4, r5, r6, lr}
    d480:	4c06      	ldr	r4, [pc, #24]	; (d49c <_isatty_r+0x20>)
    d482:	0005      	movs	r5, r0
    d484:	0008      	movs	r0, r1
    d486:	6023      	str	r3, [r4, #0]
    d488:	f7f9 fb00 	bl	6a8c <_isatty>
    d48c:	1c43      	adds	r3, r0, #1
    d48e:	d103      	bne.n	d498 <_isatty_r+0x1c>
    d490:	6823      	ldr	r3, [r4, #0]
    d492:	2b00      	cmp	r3, #0
    d494:	d000      	beq.n	d498 <_isatty_r+0x1c>
    d496:	602b      	str	r3, [r5, #0]
    d498:	bd70      	pop	{r4, r5, r6, pc}
    d49a:	46c0      	nop			; (mov r8, r8)
    d49c:	200011f4 	.word	0x200011f4

0000d4a0 <_lseek_r>:
    d4a0:	b570      	push	{r4, r5, r6, lr}
    d4a2:	0005      	movs	r5, r0
    d4a4:	0008      	movs	r0, r1
    d4a6:	0011      	movs	r1, r2
    d4a8:	2200      	movs	r2, #0
    d4aa:	4c06      	ldr	r4, [pc, #24]	; (d4c4 <_lseek_r+0x24>)
    d4ac:	6022      	str	r2, [r4, #0]
    d4ae:	001a      	movs	r2, r3
    d4b0:	f7f9 faee 	bl	6a90 <_lseek>
    d4b4:	1c43      	adds	r3, r0, #1
    d4b6:	d103      	bne.n	d4c0 <_lseek_r+0x20>
    d4b8:	6823      	ldr	r3, [r4, #0]
    d4ba:	2b00      	cmp	r3, #0
    d4bc:	d000      	beq.n	d4c0 <_lseek_r+0x20>
    d4be:	602b      	str	r3, [r5, #0]
    d4c0:	bd70      	pop	{r4, r5, r6, pc}
    d4c2:	46c0      	nop			; (mov r8, r8)
    d4c4:	200011f4 	.word	0x200011f4

0000d4c8 <memchr>:
    d4c8:	b2c9      	uxtb	r1, r1
    d4ca:	1882      	adds	r2, r0, r2
    d4cc:	4290      	cmp	r0, r2
    d4ce:	d101      	bne.n	d4d4 <memchr+0xc>
    d4d0:	2000      	movs	r0, #0
    d4d2:	4770      	bx	lr
    d4d4:	7803      	ldrb	r3, [r0, #0]
    d4d6:	428b      	cmp	r3, r1
    d4d8:	d0fb      	beq.n	d4d2 <memchr+0xa>
    d4da:	3001      	adds	r0, #1
    d4dc:	e7f6      	b.n	d4cc <memchr+0x4>

0000d4de <_realloc_r>:
    d4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4e0:	0007      	movs	r7, r0
    d4e2:	000d      	movs	r5, r1
    d4e4:	0016      	movs	r6, r2
    d4e6:	2900      	cmp	r1, #0
    d4e8:	d105      	bne.n	d4f6 <_realloc_r+0x18>
    d4ea:	0011      	movs	r1, r2
    d4ec:	f7fe fcb2 	bl	be54 <_malloc_r>
    d4f0:	0004      	movs	r4, r0
    d4f2:	0020      	movs	r0, r4
    d4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d4f6:	2a00      	cmp	r2, #0
    d4f8:	d103      	bne.n	d502 <_realloc_r+0x24>
    d4fa:	f7fe fc61 	bl	bdc0 <_free_r>
    d4fe:	0034      	movs	r4, r6
    d500:	e7f7      	b.n	d4f2 <_realloc_r+0x14>
    d502:	f000 f827 	bl	d554 <_malloc_usable_size_r>
    d506:	002c      	movs	r4, r5
    d508:	4286      	cmp	r6, r0
    d50a:	d9f2      	bls.n	d4f2 <_realloc_r+0x14>
    d50c:	0031      	movs	r1, r6
    d50e:	0038      	movs	r0, r7
    d510:	f7fe fca0 	bl	be54 <_malloc_r>
    d514:	1e04      	subs	r4, r0, #0
    d516:	d0ec      	beq.n	d4f2 <_realloc_r+0x14>
    d518:	0029      	movs	r1, r5
    d51a:	0032      	movs	r2, r6
    d51c:	f7fe fc2c 	bl	bd78 <memcpy>
    d520:	0029      	movs	r1, r5
    d522:	0038      	movs	r0, r7
    d524:	f7fe fc4c 	bl	bdc0 <_free_r>
    d528:	e7e3      	b.n	d4f2 <_realloc_r+0x14>
	...

0000d52c <_read_r>:
    d52c:	b570      	push	{r4, r5, r6, lr}
    d52e:	0005      	movs	r5, r0
    d530:	0008      	movs	r0, r1
    d532:	0011      	movs	r1, r2
    d534:	2200      	movs	r2, #0
    d536:	4c06      	ldr	r4, [pc, #24]	; (d550 <_read_r+0x24>)
    d538:	6022      	str	r2, [r4, #0]
    d53a:	001a      	movs	r2, r3
    d53c:	f7f9 fa42 	bl	69c4 <_read>
    d540:	1c43      	adds	r3, r0, #1
    d542:	d103      	bne.n	d54c <_read_r+0x20>
    d544:	6823      	ldr	r3, [r4, #0]
    d546:	2b00      	cmp	r3, #0
    d548:	d000      	beq.n	d54c <_read_r+0x20>
    d54a:	602b      	str	r3, [r5, #0]
    d54c:	bd70      	pop	{r4, r5, r6, pc}
    d54e:	46c0      	nop			; (mov r8, r8)
    d550:	200011f4 	.word	0x200011f4

0000d554 <_malloc_usable_size_r>:
    d554:	1f0b      	subs	r3, r1, #4
    d556:	681b      	ldr	r3, [r3, #0]
    d558:	1f18      	subs	r0, r3, #4
    d55a:	2b00      	cmp	r3, #0
    d55c:	da01      	bge.n	d562 <_malloc_usable_size_r+0xe>
    d55e:	580b      	ldr	r3, [r1, r0]
    d560:	18c0      	adds	r0, r0, r3
    d562:	4770      	bx	lr

0000d564 <mmc_trans_multipliers>:
    d564:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    d574:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    d584:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    d594:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000d5a4 <sd_mmc_trans_units>:
    d5a4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0000d5c0 <sd_trans_multipliers>:
    d5c0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    d5d0:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    d5e0:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    d5f0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000d600 <__FUNCTION__.14519>:
    d600:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
    d610:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
    d620:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
    d630:	746c 6320 646d 0000 1f7c 0000 1f4c 0000     lt cmd..|...L...
    d640:	1f44 0000 1f5c 0000 1f54 0000 1f74 0000     D...\...T...t...
    d650:	1f64 0000 1f6c 0000                         d...l...

0000d658 <__FUNCTION__.13113>:
    d658:	6968 5f66 6573 646e 0000 0000               hif_send....

0000d664 <__FUNCTION__.13123>:
    d664:	6968 5f66 7369 0072                         hif_isr.

0000d66c <__FUNCTION__.13132>:
    d66c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0000d67c <__FUNCTION__.13144>:
    d67c:	6968 5f66 6572 6563 7669 0065               hif_receive.

0000d688 <__FUNCTION__.13160>:
    d688:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
    d698:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
    d6a8:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
    d6b8:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
    d6c8:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
    d6d8:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
    d6e8:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
    d6f8:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
    d708:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
    d718:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
    d728:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
    d738:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
    d748:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
    d758:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
    d768:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
    d778:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
    d788:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
    d798:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
    d7a8:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
    d7b8:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
    d7c8:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
    d7d8:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
    d7e8:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
    d7f8:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
    d808:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
    d818:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
    d828:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
    d838:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
    d848:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
    d858:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
    d868:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
    d878:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
    d888:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
    d898:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
    d8a8:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
    d8b8:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
    d8c8:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
    d8d8:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
    d8e8:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
    d8f8:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
    d908:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
    d918:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
    d928:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
    d938:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
    d948:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
    d958:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
    d968:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

0000d978 <__FUNCTION__.13095>:
    d978:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0000d984 <__FUNCTION__.13124>:
    d984:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0000d994 <__FUNCTION__.13155>:
    d994:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
    d9a4:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
    d9b4:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
    d9c4:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
    d9d4:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
    d9e4:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
    d9f4:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
    da04:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
    da14:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
    da24:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
    da34:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
    da44:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
    da54:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
    da64:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
    da74:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
    da84:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
    da94:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
    daa4:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
    dab4:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
    dac4:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
    dad4:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
    dae4:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
    daf4:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
    db04:	3132 343a 3a33 3131 0000 0000 7041 2072     21:43:11....Apr 
    db14:	3620 3220 3130 0039 7244 7669 7265 6220      6 2019.Driver b
    db24:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
    db34:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
    db44:	2065 6556 7372 6f69 006e 0000               e Version...

0000db50 <__FUNCTION__.12952>:
    db50:	6863 7069 775f 6b61 0065 0000               chip_wake...

0000db5c <__FUNCTION__.13001>:
    db5c:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
    db6c:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
    db7c:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
    db8c:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
    db9c:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
    dbac:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
    dbbc:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

0000dbcc <__FUNCTION__.12999>:
    dbcc:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0000dbd8 <__FUNCTION__.13006>:
    dbd8:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
    dbe8:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
    dbf8:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
    dc08:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
    dc18:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
    dc28:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
    dc38:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
    dc48:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
    dc58:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
    dc68:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
    dc78:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
    dc88:	4920 2044 6c25 0a78 0000 0000 2f5c 0000      ID %lx.....\/..
    dc98:	2f5c 0000 2f8c 0000 2f0e 0000 2f32 0000     \/.../.../..2/..
    dca8:	2f40 0000 2f72 0000 2f72 0000 2fba 0000     @/..r/..r/.../..
    dcb8:	2ef2 0000 2ff4 0000 2ff4 0000 2ff4 0000     ...../.../.../..
    dcc8:	2ff4 0000 2f4e 0000 c9c3 cac4               ./..N/......

0000dcd4 <__FUNCTION__.12268>:
    dcd4:	7073 5f69 6d63 0064                         spi_cmd.

0000dcdc <__FUNCTION__.12275>:
    dcdc:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0000dcec <__FUNCTION__.12284>:
    dcec:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0000dcf8 <__FUNCTION__.12300>:
    dcf8:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0000dd08 <__FUNCTION__.12315>:
    dd08:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0000dd18 <__FUNCTION__.12327>:
    dd18:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0000dd28 <__FUNCTION__.12338>:
    dd28:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0000dd38 <__FUNCTION__.12350>:
    dd38:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0000dd48 <__FUNCTION__.12363>:
    dd48:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0000dd54 <__FUNCTION__.12384>:
    dd54:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0000dd60 <crc7_syndrome_table>:
    dd60:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
    dd70:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
    dd80:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
    dd90:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
    dda0:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
    ddb0:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
    ddc0:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
    ddd0:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
    dde0:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
    ddf0:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
    de00:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
    de10:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
    de20:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
    de30:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
    de40:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
    de50:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
    de60:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    de70:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    de80:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
    de90:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
    dea0:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
    deb0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    dec0:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    ded0:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
    dee0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
    def0:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
    df00:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
    df10:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
    df20:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
    df30:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    df40:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
    df50:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
    df60:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    df70:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
    df80:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
    df90:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
    dfa0:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    dfb0:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
    dfc0:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
    dfd0:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
    dfe0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    dff0:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
    e000:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
    e010:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
    e020:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
    e030:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
    e040:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
    e050:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    e060:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
    e070:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
    e080:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    e090:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
    e0a0:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
    e0b0:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    e0c0:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
    e0d0:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
    e0e0:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
    e0f0:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
    e100:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
    e110:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    e120:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
    e130:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
    e140:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    e150:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
    e160:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    e170:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
    e180:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
    e190:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    e1a0:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
    e1b0:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
    e1c0:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    e1d0:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
    e1e0:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
    e1f0:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
    e200:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
    e210:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
    e220:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
    e230:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    e240:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
    e250:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
    e260:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    e270:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
    e280:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
    e290:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
    e2a0:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
    e2b0:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
    e2c0:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
    e2d0:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
    e2e0:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
    e2f0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    e300:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
    e310:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
    e320:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
    e330:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
    e340:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
    e350:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    e360:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
    e370:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
    e380:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
    e390:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
    e3a0:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
    e3b0:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
    e3c0:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
    e3d0:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
    e3e0:	206e 4449 3d20 2520 0d64 000a 0800 4200     n ID = %d......B
    e3f0:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    e400:	1c00 4200 5aee 0000 5aea 0000 5aea 0000     ...B.Z...Z...Z..
    e410:	5b50 0000 5b50 0000 5b02 0000 5af4 0000     P[..P[...[...Z..
    e420:	5b08 0000 5b3e 0000 5d10 0000 5cf0 0000     .[..>[...]...\..
    e430:	5cf0 0000 5d7c 0000 5d02 0000 5d1e 0000     .\..|]...]...]..
    e440:	5cf4 0000 5d2c 0000 5d6c 0000               .\..,]..l]..

0000e44c <_tcc_apbcmasks>:
    e44c:	0100 0000 0200 0000 0400 0000               ............

0000e458 <_tcc_cc_nums>:
    e458:	0204 0002                                   ....

0000e45c <_tcc_gclk_ids>:
    e45c:	1a1a 001b                                   ....

0000e460 <_tcc_maxs>:
    e460:	ffff 00ff ffff 00ff ffff 0000               ............

0000e46c <_tcc_ow_nums>:
    e46c:	0408 0002                                   ....

0000e470 <_tcc_intflag>:
    e470:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    e480:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    e490:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0000e4a0 <tcc_interrupt_vectors.12458>:
    e4a0:	100f 0011                                   ....

0000e4a4 <LfnOfs>:
    e4a4:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0000e4b4 <excvt.4558>:
    e4b4:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
    e4c4:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
    e4d4:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
    e4e4:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    e4f4:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
    e504:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    e514:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
    e524:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
    e534:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
    e544:	5d5b 0000                                   []..

0000e548 <Tbl>:
    e548:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
    e558:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
    e568:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
    e578:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
    e588:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
    e598:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
    e5a8:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
    e5b8:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
    e5c8:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
    e5d8:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
    e5e8:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
    e5f8:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
    e608:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
    e618:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
    e628:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
    e638:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0000e648 <tbl_lower.4308>:
    e648:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
    e658:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
    e668:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
    e678:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
    e688:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
    e698:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
    e6a8:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
    e6b8:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
    e6c8:	0103 0105 0107 0109 010b 010d 010f 0111     ................
    e6d8:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
    e6e8:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
    e6f8:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
    e708:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
    e718:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
    e728:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
    e738:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
    e748:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
    e758:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
    e768:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
    e778:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
    e788:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
    e798:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
    e7a8:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
    e7b8:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
    e7c8:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
    e7d8:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
    e7e8:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
    e7f8:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
    e808:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
    e818:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0000e828 <tbl_upper.4309>:
    e828:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
    e838:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
    e848:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
    e858:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
    e868:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
    e878:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
    e888:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
    e898:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
    e8a8:	0102 0104 0106 0108 010a 010c 010e 0110     ................
    e8b8:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
    e8c8:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
    e8d8:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
    e8e8:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
    e8f8:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
    e908:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
    e918:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
    e928:	0393 0394 0395 0396 0397 0398 0399 039a     ................
    e938:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
    e948:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
    e958:	0411 0412 0413 0414 0415 0416 0417 0418     ................
    e968:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
    e978:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
    e988:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
    e998:	0402 0403 0404 0405 0406 0407 0408 0409     ................
    e9a8:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
    e9b8:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
    e9c8:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
    e9d8:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
    e9e8:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
    e9f8:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
    ea08:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
    ea20:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
    ea60:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
    ea78:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
    eab8:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
    eac8:	a9f2 0000 a9ec 0000 a9e6 0000 a9e0 0000     ................
    ead8:	a9f8 0000 aa00 0000 a9f8 0000 a9da 0000     ................
    eae8:	a9d4 0000 a9f8 0000 a9ce 0000 a9ce 0000     ................
    eaf8:	a9c8 0000 a9c2 0000 aa00 0000 aa6a 0000     ............j...
    eb08:	aa64 0000 aa5e 0000 aa58 0000 aa70 0000     d...^...X...p...
    eb18:	aa78 0000 aa70 0000 aa52 0000 aa4c 0000     x...p...R...L...
    eb28:	aa70 0000 aa46 0000 aa46 0000 aa40 0000     p...F...F...@...
    eb38:	aa3a 0000 aa78 0000 aae4 0000 aade 0000     :...x...........
    eb48:	aad8 0000 aad2 0000 aaea 0000 aaea 0000     ................
    eb58:	aaea 0000 aacc 0000 aac6 0000 aaea 0000     ................
    eb68:	aac0 0000 aac0 0000 aaba 0000 aab4 0000     ................
    eb78:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
    eb88:	0d31 0000 7254 6e61 6673 7265 452d 636e     1...Transfer-Enc
    eb98:	646f 6e69 3a67 0020 6f43 6e6e 6365 6974     oding: .Connecti
    eba8:	6e6f 203a 0000 0000 5448 5054 002f 0000     on: ....HTTP/...
    ebb8:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
    ebc8:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
    ebd8:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
    ebe8:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
    ebf8:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
    ec08:	6f48 7473 203a 0000 6f43 6e6e 6365 6974     Host: ..Connecti
    ec18:	6e6f 203a 654b 7065 412d 696c 6576 0a0d     on: Keep-Alive..
    ec28:	0000 0000 6341 6563 7470 452d 636e 646f     ....Accept-Encod
    ec38:	6e69 3a67 0d20 000a 6341 6563 7470 432d     ing: ...Accept-C
    ec48:	6168 7372 7465 203a 7475 2d66 0d38 000a     harset: utf-8...
    ec58:	7254 6e61 6673 7265 452d 636e 646f 6e69     Transfer-Encodin
    ec68:	3a67 6320 7568 6b6e 6465 0a0d 0000 0000     g: chunked......
    ec78:	7525 0000 6f43 746e 6e65 2d74 654c 676e     %u..Content-Leng
    ec88:	6874 203a 0000 0000 7461 656d 2f6c 2e31     th: ....atmel/1.
    ec98:	2e30 0032 7468 7074 2f3a 002f 7468 7074     0.2.http://.http
    eca8:	3a73 2f2f 0000 0000 2000 4200 2400 4200     s://..... .B.$.B
    ecb8:	2800 4200 b310 0000 b318 0000 b326 0000     .(.B........&...
    ecc8:	b35e 0000 b374 0000 0a0d 2520 2a2e 0073     ^...t..... %.*s.
    ecd8:	3e20 203e 0000 0000 2e25 732a 0000 0000      >> ....%.*s....
    ece8:	654c 4464 7461 0061 6166 736c 0065 0000     LedData.false...
    ecf8:	7274 6575 0000 0000 227b 2264 7b3a 7422     true....{"d":{"t
    ed08:	6d65 2270 253a 7d64 007d 0000 7468 7074     emp":%d}}...http
    ed18:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
    ed28:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
    ed38:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
    ed48:	0000 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
    ed58:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
    ed68:	2074 6f63 706d 656c 6574 2e64 000d 0000     t completed.....
    ed78:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
    ed88:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
    ed98:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
    eda8:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
    edb8:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
    edc8:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
    edd8:	6572 7361 6e6f 253a 0d64 000a 2d2d 4820     reason:%d...-- H
    ede8:	5454 2050 6966 656c 6420 776f 6c6e 616f     TTP file downloa
    edf8:	6564 2072 7865 6d61 6c70 2065 2d2d 0a0d     der example --..
    ee08:	2d2d 5320 4d41 3257 5f35 5058 414c 4e49     -- SAMW25_XPLAIN
    ee18:	4445 505f 4f52 2d20 0d2d 2d0a 202d 6f43     ED_PRO --..-- Co
    ee28:	706d 6c69 6465 203a 7041 2072 3720 3220     mpiled: Apr  7 2
    ee38:	3130 2039 3531 353a 3a36 3830 2d20 0d2d     019 15:56:08 --.
    ee48:	0000 0000 0a0d 6854 7369 6520 6178 706d     ......This examp
    ee58:	656c 7220 7165 6975 6572 2073 6874 2065     le requires the 
    ee68:	5041 7420 206f 6168 6576 6920 746e 7265     AP to have inter
    ee78:	656e 2074 6361 6563 7373 0d2e 0d0a 0000     net access......
    ee88:	6f63 666e 6769 7275 5f65 7468 7074 635f     configure_http_c
    ee98:	696c 6e65 3a74 4820 5454 2050 6c63 6569     lient: HTTP clie
    eea8:	746e 6920 696e 6974 6c61 7a69 7461 6f69     nt initializatio
    eeb8:	206e 6166 6c69 6465 2021 7228 7365 2520     n failed! (res %
    eec8:	2964 0a0d 0000 0000 514d 5454 6920 696e     d)......MQTT ini
    eed8:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
    eee8:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
    eef8:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
    ef08:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
    ef18:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
    ef28:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
    ef38:	6e69 7469 735f 6f74 6172 6567 203a 6c70     init_storage: pl
    ef48:	6165 6573 7020 756c 2067 6e61 5320 2f44     ease plug an SD/
    ef58:	4d4d 2043 6163 6472 6920 206e 6c73 746f     MMC card in slot
    ef68:	2e2e 0d2e 0000 0000 6e69 7469 735f 6f74     ........init_sto
    ef78:	6172 6567 203a 4453 4320 7261 2064 6e69     rage: SD Card in
    ef88:	7473 6c61 206c 6166 6c69 6465 0d2e 0000     stall failed....
    ef98:	6e69 7469 735f 6f74 6172 6567 203a 7274     init_storage: tr
    efa8:	2079 6e75 6c70 6775 6120 646e 7220 2d65     y unplug and re-
    efb8:	6c70 6775 7420 6568 6320 7261 2e64 000d     plug the card...
    efc8:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
    efd8:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
    efe8:	0d2e 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
    eff8:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
    f008:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
    f018:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
    f028:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
    f038:	4b4f 0d2e 0000 0000 616d 6e69 203a 326d     OK......main: m2
    f048:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
    f058:	6520 7272 726f 2021 7228 7365 2520 2964      error! (res %d)
    f068:	0a0d 0000 616d 6e69 203a 6f63 6e6e 6365     ....main: connec
    f078:	6974 676e 7420 206f 6957 6946 4120 2050     ting to WiFi AP 
    f088:	7325 2e2e 0d2e 000a 616d 6e69 203a 6c70     %s......main: pl
    f098:	6165 6573 7520 706e 756c 2067 6874 2065     ease unplug the 
    f0a8:	4453 4d2f 434d 6320 7261 2e64 000d 0000     SD/MMC card.....
    f0b8:	616d 6e69 203a 6f64 656e 0d2e 0000 0000     main: done......
    f0c8:	5245 3e52 203e 7953 7473 6369 206b 6f63     ERR>> Systick co
    f0d8:	666e 6769 7275 7461 6f69 206e 7265 6f72     nfiguration erro
    f0e8:	0d72 000a                                   r...

0000f0ec <main_mqtt_broker>:
    f0ec:	316d 2e36 6c63 756f 6d64 7471 2e74 6f63     m16.cloudmqtt.co
    f0fc:	006d 0000 0a0d 6f43 6e6e 6365 6974 676e     m.....Connecting
    f10c:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
    f11c:	7242 4a73 4e42 6f56 4251 376c 0000 0000     BrsJBNVoQBl7....
    f12c:	7472 7974 626f 6a65 0000 0000 514d 5454     rttyobej....MQTT
    f13c:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
    f14c:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
    f15c:	0d72 0000 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
    f16c:	6465 7420 206f 7262 6b6f 7265 000d 0000     ed to broker....
    f17c:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
    f18c:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
    f19c:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
    f1ac:	796c 0d2e 000a 0000 6554 706d 6144 6174     ly......TempData
    f1bc:	0000 0000 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
    f1cc:	6465 000d 514d 5454 6220 6f72 656b 2072     ed..MQTT broker 
    f1dc:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
    f1ec:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
    f1fc:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
    f20c:	6f63 6e6e 6365 6574 0d64 0000 3025 6433     connected...%03d
    f21c:	0000 0000 6572 6f73 766c 5f65 6263 203a     ....resolve_cb: 
    f22c:	7325 4920 2050 6461 7264 7365 2073 7369     %s IP address is
    f23c:	2520 2e64 6425 252e 2e64 6425 0a0d 0a0d      %d.%d.%d.%d....
    f24c:	0000 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
    f25c:	6461 203a 4d4d 2043 7473 726f 6761 2065     ad: MMC storage 
    f26c:	6f6e 2074 6572 6461 2e79 000d 7473 7261     not ready...star
    f27c:	5f74 6f64 6e77 6f6c 6461 203a 6957 462d     t_download: Wi-F
    f28c:	2069 7369 6e20 746f 6320 6e6f 656e 7463     i is not connect
    f29c:	6465 0d2e 0000 0000 7473 7261 5f74 6f64     ed......start_do
    f2ac:	6e77 6f6c 6461 203a 6572 7571 7365 2074     wnload: request 
    f2bc:	7369 7320 6e65 2074 6c61 6572 6461 2e79     is sent already.
    f2cc:	000d 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
    f2dc:	6461 203a 7572 6e6e 6e69 2067 6f64 6e77     ad: running down
    f2ec:	6f6c 6461 6120 726c 6165 7964 0d2e 0000     load already....
    f2fc:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
    f30c:	6573 646e 6e69 2067 5448 5054 7220 7165     sending HTTP req
    f31c:	6575 7473 2e2e 0d2e 0000 0000 7468 7074     uest........http
    f32c:	2f3a 772f 7777 6f2e 6972 696d 632e 6d6f     ://www.orimi.com
    f33c:	702f 6664 742d 7365 2e74 6470 0066 0000     /pdf-test.pdf...
    f34c:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
    f35c:	3a74 6520 706d 7974 6420 7461 2e61 000d     t: empty data...
    f36c:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
    f37c:	3a74 6320 6572 7461 6e69 2067 6966 656c     t: creating file
    f38c:	5b20 7325 0d5d 000a 7473 726f 5f65 6966      [%s]...store_fi
    f39c:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
    f3ac:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
    f3bc:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
    f3cc:	6465 0d2e 0000 0000 7473 726f 5f65 6966     ed......store_fi
    f3dc:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
    f3ec:	7263 6165 6974 6e6f 6520 7272 726f 2021     creation error! 
    f3fc:	6572 3a74 6425 0a0d 0000 0000 7473 726f     ret:%d......stor
    f40c:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
    f41c:	6c69 2065 7277 7469 2065 7265 6f72 2c72     ile write error,
    f42c:	6420 776f 6c6e 616f 2064 6163 636e 6c65      download cancel
    f43c:	6465 0d2e 0000 0000 7473 726f 5f65 6966     ed......store_fi
    f44c:	656c 705f 6361 656b 3a74 7220 6365 6965     le_packet: recei
    f45c:	6576 5b64 6c25 5d75 202c 6966 656c 7320     ved[%lu], file s
    f46c:	7a69 5b65 6c25 5d75 0a0d 0000 7473 726f     ize[%lu]....stor
    f47c:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
    f48c:	6c69 2065 6f64 6e77 6f6c 6461 6465 7320     ile downloaded s
    f49c:	6375 6563 7373 7566 6c6c 2e79 000d 0000     uccessfully.....
    f4ac:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
    f4bc:	5f49 4f43 4e4e 4345 4554 0d44 0000 0000     I_CONNECTED.....
    f4cc:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
    f4dc:	5f49 4944 4353 4e4f 454e 5443 4445 000d     I_DISCONNECTED..
    f4ec:	7241 696d 6174 6567 0000 0000 6943 6373     Armitage....Cisc
    f4fc:	316f 3732 3330 0000 6977 6966 635f 3a62     o12703..wifi_cb:
    f50c:	4920 2050 6461 7264 7365 2073 7369 2520      IP address is %
    f51c:	2e75 7525 252e 2e75 7525 0a0d 0000 0000     u.%u.%u.%u......
    f52c:	7245 6f72 2072 6f63 6e6e 6365 6974 676e     Error connecting
    f53c:	7420 206f 514d 5454 4220 6f72 656b 2172      to MQTT Broker!
    f54c:	000d 0000                                   ....

0000f550 <_global_impure_ptr>:
    f550:	0178 2000                                   x.. 

0000f554 <__sf_fake_stderr>:
	...

0000f574 <__sf_fake_stdin>:
	...

0000f594 <__sf_fake_stdout>:
	...
    f5b4:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
    f5c4:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
    f5d4:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
    f5e4:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0000f5f1 <_ctype_>:
    f5f1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    f601:	2020 2020 2020 2020 2020 2020 2020 2020                     
    f611:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    f621:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    f631:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    f641:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    f651:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    f661:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    f671:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0000f6f4 <_init>:
    f6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6f6:	46c0      	nop			; (mov r8, r8)
    f6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f6fa:	bc08      	pop	{r3}
    f6fc:	469e      	mov	lr, r3
    f6fe:	4770      	bx	lr

0000f700 <__init_array_start>:
    f700:	000000dd 	.word	0x000000dd

0000f704 <_fini>:
    f704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f706:	46c0      	nop			; (mov r8, r8)
    f708:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f70a:	bc08      	pop	{r3}
    f70c:	469e      	mov	lr, r3
    f70e:	4770      	bx	lr

0000f710 <__fini_array_start>:
    f710:	000000b5 	.word	0x000000b5
