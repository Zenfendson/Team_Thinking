
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002b4f8  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0003d4f8  0003d4f8  0002d4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000002f4  20000000  0003d500  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000591c  20000300  0003d800  000302f4  2**4
                  ALLOC
  4 .stack        00002004  20005c1c  0004311c  000302f4  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0003031c  2**0
                  CONTENTS, READONLY
  7 .debug_info   001270de  00000000  00000000  00030375  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000107a0  00000000  00000000  00157453  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016f67  00000000  00000000  00167bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003d58  00000000  00000000  0017eb5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000039f8  00000000  00000000  001828b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000292f5  00000000  00000000  001862aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00059c87  00000000  00000000  001af59f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c52c9  00000000  00000000  00209226  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000e914  00000000  00000000  002ce4f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	20 7c 00 20 3d d9 02 00 35 da 02 00 35 da 02 00      |. =...5...5...
	...
   1202c:	39 ca 01 00 00 00 00 00 00 00 00 00 61 cb 01 00     9...........a...
   1203c:	a9 cb 01 00 35 da 02 00 35 da 02 00 35 da 02 00     ....5...5...5...
   1204c:	8d 9a 02 00 b9 8f 02 00 35 da 02 00 61 24 01 00     ........5...a$..
   1205c:	35 da 02 00 a5 25 01 00 31 a1 02 00 49 a1 02 00     5....%..1...I...
   1206c:	61 a1 02 00 79 a1 02 00 91 a1 02 00 a9 a1 02 00     a...y...........
   1207c:	85 d8 02 00 99 d8 02 00 ad d8 02 00 75 a6 01 00     ............u...
   1208c:	89 a6 01 00 9d a6 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	e9 22 01 00 35 da 02 00 25 24 01 00 35 da 02 00     ."..5...%$..5...
   120ac:	35 da 02 00 00 00 00 00                             5.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003d500 	.word	0x0003d500

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003d500 	.word	0x0003d500
   1210c:	0003d500 	.word	0x0003d500
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
		return true;
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
	}

	return false;
   12132:	2300      	movs	r3, #0
}
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
}
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
		}
	}
}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	2000465c 	.word	0x2000465c
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
}
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
}
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3

				if ((module->callback) &&
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
		}
	}
}
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	20004660 	.word	0x20004660
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
}
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
{
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	00028c19 	.word	0x00028c19

0001244c <system_interrupt_leave_critical_section>:
{
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
}
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	00028c6d 	.word	0x00028c6d

00012460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
}
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000370 	.word	0x20000370
   12598:	20004670 	.word	0x20004670
   1259c:	20000320 	.word	0x20000320
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
		current_hook = current_hook->next;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
			break;
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
			break;
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
			break;
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12658:	2300      	movs	r3, #0
}
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
	}
}
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
}
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
}
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
}
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
}
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b087      	sub	sp, #28
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	885a      	ldrh	r2, [r3, #2]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	2224      	movs	r2, #36	; 0x24
   12974:	2101      	movs	r1, #1
   12976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	2225      	movs	r2, #37	; 0x25
   1297c:	2105      	movs	r1, #5
   1297e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	681b      	ldr	r3, [r3, #0]
   12984:	011b      	lsls	r3, r3, #4
   12986:	0fdb      	lsrs	r3, r3, #31
   12988:	b2db      	uxtb	r3, r3
   1298a:	001a      	movs	r2, r3
   1298c:	230f      	movs	r3, #15
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1e51      	subs	r1, r2, #1
   12992:	418a      	sbcs	r2, r1
   12994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	7a5b      	ldrb	r3, [r3, #9]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d006      	beq.n	129ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1299e:	683b      	ldr	r3, [r7, #0]
   129a0:	7a9a      	ldrb	r2, [r3, #10]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	0011      	movs	r1, r2
   129a6:	0018      	movs	r0, r3
   129a8:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <_i2c_master_read_packet+0x148>)
   129aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00b      	beq.n	129ce <_i2c_master_read_packet+0x7e>
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	885b      	ldrh	r3, [r3, #2]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d107      	bne.n	129ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   129be:	693b      	ldr	r3, [r7, #16]
   129c0:	685b      	ldr	r3, [r3, #4]
   129c2:	2280      	movs	r2, #128	; 0x80
   129c4:	02d2      	lsls	r2, r2, #11
   129c6:	431a      	orrs	r2, r3
   129c8:	693b      	ldr	r3, [r7, #16]
   129ca:	605a      	str	r2, [r3, #4]
   129cc:	e005      	b.n	129da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ce:	693b      	ldr	r3, [r7, #16]
   129d0:	685b      	ldr	r3, [r3, #4]
   129d2:	4a32      	ldr	r2, [pc, #200]	; (12a9c <_i2c_master_read_packet+0x14c>)
   129d4:	401a      	ands	r2, r3
   129d6:	693b      	ldr	r3, [r7, #16]
   129d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	7a1b      	ldrb	r3, [r3, #8]
   129de:	2b00      	cmp	r3, #0
   129e0:	d045      	beq.n	12a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	881b      	ldrh	r3, [r3, #0]
   129e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129e8:	683b      	ldr	r3, [r7, #0]
   129ea:	7a5b      	ldrb	r3, [r3, #9]
   129ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   129ee:	4313      	orrs	r3, r2
   129f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	021b      	lsls	r3, r3, #8
   129f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   129f8:	693b      	ldr	r3, [r7, #16]
   129fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   129fc:	2317      	movs	r3, #23
   129fe:	18fc      	adds	r4, r7, r3
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	0018      	movs	r0, r3
   12a04:	4b26      	ldr	r3, [pc, #152]	; (12aa0 <_i2c_master_read_packet+0x150>)
   12a06:	4798      	blx	r3
   12a08:	0003      	movs	r3, r0
   12a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a0c:	693b      	ldr	r3, [r7, #16]
   12a0e:	685b      	ldr	r3, [r3, #4]
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <_i2c_master_read_packet+0x14c>)
   12a12:	401a      	ands	r2, r3
   12a14:	693b      	ldr	r3, [r7, #16]
   12a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d107      	bne.n	12a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12a22:	2317      	movs	r3, #23
   12a24:	18fc      	adds	r4, r7, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	0018      	movs	r0, r3
   12a2a:	4b1e      	ldr	r3, [pc, #120]	; (12aa4 <_i2c_master_read_packet+0x154>)
   12a2c:	4798      	blx	r3
   12a2e:	0003      	movs	r3, r0
   12a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d114      	bne.n	12a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2203      	movs	r2, #3
   12a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a42:	683b      	ldr	r3, [r7, #0]
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	0a1b      	lsrs	r3, r3, #8
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2278      	movs	r2, #120	; 0x78
   12a4c:	4313      	orrs	r3, r2
   12a4e:	b29b      	uxth	r3, r3
   12a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	7a5b      	ldrb	r3, [r3, #9]
   12a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a5a:	2201      	movs	r2, #1
   12a5c:	4313      	orrs	r3, r2
   12a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a60:	693b      	ldr	r3, [r7, #16]
   12a62:	625a      	str	r2, [r3, #36]	; 0x24
   12a64:	e012      	b.n	12a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	e00f      	b.n	12a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	2203      	movs	r2, #3
   12a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a74:	683b      	ldr	r3, [r7, #0]
   12a76:	881b      	ldrh	r3, [r3, #0]
   12a78:	005b      	lsls	r3, r3, #1
   12a7a:	2201      	movs	r2, #1
   12a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	7a5b      	ldrb	r3, [r3, #9]
   12a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a84:	4313      	orrs	r3, r2
   12a86:	001a      	movs	r2, r3
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12a8c:	2300      	movs	r3, #0
}
   12a8e:	0018      	movs	r0, r3
   12a90:	46bd      	mov	sp, r7
   12a92:	b007      	add	sp, #28
   12a94:	bd90      	pop	{r4, r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	0001a621 	.word	0x0001a621
   12a9c:	fffbffff 	.word	0xfffbffff
   12aa0:	0001a5c3 	.word	0x0001a5c3
   12aa4:	0001a565 	.word	0x0001a565

00012aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	8b9b      	ldrh	r3, [r3, #28]
   12ab6:	b29b      	uxth	r3, r3
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d001      	beq.n	12ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12abc:	2305      	movs	r3, #5
   12abe:	e00c      	b.n	12ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2201      	movs	r2, #1
   12ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2201      	movs	r2, #1
   12aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <i2c_master_read_packet_job+0x3c>)
   12ad6:	4798      	blx	r3
   12ad8:	0003      	movs	r3, r0
}
   12ada:	0018      	movs	r0, r3
   12adc:	46bd      	mov	sp, r7
   12ade:	b002      	add	sp, #8
   12ae0:	bd80      	pop	{r7, pc}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	00012951 	.word	0x00012951

00012ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ae8:	b580      	push	{r7, lr}
   12aea:	b084      	sub	sp, #16
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	7a5b      	ldrb	r3, [r3, #9]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d006      	beq.n	12b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12b00:	683b      	ldr	r3, [r7, #0]
   12b02:	7a9a      	ldrb	r2, [r3, #10]
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	0011      	movs	r1, r2
   12b08:	0018      	movs	r0, r3
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <_i2c_master_write_packet+0x9c>)
   12b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	685b      	ldr	r3, [r3, #4]
   12b12:	4a1d      	ldr	r2, [pc, #116]	; (12b88 <_i2c_master_write_packet+0xa0>)
   12b14:	401a      	ands	r2, r3
   12b16:	68fb      	ldr	r3, [r7, #12]
   12b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	685a      	ldr	r2, [r3, #4]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	885a      	ldrh	r2, [r3, #2]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	2224      	movs	r2, #36	; 0x24
   12b2e:	2100      	movs	r1, #0
   12b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	2225      	movs	r2, #37	; 0x25
   12b36:	2105      	movs	r1, #5
   12b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	2203      	movs	r2, #3
   12b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12b40:	683b      	ldr	r3, [r7, #0]
   12b42:	7a1b      	ldrb	r3, [r3, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00d      	beq.n	12b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	881b      	ldrh	r3, [r3, #0]
   12b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	7a5b      	ldrb	r3, [r3, #9]
   12b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b54:	4313      	orrs	r3, r2
   12b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b58:	2380      	movs	r3, #128	; 0x80
   12b5a:	021b      	lsls	r3, r3, #8
   12b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	625a      	str	r2, [r3, #36]	; 0x24
   12b62:	e009      	b.n	12b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b64:	683b      	ldr	r3, [r7, #0]
   12b66:	881b      	ldrh	r3, [r3, #0]
   12b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12b6a:	683b      	ldr	r3, [r7, #0]
   12b6c:	7a5b      	ldrb	r3, [r3, #9]
   12b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b70:	4313      	orrs	r3, r2
   12b72:	001a      	movs	r2, r3
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12b78:	2300      	movs	r3, #0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	0001a621 	.word	0x0001a621
   12b88:	fffbffff 	.word	0xfffbffff

00012b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	6078      	str	r0, [r7, #4]
   12b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	8b9b      	ldrh	r3, [r3, #28]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d001      	beq.n	12ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12ba0:	2305      	movs	r3, #5
   12ba2:	e00c      	b.n	12bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	2201      	movs	r2, #1
   12ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	2201      	movs	r2, #1
   12bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12bb0:	683a      	ldr	r2, [r7, #0]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <i2c_master_write_packet_job+0x3c>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
}
   12bbe:	0018      	movs	r0, r3
   12bc0:	46bd      	mov	sp, r7
   12bc2:	b002      	add	sp, #8
   12bc4:	bd80      	pop	{r7, pc}
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00012ae9 	.word	0x00012ae9

00012bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12bcc:	b580      	push	{r7, lr}
   12bce:	b086      	sub	sp, #24
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	0002      	movs	r2, r0
   12bd4:	1dfb      	adds	r3, r7, #7
   12bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12bd8:	1dfb      	adds	r3, r7, #7
   12bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12bdc:	4b93      	ldr	r3, [pc, #588]	; (12e2c <_i2c_master_interrupt_handler+0x260>)
   12bde:	0092      	lsls	r2, r2, #2
   12be0:	58d3      	ldr	r3, [r2, r3]
   12be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12be4:	697b      	ldr	r3, [r7, #20]
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	011b      	lsls	r3, r3, #4
   12bf0:	0fdb      	lsrs	r3, r3, #31
   12bf2:	b2db      	uxtb	r3, r3
   12bf4:	001a      	movs	r2, r3
   12bf6:	230f      	movs	r3, #15
   12bf8:	18fb      	adds	r3, r7, r3
   12bfa:	1e51      	subs	r1, r2, #1
   12bfc:	418a      	sbcs	r2, r1
   12bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12c00:	230e      	movs	r3, #14
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	697a      	ldr	r2, [r7, #20]
   12c06:	7e52      	ldrb	r2, [r2, #25]
   12c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	7e1b      	ldrb	r3, [r3, #24]
   12c0e:	b2da      	uxtb	r2, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	210e      	movs	r1, #14
   12c16:	1879      	adds	r1, r7, r1
   12c18:	7809      	ldrb	r1, [r1, #0]
   12c1a:	400a      	ands	r2, r1
   12c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	8b5b      	ldrh	r3, [r3, #26]
   12c22:	b29b      	uxth	r3, r3
   12c24:	2b00      	cmp	r3, #0
   12c26:	d109      	bne.n	12c3c <_i2c_master_interrupt_handler+0x70>
   12c28:	697b      	ldr	r3, [r7, #20]
   12c2a:	8b9b      	ldrh	r3, [r3, #28]
   12c2c:	b29b      	uxth	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d004      	beq.n	12c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	0018      	movs	r0, r3
   12c36:	4b7e      	ldr	r3, [pc, #504]	; (12e30 <_i2c_master_interrupt_handler+0x264>)
   12c38:	4798      	blx	r3
   12c3a:	e070      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	8b5b      	ldrh	r3, [r3, #26]
   12c40:	b29b      	uxth	r3, r3
   12c42:	2b00      	cmp	r3, #0
   12c44:	d039      	beq.n	12cba <_i2c_master_interrupt_handler+0xee>
   12c46:	697b      	ldr	r3, [r7, #20]
   12c48:	8b9b      	ldrh	r3, [r3, #28]
   12c4a:	b29b      	uxth	r3, r3
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d134      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12c50:	697b      	ldr	r3, [r7, #20]
   12c52:	2225      	movs	r2, #37	; 0x25
   12c54:	5c9b      	ldrb	r3, [r3, r2]
   12c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c58:	2b05      	cmp	r3, #5
   12c5a:	d12e      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c5c:	697b      	ldr	r3, [r7, #20]
   12c5e:	2224      	movs	r2, #36	; 0x24
   12c60:	5c9b      	ldrb	r3, [r3, r2]
   12c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12c64:	2b00      	cmp	r3, #0
   12c66:	d128      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12c68:	693b      	ldr	r3, [r7, #16]
   12c6a:	2203      	movs	r2, #3
   12c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	2200      	movs	r2, #0
   12c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2225      	movs	r2, #37	; 0x25
   12c78:	2100      	movs	r1, #0
   12c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12c7c:	697b      	ldr	r3, [r7, #20]
   12c7e:	7a9b      	ldrb	r3, [r3, #10]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d00b      	beq.n	12c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	0018      	movs	r0, r3
   12c88:	4b6a      	ldr	r3, [pc, #424]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c8c:	693b      	ldr	r3, [r7, #16]
   12c8e:	685b      	ldr	r3, [r3, #4]
   12c90:	22c0      	movs	r2, #192	; 0xc0
   12c92:	0292      	lsls	r2, r2, #10
   12c94:	431a      	orrs	r2, r3
   12c96:	693b      	ldr	r3, [r7, #16]
   12c98:	605a      	str	r2, [r3, #4]
   12c9a:	e002      	b.n	12ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c9c:	693b      	ldr	r3, [r7, #16]
   12c9e:	2201      	movs	r2, #1
   12ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ca2:	230e      	movs	r3, #14
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	2201      	movs	r2, #1
   12caa:	4013      	ands	r3, r2
   12cac:	d037      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12cae:	697b      	ldr	r3, [r7, #20]
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	697a      	ldr	r2, [r7, #20]
   12cb4:	0010      	movs	r0, r2
   12cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12cb8:	e031      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12cba:	697b      	ldr	r3, [r7, #20]
   12cbc:	8b5b      	ldrh	r3, [r3, #26]
   12cbe:	b29b      	uxth	r3, r3
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d02c      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
   12cc4:	697b      	ldr	r3, [r7, #20]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d027      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12cce:	693b      	ldr	r3, [r7, #16]
   12cd0:	8b5b      	ldrh	r3, [r3, #26]
   12cd2:	b29b      	uxth	r3, r3
   12cd4:	001a      	movs	r2, r3
   12cd6:	2320      	movs	r3, #32
   12cd8:	4013      	ands	r3, r2
   12cda:	d111      	bne.n	12d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cdc:	230f      	movs	r3, #15
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	2201      	movs	r2, #1
   12ce4:	4053      	eors	r3, r2
   12ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d104      	bne.n	12cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	8b9b      	ldrh	r3, [r3, #28]
   12cf0:	b29b      	uxth	r3, r3
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12cf6:	697b      	ldr	r3, [r7, #20]
   12cf8:	2225      	movs	r2, #37	; 0x25
   12cfa:	2141      	movs	r1, #65	; 0x41
   12cfc:	5499      	strb	r1, [r3, r2]
   12cfe:	e00e      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12d00:	697b      	ldr	r3, [r7, #20]
   12d02:	2224      	movs	r2, #36	; 0x24
   12d04:	5c9b      	ldrb	r3, [r3, r2]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d104      	bne.n	12d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12d0c:	697b      	ldr	r3, [r7, #20]
   12d0e:	0018      	movs	r0, r3
   12d10:	4b49      	ldr	r3, [pc, #292]	; (12e38 <_i2c_master_interrupt_handler+0x26c>)
   12d12:	4798      	blx	r3
   12d14:	e003      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12d16:	697b      	ldr	r3, [r7, #20]
   12d18:	0018      	movs	r0, r3
   12d1a:	4b48      	ldr	r3, [pc, #288]	; (12e3c <_i2c_master_interrupt_handler+0x270>)
   12d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d1e:	697b      	ldr	r3, [r7, #20]
   12d20:	8b5b      	ldrh	r3, [r3, #26]
   12d22:	b29b      	uxth	r3, r3
   12d24:	2b00      	cmp	r3, #0
   12d26:	d047      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
   12d28:	697b      	ldr	r3, [r7, #20]
   12d2a:	8b9b      	ldrh	r3, [r3, #28]
   12d2c:	b29b      	uxth	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d142      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12d32:	697b      	ldr	r3, [r7, #20]
   12d34:	2225      	movs	r2, #37	; 0x25
   12d36:	5c9b      	ldrb	r3, [r3, r2]
   12d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d3a:	2b05      	cmp	r3, #5
   12d3c:	d13c      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12d3e:	697b      	ldr	r3, [r7, #20]
   12d40:	2224      	movs	r2, #36	; 0x24
   12d42:	5c9b      	ldrb	r3, [r3, r2]
   12d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12d46:	2b01      	cmp	r3, #1
   12d48:	d136      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	7e1b      	ldrb	r3, [r3, #24]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	001a      	movs	r2, r3
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	d002      	beq.n	12d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12d58:	693b      	ldr	r3, [r7, #16]
   12d5a:	2202      	movs	r2, #2
   12d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12d5e:	693b      	ldr	r3, [r7, #16]
   12d60:	2203      	movs	r2, #3
   12d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	2200      	movs	r2, #0
   12d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12d6a:	697b      	ldr	r3, [r7, #20]
   12d6c:	2225      	movs	r2, #37	; 0x25
   12d6e:	2100      	movs	r1, #0
   12d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12d72:	230e      	movs	r3, #14
   12d74:	18fb      	adds	r3, r7, r3
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2202      	movs	r2, #2
   12d7a:	4013      	ands	r3, r2
   12d7c:	d00b      	beq.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12d7e:	697b      	ldr	r3, [r7, #20]
   12d80:	2224      	movs	r2, #36	; 0x24
   12d82:	5c9b      	ldrb	r3, [r3, r2]
   12d84:	b2db      	uxtb	r3, r3
   12d86:	2b01      	cmp	r3, #1
   12d88:	d105      	bne.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d8a:	697b      	ldr	r3, [r7, #20]
   12d8c:	691b      	ldr	r3, [r3, #16]
   12d8e:	697a      	ldr	r2, [r7, #20]
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	e010      	b.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12d96:	230e      	movs	r3, #14
   12d98:	18fb      	adds	r3, r7, r3
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2201      	movs	r2, #1
   12d9e:	4013      	ands	r3, r2
   12da0:	d00a      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12da2:	697b      	ldr	r3, [r7, #20]
   12da4:	2224      	movs	r2, #36	; 0x24
   12da6:	5c9b      	ldrb	r3, [r3, r2]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2b00      	cmp	r3, #0
   12dac:	d104      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12dae:	697b      	ldr	r3, [r7, #20]
   12db0:	68db      	ldr	r3, [r3, #12]
   12db2:	697a      	ldr	r2, [r7, #20]
   12db4:	0010      	movs	r0, r2
   12db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12db8:	697b      	ldr	r3, [r7, #20]
   12dba:	2225      	movs	r2, #37	; 0x25
   12dbc:	5c9b      	ldrb	r3, [r3, r2]
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	2b05      	cmp	r3, #5
   12dc2:	d02e      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
   12dc4:	697b      	ldr	r3, [r7, #20]
   12dc6:	2225      	movs	r2, #37	; 0x25
   12dc8:	5c9b      	ldrb	r3, [r3, r2]
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d028      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12dd0:	693b      	ldr	r3, [r7, #16]
   12dd2:	2203      	movs	r2, #3
   12dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12dd6:	697b      	ldr	r3, [r7, #20]
   12dd8:	2200      	movs	r2, #0
   12dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12ddc:	697b      	ldr	r3, [r7, #20]
   12dde:	2200      	movs	r2, #0
   12de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12de2:	697b      	ldr	r3, [r7, #20]
   12de4:	2225      	movs	r2, #37	; 0x25
   12de6:	5c9b      	ldrb	r3, [r3, r2]
   12de8:	b2db      	uxtb	r3, r3
   12dea:	2b41      	cmp	r3, #65	; 0x41
   12dec:	d00e      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   12dee:	697b      	ldr	r3, [r7, #20]
   12df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12df2:	2b00      	cmp	r3, #0
   12df4:	d00a      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	0018      	movs	r0, r3
   12dfa:	4b0e      	ldr	r3, [pc, #56]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12dfe:	693b      	ldr	r3, [r7, #16]
   12e00:	685b      	ldr	r3, [r3, #4]
   12e02:	22e0      	movs	r2, #224	; 0xe0
   12e04:	02d2      	lsls	r2, r2, #11
   12e06:	431a      	orrs	r2, r3
   12e08:	693b      	ldr	r3, [r7, #16]
   12e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12e0c:	230e      	movs	r3, #14
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2204      	movs	r2, #4
   12e14:	4013      	ands	r3, r2
   12e16:	d004      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	695b      	ldr	r3, [r3, #20]
   12e1c:	697a      	ldr	r2, [r7, #20]
   12e1e:	0010      	movs	r0, r2
   12e20:	4798      	blx	r3
		}
	}
}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	46bd      	mov	sp, r7
   12e26:	b006      	add	sp, #24
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	20005b90 	.word	0x20005b90
   12e30:	0001284d 	.word	0x0001284d
   12e34:	000126bd 	.word	0x000126bd
   12e38:	000127d1 	.word	0x000127d1
   12e3c:	000126e1 	.word	0x000126e1

00012e40 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
   12e40:	b5b0      	push	{r4, r5, r7, lr}
   12e42:	b084      	sub	sp, #16
   12e44:	af00      	add	r7, sp, #0
   12e46:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12e48:	230f      	movs	r3, #15
   12e4a:	18fc      	adds	r4, r7, r3
   12e4c:	687b      	ldr	r3, [r7, #4]
   12e4e:	0018      	movs	r0, r3
   12e50:	4b20      	ldr	r3, [pc, #128]	; (12ed4 <bme680_init+0x94>)
   12e52:	4798      	blx	r3
   12e54:	0003      	movs	r3, r0
   12e56:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12e58:	230f      	movs	r3, #15
   12e5a:	18fb      	adds	r3, r7, r3
   12e5c:	781b      	ldrb	r3, [r3, #0]
   12e5e:	b25b      	sxtb	r3, r3
   12e60:	2b00      	cmp	r3, #0
   12e62:	d12e      	bne.n	12ec2 <bme680_init+0x82>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
   12e64:	230f      	movs	r3, #15
   12e66:	18fc      	adds	r4, r7, r3
   12e68:	687b      	ldr	r3, [r7, #4]
   12e6a:	0018      	movs	r0, r3
   12e6c:	4b1a      	ldr	r3, [pc, #104]	; (12ed8 <bme680_init+0x98>)
   12e6e:	4798      	blx	r3
   12e70:	0003      	movs	r3, r0
   12e72:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
   12e74:	230f      	movs	r3, #15
   12e76:	18fb      	adds	r3, r7, r3
   12e78:	781b      	ldrb	r3, [r3, #0]
   12e7a:	b25b      	sxtb	r3, r3
   12e7c:	2b00      	cmp	r3, #0
   12e7e:	d120      	bne.n	12ec2 <bme680_init+0x82>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   12e80:	6879      	ldr	r1, [r7, #4]
   12e82:	230f      	movs	r3, #15
   12e84:	18fc      	adds	r4, r7, r3
   12e86:	687b      	ldr	r3, [r7, #4]
   12e88:	2201      	movs	r2, #1
   12e8a:	20d0      	movs	r0, #208	; 0xd0
   12e8c:	4d13      	ldr	r5, [pc, #76]	; (12edc <bme680_init+0x9c>)
   12e8e:	47a8      	blx	r5
   12e90:	0003      	movs	r3, r0
   12e92:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK) {
   12e94:	230f      	movs	r3, #15
   12e96:	18fb      	adds	r3, r7, r3
   12e98:	781b      	ldrb	r3, [r3, #0]
   12e9a:	b25b      	sxtb	r3, r3
   12e9c:	2b00      	cmp	r3, #0
   12e9e:	d110      	bne.n	12ec2 <bme680_init+0x82>
				if (dev->chip_id == BME680_CHIP_ID) {
   12ea0:	687b      	ldr	r3, [r7, #4]
   12ea2:	781b      	ldrb	r3, [r3, #0]
   12ea4:	2b61      	cmp	r3, #97	; 0x61
   12ea6:	d108      	bne.n	12eba <bme680_init+0x7a>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
   12ea8:	230f      	movs	r3, #15
   12eaa:	18fc      	adds	r4, r7, r3
   12eac:	687b      	ldr	r3, [r7, #4]
   12eae:	0018      	movs	r0, r3
   12eb0:	4b0b      	ldr	r3, [pc, #44]	; (12ee0 <bme680_init+0xa0>)
   12eb2:	4798      	blx	r3
   12eb4:	0003      	movs	r3, r0
   12eb6:	7023      	strb	r3, [r4, #0]
   12eb8:	e003      	b.n	12ec2 <bme680_init+0x82>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
   12eba:	230f      	movs	r3, #15
   12ebc:	18fb      	adds	r3, r7, r3
   12ebe:	22fd      	movs	r2, #253	; 0xfd
   12ec0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return rslt;
   12ec2:	230f      	movs	r3, #15
   12ec4:	18fb      	adds	r3, r7, r3
   12ec6:	781b      	ldrb	r3, [r3, #0]
   12ec8:	b25b      	sxtb	r3, r3
}
   12eca:	0018      	movs	r0, r3
   12ecc:	46bd      	mov	sp, r7
   12ece:	b004      	add	sp, #16
   12ed0:	bdb0      	pop	{r4, r5, r7, pc}
   12ed2:	46c0      	nop			; (mov r8, r8)
   12ed4:	00014763 	.word	0x00014763
   12ed8:	00013119 	.word	0x00013119
   12edc:	00012ee5 	.word	0x00012ee5
   12ee0:	00013885 	.word	0x00013885

00012ee4 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   12ee4:	b5b0      	push	{r4, r5, r7, lr}
   12ee6:	b086      	sub	sp, #24
   12ee8:	af00      	add	r7, sp, #0
   12eea:	60b9      	str	r1, [r7, #8]
   12eec:	0011      	movs	r1, r2
   12eee:	607b      	str	r3, [r7, #4]
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	1c02      	adds	r2, r0, #0
   12ef6:	701a      	strb	r2, [r3, #0]
   12ef8:	230c      	movs	r3, #12
   12efa:	18fb      	adds	r3, r7, r3
   12efc:	1c0a      	adds	r2, r1, #0
   12efe:	801a      	strh	r2, [r3, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12f00:	2317      	movs	r3, #23
   12f02:	18fc      	adds	r4, r7, r3
   12f04:	687b      	ldr	r3, [r7, #4]
   12f06:	0018      	movs	r0, r3
   12f08:	4b25      	ldr	r3, [pc, #148]	; (12fa0 <bme680_get_regs+0xbc>)
   12f0a:	4798      	blx	r3
   12f0c:	0003      	movs	r3, r0
   12f0e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12f10:	2317      	movs	r3, #23
   12f12:	18fb      	adds	r3, r7, r3
   12f14:	781b      	ldrb	r3, [r3, #0]
   12f16:	b25b      	sxtb	r3, r3
   12f18:	2b00      	cmp	r3, #0
   12f1a:	d139      	bne.n	12f90 <bme680_get_regs+0xac>
		if (dev->intf == BME680_SPI_INTF) {
   12f1c:	687b      	ldr	r3, [r7, #4]
   12f1e:	789b      	ldrb	r3, [r3, #2]
   12f20:	2b00      	cmp	r3, #0
   12f22:	d11a      	bne.n	12f5a <bme680_get_regs+0x76>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
   12f24:	2317      	movs	r3, #23
   12f26:	18fc      	adds	r4, r7, r3
   12f28:	687a      	ldr	r2, [r7, #4]
   12f2a:	230f      	movs	r3, #15
   12f2c:	18fb      	adds	r3, r7, r3
   12f2e:	781b      	ldrb	r3, [r3, #0]
   12f30:	0011      	movs	r1, r2
   12f32:	0018      	movs	r0, r3
   12f34:	4b1b      	ldr	r3, [pc, #108]	; (12fa4 <bme680_get_regs+0xc0>)
   12f36:	4798      	blx	r3
   12f38:	0003      	movs	r3, r0
   12f3a:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK)
   12f3c:	2317      	movs	r3, #23
   12f3e:	18fb      	adds	r3, r7, r3
   12f40:	781b      	ldrb	r3, [r3, #0]
   12f42:	b25b      	sxtb	r3, r3
   12f44:	2b00      	cmp	r3, #0
   12f46:	d108      	bne.n	12f5a <bme680_get_regs+0x76>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   12f48:	230f      	movs	r3, #15
   12f4a:	18fb      	adds	r3, r7, r3
   12f4c:	220f      	movs	r2, #15
   12f4e:	18ba      	adds	r2, r7, r2
   12f50:	7812      	ldrb	r2, [r2, #0]
   12f52:	2180      	movs	r1, #128	; 0x80
   12f54:	4249      	negs	r1, r1
   12f56:	430a      	orrs	r2, r1
   12f58:	701a      	strb	r2, [r3, #0]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   12f5a:	687b      	ldr	r3, [r7, #4]
   12f5c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   12f5e:	687b      	ldr	r3, [r7, #4]
   12f60:	7858      	ldrb	r0, [r3, #1]
   12f62:	230c      	movs	r3, #12
   12f64:	18fb      	adds	r3, r7, r3
   12f66:	881d      	ldrh	r5, [r3, #0]
   12f68:	68ba      	ldr	r2, [r7, #8]
   12f6a:	230f      	movs	r3, #15
   12f6c:	18fb      	adds	r3, r7, r3
   12f6e:	7819      	ldrb	r1, [r3, #0]
   12f70:	002b      	movs	r3, r5
   12f72:	47a0      	blx	r4
   12f74:	0003      	movs	r3, r0
   12f76:	0019      	movs	r1, r3
   12f78:	687b      	ldr	r3, [r7, #4]
   12f7a:	2254      	movs	r2, #84	; 0x54
   12f7c:	5499      	strb	r1, [r3, r2]
		if (dev->com_rslt != 0)
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	2254      	movs	r2, #84	; 0x54
   12f82:	569b      	ldrsb	r3, [r3, r2]
   12f84:	2b00      	cmp	r3, #0
   12f86:	d003      	beq.n	12f90 <bme680_get_regs+0xac>
			rslt = BME680_E_COM_FAIL;
   12f88:	2317      	movs	r3, #23
   12f8a:	18fb      	adds	r3, r7, r3
   12f8c:	22fe      	movs	r2, #254	; 0xfe
   12f8e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   12f90:	2317      	movs	r3, #23
   12f92:	18fb      	adds	r3, r7, r3
   12f94:	781b      	ldrb	r3, [r3, #0]
   12f96:	b25b      	sxtb	r3, r3
}
   12f98:	0018      	movs	r0, r3
   12f9a:	46bd      	mov	sp, r7
   12f9c:	b006      	add	sp, #24
   12f9e:	bdb0      	pop	{r4, r5, r7, pc}
   12fa0:	00014763 	.word	0x00014763
   12fa4:	00014545 	.word	0x00014545

00012fa8 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
   12fa8:	b5b0      	push	{r4, r5, r7, lr}
   12faa:	b090      	sub	sp, #64	; 0x40
   12fac:	af00      	add	r7, sp, #0
   12fae:	60f8      	str	r0, [r7, #12]
   12fb0:	60b9      	str	r1, [r7, #8]
   12fb2:	603b      	str	r3, [r7, #0]
   12fb4:	1dfb      	adds	r3, r7, #7
   12fb6:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   12fb8:	2314      	movs	r3, #20
   12fba:	18fb      	adds	r3, r7, r3
   12fbc:	0018      	movs	r0, r3
   12fbe:	2328      	movs	r3, #40	; 0x28
   12fc0:	001a      	movs	r2, r3
   12fc2:	2100      	movs	r1, #0
   12fc4:	4b51      	ldr	r3, [pc, #324]	; (1310c <bme680_set_regs+0x164>)
   12fc6:	4798      	blx	r3
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12fc8:	233f      	movs	r3, #63	; 0x3f
   12fca:	18fc      	adds	r4, r7, r3
   12fcc:	683b      	ldr	r3, [r7, #0]
   12fce:	0018      	movs	r0, r3
   12fd0:	4b4f      	ldr	r3, [pc, #316]	; (13110 <bme680_set_regs+0x168>)
   12fd2:	4798      	blx	r3
   12fd4:	0003      	movs	r3, r0
   12fd6:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12fd8:	233f      	movs	r3, #63	; 0x3f
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	781b      	ldrb	r3, [r3, #0]
   12fde:	b25b      	sxtb	r3, r3
   12fe0:	2b00      	cmp	r3, #0
   12fe2:	d000      	beq.n	12fe6 <bme680_set_regs+0x3e>
   12fe4:	e08a      	b.n	130fc <bme680_set_regs+0x154>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   12fe6:	1dfb      	adds	r3, r7, #7
   12fe8:	781b      	ldrb	r3, [r3, #0]
   12fea:	2b00      	cmp	r3, #0
   12fec:	d100      	bne.n	12ff0 <bme680_set_regs+0x48>
   12fee:	e07f      	b.n	130f0 <bme680_set_regs+0x148>
   12ff0:	1dfb      	adds	r3, r7, #7
   12ff2:	781b      	ldrb	r3, [r3, #0]
   12ff4:	2b13      	cmp	r3, #19
   12ff6:	d900      	bls.n	12ffa <bme680_set_regs+0x52>
   12ff8:	e07a      	b.n	130f0 <bme680_set_regs+0x148>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
   12ffa:	233c      	movs	r3, #60	; 0x3c
   12ffc:	18fb      	adds	r3, r7, r3
   12ffe:	2200      	movs	r2, #0
   13000:	801a      	strh	r2, [r3, #0]
   13002:	e045      	b.n	13090 <bme680_set_regs+0xe8>
				if (dev->intf == BME680_SPI_INTF) {
   13004:	683b      	ldr	r3, [r7, #0]
   13006:	789b      	ldrb	r3, [r3, #2]
   13008:	2b00      	cmp	r3, #0
   1300a:	d11f      	bne.n	1304c <bme680_set_regs+0xa4>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   1300c:	233c      	movs	r3, #60	; 0x3c
   1300e:	18fb      	adds	r3, r7, r3
   13010:	881b      	ldrh	r3, [r3, #0]
   13012:	68fa      	ldr	r2, [r7, #12]
   13014:	18d3      	adds	r3, r2, r3
   13016:	781b      	ldrb	r3, [r3, #0]
   13018:	223f      	movs	r2, #63	; 0x3f
   1301a:	18bc      	adds	r4, r7, r2
   1301c:	683a      	ldr	r2, [r7, #0]
   1301e:	0011      	movs	r1, r2
   13020:	0018      	movs	r0, r3
   13022:	4b3c      	ldr	r3, [pc, #240]	; (13114 <bme680_set_regs+0x16c>)
   13024:	4798      	blx	r3
   13026:	0003      	movs	r3, r0
   13028:	7023      	strb	r3, [r4, #0]
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   1302a:	233c      	movs	r3, #60	; 0x3c
   1302c:	18fb      	adds	r3, r7, r3
   1302e:	881b      	ldrh	r3, [r3, #0]
   13030:	005b      	lsls	r3, r3, #1
   13032:	223c      	movs	r2, #60	; 0x3c
   13034:	18ba      	adds	r2, r7, r2
   13036:	8812      	ldrh	r2, [r2, #0]
   13038:	68f9      	ldr	r1, [r7, #12]
   1303a:	188a      	adds	r2, r1, r2
   1303c:	7812      	ldrb	r2, [r2, #0]
   1303e:	217f      	movs	r1, #127	; 0x7f
   13040:	400a      	ands	r2, r1
   13042:	b2d1      	uxtb	r1, r2
   13044:	2214      	movs	r2, #20
   13046:	18ba      	adds	r2, r7, r2
   13048:	54d1      	strb	r1, [r2, r3]
   1304a:	e00c      	b.n	13066 <bme680_set_regs+0xbe>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
   1304c:	233c      	movs	r3, #60	; 0x3c
   1304e:	18fb      	adds	r3, r7, r3
   13050:	881b      	ldrh	r3, [r3, #0]
   13052:	005b      	lsls	r3, r3, #1
   13054:	223c      	movs	r2, #60	; 0x3c
   13056:	18ba      	adds	r2, r7, r2
   13058:	8812      	ldrh	r2, [r2, #0]
   1305a:	68f9      	ldr	r1, [r7, #12]
   1305c:	188a      	adds	r2, r1, r2
   1305e:	7811      	ldrb	r1, [r2, #0]
   13060:	2214      	movs	r2, #20
   13062:	18ba      	adds	r2, r7, r2
   13064:	54d1      	strb	r1, [r2, r3]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
   13066:	233c      	movs	r3, #60	; 0x3c
   13068:	18fb      	adds	r3, r7, r3
   1306a:	881b      	ldrh	r3, [r3, #0]
   1306c:	005b      	lsls	r3, r3, #1
   1306e:	3301      	adds	r3, #1
   13070:	223c      	movs	r2, #60	; 0x3c
   13072:	18ba      	adds	r2, r7, r2
   13074:	8812      	ldrh	r2, [r2, #0]
   13076:	68b9      	ldr	r1, [r7, #8]
   13078:	188a      	adds	r2, r1, r2
   1307a:	7811      	ldrb	r1, [r2, #0]
   1307c:	2214      	movs	r2, #20
   1307e:	18ba      	adds	r2, r7, r2
   13080:	54d1      	strb	r1, [r2, r3]
			for (index = 0; index < len; index++) {
   13082:	233c      	movs	r3, #60	; 0x3c
   13084:	18fb      	adds	r3, r7, r3
   13086:	881a      	ldrh	r2, [r3, #0]
   13088:	233c      	movs	r3, #60	; 0x3c
   1308a:	18fb      	adds	r3, r7, r3
   1308c:	3201      	adds	r2, #1
   1308e:	801a      	strh	r2, [r3, #0]
   13090:	1dfb      	adds	r3, r7, #7
   13092:	781b      	ldrb	r3, [r3, #0]
   13094:	b29b      	uxth	r3, r3
   13096:	223c      	movs	r2, #60	; 0x3c
   13098:	18ba      	adds	r2, r7, r2
   1309a:	8812      	ldrh	r2, [r2, #0]
   1309c:	429a      	cmp	r2, r3
   1309e:	d3b1      	bcc.n	13004 <bme680_set_regs+0x5c>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
   130a0:	233f      	movs	r3, #63	; 0x3f
   130a2:	18fb      	adds	r3, r7, r3
   130a4:	781b      	ldrb	r3, [r3, #0]
   130a6:	b25b      	sxtb	r3, r3
   130a8:	2b00      	cmp	r3, #0
   130aa:	d126      	bne.n	130fa <bme680_set_regs+0x152>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   130ac:	683b      	ldr	r3, [r7, #0]
   130ae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   130b0:	683b      	ldr	r3, [r7, #0]
   130b2:	7858      	ldrb	r0, [r3, #1]
   130b4:	2314      	movs	r3, #20
   130b6:	18fb      	adds	r3, r7, r3
   130b8:	7819      	ldrb	r1, [r3, #0]
   130ba:	1dfb      	adds	r3, r7, #7
   130bc:	781b      	ldrb	r3, [r3, #0]
   130be:	b29b      	uxth	r3, r3
   130c0:	18db      	adds	r3, r3, r3
   130c2:	b29b      	uxth	r3, r3
   130c4:	3b01      	subs	r3, #1
   130c6:	b29d      	uxth	r5, r3
   130c8:	2314      	movs	r3, #20
   130ca:	18fb      	adds	r3, r7, r3
   130cc:	1c5a      	adds	r2, r3, #1
   130ce:	002b      	movs	r3, r5
   130d0:	47a0      	blx	r4
   130d2:	0003      	movs	r3, r0
   130d4:	0019      	movs	r1, r3
   130d6:	683b      	ldr	r3, [r7, #0]
   130d8:	2254      	movs	r2, #84	; 0x54
   130da:	5499      	strb	r1, [r3, r2]
				if (dev->com_rslt != 0)
   130dc:	683b      	ldr	r3, [r7, #0]
   130de:	2254      	movs	r2, #84	; 0x54
   130e0:	569b      	ldrsb	r3, [r3, r2]
   130e2:	2b00      	cmp	r3, #0
   130e4:	d009      	beq.n	130fa <bme680_set_regs+0x152>
					rslt = BME680_E_COM_FAIL;
   130e6:	233f      	movs	r3, #63	; 0x3f
   130e8:	18fb      	adds	r3, r7, r3
   130ea:	22fe      	movs	r2, #254	; 0xfe
   130ec:	701a      	strb	r2, [r3, #0]
			if (rslt == BME680_OK) {
   130ee:	e004      	b.n	130fa <bme680_set_regs+0x152>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
   130f0:	233f      	movs	r3, #63	; 0x3f
   130f2:	18fb      	adds	r3, r7, r3
   130f4:	22fc      	movs	r2, #252	; 0xfc
   130f6:	701a      	strb	r2, [r3, #0]
   130f8:	e000      	b.n	130fc <bme680_set_regs+0x154>
			if (rslt == BME680_OK) {
   130fa:	46c0      	nop			; (mov r8, r8)
		}
	}

	return rslt;
   130fc:	233f      	movs	r3, #63	; 0x3f
   130fe:	18fb      	adds	r3, r7, r3
   13100:	781b      	ldrb	r3, [r3, #0]
   13102:	b25b      	sxtb	r3, r3
}
   13104:	0018      	movs	r0, r3
   13106:	46bd      	mov	sp, r7
   13108:	b010      	add	sp, #64	; 0x40
   1310a:	bdb0      	pop	{r4, r5, r7, pc}
   1310c:	00037903 	.word	0x00037903
   13110:	00014763 	.word	0x00014763
   13114:	00014545 	.word	0x00014545

00013118 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   13118:	b5b0      	push	{r4, r5, r7, lr}
   1311a:	b084      	sub	sp, #16
   1311c:	af00      	add	r7, sp, #0
   1311e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   13120:	230e      	movs	r3, #14
   13122:	18fb      	adds	r3, r7, r3
   13124:	22e0      	movs	r2, #224	; 0xe0
   13126:	701a      	strb	r2, [r3, #0]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   13128:	230d      	movs	r3, #13
   1312a:	18fb      	adds	r3, r7, r3
   1312c:	22b6      	movs	r2, #182	; 0xb6
   1312e:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13130:	230f      	movs	r3, #15
   13132:	18fc      	adds	r4, r7, r3
   13134:	687b      	ldr	r3, [r7, #4]
   13136:	0018      	movs	r0, r3
   13138:	4b22      	ldr	r3, [pc, #136]	; (131c4 <bme680_soft_reset+0xac>)
   1313a:	4798      	blx	r3
   1313c:	0003      	movs	r3, r0
   1313e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13140:	230f      	movs	r3, #15
   13142:	18fb      	adds	r3, r7, r3
   13144:	781b      	ldrb	r3, [r3, #0]
   13146:	b25b      	sxtb	r3, r3
   13148:	2b00      	cmp	r3, #0
   1314a:	d133      	bne.n	131b4 <bme680_soft_reset+0x9c>
		if (dev->intf == BME680_SPI_INTF)
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	789b      	ldrb	r3, [r3, #2]
   13150:	2b00      	cmp	r3, #0
   13152:	d107      	bne.n	13164 <bme680_soft_reset+0x4c>
			rslt = get_mem_page(dev);
   13154:	230f      	movs	r3, #15
   13156:	18fc      	adds	r4, r7, r3
   13158:	687b      	ldr	r3, [r7, #4]
   1315a:	0018      	movs	r0, r3
   1315c:	4b1a      	ldr	r3, [pc, #104]	; (131c8 <bme680_soft_reset+0xb0>)
   1315e:	4798      	blx	r3
   13160:	0003      	movs	r3, r0
   13162:	7023      	strb	r3, [r4, #0]

		/* Reset the device */
		if (rslt == BME680_OK) {
   13164:	230f      	movs	r3, #15
   13166:	18fb      	adds	r3, r7, r3
   13168:	781b      	ldrb	r3, [r3, #0]
   1316a:	b25b      	sxtb	r3, r3
   1316c:	2b00      	cmp	r3, #0
   1316e:	d121      	bne.n	131b4 <bme680_soft_reset+0x9c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   13170:	230f      	movs	r3, #15
   13172:	18fc      	adds	r4, r7, r3
   13174:	687b      	ldr	r3, [r7, #4]
   13176:	220d      	movs	r2, #13
   13178:	18b9      	adds	r1, r7, r2
   1317a:	220e      	movs	r2, #14
   1317c:	18b8      	adds	r0, r7, r2
   1317e:	2201      	movs	r2, #1
   13180:	4d12      	ldr	r5, [pc, #72]	; (131cc <bme680_soft_reset+0xb4>)
   13182:	47a8      	blx	r5
   13184:	0003      	movs	r3, r0
   13186:	7023      	strb	r3, [r4, #0]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
   13188:	687b      	ldr	r3, [r7, #4]
   1318a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1318c:	200a      	movs	r0, #10
   1318e:	4798      	blx	r3

			if (rslt == BME680_OK) {
   13190:	230f      	movs	r3, #15
   13192:	18fb      	adds	r3, r7, r3
   13194:	781b      	ldrb	r3, [r3, #0]
   13196:	b25b      	sxtb	r3, r3
   13198:	2b00      	cmp	r3, #0
   1319a:	d10b      	bne.n	131b4 <bme680_soft_reset+0x9c>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
   1319c:	687b      	ldr	r3, [r7, #4]
   1319e:	789b      	ldrb	r3, [r3, #2]
   131a0:	2b00      	cmp	r3, #0
   131a2:	d107      	bne.n	131b4 <bme680_soft_reset+0x9c>
					rslt = get_mem_page(dev);
   131a4:	230f      	movs	r3, #15
   131a6:	18fc      	adds	r4, r7, r3
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	0018      	movs	r0, r3
   131ac:	4b06      	ldr	r3, [pc, #24]	; (131c8 <bme680_soft_reset+0xb0>)
   131ae:	4798      	blx	r3
   131b0:	0003      	movs	r3, r0
   131b2:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return rslt;
   131b4:	230f      	movs	r3, #15
   131b6:	18fb      	adds	r3, r7, r3
   131b8:	781b      	ldrb	r3, [r3, #0]
   131ba:	b25b      	sxtb	r3, r3
}
   131bc:	0018      	movs	r0, r3
   131be:	46bd      	mov	sp, r7
   131c0:	b004      	add	sp, #16
   131c2:	bdb0      	pop	{r4, r5, r7, pc}
   131c4:	00014763 	.word	0x00014763
   131c8:	00014651 	.word	0x00014651
   131cc:	00012fa9 	.word	0x00012fa9

000131d0 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   131d0:	b5b0      	push	{r4, r5, r7, lr}
   131d2:	b088      	sub	sp, #32
   131d4:	af00      	add	r7, sp, #0
   131d6:	0002      	movs	r2, r0
   131d8:	6039      	str	r1, [r7, #0]
   131da:	1dbb      	adds	r3, r7, #6
   131dc:	801a      	strh	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   131de:	231b      	movs	r3, #27
   131e0:	18fb      	adds	r3, r7, r3
   131e2:	2200      	movs	r2, #0
   131e4:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
   131e6:	231e      	movs	r3, #30
   131e8:	18fb      	adds	r3, r7, r3
   131ea:	2200      	movs	r2, #0
   131ec:	701a      	strb	r2, [r3, #0]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   131ee:	2314      	movs	r3, #20
   131f0:	18fb      	adds	r3, r7, r3
   131f2:	0018      	movs	r0, r3
   131f4:	2306      	movs	r3, #6
   131f6:	001a      	movs	r2, r3
   131f8:	2100      	movs	r1, #0
   131fa:	4be7      	ldr	r3, [pc, #924]	; (13598 <bme680_set_sensor_settings+0x3c8>)
   131fc:	4798      	blx	r3
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   131fe:	230c      	movs	r3, #12
   13200:	18fb      	adds	r3, r7, r3
   13202:	0018      	movs	r0, r3
   13204:	2306      	movs	r3, #6
   13206:	001a      	movs	r2, r3
   13208:	2100      	movs	r1, #0
   1320a:	4be3      	ldr	r3, [pc, #908]	; (13598 <bme680_set_sensor_settings+0x3c8>)
   1320c:	4798      	blx	r3
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   1320e:	231d      	movs	r3, #29
   13210:	18fb      	adds	r3, r7, r3
   13212:	683a      	ldr	r2, [r7, #0]
   13214:	2144      	movs	r1, #68	; 0x44
   13216:	5c52      	ldrb	r2, [r2, r1]
   13218:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   1321a:	231f      	movs	r3, #31
   1321c:	18fc      	adds	r4, r7, r3
   1321e:	683b      	ldr	r3, [r7, #0]
   13220:	0018      	movs	r0, r3
   13222:	4bde      	ldr	r3, [pc, #888]	; (1359c <bme680_set_sensor_settings+0x3cc>)
   13224:	4798      	blx	r3
   13226:	0003      	movs	r3, r0
   13228:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   1322a:	231f      	movs	r3, #31
   1322c:	18fb      	adds	r3, r7, r3
   1322e:	781b      	ldrb	r3, [r3, #0]
   13230:	b25b      	sxtb	r3, r3
   13232:	2b00      	cmp	r3, #0
   13234:	d000      	beq.n	13238 <bme680_set_sensor_settings+0x68>
   13236:	e249      	b.n	136cc <bme680_set_sensor_settings+0x4fc>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   13238:	1dbb      	adds	r3, r7, #6
   1323a:	881b      	ldrh	r3, [r3, #0]
   1323c:	2208      	movs	r2, #8
   1323e:	4013      	ands	r3, r2
   13240:	d007      	beq.n	13252 <bme680_set_sensor_settings+0x82>
			rslt = set_gas_config(dev);
   13242:	231f      	movs	r3, #31
   13244:	18fc      	adds	r4, r7, r3
   13246:	683b      	ldr	r3, [r7, #0]
   13248:	0018      	movs	r0, r3
   1324a:	4bd5      	ldr	r3, [pc, #852]	; (135a0 <bme680_set_sensor_settings+0x3d0>)
   1324c:	4798      	blx	r3
   1324e:	0003      	movs	r3, r0
   13250:	7023      	strb	r3, [r4, #0]

		dev->power_mode = BME680_SLEEP_MODE;
   13252:	683b      	ldr	r3, [r7, #0]
   13254:	2244      	movs	r2, #68	; 0x44
   13256:	2100      	movs	r1, #0
   13258:	5499      	strb	r1, [r3, r2]
		if (rslt == BME680_OK)
   1325a:	231f      	movs	r3, #31
   1325c:	18fb      	adds	r3, r7, r3
   1325e:	781b      	ldrb	r3, [r3, #0]
   13260:	b25b      	sxtb	r3, r3
   13262:	2b00      	cmp	r3, #0
   13264:	d107      	bne.n	13276 <bme680_set_sensor_settings+0xa6>
			rslt = bme680_set_sensor_mode(dev);
   13266:	231f      	movs	r3, #31
   13268:	18fc      	adds	r4, r7, r3
   1326a:	683b      	ldr	r3, [r7, #0]
   1326c:	0018      	movs	r0, r3
   1326e:	4bcd      	ldr	r3, [pc, #820]	; (135a4 <bme680_set_sensor_settings+0x3d4>)
   13270:	4798      	blx	r3
   13272:	0003      	movs	r3, r0
   13274:	7023      	strb	r3, [r4, #0]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
   13276:	1dbb      	adds	r3, r7, #6
   13278:	881b      	ldrh	r3, [r3, #0]
   1327a:	2210      	movs	r2, #16
   1327c:	4013      	ands	r3, r2
   1327e:	d056      	beq.n	1332e <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   13280:	683b      	ldr	r3, [r7, #0]
   13282:	333b      	adds	r3, #59	; 0x3b
   13284:	0018      	movs	r0, r3
   13286:	231f      	movs	r3, #31
   13288:	18fc      	adds	r4, r7, r3
   1328a:	683b      	ldr	r3, [r7, #0]
   1328c:	2207      	movs	r2, #7
   1328e:	2100      	movs	r1, #0
   13290:	4dc5      	ldr	r5, [pc, #788]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   13292:	47a8      	blx	r5
   13294:	0003      	movs	r3, r0
   13296:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
   13298:	231c      	movs	r3, #28
   1329a:	18fb      	adds	r3, r7, r3
   1329c:	2275      	movs	r2, #117	; 0x75
   1329e:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   132a0:	231f      	movs	r3, #31
   132a2:	18fb      	adds	r3, r7, r3
   132a4:	781b      	ldrb	r3, [r3, #0]
   132a6:	b25b      	sxtb	r3, r3
   132a8:	2b00      	cmp	r3, #0
   132aa:	d10d      	bne.n	132c8 <bme680_set_sensor_settings+0xf8>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   132ac:	231f      	movs	r3, #31
   132ae:	18fc      	adds	r4, r7, r3
   132b0:	683a      	ldr	r2, [r7, #0]
   132b2:	231b      	movs	r3, #27
   132b4:	18f9      	adds	r1, r7, r3
   132b6:	231c      	movs	r3, #28
   132b8:	18fb      	adds	r3, r7, r3
   132ba:	7818      	ldrb	r0, [r3, #0]
   132bc:	0013      	movs	r3, r2
   132be:	2201      	movs	r2, #1
   132c0:	4dba      	ldr	r5, [pc, #744]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   132c2:	47a8      	blx	r5
   132c4:	0003      	movs	r3, r0
   132c6:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_FILTER_SEL)
   132c8:	1dbb      	adds	r3, r7, #6
   132ca:	881b      	ldrh	r3, [r3, #0]
   132cc:	2210      	movs	r2, #16
   132ce:	4013      	ands	r3, r2
   132d0:	d014      	beq.n	132fc <bme680_set_sensor_settings+0x12c>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   132d2:	231b      	movs	r3, #27
   132d4:	18fb      	adds	r3, r7, r3
   132d6:	781b      	ldrb	r3, [r3, #0]
   132d8:	b25b      	sxtb	r3, r3
   132da:	221c      	movs	r2, #28
   132dc:	4393      	bics	r3, r2
   132de:	b25a      	sxtb	r2, r3
   132e0:	683b      	ldr	r3, [r7, #0]
   132e2:	213b      	movs	r1, #59	; 0x3b
   132e4:	5c5b      	ldrb	r3, [r3, r1]
   132e6:	009b      	lsls	r3, r3, #2
   132e8:	b25b      	sxtb	r3, r3
   132ea:	211c      	movs	r1, #28
   132ec:	400b      	ands	r3, r1
   132ee:	b25b      	sxtb	r3, r3
   132f0:	4313      	orrs	r3, r2
   132f2:	b25b      	sxtb	r3, r3
   132f4:	b2da      	uxtb	r2, r3
   132f6:	231b      	movs	r3, #27
   132f8:	18fb      	adds	r3, r7, r3
   132fa:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   132fc:	231e      	movs	r3, #30
   132fe:	18fb      	adds	r3, r7, r3
   13300:	781b      	ldrb	r3, [r3, #0]
   13302:	2214      	movs	r2, #20
   13304:	18ba      	adds	r2, r7, r2
   13306:	211c      	movs	r1, #28
   13308:	1879      	adds	r1, r7, r1
   1330a:	7809      	ldrb	r1, [r1, #0]
   1330c:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   1330e:	231e      	movs	r3, #30
   13310:	18fb      	adds	r3, r7, r3
   13312:	781b      	ldrb	r3, [r3, #0]
   13314:	221b      	movs	r2, #27
   13316:	18ba      	adds	r2, r7, r2
   13318:	7811      	ldrb	r1, [r2, #0]
   1331a:	220c      	movs	r2, #12
   1331c:	18ba      	adds	r2, r7, r2
   1331e:	54d1      	strb	r1, [r2, r3]
			count++;
   13320:	231e      	movs	r3, #30
   13322:	18fb      	adds	r3, r7, r3
   13324:	781a      	ldrb	r2, [r3, #0]
   13326:	231e      	movs	r3, #30
   13328:	18fb      	adds	r3, r7, r3
   1332a:	3201      	adds	r2, #1
   1332c:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
   1332e:	1dbb      	adds	r3, r7, #6
   13330:	881b      	ldrh	r3, [r3, #0]
   13332:	2220      	movs	r2, #32
   13334:	4013      	ands	r3, r2
   13336:	d050      	beq.n	133da <bme680_set_sensor_settings+0x20a>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   13338:	683b      	ldr	r3, [r7, #0]
   1333a:	333d      	adds	r3, #61	; 0x3d
   1333c:	0018      	movs	r0, r3
   1333e:	231f      	movs	r3, #31
   13340:	18fc      	adds	r4, r7, r3
   13342:	683b      	ldr	r3, [r7, #0]
   13344:	2208      	movs	r2, #8
   13346:	2100      	movs	r1, #0
   13348:	4d97      	ldr	r5, [pc, #604]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   1334a:	47a8      	blx	r5
   1334c:	0003      	movs	r3, r0
   1334e:	7023      	strb	r3, [r4, #0]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
   13350:	231c      	movs	r3, #28
   13352:	18fb      	adds	r3, r7, r3
   13354:	2270      	movs	r2, #112	; 0x70
   13356:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   13358:	231f      	movs	r3, #31
   1335a:	18fb      	adds	r3, r7, r3
   1335c:	781b      	ldrb	r3, [r3, #0]
   1335e:	b25b      	sxtb	r3, r3
   13360:	2b00      	cmp	r3, #0
   13362:	d10d      	bne.n	13380 <bme680_set_sensor_settings+0x1b0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   13364:	231f      	movs	r3, #31
   13366:	18fc      	adds	r4, r7, r3
   13368:	683a      	ldr	r2, [r7, #0]
   1336a:	231b      	movs	r3, #27
   1336c:	18f9      	adds	r1, r7, r3
   1336e:	231c      	movs	r3, #28
   13370:	18fb      	adds	r3, r7, r3
   13372:	7818      	ldrb	r0, [r3, #0]
   13374:	0013      	movs	r3, r2
   13376:	2201      	movs	r2, #1
   13378:	4d8c      	ldr	r5, [pc, #560]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   1337a:	47a8      	blx	r5
   1337c:	0003      	movs	r3, r0
   1337e:	7023      	strb	r3, [r4, #0]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   13380:	231b      	movs	r3, #27
   13382:	18fb      	adds	r3, r7, r3
   13384:	781b      	ldrb	r3, [r3, #0]
   13386:	b25b      	sxtb	r3, r3
   13388:	2208      	movs	r2, #8
   1338a:	4393      	bics	r3, r2
   1338c:	b25a      	sxtb	r2, r3
   1338e:	683b      	ldr	r3, [r7, #0]
   13390:	213d      	movs	r1, #61	; 0x3d
   13392:	5c5b      	ldrb	r3, [r3, r1]
   13394:	b25b      	sxtb	r3, r3
   13396:	2108      	movs	r1, #8
   13398:	400b      	ands	r3, r1
   1339a:	b25b      	sxtb	r3, r3
   1339c:	4313      	orrs	r3, r2
   1339e:	b25b      	sxtb	r3, r3
   133a0:	b2da      	uxtb	r2, r3
   133a2:	231b      	movs	r3, #27
   133a4:	18fb      	adds	r3, r7, r3
   133a6:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   133a8:	231e      	movs	r3, #30
   133aa:	18fb      	adds	r3, r7, r3
   133ac:	781b      	ldrb	r3, [r3, #0]
   133ae:	2214      	movs	r2, #20
   133b0:	18ba      	adds	r2, r7, r2
   133b2:	211c      	movs	r1, #28
   133b4:	1879      	adds	r1, r7, r1
   133b6:	7809      	ldrb	r1, [r1, #0]
   133b8:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   133ba:	231e      	movs	r3, #30
   133bc:	18fb      	adds	r3, r7, r3
   133be:	781b      	ldrb	r3, [r3, #0]
   133c0:	221b      	movs	r2, #27
   133c2:	18ba      	adds	r2, r7, r2
   133c4:	7811      	ldrb	r1, [r2, #0]
   133c6:	220c      	movs	r2, #12
   133c8:	18ba      	adds	r2, r7, r2
   133ca:	54d1      	strb	r1, [r2, r3]
			count++;
   133cc:	231e      	movs	r3, #30
   133ce:	18fb      	adds	r3, r7, r3
   133d0:	781a      	ldrb	r2, [r3, #0]
   133d2:	231e      	movs	r3, #30
   133d4:	18fb      	adds	r3, r7, r3
   133d6:	3201      	adds	r2, #1
   133d8:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   133da:	1dbb      	adds	r3, r7, #6
   133dc:	881b      	ldrh	r3, [r3, #0]
   133de:	2203      	movs	r2, #3
   133e0:	4013      	ands	r3, r2
   133e2:	d06d      	beq.n	134c0 <bme680_set_sensor_settings+0x2f0>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   133e4:	683b      	ldr	r3, [r7, #0]
   133e6:	3339      	adds	r3, #57	; 0x39
   133e8:	0018      	movs	r0, r3
   133ea:	231f      	movs	r3, #31
   133ec:	18fc      	adds	r4, r7, r3
   133ee:	683b      	ldr	r3, [r7, #0]
   133f0:	2205      	movs	r2, #5
   133f2:	2100      	movs	r1, #0
   133f4:	4d6c      	ldr	r5, [pc, #432]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   133f6:	47a8      	blx	r5
   133f8:	0003      	movs	r3, r0
   133fa:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
   133fc:	231c      	movs	r3, #28
   133fe:	18fb      	adds	r3, r7, r3
   13400:	2274      	movs	r2, #116	; 0x74
   13402:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   13404:	231f      	movs	r3, #31
   13406:	18fb      	adds	r3, r7, r3
   13408:	781b      	ldrb	r3, [r3, #0]
   1340a:	b25b      	sxtb	r3, r3
   1340c:	2b00      	cmp	r3, #0
   1340e:	d10d      	bne.n	1342c <bme680_set_sensor_settings+0x25c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   13410:	231f      	movs	r3, #31
   13412:	18fc      	adds	r4, r7, r3
   13414:	683a      	ldr	r2, [r7, #0]
   13416:	231b      	movs	r3, #27
   13418:	18f9      	adds	r1, r7, r3
   1341a:	231c      	movs	r3, #28
   1341c:	18fb      	adds	r3, r7, r3
   1341e:	7818      	ldrb	r0, [r3, #0]
   13420:	0013      	movs	r3, r2
   13422:	2201      	movs	r2, #1
   13424:	4d61      	ldr	r5, [pc, #388]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   13426:	47a8      	blx	r5
   13428:	0003      	movs	r3, r0
   1342a:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_OST_SEL)
   1342c:	1dbb      	adds	r3, r7, #6
   1342e:	881b      	ldrh	r3, [r3, #0]
   13430:	2201      	movs	r2, #1
   13432:	4013      	ands	r3, r2
   13434:	d011      	beq.n	1345a <bme680_set_sensor_settings+0x28a>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   13436:	231b      	movs	r3, #27
   13438:	18fb      	adds	r3, r7, r3
   1343a:	781b      	ldrb	r3, [r3, #0]
   1343c:	b25b      	sxtb	r3, r3
   1343e:	221f      	movs	r2, #31
   13440:	4013      	ands	r3, r2
   13442:	b25a      	sxtb	r2, r3
   13444:	683b      	ldr	r3, [r7, #0]
   13446:	2139      	movs	r1, #57	; 0x39
   13448:	5c5b      	ldrb	r3, [r3, r1]
   1344a:	015b      	lsls	r3, r3, #5
   1344c:	b25b      	sxtb	r3, r3
   1344e:	4313      	orrs	r3, r2
   13450:	b25b      	sxtb	r3, r3
   13452:	b2da      	uxtb	r2, r3
   13454:	231b      	movs	r3, #27
   13456:	18fb      	adds	r3, r7, r3
   13458:	701a      	strb	r2, [r3, #0]

			if (desired_settings & BME680_OSP_SEL)
   1345a:	1dbb      	adds	r3, r7, #6
   1345c:	881b      	ldrh	r3, [r3, #0]
   1345e:	2202      	movs	r2, #2
   13460:	4013      	ands	r3, r2
   13462:	d014      	beq.n	1348e <bme680_set_sensor_settings+0x2be>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   13464:	231b      	movs	r3, #27
   13466:	18fb      	adds	r3, r7, r3
   13468:	781b      	ldrb	r3, [r3, #0]
   1346a:	b25b      	sxtb	r3, r3
   1346c:	221c      	movs	r2, #28
   1346e:	4393      	bics	r3, r2
   13470:	b25a      	sxtb	r2, r3
   13472:	683b      	ldr	r3, [r7, #0]
   13474:	213a      	movs	r1, #58	; 0x3a
   13476:	5c5b      	ldrb	r3, [r3, r1]
   13478:	009b      	lsls	r3, r3, #2
   1347a:	b25b      	sxtb	r3, r3
   1347c:	211c      	movs	r1, #28
   1347e:	400b      	ands	r3, r1
   13480:	b25b      	sxtb	r3, r3
   13482:	4313      	orrs	r3, r2
   13484:	b25b      	sxtb	r3, r3
   13486:	b2da      	uxtb	r2, r3
   13488:	231b      	movs	r3, #27
   1348a:	18fb      	adds	r3, r7, r3
   1348c:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr;
   1348e:	231e      	movs	r3, #30
   13490:	18fb      	adds	r3, r7, r3
   13492:	781b      	ldrb	r3, [r3, #0]
   13494:	2214      	movs	r2, #20
   13496:	18ba      	adds	r2, r7, r2
   13498:	211c      	movs	r1, #28
   1349a:	1879      	adds	r1, r7, r1
   1349c:	7809      	ldrb	r1, [r1, #0]
   1349e:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   134a0:	231e      	movs	r3, #30
   134a2:	18fb      	adds	r3, r7, r3
   134a4:	781b      	ldrb	r3, [r3, #0]
   134a6:	221b      	movs	r2, #27
   134a8:	18ba      	adds	r2, r7, r2
   134aa:	7811      	ldrb	r1, [r2, #0]
   134ac:	220c      	movs	r2, #12
   134ae:	18ba      	adds	r2, r7, r2
   134b0:	54d1      	strb	r1, [r2, r3]
			count++;
   134b2:	231e      	movs	r3, #30
   134b4:	18fb      	adds	r3, r7, r3
   134b6:	781a      	ldrb	r2, [r3, #0]
   134b8:	231e      	movs	r3, #30
   134ba:	18fb      	adds	r3, r7, r3
   134bc:	3201      	adds	r2, #1
   134be:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
   134c0:	1dbb      	adds	r3, r7, #6
   134c2:	881b      	ldrh	r3, [r3, #0]
   134c4:	2204      	movs	r2, #4
   134c6:	4013      	ands	r3, r2
   134c8:	d050      	beq.n	1356c <bme680_set_sensor_settings+0x39c>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	3338      	adds	r3, #56	; 0x38
   134ce:	0018      	movs	r0, r3
   134d0:	231f      	movs	r3, #31
   134d2:	18fc      	adds	r4, r7, r3
   134d4:	683b      	ldr	r3, [r7, #0]
   134d6:	2205      	movs	r2, #5
   134d8:	2100      	movs	r1, #0
   134da:	4d33      	ldr	r5, [pc, #204]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   134dc:	47a8      	blx	r5
   134de:	0003      	movs	r3, r0
   134e0:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_OS_H_ADDR;
   134e2:	231c      	movs	r3, #28
   134e4:	18fb      	adds	r3, r7, r3
   134e6:	2272      	movs	r2, #114	; 0x72
   134e8:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   134ea:	231f      	movs	r3, #31
   134ec:	18fb      	adds	r3, r7, r3
   134ee:	781b      	ldrb	r3, [r3, #0]
   134f0:	b25b      	sxtb	r3, r3
   134f2:	2b00      	cmp	r3, #0
   134f4:	d10d      	bne.n	13512 <bme680_set_sensor_settings+0x342>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   134f6:	231f      	movs	r3, #31
   134f8:	18fc      	adds	r4, r7, r3
   134fa:	683a      	ldr	r2, [r7, #0]
   134fc:	231b      	movs	r3, #27
   134fe:	18f9      	adds	r1, r7, r3
   13500:	231c      	movs	r3, #28
   13502:	18fb      	adds	r3, r7, r3
   13504:	7818      	ldrb	r0, [r3, #0]
   13506:	0013      	movs	r3, r2
   13508:	2201      	movs	r2, #1
   1350a:	4d28      	ldr	r5, [pc, #160]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   1350c:	47a8      	blx	r5
   1350e:	0003      	movs	r3, r0
   13510:	7023      	strb	r3, [r4, #0]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   13512:	231b      	movs	r3, #27
   13514:	18fb      	adds	r3, r7, r3
   13516:	781b      	ldrb	r3, [r3, #0]
   13518:	b25b      	sxtb	r3, r3
   1351a:	2207      	movs	r2, #7
   1351c:	4393      	bics	r3, r2
   1351e:	b25a      	sxtb	r2, r3
   13520:	683b      	ldr	r3, [r7, #0]
   13522:	2138      	movs	r1, #56	; 0x38
   13524:	5c5b      	ldrb	r3, [r3, r1]
   13526:	b25b      	sxtb	r3, r3
   13528:	2107      	movs	r1, #7
   1352a:	400b      	ands	r3, r1
   1352c:	b25b      	sxtb	r3, r3
   1352e:	4313      	orrs	r3, r2
   13530:	b25b      	sxtb	r3, r3
   13532:	b2da      	uxtb	r2, r3
   13534:	231b      	movs	r3, #27
   13536:	18fb      	adds	r3, r7, r3
   13538:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   1353a:	231e      	movs	r3, #30
   1353c:	18fb      	adds	r3, r7, r3
   1353e:	781b      	ldrb	r3, [r3, #0]
   13540:	2214      	movs	r2, #20
   13542:	18ba      	adds	r2, r7, r2
   13544:	211c      	movs	r1, #28
   13546:	1879      	adds	r1, r7, r1
   13548:	7809      	ldrb	r1, [r1, #0]
   1354a:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   1354c:	231e      	movs	r3, #30
   1354e:	18fb      	adds	r3, r7, r3
   13550:	781b      	ldrb	r3, [r3, #0]
   13552:	221b      	movs	r2, #27
   13554:	18ba      	adds	r2, r7, r2
   13556:	7811      	ldrb	r1, [r2, #0]
   13558:	220c      	movs	r2, #12
   1355a:	18ba      	adds	r2, r7, r2
   1355c:	54d1      	strb	r1, [r2, r3]
			count++;
   1355e:	231e      	movs	r3, #30
   13560:	18fb      	adds	r3, r7, r3
   13562:	781a      	ldrb	r2, [r3, #0]
   13564:	231e      	movs	r3, #30
   13566:	18fb      	adds	r3, r7, r3
   13568:	3201      	adds	r2, #1
   1356a:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   1356c:	1dbb      	adds	r3, r7, #6
   1356e:	881b      	ldrh	r3, [r3, #0]
   13570:	22c0      	movs	r2, #192	; 0xc0
   13572:	4013      	ands	r3, r2
   13574:	d100      	bne.n	13578 <bme680_set_sensor_settings+0x3a8>
   13576:	e08e      	b.n	13696 <bme680_set_sensor_settings+0x4c6>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   13578:	683b      	ldr	r3, [r7, #0]
   1357a:	333e      	adds	r3, #62	; 0x3e
   1357c:	0018      	movs	r0, r3
   1357e:	231f      	movs	r3, #31
   13580:	18fc      	adds	r4, r7, r3
   13582:	683b      	ldr	r3, [r7, #0]
   13584:	2201      	movs	r2, #1
   13586:	2100      	movs	r1, #0
   13588:	4d07      	ldr	r5, [pc, #28]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   1358a:	47a8      	blx	r5
   1358c:	0003      	movs	r3, r0
   1358e:	7023      	strb	r3, [r4, #0]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
   13590:	231f      	movs	r3, #31
   13592:	18fb      	adds	r3, r7, r3
   13594:	781b      	ldrb	r3, [r3, #0]
   13596:	e00b      	b.n	135b0 <bme680_set_sensor_settings+0x3e0>
   13598:	00037903 	.word	0x00037903
   1359c:	00014763 	.word	0x00014763
   135a0:	00013b91 	.word	0x00013b91
   135a4:	000136e9 	.word	0x000136e9
   135a8:	000146c9 	.word	0x000146c9
   135ac:	00012ee5 	.word	0x00012ee5
   135b0:	b25b      	sxtb	r3, r3
   135b2:	2b00      	cmp	r3, #0
   135b4:	d10b      	bne.n	135ce <bme680_set_sensor_settings+0x3fe>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   135b6:	683b      	ldr	r3, [r7, #0]
   135b8:	333c      	adds	r3, #60	; 0x3c
   135ba:	0018      	movs	r0, r3
   135bc:	231f      	movs	r3, #31
   135be:	18fc      	adds	r4, r7, r3
   135c0:	683b      	ldr	r3, [r7, #0]
   135c2:	220a      	movs	r2, #10
   135c4:	2100      	movs	r1, #0
   135c6:	4d45      	ldr	r5, [pc, #276]	; (136dc <bme680_set_sensor_settings+0x50c>)
   135c8:	47a8      	blx	r5
   135ca:	0003      	movs	r3, r0
   135cc:	7023      	strb	r3, [r4, #0]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
   135ce:	231c      	movs	r3, #28
   135d0:	18fb      	adds	r3, r7, r3
   135d2:	2271      	movs	r2, #113	; 0x71
   135d4:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   135d6:	231f      	movs	r3, #31
   135d8:	18fb      	adds	r3, r7, r3
   135da:	781b      	ldrb	r3, [r3, #0]
   135dc:	b25b      	sxtb	r3, r3
   135de:	2b00      	cmp	r3, #0
   135e0:	d10d      	bne.n	135fe <bme680_set_sensor_settings+0x42e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   135e2:	231f      	movs	r3, #31
   135e4:	18fc      	adds	r4, r7, r3
   135e6:	683a      	ldr	r2, [r7, #0]
   135e8:	231b      	movs	r3, #27
   135ea:	18f9      	adds	r1, r7, r3
   135ec:	231c      	movs	r3, #28
   135ee:	18fb      	adds	r3, r7, r3
   135f0:	7818      	ldrb	r0, [r3, #0]
   135f2:	0013      	movs	r3, r2
   135f4:	2201      	movs	r2, #1
   135f6:	4d3a      	ldr	r5, [pc, #232]	; (136e0 <bme680_set_sensor_settings+0x510>)
   135f8:	47a8      	blx	r5
   135fa:	0003      	movs	r3, r0
   135fc:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_RUN_GAS_SEL)
   135fe:	1dbb      	adds	r3, r7, #6
   13600:	881b      	ldrh	r3, [r3, #0]
   13602:	2240      	movs	r2, #64	; 0x40
   13604:	4013      	ands	r3, r2
   13606:	d014      	beq.n	13632 <bme680_set_sensor_settings+0x462>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   13608:	231b      	movs	r3, #27
   1360a:	18fb      	adds	r3, r7, r3
   1360c:	781b      	ldrb	r3, [r3, #0]
   1360e:	b25b      	sxtb	r3, r3
   13610:	2210      	movs	r2, #16
   13612:	4393      	bics	r3, r2
   13614:	b25a      	sxtb	r2, r3
   13616:	683b      	ldr	r3, [r7, #0]
   13618:	213e      	movs	r1, #62	; 0x3e
   1361a:	5c5b      	ldrb	r3, [r3, r1]
   1361c:	011b      	lsls	r3, r3, #4
   1361e:	b25b      	sxtb	r3, r3
   13620:	2110      	movs	r1, #16
   13622:	400b      	ands	r3, r1
   13624:	b25b      	sxtb	r3, r3
   13626:	4313      	orrs	r3, r2
   13628:	b25b      	sxtb	r3, r3
   1362a:	b2da      	uxtb	r2, r3
   1362c:	231b      	movs	r3, #27
   1362e:	18fb      	adds	r3, r7, r3
   13630:	701a      	strb	r2, [r3, #0]

			if (desired_settings & BME680_NBCONV_SEL)
   13632:	1dbb      	adds	r3, r7, #6
   13634:	881b      	ldrh	r3, [r3, #0]
   13636:	2280      	movs	r2, #128	; 0x80
   13638:	4013      	ands	r3, r2
   1363a:	d013      	beq.n	13664 <bme680_set_sensor_settings+0x494>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   1363c:	231b      	movs	r3, #27
   1363e:	18fb      	adds	r3, r7, r3
   13640:	781b      	ldrb	r3, [r3, #0]
   13642:	b25b      	sxtb	r3, r3
   13644:	220f      	movs	r2, #15
   13646:	4393      	bics	r3, r2
   13648:	b25a      	sxtb	r2, r3
   1364a:	683b      	ldr	r3, [r7, #0]
   1364c:	213c      	movs	r1, #60	; 0x3c
   1364e:	5c5b      	ldrb	r3, [r3, r1]
   13650:	b25b      	sxtb	r3, r3
   13652:	210f      	movs	r1, #15
   13654:	400b      	ands	r3, r1
   13656:	b25b      	sxtb	r3, r3
   13658:	4313      	orrs	r3, r2
   1365a:	b25b      	sxtb	r3, r3
   1365c:	b2da      	uxtb	r2, r3
   1365e:	231b      	movs	r3, #27
   13660:	18fb      	adds	r3, r7, r3
   13662:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   13664:	231e      	movs	r3, #30
   13666:	18fb      	adds	r3, r7, r3
   13668:	781b      	ldrb	r3, [r3, #0]
   1366a:	2214      	movs	r2, #20
   1366c:	18ba      	adds	r2, r7, r2
   1366e:	211c      	movs	r1, #28
   13670:	1879      	adds	r1, r7, r1
   13672:	7809      	ldrb	r1, [r1, #0]
   13674:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   13676:	231e      	movs	r3, #30
   13678:	18fb      	adds	r3, r7, r3
   1367a:	781b      	ldrb	r3, [r3, #0]
   1367c:	221b      	movs	r2, #27
   1367e:	18ba      	adds	r2, r7, r2
   13680:	7811      	ldrb	r1, [r2, #0]
   13682:	220c      	movs	r2, #12
   13684:	18ba      	adds	r2, r7, r2
   13686:	54d1      	strb	r1, [r2, r3]
			count++;
   13688:	231e      	movs	r3, #30
   1368a:	18fb      	adds	r3, r7, r3
   1368c:	781a      	ldrb	r2, [r3, #0]
   1368e:	231e      	movs	r3, #30
   13690:	18fb      	adds	r3, r7, r3
   13692:	3201      	adds	r2, #1
   13694:	701a      	strb	r2, [r3, #0]
		}

		if (rslt == BME680_OK)
   13696:	231f      	movs	r3, #31
   13698:	18fb      	adds	r3, r7, r3
   1369a:	781b      	ldrb	r3, [r3, #0]
   1369c:	b25b      	sxtb	r3, r3
   1369e:	2b00      	cmp	r3, #0
   136a0:	d10e      	bne.n	136c0 <bme680_set_sensor_settings+0x4f0>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   136a2:	231f      	movs	r3, #31
   136a4:	18fc      	adds	r4, r7, r3
   136a6:	683d      	ldr	r5, [r7, #0]
   136a8:	231e      	movs	r3, #30
   136aa:	18fb      	adds	r3, r7, r3
   136ac:	781a      	ldrb	r2, [r3, #0]
   136ae:	230c      	movs	r3, #12
   136b0:	18f9      	adds	r1, r7, r3
   136b2:	2314      	movs	r3, #20
   136b4:	18f8      	adds	r0, r7, r3
   136b6:	002b      	movs	r3, r5
   136b8:	4d0a      	ldr	r5, [pc, #40]	; (136e4 <bme680_set_sensor_settings+0x514>)
   136ba:	47a8      	blx	r5
   136bc:	0003      	movs	r3, r0
   136be:	7023      	strb	r3, [r4, #0]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
   136c0:	683b      	ldr	r3, [r7, #0]
   136c2:	221d      	movs	r2, #29
   136c4:	18ba      	adds	r2, r7, r2
   136c6:	2144      	movs	r1, #68	; 0x44
   136c8:	7812      	ldrb	r2, [r2, #0]
   136ca:	545a      	strb	r2, [r3, r1]
	}

	return rslt;
   136cc:	231f      	movs	r3, #31
   136ce:	18fb      	adds	r3, r7, r3
   136d0:	781b      	ldrb	r3, [r3, #0]
   136d2:	b25b      	sxtb	r3, r3
}
   136d4:	0018      	movs	r0, r3
   136d6:	46bd      	mov	sp, r7
   136d8:	b008      	add	sp, #32
   136da:	bdb0      	pop	{r4, r5, r7, pc}
   136dc:	000146c9 	.word	0x000146c9
   136e0:	00012ee5 	.word	0x00012ee5
   136e4:	00012fa9 	.word	0x00012fa9

000136e8 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   136e8:	b5b0      	push	{r4, r5, r7, lr}
   136ea:	b084      	sub	sp, #16
   136ec:	af00      	add	r7, sp, #0
   136ee:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
   136f0:	230e      	movs	r3, #14
   136f2:	18fb      	adds	r3, r7, r3
   136f4:	2200      	movs	r2, #0
   136f6:	701a      	strb	r2, [r3, #0]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   136f8:	230c      	movs	r3, #12
   136fa:	18fb      	adds	r3, r7, r3
   136fc:	2274      	movs	r2, #116	; 0x74
   136fe:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13700:	230f      	movs	r3, #15
   13702:	18fc      	adds	r4, r7, r3
   13704:	687b      	ldr	r3, [r7, #4]
   13706:	0018      	movs	r0, r3
   13708:	4b3c      	ldr	r3, [pc, #240]	; (137fc <bme680_set_sensor_mode+0x114>)
   1370a:	4798      	blx	r3
   1370c:	0003      	movs	r3, r0
   1370e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13710:	230f      	movs	r3, #15
   13712:	18fb      	adds	r3, r7, r3
   13714:	781b      	ldrb	r3, [r3, #0]
   13716:	b25b      	sxtb	r3, r3
   13718:	2b00      	cmp	r3, #0
   1371a:	d166      	bne.n	137ea <bme680_set_sensor_mode+0x102>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   1371c:	230f      	movs	r3, #15
   1371e:	18fc      	adds	r4, r7, r3
   13720:	687b      	ldr	r3, [r7, #4]
   13722:	220d      	movs	r2, #13
   13724:	18b9      	adds	r1, r7, r2
   13726:	2201      	movs	r2, #1
   13728:	2074      	movs	r0, #116	; 0x74
   1372a:	4d35      	ldr	r5, [pc, #212]	; (13800 <bme680_set_sensor_mode+0x118>)
   1372c:	47a8      	blx	r5
   1372e:	0003      	movs	r3, r0
   13730:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK) {
   13732:	230f      	movs	r3, #15
   13734:	18fb      	adds	r3, r7, r3
   13736:	781b      	ldrb	r3, [r3, #0]
   13738:	b25b      	sxtb	r3, r3
   1373a:	2b00      	cmp	r3, #0
   1373c:	d125      	bne.n	1378a <bme680_set_sensor_mode+0xa2>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   1373e:	230d      	movs	r3, #13
   13740:	18fb      	adds	r3, r7, r3
   13742:	781a      	ldrb	r2, [r3, #0]
   13744:	230e      	movs	r3, #14
   13746:	18fb      	adds	r3, r7, r3
   13748:	2103      	movs	r1, #3
   1374a:	400a      	ands	r2, r1
   1374c:	701a      	strb	r2, [r3, #0]

				if (pow_mode != BME680_SLEEP_MODE) {
   1374e:	230e      	movs	r3, #14
   13750:	18fb      	adds	r3, r7, r3
   13752:	781b      	ldrb	r3, [r3, #0]
   13754:	2b00      	cmp	r3, #0
   13756:	d018      	beq.n	1378a <bme680_set_sensor_mode+0xa2>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   13758:	230d      	movs	r3, #13
   1375a:	18fb      	adds	r3, r7, r3
   1375c:	781b      	ldrb	r3, [r3, #0]
   1375e:	2203      	movs	r2, #3
   13760:	4393      	bics	r3, r2
   13762:	b2da      	uxtb	r2, r3
   13764:	230d      	movs	r3, #13
   13766:	18fb      	adds	r3, r7, r3
   13768:	701a      	strb	r2, [r3, #0]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   1376a:	230f      	movs	r3, #15
   1376c:	18fc      	adds	r4, r7, r3
   1376e:	687b      	ldr	r3, [r7, #4]
   13770:	220d      	movs	r2, #13
   13772:	18b9      	adds	r1, r7, r2
   13774:	220c      	movs	r2, #12
   13776:	18b8      	adds	r0, r7, r2
   13778:	2201      	movs	r2, #1
   1377a:	4d22      	ldr	r5, [pc, #136]	; (13804 <bme680_set_sensor_mode+0x11c>)
   1377c:	47a8      	blx	r5
   1377e:	0003      	movs	r3, r0
   13780:	7023      	strb	r3, [r4, #0]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
   13782:	687b      	ldr	r3, [r7, #4]
   13784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   13786:	200a      	movs	r0, #10
   13788:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
   1378a:	230e      	movs	r3, #14
   1378c:	18fb      	adds	r3, r7, r3
   1378e:	781b      	ldrb	r3, [r3, #0]
   13790:	2b00      	cmp	r3, #0
   13792:	d1c3      	bne.n	1371c <bme680_set_sensor_mode+0x34>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
   13794:	687b      	ldr	r3, [r7, #4]
   13796:	2244      	movs	r2, #68	; 0x44
   13798:	5c9b      	ldrb	r3, [r3, r2]
   1379a:	2b00      	cmp	r3, #0
   1379c:	d025      	beq.n	137ea <bme680_set_sensor_mode+0x102>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   1379e:	230d      	movs	r3, #13
   137a0:	18fb      	adds	r3, r7, r3
   137a2:	781b      	ldrb	r3, [r3, #0]
   137a4:	b25b      	sxtb	r3, r3
   137a6:	2203      	movs	r2, #3
   137a8:	4393      	bics	r3, r2
   137aa:	b25a      	sxtb	r2, r3
   137ac:	687b      	ldr	r3, [r7, #4]
   137ae:	2144      	movs	r1, #68	; 0x44
   137b0:	5c5b      	ldrb	r3, [r3, r1]
   137b2:	b25b      	sxtb	r3, r3
   137b4:	2103      	movs	r1, #3
   137b6:	400b      	ands	r3, r1
   137b8:	b25b      	sxtb	r3, r3
   137ba:	4313      	orrs	r3, r2
   137bc:	b25b      	sxtb	r3, r3
   137be:	b2da      	uxtb	r2, r3
   137c0:	230d      	movs	r3, #13
   137c2:	18fb      	adds	r3, r7, r3
   137c4:	701a      	strb	r2, [r3, #0]
			if (rslt == BME680_OK)
   137c6:	230f      	movs	r3, #15
   137c8:	18fb      	adds	r3, r7, r3
   137ca:	781b      	ldrb	r3, [r3, #0]
   137cc:	b25b      	sxtb	r3, r3
   137ce:	2b00      	cmp	r3, #0
   137d0:	d10b      	bne.n	137ea <bme680_set_sensor_mode+0x102>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   137d2:	230f      	movs	r3, #15
   137d4:	18fc      	adds	r4, r7, r3
   137d6:	687b      	ldr	r3, [r7, #4]
   137d8:	220d      	movs	r2, #13
   137da:	18b9      	adds	r1, r7, r2
   137dc:	220c      	movs	r2, #12
   137de:	18b8      	adds	r0, r7, r2
   137e0:	2201      	movs	r2, #1
   137e2:	4d08      	ldr	r5, [pc, #32]	; (13804 <bme680_set_sensor_mode+0x11c>)
   137e4:	47a8      	blx	r5
   137e6:	0003      	movs	r3, r0
   137e8:	7023      	strb	r3, [r4, #0]
		}
	}

	return rslt;
   137ea:	230f      	movs	r3, #15
   137ec:	18fb      	adds	r3, r7, r3
   137ee:	781b      	ldrb	r3, [r3, #0]
   137f0:	b25b      	sxtb	r3, r3
}
   137f2:	0018      	movs	r0, r3
   137f4:	46bd      	mov	sp, r7
   137f6:	b004      	add	sp, #16
   137f8:	bdb0      	pop	{r4, r5, r7, pc}
   137fa:	46c0      	nop			; (mov r8, r8)
   137fc:	00014763 	.word	0x00014763
   13800:	00012ee5 	.word	0x00012ee5
   13804:	00012fa9 	.word	0x00012fa9

00013808 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   13808:	b590      	push	{r4, r7, lr}
   1380a:	b085      	sub	sp, #20
   1380c:	af00      	add	r7, sp, #0
   1380e:	6078      	str	r0, [r7, #4]
   13810:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13812:	230f      	movs	r3, #15
   13814:	18fc      	adds	r4, r7, r3
   13816:	683b      	ldr	r3, [r7, #0]
   13818:	0018      	movs	r0, r3
   1381a:	4b18      	ldr	r3, [pc, #96]	; (1387c <bme680_get_sensor_data+0x74>)
   1381c:	4798      	blx	r3
   1381e:	0003      	movs	r3, r0
   13820:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13822:	230f      	movs	r3, #15
   13824:	18fb      	adds	r3, r7, r3
   13826:	781b      	ldrb	r3, [r3, #0]
   13828:	b25b      	sxtb	r3, r3
   1382a:	2b00      	cmp	r3, #0
   1382c:	d11d      	bne.n	1386a <bme680_get_sensor_data+0x62>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
   1382e:	230f      	movs	r3, #15
   13830:	18fc      	adds	r4, r7, r3
   13832:	683a      	ldr	r2, [r7, #0]
   13834:	687b      	ldr	r3, [r7, #4]
   13836:	0011      	movs	r1, r2
   13838:	0018      	movs	r0, r3
   1383a:	4b11      	ldr	r3, [pc, #68]	; (13880 <bme680_get_sensor_data+0x78>)
   1383c:	4798      	blx	r3
   1383e:	0003      	movs	r3, r0
   13840:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
   13842:	230f      	movs	r3, #15
   13844:	18fb      	adds	r3, r7, r3
   13846:	781b      	ldrb	r3, [r3, #0]
   13848:	b25b      	sxtb	r3, r3
   1384a:	2b00      	cmp	r3, #0
   1384c:	d10d      	bne.n	1386a <bme680_get_sensor_data+0x62>
			if (data->status & BME680_NEW_DATA_MSK)
   1384e:	687b      	ldr	r3, [r7, #4]
   13850:	781b      	ldrb	r3, [r3, #0]
   13852:	b25b      	sxtb	r3, r3
   13854:	2b00      	cmp	r3, #0
   13856:	da04      	bge.n	13862 <bme680_get_sensor_data+0x5a>
				dev->new_fields = 1;
   13858:	683b      	ldr	r3, [r7, #0]
   1385a:	2245      	movs	r2, #69	; 0x45
   1385c:	2101      	movs	r1, #1
   1385e:	5499      	strb	r1, [r3, r2]
   13860:	e003      	b.n	1386a <bme680_get_sensor_data+0x62>
			else
				dev->new_fields = 0;
   13862:	683b      	ldr	r3, [r7, #0]
   13864:	2245      	movs	r2, #69	; 0x45
   13866:	2100      	movs	r1, #0
   13868:	5499      	strb	r1, [r3, r2]
		}
	}

	return rslt;
   1386a:	230f      	movs	r3, #15
   1386c:	18fb      	adds	r3, r7, r3
   1386e:	781b      	ldrb	r3, [r3, #0]
   13870:	b25b      	sxtb	r3, r3
}
   13872:	0018      	movs	r0, r3
   13874:	46bd      	mov	sp, r7
   13876:	b005      	add	sp, #20
   13878:	bd90      	pop	{r4, r7, pc}
   1387a:	46c0      	nop			; (mov r8, r8)
   1387c:	00014763 	.word	0x00014763
   13880:	00014339 	.word	0x00014339

00013884 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
   13884:	b5b0      	push	{r4, r5, r7, lr}
   13886:	b08e      	sub	sp, #56	; 0x38
   13888:	af00      	add	r7, sp, #0
   1388a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   1388c:	230c      	movs	r3, #12
   1388e:	18fb      	adds	r3, r7, r3
   13890:	0018      	movs	r0, r3
   13892:	2329      	movs	r3, #41	; 0x29
   13894:	001a      	movs	r2, r3
   13896:	2100      	movs	r1, #0
   13898:	4bba      	ldr	r3, [pc, #744]	; (13b84 <get_calib_data+0x300>)
   1389a:	4798      	blx	r3
	uint8_t temp_var = 0; /* Temporary variable */
   1389c:	230b      	movs	r3, #11
   1389e:	18fb      	adds	r3, r7, r3
   138a0:	2200      	movs	r2, #0
   138a2:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   138a4:	2337      	movs	r3, #55	; 0x37
   138a6:	18fc      	adds	r4, r7, r3
   138a8:	687b      	ldr	r3, [r7, #4]
   138aa:	0018      	movs	r0, r3
   138ac:	4bb6      	ldr	r3, [pc, #728]	; (13b88 <get_calib_data+0x304>)
   138ae:	4798      	blx	r3
   138b0:	0003      	movs	r3, r0
   138b2:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   138b4:	2337      	movs	r3, #55	; 0x37
   138b6:	18fb      	adds	r3, r7, r3
   138b8:	781b      	ldrb	r3, [r3, #0]
   138ba:	b25b      	sxtb	r3, r3
   138bc:	2b00      	cmp	r3, #0
   138be:	d000      	beq.n	138c2 <get_calib_data+0x3e>
   138c0:	e157      	b.n	13b72 <get_calib_data+0x2ee>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   138c2:	2337      	movs	r3, #55	; 0x37
   138c4:	18fc      	adds	r4, r7, r3
   138c6:	687b      	ldr	r3, [r7, #4]
   138c8:	220c      	movs	r2, #12
   138ca:	18b9      	adds	r1, r7, r2
   138cc:	2219      	movs	r2, #25
   138ce:	2089      	movs	r0, #137	; 0x89
   138d0:	4dae      	ldr	r5, [pc, #696]	; (13b8c <get_calib_data+0x308>)
   138d2:	47a8      	blx	r5
   138d4:	0003      	movs	r3, r0
   138d6:	7023      	strb	r3, [r4, #0]
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
   138d8:	2337      	movs	r3, #55	; 0x37
   138da:	18fb      	adds	r3, r7, r3
   138dc:	781b      	ldrb	r3, [r3, #0]
   138de:	b25b      	sxtb	r3, r3
   138e0:	2b00      	cmp	r3, #0
   138e2:	d10d      	bne.n	13900 <get_calib_data+0x7c>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   138e4:	2337      	movs	r3, #55	; 0x37
   138e6:	18fc      	adds	r4, r7, r3
   138e8:	687a      	ldr	r2, [r7, #4]
   138ea:	230c      	movs	r3, #12
   138ec:	18fb      	adds	r3, r7, r3
   138ee:	3319      	adds	r3, #25
   138f0:	0019      	movs	r1, r3
   138f2:	0013      	movs	r3, r2
   138f4:	2210      	movs	r2, #16
   138f6:	20e1      	movs	r0, #225	; 0xe1
   138f8:	4da4      	ldr	r5, [pc, #656]	; (13b8c <get_calib_data+0x308>)
   138fa:	47a8      	blx	r5
   138fc:	0003      	movs	r3, r0
   138fe:	7023      	strb	r3, [r4, #0]
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   13900:	230c      	movs	r3, #12
   13902:	18fb      	adds	r3, r7, r3
   13904:	2222      	movs	r2, #34	; 0x22
   13906:	5c9b      	ldrb	r3, [r3, r2]
   13908:	021b      	lsls	r3, r3, #8
   1390a:	b21a      	sxth	r2, r3
   1390c:	230c      	movs	r3, #12
   1390e:	18fb      	adds	r3, r7, r3
   13910:	2121      	movs	r1, #33	; 0x21
   13912:	5c5b      	ldrb	r3, [r3, r1]
   13914:	b21b      	sxth	r3, r3
   13916:	4313      	orrs	r3, r2
   13918:	b21b      	sxth	r3, r3
   1391a:	b29a      	uxth	r2, r3
   1391c:	687b      	ldr	r3, [r7, #4]
   1391e:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   13920:	230c      	movs	r3, #12
   13922:	18fb      	adds	r3, r7, r3
   13924:	789b      	ldrb	r3, [r3, #2]
   13926:	021b      	lsls	r3, r3, #8
   13928:	b21a      	sxth	r2, r3
   1392a:	230c      	movs	r3, #12
   1392c:	18fb      	adds	r3, r7, r3
   1392e:	785b      	ldrb	r3, [r3, #1]
   13930:	b21b      	sxth	r3, r3
   13932:	4313      	orrs	r3, r2
   13934:	b21a      	sxth	r2, r3
   13936:	687b      	ldr	r3, [r7, #4]
   13938:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   1393a:	230c      	movs	r3, #12
   1393c:	18fb      	adds	r3, r7, r3
   1393e:	78db      	ldrb	r3, [r3, #3]
   13940:	b25a      	sxtb	r2, r3
   13942:	687b      	ldr	r3, [r7, #4]
   13944:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   13946:	230c      	movs	r3, #12
   13948:	18fb      	adds	r3, r7, r3
   1394a:	799b      	ldrb	r3, [r3, #6]
   1394c:	021b      	lsls	r3, r3, #8
   1394e:	b21a      	sxth	r2, r3
   13950:	230c      	movs	r3, #12
   13952:	18fb      	adds	r3, r7, r3
   13954:	795b      	ldrb	r3, [r3, #5]
   13956:	b21b      	sxth	r3, r3
   13958:	4313      	orrs	r3, r2
   1395a:	b21b      	sxth	r3, r3
   1395c:	b29a      	uxth	r2, r3
   1395e:	687b      	ldr	r3, [r7, #4]
   13960:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   13962:	230c      	movs	r3, #12
   13964:	18fb      	adds	r3, r7, r3
   13966:	7a1b      	ldrb	r3, [r3, #8]
   13968:	021b      	lsls	r3, r3, #8
   1396a:	b21a      	sxth	r2, r3
   1396c:	230c      	movs	r3, #12
   1396e:	18fb      	adds	r3, r7, r3
   13970:	79db      	ldrb	r3, [r3, #7]
   13972:	b21b      	sxth	r3, r3
   13974:	4313      	orrs	r3, r2
   13976:	b21a      	sxth	r2, r3
   13978:	687b      	ldr	r3, [r7, #4]
   1397a:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   1397c:	230c      	movs	r3, #12
   1397e:	18fb      	adds	r3, r7, r3
   13980:	7a5b      	ldrb	r3, [r3, #9]
   13982:	b259      	sxtb	r1, r3
   13984:	687b      	ldr	r3, [r7, #4]
   13986:	2220      	movs	r2, #32
   13988:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   1398a:	230c      	movs	r3, #12
   1398c:	18fb      	adds	r3, r7, r3
   1398e:	7b1b      	ldrb	r3, [r3, #12]
   13990:	021b      	lsls	r3, r3, #8
   13992:	b21a      	sxth	r2, r3
   13994:	230c      	movs	r3, #12
   13996:	18fb      	adds	r3, r7, r3
   13998:	7adb      	ldrb	r3, [r3, #11]
   1399a:	b21b      	sxth	r3, r3
   1399c:	4313      	orrs	r3, r2
   1399e:	b21a      	sxth	r2, r3
   139a0:	687b      	ldr	r3, [r7, #4]
   139a2:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   139a4:	230c      	movs	r3, #12
   139a6:	18fb      	adds	r3, r7, r3
   139a8:	7b9b      	ldrb	r3, [r3, #14]
   139aa:	021b      	lsls	r3, r3, #8
   139ac:	b21a      	sxth	r2, r3
   139ae:	230c      	movs	r3, #12
   139b0:	18fb      	adds	r3, r7, r3
   139b2:	7b5b      	ldrb	r3, [r3, #13]
   139b4:	b21b      	sxth	r3, r3
   139b6:	4313      	orrs	r3, r2
   139b8:	b21a      	sxth	r2, r3
   139ba:	687b      	ldr	r3, [r7, #4]
   139bc:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   139be:	230c      	movs	r3, #12
   139c0:	18fb      	adds	r3, r7, r3
   139c2:	7c1b      	ldrb	r3, [r3, #16]
   139c4:	b259      	sxtb	r1, r3
   139c6:	687b      	ldr	r3, [r7, #4]
   139c8:	2226      	movs	r2, #38	; 0x26
   139ca:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   139cc:	230c      	movs	r3, #12
   139ce:	18fb      	adds	r3, r7, r3
   139d0:	7bdb      	ldrb	r3, [r3, #15]
   139d2:	b259      	sxtb	r1, r3
   139d4:	687b      	ldr	r3, [r7, #4]
   139d6:	2227      	movs	r2, #39	; 0x27
   139d8:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   139da:	230c      	movs	r3, #12
   139dc:	18fb      	adds	r3, r7, r3
   139de:	7d1b      	ldrb	r3, [r3, #20]
   139e0:	021b      	lsls	r3, r3, #8
   139e2:	b21a      	sxth	r2, r3
   139e4:	230c      	movs	r3, #12
   139e6:	18fb      	adds	r3, r7, r3
   139e8:	7cdb      	ldrb	r3, [r3, #19]
   139ea:	b21b      	sxth	r3, r3
   139ec:	4313      	orrs	r3, r2
   139ee:	b21a      	sxth	r2, r3
   139f0:	687b      	ldr	r3, [r7, #4]
   139f2:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   139f4:	230c      	movs	r3, #12
   139f6:	18fb      	adds	r3, r7, r3
   139f8:	7d9b      	ldrb	r3, [r3, #22]
   139fa:	021b      	lsls	r3, r3, #8
   139fc:	b21a      	sxth	r2, r3
   139fe:	230c      	movs	r3, #12
   13a00:	18fb      	adds	r3, r7, r3
   13a02:	7d5b      	ldrb	r3, [r3, #21]
   13a04:	b21b      	sxth	r3, r3
   13a06:	4313      	orrs	r3, r2
   13a08:	b21a      	sxth	r2, r3
   13a0a:	687b      	ldr	r3, [r7, #4]
   13a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   13a0e:	230c      	movs	r3, #12
   13a10:	18fb      	adds	r3, r7, r3
   13a12:	7dd9      	ldrb	r1, [r3, #23]
   13a14:	687b      	ldr	r3, [r7, #4]
   13a16:	222c      	movs	r2, #44	; 0x2c
   13a18:	5499      	strb	r1, [r3, r2]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13a1a:	230c      	movs	r3, #12
   13a1c:	18fb      	adds	r3, r7, r3
   13a1e:	7edb      	ldrb	r3, [r3, #27]
   13a20:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   13a22:	b21a      	sxth	r2, r3
   13a24:	230c      	movs	r3, #12
   13a26:	18fb      	adds	r3, r7, r3
   13a28:	7e9b      	ldrb	r3, [r3, #26]
   13a2a:	b21b      	sxth	r3, r3
   13a2c:	210f      	movs	r1, #15
   13a2e:	400b      	ands	r3, r1
   13a30:	b21b      	sxth	r3, r3
   13a32:	4313      	orrs	r3, r2
   13a34:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13a36:	b29a      	uxth	r2, r3
   13a38:	687b      	ldr	r3, [r7, #4]
   13a3a:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13a3c:	230c      	movs	r3, #12
   13a3e:	18fb      	adds	r3, r7, r3
   13a40:	7e5b      	ldrb	r3, [r3, #25]
   13a42:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
   13a44:	b21a      	sxth	r2, r3
   13a46:	230c      	movs	r3, #12
   13a48:	18fb      	adds	r3, r7, r3
   13a4a:	7e9b      	ldrb	r3, [r3, #26]
   13a4c:	091b      	lsrs	r3, r3, #4
   13a4e:	b2db      	uxtb	r3, r3
   13a50:	b21b      	sxth	r3, r3
   13a52:	4313      	orrs	r3, r2
   13a54:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13a56:	b29a      	uxth	r2, r3
   13a58:	687b      	ldr	r3, [r7, #4]
   13a5a:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   13a5c:	230c      	movs	r3, #12
   13a5e:	18fb      	adds	r3, r7, r3
   13a60:	7f1b      	ldrb	r3, [r3, #28]
   13a62:	b25a      	sxtb	r2, r3
   13a64:	687b      	ldr	r3, [r7, #4]
   13a66:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
   13a68:	230c      	movs	r3, #12
   13a6a:	18fb      	adds	r3, r7, r3
   13a6c:	7f5b      	ldrb	r3, [r3, #29]
   13a6e:	b25a      	sxtb	r2, r3
   13a70:	687b      	ldr	r3, [r7, #4]
   13a72:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
   13a74:	230c      	movs	r3, #12
   13a76:	18fb      	adds	r3, r7, r3
   13a78:	7f9b      	ldrb	r3, [r3, #30]
   13a7a:	b25a      	sxtb	r2, r3
   13a7c:	687b      	ldr	r3, [r7, #4]
   13a7e:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
   13a80:	230c      	movs	r3, #12
   13a82:	18fb      	adds	r3, r7, r3
   13a84:	7fda      	ldrb	r2, [r3, #31]
   13a86:	687b      	ldr	r3, [r7, #4]
   13a88:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   13a8a:	230c      	movs	r3, #12
   13a8c:	18fb      	adds	r3, r7, r3
   13a8e:	2220      	movs	r2, #32
   13a90:	5c9b      	ldrb	r3, [r3, r2]
   13a92:	b25a      	sxtb	r2, r3
   13a94:	687b      	ldr	r3, [r7, #4]
   13a96:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   13a98:	230c      	movs	r3, #12
   13a9a:	18fb      	adds	r3, r7, r3
   13a9c:	2225      	movs	r2, #37	; 0x25
   13a9e:	5c9b      	ldrb	r3, [r3, r2]
   13aa0:	b25a      	sxtb	r2, r3
   13aa2:	687b      	ldr	r3, [r7, #4]
   13aa4:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   13aa6:	230c      	movs	r3, #12
   13aa8:	18fb      	adds	r3, r7, r3
   13aaa:	2224      	movs	r2, #36	; 0x24
   13aac:	5c9b      	ldrb	r3, [r3, r2]
   13aae:	021b      	lsls	r3, r3, #8
   13ab0:	b21a      	sxth	r2, r3
   13ab2:	230c      	movs	r3, #12
   13ab4:	18fb      	adds	r3, r7, r3
   13ab6:	2123      	movs	r1, #35	; 0x23
   13ab8:	5c5b      	ldrb	r3, [r3, r1]
   13aba:	b21b      	sxth	r3, r3
   13abc:	4313      	orrs	r3, r2
   13abe:	b21a      	sxth	r2, r3
   13ac0:	687b      	ldr	r3, [r7, #4]
   13ac2:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   13ac4:	230c      	movs	r3, #12
   13ac6:	18fb      	adds	r3, r7, r3
   13ac8:	2226      	movs	r2, #38	; 0x26
   13aca:	5c9b      	ldrb	r3, [r3, r2]
   13acc:	b25a      	sxtb	r2, r3
   13ace:	687b      	ldr	r3, [r7, #4]
   13ad0:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
   13ad2:	2337      	movs	r3, #55	; 0x37
   13ad4:	18fb      	adds	r3, r7, r3
   13ad6:	781b      	ldrb	r3, [r3, #0]
   13ad8:	b25b      	sxtb	r3, r3
   13ada:	2b00      	cmp	r3, #0
   13adc:	d140      	bne.n	13b60 <get_calib_data+0x2dc>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   13ade:	2337      	movs	r3, #55	; 0x37
   13ae0:	18fc      	adds	r4, r7, r3
   13ae2:	687b      	ldr	r3, [r7, #4]
   13ae4:	220b      	movs	r2, #11
   13ae6:	18b9      	adds	r1, r7, r2
   13ae8:	2201      	movs	r2, #1
   13aea:	2002      	movs	r0, #2
   13aec:	4d27      	ldr	r5, [pc, #156]	; (13b8c <get_calib_data+0x308>)
   13aee:	47a8      	blx	r5
   13af0:	0003      	movs	r3, r0
   13af2:	7023      	strb	r3, [r4, #0]

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   13af4:	230b      	movs	r3, #11
   13af6:	18fb      	adds	r3, r7, r3
   13af8:	781b      	ldrb	r3, [r3, #0]
   13afa:	001a      	movs	r2, r3
   13afc:	2330      	movs	r3, #48	; 0x30
   13afe:	4013      	ands	r3, r2
   13b00:	d500      	bpl.n	13b04 <get_calib_data+0x280>
   13b02:	330f      	adds	r3, #15
   13b04:	111b      	asrs	r3, r3, #4
   13b06:	b2d9      	uxtb	r1, r3
   13b08:	687b      	ldr	r3, [r7, #4]
   13b0a:	2234      	movs	r2, #52	; 0x34
   13b0c:	5499      	strb	r1, [r3, r2]
			if (rslt == BME680_OK) {
   13b0e:	2337      	movs	r3, #55	; 0x37
   13b10:	18fb      	adds	r3, r7, r3
   13b12:	781b      	ldrb	r3, [r3, #0]
   13b14:	b25b      	sxtb	r3, r3
   13b16:	2b00      	cmp	r3, #0
   13b18:	d122      	bne.n	13b60 <get_calib_data+0x2dc>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   13b1a:	2337      	movs	r3, #55	; 0x37
   13b1c:	18fc      	adds	r4, r7, r3
   13b1e:	687b      	ldr	r3, [r7, #4]
   13b20:	220b      	movs	r2, #11
   13b22:	18b9      	adds	r1, r7, r2
   13b24:	2201      	movs	r2, #1
   13b26:	2000      	movs	r0, #0
   13b28:	4d18      	ldr	r5, [pc, #96]	; (13b8c <get_calib_data+0x308>)
   13b2a:	47a8      	blx	r5
   13b2c:	0003      	movs	r3, r0
   13b2e:	7023      	strb	r3, [r4, #0]

				dev->calib.res_heat_val = (int8_t) temp_var;
   13b30:	230b      	movs	r3, #11
   13b32:	18fb      	adds	r3, r7, r3
   13b34:	781b      	ldrb	r3, [r3, #0]
   13b36:	b259      	sxtb	r1, r3
   13b38:	687b      	ldr	r3, [r7, #4]
   13b3a:	2235      	movs	r2, #53	; 0x35
   13b3c:	5499      	strb	r1, [r3, r2]
				if (rslt == BME680_OK)
   13b3e:	2337      	movs	r3, #55	; 0x37
   13b40:	18fb      	adds	r3, r7, r3
   13b42:	781b      	ldrb	r3, [r3, #0]
   13b44:	b25b      	sxtb	r3, r3
   13b46:	2b00      	cmp	r3, #0
   13b48:	d10a      	bne.n	13b60 <get_calib_data+0x2dc>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   13b4a:	2337      	movs	r3, #55	; 0x37
   13b4c:	18fc      	adds	r4, r7, r3
   13b4e:	687b      	ldr	r3, [r7, #4]
   13b50:	220b      	movs	r2, #11
   13b52:	18b9      	adds	r1, r7, r2
   13b54:	2201      	movs	r2, #1
   13b56:	2004      	movs	r0, #4
   13b58:	4d0c      	ldr	r5, [pc, #48]	; (13b8c <get_calib_data+0x308>)
   13b5a:	47a8      	blx	r5
   13b5c:	0003      	movs	r3, r0
   13b5e:	7023      	strb	r3, [r4, #0]
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   13b60:	230b      	movs	r3, #11
   13b62:	18fb      	adds	r3, r7, r3
   13b64:	781b      	ldrb	r3, [r3, #0]
   13b66:	b25b      	sxtb	r3, r3
   13b68:	111b      	asrs	r3, r3, #4
   13b6a:	b259      	sxtb	r1, r3
   13b6c:	687b      	ldr	r3, [r7, #4]
   13b6e:	2236      	movs	r2, #54	; 0x36
   13b70:	5499      	strb	r1, [r3, r2]
	}

	return rslt;
   13b72:	2337      	movs	r3, #55	; 0x37
   13b74:	18fb      	adds	r3, r7, r3
   13b76:	781b      	ldrb	r3, [r3, #0]
   13b78:	b25b      	sxtb	r3, r3
}
   13b7a:	0018      	movs	r0, r3
   13b7c:	46bd      	mov	sp, r7
   13b7e:	b00e      	add	sp, #56	; 0x38
   13b80:	bdb0      	pop	{r4, r5, r7, pc}
   13b82:	46c0      	nop			; (mov r8, r8)
   13b84:	00037903 	.word	0x00037903
   13b88:	00014763 	.word	0x00014763
   13b8c:	00012ee5 	.word	0x00012ee5

00013b90 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
   13b90:	b5b0      	push	{r4, r5, r7, lr}
   13b92:	b084      	sub	sp, #16
   13b94:	af00      	add	r7, sp, #0
   13b96:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13b98:	230f      	movs	r3, #15
   13b9a:	18fc      	adds	r4, r7, r3
   13b9c:	687b      	ldr	r3, [r7, #4]
   13b9e:	0018      	movs	r0, r3
   13ba0:	4b2c      	ldr	r3, [pc, #176]	; (13c54 <set_gas_config+0xc4>)
   13ba2:	4798      	blx	r3
   13ba4:	0003      	movs	r3, r0
   13ba6:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13ba8:	230f      	movs	r3, #15
   13baa:	18fb      	adds	r3, r7, r3
   13bac:	781b      	ldrb	r3, [r3, #0]
   13bae:	b25b      	sxtb	r3, r3
   13bb0:	2b00      	cmp	r3, #0
   13bb2:	d147      	bne.n	13c44 <set_gas_config+0xb4>

		uint8_t reg_addr[2] = {0};
   13bb4:	230c      	movs	r3, #12
   13bb6:	18fb      	adds	r3, r7, r3
   13bb8:	2200      	movs	r2, #0
   13bba:	801a      	strh	r2, [r3, #0]
		uint8_t reg_data[2] = {0};
   13bbc:	2308      	movs	r3, #8
   13bbe:	18fb      	adds	r3, r7, r3
   13bc0:	2200      	movs	r2, #0
   13bc2:	801a      	strh	r2, [r3, #0]

		if (dev->power_mode == BME680_FORCED_MODE) {
   13bc4:	687b      	ldr	r3, [r7, #4]
   13bc6:	2244      	movs	r2, #68	; 0x44
   13bc8:	5c9b      	ldrb	r3, [r3, r2]
   13bca:	2b01      	cmp	r3, #1
   13bcc:	d124      	bne.n	13c18 <set_gas_config+0x88>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   13bce:	230c      	movs	r3, #12
   13bd0:	18fb      	adds	r3, r7, r3
   13bd2:	225a      	movs	r2, #90	; 0x5a
   13bd4:	701a      	strb	r2, [r3, #0]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   13bd6:	687b      	ldr	r3, [r7, #4]
   13bd8:	2240      	movs	r2, #64	; 0x40
   13bda:	5a9b      	ldrh	r3, [r3, r2]
   13bdc:	687a      	ldr	r2, [r7, #4]
   13bde:	0011      	movs	r1, r2
   13be0:	0018      	movs	r0, r3
   13be2:	4b1d      	ldr	r3, [pc, #116]	; (13c58 <set_gas_config+0xc8>)
   13be4:	4798      	blx	r3
   13be6:	0003      	movs	r3, r0
   13be8:	001a      	movs	r2, r3
   13bea:	2308      	movs	r3, #8
   13bec:	18fb      	adds	r3, r7, r3
   13bee:	701a      	strb	r2, [r3, #0]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
   13bf0:	230c      	movs	r3, #12
   13bf2:	18fb      	adds	r3, r7, r3
   13bf4:	2264      	movs	r2, #100	; 0x64
   13bf6:	705a      	strb	r2, [r3, #1]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   13bf8:	687b      	ldr	r3, [r7, #4]
   13bfa:	2242      	movs	r2, #66	; 0x42
   13bfc:	5a9b      	ldrh	r3, [r3, r2]
   13bfe:	0018      	movs	r0, r3
   13c00:	4b16      	ldr	r3, [pc, #88]	; (13c5c <set_gas_config+0xcc>)
   13c02:	4798      	blx	r3
   13c04:	0003      	movs	r3, r0
   13c06:	001a      	movs	r2, r3
   13c08:	2308      	movs	r3, #8
   13c0a:	18fb      	adds	r3, r7, r3
   13c0c:	705a      	strb	r2, [r3, #1]
			dev->gas_sett.nb_conv = 0;
   13c0e:	687b      	ldr	r3, [r7, #4]
   13c10:	223c      	movs	r2, #60	; 0x3c
   13c12:	2100      	movs	r1, #0
   13c14:	5499      	strb	r1, [r3, r2]
   13c16:	e003      	b.n	13c20 <set_gas_config+0x90>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
   13c18:	230f      	movs	r3, #15
   13c1a:	18fb      	adds	r3, r7, r3
   13c1c:	2201      	movs	r2, #1
   13c1e:	701a      	strb	r2, [r3, #0]
		}
		if (rslt == BME680_OK)
   13c20:	230f      	movs	r3, #15
   13c22:	18fb      	adds	r3, r7, r3
   13c24:	781b      	ldrb	r3, [r3, #0]
   13c26:	b25b      	sxtb	r3, r3
   13c28:	2b00      	cmp	r3, #0
   13c2a:	d10b      	bne.n	13c44 <set_gas_config+0xb4>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   13c2c:	230f      	movs	r3, #15
   13c2e:	18fc      	adds	r4, r7, r3
   13c30:	687b      	ldr	r3, [r7, #4]
   13c32:	2208      	movs	r2, #8
   13c34:	18b9      	adds	r1, r7, r2
   13c36:	220c      	movs	r2, #12
   13c38:	18b8      	adds	r0, r7, r2
   13c3a:	2202      	movs	r2, #2
   13c3c:	4d08      	ldr	r5, [pc, #32]	; (13c60 <set_gas_config+0xd0>)
   13c3e:	47a8      	blx	r5
   13c40:	0003      	movs	r3, r0
   13c42:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
   13c44:	230f      	movs	r3, #15
   13c46:	18fb      	adds	r3, r7, r3
   13c48:	781b      	ldrb	r3, [r3, #0]
   13c4a:	b25b      	sxtb	r3, r3
}
   13c4c:	0018      	movs	r0, r3
   13c4e:	46bd      	mov	sp, r7
   13c50:	b004      	add	sp, #16
   13c52:	bdb0      	pop	{r4, r5, r7, pc}
   13c54:	00014763 	.word	0x00014763
   13c58:	000141b9 	.word	0x000141b9
   13c5c:	000142c5 	.word	0x000142c5
   13c60:	00012fa9 	.word	0x00012fa9

00013c64 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
   13c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c66:	b091      	sub	sp, #68	; 0x44
   13c68:	af00      	add	r7, sp, #0
   13c6a:	61f8      	str	r0, [r7, #28]
   13c6c:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   13c6e:	69fb      	ldr	r3, [r7, #28]
   13c70:	10da      	asrs	r2, r3, #3
   13c72:	69bb      	ldr	r3, [r7, #24]
   13c74:	8adb      	ldrh	r3, [r3, #22]
   13c76:	005b      	lsls	r3, r3, #1
   13c78:	1ad3      	subs	r3, r2, r3
   13c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   13c7c:	17db      	asrs	r3, r3, #31
   13c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   13c80:	69bb      	ldr	r3, [r7, #24]
   13c82:	2218      	movs	r2, #24
   13c84:	5e9b      	ldrsh	r3, [r3, r2]
   13c86:	60bb      	str	r3, [r7, #8]
   13c88:	17db      	asrs	r3, r3, #31
   13c8a:	60fb      	str	r3, [r7, #12]
   13c8c:	4e30      	ldr	r6, [pc, #192]	; (13d50 <calc_temperature+0xec>)
   13c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13c92:	68b8      	ldr	r0, [r7, #8]
   13c94:	68f9      	ldr	r1, [r7, #12]
   13c96:	47b0      	blx	r6
   13c98:	0002      	movs	r2, r0
   13c9a:	000b      	movs	r3, r1
   13c9c:	0559      	lsls	r1, r3, #21
   13c9e:	0ad0      	lsrs	r0, r2, #11
   13ca0:	4301      	orrs	r1, r0
   13ca2:	6339      	str	r1, [r7, #48]	; 0x30
   13ca4:	12db      	asrs	r3, r3, #11
   13ca6:	637b      	str	r3, [r7, #52]	; 0x34
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   13ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13caa:	07db      	lsls	r3, r3, #31
   13cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13cae:	0854      	lsrs	r4, r2, #1
   13cb0:	431c      	orrs	r4, r3
   13cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13cb4:	105d      	asrs	r5, r3, #1
   13cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13cb8:	07db      	lsls	r3, r3, #31
   13cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13cbc:	0852      	lsrs	r2, r2, #1
   13cbe:	613a      	str	r2, [r7, #16]
   13cc0:	693a      	ldr	r2, [r7, #16]
   13cc2:	431a      	orrs	r2, r3
   13cc4:	613a      	str	r2, [r7, #16]
   13cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13cc8:	105b      	asrs	r3, r3, #1
   13cca:	617b      	str	r3, [r7, #20]
   13ccc:	4e20      	ldr	r6, [pc, #128]	; (13d50 <calc_temperature+0xec>)
   13cce:	693a      	ldr	r2, [r7, #16]
   13cd0:	697b      	ldr	r3, [r7, #20]
   13cd2:	0020      	movs	r0, r4
   13cd4:	0029      	movs	r1, r5
   13cd6:	47b0      	blx	r6
   13cd8:	0003      	movs	r3, r0
   13cda:	000c      	movs	r4, r1
   13cdc:	0522      	lsls	r2, r4, #20
   13cde:	0b19      	lsrs	r1, r3, #12
   13ce0:	430a      	orrs	r2, r1
   13ce2:	62ba      	str	r2, [r7, #40]	; 0x28
   13ce4:	1323      	asrs	r3, r4, #12
   13ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   13ce8:	69bb      	ldr	r3, [r7, #24]
   13cea:	7e9b      	ldrb	r3, [r3, #26]
   13cec:	b25b      	sxtb	r3, r3
   13cee:	011b      	lsls	r3, r3, #4
   13cf0:	603b      	str	r3, [r7, #0]
   13cf2:	17db      	asrs	r3, r3, #31
   13cf4:	607b      	str	r3, [r7, #4]
   13cf6:	4c16      	ldr	r4, [pc, #88]	; (13d50 <calc_temperature+0xec>)
   13cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13cfc:	6838      	ldr	r0, [r7, #0]
   13cfe:	6879      	ldr	r1, [r7, #4]
   13d00:	47a0      	blx	r4
   13d02:	0003      	movs	r3, r0
   13d04:	000c      	movs	r4, r1
   13d06:	04a2      	lsls	r2, r4, #18
   13d08:	0b99      	lsrs	r1, r3, #14
   13d0a:	430a      	orrs	r2, r1
   13d0c:	62ba      	str	r2, [r7, #40]	; 0x28
   13d0e:	13a3      	asrs	r3, r4, #14
   13d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	dev->calib.t_fine = (int32_t) (var2 + var3);
   13d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   13d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13d16:	18d3      	adds	r3, r2, r3
   13d18:	001a      	movs	r2, r3
   13d1a:	69bb      	ldr	r3, [r7, #24]
   13d1c:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
   13d1e:	69bb      	ldr	r3, [r7, #24]
   13d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13d22:	0013      	movs	r3, r2
   13d24:	009b      	lsls	r3, r3, #2
   13d26:	189b      	adds	r3, r3, r2
   13d28:	3380      	adds	r3, #128	; 0x80
   13d2a:	121a      	asrs	r2, r3, #8
   13d2c:	230e      	movs	r3, #14
   13d2e:	2118      	movs	r1, #24
   13d30:	468c      	mov	ip, r1
   13d32:	44bc      	add	ip, r7
   13d34:	4463      	add	r3, ip
   13d36:	801a      	strh	r2, [r3, #0]

	return calc_temp;
   13d38:	230e      	movs	r3, #14
   13d3a:	2218      	movs	r2, #24
   13d3c:	4694      	mov	ip, r2
   13d3e:	44bc      	add	ip, r7
   13d40:	4463      	add	r3, ip
   13d42:	2200      	movs	r2, #0
   13d44:	5e9b      	ldrsh	r3, [r3, r2]
}
   13d46:	0018      	movs	r0, r3
   13d48:	46bd      	mov	sp, r7
   13d4a:	b011      	add	sp, #68	; 0x44
   13d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d4e:	46c0      	nop			; (mov r8, r8)
   13d50:	0003577d 	.word	0x0003577d

00013d54 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
   13d54:	b580      	push	{r7, lr}
   13d56:	b086      	sub	sp, #24
   13d58:	af00      	add	r7, sp, #0
   13d5a:	6078      	str	r0, [r7, #4]
   13d5c:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   13d5e:	683b      	ldr	r3, [r7, #0]
   13d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13d62:	105b      	asrs	r3, r3, #1
   13d64:	4a4d      	ldr	r2, [pc, #308]	; (13e9c <calc_pressure+0x148>)
   13d66:	4694      	mov	ip, r2
   13d68:	4463      	add	r3, ip
   13d6a:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   13d6c:	693b      	ldr	r3, [r7, #16]
   13d6e:	109b      	asrs	r3, r3, #2
   13d70:	693a      	ldr	r2, [r7, #16]
   13d72:	1092      	asrs	r2, r2, #2
   13d74:	4353      	muls	r3, r2
   13d76:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
   13d78:	683a      	ldr	r2, [r7, #0]
   13d7a:	2126      	movs	r1, #38	; 0x26
   13d7c:	5652      	ldrsb	r2, [r2, r1]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   13d7e:	4353      	muls	r3, r2
   13d80:	109b      	asrs	r3, r3, #2
   13d82:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   13d84:	683b      	ldr	r3, [r7, #0]
   13d86:	2224      	movs	r2, #36	; 0x24
   13d88:	5e9b      	ldrsh	r3, [r3, r2]
   13d8a:	001a      	movs	r2, r3
   13d8c:	693b      	ldr	r3, [r7, #16]
   13d8e:	4353      	muls	r3, r2
   13d90:	005b      	lsls	r3, r3, #1
   13d92:	68fa      	ldr	r2, [r7, #12]
   13d94:	18d3      	adds	r3, r2, r3
   13d96:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   13d98:	68fb      	ldr	r3, [r7, #12]
   13d9a:	109a      	asrs	r2, r3, #2
   13d9c:	683b      	ldr	r3, [r7, #0]
   13d9e:	2122      	movs	r1, #34	; 0x22
   13da0:	5e5b      	ldrsh	r3, [r3, r1]
   13da2:	041b      	lsls	r3, r3, #16
   13da4:	18d3      	adds	r3, r2, r3
   13da6:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13da8:	693b      	ldr	r3, [r7, #16]
   13daa:	109b      	asrs	r3, r3, #2
   13dac:	693a      	ldr	r2, [r7, #16]
   13dae:	1092      	asrs	r2, r2, #2
   13db0:	4353      	muls	r3, r2
   13db2:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   13db4:	683a      	ldr	r2, [r7, #0]
   13db6:	2120      	movs	r1, #32
   13db8:	5652      	ldrsb	r2, [r2, r1]
   13dba:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13dbc:	4353      	muls	r3, r2
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   13dbe:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   13dc0:	683b      	ldr	r3, [r7, #0]
   13dc2:	211e      	movs	r1, #30
   13dc4:	5e5b      	ldrsh	r3, [r3, r1]
   13dc6:	0019      	movs	r1, r3
   13dc8:	693b      	ldr	r3, [r7, #16]
   13dca:	434b      	muls	r3, r1
   13dcc:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13dce:	18d3      	adds	r3, r2, r3
   13dd0:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
   13dd2:	693b      	ldr	r3, [r7, #16]
   13dd4:	149b      	asrs	r3, r3, #18
   13dd6:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   13dd8:	693b      	ldr	r3, [r7, #16]
   13dda:	2280      	movs	r2, #128	; 0x80
   13ddc:	0212      	lsls	r2, r2, #8
   13dde:	4694      	mov	ip, r2
   13de0:	4463      	add	r3, ip
   13de2:	683a      	ldr	r2, [r7, #0]
   13de4:	8b92      	ldrh	r2, [r2, #28]
   13de6:	4353      	muls	r3, r2
   13de8:	13db      	asrs	r3, r3, #15
   13dea:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
   13dec:	687b      	ldr	r3, [r7, #4]
   13dee:	2280      	movs	r2, #128	; 0x80
   13df0:	0352      	lsls	r2, r2, #13
   13df2:	1ad3      	subs	r3, r2, r3
   13df4:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
   13df6:	68fb      	ldr	r3, [r7, #12]
   13df8:	131b      	asrs	r3, r3, #12
   13dfa:	697a      	ldr	r2, [r7, #20]
   13dfc:	1ad3      	subs	r3, r2, r3
   13dfe:	001a      	movs	r2, r3
   13e00:	4b27      	ldr	r3, [pc, #156]	; (13ea0 <calc_pressure+0x14c>)
   13e02:	4353      	muls	r3, r2
   13e04:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
   13e06:	697b      	ldr	r3, [r7, #20]
   13e08:	4a26      	ldr	r2, [pc, #152]	; (13ea4 <calc_pressure+0x150>)
   13e0a:	4293      	cmp	r3, r2
   13e0c:	dd07      	ble.n	13e1e <calc_pressure+0xca>
		pressure_comp = ((pressure_comp / var1) << 1);
   13e0e:	4b26      	ldr	r3, [pc, #152]	; (13ea8 <calc_pressure+0x154>)
   13e10:	6939      	ldr	r1, [r7, #16]
   13e12:	6978      	ldr	r0, [r7, #20]
   13e14:	4798      	blx	r3
   13e16:	0003      	movs	r3, r0
   13e18:	005b      	lsls	r3, r3, #1
   13e1a:	617b      	str	r3, [r7, #20]
   13e1c:	e007      	b.n	13e2e <calc_pressure+0xda>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
   13e1e:	697b      	ldr	r3, [r7, #20]
   13e20:	005a      	lsls	r2, r3, #1
   13e22:	4b21      	ldr	r3, [pc, #132]	; (13ea8 <calc_pressure+0x154>)
   13e24:	6939      	ldr	r1, [r7, #16]
   13e26:	0010      	movs	r0, r2
   13e28:	4798      	blx	r3
   13e2a:	0003      	movs	r3, r0
   13e2c:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13e2e:	683b      	ldr	r3, [r7, #0]
   13e30:	222a      	movs	r2, #42	; 0x2a
   13e32:	5e9b      	ldrsh	r3, [r3, r2]
   13e34:	0019      	movs	r1, r3
   13e36:	697b      	ldr	r3, [r7, #20]
   13e38:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
   13e3a:	697a      	ldr	r2, [r7, #20]
   13e3c:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13e3e:	4353      	muls	r3, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
   13e40:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13e42:	434b      	muls	r3, r1
   13e44:	131b      	asrs	r3, r3, #12
   13e46:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
   13e48:	697b      	ldr	r3, [r7, #20]
   13e4a:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
   13e4c:	683a      	ldr	r2, [r7, #0]
   13e4e:	2128      	movs	r1, #40	; 0x28
   13e50:	5e52      	ldrsh	r2, [r2, r1]
	var2 = ((int32_t)(pressure_comp >> 2) *
   13e52:	4353      	muls	r3, r2
   13e54:	135b      	asrs	r3, r3, #13
   13e56:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13e58:	697b      	ldr	r3, [r7, #20]
   13e5a:	121b      	asrs	r3, r3, #8
   13e5c:	697a      	ldr	r2, [r7, #20]
   13e5e:	1212      	asrs	r2, r2, #8
   13e60:	4353      	muls	r3, r2
		(int32_t)(pressure_comp >> 8) *
   13e62:	697a      	ldr	r2, [r7, #20]
   13e64:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13e66:	4353      	muls	r3, r2
		(int32_t)dev->calib.par_p10) >> 17;
   13e68:	683a      	ldr	r2, [r7, #0]
   13e6a:	212c      	movs	r1, #44	; 0x2c
   13e6c:	5c52      	ldrb	r2, [r2, r1]
		(int32_t)(pressure_comp >> 8) *
   13e6e:	4353      	muls	r3, r2
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13e70:	145b      	asrs	r3, r3, #17
   13e72:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13e74:	693a      	ldr	r2, [r7, #16]
   13e76:	68fb      	ldr	r3, [r7, #12]
   13e78:	18d2      	adds	r2, r2, r3
   13e7a:	68bb      	ldr	r3, [r7, #8]
   13e7c:	18d2      	adds	r2, r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   13e7e:	683b      	ldr	r3, [r7, #0]
   13e80:	2127      	movs	r1, #39	; 0x27
   13e82:	565b      	ldrsb	r3, [r3, r1]
   13e84:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13e86:	18d3      	adds	r3, r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   13e88:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13e8a:	697a      	ldr	r2, [r7, #20]
   13e8c:	18d3      	adds	r3, r2, r3
   13e8e:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
   13e90:	697b      	ldr	r3, [r7, #20]

}
   13e92:	0018      	movs	r0, r3
   13e94:	46bd      	mov	sp, r7
   13e96:	b006      	add	sp, #24
   13e98:	bd80      	pop	{r7, pc}
   13e9a:	46c0      	nop			; (mov r8, r8)
   13e9c:	ffff0600 	.word	0xffff0600
   13ea0:	00000c35 	.word	0x00000c35
   13ea4:	3fffffff 	.word	0x3fffffff
   13ea8:	0003555d 	.word	0x0003555d

00013eac <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
   13eac:	b5b0      	push	{r4, r5, r7, lr}
   13eae:	b08a      	sub	sp, #40	; 0x28
   13eb0:	af00      	add	r7, sp, #0
   13eb2:	0002      	movs	r2, r0
   13eb4:	6039      	str	r1, [r7, #0]
   13eb6:	1dbb      	adds	r3, r7, #6
   13eb8:	801a      	strh	r2, [r3, #0]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   13eba:	683b      	ldr	r3, [r7, #0]
   13ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13ebe:	0013      	movs	r3, r2
   13ec0:	009b      	lsls	r3, r3, #2
   13ec2:	189b      	adds	r3, r3, r2
   13ec4:	3380      	adds	r3, #128	; 0x80
   13ec6:	121b      	asrs	r3, r3, #8
   13ec8:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   13eca:	1dbb      	adds	r3, r7, #6
   13ecc:	881a      	ldrh	r2, [r3, #0]
   13ece:	683b      	ldr	r3, [r7, #0]
   13ed0:	891b      	ldrh	r3, [r3, #8]
   13ed2:	011b      	lsls	r3, r3, #4
   13ed4:	1ad4      	subs	r4, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
   13ed6:	683b      	ldr	r3, [r7, #0]
   13ed8:	7b1b      	ldrb	r3, [r3, #12]
   13eda:	b25b      	sxtb	r3, r3
   13edc:	001a      	movs	r2, r3
   13ede:	6a3b      	ldr	r3, [r7, #32]
   13ee0:	435a      	muls	r2, r3
   13ee2:	4b38      	ldr	r3, [pc, #224]	; (13fc4 <calc_humidity+0x118>)
   13ee4:	2164      	movs	r1, #100	; 0x64
   13ee6:	0010      	movs	r0, r2
   13ee8:	4798      	blx	r3
   13eea:	0003      	movs	r3, r0
   13eec:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   13eee:	1ae3      	subs	r3, r4, r3
   13ef0:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
   13ef2:	683b      	ldr	r3, [r7, #0]
   13ef4:	895b      	ldrh	r3, [r3, #10]
   13ef6:	001c      	movs	r4, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   13ef8:	683b      	ldr	r3, [r7, #0]
   13efa:	7b5b      	ldrb	r3, [r3, #13]
   13efc:	b25b      	sxtb	r3, r3
   13efe:	001a      	movs	r2, r3
   13f00:	6a3b      	ldr	r3, [r7, #32]
   13f02:	435a      	muls	r2, r3
   13f04:	4b2f      	ldr	r3, [pc, #188]	; (13fc4 <calc_humidity+0x118>)
   13f06:	2164      	movs	r1, #100	; 0x64
   13f08:	0010      	movs	r0, r2
   13f0a:	4798      	blx	r3
   13f0c:	0003      	movs	r3, r0
   13f0e:	001d      	movs	r5, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   13f10:	683b      	ldr	r3, [r7, #0]
   13f12:	7b9b      	ldrb	r3, [r3, #14]
   13f14:	b25b      	sxtb	r3, r3
   13f16:	001a      	movs	r2, r3
   13f18:	6a3b      	ldr	r3, [r7, #32]
   13f1a:	435a      	muls	r2, r3
   13f1c:	4b29      	ldr	r3, [pc, #164]	; (13fc4 <calc_humidity+0x118>)
   13f1e:	2164      	movs	r1, #100	; 0x64
   13f20:	0010      	movs	r0, r2
   13f22:	4798      	blx	r3
   13f24:	0003      	movs	r3, r0
   13f26:	001a      	movs	r2, r3
   13f28:	6a3b      	ldr	r3, [r7, #32]
   13f2a:	4353      	muls	r3, r2
   13f2c:	119a      	asrs	r2, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   13f2e:	4b25      	ldr	r3, [pc, #148]	; (13fc4 <calc_humidity+0x118>)
   13f30:	2164      	movs	r1, #100	; 0x64
   13f32:	0010      	movs	r0, r2
   13f34:	4798      	blx	r3
   13f36:	0003      	movs	r3, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   13f38:	18eb      	adds	r3, r5, r3
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   13f3a:	2280      	movs	r2, #128	; 0x80
   13f3c:	01d2      	lsls	r2, r2, #7
   13f3e:	4694      	mov	ip, r2
   13f40:	4463      	add	r3, ip
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   13f42:	4363      	muls	r3, r4
	var2 = ((int32_t) dev->calib.par_h2
   13f44:	129b      	asrs	r3, r3, #10
   13f46:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
   13f48:	69fb      	ldr	r3, [r7, #28]
   13f4a:	69ba      	ldr	r2, [r7, #24]
   13f4c:	4353      	muls	r3, r2
   13f4e:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
   13f50:	683b      	ldr	r3, [r7, #0]
   13f52:	7bdb      	ldrb	r3, [r3, #15]
   13f54:	01db      	lsls	r3, r3, #7
   13f56:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   13f58:	683b      	ldr	r3, [r7, #0]
   13f5a:	7c1b      	ldrb	r3, [r3, #16]
   13f5c:	b25b      	sxtb	r3, r3
   13f5e:	001a      	movs	r2, r3
   13f60:	6a3b      	ldr	r3, [r7, #32]
   13f62:	435a      	muls	r2, r3
   13f64:	4b17      	ldr	r3, [pc, #92]	; (13fc4 <calc_humidity+0x118>)
   13f66:	2164      	movs	r1, #100	; 0x64
   13f68:	0010      	movs	r0, r2
   13f6a:	4798      	blx	r3
   13f6c:	0003      	movs	r3, r0
   13f6e:	001a      	movs	r2, r3
   13f70:	693b      	ldr	r3, [r7, #16]
   13f72:	18d3      	adds	r3, r2, r3
   13f74:	111b      	asrs	r3, r3, #4
   13f76:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   13f78:	697b      	ldr	r3, [r7, #20]
   13f7a:	139b      	asrs	r3, r3, #14
   13f7c:	697a      	ldr	r2, [r7, #20]
   13f7e:	1392      	asrs	r2, r2, #14
   13f80:	4353      	muls	r3, r2
   13f82:	129b      	asrs	r3, r3, #10
   13f84:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
   13f86:	693b      	ldr	r3, [r7, #16]
   13f88:	68fa      	ldr	r2, [r7, #12]
   13f8a:	4353      	muls	r3, r2
   13f8c:	105b      	asrs	r3, r3, #1
   13f8e:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   13f90:	697a      	ldr	r2, [r7, #20]
   13f92:	68bb      	ldr	r3, [r7, #8]
   13f94:	18d3      	adds	r3, r2, r3
   13f96:	129b      	asrs	r3, r3, #10
   13f98:	22fa      	movs	r2, #250	; 0xfa
   13f9a:	0092      	lsls	r2, r2, #2
   13f9c:	4353      	muls	r3, r2
   13f9e:	131b      	asrs	r3, r3, #12
   13fa0:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
   13fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13fa4:	4a08      	ldr	r2, [pc, #32]	; (13fc8 <calc_humidity+0x11c>)
   13fa6:	4293      	cmp	r3, r2
   13fa8:	dd02      	ble.n	13fb0 <calc_humidity+0x104>
		calc_hum = 100000;
   13faa:	4b07      	ldr	r3, [pc, #28]	; (13fc8 <calc_humidity+0x11c>)
   13fac:	627b      	str	r3, [r7, #36]	; 0x24
   13fae:	e004      	b.n	13fba <calc_humidity+0x10e>
	else if (calc_hum < 0)
   13fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13fb2:	2b00      	cmp	r3, #0
   13fb4:	da01      	bge.n	13fba <calc_humidity+0x10e>
		calc_hum = 0;
   13fb6:	2300      	movs	r3, #0
   13fb8:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
   13fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   13fbc:	0018      	movs	r0, r3
   13fbe:	46bd      	mov	sp, r7
   13fc0:	b00a      	add	sp, #40	; 0x28
   13fc2:	bdb0      	pop	{r4, r5, r7, pc}
   13fc4:	0003555d 	.word	0x0003555d
   13fc8:	000186a0 	.word	0x000186a0

00013fcc <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
   13fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13fce:	b0b7      	sub	sp, #220	; 0xdc
   13fd0:	af00      	add	r7, sp, #0
   13fd2:	0003      	movs	r3, r0
   13fd4:	633a      	str	r2, [r7, #48]	; 0x30
   13fd6:	2236      	movs	r2, #54	; 0x36
   13fd8:	18ba      	adds	r2, r7, r2
   13fda:	8013      	strh	r3, [r2, #0]
   13fdc:	2335      	movs	r3, #53	; 0x35
   13fde:	18fa      	adds	r2, r7, r3
   13fe0:	1c0b      	adds	r3, r1, #0
   13fe2:	7013      	strb	r3, [r2, #0]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   13fe4:	234c      	movs	r3, #76	; 0x4c
   13fe6:	2230      	movs	r2, #48	; 0x30
   13fe8:	18ba      	adds	r2, r7, r2
   13fea:	18d2      	adds	r2, r2, r3
   13fec:	4b6c      	ldr	r3, [pc, #432]	; (141a0 <calc_gas_resistance+0x1d4>)
   13fee:	0010      	movs	r0, r2
   13ff0:	0019      	movs	r1, r3
   13ff2:	2340      	movs	r3, #64	; 0x40
   13ff4:	001a      	movs	r2, r3
   13ff6:	4b6b      	ldr	r3, [pc, #428]	; (141a4 <calc_gas_resistance+0x1d8>)
   13ff8:	4798      	blx	r3
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
   13ffa:	230c      	movs	r3, #12
   13ffc:	2230      	movs	r2, #48	; 0x30
   13ffe:	18ba      	adds	r2, r7, r2
   14000:	18d2      	adds	r2, r2, r3
   14002:	4b69      	ldr	r3, [pc, #420]	; (141a8 <calc_gas_resistance+0x1dc>)
   14004:	0010      	movs	r0, r2
   14006:	0019      	movs	r1, r3
   14008:	2340      	movs	r3, #64	; 0x40
   1400a:	001a      	movs	r2, r3
   1400c:	4b65      	ldr	r3, [pc, #404]	; (141a4 <calc_gas_resistance+0x1d8>)
   1400e:	4798      	blx	r3
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   14010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14012:	2336      	movs	r3, #54	; 0x36
   14014:	56d3      	ldrsb	r3, [r2, r3]
   14016:	61bb      	str	r3, [r7, #24]
   14018:	17db      	asrs	r3, r3, #31
   1401a:	61fb      	str	r3, [r7, #28]
   1401c:	69b8      	ldr	r0, [r7, #24]
   1401e:	69f9      	ldr	r1, [r7, #28]
   14020:	0003      	movs	r3, r0
   14022:	000c      	movs	r4, r1
   14024:	0f9a      	lsrs	r2, r3, #30
   14026:	00a6      	lsls	r6, r4, #2
   14028:	4316      	orrs	r6, r2
   1402a:	009d      	lsls	r5, r3, #2
   1402c:	0003      	movs	r3, r0
   1402e:	000c      	movs	r4, r1
   14030:	195b      	adds	r3, r3, r5
   14032:	4174      	adcs	r4, r6
   14034:	495d      	ldr	r1, [pc, #372]	; (141ac <calc_gas_resistance+0x1e0>)
   14036:	2200      	movs	r2, #0
   14038:	185b      	adds	r3, r3, r1
   1403a:	4154      	adcs	r4, r2
   1403c:	0018      	movs	r0, r3
   1403e:	0021      	movs	r1, r4
		((int64_t) lookupTable1[gas_range])) >> 16;
   14040:	2335      	movs	r3, #53	; 0x35
   14042:	18fb      	adds	r3, r7, r3
   14044:	781b      	ldrb	r3, [r3, #0]
   14046:	224c      	movs	r2, #76	; 0x4c
   14048:	2430      	movs	r4, #48	; 0x30
   1404a:	46a4      	mov	ip, r4
   1404c:	44bc      	add	ip, r7
   1404e:	4462      	add	r2, ip
   14050:	009b      	lsls	r3, r3, #2
   14052:	589b      	ldr	r3, [r3, r2]
   14054:	613b      	str	r3, [r7, #16]
   14056:	2300      	movs	r3, #0
   14058:	617b      	str	r3, [r7, #20]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   1405a:	4c55      	ldr	r4, [pc, #340]	; (141b0 <calc_gas_resistance+0x1e4>)
   1405c:	693a      	ldr	r2, [r7, #16]
   1405e:	697b      	ldr	r3, [r7, #20]
   14060:	47a0      	blx	r4
   14062:	0003      	movs	r3, r0
   14064:	000c      	movs	r4, r1
   14066:	0422      	lsls	r2, r4, #16
   14068:	0c19      	lsrs	r1, r3, #16
   1406a:	430a      	orrs	r2, r1
   1406c:	21a0      	movs	r1, #160	; 0xa0
   1406e:	2030      	movs	r0, #48	; 0x30
   14070:	4684      	mov	ip, r0
   14072:	44bc      	add	ip, r7
   14074:	4461      	add	r1, ip
   14076:	600a      	str	r2, [r1, #0]
   14078:	1423      	asrs	r3, r4, #16
   1407a:	22a4      	movs	r2, #164	; 0xa4
   1407c:	2130      	movs	r1, #48	; 0x30
   1407e:	468c      	mov	ip, r1
   14080:	44bc      	add	ip, r7
   14082:	4462      	add	r2, ip
   14084:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   14086:	2336      	movs	r3, #54	; 0x36
   14088:	18fb      	adds	r3, r7, r3
   1408a:	881b      	ldrh	r3, [r3, #0]
   1408c:	b29b      	uxth	r3, r3
   1408e:	60bb      	str	r3, [r7, #8]
   14090:	2300      	movs	r3, #0
   14092:	60fb      	str	r3, [r7, #12]
   14094:	68b9      	ldr	r1, [r7, #8]
   14096:	68fa      	ldr	r2, [r7, #12]
   14098:	000b      	movs	r3, r1
   1409a:	0c5b      	lsrs	r3, r3, #17
   1409c:	0010      	movs	r0, r2
   1409e:	03c0      	lsls	r0, r0, #15
   140a0:	62f8      	str	r0, [r7, #44]	; 0x2c
   140a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   140a4:	4318      	orrs	r0, r3
   140a6:	62f8      	str	r0, [r7, #44]	; 0x2c
   140a8:	000b      	movs	r3, r1
   140aa:	03db      	lsls	r3, r3, #15
   140ac:	62bb      	str	r3, [r7, #40]	; 0x28
   140ae:	23ff      	movs	r3, #255	; 0xff
   140b0:	061b      	lsls	r3, r3, #24
   140b2:	2401      	movs	r4, #1
   140b4:	4264      	negs	r4, r4
   140b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   140b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   140ba:	18c9      	adds	r1, r1, r3
   140bc:	4162      	adcs	r2, r4
   140be:	23a0      	movs	r3, #160	; 0xa0
   140c0:	2030      	movs	r0, #48	; 0x30
   140c2:	4684      	mov	ip, r0
   140c4:	44bc      	add	ip, r7
   140c6:	4463      	add	r3, ip
   140c8:	685c      	ldr	r4, [r3, #4]
   140ca:	681b      	ldr	r3, [r3, #0]
   140cc:	185b      	adds	r3, r3, r1
   140ce:	4154      	adcs	r4, r2
   140d0:	2298      	movs	r2, #152	; 0x98
   140d2:	2130      	movs	r1, #48	; 0x30
   140d4:	468c      	mov	ip, r1
   140d6:	44bc      	add	ip, r7
   140d8:	4462      	add	r2, ip
   140da:	6013      	str	r3, [r2, #0]
   140dc:	6054      	str	r4, [r2, #4]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   140de:	2335      	movs	r3, #53	; 0x35
   140e0:	18fb      	adds	r3, r7, r3
   140e2:	781a      	ldrb	r2, [r3, #0]
   140e4:	230c      	movs	r3, #12
   140e6:	2130      	movs	r1, #48	; 0x30
   140e8:	468c      	mov	ip, r1
   140ea:	44bc      	add	ip, r7
   140ec:	4463      	add	r3, ip
   140ee:	0092      	lsls	r2, r2, #2
   140f0:	58d3      	ldr	r3, [r2, r3]
   140f2:	603b      	str	r3, [r7, #0]
   140f4:	2300      	movs	r3, #0
   140f6:	607b      	str	r3, [r7, #4]
   140f8:	4c2d      	ldr	r4, [pc, #180]	; (141b0 <calc_gas_resistance+0x1e4>)
   140fa:	23a0      	movs	r3, #160	; 0xa0
   140fc:	2230      	movs	r2, #48	; 0x30
   140fe:	4694      	mov	ip, r2
   14100:	44bc      	add	ip, r7
   14102:	4463      	add	r3, ip
   14104:	681a      	ldr	r2, [r3, #0]
   14106:	685b      	ldr	r3, [r3, #4]
   14108:	6838      	ldr	r0, [r7, #0]
   1410a:	6879      	ldr	r1, [r7, #4]
   1410c:	47a0      	blx	r4
   1410e:	0003      	movs	r3, r0
   14110:	000c      	movs	r4, r1
   14112:	05e2      	lsls	r2, r4, #23
   14114:	0a59      	lsrs	r1, r3, #9
   14116:	430a      	orrs	r2, r1
   14118:	2190      	movs	r1, #144	; 0x90
   1411a:	2030      	movs	r0, #48	; 0x30
   1411c:	4684      	mov	ip, r0
   1411e:	44bc      	add	ip, r7
   14120:	4461      	add	r1, ip
   14122:	600a      	str	r2, [r1, #0]
   14124:	1263      	asrs	r3, r4, #9
   14126:	2294      	movs	r2, #148	; 0x94
   14128:	2130      	movs	r1, #48	; 0x30
   1412a:	468c      	mov	ip, r1
   1412c:	44bc      	add	ip, r7
   1412e:	4462      	add	r2, ip
   14130:	6013      	str	r3, [r2, #0]
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   14132:	2398      	movs	r3, #152	; 0x98
   14134:	2230      	movs	r2, #48	; 0x30
   14136:	4694      	mov	ip, r2
   14138:	44bc      	add	ip, r7
   1413a:	4463      	add	r3, ip
   1413c:	685c      	ldr	r4, [r3, #4]
   1413e:	681b      	ldr	r3, [r3, #0]
   14140:	07e2      	lsls	r2, r4, #31
   14142:	0859      	lsrs	r1, r3, #1
   14144:	6239      	str	r1, [r7, #32]
   14146:	6a39      	ldr	r1, [r7, #32]
   14148:	4311      	orrs	r1, r2
   1414a:	6239      	str	r1, [r7, #32]
   1414c:	1063      	asrs	r3, r4, #1
   1414e:	627b      	str	r3, [r7, #36]	; 0x24
   14150:	2390      	movs	r3, #144	; 0x90
   14152:	2230      	movs	r2, #48	; 0x30
   14154:	4694      	mov	ip, r2
   14156:	44bc      	add	ip, r7
   14158:	4463      	add	r3, ip
   1415a:	685c      	ldr	r4, [r3, #4]
   1415c:	681b      	ldr	r3, [r3, #0]
   1415e:	6a38      	ldr	r0, [r7, #32]
   14160:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14162:	18c0      	adds	r0, r0, r3
   14164:	4161      	adcs	r1, r4
   14166:	2398      	movs	r3, #152	; 0x98
   14168:	2230      	movs	r2, #48	; 0x30
   1416a:	4694      	mov	ip, r2
   1416c:	44bc      	add	ip, r7
   1416e:	4463      	add	r3, ip
   14170:	685c      	ldr	r4, [r3, #4]
   14172:	681b      	ldr	r3, [r3, #0]
   14174:	4d0f      	ldr	r5, [pc, #60]	; (141b4 <calc_gas_resistance+0x1e8>)
   14176:	001a      	movs	r2, r3
   14178:	0023      	movs	r3, r4
   1417a:	47a8      	blx	r5
   1417c:	0003      	movs	r3, r0
   1417e:	000c      	movs	r4, r1
   14180:	228c      	movs	r2, #140	; 0x8c
   14182:	2130      	movs	r1, #48	; 0x30
   14184:	468c      	mov	ip, r1
   14186:	44bc      	add	ip, r7
   14188:	4462      	add	r2, ip
   1418a:	6013      	str	r3, [r2, #0]

	return calc_gas_res;
   1418c:	238c      	movs	r3, #140	; 0x8c
   1418e:	2230      	movs	r2, #48	; 0x30
   14190:	4694      	mov	ip, r2
   14192:	44bc      	add	ip, r7
   14194:	4463      	add	r3, ip
   14196:	681b      	ldr	r3, [r3, #0]
}
   14198:	0018      	movs	r0, r3
   1419a:	46bd      	mov	sp, r7
   1419c:	b037      	add	sp, #220	; 0xdc
   1419e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   141a0:	00038ce8 	.word	0x00038ce8
   141a4:	000378cd 	.word	0x000378cd
   141a8:	00038d28 	.word	0x00038d28
   141ac:	0000053c 	.word	0x0000053c
   141b0:	0003577d 	.word	0x0003577d
   141b4:	00035735 	.word	0x00035735

000141b8 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
   141b8:	b590      	push	{r4, r7, lr}
   141ba:	b08b      	sub	sp, #44	; 0x2c
   141bc:	af00      	add	r7, sp, #0
   141be:	0002      	movs	r2, r0
   141c0:	6039      	str	r1, [r7, #0]
   141c2:	1dbb      	adds	r3, r7, #6
   141c4:	801a      	strh	r2, [r3, #0]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
   141c6:	1dbb      	adds	r3, r7, #6
   141c8:	881a      	ldrh	r2, [r3, #0]
   141ca:	23c8      	movs	r3, #200	; 0xc8
   141cc:	005b      	lsls	r3, r3, #1
   141ce:	429a      	cmp	r2, r3
   141d0:	d903      	bls.n	141da <calc_heater_res+0x22>
		temp = 400;
   141d2:	1dbb      	adds	r3, r7, #6
   141d4:	22c8      	movs	r2, #200	; 0xc8
   141d6:	0052      	lsls	r2, r2, #1
   141d8:	801a      	strh	r2, [r3, #0]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   141da:	683b      	ldr	r3, [r7, #0]
   141dc:	791b      	ldrb	r3, [r3, #4]
   141de:	b25b      	sxtb	r3, r3
   141e0:	001a      	movs	r2, r3
   141e2:	683b      	ldr	r3, [r7, #0]
   141e4:	7d1b      	ldrb	r3, [r3, #20]
   141e6:	b25b      	sxtb	r3, r3
   141e8:	4353      	muls	r3, r2
   141ea:	0018      	movs	r0, r3
   141ec:	4b33      	ldr	r3, [pc, #204]	; (142bc <calc_heater_res+0x104>)
   141ee:	22fa      	movs	r2, #250	; 0xfa
   141f0:	0091      	lsls	r1, r2, #2
   141f2:	4798      	blx	r3
   141f4:	0003      	movs	r3, r0
   141f6:	021b      	lsls	r3, r3, #8
   141f8:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
   141fa:	683b      	ldr	r3, [r7, #0]
   141fc:	7c5b      	ldrb	r3, [r3, #17]
   141fe:	b25b      	sxtb	r3, r3
   14200:	22c4      	movs	r2, #196	; 0xc4
   14202:	0092      	lsls	r2, r2, #2
   14204:	189c      	adds	r4, r3, r2
   14206:	683b      	ldr	r3, [r7, #0]
   14208:	2212      	movs	r2, #18
   1420a:	5e9b      	ldrsh	r3, [r3, r2]
   1420c:	4a2c      	ldr	r2, [pc, #176]	; (142c0 <calc_heater_res+0x108>)
   1420e:	4694      	mov	ip, r2
   14210:	4463      	add	r3, ip
   14212:	1dba      	adds	r2, r7, #6
   14214:	8812      	ldrh	r2, [r2, #0]
   14216:	435a      	muls	r2, r3
   14218:	0013      	movs	r3, r2
   1421a:	009b      	lsls	r3, r3, #2
   1421c:	189a      	adds	r2, r3, r2
   1421e:	4b27      	ldr	r3, [pc, #156]	; (142bc <calc_heater_res+0x104>)
   14220:	2164      	movs	r1, #100	; 0x64
   14222:	0010      	movs	r0, r2
   14224:	4798      	blx	r3
   14226:	0003      	movs	r3, r0
   14228:	22c8      	movs	r2, #200	; 0xc8
   1422a:	0392      	lsls	r2, r2, #14
   1422c:	189a      	adds	r2, r3, r2
   1422e:	4b23      	ldr	r3, [pc, #140]	; (142bc <calc_heater_res+0x104>)
   14230:	210a      	movs	r1, #10
   14232:	0010      	movs	r0, r2
   14234:	4798      	blx	r3
   14236:	0003      	movs	r3, r0
   14238:	4363      	muls	r3, r4
   1423a:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
   1423c:	6a3b      	ldr	r3, [r7, #32]
   1423e:	2b00      	cmp	r3, #0
   14240:	da00      	bge.n	14244 <calc_heater_res+0x8c>
   14242:	3301      	adds	r3, #1
   14244:	105b      	asrs	r3, r3, #1
   14246:	001a      	movs	r2, r3
   14248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1424a:	18d3      	adds	r3, r2, r3
   1424c:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   1424e:	683b      	ldr	r3, [r7, #0]
   14250:	2234      	movs	r2, #52	; 0x34
   14252:	5c9b      	ldrb	r3, [r3, r2]
   14254:	1d1a      	adds	r2, r3, #4
   14256:	4b19      	ldr	r3, [pc, #100]	; (142bc <calc_heater_res+0x104>)
   14258:	0011      	movs	r1, r2
   1425a:	69f8      	ldr	r0, [r7, #28]
   1425c:	4798      	blx	r3
   1425e:	0003      	movs	r3, r0
   14260:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   14262:	683b      	ldr	r3, [r7, #0]
   14264:	2235      	movs	r2, #53	; 0x35
   14266:	569b      	ldrsb	r3, [r3, r2]
   14268:	001a      	movs	r2, r3
   1426a:	0013      	movs	r3, r2
   1426c:	019b      	lsls	r3, r3, #6
   1426e:	189b      	adds	r3, r3, r2
   14270:	005b      	lsls	r3, r3, #1
   14272:	189b      	adds	r3, r3, r2
   14274:	2280      	movs	r2, #128	; 0x80
   14276:	0252      	lsls	r2, r2, #9
   14278:	4694      	mov	ip, r2
   1427a:	4463      	add	r3, ip
   1427c:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
   1427e:	4b0f      	ldr	r3, [pc, #60]	; (142bc <calc_heater_res+0x104>)
   14280:	6979      	ldr	r1, [r7, #20]
   14282:	69b8      	ldr	r0, [r7, #24]
   14284:	4798      	blx	r3
   14286:	0003      	movs	r3, r0
   14288:	3bfa      	subs	r3, #250	; 0xfa
   1428a:	001a      	movs	r2, r3
   1428c:	0013      	movs	r3, r2
   1428e:	011b      	lsls	r3, r3, #4
   14290:	189b      	adds	r3, r3, r2
   14292:	005b      	lsls	r3, r3, #1
   14294:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
   14296:	693b      	ldr	r3, [r7, #16]
   14298:	3332      	adds	r3, #50	; 0x32
   1429a:	001a      	movs	r2, r3
   1429c:	4b07      	ldr	r3, [pc, #28]	; (142bc <calc_heater_res+0x104>)
   1429e:	2164      	movs	r1, #100	; 0x64
   142a0:	0010      	movs	r0, r2
   142a2:	4798      	blx	r3
   142a4:	0003      	movs	r3, r0
   142a6:	001a      	movs	r2, r3
   142a8:	230f      	movs	r3, #15
   142aa:	18fb      	adds	r3, r7, r3
   142ac:	701a      	strb	r2, [r3, #0]

	return heatr_res;
   142ae:	230f      	movs	r3, #15
   142b0:	18fb      	adds	r3, r7, r3
   142b2:	781b      	ldrb	r3, [r3, #0]
}
   142b4:	0018      	movs	r0, r3
   142b6:	46bd      	mov	sp, r7
   142b8:	b00b      	add	sp, #44	; 0x2c
   142ba:	bd90      	pop	{r4, r7, pc}
   142bc:	0003555d 	.word	0x0003555d
   142c0:	00025999 	.word	0x00025999

000142c4 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
   142c4:	b580      	push	{r7, lr}
   142c6:	b084      	sub	sp, #16
   142c8:	af00      	add	r7, sp, #0
   142ca:	0002      	movs	r2, r0
   142cc:	1dbb      	adds	r3, r7, #6
   142ce:	801a      	strh	r2, [r3, #0]
	uint8_t factor = 0;
   142d0:	230f      	movs	r3, #15
   142d2:	18fb      	adds	r3, r7, r3
   142d4:	2200      	movs	r2, #0
   142d6:	701a      	strb	r2, [r3, #0]
	uint8_t durval;

	if (dur >= 0xfc0) {
   142d8:	1dbb      	adds	r3, r7, #6
   142da:	881b      	ldrh	r3, [r3, #0]
   142dc:	4a15      	ldr	r2, [pc, #84]	; (14334 <calc_heater_dur+0x70>)
   142de:	4293      	cmp	r3, r2
   142e0:	d910      	bls.n	14304 <calc_heater_dur+0x40>
		durval = 0xff; /* Max duration*/
   142e2:	230e      	movs	r3, #14
   142e4:	18fb      	adds	r3, r7, r3
   142e6:	22ff      	movs	r2, #255	; 0xff
   142e8:	701a      	strb	r2, [r3, #0]
   142ea:	e01b      	b.n	14324 <calc_heater_dur+0x60>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
   142ec:	1dbb      	adds	r3, r7, #6
   142ee:	1dba      	adds	r2, r7, #6
   142f0:	8812      	ldrh	r2, [r2, #0]
   142f2:	0892      	lsrs	r2, r2, #2
   142f4:	801a      	strh	r2, [r3, #0]
			factor += 1;
   142f6:	230f      	movs	r3, #15
   142f8:	18fb      	adds	r3, r7, r3
   142fa:	220f      	movs	r2, #15
   142fc:	18ba      	adds	r2, r7, r2
   142fe:	7812      	ldrb	r2, [r2, #0]
   14300:	3201      	adds	r2, #1
   14302:	701a      	strb	r2, [r3, #0]
		while (dur > 0x3F) {
   14304:	1dbb      	adds	r3, r7, #6
   14306:	881b      	ldrh	r3, [r3, #0]
   14308:	2b3f      	cmp	r3, #63	; 0x3f
   1430a:	d8ef      	bhi.n	142ec <calc_heater_dur+0x28>
		}
		durval = (uint8_t) (dur + (factor * 64));
   1430c:	1dbb      	adds	r3, r7, #6
   1430e:	881b      	ldrh	r3, [r3, #0]
   14310:	b2d9      	uxtb	r1, r3
   14312:	230f      	movs	r3, #15
   14314:	18fb      	adds	r3, r7, r3
   14316:	781b      	ldrb	r3, [r3, #0]
   14318:	019b      	lsls	r3, r3, #6
   1431a:	b2da      	uxtb	r2, r3
   1431c:	230e      	movs	r3, #14
   1431e:	18fb      	adds	r3, r7, r3
   14320:	188a      	adds	r2, r1, r2
   14322:	701a      	strb	r2, [r3, #0]
	}

	return durval;
   14324:	230e      	movs	r3, #14
   14326:	18fb      	adds	r3, r7, r3
   14328:	781b      	ldrb	r3, [r3, #0]
}
   1432a:	0018      	movs	r0, r3
   1432c:	46bd      	mov	sp, r7
   1432e:	b004      	add	sp, #16
   14330:	bd80      	pop	{r7, pc}
   14332:	46c0      	nop			; (mov r8, r8)
   14334:	00000fbf 	.word	0x00000fbf

00014338 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   14338:	b5b0      	push	{r4, r5, r7, lr}
   1433a:	b08a      	sub	sp, #40	; 0x28
   1433c:	af00      	add	r7, sp, #0
   1433e:	6078      	str	r0, [r7, #4]
   14340:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   14342:	2308      	movs	r3, #8
   14344:	18fb      	adds	r3, r7, r3
   14346:	0018      	movs	r0, r3
   14348:	230f      	movs	r3, #15
   1434a:	001a      	movs	r2, r3
   1434c:	2100      	movs	r1, #0
   1434e:	4b76      	ldr	r3, [pc, #472]	; (14528 <read_field_data+0x1f0>)
   14350:	4798      	blx	r3
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
   14352:	2326      	movs	r3, #38	; 0x26
   14354:	18fb      	adds	r3, r7, r3
   14356:	220a      	movs	r2, #10
   14358:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   1435a:	2327      	movs	r3, #39	; 0x27
   1435c:	18fc      	adds	r4, r7, r3
   1435e:	683b      	ldr	r3, [r7, #0]
   14360:	0018      	movs	r0, r3
   14362:	4b72      	ldr	r3, [pc, #456]	; (1452c <read_field_data+0x1f4>)
   14364:	4798      	blx	r3
   14366:	0003      	movs	r3, r0
   14368:	7023      	strb	r3, [r4, #0]
	do {
		if (rslt == BME680_OK) {
   1436a:	2327      	movs	r3, #39	; 0x27
   1436c:	18fb      	adds	r3, r7, r3
   1436e:	781b      	ldrb	r3, [r3, #0]
   14370:	b25b      	sxtb	r3, r3
   14372:	2b00      	cmp	r3, #0
   14374:	d000      	beq.n	14378 <read_field_data+0x40>
   14376:	e0b8      	b.n	144ea <read_field_data+0x1b2>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   14378:	2327      	movs	r3, #39	; 0x27
   1437a:	18fc      	adds	r4, r7, r3
   1437c:	683b      	ldr	r3, [r7, #0]
   1437e:	2208      	movs	r2, #8
   14380:	18b9      	adds	r1, r7, r2
   14382:	220f      	movs	r2, #15
   14384:	201d      	movs	r0, #29
   14386:	4d6a      	ldr	r5, [pc, #424]	; (14530 <read_field_data+0x1f8>)
   14388:	47a8      	blx	r5
   1438a:	0003      	movs	r3, r0
   1438c:	7023      	strb	r3, [r4, #0]
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
   1438e:	2308      	movs	r3, #8
   14390:	18fb      	adds	r3, r7, r3
   14392:	781b      	ldrb	r3, [r3, #0]
   14394:	227f      	movs	r2, #127	; 0x7f
   14396:	4393      	bics	r3, r2
   14398:	b2da      	uxtb	r2, r3
   1439a:	687b      	ldr	r3, [r7, #4]
   1439c:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   1439e:	2308      	movs	r3, #8
   143a0:	18fb      	adds	r3, r7, r3
   143a2:	781b      	ldrb	r3, [r3, #0]
   143a4:	220f      	movs	r2, #15
   143a6:	4013      	ands	r3, r2
   143a8:	b2da      	uxtb	r2, r3
   143aa:	687b      	ldr	r3, [r7, #4]
   143ac:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
   143ae:	2308      	movs	r3, #8
   143b0:	18fb      	adds	r3, r7, r3
   143b2:	785a      	ldrb	r2, [r3, #1]
   143b4:	687b      	ldr	r3, [r7, #4]
   143b6:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   143b8:	2308      	movs	r3, #8
   143ba:	18fb      	adds	r3, r7, r3
   143bc:	789b      	ldrb	r3, [r3, #2]
   143be:	031a      	lsls	r2, r3, #12
   143c0:	2308      	movs	r3, #8
   143c2:	18fb      	adds	r3, r7, r3
   143c4:	78db      	ldrb	r3, [r3, #3]
   143c6:	011b      	lsls	r3, r3, #4
   143c8:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
   143ca:	2208      	movs	r2, #8
   143cc:	18ba      	adds	r2, r7, r2
   143ce:	7912      	ldrb	r2, [r2, #4]
   143d0:	0912      	lsrs	r2, r2, #4
   143d2:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   143d4:	4313      	orrs	r3, r2
   143d6:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   143d8:	2308      	movs	r3, #8
   143da:	18fb      	adds	r3, r7, r3
   143dc:	795b      	ldrb	r3, [r3, #5]
   143de:	031a      	lsls	r2, r3, #12
   143e0:	2308      	movs	r3, #8
   143e2:	18fb      	adds	r3, r7, r3
   143e4:	799b      	ldrb	r3, [r3, #6]
   143e6:	011b      	lsls	r3, r3, #4
   143e8:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
   143ea:	2208      	movs	r2, #8
   143ec:	18ba      	adds	r2, r7, r2
   143ee:	79d2      	ldrb	r2, [r2, #7]
   143f0:	0912      	lsrs	r2, r2, #4
   143f2:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   143f4:	4313      	orrs	r3, r2
   143f6:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   143f8:	2308      	movs	r3, #8
   143fa:	18fb      	adds	r3, r7, r3
   143fc:	7a1b      	ldrb	r3, [r3, #8]
   143fe:	b29b      	uxth	r3, r3
   14400:	021b      	lsls	r3, r3, #8
   14402:	b299      	uxth	r1, r3
   14404:	2308      	movs	r3, #8
   14406:	18fb      	adds	r3, r7, r3
   14408:	7a5b      	ldrb	r3, [r3, #9]
   1440a:	b29a      	uxth	r2, r3
   1440c:	231a      	movs	r3, #26
   1440e:	18fb      	adds	r3, r7, r3
   14410:	430a      	orrs	r2, r1
   14412:	801a      	strh	r2, [r3, #0]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   14414:	2308      	movs	r3, #8
   14416:	18fb      	adds	r3, r7, r3
   14418:	7b5b      	ldrb	r3, [r3, #13]
   1441a:	b29b      	uxth	r3, r3
   1441c:	009b      	lsls	r3, r3, #2
   1441e:	b299      	uxth	r1, r3
   14420:	2308      	movs	r3, #8
   14422:	18fb      	adds	r3, r7, r3
   14424:	7b9b      	ldrb	r3, [r3, #14]
   14426:	099b      	lsrs	r3, r3, #6
   14428:	b2db      	uxtb	r3, r3
   1442a:	b29a      	uxth	r2, r3
   1442c:	2318      	movs	r3, #24
   1442e:	18fb      	adds	r3, r7, r3
   14430:	430a      	orrs	r2, r1
   14432:	801a      	strh	r2, [r3, #0]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
   14434:	2308      	movs	r3, #8
   14436:	18fb      	adds	r3, r7, r3
   14438:	7b9a      	ldrb	r2, [r3, #14]
   1443a:	2317      	movs	r3, #23
   1443c:	18fb      	adds	r3, r7, r3
   1443e:	210f      	movs	r1, #15
   14440:	400a      	ands	r2, r1
   14442:	701a      	strb	r2, [r3, #0]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   14444:	687b      	ldr	r3, [r7, #4]
   14446:	781b      	ldrb	r3, [r3, #0]
   14448:	b25a      	sxtb	r2, r3
   1444a:	2308      	movs	r3, #8
   1444c:	18fb      	adds	r3, r7, r3
   1444e:	7b9b      	ldrb	r3, [r3, #14]
   14450:	b25b      	sxtb	r3, r3
   14452:	2120      	movs	r1, #32
   14454:	400b      	ands	r3, r1
   14456:	b25b      	sxtb	r3, r3
   14458:	4313      	orrs	r3, r2
   1445a:	b25b      	sxtb	r3, r3
   1445c:	b2da      	uxtb	r2, r3
   1445e:	687b      	ldr	r3, [r7, #4]
   14460:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   14462:	687b      	ldr	r3, [r7, #4]
   14464:	781b      	ldrb	r3, [r3, #0]
   14466:	b25a      	sxtb	r2, r3
   14468:	2308      	movs	r3, #8
   1446a:	18fb      	adds	r3, r7, r3
   1446c:	7b9b      	ldrb	r3, [r3, #14]
   1446e:	b25b      	sxtb	r3, r3
   14470:	2110      	movs	r1, #16
   14472:	400b      	ands	r3, r1
   14474:	b25b      	sxtb	r3, r3
   14476:	4313      	orrs	r3, r2
   14478:	b25b      	sxtb	r3, r3
   1447a:	b2da      	uxtb	r2, r3
   1447c:	687b      	ldr	r3, [r7, #4]
   1447e:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
   14480:	687b      	ldr	r3, [r7, #4]
   14482:	781b      	ldrb	r3, [r3, #0]
   14484:	b25b      	sxtb	r3, r3
   14486:	2b00      	cmp	r3, #0
   14488:	da2b      	bge.n	144e2 <read_field_data+0x1aa>
				data->temperature = calc_temperature(adc_temp, dev);
   1448a:	683a      	ldr	r2, [r7, #0]
   1448c:	69fb      	ldr	r3, [r7, #28]
   1448e:	0011      	movs	r1, r2
   14490:	0018      	movs	r0, r3
   14492:	4b28      	ldr	r3, [pc, #160]	; (14534 <read_field_data+0x1fc>)
   14494:	4798      	blx	r3
   14496:	0003      	movs	r3, r0
   14498:	001a      	movs	r2, r3
   1449a:	687b      	ldr	r3, [r7, #4]
   1449c:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
   1449e:	683a      	ldr	r2, [r7, #0]
   144a0:	6a3b      	ldr	r3, [r7, #32]
   144a2:	0011      	movs	r1, r2
   144a4:	0018      	movs	r0, r3
   144a6:	4b24      	ldr	r3, [pc, #144]	; (14538 <read_field_data+0x200>)
   144a8:	4798      	blx	r3
   144aa:	0002      	movs	r2, r0
   144ac:	687b      	ldr	r3, [r7, #4]
   144ae:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
   144b0:	683a      	ldr	r2, [r7, #0]
   144b2:	231a      	movs	r3, #26
   144b4:	18fb      	adds	r3, r7, r3
   144b6:	881b      	ldrh	r3, [r3, #0]
   144b8:	0011      	movs	r1, r2
   144ba:	0018      	movs	r0, r3
   144bc:	4b1f      	ldr	r3, [pc, #124]	; (1453c <read_field_data+0x204>)
   144be:	4798      	blx	r3
   144c0:	0002      	movs	r2, r0
   144c2:	687b      	ldr	r3, [r7, #4]
   144c4:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   144c6:	683a      	ldr	r2, [r7, #0]
   144c8:	2317      	movs	r3, #23
   144ca:	18fb      	adds	r3, r7, r3
   144cc:	7819      	ldrb	r1, [r3, #0]
   144ce:	2318      	movs	r3, #24
   144d0:	18fb      	adds	r3, r7, r3
   144d2:	881b      	ldrh	r3, [r3, #0]
   144d4:	0018      	movs	r0, r3
   144d6:	4b1a      	ldr	r3, [pc, #104]	; (14540 <read_field_data+0x208>)
   144d8:	4798      	blx	r3
   144da:	0002      	movs	r2, r0
   144dc:	687b      	ldr	r3, [r7, #4]
   144de:	611a      	str	r2, [r3, #16]
				break;
   144e0:	e010      	b.n	14504 <read_field_data+0x1cc>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
   144e2:	683b      	ldr	r3, [r7, #0]
   144e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   144e6:	200a      	movs	r0, #10
   144e8:	4798      	blx	r3
		}
		tries--;
   144ea:	2326      	movs	r3, #38	; 0x26
   144ec:	18fb      	adds	r3, r7, r3
   144ee:	781a      	ldrb	r2, [r3, #0]
   144f0:	2326      	movs	r3, #38	; 0x26
   144f2:	18fb      	adds	r3, r7, r3
   144f4:	3a01      	subs	r2, #1
   144f6:	701a      	strb	r2, [r3, #0]
	} while (tries);
   144f8:	2326      	movs	r3, #38	; 0x26
   144fa:	18fb      	adds	r3, r7, r3
   144fc:	781b      	ldrb	r3, [r3, #0]
   144fe:	2b00      	cmp	r3, #0
   14500:	d000      	beq.n	14504 <read_field_data+0x1cc>
   14502:	e732      	b.n	1436a <read_field_data+0x32>

	if (!tries)
   14504:	2326      	movs	r3, #38	; 0x26
   14506:	18fb      	adds	r3, r7, r3
   14508:	781b      	ldrb	r3, [r3, #0]
   1450a:	2b00      	cmp	r3, #0
   1450c:	d103      	bne.n	14516 <read_field_data+0x1de>
		rslt = BME680_W_NO_NEW_DATA;
   1450e:	2327      	movs	r3, #39	; 0x27
   14510:	18fb      	adds	r3, r7, r3
   14512:	2202      	movs	r2, #2
   14514:	701a      	strb	r2, [r3, #0]

	return rslt;
   14516:	2327      	movs	r3, #39	; 0x27
   14518:	18fb      	adds	r3, r7, r3
   1451a:	781b      	ldrb	r3, [r3, #0]
   1451c:	b25b      	sxtb	r3, r3
}
   1451e:	0018      	movs	r0, r3
   14520:	46bd      	mov	sp, r7
   14522:	b00a      	add	sp, #40	; 0x28
   14524:	bdb0      	pop	{r4, r5, r7, pc}
   14526:	46c0      	nop			; (mov r8, r8)
   14528:	00037903 	.word	0x00037903
   1452c:	00014763 	.word	0x00014763
   14530:	00012ee5 	.word	0x00012ee5
   14534:	00013c65 	.word	0x00013c65
   14538:	00013d55 	.word	0x00013d55
   1453c:	00013ead 	.word	0x00013ead
   14540:	00013fcd 	.word	0x00013fcd

00014544 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   14544:	b590      	push	{r4, r7, lr}
   14546:	b085      	sub	sp, #20
   14548:	af00      	add	r7, sp, #0
   1454a:	0002      	movs	r2, r0
   1454c:	6039      	str	r1, [r7, #0]
   1454e:	1dfb      	adds	r3, r7, #7
   14550:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   14552:	230f      	movs	r3, #15
   14554:	18fc      	adds	r4, r7, r3
   14556:	683b      	ldr	r3, [r7, #0]
   14558:	0018      	movs	r0, r3
   1455a:	4b3c      	ldr	r3, [pc, #240]	; (1464c <set_mem_page+0x108>)
   1455c:	4798      	blx	r3
   1455e:	0003      	movs	r3, r0
   14560:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   14562:	230f      	movs	r3, #15
   14564:	18fb      	adds	r3, r7, r3
   14566:	781b      	ldrb	r3, [r3, #0]
   14568:	b25b      	sxtb	r3, r3
   1456a:	2b00      	cmp	r3, #0
   1456c:	d166      	bne.n	1463c <set_mem_page+0xf8>
		if (reg_addr > 0x7f)
   1456e:	1dfb      	adds	r3, r7, #7
   14570:	781b      	ldrb	r3, [r3, #0]
   14572:	b25b      	sxtb	r3, r3
   14574:	2b00      	cmp	r3, #0
   14576:	da04      	bge.n	14582 <set_mem_page+0x3e>
			mem_page = BME680_MEM_PAGE1;
   14578:	230e      	movs	r3, #14
   1457a:	18fb      	adds	r3, r7, r3
   1457c:	2200      	movs	r2, #0
   1457e:	701a      	strb	r2, [r3, #0]
   14580:	e003      	b.n	1458a <set_mem_page+0x46>
		else
			mem_page = BME680_MEM_PAGE0;
   14582:	230e      	movs	r3, #14
   14584:	18fb      	adds	r3, r7, r3
   14586:	2210      	movs	r2, #16
   14588:	701a      	strb	r2, [r3, #0]

		if (mem_page != dev->mem_page) {
   1458a:	683b      	ldr	r3, [r7, #0]
   1458c:	78db      	ldrb	r3, [r3, #3]
   1458e:	220e      	movs	r2, #14
   14590:	18ba      	adds	r2, r7, r2
   14592:	7812      	ldrb	r2, [r2, #0]
   14594:	429a      	cmp	r2, r3
   14596:	d051      	beq.n	1463c <set_mem_page+0xf8>
			dev->mem_page = mem_page;
   14598:	683b      	ldr	r3, [r7, #0]
   1459a:	220e      	movs	r2, #14
   1459c:	18ba      	adds	r2, r7, r2
   1459e:	7812      	ldrb	r2, [r2, #0]
   145a0:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   145a2:	683b      	ldr	r3, [r7, #0]
   145a4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   145a6:	683b      	ldr	r3, [r7, #0]
   145a8:	7858      	ldrb	r0, [r3, #1]
   145aa:	230d      	movs	r3, #13
   145ac:	18fa      	adds	r2, r7, r3
   145ae:	2301      	movs	r3, #1
   145b0:	21f3      	movs	r1, #243	; 0xf3
   145b2:	47a0      	blx	r4
   145b4:	0003      	movs	r3, r0
   145b6:	0019      	movs	r1, r3
   145b8:	683b      	ldr	r3, [r7, #0]
   145ba:	2254      	movs	r2, #84	; 0x54
   145bc:	5499      	strb	r1, [r3, r2]
			if (dev->com_rslt != 0)
   145be:	683b      	ldr	r3, [r7, #0]
   145c0:	2254      	movs	r2, #84	; 0x54
   145c2:	569b      	ldrsb	r3, [r3, r2]
   145c4:	2b00      	cmp	r3, #0
   145c6:	d003      	beq.n	145d0 <set_mem_page+0x8c>
				rslt = BME680_E_COM_FAIL;
   145c8:	230f      	movs	r3, #15
   145ca:	18fb      	adds	r3, r7, r3
   145cc:	22fe      	movs	r2, #254	; 0xfe
   145ce:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK) {
   145d0:	230f      	movs	r3, #15
   145d2:	18fb      	adds	r3, r7, r3
   145d4:	781b      	ldrb	r3, [r3, #0]
   145d6:	b25b      	sxtb	r3, r3
   145d8:	2b00      	cmp	r3, #0
   145da:	d12f      	bne.n	1463c <set_mem_page+0xf8>
				reg = reg & (~BME680_MEM_PAGE_MSK);
   145dc:	230d      	movs	r3, #13
   145de:	18fb      	adds	r3, r7, r3
   145e0:	781b      	ldrb	r3, [r3, #0]
   145e2:	2210      	movs	r2, #16
   145e4:	4393      	bics	r3, r2
   145e6:	b2da      	uxtb	r2, r3
   145e8:	230d      	movs	r3, #13
   145ea:	18fb      	adds	r3, r7, r3
   145ec:	701a      	strb	r2, [r3, #0]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   145ee:	683b      	ldr	r3, [r7, #0]
   145f0:	78db      	ldrb	r3, [r3, #3]
   145f2:	b25b      	sxtb	r3, r3
   145f4:	2210      	movs	r2, #16
   145f6:	4013      	ands	r3, r2
   145f8:	b25a      	sxtb	r2, r3
   145fa:	230d      	movs	r3, #13
   145fc:	18fb      	adds	r3, r7, r3
   145fe:	781b      	ldrb	r3, [r3, #0]
   14600:	b25b      	sxtb	r3, r3
   14602:	4313      	orrs	r3, r2
   14604:	b25b      	sxtb	r3, r3
   14606:	b2da      	uxtb	r2, r3
   14608:	230d      	movs	r3, #13
   1460a:	18fb      	adds	r3, r7, r3
   1460c:	701a      	strb	r2, [r3, #0]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   1460e:	683b      	ldr	r3, [r7, #0]
   14610:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   14612:	683b      	ldr	r3, [r7, #0]
   14614:	7858      	ldrb	r0, [r3, #1]
   14616:	230d      	movs	r3, #13
   14618:	18fa      	adds	r2, r7, r3
   1461a:	2301      	movs	r3, #1
   1461c:	2173      	movs	r1, #115	; 0x73
   1461e:	47a0      	blx	r4
   14620:	0003      	movs	r3, r0
   14622:	0019      	movs	r1, r3
   14624:	683b      	ldr	r3, [r7, #0]
   14626:	2254      	movs	r2, #84	; 0x54
   14628:	5499      	strb	r1, [r3, r2]
					&reg, 1);
				if (dev->com_rslt != 0)
   1462a:	683b      	ldr	r3, [r7, #0]
   1462c:	2254      	movs	r2, #84	; 0x54
   1462e:	569b      	ldrsb	r3, [r3, r2]
   14630:	2b00      	cmp	r3, #0
   14632:	d003      	beq.n	1463c <set_mem_page+0xf8>
					rslt = BME680_E_COM_FAIL;
   14634:	230f      	movs	r3, #15
   14636:	18fb      	adds	r3, r7, r3
   14638:	22fe      	movs	r2, #254	; 0xfe
   1463a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return rslt;
   1463c:	230f      	movs	r3, #15
   1463e:	18fb      	adds	r3, r7, r3
   14640:	781b      	ldrb	r3, [r3, #0]
   14642:	b25b      	sxtb	r3, r3
}
   14644:	0018      	movs	r0, r3
   14646:	46bd      	mov	sp, r7
   14648:	b005      	add	sp, #20
   1464a:	bd90      	pop	{r4, r7, pc}
   1464c:	00014763 	.word	0x00014763

00014650 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
   14650:	b590      	push	{r4, r7, lr}
   14652:	b085      	sub	sp, #20
   14654:	af00      	add	r7, sp, #0
   14656:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   14658:	230f      	movs	r3, #15
   1465a:	18fc      	adds	r4, r7, r3
   1465c:	687b      	ldr	r3, [r7, #4]
   1465e:	0018      	movs	r0, r3
   14660:	4b18      	ldr	r3, [pc, #96]	; (146c4 <get_mem_page+0x74>)
   14662:	4798      	blx	r3
   14664:	0003      	movs	r3, r0
   14666:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   14668:	230f      	movs	r3, #15
   1466a:	18fb      	adds	r3, r7, r3
   1466c:	781b      	ldrb	r3, [r3, #0]
   1466e:	b25b      	sxtb	r3, r3
   14670:	2b00      	cmp	r3, #0
   14672:	d11f      	bne.n	146b4 <get_mem_page+0x64>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   14674:	687b      	ldr	r3, [r7, #4]
   14676:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   14678:	687b      	ldr	r3, [r7, #4]
   1467a:	7858      	ldrb	r0, [r3, #1]
   1467c:	230e      	movs	r3, #14
   1467e:	18fa      	adds	r2, r7, r3
   14680:	2301      	movs	r3, #1
   14682:	21f3      	movs	r1, #243	; 0xf3
   14684:	47a0      	blx	r4
   14686:	0003      	movs	r3, r0
   14688:	0019      	movs	r1, r3
   1468a:	687b      	ldr	r3, [r7, #4]
   1468c:	2254      	movs	r2, #84	; 0x54
   1468e:	5499      	strb	r1, [r3, r2]
		if (dev->com_rslt != 0)
   14690:	687b      	ldr	r3, [r7, #4]
   14692:	2254      	movs	r2, #84	; 0x54
   14694:	569b      	ldrsb	r3, [r3, r2]
   14696:	2b00      	cmp	r3, #0
   14698:	d004      	beq.n	146a4 <get_mem_page+0x54>
			rslt = BME680_E_COM_FAIL;
   1469a:	230f      	movs	r3, #15
   1469c:	18fb      	adds	r3, r7, r3
   1469e:	22fe      	movs	r2, #254	; 0xfe
   146a0:	701a      	strb	r2, [r3, #0]
   146a2:	e007      	b.n	146b4 <get_mem_page+0x64>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   146a4:	230e      	movs	r3, #14
   146a6:	18fb      	adds	r3, r7, r3
   146a8:	781b      	ldrb	r3, [r3, #0]
   146aa:	2210      	movs	r2, #16
   146ac:	4013      	ands	r3, r2
   146ae:	b2da      	uxtb	r2, r3
   146b0:	687b      	ldr	r3, [r7, #4]
   146b2:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
   146b4:	230f      	movs	r3, #15
   146b6:	18fb      	adds	r3, r7, r3
   146b8:	781b      	ldrb	r3, [r3, #0]
   146ba:	b25b      	sxtb	r3, r3
}
   146bc:	0018      	movs	r0, r3
   146be:	46bd      	mov	sp, r7
   146c0:	b005      	add	sp, #20
   146c2:	bd90      	pop	{r4, r7, pc}
   146c4:	00014763 	.word	0x00014763

000146c8 <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
   146c8:	b580      	push	{r7, lr}
   146ca:	b086      	sub	sp, #24
   146cc:	af00      	add	r7, sp, #0
   146ce:	60f8      	str	r0, [r7, #12]
   146d0:	0008      	movs	r0, r1
   146d2:	0011      	movs	r1, r2
   146d4:	607b      	str	r3, [r7, #4]
   146d6:	230b      	movs	r3, #11
   146d8:	18fb      	adds	r3, r7, r3
   146da:	1c02      	adds	r2, r0, #0
   146dc:	701a      	strb	r2, [r3, #0]
   146de:	230a      	movs	r3, #10
   146e0:	18fb      	adds	r3, r7, r3
   146e2:	1c0a      	adds	r2, r1, #0
   146e4:	701a      	strb	r2, [r3, #0]
	int8_t rslt = BME680_OK;
   146e6:	2317      	movs	r3, #23
   146e8:	18fb      	adds	r3, r7, r3
   146ea:	2200      	movs	r2, #0
   146ec:	701a      	strb	r2, [r3, #0]

	if (value != NULL) {
   146ee:	68fb      	ldr	r3, [r7, #12]
   146f0:	2b00      	cmp	r3, #0
   146f2:	d02a      	beq.n	1474a <boundary_check+0x82>
		/* Check if value is below minimum value */
		if (*value < min) {
   146f4:	68fb      	ldr	r3, [r7, #12]
   146f6:	781b      	ldrb	r3, [r3, #0]
   146f8:	220b      	movs	r2, #11
   146fa:	18ba      	adds	r2, r7, r2
   146fc:	7812      	ldrb	r2, [r2, #0]
   146fe:	429a      	cmp	r2, r3
   14700:	d90d      	bls.n	1471e <boundary_check+0x56>
			/* Auto correct the invalid value to minimum value */
			*value = min;
   14702:	68fb      	ldr	r3, [r7, #12]
   14704:	220b      	movs	r2, #11
   14706:	18ba      	adds	r2, r7, r2
   14708:	7812      	ldrb	r2, [r2, #0]
   1470a:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
   1470c:	687b      	ldr	r3, [r7, #4]
   1470e:	2246      	movs	r2, #70	; 0x46
   14710:	5c9b      	ldrb	r3, [r3, r2]
   14712:	2201      	movs	r2, #1
   14714:	4313      	orrs	r3, r2
   14716:	b2d9      	uxtb	r1, r3
   14718:	687b      	ldr	r3, [r7, #4]
   1471a:	2246      	movs	r2, #70	; 0x46
   1471c:	5499      	strb	r1, [r3, r2]
		}
		/* Check if value is above maximum value */
		if (*value > max) {
   1471e:	68fb      	ldr	r3, [r7, #12]
   14720:	781b      	ldrb	r3, [r3, #0]
   14722:	220a      	movs	r2, #10
   14724:	18ba      	adds	r2, r7, r2
   14726:	7812      	ldrb	r2, [r2, #0]
   14728:	429a      	cmp	r2, r3
   1472a:	d212      	bcs.n	14752 <boundary_check+0x8a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
   1472c:	68fb      	ldr	r3, [r7, #12]
   1472e:	220a      	movs	r2, #10
   14730:	18ba      	adds	r2, r7, r2
   14732:	7812      	ldrb	r2, [r2, #0]
   14734:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   14736:	687b      	ldr	r3, [r7, #4]
   14738:	2246      	movs	r2, #70	; 0x46
   1473a:	5c9b      	ldrb	r3, [r3, r2]
   1473c:	2202      	movs	r2, #2
   1473e:	4313      	orrs	r3, r2
   14740:	b2d9      	uxtb	r1, r3
   14742:	687b      	ldr	r3, [r7, #4]
   14744:	2246      	movs	r2, #70	; 0x46
   14746:	5499      	strb	r1, [r3, r2]
   14748:	e003      	b.n	14752 <boundary_check+0x8a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
   1474a:	2317      	movs	r3, #23
   1474c:	18fb      	adds	r3, r7, r3
   1474e:	22ff      	movs	r2, #255	; 0xff
   14750:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   14752:	2317      	movs	r3, #23
   14754:	18fb      	adds	r3, r7, r3
   14756:	781b      	ldrb	r3, [r3, #0]
   14758:	b25b      	sxtb	r3, r3
}
   1475a:	0018      	movs	r0, r3
   1475c:	46bd      	mov	sp, r7
   1475e:	b006      	add	sp, #24
   14760:	bd80      	pop	{r7, pc}

00014762 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
   14762:	b580      	push	{r7, lr}
   14764:	b084      	sub	sp, #16
   14766:	af00      	add	r7, sp, #0
   14768:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
   1476a:	687b      	ldr	r3, [r7, #4]
   1476c:	2b00      	cmp	r3, #0
   1476e:	d00b      	beq.n	14788 <null_ptr_check+0x26>
   14770:	687b      	ldr	r3, [r7, #4]
   14772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   14774:	2b00      	cmp	r3, #0
   14776:	d007      	beq.n	14788 <null_ptr_check+0x26>
   14778:	687b      	ldr	r3, [r7, #4]
   1477a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1477c:	2b00      	cmp	r3, #0
   1477e:	d003      	beq.n	14788 <null_ptr_check+0x26>
   14780:	687b      	ldr	r3, [r7, #4]
   14782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   14784:	2b00      	cmp	r3, #0
   14786:	d104      	bne.n	14792 <null_ptr_check+0x30>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   14788:	230f      	movs	r3, #15
   1478a:	18fb      	adds	r3, r7, r3
   1478c:	22ff      	movs	r2, #255	; 0xff
   1478e:	701a      	strb	r2, [r3, #0]
   14790:	e003      	b.n	1479a <null_ptr_check+0x38>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
   14792:	230f      	movs	r3, #15
   14794:	18fb      	adds	r3, r7, r3
   14796:	2200      	movs	r2, #0
   14798:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   1479a:	230f      	movs	r3, #15
   1479c:	18fb      	adds	r3, r7, r3
   1479e:	781b      	ldrb	r3, [r3, #0]
   147a0:	b25b      	sxtb	r3, r3
}
   147a2:	0018      	movs	r0, r3
   147a4:	46bd      	mov	sp, r7
   147a6:	b004      	add	sp, #16
   147a8:	bd80      	pop	{r7, pc}
	...

000147ac <read_bme680_3times>:

int8_t read_bme680_3times(struct bme680_dev *dev, struct bme680_field_data* data)
{
   147ac:	b590      	push	{r4, r7, lr}
   147ae:	b0ab      	sub	sp, #172	; 0xac
   147b0:	af00      	add	r7, sp, #0
   147b2:	6078      	str	r0, [r7, #4]
   147b4:	6039      	str	r1, [r7, #0]
	char bufferPrint[64];
	int8_t rslt = BME680_OK;
   147b6:	23a7      	movs	r3, #167	; 0xa7
   147b8:	18fb      	adds	r3, r7, r3
   147ba:	2200      	movs	r2, #0
   147bc:	701a      	strb	r2, [r3, #0]
	int8_t N_MEAS = 3;
   147be:	23a5      	movs	r3, #165	; 0xa5
   147c0:	18fb      	adds	r3, r7, r3
   147c2:	2203      	movs	r2, #3
   147c4:	701a      	strb	r2, [r3, #0]
	
	struct bme680_dev t_dev;

	/* Copy required parameters from reference bme680_dev struct */
	t_dev.dev_id = dev->dev_id;
   147c6:	687b      	ldr	r3, [r7, #4]
   147c8:	785a      	ldrb	r2, [r3, #1]
   147ca:	2308      	movs	r3, #8
   147cc:	18fb      	adds	r3, r7, r3
   147ce:	705a      	strb	r2, [r3, #1]
	t_dev.amb_temp = 25;
   147d0:	2308      	movs	r3, #8
   147d2:	18fb      	adds	r3, r7, r3
   147d4:	2219      	movs	r2, #25
   147d6:	711a      	strb	r2, [r3, #4]
	t_dev.read = dev->read;
   147d8:	687b      	ldr	r3, [r7, #4]
   147da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   147dc:	2308      	movs	r3, #8
   147de:	18fb      	adds	r3, r7, r3
   147e0:	649a      	str	r2, [r3, #72]	; 0x48
	t_dev.write = dev->write;
   147e2:	687b      	ldr	r3, [r7, #4]
   147e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   147e6:	2308      	movs	r3, #8
   147e8:	18fb      	adds	r3, r7, r3
   147ea:	64da      	str	r2, [r3, #76]	; 0x4c
	t_dev.intf = dev->intf;
   147ec:	687b      	ldr	r3, [r7, #4]
   147ee:	789a      	ldrb	r2, [r3, #2]
   147f0:	2308      	movs	r3, #8
   147f2:	18fb      	adds	r3, r7, r3
   147f4:	709a      	strb	r2, [r3, #2]
	t_dev.delay_ms = dev->delay_ms;
   147f6:	687b      	ldr	r3, [r7, #4]
   147f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   147fa:	2308      	movs	r3, #8
   147fc:	18fb      	adds	r3, r7, r3
   147fe:	651a      	str	r2, [r3, #80]	; 0x50

	rslt = bme680_init(&t_dev);
   14800:	23a7      	movs	r3, #167	; 0xa7
   14802:	18fc      	adds	r4, r7, r3
   14804:	2308      	movs	r3, #8
   14806:	18fb      	adds	r3, r7, r3
   14808:	0018      	movs	r0, r3
   1480a:	4b51      	ldr	r3, [pc, #324]	; (14950 <read_bme680_3times+0x1a4>)
   1480c:	4798      	blx	r3
   1480e:	0003      	movs	r3, r0
   14810:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   14812:	23a7      	movs	r3, #167	; 0xa7
   14814:	18fb      	adds	r3, r7, r3
   14816:	781b      	ldrb	r3, [r3, #0]
   14818:	b25b      	sxtb	r3, r3
   1481a:	2b00      	cmp	r3, #0
   1481c:	d000      	beq.n	14820 <read_bme680_3times+0x74>
   1481e:	e08e      	b.n	1493e <read_bme680_3times+0x192>
		/* Select the power mode */
		/* Must be set before writing the sensor configuration */
		t_dev.power_mode = BME680_FORCED_MODE;
   14820:	2308      	movs	r3, #8
   14822:	18fb      	adds	r3, r7, r3
   14824:	2244      	movs	r2, #68	; 0x44
   14826:	2101      	movs	r1, #1
   14828:	5499      	strb	r1, [r3, r2]

		uint8_t set_required_settings;

		/* Set the temperature, pressure and humidity & filter settings */
		t_dev.tph_sett.os_hum = BME680_OS_2X;
   1482a:	2308      	movs	r3, #8
   1482c:	18fb      	adds	r3, r7, r3
   1482e:	2238      	movs	r2, #56	; 0x38
   14830:	2102      	movs	r1, #2
   14832:	5499      	strb	r1, [r3, r2]
		t_dev.tph_sett.os_pres = BME680_OS_4X;
   14834:	2308      	movs	r3, #8
   14836:	18fb      	adds	r3, r7, r3
   14838:	223a      	movs	r2, #58	; 0x3a
   1483a:	2103      	movs	r1, #3
   1483c:	5499      	strb	r1, [r3, r2]
		t_dev.tph_sett.os_temp = BME680_OS_8X;
   1483e:	2308      	movs	r3, #8
   14840:	18fb      	adds	r3, r7, r3
   14842:	2239      	movs	r2, #57	; 0x39
   14844:	2104      	movs	r1, #4
   14846:	5499      	strb	r1, [r3, r2]
		t_dev.tph_sett.filter = BME680_FILTER_SIZE_3;
   14848:	2308      	movs	r3, #8
   1484a:	18fb      	adds	r3, r7, r3
   1484c:	223b      	movs	r2, #59	; 0x3b
   1484e:	2102      	movs	r1, #2
   14850:	5499      	strb	r1, [r3, r2]

		/* Set the remaining gas sensor settings and link the heating profile */
		t_dev.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   14852:	2308      	movs	r3, #8
   14854:	18fb      	adds	r3, r7, r3
   14856:	223e      	movs	r2, #62	; 0x3e
   14858:	2101      	movs	r1, #1
   1485a:	5499      	strb	r1, [r3, r2]
		/* Create a ramp heat waveform in 3 steps */
		t_dev.gas_sett.heatr_temp = 320; /* degree Celsius */
   1485c:	2308      	movs	r3, #8
   1485e:	18fb      	adds	r3, r7, r3
   14860:	2240      	movs	r2, #64	; 0x40
   14862:	21a0      	movs	r1, #160	; 0xa0
   14864:	0049      	lsls	r1, r1, #1
   14866:	5299      	strh	r1, [r3, r2]
		t_dev.gas_sett.heatr_dur = 150; /* milliseconds */
   14868:	2308      	movs	r3, #8
   1486a:	18fb      	adds	r3, r7, r3
   1486c:	2242      	movs	r2, #66	; 0x42
   1486e:	2196      	movs	r1, #150	; 0x96
   14870:	5299      	strh	r1, [r3, r2]

		set_required_settings = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL;
   14872:	23a4      	movs	r3, #164	; 0xa4
   14874:	18fb      	adds	r3, r7, r3
   14876:	22df      	movs	r2, #223	; 0xdf
   14878:	701a      	strb	r2, [r3, #0]

		uint16_t profile_dur = 1000;
   1487a:	23a2      	movs	r3, #162	; 0xa2
   1487c:	18fb      	adds	r3, r7, r3
   1487e:	22fa      	movs	r2, #250	; 0xfa
   14880:	0092      	lsls	r2, r2, #2
   14882:	801a      	strh	r2, [r3, #0]
		//bme680_get_profile_dur(&profile_dur, &t_dev);
		
		/* Set the desired sensor configuration */
		rslt = bme680_set_sensor_settings(set_required_settings,&t_dev);
   14884:	23a4      	movs	r3, #164	; 0xa4
   14886:	18fb      	adds	r3, r7, r3
   14888:	781b      	ldrb	r3, [r3, #0]
   1488a:	b29b      	uxth	r3, r3
   1488c:	22a7      	movs	r2, #167	; 0xa7
   1488e:	18bc      	adds	r4, r7, r2
   14890:	2208      	movs	r2, #8
   14892:	18ba      	adds	r2, r7, r2
   14894:	0011      	movs	r1, r2
   14896:	0018      	movs	r0, r3
   14898:	4b2e      	ldr	r3, [pc, #184]	; (14954 <read_bme680_3times+0x1a8>)
   1489a:	4798      	blx	r3
   1489c:	0003      	movs	r3, r0
   1489e:	7023      	strb	r3, [r4, #0]

		/* Set the power mode */
		rslt = bme680_set_sensor_mode(&t_dev);
   148a0:	23a7      	movs	r3, #167	; 0xa7
   148a2:	18fc      	adds	r4, r7, r3
   148a4:	2308      	movs	r3, #8
   148a6:	18fb      	adds	r3, r7, r3
   148a8:	0018      	movs	r0, r3
   148aa:	4b2b      	ldr	r3, [pc, #172]	; (14958 <read_bme680_3times+0x1ac>)
   148ac:	4798      	blx	r3
   148ae:	0003      	movs	r3, r0
   148b0:	7023      	strb	r3, [r4, #0]
	


		uint8_t i = 0;
   148b2:	23a6      	movs	r3, #166	; 0xa6
   148b4:	18fb      	adds	r3, r7, r3
   148b6:	2200      	movs	r2, #0
   148b8:	701a      	strb	r2, [r3, #0]
		while ((rslt == BME680_OK) && (i < N_MEAS)) {
   148ba:	e031      	b.n	14920 <read_bme680_3times+0x174>
			t_dev.delay_ms(profile_dur); /* Delay till the measurement is ready */
   148bc:	2308      	movs	r3, #8
   148be:	18fb      	adds	r3, r7, r3
   148c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   148c2:	22a2      	movs	r2, #162	; 0xa2
   148c4:	18ba      	adds	r2, r7, r2
   148c6:	8812      	ldrh	r2, [r2, #0]
   148c8:	0010      	movs	r0, r2
   148ca:	4798      	blx	r3

			rslt = bme680_get_sensor_data(data+i, &t_dev);
   148cc:	23a6      	movs	r3, #166	; 0xa6
   148ce:	18fb      	adds	r3, r7, r3
   148d0:	781a      	ldrb	r2, [r3, #0]
   148d2:	0013      	movs	r3, r2
   148d4:	009b      	lsls	r3, r3, #2
   148d6:	189b      	adds	r3, r3, r2
   148d8:	009b      	lsls	r3, r3, #2
   148da:	001a      	movs	r2, r3
   148dc:	683b      	ldr	r3, [r7, #0]
   148de:	189b      	adds	r3, r3, r2
   148e0:	22a7      	movs	r2, #167	; 0xa7
   148e2:	18bc      	adds	r4, r7, r2
   148e4:	2208      	movs	r2, #8
   148e6:	18ba      	adds	r2, r7, r2
   148e8:	0011      	movs	r1, r2
   148ea:	0018      	movs	r0, r3
   148ec:	4b1b      	ldr	r3, [pc, #108]	; (1495c <read_bme680_3times+0x1b0>)
   148ee:	4798      	blx	r3
   148f0:	0003      	movs	r3, r0
   148f2:	7023      	strb	r3, [r4, #0]

			/* Trigger the next measurement if you would like to read data out continuously */
			if (t_dev.power_mode == BME680_FORCED_MODE) {
   148f4:	2308      	movs	r3, #8
   148f6:	18fb      	adds	r3, r7, r3
   148f8:	2244      	movs	r2, #68	; 0x44
   148fa:	5c9b      	ldrb	r3, [r3, r2]
   148fc:	2b01      	cmp	r3, #1
   148fe:	d108      	bne.n	14912 <read_bme680_3times+0x166>
				rslt = bme680_set_sensor_mode(&t_dev);
   14900:	23a7      	movs	r3, #167	; 0xa7
   14902:	18fc      	adds	r4, r7, r3
   14904:	2308      	movs	r3, #8
   14906:	18fb      	adds	r3, r7, r3
   14908:	0018      	movs	r0, r3
   1490a:	4b13      	ldr	r3, [pc, #76]	; (14958 <read_bme680_3times+0x1ac>)
   1490c:	4798      	blx	r3
   1490e:	0003      	movs	r3, r0
   14910:	7023      	strb	r3, [r4, #0]
			}
			i++;
   14912:	23a6      	movs	r3, #166	; 0xa6
   14914:	18fb      	adds	r3, r7, r3
   14916:	781a      	ldrb	r2, [r3, #0]
   14918:	23a6      	movs	r3, #166	; 0xa6
   1491a:	18fb      	adds	r3, r7, r3
   1491c:	3201      	adds	r2, #1
   1491e:	701a      	strb	r2, [r3, #0]
		while ((rslt == BME680_OK) && (i < N_MEAS)) {
   14920:	23a7      	movs	r3, #167	; 0xa7
   14922:	18fb      	adds	r3, r7, r3
   14924:	781b      	ldrb	r3, [r3, #0]
   14926:	b25b      	sxtb	r3, r3
   14928:	2b00      	cmp	r3, #0
   1492a:	d108      	bne.n	1493e <read_bme680_3times+0x192>
   1492c:	23a6      	movs	r3, #166	; 0xa6
   1492e:	18fb      	adds	r3, r7, r3
   14930:	781a      	ldrb	r2, [r3, #0]
   14932:	23a5      	movs	r3, #165	; 0xa5
   14934:	18fb      	adds	r3, r7, r3
   14936:	781b      	ldrb	r3, [r3, #0]
   14938:	b25b      	sxtb	r3, r3
   1493a:	429a      	cmp	r2, r3
   1493c:	dbbe      	blt.n	148bc <read_bme680_3times+0x110>
		}
	}

	return rslt;
   1493e:	23a7      	movs	r3, #167	; 0xa7
   14940:	18fb      	adds	r3, r7, r3
   14942:	781b      	ldrb	r3, [r3, #0]
   14944:	b25b      	sxtb	r3, r3
}
   14946:	0018      	movs	r0, r3
   14948:	46bd      	mov	sp, r7
   1494a:	b02b      	add	sp, #172	; 0xac
   1494c:	bd90      	pop	{r4, r7, pc}
   1494e:	46c0      	nop			; (mov r8, r8)
   14950:	00012e41 	.word	0x00012e41
   14954:	000131d1 	.word	0x000131d1
   14958:	000136e9 	.word	0x000136e9
   1495c:	00013809 	.word	0x00013809

00014960 <GetBme680Struct>:

struct bme680_dev dev_gas_sensor;

struct bme680_dev * GetBme680Struct(void)
{
   14960:	b580      	push	{r7, lr}
   14962:	af00      	add	r7, sp, #0
	return &dev_gas_sensor;
   14964:	4b01      	ldr	r3, [pc, #4]	; (1496c <GetBme680Struct+0xc>)
}
   14966:	0018      	movs	r0, r3
   14968:	46bd      	mov	sp, r7
   1496a:	bd80      	pop	{r7, pc}
   1496c:	200046c0 	.word	0x200046c0

00014970 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14970:	b580      	push	{r7, lr}
   14972:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   14974:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14978:	4b02      	ldr	r3, [pc, #8]	; (14984 <NVIC_SystemReset+0x14>)
   1497a:	4a03      	ldr	r2, [pc, #12]	; (14988 <NVIC_SystemReset+0x18>)
   1497c:	60da      	str	r2, [r3, #12]
   1497e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   14982:	e7fe      	b.n	14982 <NVIC_SystemReset+0x12>
   14984:	e000ed00 	.word	0xe000ed00
   14988:	05fa0004 	.word	0x05fa0004

0001498c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   1498c:	b580      	push	{r7, lr}
   1498e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   14990:	4b02      	ldr	r3, [pc, #8]	; (1499c <system_reset+0x10>)
   14992:	4798      	blx	r3
}
   14994:	46c0      	nop			; (mov r8, r8)
   14996:	46bd      	mov	sp, r7
   14998:	bd80      	pop	{r7, pc}
   1499a:	46c0      	nop			; (mov r8, r8)
   1499c:	00014971 	.word	0x00014971

000149a0 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   149a0:	b580      	push	{r7, lr}
   149a2:	b086      	sub	sp, #24
   149a4:	af00      	add	r7, sp, #0
   149a6:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   149a8:	4ba1      	ldr	r3, [pc, #644]	; (14c30 <vCommandConsoleTask+0x290>)
   149aa:	0018      	movs	r0, r3
   149ac:	4ba1      	ldr	r3, [pc, #644]	; (14c34 <vCommandConsoleTask+0x294>)
   149ae:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   149b0:	4ba1      	ldr	r3, [pc, #644]	; (14c38 <vCommandConsoleTask+0x298>)
   149b2:	0018      	movs	r0, r3
   149b4:	4b9f      	ldr	r3, [pc, #636]	; (14c34 <vCommandConsoleTask+0x294>)
   149b6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   149b8:	4ba0      	ldr	r3, [pc, #640]	; (14c3c <vCommandConsoleTask+0x29c>)
   149ba:	0018      	movs	r0, r3
   149bc:	4b9d      	ldr	r3, [pc, #628]	; (14c34 <vCommandConsoleTask+0x294>)
   149be:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   149c0:	4b9f      	ldr	r3, [pc, #636]	; (14c40 <vCommandConsoleTask+0x2a0>)
   149c2:	0018      	movs	r0, r3
   149c4:	4b9b      	ldr	r3, [pc, #620]	; (14c34 <vCommandConsoleTask+0x294>)
   149c6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   149c8:	4b9e      	ldr	r3, [pc, #632]	; (14c44 <vCommandConsoleTask+0x2a4>)
   149ca:	0018      	movs	r0, r3
   149cc:	4b99      	ldr	r3, [pc, #612]	; (14c34 <vCommandConsoleTask+0x294>)
   149ce:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   149d0:	4b9d      	ldr	r3, [pc, #628]	; (14c48 <vCommandConsoleTask+0x2a8>)
   149d2:	0018      	movs	r0, r3
   149d4:	4b97      	ldr	r3, [pc, #604]	; (14c34 <vCommandConsoleTask+0x294>)
   149d6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   149d8:	4b9c      	ldr	r3, [pc, #624]	; (14c4c <vCommandConsoleTask+0x2ac>)
   149da:	0018      	movs	r0, r3
   149dc:	4b95      	ldr	r3, [pc, #596]	; (14c34 <vCommandConsoleTask+0x294>)
   149de:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
   149e0:	4b9b      	ldr	r3, [pc, #620]	; (14c50 <vCommandConsoleTask+0x2b0>)
   149e2:	0018      	movs	r0, r3
   149e4:	4b93      	ldr	r3, [pc, #588]	; (14c34 <vCommandConsoleTask+0x294>)
   149e6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   149e8:	4b9a      	ldr	r3, [pc, #616]	; (14c54 <vCommandConsoleTask+0x2b4>)
   149ea:	0018      	movs	r0, r3
   149ec:	4b91      	ldr	r3, [pc, #580]	; (14c34 <vCommandConsoleTask+0x294>)
   149ee:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand( &xBme680GetCommand );
   149f0:	4b99      	ldr	r3, [pc, #612]	; (14c58 <vCommandConsoleTask+0x2b8>)
   149f2:	0018      	movs	r0, r3
   149f4:	4b8f      	ldr	r3, [pc, #572]	; (14c34 <vCommandConsoleTask+0x294>)
   149f6:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   149f8:	2317      	movs	r3, #23
   149fa:	18fb      	adds	r3, r7, r3
   149fc:	2200      	movs	r2, #0
   149fe:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   14a00:	4b96      	ldr	r3, [pc, #600]	; (14c5c <vCommandConsoleTask+0x2bc>)
   14a02:	0018      	movs	r0, r3
   14a04:	4b96      	ldr	r3, [pc, #600]	; (14c60 <vCommandConsoleTask+0x2c0>)
   14a06:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   14a08:	2203      	movs	r2, #3
   14a0a:	2100      	movs	r1, #0
   14a0c:	2001      	movs	r0, #1
   14a0e:	4b95      	ldr	r3, [pc, #596]	; (14c64 <vCommandConsoleTask+0x2c4>)
   14a10:	4798      	blx	r3
   14a12:	0002      	movs	r2, r0
   14a14:	4b94      	ldr	r3, [pc, #592]	; (14c68 <vCommandConsoleTask+0x2c8>)
   14a16:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   14a18:	4b93      	ldr	r3, [pc, #588]	; (14c68 <vCommandConsoleTask+0x2c8>)
   14a1a:	681b      	ldr	r3, [r3, #0]
   14a1c:	2b00      	cmp	r3, #0
   14a1e:	d107      	bne.n	14a30 <vCommandConsoleTask+0x90>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   14a20:	4b92      	ldr	r3, [pc, #584]	; (14c6c <vCommandConsoleTask+0x2cc>)
   14a22:	0019      	movs	r1, r3
   14a24:	2003      	movs	r0, #3
   14a26:	4b92      	ldr	r3, [pc, #584]	; (14c70 <vCommandConsoleTask+0x2d0>)
   14a28:	4798      	blx	r3
        vTaskSuspend(NULL);
   14a2a:	2000      	movs	r0, #0
   14a2c:	4b91      	ldr	r3, [pc, #580]	; (14c74 <vCommandConsoleTask+0x2d4>)
   14a2e:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   14a30:	230c      	movs	r3, #12
   14a32:	18fb      	adds	r3, r7, r3
   14a34:	0018      	movs	r0, r3
   14a36:	4b90      	ldr	r3, [pc, #576]	; (14c78 <vCommandConsoleTask+0x2d8>)
   14a38:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   14a3a:	230c      	movs	r3, #12
   14a3c:	18fb      	adds	r3, r7, r3
   14a3e:	781b      	ldrb	r3, [r3, #0]
   14a40:	2b0a      	cmp	r3, #10
   14a42:	d004      	beq.n	14a4e <vCommandConsoleTask+0xae>
   14a44:	230c      	movs	r3, #12
   14a46:	18fb      	adds	r3, r7, r3
   14a48:	781b      	ldrb	r3, [r3, #0]
   14a4a:	2b0d      	cmp	r3, #13
   14a4c:	d139      	bne.n	14ac2 <vCommandConsoleTask+0x122>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   14a4e:	4b8b      	ldr	r3, [pc, #556]	; (14c7c <vCommandConsoleTask+0x2dc>)
   14a50:	0018      	movs	r0, r3
   14a52:	4b83      	ldr	r3, [pc, #524]	; (14c60 <vCommandConsoleTask+0x2c0>)
   14a54:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   14a56:	4b8a      	ldr	r3, [pc, #552]	; (14c80 <vCommandConsoleTask+0x2e0>)
   14a58:	2200      	movs	r2, #0
   14a5a:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   14a5c:	4b89      	ldr	r3, [pc, #548]	; (14c84 <vCommandConsoleTask+0x2e4>)
   14a5e:	2200      	movs	r2, #0
   14a60:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   14a62:	4989      	ldr	r1, [pc, #548]	; (14c88 <vCommandConsoleTask+0x2e8>)
   14a64:	4b89      	ldr	r3, [pc, #548]	; (14c8c <vCommandConsoleTask+0x2ec>)
   14a66:	2231      	movs	r2, #49	; 0x31
   14a68:	0018      	movs	r0, r3
   14a6a:	4b89      	ldr	r3, [pc, #548]	; (14c90 <vCommandConsoleTask+0x2f0>)
   14a6c:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   14a6e:	4b87      	ldr	r3, [pc, #540]	; (14c8c <vCommandConsoleTask+0x2ec>)
   14a70:	2231      	movs	r2, #49	; 0x31
   14a72:	2100      	movs	r1, #0
   14a74:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   14a76:	2380      	movs	r3, #128	; 0x80
   14a78:	005a      	lsls	r2, r3, #1
   14a7a:	4986      	ldr	r1, [pc, #536]	; (14c94 <vCommandConsoleTask+0x2f4>)
   14a7c:	4b82      	ldr	r3, [pc, #520]	; (14c88 <vCommandConsoleTask+0x2e8>)
   14a7e:	0018      	movs	r0, r3
   14a80:	4b85      	ldr	r3, [pc, #532]	; (14c98 <vCommandConsoleTask+0x2f8>)
   14a82:	4798      	blx	r3
   14a84:	0003      	movs	r3, r0
   14a86:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   14a88:	4b82      	ldr	r3, [pc, #520]	; (14c94 <vCommandConsoleTask+0x2f4>)
   14a8a:	22ff      	movs	r2, #255	; 0xff
   14a8c:	2100      	movs	r1, #0
   14a8e:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   14a90:	4b80      	ldr	r3, [pc, #512]	; (14c94 <vCommandConsoleTask+0x2f4>)
   14a92:	0018      	movs	r0, r3
   14a94:	4b72      	ldr	r3, [pc, #456]	; (14c60 <vCommandConsoleTask+0x2c0>)
   14a96:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   14a98:	693b      	ldr	r3, [r7, #16]
   14a9a:	2b00      	cmp	r3, #0
   14a9c:	d1eb      	bne.n	14a76 <vCommandConsoleTask+0xd6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   14a9e:	2317      	movs	r3, #23
   14aa0:	18fb      	adds	r3, r7, r3
   14aa2:	2200      	movs	r2, #0
   14aa4:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14aa6:	4b78      	ldr	r3, [pc, #480]	; (14c88 <vCommandConsoleTask+0x2e8>)
   14aa8:	2232      	movs	r2, #50	; 0x32
   14aaa:	2100      	movs	r1, #0
   14aac:	0018      	movs	r0, r3
   14aae:	4b7b      	ldr	r3, [pc, #492]	; (14c9c <vCommandConsoleTask+0x2fc>)
   14ab0:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   14ab2:	2380      	movs	r3, #128	; 0x80
   14ab4:	005a      	lsls	r2, r3, #1
   14ab6:	4b77      	ldr	r3, [pc, #476]	; (14c94 <vCommandConsoleTask+0x2f4>)
   14ab8:	2100      	movs	r1, #0
   14aba:	0018      	movs	r0, r3
   14abc:	4b77      	ldr	r3, [pc, #476]	; (14c9c <vCommandConsoleTask+0x2fc>)
   14abe:	4798      	blx	r3
   14ac0:	e0b5      	b.n	14c2e <vCommandConsoleTask+0x28e>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   14ac2:	4b6f      	ldr	r3, [pc, #444]	; (14c80 <vCommandConsoleTask+0x2e0>)
   14ac4:	781b      	ldrb	r3, [r3, #0]
   14ac6:	2b00      	cmp	r3, #0
   14ac8:	d059      	beq.n	14b7e <vCommandConsoleTask+0x1de>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   14aca:	4b6e      	ldr	r3, [pc, #440]	; (14c84 <vCommandConsoleTask+0x2e4>)
   14acc:	781b      	ldrb	r3, [r3, #0]
   14ace:	2b03      	cmp	r3, #3
   14ad0:	d80c      	bhi.n	14aec <vCommandConsoleTask+0x14c>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   14ad2:	4b6c      	ldr	r3, [pc, #432]	; (14c84 <vCommandConsoleTask+0x2e4>)
   14ad4:	781b      	ldrb	r3, [r3, #0]
   14ad6:	1c5a      	adds	r2, r3, #1
   14ad8:	b2d1      	uxtb	r1, r2
   14ada:	4a6a      	ldr	r2, [pc, #424]	; (14c84 <vCommandConsoleTask+0x2e4>)
   14adc:	7011      	strb	r1, [r2, #0]
   14ade:	001a      	movs	r2, r3
   14ae0:	230c      	movs	r3, #12
   14ae2:	18fb      	adds	r3, r7, r3
   14ae4:	7819      	ldrb	r1, [r3, #0]
   14ae6:	4b6e      	ldr	r3, [pc, #440]	; (14ca0 <vCommandConsoleTask+0x300>)
   14ae8:	5499      	strb	r1, [r3, r2]
   14aea:	e005      	b.n	14af8 <vCommandConsoleTask+0x158>
                } else {
                    isEscapeCode = false;
   14aec:	4b64      	ldr	r3, [pc, #400]	; (14c80 <vCommandConsoleTask+0x2e0>)
   14aee:	2200      	movs	r2, #0
   14af0:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   14af2:	4b64      	ldr	r3, [pc, #400]	; (14c84 <vCommandConsoleTask+0x2e4>)
   14af4:	2200      	movs	r2, #0
   14af6:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   14af8:	4b62      	ldr	r3, [pc, #392]	; (14c84 <vCommandConsoleTask+0x2e4>)
   14afa:	781b      	ldrb	r3, [r3, #0]
   14afc:	2b01      	cmp	r3, #1
   14afe:	d997      	bls.n	14a30 <vCommandConsoleTask+0x90>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   14b00:	4a68      	ldr	r2, [pc, #416]	; (14ca4 <vCommandConsoleTask+0x304>)
   14b02:	4b67      	ldr	r3, [pc, #412]	; (14ca0 <vCommandConsoleTask+0x300>)
   14b04:	0011      	movs	r1, r2
   14b06:	0018      	movs	r0, r3
   14b08:	4b67      	ldr	r3, [pc, #412]	; (14ca8 <vCommandConsoleTask+0x308>)
   14b0a:	4798      	blx	r3
   14b0c:	1e03      	subs	r3, r0, #0
   14b0e:	d02f      	beq.n	14b70 <vCommandConsoleTask+0x1d0>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   14b10:	4966      	ldr	r1, [pc, #408]	; (14cac <vCommandConsoleTask+0x30c>)
   14b12:	4b5d      	ldr	r3, [pc, #372]	; (14c88 <vCommandConsoleTask+0x2e8>)
   14b14:	221b      	movs	r2, #27
   14b16:	0018      	movs	r0, r3
   14b18:	4b65      	ldr	r3, [pc, #404]	; (14cb0 <vCommandConsoleTask+0x310>)
   14b1a:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   14b1c:	4b5a      	ldr	r3, [pc, #360]	; (14c88 <vCommandConsoleTask+0x2e8>)
   14b1e:	0018      	movs	r0, r3
   14b20:	4b4f      	ldr	r3, [pc, #316]	; (14c60 <vCommandConsoleTask+0x2c0>)
   14b22:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   14b24:	2317      	movs	r3, #23
   14b26:	18fb      	adds	r3, r7, r3
   14b28:	2200      	movs	r2, #0
   14b2a:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14b2c:	4b56      	ldr	r3, [pc, #344]	; (14c88 <vCommandConsoleTask+0x2e8>)
   14b2e:	2232      	movs	r2, #50	; 0x32
   14b30:	2100      	movs	r1, #0
   14b32:	0018      	movs	r0, r3
   14b34:	4b59      	ldr	r3, [pc, #356]	; (14c9c <vCommandConsoleTask+0x2fc>)
   14b36:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   14b38:	4954      	ldr	r1, [pc, #336]	; (14c8c <vCommandConsoleTask+0x2ec>)
   14b3a:	4b53      	ldr	r3, [pc, #332]	; (14c88 <vCommandConsoleTask+0x2e8>)
   14b3c:	2231      	movs	r2, #49	; 0x31
   14b3e:	0018      	movs	r0, r3
   14b40:	4b53      	ldr	r3, [pc, #332]	; (14c90 <vCommandConsoleTask+0x2f0>)
   14b42:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   14b44:	4b50      	ldr	r3, [pc, #320]	; (14c88 <vCommandConsoleTask+0x2e8>)
   14b46:	0018      	movs	r0, r3
   14b48:	4b5a      	ldr	r3, [pc, #360]	; (14cb4 <vCommandConsoleTask+0x314>)
   14b4a:	4798      	blx	r3
   14b4c:	0003      	movs	r3, r0
   14b4e:	2b30      	cmp	r3, #48	; 0x30
   14b50:	d806      	bhi.n	14b60 <vCommandConsoleTask+0x1c0>
   14b52:	4b4e      	ldr	r3, [pc, #312]	; (14c8c <vCommandConsoleTask+0x2ec>)
   14b54:	0018      	movs	r0, r3
   14b56:	4b57      	ldr	r3, [pc, #348]	; (14cb4 <vCommandConsoleTask+0x314>)
   14b58:	4798      	blx	r3
   14b5a:	0003      	movs	r3, r0
   14b5c:	b2da      	uxtb	r2, r3
   14b5e:	e000      	b.n	14b62 <vCommandConsoleTask+0x1c2>
   14b60:	2231      	movs	r2, #49	; 0x31
   14b62:	2317      	movs	r3, #23
   14b64:	18fb      	adds	r3, r7, r3
   14b66:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   14b68:	4b47      	ldr	r3, [pc, #284]	; (14c88 <vCommandConsoleTask+0x2e8>)
   14b6a:	0018      	movs	r0, r3
   14b6c:	4b3c      	ldr	r3, [pc, #240]	; (14c60 <vCommandConsoleTask+0x2c0>)
   14b6e:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   14b70:	4b43      	ldr	r3, [pc, #268]	; (14c80 <vCommandConsoleTask+0x2e0>)
   14b72:	2200      	movs	r2, #0
   14b74:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   14b76:	4b43      	ldr	r3, [pc, #268]	; (14c84 <vCommandConsoleTask+0x2e4>)
   14b78:	2200      	movs	r2, #0
   14b7a:	701a      	strb	r2, [r3, #0]
   14b7c:	e758      	b.n	14a30 <vCommandConsoleTask+0x90>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   14b7e:	230c      	movs	r3, #12
   14b80:	18fb      	adds	r3, r7, r3
   14b82:	781b      	ldrb	r3, [r3, #0]
   14b84:	2b0d      	cmp	r3, #13
   14b86:	d100      	bne.n	14b8a <vCommandConsoleTask+0x1ea>
   14b88:	e752      	b.n	14a30 <vCommandConsoleTask+0x90>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14b8a:	230c      	movs	r3, #12
   14b8c:	18fb      	adds	r3, r7, r3
   14b8e:	781b      	ldrb	r3, [r3, #0]
   14b90:	2b08      	cmp	r3, #8
   14b92:	d004      	beq.n	14b9e <vCommandConsoleTask+0x1fe>
   14b94:	230c      	movs	r3, #12
   14b96:	18fb      	adds	r3, r7, r3
   14b98:	781b      	ldrb	r3, [r3, #0]
   14b9a:	2b7f      	cmp	r3, #127	; 0x7f
   14b9c:	d11c      	bne.n	14bd8 <vCommandConsoleTask+0x238>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   14b9e:	2308      	movs	r3, #8
   14ba0:	18fb      	adds	r3, r7, r3
   14ba2:	4a45      	ldr	r2, [pc, #276]	; (14cb8 <vCommandConsoleTask+0x318>)
   14ba4:	6812      	ldr	r2, [r2, #0]
   14ba6:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   14ba8:	2308      	movs	r3, #8
   14baa:	18fb      	adds	r3, r7, r3
   14bac:	0018      	movs	r0, r3
   14bae:	4b2c      	ldr	r3, [pc, #176]	; (14c60 <vCommandConsoleTask+0x2c0>)
   14bb0:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   14bb2:	2317      	movs	r3, #23
   14bb4:	18fb      	adds	r3, r7, r3
   14bb6:	781b      	ldrb	r3, [r3, #0]
   14bb8:	2b00      	cmp	r3, #0
   14bba:	d037      	beq.n	14c2c <vCommandConsoleTask+0x28c>
                    cInputIndex--;
   14bbc:	2317      	movs	r3, #23
   14bbe:	18fb      	adds	r3, r7, r3
   14bc0:	781a      	ldrb	r2, [r3, #0]
   14bc2:	2317      	movs	r3, #23
   14bc4:	18fb      	adds	r3, r7, r3
   14bc6:	3a01      	subs	r2, #1
   14bc8:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   14bca:	2317      	movs	r3, #23
   14bcc:	18fb      	adds	r3, r7, r3
   14bce:	781b      	ldrb	r3, [r3, #0]
   14bd0:	4a2d      	ldr	r2, [pc, #180]	; (14c88 <vCommandConsoleTask+0x2e8>)
   14bd2:	2100      	movs	r1, #0
   14bd4:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14bd6:	e029      	b.n	14c2c <vCommandConsoleTask+0x28c>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   14bd8:	230c      	movs	r3, #12
   14bda:	18fb      	adds	r3, r7, r3
   14bdc:	781b      	ldrb	r3, [r3, #0]
   14bde:	2b1b      	cmp	r3, #27
   14be0:	d106      	bne.n	14bf0 <vCommandConsoleTask+0x250>
                isEscapeCode = true;  // Next characters will be code arguments
   14be2:	4b27      	ldr	r3, [pc, #156]	; (14c80 <vCommandConsoleTask+0x2e0>)
   14be4:	2201      	movs	r2, #1
   14be6:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   14be8:	4b26      	ldr	r3, [pc, #152]	; (14c84 <vCommandConsoleTask+0x2e4>)
   14bea:	2200      	movs	r2, #0
   14bec:	701a      	strb	r2, [r3, #0]
   14bee:	e71f      	b.n	14a30 <vCommandConsoleTask+0x90>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   14bf0:	2317      	movs	r3, #23
   14bf2:	18fb      	adds	r3, r7, r3
   14bf4:	781b      	ldrb	r3, [r3, #0]
   14bf6:	2b31      	cmp	r3, #49	; 0x31
   14bf8:	d80e      	bhi.n	14c18 <vCommandConsoleTask+0x278>
                    pcInputString[cInputIndex] = cRxedChar[0];
   14bfa:	2317      	movs	r3, #23
   14bfc:	18fb      	adds	r3, r7, r3
   14bfe:	781b      	ldrb	r3, [r3, #0]
   14c00:	220c      	movs	r2, #12
   14c02:	18ba      	adds	r2, r7, r2
   14c04:	7811      	ldrb	r1, [r2, #0]
   14c06:	4a20      	ldr	r2, [pc, #128]	; (14c88 <vCommandConsoleTask+0x2e8>)
   14c08:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   14c0a:	2317      	movs	r3, #23
   14c0c:	18fb      	adds	r3, r7, r3
   14c0e:	781a      	ldrb	r2, [r3, #0]
   14c10:	2317      	movs	r3, #23
   14c12:	18fb      	adds	r3, r7, r3
   14c14:	3201      	adds	r2, #1
   14c16:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   14c18:	230c      	movs	r3, #12
   14c1a:	18fb      	adds	r3, r7, r3
   14c1c:	2200      	movs	r2, #0
   14c1e:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   14c20:	230c      	movs	r3, #12
   14c22:	18fb      	adds	r3, r7, r3
   14c24:	0018      	movs	r0, r3
   14c26:	4b0e      	ldr	r3, [pc, #56]	; (14c60 <vCommandConsoleTask+0x2c0>)
   14c28:	4798      	blx	r3
   14c2a:	e701      	b.n	14a30 <vCommandConsoleTask+0x90>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14c2c:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   14c2e:	e6ff      	b.n	14a30 <vCommandConsoleTask+0x90>
   14c30:	000391a0 	.word	0x000391a0
   14c34:	0001a769 	.word	0x0001a769
   14c38:	00039190 	.word	0x00039190
   14c3c:	00039220 	.word	0x00039220
   14c40:	000391b0 	.word	0x000391b0
   14c44:	000391c0 	.word	0x000391c0
   14c48:	000391d0 	.word	0x000391d0
   14c4c:	000391e0 	.word	0x000391e0
   14c50:	000391f0 	.word	0x000391f0
   14c54:	00039200 	.word	0x00039200
   14c58:	00039210 	.word	0x00039210
   14c5c:	00038d68 	.word	0x00038d68
   14c60:	00020745 	.word	0x00020745
   14c64:	0001cde5 	.word	0x0001cde5
   14c68:	20004718 	.word	0x20004718
   14c6c:	00038fb8 	.word	0x00038fb8
   14c70:	00020831 	.word	0x00020831
   14c74:	0001ebd1 	.word	0x0001ebd1
   14c78:	00014cbd 	.word	0x00014cbd
   14c7c:	00038fd8 	.word	0x00038fd8
   14c80:	200003a4 	.word	0x200003a4
   14c84:	200003a5 	.word	0x200003a5
   14c88:	200003dc 	.word	0x200003dc
   14c8c:	200003a8 	.word	0x200003a8
   14c90:	00037ceb 	.word	0x00037ceb
   14c94:	20000410 	.word	0x20000410
   14c98:	0001a7d9 	.word	0x0001a7d9
   14c9c:	00037903 	.word	0x00037903
   14ca0:	20000510 	.word	0x20000510
   14ca4:	00038fdc 	.word	0x00038fdc
   14ca8:	00037c05 	.word	0x00037c05
   14cac:	00038fe0 	.word	0x00038fe0
   14cb0:	00037bc1 	.word	0x00037bc1
   14cb4:	00037cbb 	.word	0x00037cbb
   14cb8:	00038fe8 	.word	0x00038fe8

00014cbc <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   14cbc:	b580      	push	{r7, lr}
   14cbe:	b084      	sub	sp, #16
   14cc0:	af00      	add	r7, sp, #0
   14cc2:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   14cc4:	687b      	ldr	r3, [r7, #4]
   14cc6:	0018      	movs	r0, r3
   14cc8:	4b0c      	ldr	r3, [pc, #48]	; (14cfc <FreeRTOS_read+0x40>)
   14cca:	4798      	blx	r3
   14ccc:	0003      	movs	r3, r0
   14cce:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   14cd0:	e00d      	b.n	14cee <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   14cd2:	4b0b      	ldr	r3, [pc, #44]	; (14d00 <FreeRTOS_read+0x44>)
   14cd4:	681a      	ldr	r2, [r3, #0]
   14cd6:	2301      	movs	r3, #1
   14cd8:	425b      	negs	r3, r3
   14cda:	0019      	movs	r1, r3
   14cdc:	0010      	movs	r0, r2
   14cde:	4b09      	ldr	r3, [pc, #36]	; (14d04 <FreeRTOS_read+0x48>)
   14ce0:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   14ce2:	687b      	ldr	r3, [r7, #4]
   14ce4:	0018      	movs	r0, r3
   14ce6:	4b05      	ldr	r3, [pc, #20]	; (14cfc <FreeRTOS_read+0x40>)
   14ce8:	4798      	blx	r3
   14cea:	0003      	movs	r3, r0
   14cec:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   14cee:	68fb      	ldr	r3, [r7, #12]
   14cf0:	3301      	adds	r3, #1
   14cf2:	d0ee      	beq.n	14cd2 <FreeRTOS_read+0x16>
    }
}
   14cf4:	46c0      	nop			; (mov r8, r8)
   14cf6:	46bd      	mov	sp, r7
   14cf8:	b004      	add	sp, #16
   14cfa:	bd80      	pop	{r7, pc}
   14cfc:	000207e1 	.word	0x000207e1
   14d00:	20004718 	.word	0x20004718
   14d04:	0001dd9d 	.word	0x0001dd9d

00014d08 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   14d08:	b580      	push	{r7, lr}
   14d0a:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   14d0c:	4b0a      	ldr	r3, [pc, #40]	; (14d38 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14d0e:	2200      	movs	r2, #0
   14d10:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   14d12:	4b0a      	ldr	r3, [pc, #40]	; (14d3c <CliCharReadySemaphoreGiveFromISR+0x34>)
   14d14:	681b      	ldr	r3, [r3, #0]
   14d16:	4a08      	ldr	r2, [pc, #32]	; (14d38 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14d18:	0011      	movs	r1, r2
   14d1a:	0018      	movs	r0, r3
   14d1c:	4b08      	ldr	r3, [pc, #32]	; (14d40 <CliCharReadySemaphoreGiveFromISR+0x38>)
   14d1e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14d20:	4b05      	ldr	r3, [pc, #20]	; (14d38 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14d22:	681b      	ldr	r3, [r3, #0]
   14d24:	2b00      	cmp	r3, #0
   14d26:	d003      	beq.n	14d30 <CliCharReadySemaphoreGiveFromISR+0x28>
   14d28:	4b06      	ldr	r3, [pc, #24]	; (14d44 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   14d2a:	2280      	movs	r2, #128	; 0x80
   14d2c:	0552      	lsls	r2, r2, #21
   14d2e:	601a      	str	r2, [r3, #0]
}
   14d30:	46c0      	nop			; (mov r8, r8)
   14d32:	46bd      	mov	sp, r7
   14d34:	bd80      	pop	{r7, pc}
   14d36:	46c0      	nop			; (mov r8, r8)
   14d38:	20000514 	.word	0x20000514
   14d3c:	20004718 	.word	0x20004718
   14d40:	0001d715 	.word	0x0001d715
   14d44:	e000ed04 	.word	0xe000ed04

00014d48 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14d48:	b5b0      	push	{r4, r5, r7, lr}
   14d4a:	b08a      	sub	sp, #40	; 0x28
   14d4c:	af02      	add	r7, sp, #8
   14d4e:	60f8      	str	r0, [r7, #12]
   14d50:	60b9      	str	r1, [r7, #8]
   14d52:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   14d54:	4b49      	ldr	r3, [pc, #292]	; (14e7c <CLI_GetImuData+0x134>)
   14d56:	4798      	blx	r3
   14d58:	0003      	movs	r3, r0
   14d5a:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   14d5c:	231b      	movs	r3, #27
   14d5e:	18fa      	adds	r2, r7, r3
   14d60:	69fb      	ldr	r3, [r7, #28]
   14d62:	0011      	movs	r1, r2
   14d64:	0018      	movs	r0, r3
   14d66:	4b46      	ldr	r3, [pc, #280]	; (14e80 <CLI_GetImuData+0x138>)
   14d68:	4798      	blx	r3

    if (reg) {
   14d6a:	231b      	movs	r3, #27
   14d6c:	18fb      	adds	r3, r7, r3
   14d6e:	781b      	ldrb	r3, [r3, #0]
   14d70:	2b00      	cmp	r3, #0
   14d72:	d064      	beq.n	14e3e <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   14d74:	4b43      	ldr	r3, [pc, #268]	; (14e84 <CLI_GetImuData+0x13c>)
   14d76:	2206      	movs	r2, #6
   14d78:	2100      	movs	r1, #0
   14d7a:	0018      	movs	r0, r3
   14d7c:	4b42      	ldr	r3, [pc, #264]	; (14e88 <CLI_GetImuData+0x140>)
   14d7e:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   14d80:	4a40      	ldr	r2, [pc, #256]	; (14e84 <CLI_GetImuData+0x13c>)
   14d82:	69fb      	ldr	r3, [r7, #28]
   14d84:	0011      	movs	r1, r2
   14d86:	0018      	movs	r0, r3
   14d88:	4b40      	ldr	r3, [pc, #256]	; (14e8c <CLI_GetImuData+0x144>)
   14d8a:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   14d8c:	4b3d      	ldr	r3, [pc, #244]	; (14e84 <CLI_GetImuData+0x13c>)
   14d8e:	2200      	movs	r2, #0
   14d90:	5e9b      	ldrsh	r3, [r3, r2]
   14d92:	0018      	movs	r0, r3
   14d94:	4b3e      	ldr	r3, [pc, #248]	; (14e90 <CLI_GetImuData+0x148>)
   14d96:	4798      	blx	r3
   14d98:	1c02      	adds	r2, r0, #0
   14d9a:	4b3e      	ldr	r3, [pc, #248]	; (14e94 <CLI_GetImuData+0x14c>)
   14d9c:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   14d9e:	4b39      	ldr	r3, [pc, #228]	; (14e84 <CLI_GetImuData+0x13c>)
   14da0:	2202      	movs	r2, #2
   14da2:	5e9b      	ldrsh	r3, [r3, r2]
   14da4:	0018      	movs	r0, r3
   14da6:	4b3a      	ldr	r3, [pc, #232]	; (14e90 <CLI_GetImuData+0x148>)
   14da8:	4798      	blx	r3
   14daa:	1c02      	adds	r2, r0, #0
   14dac:	4b39      	ldr	r3, [pc, #228]	; (14e94 <CLI_GetImuData+0x14c>)
   14dae:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   14db0:	4b34      	ldr	r3, [pc, #208]	; (14e84 <CLI_GetImuData+0x13c>)
   14db2:	2204      	movs	r2, #4
   14db4:	5e9b      	ldrsh	r3, [r3, r2]
   14db6:	0018      	movs	r0, r3
   14db8:	4b35      	ldr	r3, [pc, #212]	; (14e90 <CLI_GetImuData+0x148>)
   14dba:	4798      	blx	r3
   14dbc:	1c02      	adds	r2, r0, #0
   14dbe:	4b35      	ldr	r3, [pc, #212]	; (14e94 <CLI_GetImuData+0x14c>)
   14dc0:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   14dc2:	4b34      	ldr	r3, [pc, #208]	; (14e94 <CLI_GetImuData+0x14c>)
   14dc4:	681a      	ldr	r2, [r3, #0]
   14dc6:	4b34      	ldr	r3, [pc, #208]	; (14e98 <CLI_GetImuData+0x150>)
   14dc8:	1c10      	adds	r0, r2, #0
   14dca:	4798      	blx	r3
   14dcc:	0005      	movs	r5, r0
   14dce:	4b31      	ldr	r3, [pc, #196]	; (14e94 <CLI_GetImuData+0x14c>)
   14dd0:	685a      	ldr	r2, [r3, #4]
   14dd2:	4b31      	ldr	r3, [pc, #196]	; (14e98 <CLI_GetImuData+0x150>)
   14dd4:	1c10      	adds	r0, r2, #0
   14dd6:	4798      	blx	r3
   14dd8:	0004      	movs	r4, r0
   14dda:	4b2e      	ldr	r3, [pc, #184]	; (14e94 <CLI_GetImuData+0x14c>)
   14ddc:	689a      	ldr	r2, [r3, #8]
   14dde:	4b2e      	ldr	r3, [pc, #184]	; (14e98 <CLI_GetImuData+0x150>)
   14de0:	1c10      	adds	r0, r2, #0
   14de2:	4798      	blx	r3
   14de4:	0003      	movs	r3, r0
   14de6:	4a2d      	ldr	r2, [pc, #180]	; (14e9c <CLI_GetImuData+0x154>)
   14de8:	68b9      	ldr	r1, [r7, #8]
   14dea:	68f8      	ldr	r0, [r7, #12]
   14dec:	9301      	str	r3, [sp, #4]
   14dee:	9400      	str	r4, [sp, #0]
   14df0:	002b      	movs	r3, r5
   14df2:	4c2b      	ldr	r4, [pc, #172]	; (14ea0 <CLI_GetImuData+0x158>)
   14df4:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   14df6:	4b27      	ldr	r3, [pc, #156]	; (14e94 <CLI_GetImuData+0x14c>)
   14df8:	681a      	ldr	r2, [r3, #0]
   14dfa:	4b27      	ldr	r3, [pc, #156]	; (14e98 <CLI_GetImuData+0x150>)
   14dfc:	1c10      	adds	r0, r2, #0
   14dfe:	4798      	blx	r3
   14e00:	0003      	movs	r3, r0
   14e02:	b21a      	sxth	r2, r3
   14e04:	2314      	movs	r3, #20
   14e06:	18fb      	adds	r3, r7, r3
   14e08:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   14e0a:	4b22      	ldr	r3, [pc, #136]	; (14e94 <CLI_GetImuData+0x14c>)
   14e0c:	685a      	ldr	r2, [r3, #4]
   14e0e:	4b22      	ldr	r3, [pc, #136]	; (14e98 <CLI_GetImuData+0x150>)
   14e10:	1c10      	adds	r0, r2, #0
   14e12:	4798      	blx	r3
   14e14:	0003      	movs	r3, r0
   14e16:	b21a      	sxth	r2, r3
   14e18:	2314      	movs	r3, #20
   14e1a:	18fb      	adds	r3, r7, r3
   14e1c:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   14e1e:	4b1d      	ldr	r3, [pc, #116]	; (14e94 <CLI_GetImuData+0x14c>)
   14e20:	689a      	ldr	r2, [r3, #8]
   14e22:	4b1d      	ldr	r3, [pc, #116]	; (14e98 <CLI_GetImuData+0x150>)
   14e24:	1c10      	adds	r0, r2, #0
   14e26:	4798      	blx	r3
   14e28:	0003      	movs	r3, r0
   14e2a:	b21a      	sxth	r2, r3
   14e2c:	2314      	movs	r3, #20
   14e2e:	18fb      	adds	r3, r7, r3
   14e30:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   14e32:	2314      	movs	r3, #20
   14e34:	18fb      	adds	r3, r7, r3
   14e36:	0018      	movs	r0, r3
   14e38:	4b1a      	ldr	r3, [pc, #104]	; (14ea4 <CLI_GetImuData+0x15c>)
   14e3a:	4798      	blx	r3
   14e3c:	e019      	b.n	14e72 <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   14e3e:	4a1a      	ldr	r2, [pc, #104]	; (14ea8 <CLI_GetImuData+0x160>)
   14e40:	68b9      	ldr	r1, [r7, #8]
   14e42:	68fb      	ldr	r3, [r7, #12]
   14e44:	0018      	movs	r0, r3
   14e46:	4b16      	ldr	r3, [pc, #88]	; (14ea0 <CLI_GetImuData+0x158>)
   14e48:	4798      	blx	r3
		imuPacket.xmg = -1;
   14e4a:	2314      	movs	r3, #20
   14e4c:	18fb      	adds	r3, r7, r3
   14e4e:	2201      	movs	r2, #1
   14e50:	4252      	negs	r2, r2
   14e52:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   14e54:	2314      	movs	r3, #20
   14e56:	18fb      	adds	r3, r7, r3
   14e58:	2202      	movs	r2, #2
   14e5a:	4252      	negs	r2, r2
   14e5c:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   14e5e:	2314      	movs	r3, #20
   14e60:	18fb      	adds	r3, r7, r3
   14e62:	2203      	movs	r2, #3
   14e64:	4252      	negs	r2, r2
   14e66:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   14e68:	2314      	movs	r3, #20
   14e6a:	18fb      	adds	r3, r7, r3
   14e6c:	0018      	movs	r0, r3
   14e6e:	4b0d      	ldr	r3, [pc, #52]	; (14ea4 <CLI_GetImuData+0x15c>)
   14e70:	4798      	blx	r3
    }
    return pdFALSE;
   14e72:	2300      	movs	r3, #0
}
   14e74:	0018      	movs	r0, r3
   14e76:	46bd      	mov	sp, r7
   14e78:	b008      	add	sp, #32
   14e7a:	bdb0      	pop	{r4, r5, r7, pc}
   14e7c:	00017201 	.word	0x00017201
   14e80:	00016bf5 	.word	0x00016bf5
   14e84:	20000518 	.word	0x20000518
   14e88:	00037903 	.word	0x00037903
   14e8c:	00016c31 	.word	0x00016c31
   14e90:	00016485 	.word	0x00016485
   14e94:	20000520 	.word	0x20000520
   14e98:	00035cd9 	.word	0x00035cd9
   14e9c:	00038fec 	.word	0x00038fec
   14ea0:	00037b5d 	.word	0x00037b5d
   14ea4:	00019d81 	.word	0x00019d81
   14ea8:	00039010 	.word	0x00039010

00014eac <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14eac:	b590      	push	{r4, r7, lr}
   14eae:	b087      	sub	sp, #28
   14eb0:	af00      	add	r7, sp, #0
   14eb2:	60f8      	str	r0, [r7, #12]
   14eb4:	60b9      	str	r1, [r7, #8]
   14eb6:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   14eb8:	2317      	movs	r3, #23
   14eba:	18fb      	adds	r3, r7, r3
   14ebc:	221b      	movs	r2, #27
   14ebe:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   14ec0:	2317      	movs	r3, #23
   14ec2:	18fb      	adds	r3, r7, r3
   14ec4:	781b      	ldrb	r3, [r3, #0]
   14ec6:	4a08      	ldr	r2, [pc, #32]	; (14ee8 <xCliClearTerminalScreen+0x3c>)
   14ec8:	4808      	ldr	r0, [pc, #32]	; (14eec <xCliClearTerminalScreen+0x40>)
   14eca:	210f      	movs	r1, #15
   14ecc:	4c08      	ldr	r4, [pc, #32]	; (14ef0 <xCliClearTerminalScreen+0x44>)
   14ece:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   14ed0:	4a06      	ldr	r2, [pc, #24]	; (14eec <xCliClearTerminalScreen+0x40>)
   14ed2:	68b9      	ldr	r1, [r7, #8]
   14ed4:	68fb      	ldr	r3, [r7, #12]
   14ed6:	0018      	movs	r0, r3
   14ed8:	4b05      	ldr	r3, [pc, #20]	; (14ef0 <xCliClearTerminalScreen+0x44>)
   14eda:	4798      	blx	r3
    return pdFALSE;
   14edc:	2300      	movs	r3, #0
}
   14ede:	0018      	movs	r0, r3
   14ee0:	46bd      	mov	sp, r7
   14ee2:	b007      	add	sp, #28
   14ee4:	bd90      	pop	{r4, r7, pc}
   14ee6:	46c0      	nop			; (mov r8, r8)
   14ee8:	00039038 	.word	0x00039038
   14eec:	20000394 	.word	0x20000394
   14ef0:	00037b5d 	.word	0x00037b5d

00014ef4 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14ef4:	b580      	push	{r7, lr}
   14ef6:	b084      	sub	sp, #16
   14ef8:	af00      	add	r7, sp, #0
   14efa:	60f8      	str	r0, [r7, #12]
   14efc:	60b9      	str	r1, [r7, #8]
   14efe:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   14f00:	2002      	movs	r0, #2
   14f02:	4b03      	ldr	r3, [pc, #12]	; (14f10 <CLI_OTAU+0x1c>)
   14f04:	4798      	blx	r3

    return pdFALSE;
   14f06:	2300      	movs	r3, #0
}
   14f08:	0018      	movs	r0, r3
   14f0a:	46bd      	mov	sp, r7
   14f0c:	b004      	add	sp, #16
   14f0e:	bd80      	pop	{r7, pc}
   14f10:	00019d4d 	.word	0x00019d4d

00014f14 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14f14:	b580      	push	{r7, lr}
   14f16:	b084      	sub	sp, #16
   14f18:	af00      	add	r7, sp, #0
   14f1a:	60f8      	str	r0, [r7, #12]
   14f1c:	60b9      	str	r1, [r7, #8]
   14f1e:	607a      	str	r2, [r7, #4]
    system_reset();
   14f20:	4b03      	ldr	r3, [pc, #12]	; (14f30 <CLI_ResetDevice+0x1c>)
   14f22:	4798      	blx	r3
    return pdFALSE;
   14f24:	2300      	movs	r3, #0
}
   14f26:	0018      	movs	r0, r3
   14f28:	46bd      	mov	sp, r7
   14f2a:	b004      	add	sp, #16
   14f2c:	bd80      	pop	{r7, pc}
   14f2e:	46c0      	nop			; (mov r8, r8)
   14f30:	0001498d 	.word	0x0001498d

00014f34 <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14f34:	b590      	push	{r4, r7, lr}
   14f36:	b091      	sub	sp, #68	; 0x44
   14f38:	af00      	add	r7, sp, #0
   14f3a:	60f8      	str	r0, [r7, #12]
   14f3c:	60b9      	str	r1, [r7, #8]
   14f3e:	607a      	str	r2, [r7, #4]
	
	int8_t *pcParameter1, *pcParameter2, *pcParameter3, *pcParameter4;
	BaseType_t xParameter1StringLength, xParameter2StringLength, xParameter3StringLength, xParameter4StringLength, xResult;
	int key, red, green, blue;
	
	pcParameter1 = FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
   14f40:	231c      	movs	r3, #28
   14f42:	18fa      	adds	r2, r7, r3
   14f44:	687b      	ldr	r3, [r7, #4]
   14f46:	2101      	movs	r1, #1
   14f48:	0018      	movs	r0, r3
   14f4a:	4b49      	ldr	r3, [pc, #292]	; (15070 <CLI_NeotrellisSetLed+0x13c>)
   14f4c:	4798      	blx	r3
   14f4e:	0003      	movs	r3, r0
   14f50:	63fb      	str	r3, [r7, #60]	; 0x3c
	pcParameter2 = FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameter2StringLength);
   14f52:	2318      	movs	r3, #24
   14f54:	18fa      	adds	r2, r7, r3
   14f56:	687b      	ldr	r3, [r7, #4]
   14f58:	2102      	movs	r1, #2
   14f5a:	0018      	movs	r0, r3
   14f5c:	4b44      	ldr	r3, [pc, #272]	; (15070 <CLI_NeotrellisSetLed+0x13c>)
   14f5e:	4798      	blx	r3
   14f60:	0003      	movs	r3, r0
   14f62:	63bb      	str	r3, [r7, #56]	; 0x38
	pcParameter3 = FreeRTOS_CLIGetParameter(pcCommandString, 3, &xParameter3StringLength);
   14f64:	2314      	movs	r3, #20
   14f66:	18fa      	adds	r2, r7, r3
   14f68:	687b      	ldr	r3, [r7, #4]
   14f6a:	2103      	movs	r1, #3
   14f6c:	0018      	movs	r0, r3
   14f6e:	4b40      	ldr	r3, [pc, #256]	; (15070 <CLI_NeotrellisSetLed+0x13c>)
   14f70:	4798      	blx	r3
   14f72:	0003      	movs	r3, r0
   14f74:	637b      	str	r3, [r7, #52]	; 0x34
	pcParameter4 = FreeRTOS_CLIGetParameter(pcCommandString, 4, &xParameter4StringLength);
   14f76:	2310      	movs	r3, #16
   14f78:	18fa      	adds	r2, r7, r3
   14f7a:	687b      	ldr	r3, [r7, #4]
   14f7c:	2104      	movs	r1, #4
   14f7e:	0018      	movs	r0, r3
   14f80:	4b3b      	ldr	r3, [pc, #236]	; (15070 <CLI_NeotrellisSetLed+0x13c>)
   14f82:	4798      	blx	r3
   14f84:	0003      	movs	r3, r0
   14f86:	633b      	str	r3, [r7, #48]	; 0x30
	
	pcParameter1[ xParameter1StringLength ] = 0x00;
   14f88:	69fb      	ldr	r3, [r7, #28]
   14f8a:	001a      	movs	r2, r3
   14f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14f8e:	189b      	adds	r3, r3, r2
   14f90:	2200      	movs	r2, #0
   14f92:	701a      	strb	r2, [r3, #0]
	pcParameter2[ xParameter2StringLength ] = 0x00;
   14f94:	69bb      	ldr	r3, [r7, #24]
   14f96:	001a      	movs	r2, r3
   14f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14f9a:	189b      	adds	r3, r3, r2
   14f9c:	2200      	movs	r2, #0
   14f9e:	701a      	strb	r2, [r3, #0]
	pcParameter3[ xParameter3StringLength ] = 0x00;
   14fa0:	697b      	ldr	r3, [r7, #20]
   14fa2:	001a      	movs	r2, r3
   14fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14fa6:	189b      	adds	r3, r3, r2
   14fa8:	2200      	movs	r2, #0
   14faa:	701a      	strb	r2, [r3, #0]
	pcParameter4[ xParameter4StringLength ] = 0x00;
   14fac:	693b      	ldr	r3, [r7, #16]
   14fae:	001a      	movs	r2, r3
   14fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14fb2:	189b      	adds	r3, r3, r2
   14fb4:	2200      	movs	r2, #0
   14fb6:	701a      	strb	r2, [r3, #0]
	
	key = atoi(pcParameter1);
   14fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14fba:	0018      	movs	r0, r3
   14fbc:	4b2d      	ldr	r3, [pc, #180]	; (15074 <CLI_NeotrellisSetLed+0x140>)
   14fbe:	4798      	blx	r3
   14fc0:	0003      	movs	r3, r0
   14fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	red = atoi(pcParameter2);
   14fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14fc6:	0018      	movs	r0, r3
   14fc8:	4b2a      	ldr	r3, [pc, #168]	; (15074 <CLI_NeotrellisSetLed+0x140>)
   14fca:	4798      	blx	r3
   14fcc:	0003      	movs	r3, r0
   14fce:	62bb      	str	r3, [r7, #40]	; 0x28
	green = atoi(pcParameter3);
   14fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14fd2:	0018      	movs	r0, r3
   14fd4:	4b27      	ldr	r3, [pc, #156]	; (15074 <CLI_NeotrellisSetLed+0x140>)
   14fd6:	4798      	blx	r3
   14fd8:	0003      	movs	r3, r0
   14fda:	627b      	str	r3, [r7, #36]	; 0x24
	blue = atoi(pcParameter4);
   14fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14fde:	0018      	movs	r0, r3
   14fe0:	4b24      	ldr	r3, [pc, #144]	; (15074 <CLI_NeotrellisSetLed+0x140>)
   14fe2:	4798      	blx	r3
   14fe4:	0003      	movs	r3, r0
   14fe6:	623b      	str	r3, [r7, #32]
	
	if (key < 0 || key > 15 || red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255 || SeesawSetLed(key, red, green, blue) != 0) {
   14fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14fea:	2b00      	cmp	r3, #0
   14fec:	db20      	blt.n	15030 <CLI_NeotrellisSetLed+0xfc>
   14fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14ff0:	2b0f      	cmp	r3, #15
   14ff2:	dc1d      	bgt.n	15030 <CLI_NeotrellisSetLed+0xfc>
   14ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14ff6:	2b00      	cmp	r3, #0
   14ff8:	db1a      	blt.n	15030 <CLI_NeotrellisSetLed+0xfc>
   14ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14ffc:	2bff      	cmp	r3, #255	; 0xff
   14ffe:	dc17      	bgt.n	15030 <CLI_NeotrellisSetLed+0xfc>
   15000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15002:	2b00      	cmp	r3, #0
   15004:	db14      	blt.n	15030 <CLI_NeotrellisSetLed+0xfc>
   15006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15008:	2bff      	cmp	r3, #255	; 0xff
   1500a:	dc11      	bgt.n	15030 <CLI_NeotrellisSetLed+0xfc>
   1500c:	6a3b      	ldr	r3, [r7, #32]
   1500e:	2b00      	cmp	r3, #0
   15010:	db0e      	blt.n	15030 <CLI_NeotrellisSetLed+0xfc>
   15012:	6a3b      	ldr	r3, [r7, #32]
   15014:	2bff      	cmp	r3, #255	; 0xff
   15016:	dc0b      	bgt.n	15030 <CLI_NeotrellisSetLed+0xfc>
   15018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1501a:	b2d8      	uxtb	r0, r3
   1501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1501e:	b2d9      	uxtb	r1, r3
   15020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15022:	b2da      	uxtb	r2, r3
   15024:	6a3b      	ldr	r3, [r7, #32]
   15026:	b2db      	uxtb	r3, r3
   15028:	4c13      	ldr	r4, [pc, #76]	; (15078 <CLI_NeotrellisSetLed+0x144>)
   1502a:	47a0      	blx	r4
   1502c:	1e03      	subs	r3, r0, #0
   1502e:	d007      	beq.n	15040 <CLI_NeotrellisSetLed+0x10c>
		
		snprintf( pcWriteBuffer, xWriteBufferLen, "Error during set LED\n\r" );
   15030:	4a12      	ldr	r2, [pc, #72]	; (1507c <CLI_NeotrellisSetLed+0x148>)
   15032:	68b9      	ldr	r1, [r7, #8]
   15034:	68fb      	ldr	r3, [r7, #12]
   15036:	0018      	movs	r0, r3
   15038:	4b11      	ldr	r3, [pc, #68]	; (15080 <CLI_NeotrellisSetLed+0x14c>)
   1503a:	4798      	blx	r3
		return pdTRUE;
   1503c:	2301      	movs	r3, #1
   1503e:	e012      	b.n	15066 <CLI_NeotrellisSetLed+0x132>
		
	}
	
	
	SeesawSetLed(key, red, green, blue);
   15040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15042:	b2d8      	uxtb	r0, r3
   15044:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15046:	b2d9      	uxtb	r1, r3
   15048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1504a:	b2da      	uxtb	r2, r3
   1504c:	6a3b      	ldr	r3, [r7, #32]
   1504e:	b2db      	uxtb	r3, r3
   15050:	4c09      	ldr	r4, [pc, #36]	; (15078 <CLI_NeotrellisSetLed+0x144>)
   15052:	47a0      	blx	r4
	SeesawOrderLedUpdate();
   15054:	4b0b      	ldr	r3, [pc, #44]	; (15084 <CLI_NeotrellisSetLed+0x150>)
   15056:	4798      	blx	r3
	snprintf( pcWriteBuffer, xWriteBufferLen, "Set LED success\n\r" );
   15058:	4a0b      	ldr	r2, [pc, #44]	; (15088 <CLI_NeotrellisSetLed+0x154>)
   1505a:	68b9      	ldr	r1, [r7, #8]
   1505c:	68fb      	ldr	r3, [r7, #12]
   1505e:	0018      	movs	r0, r3
   15060:	4b07      	ldr	r3, [pc, #28]	; (15080 <CLI_NeotrellisSetLed+0x14c>)
   15062:	4798      	blx	r3
	
	return pdFALSE;
   15064:	2300      	movs	r3, #0
}
   15066:	0018      	movs	r0, r3
   15068:	46bd      	mov	sp, r7
   1506a:	b011      	add	sp, #68	; 0x44
   1506c:	bd90      	pop	{r4, r7, pc}
   1506e:	46c0      	nop			; (mov r8, r8)
   15070:	0001a901 	.word	0x0001a901
   15074:	00037851 	.word	0x00037851
   15078:	000175b5 	.word	0x000175b5
   1507c:	00039040 	.word	0x00039040
   15080:	00037b5d 	.word	0x00037b5d
   15084:	0001767d 	.word	0x0001767d
   15088:	00039058 	.word	0x00039058

0001508c <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1508c:	b590      	push	{r4, r7, lr}
   1508e:	b099      	sub	sp, #100	; 0x64
   15090:	af00      	add	r7, sp, #0
   15092:	60f8      	str	r0, [r7, #12]
   15094:	60b9      	str	r1, [r7, #8]
   15096:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   15098:	235f      	movs	r3, #95	; 0x5f
   1509a:	18fc      	adds	r4, r7, r3
   1509c:	4b36      	ldr	r3, [pc, #216]	; (15178 <CLI_NeotrellProcessButtonBuffer+0xec>)
   1509e:	4798      	blx	r3
   150a0:	0003      	movs	r3, r0
   150a2:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   150a4:	235f      	movs	r3, #95	; 0x5f
   150a6:	18fb      	adds	r3, r7, r3
   150a8:	781b      	ldrb	r3, [r3, #0]
   150aa:	2b00      	cmp	r3, #0
   150ac:	d05d      	beq.n	1516a <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   150ae:	2310      	movs	r3, #16
   150b0:	18fb      	adds	r3, r7, r3
   150b2:	2101      	movs	r1, #1
   150b4:	0018      	movs	r0, r3
   150b6:	4b31      	ldr	r3, [pc, #196]	; (1517c <CLI_NeotrellProcessButtonBuffer+0xf0>)
   150b8:	4798      	blx	r3
   150ba:	0003      	movs	r3, r0
   150bc:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   150be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   150c0:	2b00      	cmp	r3, #0
   150c2:	d150      	bne.n	15166 <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   150c4:	2310      	movs	r3, #16
   150c6:	18fb      	adds	r3, r7, r3
   150c8:	781a      	ldrb	r2, [r3, #0]
   150ca:	2357      	movs	r3, #87	; 0x57
   150cc:	18fb      	adds	r3, r7, r3
   150ce:	2103      	movs	r1, #3
   150d0:	400a      	ands	r2, r1
   150d2:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   150d4:	2310      	movs	r3, #16
   150d6:	18fb      	adds	r3, r7, r3
   150d8:	781a      	ldrb	r2, [r3, #0]
   150da:	2356      	movs	r3, #86	; 0x56
   150dc:	18fb      	adds	r3, r7, r3
   150de:	0892      	lsrs	r2, r2, #2
   150e0:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   150e2:	2356      	movs	r3, #86	; 0x56
   150e4:	18fb      	adds	r3, r7, r3
   150e6:	781b      	ldrb	r3, [r3, #0]
   150e8:	08db      	lsrs	r3, r3, #3
   150ea:	b2db      	uxtb	r3, r3
   150ec:	009a      	lsls	r2, r3, #2
   150ee:	2356      	movs	r3, #86	; 0x56
   150f0:	18fb      	adds	r3, r7, r3
   150f2:	781b      	ldrb	r3, [r3, #0]
   150f4:	2107      	movs	r1, #7
   150f6:	400b      	ands	r3, r1
   150f8:	18d3      	adds	r3, r2, r3
   150fa:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   150fc:	2357      	movs	r3, #87	; 0x57
   150fe:	18fb      	adds	r3, r7, r3
   15100:	781b      	ldrb	r3, [r3, #0]
   15102:	2b02      	cmp	r3, #2
   15104:	d115      	bne.n	15132 <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   15106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   15108:	2b00      	cmp	r3, #0
   1510a:	da00      	bge.n	1510e <CLI_NeotrellProcessButtonBuffer+0x82>
   1510c:	3307      	adds	r3, #7
   1510e:	10db      	asrs	r3, r3, #3
   15110:	009a      	lsls	r2, r3, #2
   15112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   15114:	491a      	ldr	r1, [pc, #104]	; (15180 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   15116:	400b      	ands	r3, r1
   15118:	d504      	bpl.n	15124 <CLI_NeotrellProcessButtonBuffer+0x98>
   1511a:	3b01      	subs	r3, #1
   1511c:	2108      	movs	r1, #8
   1511e:	4249      	negs	r1, r1
   15120:	430b      	orrs	r3, r1
   15122:	3301      	adds	r3, #1
   15124:	18d3      	adds	r3, r2, r3
   15126:	4a17      	ldr	r2, [pc, #92]	; (15184 <CLI_NeotrellProcessButtonBuffer+0xf8>)
   15128:	68b9      	ldr	r1, [r7, #8]
   1512a:	68f8      	ldr	r0, [r7, #12]
   1512c:	4c16      	ldr	r4, [pc, #88]	; (15188 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   1512e:	47a0      	blx	r4
   15130:	e019      	b.n	15166 <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   15132:	2357      	movs	r3, #87	; 0x57
   15134:	18fb      	adds	r3, r7, r3
   15136:	781b      	ldrb	r3, [r3, #0]
   15138:	2b03      	cmp	r3, #3
   1513a:	d114      	bne.n	15166 <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   1513c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1513e:	2b00      	cmp	r3, #0
   15140:	da00      	bge.n	15144 <CLI_NeotrellProcessButtonBuffer+0xb8>
   15142:	3307      	adds	r3, #7
   15144:	10db      	asrs	r3, r3, #3
   15146:	009a      	lsls	r2, r3, #2
   15148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1514a:	490d      	ldr	r1, [pc, #52]	; (15180 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   1514c:	400b      	ands	r3, r1
   1514e:	d504      	bpl.n	1515a <CLI_NeotrellProcessButtonBuffer+0xce>
   15150:	3b01      	subs	r3, #1
   15152:	2108      	movs	r1, #8
   15154:	4249      	negs	r1, r1
   15156:	430b      	orrs	r3, r1
   15158:	3301      	adds	r3, #1
   1515a:	18d3      	adds	r3, r2, r3
   1515c:	4a0b      	ldr	r2, [pc, #44]	; (1518c <CLI_NeotrellProcessButtonBuffer+0x100>)
   1515e:	68b9      	ldr	r1, [r7, #8]
   15160:	68f8      	ldr	r0, [r7, #12]
   15162:	4c09      	ldr	r4, [pc, #36]	; (15188 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   15164:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   15166:	2301      	movs	r3, #1
   15168:	e002      	b.n	15170 <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   1516a:	2300      	movs	r3, #0
   1516c:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   1516e:	2300      	movs	r3, #0
    }
}
   15170:	0018      	movs	r0, r3
   15172:	46bd      	mov	sp, r7
   15174:	b019      	add	sp, #100	; 0x64
   15176:	bd90      	pop	{r4, r7, pc}
   15178:	00017401 	.word	0x00017401
   1517c:	00017469 	.word	0x00017469
   15180:	80000007 	.word	0x80000007
   15184:	0003906c 	.word	0x0003906c
   15188:	00037b5d 	.word	0x00037b5d
   1518c:	00039088 	.word	0x00039088

00015190 <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   15190:	b590      	push	{r4, r7, lr}
   15192:	b087      	sub	sp, #28
   15194:	af00      	add	r7, sp, #0
   15196:	60f8      	str	r0, [r7, #12]
   15198:	60b9      	str	r1, [r7, #8]
   1519a:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   1519c:	2312      	movs	r3, #18
   1519e:	18fb      	adds	r3, r7, r3
   151a0:	2200      	movs	r2, #0
   151a2:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   151a4:	2312      	movs	r3, #18
   151a6:	18fb      	adds	r3, r7, r3
   151a8:	2164      	movs	r1, #100	; 0x64
   151aa:	0018      	movs	r0, r3
   151ac:	4b19      	ldr	r3, [pc, #100]	; (15214 <CLI_DistanceSensorGetDistance+0x84>)
   151ae:	4798      	blx	r3
   151b0:	0003      	movs	r3, r0
   151b2:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   151b4:	697b      	ldr	r3, [r7, #20]
   151b6:	2b00      	cmp	r3, #0
   151b8:	d006      	beq.n	151c8 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   151ba:	697b      	ldr	r3, [r7, #20]
   151bc:	4a16      	ldr	r2, [pc, #88]	; (15218 <CLI_DistanceSensorGetDistance+0x88>)
   151be:	68b9      	ldr	r1, [r7, #8]
   151c0:	68f8      	ldr	r0, [r7, #12]
   151c2:	4c16      	ldr	r4, [pc, #88]	; (1521c <CLI_DistanceSensorGetDistance+0x8c>)
   151c4:	47a0      	blx	r4
   151c6:	e007      	b.n	151d8 <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   151c8:	2312      	movs	r3, #18
   151ca:	18fb      	adds	r3, r7, r3
   151cc:	881b      	ldrh	r3, [r3, #0]
   151ce:	4a14      	ldr	r2, [pc, #80]	; (15220 <CLI_DistanceSensorGetDistance+0x90>)
   151d0:	68b9      	ldr	r1, [r7, #8]
   151d2:	68f8      	ldr	r0, [r7, #12]
   151d4:	4c11      	ldr	r4, [pc, #68]	; (1521c <CLI_DistanceSensorGetDistance+0x8c>)
   151d6:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   151d8:	2312      	movs	r3, #18
   151da:	18fb      	adds	r3, r7, r3
   151dc:	0018      	movs	r0, r3
   151de:	4b11      	ldr	r3, [pc, #68]	; (15224 <CLI_DistanceSensorGetDistance+0x94>)
   151e0:	4798      	blx	r3
   151e2:	0003      	movs	r3, r0
   151e4:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   151e6:	697b      	ldr	r3, [r7, #20]
   151e8:	2b01      	cmp	r3, #1
   151ea:	d10e      	bne.n	1520a <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   151ec:	68fb      	ldr	r3, [r7, #12]
   151ee:	0018      	movs	r0, r3
   151f0:	4b0d      	ldr	r3, [pc, #52]	; (15228 <CLI_DistanceSensorGetDistance+0x98>)
   151f2:	4798      	blx	r3
   151f4:	0003      	movs	r3, r0
   151f6:	001a      	movs	r2, r3
   151f8:	68fb      	ldr	r3, [r7, #12]
   151fa:	189a      	adds	r2, r3, r2
   151fc:	4b0b      	ldr	r3, [pc, #44]	; (1522c <CLI_DistanceSensorGetDistance+0x9c>)
   151fe:	0010      	movs	r0, r2
   15200:	0019      	movs	r1, r3
   15202:	231a      	movs	r3, #26
   15204:	001a      	movs	r2, r3
   15206:	4b0a      	ldr	r3, [pc, #40]	; (15230 <CLI_DistanceSensorGetDistance+0xa0>)
   15208:	4798      	blx	r3
    }
    return pdFALSE;
   1520a:	2300      	movs	r3, #0
}
   1520c:	0018      	movs	r0, r3
   1520e:	46bd      	mov	sp, r7
   15210:	b007      	add	sp, #28
   15212:	bd90      	pop	{r4, r7, pc}
   15214:	00015a0d 	.word	0x00015a0d
   15218:	000390a0 	.word	0x000390a0
   1521c:	00037b5d 	.word	0x00037b5d
   15220:	000390b4 	.word	0x000390b4
   15224:	00019dad 	.word	0x00019dad
   15228:	00037cbb 	.word	0x00037cbb
   1522c:	000390c8 	.word	0x000390c8
   15230:	000378cd 	.word	0x000378cd

00015234 <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   15234:	b580      	push	{r7, lr}
   15236:	b08a      	sub	sp, #40	; 0x28
   15238:	af00      	add	r7, sp, #0
   1523a:	60f8      	str	r0, [r7, #12]
   1523c:	60b9      	str	r1, [r7, #8]
   1523e:	607a      	str	r2, [r7, #4]
    struct GameDataPacket gamevar;

    gamevar.game[0] = 0;
   15240:	2310      	movs	r3, #16
   15242:	18fb      	adds	r3, r7, r3
   15244:	2200      	movs	r2, #0
   15246:	701a      	strb	r2, [r3, #0]
    gamevar.game[1] = 1;
   15248:	2310      	movs	r3, #16
   1524a:	18fb      	adds	r3, r7, r3
   1524c:	2201      	movs	r2, #1
   1524e:	705a      	strb	r2, [r3, #1]
    gamevar.game[2] = 2;
   15250:	2310      	movs	r3, #16
   15252:	18fb      	adds	r3, r7, r3
   15254:	2202      	movs	r2, #2
   15256:	709a      	strb	r2, [r3, #2]
    gamevar.game[3] = 3;
   15258:	2310      	movs	r3, #16
   1525a:	18fb      	adds	r3, r7, r3
   1525c:	2203      	movs	r2, #3
   1525e:	70da      	strb	r2, [r3, #3]
    gamevar.game[4] = 4;
   15260:	2310      	movs	r3, #16
   15262:	18fb      	adds	r3, r7, r3
   15264:	2204      	movs	r2, #4
   15266:	711a      	strb	r2, [r3, #4]
    gamevar.game[5] = 5;
   15268:	2310      	movs	r3, #16
   1526a:	18fb      	adds	r3, r7, r3
   1526c:	2205      	movs	r2, #5
   1526e:	715a      	strb	r2, [r3, #5]
    gamevar.game[6] = 6;
   15270:	2310      	movs	r3, #16
   15272:	18fb      	adds	r3, r7, r3
   15274:	2206      	movs	r2, #6
   15276:	719a      	strb	r2, [r3, #6]
    gamevar.game[7] = 7;
   15278:	2310      	movs	r3, #16
   1527a:	18fb      	adds	r3, r7, r3
   1527c:	2207      	movs	r2, #7
   1527e:	71da      	strb	r2, [r3, #7]
    gamevar.game[8] = 8;
   15280:	2310      	movs	r3, #16
   15282:	18fb      	adds	r3, r7, r3
   15284:	2208      	movs	r2, #8
   15286:	721a      	strb	r2, [r3, #8]
    gamevar.game[9] = 9;
   15288:	2310      	movs	r3, #16
   1528a:	18fb      	adds	r3, r7, r3
   1528c:	2209      	movs	r2, #9
   1528e:	725a      	strb	r2, [r3, #9]
    gamevar.game[10] = 0xFF;
   15290:	2310      	movs	r3, #16
   15292:	18fb      	adds	r3, r7, r3
   15294:	22ff      	movs	r2, #255	; 0xff
   15296:	729a      	strb	r2, [r3, #10]

    int error = WifiAddGameDataToQueue(&gamevar);
   15298:	2310      	movs	r3, #16
   1529a:	18fb      	adds	r3, r7, r3
   1529c:	0018      	movs	r0, r3
   1529e:	4b09      	ldr	r3, [pc, #36]	; (152c4 <CLI_SendDummyGameData+0x90>)
   152a0:	4798      	blx	r3
   152a2:	0003      	movs	r3, r0
   152a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (error == pdTRUE) {
   152a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   152a8:	2b01      	cmp	r3, #1
   152aa:	d105      	bne.n	152b8 <CLI_SendDummyGameData+0x84>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   152ac:	4a06      	ldr	r2, [pc, #24]	; (152c8 <CLI_SendDummyGameData+0x94>)
   152ae:	68b9      	ldr	r1, [r7, #8]
   152b0:	68fb      	ldr	r3, [r7, #12]
   152b2:	0018      	movs	r0, r3
   152b4:	4b05      	ldr	r3, [pc, #20]	; (152cc <CLI_SendDummyGameData+0x98>)
   152b6:	4798      	blx	r3
    }
    return pdFALSE;
   152b8:	2300      	movs	r3, #0
}
   152ba:	0018      	movs	r0, r3
   152bc:	46bd      	mov	sp, r7
   152be:	b00a      	add	sp, #40	; 0x28
   152c0:	bd80      	pop	{r7, pc}
   152c2:	46c0      	nop			; (mov r8, r8)
   152c4:	00019dd9 	.word	0x00019dd9
   152c8:	000390e4 	.word	0x000390e4
   152cc:	00037b5d 	.word	0x00037b5d

000152d0 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   152d0:	b590      	push	{r4, r7, lr}
   152d2:	b08f      	sub	sp, #60	; 0x3c
   152d4:	af00      	add	r7, sp, #0
   152d6:	60f8      	str	r0, [r7, #12]
   152d8:	60b9      	str	r1, [r7, #8]
   152da:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   152dc:	2318      	movs	r3, #24
   152de:	18fb      	adds	r3, r7, r3
   152e0:	2200      	movs	r2, #0
   152e2:	701a      	strb	r2, [r3, #0]
   152e4:	2318      	movs	r3, #24
   152e6:	18fb      	adds	r3, r7, r3
   152e8:	2200      	movs	r2, #0
   152ea:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   152ec:	2318      	movs	r3, #24
   152ee:	18fb      	adds	r3, r7, r3
   152f0:	2200      	movs	r2, #0
   152f2:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   152f4:	2318      	movs	r3, #24
   152f6:	18fb      	adds	r3, r7, r3
   152f8:	2200      	movs	r2, #0
   152fa:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   152fc:	231c      	movs	r3, #28
   152fe:	18fb      	adds	r3, r7, r3
   15300:	2200      	movs	r2, #0
   15302:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   15304:	231c      	movs	r3, #28
   15306:	18fb      	adds	r3, r7, r3
   15308:	2214      	movs	r2, #20
   1530a:	18ba      	adds	r2, r7, r2
   1530c:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   1530e:	231c      	movs	r3, #28
   15310:	18fb      	adds	r3, r7, r3
   15312:	2201      	movs	r2, #1
   15314:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   15316:	231c      	movs	r3, #28
   15318:	18fb      	adds	r3, r7, r3
   1531a:	2218      	movs	r2, #24
   1531c:	18ba      	adds	r2, r7, r2
   1531e:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   15320:	231c      	movs	r3, #28
   15322:	18fb      	adds	r3, r7, r3
   15324:	2201      	movs	r2, #1
   15326:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   15328:	4b2a      	ldr	r3, [pc, #168]	; (153d4 <CLI_i2cScan+0x104>)
   1532a:	0018      	movs	r0, r3
   1532c:	4b2a      	ldr	r3, [pc, #168]	; (153d8 <CLI_i2cScan+0x108>)
   1532e:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   15330:	2300      	movs	r3, #0
   15332:	637b      	str	r3, [r7, #52]	; 0x34
   15334:	e042      	b.n	153bc <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   15336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15338:	4a28      	ldr	r2, [pc, #160]	; (153dc <CLI_i2cScan+0x10c>)
   1533a:	4829      	ldr	r0, [pc, #164]	; (153e0 <CLI_i2cScan+0x110>)
   1533c:	210f      	movs	r1, #15
   1533e:	4c29      	ldr	r4, [pc, #164]	; (153e4 <CLI_i2cScan+0x114>)
   15340:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   15342:	4b27      	ldr	r3, [pc, #156]	; (153e0 <CLI_i2cScan+0x110>)
   15344:	0018      	movs	r0, r3
   15346:	4b24      	ldr	r3, [pc, #144]	; (153d8 <CLI_i2cScan+0x108>)
   15348:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   1534a:	2300      	movs	r3, #0
   1534c:	633b      	str	r3, [r7, #48]	; 0x30
   1534e:	e02b      	b.n	153a8 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   15350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15352:	b2da      	uxtb	r2, r3
   15354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15356:	b2db      	uxtb	r3, r3
   15358:	18d3      	adds	r3, r2, r3
   1535a:	b2da      	uxtb	r2, r3
   1535c:	231c      	movs	r3, #28
   1535e:	18fb      	adds	r3, r7, r3
   15360:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   15362:	231c      	movs	r3, #28
   15364:	18fb      	adds	r3, r7, r3
   15366:	2264      	movs	r2, #100	; 0x64
   15368:	2164      	movs	r1, #100	; 0x64
   1536a:	0018      	movs	r0, r3
   1536c:	4b1e      	ldr	r3, [pc, #120]	; (153e8 <CLI_i2cScan+0x118>)
   1536e:	4798      	blx	r3
   15370:	0003      	movs	r3, r0
   15372:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   15374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15376:	2b00      	cmp	r3, #0
   15378:	d10c      	bne.n	15394 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   1537a:	231c      	movs	r3, #28
   1537c:	18fb      	adds	r3, r7, r3
   1537e:	781b      	ldrb	r3, [r3, #0]
   15380:	4a1a      	ldr	r2, [pc, #104]	; (153ec <CLI_i2cScan+0x11c>)
   15382:	4817      	ldr	r0, [pc, #92]	; (153e0 <CLI_i2cScan+0x110>)
   15384:	210f      	movs	r1, #15
   15386:	4c17      	ldr	r4, [pc, #92]	; (153e4 <CLI_i2cScan+0x114>)
   15388:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   1538a:	4b15      	ldr	r3, [pc, #84]	; (153e0 <CLI_i2cScan+0x110>)
   1538c:	0018      	movs	r0, r3
   1538e:	4b12      	ldr	r3, [pc, #72]	; (153d8 <CLI_i2cScan+0x108>)
   15390:	4798      	blx	r3
   15392:	e006      	b.n	153a2 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   15394:	4b12      	ldr	r3, [pc, #72]	; (153e0 <CLI_i2cScan+0x110>)
   15396:	4a16      	ldr	r2, [pc, #88]	; (153f0 <CLI_i2cScan+0x120>)
   15398:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   1539a:	4b11      	ldr	r3, [pc, #68]	; (153e0 <CLI_i2cScan+0x110>)
   1539c:	0018      	movs	r0, r3
   1539e:	4b0e      	ldr	r3, [pc, #56]	; (153d8 <CLI_i2cScan+0x108>)
   153a0:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   153a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   153a4:	3301      	adds	r3, #1
   153a6:	633b      	str	r3, [r7, #48]	; 0x30
   153a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   153aa:	2b0f      	cmp	r3, #15
   153ac:	ddd0      	ble.n	15350 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   153ae:	4b11      	ldr	r3, [pc, #68]	; (153f4 <CLI_i2cScan+0x124>)
   153b0:	0018      	movs	r0, r3
   153b2:	4b09      	ldr	r3, [pc, #36]	; (153d8 <CLI_i2cScan+0x108>)
   153b4:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   153b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   153b8:	3310      	adds	r3, #16
   153ba:	637b      	str	r3, [r7, #52]	; 0x34
   153bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   153be:	2b7f      	cmp	r3, #127	; 0x7f
   153c0:	ddb9      	ble.n	15336 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   153c2:	4b0c      	ldr	r3, [pc, #48]	; (153f4 <CLI_i2cScan+0x124>)
   153c4:	0018      	movs	r0, r3
   153c6:	4b04      	ldr	r3, [pc, #16]	; (153d8 <CLI_i2cScan+0x108>)
   153c8:	4798      	blx	r3
			return pdFALSE;
   153ca:	2300      	movs	r3, #0

}
   153cc:	0018      	movs	r0, r3
   153ce:	46bd      	mov	sp, r7
   153d0:	b00f      	add	sp, #60	; 0x3c
   153d2:	bd90      	pop	{r4, r7, pc}
   153d4:	00039100 	.word	0x00039100
   153d8:	00020745 	.word	0x00020745
   153dc:	00039134 	.word	0x00039134
   153e0:	20000394 	.word	0x20000394
   153e4:	00037b5d 	.word	0x00037b5d
   153e8:	0001632d 	.word	0x0001632d
   153ec:	0003913c 	.word	0x0003913c
   153f0:	00202058 	.word	0x00202058
   153f4:	00038fd8 	.word	0x00038fd8

000153f8 <CLI_GetBme680Data>:


//The api is used to read the bme680 sensor data three times
BaseType_t CLI_GetBme680Data( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   153f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   153fa:	b095      	sub	sp, #84	; 0x54
   153fc:	af02      	add	r7, sp, #8
   153fe:	61f8      	str	r0, [r7, #28]
   15400:	61b9      	str	r1, [r7, #24]
   15402:	617a      	str	r2, [r7, #20]
   15404:	466b      	mov	r3, sp
   15406:	001e      	movs	r6, r3
	int8_t bme680status = 1;
   15408:	232f      	movs	r3, #47	; 0x2f
   1540a:	2210      	movs	r2, #16
   1540c:	4694      	mov	ip, r2
   1540e:	44bc      	add	ip, r7
   15410:	4463      	add	r3, ip
   15412:	2201      	movs	r2, #1
   15414:	701a      	strb	r2, [r3, #0]
    struct bme680_dev * gas_sensor = GetBme680Struct();
   15416:	4ba1      	ldr	r3, [pc, #644]	; (1569c <CLI_GetBme680Data+0x2a4>)
   15418:	4798      	blx	r3
   1541a:	0003      	movs	r3, r0
   1541c:	63bb      	str	r3, [r7, #56]	; 0x38
	int N_MEAS = 3;
   1541e:	2303      	movs	r3, #3
   15420:	637b      	str	r3, [r7, #52]	; 0x34
	struct bme680_field_data data[N_MEAS];
   15422:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   15424:	1e63      	subs	r3, r4, #1
   15426:	633b      	str	r3, [r7, #48]	; 0x30
   15428:	0023      	movs	r3, r4
   1542a:	60bb      	str	r3, [r7, #8]
   1542c:	2300      	movs	r3, #0
   1542e:	60fb      	str	r3, [r7, #12]
   15430:	4d9b      	ldr	r5, [pc, #620]	; (156a0 <CLI_GetBme680Data+0x2a8>)
   15432:	22a0      	movs	r2, #160	; 0xa0
   15434:	2300      	movs	r3, #0
   15436:	68b8      	ldr	r0, [r7, #8]
   15438:	68f9      	ldr	r1, [r7, #12]
   1543a:	47a8      	blx	r5
   1543c:	0022      	movs	r2, r4
   1543e:	0013      	movs	r3, r2
   15440:	009b      	lsls	r3, r3, #2
   15442:	189b      	adds	r3, r3, r2
   15444:	009b      	lsls	r3, r3, #2
   15446:	0023      	movs	r3, r4
   15448:	603b      	str	r3, [r7, #0]
   1544a:	2300      	movs	r3, #0
   1544c:	607b      	str	r3, [r7, #4]
   1544e:	4d94      	ldr	r5, [pc, #592]	; (156a0 <CLI_GetBme680Data+0x2a8>)
   15450:	22a0      	movs	r2, #160	; 0xa0
   15452:	2300      	movs	r3, #0
   15454:	6838      	ldr	r0, [r7, #0]
   15456:	6879      	ldr	r1, [r7, #4]
   15458:	47a8      	blx	r5
   1545a:	0022      	movs	r2, r4
   1545c:	0013      	movs	r3, r2
   1545e:	009b      	lsls	r3, r3, #2
   15460:	189b      	adds	r3, r3, r2
   15462:	009b      	lsls	r3, r3, #2
   15464:	3303      	adds	r3, #3
   15466:	3307      	adds	r3, #7
   15468:	08db      	lsrs	r3, r3, #3
   1546a:	00db      	lsls	r3, r3, #3
   1546c:	466a      	mov	r2, sp
   1546e:	1ad3      	subs	r3, r2, r3
   15470:	469d      	mov	sp, r3
   15472:	ab02      	add	r3, sp, #8
   15474:	3303      	adds	r3, #3
   15476:	089b      	lsrs	r3, r3, #2
   15478:	009b      	lsls	r3, r3, #2
   1547a:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset( data, 0, N_MEAS*sizeof(struct bme680_field_data) );
   1547c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1547e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   15480:	0013      	movs	r3, r2
   15482:	009b      	lsls	r3, r3, #2
   15484:	189b      	adds	r3, r3, r2
   15486:	009b      	lsls	r3, r3, #2
   15488:	001a      	movs	r2, r3
   1548a:	2100      	movs	r1, #0
   1548c:	4b85      	ldr	r3, [pc, #532]	; (156a4 <CLI_GetBme680Data+0x2ac>)
   1548e:	4798      	blx	r3
    gas_sensor->dev_id = BME680_I2C_ADDR_SECONDARY;
   15490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15492:	2277      	movs	r2, #119	; 0x77
   15494:	705a      	strb	r2, [r3, #1]
    gas_sensor->intf = BME680_I2C_INTF;
   15496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15498:	2201      	movs	r2, #1
   1549a:	709a      	strb	r2, [r3, #2]
    gas_sensor->read = user_i2c_read;
   1549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1549e:	4a82      	ldr	r2, [pc, #520]	; (156a8 <CLI_GetBme680Data+0x2b0>)
   154a0:	649a      	str	r2, [r3, #72]	; 0x48
    gas_sensor->write = user_i2c_write;
   154a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   154a4:	4a81      	ldr	r2, [pc, #516]	; (156ac <CLI_GetBme680Data+0x2b4>)
   154a6:	64da      	str	r2, [r3, #76]	; 0x4c
    gas_sensor->delay_ms = user_delay_ms;
   154a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   154aa:	4a81      	ldr	r2, [pc, #516]	; (156b0 <CLI_GetBme680Data+0x2b8>)
   154ac:	651a      	str	r2, [r3, #80]	; 0x50
    /* amb_temp can be set to 25 prior to configuring the gas sensor 
     * or by performing a few temperature readings without operating the gas sensor.
     */
    gas_sensor->amb_temp = 25;
   154ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   154b0:	2219      	movs	r2, #25
   154b2:	711a      	strb	r2, [r3, #4]
	bme680status = read_bme680_3times(gas_sensor, &data);
   154b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   154b6:	232f      	movs	r3, #47	; 0x2f
   154b8:	2110      	movs	r1, #16
   154ba:	1879      	adds	r1, r7, r1
   154bc:	18cc      	adds	r4, r1, r3
   154be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   154c0:	0011      	movs	r1, r2
   154c2:	0018      	movs	r0, r3
   154c4:	4b7b      	ldr	r3, [pc, #492]	; (156b4 <CLI_GetBme680Data+0x2bc>)
   154c6:	4798      	blx	r3
   154c8:	0003      	movs	r3, r0
   154ca:	7023      	strb	r3, [r4, #0]
	int8_t number = 0;
   154cc:	2337      	movs	r3, #55	; 0x37
   154ce:	2210      	movs	r2, #16
   154d0:	4694      	mov	ip, r2
   154d2:	44bc      	add	ip, r7
   154d4:	4463      	add	r3, ip
   154d6:	2200      	movs	r2, #0
   154d8:	701a      	strb	r2, [r3, #0]
	int cx = 0;
   154da:	2300      	movs	r3, #0
   154dc:	643b      	str	r3, [r7, #64]	; 0x40
	if(bme680status > -1) {
   154de:	232f      	movs	r3, #47	; 0x2f
   154e0:	2210      	movs	r2, #16
   154e2:	4694      	mov	ip, r2
   154e4:	44bc      	add	ip, r7
   154e6:	4463      	add	r3, ip
   154e8:	781b      	ldrb	r3, [r3, #0]
   154ea:	2b7f      	cmp	r3, #127	; 0x7f
   154ec:	d900      	bls.n	154f0 <CLI_GetBme680Data+0xf8>
   154ee:	e0c8      	b.n	15682 <CLI_GetBme680Data+0x28a>
		do 
		{
			//int example_int = (int)example;
			//snprintf(bufferPrint, 64, "%d", example_int);
			//SerialConsoleWriteString(bufferPrint);
			int temp = (int) data[number].temperature / 100.f;
   154f0:	2337      	movs	r3, #55	; 0x37
   154f2:	2210      	movs	r2, #16
   154f4:	4694      	mov	ip, r2
   154f6:	44bc      	add	ip, r7
   154f8:	4463      	add	r3, ip
   154fa:	2200      	movs	r2, #0
   154fc:	569a      	ldrsb	r2, [r3, r2]
   154fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15500:	0013      	movs	r3, r2
   15502:	009b      	lsls	r3, r3, #2
   15504:	189b      	adds	r3, r3, r2
   15506:	009b      	lsls	r3, r3, #2
   15508:	18cb      	adds	r3, r1, r3
   1550a:	3304      	adds	r3, #4
   1550c:	2200      	movs	r2, #0
   1550e:	5e9a      	ldrsh	r2, [r3, r2]
   15510:	4b69      	ldr	r3, [pc, #420]	; (156b8 <CLI_GetBme680Data+0x2c0>)
   15512:	0010      	movs	r0, r2
   15514:	4798      	blx	r3
   15516:	1c02      	adds	r2, r0, #0
   15518:	4b68      	ldr	r3, [pc, #416]	; (156bc <CLI_GetBme680Data+0x2c4>)
   1551a:	4969      	ldr	r1, [pc, #420]	; (156c0 <CLI_GetBme680Data+0x2c8>)
   1551c:	1c10      	adds	r0, r2, #0
   1551e:	4798      	blx	r3
   15520:	1c03      	adds	r3, r0, #0
   15522:	1c1a      	adds	r2, r3, #0
   15524:	4b67      	ldr	r3, [pc, #412]	; (156c4 <CLI_GetBme680Data+0x2cc>)
   15526:	1c10      	adds	r0, r2, #0
   15528:	4798      	blx	r3
   1552a:	0003      	movs	r3, r0
   1552c:	62bb      	str	r3, [r7, #40]	; 0x28
			int press = (int) data[number].pressure / 100.f;
   1552e:	2337      	movs	r3, #55	; 0x37
   15530:	2210      	movs	r2, #16
   15532:	4694      	mov	ip, r2
   15534:	44bc      	add	ip, r7
   15536:	4463      	add	r3, ip
   15538:	2200      	movs	r2, #0
   1553a:	569a      	ldrsb	r2, [r3, r2]
   1553c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1553e:	0013      	movs	r3, r2
   15540:	009b      	lsls	r3, r3, #2
   15542:	189b      	adds	r3, r3, r2
   15544:	009b      	lsls	r3, r3, #2
   15546:	18cb      	adds	r3, r1, r3
   15548:	3308      	adds	r3, #8
   1554a:	681b      	ldr	r3, [r3, #0]
   1554c:	001a      	movs	r2, r3
   1554e:	4b5a      	ldr	r3, [pc, #360]	; (156b8 <CLI_GetBme680Data+0x2c0>)
   15550:	0010      	movs	r0, r2
   15552:	4798      	blx	r3
   15554:	1c02      	adds	r2, r0, #0
   15556:	4b59      	ldr	r3, [pc, #356]	; (156bc <CLI_GetBme680Data+0x2c4>)
   15558:	4959      	ldr	r1, [pc, #356]	; (156c0 <CLI_GetBme680Data+0x2c8>)
   1555a:	1c10      	adds	r0, r2, #0
   1555c:	4798      	blx	r3
   1555e:	1c03      	adds	r3, r0, #0
   15560:	1c1a      	adds	r2, r3, #0
   15562:	4b58      	ldr	r3, [pc, #352]	; (156c4 <CLI_GetBme680Data+0x2cc>)
   15564:	1c10      	adds	r0, r2, #0
   15566:	4798      	blx	r3
   15568:	0003      	movs	r3, r0
   1556a:	627b      	str	r3, [r7, #36]	; 0x24
			int humid = (int) data[number].humidity / 1000.f;
   1556c:	2337      	movs	r3, #55	; 0x37
   1556e:	2210      	movs	r2, #16
   15570:	4694      	mov	ip, r2
   15572:	44bc      	add	ip, r7
   15574:	4463      	add	r3, ip
   15576:	2200      	movs	r2, #0
   15578:	569a      	ldrsb	r2, [r3, r2]
   1557a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1557c:	0013      	movs	r3, r2
   1557e:	009b      	lsls	r3, r3, #2
   15580:	189b      	adds	r3, r3, r2
   15582:	009b      	lsls	r3, r3, #2
   15584:	18cb      	adds	r3, r1, r3
   15586:	330c      	adds	r3, #12
   15588:	681b      	ldr	r3, [r3, #0]
   1558a:	001a      	movs	r2, r3
   1558c:	4b4a      	ldr	r3, [pc, #296]	; (156b8 <CLI_GetBme680Data+0x2c0>)
   1558e:	0010      	movs	r0, r2
   15590:	4798      	blx	r3
   15592:	1c02      	adds	r2, r0, #0
   15594:	4b49      	ldr	r3, [pc, #292]	; (156bc <CLI_GetBme680Data+0x2c4>)
   15596:	494c      	ldr	r1, [pc, #304]	; (156c8 <CLI_GetBme680Data+0x2d0>)
   15598:	1c10      	adds	r0, r2, #0
   1559a:	4798      	blx	r3
   1559c:	1c03      	adds	r3, r0, #0
   1559e:	1c1a      	adds	r2, r3, #0
   155a0:	4b48      	ldr	r3, [pc, #288]	; (156c4 <CLI_GetBme680Data+0x2cc>)
   155a2:	1c10      	adds	r0, r2, #0
   155a4:	4798      	blx	r3
   155a6:	0003      	movs	r3, r0
   155a8:	623b      	str	r3, [r7, #32]
			
			cx += snprintf(pcWriteBuffer+cx, xWriteBufferLen-cx, "T: %d degC, P: %d hPa, H %d %%rH ", temp , press , humid );
   155aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   155ac:	69fa      	ldr	r2, [r7, #28]
   155ae:	18d0      	adds	r0, r2, r3
   155b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   155b2:	69ba      	ldr	r2, [r7, #24]
   155b4:	1ad1      	subs	r1, r2, r3
   155b6:	6abc      	ldr	r4, [r7, #40]	; 0x28
   155b8:	4a44      	ldr	r2, [pc, #272]	; (156cc <CLI_GetBme680Data+0x2d4>)
   155ba:	6a3b      	ldr	r3, [r7, #32]
   155bc:	9301      	str	r3, [sp, #4]
   155be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   155c0:	9300      	str	r3, [sp, #0]
   155c2:	0023      	movs	r3, r4
   155c4:	4c42      	ldr	r4, [pc, #264]	; (156d0 <CLI_GetBme680Data+0x2d8>)
   155c6:	47a0      	blx	r4
   155c8:	0002      	movs	r2, r0
   155ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   155cc:	189b      	adds	r3, r3, r2
   155ce:	643b      	str	r3, [r7, #64]	; 0x40
			/* Avoid using measurements from an unstable heating setup */
			if(data[number].status & BME680_GASM_VALID_MSK) {
   155d0:	2337      	movs	r3, #55	; 0x37
   155d2:	2210      	movs	r2, #16
   155d4:	4694      	mov	ip, r2
   155d6:	44bc      	add	ip, r7
   155d8:	4463      	add	r3, ip
   155da:	2200      	movs	r2, #0
   155dc:	569a      	ldrsb	r2, [r3, r2]
   155de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   155e0:	0013      	movs	r3, r2
   155e2:	009b      	lsls	r3, r3, #2
   155e4:	189b      	adds	r3, r3, r2
   155e6:	009b      	lsls	r3, r3, #2
   155e8:	5c5b      	ldrb	r3, [r3, r1]
   155ea:	001a      	movs	r2, r3
   155ec:	2320      	movs	r3, #32
   155ee:	4013      	ands	r3, r2
   155f0:	d01c      	beq.n	1562c <CLI_GetBme680Data+0x234>
				cx += snprintf(pcWriteBuffer+cx, xWriteBufferLen-cx, ", G: %d ohms ", data[number].gas_resistance);
   155f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   155f4:	69fa      	ldr	r2, [r7, #28]
   155f6:	18d0      	adds	r0, r2, r3
   155f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   155fa:	69ba      	ldr	r2, [r7, #24]
   155fc:	1ad4      	subs	r4, r2, r3
   155fe:	2337      	movs	r3, #55	; 0x37
   15600:	2210      	movs	r2, #16
   15602:	4694      	mov	ip, r2
   15604:	44bc      	add	ip, r7
   15606:	4463      	add	r3, ip
   15608:	2200      	movs	r2, #0
   1560a:	569a      	ldrsb	r2, [r3, r2]
   1560c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1560e:	0013      	movs	r3, r2
   15610:	009b      	lsls	r3, r3, #2
   15612:	189b      	adds	r3, r3, r2
   15614:	009b      	lsls	r3, r3, #2
   15616:	18cb      	adds	r3, r1, r3
   15618:	3310      	adds	r3, #16
   1561a:	681b      	ldr	r3, [r3, #0]
   1561c:	4a2d      	ldr	r2, [pc, #180]	; (156d4 <CLI_GetBme680Data+0x2dc>)
   1561e:	0021      	movs	r1, r4
   15620:	4c2b      	ldr	r4, [pc, #172]	; (156d0 <CLI_GetBme680Data+0x2d8>)
   15622:	47a0      	blx	r4
   15624:	0002      	movs	r2, r0
   15626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15628:	189b      	adds	r3, r3, r2
   1562a:	643b      	str	r3, [r7, #64]	; 0x40
			}
			cx += snprintf(pcWriteBuffer+cx, xWriteBufferLen-cx, "\r\n");
   1562c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1562e:	69fa      	ldr	r2, [r7, #28]
   15630:	18d0      	adds	r0, r2, r3
   15632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15634:	69ba      	ldr	r2, [r7, #24]
   15636:	1ad3      	subs	r3, r2, r3
   15638:	4a27      	ldr	r2, [pc, #156]	; (156d8 <CLI_GetBme680Data+0x2e0>)
   1563a:	0019      	movs	r1, r3
   1563c:	4b24      	ldr	r3, [pc, #144]	; (156d0 <CLI_GetBme680Data+0x2d8>)
   1563e:	4798      	blx	r3
   15640:	0002      	movs	r2, r0
   15642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15644:	189b      	adds	r3, r3, r2
   15646:	643b      	str	r3, [r7, #64]	; 0x40
			number++;
   15648:	2337      	movs	r3, #55	; 0x37
   1564a:	2210      	movs	r2, #16
   1564c:	4694      	mov	ip, r2
   1564e:	44bc      	add	ip, r7
   15650:	4463      	add	r3, ip
   15652:	781b      	ldrb	r3, [r3, #0]
   15654:	b25b      	sxtb	r3, r3
   15656:	b2db      	uxtb	r3, r3
   15658:	3301      	adds	r3, #1
   1565a:	b2da      	uxtb	r2, r3
   1565c:	2337      	movs	r3, #55	; 0x37
   1565e:	2110      	movs	r1, #16
   15660:	468c      	mov	ip, r1
   15662:	44bc      	add	ip, r7
   15664:	4463      	add	r3, ip
   15666:	701a      	strb	r2, [r3, #0]
		} while (number < N_MEAS-2); // 
   15668:	2337      	movs	r3, #55	; 0x37
   1566a:	2210      	movs	r2, #16
   1566c:	4694      	mov	ip, r2
   1566e:	44bc      	add	ip, r7
   15670:	4463      	add	r3, ip
   15672:	2200      	movs	r2, #0
   15674:	569a      	ldrsb	r2, [r3, r2]
   15676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15678:	3b02      	subs	r3, #2
   1567a:	429a      	cmp	r2, r3
   1567c:	da00      	bge.n	15680 <CLI_GetBme680Data+0x288>
   1567e:	e737      	b.n	154f0 <CLI_GetBme680Data+0xf8>
   15680:	e005      	b.n	1568e <CLI_GetBme680Data+0x296>
	} else {
		snprintf(pcWriteBuffer,xWriteBufferLen, "bme680 data error \r\n");
   15682:	4a16      	ldr	r2, [pc, #88]	; (156dc <CLI_GetBme680Data+0x2e4>)
   15684:	69b9      	ldr	r1, [r7, #24]
   15686:	69fb      	ldr	r3, [r7, #28]
   15688:	0018      	movs	r0, r3
   1568a:	4b11      	ldr	r3, [pc, #68]	; (156d0 <CLI_GetBme680Data+0x2d8>)
   1568c:	4798      	blx	r3
	}
	
	return pdFALSE;
   1568e:	2300      	movs	r3, #0
   15690:	46b5      	mov	sp, r6
}
   15692:	0018      	movs	r0, r3
   15694:	46bd      	mov	sp, r7
   15696:	b013      	add	sp, #76	; 0x4c
   15698:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1569a:	46c0      	nop			; (mov r8, r8)
   1569c:	00014961 	.word	0x00014961
   156a0:	0003577d 	.word	0x0003577d
   156a4:	00037903 	.word	0x00037903
   156a8:	00015711 	.word	0x00015711
   156ac:	00015791 	.word	0x00015791
   156b0:	000156e1 	.word	0x000156e1
   156b4:	000147ad 	.word	0x000147ad
   156b8:	00035d19 	.word	0x00035d19
   156bc:	00035809 	.word	0x00035809
   156c0:	42c80000 	.word	0x42c80000
   156c4:	00035cd9 	.word	0x00035cd9
   156c8:	447a0000 	.word	0x447a0000
   156cc:	00039144 	.word	0x00039144
   156d0:	00037b5d 	.word	0x00037b5d
   156d4:	00039168 	.word	0x00039168
   156d8:	00038fd8 	.word	0x00038fd8
   156dc:	00039178 	.word	0x00039178

000156e0 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
   156e0:	b580      	push	{r7, lr}
   156e2:	b082      	sub	sp, #8
   156e4:	af00      	add	r7, sp, #0
   156e6:	6078      	str	r0, [r7, #4]
	delay_ms(period);
   156e8:	687b      	ldr	r3, [r7, #4]
   156ea:	2b00      	cmp	r3, #0
   156ec:	d004      	beq.n	156f8 <user_delay_ms+0x18>
   156ee:	687b      	ldr	r3, [r7, #4]
   156f0:	0018      	movs	r0, r3
   156f2:	4b05      	ldr	r3, [pc, #20]	; (15708 <user_delay_ms+0x28>)
   156f4:	4798      	blx	r3
}
   156f6:	e002      	b.n	156fe <user_delay_ms+0x1e>
	delay_ms(period);
   156f8:	2001      	movs	r0, #1
   156fa:	4b04      	ldr	r3, [pc, #16]	; (1570c <user_delay_ms+0x2c>)
   156fc:	4798      	blx	r3
}
   156fe:	46c0      	nop			; (mov r8, r8)
   15700:	46bd      	mov	sp, r7
   15702:	b002      	add	sp, #8
   15704:	bd80      	pop	{r7, pc}
   15706:	46c0      	nop			; (mov r8, r8)
   15708:	00022b2d 	.word	0x00022b2d
   1570c:	00022afd 	.word	0x00022afd

00015710 <user_i2c_read>:

int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
   15710:	b590      	push	{r4, r7, lr}
   15712:	b085      	sub	sp, #20
   15714:	af00      	add	r7, sp, #0
   15716:	0004      	movs	r4, r0
   15718:	0008      	movs	r0, r1
   1571a:	603a      	str	r2, [r7, #0]
   1571c:	0019      	movs	r1, r3
   1571e:	1dfb      	adds	r3, r7, #7
   15720:	1c22      	adds	r2, r4, #0
   15722:	701a      	strb	r2, [r3, #0]
   15724:	1dbb      	adds	r3, r7, #6
   15726:	1c02      	adds	r2, r0, #0
   15728:	701a      	strb	r2, [r3, #0]
   1572a:	1d3b      	adds	r3, r7, #4
   1572c:	1c0a      	adds	r2, r1, #0
   1572e:	801a      	strh	r2, [r3, #0]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
   15730:	230f      	movs	r3, #15
   15732:	18fb      	adds	r3, r7, r3
   15734:	2200      	movs	r2, #0
   15736:	701a      	strb	r2, [r3, #0]
     * | Read       | (....)              |
     * | Read       | (reg_data[len - 1]) |
     * | Stop       | -                   |
     * |------------+---------------------|
     */
	bme680msg.address = BME680_I2C_ADDR_PRIMARY;
   15738:	4b13      	ldr	r3, [pc, #76]	; (15788 <user_i2c_read+0x78>)
   1573a:	2276      	movs	r2, #118	; 0x76
   1573c:	701a      	strb	r2, [r3, #0]
	bme680msg.msgOut = &reg_addr;
   1573e:	4b12      	ldr	r3, [pc, #72]	; (15788 <user_i2c_read+0x78>)
   15740:	1dba      	adds	r2, r7, #6
   15742:	605a      	str	r2, [r3, #4]
	bme680msg.lenOut = 1;
   15744:	4b10      	ldr	r3, [pc, #64]	; (15788 <user_i2c_read+0x78>)
   15746:	2201      	movs	r2, #1
   15748:	81da      	strh	r2, [r3, #14]
	bme680msg.msgIn = reg_data;
   1574a:	4b0f      	ldr	r3, [pc, #60]	; (15788 <user_i2c_read+0x78>)
   1574c:	683a      	ldr	r2, [r7, #0]
   1574e:	609a      	str	r2, [r3, #8]
	bme680msg.lenIn = len;
   15750:	4b0d      	ldr	r3, [pc, #52]	; (15788 <user_i2c_read+0x78>)
   15752:	1d3a      	adds	r2, r7, #4
   15754:	8812      	ldrh	r2, [r2, #0]
   15756:	819a      	strh	r2, [r3, #12]
	
	if (len!=0) {
   15758:	1d3b      	adds	r3, r7, #4
   1575a:	881b      	ldrh	r3, [r3, #0]
   1575c:	2b00      	cmp	r3, #0
   1575e:	d00a      	beq.n	15776 <user_i2c_read+0x66>
		rslt = (int8_t) I2cReadDataWait(&bme680msg, 0, portMAX_DELAY);
   15760:	2301      	movs	r3, #1
   15762:	425a      	negs	r2, r3
   15764:	4b08      	ldr	r3, [pc, #32]	; (15788 <user_i2c_read+0x78>)
   15766:	2100      	movs	r1, #0
   15768:	0018      	movs	r0, r3
   1576a:	4b08      	ldr	r3, [pc, #32]	; (1578c <user_i2c_read+0x7c>)
   1576c:	4798      	blx	r3
   1576e:	0002      	movs	r2, r0
   15770:	230f      	movs	r3, #15
   15772:	18fb      	adds	r3, r7, r3
   15774:	701a      	strb	r2, [r3, #0]
	}
    return rslt;
   15776:	230f      	movs	r3, #15
   15778:	18fb      	adds	r3, r7, r3
   1577a:	781b      	ldrb	r3, [r3, #0]
   1577c:	b25b      	sxtb	r3, r3
}
   1577e:	0018      	movs	r0, r3
   15780:	46bd      	mov	sp, r7
   15782:	b005      	add	sp, #20
   15784:	bd90      	pop	{r4, r7, pc}
   15786:	46c0      	nop			; (mov r8, r8)
   15788:	20000384 	.word	0x20000384
   1578c:	00016219 	.word	0x00016219

00015790 <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
   15790:	b5f0      	push	{r4, r5, r6, r7, lr}
   15792:	b08f      	sub	sp, #60	; 0x3c
   15794:	af00      	add	r7, sp, #0
   15796:	0006      	movs	r6, r0
   15798:	0008      	movs	r0, r1
   1579a:	623a      	str	r2, [r7, #32]
   1579c:	0019      	movs	r1, r3
   1579e:	2327      	movs	r3, #39	; 0x27
   157a0:	18fb      	adds	r3, r7, r3
   157a2:	1c32      	adds	r2, r6, #0
   157a4:	701a      	strb	r2, [r3, #0]
   157a6:	2326      	movs	r3, #38	; 0x26
   157a8:	18fb      	adds	r3, r7, r3
   157aa:	1c02      	adds	r2, r0, #0
   157ac:	701a      	strb	r2, [r3, #0]
   157ae:	2324      	movs	r3, #36	; 0x24
   157b0:	18fb      	adds	r3, r7, r3
   157b2:	1c0a      	adds	r2, r1, #0
   157b4:	801a      	strh	r2, [r3, #0]
   157b6:	466b      	mov	r3, sp
   157b8:	607b      	str	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
   157ba:	2317      	movs	r3, #23
   157bc:	2220      	movs	r2, #32
   157be:	4694      	mov	ip, r2
   157c0:	44bc      	add	ip, r7
   157c2:	4463      	add	r3, ip
   157c4:	2200      	movs	r2, #0
   157c6:	701a      	strb	r2, [r3, #0]
     * | Stop       | -                   |
     * |------------+---------------------|
     */
	
	
	uint8_t msgout[len+1];
   157c8:	2324      	movs	r3, #36	; 0x24
   157ca:	18fb      	adds	r3, r7, r3
   157cc:	881b      	ldrh	r3, [r3, #0]
   157ce:	3301      	adds	r3, #1
   157d0:	1e5a      	subs	r2, r3, #1
   157d2:	633a      	str	r2, [r7, #48]	; 0x30
   157d4:	001a      	movs	r2, r3
   157d6:	613a      	str	r2, [r7, #16]
   157d8:	2200      	movs	r2, #0
   157da:	617a      	str	r2, [r7, #20]
   157dc:	6938      	ldr	r0, [r7, #16]
   157de:	6979      	ldr	r1, [r7, #20]
   157e0:	0002      	movs	r2, r0
   157e2:	0f52      	lsrs	r2, r2, #29
   157e4:	000e      	movs	r6, r1
   157e6:	00f6      	lsls	r6, r6, #3
   157e8:	61fe      	str	r6, [r7, #28]
   157ea:	69fe      	ldr	r6, [r7, #28]
   157ec:	4316      	orrs	r6, r2
   157ee:	61fe      	str	r6, [r7, #28]
   157f0:	0002      	movs	r2, r0
   157f2:	00d2      	lsls	r2, r2, #3
   157f4:	61ba      	str	r2, [r7, #24]
   157f6:	001a      	movs	r2, r3
   157f8:	60ba      	str	r2, [r7, #8]
   157fa:	2200      	movs	r2, #0
   157fc:	60fa      	str	r2, [r7, #12]
   157fe:	68b8      	ldr	r0, [r7, #8]
   15800:	68f9      	ldr	r1, [r7, #12]
   15802:	0002      	movs	r2, r0
   15804:	0f52      	lsrs	r2, r2, #29
   15806:	000e      	movs	r6, r1
   15808:	00f5      	lsls	r5, r6, #3
   1580a:	4315      	orrs	r5, r2
   1580c:	0002      	movs	r2, r0
   1580e:	00d4      	lsls	r4, r2, #3
   15810:	3307      	adds	r3, #7
   15812:	08db      	lsrs	r3, r3, #3
   15814:	00db      	lsls	r3, r3, #3
   15816:	466a      	mov	r2, sp
   15818:	1ad3      	subs	r3, r2, r3
   1581a:	469d      	mov	sp, r3
   1581c:	466b      	mov	r3, sp
   1581e:	3300      	adds	r3, #0
   15820:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	//uint8_t *msgout = malloc((len+1)*sizeof(uint8_t));
	msgout[0] = reg_addr;
   15822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15824:	2226      	movs	r2, #38	; 0x26
   15826:	18ba      	adds	r2, r7, r2
   15828:	7812      	ldrb	r2, [r2, #0]
   1582a:	701a      	strb	r2, [r3, #0]
	//memcpy(msgout, &reg_addr, 1);
	memcpy(msgout+1, reg_data, len);
   1582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1582e:	1c58      	adds	r0, r3, #1
   15830:	2324      	movs	r3, #36	; 0x24
   15832:	18fb      	adds	r3, r7, r3
   15834:	881a      	ldrh	r2, [r3, #0]
   15836:	6a3b      	ldr	r3, [r7, #32]
   15838:	0019      	movs	r1, r3
   1583a:	4b17      	ldr	r3, [pc, #92]	; (15898 <user_i2c_write+0x108>)
   1583c:	4798      	blx	r3
	//snprintf(bufferPrint, 64, "msgout[1]: %d\r\n", *(msgout+1));
	//SerialConsoleWriteString(bufferPrint);
	//snprintf(bufferPrint, 64, "msgout[0]: %d\r\n", *msgout);
	//SerialConsoleWriteString(bufferPrint);
	
	bme680msg.address = BME680_I2C_ADDR_PRIMARY;
   1583e:	4b17      	ldr	r3, [pc, #92]	; (1589c <user_i2c_write+0x10c>)
   15840:	2276      	movs	r2, #118	; 0x76
   15842:	701a      	strb	r2, [r3, #0]
	bme680msg.msgOut = &msgout;
   15844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15846:	4b15      	ldr	r3, [pc, #84]	; (1589c <user_i2c_write+0x10c>)
   15848:	605a      	str	r2, [r3, #4]
	bme680msg.lenOut = len+1;
   1584a:	2324      	movs	r3, #36	; 0x24
   1584c:	18fb      	adds	r3, r7, r3
   1584e:	881b      	ldrh	r3, [r3, #0]
   15850:	3301      	adds	r3, #1
   15852:	b29a      	uxth	r2, r3
   15854:	4b11      	ldr	r3, [pc, #68]	; (1589c <user_i2c_write+0x10c>)
   15856:	81da      	strh	r2, [r3, #14]
	
	//free(msgout);
	if (len!=0) {
   15858:	2324      	movs	r3, #36	; 0x24
   1585a:	18fb      	adds	r3, r7, r3
   1585c:	881b      	ldrh	r3, [r3, #0]
   1585e:	2b00      	cmp	r3, #0
   15860:	d00d      	beq.n	1587e <user_i2c_write+0xee>
		 rslt = (int8_t) I2cWriteDataWait(&bme680msg, portMAX_DELAY);
   15862:	2301      	movs	r3, #1
   15864:	425a      	negs	r2, r3
   15866:	4b0d      	ldr	r3, [pc, #52]	; (1589c <user_i2c_write+0x10c>)
   15868:	0011      	movs	r1, r2
   1586a:	0018      	movs	r0, r3
   1586c:	4b0c      	ldr	r3, [pc, #48]	; (158a0 <user_i2c_write+0x110>)
   1586e:	4798      	blx	r3
   15870:	0002      	movs	r2, r0
   15872:	2317      	movs	r3, #23
   15874:	2120      	movs	r1, #32
   15876:	468c      	mov	ip, r1
   15878:	44bc      	add	ip, r7
   1587a:	4463      	add	r3, ip
   1587c:	701a      	strb	r2, [r3, #0]
	}

	
    return rslt;
   1587e:	2317      	movs	r3, #23
   15880:	2220      	movs	r2, #32
   15882:	4694      	mov	ip, r2
   15884:	44bc      	add	ip, r7
   15886:	4463      	add	r3, ip
   15888:	781b      	ldrb	r3, [r3, #0]
   1588a:	b25b      	sxtb	r3, r3
   1588c:	687a      	ldr	r2, [r7, #4]
   1588e:	4695      	mov	sp, r2
   15890:	0018      	movs	r0, r3
   15892:	46bd      	mov	sp, r7
   15894:	b00f      	add	sp, #60	; 0x3c
   15896:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15898:	000378cd 	.word	0x000378cd
   1589c:	20000384 	.word	0x20000384
   158a0:	00016141 	.word	0x00016141

000158a4 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   158a4:	b580      	push	{r7, lr}
   158a6:	b088      	sub	sp, #32
   158a8:	af00      	add	r7, sp, #0
   158aa:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   158ac:	4b3a      	ldr	r3, [pc, #232]	; (15998 <vControlHandlerTask+0xf4>)
   158ae:	0018      	movs	r0, r3
   158b0:	4b3a      	ldr	r3, [pc, #232]	; (1599c <vControlHandlerTask+0xf8>)
   158b2:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   158b4:	2200      	movs	r2, #0
   158b6:	2114      	movs	r1, #20
   158b8:	2002      	movs	r0, #2
   158ba:	4b39      	ldr	r3, [pc, #228]	; (159a0 <vControlHandlerTask+0xfc>)
   158bc:	4798      	blx	r3
   158be:	0002      	movs	r2, r0
   158c0:	4b38      	ldr	r3, [pc, #224]	; (159a4 <vControlHandlerTask+0x100>)
   158c2:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   158c4:	2200      	movs	r2, #0
   158c6:	2103      	movs	r1, #3
   158c8:	2002      	movs	r0, #2
   158ca:	4b35      	ldr	r3, [pc, #212]	; (159a0 <vControlHandlerTask+0xfc>)
   158cc:	4798      	blx	r3
   158ce:	0002      	movs	r2, r0
   158d0:	4b35      	ldr	r3, [pc, #212]	; (159a8 <vControlHandlerTask+0x104>)
   158d2:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   158d4:	4b33      	ldr	r3, [pc, #204]	; (159a4 <vControlHandlerTask+0x100>)
   158d6:	681b      	ldr	r3, [r3, #0]
   158d8:	2b00      	cmp	r3, #0
   158da:	d003      	beq.n	158e4 <vControlHandlerTask+0x40>
   158dc:	4b32      	ldr	r3, [pc, #200]	; (159a8 <vControlHandlerTask+0x104>)
   158de:	681b      	ldr	r3, [r3, #0]
   158e0:	2b00      	cmp	r3, #0
   158e2:	d103      	bne.n	158ec <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   158e4:	4b31      	ldr	r3, [pc, #196]	; (159ac <vControlHandlerTask+0x108>)
   158e6:	0018      	movs	r0, r3
   158e8:	4b2c      	ldr	r3, [pc, #176]	; (1599c <vControlHandlerTask+0xf8>)
   158ea:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   158ec:	4b30      	ldr	r3, [pc, #192]	; (159b0 <vControlHandlerTask+0x10c>)
   158ee:	2200      	movs	r2, #0
   158f0:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   158f2:	4b2f      	ldr	r3, [pc, #188]	; (159b0 <vControlHandlerTask+0x10c>)
   158f4:	781b      	ldrb	r3, [r3, #0]
   158f6:	2b01      	cmp	r3, #1
   158f8:	d01d      	beq.n	15936 <vControlHandlerTask+0x92>
   158fa:	2b02      	cmp	r3, #2
   158fc:	d042      	beq.n	15984 <vControlHandlerTask+0xe0>
   158fe:	2b00      	cmp	r3, #0
   15900:	d13c      	bne.n	1597c <vControlHandlerTask+0xd8>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   15902:	4b28      	ldr	r3, [pc, #160]	; (159a4 <vControlHandlerTask+0x100>)
   15904:	681b      	ldr	r3, [r3, #0]
   15906:	220c      	movs	r2, #12
   15908:	18b9      	adds	r1, r7, r2
   1590a:	2200      	movs	r2, #0
   1590c:	0018      	movs	r0, r3
   1590e:	4b29      	ldr	r3, [pc, #164]	; (159b4 <vControlHandlerTask+0x110>)
   15910:	4798      	blx	r3
   15912:	0003      	movs	r3, r0
   15914:	2b01      	cmp	r3, #1
   15916:	d137      	bne.n	15988 <vControlHandlerTask+0xe4>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   15918:	4b27      	ldr	r3, [pc, #156]	; (159b8 <vControlHandlerTask+0x114>)
   1591a:	0019      	movs	r1, r3
   1591c:	2001      	movs	r0, #1
   1591e:	4b27      	ldr	r3, [pc, #156]	; (159bc <vControlHandlerTask+0x118>)
   15920:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   15922:	230c      	movs	r3, #12
   15924:	18fb      	adds	r3, r7, r3
   15926:	0018      	movs	r0, r3
   15928:	4b25      	ldr	r3, [pc, #148]	; (159c0 <vControlHandlerTask+0x11c>)
   1592a:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   1592c:	4b20      	ldr	r3, [pc, #128]	; (159b0 <vControlHandlerTask+0x10c>)
   1592e:	2201      	movs	r2, #1
   15930:	701a      	strb	r2, [r3, #0]
                }

                break;
   15932:	46c0      	nop			; (mov r8, r8)
   15934:	e028      	b.n	15988 <vControlHandlerTask+0xe4>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   15936:	4b23      	ldr	r3, [pc, #140]	; (159c4 <vControlHandlerTask+0x120>)
   15938:	4798      	blx	r3
   1593a:	1e03      	subs	r3, r0, #0
   1593c:	d026      	beq.n	1598c <vControlHandlerTask+0xe8>
                    // Send back local game packet
					if(isGameOver()) {
   1593e:	4b22      	ldr	r3, [pc, #136]	; (159c8 <vControlHandlerTask+0x124>)
   15940:	4798      	blx	r3
   15942:	1e03      	subs	r3, r0, #0
   15944:	d008      	beq.n	15958 <vControlHandlerTask+0xb4>
						LogMessage(LOG_DEBUG_LVL, "Game Over !  You lose. Type reset to restart the game.\r\n");
   15946:	4b21      	ldr	r3, [pc, #132]	; (159cc <vControlHandlerTask+0x128>)
   15948:	0019      	movs	r1, r3
   1594a:	2001      	movs	r0, #1
   1594c:	4b1b      	ldr	r3, [pc, #108]	; (159bc <vControlHandlerTask+0x118>)
   1594e:	4798      	blx	r3
						controlState = CONTROL_END_GAME;
   15950:	4b17      	ldr	r3, [pc, #92]	; (159b0 <vControlHandlerTask+0x10c>)
   15952:	2202      	movs	r2, #2
   15954:	701a      	strb	r2, [r3, #0]
						controlState = CONTROL_WAIT_FOR_GAME;
					}
                    
                }

                break;
   15956:	e019      	b.n	1598c <vControlHandlerTask+0xe8>
						if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   15958:	4b1d      	ldr	r3, [pc, #116]	; (159d0 <vControlHandlerTask+0x12c>)
   1595a:	4798      	blx	r3
   1595c:	0003      	movs	r3, r0
   1595e:	0018      	movs	r0, r3
   15960:	4b1c      	ldr	r3, [pc, #112]	; (159d4 <vControlHandlerTask+0x130>)
   15962:	4798      	blx	r3
   15964:	0003      	movs	r3, r0
   15966:	2b01      	cmp	r3, #1
   15968:	d004      	beq.n	15974 <vControlHandlerTask+0xd0>
							LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   1596a:	4b1b      	ldr	r3, [pc, #108]	; (159d8 <vControlHandlerTask+0x134>)
   1596c:	0019      	movs	r1, r3
   1596e:	2001      	movs	r0, #1
   15970:	4b12      	ldr	r3, [pc, #72]	; (159bc <vControlHandlerTask+0x118>)
   15972:	4798      	blx	r3
						controlState = CONTROL_WAIT_FOR_GAME;
   15974:	4b0e      	ldr	r3, [pc, #56]	; (159b0 <vControlHandlerTask+0x10c>)
   15976:	2200      	movs	r2, #0
   15978:	701a      	strb	r2, [r3, #0]
                break;
   1597a:	e007      	b.n	1598c <vControlHandlerTask+0xe8>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   1597c:	4b0c      	ldr	r3, [pc, #48]	; (159b0 <vControlHandlerTask+0x10c>)
   1597e:	2200      	movs	r2, #0
   15980:	701a      	strb	r2, [r3, #0]
                break;
   15982:	e004      	b.n	1598e <vControlHandlerTask+0xea>
                break;
   15984:	46c0      	nop			; (mov r8, r8)
   15986:	e002      	b.n	1598e <vControlHandlerTask+0xea>
                break;
   15988:	46c0      	nop			; (mov r8, r8)
   1598a:	e000      	b.n	1598e <vControlHandlerTask+0xea>
                break;
   1598c:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   1598e:	2028      	movs	r0, #40	; 0x28
   15990:	4b12      	ldr	r3, [pc, #72]	; (159dc <vControlHandlerTask+0x138>)
   15992:	4798      	blx	r3
        switch (controlState) {
   15994:	e7ad      	b.n	158f2 <vControlHandlerTask+0x4e>
   15996:	46c0      	nop			; (mov r8, r8)
   15998:	00039230 	.word	0x00039230
   1599c:	00020745 	.word	0x00020745
   159a0:	0001cde5 	.word	0x0001cde5
   159a4:	2000052c 	.word	0x2000052c
   159a8:	20000530 	.word	0x20000530
   159ac:	00039250 	.word	0x00039250
   159b0:	2000471c 	.word	0x2000471c
   159b4:	0001d945 	.word	0x0001d945
   159b8:	0003927c 	.word	0x0003927c
   159bc:	00020831 	.word	0x00020831
   159c0:	0001844d 	.word	0x0001844d
   159c4:	00018489 	.word	0x00018489
   159c8:	000184ad 	.word	0x000184ad
   159cc:	000392a4 	.word	0x000392a4
   159d0:	0001849d 	.word	0x0001849d
   159d4:	00019dd9 	.word	0x00019dd9
   159d8:	000392e0 	.word	0x000392e0
   159dc:	0001eaf1 	.word	0x0001eaf1

000159e0 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   159e0:	b590      	push	{r4, r7, lr}
   159e2:	b085      	sub	sp, #20
   159e4:	af00      	add	r7, sp, #0
   159e6:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   159e8:	4b06      	ldr	r3, [pc, #24]	; (15a04 <ControlAddGameData+0x24>)
   159ea:	6818      	ldr	r0, [r3, #0]
   159ec:	6879      	ldr	r1, [r7, #4]
   159ee:	2300      	movs	r3, #0
   159f0:	220a      	movs	r2, #10
   159f2:	4c05      	ldr	r4, [pc, #20]	; (15a08 <ControlAddGameData+0x28>)
   159f4:	47a0      	blx	r4
   159f6:	0003      	movs	r3, r0
   159f8:	60fb      	str	r3, [r7, #12]
    return error;
   159fa:	68fb      	ldr	r3, [r7, #12]
}
   159fc:	0018      	movs	r0, r3
   159fe:	46bd      	mov	sp, r7
   15a00:	b005      	add	sp, #20
   15a02:	bd90      	pop	{r4, r7, pc}
   15a04:	2000052c 	.word	0x2000052c
   15a08:	0001d08d 	.word	0x0001d08d

00015a0c <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   15a0c:	b580      	push	{r7, lr}
   15a0e:	b084      	sub	sp, #16
   15a10:	af00      	add	r7, sp, #0
   15a12:	6078      	str	r0, [r7, #4]
   15a14:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   15a16:	2300      	movs	r3, #0
   15a18:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   15a1a:	2396      	movs	r3, #150	; 0x96
   15a1c:	005b      	lsls	r3, r3, #1
   15a1e:	0018      	movs	r0, r3
   15a20:	4b25      	ldr	r3, [pc, #148]	; (15ab8 <DistanceSensorGetDistance+0xac>)
   15a22:	4798      	blx	r3
   15a24:	0003      	movs	r3, r0
   15a26:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   15a28:	68fb      	ldr	r3, [r7, #12]
   15a2a:	2b00      	cmp	r3, #0
   15a2c:	d139      	bne.n	15aa2 <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   15a2e:	4b23      	ldr	r3, [pc, #140]	; (15abc <DistanceSensorGetDistance+0xb0>)
   15a30:	2255      	movs	r2, #85	; 0x55
   15a32:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   15a34:	4921      	ldr	r1, [pc, #132]	; (15abc <DistanceSensorGetDistance+0xb0>)
   15a36:	4b22      	ldr	r3, [pc, #136]	; (15ac0 <DistanceSensorGetDistance+0xb4>)
   15a38:	2201      	movs	r2, #1
   15a3a:	0018      	movs	r0, r3
   15a3c:	4b21      	ldr	r3, [pc, #132]	; (15ac4 <DistanceSensorGetDistance+0xb8>)
   15a3e:	4798      	blx	r3
   15a40:	1e03      	subs	r3, r0, #0
   15a42:	d130      	bne.n	15aa6 <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   15a44:	4b20      	ldr	r3, [pc, #128]	; (15ac8 <DistanceSensorGetDistance+0xbc>)
   15a46:	681b      	ldr	r3, [r3, #0]
   15a48:	683a      	ldr	r2, [r7, #0]
   15a4a:	0011      	movs	r1, r2
   15a4c:	0018      	movs	r0, r3
   15a4e:	4b1f      	ldr	r3, [pc, #124]	; (15acc <DistanceSensorGetDistance+0xc0>)
   15a50:	4798      	blx	r3
   15a52:	0003      	movs	r3, r0
   15a54:	2b01      	cmp	r3, #1
   15a56:	d003      	beq.n	15a60 <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   15a58:	2303      	movs	r3, #3
   15a5a:	425b      	negs	r3, r3
   15a5c:	60fb      	str	r3, [r7, #12]
        goto exitf;
   15a5e:	e023      	b.n	15aa8 <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   15a60:	491b      	ldr	r1, [pc, #108]	; (15ad0 <DistanceSensorGetDistance+0xc4>)
   15a62:	4b17      	ldr	r3, [pc, #92]	; (15ac0 <DistanceSensorGetDistance+0xb4>)
   15a64:	2202      	movs	r2, #2
   15a66:	0018      	movs	r0, r3
   15a68:	4b1a      	ldr	r3, [pc, #104]	; (15ad4 <DistanceSensorGetDistance+0xc8>)
   15a6a:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   15a6c:	4b16      	ldr	r3, [pc, #88]	; (15ac8 <DistanceSensorGetDistance+0xbc>)
   15a6e:	681b      	ldr	r3, [r3, #0]
   15a70:	683a      	ldr	r2, [r7, #0]
   15a72:	0011      	movs	r1, r2
   15a74:	0018      	movs	r0, r3
   15a76:	4b15      	ldr	r3, [pc, #84]	; (15acc <DistanceSensorGetDistance+0xc0>)
   15a78:	4798      	blx	r3
   15a7a:	0003      	movs	r3, r0
   15a7c:	2b01      	cmp	r3, #1
   15a7e:	d10c      	bne.n	15a9a <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   15a80:	4b13      	ldr	r3, [pc, #76]	; (15ad0 <DistanceSensorGetDistance+0xc4>)
   15a82:	781b      	ldrb	r3, [r3, #0]
   15a84:	b29b      	uxth	r3, r3
   15a86:	021b      	lsls	r3, r3, #8
   15a88:	b29a      	uxth	r2, r3
   15a8a:	4b11      	ldr	r3, [pc, #68]	; (15ad0 <DistanceSensorGetDistance+0xc4>)
   15a8c:	785b      	ldrb	r3, [r3, #1]
   15a8e:	b29b      	uxth	r3, r3
   15a90:	18d3      	adds	r3, r2, r3
   15a92:	b29a      	uxth	r2, r3
   15a94:	687b      	ldr	r3, [r7, #4]
   15a96:	801a      	strh	r2, [r3, #0]
   15a98:	e006      	b.n	15aa8 <DistanceSensorGetDistance+0x9c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   15a9a:	2303      	movs	r3, #3
   15a9c:	425b      	negs	r3, r3
   15a9e:	60fb      	str	r3, [r7, #12]
        goto exitf;
   15aa0:	e002      	b.n	15aa8 <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   15aa2:	46c0      	nop			; (mov r8, r8)
   15aa4:	e000      	b.n	15aa8 <DistanceSensorGetDistance+0x9c>
        goto exitf;
   15aa6:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   15aa8:	4b0b      	ldr	r3, [pc, #44]	; (15ad8 <DistanceSensorGetDistance+0xcc>)
   15aaa:	4798      	blx	r3

    return error;
   15aac:	68fb      	ldr	r3, [r7, #12]
}
   15aae:	0018      	movs	r0, r3
   15ab0:	46bd      	mov	sp, r7
   15ab2:	b004      	add	sp, #16
   15ab4:	bd80      	pop	{r7, pc}
   15ab6:	46c0      	nop			; (mov r8, r8)
   15ab8:	00015b15 	.word	0x00015b15
   15abc:	20004722 	.word	0x20004722
   15ac0:	2000472c 	.word	0x2000472c
   15ac4:	0002b94d 	.word	0x0002b94d
   15ac8:	20004724 	.word	0x20004724
   15acc:	0001dd9d 	.word	0x0001dd9d
   15ad0:	20004720 	.word	0x20004720
   15ad4:	0002b995 	.word	0x0002b995
   15ad8:	00015add 	.word	0x00015add

00015adc <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   15adc:	b590      	push	{r4, r7, lr}
   15ade:	b083      	sub	sp, #12
   15ae0:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   15ae2:	2300      	movs	r3, #0
   15ae4:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   15ae6:	4b09      	ldr	r3, [pc, #36]	; (15b0c <DistanceSensorFreeMutex+0x30>)
   15ae8:	6818      	ldr	r0, [r3, #0]
   15aea:	2300      	movs	r3, #0
   15aec:	2200      	movs	r2, #0
   15aee:	2100      	movs	r1, #0
   15af0:	4c07      	ldr	r4, [pc, #28]	; (15b10 <DistanceSensorFreeMutex+0x34>)
   15af2:	47a0      	blx	r4
   15af4:	0003      	movs	r3, r0
   15af6:	2b01      	cmp	r3, #1
   15af8:	d002      	beq.n	15b00 <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   15afa:	2314      	movs	r3, #20
   15afc:	425b      	negs	r3, r3
   15afe:	607b      	str	r3, [r7, #4]
    }
    return error;
   15b00:	687b      	ldr	r3, [r7, #4]
}
   15b02:	0018      	movs	r0, r3
   15b04:	46bd      	mov	sp, r7
   15b06:	b003      	add	sp, #12
   15b08:	bd90      	pop	{r4, r7, pc}
   15b0a:	46c0      	nop			; (mov r8, r8)
   15b0c:	20004728 	.word	0x20004728
   15b10:	0001d08d 	.word	0x0001d08d

00015b14 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   15b14:	b580      	push	{r7, lr}
   15b16:	b084      	sub	sp, #16
   15b18:	af00      	add	r7, sp, #0
   15b1a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15b1c:	2300      	movs	r3, #0
   15b1e:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   15b20:	4b08      	ldr	r3, [pc, #32]	; (15b44 <DistanceSensorGetMutex+0x30>)
   15b22:	681b      	ldr	r3, [r3, #0]
   15b24:	687a      	ldr	r2, [r7, #4]
   15b26:	0011      	movs	r1, r2
   15b28:	0018      	movs	r0, r3
   15b2a:	4b07      	ldr	r3, [pc, #28]	; (15b48 <DistanceSensorGetMutex+0x34>)
   15b2c:	4798      	blx	r3
   15b2e:	0003      	movs	r3, r0
   15b30:	2b01      	cmp	r3, #1
   15b32:	d002      	beq.n	15b3a <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   15b34:	231d      	movs	r3, #29
   15b36:	425b      	negs	r3, r3
   15b38:	60fb      	str	r3, [r7, #12]
    }
    return error;
   15b3a:	68fb      	ldr	r3, [r7, #12]
   15b3c:	0018      	movs	r0, r3
   15b3e:	46bd      	mov	sp, r7
   15b40:	b004      	add	sp, #16
   15b42:	bd80      	pop	{r7, pc}
   15b44:	20004728 	.word	0x20004728
   15b48:	0001dd9d 	.word	0x0001dd9d

00015b4c <system_interrupt_enable>:
{
   15b4c:	b580      	push	{r7, lr}
   15b4e:	b082      	sub	sp, #8
   15b50:	af00      	add	r7, sp, #0
   15b52:	0002      	movs	r2, r0
   15b54:	1dfb      	adds	r3, r7, #7
   15b56:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15b58:	4b06      	ldr	r3, [pc, #24]	; (15b74 <system_interrupt_enable+0x28>)
   15b5a:	1dfa      	adds	r2, r7, #7
   15b5c:	7812      	ldrb	r2, [r2, #0]
   15b5e:	0011      	movs	r1, r2
   15b60:	221f      	movs	r2, #31
   15b62:	400a      	ands	r2, r1
   15b64:	2101      	movs	r1, #1
   15b66:	4091      	lsls	r1, r2
   15b68:	000a      	movs	r2, r1
   15b6a:	601a      	str	r2, [r3, #0]
}
   15b6c:	46c0      	nop			; (mov r8, r8)
   15b6e:	46bd      	mov	sp, r7
   15b70:	b002      	add	sp, #8
   15b72:	bd80      	pop	{r7, pc}
   15b74:	e000e100 	.word	0xe000e100

00015b78 <i2c_master_is_syncing>:
{
   15b78:	b580      	push	{r7, lr}
   15b7a:	b084      	sub	sp, #16
   15b7c:	af00      	add	r7, sp, #0
   15b7e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   15b80:	687b      	ldr	r3, [r7, #4]
   15b82:	681b      	ldr	r3, [r3, #0]
   15b84:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   15b86:	68fb      	ldr	r3, [r7, #12]
   15b88:	69db      	ldr	r3, [r3, #28]
   15b8a:	2207      	movs	r2, #7
   15b8c:	4013      	ands	r3, r2
   15b8e:	1e5a      	subs	r2, r3, #1
   15b90:	4193      	sbcs	r3, r2
   15b92:	b2db      	uxtb	r3, r3
}
   15b94:	0018      	movs	r0, r3
   15b96:	46bd      	mov	sp, r7
   15b98:	b004      	add	sp, #16
   15b9a:	bd80      	pop	{r7, pc}

00015b9c <_i2c_master_wait_for_sync>:
{
   15b9c:	b580      	push	{r7, lr}
   15b9e:	b082      	sub	sp, #8
   15ba0:	af00      	add	r7, sp, #0
   15ba2:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   15ba4:	46c0      	nop			; (mov r8, r8)
   15ba6:	687b      	ldr	r3, [r7, #4]
   15ba8:	0018      	movs	r0, r3
   15baa:	4b04      	ldr	r3, [pc, #16]	; (15bbc <_i2c_master_wait_for_sync+0x20>)
   15bac:	4798      	blx	r3
   15bae:	1e03      	subs	r3, r0, #0
   15bb0:	d1f9      	bne.n	15ba6 <_i2c_master_wait_for_sync+0xa>
}
   15bb2:	46c0      	nop			; (mov r8, r8)
   15bb4:	46bd      	mov	sp, r7
   15bb6:	b002      	add	sp, #8
   15bb8:	bd80      	pop	{r7, pc}
   15bba:	46c0      	nop			; (mov r8, r8)
   15bbc:	00015b79 	.word	0x00015b79

00015bc0 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   15bc0:	b580      	push	{r7, lr}
   15bc2:	b082      	sub	sp, #8
   15bc4:	af00      	add	r7, sp, #0
   15bc6:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   15bc8:	687b      	ldr	r3, [r7, #4]
   15bca:	2264      	movs	r2, #100	; 0x64
   15bcc:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   15bce:	687b      	ldr	r3, [r7, #4]
   15bd0:	4a1b      	ldr	r2, [pc, #108]	; (15c40 <i2c_master_get_config_defaults+0x80>)
   15bd2:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   15bd4:	687b      	ldr	r3, [r7, #4]
   15bd6:	2200      	movs	r2, #0
   15bd8:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   15bda:	687b      	ldr	r3, [r7, #4]
   15bdc:	2200      	movs	r2, #0
   15bde:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   15be0:	687b      	ldr	r3, [r7, #4]
   15be2:	2200      	movs	r2, #0
   15be4:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   15be6:	687b      	ldr	r3, [r7, #4]
   15be8:	2280      	movs	r2, #128	; 0x80
   15bea:	0392      	lsls	r2, r2, #14
   15bec:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   15bee:	687b      	ldr	r3, [r7, #4]
   15bf0:	2201      	movs	r2, #1
   15bf2:	4252      	negs	r2, r2
   15bf4:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   15bf6:	687b      	ldr	r3, [r7, #4]
   15bf8:	2201      	movs	r2, #1
   15bfa:	4252      	negs	r2, r2
   15bfc:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   15bfe:	687b      	ldr	r3, [r7, #4]
   15c00:	2200      	movs	r2, #0
   15c02:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   15c04:	687b      	ldr	r3, [r7, #4]
   15c06:	2200      	movs	r2, #0
   15c08:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   15c0a:	687b      	ldr	r3, [r7, #4]
   15c0c:	2224      	movs	r2, #36	; 0x24
   15c0e:	2100      	movs	r1, #0
   15c10:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   15c12:	687b      	ldr	r3, [r7, #4]
   15c14:	2200      	movs	r2, #0
   15c16:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   15c18:	687b      	ldr	r3, [r7, #4]
   15c1a:	222c      	movs	r2, #44	; 0x2c
   15c1c:	2100      	movs	r1, #0
   15c1e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   15c20:	687b      	ldr	r3, [r7, #4]
   15c22:	222d      	movs	r2, #45	; 0x2d
   15c24:	2100      	movs	r1, #0
   15c26:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   15c28:	687b      	ldr	r3, [r7, #4]
   15c2a:	222e      	movs	r2, #46	; 0x2e
   15c2c:	2100      	movs	r1, #0
   15c2e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   15c30:	687b      	ldr	r3, [r7, #4]
   15c32:	22d7      	movs	r2, #215	; 0xd7
   15c34:	861a      	strh	r2, [r3, #48]	; 0x30
}
   15c36:	46c0      	nop			; (mov r8, r8)
   15c38:	46bd      	mov	sp, r7
   15c3a:	b002      	add	sp, #8
   15c3c:	bd80      	pop	{r7, pc}
   15c3e:	46c0      	nop			; (mov r8, r8)
   15c40:	00000d48 	.word	0x00000d48

00015c44 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   15c44:	b580      	push	{r7, lr}
   15c46:	b084      	sub	sp, #16
   15c48:	af00      	add	r7, sp, #0
   15c4a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15c4c:	687b      	ldr	r3, [r7, #4]
   15c4e:	681b      	ldr	r3, [r3, #0]
   15c50:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   15c52:	2300      	movs	r3, #0
   15c54:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   15c56:	687b      	ldr	r3, [r7, #4]
   15c58:	0018      	movs	r0, r3
   15c5a:	4b14      	ldr	r3, [pc, #80]	; (15cac <i2c_master_enable+0x68>)
   15c5c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   15c5e:	68bb      	ldr	r3, [r7, #8]
   15c60:	681b      	ldr	r3, [r3, #0]
   15c62:	2202      	movs	r2, #2
   15c64:	431a      	orrs	r2, r3
   15c66:	68bb      	ldr	r3, [r7, #8]
   15c68:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   15c6a:	687b      	ldr	r3, [r7, #4]
   15c6c:	681b      	ldr	r3, [r3, #0]
   15c6e:	0018      	movs	r0, r3
   15c70:	4b0f      	ldr	r3, [pc, #60]	; (15cb0 <i2c_master_enable+0x6c>)
   15c72:	4798      	blx	r3
   15c74:	0003      	movs	r3, r0
   15c76:	0018      	movs	r0, r3
   15c78:	4b0e      	ldr	r3, [pc, #56]	; (15cb4 <i2c_master_enable+0x70>)
   15c7a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   15c7c:	e00c      	b.n	15c98 <i2c_master_enable+0x54>
		timeout_counter++;
   15c7e:	68fb      	ldr	r3, [r7, #12]
   15c80:	3301      	adds	r3, #1
   15c82:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   15c84:	687b      	ldr	r3, [r7, #4]
   15c86:	88db      	ldrh	r3, [r3, #6]
   15c88:	001a      	movs	r2, r3
   15c8a:	68fb      	ldr	r3, [r7, #12]
   15c8c:	429a      	cmp	r2, r3
   15c8e:	d803      	bhi.n	15c98 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   15c90:	68bb      	ldr	r3, [r7, #8]
   15c92:	2210      	movs	r2, #16
   15c94:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   15c96:	e006      	b.n	15ca6 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   15c98:	68bb      	ldr	r3, [r7, #8]
   15c9a:	8b5b      	ldrh	r3, [r3, #26]
   15c9c:	b29b      	uxth	r3, r3
   15c9e:	001a      	movs	r2, r3
   15ca0:	2310      	movs	r3, #16
   15ca2:	4013      	ands	r3, r2
   15ca4:	d0eb      	beq.n	15c7e <i2c_master_enable+0x3a>
		}
	}
}
   15ca6:	46bd      	mov	sp, r7
   15ca8:	b004      	add	sp, #16
   15caa:	bd80      	pop	{r7, pc}
   15cac:	00015b9d 	.word	0x00015b9d
   15cb0:	0002a0ed 	.word	0x0002a0ed
   15cb4:	00015b4d 	.word	0x00015b4d

00015cb8 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   15cb8:	b580      	push	{r7, lr}
   15cba:	b082      	sub	sp, #8
   15cbc:	af00      	add	r7, sp, #0
   15cbe:	6078      	str	r0, [r7, #4]
   15cc0:	000a      	movs	r2, r1
   15cc2:	1cfb      	adds	r3, r7, #3
   15cc4:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   15cc6:	687b      	ldr	r3, [r7, #4]
   15cc8:	7e5b      	ldrb	r3, [r3, #25]
   15cca:	b2db      	uxtb	r3, r3
   15ccc:	b25a      	sxtb	r2, r3
   15cce:	1cfb      	adds	r3, r7, #3
   15cd0:	781b      	ldrb	r3, [r3, #0]
   15cd2:	2101      	movs	r1, #1
   15cd4:	4099      	lsls	r1, r3
   15cd6:	000b      	movs	r3, r1
   15cd8:	b25b      	sxtb	r3, r3
   15cda:	4313      	orrs	r3, r2
   15cdc:	b25b      	sxtb	r3, r3
   15cde:	b2da      	uxtb	r2, r3
   15ce0:	687b      	ldr	r3, [r7, #4]
   15ce2:	765a      	strb	r2, [r3, #25]
}
   15ce4:	46c0      	nop			; (mov r8, r8)
   15ce6:	46bd      	mov	sp, r7
   15ce8:	b002      	add	sp, #8
   15cea:	bd80      	pop	{r7, pc}

00015cec <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   15cec:	b590      	push	{r4, r7, lr}
   15cee:	b091      	sub	sp, #68	; 0x44
   15cf0:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   15cf2:	2300      	movs	r3, #0
   15cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   15cf6:	233a      	movs	r3, #58	; 0x3a
   15cf8:	18fb      	adds	r3, r7, r3
   15cfa:	2200      	movs	r2, #0
   15cfc:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   15cfe:	1d3b      	adds	r3, r7, #4
   15d00:	0018      	movs	r0, r3
   15d02:	4b21      	ldr	r3, [pc, #132]	; (15d88 <I2cDriverConfigureSensorBus+0x9c>)
   15d04:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   15d06:	1d3b      	adds	r3, r7, #4
   15d08:	4a20      	ldr	r2, [pc, #128]	; (15d8c <I2cDriverConfigureSensorBus+0xa0>)
   15d0a:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   15d0c:	1d3b      	adds	r3, r7, #4
   15d0e:	4a20      	ldr	r2, [pc, #128]	; (15d90 <I2cDriverConfigureSensorBus+0xa4>)
   15d10:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   15d12:	1d3b      	adds	r3, r7, #4
   15d14:	22fa      	movs	r2, #250	; 0xfa
   15d16:	0092      	lsls	r2, r2, #2
   15d18:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   15d1a:	233b      	movs	r3, #59	; 0x3b
   15d1c:	18fb      	adds	r3, r7, r3
   15d1e:	2203      	movs	r2, #3
   15d20:	701a      	strb	r2, [r3, #0]
   15d22:	e01e      	b.n	15d62 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   15d24:	233a      	movs	r3, #58	; 0x3a
   15d26:	18fc      	adds	r4, r7, r3
   15d28:	1d3a      	adds	r2, r7, #4
   15d2a:	491a      	ldr	r1, [pc, #104]	; (15d94 <I2cDriverConfigureSensorBus+0xa8>)
   15d2c:	4b1a      	ldr	r3, [pc, #104]	; (15d98 <I2cDriverConfigureSensorBus+0xac>)
   15d2e:	0018      	movs	r0, r3
   15d30:	4b1a      	ldr	r3, [pc, #104]	; (15d9c <I2cDriverConfigureSensorBus+0xb0>)
   15d32:	4798      	blx	r3
   15d34:	0003      	movs	r3, r0
   15d36:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   15d38:	233a      	movs	r3, #58	; 0x3a
   15d3a:	18fb      	adds	r3, r7, r3
   15d3c:	781b      	ldrb	r3, [r3, #0]
   15d3e:	2b00      	cmp	r3, #0
   15d40:	d104      	bne.n	15d4c <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   15d42:	233a      	movs	r3, #58	; 0x3a
   15d44:	18fb      	adds	r3, r7, r3
   15d46:	781b      	ldrb	r3, [r3, #0]
   15d48:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   15d4a:	e00f      	b.n	15d6c <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   15d4c:	4b12      	ldr	r3, [pc, #72]	; (15d98 <I2cDriverConfigureSensorBus+0xac>)
   15d4e:	0018      	movs	r0, r3
   15d50:	4b13      	ldr	r3, [pc, #76]	; (15da0 <I2cDriverConfigureSensorBus+0xb4>)
   15d52:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   15d54:	233b      	movs	r3, #59	; 0x3b
   15d56:	18fb      	adds	r3, r7, r3
   15d58:	781a      	ldrb	r2, [r3, #0]
   15d5a:	233b      	movs	r3, #59	; 0x3b
   15d5c:	18fb      	adds	r3, r7, r3
   15d5e:	3a01      	subs	r2, #1
   15d60:	701a      	strb	r2, [r3, #0]
   15d62:	233b      	movs	r3, #59	; 0x3b
   15d64:	18fb      	adds	r3, r7, r3
   15d66:	781b      	ldrb	r3, [r3, #0]
   15d68:	2b00      	cmp	r3, #0
   15d6a:	d1db      	bne.n	15d24 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   15d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15d6e:	2b00      	cmp	r3, #0
   15d70:	d104      	bne.n	15d7c <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   15d72:	4b09      	ldr	r3, [pc, #36]	; (15d98 <I2cDriverConfigureSensorBus+0xac>)
   15d74:	0018      	movs	r0, r3
   15d76:	4b0b      	ldr	r3, [pc, #44]	; (15da4 <I2cDriverConfigureSensorBus+0xb8>)
   15d78:	4798      	blx	r3
   15d7a:	e000      	b.n	15d7e <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   15d7c:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   15d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   15d80:	0018      	movs	r0, r3
   15d82:	46bd      	mov	sp, r7
   15d84:	b011      	add	sp, #68	; 0x44
   15d86:	bd90      	pop	{r4, r7, pc}
   15d88:	00015bc1 	.word	0x00015bc1
   15d8c:	00080002 	.word	0x00080002
   15d90:	00090002 	.word	0x00090002
   15d94:	42000800 	.word	0x42000800
   15d98:	20004764 	.word	0x20004764
   15d9c:	0001a3c9 	.word	0x0001a3c9
   15da0:	0001a4fd 	.word	0x0001a4fd
   15da4:	00015c45 	.word	0x00015c45

00015da8 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   15da8:	b580      	push	{r7, lr}
   15daa:	b084      	sub	sp, #16
   15dac:	af00      	add	r7, sp, #0
   15dae:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   15db0:	4b0e      	ldr	r3, [pc, #56]	; (15dec <I2cSensorsTxComplete+0x44>)
   15db2:	2200      	movs	r2, #0
   15db4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   15db6:	4b0d      	ldr	r3, [pc, #52]	; (15dec <I2cSensorsTxComplete+0x44>)
   15db8:	2201      	movs	r2, #1
   15dba:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15dbc:	2300      	movs	r3, #0
   15dbe:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   15dc0:	4b0b      	ldr	r3, [pc, #44]	; (15df0 <I2cSensorsTxComplete+0x48>)
   15dc2:	681b      	ldr	r3, [r3, #0]
   15dc4:	220c      	movs	r2, #12
   15dc6:	18ba      	adds	r2, r7, r2
   15dc8:	0011      	movs	r1, r2
   15dca:	0018      	movs	r0, r3
   15dcc:	4b09      	ldr	r3, [pc, #36]	; (15df4 <I2cSensorsTxComplete+0x4c>)
   15dce:	4798      	blx	r3
    sensorTransmitError = false;
   15dd0:	4b09      	ldr	r3, [pc, #36]	; (15df8 <I2cSensorsTxComplete+0x50>)
   15dd2:	2200      	movs	r2, #0
   15dd4:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   15dd6:	68fb      	ldr	r3, [r7, #12]
   15dd8:	2b00      	cmp	r3, #0
   15dda:	d003      	beq.n	15de4 <I2cSensorsTxComplete+0x3c>
   15ddc:	4b07      	ldr	r3, [pc, #28]	; (15dfc <I2cSensorsTxComplete+0x54>)
   15dde:	2280      	movs	r2, #128	; 0x80
   15de0:	0552      	lsls	r2, r2, #21
   15de2:	601a      	str	r2, [r3, #0]
}
   15de4:	46c0      	nop			; (mov r8, r8)
   15de6:	46bd      	mov	sp, r7
   15de8:	b004      	add	sp, #16
   15dea:	bd80      	pop	{r7, pc}
   15dec:	20000538 	.word	0x20000538
   15df0:	2000478c 	.word	0x2000478c
   15df4:	0001d715 	.word	0x0001d715
   15df8:	20000534 	.word	0x20000534
   15dfc:	e000ed04 	.word	0xe000ed04

00015e00 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   15e00:	b580      	push	{r7, lr}
   15e02:	b084      	sub	sp, #16
   15e04:	af00      	add	r7, sp, #0
   15e06:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   15e08:	4b0e      	ldr	r3, [pc, #56]	; (15e44 <I2cSensorsRxComplete+0x44>)
   15e0a:	2200      	movs	r2, #0
   15e0c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   15e0e:	4b0d      	ldr	r3, [pc, #52]	; (15e44 <I2cSensorsRxComplete+0x44>)
   15e10:	2201      	movs	r2, #1
   15e12:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15e14:	2300      	movs	r3, #0
   15e16:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   15e18:	4b0b      	ldr	r3, [pc, #44]	; (15e48 <I2cSensorsRxComplete+0x48>)
   15e1a:	681b      	ldr	r3, [r3, #0]
   15e1c:	220c      	movs	r2, #12
   15e1e:	18ba      	adds	r2, r7, r2
   15e20:	0011      	movs	r1, r2
   15e22:	0018      	movs	r0, r3
   15e24:	4b09      	ldr	r3, [pc, #36]	; (15e4c <I2cSensorsRxComplete+0x4c>)
   15e26:	4798      	blx	r3
    sensorTransmitError = false;
   15e28:	4b09      	ldr	r3, [pc, #36]	; (15e50 <I2cSensorsRxComplete+0x50>)
   15e2a:	2200      	movs	r2, #0
   15e2c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   15e2e:	68fb      	ldr	r3, [r7, #12]
   15e30:	2b00      	cmp	r3, #0
   15e32:	d003      	beq.n	15e3c <I2cSensorsRxComplete+0x3c>
   15e34:	4b07      	ldr	r3, [pc, #28]	; (15e54 <I2cSensorsRxComplete+0x54>)
   15e36:	2280      	movs	r2, #128	; 0x80
   15e38:	0552      	lsls	r2, r2, #21
   15e3a:	601a      	str	r2, [r3, #0]
}
   15e3c:	46c0      	nop			; (mov r8, r8)
   15e3e:	46bd      	mov	sp, r7
   15e40:	b004      	add	sp, #16
   15e42:	bd80      	pop	{r7, pc}
   15e44:	20000538 	.word	0x20000538
   15e48:	2000478c 	.word	0x2000478c
   15e4c:	0001d715 	.word	0x0001d715
   15e50:	20000534 	.word	0x20000534
   15e54:	e000ed04 	.word	0xe000ed04

00015e58 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   15e58:	b580      	push	{r7, lr}
   15e5a:	b084      	sub	sp, #16
   15e5c:	af00      	add	r7, sp, #0
   15e5e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   15e60:	4b0e      	ldr	r3, [pc, #56]	; (15e9c <I2cSensorsError+0x44>)
   15e62:	2200      	movs	r2, #0
   15e64:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   15e66:	4b0d      	ldr	r3, [pc, #52]	; (15e9c <I2cSensorsError+0x44>)
   15e68:	2201      	movs	r2, #1
   15e6a:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15e6c:	2300      	movs	r3, #0
   15e6e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   15e70:	4b0b      	ldr	r3, [pc, #44]	; (15ea0 <I2cSensorsError+0x48>)
   15e72:	681b      	ldr	r3, [r3, #0]
   15e74:	220c      	movs	r2, #12
   15e76:	18ba      	adds	r2, r7, r2
   15e78:	0011      	movs	r1, r2
   15e7a:	0018      	movs	r0, r3
   15e7c:	4b09      	ldr	r3, [pc, #36]	; (15ea4 <I2cSensorsError+0x4c>)
   15e7e:	4798      	blx	r3
    sensorTransmitError = true;
   15e80:	4b09      	ldr	r3, [pc, #36]	; (15ea8 <I2cSensorsError+0x50>)
   15e82:	2201      	movs	r2, #1
   15e84:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   15e86:	68fb      	ldr	r3, [r7, #12]
   15e88:	2b00      	cmp	r3, #0
   15e8a:	d003      	beq.n	15e94 <I2cSensorsError+0x3c>
   15e8c:	4b07      	ldr	r3, [pc, #28]	; (15eac <I2cSensorsError+0x54>)
   15e8e:	2280      	movs	r2, #128	; 0x80
   15e90:	0552      	lsls	r2, r2, #21
   15e92:	601a      	str	r2, [r3, #0]
}
   15e94:	46c0      	nop			; (mov r8, r8)
   15e96:	46bd      	mov	sp, r7
   15e98:	b004      	add	sp, #16
   15e9a:	bd80      	pop	{r7, pc}
   15e9c:	20000538 	.word	0x20000538
   15ea0:	2000478c 	.word	0x2000478c
   15ea4:	0001d715 	.word	0x0001d715
   15ea8:	20000534 	.word	0x20000534
   15eac:	e000ed04 	.word	0xe000ed04

00015eb0 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   15eb0:	b580      	push	{r7, lr}
   15eb2:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   15eb4:	4911      	ldr	r1, [pc, #68]	; (15efc <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   15eb6:	4b12      	ldr	r3, [pc, #72]	; (15f00 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15eb8:	2200      	movs	r2, #0
   15eba:	0018      	movs	r0, r3
   15ebc:	4b11      	ldr	r3, [pc, #68]	; (15f04 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15ebe:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   15ec0:	4b0f      	ldr	r3, [pc, #60]	; (15f00 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15ec2:	2100      	movs	r1, #0
   15ec4:	0018      	movs	r0, r3
   15ec6:	4b10      	ldr	r3, [pc, #64]	; (15f08 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15ec8:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   15eca:	4910      	ldr	r1, [pc, #64]	; (15f0c <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   15ecc:	4b0c      	ldr	r3, [pc, #48]	; (15f00 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15ece:	2201      	movs	r2, #1
   15ed0:	0018      	movs	r0, r3
   15ed2:	4b0c      	ldr	r3, [pc, #48]	; (15f04 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15ed4:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   15ed6:	4b0a      	ldr	r3, [pc, #40]	; (15f00 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15ed8:	2101      	movs	r1, #1
   15eda:	0018      	movs	r0, r3
   15edc:	4b0a      	ldr	r3, [pc, #40]	; (15f08 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15ede:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   15ee0:	490b      	ldr	r1, [pc, #44]	; (15f10 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   15ee2:	4b07      	ldr	r3, [pc, #28]	; (15f00 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15ee4:	2202      	movs	r2, #2
   15ee6:	0018      	movs	r0, r3
   15ee8:	4b06      	ldr	r3, [pc, #24]	; (15f04 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15eea:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   15eec:	4b04      	ldr	r3, [pc, #16]	; (15f00 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15eee:	2102      	movs	r1, #2
   15ef0:	0018      	movs	r0, r3
   15ef2:	4b05      	ldr	r3, [pc, #20]	; (15f08 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15ef4:	4798      	blx	r3
}
   15ef6:	46c0      	nop			; (mov r8, r8)
   15ef8:	46bd      	mov	sp, r7
   15efa:	bd80      	pop	{r7, pc}
   15efc:	00015da9 	.word	0x00015da9
   15f00:	20004764 	.word	0x20004764
   15f04:	00012909 	.word	0x00012909
   15f08:	00015cb9 	.word	0x00015cb9
   15f0c:	00015e01 	.word	0x00015e01
   15f10:	00015e59 	.word	0x00015e59

00015f14 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   15f14:	b580      	push	{r7, lr}
   15f16:	b082      	sub	sp, #8
   15f18:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   15f1a:	2300      	movs	r3, #0
   15f1c:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   15f1e:	4b14      	ldr	r3, [pc, #80]	; (15f70 <I2cInitializeDriver+0x5c>)
   15f20:	4798      	blx	r3
   15f22:	0003      	movs	r3, r0
   15f24:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   15f26:	687b      	ldr	r3, [r7, #4]
   15f28:	2b00      	cmp	r3, #0
   15f2a:	d11a      	bne.n	15f62 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   15f2c:	4b11      	ldr	r3, [pc, #68]	; (15f74 <I2cInitializeDriver+0x60>)
   15f2e:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   15f30:	2001      	movs	r0, #1
   15f32:	4b11      	ldr	r3, [pc, #68]	; (15f78 <I2cInitializeDriver+0x64>)
   15f34:	4798      	blx	r3
   15f36:	0002      	movs	r2, r0
   15f38:	4b10      	ldr	r3, [pc, #64]	; (15f7c <I2cInitializeDriver+0x68>)
   15f3a:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   15f3c:	2203      	movs	r2, #3
   15f3e:	2100      	movs	r1, #0
   15f40:	2001      	movs	r0, #1
   15f42:	4b0f      	ldr	r3, [pc, #60]	; (15f80 <I2cInitializeDriver+0x6c>)
   15f44:	4798      	blx	r3
   15f46:	0002      	movs	r2, r0
   15f48:	4b0e      	ldr	r3, [pc, #56]	; (15f84 <I2cInitializeDriver+0x70>)
   15f4a:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   15f4c:	4b0b      	ldr	r3, [pc, #44]	; (15f7c <I2cInitializeDriver+0x68>)
   15f4e:	681b      	ldr	r3, [r3, #0]
   15f50:	2b00      	cmp	r3, #0
   15f52:	d003      	beq.n	15f5c <I2cInitializeDriver+0x48>
   15f54:	4b0b      	ldr	r3, [pc, #44]	; (15f84 <I2cInitializeDriver+0x70>)
   15f56:	681b      	ldr	r3, [r3, #0]
   15f58:	2b00      	cmp	r3, #0
   15f5a:	d103      	bne.n	15f64 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   15f5c:	2306      	movs	r3, #6
   15f5e:	607b      	str	r3, [r7, #4]
        goto exit;
   15f60:	e000      	b.n	15f64 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   15f62:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   15f64:	687b      	ldr	r3, [r7, #4]
}
   15f66:	0018      	movs	r0, r3
   15f68:	46bd      	mov	sp, r7
   15f6a:	b002      	add	sp, #8
   15f6c:	bd80      	pop	{r7, pc}
   15f6e:	46c0      	nop			; (mov r8, r8)
   15f70:	00015ced 	.word	0x00015ced
   15f74:	00015eb1 	.word	0x00015eb1
   15f78:	0001d04d 	.word	0x0001d04d
   15f7c:	20004760 	.word	0x20004760
   15f80:	0001cde5 	.word	0x0001cde5
   15f84:	2000478c 	.word	0x2000478c

00015f88 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   15f88:	b590      	push	{r4, r7, lr}
   15f8a:	b085      	sub	sp, #20
   15f8c:	af00      	add	r7, sp, #0
   15f8e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15f90:	2300      	movs	r3, #0
   15f92:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   15f94:	687b      	ldr	r3, [r7, #4]
   15f96:	2b00      	cmp	r3, #0
   15f98:	d003      	beq.n	15fa2 <I2cWriteData+0x1a>
   15f9a:	687b      	ldr	r3, [r7, #4]
   15f9c:	685b      	ldr	r3, [r3, #4]
   15f9e:	2b00      	cmp	r3, #0
   15fa0:	d103      	bne.n	15faa <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   15fa2:	2308      	movs	r3, #8
   15fa4:	425b      	negs	r3, r3
   15fa6:	60fb      	str	r3, [r7, #12]
        goto exit;
   15fa8:	e01f      	b.n	15fea <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   15faa:	687b      	ldr	r3, [r7, #4]
   15fac:	781b      	ldrb	r3, [r3, #0]
   15fae:	b29a      	uxth	r2, r3
   15fb0:	4b10      	ldr	r3, [pc, #64]	; (15ff4 <I2cWriteData+0x6c>)
   15fb2:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   15fb4:	687b      	ldr	r3, [r7, #4]
   15fb6:	685a      	ldr	r2, [r3, #4]
   15fb8:	4b0e      	ldr	r3, [pc, #56]	; (15ff4 <I2cWriteData+0x6c>)
   15fba:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   15fbc:	687b      	ldr	r3, [r7, #4]
   15fbe:	89da      	ldrh	r2, [r3, #14]
   15fc0:	4b0c      	ldr	r3, [pc, #48]	; (15ff4 <I2cWriteData+0x6c>)
   15fc2:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   15fc4:	230b      	movs	r3, #11
   15fc6:	18fc      	adds	r4, r7, r3
   15fc8:	4a0a      	ldr	r2, [pc, #40]	; (15ff4 <I2cWriteData+0x6c>)
   15fca:	4b0b      	ldr	r3, [pc, #44]	; (15ff8 <I2cWriteData+0x70>)
   15fcc:	0011      	movs	r1, r2
   15fce:	0018      	movs	r0, r3
   15fd0:	4b0a      	ldr	r3, [pc, #40]	; (15ffc <I2cWriteData+0x74>)
   15fd2:	4798      	blx	r3
   15fd4:	0003      	movs	r3, r0
   15fd6:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   15fd8:	230b      	movs	r3, #11
   15fda:	18fb      	adds	r3, r7, r3
   15fdc:	781b      	ldrb	r3, [r3, #0]
   15fde:	2b00      	cmp	r3, #0
   15fe0:	d003      	beq.n	15fea <I2cWriteData+0x62>
        error = ERROR_IO;
   15fe2:	2306      	movs	r3, #6
   15fe4:	425b      	negs	r3, r3
   15fe6:	60fb      	str	r3, [r7, #12]
        goto exit;
   15fe8:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   15fea:	68fb      	ldr	r3, [r7, #12]
}
   15fec:	0018      	movs	r0, r3
   15fee:	46bd      	mov	sp, r7
   15ff0:	b005      	add	sp, #20
   15ff2:	bd90      	pop	{r4, r7, pc}
   15ff4:	20004790 	.word	0x20004790
   15ff8:	20004764 	.word	0x20004764
   15ffc:	00012b8d 	.word	0x00012b8d

00016000 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   16000:	b590      	push	{r4, r7, lr}
   16002:	b085      	sub	sp, #20
   16004:	af00      	add	r7, sp, #0
   16006:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   16008:	2300      	movs	r3, #0
   1600a:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   1600c:	687b      	ldr	r3, [r7, #4]
   1600e:	2b00      	cmp	r3, #0
   16010:	d003      	beq.n	1601a <I2cReadData+0x1a>
   16012:	687b      	ldr	r3, [r7, #4]
   16014:	685b      	ldr	r3, [r3, #4]
   16016:	2b00      	cmp	r3, #0
   16018:	d103      	bne.n	16022 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   1601a:	2308      	movs	r3, #8
   1601c:	425b      	negs	r3, r3
   1601e:	60fb      	str	r3, [r7, #12]
        goto exit;
   16020:	e01f      	b.n	16062 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   16022:	687b      	ldr	r3, [r7, #4]
   16024:	781b      	ldrb	r3, [r3, #0]
   16026:	b29a      	uxth	r2, r3
   16028:	4b10      	ldr	r3, [pc, #64]	; (1606c <I2cReadData+0x6c>)
   1602a:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   1602c:	687b      	ldr	r3, [r7, #4]
   1602e:	689a      	ldr	r2, [r3, #8]
   16030:	4b0e      	ldr	r3, [pc, #56]	; (1606c <I2cReadData+0x6c>)
   16032:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   16034:	687b      	ldr	r3, [r7, #4]
   16036:	899a      	ldrh	r2, [r3, #12]
   16038:	4b0c      	ldr	r3, [pc, #48]	; (1606c <I2cReadData+0x6c>)
   1603a:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   1603c:	230b      	movs	r3, #11
   1603e:	18fc      	adds	r4, r7, r3
   16040:	4a0a      	ldr	r2, [pc, #40]	; (1606c <I2cReadData+0x6c>)
   16042:	4b0b      	ldr	r3, [pc, #44]	; (16070 <I2cReadData+0x70>)
   16044:	0011      	movs	r1, r2
   16046:	0018      	movs	r0, r3
   16048:	4b0a      	ldr	r3, [pc, #40]	; (16074 <I2cReadData+0x74>)
   1604a:	4798      	blx	r3
   1604c:	0003      	movs	r3, r0
   1604e:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   16050:	230b      	movs	r3, #11
   16052:	18fb      	adds	r3, r7, r3
   16054:	781b      	ldrb	r3, [r3, #0]
   16056:	2b00      	cmp	r3, #0
   16058:	d003      	beq.n	16062 <I2cReadData+0x62>
        error = ERROR_IO;
   1605a:	2306      	movs	r3, #6
   1605c:	425b      	negs	r3, r3
   1605e:	60fb      	str	r3, [r7, #12]
        goto exit;
   16060:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   16062:	68fb      	ldr	r3, [r7, #12]
}
   16064:	0018      	movs	r0, r3
   16066:	46bd      	mov	sp, r7
   16068:	b005      	add	sp, #20
   1606a:	bd90      	pop	{r4, r7, pc}
   1606c:	20004790 	.word	0x20004790
   16070:	20004764 	.word	0x20004764
   16074:	00012aa9 	.word	0x00012aa9

00016078 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   16078:	b590      	push	{r4, r7, lr}
   1607a:	b083      	sub	sp, #12
   1607c:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   1607e:	2300      	movs	r3, #0
   16080:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   16082:	4b09      	ldr	r3, [pc, #36]	; (160a8 <I2cFreeMutex+0x30>)
   16084:	6818      	ldr	r0, [r3, #0]
   16086:	2300      	movs	r3, #0
   16088:	2200      	movs	r2, #0
   1608a:	2100      	movs	r1, #0
   1608c:	4c07      	ldr	r4, [pc, #28]	; (160ac <I2cFreeMutex+0x34>)
   1608e:	47a0      	blx	r4
   16090:	0003      	movs	r3, r0
   16092:	2b01      	cmp	r3, #1
   16094:	d002      	beq.n	1609c <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   16096:	2314      	movs	r3, #20
   16098:	425b      	negs	r3, r3
   1609a:	607b      	str	r3, [r7, #4]
    }
    return error;
   1609c:	687b      	ldr	r3, [r7, #4]
}
   1609e:	0018      	movs	r0, r3
   160a0:	46bd      	mov	sp, r7
   160a2:	b003      	add	sp, #12
   160a4:	bd90      	pop	{r4, r7, pc}
   160a6:	46c0      	nop			; (mov r8, r8)
   160a8:	20004760 	.word	0x20004760
   160ac:	0001d08d 	.word	0x0001d08d

000160b0 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   160b0:	b580      	push	{r7, lr}
   160b2:	b084      	sub	sp, #16
   160b4:	af00      	add	r7, sp, #0
   160b6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   160b8:	2300      	movs	r3, #0
   160ba:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   160bc:	4b08      	ldr	r3, [pc, #32]	; (160e0 <I2cGetMutex+0x30>)
   160be:	681b      	ldr	r3, [r3, #0]
   160c0:	687a      	ldr	r2, [r7, #4]
   160c2:	0011      	movs	r1, r2
   160c4:	0018      	movs	r0, r3
   160c6:	4b07      	ldr	r3, [pc, #28]	; (160e4 <I2cGetMutex+0x34>)
   160c8:	4798      	blx	r3
   160ca:	0003      	movs	r3, r0
   160cc:	2b01      	cmp	r3, #1
   160ce:	d002      	beq.n	160d6 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   160d0:	231d      	movs	r3, #29
   160d2:	425b      	negs	r3, r3
   160d4:	60fb      	str	r3, [r7, #12]
    }
    return error;
   160d6:	68fb      	ldr	r3, [r7, #12]
}
   160d8:	0018      	movs	r0, r3
   160da:	46bd      	mov	sp, r7
   160dc:	b004      	add	sp, #16
   160de:	bd80      	pop	{r7, pc}
   160e0:	20004760 	.word	0x20004760
   160e4:	0001dd9d 	.word	0x0001dd9d

000160e8 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   160e8:	b580      	push	{r7, lr}
   160ea:	b084      	sub	sp, #16
   160ec:	af00      	add	r7, sp, #0
   160ee:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   160f0:	2300      	movs	r3, #0
   160f2:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   160f4:	4b04      	ldr	r3, [pc, #16]	; (16108 <I2cGetSemaphoreHandle+0x20>)
   160f6:	681a      	ldr	r2, [r3, #0]
   160f8:	687b      	ldr	r3, [r7, #4]
   160fa:	601a      	str	r2, [r3, #0]
    return error;
   160fc:	68fb      	ldr	r3, [r7, #12]
}
   160fe:	0018      	movs	r0, r3
   16100:	46bd      	mov	sp, r7
   16102:	b004      	add	sp, #16
   16104:	bd80      	pop	{r7, pc}
   16106:	46c0      	nop			; (mov r8, r8)
   16108:	2000478c 	.word	0x2000478c

0001610c <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   1610c:	b580      	push	{r7, lr}
   1610e:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   16110:	4b02      	ldr	r3, [pc, #8]	; (1611c <I2cGetTaskErrorStatus+0x10>)
   16112:	781b      	ldrb	r3, [r3, #0]
}
   16114:	0018      	movs	r0, r3
   16116:	46bd      	mov	sp, r7
   16118:	bd80      	pop	{r7, pc}
   1611a:	46c0      	nop			; (mov r8, r8)
   1611c:	20000534 	.word	0x20000534

00016120 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   16120:	b580      	push	{r7, lr}
   16122:	b082      	sub	sp, #8
   16124:	af00      	add	r7, sp, #0
   16126:	0002      	movs	r2, r0
   16128:	1dfb      	adds	r3, r7, #7
   1612a:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   1612c:	4b03      	ldr	r3, [pc, #12]	; (1613c <I2cSetTaskErrorStatus+0x1c>)
   1612e:	1dfa      	adds	r2, r7, #7
   16130:	7812      	ldrb	r2, [r2, #0]
   16132:	701a      	strb	r2, [r3, #0]
}
   16134:	46c0      	nop			; (mov r8, r8)
   16136:	46bd      	mov	sp, r7
   16138:	b002      	add	sp, #8
   1613a:	bd80      	pop	{r7, pc}
   1613c:	20000534 	.word	0x20000534

00016140 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   16140:	b580      	push	{r7, lr}
   16142:	b084      	sub	sp, #16
   16144:	af00      	add	r7, sp, #0
   16146:	6078      	str	r0, [r7, #4]
   16148:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   1614a:	2300      	movs	r3, #0
   1614c:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   1614e:	2300      	movs	r3, #0
   16150:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   16152:	2396      	movs	r3, #150	; 0x96
   16154:	005b      	lsls	r3, r3, #1
   16156:	0018      	movs	r0, r3
   16158:	4b28      	ldr	r3, [pc, #160]	; (161fc <I2cWriteDataWait+0xbc>)
   1615a:	4798      	blx	r3
   1615c:	0003      	movs	r3, r0
   1615e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   16160:	68fb      	ldr	r3, [r7, #12]
   16162:	2b00      	cmp	r3, #0
   16164:	d138      	bne.n	161d8 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   16166:	2308      	movs	r3, #8
   16168:	18fb      	adds	r3, r7, r3
   1616a:	0018      	movs	r0, r3
   1616c:	4b24      	ldr	r3, [pc, #144]	; (16200 <I2cWriteDataWait+0xc0>)
   1616e:	4798      	blx	r3
   16170:	0003      	movs	r3, r0
   16172:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   16174:	68fb      	ldr	r3, [r7, #12]
   16176:	2b00      	cmp	r3, #0
   16178:	d130      	bne.n	161dc <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1617a:	687b      	ldr	r3, [r7, #4]
   1617c:	0018      	movs	r0, r3
   1617e:	4b21      	ldr	r3, [pc, #132]	; (16204 <I2cWriteDataWait+0xc4>)
   16180:	4798      	blx	r3
   16182:	0003      	movs	r3, r0
   16184:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   16186:	68fb      	ldr	r3, [r7, #12]
   16188:	2b00      	cmp	r3, #0
   1618a:	d12a      	bne.n	161e2 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1618c:	68bb      	ldr	r3, [r7, #8]
   1618e:	683a      	ldr	r2, [r7, #0]
   16190:	0011      	movs	r1, r2
   16192:	0018      	movs	r0, r3
   16194:	4b1c      	ldr	r3, [pc, #112]	; (16208 <I2cWriteDataWait+0xc8>)
   16196:	4798      	blx	r3
   16198:	0003      	movs	r3, r0
   1619a:	2b01      	cmp	r3, #1
   1619c:	d111      	bne.n	161c2 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1619e:	4b1b      	ldr	r3, [pc, #108]	; (1620c <I2cWriteDataWait+0xcc>)
   161a0:	4798      	blx	r3
   161a2:	1e03      	subs	r3, r0, #0
   161a4:	d011      	beq.n	161ca <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   161a6:	2000      	movs	r0, #0
   161a8:	4b19      	ldr	r3, [pc, #100]	; (16210 <I2cWriteDataWait+0xd0>)
   161aa:	4798      	blx	r3
            if (error != ERROR_NONE) {
   161ac:	68fb      	ldr	r3, [r7, #12]
   161ae:	2b00      	cmp	r3, #0
   161b0:	d003      	beq.n	161ba <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   161b2:	2321      	movs	r3, #33	; 0x21
   161b4:	425b      	negs	r3, r3
   161b6:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   161b8:	e014      	b.n	161e4 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   161ba:	2303      	movs	r3, #3
   161bc:	425b      	negs	r3, r3
   161be:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   161c0:	e010      	b.n	161e4 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   161c2:	2303      	movs	r3, #3
   161c4:	425b      	negs	r3, r3
   161c6:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   161c8:	e00c      	b.n	161e4 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   161ca:	4b12      	ldr	r3, [pc, #72]	; (16214 <I2cWriteDataWait+0xd4>)
   161cc:	4798      	blx	r3
   161ce:	0002      	movs	r2, r0
   161d0:	68fb      	ldr	r3, [r7, #12]
   161d2:	4313      	orrs	r3, r2
   161d4:	60fb      	str	r3, [r7, #12]
   161d6:	e002      	b.n	161de <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   161d8:	46c0      	nop			; (mov r8, r8)
   161da:	e000      	b.n	161de <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   161dc:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   161de:	68fb      	ldr	r3, [r7, #12]
   161e0:	e007      	b.n	161f2 <I2cWriteDataWait+0xb2>
        goto exitError0;
   161e2:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   161e4:	4b0b      	ldr	r3, [pc, #44]	; (16214 <I2cWriteDataWait+0xd4>)
   161e6:	4798      	blx	r3
   161e8:	0002      	movs	r2, r0
   161ea:	68fb      	ldr	r3, [r7, #12]
   161ec:	4313      	orrs	r3, r2
   161ee:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   161f0:	68fb      	ldr	r3, [r7, #12]
}
   161f2:	0018      	movs	r0, r3
   161f4:	46bd      	mov	sp, r7
   161f6:	b004      	add	sp, #16
   161f8:	bd80      	pop	{r7, pc}
   161fa:	46c0      	nop			; (mov r8, r8)
   161fc:	000160b1 	.word	0x000160b1
   16200:	000160e9 	.word	0x000160e9
   16204:	00015f89 	.word	0x00015f89
   16208:	0001dd9d 	.word	0x0001dd9d
   1620c:	0001610d 	.word	0x0001610d
   16210:	00016121 	.word	0x00016121
   16214:	00016079 	.word	0x00016079

00016218 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   16218:	b580      	push	{r7, lr}
   1621a:	b086      	sub	sp, #24
   1621c:	af00      	add	r7, sp, #0
   1621e:	60f8      	str	r0, [r7, #12]
   16220:	60b9      	str	r1, [r7, #8]
   16222:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   16224:	2300      	movs	r3, #0
   16226:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   16228:	2300      	movs	r3, #0
   1622a:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   1622c:	2396      	movs	r3, #150	; 0x96
   1622e:	005b      	lsls	r3, r3, #1
   16230:	0018      	movs	r0, r3
   16232:	4b35      	ldr	r3, [pc, #212]	; (16308 <I2cReadDataWait+0xf0>)
   16234:	4798      	blx	r3
   16236:	0003      	movs	r3, r0
   16238:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1623a:	697b      	ldr	r3, [r7, #20]
   1623c:	2b00      	cmp	r3, #0
   1623e:	d155      	bne.n	162ec <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   16240:	2310      	movs	r3, #16
   16242:	18fb      	adds	r3, r7, r3
   16244:	0018      	movs	r0, r3
   16246:	4b31      	ldr	r3, [pc, #196]	; (1630c <I2cReadDataWait+0xf4>)
   16248:	4798      	blx	r3
   1624a:	0003      	movs	r3, r0
   1624c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1624e:	697b      	ldr	r3, [r7, #20]
   16250:	2b00      	cmp	r3, #0
   16252:	d14d      	bne.n	162f0 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   16254:	68fb      	ldr	r3, [r7, #12]
   16256:	0018      	movs	r0, r3
   16258:	4b2d      	ldr	r3, [pc, #180]	; (16310 <I2cReadDataWait+0xf8>)
   1625a:	4798      	blx	r3
   1625c:	0003      	movs	r3, r0
   1625e:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   16260:	697b      	ldr	r3, [r7, #20]
   16262:	2b00      	cmp	r3, #0
   16264:	d147      	bne.n	162f6 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   16266:	693b      	ldr	r3, [r7, #16]
   16268:	687a      	ldr	r2, [r7, #4]
   1626a:	0011      	movs	r1, r2
   1626c:	0018      	movs	r0, r3
   1626e:	4b29      	ldr	r3, [pc, #164]	; (16314 <I2cReadDataWait+0xfc>)
   16270:	4798      	blx	r3
   16272:	0003      	movs	r3, r0
   16274:	2b01      	cmp	r3, #1
   16276:	d118      	bne.n	162aa <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   16278:	4b27      	ldr	r3, [pc, #156]	; (16318 <I2cReadDataWait+0x100>)
   1627a:	4798      	blx	r3
   1627c:	1e03      	subs	r3, r0, #0
   1627e:	d006      	beq.n	1628e <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   16280:	2000      	movs	r0, #0
   16282:	4b26      	ldr	r3, [pc, #152]	; (1631c <I2cReadDataWait+0x104>)
   16284:	4798      	blx	r3
            error = ERROR_ABORTED;
   16286:	2303      	movs	r3, #3
   16288:	425b      	negs	r3, r3
   1628a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1628c:	e034      	b.n	162f8 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   1628e:	68bb      	ldr	r3, [r7, #8]
   16290:	0018      	movs	r0, r3
   16292:	4b23      	ldr	r3, [pc, #140]	; (16320 <I2cReadDataWait+0x108>)
   16294:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   16296:	68fb      	ldr	r3, [r7, #12]
   16298:	0018      	movs	r0, r3
   1629a:	4b22      	ldr	r3, [pc, #136]	; (16324 <I2cReadDataWait+0x10c>)
   1629c:	4798      	blx	r3
   1629e:	0003      	movs	r3, r0
   162a0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   162a2:	697b      	ldr	r3, [r7, #20]
   162a4:	2b00      	cmp	r3, #0
   162a6:	d004      	beq.n	162b2 <I2cReadDataWait+0x9a>
        goto exitError0;
   162a8:	e026      	b.n	162f8 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   162aa:	2303      	movs	r3, #3
   162ac:	425b      	negs	r3, r3
   162ae:	617b      	str	r3, [r7, #20]
        goto exitError0;
   162b0:	e022      	b.n	162f8 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   162b2:	693b      	ldr	r3, [r7, #16]
   162b4:	687a      	ldr	r2, [r7, #4]
   162b6:	0011      	movs	r1, r2
   162b8:	0018      	movs	r0, r3
   162ba:	4b16      	ldr	r3, [pc, #88]	; (16314 <I2cReadDataWait+0xfc>)
   162bc:	4798      	blx	r3
   162be:	0003      	movs	r3, r0
   162c0:	2b01      	cmp	r3, #1
   162c2:	d10a      	bne.n	162da <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   162c4:	4b14      	ldr	r3, [pc, #80]	; (16318 <I2cReadDataWait+0x100>)
   162c6:	4798      	blx	r3
   162c8:	1e03      	subs	r3, r0, #0
   162ca:	d00a      	beq.n	162e2 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   162cc:	2000      	movs	r0, #0
   162ce:	4b13      	ldr	r3, [pc, #76]	; (1631c <I2cReadDataWait+0x104>)
   162d0:	4798      	blx	r3
            error = ERROR_ABORTED;
   162d2:	2303      	movs	r3, #3
   162d4:	425b      	negs	r3, r3
   162d6:	617b      	str	r3, [r7, #20]
            goto exitError0;
   162d8:	e00e      	b.n	162f8 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   162da:	2303      	movs	r3, #3
   162dc:	425b      	negs	r3, r3
   162de:	617b      	str	r3, [r7, #20]
        goto exitError0;
   162e0:	e00a      	b.n	162f8 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   162e2:	4b11      	ldr	r3, [pc, #68]	; (16328 <I2cReadDataWait+0x110>)
   162e4:	4798      	blx	r3
   162e6:	0003      	movs	r3, r0
   162e8:	617b      	str	r3, [r7, #20]
   162ea:	e002      	b.n	162f2 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   162ec:	46c0      	nop			; (mov r8, r8)
   162ee:	e000      	b.n	162f2 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   162f0:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   162f2:	697b      	ldr	r3, [r7, #20]
   162f4:	e003      	b.n	162fe <I2cReadDataWait+0xe6>
        goto exitError0;
   162f6:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   162f8:	4b0b      	ldr	r3, [pc, #44]	; (16328 <I2cReadDataWait+0x110>)
   162fa:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   162fc:	697b      	ldr	r3, [r7, #20]
}
   162fe:	0018      	movs	r0, r3
   16300:	46bd      	mov	sp, r7
   16302:	b006      	add	sp, #24
   16304:	bd80      	pop	{r7, pc}
   16306:	46c0      	nop			; (mov r8, r8)
   16308:	000160b1 	.word	0x000160b1
   1630c:	000160e9 	.word	0x000160e9
   16310:	00015f89 	.word	0x00015f89
   16314:	0001dd9d 	.word	0x0001dd9d
   16318:	0001610d 	.word	0x0001610d
   1631c:	00016121 	.word	0x00016121
   16320:	0001eaf1 	.word	0x0001eaf1
   16324:	00016001 	.word	0x00016001
   16328:	00016079 	.word	0x00016079

0001632c <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   1632c:	b580      	push	{r7, lr}
   1632e:	b086      	sub	sp, #24
   16330:	af00      	add	r7, sp, #0
   16332:	60f8      	str	r0, [r7, #12]
   16334:	60b9      	str	r1, [r7, #8]
   16336:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   16338:	2300      	movs	r3, #0
   1633a:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   1633c:	2300      	movs	r3, #0
   1633e:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   16340:	2396      	movs	r3, #150	; 0x96
   16342:	005b      	lsls	r3, r3, #1
   16344:	0018      	movs	r0, r3
   16346:	4b24      	ldr	r3, [pc, #144]	; (163d8 <I2cPingAddressWait+0xac>)
   16348:	4798      	blx	r3
   1634a:	0003      	movs	r3, r0
   1634c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1634e:	697b      	ldr	r3, [r7, #20]
   16350:	2b00      	cmp	r3, #0
   16352:	d133      	bne.n	163bc <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   16354:	2310      	movs	r3, #16
   16356:	18fb      	adds	r3, r7, r3
   16358:	0018      	movs	r0, r3
   1635a:	4b20      	ldr	r3, [pc, #128]	; (163dc <I2cPingAddressWait+0xb0>)
   1635c:	4798      	blx	r3
   1635e:	0003      	movs	r3, r0
   16360:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   16362:	697b      	ldr	r3, [r7, #20]
   16364:	2b00      	cmp	r3, #0
   16366:	d12b      	bne.n	163c0 <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   16368:	68fb      	ldr	r3, [r7, #12]
   1636a:	0018      	movs	r0, r3
   1636c:	4b1c      	ldr	r3, [pc, #112]	; (163e0 <I2cPingAddressWait+0xb4>)
   1636e:	4798      	blx	r3
   16370:	0003      	movs	r3, r0
   16372:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   16374:	697b      	ldr	r3, [r7, #20]
   16376:	2b00      	cmp	r3, #0
   16378:	d125      	bne.n	163c6 <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1637a:	693b      	ldr	r3, [r7, #16]
   1637c:	687a      	ldr	r2, [r7, #4]
   1637e:	0011      	movs	r1, r2
   16380:	0018      	movs	r0, r3
   16382:	4b18      	ldr	r3, [pc, #96]	; (163e4 <I2cPingAddressWait+0xb8>)
   16384:	4798      	blx	r3
   16386:	0003      	movs	r3, r0
   16388:	2b01      	cmp	r3, #1
   1638a:	d113      	bne.n	163b4 <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1638c:	4b16      	ldr	r3, [pc, #88]	; (163e8 <I2cPingAddressWait+0xbc>)
   1638e:	4798      	blx	r3
   16390:	1e03      	subs	r3, r0, #0
   16392:	d006      	beq.n	163a2 <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
   16394:	2000      	movs	r0, #0
   16396:	4b15      	ldr	r3, [pc, #84]	; (163ec <I2cPingAddressWait+0xc0>)
   16398:	4798      	blx	r3
            error = ERROR_ABORTED;
   1639a:	2303      	movs	r3, #3
   1639c:	425b      	negs	r3, r3
   1639e:	617b      	str	r3, [r7, #20]
            goto exitError0;
   163a0:	e012      	b.n	163c8 <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
   163a2:	68bb      	ldr	r3, [r7, #8]
   163a4:	0018      	movs	r0, r3
   163a6:	4b12      	ldr	r3, [pc, #72]	; (163f0 <I2cPingAddressWait+0xc4>)
   163a8:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
   163aa:	4b12      	ldr	r3, [pc, #72]	; (163f4 <I2cPingAddressWait+0xc8>)
   163ac:	4798      	blx	r3
   163ae:	0003      	movs	r3, r0
   163b0:	617b      	str	r3, [r7, #20]
   163b2:	e006      	b.n	163c2 <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
   163b4:	2303      	movs	r3, #3
   163b6:	425b      	negs	r3, r3
   163b8:	617b      	str	r3, [r7, #20]
        goto exitError0;
   163ba:	e005      	b.n	163c8 <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
   163bc:	46c0      	nop			; (mov r8, r8)
   163be:	e000      	b.n	163c2 <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
   163c0:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
   163c2:	697b      	ldr	r3, [r7, #20]
   163c4:	e003      	b.n	163ce <I2cPingAddressWait+0xa2>
        goto exitError0;
   163c6:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   163c8:	4b0a      	ldr	r3, [pc, #40]	; (163f4 <I2cPingAddressWait+0xc8>)
   163ca:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   163cc:	697b      	ldr	r3, [r7, #20]
}
   163ce:	0018      	movs	r0, r3
   163d0:	46bd      	mov	sp, r7
   163d2:	b006      	add	sp, #24
   163d4:	bd80      	pop	{r7, pc}
   163d6:	46c0      	nop			; (mov r8, r8)
   163d8:	000160b1 	.word	0x000160b1
   163dc:	000160e9 	.word	0x000160e9
   163e0:	00015f89 	.word	0x00015f89
   163e4:	0001dd9d 	.word	0x0001dd9d
   163e8:	0001610d 	.word	0x0001610d
   163ec:	00016121 	.word	0x00016121
   163f0:	0001eaf1 	.word	0x0001eaf1
   163f4:	00016079 	.word	0x00016079

000163f8 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   163f8:	b5b0      	push	{r4, r5, r7, lr}
   163fa:	b086      	sub	sp, #24
   163fc:	af00      	add	r7, sp, #0
   163fe:	60f8      	str	r0, [r7, #12]
   16400:	0008      	movs	r0, r1
   16402:	607a      	str	r2, [r7, #4]
   16404:	0019      	movs	r1, r3
   16406:	230b      	movs	r3, #11
   16408:	18fb      	adds	r3, r7, r3
   1640a:	1c02      	adds	r2, r0, #0
   1640c:	701a      	strb	r2, [r3, #0]
   1640e:	2308      	movs	r3, #8
   16410:	18fb      	adds	r3, r7, r3
   16412:	1c0a      	adds	r2, r1, #0
   16414:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   16416:	68fb      	ldr	r3, [r7, #12]
   16418:	685c      	ldr	r4, [r3, #4]
   1641a:	68fb      	ldr	r3, [r7, #12]
   1641c:	6898      	ldr	r0, [r3, #8]
   1641e:	2308      	movs	r3, #8
   16420:	18fb      	adds	r3, r7, r3
   16422:	881d      	ldrh	r5, [r3, #0]
   16424:	687a      	ldr	r2, [r7, #4]
   16426:	230b      	movs	r3, #11
   16428:	18fb      	adds	r3, r7, r3
   1642a:	7819      	ldrb	r1, [r3, #0]
   1642c:	002b      	movs	r3, r5
   1642e:	47a0      	blx	r4
   16430:	0003      	movs	r3, r0
   16432:	617b      	str	r3, [r7, #20]

  return ret;
   16434:	697b      	ldr	r3, [r7, #20]
}
   16436:	0018      	movs	r0, r3
   16438:	46bd      	mov	sp, r7
   1643a:	b006      	add	sp, #24
   1643c:	bdb0      	pop	{r4, r5, r7, pc}

0001643e <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   1643e:	b5b0      	push	{r4, r5, r7, lr}
   16440:	b086      	sub	sp, #24
   16442:	af00      	add	r7, sp, #0
   16444:	60f8      	str	r0, [r7, #12]
   16446:	0008      	movs	r0, r1
   16448:	607a      	str	r2, [r7, #4]
   1644a:	0019      	movs	r1, r3
   1644c:	230b      	movs	r3, #11
   1644e:	18fb      	adds	r3, r7, r3
   16450:	1c02      	adds	r2, r0, #0
   16452:	701a      	strb	r2, [r3, #0]
   16454:	2308      	movs	r3, #8
   16456:	18fb      	adds	r3, r7, r3
   16458:	1c0a      	adds	r2, r1, #0
   1645a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   1645c:	68fb      	ldr	r3, [r7, #12]
   1645e:	681c      	ldr	r4, [r3, #0]
   16460:	68fb      	ldr	r3, [r7, #12]
   16462:	6898      	ldr	r0, [r3, #8]
   16464:	2308      	movs	r3, #8
   16466:	18fb      	adds	r3, r7, r3
   16468:	881d      	ldrh	r5, [r3, #0]
   1646a:	687a      	ldr	r2, [r7, #4]
   1646c:	230b      	movs	r3, #11
   1646e:	18fb      	adds	r3, r7, r3
   16470:	7819      	ldrb	r1, [r3, #0]
   16472:	002b      	movs	r3, r5
   16474:	47a0      	blx	r4
   16476:	0003      	movs	r3, r0
   16478:	617b      	str	r3, [r7, #20]

  return ret;
   1647a:	697b      	ldr	r3, [r7, #20]
}
   1647c:	0018      	movs	r0, r3
   1647e:	46bd      	mov	sp, r7
   16480:	b006      	add	sp, #24
   16482:	bdb0      	pop	{r4, r5, r7, pc}

00016484 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   16484:	b580      	push	{r7, lr}
   16486:	b082      	sub	sp, #8
   16488:	af00      	add	r7, sp, #0
   1648a:	0002      	movs	r2, r0
   1648c:	1dbb      	adds	r3, r7, #6
   1648e:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   16490:	1dbb      	adds	r3, r7, #6
   16492:	2200      	movs	r2, #0
   16494:	5e9a      	ldrsh	r2, [r3, r2]
   16496:	4b06      	ldr	r3, [pc, #24]	; (164b0 <lsm6dso_from_fs2_to_mg+0x2c>)
   16498:	0010      	movs	r0, r2
   1649a:	4798      	blx	r3
   1649c:	1c02      	adds	r2, r0, #0
   1649e:	4b05      	ldr	r3, [pc, #20]	; (164b4 <lsm6dso_from_fs2_to_mg+0x30>)
   164a0:	4905      	ldr	r1, [pc, #20]	; (164b8 <lsm6dso_from_fs2_to_mg+0x34>)
   164a2:	1c10      	adds	r0, r2, #0
   164a4:	4798      	blx	r3
   164a6:	1c03      	adds	r3, r0, #0
}
   164a8:	1c18      	adds	r0, r3, #0
   164aa:	46bd      	mov	sp, r7
   164ac:	b002      	add	sp, #8
   164ae:	bd80      	pop	{r7, pc}
   164b0:	00035d19 	.word	0x00035d19
   164b4:	00035a99 	.word	0x00035a99
   164b8:	3d79db23 	.word	0x3d79db23

000164bc <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   164bc:	b590      	push	{r4, r7, lr}
   164be:	b085      	sub	sp, #20
   164c0:	af00      	add	r7, sp, #0
   164c2:	6078      	str	r0, [r7, #4]
   164c4:	000a      	movs	r2, r1
   164c6:	1cfb      	adds	r3, r7, #3
   164c8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   164ca:	2308      	movs	r3, #8
   164cc:	18fa      	adds	r2, r7, r3
   164ce:	6878      	ldr	r0, [r7, #4]
   164d0:	2301      	movs	r3, #1
   164d2:	2110      	movs	r1, #16
   164d4:	4c12      	ldr	r4, [pc, #72]	; (16520 <lsm6dso_xl_full_scale_set+0x64>)
   164d6:	47a0      	blx	r4
   164d8:	0003      	movs	r3, r0
   164da:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   164dc:	68fb      	ldr	r3, [r7, #12]
   164de:	2b00      	cmp	r3, #0
   164e0:	d119      	bne.n	16516 <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   164e2:	1cfb      	adds	r3, r7, #3
   164e4:	781b      	ldrb	r3, [r3, #0]
   164e6:	2203      	movs	r2, #3
   164e8:	4013      	ands	r3, r2
   164ea:	b2da      	uxtb	r2, r3
   164ec:	2308      	movs	r3, #8
   164ee:	18fb      	adds	r3, r7, r3
   164f0:	2103      	movs	r1, #3
   164f2:	400a      	ands	r2, r1
   164f4:	0090      	lsls	r0, r2, #2
   164f6:	781a      	ldrb	r2, [r3, #0]
   164f8:	210c      	movs	r1, #12
   164fa:	438a      	bics	r2, r1
   164fc:	1c11      	adds	r1, r2, #0
   164fe:	1c02      	adds	r2, r0, #0
   16500:	430a      	orrs	r2, r1
   16502:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   16504:	2308      	movs	r3, #8
   16506:	18fa      	adds	r2, r7, r3
   16508:	6878      	ldr	r0, [r7, #4]
   1650a:	2301      	movs	r3, #1
   1650c:	2110      	movs	r1, #16
   1650e:	4c05      	ldr	r4, [pc, #20]	; (16524 <lsm6dso_xl_full_scale_set+0x68>)
   16510:	47a0      	blx	r4
   16512:	0003      	movs	r3, r0
   16514:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16516:	68fb      	ldr	r3, [r7, #12]
}
   16518:	0018      	movs	r0, r3
   1651a:	46bd      	mov	sp, r7
   1651c:	b005      	add	sp, #20
   1651e:	bd90      	pop	{r4, r7, pc}
   16520:	000163f9 	.word	0x000163f9
   16524:	0001643f 	.word	0x0001643f

00016528 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   16528:	b590      	push	{r4, r7, lr}
   1652a:	b087      	sub	sp, #28
   1652c:	af00      	add	r7, sp, #0
   1652e:	6078      	str	r0, [r7, #4]
   16530:	000a      	movs	r2, r1
   16532:	1cfb      	adds	r3, r7, #3
   16534:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   16536:	2317      	movs	r3, #23
   16538:	18fb      	adds	r3, r7, r3
   1653a:	1cfa      	adds	r2, r7, #3
   1653c:	7812      	ldrb	r2, [r2, #0]
   1653e:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   16540:	230c      	movs	r3, #12
   16542:	18fa      	adds	r2, r7, r3
   16544:	687b      	ldr	r3, [r7, #4]
   16546:	0011      	movs	r1, r2
   16548:	0018      	movs	r0, r3
   1654a:	4ba4      	ldr	r3, [pc, #656]	; (167dc <lsm6dso_xl_data_rate_set+0x2b4>)
   1654c:	4798      	blx	r3
   1654e:	0003      	movs	r3, r0
   16550:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   16552:	693b      	ldr	r3, [r7, #16]
   16554:	2b00      	cmp	r3, #0
   16556:	d000      	beq.n	1655a <lsm6dso_xl_data_rate_set+0x32>
   16558:	e113      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1655a:	230c      	movs	r3, #12
   1655c:	18fb      	adds	r3, r7, r3
   1655e:	781b      	ldrb	r3, [r3, #0]
   16560:	07db      	lsls	r3, r3, #31
   16562:	0fdb      	lsrs	r3, r3, #31
   16564:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   16566:	230c      	movs	r3, #12
   16568:	18fb      	adds	r3, r7, r3
   1656a:	781b      	ldrb	r3, [r3, #0]
   1656c:	079b      	lsls	r3, r3, #30
   1656e:	0fdb      	lsrs	r3, r3, #31
   16570:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   16572:	4313      	orrs	r3, r2
   16574:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   16576:	230c      	movs	r3, #12
   16578:	18fb      	adds	r3, r7, r3
   1657a:	781b      	ldrb	r3, [r3, #0]
   1657c:	075b      	lsls	r3, r3, #29
   1657e:	0fdb      	lsrs	r3, r3, #31
   16580:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   16582:	4313      	orrs	r3, r2
   16584:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   16586:	230c      	movs	r3, #12
   16588:	18fb      	adds	r3, r7, r3
   1658a:	781b      	ldrb	r3, [r3, #0]
   1658c:	071b      	lsls	r3, r3, #28
   1658e:	0fdb      	lsrs	r3, r3, #31
   16590:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   16592:	4313      	orrs	r3, r2
   16594:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   16596:	230c      	movs	r3, #12
   16598:	18fb      	adds	r3, r7, r3
   1659a:	781b      	ldrb	r3, [r3, #0]
   1659c:	06db      	lsls	r3, r3, #27
   1659e:	0fdb      	lsrs	r3, r3, #31
   165a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   165a2:	4313      	orrs	r3, r2
   165a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   165a6:	230c      	movs	r3, #12
   165a8:	18fb      	adds	r3, r7, r3
   165aa:	781b      	ldrb	r3, [r3, #0]
   165ac:	069b      	lsls	r3, r3, #26
   165ae:	0fdb      	lsrs	r3, r3, #31
   165b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   165b2:	4313      	orrs	r3, r2
   165b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   165b6:	230c      	movs	r3, #12
   165b8:	18fb      	adds	r3, r7, r3
   165ba:	781b      	ldrb	r3, [r3, #0]
   165bc:	065b      	lsls	r3, r3, #25
   165be:	0fdb      	lsrs	r3, r3, #31
   165c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   165c2:	4313      	orrs	r3, r2
   165c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   165c6:	230c      	movs	r3, #12
   165c8:	18fb      	adds	r3, r7, r3
   165ca:	781b      	ldrb	r3, [r3, #0]
   165cc:	061b      	lsls	r3, r3, #24
   165ce:	0fdb      	lsrs	r3, r3, #31
   165d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   165d2:	4313      	orrs	r3, r2
   165d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   165d6:	230c      	movs	r3, #12
   165d8:	18fb      	adds	r3, r7, r3
   165da:	785b      	ldrb	r3, [r3, #1]
   165dc:	07db      	lsls	r3, r3, #31
   165de:	0fdb      	lsrs	r3, r3, #31
   165e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   165e2:	4313      	orrs	r3, r2
   165e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   165e6:	230c      	movs	r3, #12
   165e8:	18fb      	adds	r3, r7, r3
   165ea:	785b      	ldrb	r3, [r3, #1]
   165ec:	079b      	lsls	r3, r3, #30
   165ee:	0fdb      	lsrs	r3, r3, #31
   165f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   165f2:	4313      	orrs	r3, r2
   165f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   165f6:	230c      	movs	r3, #12
   165f8:	18fb      	adds	r3, r7, r3
   165fa:	785b      	ldrb	r3, [r3, #1]
   165fc:	075b      	lsls	r3, r3, #29
   165fe:	0fdb      	lsrs	r3, r3, #31
   16600:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   16602:	4313      	orrs	r3, r2
   16604:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   16606:	230c      	movs	r3, #12
   16608:	18fb      	adds	r3, r7, r3
   1660a:	785b      	ldrb	r3, [r3, #1]
   1660c:	071b      	lsls	r3, r3, #28
   1660e:	0fdb      	lsrs	r3, r3, #31
   16610:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   16612:	4313      	orrs	r3, r2
   16614:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   16616:	230c      	movs	r3, #12
   16618:	18fb      	adds	r3, r7, r3
   1661a:	785b      	ldrb	r3, [r3, #1]
   1661c:	06db      	lsls	r3, r3, #27
   1661e:	0fdb      	lsrs	r3, r3, #31
   16620:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   16622:	4313      	orrs	r3, r2
   16624:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   16626:	230c      	movs	r3, #12
   16628:	18fb      	adds	r3, r7, r3
   1662a:	785b      	ldrb	r3, [r3, #1]
   1662c:	069b      	lsls	r3, r3, #26
   1662e:	0fdb      	lsrs	r3, r3, #31
   16630:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   16632:	4313      	orrs	r3, r2
   16634:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   16636:	230c      	movs	r3, #12
   16638:	18fb      	adds	r3, r7, r3
   1663a:	785b      	ldrb	r3, [r3, #1]
   1663c:	065b      	lsls	r3, r3, #25
   1663e:	0fdb      	lsrs	r3, r3, #31
   16640:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   16642:	4313      	orrs	r3, r2
   16644:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   16646:	230c      	movs	r3, #12
   16648:	18fb      	adds	r3, r7, r3
   1664a:	785b      	ldrb	r3, [r3, #1]
   1664c:	061b      	lsls	r3, r3, #24
   1664e:	0fdb      	lsrs	r3, r3, #31
   16650:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   16652:	4313      	orrs	r3, r2
   16654:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   16656:	2b01      	cmp	r3, #1
   16658:	d000      	beq.n	1665c <lsm6dso_xl_data_rate_set+0x134>
   1665a:	e092      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   1665c:	230b      	movs	r3, #11
   1665e:	18fa      	adds	r2, r7, r3
   16660:	687b      	ldr	r3, [r7, #4]
   16662:	0011      	movs	r1, r2
   16664:	0018      	movs	r0, r3
   16666:	4b5e      	ldr	r3, [pc, #376]	; (167e0 <lsm6dso_xl_data_rate_set+0x2b8>)
   16668:	4798      	blx	r3
   1666a:	0003      	movs	r3, r0
   1666c:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   1666e:	693b      	ldr	r3, [r7, #16]
   16670:	2b00      	cmp	r3, #0
   16672:	d000      	beq.n	16676 <lsm6dso_xl_data_rate_set+0x14e>
   16674:	e085      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   16676:	230b      	movs	r3, #11
   16678:	18fb      	adds	r3, r7, r3
   1667a:	781b      	ldrb	r3, [r3, #0]
   1667c:	2b01      	cmp	r3, #1
   1667e:	d017      	beq.n	166b0 <lsm6dso_xl_data_rate_set+0x188>
   16680:	dc02      	bgt.n	16688 <lsm6dso_xl_data_rate_set+0x160>
   16682:	2b00      	cmp	r3, #0
   16684:	d005      	beq.n	16692 <lsm6dso_xl_data_rate_set+0x16a>
   16686:	e076      	b.n	16776 <lsm6dso_xl_data_rate_set+0x24e>
   16688:	2b02      	cmp	r3, #2
   1668a:	d029      	beq.n	166e0 <lsm6dso_xl_data_rate_set+0x1b8>
   1668c:	2b03      	cmp	r3, #3
   1668e:	d048      	beq.n	16722 <lsm6dso_xl_data_rate_set+0x1fa>
   16690:	e071      	b.n	16776 <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   16692:	1cfb      	adds	r3, r7, #3
   16694:	781b      	ldrb	r3, [r3, #0]
   16696:	2b00      	cmp	r3, #0
   16698:	d104      	bne.n	166a4 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   1669a:	2317      	movs	r3, #23
   1669c:	18fb      	adds	r3, r7, r3
   1669e:	2201      	movs	r2, #1
   166a0:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   166a2:	e06e      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   166a4:	2317      	movs	r3, #23
   166a6:	18fb      	adds	r3, r7, r3
   166a8:	1cfa      	adds	r2, r7, #3
   166aa:	7812      	ldrb	r2, [r2, #0]
   166ac:	701a      	strb	r2, [r3, #0]
            break;
   166ae:	e068      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   166b0:	1cfb      	adds	r3, r7, #3
   166b2:	781b      	ldrb	r3, [r3, #0]
   166b4:	2b00      	cmp	r3, #0
   166b6:	d104      	bne.n	166c2 <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   166b8:	2317      	movs	r3, #23
   166ba:	18fb      	adds	r3, r7, r3
   166bc:	2202      	movs	r2, #2
   166be:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   166c0:	e05f      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   166c2:	1cfb      	adds	r3, r7, #3
   166c4:	781b      	ldrb	r3, [r3, #0]
   166c6:	2b01      	cmp	r3, #1
   166c8:	d104      	bne.n	166d4 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   166ca:	2317      	movs	r3, #23
   166cc:	18fb      	adds	r3, r7, r3
   166ce:	2202      	movs	r2, #2
   166d0:	701a      	strb	r2, [r3, #0]
            break;
   166d2:	e056      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   166d4:	2317      	movs	r3, #23
   166d6:	18fb      	adds	r3, r7, r3
   166d8:	1cfa      	adds	r2, r7, #3
   166da:	7812      	ldrb	r2, [r2, #0]
   166dc:	701a      	strb	r2, [r3, #0]
            break;
   166de:	e050      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   166e0:	1cfb      	adds	r3, r7, #3
   166e2:	781b      	ldrb	r3, [r3, #0]
   166e4:	2b00      	cmp	r3, #0
   166e6:	d104      	bne.n	166f2 <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   166e8:	2317      	movs	r3, #23
   166ea:	18fb      	adds	r3, r7, r3
   166ec:	2203      	movs	r2, #3
   166ee:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   166f0:	e047      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   166f2:	1cfb      	adds	r3, r7, #3
   166f4:	781b      	ldrb	r3, [r3, #0]
   166f6:	2b01      	cmp	r3, #1
   166f8:	d104      	bne.n	16704 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   166fa:	2317      	movs	r3, #23
   166fc:	18fb      	adds	r3, r7, r3
   166fe:	2203      	movs	r2, #3
   16700:	701a      	strb	r2, [r3, #0]
            break;
   16702:	e03e      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   16704:	1cfb      	adds	r3, r7, #3
   16706:	781b      	ldrb	r3, [r3, #0]
   16708:	2b02      	cmp	r3, #2
   1670a:	d104      	bne.n	16716 <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   1670c:	2317      	movs	r3, #23
   1670e:	18fb      	adds	r3, r7, r3
   16710:	2203      	movs	r2, #3
   16712:	701a      	strb	r2, [r3, #0]
            break;
   16714:	e035      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   16716:	2317      	movs	r3, #23
   16718:	18fb      	adds	r3, r7, r3
   1671a:	1cfa      	adds	r2, r7, #3
   1671c:	7812      	ldrb	r2, [r2, #0]
   1671e:	701a      	strb	r2, [r3, #0]
            break;
   16720:	e02f      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   16722:	1cfb      	adds	r3, r7, #3
   16724:	781b      	ldrb	r3, [r3, #0]
   16726:	2b00      	cmp	r3, #0
   16728:	d104      	bne.n	16734 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   1672a:	2317      	movs	r3, #23
   1672c:	18fb      	adds	r3, r7, r3
   1672e:	2204      	movs	r2, #4
   16730:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   16732:	e026      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   16734:	1cfb      	adds	r3, r7, #3
   16736:	781b      	ldrb	r3, [r3, #0]
   16738:	2b01      	cmp	r3, #1
   1673a:	d104      	bne.n	16746 <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   1673c:	2317      	movs	r3, #23
   1673e:	18fb      	adds	r3, r7, r3
   16740:	2204      	movs	r2, #4
   16742:	701a      	strb	r2, [r3, #0]
            break;
   16744:	e01d      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   16746:	1cfb      	adds	r3, r7, #3
   16748:	781b      	ldrb	r3, [r3, #0]
   1674a:	2b02      	cmp	r3, #2
   1674c:	d104      	bne.n	16758 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   1674e:	2317      	movs	r3, #23
   16750:	18fb      	adds	r3, r7, r3
   16752:	2204      	movs	r2, #4
   16754:	701a      	strb	r2, [r3, #0]
            break;
   16756:	e014      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   16758:	1cfb      	adds	r3, r7, #3
   1675a:	781b      	ldrb	r3, [r3, #0]
   1675c:	2b03      	cmp	r3, #3
   1675e:	d104      	bne.n	1676a <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   16760:	2317      	movs	r3, #23
   16762:	18fb      	adds	r3, r7, r3
   16764:	2204      	movs	r2, #4
   16766:	701a      	strb	r2, [r3, #0]
            break;
   16768:	e00b      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1676a:	2317      	movs	r3, #23
   1676c:	18fb      	adds	r3, r7, r3
   1676e:	1cfa      	adds	r2, r7, #3
   16770:	7812      	ldrb	r2, [r2, #0]
   16772:	701a      	strb	r2, [r3, #0]
            break;
   16774:	e005      	b.n	16782 <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   16776:	2317      	movs	r3, #23
   16778:	18fb      	adds	r3, r7, r3
   1677a:	1cfa      	adds	r2, r7, #3
   1677c:	7812      	ldrb	r2, [r2, #0]
   1677e:	701a      	strb	r2, [r3, #0]
            break;
   16780:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   16782:	693b      	ldr	r3, [r7, #16]
   16784:	2b00      	cmp	r3, #0
   16786:	d108      	bne.n	1679a <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   16788:	2308      	movs	r3, #8
   1678a:	18fa      	adds	r2, r7, r3
   1678c:	6878      	ldr	r0, [r7, #4]
   1678e:	2301      	movs	r3, #1
   16790:	2110      	movs	r1, #16
   16792:	4c14      	ldr	r4, [pc, #80]	; (167e4 <lsm6dso_xl_data_rate_set+0x2bc>)
   16794:	47a0      	blx	r4
   16796:	0003      	movs	r3, r0
   16798:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   1679a:	693b      	ldr	r3, [r7, #16]
   1679c:	2b00      	cmp	r3, #0
   1679e:	d118      	bne.n	167d2 <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   167a0:	2317      	movs	r3, #23
   167a2:	18fb      	adds	r3, r7, r3
   167a4:	781b      	ldrb	r3, [r3, #0]
   167a6:	220f      	movs	r2, #15
   167a8:	4013      	ands	r3, r2
   167aa:	b2da      	uxtb	r2, r3
   167ac:	2308      	movs	r3, #8
   167ae:	18fb      	adds	r3, r7, r3
   167b0:	0110      	lsls	r0, r2, #4
   167b2:	781a      	ldrb	r2, [r3, #0]
   167b4:	210f      	movs	r1, #15
   167b6:	400a      	ands	r2, r1
   167b8:	1c11      	adds	r1, r2, #0
   167ba:	1c02      	adds	r2, r0, #0
   167bc:	430a      	orrs	r2, r1
   167be:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   167c0:	2308      	movs	r3, #8
   167c2:	18fa      	adds	r2, r7, r3
   167c4:	6878      	ldr	r0, [r7, #4]
   167c6:	2301      	movs	r3, #1
   167c8:	2110      	movs	r1, #16
   167ca:	4c07      	ldr	r4, [pc, #28]	; (167e8 <lsm6dso_xl_data_rate_set+0x2c0>)
   167cc:	47a0      	blx	r4
   167ce:	0003      	movs	r3, r0
   167d0:	613b      	str	r3, [r7, #16]
  }

  return ret;
   167d2:	693b      	ldr	r3, [r7, #16]
}
   167d4:	0018      	movs	r0, r3
   167d6:	46bd      	mov	sp, r7
   167d8:	b007      	add	sp, #28
   167da:	bd90      	pop	{r4, r7, pc}
   167dc:	00017005 	.word	0x00017005
   167e0:	00017059 	.word	0x00017059
   167e4:	000163f9 	.word	0x000163f9
   167e8:	0001643f 	.word	0x0001643f

000167ec <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   167ec:	b590      	push	{r4, r7, lr}
   167ee:	b085      	sub	sp, #20
   167f0:	af00      	add	r7, sp, #0
   167f2:	6078      	str	r0, [r7, #4]
   167f4:	000a      	movs	r2, r1
   167f6:	1cfb      	adds	r3, r7, #3
   167f8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   167fa:	2308      	movs	r3, #8
   167fc:	18fa      	adds	r2, r7, r3
   167fe:	6878      	ldr	r0, [r7, #4]
   16800:	2301      	movs	r3, #1
   16802:	2111      	movs	r1, #17
   16804:	4c12      	ldr	r4, [pc, #72]	; (16850 <lsm6dso_gy_full_scale_set+0x64>)
   16806:	47a0      	blx	r4
   16808:	0003      	movs	r3, r0
   1680a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1680c:	68fb      	ldr	r3, [r7, #12]
   1680e:	2b00      	cmp	r3, #0
   16810:	d119      	bne.n	16846 <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   16812:	1cfb      	adds	r3, r7, #3
   16814:	781b      	ldrb	r3, [r3, #0]
   16816:	2207      	movs	r2, #7
   16818:	4013      	ands	r3, r2
   1681a:	b2da      	uxtb	r2, r3
   1681c:	2308      	movs	r3, #8
   1681e:	18fb      	adds	r3, r7, r3
   16820:	2107      	movs	r1, #7
   16822:	400a      	ands	r2, r1
   16824:	1890      	adds	r0, r2, r2
   16826:	781a      	ldrb	r2, [r3, #0]
   16828:	210e      	movs	r1, #14
   1682a:	438a      	bics	r2, r1
   1682c:	1c11      	adds	r1, r2, #0
   1682e:	1c02      	adds	r2, r0, #0
   16830:	430a      	orrs	r2, r1
   16832:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   16834:	2308      	movs	r3, #8
   16836:	18fa      	adds	r2, r7, r3
   16838:	6878      	ldr	r0, [r7, #4]
   1683a:	2301      	movs	r3, #1
   1683c:	2111      	movs	r1, #17
   1683e:	4c05      	ldr	r4, [pc, #20]	; (16854 <lsm6dso_gy_full_scale_set+0x68>)
   16840:	47a0      	blx	r4
   16842:	0003      	movs	r3, r0
   16844:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16846:	68fb      	ldr	r3, [r7, #12]
}
   16848:	0018      	movs	r0, r3
   1684a:	46bd      	mov	sp, r7
   1684c:	b005      	add	sp, #20
   1684e:	bd90      	pop	{r4, r7, pc}
   16850:	000163f9 	.word	0x000163f9
   16854:	0001643f 	.word	0x0001643f

00016858 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   16858:	b590      	push	{r4, r7, lr}
   1685a:	b087      	sub	sp, #28
   1685c:	af00      	add	r7, sp, #0
   1685e:	6078      	str	r0, [r7, #4]
   16860:	000a      	movs	r2, r1
   16862:	1cfb      	adds	r3, r7, #3
   16864:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   16866:	2317      	movs	r3, #23
   16868:	18fb      	adds	r3, r7, r3
   1686a:	1cfa      	adds	r2, r7, #3
   1686c:	7812      	ldrb	r2, [r2, #0]
   1686e:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   16870:	230c      	movs	r3, #12
   16872:	18fa      	adds	r2, r7, r3
   16874:	687b      	ldr	r3, [r7, #4]
   16876:	0011      	movs	r1, r2
   16878:	0018      	movs	r0, r3
   1687a:	4ba4      	ldr	r3, [pc, #656]	; (16b0c <lsm6dso_gy_data_rate_set+0x2b4>)
   1687c:	4798      	blx	r3
   1687e:	0003      	movs	r3, r0
   16880:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   16882:	693b      	ldr	r3, [r7, #16]
   16884:	2b00      	cmp	r3, #0
   16886:	d000      	beq.n	1688a <lsm6dso_gy_data_rate_set+0x32>
   16888:	e113      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1688a:	230c      	movs	r3, #12
   1688c:	18fb      	adds	r3, r7, r3
   1688e:	781b      	ldrb	r3, [r3, #0]
   16890:	07db      	lsls	r3, r3, #31
   16892:	0fdb      	lsrs	r3, r3, #31
   16894:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   16896:	230c      	movs	r3, #12
   16898:	18fb      	adds	r3, r7, r3
   1689a:	781b      	ldrb	r3, [r3, #0]
   1689c:	079b      	lsls	r3, r3, #30
   1689e:	0fdb      	lsrs	r3, r3, #31
   168a0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   168a2:	4313      	orrs	r3, r2
   168a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   168a6:	230c      	movs	r3, #12
   168a8:	18fb      	adds	r3, r7, r3
   168aa:	781b      	ldrb	r3, [r3, #0]
   168ac:	075b      	lsls	r3, r3, #29
   168ae:	0fdb      	lsrs	r3, r3, #31
   168b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   168b2:	4313      	orrs	r3, r2
   168b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   168b6:	230c      	movs	r3, #12
   168b8:	18fb      	adds	r3, r7, r3
   168ba:	781b      	ldrb	r3, [r3, #0]
   168bc:	071b      	lsls	r3, r3, #28
   168be:	0fdb      	lsrs	r3, r3, #31
   168c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   168c2:	4313      	orrs	r3, r2
   168c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   168c6:	230c      	movs	r3, #12
   168c8:	18fb      	adds	r3, r7, r3
   168ca:	781b      	ldrb	r3, [r3, #0]
   168cc:	06db      	lsls	r3, r3, #27
   168ce:	0fdb      	lsrs	r3, r3, #31
   168d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   168d2:	4313      	orrs	r3, r2
   168d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   168d6:	230c      	movs	r3, #12
   168d8:	18fb      	adds	r3, r7, r3
   168da:	781b      	ldrb	r3, [r3, #0]
   168dc:	069b      	lsls	r3, r3, #26
   168de:	0fdb      	lsrs	r3, r3, #31
   168e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   168e2:	4313      	orrs	r3, r2
   168e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   168e6:	230c      	movs	r3, #12
   168e8:	18fb      	adds	r3, r7, r3
   168ea:	781b      	ldrb	r3, [r3, #0]
   168ec:	065b      	lsls	r3, r3, #25
   168ee:	0fdb      	lsrs	r3, r3, #31
   168f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   168f2:	4313      	orrs	r3, r2
   168f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   168f6:	230c      	movs	r3, #12
   168f8:	18fb      	adds	r3, r7, r3
   168fa:	781b      	ldrb	r3, [r3, #0]
   168fc:	061b      	lsls	r3, r3, #24
   168fe:	0fdb      	lsrs	r3, r3, #31
   16900:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   16902:	4313      	orrs	r3, r2
   16904:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   16906:	230c      	movs	r3, #12
   16908:	18fb      	adds	r3, r7, r3
   1690a:	785b      	ldrb	r3, [r3, #1]
   1690c:	07db      	lsls	r3, r3, #31
   1690e:	0fdb      	lsrs	r3, r3, #31
   16910:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   16912:	4313      	orrs	r3, r2
   16914:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   16916:	230c      	movs	r3, #12
   16918:	18fb      	adds	r3, r7, r3
   1691a:	785b      	ldrb	r3, [r3, #1]
   1691c:	079b      	lsls	r3, r3, #30
   1691e:	0fdb      	lsrs	r3, r3, #31
   16920:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   16922:	4313      	orrs	r3, r2
   16924:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   16926:	230c      	movs	r3, #12
   16928:	18fb      	adds	r3, r7, r3
   1692a:	785b      	ldrb	r3, [r3, #1]
   1692c:	075b      	lsls	r3, r3, #29
   1692e:	0fdb      	lsrs	r3, r3, #31
   16930:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   16932:	4313      	orrs	r3, r2
   16934:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   16936:	230c      	movs	r3, #12
   16938:	18fb      	adds	r3, r7, r3
   1693a:	785b      	ldrb	r3, [r3, #1]
   1693c:	071b      	lsls	r3, r3, #28
   1693e:	0fdb      	lsrs	r3, r3, #31
   16940:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   16942:	4313      	orrs	r3, r2
   16944:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   16946:	230c      	movs	r3, #12
   16948:	18fb      	adds	r3, r7, r3
   1694a:	785b      	ldrb	r3, [r3, #1]
   1694c:	06db      	lsls	r3, r3, #27
   1694e:	0fdb      	lsrs	r3, r3, #31
   16950:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   16952:	4313      	orrs	r3, r2
   16954:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   16956:	230c      	movs	r3, #12
   16958:	18fb      	adds	r3, r7, r3
   1695a:	785b      	ldrb	r3, [r3, #1]
   1695c:	069b      	lsls	r3, r3, #26
   1695e:	0fdb      	lsrs	r3, r3, #31
   16960:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   16962:	4313      	orrs	r3, r2
   16964:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   16966:	230c      	movs	r3, #12
   16968:	18fb      	adds	r3, r7, r3
   1696a:	785b      	ldrb	r3, [r3, #1]
   1696c:	065b      	lsls	r3, r3, #25
   1696e:	0fdb      	lsrs	r3, r3, #31
   16970:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   16972:	4313      	orrs	r3, r2
   16974:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   16976:	230c      	movs	r3, #12
   16978:	18fb      	adds	r3, r7, r3
   1697a:	785b      	ldrb	r3, [r3, #1]
   1697c:	061b      	lsls	r3, r3, #24
   1697e:	0fdb      	lsrs	r3, r3, #31
   16980:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   16982:	4313      	orrs	r3, r2
   16984:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   16986:	2b01      	cmp	r3, #1
   16988:	d000      	beq.n	1698c <lsm6dso_gy_data_rate_set+0x134>
   1698a:	e092      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   1698c:	230b      	movs	r3, #11
   1698e:	18fa      	adds	r2, r7, r3
   16990:	687b      	ldr	r3, [r7, #4]
   16992:	0011      	movs	r1, r2
   16994:	0018      	movs	r0, r3
   16996:	4b5e      	ldr	r3, [pc, #376]	; (16b10 <lsm6dso_gy_data_rate_set+0x2b8>)
   16998:	4798      	blx	r3
   1699a:	0003      	movs	r3, r0
   1699c:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   1699e:	693b      	ldr	r3, [r7, #16]
   169a0:	2b00      	cmp	r3, #0
   169a2:	d000      	beq.n	169a6 <lsm6dso_gy_data_rate_set+0x14e>
   169a4:	e085      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   169a6:	230b      	movs	r3, #11
   169a8:	18fb      	adds	r3, r7, r3
   169aa:	781b      	ldrb	r3, [r3, #0]
   169ac:	2b01      	cmp	r3, #1
   169ae:	d017      	beq.n	169e0 <lsm6dso_gy_data_rate_set+0x188>
   169b0:	dc02      	bgt.n	169b8 <lsm6dso_gy_data_rate_set+0x160>
   169b2:	2b00      	cmp	r3, #0
   169b4:	d005      	beq.n	169c2 <lsm6dso_gy_data_rate_set+0x16a>
   169b6:	e076      	b.n	16aa6 <lsm6dso_gy_data_rate_set+0x24e>
   169b8:	2b02      	cmp	r3, #2
   169ba:	d029      	beq.n	16a10 <lsm6dso_gy_data_rate_set+0x1b8>
   169bc:	2b03      	cmp	r3, #3
   169be:	d048      	beq.n	16a52 <lsm6dso_gy_data_rate_set+0x1fa>
   169c0:	e071      	b.n	16aa6 <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   169c2:	1cfb      	adds	r3, r7, #3
   169c4:	781b      	ldrb	r3, [r3, #0]
   169c6:	2b00      	cmp	r3, #0
   169c8:	d104      	bne.n	169d4 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   169ca:	2317      	movs	r3, #23
   169cc:	18fb      	adds	r3, r7, r3
   169ce:	2201      	movs	r2, #1
   169d0:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   169d2:	e06e      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   169d4:	2317      	movs	r3, #23
   169d6:	18fb      	adds	r3, r7, r3
   169d8:	1cfa      	adds	r2, r7, #3
   169da:	7812      	ldrb	r2, [r2, #0]
   169dc:	701a      	strb	r2, [r3, #0]
            break;
   169de:	e068      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   169e0:	1cfb      	adds	r3, r7, #3
   169e2:	781b      	ldrb	r3, [r3, #0]
   169e4:	2b00      	cmp	r3, #0
   169e6:	d104      	bne.n	169f2 <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   169e8:	2317      	movs	r3, #23
   169ea:	18fb      	adds	r3, r7, r3
   169ec:	2202      	movs	r2, #2
   169ee:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   169f0:	e05f      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   169f2:	1cfb      	adds	r3, r7, #3
   169f4:	781b      	ldrb	r3, [r3, #0]
   169f6:	2b01      	cmp	r3, #1
   169f8:	d104      	bne.n	16a04 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   169fa:	2317      	movs	r3, #23
   169fc:	18fb      	adds	r3, r7, r3
   169fe:	2202      	movs	r2, #2
   16a00:	701a      	strb	r2, [r3, #0]
            break;
   16a02:	e056      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   16a04:	2317      	movs	r3, #23
   16a06:	18fb      	adds	r3, r7, r3
   16a08:	1cfa      	adds	r2, r7, #3
   16a0a:	7812      	ldrb	r2, [r2, #0]
   16a0c:	701a      	strb	r2, [r3, #0]
            break;
   16a0e:	e050      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   16a10:	1cfb      	adds	r3, r7, #3
   16a12:	781b      	ldrb	r3, [r3, #0]
   16a14:	2b00      	cmp	r3, #0
   16a16:	d104      	bne.n	16a22 <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   16a18:	2317      	movs	r3, #23
   16a1a:	18fb      	adds	r3, r7, r3
   16a1c:	2203      	movs	r2, #3
   16a1e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   16a20:	e047      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   16a22:	1cfb      	adds	r3, r7, #3
   16a24:	781b      	ldrb	r3, [r3, #0]
   16a26:	2b01      	cmp	r3, #1
   16a28:	d104      	bne.n	16a34 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   16a2a:	2317      	movs	r3, #23
   16a2c:	18fb      	adds	r3, r7, r3
   16a2e:	2203      	movs	r2, #3
   16a30:	701a      	strb	r2, [r3, #0]
            break;
   16a32:	e03e      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   16a34:	1cfb      	adds	r3, r7, #3
   16a36:	781b      	ldrb	r3, [r3, #0]
   16a38:	2b02      	cmp	r3, #2
   16a3a:	d104      	bne.n	16a46 <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   16a3c:	2317      	movs	r3, #23
   16a3e:	18fb      	adds	r3, r7, r3
   16a40:	2203      	movs	r2, #3
   16a42:	701a      	strb	r2, [r3, #0]
            break;
   16a44:	e035      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   16a46:	2317      	movs	r3, #23
   16a48:	18fb      	adds	r3, r7, r3
   16a4a:	1cfa      	adds	r2, r7, #3
   16a4c:	7812      	ldrb	r2, [r2, #0]
   16a4e:	701a      	strb	r2, [r3, #0]
            break;
   16a50:	e02f      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   16a52:	1cfb      	adds	r3, r7, #3
   16a54:	781b      	ldrb	r3, [r3, #0]
   16a56:	2b00      	cmp	r3, #0
   16a58:	d104      	bne.n	16a64 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16a5a:	2317      	movs	r3, #23
   16a5c:	18fb      	adds	r3, r7, r3
   16a5e:	2204      	movs	r2, #4
   16a60:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   16a62:	e026      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   16a64:	1cfb      	adds	r3, r7, #3
   16a66:	781b      	ldrb	r3, [r3, #0]
   16a68:	2b01      	cmp	r3, #1
   16a6a:	d104      	bne.n	16a76 <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16a6c:	2317      	movs	r3, #23
   16a6e:	18fb      	adds	r3, r7, r3
   16a70:	2204      	movs	r2, #4
   16a72:	701a      	strb	r2, [r3, #0]
            break;
   16a74:	e01d      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   16a76:	1cfb      	adds	r3, r7, #3
   16a78:	781b      	ldrb	r3, [r3, #0]
   16a7a:	2b02      	cmp	r3, #2
   16a7c:	d104      	bne.n	16a88 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16a7e:	2317      	movs	r3, #23
   16a80:	18fb      	adds	r3, r7, r3
   16a82:	2204      	movs	r2, #4
   16a84:	701a      	strb	r2, [r3, #0]
            break;
   16a86:	e014      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   16a88:	1cfb      	adds	r3, r7, #3
   16a8a:	781b      	ldrb	r3, [r3, #0]
   16a8c:	2b03      	cmp	r3, #3
   16a8e:	d104      	bne.n	16a9a <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16a90:	2317      	movs	r3, #23
   16a92:	18fb      	adds	r3, r7, r3
   16a94:	2204      	movs	r2, #4
   16a96:	701a      	strb	r2, [r3, #0]
            break;
   16a98:	e00b      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   16a9a:	2317      	movs	r3, #23
   16a9c:	18fb      	adds	r3, r7, r3
   16a9e:	1cfa      	adds	r2, r7, #3
   16aa0:	7812      	ldrb	r2, [r2, #0]
   16aa2:	701a      	strb	r2, [r3, #0]
            break;
   16aa4:	e005      	b.n	16ab2 <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   16aa6:	2317      	movs	r3, #23
   16aa8:	18fb      	adds	r3, r7, r3
   16aaa:	1cfa      	adds	r2, r7, #3
   16aac:	7812      	ldrb	r2, [r2, #0]
   16aae:	701a      	strb	r2, [r3, #0]
            break;
   16ab0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   16ab2:	693b      	ldr	r3, [r7, #16]
   16ab4:	2b00      	cmp	r3, #0
   16ab6:	d108      	bne.n	16aca <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   16ab8:	2308      	movs	r3, #8
   16aba:	18fa      	adds	r2, r7, r3
   16abc:	6878      	ldr	r0, [r7, #4]
   16abe:	2301      	movs	r3, #1
   16ac0:	2111      	movs	r1, #17
   16ac2:	4c14      	ldr	r4, [pc, #80]	; (16b14 <lsm6dso_gy_data_rate_set+0x2bc>)
   16ac4:	47a0      	blx	r4
   16ac6:	0003      	movs	r3, r0
   16ac8:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   16aca:	693b      	ldr	r3, [r7, #16]
   16acc:	2b00      	cmp	r3, #0
   16ace:	d118      	bne.n	16b02 <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   16ad0:	2317      	movs	r3, #23
   16ad2:	18fb      	adds	r3, r7, r3
   16ad4:	781b      	ldrb	r3, [r3, #0]
   16ad6:	220f      	movs	r2, #15
   16ad8:	4013      	ands	r3, r2
   16ada:	b2da      	uxtb	r2, r3
   16adc:	2308      	movs	r3, #8
   16ade:	18fb      	adds	r3, r7, r3
   16ae0:	0110      	lsls	r0, r2, #4
   16ae2:	781a      	ldrb	r2, [r3, #0]
   16ae4:	210f      	movs	r1, #15
   16ae6:	400a      	ands	r2, r1
   16ae8:	1c11      	adds	r1, r2, #0
   16aea:	1c02      	adds	r2, r0, #0
   16aec:	430a      	orrs	r2, r1
   16aee:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   16af0:	2308      	movs	r3, #8
   16af2:	18fa      	adds	r2, r7, r3
   16af4:	6878      	ldr	r0, [r7, #4]
   16af6:	2301      	movs	r3, #1
   16af8:	2111      	movs	r1, #17
   16afa:	4c07      	ldr	r4, [pc, #28]	; (16b18 <lsm6dso_gy_data_rate_set+0x2c0>)
   16afc:	47a0      	blx	r4
   16afe:	0003      	movs	r3, r0
   16b00:	613b      	str	r3, [r7, #16]
  }

  return ret;
   16b02:	693b      	ldr	r3, [r7, #16]
}
   16b04:	0018      	movs	r0, r3
   16b06:	46bd      	mov	sp, r7
   16b08:	b007      	add	sp, #28
   16b0a:	bd90      	pop	{r4, r7, pc}
   16b0c:	00017005 	.word	0x00017005
   16b10:	00017059 	.word	0x00017059
   16b14:	000163f9 	.word	0x000163f9
   16b18:	0001643f 	.word	0x0001643f

00016b1c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16b1c:	b590      	push	{r4, r7, lr}
   16b1e:	b085      	sub	sp, #20
   16b20:	af00      	add	r7, sp, #0
   16b22:	6078      	str	r0, [r7, #4]
   16b24:	000a      	movs	r2, r1
   16b26:	1cfb      	adds	r3, r7, #3
   16b28:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16b2a:	2308      	movs	r3, #8
   16b2c:	18fa      	adds	r2, r7, r3
   16b2e:	6878      	ldr	r0, [r7, #4]
   16b30:	2301      	movs	r3, #1
   16b32:	2112      	movs	r1, #18
   16b34:	4c12      	ldr	r4, [pc, #72]	; (16b80 <lsm6dso_block_data_update_set+0x64>)
   16b36:	47a0      	blx	r4
   16b38:	0003      	movs	r3, r0
   16b3a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16b3c:	68fb      	ldr	r3, [r7, #12]
   16b3e:	2b00      	cmp	r3, #0
   16b40:	d119      	bne.n	16b76 <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   16b42:	1cfb      	adds	r3, r7, #3
   16b44:	781b      	ldrb	r3, [r3, #0]
   16b46:	2201      	movs	r2, #1
   16b48:	4013      	ands	r3, r2
   16b4a:	b2da      	uxtb	r2, r3
   16b4c:	2308      	movs	r3, #8
   16b4e:	18fb      	adds	r3, r7, r3
   16b50:	2101      	movs	r1, #1
   16b52:	400a      	ands	r2, r1
   16b54:	0190      	lsls	r0, r2, #6
   16b56:	781a      	ldrb	r2, [r3, #0]
   16b58:	2140      	movs	r1, #64	; 0x40
   16b5a:	438a      	bics	r2, r1
   16b5c:	1c11      	adds	r1, r2, #0
   16b5e:	1c02      	adds	r2, r0, #0
   16b60:	430a      	orrs	r2, r1
   16b62:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16b64:	2308      	movs	r3, #8
   16b66:	18fa      	adds	r2, r7, r3
   16b68:	6878      	ldr	r0, [r7, #4]
   16b6a:	2301      	movs	r3, #1
   16b6c:	2112      	movs	r1, #18
   16b6e:	4c05      	ldr	r4, [pc, #20]	; (16b84 <lsm6dso_block_data_update_set+0x68>)
   16b70:	47a0      	blx	r4
   16b72:	0003      	movs	r3, r0
   16b74:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16b76:	68fb      	ldr	r3, [r7, #12]
}
   16b78:	0018      	movs	r0, r3
   16b7a:	46bd      	mov	sp, r7
   16b7c:	b005      	add	sp, #20
   16b7e:	bd90      	pop	{r4, r7, pc}
   16b80:	000163f9 	.word	0x000163f9
   16b84:	0001643f 	.word	0x0001643f

00016b88 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   16b88:	b590      	push	{r4, r7, lr}
   16b8a:	b085      	sub	sp, #20
   16b8c:	af00      	add	r7, sp, #0
   16b8e:	6078      	str	r0, [r7, #4]
   16b90:	000a      	movs	r2, r1
   16b92:	1cfb      	adds	r3, r7, #3
   16b94:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   16b96:	2308      	movs	r3, #8
   16b98:	18fa      	adds	r2, r7, r3
   16b9a:	6878      	ldr	r0, [r7, #4]
   16b9c:	2301      	movs	r3, #1
   16b9e:	2115      	movs	r1, #21
   16ba0:	4c12      	ldr	r4, [pc, #72]	; (16bec <lsm6dso_xl_offset_weight_set+0x64>)
   16ba2:	47a0      	blx	r4
   16ba4:	0003      	movs	r3, r0
   16ba6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16ba8:	68fb      	ldr	r3, [r7, #12]
   16baa:	2b00      	cmp	r3, #0
   16bac:	d119      	bne.n	16be2 <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   16bae:	1cfb      	adds	r3, r7, #3
   16bb0:	781b      	ldrb	r3, [r3, #0]
   16bb2:	2201      	movs	r2, #1
   16bb4:	4013      	ands	r3, r2
   16bb6:	b2da      	uxtb	r2, r3
   16bb8:	2308      	movs	r3, #8
   16bba:	18fb      	adds	r3, r7, r3
   16bbc:	2101      	movs	r1, #1
   16bbe:	400a      	ands	r2, r1
   16bc0:	00d0      	lsls	r0, r2, #3
   16bc2:	781a      	ldrb	r2, [r3, #0]
   16bc4:	2108      	movs	r1, #8
   16bc6:	438a      	bics	r2, r1
   16bc8:	1c11      	adds	r1, r2, #0
   16bca:	1c02      	adds	r2, r0, #0
   16bcc:	430a      	orrs	r2, r1
   16bce:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   16bd0:	2308      	movs	r3, #8
   16bd2:	18fa      	adds	r2, r7, r3
   16bd4:	6878      	ldr	r0, [r7, #4]
   16bd6:	2301      	movs	r3, #1
   16bd8:	2115      	movs	r1, #21
   16bda:	4c05      	ldr	r4, [pc, #20]	; (16bf0 <lsm6dso_xl_offset_weight_set+0x68>)
   16bdc:	47a0      	blx	r4
   16bde:	0003      	movs	r3, r0
   16be0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16be2:	68fb      	ldr	r3, [r7, #12]
}
   16be4:	0018      	movs	r0, r3
   16be6:	46bd      	mov	sp, r7
   16be8:	b005      	add	sp, #20
   16bea:	bd90      	pop	{r4, r7, pc}
   16bec:	000163f9 	.word	0x000163f9
   16bf0:	0001643f 	.word	0x0001643f

00016bf4 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   16bf4:	b590      	push	{r4, r7, lr}
   16bf6:	b085      	sub	sp, #20
   16bf8:	af00      	add	r7, sp, #0
   16bfa:	6078      	str	r0, [r7, #4]
   16bfc:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   16bfe:	2308      	movs	r3, #8
   16c00:	18fa      	adds	r2, r7, r3
   16c02:	6878      	ldr	r0, [r7, #4]
   16c04:	2301      	movs	r3, #1
   16c06:	211e      	movs	r1, #30
   16c08:	4c08      	ldr	r4, [pc, #32]	; (16c2c <lsm6dso_xl_flag_data_ready_get+0x38>)
   16c0a:	47a0      	blx	r4
   16c0c:	0003      	movs	r3, r0
   16c0e:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   16c10:	2308      	movs	r3, #8
   16c12:	18fb      	adds	r3, r7, r3
   16c14:	781b      	ldrb	r3, [r3, #0]
   16c16:	07db      	lsls	r3, r3, #31
   16c18:	0fdb      	lsrs	r3, r3, #31
   16c1a:	b2db      	uxtb	r3, r3
   16c1c:	001a      	movs	r2, r3
   16c1e:	683b      	ldr	r3, [r7, #0]
   16c20:	701a      	strb	r2, [r3, #0]

  return ret;
   16c22:	68fb      	ldr	r3, [r7, #12]
}
   16c24:	0018      	movs	r0, r3
   16c26:	46bd      	mov	sp, r7
   16c28:	b005      	add	sp, #20
   16c2a:	bd90      	pop	{r4, r7, pc}
   16c2c:	000163f9 	.word	0x000163f9

00016c30 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   16c30:	b590      	push	{r4, r7, lr}
   16c32:	b087      	sub	sp, #28
   16c34:	af00      	add	r7, sp, #0
   16c36:	6078      	str	r0, [r7, #4]
   16c38:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   16c3a:	230c      	movs	r3, #12
   16c3c:	18fa      	adds	r2, r7, r3
   16c3e:	6878      	ldr	r0, [r7, #4]
   16c40:	2306      	movs	r3, #6
   16c42:	2128      	movs	r1, #40	; 0x28
   16c44:	4c26      	ldr	r4, [pc, #152]	; (16ce0 <lsm6dso_acceleration_raw_get+0xb0>)
   16c46:	47a0      	blx	r4
   16c48:	0003      	movs	r3, r0
   16c4a:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   16c4c:	230c      	movs	r3, #12
   16c4e:	18fb      	adds	r3, r7, r3
   16c50:	785b      	ldrb	r3, [r3, #1]
   16c52:	b21a      	sxth	r2, r3
   16c54:	683b      	ldr	r3, [r7, #0]
   16c56:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   16c58:	683b      	ldr	r3, [r7, #0]
   16c5a:	2200      	movs	r2, #0
   16c5c:	5e9b      	ldrsh	r3, [r3, r2]
   16c5e:	b29b      	uxth	r3, r3
   16c60:	021b      	lsls	r3, r3, #8
   16c62:	b29a      	uxth	r2, r3
   16c64:	230c      	movs	r3, #12
   16c66:	18fb      	adds	r3, r7, r3
   16c68:	781b      	ldrb	r3, [r3, #0]
   16c6a:	b29b      	uxth	r3, r3
   16c6c:	18d3      	adds	r3, r2, r3
   16c6e:	b29b      	uxth	r3, r3
   16c70:	b21a      	sxth	r2, r3
   16c72:	683b      	ldr	r3, [r7, #0]
   16c74:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   16c76:	683b      	ldr	r3, [r7, #0]
   16c78:	3302      	adds	r3, #2
   16c7a:	220c      	movs	r2, #12
   16c7c:	18ba      	adds	r2, r7, r2
   16c7e:	78d2      	ldrb	r2, [r2, #3]
   16c80:	b212      	sxth	r2, r2
   16c82:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   16c84:	683b      	ldr	r3, [r7, #0]
   16c86:	3302      	adds	r3, #2
   16c88:	683a      	ldr	r2, [r7, #0]
   16c8a:	3202      	adds	r2, #2
   16c8c:	2100      	movs	r1, #0
   16c8e:	5e52      	ldrsh	r2, [r2, r1]
   16c90:	b292      	uxth	r2, r2
   16c92:	0212      	lsls	r2, r2, #8
   16c94:	b291      	uxth	r1, r2
   16c96:	220c      	movs	r2, #12
   16c98:	18ba      	adds	r2, r7, r2
   16c9a:	7892      	ldrb	r2, [r2, #2]
   16c9c:	b292      	uxth	r2, r2
   16c9e:	188a      	adds	r2, r1, r2
   16ca0:	b292      	uxth	r2, r2
   16ca2:	b212      	sxth	r2, r2
   16ca4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   16ca6:	683b      	ldr	r3, [r7, #0]
   16ca8:	3304      	adds	r3, #4
   16caa:	220c      	movs	r2, #12
   16cac:	18ba      	adds	r2, r7, r2
   16cae:	7952      	ldrb	r2, [r2, #5]
   16cb0:	b212      	sxth	r2, r2
   16cb2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   16cb4:	683b      	ldr	r3, [r7, #0]
   16cb6:	3304      	adds	r3, #4
   16cb8:	683a      	ldr	r2, [r7, #0]
   16cba:	3204      	adds	r2, #4
   16cbc:	2100      	movs	r1, #0
   16cbe:	5e52      	ldrsh	r2, [r2, r1]
   16cc0:	b292      	uxth	r2, r2
   16cc2:	0212      	lsls	r2, r2, #8
   16cc4:	b291      	uxth	r1, r2
   16cc6:	220c      	movs	r2, #12
   16cc8:	18ba      	adds	r2, r7, r2
   16cca:	7912      	ldrb	r2, [r2, #4]
   16ccc:	b292      	uxth	r2, r2
   16cce:	188a      	adds	r2, r1, r2
   16cd0:	b292      	uxth	r2, r2
   16cd2:	b212      	sxth	r2, r2
   16cd4:	801a      	strh	r2, [r3, #0]

  return ret;
   16cd6:	697b      	ldr	r3, [r7, #20]
}
   16cd8:	0018      	movs	r0, r3
   16cda:	46bd      	mov	sp, r7
   16cdc:	b007      	add	sp, #28
   16cde:	bd90      	pop	{r4, r7, pc}
   16ce0:	000163f9 	.word	0x000163f9

00016ce4 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   16ce4:	b590      	push	{r4, r7, lr}
   16ce6:	b085      	sub	sp, #20
   16ce8:	af00      	add	r7, sp, #0
   16cea:	6078      	str	r0, [r7, #4]
   16cec:	000a      	movs	r2, r1
   16cee:	1cfb      	adds	r3, r7, #3
   16cf0:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   16cf2:	2308      	movs	r3, #8
   16cf4:	18fa      	adds	r2, r7, r3
   16cf6:	6878      	ldr	r0, [r7, #4]
   16cf8:	2301      	movs	r3, #1
   16cfa:	2101      	movs	r1, #1
   16cfc:	4c11      	ldr	r4, [pc, #68]	; (16d44 <lsm6dso_mem_bank_set+0x60>)
   16cfe:	47a0      	blx	r4
   16d00:	0003      	movs	r3, r0
   16d02:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16d04:	68fb      	ldr	r3, [r7, #12]
   16d06:	2b00      	cmp	r3, #0
   16d08:	d117      	bne.n	16d3a <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   16d0a:	1cfb      	adds	r3, r7, #3
   16d0c:	781b      	ldrb	r3, [r3, #0]
   16d0e:	2203      	movs	r2, #3
   16d10:	4013      	ands	r3, r2
   16d12:	b2da      	uxtb	r2, r3
   16d14:	2308      	movs	r3, #8
   16d16:	18fb      	adds	r3, r7, r3
   16d18:	0190      	lsls	r0, r2, #6
   16d1a:	781a      	ldrb	r2, [r3, #0]
   16d1c:	213f      	movs	r1, #63	; 0x3f
   16d1e:	400a      	ands	r2, r1
   16d20:	1c11      	adds	r1, r2, #0
   16d22:	1c02      	adds	r2, r0, #0
   16d24:	430a      	orrs	r2, r1
   16d26:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   16d28:	2308      	movs	r3, #8
   16d2a:	18fa      	adds	r2, r7, r3
   16d2c:	6878      	ldr	r0, [r7, #4]
   16d2e:	2301      	movs	r3, #1
   16d30:	2101      	movs	r1, #1
   16d32:	4c05      	ldr	r4, [pc, #20]	; (16d48 <lsm6dso_mem_bank_set+0x64>)
   16d34:	47a0      	blx	r4
   16d36:	0003      	movs	r3, r0
   16d38:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16d3a:	68fb      	ldr	r3, [r7, #12]
}
   16d3c:	0018      	movs	r0, r3
   16d3e:	46bd      	mov	sp, r7
   16d40:	b005      	add	sp, #20
   16d42:	bd90      	pop	{r4, r7, pc}
   16d44:	000163f9 	.word	0x000163f9
   16d48:	0001643f 	.word	0x0001643f

00016d4c <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   16d4c:	b590      	push	{r4, r7, lr}
   16d4e:	b085      	sub	sp, #20
   16d50:	af00      	add	r7, sp, #0
   16d52:	6078      	str	r0, [r7, #4]
   16d54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   16d56:	683a      	ldr	r2, [r7, #0]
   16d58:	6878      	ldr	r0, [r7, #4]
   16d5a:	2301      	movs	r3, #1
   16d5c:	210f      	movs	r1, #15
   16d5e:	4c04      	ldr	r4, [pc, #16]	; (16d70 <lsm6dso_device_id_get+0x24>)
   16d60:	47a0      	blx	r4
   16d62:	0003      	movs	r3, r0
   16d64:	60fb      	str	r3, [r7, #12]

  return ret;
   16d66:	68fb      	ldr	r3, [r7, #12]
}
   16d68:	0018      	movs	r0, r3
   16d6a:	46bd      	mov	sp, r7
   16d6c:	b005      	add	sp, #20
   16d6e:	bd90      	pop	{r4, r7, pc}
   16d70:	000163f9 	.word	0x000163f9

00016d74 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16d74:	b590      	push	{r4, r7, lr}
   16d76:	b085      	sub	sp, #20
   16d78:	af00      	add	r7, sp, #0
   16d7a:	6078      	str	r0, [r7, #4]
   16d7c:	000a      	movs	r2, r1
   16d7e:	1cfb      	adds	r3, r7, #3
   16d80:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16d82:	2308      	movs	r3, #8
   16d84:	18fa      	adds	r2, r7, r3
   16d86:	6878      	ldr	r0, [r7, #4]
   16d88:	2301      	movs	r3, #1
   16d8a:	2112      	movs	r1, #18
   16d8c:	4c12      	ldr	r4, [pc, #72]	; (16dd8 <lsm6dso_reset_set+0x64>)
   16d8e:	47a0      	blx	r4
   16d90:	0003      	movs	r3, r0
   16d92:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16d94:	68fb      	ldr	r3, [r7, #12]
   16d96:	2b00      	cmp	r3, #0
   16d98:	d119      	bne.n	16dce <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   16d9a:	1cfb      	adds	r3, r7, #3
   16d9c:	781b      	ldrb	r3, [r3, #0]
   16d9e:	2201      	movs	r2, #1
   16da0:	4013      	ands	r3, r2
   16da2:	b2da      	uxtb	r2, r3
   16da4:	2308      	movs	r3, #8
   16da6:	18fb      	adds	r3, r7, r3
   16da8:	2101      	movs	r1, #1
   16daa:	400a      	ands	r2, r1
   16dac:	0010      	movs	r0, r2
   16dae:	781a      	ldrb	r2, [r3, #0]
   16db0:	2101      	movs	r1, #1
   16db2:	438a      	bics	r2, r1
   16db4:	1c11      	adds	r1, r2, #0
   16db6:	1c02      	adds	r2, r0, #0
   16db8:	430a      	orrs	r2, r1
   16dba:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16dbc:	2308      	movs	r3, #8
   16dbe:	18fa      	adds	r2, r7, r3
   16dc0:	6878      	ldr	r0, [r7, #4]
   16dc2:	2301      	movs	r3, #1
   16dc4:	2112      	movs	r1, #18
   16dc6:	4c05      	ldr	r4, [pc, #20]	; (16ddc <lsm6dso_reset_set+0x68>)
   16dc8:	47a0      	blx	r4
   16dca:	0003      	movs	r3, r0
   16dcc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16dce:	68fb      	ldr	r3, [r7, #12]
}
   16dd0:	0018      	movs	r0, r3
   16dd2:	46bd      	mov	sp, r7
   16dd4:	b005      	add	sp, #20
   16dd6:	bd90      	pop	{r4, r7, pc}
   16dd8:	000163f9 	.word	0x000163f9
   16ddc:	0001643f 	.word	0x0001643f

00016de0 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   16de0:	b590      	push	{r4, r7, lr}
   16de2:	b085      	sub	sp, #20
   16de4:	af00      	add	r7, sp, #0
   16de6:	6078      	str	r0, [r7, #4]
   16de8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16dea:	2308      	movs	r3, #8
   16dec:	18fa      	adds	r2, r7, r3
   16dee:	6878      	ldr	r0, [r7, #4]
   16df0:	2301      	movs	r3, #1
   16df2:	2112      	movs	r1, #18
   16df4:	4c08      	ldr	r4, [pc, #32]	; (16e18 <lsm6dso_reset_get+0x38>)
   16df6:	47a0      	blx	r4
   16df8:	0003      	movs	r3, r0
   16dfa:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   16dfc:	2308      	movs	r3, #8
   16dfe:	18fb      	adds	r3, r7, r3
   16e00:	781b      	ldrb	r3, [r3, #0]
   16e02:	07db      	lsls	r3, r3, #31
   16e04:	0fdb      	lsrs	r3, r3, #31
   16e06:	b2db      	uxtb	r3, r3
   16e08:	001a      	movs	r2, r3
   16e0a:	683b      	ldr	r3, [r7, #0]
   16e0c:	701a      	strb	r2, [r3, #0]

  return ret;
   16e0e:	68fb      	ldr	r3, [r7, #12]
}
   16e10:	0018      	movs	r0, r3
   16e12:	46bd      	mov	sp, r7
   16e14:	b005      	add	sp, #20
   16e16:	bd90      	pop	{r4, r7, pc}
   16e18:	000163f9 	.word	0x000163f9

00016e1c <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16e1c:	b590      	push	{r4, r7, lr}
   16e1e:	b085      	sub	sp, #20
   16e20:	af00      	add	r7, sp, #0
   16e22:	6078      	str	r0, [r7, #4]
   16e24:	000a      	movs	r2, r1
   16e26:	1cfb      	adds	r3, r7, #3
   16e28:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   16e2a:	2308      	movs	r3, #8
   16e2c:	18fa      	adds	r2, r7, r3
   16e2e:	6878      	ldr	r0, [r7, #4]
   16e30:	2301      	movs	r3, #1
   16e32:	2110      	movs	r1, #16
   16e34:	4c12      	ldr	r4, [pc, #72]	; (16e80 <lsm6dso_xl_filter_lp2_set+0x64>)
   16e36:	47a0      	blx	r4
   16e38:	0003      	movs	r3, r0
   16e3a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16e3c:	68fb      	ldr	r3, [r7, #12]
   16e3e:	2b00      	cmp	r3, #0
   16e40:	d119      	bne.n	16e76 <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   16e42:	1cfb      	adds	r3, r7, #3
   16e44:	781b      	ldrb	r3, [r3, #0]
   16e46:	2201      	movs	r2, #1
   16e48:	4013      	ands	r3, r2
   16e4a:	b2da      	uxtb	r2, r3
   16e4c:	2308      	movs	r3, #8
   16e4e:	18fb      	adds	r3, r7, r3
   16e50:	2101      	movs	r1, #1
   16e52:	400a      	ands	r2, r1
   16e54:	1890      	adds	r0, r2, r2
   16e56:	781a      	ldrb	r2, [r3, #0]
   16e58:	2102      	movs	r1, #2
   16e5a:	438a      	bics	r2, r1
   16e5c:	1c11      	adds	r1, r2, #0
   16e5e:	1c02      	adds	r2, r0, #0
   16e60:	430a      	orrs	r2, r1
   16e62:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   16e64:	2308      	movs	r3, #8
   16e66:	18fa      	adds	r2, r7, r3
   16e68:	6878      	ldr	r0, [r7, #4]
   16e6a:	2301      	movs	r3, #1
   16e6c:	2110      	movs	r1, #16
   16e6e:	4c05      	ldr	r4, [pc, #20]	; (16e84 <lsm6dso_xl_filter_lp2_set+0x68>)
   16e70:	47a0      	blx	r4
   16e72:	0003      	movs	r3, r0
   16e74:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16e76:	68fb      	ldr	r3, [r7, #12]
}
   16e78:	0018      	movs	r0, r3
   16e7a:	46bd      	mov	sp, r7
   16e7c:	b005      	add	sp, #20
   16e7e:	bd90      	pop	{r4, r7, pc}
   16e80:	000163f9 	.word	0x000163f9
   16e84:	0001643f 	.word	0x0001643f

00016e88 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   16e88:	b590      	push	{r4, r7, lr}
   16e8a:	b085      	sub	sp, #20
   16e8c:	af00      	add	r7, sp, #0
   16e8e:	6078      	str	r0, [r7, #4]
   16e90:	000a      	movs	r2, r1
   16e92:	1cfb      	adds	r3, r7, #3
   16e94:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   16e96:	2308      	movs	r3, #8
   16e98:	18fa      	adds	r2, r7, r3
   16e9a:	6878      	ldr	r0, [r7, #4]
   16e9c:	2301      	movs	r3, #1
   16e9e:	2117      	movs	r1, #23
   16ea0:	4c25      	ldr	r4, [pc, #148]	; (16f38 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   16ea2:	47a0      	blx	r4
   16ea4:	0003      	movs	r3, r0
   16ea6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16ea8:	68fb      	ldr	r3, [r7, #12]
   16eaa:	2b00      	cmp	r3, #0
   16eac:	d13f      	bne.n	16f2e <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   16eae:	1cfb      	adds	r3, r7, #3
   16eb0:	781b      	ldrb	r3, [r3, #0]
   16eb2:	091b      	lsrs	r3, r3, #4
   16eb4:	b2db      	uxtb	r3, r3
   16eb6:	1c1a      	adds	r2, r3, #0
   16eb8:	2301      	movs	r3, #1
   16eba:	4013      	ands	r3, r2
   16ebc:	b2da      	uxtb	r2, r3
   16ebe:	2308      	movs	r3, #8
   16ec0:	18fb      	adds	r3, r7, r3
   16ec2:	2101      	movs	r1, #1
   16ec4:	400a      	ands	r2, r1
   16ec6:	0090      	lsls	r0, r2, #2
   16ec8:	781a      	ldrb	r2, [r3, #0]
   16eca:	2104      	movs	r1, #4
   16ecc:	438a      	bics	r2, r1
   16ece:	1c11      	adds	r1, r2, #0
   16ed0:	1c02      	adds	r2, r0, #0
   16ed2:	430a      	orrs	r2, r1
   16ed4:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   16ed6:	1cfb      	adds	r3, r7, #3
   16ed8:	781b      	ldrb	r3, [r3, #0]
   16eda:	095b      	lsrs	r3, r3, #5
   16edc:	b2db      	uxtb	r3, r3
   16ede:	1c1a      	adds	r2, r3, #0
   16ee0:	2301      	movs	r3, #1
   16ee2:	4013      	ands	r3, r2
   16ee4:	b2da      	uxtb	r2, r3
   16ee6:	2308      	movs	r3, #8
   16ee8:	18fb      	adds	r3, r7, r3
   16eea:	2101      	movs	r1, #1
   16eec:	400a      	ands	r2, r1
   16eee:	0110      	lsls	r0, r2, #4
   16ef0:	781a      	ldrb	r2, [r3, #0]
   16ef2:	2110      	movs	r1, #16
   16ef4:	438a      	bics	r2, r1
   16ef6:	1c11      	adds	r1, r2, #0
   16ef8:	1c02      	adds	r2, r0, #0
   16efa:	430a      	orrs	r2, r1
   16efc:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   16efe:	1cfb      	adds	r3, r7, #3
   16f00:	781b      	ldrb	r3, [r3, #0]
   16f02:	2207      	movs	r2, #7
   16f04:	4013      	ands	r3, r2
   16f06:	b2da      	uxtb	r2, r3
   16f08:	2308      	movs	r3, #8
   16f0a:	18fb      	adds	r3, r7, r3
   16f0c:	0150      	lsls	r0, r2, #5
   16f0e:	781a      	ldrb	r2, [r3, #0]
   16f10:	211f      	movs	r1, #31
   16f12:	400a      	ands	r2, r1
   16f14:	1c11      	adds	r1, r2, #0
   16f16:	1c02      	adds	r2, r0, #0
   16f18:	430a      	orrs	r2, r1
   16f1a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   16f1c:	2308      	movs	r3, #8
   16f1e:	18fa      	adds	r2, r7, r3
   16f20:	6878      	ldr	r0, [r7, #4]
   16f22:	2301      	movs	r3, #1
   16f24:	2117      	movs	r1, #23
   16f26:	4c05      	ldr	r4, [pc, #20]	; (16f3c <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   16f28:	47a0      	blx	r4
   16f2a:	0003      	movs	r3, r0
   16f2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16f2e:	68fb      	ldr	r3, [r7, #12]
}
   16f30:	0018      	movs	r0, r3
   16f32:	46bd      	mov	sp, r7
   16f34:	b005      	add	sp, #20
   16f36:	bd90      	pop	{r4, r7, pc}
   16f38:	000163f9 	.word	0x000163f9
   16f3c:	0001643f 	.word	0x0001643f

00016f40 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   16f40:	b590      	push	{r4, r7, lr}
   16f42:	b087      	sub	sp, #28
   16f44:	af00      	add	r7, sp, #0
   16f46:	6078      	str	r0, [r7, #4]
   16f48:	000a      	movs	r2, r1
   16f4a:	1cfb      	adds	r3, r7, #3
   16f4c:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   16f4e:	230c      	movs	r3, #12
   16f50:	18fa      	adds	r2, r7, r3
   16f52:	6878      	ldr	r0, [r7, #4]
   16f54:	2301      	movs	r3, #1
   16f56:	2118      	movs	r1, #24
   16f58:	4c28      	ldr	r4, [pc, #160]	; (16ffc <lsm6dso_i3c_disable_set+0xbc>)
   16f5a:	47a0      	blx	r4
   16f5c:	0003      	movs	r3, r0
   16f5e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   16f60:	697b      	ldr	r3, [r7, #20]
   16f62:	2b00      	cmp	r3, #0
   16f64:	d11c      	bne.n	16fa0 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   16f66:	1cfb      	adds	r3, r7, #3
   16f68:	781b      	ldrb	r3, [r3, #0]
   16f6a:	09db      	lsrs	r3, r3, #7
   16f6c:	b2db      	uxtb	r3, r3
   16f6e:	1c1a      	adds	r2, r3, #0
   16f70:	2301      	movs	r3, #1
   16f72:	4013      	ands	r3, r2
   16f74:	b2da      	uxtb	r2, r3
   16f76:	230c      	movs	r3, #12
   16f78:	18fb      	adds	r3, r7, r3
   16f7a:	2101      	movs	r1, #1
   16f7c:	400a      	ands	r2, r1
   16f7e:	1890      	adds	r0, r2, r2
   16f80:	781a      	ldrb	r2, [r3, #0]
   16f82:	2102      	movs	r1, #2
   16f84:	438a      	bics	r2, r1
   16f86:	1c11      	adds	r1, r2, #0
   16f88:	1c02      	adds	r2, r0, #0
   16f8a:	430a      	orrs	r2, r1
   16f8c:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   16f8e:	230c      	movs	r3, #12
   16f90:	18fa      	adds	r2, r7, r3
   16f92:	6878      	ldr	r0, [r7, #4]
   16f94:	2301      	movs	r3, #1
   16f96:	2118      	movs	r1, #24
   16f98:	4c19      	ldr	r4, [pc, #100]	; (17000 <lsm6dso_i3c_disable_set+0xc0>)
   16f9a:	47a0      	blx	r4
   16f9c:	0003      	movs	r3, r0
   16f9e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   16fa0:	697b      	ldr	r3, [r7, #20]
   16fa2:	2b00      	cmp	r3, #0
   16fa4:	d108      	bne.n	16fb8 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   16fa6:	2310      	movs	r3, #16
   16fa8:	18fa      	adds	r2, r7, r3
   16faa:	6878      	ldr	r0, [r7, #4]
   16fac:	2301      	movs	r3, #1
   16fae:	2162      	movs	r1, #98	; 0x62
   16fb0:	4c12      	ldr	r4, [pc, #72]	; (16ffc <lsm6dso_i3c_disable_set+0xbc>)
   16fb2:	47a0      	blx	r4
   16fb4:	0003      	movs	r3, r0
   16fb6:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   16fb8:	697b      	ldr	r3, [r7, #20]
   16fba:	2b00      	cmp	r3, #0
   16fbc:	d119      	bne.n	16ff2 <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   16fbe:	1cfb      	adds	r3, r7, #3
   16fc0:	781b      	ldrb	r3, [r3, #0]
   16fc2:	2203      	movs	r2, #3
   16fc4:	4013      	ands	r3, r2
   16fc6:	b2da      	uxtb	r2, r3
   16fc8:	2310      	movs	r3, #16
   16fca:	18fb      	adds	r3, r7, r3
   16fcc:	2103      	movs	r1, #3
   16fce:	400a      	ands	r2, r1
   16fd0:	00d0      	lsls	r0, r2, #3
   16fd2:	781a      	ldrb	r2, [r3, #0]
   16fd4:	2118      	movs	r1, #24
   16fd6:	438a      	bics	r2, r1
   16fd8:	1c11      	adds	r1, r2, #0
   16fda:	1c02      	adds	r2, r0, #0
   16fdc:	430a      	orrs	r2, r1
   16fde:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   16fe0:	2310      	movs	r3, #16
   16fe2:	18fa      	adds	r2, r7, r3
   16fe4:	6878      	ldr	r0, [r7, #4]
   16fe6:	2301      	movs	r3, #1
   16fe8:	2162      	movs	r1, #98	; 0x62
   16fea:	4c05      	ldr	r4, [pc, #20]	; (17000 <lsm6dso_i3c_disable_set+0xc0>)
   16fec:	47a0      	blx	r4
   16fee:	0003      	movs	r3, r0
   16ff0:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   16ff2:	697b      	ldr	r3, [r7, #20]
}
   16ff4:	0018      	movs	r0, r3
   16ff6:	46bd      	mov	sp, r7
   16ff8:	b007      	add	sp, #28
   16ffa:	bd90      	pop	{r4, r7, pc}
   16ffc:	000163f9 	.word	0x000163f9
   17000:	0001643f 	.word	0x0001643f

00017004 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   17004:	b590      	push	{r4, r7, lr}
   17006:	b085      	sub	sp, #20
   17008:	af00      	add	r7, sp, #0
   1700a:	6078      	str	r0, [r7, #4]
   1700c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   1700e:	687b      	ldr	r3, [r7, #4]
   17010:	2102      	movs	r1, #2
   17012:	0018      	movs	r0, r3
   17014:	4b0e      	ldr	r3, [pc, #56]	; (17050 <lsm6dso_fsm_enable_get+0x4c>)
   17016:	4798      	blx	r3
   17018:	0003      	movs	r3, r0
   1701a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1701c:	68fb      	ldr	r3, [r7, #12]
   1701e:	2b00      	cmp	r3, #0
   17020:	d107      	bne.n	17032 <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   17022:	683a      	ldr	r2, [r7, #0]
   17024:	6878      	ldr	r0, [r7, #4]
   17026:	2302      	movs	r3, #2
   17028:	2146      	movs	r1, #70	; 0x46
   1702a:	4c0a      	ldr	r4, [pc, #40]	; (17054 <lsm6dso_fsm_enable_get+0x50>)
   1702c:	47a0      	blx	r4
   1702e:	0003      	movs	r3, r0
   17030:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   17032:	68fb      	ldr	r3, [r7, #12]
   17034:	2b00      	cmp	r3, #0
   17036:	d106      	bne.n	17046 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   17038:	687b      	ldr	r3, [r7, #4]
   1703a:	2100      	movs	r1, #0
   1703c:	0018      	movs	r0, r3
   1703e:	4b04      	ldr	r3, [pc, #16]	; (17050 <lsm6dso_fsm_enable_get+0x4c>)
   17040:	4798      	blx	r3
   17042:	0003      	movs	r3, r0
   17044:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   17046:	68fb      	ldr	r3, [r7, #12]
}
   17048:	0018      	movs	r0, r3
   1704a:	46bd      	mov	sp, r7
   1704c:	b005      	add	sp, #20
   1704e:	bd90      	pop	{r4, r7, pc}
   17050:	00016ce5 	.word	0x00016ce5
   17054:	000163f9 	.word	0x000163f9

00017058 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   17058:	b590      	push	{r4, r7, lr}
   1705a:	b085      	sub	sp, #20
   1705c:	af00      	add	r7, sp, #0
   1705e:	6078      	str	r0, [r7, #4]
   17060:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   17062:	687b      	ldr	r3, [r7, #4]
   17064:	2102      	movs	r1, #2
   17066:	0018      	movs	r0, r3
   17068:	4b21      	ldr	r3, [pc, #132]	; (170f0 <lsm6dso_fsm_data_rate_get+0x98>)
   1706a:	4798      	blx	r3
   1706c:	0003      	movs	r3, r0
   1706e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   17070:	68fb      	ldr	r3, [r7, #12]
   17072:	2b00      	cmp	r3, #0
   17074:	d108      	bne.n	17088 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   17076:	2308      	movs	r3, #8
   17078:	18fa      	adds	r2, r7, r3
   1707a:	6878      	ldr	r0, [r7, #4]
   1707c:	2301      	movs	r3, #1
   1707e:	215f      	movs	r1, #95	; 0x5f
   17080:	4c1c      	ldr	r4, [pc, #112]	; (170f4 <lsm6dso_fsm_data_rate_get+0x9c>)
   17082:	47a0      	blx	r4
   17084:	0003      	movs	r3, r0
   17086:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   17088:	68fb      	ldr	r3, [r7, #12]
   1708a:	2b00      	cmp	r3, #0
   1708c:	d12b      	bne.n	170e6 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   1708e:	2308      	movs	r3, #8
   17090:	18fb      	adds	r3, r7, r3
   17092:	781b      	ldrb	r3, [r3, #0]
   17094:	06db      	lsls	r3, r3, #27
   17096:	0f9b      	lsrs	r3, r3, #30
   17098:	b2db      	uxtb	r3, r3
   1709a:	2b01      	cmp	r3, #1
   1709c:	d00c      	beq.n	170b8 <lsm6dso_fsm_data_rate_get+0x60>
   1709e:	dc02      	bgt.n	170a6 <lsm6dso_fsm_data_rate_get+0x4e>
   170a0:	2b00      	cmp	r3, #0
   170a2:	d005      	beq.n	170b0 <lsm6dso_fsm_data_rate_get+0x58>
   170a4:	e014      	b.n	170d0 <lsm6dso_fsm_data_rate_get+0x78>
   170a6:	2b02      	cmp	r3, #2
   170a8:	d00a      	beq.n	170c0 <lsm6dso_fsm_data_rate_get+0x68>
   170aa:	2b03      	cmp	r3, #3
   170ac:	d00c      	beq.n	170c8 <lsm6dso_fsm_data_rate_get+0x70>
   170ae:	e00f      	b.n	170d0 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   170b0:	683b      	ldr	r3, [r7, #0]
   170b2:	2200      	movs	r2, #0
   170b4:	701a      	strb	r2, [r3, #0]
        break;
   170b6:	e00f      	b.n	170d8 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   170b8:	683b      	ldr	r3, [r7, #0]
   170ba:	2201      	movs	r2, #1
   170bc:	701a      	strb	r2, [r3, #0]
        break;
   170be:	e00b      	b.n	170d8 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   170c0:	683b      	ldr	r3, [r7, #0]
   170c2:	2202      	movs	r2, #2
   170c4:	701a      	strb	r2, [r3, #0]
        break;
   170c6:	e007      	b.n	170d8 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   170c8:	683b      	ldr	r3, [r7, #0]
   170ca:	2203      	movs	r2, #3
   170cc:	701a      	strb	r2, [r3, #0]
        break;
   170ce:	e003      	b.n	170d8 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   170d0:	683b      	ldr	r3, [r7, #0]
   170d2:	2200      	movs	r2, #0
   170d4:	701a      	strb	r2, [r3, #0]
        break;
   170d6:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   170d8:	687b      	ldr	r3, [r7, #4]
   170da:	2100      	movs	r1, #0
   170dc:	0018      	movs	r0, r3
   170de:	4b04      	ldr	r3, [pc, #16]	; (170f0 <lsm6dso_fsm_data_rate_get+0x98>)
   170e0:	4798      	blx	r3
   170e2:	0003      	movs	r3, r0
   170e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   170e6:	68fb      	ldr	r3, [r7, #12]
}
   170e8:	0018      	movs	r0, r3
   170ea:	46bd      	mov	sp, r7
   170ec:	b005      	add	sp, #20
   170ee:	bd90      	pop	{r4, r7, pc}
   170f0:	00016ce5 	.word	0x00016ce5
   170f4:	000163f9 	.word	0x000163f9

000170f8 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   170f8:	b580      	push	{r7, lr}
   170fa:	b086      	sub	sp, #24
   170fc:	af00      	add	r7, sp, #0
   170fe:	60f8      	str	r0, [r7, #12]
   17100:	0008      	movs	r0, r1
   17102:	607a      	str	r2, [r7, #4]
   17104:	0019      	movs	r1, r3
   17106:	230b      	movs	r3, #11
   17108:	18fb      	adds	r3, r7, r3
   1710a:	1c02      	adds	r2, r0, #0
   1710c:	701a      	strb	r2, [r3, #0]
   1710e:	2308      	movs	r3, #8
   17110:	18fb      	adds	r3, r7, r3
   17112:	1c0a      	adds	r2, r1, #0
   17114:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	
	msgOutImu[0] = reg;
   17116:	4b19      	ldr	r3, [pc, #100]	; (1717c <platform_write+0x84>)
   17118:	220b      	movs	r2, #11
   1711a:	18ba      	adds	r2, r7, r2
   1711c:	7812      	ldrb	r2, [r2, #0]
   1711e:	701a      	strb	r2, [r3, #0]
	
	for(int i = 0; i < len; i++) {
   17120:	2300      	movs	r3, #0
   17122:	617b      	str	r3, [r7, #20]
   17124:	e00a      	b.n	1713c <platform_write+0x44>
		msgOutImu[i+1] = bufp[i];
   17126:	697b      	ldr	r3, [r7, #20]
   17128:	3301      	adds	r3, #1
   1712a:	697a      	ldr	r2, [r7, #20]
   1712c:	6879      	ldr	r1, [r7, #4]
   1712e:	188a      	adds	r2, r1, r2
   17130:	7811      	ldrb	r1, [r2, #0]
   17132:	4a12      	ldr	r2, [pc, #72]	; (1717c <platform_write+0x84>)
   17134:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < len; i++) {
   17136:	697b      	ldr	r3, [r7, #20]
   17138:	3301      	adds	r3, #1
   1713a:	617b      	str	r3, [r7, #20]
   1713c:	2308      	movs	r3, #8
   1713e:	18fb      	adds	r3, r7, r3
   17140:	881a      	ldrh	r2, [r3, #0]
   17142:	697b      	ldr	r3, [r7, #20]
   17144:	429a      	cmp	r2, r3
   17146:	dcee      	bgt.n	17126 <platform_write+0x2e>
	}
	
	imuData.address = 0x6B;
   17148:	4b0d      	ldr	r3, [pc, #52]	; (17180 <platform_write+0x88>)
   1714a:	226b      	movs	r2, #107	; 0x6b
   1714c:	701a      	strb	r2, [r3, #0]
	imuData.lenOut = len + 1;
   1714e:	2308      	movs	r3, #8
   17150:	18fb      	adds	r3, r7, r3
   17152:	881b      	ldrh	r3, [r3, #0]
   17154:	3301      	adds	r3, #1
   17156:	b29a      	uxth	r2, r3
   17158:	4b09      	ldr	r3, [pc, #36]	; (17180 <platform_write+0x88>)
   1715a:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &msgOutImu;
   1715c:	4b08      	ldr	r3, [pc, #32]	; (17180 <platform_write+0x88>)
   1715e:	4a07      	ldr	r2, [pc, #28]	; (1717c <platform_write+0x84>)
   17160:	605a      	str	r2, [r3, #4]
	
	int32_t error = I2cWriteDataWait(&imuData, 100);
   17162:	4b07      	ldr	r3, [pc, #28]	; (17180 <platform_write+0x88>)
   17164:	2164      	movs	r1, #100	; 0x64
   17166:	0018      	movs	r0, r3
   17168:	4b06      	ldr	r3, [pc, #24]	; (17184 <platform_write+0x8c>)
   1716a:	4798      	blx	r3
   1716c:	0003      	movs	r3, r0
   1716e:	613b      	str	r3, [r7, #16]
	
return error;
   17170:	693b      	ldr	r3, [r7, #16]

}
   17172:	0018      	movs	r0, r3
   17174:	46bd      	mov	sp, r7
   17176:	b006      	add	sp, #24
   17178:	bd80      	pop	{r7, pc}
   1717a:	46c0      	nop			; (mov r8, r8)
   1717c:	2000479c 	.word	0x2000479c
   17180:	200047dc 	.word	0x200047dc
   17184:	00016141 	.word	0x00016141

00017188 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   17188:	b580      	push	{r7, lr}
   1718a:	b086      	sub	sp, #24
   1718c:	af00      	add	r7, sp, #0
   1718e:	60f8      	str	r0, [r7, #12]
   17190:	0008      	movs	r0, r1
   17192:	607a      	str	r2, [r7, #4]
   17194:	0019      	movs	r1, r3
   17196:	230b      	movs	r3, #11
   17198:	18fb      	adds	r3, r7, r3
   1719a:	1c02      	adds	r2, r0, #0
   1719c:	701a      	strb	r2, [r3, #0]
   1719e:	2308      	movs	r3, #8
   171a0:	18fb      	adds	r3, r7, r3
   171a2:	1c0a      	adds	r2, r1, #0
   171a4:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	
	imuData.address = 0x6B;
   171a6:	4b13      	ldr	r3, [pc, #76]	; (171f4 <platform_read+0x6c>)
   171a8:	226b      	movs	r2, #107	; 0x6b
   171aa:	701a      	strb	r2, [r3, #0]
	imuData.lenIn = len;
   171ac:	4b11      	ldr	r3, [pc, #68]	; (171f4 <platform_read+0x6c>)
   171ae:	2208      	movs	r2, #8
   171b0:	18ba      	adds	r2, r7, r2
   171b2:	8812      	ldrh	r2, [r2, #0]
   171b4:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
   171b6:	4b0f      	ldr	r3, [pc, #60]	; (171f4 <platform_read+0x6c>)
   171b8:	687a      	ldr	r2, [r7, #4]
   171ba:	609a      	str	r2, [r3, #8]
	imuData.lenOut = 1;
   171bc:	4b0d      	ldr	r3, [pc, #52]	; (171f4 <platform_read+0x6c>)
   171be:	2201      	movs	r2, #1
   171c0:	81da      	strh	r2, [r3, #14]
	
	msgOutImu[0] = reg;
   171c2:	4b0d      	ldr	r3, [pc, #52]	; (171f8 <platform_read+0x70>)
   171c4:	220b      	movs	r2, #11
   171c6:	18ba      	adds	r2, r7, r2
   171c8:	7812      	ldrb	r2, [r2, #0]
   171ca:	701a      	strb	r2, [r3, #0]
	msgOutImu[1] = 0;
   171cc:	4b0a      	ldr	r3, [pc, #40]	; (171f8 <platform_read+0x70>)
   171ce:	2200      	movs	r2, #0
   171d0:	705a      	strb	r2, [r3, #1]
	
	imuData.msgOut = &msgOutImu;
   171d2:	4b08      	ldr	r3, [pc, #32]	; (171f4 <platform_read+0x6c>)
   171d4:	4a08      	ldr	r2, [pc, #32]	; (171f8 <platform_read+0x70>)
   171d6:	605a      	str	r2, [r3, #4]

	int32_t error = I2cReadDataWait(&imuData, 5, 100);
   171d8:	4b06      	ldr	r3, [pc, #24]	; (171f4 <platform_read+0x6c>)
   171da:	2264      	movs	r2, #100	; 0x64
   171dc:	2105      	movs	r1, #5
   171de:	0018      	movs	r0, r3
   171e0:	4b06      	ldr	r3, [pc, #24]	; (171fc <platform_read+0x74>)
   171e2:	4798      	blx	r3
   171e4:	0003      	movs	r3, r0
   171e6:	617b      	str	r3, [r7, #20]
	
return error;
   171e8:	697b      	ldr	r3, [r7, #20]


}
   171ea:	0018      	movs	r0, r3
   171ec:	46bd      	mov	sp, r7
   171ee:	b006      	add	sp, #24
   171f0:	bd80      	pop	{r7, pc}
   171f2:	46c0      	nop			; (mov r8, r8)
   171f4:	200047dc 	.word	0x200047dc
   171f8:	2000479c 	.word	0x2000479c
   171fc:	00016219 	.word	0x00016219

00017200 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   17200:	b580      	push	{r7, lr}
   17202:	af00      	add	r7, sp, #0
return &dev_ctx;
   17204:	4b01      	ldr	r3, [pc, #4]	; (1720c <GetImuStruct+0xc>)
}
   17206:	0018      	movs	r0, r3
   17208:	46bd      	mov	sp, r7
   1720a:	bd80      	pop	{r7, pc}
   1720c:	20000014 	.word	0x20000014

00017210 <InitImu>:



int32_t InitImu(void)
{
   17210:	b580      	push	{r7, lr}
   17212:	b082      	sub	sp, #8
   17214:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   17216:	2300      	movs	r3, #0
   17218:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   1721a:	4b23      	ldr	r3, [pc, #140]	; (172a8 <InitImu+0x98>)
   1721c:	2101      	movs	r1, #1
   1721e:	0018      	movs	r0, r3
   17220:	4b22      	ldr	r3, [pc, #136]	; (172ac <InitImu+0x9c>)
   17222:	4798      	blx	r3
   17224:	0003      	movs	r3, r0
   17226:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   17228:	1cfa      	adds	r2, r7, #3
   1722a:	4b1f      	ldr	r3, [pc, #124]	; (172a8 <InitImu+0x98>)
   1722c:	0011      	movs	r1, r2
   1722e:	0018      	movs	r0, r3
   17230:	4b1f      	ldr	r3, [pc, #124]	; (172b0 <InitImu+0xa0>)
   17232:	4798      	blx	r3
   17234:	0002      	movs	r2, r0
   17236:	687b      	ldr	r3, [r7, #4]
   17238:	4313      	orrs	r3, r2
   1723a:	607b      	str	r3, [r7, #4]
  } while (rst);
   1723c:	1cfb      	adds	r3, r7, #3
   1723e:	781b      	ldrb	r3, [r3, #0]
   17240:	2b00      	cmp	r3, #0
   17242:	d1f1      	bne.n	17228 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   17244:	4b18      	ldr	r3, [pc, #96]	; (172a8 <InitImu+0x98>)
   17246:	2180      	movs	r1, #128	; 0x80
   17248:	0018      	movs	r0, r3
   1724a:	4b1a      	ldr	r3, [pc, #104]	; (172b4 <InitImu+0xa4>)
   1724c:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   1724e:	4b16      	ldr	r3, [pc, #88]	; (172a8 <InitImu+0x98>)
   17250:	2101      	movs	r1, #1
   17252:	0018      	movs	r0, r3
   17254:	4b18      	ldr	r3, [pc, #96]	; (172b8 <InitImu+0xa8>)
   17256:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   17258:	4b13      	ldr	r3, [pc, #76]	; (172a8 <InitImu+0x98>)
   1725a:	2100      	movs	r1, #0
   1725c:	0018      	movs	r0, r3
   1725e:	4b17      	ldr	r3, [pc, #92]	; (172bc <InitImu+0xac>)
   17260:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   17262:	4b11      	ldr	r3, [pc, #68]	; (172a8 <InitImu+0x98>)
   17264:	2101      	movs	r1, #1
   17266:	0018      	movs	r0, r3
   17268:	4b15      	ldr	r3, [pc, #84]	; (172c0 <InitImu+0xb0>)
   1726a:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   1726c:	4b0e      	ldr	r3, [pc, #56]	; (172a8 <InitImu+0x98>)
   1726e:	2101      	movs	r1, #1
   17270:	0018      	movs	r0, r3
   17272:	4b14      	ldr	r3, [pc, #80]	; (172c4 <InitImu+0xb4>)
   17274:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   17276:	4b0c      	ldr	r3, [pc, #48]	; (172a8 <InitImu+0x98>)
   17278:	2100      	movs	r1, #0
   1727a:	0018      	movs	r0, r3
   1727c:	4b12      	ldr	r3, [pc, #72]	; (172c8 <InitImu+0xb8>)
   1727e:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   17280:	4b09      	ldr	r3, [pc, #36]	; (172a8 <InitImu+0x98>)
   17282:	2106      	movs	r1, #6
   17284:	0018      	movs	r0, r3
   17286:	4b11      	ldr	r3, [pc, #68]	; (172cc <InitImu+0xbc>)
   17288:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   1728a:	4b07      	ldr	r3, [pc, #28]	; (172a8 <InitImu+0x98>)
   1728c:	2104      	movs	r1, #4
   1728e:	0018      	movs	r0, r3
   17290:	4b0f      	ldr	r3, [pc, #60]	; (172d0 <InitImu+0xc0>)
   17292:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   17294:	4b04      	ldr	r3, [pc, #16]	; (172a8 <InitImu+0x98>)
   17296:	2101      	movs	r1, #1
   17298:	0018      	movs	r0, r3
   1729a:	4b0e      	ldr	r3, [pc, #56]	; (172d4 <InitImu+0xc4>)
   1729c:	4798      	blx	r3

  return error;
   1729e:	687b      	ldr	r3, [r7, #4]
}
   172a0:	0018      	movs	r0, r3
   172a2:	46bd      	mov	sp, r7
   172a4:	b002      	add	sp, #8
   172a6:	bd80      	pop	{r7, pc}
   172a8:	20000014 	.word	0x20000014
   172ac:	00016d75 	.word	0x00016d75
   172b0:	00016de1 	.word	0x00016de1
   172b4:	00016f41 	.word	0x00016f41
   172b8:	00016b1d 	.word	0x00016b1d
   172bc:	00016b89 	.word	0x00016b89
   172c0:	00016529 	.word	0x00016529
   172c4:	00016859 	.word	0x00016859
   172c8:	000164bd 	.word	0x000164bd
   172cc:	000167ed 	.word	0x000167ed
   172d0:	00016e89 	.word	0x00016e89
   172d4:	00016e1d 	.word	0x00016e1d

000172d8 <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   172d8:	b580      	push	{r7, lr}
   172da:	b082      	sub	sp, #8
   172dc:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   172de:	4b38      	ldr	r3, [pc, #224]	; (173c0 <InitializeSeesaw+0xe8>)
   172e0:	222e      	movs	r2, #46	; 0x2e
   172e2:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   172e4:	4b36      	ldr	r3, [pc, #216]	; (173c0 <InitializeSeesaw+0xe8>)
   172e6:	4a37      	ldr	r2, [pc, #220]	; (173c4 <InitializeSeesaw+0xec>)
   172e8:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   172ea:	4b35      	ldr	r3, [pc, #212]	; (173c0 <InitializeSeesaw+0xe8>)
   172ec:	2202      	movs	r2, #2
   172ee:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   172f0:	4b33      	ldr	r3, [pc, #204]	; (173c0 <InitializeSeesaw+0xe8>)
   172f2:	003a      	movs	r2, r7
   172f4:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   172f6:	4b32      	ldr	r3, [pc, #200]	; (173c0 <InitializeSeesaw+0xe8>)
   172f8:	2201      	movs	r2, #1
   172fa:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   172fc:	4b30      	ldr	r3, [pc, #192]	; (173c0 <InitializeSeesaw+0xe8>)
   172fe:	2264      	movs	r2, #100	; 0x64
   17300:	2100      	movs	r1, #0
   17302:	0018      	movs	r0, r3
   17304:	4b30      	ldr	r3, [pc, #192]	; (173c8 <InitializeSeesaw+0xf0>)
   17306:	4798      	blx	r3
   17308:	0003      	movs	r3, r0
   1730a:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   1730c:	687b      	ldr	r3, [r7, #4]
   1730e:	2b00      	cmp	r3, #0
   17310:	d004      	beq.n	1731c <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   17312:	4b2e      	ldr	r3, [pc, #184]	; (173cc <InitializeSeesaw+0xf4>)
   17314:	0018      	movs	r0, r3
   17316:	4b2e      	ldr	r3, [pc, #184]	; (173d0 <InitializeSeesaw+0xf8>)
   17318:	4798      	blx	r3
   1731a:	e00c      	b.n	17336 <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   1731c:	003b      	movs	r3, r7
   1731e:	781b      	ldrb	r3, [r3, #0]
   17320:	2b55      	cmp	r3, #85	; 0x55
   17322:	d004      	beq.n	1732e <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   17324:	4b2b      	ldr	r3, [pc, #172]	; (173d4 <InitializeSeesaw+0xfc>)
   17326:	0018      	movs	r0, r3
   17328:	4b29      	ldr	r3, [pc, #164]	; (173d0 <InitializeSeesaw+0xf8>)
   1732a:	4798      	blx	r3
   1732c:	e003      	b.n	17336 <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   1732e:	4b2a      	ldr	r3, [pc, #168]	; (173d8 <InitializeSeesaw+0x100>)
   17330:	0018      	movs	r0, r3
   17332:	4b27      	ldr	r3, [pc, #156]	; (173d0 <InitializeSeesaw+0xf8>)
   17334:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   17336:	4b22      	ldr	r3, [pc, #136]	; (173c0 <InitializeSeesaw+0xe8>)
   17338:	4a28      	ldr	r2, [pc, #160]	; (173dc <InitializeSeesaw+0x104>)
   1733a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   1733c:	4b20      	ldr	r3, [pc, #128]	; (173c0 <InitializeSeesaw+0xe8>)
   1733e:	2203      	movs	r2, #3
   17340:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   17342:	4b1f      	ldr	r3, [pc, #124]	; (173c0 <InitializeSeesaw+0xe8>)
   17344:	2164      	movs	r1, #100	; 0x64
   17346:	0018      	movs	r0, r3
   17348:	4b25      	ldr	r3, [pc, #148]	; (173e0 <InitializeSeesaw+0x108>)
   1734a:	4798      	blx	r3
   1734c:	0003      	movs	r3, r0
   1734e:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   17350:	687b      	ldr	r3, [r7, #4]
   17352:	2b00      	cmp	r3, #0
   17354:	d003      	beq.n	1735e <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   17356:	4b23      	ldr	r3, [pc, #140]	; (173e4 <InitializeSeesaw+0x10c>)
   17358:	0018      	movs	r0, r3
   1735a:	4b1d      	ldr	r3, [pc, #116]	; (173d0 <InitializeSeesaw+0xf8>)
   1735c:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   1735e:	4b18      	ldr	r3, [pc, #96]	; (173c0 <InitializeSeesaw+0xe8>)
   17360:	4a21      	ldr	r2, [pc, #132]	; (173e8 <InitializeSeesaw+0x110>)
   17362:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   17364:	4b16      	ldr	r3, [pc, #88]	; (173c0 <InitializeSeesaw+0xe8>)
   17366:	2203      	movs	r2, #3
   17368:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   1736a:	4b15      	ldr	r3, [pc, #84]	; (173c0 <InitializeSeesaw+0xe8>)
   1736c:	2164      	movs	r1, #100	; 0x64
   1736e:	0018      	movs	r0, r3
   17370:	4b1b      	ldr	r3, [pc, #108]	; (173e0 <InitializeSeesaw+0x108>)
   17372:	4798      	blx	r3
   17374:	0003      	movs	r3, r0
   17376:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   17378:	687b      	ldr	r3, [r7, #4]
   1737a:	2b00      	cmp	r3, #0
   1737c:	d003      	beq.n	17386 <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   1737e:	4b1b      	ldr	r3, [pc, #108]	; (173ec <InitializeSeesaw+0x114>)
   17380:	0018      	movs	r0, r3
   17382:	4b13      	ldr	r3, [pc, #76]	; (173d0 <InitializeSeesaw+0xf8>)
   17384:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   17386:	4b0e      	ldr	r3, [pc, #56]	; (173c0 <InitializeSeesaw+0xe8>)
   17388:	4a19      	ldr	r2, [pc, #100]	; (173f0 <InitializeSeesaw+0x118>)
   1738a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   1738c:	4b0c      	ldr	r3, [pc, #48]	; (173c0 <InitializeSeesaw+0xe8>)
   1738e:	2204      	movs	r2, #4
   17390:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   17392:	4b0b      	ldr	r3, [pc, #44]	; (173c0 <InitializeSeesaw+0xe8>)
   17394:	2164      	movs	r1, #100	; 0x64
   17396:	0018      	movs	r0, r3
   17398:	4b11      	ldr	r3, [pc, #68]	; (173e0 <InitializeSeesaw+0x108>)
   1739a:	4798      	blx	r3
   1739c:	0003      	movs	r3, r0
   1739e:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   173a0:	687b      	ldr	r3, [r7, #4]
   173a2:	2b00      	cmp	r3, #0
   173a4:	d003      	beq.n	173ae <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   173a6:	4b13      	ldr	r3, [pc, #76]	; (173f4 <InitializeSeesaw+0x11c>)
   173a8:	0018      	movs	r0, r3
   173aa:	4b09      	ldr	r3, [pc, #36]	; (173d0 <InitializeSeesaw+0xf8>)
   173ac:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   173ae:	4b12      	ldr	r3, [pc, #72]	; (173f8 <InitializeSeesaw+0x120>)
   173b0:	4798      	blx	r3

    SeesawInitializeKeypad();
   173b2:	4b12      	ldr	r3, [pc, #72]	; (173fc <InitializeSeesaw+0x124>)
   173b4:	4798      	blx	r3
    return error;
   173b6:	687b      	ldr	r3, [r7, #4]
}
   173b8:	0018      	movs	r0, r3
   173ba:	46bd      	mov	sp, r7
   173bc:	b002      	add	sp, #8
   173be:	bd80      	pop	{r7, pc}
   173c0:	200047ec 	.word	0x200047ec
   173c4:	00039310 	.word	0x00039310
   173c8:	00016219 	.word	0x00016219
   173cc:	00039328 	.word	0x00039328
   173d0:	00020745 	.word	0x00020745
   173d4:	00039348 	.word	0x00039348
   173d8:	00039354 	.word	0x00039354
   173dc:	00039314 	.word	0x00039314
   173e0:	00016141 	.word	0x00016141
   173e4:	00039368 	.word	0x00039368
   173e8:	00039318 	.word	0x00039318
   173ec:	00039388 	.word	0x00039388
   173f0:	0003931c 	.word	0x0003931c
   173f4:	000393b4 	.word	0x000393b4
   173f8:	000177ad 	.word	0x000177ad
   173fc:	000176bd 	.word	0x000176bd

00017400 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   17400:	b580      	push	{r7, lr}
   17402:	b082      	sub	sp, #8
   17404:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   17406:	1cfb      	adds	r3, r7, #3
   17408:	2200      	movs	r2, #0
   1740a:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   1740c:	4b11      	ldr	r3, [pc, #68]	; (17454 <SeesawGetKeypadCount+0x54>)
   1740e:	222e      	movs	r2, #46	; 0x2e
   17410:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   17412:	4b10      	ldr	r3, [pc, #64]	; (17454 <SeesawGetKeypadCount+0x54>)
   17414:	4a10      	ldr	r2, [pc, #64]	; (17458 <SeesawGetKeypadCount+0x58>)
   17416:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   17418:	4b0e      	ldr	r3, [pc, #56]	; (17454 <SeesawGetKeypadCount+0x54>)
   1741a:	2202      	movs	r2, #2
   1741c:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   1741e:	4b0d      	ldr	r3, [pc, #52]	; (17454 <SeesawGetKeypadCount+0x54>)
   17420:	1cfa      	adds	r2, r7, #3
   17422:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   17424:	4b0b      	ldr	r3, [pc, #44]	; (17454 <SeesawGetKeypadCount+0x54>)
   17426:	2201      	movs	r2, #1
   17428:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1742a:	4b0a      	ldr	r3, [pc, #40]	; (17454 <SeesawGetKeypadCount+0x54>)
   1742c:	2264      	movs	r2, #100	; 0x64
   1742e:	2100      	movs	r1, #0
   17430:	0018      	movs	r0, r3
   17432:	4b0a      	ldr	r3, [pc, #40]	; (1745c <SeesawGetKeypadCount+0x5c>)
   17434:	4798      	blx	r3
   17436:	0003      	movs	r3, r0
   17438:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   1743a:	687b      	ldr	r3, [r7, #4]
   1743c:	2b00      	cmp	r3, #0
   1743e:	d003      	beq.n	17448 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   17440:	4b07      	ldr	r3, [pc, #28]	; (17460 <SeesawGetKeypadCount+0x60>)
   17442:	0018      	movs	r0, r3
   17444:	4b07      	ldr	r3, [pc, #28]	; (17464 <SeesawGetKeypadCount+0x64>)
   17446:	4798      	blx	r3
    }
    return count;
   17448:	1cfb      	adds	r3, r7, #3
   1744a:	781b      	ldrb	r3, [r3, #0]
}
   1744c:	0018      	movs	r0, r3
   1744e:	46bd      	mov	sp, r7
   17450:	b002      	add	sp, #8
   17452:	bd80      	pop	{r7, pc}
   17454:	200047ec 	.word	0x200047ec
   17458:	00039324 	.word	0x00039324
   1745c:	00016219 	.word	0x00016219
   17460:	000393e8 	.word	0x000393e8
   17464:	00020745 	.word	0x00020745

00017468 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   17468:	b580      	push	{r7, lr}
   1746a:	b084      	sub	sp, #16
   1746c:	af00      	add	r7, sp, #0
   1746e:	6078      	str	r0, [r7, #4]
   17470:	000a      	movs	r2, r1
   17472:	1cfb      	adds	r3, r7, #3
   17474:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   17476:	1cfb      	adds	r3, r7, #3
   17478:	781b      	ldrb	r3, [r3, #0]
   1747a:	2b00      	cmp	r3, #0
   1747c:	d101      	bne.n	17482 <SeesawReadKeypad+0x1a>
   1747e:	2300      	movs	r3, #0
   17480:	e026      	b.n	174d0 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   17482:	2308      	movs	r3, #8
   17484:	18fb      	adds	r3, r7, r3
   17486:	4a14      	ldr	r2, [pc, #80]	; (174d8 <SeesawReadKeypad+0x70>)
   17488:	8812      	ldrh	r2, [r2, #0]
   1748a:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   1748c:	4b13      	ldr	r3, [pc, #76]	; (174dc <SeesawReadKeypad+0x74>)
   1748e:	222e      	movs	r2, #46	; 0x2e
   17490:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   17492:	4b12      	ldr	r3, [pc, #72]	; (174dc <SeesawReadKeypad+0x74>)
   17494:	2208      	movs	r2, #8
   17496:	18ba      	adds	r2, r7, r2
   17498:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   1749a:	4b10      	ldr	r3, [pc, #64]	; (174dc <SeesawReadKeypad+0x74>)
   1749c:	2202      	movs	r2, #2
   1749e:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   174a0:	4b0e      	ldr	r3, [pc, #56]	; (174dc <SeesawReadKeypad+0x74>)
   174a2:	687a      	ldr	r2, [r7, #4]
   174a4:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   174a6:	1cfb      	adds	r3, r7, #3
   174a8:	781b      	ldrb	r3, [r3, #0]
   174aa:	b29a      	uxth	r2, r3
   174ac:	4b0b      	ldr	r3, [pc, #44]	; (174dc <SeesawReadKeypad+0x74>)
   174ae:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   174b0:	4b0a      	ldr	r3, [pc, #40]	; (174dc <SeesawReadKeypad+0x74>)
   174b2:	2264      	movs	r2, #100	; 0x64
   174b4:	2100      	movs	r1, #0
   174b6:	0018      	movs	r0, r3
   174b8:	4b09      	ldr	r3, [pc, #36]	; (174e0 <SeesawReadKeypad+0x78>)
   174ba:	4798      	blx	r3
   174bc:	0003      	movs	r3, r0
   174be:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   174c0:	68fb      	ldr	r3, [r7, #12]
   174c2:	2b00      	cmp	r3, #0
   174c4:	d003      	beq.n	174ce <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   174c6:	4b07      	ldr	r3, [pc, #28]	; (174e4 <SeesawReadKeypad+0x7c>)
   174c8:	0018      	movs	r0, r3
   174ca:	4b07      	ldr	r3, [pc, #28]	; (174e8 <SeesawReadKeypad+0x80>)
   174cc:	4798      	blx	r3
    }
    return error;
   174ce:	68fb      	ldr	r3, [r7, #12]
}
   174d0:	0018      	movs	r0, r3
   174d2:	46bd      	mov	sp, r7
   174d4:	b004      	add	sp, #16
   174d6:	bd80      	pop	{r7, pc}
   174d8:	0003940c 	.word	0x0003940c
   174dc:	200047ec 	.word	0x200047ec
   174e0:	00016219 	.word	0x00016219
   174e4:	000393e8 	.word	0x000393e8
   174e8:	00020745 	.word	0x00020745

000174ec <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   174ec:	b590      	push	{r4, r7, lr}
   174ee:	b087      	sub	sp, #28
   174f0:	af00      	add	r7, sp, #0
   174f2:	0004      	movs	r4, r0
   174f4:	0008      	movs	r0, r1
   174f6:	0011      	movs	r1, r2
   174f8:	1dfb      	adds	r3, r7, #7
   174fa:	1c22      	adds	r2, r4, #0
   174fc:	701a      	strb	r2, [r3, #0]
   174fe:	1dbb      	adds	r3, r7, #6
   17500:	1c02      	adds	r2, r0, #0
   17502:	701a      	strb	r2, [r3, #0]
   17504:	1d7b      	adds	r3, r7, #5
   17506:	1c0a      	adds	r2, r1, #0
   17508:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   1750a:	2310      	movs	r3, #16
   1750c:	18fb      	adds	r3, r7, r3
   1750e:	1d7a      	adds	r2, r7, #5
   17510:	7812      	ldrb	r2, [r2, #0]
   17512:	2101      	movs	r1, #1
   17514:	0010      	movs	r0, r2
   17516:	4008      	ands	r0, r1
   17518:	781a      	ldrb	r2, [r3, #0]
   1751a:	2101      	movs	r1, #1
   1751c:	438a      	bics	r2, r1
   1751e:	1c11      	adds	r1, r2, #0
   17520:	1c02      	adds	r2, r0, #0
   17522:	430a      	orrs	r2, r1
   17524:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   17526:	1dbb      	adds	r3, r7, #6
   17528:	781b      	ldrb	r3, [r3, #0]
   1752a:	2201      	movs	r2, #1
   1752c:	409a      	lsls	r2, r3
   1752e:	0013      	movs	r3, r2
   17530:	b2db      	uxtb	r3, r3
   17532:	1c1a      	adds	r2, r3, #0
   17534:	230f      	movs	r3, #15
   17536:	4013      	ands	r3, r2
   17538:	b2da      	uxtb	r2, r3
   1753a:	2310      	movs	r3, #16
   1753c:	18fb      	adds	r3, r7, r3
   1753e:	210f      	movs	r1, #15
   17540:	400a      	ands	r2, r1
   17542:	1890      	adds	r0, r2, r2
   17544:	781a      	ldrb	r2, [r3, #0]
   17546:	211e      	movs	r1, #30
   17548:	438a      	bics	r2, r1
   1754a:	1c11      	adds	r1, r2, #0
   1754c:	1c02      	adds	r2, r0, #0
   1754e:	430a      	orrs	r2, r1
   17550:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   17552:	230c      	movs	r3, #12
   17554:	18fb      	adds	r3, r7, r3
   17556:	2210      	movs	r2, #16
   17558:	701a      	strb	r2, [r3, #0]
   1755a:	230c      	movs	r3, #12
   1755c:	18fb      	adds	r3, r7, r3
   1755e:	2201      	movs	r2, #1
   17560:	705a      	strb	r2, [r3, #1]
   17562:	230c      	movs	r3, #12
   17564:	18fb      	adds	r3, r7, r3
   17566:	1dfa      	adds	r2, r7, #7
   17568:	7812      	ldrb	r2, [r2, #0]
   1756a:	709a      	strb	r2, [r3, #2]
   1756c:	2310      	movs	r3, #16
   1756e:	18fb      	adds	r3, r7, r3
   17570:	781a      	ldrb	r2, [r3, #0]
   17572:	230c      	movs	r3, #12
   17574:	18fb      	adds	r3, r7, r3
   17576:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   17578:	4b0c      	ldr	r3, [pc, #48]	; (175ac <SeesawActivateKey+0xc0>)
   1757a:	222e      	movs	r2, #46	; 0x2e
   1757c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   1757e:	4b0b      	ldr	r3, [pc, #44]	; (175ac <SeesawActivateKey+0xc0>)
   17580:	220c      	movs	r2, #12
   17582:	18ba      	adds	r2, r7, r2
   17584:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   17586:	4b09      	ldr	r3, [pc, #36]	; (175ac <SeesawActivateKey+0xc0>)
   17588:	2204      	movs	r2, #4
   1758a:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   1758c:	4b07      	ldr	r3, [pc, #28]	; (175ac <SeesawActivateKey+0xc0>)
   1758e:	2200      	movs	r2, #0
   17590:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   17592:	4b06      	ldr	r3, [pc, #24]	; (175ac <SeesawActivateKey+0xc0>)
   17594:	2164      	movs	r1, #100	; 0x64
   17596:	0018      	movs	r0, r3
   17598:	4b05      	ldr	r3, [pc, #20]	; (175b0 <SeesawActivateKey+0xc4>)
   1759a:	4798      	blx	r3
   1759c:	0003      	movs	r3, r0
   1759e:	617b      	str	r3, [r7, #20]
    return error;
   175a0:	697b      	ldr	r3, [r7, #20]
}
   175a2:	0018      	movs	r0, r3
   175a4:	46bd      	mov	sp, r7
   175a6:	b007      	add	sp, #28
   175a8:	bd90      	pop	{r4, r7, pc}
   175aa:	46c0      	nop			; (mov r8, r8)
   175ac:	200047ec 	.word	0x200047ec
   175b0:	00016141 	.word	0x00016141

000175b4 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   175b4:	b5b0      	push	{r4, r5, r7, lr}
   175b6:	b086      	sub	sp, #24
   175b8:	af00      	add	r7, sp, #0
   175ba:	0005      	movs	r5, r0
   175bc:	000c      	movs	r4, r1
   175be:	0010      	movs	r0, r2
   175c0:	0019      	movs	r1, r3
   175c2:	1dfb      	adds	r3, r7, #7
   175c4:	1c2a      	adds	r2, r5, #0
   175c6:	701a      	strb	r2, [r3, #0]
   175c8:	1dbb      	adds	r3, r7, #6
   175ca:	1c22      	adds	r2, r4, #0
   175cc:	701a      	strb	r2, [r3, #0]
   175ce:	1d7b      	adds	r3, r7, #5
   175d0:	1c02      	adds	r2, r0, #0
   175d2:	701a      	strb	r2, [r3, #0]
   175d4:	1d3b      	adds	r3, r7, #4
   175d6:	1c0a      	adds	r2, r1, #0
   175d8:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   175da:	2308      	movs	r3, #8
   175dc:	18fb      	adds	r3, r7, r3
   175de:	220e      	movs	r2, #14
   175e0:	701a      	strb	r2, [r3, #0]
   175e2:	2308      	movs	r3, #8
   175e4:	18fb      	adds	r3, r7, r3
   175e6:	2204      	movs	r2, #4
   175e8:	705a      	strb	r2, [r3, #1]
   175ea:	2308      	movs	r3, #8
   175ec:	18fb      	adds	r3, r7, r3
   175ee:	2200      	movs	r2, #0
   175f0:	709a      	strb	r2, [r3, #2]
   175f2:	2308      	movs	r3, #8
   175f4:	18fb      	adds	r3, r7, r3
   175f6:	2200      	movs	r2, #0
   175f8:	70da      	strb	r2, [r3, #3]
   175fa:	2308      	movs	r3, #8
   175fc:	18fb      	adds	r3, r7, r3
   175fe:	1d7a      	adds	r2, r7, #5
   17600:	7812      	ldrb	r2, [r2, #0]
   17602:	711a      	strb	r2, [r3, #4]
   17604:	2308      	movs	r3, #8
   17606:	18fb      	adds	r3, r7, r3
   17608:	1dba      	adds	r2, r7, #6
   1760a:	7812      	ldrb	r2, [r2, #0]
   1760c:	715a      	strb	r2, [r3, #5]
   1760e:	2308      	movs	r3, #8
   17610:	18fb      	adds	r3, r7, r3
   17612:	1d3a      	adds	r2, r7, #4
   17614:	7812      	ldrb	r2, [r2, #0]
   17616:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   17618:	1dfb      	adds	r3, r7, #7
   1761a:	781b      	ldrb	r3, [r3, #0]
   1761c:	b29b      	uxth	r3, r3
   1761e:	2216      	movs	r2, #22
   17620:	18ba      	adds	r2, r7, r2
   17622:	1c19      	adds	r1, r3, #0
   17624:	1c0b      	adds	r3, r1, #0
   17626:	18db      	adds	r3, r3, r3
   17628:	185b      	adds	r3, r3, r1
   1762a:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   1762c:	2316      	movs	r3, #22
   1762e:	18fb      	adds	r3, r7, r3
   17630:	881b      	ldrh	r3, [r3, #0]
   17632:	0a1b      	lsrs	r3, r3, #8
   17634:	b29b      	uxth	r3, r3
   17636:	b2da      	uxtb	r2, r3
   17638:	2308      	movs	r3, #8
   1763a:	18fb      	adds	r3, r7, r3
   1763c:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   1763e:	2316      	movs	r3, #22
   17640:	18fb      	adds	r3, r7, r3
   17642:	881b      	ldrh	r3, [r3, #0]
   17644:	b2da      	uxtb	r2, r3
   17646:	2308      	movs	r3, #8
   17648:	18fb      	adds	r3, r7, r3
   1764a:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   1764c:	4b09      	ldr	r3, [pc, #36]	; (17674 <SeesawSetLed+0xc0>)
   1764e:	2208      	movs	r2, #8
   17650:	18ba      	adds	r2, r7, r2
   17652:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   17654:	4b07      	ldr	r3, [pc, #28]	; (17674 <SeesawSetLed+0xc0>)
   17656:	2207      	movs	r2, #7
   17658:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   1765a:	4b06      	ldr	r3, [pc, #24]	; (17674 <SeesawSetLed+0xc0>)
   1765c:	2164      	movs	r1, #100	; 0x64
   1765e:	0018      	movs	r0, r3
   17660:	4b05      	ldr	r3, [pc, #20]	; (17678 <SeesawSetLed+0xc4>)
   17662:	4798      	blx	r3
   17664:	0003      	movs	r3, r0
   17666:	613b      	str	r3, [r7, #16]
    return error;
   17668:	693b      	ldr	r3, [r7, #16]
}
   1766a:	0018      	movs	r0, r3
   1766c:	46bd      	mov	sp, r7
   1766e:	b006      	add	sp, #24
   17670:	bdb0      	pop	{r4, r5, r7, pc}
   17672:	46c0      	nop			; (mov r8, r8)
   17674:	200047ec 	.word	0x200047ec
   17678:	00016141 	.word	0x00016141

0001767c <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   1767c:	b580      	push	{r7, lr}
   1767e:	b082      	sub	sp, #8
   17680:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   17682:	003b      	movs	r3, r7
   17684:	4a0a      	ldr	r2, [pc, #40]	; (176b0 <SeesawOrderLedUpdate+0x34>)
   17686:	8812      	ldrh	r2, [r2, #0]
   17688:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   1768a:	4b0a      	ldr	r3, [pc, #40]	; (176b4 <SeesawOrderLedUpdate+0x38>)
   1768c:	003a      	movs	r2, r7
   1768e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   17690:	4b08      	ldr	r3, [pc, #32]	; (176b4 <SeesawOrderLedUpdate+0x38>)
   17692:	2202      	movs	r2, #2
   17694:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   17696:	4b07      	ldr	r3, [pc, #28]	; (176b4 <SeesawOrderLedUpdate+0x38>)
   17698:	2164      	movs	r1, #100	; 0x64
   1769a:	0018      	movs	r0, r3
   1769c:	4b06      	ldr	r3, [pc, #24]	; (176b8 <SeesawOrderLedUpdate+0x3c>)
   1769e:	4798      	blx	r3
   176a0:	0003      	movs	r3, r0
   176a2:	607b      	str	r3, [r7, #4]
    return error;
   176a4:	687b      	ldr	r3, [r7, #4]
}
   176a6:	0018      	movs	r0, r3
   176a8:	46bd      	mov	sp, r7
   176aa:	b002      	add	sp, #8
   176ac:	bd80      	pop	{r7, pc}
   176ae:	46c0      	nop			; (mov r8, r8)
   176b0:	00039410 	.word	0x00039410
   176b4:	200047ec 	.word	0x200047ec
   176b8:	00016141 	.word	0x00016141

000176bc <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   176bc:	b580      	push	{r7, lr}
   176be:	b082      	sub	sp, #8
   176c0:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   176c2:	4b33      	ldr	r3, [pc, #204]	; (17790 <SeesawInitializeKeypad+0xd4>)
   176c4:	222e      	movs	r2, #46	; 0x2e
   176c6:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   176c8:	4b31      	ldr	r3, [pc, #196]	; (17790 <SeesawInitializeKeypad+0xd4>)
   176ca:	4a32      	ldr	r2, [pc, #200]	; (17794 <SeesawInitializeKeypad+0xd8>)
   176cc:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   176ce:	4b30      	ldr	r3, [pc, #192]	; (17790 <SeesawInitializeKeypad+0xd4>)
   176d0:	2203      	movs	r2, #3
   176d2:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   176d4:	4b2e      	ldr	r3, [pc, #184]	; (17790 <SeesawInitializeKeypad+0xd4>)
   176d6:	2200      	movs	r2, #0
   176d8:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   176da:	4b2d      	ldr	r3, [pc, #180]	; (17790 <SeesawInitializeKeypad+0xd4>)
   176dc:	2164      	movs	r1, #100	; 0x64
   176de:	0018      	movs	r0, r3
   176e0:	4b2d      	ldr	r3, [pc, #180]	; (17798 <SeesawInitializeKeypad+0xdc>)
   176e2:	4798      	blx	r3
   176e4:	0003      	movs	r3, r0
   176e6:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   176e8:	683b      	ldr	r3, [r7, #0]
   176ea:	2b00      	cmp	r3, #0
   176ec:	d003      	beq.n	176f6 <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   176ee:	4b2b      	ldr	r3, [pc, #172]	; (1779c <SeesawInitializeKeypad+0xe0>)
   176f0:	0018      	movs	r0, r3
   176f2:	4b2b      	ldr	r3, [pc, #172]	; (177a0 <SeesawInitializeKeypad+0xe4>)
   176f4:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   176f6:	2300      	movs	r3, #0
   176f8:	607b      	str	r3, [r7, #4]
   176fa:	e041      	b.n	17780 <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   176fc:	687b      	ldr	r3, [r7, #4]
   176fe:	2b00      	cmp	r3, #0
   17700:	da00      	bge.n	17704 <SeesawInitializeKeypad+0x48>
   17702:	3303      	adds	r3, #3
   17704:	109b      	asrs	r3, r3, #2
   17706:	b2db      	uxtb	r3, r3
   17708:	00db      	lsls	r3, r3, #3
   1770a:	b2da      	uxtb	r2, r3
   1770c:	687b      	ldr	r3, [r7, #4]
   1770e:	4925      	ldr	r1, [pc, #148]	; (177a4 <SeesawInitializeKeypad+0xe8>)
   17710:	400b      	ands	r3, r1
   17712:	d504      	bpl.n	1771e <SeesawInitializeKeypad+0x62>
   17714:	3b01      	subs	r3, #1
   17716:	2104      	movs	r1, #4
   17718:	4249      	negs	r1, r1
   1771a:	430b      	orrs	r3, r1
   1771c:	3301      	adds	r3, #1
   1771e:	b2db      	uxtb	r3, r3
   17720:	18d3      	adds	r3, r2, r3
   17722:	b2db      	uxtb	r3, r3
   17724:	2201      	movs	r2, #1
   17726:	2103      	movs	r1, #3
   17728:	0018      	movs	r0, r3
   1772a:	4b1f      	ldr	r3, [pc, #124]	; (177a8 <SeesawInitializeKeypad+0xec>)
   1772c:	4798      	blx	r3
   1772e:	0003      	movs	r3, r0
   17730:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   17732:	687b      	ldr	r3, [r7, #4]
   17734:	2b00      	cmp	r3, #0
   17736:	da00      	bge.n	1773a <SeesawInitializeKeypad+0x7e>
   17738:	3303      	adds	r3, #3
   1773a:	109b      	asrs	r3, r3, #2
   1773c:	b2db      	uxtb	r3, r3
   1773e:	00db      	lsls	r3, r3, #3
   17740:	b2da      	uxtb	r2, r3
   17742:	687b      	ldr	r3, [r7, #4]
   17744:	4917      	ldr	r1, [pc, #92]	; (177a4 <SeesawInitializeKeypad+0xe8>)
   17746:	400b      	ands	r3, r1
   17748:	d504      	bpl.n	17754 <SeesawInitializeKeypad+0x98>
   1774a:	3b01      	subs	r3, #1
   1774c:	2104      	movs	r1, #4
   1774e:	4249      	negs	r1, r1
   17750:	430b      	orrs	r3, r1
   17752:	3301      	adds	r3, #1
   17754:	b2db      	uxtb	r3, r3
   17756:	18d3      	adds	r3, r2, r3
   17758:	b2db      	uxtb	r3, r3
   1775a:	2201      	movs	r2, #1
   1775c:	2102      	movs	r1, #2
   1775e:	0018      	movs	r0, r3
   17760:	4b11      	ldr	r3, [pc, #68]	; (177a8 <SeesawInitializeKeypad+0xec>)
   17762:	4798      	blx	r3
   17764:	0002      	movs	r2, r0
   17766:	683b      	ldr	r3, [r7, #0]
   17768:	4313      	orrs	r3, r2
   1776a:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   1776c:	683b      	ldr	r3, [r7, #0]
   1776e:	2b00      	cmp	r3, #0
   17770:	d003      	beq.n	1777a <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   17772:	4b0a      	ldr	r3, [pc, #40]	; (1779c <SeesawInitializeKeypad+0xe0>)
   17774:	0018      	movs	r0, r3
   17776:	4b0a      	ldr	r3, [pc, #40]	; (177a0 <SeesawInitializeKeypad+0xe4>)
   17778:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   1777a:	687b      	ldr	r3, [r7, #4]
   1777c:	3301      	adds	r3, #1
   1777e:	607b      	str	r3, [r7, #4]
   17780:	687b      	ldr	r3, [r7, #4]
   17782:	2b0f      	cmp	r3, #15
   17784:	ddba      	ble.n	176fc <SeesawInitializeKeypad+0x40>
        }
    }
}
   17786:	46c0      	nop			; (mov r8, r8)
   17788:	46bd      	mov	sp, r7
   1778a:	b002      	add	sp, #8
   1778c:	bd80      	pop	{r7, pc}
   1778e:	46c0      	nop			; (mov r8, r8)
   17790:	200047ec 	.word	0x200047ec
   17794:	00039320 	.word	0x00039320
   17798:	00016141 	.word	0x00016141
   1779c:	00039414 	.word	0x00039414
   177a0:	00020745 	.word	0x00020745
   177a4:	80000003 	.word	0x80000003
   177a8:	000174ed 	.word	0x000174ed

000177ac <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   177ac:	b5b0      	push	{r4, r5, r7, lr}
   177ae:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   177b0:	23ff      	movs	r3, #255	; 0xff
   177b2:	22ff      	movs	r2, #255	; 0xff
   177b4:	21ff      	movs	r1, #255	; 0xff
   177b6:	200f      	movs	r0, #15
   177b8:	4c09      	ldr	r4, [pc, #36]	; (177e0 <SeesawTurnOnLedTest+0x34>)
   177ba:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   177bc:	4b09      	ldr	r3, [pc, #36]	; (177e4 <SeesawTurnOnLedTest+0x38>)
   177be:	4798      	blx	r3
    vTaskDelay(400);
   177c0:	23c8      	movs	r3, #200	; 0xc8
   177c2:	005b      	lsls	r3, r3, #1
   177c4:	0018      	movs	r0, r3
   177c6:	4b08      	ldr	r3, [pc, #32]	; (177e8 <SeesawTurnOnLedTest+0x3c>)
   177c8:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   177ca:	2300      	movs	r3, #0
   177cc:	2200      	movs	r2, #0
   177ce:	2100      	movs	r1, #0
   177d0:	200f      	movs	r0, #15
   177d2:	4c03      	ldr	r4, [pc, #12]	; (177e0 <SeesawTurnOnLedTest+0x34>)
   177d4:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   177d6:	4b03      	ldr	r3, [pc, #12]	; (177e4 <SeesawTurnOnLedTest+0x38>)
   177d8:	4798      	blx	r3
   177da:	46c0      	nop			; (mov r8, r8)
   177dc:	46bd      	mov	sp, r7
   177de:	bdb0      	pop	{r4, r5, r7, pc}
   177e0:	000175b5 	.word	0x000175b5
   177e4:	0001767d 	.word	0x0001767d
   177e8:	0001eaf1 	.word	0x0001eaf1

000177ec <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   177ec:	b5b0      	push	{r4, r5, r7, lr}
   177ee:	b0de      	sub	sp, #376	; 0x178
   177f0:	af02      	add	r7, sp, #8
   177f2:	6178      	str	r0, [r7, #20]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   177f4:	4b74      	ldr	r3, [pc, #464]	; (179c8 <vUiHandlerTask+0x1dc>)
   177f6:	0018      	movs	r0, r3
   177f8:	4b74      	ldr	r3, [pc, #464]	; (179cc <vUiHandlerTask+0x1e0>)
   177fa:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   177fc:	4b74      	ldr	r3, [pc, #464]	; (179d0 <vUiHandlerTask+0x1e4>)
   177fe:	2201      	movs	r2, #1
   17800:	701a      	strb	r2, [r3, #0]
	
	
	// Bme680 sensor configuration and storage
	int8_t bme680status = 1;
   17802:	2338      	movs	r3, #56	; 0x38
   17804:	33ff      	adds	r3, #255	; 0xff
   17806:	2210      	movs	r2, #16
   17808:	4694      	mov	ip, r2
   1780a:	44bc      	add	ip, r7
   1780c:	4463      	add	r3, ip
   1780e:	2201      	movs	r2, #1
   17810:	701a      	strb	r2, [r3, #0]
	struct bme680_dev * gas_sensor = GetBme680Struct();
   17812:	4b70      	ldr	r3, [pc, #448]	; (179d4 <vUiHandlerTask+0x1e8>)
   17814:	4798      	blx	r3
   17816:	0003      	movs	r3, r0
   17818:	2298      	movs	r2, #152	; 0x98
   1781a:	0052      	lsls	r2, r2, #1
   1781c:	2110      	movs	r1, #16
   1781e:	468c      	mov	ip, r1
   17820:	44bc      	add	ip, r7
   17822:	4462      	add	r2, ip
   17824:	6013      	str	r3, [r2, #0]
 	int N_MEAS = 3;
   17826:	2303      	movs	r3, #3
   17828:	2296      	movs	r2, #150	; 0x96
   1782a:	0052      	lsls	r2, r2, #1
   1782c:	2110      	movs	r1, #16
   1782e:	468c      	mov	ip, r1
   17830:	44bc      	add	ip, r7
   17832:	4462      	add	r2, ip
   17834:	6013      	str	r3, [r2, #0]
 	struct bme680_field_data data[N_MEAS];
   17836:	2396      	movs	r3, #150	; 0x96
   17838:	005b      	lsls	r3, r3, #1
   1783a:	2210      	movs	r2, #16
   1783c:	4694      	mov	ip, r2
   1783e:	44bc      	add	ip, r7
   17840:	4463      	add	r3, ip
   17842:	681c      	ldr	r4, [r3, #0]
   17844:	1e63      	subs	r3, r4, #1
   17846:	2294      	movs	r2, #148	; 0x94
   17848:	0052      	lsls	r2, r2, #1
   1784a:	2110      	movs	r1, #16
   1784c:	468c      	mov	ip, r1
   1784e:	44bc      	add	ip, r7
   17850:	4462      	add	r2, ip
   17852:	6013      	str	r3, [r2, #0]
   17854:	0023      	movs	r3, r4
   17856:	60bb      	str	r3, [r7, #8]
   17858:	2300      	movs	r3, #0
   1785a:	60fb      	str	r3, [r7, #12]
   1785c:	4d5e      	ldr	r5, [pc, #376]	; (179d8 <vUiHandlerTask+0x1ec>)
   1785e:	22a0      	movs	r2, #160	; 0xa0
   17860:	2300      	movs	r3, #0
   17862:	68b8      	ldr	r0, [r7, #8]
   17864:	68f9      	ldr	r1, [r7, #12]
   17866:	47a8      	blx	r5
   17868:	0022      	movs	r2, r4
   1786a:	0013      	movs	r3, r2
   1786c:	009b      	lsls	r3, r3, #2
   1786e:	189b      	adds	r3, r3, r2
   17870:	009b      	lsls	r3, r3, #2
   17872:	0023      	movs	r3, r4
   17874:	603b      	str	r3, [r7, #0]
   17876:	2300      	movs	r3, #0
   17878:	607b      	str	r3, [r7, #4]
   1787a:	4d57      	ldr	r5, [pc, #348]	; (179d8 <vUiHandlerTask+0x1ec>)
   1787c:	22a0      	movs	r2, #160	; 0xa0
   1787e:	2300      	movs	r3, #0
   17880:	6838      	ldr	r0, [r7, #0]
   17882:	6879      	ldr	r1, [r7, #4]
   17884:	47a8      	blx	r5
   17886:	0022      	movs	r2, r4
   17888:	0013      	movs	r3, r2
   1788a:	009b      	lsls	r3, r3, #2
   1788c:	189b      	adds	r3, r3, r2
   1788e:	009b      	lsls	r3, r3, #2
   17890:	3303      	adds	r3, #3
   17892:	3307      	adds	r3, #7
   17894:	08db      	lsrs	r3, r3, #3
   17896:	00db      	lsls	r3, r3, #3
   17898:	466a      	mov	r2, sp
   1789a:	1ad3      	subs	r3, r2, r3
   1789c:	469d      	mov	sp, r3
   1789e:	ab02      	add	r3, sp, #8
   178a0:	3303      	adds	r3, #3
   178a2:	089b      	lsrs	r3, r3, #2
   178a4:	009b      	lsls	r3, r3, #2
   178a6:	2292      	movs	r2, #146	; 0x92
   178a8:	0052      	lsls	r2, r2, #1
   178aa:	2110      	movs	r1, #16
   178ac:	468c      	mov	ip, r1
   178ae:	44bc      	add	ip, r7
   178b0:	4462      	add	r2, ip
   178b2:	6013      	str	r3, [r2, #0]
	memset( data, 0, N_MEAS*sizeof(struct bme680_field_data) );
   178b4:	2392      	movs	r3, #146	; 0x92
   178b6:	005b      	lsls	r3, r3, #1
   178b8:	2210      	movs	r2, #16
   178ba:	4694      	mov	ip, r2
   178bc:	44bc      	add	ip, r7
   178be:	4463      	add	r3, ip
   178c0:	6818      	ldr	r0, [r3, #0]
   178c2:	2396      	movs	r3, #150	; 0x96
   178c4:	005b      	lsls	r3, r3, #1
   178c6:	2210      	movs	r2, #16
   178c8:	4694      	mov	ip, r2
   178ca:	44bc      	add	ip, r7
   178cc:	4463      	add	r3, ip
   178ce:	681a      	ldr	r2, [r3, #0]
   178d0:	0013      	movs	r3, r2
   178d2:	009b      	lsls	r3, r3, #2
   178d4:	189b      	adds	r3, r3, r2
   178d6:	009b      	lsls	r3, r3, #2
   178d8:	001a      	movs	r2, r3
   178da:	2100      	movs	r1, #0
   178dc:	4b3f      	ldr	r3, [pc, #252]	; (179dc <vUiHandlerTask+0x1f0>)
   178de:	4798      	blx	r3
    gas_sensor->dev_id = BME680_I2C_ADDR_SECONDARY;
   178e0:	2398      	movs	r3, #152	; 0x98
   178e2:	005b      	lsls	r3, r3, #1
   178e4:	2210      	movs	r2, #16
   178e6:	4694      	mov	ip, r2
   178e8:	44bc      	add	ip, r7
   178ea:	4463      	add	r3, ip
   178ec:	681b      	ldr	r3, [r3, #0]
   178ee:	2277      	movs	r2, #119	; 0x77
   178f0:	705a      	strb	r2, [r3, #1]
    gas_sensor->intf = BME680_I2C_INTF;
   178f2:	2398      	movs	r3, #152	; 0x98
   178f4:	005b      	lsls	r3, r3, #1
   178f6:	2210      	movs	r2, #16
   178f8:	4694      	mov	ip, r2
   178fa:	44bc      	add	ip, r7
   178fc:	4463      	add	r3, ip
   178fe:	681b      	ldr	r3, [r3, #0]
   17900:	2201      	movs	r2, #1
   17902:	709a      	strb	r2, [r3, #2]
    gas_sensor->read = user_i2c_read;
   17904:	2398      	movs	r3, #152	; 0x98
   17906:	005b      	lsls	r3, r3, #1
   17908:	2210      	movs	r2, #16
   1790a:	4694      	mov	ip, r2
   1790c:	44bc      	add	ip, r7
   1790e:	4463      	add	r3, ip
   17910:	681b      	ldr	r3, [r3, #0]
   17912:	4a33      	ldr	r2, [pc, #204]	; (179e0 <vUiHandlerTask+0x1f4>)
   17914:	649a      	str	r2, [r3, #72]	; 0x48
    gas_sensor->write = user_i2c_write;
   17916:	2398      	movs	r3, #152	; 0x98
   17918:	005b      	lsls	r3, r3, #1
   1791a:	2210      	movs	r2, #16
   1791c:	4694      	mov	ip, r2
   1791e:	44bc      	add	ip, r7
   17920:	4463      	add	r3, ip
   17922:	681b      	ldr	r3, [r3, #0]
   17924:	4a2f      	ldr	r2, [pc, #188]	; (179e4 <vUiHandlerTask+0x1f8>)
   17926:	64da      	str	r2, [r3, #76]	; 0x4c
    gas_sensor->delay_ms = user_delay_ms;
   17928:	2398      	movs	r3, #152	; 0x98
   1792a:	005b      	lsls	r3, r3, #1
   1792c:	2210      	movs	r2, #16
   1792e:	4694      	mov	ip, r2
   17930:	44bc      	add	ip, r7
   17932:	4463      	add	r3, ip
   17934:	681b      	ldr	r3, [r3, #0]
   17936:	4a2c      	ldr	r2, [pc, #176]	; (179e8 <vUiHandlerTask+0x1fc>)
   17938:	651a      	str	r2, [r3, #80]	; 0x50
	/* amb_temp can be set to 25 prior to configuring the gas sensor 
     * or by performing a few temperature readings without operating the gas sensor.
     */
   gas_sensor->amb_temp = 25;
   1793a:	2398      	movs	r3, #152	; 0x98
   1793c:	005b      	lsls	r3, r3, #1
   1793e:	2210      	movs	r2, #16
   17940:	4694      	mov	ip, r2
   17942:	44bc      	add	ip, r7
   17944:	4463      	add	r3, ip
   17946:	681b      	ldr	r3, [r3, #0]
   17948:	2219      	movs	r2, #25
   1794a:	711a      	strb	r2, [r3, #4]
	gfx_mono_draw_string("ESE516",0,0, &sysfont);
	*/

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   1794c:	4b20      	ldr	r3, [pc, #128]	; (179d0 <vUiHandlerTask+0x1e4>)
   1794e:	781b      	ldrb	r3, [r3, #0]
   17950:	2b01      	cmp	r3, #1
   17952:	d007      	beq.n	17964 <vUiHandlerTask+0x178>
   17954:	2b02      	cmp	r3, #2
   17956:	d04d      	beq.n	179f4 <vUiHandlerTask+0x208>
   17958:	2b00      	cmp	r3, #0
   1795a:	d101      	bne.n	17960 <vUiHandlerTask+0x174>
   1795c:	f000 fc22 	bl	181a4 <vUiHandlerTask+0x9b8>
   17960:	f000 fd42 	bl	183e8 <vUiHandlerTask+0xbfc>
            case (UI_STATE_IGNORE_PRESSES): {
                // Ignore any presses until we receive a command from the control thread
                // to go to UI_STATE_SHOW_MOVES Will be changed by control with the
                // function void UiOrderShowMoves(struct GameDataPacket *packetIn) which
                // gets called when a valid MQTT Package comes in!
				for (int i = 0; i < 16; i++) {
   17964:	2300      	movs	r3, #0
   17966:	22ae      	movs	r2, #174	; 0xae
   17968:	0052      	lsls	r2, r2, #1
   1796a:	2110      	movs	r1, #16
   1796c:	468c      	mov	ip, r1
   1796e:	44bc      	add	ip, r7
   17970:	4462      	add	r2, ip
   17972:	6013      	str	r3, [r2, #0]
   17974:	e01b      	b.n	179ae <vUiHandlerTask+0x1c2>
					SeesawSetLed(i, 0, 0, 0);
   17976:	23ae      	movs	r3, #174	; 0xae
   17978:	005b      	lsls	r3, r3, #1
   1797a:	2210      	movs	r2, #16
   1797c:	4694      	mov	ip, r2
   1797e:	44bc      	add	ip, r7
   17980:	4463      	add	r3, ip
   17982:	681b      	ldr	r3, [r3, #0]
   17984:	b2d8      	uxtb	r0, r3
   17986:	2300      	movs	r3, #0
   17988:	2200      	movs	r2, #0
   1798a:	2100      	movs	r1, #0
   1798c:	4c17      	ldr	r4, [pc, #92]	; (179ec <vUiHandlerTask+0x200>)
   1798e:	47a0      	blx	r4
				for (int i = 0; i < 16; i++) {
   17990:	23ae      	movs	r3, #174	; 0xae
   17992:	005b      	lsls	r3, r3, #1
   17994:	2210      	movs	r2, #16
   17996:	4694      	mov	ip, r2
   17998:	44bc      	add	ip, r7
   1799a:	4463      	add	r3, ip
   1799c:	681b      	ldr	r3, [r3, #0]
   1799e:	3301      	adds	r3, #1
   179a0:	22ae      	movs	r2, #174	; 0xae
   179a2:	0052      	lsls	r2, r2, #1
   179a4:	2110      	movs	r1, #16
   179a6:	468c      	mov	ip, r1
   179a8:	44bc      	add	ip, r7
   179aa:	4462      	add	r2, ip
   179ac:	6013      	str	r3, [r2, #0]
   179ae:	23ae      	movs	r3, #174	; 0xae
   179b0:	005b      	lsls	r3, r3, #1
   179b2:	2210      	movs	r2, #16
   179b4:	4694      	mov	ip, r2
   179b6:	44bc      	add	ip, r7
   179b8:	4463      	add	r3, ip
   179ba:	681b      	ldr	r3, [r3, #0]
   179bc:	2b0f      	cmp	r3, #15
   179be:	ddda      	ble.n	17976 <vUiHandlerTask+0x18a>
				}
				SeesawOrderLedUpdate();
   179c0:	4b0b      	ldr	r3, [pc, #44]	; (179f0 <vUiHandlerTask+0x204>)
   179c2:	4798      	blx	r3
                break;
   179c4:	f000 fd15 	bl	183f2 <vUiHandlerTask+0xc06>
   179c8:	00039438 	.word	0x00039438
   179cc:	00020745 	.word	0x00020745
   179d0:	20004834 	.word	0x20004834
   179d4:	00014961 	.word	0x00014961
   179d8:	0003577d 	.word	0x0003577d
   179dc:	00037903 	.word	0x00037903
   179e0:	00015711 	.word	0x00015711
   179e4:	00015791 	.word	0x00015791
   179e8:	000156e1 	.word	0x000156e1
   179ec:	000175b5 	.word	0x000175b5
   179f0:	0001767d 	.word	0x0001767d

            case (UI_STATE_SHOW_MOVES): {
				
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
				bme680status = read_bme680_3times(gas_sensor, &data);
   179f4:	2392      	movs	r3, #146	; 0x92
   179f6:	005b      	lsls	r3, r3, #1
   179f8:	2210      	movs	r2, #16
   179fa:	4694      	mov	ip, r2
   179fc:	44bc      	add	ip, r7
   179fe:	4463      	add	r3, ip
   17a00:	681a      	ldr	r2, [r3, #0]
   17a02:	2338      	movs	r3, #56	; 0x38
   17a04:	33ff      	adds	r3, #255	; 0xff
   17a06:	2110      	movs	r1, #16
   17a08:	1879      	adds	r1, r7, r1
   17a0a:	18cc      	adds	r4, r1, r3
   17a0c:	2398      	movs	r3, #152	; 0x98
   17a0e:	005b      	lsls	r3, r3, #1
   17a10:	2110      	movs	r1, #16
   17a12:	468c      	mov	ip, r1
   17a14:	44bc      	add	ip, r7
   17a16:	4463      	add	r3, ip
   17a18:	681b      	ldr	r3, [r3, #0]
   17a1a:	0011      	movs	r1, r2
   17a1c:	0018      	movs	r0, r3
   17a1e:	4bd5      	ldr	r3, [pc, #852]	; (17d74 <vUiHandlerTask+0x588>)
   17a20:	4798      	blx	r3
   17a22:	0003      	movs	r3, r0
   17a24:	7023      	strb	r3, [r4, #0]
				int8_t number = 0;
   17a26:	235c      	movs	r3, #92	; 0x5c
   17a28:	33ff      	adds	r3, #255	; 0xff
   17a2a:	2210      	movs	r2, #16
   17a2c:	4694      	mov	ip, r2
   17a2e:	44bc      	add	ip, r7
   17a30:	4463      	add	r3, ip
   17a32:	2200      	movs	r2, #0
   17a34:	701a      	strb	r2, [r3, #0]
				int cx = 0;
   17a36:	2300      	movs	r3, #0
   17a38:	22aa      	movs	r2, #170	; 0xaa
   17a3a:	0052      	lsls	r2, r2, #1
   17a3c:	2110      	movs	r1, #16
   17a3e:	468c      	mov	ip, r1
   17a40:	44bc      	add	ip, r7
   17a42:	4462      	add	r2, ip
   17a44:	6013      	str	r3, [r2, #0]
				char pcWriteBuffer[256];
				int xWriteBufferLen = 256;
   17a46:	2380      	movs	r3, #128	; 0x80
   17a48:	005b      	lsls	r3, r3, #1
   17a4a:	2290      	movs	r2, #144	; 0x90
   17a4c:	0052      	lsls	r2, r2, #1
   17a4e:	2110      	movs	r1, #16
   17a50:	468c      	mov	ip, r1
   17a52:	44bc      	add	ip, r7
   17a54:	4462      	add	r2, ip
   17a56:	6013      	str	r3, [r2, #0]
 				if(bme680status > -1) {
   17a58:	2338      	movs	r3, #56	; 0x38
   17a5a:	33ff      	adds	r3, #255	; 0xff
   17a5c:	2210      	movs	r2, #16
   17a5e:	4694      	mov	ip, r2
   17a60:	44bc      	add	ip, r7
   17a62:	4463      	add	r3, ip
   17a64:	781b      	ldrb	r3, [r3, #0]
   17a66:	2b7f      	cmp	r3, #127	; 0x7f
   17a68:	d900      	bls.n	17a6c <vUiHandlerTask+0x280>
   17a6a:	e197      	b.n	17d9c <vUiHandlerTask+0x5b0>
 					do
 					{
						//int example_int = (int)example;
						//snprintf(bufferPrint, 64, "%d", example_int);
						//SerialConsoleWriteString(bufferPrint);
 						int temp = (int) data[number].temperature / 100.f;
   17a6c:	235c      	movs	r3, #92	; 0x5c
   17a6e:	33ff      	adds	r3, #255	; 0xff
   17a70:	2210      	movs	r2, #16
   17a72:	4694      	mov	ip, r2
   17a74:	44bc      	add	ip, r7
   17a76:	4463      	add	r3, ip
   17a78:	2200      	movs	r2, #0
   17a7a:	569a      	ldrsb	r2, [r3, r2]
   17a7c:	2392      	movs	r3, #146	; 0x92
   17a7e:	005b      	lsls	r3, r3, #1
   17a80:	2110      	movs	r1, #16
   17a82:	468c      	mov	ip, r1
   17a84:	44bc      	add	ip, r7
   17a86:	4463      	add	r3, ip
   17a88:	6819      	ldr	r1, [r3, #0]
   17a8a:	0013      	movs	r3, r2
   17a8c:	009b      	lsls	r3, r3, #2
   17a8e:	189b      	adds	r3, r3, r2
   17a90:	009b      	lsls	r3, r3, #2
   17a92:	18cb      	adds	r3, r1, r3
   17a94:	3304      	adds	r3, #4
   17a96:	2200      	movs	r2, #0
   17a98:	5e9a      	ldrsh	r2, [r3, r2]
   17a9a:	4bb7      	ldr	r3, [pc, #732]	; (17d78 <vUiHandlerTask+0x58c>)
   17a9c:	0010      	movs	r0, r2
   17a9e:	4798      	blx	r3
   17aa0:	1c02      	adds	r2, r0, #0
   17aa2:	4bb6      	ldr	r3, [pc, #728]	; (17d7c <vUiHandlerTask+0x590>)
   17aa4:	49b6      	ldr	r1, [pc, #728]	; (17d80 <vUiHandlerTask+0x594>)
   17aa6:	1c10      	adds	r0, r2, #0
   17aa8:	4798      	blx	r3
   17aaa:	1c03      	adds	r3, r0, #0
   17aac:	1c1a      	adds	r2, r3, #0
   17aae:	4bb5      	ldr	r3, [pc, #724]	; (17d84 <vUiHandlerTask+0x598>)
   17ab0:	1c10      	adds	r0, r2, #0
   17ab2:	4798      	blx	r3
   17ab4:	0003      	movs	r3, r0
   17ab6:	228e      	movs	r2, #142	; 0x8e
   17ab8:	0052      	lsls	r2, r2, #1
   17aba:	2110      	movs	r1, #16
   17abc:	468c      	mov	ip, r1
   17abe:	44bc      	add	ip, r7
   17ac0:	4462      	add	r2, ip
   17ac2:	6013      	str	r3, [r2, #0]
						int press = (int) data[number].pressure / 100.f;
   17ac4:	235c      	movs	r3, #92	; 0x5c
   17ac6:	33ff      	adds	r3, #255	; 0xff
   17ac8:	2210      	movs	r2, #16
   17aca:	4694      	mov	ip, r2
   17acc:	44bc      	add	ip, r7
   17ace:	4463      	add	r3, ip
   17ad0:	2200      	movs	r2, #0
   17ad2:	569a      	ldrsb	r2, [r3, r2]
   17ad4:	2392      	movs	r3, #146	; 0x92
   17ad6:	005b      	lsls	r3, r3, #1
   17ad8:	2110      	movs	r1, #16
   17ada:	468c      	mov	ip, r1
   17adc:	44bc      	add	ip, r7
   17ade:	4463      	add	r3, ip
   17ae0:	6819      	ldr	r1, [r3, #0]
   17ae2:	0013      	movs	r3, r2
   17ae4:	009b      	lsls	r3, r3, #2
   17ae6:	189b      	adds	r3, r3, r2
   17ae8:	009b      	lsls	r3, r3, #2
   17aea:	18cb      	adds	r3, r1, r3
   17aec:	3308      	adds	r3, #8
   17aee:	681b      	ldr	r3, [r3, #0]
   17af0:	001a      	movs	r2, r3
   17af2:	4ba1      	ldr	r3, [pc, #644]	; (17d78 <vUiHandlerTask+0x58c>)
   17af4:	0010      	movs	r0, r2
   17af6:	4798      	blx	r3
   17af8:	1c02      	adds	r2, r0, #0
   17afa:	4ba0      	ldr	r3, [pc, #640]	; (17d7c <vUiHandlerTask+0x590>)
   17afc:	49a0      	ldr	r1, [pc, #640]	; (17d80 <vUiHandlerTask+0x594>)
   17afe:	1c10      	adds	r0, r2, #0
   17b00:	4798      	blx	r3
   17b02:	1c03      	adds	r3, r0, #0
   17b04:	1c1a      	adds	r2, r3, #0
   17b06:	4b9f      	ldr	r3, [pc, #636]	; (17d84 <vUiHandlerTask+0x598>)
   17b08:	1c10      	adds	r0, r2, #0
   17b0a:	4798      	blx	r3
   17b0c:	0003      	movs	r3, r0
   17b0e:	228c      	movs	r2, #140	; 0x8c
   17b10:	0052      	lsls	r2, r2, #1
   17b12:	2110      	movs	r1, #16
   17b14:	468c      	mov	ip, r1
   17b16:	44bc      	add	ip, r7
   17b18:	4462      	add	r2, ip
   17b1a:	6013      	str	r3, [r2, #0]
						int humid = (int) data[number].humidity / 1000.f;
   17b1c:	235c      	movs	r3, #92	; 0x5c
   17b1e:	33ff      	adds	r3, #255	; 0xff
   17b20:	2210      	movs	r2, #16
   17b22:	4694      	mov	ip, r2
   17b24:	44bc      	add	ip, r7
   17b26:	4463      	add	r3, ip
   17b28:	2200      	movs	r2, #0
   17b2a:	569a      	ldrsb	r2, [r3, r2]
   17b2c:	2392      	movs	r3, #146	; 0x92
   17b2e:	005b      	lsls	r3, r3, #1
   17b30:	2110      	movs	r1, #16
   17b32:	468c      	mov	ip, r1
   17b34:	44bc      	add	ip, r7
   17b36:	4463      	add	r3, ip
   17b38:	6819      	ldr	r1, [r3, #0]
   17b3a:	0013      	movs	r3, r2
   17b3c:	009b      	lsls	r3, r3, #2
   17b3e:	189b      	adds	r3, r3, r2
   17b40:	009b      	lsls	r3, r3, #2
   17b42:	18cb      	adds	r3, r1, r3
   17b44:	330c      	adds	r3, #12
   17b46:	681b      	ldr	r3, [r3, #0]
   17b48:	001a      	movs	r2, r3
   17b4a:	4b8b      	ldr	r3, [pc, #556]	; (17d78 <vUiHandlerTask+0x58c>)
   17b4c:	0010      	movs	r0, r2
   17b4e:	4798      	blx	r3
   17b50:	1c02      	adds	r2, r0, #0
   17b52:	4b8a      	ldr	r3, [pc, #552]	; (17d7c <vUiHandlerTask+0x590>)
   17b54:	498c      	ldr	r1, [pc, #560]	; (17d88 <vUiHandlerTask+0x59c>)
   17b56:	1c10      	adds	r0, r2, #0
   17b58:	4798      	blx	r3
   17b5a:	1c03      	adds	r3, r0, #0
   17b5c:	1c1a      	adds	r2, r3, #0
   17b5e:	4b89      	ldr	r3, [pc, #548]	; (17d84 <vUiHandlerTask+0x598>)
   17b60:	1c10      	adds	r0, r2, #0
   17b62:	4798      	blx	r3
   17b64:	0003      	movs	r3, r0
   17b66:	228a      	movs	r2, #138	; 0x8a
   17b68:	0052      	lsls	r2, r2, #1
   17b6a:	2110      	movs	r1, #16
   17b6c:	468c      	mov	ip, r1
   17b6e:	44bc      	add	ip, r7
   17b70:	4462      	add	r2, ip
   17b72:	6013      	str	r3, [r2, #0]
					
						cx += snprintf(pcWriteBuffer+cx, xWriteBufferLen-cx, "T: %d degC, P: %d hPa, H %d %%rH ", temp , press , humid );
   17b74:	23aa      	movs	r3, #170	; 0xaa
   17b76:	005b      	lsls	r3, r3, #1
   17b78:	2210      	movs	r2, #16
   17b7a:	4694      	mov	ip, r2
   17b7c:	44bc      	add	ip, r7
   17b7e:	4463      	add	r3, ip
   17b80:	681b      	ldr	r3, [r3, #0]
   17b82:	220c      	movs	r2, #12
   17b84:	2110      	movs	r1, #16
   17b86:	468c      	mov	ip, r1
   17b88:	44bc      	add	ip, r7
   17b8a:	4462      	add	r2, ip
   17b8c:	18d0      	adds	r0, r2, r3
   17b8e:	2390      	movs	r3, #144	; 0x90
   17b90:	005b      	lsls	r3, r3, #1
   17b92:	2210      	movs	r2, #16
   17b94:	4694      	mov	ip, r2
   17b96:	44bc      	add	ip, r7
   17b98:	4463      	add	r3, ip
   17b9a:	681a      	ldr	r2, [r3, #0]
   17b9c:	23aa      	movs	r3, #170	; 0xaa
   17b9e:	005b      	lsls	r3, r3, #1
   17ba0:	2110      	movs	r1, #16
   17ba2:	468c      	mov	ip, r1
   17ba4:	44bc      	add	ip, r7
   17ba6:	4463      	add	r3, ip
   17ba8:	681b      	ldr	r3, [r3, #0]
   17baa:	1ad3      	subs	r3, r2, r3
   17bac:	001c      	movs	r4, r3
   17bae:	238e      	movs	r3, #142	; 0x8e
   17bb0:	005b      	lsls	r3, r3, #1
   17bb2:	2210      	movs	r2, #16
   17bb4:	4694      	mov	ip, r2
   17bb6:	44bc      	add	ip, r7
   17bb8:	4463      	add	r3, ip
   17bba:	6819      	ldr	r1, [r3, #0]
   17bbc:	4a73      	ldr	r2, [pc, #460]	; (17d8c <vUiHandlerTask+0x5a0>)
   17bbe:	238a      	movs	r3, #138	; 0x8a
   17bc0:	005b      	lsls	r3, r3, #1
   17bc2:	2510      	movs	r5, #16
   17bc4:	46ac      	mov	ip, r5
   17bc6:	44bc      	add	ip, r7
   17bc8:	4463      	add	r3, ip
   17bca:	681b      	ldr	r3, [r3, #0]
   17bcc:	9301      	str	r3, [sp, #4]
   17bce:	238c      	movs	r3, #140	; 0x8c
   17bd0:	005b      	lsls	r3, r3, #1
   17bd2:	2510      	movs	r5, #16
   17bd4:	46ac      	mov	ip, r5
   17bd6:	44bc      	add	ip, r7
   17bd8:	4463      	add	r3, ip
   17bda:	681b      	ldr	r3, [r3, #0]
   17bdc:	9300      	str	r3, [sp, #0]
   17bde:	000b      	movs	r3, r1
   17be0:	0021      	movs	r1, r4
   17be2:	4c6b      	ldr	r4, [pc, #428]	; (17d90 <vUiHandlerTask+0x5a4>)
   17be4:	47a0      	blx	r4
   17be6:	0002      	movs	r2, r0
   17be8:	23aa      	movs	r3, #170	; 0xaa
   17bea:	005b      	lsls	r3, r3, #1
   17bec:	2110      	movs	r1, #16
   17bee:	468c      	mov	ip, r1
   17bf0:	44bc      	add	ip, r7
   17bf2:	4463      	add	r3, ip
   17bf4:	681b      	ldr	r3, [r3, #0]
   17bf6:	189b      	adds	r3, r3, r2
   17bf8:	22aa      	movs	r2, #170	; 0xaa
   17bfa:	0052      	lsls	r2, r2, #1
   17bfc:	2110      	movs	r1, #16
   17bfe:	468c      	mov	ip, r1
   17c00:	44bc      	add	ip, r7
   17c02:	4462      	add	r2, ip
   17c04:	6013      	str	r3, [r2, #0]
 						/* Avoid using measurements from an unstable heating setup */
 						if(data[number].status & BME680_GASM_VALID_MSK) {
   17c06:	235c      	movs	r3, #92	; 0x5c
   17c08:	33ff      	adds	r3, #255	; 0xff
   17c0a:	2210      	movs	r2, #16
   17c0c:	4694      	mov	ip, r2
   17c0e:	44bc      	add	ip, r7
   17c10:	4463      	add	r3, ip
   17c12:	2200      	movs	r2, #0
   17c14:	569a      	ldrsb	r2, [r3, r2]
   17c16:	2392      	movs	r3, #146	; 0x92
   17c18:	005b      	lsls	r3, r3, #1
   17c1a:	2110      	movs	r1, #16
   17c1c:	468c      	mov	ip, r1
   17c1e:	44bc      	add	ip, r7
   17c20:	4463      	add	r3, ip
   17c22:	6819      	ldr	r1, [r3, #0]
   17c24:	0013      	movs	r3, r2
   17c26:	009b      	lsls	r3, r3, #2
   17c28:	189b      	adds	r3, r3, r2
   17c2a:	009b      	lsls	r3, r3, #2
   17c2c:	5c5b      	ldrb	r3, [r3, r1]
   17c2e:	001a      	movs	r2, r3
   17c30:	2320      	movs	r3, #32
   17c32:	4013      	ands	r3, r2
   17c34:	d046      	beq.n	17cc4 <vUiHandlerTask+0x4d8>
 							cx += snprintf(pcWriteBuffer+cx, xWriteBufferLen-cx, ", G: %d ohms ", data[number].gas_resistance);
   17c36:	23aa      	movs	r3, #170	; 0xaa
   17c38:	005b      	lsls	r3, r3, #1
   17c3a:	2210      	movs	r2, #16
   17c3c:	4694      	mov	ip, r2
   17c3e:	44bc      	add	ip, r7
   17c40:	4463      	add	r3, ip
   17c42:	681b      	ldr	r3, [r3, #0]
   17c44:	220c      	movs	r2, #12
   17c46:	2110      	movs	r1, #16
   17c48:	468c      	mov	ip, r1
   17c4a:	44bc      	add	ip, r7
   17c4c:	4462      	add	r2, ip
   17c4e:	18d0      	adds	r0, r2, r3
   17c50:	2390      	movs	r3, #144	; 0x90
   17c52:	005b      	lsls	r3, r3, #1
   17c54:	2210      	movs	r2, #16
   17c56:	4694      	mov	ip, r2
   17c58:	44bc      	add	ip, r7
   17c5a:	4463      	add	r3, ip
   17c5c:	681a      	ldr	r2, [r3, #0]
   17c5e:	23aa      	movs	r3, #170	; 0xaa
   17c60:	005b      	lsls	r3, r3, #1
   17c62:	2110      	movs	r1, #16
   17c64:	468c      	mov	ip, r1
   17c66:	44bc      	add	ip, r7
   17c68:	4463      	add	r3, ip
   17c6a:	681b      	ldr	r3, [r3, #0]
   17c6c:	1ad3      	subs	r3, r2, r3
   17c6e:	001c      	movs	r4, r3
   17c70:	235c      	movs	r3, #92	; 0x5c
   17c72:	33ff      	adds	r3, #255	; 0xff
   17c74:	2210      	movs	r2, #16
   17c76:	4694      	mov	ip, r2
   17c78:	44bc      	add	ip, r7
   17c7a:	4463      	add	r3, ip
   17c7c:	2200      	movs	r2, #0
   17c7e:	569a      	ldrsb	r2, [r3, r2]
   17c80:	2392      	movs	r3, #146	; 0x92
   17c82:	005b      	lsls	r3, r3, #1
   17c84:	2110      	movs	r1, #16
   17c86:	468c      	mov	ip, r1
   17c88:	44bc      	add	ip, r7
   17c8a:	4463      	add	r3, ip
   17c8c:	6819      	ldr	r1, [r3, #0]
   17c8e:	0013      	movs	r3, r2
   17c90:	009b      	lsls	r3, r3, #2
   17c92:	189b      	adds	r3, r3, r2
   17c94:	009b      	lsls	r3, r3, #2
   17c96:	18cb      	adds	r3, r1, r3
   17c98:	3310      	adds	r3, #16
   17c9a:	681b      	ldr	r3, [r3, #0]
   17c9c:	4a3d      	ldr	r2, [pc, #244]	; (17d94 <vUiHandlerTask+0x5a8>)
   17c9e:	0021      	movs	r1, r4
   17ca0:	4c3b      	ldr	r4, [pc, #236]	; (17d90 <vUiHandlerTask+0x5a4>)
   17ca2:	47a0      	blx	r4
   17ca4:	0002      	movs	r2, r0
   17ca6:	23aa      	movs	r3, #170	; 0xaa
   17ca8:	005b      	lsls	r3, r3, #1
   17caa:	2110      	movs	r1, #16
   17cac:	468c      	mov	ip, r1
   17cae:	44bc      	add	ip, r7
   17cb0:	4463      	add	r3, ip
   17cb2:	681b      	ldr	r3, [r3, #0]
   17cb4:	189b      	adds	r3, r3, r2
   17cb6:	22aa      	movs	r2, #170	; 0xaa
   17cb8:	0052      	lsls	r2, r2, #1
   17cba:	2110      	movs	r1, #16
   17cbc:	468c      	mov	ip, r1
   17cbe:	44bc      	add	ip, r7
   17cc0:	4462      	add	r2, ip
   17cc2:	6013      	str	r3, [r2, #0]
 						}
 						cx += snprintf(pcWriteBuffer+cx, xWriteBufferLen-cx, "\r\n");
   17cc4:	23aa      	movs	r3, #170	; 0xaa
   17cc6:	005b      	lsls	r3, r3, #1
   17cc8:	2210      	movs	r2, #16
   17cca:	4694      	mov	ip, r2
   17ccc:	44bc      	add	ip, r7
   17cce:	4463      	add	r3, ip
   17cd0:	681b      	ldr	r3, [r3, #0]
   17cd2:	220c      	movs	r2, #12
   17cd4:	2110      	movs	r1, #16
   17cd6:	468c      	mov	ip, r1
   17cd8:	44bc      	add	ip, r7
   17cda:	4462      	add	r2, ip
   17cdc:	18d0      	adds	r0, r2, r3
   17cde:	2390      	movs	r3, #144	; 0x90
   17ce0:	005b      	lsls	r3, r3, #1
   17ce2:	2210      	movs	r2, #16
   17ce4:	4694      	mov	ip, r2
   17ce6:	44bc      	add	ip, r7
   17ce8:	4463      	add	r3, ip
   17cea:	681a      	ldr	r2, [r3, #0]
   17cec:	23aa      	movs	r3, #170	; 0xaa
   17cee:	005b      	lsls	r3, r3, #1
   17cf0:	2110      	movs	r1, #16
   17cf2:	468c      	mov	ip, r1
   17cf4:	44bc      	add	ip, r7
   17cf6:	4463      	add	r3, ip
   17cf8:	681b      	ldr	r3, [r3, #0]
   17cfa:	1ad3      	subs	r3, r2, r3
   17cfc:	0019      	movs	r1, r3
   17cfe:	4b26      	ldr	r3, [pc, #152]	; (17d98 <vUiHandlerTask+0x5ac>)
   17d00:	001a      	movs	r2, r3
   17d02:	4b23      	ldr	r3, [pc, #140]	; (17d90 <vUiHandlerTask+0x5a4>)
   17d04:	4798      	blx	r3
   17d06:	0002      	movs	r2, r0
   17d08:	23aa      	movs	r3, #170	; 0xaa
   17d0a:	005b      	lsls	r3, r3, #1
   17d0c:	2110      	movs	r1, #16
   17d0e:	468c      	mov	ip, r1
   17d10:	44bc      	add	ip, r7
   17d12:	4463      	add	r3, ip
   17d14:	681b      	ldr	r3, [r3, #0]
   17d16:	189b      	adds	r3, r3, r2
   17d18:	22aa      	movs	r2, #170	; 0xaa
   17d1a:	0052      	lsls	r2, r2, #1
   17d1c:	2110      	movs	r1, #16
   17d1e:	468c      	mov	ip, r1
   17d20:	44bc      	add	ip, r7
   17d22:	4462      	add	r2, ip
   17d24:	6013      	str	r3, [r2, #0]
						number++;
   17d26:	235c      	movs	r3, #92	; 0x5c
   17d28:	33ff      	adds	r3, #255	; 0xff
   17d2a:	2210      	movs	r2, #16
   17d2c:	4694      	mov	ip, r2
   17d2e:	44bc      	add	ip, r7
   17d30:	4463      	add	r3, ip
   17d32:	781b      	ldrb	r3, [r3, #0]
   17d34:	b25b      	sxtb	r3, r3
   17d36:	b2db      	uxtb	r3, r3
   17d38:	3301      	adds	r3, #1
   17d3a:	b2da      	uxtb	r2, r3
   17d3c:	235c      	movs	r3, #92	; 0x5c
   17d3e:	33ff      	adds	r3, #255	; 0xff
   17d40:	2110      	movs	r1, #16
   17d42:	468c      	mov	ip, r1
   17d44:	44bc      	add	ip, r7
   17d46:	4463      	add	r3, ip
   17d48:	701a      	strb	r2, [r3, #0]
 					} while (number < N_MEAS-2); //
   17d4a:	235c      	movs	r3, #92	; 0x5c
   17d4c:	33ff      	adds	r3, #255	; 0xff
   17d4e:	2210      	movs	r2, #16
   17d50:	4694      	mov	ip, r2
   17d52:	44bc      	add	ip, r7
   17d54:	4463      	add	r3, ip
   17d56:	2200      	movs	r2, #0
   17d58:	569a      	ldrsb	r2, [r3, r2]
   17d5a:	2396      	movs	r3, #150	; 0x96
   17d5c:	005b      	lsls	r3, r3, #1
   17d5e:	2110      	movs	r1, #16
   17d60:	468c      	mov	ip, r1
   17d62:	44bc      	add	ip, r7
   17d64:	4463      	add	r3, ip
   17d66:	681b      	ldr	r3, [r3, #0]
   17d68:	3b02      	subs	r3, #2
   17d6a:	429a      	cmp	r2, r3
   17d6c:	da00      	bge.n	17d70 <vUiHandlerTask+0x584>
   17d6e:	e67d      	b.n	17a6c <vUiHandlerTask+0x280>
   17d70:	e024      	b.n	17dbc <vUiHandlerTask+0x5d0>
   17d72:	46c0      	nop			; (mov r8, r8)
   17d74:	000147ad 	.word	0x000147ad
   17d78:	00035d19 	.word	0x00035d19
   17d7c:	00035809 	.word	0x00035809
   17d80:	42c80000 	.word	0x42c80000
   17d84:	00035cd9 	.word	0x00035cd9
   17d88:	447a0000 	.word	0x447a0000
   17d8c:	0003944c 	.word	0x0003944c
   17d90:	00037b5d 	.word	0x00037b5d
   17d94:	00039470 	.word	0x00039470
   17d98:	00039480 	.word	0x00039480
 					} else {
					snprintf(pcWriteBuffer,xWriteBufferLen, "bme680 data error \r\n");
   17d9c:	2390      	movs	r3, #144	; 0x90
   17d9e:	005b      	lsls	r3, r3, #1
   17da0:	2210      	movs	r2, #16
   17da2:	4694      	mov	ip, r2
   17da4:	44bc      	add	ip, r7
   17da6:	4463      	add	r3, ip
   17da8:	6819      	ldr	r1, [r3, #0]
   17daa:	4ae5      	ldr	r2, [pc, #916]	; (18140 <vUiHandlerTask+0x954>)
   17dac:	230c      	movs	r3, #12
   17dae:	2010      	movs	r0, #16
   17db0:	4684      	mov	ip, r0
   17db2:	44bc      	add	ip, r7
   17db4:	4463      	add	r3, ip
   17db6:	0018      	movs	r0, r3
   17db8:	4be2      	ldr	r3, [pc, #904]	; (18144 <vUiHandlerTask+0x958>)
   17dba:	4798      	blx	r3
 				}
 				
 				int dataIdx = 0;
   17dbc:	2300      	movs	r3, #0
   17dbe:	2288      	movs	r2, #136	; 0x88
   17dc0:	0052      	lsls	r2, r2, #1
   17dc2:	2110      	movs	r1, #16
   17dc4:	468c      	mov	ip, r1
   17dc6:	44bc      	add	ip, r7
   17dc8:	4462      	add	r2, ip
   17dca:	6013      	str	r3, [r2, #0]
 				int inter_red = data[dataIdx].temperature /45 * 255;
   17dcc:	2392      	movs	r3, #146	; 0x92
   17dce:	005b      	lsls	r3, r3, #1
   17dd0:	2210      	movs	r2, #16
   17dd2:	4694      	mov	ip, r2
   17dd4:	44bc      	add	ip, r7
   17dd6:	4463      	add	r3, ip
   17dd8:	6819      	ldr	r1, [r3, #0]
   17dda:	2388      	movs	r3, #136	; 0x88
   17ddc:	005b      	lsls	r3, r3, #1
   17dde:	2210      	movs	r2, #16
   17de0:	4694      	mov	ip, r2
   17de2:	44bc      	add	ip, r7
   17de4:	4463      	add	r3, ip
   17de6:	681a      	ldr	r2, [r3, #0]
   17de8:	0013      	movs	r3, r2
   17dea:	009b      	lsls	r3, r3, #2
   17dec:	189b      	adds	r3, r3, r2
   17dee:	009b      	lsls	r3, r3, #2
   17df0:	18cb      	adds	r3, r1, r3
   17df2:	3304      	adds	r3, #4
   17df4:	2200      	movs	r2, #0
   17df6:	5e9a      	ldrsh	r2, [r3, r2]
   17df8:	4bd3      	ldr	r3, [pc, #844]	; (18148 <vUiHandlerTask+0x95c>)
   17dfa:	212d      	movs	r1, #45	; 0x2d
   17dfc:	0010      	movs	r0, r2
   17dfe:	4798      	blx	r3
   17e00:	0003      	movs	r3, r0
   17e02:	b21b      	sxth	r3, r3
   17e04:	001a      	movs	r2, r3
   17e06:	0013      	movs	r3, r2
   17e08:	021b      	lsls	r3, r3, #8
   17e0a:	1a9b      	subs	r3, r3, r2
   17e0c:	22a8      	movs	r2, #168	; 0xa8
   17e0e:	0052      	lsls	r2, r2, #1
   17e10:	2110      	movs	r1, #16
   17e12:	468c      	mov	ip, r1
   17e14:	44bc      	add	ip, r7
   17e16:	4462      	add	r2, ip
   17e18:	6013      	str	r3, [r2, #0]
				int inter_green = data[dataIdx].gas_resistance / 170000 * 255;
   17e1a:	2392      	movs	r3, #146	; 0x92
   17e1c:	005b      	lsls	r3, r3, #1
   17e1e:	2210      	movs	r2, #16
   17e20:	4694      	mov	ip, r2
   17e22:	44bc      	add	ip, r7
   17e24:	4463      	add	r3, ip
   17e26:	6819      	ldr	r1, [r3, #0]
   17e28:	2388      	movs	r3, #136	; 0x88
   17e2a:	005b      	lsls	r3, r3, #1
   17e2c:	2210      	movs	r2, #16
   17e2e:	4694      	mov	ip, r2
   17e30:	44bc      	add	ip, r7
   17e32:	4463      	add	r3, ip
   17e34:	681a      	ldr	r2, [r3, #0]
   17e36:	0013      	movs	r3, r2
   17e38:	009b      	lsls	r3, r3, #2
   17e3a:	189b      	adds	r3, r3, r2
   17e3c:	009b      	lsls	r3, r3, #2
   17e3e:	18cb      	adds	r3, r1, r3
   17e40:	3310      	adds	r3, #16
   17e42:	681a      	ldr	r2, [r3, #0]
   17e44:	4bc1      	ldr	r3, [pc, #772]	; (1814c <vUiHandlerTask+0x960>)
   17e46:	49c2      	ldr	r1, [pc, #776]	; (18150 <vUiHandlerTask+0x964>)
   17e48:	0010      	movs	r0, r2
   17e4a:	4798      	blx	r3
   17e4c:	0003      	movs	r3, r0
   17e4e:	001a      	movs	r2, r3
   17e50:	0013      	movs	r3, r2
   17e52:	021b      	lsls	r3, r3, #8
   17e54:	1a9b      	subs	r3, r3, r2
   17e56:	22a6      	movs	r2, #166	; 0xa6
   17e58:	0052      	lsls	r2, r2, #1
   17e5a:	2110      	movs	r1, #16
   17e5c:	468c      	mov	ip, r1
   17e5e:	44bc      	add	ip, r7
   17e60:	4462      	add	r2, ip
   17e62:	6013      	str	r3, [r2, #0]
				int inter_blue = data[dataIdx].humidity * 2.5;
   17e64:	2392      	movs	r3, #146	; 0x92
   17e66:	005b      	lsls	r3, r3, #1
   17e68:	2210      	movs	r2, #16
   17e6a:	4694      	mov	ip, r2
   17e6c:	44bc      	add	ip, r7
   17e6e:	4463      	add	r3, ip
   17e70:	6819      	ldr	r1, [r3, #0]
   17e72:	2388      	movs	r3, #136	; 0x88
   17e74:	005b      	lsls	r3, r3, #1
   17e76:	2210      	movs	r2, #16
   17e78:	4694      	mov	ip, r2
   17e7a:	44bc      	add	ip, r7
   17e7c:	4463      	add	r3, ip
   17e7e:	681a      	ldr	r2, [r3, #0]
   17e80:	0013      	movs	r3, r2
   17e82:	009b      	lsls	r3, r3, #2
   17e84:	189b      	adds	r3, r3, r2
   17e86:	009b      	lsls	r3, r3, #2
   17e88:	18cb      	adds	r3, r1, r3
   17e8a:	330c      	adds	r3, #12
   17e8c:	681a      	ldr	r2, [r3, #0]
   17e8e:	4bb1      	ldr	r3, [pc, #708]	; (18154 <vUiHandlerTask+0x968>)
   17e90:	0010      	movs	r0, r2
   17e92:	4798      	blx	r3
   17e94:	4cb0      	ldr	r4, [pc, #704]	; (18158 <vUiHandlerTask+0x96c>)
   17e96:	2200      	movs	r2, #0
   17e98:	4bb0      	ldr	r3, [pc, #704]	; (1815c <vUiHandlerTask+0x970>)
   17e9a:	47a0      	blx	r4
   17e9c:	0003      	movs	r3, r0
   17e9e:	000c      	movs	r4, r1
   17ea0:	0019      	movs	r1, r3
   17ea2:	0022      	movs	r2, r4
   17ea4:	4bae      	ldr	r3, [pc, #696]	; (18160 <vUiHandlerTask+0x974>)
   17ea6:	0008      	movs	r0, r1
   17ea8:	0011      	movs	r1, r2
   17eaa:	4798      	blx	r3
   17eac:	0003      	movs	r3, r0
   17eae:	22a4      	movs	r2, #164	; 0xa4
   17eb0:	0052      	lsls	r2, r2, #1
   17eb2:	2110      	movs	r1, #16
   17eb4:	468c      	mov	ip, r1
   17eb6:	44bc      	add	ip, r7
   17eb8:	4462      	add	r2, ip
   17eba:	6013      	str	r3, [r2, #0]
 				if (inter_red > 255)
   17ebc:	23a8      	movs	r3, #168	; 0xa8
   17ebe:	005b      	lsls	r3, r3, #1
   17ec0:	2210      	movs	r2, #16
   17ec2:	4694      	mov	ip, r2
   17ec4:	44bc      	add	ip, r7
   17ec6:	4463      	add	r3, ip
   17ec8:	681b      	ldr	r3, [r3, #0]
   17eca:	2bff      	cmp	r3, #255	; 0xff
   17ecc:	dd08      	ble.n	17ee0 <vUiHandlerTask+0x6f4>
 				{
 					inter_red = 255;
   17ece:	23ff      	movs	r3, #255	; 0xff
   17ed0:	22a8      	movs	r2, #168	; 0xa8
   17ed2:	0052      	lsls	r2, r2, #1
   17ed4:	2110      	movs	r1, #16
   17ed6:	468c      	mov	ip, r1
   17ed8:	44bc      	add	ip, r7
   17eda:	4462      	add	r2, ip
   17edc:	6013      	str	r3, [r2, #0]
   17ede:	e010      	b.n	17f02 <vUiHandlerTask+0x716>
				} else if (inter_red < 0) {
   17ee0:	23a8      	movs	r3, #168	; 0xa8
   17ee2:	005b      	lsls	r3, r3, #1
   17ee4:	2210      	movs	r2, #16
   17ee6:	4694      	mov	ip, r2
   17ee8:	44bc      	add	ip, r7
   17eea:	4463      	add	r3, ip
   17eec:	681b      	ldr	r3, [r3, #0]
   17eee:	2b00      	cmp	r3, #0
   17ef0:	da07      	bge.n	17f02 <vUiHandlerTask+0x716>
					inter_red = 0;
   17ef2:	2300      	movs	r3, #0
   17ef4:	22a8      	movs	r2, #168	; 0xa8
   17ef6:	0052      	lsls	r2, r2, #1
   17ef8:	2110      	movs	r1, #16
   17efa:	468c      	mov	ip, r1
   17efc:	44bc      	add	ip, r7
   17efe:	4462      	add	r2, ip
   17f00:	6013      	str	r3, [r2, #0]
 				}
				if (inter_green > 255)
   17f02:	23a6      	movs	r3, #166	; 0xa6
   17f04:	005b      	lsls	r3, r3, #1
   17f06:	2210      	movs	r2, #16
   17f08:	4694      	mov	ip, r2
   17f0a:	44bc      	add	ip, r7
   17f0c:	4463      	add	r3, ip
   17f0e:	681b      	ldr	r3, [r3, #0]
   17f10:	2bff      	cmp	r3, #255	; 0xff
   17f12:	dd08      	ble.n	17f26 <vUiHandlerTask+0x73a>
 				{
 					inter_green = 255;
   17f14:	23ff      	movs	r3, #255	; 0xff
   17f16:	22a6      	movs	r2, #166	; 0xa6
   17f18:	0052      	lsls	r2, r2, #1
   17f1a:	2110      	movs	r1, #16
   17f1c:	468c      	mov	ip, r1
   17f1e:	44bc      	add	ip, r7
   17f20:	4462      	add	r2, ip
   17f22:	6013      	str	r3, [r2, #0]
   17f24:	e010      	b.n	17f48 <vUiHandlerTask+0x75c>
 				} else if (inter_green < 0){
   17f26:	23a6      	movs	r3, #166	; 0xa6
   17f28:	005b      	lsls	r3, r3, #1
   17f2a:	2210      	movs	r2, #16
   17f2c:	4694      	mov	ip, r2
   17f2e:	44bc      	add	ip, r7
   17f30:	4463      	add	r3, ip
   17f32:	681b      	ldr	r3, [r3, #0]
   17f34:	2b00      	cmp	r3, #0
   17f36:	da07      	bge.n	17f48 <vUiHandlerTask+0x75c>
 					inter_green = 0;
   17f38:	2300      	movs	r3, #0
   17f3a:	22a6      	movs	r2, #166	; 0xa6
   17f3c:	0052      	lsls	r2, r2, #1
   17f3e:	2110      	movs	r1, #16
   17f40:	468c      	mov	ip, r1
   17f42:	44bc      	add	ip, r7
   17f44:	4462      	add	r2, ip
   17f46:	6013      	str	r3, [r2, #0]
				}
 				if (inter_blue > 255)
   17f48:	23a4      	movs	r3, #164	; 0xa4
   17f4a:	005b      	lsls	r3, r3, #1
   17f4c:	2210      	movs	r2, #16
   17f4e:	4694      	mov	ip, r2
   17f50:	44bc      	add	ip, r7
   17f52:	4463      	add	r3, ip
   17f54:	681b      	ldr	r3, [r3, #0]
   17f56:	2bff      	cmp	r3, #255	; 0xff
   17f58:	dd08      	ble.n	17f6c <vUiHandlerTask+0x780>
 				{
 					inter_blue = 255;
   17f5a:	23ff      	movs	r3, #255	; 0xff
   17f5c:	22a4      	movs	r2, #164	; 0xa4
   17f5e:	0052      	lsls	r2, r2, #1
   17f60:	2110      	movs	r1, #16
   17f62:	468c      	mov	ip, r1
   17f64:	44bc      	add	ip, r7
   17f66:	4462      	add	r2, ip
   17f68:	6013      	str	r3, [r2, #0]
   17f6a:	e010      	b.n	17f8e <vUiHandlerTask+0x7a2>
 				} else if (inter_blue < 0){
   17f6c:	23a4      	movs	r3, #164	; 0xa4
   17f6e:	005b      	lsls	r3, r3, #1
   17f70:	2210      	movs	r2, #16
   17f72:	4694      	mov	ip, r2
   17f74:	44bc      	add	ip, r7
   17f76:	4463      	add	r3, ip
   17f78:	681b      	ldr	r3, [r3, #0]
   17f7a:	2b00      	cmp	r3, #0
   17f7c:	da07      	bge.n	17f8e <vUiHandlerTask+0x7a2>
 					inter_blue = 0;
   17f7e:	2300      	movs	r3, #0
   17f80:	22a4      	movs	r2, #164	; 0xa4
   17f82:	0052      	lsls	r2, r2, #1
   17f84:	2110      	movs	r1, #16
   17f86:	468c      	mov	ip, r1
   17f88:	44bc      	add	ip, r7
   17f8a:	4462      	add	r2, ip
   17f8c:	6013      	str	r3, [r2, #0]
 				}
				// have read the r,g,b
				
 				red = inter_red;
   17f8e:	23a8      	movs	r3, #168	; 0xa8
   17f90:	005b      	lsls	r3, r3, #1
   17f92:	2210      	movs	r2, #16
   17f94:	4694      	mov	ip, r2
   17f96:	44bc      	add	ip, r7
   17f98:	4463      	add	r3, ip
   17f9a:	681b      	ldr	r3, [r3, #0]
   17f9c:	b2da      	uxtb	r2, r3
   17f9e:	4b71      	ldr	r3, [pc, #452]	; (18164 <vUiHandlerTask+0x978>)
   17fa0:	701a      	strb	r2, [r3, #0]
 				green = inter_green;
   17fa2:	23a6      	movs	r3, #166	; 0xa6
   17fa4:	005b      	lsls	r3, r3, #1
   17fa6:	2210      	movs	r2, #16
   17fa8:	4694      	mov	ip, r2
   17faa:	44bc      	add	ip, r7
   17fac:	4463      	add	r3, ip
   17fae:	681b      	ldr	r3, [r3, #0]
   17fb0:	b2da      	uxtb	r2, r3
   17fb2:	4b6d      	ldr	r3, [pc, #436]	; (18168 <vUiHandlerTask+0x97c>)
   17fb4:	701a      	strb	r2, [r3, #0]
				blue = inter_blue;
   17fb6:	23a4      	movs	r3, #164	; 0xa4
   17fb8:	005b      	lsls	r3, r3, #1
   17fba:	2210      	movs	r2, #16
   17fbc:	4694      	mov	ip, r2
   17fbe:	44bc      	add	ip, r7
   17fc0:	4463      	add	r3, ip
   17fc2:	681b      	ldr	r3, [r3, #0]
   17fc4:	b2da      	uxtb	r2, r3
   17fc6:	4b69      	ldr	r3, [pc, #420]	; (1816c <vUiHandlerTask+0x980>)
   17fc8:	701a      	strb	r2, [r3, #0]
				
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   17fca:	4b69      	ldr	r3, [pc, #420]	; (18170 <vUiHandlerTask+0x984>)
   17fcc:	2200      	movs	r2, #0
   17fce:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   17fd0:	4b68      	ldr	r3, [pc, #416]	; (18174 <vUiHandlerTask+0x988>)
   17fd2:	2201      	movs	r2, #1
   17fd4:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   17fd6:	4b68      	ldr	r3, [pc, #416]	; (18178 <vUiHandlerTask+0x98c>)
   17fd8:	2214      	movs	r2, #20
   17fda:	21ff      	movs	r1, #255	; 0xff
   17fdc:	0018      	movs	r0, r3
   17fde:	4b67      	ldr	r3, [pc, #412]	; (1817c <vUiHandlerTask+0x990>)
   17fe0:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   17fe2:	4b67      	ldr	r3, [pc, #412]	; (18180 <vUiHandlerTask+0x994>)
   17fe4:	2200      	movs	r2, #0
   17fe6:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   17fe8:	2348      	movs	r3, #72	; 0x48
   17fea:	33ff      	adds	r3, #255	; 0xff
   17fec:	2210      	movs	r2, #16
   17fee:	18ba      	adds	r2, r7, r2
   17ff0:	18d4      	adds	r4, r2, r3
   17ff2:	4b64      	ldr	r3, [pc, #400]	; (18184 <vUiHandlerTask+0x998>)
   17ff4:	4798      	blx	r3
   17ff6:	0003      	movs	r3, r0
   17ff8:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   17ffa:	2348      	movs	r3, #72	; 0x48
   17ffc:	33ff      	adds	r3, #255	; 0xff
   17ffe:	2210      	movs	r2, #16
   18000:	4694      	mov	ip, r2
   18002:	44bc      	add	ip, r7
   18004:	4463      	add	r3, ip
   18006:	781b      	ldrb	r3, [r3, #0]
   18008:	2b0f      	cmp	r3, #15
   1800a:	d907      	bls.n	1801c <vUiHandlerTask+0x830>
   1800c:	2348      	movs	r3, #72	; 0x48
   1800e:	33ff      	adds	r3, #255	; 0xff
   18010:	2210      	movs	r2, #16
   18012:	4694      	mov	ip, r2
   18014:	44bc      	add	ip, r7
   18016:	4463      	add	r3, ip
   18018:	2210      	movs	r2, #16
   1801a:	701a      	strb	r2, [r3, #0]
				
                if (presses != 0) {
   1801c:	2348      	movs	r3, #72	; 0x48
   1801e:	33ff      	adds	r3, #255	; 0xff
   18020:	2210      	movs	r2, #16
   18022:	4694      	mov	ip, r2
   18024:	44bc      	add	ip, r7
   18026:	4463      	add	r3, ip
   18028:	781b      	ldrb	r3, [r3, #0]
   1802a:	2b00      	cmp	r3, #0
   1802c:	d00b      	beq.n	18046 <vUiHandlerTask+0x85a>
                    SeesawReadKeypad(buttons, presses);  // Empty Seesaw buffer just in case
   1802e:	2348      	movs	r3, #72	; 0x48
   18030:	33ff      	adds	r3, #255	; 0xff
   18032:	2210      	movs	r2, #16
   18034:	4694      	mov	ip, r2
   18036:	44bc      	add	ip, r7
   18038:	4463      	add	r3, ip
   1803a:	781a      	ldrb	r2, [r3, #0]
   1803c:	4b52      	ldr	r3, [pc, #328]	; (18188 <vUiHandlerTask+0x99c>)
   1803e:	0011      	movs	r1, r2
   18040:	0018      	movs	r0, r3
   18042:	4b52      	ldr	r3, [pc, #328]	; (1818c <vUiHandlerTask+0x9a0>)
   18044:	4798      	blx	r3
														// it has latent presses on it!
				}
				memset(buttons, 0, BUTTON_PRESSES_MAX);
   18046:	4b50      	ldr	r3, [pc, #320]	; (18188 <vUiHandlerTask+0x99c>)
   18048:	2210      	movs	r2, #16
   1804a:	2100      	movs	r1, #0
   1804c:	0018      	movs	r0, r3
   1804e:	4b4b      	ldr	r3, [pc, #300]	; (1817c <vUiHandlerTask+0x990>)
   18050:	4798      	blx	r3
				for (int i = 0; i < GAME_SIZE; i++) {
   18052:	2300      	movs	r3, #0
   18054:	22a0      	movs	r2, #160	; 0xa0
   18056:	0052      	lsls	r2, r2, #1
   18058:	2110      	movs	r1, #16
   1805a:	468c      	mov	ip, r1
   1805c:	44bc      	add	ip, r7
   1805e:	4462      	add	r2, ip
   18060:	6013      	str	r3, [r2, #0]
   18062:	e05c      	b.n	1811e <vUiHandlerTask+0x932>
						uint8_t num = gamePacketIn.game[i];
   18064:	2310      	movs	r3, #16
   18066:	33ff      	adds	r3, #255	; 0xff
   18068:	2210      	movs	r2, #16
   1806a:	4694      	mov	ip, r2
   1806c:	44bc      	add	ip, r7
   1806e:	4463      	add	r3, ip
   18070:	4947      	ldr	r1, [pc, #284]	; (18190 <vUiHandlerTask+0x9a4>)
   18072:	22a0      	movs	r2, #160	; 0xa0
   18074:	0052      	lsls	r2, r2, #1
   18076:	2010      	movs	r0, #16
   18078:	4684      	mov	ip, r0
   1807a:	44bc      	add	ip, r7
   1807c:	4462      	add	r2, ip
   1807e:	6812      	ldr	r2, [r2, #0]
   18080:	188a      	adds	r2, r1, r2
   18082:	7812      	ldrb	r2, [r2, #0]
   18084:	701a      	strb	r2, [r3, #0]
						
						keysToPress = i + 1;
   18086:	23a0      	movs	r3, #160	; 0xa0
   18088:	005b      	lsls	r3, r3, #1
   1808a:	2210      	movs	r2, #16
   1808c:	4694      	mov	ip, r2
   1808e:	44bc      	add	ip, r7
   18090:	4463      	add	r3, ip
   18092:	681b      	ldr	r3, [r3, #0]
   18094:	b2db      	uxtb	r3, r3
   18096:	3301      	adds	r3, #1
   18098:	b2da      	uxtb	r2, r3
   1809a:	4b36      	ldr	r3, [pc, #216]	; (18174 <vUiHandlerTask+0x988>)
   1809c:	701a      	strb	r2, [r3, #0]

						if (num == 0xff) break;
   1809e:	2310      	movs	r3, #16
   180a0:	33ff      	adds	r3, #255	; 0xff
   180a2:	2210      	movs	r2, #16
   180a4:	4694      	mov	ip, r2
   180a6:	44bc      	add	ip, r7
   180a8:	4463      	add	r3, ip
   180aa:	781b      	ldrb	r3, [r3, #0]
   180ac:	2bff      	cmp	r3, #255	; 0xff
   180ae:	d040      	beq.n	18132 <vUiHandlerTask+0x946>
						
						//int num;
						SeesawSetLed(num, red, green, blue);
   180b0:	4b2c      	ldr	r3, [pc, #176]	; (18164 <vUiHandlerTask+0x978>)
   180b2:	781b      	ldrb	r3, [r3, #0]
   180b4:	b2d9      	uxtb	r1, r3
   180b6:	4b2c      	ldr	r3, [pc, #176]	; (18168 <vUiHandlerTask+0x97c>)
   180b8:	781b      	ldrb	r3, [r3, #0]
   180ba:	b2da      	uxtb	r2, r3
   180bc:	4b2b      	ldr	r3, [pc, #172]	; (1816c <vUiHandlerTask+0x980>)
   180be:	781b      	ldrb	r3, [r3, #0]
   180c0:	b2dc      	uxtb	r4, r3
   180c2:	2310      	movs	r3, #16
   180c4:	33ff      	adds	r3, #255	; 0xff
   180c6:	2010      	movs	r0, #16
   180c8:	4684      	mov	ip, r0
   180ca:	44bc      	add	ip, r7
   180cc:	4463      	add	r3, ip
   180ce:	7818      	ldrb	r0, [r3, #0]
   180d0:	0023      	movs	r3, r4
   180d2:	4c30      	ldr	r4, [pc, #192]	; (18194 <vUiHandlerTask+0x9a8>)
   180d4:	47a0      	blx	r4
						SeesawOrderLedUpdate();
   180d6:	4b30      	ldr	r3, [pc, #192]	; (18198 <vUiHandlerTask+0x9ac>)
   180d8:	4798      	blx	r3
						vTaskDelay(1000);
   180da:	23fa      	movs	r3, #250	; 0xfa
   180dc:	009b      	lsls	r3, r3, #2
   180de:	0018      	movs	r0, r3
   180e0:	4b2e      	ldr	r3, [pc, #184]	; (1819c <vUiHandlerTask+0x9b0>)
   180e2:	4798      	blx	r3
						SeesawSetLed(num, 0, 0, 0);
   180e4:	2310      	movs	r3, #16
   180e6:	33ff      	adds	r3, #255	; 0xff
   180e8:	2210      	movs	r2, #16
   180ea:	4694      	mov	ip, r2
   180ec:	44bc      	add	ip, r7
   180ee:	4463      	add	r3, ip
   180f0:	7818      	ldrb	r0, [r3, #0]
   180f2:	2300      	movs	r3, #0
   180f4:	2200      	movs	r2, #0
   180f6:	2100      	movs	r1, #0
   180f8:	4c26      	ldr	r4, [pc, #152]	; (18194 <vUiHandlerTask+0x9a8>)
   180fa:	47a0      	blx	r4
						SeesawOrderLedUpdate();
   180fc:	4b26      	ldr	r3, [pc, #152]	; (18198 <vUiHandlerTask+0x9ac>)
   180fe:	4798      	blx	r3
				for (int i = 0; i < GAME_SIZE; i++) {
   18100:	23a0      	movs	r3, #160	; 0xa0
   18102:	005b      	lsls	r3, r3, #1
   18104:	2210      	movs	r2, #16
   18106:	4694      	mov	ip, r2
   18108:	44bc      	add	ip, r7
   1810a:	4463      	add	r3, ip
   1810c:	681b      	ldr	r3, [r3, #0]
   1810e:	3301      	adds	r3, #1
   18110:	22a0      	movs	r2, #160	; 0xa0
   18112:	0052      	lsls	r2, r2, #1
   18114:	2110      	movs	r1, #16
   18116:	468c      	mov	ip, r1
   18118:	44bc      	add	ip, r7
   1811a:	4462      	add	r2, ip
   1811c:	6013      	str	r3, [r2, #0]
   1811e:	23a0      	movs	r3, #160	; 0xa0
   18120:	005b      	lsls	r3, r3, #1
   18122:	2210      	movs	r2, #16
   18124:	4694      	mov	ip, r2
   18126:	44bc      	add	ip, r7
   18128:	4463      	add	r3, ip
   1812a:	681b      	ldr	r3, [r3, #0]
   1812c:	2b13      	cmp	r3, #19
   1812e:	dd99      	ble.n	18064 <vUiHandlerTask+0x878>
   18130:	e000      	b.n	18134 <vUiHandlerTask+0x948>
						if (num == 0xff) break;
   18132:	46c0      	nop			; (mov r8, r8)
                SeesawOrderLedUpdate();
                vTaskDelay(1000);
				
				*/
				
                uiState = UI_STATE_HANDLE_BUTTONS;
   18134:	4b1a      	ldr	r3, [pc, #104]	; (181a0 <vUiHandlerTask+0x9b4>)
   18136:	2200      	movs	r2, #0
   18138:	701a      	strb	r2, [r3, #0]

                break;
   1813a:	46c0      	nop			; (mov r8, r8)
   1813c:	e159      	b.n	183f2 <vUiHandlerTask+0xc06>
   1813e:	46c0      	nop			; (mov r8, r8)
   18140:	00039484 	.word	0x00039484
   18144:	00037b5d 	.word	0x00037b5d
   18148:	0003555d 	.word	0x0003555d
   1814c:	00035449 	.word	0x00035449
   18150:	00029810 	.word	0x00029810
   18154:	000375d5 	.word	0x000375d5
   18158:	00036a41 	.word	0x00036a41
   1815c:	40040000 	.word	0x40040000
   18160:	0003756d 	.word	0x0003756d
   18164:	2000054c 	.word	0x2000054c
   18168:	20000020 	.word	0x20000020
   1816c:	20000021 	.word	0x20000021
   18170:	20000022 	.word	0x20000022
   18174:	2000054e 	.word	0x2000054e
   18178:	200047fc 	.word	0x200047fc
   1817c:	00037903 	.word	0x00037903
   18180:	2000054f 	.word	0x2000054f
   18184:	00017401 	.word	0x00017401
   18188:	20004824 	.word	0x20004824
   1818c:	00017469 	.word	0x00017469
   18190:	20004810 	.word	0x20004810
   18194:	000175b5 	.word	0x000175b5
   18198:	0001767d 	.word	0x0001767d
   1819c:	0001eaf1 	.word	0x0001eaf1
   181a0:	20004834 	.word	0x20004834
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   181a4:	2340      	movs	r3, #64	; 0x40
   181a6:	33ff      	adds	r3, #255	; 0xff
   181a8:	2210      	movs	r2, #16
   181aa:	18ba      	adds	r2, r7, r2
   181ac:	18d4      	adds	r4, r2, r3
   181ae:	4b93      	ldr	r3, [pc, #588]	; (183fc <vUiHandlerTask+0xc10>)
   181b0:	4798      	blx	r3
   181b2:	0003      	movs	r3, r0
   181b4:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   181b6:	4b92      	ldr	r3, [pc, #584]	; (18400 <vUiHandlerTask+0xc14>)
   181b8:	2210      	movs	r2, #16
   181ba:	2100      	movs	r1, #0
   181bc:	0018      	movs	r0, r3
   181be:	4b91      	ldr	r3, [pc, #580]	; (18404 <vUiHandlerTask+0xc18>)
   181c0:	4798      	blx	r3
				
				
				//memcpy(&gamePacketOut, &gamePacketIn, sizeof(gamePacketOut));
				

                if (numPresses >= BUTTON_PRESSES_MAX) {
   181c2:	2340      	movs	r3, #64	; 0x40
   181c4:	33ff      	adds	r3, #255	; 0xff
   181c6:	2210      	movs	r2, #16
   181c8:	4694      	mov	ip, r2
   181ca:	44bc      	add	ip, r7
   181cc:	4463      	add	r3, ip
   181ce:	781b      	ldrb	r3, [r3, #0]
   181d0:	2b0f      	cmp	r3, #15
   181d2:	d907      	bls.n	181e4 <vUiHandlerTask+0x9f8>
                    numPresses = BUTTON_PRESSES_MAX;
   181d4:	2340      	movs	r3, #64	; 0x40
   181d6:	33ff      	adds	r3, #255	; 0xff
   181d8:	2210      	movs	r2, #16
   181da:	4694      	mov	ip, r2
   181dc:	44bc      	add	ip, r7
   181de:	4463      	add	r3, ip
   181e0:	2210      	movs	r2, #16
   181e2:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   181e4:	2340      	movs	r3, #64	; 0x40
   181e6:	33ff      	adds	r3, #255	; 0xff
   181e8:	2210      	movs	r2, #16
   181ea:	4694      	mov	ip, r2
   181ec:	44bc      	add	ip, r7
   181ee:	4463      	add	r3, ip
   181f0:	781b      	ldrb	r3, [r3, #0]
   181f2:	2b00      	cmp	r3, #0
   181f4:	d100      	bne.n	181f8 <vUiHandlerTask+0xa0c>
   181f6:	e0e6      	b.n	183c6 <vUiHandlerTask+0xbda>
   181f8:	2340      	movs	r3, #64	; 0x40
   181fa:	33ff      	adds	r3, #255	; 0xff
   181fc:	2210      	movs	r2, #16
   181fe:	4694      	mov	ip, r2
   18200:	44bc      	add	ip, r7
   18202:	4463      	add	r3, ip
   18204:	781a      	ldrb	r2, [r3, #0]
   18206:	4b7e      	ldr	r3, [pc, #504]	; (18400 <vUiHandlerTask+0xc14>)
   18208:	0011      	movs	r1, r2
   1820a:	0018      	movs	r0, r3
   1820c:	4b7e      	ldr	r3, [pc, #504]	; (18408 <vUiHandlerTask+0xc1c>)
   1820e:	4798      	blx	r3
   18210:	1e03      	subs	r3, r0, #0
   18212:	d000      	beq.n	18216 <vUiHandlerTask+0xa2a>
   18214:	e0d7      	b.n	183c6 <vUiHandlerTask+0xbda>
                    // Process Buttons
					
                    for (int iter = 0; iter < numPresses; iter++) {
   18216:	2300      	movs	r3, #0
   18218:	229c      	movs	r2, #156	; 0x9c
   1821a:	0052      	lsls	r2, r2, #1
   1821c:	2110      	movs	r1, #16
   1821e:	468c      	mov	ip, r1
   18220:	44bc      	add	ip, r7
   18222:	4462      	add	r2, ip
   18224:	6013      	str	r3, [r2, #0]
   18226:	e0bb      	b.n	183a0 <vUiHandlerTask+0xbb4>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   18228:	4a75      	ldr	r2, [pc, #468]	; (18400 <vUiHandlerTask+0xc14>)
   1822a:	239c      	movs	r3, #156	; 0x9c
   1822c:	005b      	lsls	r3, r3, #1
   1822e:	2110      	movs	r1, #16
   18230:	468c      	mov	ip, r1
   18232:	44bc      	add	ip, r7
   18234:	4463      	add	r3, ip
   18236:	681b      	ldr	r3, [r3, #0]
   18238:	18d3      	adds	r3, r2, r3
   1823a:	781b      	ldrb	r3, [r3, #0]
   1823c:	089b      	lsrs	r3, r3, #2
   1823e:	b2db      	uxtb	r3, r3
   18240:	2b00      	cmp	r3, #0
   18242:	da00      	bge.n	18246 <vUiHandlerTask+0xa5a>
   18244:	3307      	adds	r3, #7
   18246:	10db      	asrs	r3, r3, #3
   18248:	b2db      	uxtb	r3, r3
   1824a:	009b      	lsls	r3, r3, #2
   1824c:	b2d9      	uxtb	r1, r3
   1824e:	4a6c      	ldr	r2, [pc, #432]	; (18400 <vUiHandlerTask+0xc14>)
   18250:	239c      	movs	r3, #156	; 0x9c
   18252:	005b      	lsls	r3, r3, #1
   18254:	2010      	movs	r0, #16
   18256:	4684      	mov	ip, r0
   18258:	44bc      	add	ip, r7
   1825a:	4463      	add	r3, ip
   1825c:	681b      	ldr	r3, [r3, #0]
   1825e:	18d3      	adds	r3, r2, r3
   18260:	781b      	ldrb	r3, [r3, #0]
   18262:	089b      	lsrs	r3, r3, #2
   18264:	b2db      	uxtb	r3, r3
   18266:	2207      	movs	r2, #7
   18268:	4013      	ands	r3, r2
   1826a:	b2da      	uxtb	r2, r3
   1826c:	2387      	movs	r3, #135	; 0x87
   1826e:	005b      	lsls	r3, r3, #1
   18270:	2010      	movs	r0, #16
   18272:	4684      	mov	ip, r0
   18274:	44bc      	add	ip, r7
   18276:	4463      	add	r3, ip
   18278:	188a      	adds	r2, r1, r2
   1827a:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   1827c:	4a60      	ldr	r2, [pc, #384]	; (18400 <vUiHandlerTask+0xc14>)
   1827e:	239c      	movs	r3, #156	; 0x9c
   18280:	005b      	lsls	r3, r3, #1
   18282:	2110      	movs	r1, #16
   18284:	468c      	mov	ip, r1
   18286:	44bc      	add	ip, r7
   18288:	4463      	add	r3, ip
   1828a:	681b      	ldr	r3, [r3, #0]
   1828c:	18d3      	adds	r3, r2, r3
   1828e:	781a      	ldrb	r2, [r3, #0]
   18290:	230e      	movs	r3, #14
   18292:	33ff      	adds	r3, #255	; 0xff
   18294:	2110      	movs	r1, #16
   18296:	468c      	mov	ip, r1
   18298:	44bc      	add	ip, r7
   1829a:	4463      	add	r3, ip
   1829c:	2103      	movs	r1, #3
   1829e:	400a      	ands	r2, r1
   182a0:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   182a2:	230e      	movs	r3, #14
   182a4:	33ff      	adds	r3, #255	; 0xff
   182a6:	2210      	movs	r2, #16
   182a8:	4694      	mov	ip, r2
   182aa:	44bc      	add	ip, r7
   182ac:	4463      	add	r3, ip
   182ae:	781b      	ldrb	r3, [r3, #0]
   182b0:	2b03      	cmp	r3, #3
   182b2:	d113      	bne.n	182dc <vUiHandlerTask+0xaf0>
                            SeesawSetLed(keynum, red, green, blue);
   182b4:	4b55      	ldr	r3, [pc, #340]	; (1840c <vUiHandlerTask+0xc20>)
   182b6:	781b      	ldrb	r3, [r3, #0]
   182b8:	b2d9      	uxtb	r1, r3
   182ba:	4b55      	ldr	r3, [pc, #340]	; (18410 <vUiHandlerTask+0xc24>)
   182bc:	781b      	ldrb	r3, [r3, #0]
   182be:	b2da      	uxtb	r2, r3
   182c0:	4b54      	ldr	r3, [pc, #336]	; (18414 <vUiHandlerTask+0xc28>)
   182c2:	781b      	ldrb	r3, [r3, #0]
   182c4:	b2dc      	uxtb	r4, r3
   182c6:	2387      	movs	r3, #135	; 0x87
   182c8:	005b      	lsls	r3, r3, #1
   182ca:	2010      	movs	r0, #16
   182cc:	4684      	mov	ip, r0
   182ce:	44bc      	add	ip, r7
   182d0:	4463      	add	r3, ip
   182d2:	7818      	ldrb	r0, [r3, #0]
   182d4:	0023      	movs	r3, r4
   182d6:	4c50      	ldr	r4, [pc, #320]	; (18418 <vUiHandlerTask+0xc2c>)
   182d8:	47a0      	blx	r4
   182da:	e052      	b.n	18382 <vUiHandlerTask+0xb96>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   182dc:	2387      	movs	r3, #135	; 0x87
   182de:	005b      	lsls	r3, r3, #1
   182e0:	2210      	movs	r2, #16
   182e2:	4694      	mov	ip, r2
   182e4:	44bc      	add	ip, r7
   182e6:	4463      	add	r3, ip
   182e8:	7818      	ldrb	r0, [r3, #0]
   182ea:	2300      	movs	r3, #0
   182ec:	2200      	movs	r2, #0
   182ee:	2100      	movs	r1, #0
   182f0:	4c49      	ldr	r4, [pc, #292]	; (18418 <vUiHandlerTask+0xc2c>)
   182f2:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
							LogMessage(LOG_DEBUG_LVL, "Button Pressed: %d\r\n", keynum);
   182f4:	2387      	movs	r3, #135	; 0x87
   182f6:	005b      	lsls	r3, r3, #1
   182f8:	2210      	movs	r2, #16
   182fa:	4694      	mov	ip, r2
   182fc:	44bc      	add	ip, r7
   182fe:	4463      	add	r3, ip
   18300:	781a      	ldrb	r2, [r3, #0]
   18302:	4b46      	ldr	r3, [pc, #280]	; (1841c <vUiHandlerTask+0xc30>)
   18304:	0019      	movs	r1, r3
   18306:	2001      	movs	r0, #1
   18308:	4b45      	ldr	r3, [pc, #276]	; (18420 <vUiHandlerTask+0xc34>)
   1830a:	4798      	blx	r3
							if (pressedKeys != (keysToPress - 1) && keynum != gamePacketIn.game[pressedKeys]) {
   1830c:	4b45      	ldr	r3, [pc, #276]	; (18424 <vUiHandlerTask+0xc38>)
   1830e:	781b      	ldrb	r3, [r3, #0]
   18310:	001a      	movs	r2, r3
   18312:	4b45      	ldr	r3, [pc, #276]	; (18428 <vUiHandlerTask+0xc3c>)
   18314:	781b      	ldrb	r3, [r3, #0]
   18316:	3b01      	subs	r3, #1
   18318:	429a      	cmp	r2, r3
   1831a:	d020      	beq.n	1835e <vUiHandlerTask+0xb72>
   1831c:	4b41      	ldr	r3, [pc, #260]	; (18424 <vUiHandlerTask+0xc38>)
   1831e:	781b      	ldrb	r3, [r3, #0]
   18320:	001a      	movs	r2, r3
   18322:	4b42      	ldr	r3, [pc, #264]	; (1842c <vUiHandlerTask+0xc40>)
   18324:	5c9b      	ldrb	r3, [r3, r2]
   18326:	2287      	movs	r2, #135	; 0x87
   18328:	0052      	lsls	r2, r2, #1
   1832a:	2110      	movs	r1, #16
   1832c:	468c      	mov	ip, r1
   1832e:	44bc      	add	ip, r7
   18330:	4462      	add	r2, ip
   18332:	7812      	ldrb	r2, [r2, #0]
   18334:	429a      	cmp	r2, r3
   18336:	d012      	beq.n	1835e <vUiHandlerTask+0xb72>
								LogMessage(LOG_DEBUG_LVL, "Correct Button: %d\r\n", gamePacketIn.game[pressedKeys]);
   18338:	4b3a      	ldr	r3, [pc, #232]	; (18424 <vUiHandlerTask+0xc38>)
   1833a:	781b      	ldrb	r3, [r3, #0]
   1833c:	001a      	movs	r2, r3
   1833e:	4b3b      	ldr	r3, [pc, #236]	; (1842c <vUiHandlerTask+0xc40>)
   18340:	5c9b      	ldrb	r3, [r3, r2]
   18342:	001a      	movs	r2, r3
   18344:	4b3a      	ldr	r3, [pc, #232]	; (18430 <vUiHandlerTask+0xc44>)
   18346:	0019      	movs	r1, r3
   18348:	2001      	movs	r0, #1
   1834a:	4b35      	ldr	r3, [pc, #212]	; (18420 <vUiHandlerTask+0xc34>)
   1834c:	4798      	blx	r3
								gameOver = true;
   1834e:	4b39      	ldr	r3, [pc, #228]	; (18434 <vUiHandlerTask+0xc48>)
   18350:	2201      	movs	r2, #1
   18352:	701a      	strb	r2, [r3, #0]
								pressedKeys = keysToPress;
   18354:	4b34      	ldr	r3, [pc, #208]	; (18428 <vUiHandlerTask+0xc3c>)
   18356:	781a      	ldrb	r2, [r3, #0]
   18358:	4b32      	ldr	r3, [pc, #200]	; (18424 <vUiHandlerTask+0xc38>)
   1835a:	701a      	strb	r2, [r3, #0]
								break;
   1835c:	e031      	b.n	183c2 <vUiHandlerTask+0xbd6>
							}
								
                            gamePacketOut.game[pressedKeys] = keynum;
   1835e:	4b31      	ldr	r3, [pc, #196]	; (18424 <vUiHandlerTask+0xc38>)
   18360:	781b      	ldrb	r3, [r3, #0]
   18362:	0019      	movs	r1, r3
   18364:	4b34      	ldr	r3, [pc, #208]	; (18438 <vUiHandlerTask+0xc4c>)
   18366:	2287      	movs	r2, #135	; 0x87
   18368:	0052      	lsls	r2, r2, #1
   1836a:	2010      	movs	r0, #16
   1836c:	4684      	mov	ip, r0
   1836e:	44bc      	add	ip, r7
   18370:	4462      	add	r2, ip
   18372:	7812      	ldrb	r2, [r2, #0]
   18374:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   18376:	4b2b      	ldr	r3, [pc, #172]	; (18424 <vUiHandlerTask+0xc38>)
   18378:	781b      	ldrb	r3, [r3, #0]
   1837a:	3301      	adds	r3, #1
   1837c:	b2da      	uxtb	r2, r3
   1837e:	4b29      	ldr	r3, [pc, #164]	; (18424 <vUiHandlerTask+0xc38>)
   18380:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   18382:	239c      	movs	r3, #156	; 0x9c
   18384:	005b      	lsls	r3, r3, #1
   18386:	2210      	movs	r2, #16
   18388:	4694      	mov	ip, r2
   1838a:	44bc      	add	ip, r7
   1838c:	4463      	add	r3, ip
   1838e:	681b      	ldr	r3, [r3, #0]
   18390:	3301      	adds	r3, #1
   18392:	229c      	movs	r2, #156	; 0x9c
   18394:	0052      	lsls	r2, r2, #1
   18396:	2110      	movs	r1, #16
   18398:	468c      	mov	ip, r1
   1839a:	44bc      	add	ip, r7
   1839c:	4462      	add	r2, ip
   1839e:	6013      	str	r3, [r2, #0]
   183a0:	2340      	movs	r3, #64	; 0x40
   183a2:	33ff      	adds	r3, #255	; 0xff
   183a4:	2210      	movs	r2, #16
   183a6:	4694      	mov	ip, r2
   183a8:	44bc      	add	ip, r7
   183aa:	4463      	add	r3, ip
   183ac:	781a      	ldrb	r2, [r3, #0]
   183ae:	239c      	movs	r3, #156	; 0x9c
   183b0:	005b      	lsls	r3, r3, #1
   183b2:	2110      	movs	r1, #16
   183b4:	468c      	mov	ip, r1
   183b6:	44bc      	add	ip, r7
   183b8:	4463      	add	r3, ip
   183ba:	681b      	ldr	r3, [r3, #0]
   183bc:	429a      	cmp	r2, r3
   183be:	dd00      	ble.n	183c2 <vUiHandlerTask+0xbd6>
   183c0:	e732      	b.n	18228 <vUiHandlerTask+0xa3c>
							
                        }
                    }

                    SeesawOrderLedUpdate();
   183c2:	4b1e      	ldr	r3, [pc, #120]	; (1843c <vUiHandlerTask+0xc50>)
   183c4:	4798      	blx	r3
					
					
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   183c6:	4b17      	ldr	r3, [pc, #92]	; (18424 <vUiHandlerTask+0xc38>)
   183c8:	781a      	ldrb	r2, [r3, #0]
   183ca:	4b17      	ldr	r3, [pc, #92]	; (18428 <vUiHandlerTask+0xc3c>)
   183cc:	781b      	ldrb	r3, [r3, #0]
   183ce:	429a      	cmp	r2, r3
   183d0:	d203      	bcs.n	183da <vUiHandlerTask+0xbee>
   183d2:	4b14      	ldr	r3, [pc, #80]	; (18424 <vUiHandlerTask+0xc38>)
   183d4:	781b      	ldrb	r3, [r3, #0]
   183d6:	2b13      	cmp	r3, #19
   183d8:	d90a      	bls.n	183f0 <vUiHandlerTask+0xc04>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   183da:	4b19      	ldr	r3, [pc, #100]	; (18440 <vUiHandlerTask+0xc54>)
   183dc:	2201      	movs	r2, #1
   183de:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   183e0:	4b18      	ldr	r3, [pc, #96]	; (18444 <vUiHandlerTask+0xc58>)
   183e2:	2201      	movs	r2, #1
   183e4:	701a      	strb	r2, [r3, #0]
                }

                break;
   183e6:	e003      	b.n	183f0 <vUiHandlerTask+0xc04>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   183e8:	4b16      	ldr	r3, [pc, #88]	; (18444 <vUiHandlerTask+0xc58>)
   183ea:	2200      	movs	r2, #0
   183ec:	701a      	strb	r2, [r3, #0]
                break;
   183ee:	e000      	b.n	183f2 <vUiHandlerTask+0xc06>
                break;
   183f0:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   183f2:	2032      	movs	r0, #50	; 0x32
   183f4:	4b14      	ldr	r3, [pc, #80]	; (18448 <vUiHandlerTask+0xc5c>)
   183f6:	4798      	blx	r3
        switch (uiState) {
   183f8:	f7ff faa8 	bl	1794c <vUiHandlerTask+0x160>
   183fc:	00017401 	.word	0x00017401
   18400:	20004824 	.word	0x20004824
   18404:	00037903 	.word	0x00037903
   18408:	00017469 	.word	0x00017469
   1840c:	2000054c 	.word	0x2000054c
   18410:	20000020 	.word	0x20000020
   18414:	20000021 	.word	0x20000021
   18418:	000175b5 	.word	0x000175b5
   1841c:	0003949c 	.word	0x0003949c
   18420:	00020831 	.word	0x00020831
   18424:	20000022 	.word	0x20000022
   18428:	2000054e 	.word	0x2000054e
   1842c:	20004810 	.word	0x20004810
   18430:	000394b4 	.word	0x000394b4
   18434:	2000054d 	.word	0x2000054d
   18438:	200047fc 	.word	0x200047fc
   1843c:	0001767d 	.word	0x0001767d
   18440:	2000054f 	.word	0x2000054f
   18444:	20004834 	.word	0x20004834
   18448:	0001eaf1 	.word	0x0001eaf1

0001844c <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   1844c:	b580      	push	{r7, lr}
   1844e:	b082      	sub	sp, #8
   18450:	af00      	add	r7, sp, #0
   18452:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   18454:	4a08      	ldr	r2, [pc, #32]	; (18478 <UiOrderShowMoves+0x2c>)
   18456:	687b      	ldr	r3, [r7, #4]
   18458:	0010      	movs	r0, r2
   1845a:	0019      	movs	r1, r3
   1845c:	2314      	movs	r3, #20
   1845e:	001a      	movs	r2, r3
   18460:	4b06      	ldr	r3, [pc, #24]	; (1847c <UiOrderShowMoves+0x30>)
   18462:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   18464:	4b06      	ldr	r3, [pc, #24]	; (18480 <UiOrderShowMoves+0x34>)
   18466:	2202      	movs	r2, #2
   18468:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   1846a:	4b06      	ldr	r3, [pc, #24]	; (18484 <UiOrderShowMoves+0x38>)
   1846c:	2200      	movs	r2, #0
   1846e:	701a      	strb	r2, [r3, #0]
}
   18470:	46c0      	nop			; (mov r8, r8)
   18472:	46bd      	mov	sp, r7
   18474:	b002      	add	sp, #8
   18476:	bd80      	pop	{r7, pc}
   18478:	20004810 	.word	0x20004810
   1847c:	000378cd 	.word	0x000378cd
   18480:	20004834 	.word	0x20004834
   18484:	2000054f 	.word	0x2000054f

00018488 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   18488:	b580      	push	{r7, lr}
   1848a:	af00      	add	r7, sp, #0
    return playIsDone;
   1848c:	4b02      	ldr	r3, [pc, #8]	; (18498 <UiPlayIsDone+0x10>)
   1848e:	781b      	ldrb	r3, [r3, #0]
}
   18490:	0018      	movs	r0, r3
   18492:	46bd      	mov	sp, r7
   18494:	bd80      	pop	{r7, pc}
   18496:	46c0      	nop			; (mov r8, r8)
   18498:	2000054f 	.word	0x2000054f

0001849c <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   1849c:	b580      	push	{r7, lr}
   1849e:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   184a0:	4b01      	ldr	r3, [pc, #4]	; (184a8 <UiGetGamePacketOut+0xc>)
}
   184a2:	0018      	movs	r0, r3
   184a4:	46bd      	mov	sp, r7
   184a6:	bd80      	pop	{r7, pc}
   184a8:	200047fc 	.word	0x200047fc

000184ac <isGameOver>:

bool isGameOver(void)
{
   184ac:	b580      	push	{r7, lr}
   184ae:	af00      	add	r7, sp, #0
	return gameOver;
   184b0:	4b02      	ldr	r3, [pc, #8]	; (184bc <isGameOver+0x10>)
   184b2:	781b      	ldrb	r3, [r3, #0]
   184b4:	b2db      	uxtb	r3, r3
}
   184b6:	0018      	movs	r0, r3
   184b8:	46bd      	mov	sp, r7
   184ba:	bd80      	pop	{r7, pc}
   184bc:	2000054d 	.word	0x2000054d

000184c0 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   184c0:	b590      	push	{r4, r7, lr}
   184c2:	b083      	sub	sp, #12
   184c4:	af00      	add	r7, sp, #0
   184c6:	0004      	movs	r4, r0
   184c8:	0008      	movs	r0, r1
   184ca:	0011      	movs	r1, r2
   184cc:	1dfb      	adds	r3, r7, #7
   184ce:	1c22      	adds	r2, r4, #0
   184d0:	701a      	strb	r2, [r3, #0]
   184d2:	1dbb      	adds	r3, r7, #6
   184d4:	1c02      	adds	r2, r0, #0
   184d6:	701a      	strb	r2, [r3, #0]
   184d8:	1d7b      	adds	r3, r7, #5
   184da:	1c0a      	adds	r2, r1, #0
   184dc:	701a      	strb	r2, [r3, #0]
    red = r;
   184de:	4b08      	ldr	r3, [pc, #32]	; (18500 <UIChangeColors+0x40>)
   184e0:	1dfa      	adds	r2, r7, #7
   184e2:	7812      	ldrb	r2, [r2, #0]
   184e4:	701a      	strb	r2, [r3, #0]
    green = g;
   184e6:	4b07      	ldr	r3, [pc, #28]	; (18504 <UIChangeColors+0x44>)
   184e8:	1dba      	adds	r2, r7, #6
   184ea:	7812      	ldrb	r2, [r2, #0]
   184ec:	701a      	strb	r2, [r3, #0]
    blue = b;
   184ee:	4b06      	ldr	r3, [pc, #24]	; (18508 <UIChangeColors+0x48>)
   184f0:	1d7a      	adds	r2, r7, #5
   184f2:	7812      	ldrb	r2, [r2, #0]
   184f4:	701a      	strb	r2, [r3, #0]
}
   184f6:	46c0      	nop			; (mov r8, r8)
   184f8:	46bd      	mov	sp, r7
   184fa:	b003      	add	sp, #12
   184fc:	bd90      	pop	{r4, r7, pc}
   184fe:	46c0      	nop			; (mov r8, r8)
   18500:	2000054c 	.word	0x2000054c
   18504:	20000020 	.word	0x20000020
   18508:	20000021 	.word	0x20000021

0001850c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1850c:	b580      	push	{r7, lr}
   1850e:	b084      	sub	sp, #16
   18510:	af00      	add	r7, sp, #0
   18512:	0002      	movs	r2, r0
   18514:	1dfb      	adds	r3, r7, #7
   18516:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   18518:	230f      	movs	r3, #15
   1851a:	18fb      	adds	r3, r7, r3
   1851c:	1dfa      	adds	r2, r7, #7
   1851e:	7812      	ldrb	r2, [r2, #0]
   18520:	09d2      	lsrs	r2, r2, #7
   18522:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   18524:	230e      	movs	r3, #14
   18526:	18fb      	adds	r3, r7, r3
   18528:	1dfa      	adds	r2, r7, #7
   1852a:	7812      	ldrb	r2, [r2, #0]
   1852c:	0952      	lsrs	r2, r2, #5
   1852e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   18530:	4b0d      	ldr	r3, [pc, #52]	; (18568 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   18532:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   18534:	230f      	movs	r3, #15
   18536:	18fb      	adds	r3, r7, r3
   18538:	781b      	ldrb	r3, [r3, #0]
   1853a:	2b00      	cmp	r3, #0
   1853c:	d10f      	bne.n	1855e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1853e:	230f      	movs	r3, #15
   18540:	18fb      	adds	r3, r7, r3
   18542:	781b      	ldrb	r3, [r3, #0]
   18544:	009b      	lsls	r3, r3, #2
   18546:	2210      	movs	r2, #16
   18548:	4694      	mov	ip, r2
   1854a:	44bc      	add	ip, r7
   1854c:	4463      	add	r3, ip
   1854e:	3b08      	subs	r3, #8
   18550:	681a      	ldr	r2, [r3, #0]
   18552:	230e      	movs	r3, #14
   18554:	18fb      	adds	r3, r7, r3
   18556:	781b      	ldrb	r3, [r3, #0]
   18558:	01db      	lsls	r3, r3, #7
   1855a:	18d3      	adds	r3, r2, r3
   1855c:	e000      	b.n	18560 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1855e:	2300      	movs	r3, #0
	}
}
   18560:	0018      	movs	r0, r3
   18562:	46bd      	mov	sp, r7
   18564:	b004      	add	sp, #16
   18566:	bd80      	pop	{r7, pc}
   18568:	41004400 	.word	0x41004400

0001856c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1856c:	b580      	push	{r7, lr}
   1856e:	b082      	sub	sp, #8
   18570:	af00      	add	r7, sp, #0
   18572:	0002      	movs	r2, r0
   18574:	1dfb      	adds	r3, r7, #7
   18576:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   18578:	1dfb      	adds	r3, r7, #7
   1857a:	781b      	ldrb	r3, [r3, #0]
   1857c:	0018      	movs	r0, r3
   1857e:	4b03      	ldr	r3, [pc, #12]	; (1858c <port_get_group_from_gpio_pin+0x20>)
   18580:	4798      	blx	r3
   18582:	0003      	movs	r3, r0
}
   18584:	0018      	movs	r0, r3
   18586:	46bd      	mov	sp, r7
   18588:	b002      	add	sp, #8
   1858a:	bd80      	pop	{r7, pc}
   1858c:	0001850d 	.word	0x0001850d

00018590 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   18590:	b580      	push	{r7, lr}
   18592:	b084      	sub	sp, #16
   18594:	af00      	add	r7, sp, #0
   18596:	0002      	movs	r2, r0
   18598:	1dfb      	adds	r3, r7, #7
   1859a:	701a      	strb	r2, [r3, #0]
   1859c:	1dbb      	adds	r3, r7, #6
   1859e:	1c0a      	adds	r2, r1, #0
   185a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   185a2:	1dfb      	adds	r3, r7, #7
   185a4:	781b      	ldrb	r3, [r3, #0]
   185a6:	0018      	movs	r0, r3
   185a8:	4b0d      	ldr	r3, [pc, #52]	; (185e0 <port_pin_set_output_level+0x50>)
   185aa:	4798      	blx	r3
   185ac:	0003      	movs	r3, r0
   185ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   185b0:	1dfb      	adds	r3, r7, #7
   185b2:	781b      	ldrb	r3, [r3, #0]
   185b4:	221f      	movs	r2, #31
   185b6:	4013      	ands	r3, r2
   185b8:	2201      	movs	r2, #1
   185ba:	409a      	lsls	r2, r3
   185bc:	0013      	movs	r3, r2
   185be:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   185c0:	1dbb      	adds	r3, r7, #6
   185c2:	781b      	ldrb	r3, [r3, #0]
   185c4:	2b00      	cmp	r3, #0
   185c6:	d003      	beq.n	185d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   185c8:	68fb      	ldr	r3, [r7, #12]
   185ca:	68ba      	ldr	r2, [r7, #8]
   185cc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   185ce:	e002      	b.n	185d6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   185d0:	68fb      	ldr	r3, [r7, #12]
   185d2:	68ba      	ldr	r2, [r7, #8]
   185d4:	615a      	str	r2, [r3, #20]
}
   185d6:	46c0      	nop			; (mov r8, r8)
   185d8:	46bd      	mov	sp, r7
   185da:	b004      	add	sp, #16
   185dc:	bd80      	pop	{r7, pc}
   185de:	46c0      	nop			; (mov r8, r8)
   185e0:	0001856d 	.word	0x0001856d

000185e4 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   185e4:	b580      	push	{r7, lr}
   185e6:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   185e8:	4b02      	ldr	r3, [pc, #8]	; (185f4 <init_state+0x10>)
   185ea:	2200      	movs	r2, #0
   185ec:	701a      	strb	r2, [r3, #0]
}
   185ee:	46c0      	nop			; (mov r8, r8)
   185f0:	46bd      	mov	sp, r7
   185f2:	bd80      	pop	{r7, pc}
   185f4:	20000565 	.word	0x20000565

000185f8 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   185f8:	b580      	push	{r7, lr}
   185fa:	b082      	sub	sp, #8
   185fc:	af00      	add	r7, sp, #0
   185fe:	0002      	movs	r2, r0
   18600:	1dfb      	adds	r3, r7, #7
   18602:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   18604:	1dfb      	adds	r3, r7, #7
   18606:	781b      	ldrb	r3, [r3, #0]
   18608:	b25b      	sxtb	r3, r3
   1860a:	43db      	mvns	r3, r3
   1860c:	b25b      	sxtb	r3, r3
   1860e:	4a06      	ldr	r2, [pc, #24]	; (18628 <clear_state+0x30>)
   18610:	7812      	ldrb	r2, [r2, #0]
   18612:	b252      	sxtb	r2, r2
   18614:	4013      	ands	r3, r2
   18616:	b25b      	sxtb	r3, r3
   18618:	b2da      	uxtb	r2, r3
   1861a:	4b03      	ldr	r3, [pc, #12]	; (18628 <clear_state+0x30>)
   1861c:	701a      	strb	r2, [r3, #0]
}
   1861e:	46c0      	nop			; (mov r8, r8)
   18620:	46bd      	mov	sp, r7
   18622:	b002      	add	sp, #8
   18624:	bd80      	pop	{r7, pc}
   18626:	46c0      	nop			; (mov r8, r8)
   18628:	20000565 	.word	0x20000565

0001862c <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   1862c:	b580      	push	{r7, lr}
   1862e:	b082      	sub	sp, #8
   18630:	af00      	add	r7, sp, #0
   18632:	0002      	movs	r2, r0
   18634:	1dfb      	adds	r3, r7, #7
   18636:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   18638:	4b05      	ldr	r3, [pc, #20]	; (18650 <add_state+0x24>)
   1863a:	781a      	ldrb	r2, [r3, #0]
   1863c:	1dfb      	adds	r3, r7, #7
   1863e:	781b      	ldrb	r3, [r3, #0]
   18640:	4313      	orrs	r3, r2
   18642:	b2da      	uxtb	r2, r3
   18644:	4b02      	ldr	r3, [pc, #8]	; (18650 <add_state+0x24>)
   18646:	701a      	strb	r2, [r3, #0]
}
   18648:	46c0      	nop			; (mov r8, r8)
   1864a:	46bd      	mov	sp, r7
   1864c:	b002      	add	sp, #8
   1864e:	bd80      	pop	{r7, pc}
   18650:	20000565 	.word	0x20000565

00018654 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   18654:	b580      	push	{r7, lr}
   18656:	b082      	sub	sp, #8
   18658:	af00      	add	r7, sp, #0
   1865a:	0002      	movs	r2, r0
   1865c:	1dfb      	adds	r3, r7, #7
   1865e:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   18660:	4b06      	ldr	r3, [pc, #24]	; (1867c <is_state_set+0x28>)
   18662:	781b      	ldrb	r3, [r3, #0]
   18664:	1dfa      	adds	r2, r7, #7
   18666:	7812      	ldrb	r2, [r2, #0]
   18668:	4013      	ands	r3, r2
   1866a:	b2db      	uxtb	r3, r3
   1866c:	1e5a      	subs	r2, r3, #1
   1866e:	4193      	sbcs	r3, r2
   18670:	b2db      	uxtb	r3, r3
}
   18672:	0018      	movs	r0, r3
   18674:	46bd      	mov	sp, r7
   18676:	b002      	add	sp, #8
   18678:	bd80      	pop	{r7, pc}
   1867a:	46c0      	nop			; (mov r8, r8)
   1867c:	20000565 	.word	0x20000565

00018680 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   18680:	b590      	push	{r4, r7, lr}
   18682:	b085      	sub	sp, #20
   18684:	af00      	add	r7, sp, #0
   18686:	6078      	str	r0, [r7, #4]
   18688:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   1868a:	687b      	ldr	r3, [r7, #4]
   1868c:	2b00      	cmp	r3, #0
   1868e:	d002      	beq.n	18696 <is_exist_file+0x16>
   18690:	683b      	ldr	r3, [r7, #0]
   18692:	2b00      	cmp	r3, #0
   18694:	d101      	bne.n	1869a <is_exist_file+0x1a>
        return false;
   18696:	2300      	movs	r3, #0
   18698:	e013      	b.n	186c2 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   1869a:	230f      	movs	r3, #15
   1869c:	18fc      	adds	r4, r7, r3
   1869e:	6839      	ldr	r1, [r7, #0]
   186a0:	4b0a      	ldr	r3, [pc, #40]	; (186cc <is_exist_file+0x4c>)
   186a2:	2200      	movs	r2, #0
   186a4:	0018      	movs	r0, r3
   186a6:	4b0a      	ldr	r3, [pc, #40]	; (186d0 <is_exist_file+0x50>)
   186a8:	4798      	blx	r3
   186aa:	0003      	movs	r3, r0
   186ac:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   186ae:	4b07      	ldr	r3, [pc, #28]	; (186cc <is_exist_file+0x4c>)
   186b0:	0018      	movs	r0, r3
   186b2:	4b08      	ldr	r3, [pc, #32]	; (186d4 <is_exist_file+0x54>)
   186b4:	4798      	blx	r3
    return (ret == FR_OK);
   186b6:	230f      	movs	r3, #15
   186b8:	18fb      	adds	r3, r7, r3
   186ba:	781b      	ldrb	r3, [r3, #0]
   186bc:	425a      	negs	r2, r3
   186be:	4153      	adcs	r3, r2
   186c0:	b2db      	uxtb	r3, r3
}
   186c2:	0018      	movs	r0, r3
   186c4:	46bd      	mov	sp, r7
   186c6:	b005      	add	sp, #20
   186c8:	bd90      	pop	{r4, r7, pc}
   186ca:	46c0      	nop			; (mov r8, r8)
   186cc:	20000798 	.word	0x20000798
   186d0:	00030371 	.word	0x00030371
   186d4:	00030d71 	.word	0x00030d71

000186d8 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   186d8:	b580      	push	{r7, lr}
   186da:	b09e      	sub	sp, #120	; 0x78
   186dc:	af00      	add	r7, sp, #0
   186de:	60f8      	str	r0, [r7, #12]
   186e0:	60b9      	str	r1, [r7, #8]
   186e2:	1dfb      	adds	r3, r7, #7
   186e4:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   186e6:	2376      	movs	r3, #118	; 0x76
   186e8:	18fb      	adds	r3, r7, r3
   186ea:	2201      	movs	r2, #1
   186ec:	801a      	strh	r2, [r3, #0]
   186ee:	2374      	movs	r3, #116	; 0x74
   186f0:	18fb      	adds	r3, r7, r3
   186f2:	2200      	movs	r2, #0
   186f4:	801a      	strh	r2, [r3, #0]
   186f6:	236e      	movs	r3, #110	; 0x6e
   186f8:	18fb      	adds	r3, r7, r3
   186fa:	2200      	movs	r2, #0
   186fc:	801a      	strh	r2, [r3, #0]
   186fe:	2372      	movs	r3, #114	; 0x72
   18700:	18fb      	adds	r3, r7, r3
   18702:	2200      	movs	r2, #0
   18704:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   18706:	2324      	movs	r3, #36	; 0x24
   18708:	18fb      	adds	r3, r7, r3
   1870a:	0018      	movs	r0, r3
   1870c:	2341      	movs	r3, #65	; 0x41
   1870e:	001a      	movs	r2, r3
   18710:	2100      	movs	r1, #0
   18712:	4b92      	ldr	r3, [pc, #584]	; (1895c <rename_to_unique+0x284>)
   18714:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   18716:	2318      	movs	r3, #24
   18718:	18fb      	adds	r3, r7, r3
   1871a:	0018      	movs	r0, r3
   1871c:	2309      	movs	r3, #9
   1871e:	001a      	movs	r2, r3
   18720:	2100      	movs	r1, #0
   18722:	4b8e      	ldr	r3, [pc, #568]	; (1895c <rename_to_unique+0x284>)
   18724:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   18726:	2314      	movs	r3, #20
   18728:	18fb      	adds	r3, r7, r3
   1872a:	2200      	movs	r2, #0
   1872c:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   1872e:	2300      	movs	r3, #0
   18730:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   18732:	2371      	movs	r3, #113	; 0x71
   18734:	18fb      	adds	r3, r7, r3
   18736:	2200      	movs	r2, #0
   18738:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   1873a:	68bb      	ldr	r3, [r7, #8]
   1873c:	2b00      	cmp	r3, #0
   1873e:	d101      	bne.n	18744 <rename_to_unique+0x6c>
        return false;
   18740:	2300      	movs	r3, #0
   18742:	e106      	b.n	18952 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   18744:	68ba      	ldr	r2, [r7, #8]
   18746:	68fb      	ldr	r3, [r7, #12]
   18748:	0011      	movs	r1, r2
   1874a:	0018      	movs	r0, r3
   1874c:	4b84      	ldr	r3, [pc, #528]	; (18960 <rename_to_unique+0x288>)
   1874e:	4798      	blx	r3
   18750:	0003      	movs	r3, r0
   18752:	001a      	movs	r2, r3
   18754:	2301      	movs	r3, #1
   18756:	4053      	eors	r3, r2
   18758:	b2db      	uxtb	r3, r3
   1875a:	2b00      	cmp	r3, #0
   1875c:	d001      	beq.n	18762 <rename_to_unique+0x8a>
        return true;
   1875e:	2301      	movs	r3, #1
   18760:	e0f7      	b.n	18952 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   18762:	68bb      	ldr	r3, [r7, #8]
   18764:	0018      	movs	r0, r3
   18766:	4b7f      	ldr	r3, [pc, #508]	; (18964 <rename_to_unique+0x28c>)
   18768:	4798      	blx	r3
   1876a:	0003      	movs	r3, r0
   1876c:	2b40      	cmp	r3, #64	; 0x40
   1876e:	d901      	bls.n	18774 <rename_to_unique+0x9c>
        return false;
   18770:	2300      	movs	r3, #0
   18772:	e0ee      	b.n	18952 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   18774:	68bb      	ldr	r3, [r7, #8]
   18776:	212e      	movs	r1, #46	; 0x2e
   18778:	0018      	movs	r0, r3
   1877a:	4b7b      	ldr	r3, [pc, #492]	; (18968 <rename_to_unique+0x290>)
   1877c:	4798      	blx	r3
   1877e:	0003      	movs	r3, r0
   18780:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   18782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   18784:	2b00      	cmp	r3, #0
   18786:	d052      	beq.n	1882e <rename_to_unique+0x156>
        ext_len = strlen(p);
   18788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1878a:	0018      	movs	r0, r3
   1878c:	4b75      	ldr	r3, [pc, #468]	; (18964 <rename_to_unique+0x28c>)
   1878e:	4798      	blx	r3
   18790:	0002      	movs	r2, r0
   18792:	236e      	movs	r3, #110	; 0x6e
   18794:	18fb      	adds	r3, r7, r3
   18796:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   18798:	236e      	movs	r3, #110	; 0x6e
   1879a:	18fb      	adds	r3, r7, r3
   1879c:	881b      	ldrh	r3, [r3, #0]
   1879e:	2b07      	cmp	r3, #7
   187a0:	d837      	bhi.n	18812 <rename_to_unique+0x13a>
            valid_ext = true;
   187a2:	2371      	movs	r3, #113	; 0x71
   187a4:	18fb      	adds	r3, r7, r3
   187a6:	2201      	movs	r2, #1
   187a8:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   187aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
   187ac:	2318      	movs	r3, #24
   187ae:	18fb      	adds	r3, r7, r3
   187b0:	0011      	movs	r1, r2
   187b2:	0018      	movs	r0, r3
   187b4:	4b6d      	ldr	r3, [pc, #436]	; (1896c <rename_to_unique+0x294>)
   187b6:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   187b8:	68bb      	ldr	r3, [r7, #8]
   187ba:	0018      	movs	r0, r3
   187bc:	4b69      	ldr	r3, [pc, #420]	; (18964 <rename_to_unique+0x28c>)
   187be:	4798      	blx	r3
   187c0:	0002      	movs	r2, r0
   187c2:	236e      	movs	r3, #110	; 0x6e
   187c4:	18fb      	adds	r3, r7, r3
   187c6:	881b      	ldrh	r3, [r3, #0]
   187c8:	1ad3      	subs	r3, r2, r3
   187ca:	2b3c      	cmp	r3, #60	; 0x3c
   187cc:	d911      	bls.n	187f2 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   187ce:	2374      	movs	r3, #116	; 0x74
   187d0:	18fb      	adds	r3, r7, r3
   187d2:	226e      	movs	r2, #110	; 0x6e
   187d4:	18ba      	adds	r2, r7, r2
   187d6:	8812      	ldrh	r2, [r2, #0]
   187d8:	213c      	movs	r1, #60	; 0x3c
   187da:	1a8a      	subs	r2, r1, r2
   187dc:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   187de:	2374      	movs	r3, #116	; 0x74
   187e0:	18fb      	adds	r3, r7, r3
   187e2:	881a      	ldrh	r2, [r3, #0]
   187e4:	68b9      	ldr	r1, [r7, #8]
   187e6:	2324      	movs	r3, #36	; 0x24
   187e8:	18fb      	adds	r3, r7, r3
   187ea:	0018      	movs	r0, r3
   187ec:	4b60      	ldr	r3, [pc, #384]	; (18970 <rename_to_unique+0x298>)
   187ee:	4798      	blx	r3
   187f0:	e02a      	b.n	18848 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   187f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   187f4:	68bb      	ldr	r3, [r7, #8]
   187f6:	1ad2      	subs	r2, r2, r3
   187f8:	2374      	movs	r3, #116	; 0x74
   187fa:	18fb      	adds	r3, r7, r3
   187fc:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   187fe:	2374      	movs	r3, #116	; 0x74
   18800:	18fb      	adds	r3, r7, r3
   18802:	881a      	ldrh	r2, [r3, #0]
   18804:	68b9      	ldr	r1, [r7, #8]
   18806:	2324      	movs	r3, #36	; 0x24
   18808:	18fb      	adds	r3, r7, r3
   1880a:	0018      	movs	r0, r3
   1880c:	4b58      	ldr	r3, [pc, #352]	; (18970 <rename_to_unique+0x298>)
   1880e:	4798      	blx	r3
   18810:	e01a      	b.n	18848 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   18812:	2374      	movs	r3, #116	; 0x74
   18814:	18fb      	adds	r3, r7, r3
   18816:	223c      	movs	r2, #60	; 0x3c
   18818:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   1881a:	2374      	movs	r3, #116	; 0x74
   1881c:	18fb      	adds	r3, r7, r3
   1881e:	881a      	ldrh	r2, [r3, #0]
   18820:	68b9      	ldr	r1, [r7, #8]
   18822:	2324      	movs	r3, #36	; 0x24
   18824:	18fb      	adds	r3, r7, r3
   18826:	0018      	movs	r0, r3
   18828:	4b51      	ldr	r3, [pc, #324]	; (18970 <rename_to_unique+0x298>)
   1882a:	4798      	blx	r3
   1882c:	e00c      	b.n	18848 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1882e:	2374      	movs	r3, #116	; 0x74
   18830:	18fb      	adds	r3, r7, r3
   18832:	223c      	movs	r2, #60	; 0x3c
   18834:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   18836:	2374      	movs	r3, #116	; 0x74
   18838:	18fb      	adds	r3, r7, r3
   1883a:	881a      	ldrh	r2, [r3, #0]
   1883c:	68b9      	ldr	r1, [r7, #8]
   1883e:	2324      	movs	r3, #36	; 0x24
   18840:	18fb      	adds	r3, r7, r3
   18842:	0018      	movs	r0, r3
   18844:	4b4a      	ldr	r3, [pc, #296]	; (18970 <rename_to_unique+0x298>)
   18846:	4798      	blx	r3
    }

    name[name_len++] = '-';
   18848:	2374      	movs	r3, #116	; 0x74
   1884a:	18fb      	adds	r3, r7, r3
   1884c:	881b      	ldrh	r3, [r3, #0]
   1884e:	2274      	movs	r2, #116	; 0x74
   18850:	18ba      	adds	r2, r7, r2
   18852:	1c59      	adds	r1, r3, #1
   18854:	8011      	strh	r1, [r2, #0]
   18856:	001a      	movs	r2, r3
   18858:	2324      	movs	r3, #36	; 0x24
   1885a:	18fb      	adds	r3, r7, r3
   1885c:	212d      	movs	r1, #45	; 0x2d
   1885e:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   18860:	2376      	movs	r3, #118	; 0x76
   18862:	18fb      	adds	r3, r7, r3
   18864:	2200      	movs	r2, #0
   18866:	801a      	strh	r2, [r3, #0]
   18868:	2372      	movs	r3, #114	; 0x72
   1886a:	18fb      	adds	r3, r7, r3
   1886c:	2201      	movs	r2, #1
   1886e:	801a      	strh	r2, [r3, #0]
   18870:	e010      	b.n	18894 <rename_to_unique+0x1bc>
        count *= 10;
   18872:	2372      	movs	r3, #114	; 0x72
   18874:	18fa      	adds	r2, r7, r3
   18876:	2372      	movs	r3, #114	; 0x72
   18878:	18fb      	adds	r3, r7, r3
   1887a:	881b      	ldrh	r3, [r3, #0]
   1887c:	1c19      	adds	r1, r3, #0
   1887e:	0089      	lsls	r1, r1, #2
   18880:	18cb      	adds	r3, r1, r3
   18882:	18db      	adds	r3, r3, r3
   18884:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   18886:	2376      	movs	r3, #118	; 0x76
   18888:	18fb      	adds	r3, r7, r3
   1888a:	881a      	ldrh	r2, [r3, #0]
   1888c:	2376      	movs	r3, #118	; 0x76
   1888e:	18fb      	adds	r3, r7, r3
   18890:	3201      	adds	r2, #1
   18892:	801a      	strh	r2, [r3, #0]
   18894:	2376      	movs	r3, #118	; 0x76
   18896:	18fb      	adds	r3, r7, r3
   18898:	881b      	ldrh	r3, [r3, #0]
   1889a:	2b02      	cmp	r3, #2
   1889c:	d9e9      	bls.n	18872 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   1889e:	2376      	movs	r3, #118	; 0x76
   188a0:	18fb      	adds	r3, r7, r3
   188a2:	2201      	movs	r2, #1
   188a4:	801a      	strh	r2, [r3, #0]
   188a6:	e04b      	b.n	18940 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   188a8:	2376      	movs	r3, #118	; 0x76
   188aa:	18fb      	adds	r3, r7, r3
   188ac:	881a      	ldrh	r2, [r3, #0]
   188ae:	4931      	ldr	r1, [pc, #196]	; (18974 <rename_to_unique+0x29c>)
   188b0:	2314      	movs	r3, #20
   188b2:	18fb      	adds	r3, r7, r3
   188b4:	0018      	movs	r0, r3
   188b6:	4b30      	ldr	r3, [pc, #192]	; (18978 <rename_to_unique+0x2a0>)
   188b8:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   188ba:	2374      	movs	r3, #116	; 0x74
   188bc:	18fb      	adds	r3, r7, r3
   188be:	881b      	ldrh	r3, [r3, #0]
   188c0:	2224      	movs	r2, #36	; 0x24
   188c2:	18ba      	adds	r2, r7, r2
   188c4:	18d3      	adds	r3, r2, r3
   188c6:	2214      	movs	r2, #20
   188c8:	18b9      	adds	r1, r7, r2
   188ca:	2203      	movs	r2, #3
   188cc:	0018      	movs	r0, r3
   188ce:	4b28      	ldr	r3, [pc, #160]	; (18970 <rename_to_unique+0x298>)
   188d0:	4798      	blx	r3
        if (valid_ext) {
   188d2:	2371      	movs	r3, #113	; 0x71
   188d4:	18fb      	adds	r3, r7, r3
   188d6:	781b      	ldrb	r3, [r3, #0]
   188d8:	2b00      	cmp	r3, #0
   188da:	d00c      	beq.n	188f6 <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   188dc:	2374      	movs	r3, #116	; 0x74
   188de:	18fb      	adds	r3, r7, r3
   188e0:	881b      	ldrh	r3, [r3, #0]
   188e2:	3303      	adds	r3, #3
   188e4:	2224      	movs	r2, #36	; 0x24
   188e6:	18ba      	adds	r2, r7, r2
   188e8:	18d3      	adds	r3, r2, r3
   188ea:	2218      	movs	r2, #24
   188ec:	18ba      	adds	r2, r7, r2
   188ee:	0011      	movs	r1, r2
   188f0:	0018      	movs	r0, r3
   188f2:	4b1e      	ldr	r3, [pc, #120]	; (1896c <rename_to_unique+0x294>)
   188f4:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   188f6:	2324      	movs	r3, #36	; 0x24
   188f8:	18fa      	adds	r2, r7, r3
   188fa:	68fb      	ldr	r3, [r7, #12]
   188fc:	0011      	movs	r1, r2
   188fe:	0018      	movs	r0, r3
   18900:	4b17      	ldr	r3, [pc, #92]	; (18960 <rename_to_unique+0x288>)
   18902:	4798      	blx	r3
   18904:	0003      	movs	r3, r0
   18906:	001a      	movs	r2, r3
   18908:	2301      	movs	r3, #1
   1890a:	4053      	eors	r3, r2
   1890c:	b2db      	uxtb	r3, r3
   1890e:	2b00      	cmp	r3, #0
   18910:	d00f      	beq.n	18932 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   18912:	1dfb      	adds	r3, r7, #7
   18914:	781a      	ldrb	r2, [r3, #0]
   18916:	68bb      	ldr	r3, [r7, #8]
   18918:	2100      	movs	r1, #0
   1891a:	0018      	movs	r0, r3
   1891c:	4b0f      	ldr	r3, [pc, #60]	; (1895c <rename_to_unique+0x284>)
   1891e:	4798      	blx	r3
            strcpy(file_path_name, name);
   18920:	2324      	movs	r3, #36	; 0x24
   18922:	18fa      	adds	r2, r7, r3
   18924:	68bb      	ldr	r3, [r7, #8]
   18926:	0011      	movs	r1, r2
   18928:	0018      	movs	r0, r3
   1892a:	4b10      	ldr	r3, [pc, #64]	; (1896c <rename_to_unique+0x294>)
   1892c:	4798      	blx	r3
            return true;
   1892e:	2301      	movs	r3, #1
   18930:	e00f      	b.n	18952 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   18932:	2376      	movs	r3, #118	; 0x76
   18934:	18fb      	adds	r3, r7, r3
   18936:	881a      	ldrh	r2, [r3, #0]
   18938:	2376      	movs	r3, #118	; 0x76
   1893a:	18fb      	adds	r3, r7, r3
   1893c:	3201      	adds	r2, #1
   1893e:	801a      	strh	r2, [r3, #0]
   18940:	2376      	movs	r3, #118	; 0x76
   18942:	18fa      	adds	r2, r7, r3
   18944:	2372      	movs	r3, #114	; 0x72
   18946:	18fb      	adds	r3, r7, r3
   18948:	8812      	ldrh	r2, [r2, #0]
   1894a:	881b      	ldrh	r3, [r3, #0]
   1894c:	429a      	cmp	r2, r3
   1894e:	d3ab      	bcc.n	188a8 <rename_to_unique+0x1d0>
        }
    }
    return false;
   18950:	2300      	movs	r3, #0
}
   18952:	0018      	movs	r0, r3
   18954:	46bd      	mov	sp, r7
   18956:	b01e      	add	sp, #120	; 0x78
   18958:	bd80      	pop	{r7, pc}
   1895a:	46c0      	nop			; (mov r8, r8)
   1895c:	00037903 	.word	0x00037903
   18960:	00018681 	.word	0x00018681
   18964:	00037cbb 	.word	0x00037cbb
   18968:	00037d15 	.word	0x00037d15
   1896c:	00037c6f 	.word	0x00037c6f
   18970:	00037ceb 	.word	0x00037ceb
   18974:	000394e0 	.word	0x000394e0
   18978:	00037bc1 	.word	0x00037bc1

0001897c <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   1897c:	b590      	push	{r4, r7, lr}
   1897e:	b083      	sub	sp, #12
   18980:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   18982:	2001      	movs	r0, #1
   18984:	4b22      	ldr	r3, [pc, #136]	; (18a10 <start_download+0x94>)
   18986:	4798      	blx	r3
   18988:	0003      	movs	r3, r0
   1898a:	001a      	movs	r2, r3
   1898c:	2301      	movs	r3, #1
   1898e:	4053      	eors	r3, r2
   18990:	b2db      	uxtb	r3, r3
   18992:	2b00      	cmp	r3, #0
   18994:	d005      	beq.n	189a2 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   18996:	4b1f      	ldr	r3, [pc, #124]	; (18a14 <start_download+0x98>)
   18998:	0019      	movs	r1, r3
   1899a:	2001      	movs	r0, #1
   1899c:	4b1e      	ldr	r3, [pc, #120]	; (18a18 <start_download+0x9c>)
   1899e:	4798      	blx	r3
        return;
   189a0:	e032      	b.n	18a08 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   189a2:	2002      	movs	r0, #2
   189a4:	4b1a      	ldr	r3, [pc, #104]	; (18a10 <start_download+0x94>)
   189a6:	4798      	blx	r3
   189a8:	0003      	movs	r3, r0
   189aa:	001a      	movs	r2, r3
   189ac:	2301      	movs	r3, #1
   189ae:	4053      	eors	r3, r2
   189b0:	b2db      	uxtb	r3, r3
   189b2:	2b00      	cmp	r3, #0
   189b4:	d005      	beq.n	189c2 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   189b6:	4b19      	ldr	r3, [pc, #100]	; (18a1c <start_download+0xa0>)
   189b8:	0019      	movs	r1, r3
   189ba:	2001      	movs	r0, #1
   189bc:	4b16      	ldr	r3, [pc, #88]	; (18a18 <start_download+0x9c>)
   189be:	4798      	blx	r3
        return;
   189c0:	e022      	b.n	18a08 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   189c2:	2004      	movs	r0, #4
   189c4:	4b12      	ldr	r3, [pc, #72]	; (18a10 <start_download+0x94>)
   189c6:	4798      	blx	r3
   189c8:	1e03      	subs	r3, r0, #0
   189ca:	d005      	beq.n	189d8 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   189cc:	4b14      	ldr	r3, [pc, #80]	; (18a20 <start_download+0xa4>)
   189ce:	0019      	movs	r1, r3
   189d0:	2001      	movs	r0, #1
   189d2:	4b11      	ldr	r3, [pc, #68]	; (18a18 <start_download+0x9c>)
   189d4:	4798      	blx	r3
        return;
   189d6:	e017      	b.n	18a08 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   189d8:	2008      	movs	r0, #8
   189da:	4b0d      	ldr	r3, [pc, #52]	; (18a10 <start_download+0x94>)
   189dc:	4798      	blx	r3
   189de:	1e03      	subs	r3, r0, #0
   189e0:	d005      	beq.n	189ee <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   189e2:	4b10      	ldr	r3, [pc, #64]	; (18a24 <start_download+0xa8>)
   189e4:	0019      	movs	r1, r3
   189e6:	2001      	movs	r0, #1
   189e8:	4b0b      	ldr	r3, [pc, #44]	; (18a18 <start_download+0x9c>)
   189ea:	4798      	blx	r3
        return;
   189ec:	e00c      	b.n	18a08 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   189ee:	4b0e      	ldr	r3, [pc, #56]	; (18a28 <start_download+0xac>)
   189f0:	0019      	movs	r1, r3
   189f2:	2001      	movs	r0, #1
   189f4:	4b08      	ldr	r3, [pc, #32]	; (18a18 <start_download+0x9c>)
   189f6:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   189f8:	490c      	ldr	r1, [pc, #48]	; (18a2c <start_download+0xb0>)
   189fa:	480d      	ldr	r0, [pc, #52]	; (18a30 <start_download+0xb4>)
   189fc:	2300      	movs	r3, #0
   189fe:	9300      	str	r3, [sp, #0]
   18a00:	2300      	movs	r3, #0
   18a02:	2201      	movs	r2, #1
   18a04:	4c0b      	ldr	r4, [pc, #44]	; (18a34 <start_download+0xb8>)
   18a06:	47a0      	blx	r4
}
   18a08:	46bd      	mov	sp, r7
   18a0a:	b001      	add	sp, #4
   18a0c:	bd90      	pop	{r4, r7, pc}
   18a0e:	46c0      	nop			; (mov r8, r8)
   18a10:	00018655 	.word	0x00018655
   18a14:	000394e8 	.word	0x000394e8
   18a18:	00020831 	.word	0x00020831
   18a1c:	00039514 	.word	0x00039514
   18a20:	00039540 	.word	0x00039540
   18a24:	0003956c 	.word	0x0003956c
   18a28:	00039598 	.word	0x00039598
   18a2c:	000395c4 	.word	0x000395c4
   18a30:	20004890 	.word	0x20004890
   18a34:	000339c5 	.word	0x000339c5

00018a38 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   18a38:	b5b0      	push	{r4, r5, r7, lr}
   18a3a:	b086      	sub	sp, #24
   18a3c:	af00      	add	r7, sp, #0
   18a3e:	6078      	str	r0, [r7, #4]
   18a40:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   18a42:	687b      	ldr	r3, [r7, #4]
   18a44:	2b00      	cmp	r3, #0
   18a46:	d002      	beq.n	18a4e <store_file_packet+0x16>
   18a48:	683b      	ldr	r3, [r7, #0]
   18a4a:	2b00      	cmp	r3, #0
   18a4c:	d105      	bne.n	18a5a <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   18a4e:	4b58      	ldr	r3, [pc, #352]	; (18bb0 <store_file_packet+0x178>)
   18a50:	0019      	movs	r1, r3
   18a52:	2001      	movs	r0, #1
   18a54:	4b57      	ldr	r3, [pc, #348]	; (18bb4 <store_file_packet+0x17c>)
   18a56:	4798      	blx	r3
        return;
   18a58:	e0a6      	b.n	18ba8 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   18a5a:	2008      	movs	r0, #8
   18a5c:	4b56      	ldr	r3, [pc, #344]	; (18bb8 <store_file_packet+0x180>)
   18a5e:	4798      	blx	r3
   18a60:	0003      	movs	r3, r0
   18a62:	001a      	movs	r2, r3
   18a64:	2301      	movs	r3, #1
   18a66:	4053      	eors	r3, r2
   18a68:	b2db      	uxtb	r3, r3
   18a6a:	2b00      	cmp	r3, #0
   18a6c:	d055      	beq.n	18b1a <store_file_packet+0xe2>
        char *cp = NULL;
   18a6e:	2300      	movs	r3, #0
   18a70:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   18a72:	4b52      	ldr	r3, [pc, #328]	; (18bbc <store_file_packet+0x184>)
   18a74:	2230      	movs	r2, #48	; 0x30
   18a76:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   18a78:	4b50      	ldr	r3, [pc, #320]	; (18bbc <store_file_packet+0x184>)
   18a7a:	223a      	movs	r2, #58	; 0x3a
   18a7c:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   18a7e:	4b50      	ldr	r3, [pc, #320]	; (18bc0 <store_file_packet+0x188>)
   18a80:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   18a82:	e002      	b.n	18a8a <store_file_packet+0x52>
            cp--;
   18a84:	697b      	ldr	r3, [r7, #20]
   18a86:	3b01      	subs	r3, #1
   18a88:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   18a8a:	697b      	ldr	r3, [r7, #20]
   18a8c:	781b      	ldrb	r3, [r3, #0]
   18a8e:	2b2f      	cmp	r3, #47	; 0x2f
   18a90:	d1f8      	bne.n	18a84 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   18a92:	697b      	ldr	r3, [r7, #20]
   18a94:	0018      	movs	r0, r3
   18a96:	4b4b      	ldr	r3, [pc, #300]	; (18bc4 <store_file_packet+0x18c>)
   18a98:	4798      	blx	r3
   18a9a:	0003      	movs	r3, r0
   18a9c:	2b01      	cmp	r3, #1
   18a9e:	d924      	bls.n	18aea <store_file_packet+0xb2>
            cp++;
   18aa0:	697b      	ldr	r3, [r7, #20]
   18aa2:	3301      	adds	r3, #1
   18aa4:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   18aa6:	697a      	ldr	r2, [r7, #20]
   18aa8:	4b47      	ldr	r3, [pc, #284]	; (18bc8 <store_file_packet+0x190>)
   18aaa:	0011      	movs	r1, r2
   18aac:	0018      	movs	r0, r3
   18aae:	4b47      	ldr	r3, [pc, #284]	; (18bcc <store_file_packet+0x194>)
   18ab0:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   18ab2:	4942      	ldr	r1, [pc, #264]	; (18bbc <store_file_packet+0x184>)
   18ab4:	4b46      	ldr	r3, [pc, #280]	; (18bd0 <store_file_packet+0x198>)
   18ab6:	2240      	movs	r2, #64	; 0x40
   18ab8:	0018      	movs	r0, r3
   18aba:	4b46      	ldr	r3, [pc, #280]	; (18bd4 <store_file_packet+0x19c>)
   18abc:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   18abe:	4a3f      	ldr	r2, [pc, #252]	; (18bbc <store_file_packet+0x184>)
   18ac0:	4b45      	ldr	r3, [pc, #276]	; (18bd8 <store_file_packet+0x1a0>)
   18ac2:	0019      	movs	r1, r3
   18ac4:	2001      	movs	r0, #1
   18ac6:	4b3b      	ldr	r3, [pc, #236]	; (18bb4 <store_file_packet+0x17c>)
   18ac8:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   18aca:	2313      	movs	r3, #19
   18acc:	18fc      	adds	r4, r7, r3
   18ace:	493b      	ldr	r1, [pc, #236]	; (18bbc <store_file_packet+0x184>)
   18ad0:	4b3f      	ldr	r3, [pc, #252]	; (18bd0 <store_file_packet+0x198>)
   18ad2:	220a      	movs	r2, #10
   18ad4:	0018      	movs	r0, r3
   18ad6:	4b41      	ldr	r3, [pc, #260]	; (18bdc <store_file_packet+0x1a4>)
   18ad8:	4798      	blx	r3
   18ada:	0003      	movs	r3, r0
   18adc:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   18ade:	2313      	movs	r3, #19
   18ae0:	18fb      	adds	r3, r7, r3
   18ae2:	781b      	ldrb	r3, [r3, #0]
   18ae4:	2b00      	cmp	r3, #0
   18ae6:	d012      	beq.n	18b0e <store_file_packet+0xd6>
   18ae8:	e008      	b.n	18afc <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   18aea:	4b3d      	ldr	r3, [pc, #244]	; (18be0 <store_file_packet+0x1a8>)
   18aec:	0019      	movs	r1, r3
   18aee:	2001      	movs	r0, #1
   18af0:	4b30      	ldr	r3, [pc, #192]	; (18bb4 <store_file_packet+0x17c>)
   18af2:	4798      	blx	r3
            add_state(CANCELED);
   18af4:	2020      	movs	r0, #32
   18af6:	4b3b      	ldr	r3, [pc, #236]	; (18be4 <store_file_packet+0x1ac>)
   18af8:	4798      	blx	r3
            return;
   18afa:	e055      	b.n	18ba8 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   18afc:	2313      	movs	r3, #19
   18afe:	18fb      	adds	r3, r7, r3
   18b00:	781a      	ldrb	r2, [r3, #0]
   18b02:	4b39      	ldr	r3, [pc, #228]	; (18be8 <store_file_packet+0x1b0>)
   18b04:	0019      	movs	r1, r3
   18b06:	2001      	movs	r0, #1
   18b08:	4b2a      	ldr	r3, [pc, #168]	; (18bb4 <store_file_packet+0x17c>)
   18b0a:	4798      	blx	r3
            return;
   18b0c:	e04c      	b.n	18ba8 <store_file_packet+0x170>
        }

        received_file_size = 0;
   18b0e:	4b37      	ldr	r3, [pc, #220]	; (18bec <store_file_packet+0x1b4>)
   18b10:	2200      	movs	r2, #0
   18b12:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   18b14:	2008      	movs	r0, #8
   18b16:	4b33      	ldr	r3, [pc, #204]	; (18be4 <store_file_packet+0x1ac>)
   18b18:	4798      	blx	r3
    }

    if (data != NULL) {
   18b1a:	687b      	ldr	r3, [r7, #4]
   18b1c:	2b00      	cmp	r3, #0
   18b1e:	d043      	beq.n	18ba8 <store_file_packet+0x170>
        UINT wsize = 0;
   18b20:	2300      	movs	r3, #0
   18b22:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   18b24:	2313      	movs	r3, #19
   18b26:	18fc      	adds	r4, r7, r3
   18b28:	230c      	movs	r3, #12
   18b2a:	18fb      	adds	r3, r7, r3
   18b2c:	683a      	ldr	r2, [r7, #0]
   18b2e:	6879      	ldr	r1, [r7, #4]
   18b30:	4827      	ldr	r0, [pc, #156]	; (18bd0 <store_file_packet+0x198>)
   18b32:	4d2f      	ldr	r5, [pc, #188]	; (18bf0 <store_file_packet+0x1b8>)
   18b34:	47a8      	blx	r5
   18b36:	0003      	movs	r3, r0
   18b38:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   18b3a:	2313      	movs	r3, #19
   18b3c:	18fb      	adds	r3, r7, r3
   18b3e:	781b      	ldrb	r3, [r3, #0]
   18b40:	2b00      	cmp	r3, #0
   18b42:	d00c      	beq.n	18b5e <store_file_packet+0x126>
            f_close(&file_object);
   18b44:	4b22      	ldr	r3, [pc, #136]	; (18bd0 <store_file_packet+0x198>)
   18b46:	0018      	movs	r0, r3
   18b48:	4b2a      	ldr	r3, [pc, #168]	; (18bf4 <store_file_packet+0x1bc>)
   18b4a:	4798      	blx	r3
            add_state(CANCELED);
   18b4c:	2020      	movs	r0, #32
   18b4e:	4b25      	ldr	r3, [pc, #148]	; (18be4 <store_file_packet+0x1ac>)
   18b50:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   18b52:	4b29      	ldr	r3, [pc, #164]	; (18bf8 <store_file_packet+0x1c0>)
   18b54:	0019      	movs	r1, r3
   18b56:	2001      	movs	r0, #1
   18b58:	4b16      	ldr	r3, [pc, #88]	; (18bb4 <store_file_packet+0x17c>)
   18b5a:	4798      	blx	r3
            return;
   18b5c:	e024      	b.n	18ba8 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   18b5e:	4b23      	ldr	r3, [pc, #140]	; (18bec <store_file_packet+0x1b4>)
   18b60:	681a      	ldr	r2, [r3, #0]
   18b62:	68fb      	ldr	r3, [r7, #12]
   18b64:	18d2      	adds	r2, r2, r3
   18b66:	4b21      	ldr	r3, [pc, #132]	; (18bec <store_file_packet+0x1b4>)
   18b68:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   18b6a:	4b20      	ldr	r3, [pc, #128]	; (18bec <store_file_packet+0x1b4>)
   18b6c:	681a      	ldr	r2, [r3, #0]
   18b6e:	4b23      	ldr	r3, [pc, #140]	; (18bfc <store_file_packet+0x1c4>)
   18b70:	681b      	ldr	r3, [r3, #0]
   18b72:	4923      	ldr	r1, [pc, #140]	; (18c00 <store_file_packet+0x1c8>)
   18b74:	2001      	movs	r0, #1
   18b76:	4c0f      	ldr	r4, [pc, #60]	; (18bb4 <store_file_packet+0x17c>)
   18b78:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   18b7a:	4b1c      	ldr	r3, [pc, #112]	; (18bec <store_file_packet+0x1b4>)
   18b7c:	681a      	ldr	r2, [r3, #0]
   18b7e:	4b1f      	ldr	r3, [pc, #124]	; (18bfc <store_file_packet+0x1c4>)
   18b80:	681b      	ldr	r3, [r3, #0]
   18b82:	429a      	cmp	r2, r3
   18b84:	d310      	bcc.n	18ba8 <store_file_packet+0x170>
            f_close(&file_object);
   18b86:	4b12      	ldr	r3, [pc, #72]	; (18bd0 <store_file_packet+0x198>)
   18b88:	0018      	movs	r0, r3
   18b8a:	4b1a      	ldr	r3, [pc, #104]	; (18bf4 <store_file_packet+0x1bc>)
   18b8c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   18b8e:	4b1d      	ldr	r3, [pc, #116]	; (18c04 <store_file_packet+0x1cc>)
   18b90:	0019      	movs	r1, r3
   18b92:	2001      	movs	r0, #1
   18b94:	4b07      	ldr	r3, [pc, #28]	; (18bb4 <store_file_packet+0x17c>)
   18b96:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   18b98:	2100      	movs	r1, #0
   18b9a:	2017      	movs	r0, #23
   18b9c:	4b1a      	ldr	r3, [pc, #104]	; (18c08 <store_file_packet+0x1d0>)
   18b9e:	4798      	blx	r3
            add_state(COMPLETED);
   18ba0:	2010      	movs	r0, #16
   18ba2:	4b10      	ldr	r3, [pc, #64]	; (18be4 <store_file_packet+0x1ac>)
   18ba4:	4798      	blx	r3
            return;
   18ba6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   18ba8:	46bd      	mov	sp, r7
   18baa:	b006      	add	sp, #24
   18bac:	bdb0      	pop	{r4, r5, r7, pc}
   18bae:	46c0      	nop			; (mov r8, r8)
   18bb0:	000395f0 	.word	0x000395f0
   18bb4:	00020831 	.word	0x00020831
   18bb8:	00018655 	.word	0x00018655
   18bbc:	200000a8 	.word	0x200000a8
   18bc0:	000395ef 	.word	0x000395ef
   18bc4:	00037cbb 	.word	0x00037cbb
   18bc8:	200000aa 	.word	0x200000aa
   18bcc:	00037c6f 	.word	0x00037c6f
   18bd0:	20000798 	.word	0x20000798
   18bd4:	000186d9 	.word	0x000186d9
   18bd8:	00039654 	.word	0x00039654
   18bdc:	00030371 	.word	0x00030371
   18be0:	00039614 	.word	0x00039614
   18be4:	0001862d 	.word	0x0001862d
   18be8:	0003967c 	.word	0x0003967c
   18bec:	200007c0 	.word	0x200007c0
   18bf0:	000308a1 	.word	0x000308a1
   18bf4:	00030d71 	.word	0x00030d71
   18bf8:	000396b0 	.word	0x000396b0
   18bfc:	200007bc 	.word	0x200007bc
   18c00:	000396ec 	.word	0x000396ec
   18c04:	00039720 	.word	0x00039720
   18c08:	00018591 	.word	0x00018591

00018c0c <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   18c0c:	b590      	push	{r4, r7, lr}
   18c0e:	b085      	sub	sp, #20
   18c10:	af00      	add	r7, sp, #0
   18c12:	60f8      	str	r0, [r7, #12]
   18c14:	60b9      	str	r1, [r7, #8]
   18c16:	607a      	str	r2, [r7, #4]
    switch (type) {
   18c18:	68bb      	ldr	r3, [r7, #8]
   18c1a:	2b04      	cmp	r3, #4
   18c1c:	d900      	bls.n	18c20 <http_client_callback+0x14>
   18c1e:	e077      	b.n	18d10 <http_client_callback+0x104>
   18c20:	68bb      	ldr	r3, [r7, #8]
   18c22:	009a      	lsls	r2, r3, #2
   18c24:	4b3c      	ldr	r3, [pc, #240]	; (18d18 <http_client_callback+0x10c>)
   18c26:	18d3      	adds	r3, r2, r3
   18c28:	681b      	ldr	r3, [r3, #0]
   18c2a:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   18c2c:	4b3b      	ldr	r3, [pc, #236]	; (18d1c <http_client_callback+0x110>)
   18c2e:	0019      	movs	r1, r3
   18c30:	2001      	movs	r0, #1
   18c32:	4b3b      	ldr	r3, [pc, #236]	; (18d20 <http_client_callback+0x114>)
   18c34:	4798      	blx	r3
            break;
   18c36:	e06b      	b.n	18d10 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   18c38:	4b3a      	ldr	r3, [pc, #232]	; (18d24 <http_client_callback+0x118>)
   18c3a:	0019      	movs	r1, r3
   18c3c:	2001      	movs	r0, #1
   18c3e:	4b38      	ldr	r3, [pc, #224]	; (18d20 <http_client_callback+0x114>)
   18c40:	4798      	blx	r3
            add_state(GET_REQUESTED);
   18c42:	2004      	movs	r0, #4
   18c44:	4b38      	ldr	r3, [pc, #224]	; (18d28 <http_client_callback+0x11c>)
   18c46:	4798      	blx	r3
            break;
   18c48:	e062      	b.n	18d10 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   18c4a:	687b      	ldr	r3, [r7, #4]
   18c4c:	881b      	ldrh	r3, [r3, #0]
   18c4e:	001a      	movs	r2, r3
   18c50:	687b      	ldr	r3, [r7, #4]
   18c52:	685b      	ldr	r3, [r3, #4]
   18c54:	4935      	ldr	r1, [pc, #212]	; (18d2c <http_client_callback+0x120>)
   18c56:	2001      	movs	r0, #1
   18c58:	4c31      	ldr	r4, [pc, #196]	; (18d20 <http_client_callback+0x114>)
   18c5a:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   18c5c:	687b      	ldr	r3, [r7, #4]
   18c5e:	881b      	ldrh	r3, [r3, #0]
   18c60:	2bc8      	cmp	r3, #200	; 0xc8
   18c62:	d10d      	bne.n	18c80 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   18c64:	687b      	ldr	r3, [r7, #4]
   18c66:	685a      	ldr	r2, [r3, #4]
   18c68:	4b31      	ldr	r3, [pc, #196]	; (18d30 <http_client_callback+0x124>)
   18c6a:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   18c6c:	4b31      	ldr	r3, [pc, #196]	; (18d34 <http_client_callback+0x128>)
   18c6e:	2200      	movs	r2, #0
   18c70:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   18c72:	687b      	ldr	r3, [r7, #4]
   18c74:	685a      	ldr	r2, [r3, #4]
   18c76:	2380      	movs	r3, #128	; 0x80
   18c78:	009b      	lsls	r3, r3, #2
   18c7a:	429a      	cmp	r2, r3
   18c7c:	d843      	bhi.n	18d06 <http_client_callback+0xfa>
   18c7e:	e003      	b.n	18c88 <http_client_callback+0x7c>
                add_state(CANCELED);
   18c80:	2020      	movs	r0, #32
   18c82:	4b29      	ldr	r3, [pc, #164]	; (18d28 <http_client_callback+0x11c>)
   18c84:	4798      	blx	r3
                return;
   18c86:	e043      	b.n	18d10 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   18c88:	687b      	ldr	r3, [r7, #4]
   18c8a:	689a      	ldr	r2, [r3, #8]
   18c8c:	687b      	ldr	r3, [r7, #4]
   18c8e:	685b      	ldr	r3, [r3, #4]
   18c90:	0019      	movs	r1, r3
   18c92:	0010      	movs	r0, r2
   18c94:	4b28      	ldr	r3, [pc, #160]	; (18d38 <http_client_callback+0x12c>)
   18c96:	4798      	blx	r3
                add_state(COMPLETED);
   18c98:	2010      	movs	r0, #16
   18c9a:	4b23      	ldr	r3, [pc, #140]	; (18d28 <http_client_callback+0x11c>)
   18c9c:	4798      	blx	r3
            }
            break;
   18c9e:	e032      	b.n	18d06 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   18ca0:	687b      	ldr	r3, [r7, #4]
   18ca2:	685a      	ldr	r2, [r3, #4]
   18ca4:	687b      	ldr	r3, [r7, #4]
   18ca6:	681b      	ldr	r3, [r3, #0]
   18ca8:	0019      	movs	r1, r3
   18caa:	0010      	movs	r0, r2
   18cac:	4b22      	ldr	r3, [pc, #136]	; (18d38 <http_client_callback+0x12c>)
   18cae:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   18cb0:	687b      	ldr	r3, [r7, #4]
   18cb2:	7a1b      	ldrb	r3, [r3, #8]
   18cb4:	2b00      	cmp	r3, #0
   18cb6:	d028      	beq.n	18d0a <http_client_callback+0xfe>
                add_state(COMPLETED);
   18cb8:	2010      	movs	r0, #16
   18cba:	4b1b      	ldr	r3, [pc, #108]	; (18d28 <http_client_callback+0x11c>)
   18cbc:	4798      	blx	r3
            }

            break;
   18cbe:	e024      	b.n	18d0a <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   18cc0:	687b      	ldr	r3, [r7, #4]
   18cc2:	681a      	ldr	r2, [r3, #0]
   18cc4:	4b1d      	ldr	r3, [pc, #116]	; (18d3c <http_client_callback+0x130>)
   18cc6:	0019      	movs	r1, r3
   18cc8:	2001      	movs	r0, #1
   18cca:	4b15      	ldr	r3, [pc, #84]	; (18d20 <http_client_callback+0x114>)
   18ccc:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   18cce:	687b      	ldr	r3, [r7, #4]
   18cd0:	681b      	ldr	r3, [r3, #0]
   18cd2:	330b      	adds	r3, #11
   18cd4:	d11b      	bne.n	18d0e <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   18cd6:	2008      	movs	r0, #8
   18cd8:	4b19      	ldr	r3, [pc, #100]	; (18d40 <http_client_callback+0x134>)
   18cda:	4798      	blx	r3
   18cdc:	1e03      	subs	r3, r0, #0
   18cde:	d006      	beq.n	18cee <http_client_callback+0xe2>
                    f_close(&file_object);
   18ce0:	4b18      	ldr	r3, [pc, #96]	; (18d44 <http_client_callback+0x138>)
   18ce2:	0018      	movs	r0, r3
   18ce4:	4b18      	ldr	r3, [pc, #96]	; (18d48 <http_client_callback+0x13c>)
   18ce6:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   18ce8:	2008      	movs	r0, #8
   18cea:	4b18      	ldr	r3, [pc, #96]	; (18d4c <http_client_callback+0x140>)
   18cec:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   18cee:	2004      	movs	r0, #4
   18cf0:	4b13      	ldr	r3, [pc, #76]	; (18d40 <http_client_callback+0x134>)
   18cf2:	4798      	blx	r3
   18cf4:	1e03      	subs	r3, r0, #0
   18cf6:	d002      	beq.n	18cfe <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   18cf8:	2004      	movs	r0, #4
   18cfa:	4b14      	ldr	r3, [pc, #80]	; (18d4c <http_client_callback+0x140>)
   18cfc:	4798      	blx	r3
                }

                start_download();
   18cfe:	4b14      	ldr	r3, [pc, #80]	; (18d50 <http_client_callback+0x144>)
   18d00:	4798      	blx	r3
            }

            break;
   18d02:	46c0      	nop			; (mov r8, r8)
   18d04:	e003      	b.n	18d0e <http_client_callback+0x102>
            break;
   18d06:	46c0      	nop			; (mov r8, r8)
   18d08:	e002      	b.n	18d10 <http_client_callback+0x104>
            break;
   18d0a:	46c0      	nop			; (mov r8, r8)
   18d0c:	e000      	b.n	18d10 <http_client_callback+0x104>
            break;
   18d0e:	46c0      	nop			; (mov r8, r8)
    }
}
   18d10:	46bd      	mov	sp, r7
   18d12:	b005      	add	sp, #20
   18d14:	bd90      	pop	{r4, r7, pc}
   18d16:	46c0      	nop			; (mov r8, r8)
   18d18:	00039e74 	.word	0x00039e74
   18d1c:	00039754 	.word	0x00039754
   18d20:	00020831 	.word	0x00020831
   18d24:	0003978c 	.word	0x0003978c
   18d28:	0001862d 	.word	0x0001862d
   18d2c:	000397b8 	.word	0x000397b8
   18d30:	200007bc 	.word	0x200007bc
   18d34:	200007c0 	.word	0x200007c0
   18d38:	00018a39 	.word	0x00018a39
   18d3c:	000397f4 	.word	0x000397f4
   18d40:	00018655 	.word	0x00018655
   18d44:	20000798 	.word	0x20000798
   18d48:	00030d71 	.word	0x00030d71
   18d4c:	000185f9 	.word	0x000185f9
   18d50:	0001897d 	.word	0x0001897d

00018d54 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   18d54:	b580      	push	{r7, lr}
   18d56:	b082      	sub	sp, #8
   18d58:	af00      	add	r7, sp, #0
   18d5a:	603a      	str	r2, [r7, #0]
   18d5c:	1dfb      	adds	r3, r7, #7
   18d5e:	1c02      	adds	r2, r0, #0
   18d60:	701a      	strb	r2, [r3, #0]
   18d62:	1dbb      	adds	r3, r7, #6
   18d64:	1c0a      	adds	r2, r1, #0
   18d66:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   18d68:	683a      	ldr	r2, [r7, #0]
   18d6a:	1dbb      	adds	r3, r7, #6
   18d6c:	7819      	ldrb	r1, [r3, #0]
   18d6e:	1dfb      	adds	r3, r7, #7
   18d70:	781b      	ldrb	r3, [r3, #0]
   18d72:	b25b      	sxtb	r3, r3
   18d74:	0018      	movs	r0, r3
   18d76:	4b03      	ldr	r3, [pc, #12]	; (18d84 <socket_cb+0x30>)
   18d78:	4798      	blx	r3
}
   18d7a:	46c0      	nop			; (mov r8, r8)
   18d7c:	46bd      	mov	sp, r7
   18d7e:	b002      	add	sp, #8
   18d80:	bd80      	pop	{r7, pc}
   18d82:	46c0      	nop			; (mov r8, r8)
   18d84:	000336d5 	.word	0x000336d5

00018d88 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   18d88:	b5b0      	push	{r4, r5, r7, lr}
   18d8a:	b086      	sub	sp, #24
   18d8c:	af04      	add	r7, sp, #16
   18d8e:	6078      	str	r0, [r7, #4]
   18d90:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   18d92:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   18d94:	22ff      	movs	r2, #255	; 0xff
   18d96:	4013      	ands	r3, r2
   18d98:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   18d9a:	683b      	ldr	r3, [r7, #0]
   18d9c:	0a1b      	lsrs	r3, r3, #8
   18d9e:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   18da0:	23ff      	movs	r3, #255	; 0xff
   18da2:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   18da4:	683a      	ldr	r2, [r7, #0]
   18da6:	0c12      	lsrs	r2, r2, #16
   18da8:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   18daa:	22ff      	movs	r2, #255	; 0xff
   18dac:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   18dae:	6839      	ldr	r1, [r7, #0]
   18db0:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   18db2:	000d      	movs	r5, r1
   18db4:	6878      	ldr	r0, [r7, #4]
   18db6:	4909      	ldr	r1, [pc, #36]	; (18ddc <resolve_cb+0x54>)
   18db8:	9502      	str	r5, [sp, #8]
   18dba:	9201      	str	r2, [sp, #4]
   18dbc:	9300      	str	r3, [sp, #0]
   18dbe:	0023      	movs	r3, r4
   18dc0:	0002      	movs	r2, r0
   18dc2:	2001      	movs	r0, #1
   18dc4:	4c06      	ldr	r4, [pc, #24]	; (18de0 <resolve_cb+0x58>)
   18dc6:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   18dc8:	683a      	ldr	r2, [r7, #0]
   18dca:	687b      	ldr	r3, [r7, #4]
   18dcc:	0011      	movs	r1, r2
   18dce:	0018      	movs	r0, r3
   18dd0:	4b04      	ldr	r3, [pc, #16]	; (18de4 <resolve_cb+0x5c>)
   18dd2:	4798      	blx	r3
}
   18dd4:	46c0      	nop			; (mov r8, r8)
   18dd6:	46bd      	mov	sp, r7
   18dd8:	b002      	add	sp, #8
   18dda:	bdb0      	pop	{r4, r5, r7, pc}
   18ddc:	00039824 	.word	0x00039824
   18de0:	00020831 	.word	0x00020831
   18de4:	00033839 	.word	0x00033839

00018de8 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   18de8:	b590      	push	{r4, r7, lr}
   18dea:	b087      	sub	sp, #28
   18dec:	af02      	add	r7, sp, #8
   18dee:	0002      	movs	r2, r0
   18df0:	6039      	str	r1, [r7, #0]
   18df2:	1dfb      	adds	r3, r7, #7
   18df4:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   18df6:	1dfb      	adds	r3, r7, #7
   18df8:	781b      	ldrb	r3, [r3, #0]
   18dfa:	2b2c      	cmp	r3, #44	; 0x2c
   18dfc:	d002      	beq.n	18e04 <wifi_cb+0x1c>
   18dfe:	2b32      	cmp	r3, #50	; 0x32
   18e00:	d03d      	beq.n	18e7e <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   18e02:	e06f      	b.n	18ee4 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   18e04:	683b      	ldr	r3, [r7, #0]
   18e06:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   18e08:	68fb      	ldr	r3, [r7, #12]
   18e0a:	781b      	ldrb	r3, [r3, #0]
   18e0c:	2b01      	cmp	r3, #1
   18e0e:	d107      	bne.n	18e20 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   18e10:	4b36      	ldr	r3, [pc, #216]	; (18eec <wifi_cb+0x104>)
   18e12:	0019      	movs	r1, r3
   18e14:	2001      	movs	r0, #1
   18e16:	4b36      	ldr	r3, [pc, #216]	; (18ef0 <wifi_cb+0x108>)
   18e18:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   18e1a:	4b36      	ldr	r3, [pc, #216]	; (18ef4 <wifi_cb+0x10c>)
   18e1c:	4798      	blx	r3
            break;
   18e1e:	e05e      	b.n	18ede <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   18e20:	68fb      	ldr	r3, [r7, #12]
   18e22:	781b      	ldrb	r3, [r3, #0]
   18e24:	2b00      	cmp	r3, #0
   18e26:	d15a      	bne.n	18ede <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   18e28:	4b33      	ldr	r3, [pc, #204]	; (18ef8 <wifi_cb+0x110>)
   18e2a:	0019      	movs	r1, r3
   18e2c:	2001      	movs	r0, #1
   18e2e:	4b30      	ldr	r3, [pc, #192]	; (18ef0 <wifi_cb+0x108>)
   18e30:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   18e32:	2002      	movs	r0, #2
   18e34:	4b31      	ldr	r3, [pc, #196]	; (18efc <wifi_cb+0x114>)
   18e36:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   18e38:	2008      	movs	r0, #8
   18e3a:	4b31      	ldr	r3, [pc, #196]	; (18f00 <wifi_cb+0x118>)
   18e3c:	4798      	blx	r3
   18e3e:	1e03      	subs	r3, r0, #0
   18e40:	d006      	beq.n	18e50 <wifi_cb+0x68>
                    f_close(&file_object);
   18e42:	4b30      	ldr	r3, [pc, #192]	; (18f04 <wifi_cb+0x11c>)
   18e44:	0018      	movs	r0, r3
   18e46:	4b30      	ldr	r3, [pc, #192]	; (18f08 <wifi_cb+0x120>)
   18e48:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   18e4a:	2008      	movs	r0, #8
   18e4c:	4b2b      	ldr	r3, [pc, #172]	; (18efc <wifi_cb+0x114>)
   18e4e:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   18e50:	2004      	movs	r0, #4
   18e52:	4b2b      	ldr	r3, [pc, #172]	; (18f00 <wifi_cb+0x118>)
   18e54:	4798      	blx	r3
   18e56:	1e03      	subs	r3, r0, #0
   18e58:	d002      	beq.n	18e60 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   18e5a:	2004      	movs	r0, #4
   18e5c:	4b27      	ldr	r3, [pc, #156]	; (18efc <wifi_cb+0x114>)
   18e5e:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   18e60:	4b2a      	ldr	r3, [pc, #168]	; (18f0c <wifi_cb+0x124>)
   18e62:	2101      	movs	r1, #1
   18e64:	0018      	movs	r0, r3
   18e66:	4b2a      	ldr	r3, [pc, #168]	; (18f10 <wifi_cb+0x128>)
   18e68:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   18e6a:	4a2a      	ldr	r2, [pc, #168]	; (18f14 <wifi_cb+0x12c>)
   18e6c:	482a      	ldr	r0, [pc, #168]	; (18f18 <wifi_cb+0x130>)
   18e6e:	23ff      	movs	r3, #255	; 0xff
   18e70:	9300      	str	r3, [sp, #0]
   18e72:	0013      	movs	r3, r2
   18e74:	2202      	movs	r2, #2
   18e76:	2107      	movs	r1, #7
   18e78:	4c28      	ldr	r4, [pc, #160]	; (18f1c <wifi_cb+0x134>)
   18e7a:	47a0      	blx	r4
            break;
   18e7c:	e02f      	b.n	18ede <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   18e7e:	683b      	ldr	r3, [r7, #0]
   18e80:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   18e82:	68bb      	ldr	r3, [r7, #8]
   18e84:	781b      	ldrb	r3, [r3, #0]
   18e86:	0018      	movs	r0, r3
   18e88:	68bb      	ldr	r3, [r7, #8]
   18e8a:	3301      	adds	r3, #1
   18e8c:	781b      	ldrb	r3, [r3, #0]
   18e8e:	001c      	movs	r4, r3
   18e90:	68bb      	ldr	r3, [r7, #8]
   18e92:	3302      	adds	r3, #2
   18e94:	781b      	ldrb	r3, [r3, #0]
   18e96:	001a      	movs	r2, r3
   18e98:	68bb      	ldr	r3, [r7, #8]
   18e9a:	3303      	adds	r3, #3
   18e9c:	781b      	ldrb	r3, [r3, #0]
   18e9e:	4920      	ldr	r1, [pc, #128]	; (18f20 <wifi_cb+0x138>)
   18ea0:	9301      	str	r3, [sp, #4]
   18ea2:	9200      	str	r2, [sp, #0]
   18ea4:	0023      	movs	r3, r4
   18ea6:	0002      	movs	r2, r0
   18ea8:	2001      	movs	r0, #1
   18eaa:	4c11      	ldr	r4, [pc, #68]	; (18ef0 <wifi_cb+0x108>)
   18eac:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   18eae:	2002      	movs	r0, #2
   18eb0:	4b1c      	ldr	r3, [pc, #112]	; (18f24 <wifi_cb+0x13c>)
   18eb2:	4798      	blx	r3
            if (do_download_flag == 1) {
   18eb4:	4b1c      	ldr	r3, [pc, #112]	; (18f28 <wifi_cb+0x140>)
   18eb6:	781b      	ldrb	r3, [r3, #0]
   18eb8:	2b01      	cmp	r3, #1
   18eba:	d102      	bne.n	18ec2 <wifi_cb+0xda>
                start_download();
   18ebc:	4b1b      	ldr	r3, [pc, #108]	; (18f2c <wifi_cb+0x144>)
   18ebe:	4798      	blx	r3
        } break;
   18ec0:	e00f      	b.n	18ee2 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   18ec2:	4a1b      	ldr	r2, [pc, #108]	; (18f30 <wifi_cb+0x148>)
   18ec4:	4b11      	ldr	r3, [pc, #68]	; (18f0c <wifi_cb+0x124>)
   18ec6:	0011      	movs	r1, r2
   18ec8:	0018      	movs	r0, r3
   18eca:	4b1a      	ldr	r3, [pc, #104]	; (18f34 <wifi_cb+0x14c>)
   18ecc:	4798      	blx	r3
   18ece:	1e03      	subs	r3, r0, #0
   18ed0:	d007      	beq.n	18ee2 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   18ed2:	4b19      	ldr	r3, [pc, #100]	; (18f38 <wifi_cb+0x150>)
   18ed4:	0019      	movs	r1, r3
   18ed6:	2001      	movs	r0, #1
   18ed8:	4b05      	ldr	r3, [pc, #20]	; (18ef0 <wifi_cb+0x108>)
   18eda:	4798      	blx	r3
        } break;
   18edc:	e001      	b.n	18ee2 <wifi_cb+0xfa>
            break;
   18ede:	46c0      	nop			; (mov r8, r8)
   18ee0:	e000      	b.n	18ee4 <wifi_cb+0xfc>
        } break;
   18ee2:	46c0      	nop			; (mov r8, r8)
    }
}
   18ee4:	46c0      	nop			; (mov r8, r8)
   18ee6:	46bd      	mov	sp, r7
   18ee8:	b005      	add	sp, #20
   18eea:	bd90      	pop	{r4, r7, pc}
   18eec:	00039854 	.word	0x00039854
   18ef0:	00020831 	.word	0x00020831
   18ef4:	00024ea5 	.word	0x00024ea5
   18ef8:	00039874 	.word	0x00039874
   18efc:	000185f9 	.word	0x000185f9
   18f00:	00018655 	.word	0x00018655
   18f04:	20000798 	.word	0x20000798
   18f08:	00030d71 	.word	0x00030d71
   18f0c:	200007c4 	.word	0x200007c4
   18f10:	00032381 	.word	0x00032381
   18f14:	00039898 	.word	0x00039898
   18f18:	000398a4 	.word	0x000398a4
   18f1c:	000249d1 	.word	0x000249d1
   18f20:	000398ac 	.word	0x000398ac
   18f24:	0001862d 	.word	0x0001862d
   18f28:	20000564 	.word	0x20000564
   18f2c:	0001897d 	.word	0x0001897d
   18f30:	000394cc 	.word	0x000394cc
   18f34:	0003224d 	.word	0x0003224d
   18f38:	000398d4 	.word	0x000398d4

00018f3c <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   18f3c:	b590      	push	{r4, r7, lr}
   18f3e:	b083      	sub	sp, #12
   18f40:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   18f42:	4b29      	ldr	r3, [pc, #164]	; (18fe8 <init_storage+0xac>)
   18f44:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   18f46:	4b29      	ldr	r3, [pc, #164]	; (18fec <init_storage+0xb0>)
   18f48:	0019      	movs	r1, r3
   18f4a:	2001      	movs	r0, #1
   18f4c:	4b28      	ldr	r3, [pc, #160]	; (18ff0 <init_storage+0xb4>)
   18f4e:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   18f50:	1dfc      	adds	r4, r7, #7
   18f52:	2000      	movs	r0, #0
   18f54:	4b27      	ldr	r3, [pc, #156]	; (18ff4 <init_storage+0xb8>)
   18f56:	4798      	blx	r3
   18f58:	0003      	movs	r3, r0
   18f5a:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   18f5c:	1dfb      	adds	r3, r7, #7
   18f5e:	781b      	ldrb	r3, [r3, #0]
   18f60:	2b01      	cmp	r3, #1
   18f62:	d110      	bne.n	18f86 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   18f64:	4b24      	ldr	r3, [pc, #144]	; (18ff8 <init_storage+0xbc>)
   18f66:	0019      	movs	r1, r3
   18f68:	2001      	movs	r0, #1
   18f6a:	4b21      	ldr	r3, [pc, #132]	; (18ff0 <init_storage+0xb4>)
   18f6c:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   18f6e:	4b23      	ldr	r3, [pc, #140]	; (18ffc <init_storage+0xc0>)
   18f70:	0019      	movs	r1, r3
   18f72:	2001      	movs	r0, #1
   18f74:	4b1e      	ldr	r3, [pc, #120]	; (18ff0 <init_storage+0xb4>)
   18f76:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   18f78:	46c0      	nop			; (mov r8, r8)
   18f7a:	2000      	movs	r0, #0
   18f7c:	4b20      	ldr	r3, [pc, #128]	; (19000 <init_storage+0xc4>)
   18f7e:	4798      	blx	r3
   18f80:	0003      	movs	r3, r0
   18f82:	2b02      	cmp	r3, #2
   18f84:	d1f9      	bne.n	18f7a <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   18f86:	1dfb      	adds	r3, r7, #7
   18f88:	781b      	ldrb	r3, [r3, #0]
   18f8a:	2b00      	cmp	r3, #0
   18f8c:	d1e0      	bne.n	18f50 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   18f8e:	4b1d      	ldr	r3, [pc, #116]	; (19004 <init_storage+0xc8>)
   18f90:	0019      	movs	r1, r3
   18f92:	2001      	movs	r0, #1
   18f94:	4b16      	ldr	r3, [pc, #88]	; (18ff0 <init_storage+0xb4>)
   18f96:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   18f98:	238c      	movs	r3, #140	; 0x8c
   18f9a:	009a      	lsls	r2, r3, #2
   18f9c:	4b1a      	ldr	r3, [pc, #104]	; (19008 <init_storage+0xcc>)
   18f9e:	2100      	movs	r1, #0
   18fa0:	0018      	movs	r0, r3
   18fa2:	4b1a      	ldr	r3, [pc, #104]	; (1900c <init_storage+0xd0>)
   18fa4:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   18fa6:	1dbc      	adds	r4, r7, #6
   18fa8:	4b17      	ldr	r3, [pc, #92]	; (19008 <init_storage+0xcc>)
   18faa:	0019      	movs	r1, r3
   18fac:	2000      	movs	r0, #0
   18fae:	4b18      	ldr	r3, [pc, #96]	; (19010 <init_storage+0xd4>)
   18fb0:	4798      	blx	r3
   18fb2:	0003      	movs	r3, r0
   18fb4:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   18fb6:	1dbb      	adds	r3, r7, #6
   18fb8:	781b      	ldrb	r3, [r3, #0]
   18fba:	2b0b      	cmp	r3, #11
   18fbc:	d107      	bne.n	18fce <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   18fbe:	1dbb      	adds	r3, r7, #6
   18fc0:	781a      	ldrb	r2, [r3, #0]
   18fc2:	4b14      	ldr	r3, [pc, #80]	; (19014 <init_storage+0xd8>)
   18fc4:	0019      	movs	r1, r3
   18fc6:	2001      	movs	r0, #1
   18fc8:	4b09      	ldr	r3, [pc, #36]	; (18ff0 <init_storage+0xb4>)
   18fca:	4798      	blx	r3
            return;
   18fcc:	e008      	b.n	18fe0 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   18fce:	4b12      	ldr	r3, [pc, #72]	; (19018 <init_storage+0xdc>)
   18fd0:	0019      	movs	r1, r3
   18fd2:	2001      	movs	r0, #1
   18fd4:	4b06      	ldr	r3, [pc, #24]	; (18ff0 <init_storage+0xb4>)
   18fd6:	4798      	blx	r3
        add_state(STORAGE_READY);
   18fd8:	2001      	movs	r0, #1
   18fda:	4b10      	ldr	r3, [pc, #64]	; (1901c <init_storage+0xe0>)
   18fdc:	4798      	blx	r3
        return;
   18fde:	46c0      	nop			; (mov r8, r8)
    }
}
   18fe0:	46bd      	mov	sp, r7
   18fe2:	b003      	add	sp, #12
   18fe4:	bd90      	pop	{r4, r7, pc}
   18fe6:	46c0      	nop			; (mov r8, r8)
   18fe8:	00021649 	.word	0x00021649
   18fec:	000398f8 	.word	0x000398f8
   18ff0:	00020831 	.word	0x00020831
   18ff4:	00021b25 	.word	0x00021b25
   18ff8:	00039930 	.word	0x00039930
   18ffc:	00039958 	.word	0x00039958
   19000:	00021699 	.word	0x00021699
   19004:	0003998c 	.word	0x0003998c
   19008:	20000568 	.word	0x20000568
   1900c:	00037903 	.word	0x00037903
   19010:	00030319 	.word	0x00030319
   19014:	000399b0 	.word	0x000399b0
   19018:	000399e0 	.word	0x000399e0
   1901c:	0001862d 	.word	0x0001862d

00019020 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   19020:	b580      	push	{r7, lr}
   19022:	b082      	sub	sp, #8
   19024:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   19026:	1d3b      	adds	r3, r7, #4
   19028:	0018      	movs	r0, r3
   1902a:	4b08      	ldr	r3, [pc, #32]	; (1904c <configure_timer+0x2c>)
   1902c:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   1902e:	1d3a      	adds	r2, r7, #4
   19030:	4b07      	ldr	r3, [pc, #28]	; (19050 <configure_timer+0x30>)
   19032:	0011      	movs	r1, r2
   19034:	0018      	movs	r0, r3
   19036:	4b07      	ldr	r3, [pc, #28]	; (19054 <configure_timer+0x34>)
   19038:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   1903a:	4b05      	ldr	r3, [pc, #20]	; (19050 <configure_timer+0x30>)
   1903c:	0018      	movs	r0, r3
   1903e:	4b06      	ldr	r3, [pc, #24]	; (19058 <configure_timer+0x38>)
   19040:	4798      	blx	r3
}
   19042:	46c0      	nop			; (mov r8, r8)
   19044:	46bd      	mov	sp, r7
   19046:	b002      	add	sp, #8
   19048:	bd80      	pop	{r7, pc}
   1904a:	46c0      	nop			; (mov r8, r8)
   1904c:	00034e69 	.word	0x00034e69
   19050:	20004838 	.word	0x20004838
   19054:	00034e8d 	.word	0x00034e8d
   19058:	00034f79 	.word	0x00034f79

0001905c <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   1905c:	b580      	push	{r7, lr}
   1905e:	b088      	sub	sp, #32
   19060:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   19062:	003b      	movs	r3, r7
   19064:	0018      	movs	r0, r3
   19066:	4b16      	ldr	r3, [pc, #88]	; (190c0 <configure_http_client+0x64>)
   19068:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   1906a:	003b      	movs	r3, r7
   1906c:	2280      	movs	r2, #128	; 0x80
   1906e:	0092      	lsls	r2, r2, #2
   19070:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   19072:	003b      	movs	r3, r7
   19074:	4a13      	ldr	r2, [pc, #76]	; (190c4 <configure_http_client+0x68>)
   19076:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   19078:	003b      	movs	r3, r7
   1907a:	22bc      	movs	r2, #188	; 0xbc
   1907c:	32ff      	adds	r2, #255	; 0xff
   1907e:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   19080:	003b      	movs	r3, r7
   19082:	2201      	movs	r2, #1
   19084:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   19086:	003a      	movs	r2, r7
   19088:	4b0f      	ldr	r3, [pc, #60]	; (190c8 <configure_http_client+0x6c>)
   1908a:	0011      	movs	r1, r2
   1908c:	0018      	movs	r0, r3
   1908e:	4b0f      	ldr	r3, [pc, #60]	; (190cc <configure_http_client+0x70>)
   19090:	4798      	blx	r3
   19092:	0003      	movs	r3, r0
   19094:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   19096:	69fb      	ldr	r3, [r7, #28]
   19098:	2b00      	cmp	r3, #0
   1909a:	da06      	bge.n	190aa <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   1909c:	69fa      	ldr	r2, [r7, #28]
   1909e:	4b0c      	ldr	r3, [pc, #48]	; (190d0 <configure_http_client+0x74>)
   190a0:	0019      	movs	r1, r3
   190a2:	2001      	movs	r0, #1
   190a4:	4b0b      	ldr	r3, [pc, #44]	; (190d4 <configure_http_client+0x78>)
   190a6:	4798      	blx	r3
        while (1) {
   190a8:	e7fe      	b.n	190a8 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   190aa:	4a0b      	ldr	r2, [pc, #44]	; (190d8 <configure_http_client+0x7c>)
   190ac:	4b06      	ldr	r3, [pc, #24]	; (190c8 <configure_http_client+0x6c>)
   190ae:	0011      	movs	r1, r2
   190b0:	0018      	movs	r0, r3
   190b2:	4b0a      	ldr	r3, [pc, #40]	; (190dc <configure_http_client+0x80>)
   190b4:	4798      	blx	r3
}
   190b6:	46c0      	nop			; (mov r8, r8)
   190b8:	46bd      	mov	sp, r7
   190ba:	b008      	add	sp, #32
   190bc:	bd80      	pop	{r7, pc}
   190be:	46c0      	nop			; (mov r8, r8)
   190c0:	000334fd 	.word	0x000334fd
   190c4:	20004838 	.word	0x20004838
   190c8:	20004890 	.word	0x20004890
   190cc:	00033549 	.word	0x00033549
   190d0:	00039a04 	.word	0x00039a04
   190d4:	00020831 	.word	0x00020831
   190d8:	00018c0d 	.word	0x00018c0d
   190dc:	00033635 	.word	0x00033635

000190e0 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   190e0:	b580      	push	{r7, lr}
   190e2:	b082      	sub	sp, #8
   190e4:	af00      	add	r7, sp, #0
   190e6:	603a      	str	r2, [r7, #0]
   190e8:	1dfb      	adds	r3, r7, #7
   190ea:	1c02      	adds	r2, r0, #0
   190ec:	701a      	strb	r2, [r3, #0]
   190ee:	1dbb      	adds	r3, r7, #6
   190f0:	1c0a      	adds	r2, r1, #0
   190f2:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   190f4:	683a      	ldr	r2, [r7, #0]
   190f6:	1dbb      	adds	r3, r7, #6
   190f8:	7819      	ldrb	r1, [r3, #0]
   190fa:	1dfb      	adds	r3, r7, #7
   190fc:	781b      	ldrb	r3, [r3, #0]
   190fe:	b25b      	sxtb	r3, r3
   19100:	0018      	movs	r0, r3
   19102:	4b03      	ldr	r3, [pc, #12]	; (19110 <socket_event_handler+0x30>)
   19104:	4798      	blx	r3
}
   19106:	46c0      	nop			; (mov r8, r8)
   19108:	46bd      	mov	sp, r7
   1910a:	b002      	add	sp, #8
   1910c:	bd80      	pop	{r7, pc}
   1910e:	46c0      	nop			; (mov r8, r8)
   19110:	000321f5 	.word	0x000321f5

00019114 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   19114:	b580      	push	{r7, lr}
   19116:	b082      	sub	sp, #8
   19118:	af00      	add	r7, sp, #0
   1911a:	6078      	str	r0, [r7, #4]
   1911c:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   1911e:	683a      	ldr	r2, [r7, #0]
   19120:	687b      	ldr	r3, [r7, #4]
   19122:	0011      	movs	r1, r2
   19124:	0018      	movs	r0, r3
   19126:	4b03      	ldr	r3, [pc, #12]	; (19134 <socket_resolve_handler+0x20>)
   19128:	4798      	blx	r3
}
   1912a:	46c0      	nop			; (mov r8, r8)
   1912c:	46bd      	mov	sp, r7
   1912e:	b002      	add	sp, #8
   19130:	bd80      	pop	{r7, pc}
   19132:	46c0      	nop			; (mov r8, r8)
   19134:	00032229 	.word	0x00032229

00019138 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   19138:	b590      	push	{r4, r7, lr}
   1913a:	b089      	sub	sp, #36	; 0x24
   1913c:	af02      	add	r7, sp, #8
   1913e:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   19140:	2310      	movs	r3, #16
   19142:	18fb      	adds	r3, r7, r3
   19144:	2200      	movs	r2, #0
   19146:	701a      	strb	r2, [r3, #0]
   19148:	2310      	movs	r3, #16
   1914a:	18fb      	adds	r3, r7, r3
   1914c:	2200      	movs	r2, #0
   1914e:	705a      	strb	r2, [r3, #1]
   19150:	2310      	movs	r3, #16
   19152:	18fb      	adds	r3, r7, r3
   19154:	2200      	movs	r2, #0
   19156:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   19158:	687b      	ldr	r3, [r7, #4]
   1915a:	685b      	ldr	r3, [r3, #4]
   1915c:	685a      	ldr	r2, [r3, #4]
   1915e:	687b      	ldr	r3, [r7, #4]
   19160:	685b      	ldr	r3, [r3, #4]
   19162:	689b      	ldr	r3, [r3, #8]
   19164:	492a      	ldr	r1, [pc, #168]	; (19210 <SubscribeHandlerLedTopic+0xd8>)
   19166:	2001      	movs	r0, #1
   19168:	4c2a      	ldr	r4, [pc, #168]	; (19214 <SubscribeHandlerLedTopic+0xdc>)
   1916a:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   1916c:	687b      	ldr	r3, [r7, #4]
   1916e:	681b      	ldr	r3, [r3, #0]
   19170:	689b      	ldr	r3, [r3, #8]
   19172:	4929      	ldr	r1, [pc, #164]	; (19218 <SubscribeHandlerLedTopic+0xe0>)
   19174:	2204      	movs	r2, #4
   19176:	0018      	movs	r0, r3
   19178:	4b28      	ldr	r3, [pc, #160]	; (1921c <SubscribeHandlerLedTopic+0xe4>)
   1917a:	4798      	blx	r3
   1917c:	1e03      	subs	r3, r0, #0
   1917e:	d143      	bne.n	19208 <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   19180:	687b      	ldr	r3, [r7, #4]
   19182:	681b      	ldr	r3, [r3, #0]
   19184:	689b      	ldr	r3, [r3, #8]
   19186:	3304      	adds	r3, #4
   19188:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   1918a:	2300      	movs	r3, #0
   1918c:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   1918e:	e015      	b.n	191bc <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   19190:	697c      	ldr	r4, [r7, #20]
   19192:	1c63      	adds	r3, r4, #1
   19194:	617b      	str	r3, [r7, #20]
   19196:	68fb      	ldr	r3, [r7, #12]
   19198:	220c      	movs	r2, #12
   1919a:	18b9      	adds	r1, r7, r2
   1919c:	220a      	movs	r2, #10
   1919e:	0018      	movs	r0, r3
   191a0:	4b1f      	ldr	r3, [pc, #124]	; (19220 <SubscribeHandlerLedTopic+0xe8>)
   191a2:	4798      	blx	r3
   191a4:	0003      	movs	r3, r0
   191a6:	b2da      	uxtb	r2, r3
   191a8:	2310      	movs	r3, #16
   191aa:	18fb      	adds	r3, r7, r3
   191ac:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   191ae:	68fb      	ldr	r3, [r7, #12]
   191b0:	781b      	ldrb	r3, [r3, #0]
   191b2:	2b2c      	cmp	r3, #44	; 0x2c
   191b4:	d10a      	bne.n	191cc <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   191b6:	68fb      	ldr	r3, [r7, #12]
   191b8:	3301      	adds	r3, #1
   191ba:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   191bc:	697b      	ldr	r3, [r7, #20]
   191be:	2b02      	cmp	r3, #2
   191c0:	dc05      	bgt.n	191ce <SubscribeHandlerLedTopic+0x96>
   191c2:	68fb      	ldr	r3, [r7, #12]
   191c4:	781b      	ldrb	r3, [r3, #0]
   191c6:	2b00      	cmp	r3, #0
   191c8:	d1e2      	bne.n	19190 <SubscribeHandlerLedTopic+0x58>
   191ca:	e000      	b.n	191ce <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   191cc:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   191ce:	2310      	movs	r3, #16
   191d0:	18fb      	adds	r3, r7, r3
   191d2:	781b      	ldrb	r3, [r3, #0]
   191d4:	001a      	movs	r2, r3
   191d6:	2310      	movs	r3, #16
   191d8:	18fb      	adds	r3, r7, r3
   191da:	785b      	ldrb	r3, [r3, #1]
   191dc:	0018      	movs	r0, r3
   191de:	2310      	movs	r3, #16
   191e0:	18fb      	adds	r3, r7, r3
   191e2:	789b      	ldrb	r3, [r3, #2]
   191e4:	490f      	ldr	r1, [pc, #60]	; (19224 <SubscribeHandlerLedTopic+0xec>)
   191e6:	9300      	str	r3, [sp, #0]
   191e8:	0003      	movs	r3, r0
   191ea:	2001      	movs	r0, #1
   191ec:	4c09      	ldr	r4, [pc, #36]	; (19214 <SubscribeHandlerLedTopic+0xdc>)
   191ee:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   191f0:	2310      	movs	r3, #16
   191f2:	18fb      	adds	r3, r7, r3
   191f4:	7818      	ldrb	r0, [r3, #0]
   191f6:	2310      	movs	r3, #16
   191f8:	18fb      	adds	r3, r7, r3
   191fa:	7859      	ldrb	r1, [r3, #1]
   191fc:	2310      	movs	r3, #16
   191fe:	18fb      	adds	r3, r7, r3
   19200:	789b      	ldrb	r3, [r3, #2]
   19202:	001a      	movs	r2, r3
   19204:	4b08      	ldr	r3, [pc, #32]	; (19228 <SubscribeHandlerLedTopic+0xf0>)
   19206:	4798      	blx	r3
    }
}
   19208:	46c0      	nop			; (mov r8, r8)
   1920a:	46bd      	mov	sp, r7
   1920c:	b007      	add	sp, #28
   1920e:	bd90      	pop	{r4, r7, pc}
   19210:	00039a4c 	.word	0x00039a4c
   19214:	00020831 	.word	0x00020831
   19218:	00039a54 	.word	0x00039a54
   1921c:	00037cc9 	.word	0x00037cc9
   19220:	00037e75 	.word	0x00037e75
   19224:	00039a5c 	.word	0x00039a5c
   19228:	000184c1 	.word	0x000184c1

0001922c <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   1922c:	b590      	push	{r4, r7, lr}
   1922e:	b08b      	sub	sp, #44	; 0x2c
   19230:	af00      	add	r7, sp, #0
   19232:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   19234:	230c      	movs	r3, #12
   19236:	18fb      	adds	r3, r7, r3
   19238:	2214      	movs	r2, #20
   1923a:	21ff      	movs	r1, #255	; 0xff
   1923c:	0018      	movs	r0, r3
   1923e:	4b48      	ldr	r3, [pc, #288]	; (19360 <SubscribeHandlerGameTopic+0x134>)
   19240:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   19242:	687b      	ldr	r3, [r7, #4]
   19244:	681b      	ldr	r3, [r3, #0]
   19246:	689b      	ldr	r3, [r3, #8]
   19248:	4946      	ldr	r1, [pc, #280]	; (19364 <SubscribeHandlerGameTopic+0x138>)
   1924a:	2209      	movs	r2, #9
   1924c:	0018      	movs	r0, r3
   1924e:	4b46      	ldr	r3, [pc, #280]	; (19368 <SubscribeHandlerGameTopic+0x13c>)
   19250:	4798      	blx	r3
   19252:	1e03      	subs	r3, r0, #0
   19254:	d166      	bne.n	19324 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   19256:	4b45      	ldr	r3, [pc, #276]	; (1936c <SubscribeHandlerGameTopic+0x140>)
   19258:	0019      	movs	r1, r3
   1925a:	2001      	movs	r0, #1
   1925c:	4b44      	ldr	r3, [pc, #272]	; (19370 <SubscribeHandlerGameTopic+0x144>)
   1925e:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   19260:	687b      	ldr	r3, [r7, #4]
   19262:	685b      	ldr	r3, [r3, #4]
   19264:	685a      	ldr	r2, [r3, #4]
   19266:	687b      	ldr	r3, [r7, #4]
   19268:	685b      	ldr	r3, [r3, #4]
   1926a:	689b      	ldr	r3, [r3, #8]
   1926c:	4941      	ldr	r1, [pc, #260]	; (19374 <SubscribeHandlerGameTopic+0x148>)
   1926e:	2001      	movs	r0, #1
   19270:	4c3f      	ldr	r4, [pc, #252]	; (19370 <SubscribeHandlerGameTopic+0x144>)
   19272:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   19274:	687b      	ldr	r3, [r7, #4]
   19276:	681b      	ldr	r3, [r3, #0]
   19278:	68da      	ldr	r2, [r3, #12]
   1927a:	687b      	ldr	r3, [r7, #4]
   1927c:	681b      	ldr	r3, [r3, #0]
   1927e:	689b      	ldr	r3, [r3, #8]
   19280:	493d      	ldr	r1, [pc, #244]	; (19378 <SubscribeHandlerGameTopic+0x14c>)
   19282:	2001      	movs	r0, #1
   19284:	4c3a      	ldr	r4, [pc, #232]	; (19370 <SubscribeHandlerGameTopic+0x144>)
   19286:	47a0      	blx	r4

        int nb = 0;
   19288:	2300      	movs	r3, #0
   1928a:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   1928c:	687b      	ldr	r3, [r7, #4]
   1928e:	681b      	ldr	r3, [r3, #0]
   19290:	689b      	ldr	r3, [r3, #8]
   19292:	3309      	adds	r3, #9
   19294:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   19296:	e015      	b.n	192c4 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   19298:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1929a:	1c63      	adds	r3, r4, #1
   1929c:	627b      	str	r3, [r7, #36]	; 0x24
   1929e:	68bb      	ldr	r3, [r7, #8]
   192a0:	2208      	movs	r2, #8
   192a2:	18b9      	adds	r1, r7, r2
   192a4:	220a      	movs	r2, #10
   192a6:	0018      	movs	r0, r3
   192a8:	4b34      	ldr	r3, [pc, #208]	; (1937c <SubscribeHandlerGameTopic+0x150>)
   192aa:	4798      	blx	r3
   192ac:	0003      	movs	r3, r0
   192ae:	b2da      	uxtb	r2, r3
   192b0:	230c      	movs	r3, #12
   192b2:	18fb      	adds	r3, r7, r3
   192b4:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   192b6:	68bb      	ldr	r3, [r7, #8]
   192b8:	781b      	ldrb	r3, [r3, #0]
   192ba:	2b2c      	cmp	r3, #44	; 0x2c
   192bc:	d10a      	bne.n	192d4 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   192be:	68bb      	ldr	r3, [r7, #8]
   192c0:	3301      	adds	r3, #1
   192c2:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   192c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   192c6:	2b13      	cmp	r3, #19
   192c8:	dc05      	bgt.n	192d6 <SubscribeHandlerGameTopic+0xaa>
   192ca:	68bb      	ldr	r3, [r7, #8]
   192cc:	781b      	ldrb	r3, [r3, #0]
   192ce:	2b00      	cmp	r3, #0
   192d0:	d1e2      	bne.n	19298 <SubscribeHandlerGameTopic+0x6c>
   192d2:	e000      	b.n	192d6 <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   192d4:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   192d6:	4b2a      	ldr	r3, [pc, #168]	; (19380 <SubscribeHandlerGameTopic+0x154>)
   192d8:	0019      	movs	r1, r3
   192da:	2001      	movs	r0, #1
   192dc:	4b24      	ldr	r3, [pc, #144]	; (19370 <SubscribeHandlerGameTopic+0x144>)
   192de:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   192e0:	2300      	movs	r3, #0
   192e2:	623b      	str	r3, [r7, #32]
   192e4:	e00d      	b.n	19302 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   192e6:	230c      	movs	r3, #12
   192e8:	18fa      	adds	r2, r7, r3
   192ea:	6a3b      	ldr	r3, [r7, #32]
   192ec:	18d3      	adds	r3, r2, r3
   192ee:	781b      	ldrb	r3, [r3, #0]
   192f0:	001a      	movs	r2, r3
   192f2:	4b24      	ldr	r3, [pc, #144]	; (19384 <SubscribeHandlerGameTopic+0x158>)
   192f4:	0019      	movs	r1, r3
   192f6:	2001      	movs	r0, #1
   192f8:	4b1d      	ldr	r3, [pc, #116]	; (19370 <SubscribeHandlerGameTopic+0x144>)
   192fa:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   192fc:	6a3b      	ldr	r3, [r7, #32]
   192fe:	3301      	adds	r3, #1
   19300:	623b      	str	r3, [r7, #32]
   19302:	6a3b      	ldr	r3, [r7, #32]
   19304:	2b13      	cmp	r3, #19
   19306:	ddee      	ble.n	192e6 <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   19308:	230c      	movs	r3, #12
   1930a:	18fb      	adds	r3, r7, r3
   1930c:	0018      	movs	r0, r3
   1930e:	4b1e      	ldr	r3, [pc, #120]	; (19388 <SubscribeHandlerGameTopic+0x15c>)
   19310:	4798      	blx	r3
   19312:	0003      	movs	r3, r0
   19314:	2b01      	cmp	r3, #1
   19316:	d11e      	bne.n	19356 <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   19318:	4b1c      	ldr	r3, [pc, #112]	; (1938c <SubscribeHandlerGameTopic+0x160>)
   1931a:	0019      	movs	r1, r3
   1931c:	2001      	movs	r0, #1
   1931e:	4b14      	ldr	r3, [pc, #80]	; (19370 <SubscribeHandlerGameTopic+0x144>)
   19320:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   19322:	e018      	b.n	19356 <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   19324:	4b1a      	ldr	r3, [pc, #104]	; (19390 <SubscribeHandlerGameTopic+0x164>)
   19326:	0019      	movs	r1, r3
   19328:	2001      	movs	r0, #1
   1932a:	4b11      	ldr	r3, [pc, #68]	; (19370 <SubscribeHandlerGameTopic+0x144>)
   1932c:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1932e:	687b      	ldr	r3, [r7, #4]
   19330:	685b      	ldr	r3, [r3, #4]
   19332:	685a      	ldr	r2, [r3, #4]
   19334:	687b      	ldr	r3, [r7, #4]
   19336:	685b      	ldr	r3, [r3, #4]
   19338:	689b      	ldr	r3, [r3, #8]
   1933a:	490e      	ldr	r1, [pc, #56]	; (19374 <SubscribeHandlerGameTopic+0x148>)
   1933c:	2001      	movs	r0, #1
   1933e:	4c0c      	ldr	r4, [pc, #48]	; (19370 <SubscribeHandlerGameTopic+0x144>)
   19340:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   19342:	687b      	ldr	r3, [r7, #4]
   19344:	681b      	ldr	r3, [r3, #0]
   19346:	68da      	ldr	r2, [r3, #12]
   19348:	687b      	ldr	r3, [r7, #4]
   1934a:	681b      	ldr	r3, [r3, #0]
   1934c:	689b      	ldr	r3, [r3, #8]
   1934e:	490a      	ldr	r1, [pc, #40]	; (19378 <SubscribeHandlerGameTopic+0x14c>)
   19350:	2001      	movs	r0, #1
   19352:	4c07      	ldr	r4, [pc, #28]	; (19370 <SubscribeHandlerGameTopic+0x144>)
   19354:	47a0      	blx	r4
}
   19356:	46c0      	nop			; (mov r8, r8)
   19358:	46bd      	mov	sp, r7
   1935a:	b00b      	add	sp, #44	; 0x2c
   1935c:	bd90      	pop	{r4, r7, pc}
   1935e:	46c0      	nop			; (mov r8, r8)
   19360:	00037903 	.word	0x00037903
   19364:	00039a70 	.word	0x00039a70
   19368:	00037cc9 	.word	0x00037cc9
   1936c:	00039a7c 	.word	0x00039a7c
   19370:	00020831 	.word	0x00020831
   19374:	00039a4c 	.word	0x00039a4c
   19378:	00039a98 	.word	0x00039a98
   1937c:	00037e75 	.word	0x00037e75
   19380:	00039aa0 	.word	0x00039aa0
   19384:	00039ab4 	.word	0x00039ab4
   19388:	000159e1 	.word	0x000159e1
   1938c:	00039ab8 	.word	0x00039ab8
   19390:	00039ad4 	.word	0x00039ad4

00019394 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   19394:	b590      	push	{r4, r7, lr}
   19396:	b083      	sub	sp, #12
   19398:	af00      	add	r7, sp, #0
   1939a:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
   1939c:	4b09      	ldr	r3, [pc, #36]	; (193c4 <SubscribeHandlerImuTopic+0x30>)
   1939e:	0019      	movs	r1, r3
   193a0:	2001      	movs	r0, #1
   193a2:	4b09      	ldr	r3, [pc, #36]	; (193c8 <SubscribeHandlerImuTopic+0x34>)
   193a4:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   193a6:	687b      	ldr	r3, [r7, #4]
   193a8:	685b      	ldr	r3, [r3, #4]
   193aa:	685a      	ldr	r2, [r3, #4]
   193ac:	687b      	ldr	r3, [r7, #4]
   193ae:	685b      	ldr	r3, [r3, #4]
   193b0:	689b      	ldr	r3, [r3, #8]
   193b2:	4906      	ldr	r1, [pc, #24]	; (193cc <SubscribeHandlerImuTopic+0x38>)
   193b4:	2001      	movs	r0, #1
   193b6:	4c04      	ldr	r4, [pc, #16]	; (193c8 <SubscribeHandlerImuTopic+0x34>)
   193b8:	47a0      	blx	r4
}
   193ba:	46c0      	nop			; (mov r8, r8)
   193bc:	46bd      	mov	sp, r7
   193be:	b003      	add	sp, #12
   193c0:	bd90      	pop	{r4, r7, pc}
   193c2:	46c0      	nop			; (mov r8, r8)
   193c4:	00039b04 	.word	0x00039b04
   193c8:	00020831 	.word	0x00020831
   193cc:	00039a4c 	.word	0x00039a4c

000193d0 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   193d0:	b590      	push	{r4, r7, lr}
   193d2:	b08b      	sub	sp, #44	; 0x2c
   193d4:	af06      	add	r7, sp, #24
   193d6:	60f8      	str	r0, [r7, #12]
   193d8:	60b9      	str	r1, [r7, #8]
   193da:	607a      	str	r2, [r7, #4]
    switch (type) {
   193dc:	68bb      	ldr	r3, [r7, #8]
   193de:	2b01      	cmp	r3, #1
   193e0:	d03b      	beq.n	1945a <mqtt_callback+0x8a>
   193e2:	2b05      	cmp	r3, #5
   193e4:	d05e      	beq.n	194a4 <mqtt_callback+0xd4>
   193e6:	2b00      	cmp	r3, #0
   193e8:	d000      	beq.n	193ec <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   193ea:	e061      	b.n	194b0 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   193ec:	687b      	ldr	r3, [r7, #4]
   193ee:	681b      	ldr	r3, [r3, #0]
   193f0:	2b00      	cmp	r3, #0
   193f2:	db25      	blt.n	19440 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   193f4:	4b30      	ldr	r3, [pc, #192]	; (194b8 <mqtt_callback+0xe8>)
   193f6:	0019      	movs	r1, r3
   193f8:	2001      	movs	r0, #1
   193fa:	4b30      	ldr	r3, [pc, #192]	; (194bc <mqtt_callback+0xec>)
   193fc:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   193fe:	4930      	ldr	r1, [pc, #192]	; (194c0 <mqtt_callback+0xf0>)
   19400:	4a30      	ldr	r2, [pc, #192]	; (194c4 <mqtt_callback+0xf4>)
   19402:	68f8      	ldr	r0, [r7, #12]
   19404:	2300      	movs	r3, #0
   19406:	9305      	str	r3, [sp, #20]
   19408:	2300      	movs	r3, #0
   1940a:	9304      	str	r3, [sp, #16]
   1940c:	2300      	movs	r3, #0
   1940e:	9303      	str	r3, [sp, #12]
   19410:	2300      	movs	r3, #0
   19412:	9302      	str	r3, [sp, #8]
   19414:	2300      	movs	r3, #0
   19416:	9301      	str	r3, [sp, #4]
   19418:	4b2a      	ldr	r3, [pc, #168]	; (194c4 <mqtt_callback+0xf4>)
   1941a:	9300      	str	r3, [sp, #0]
   1941c:	000b      	movs	r3, r1
   1941e:	2101      	movs	r1, #1
   19420:	4c29      	ldr	r4, [pc, #164]	; (194c8 <mqtt_callback+0xf8>)
   19422:	47a0      	blx	r4
   19424:	1e03      	subs	r3, r0, #0
   19426:	d005      	beq.n	19434 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   19428:	4b28      	ldr	r3, [pc, #160]	; (194cc <mqtt_callback+0xfc>)
   1942a:	0019      	movs	r1, r3
   1942c:	2001      	movs	r0, #1
   1942e:	4b23      	ldr	r3, [pc, #140]	; (194bc <mqtt_callback+0xec>)
   19430:	4798      	blx	r3
        } break;
   19432:	e03d      	b.n	194b0 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   19434:	4b26      	ldr	r3, [pc, #152]	; (194d0 <mqtt_callback+0x100>)
   19436:	0019      	movs	r1, r3
   19438:	2001      	movs	r0, #1
   1943a:	4b20      	ldr	r3, [pc, #128]	; (194bc <mqtt_callback+0xec>)
   1943c:	4798      	blx	r3
        } break;
   1943e:	e037      	b.n	194b0 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   19440:	4a24      	ldr	r2, [pc, #144]	; (194d4 <mqtt_callback+0x104>)
   19442:	4b25      	ldr	r3, [pc, #148]	; (194d8 <mqtt_callback+0x108>)
   19444:	0019      	movs	r1, r3
   19446:	2001      	movs	r0, #1
   19448:	4b1c      	ldr	r3, [pc, #112]	; (194bc <mqtt_callback+0xec>)
   1944a:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   1944c:	4a21      	ldr	r2, [pc, #132]	; (194d4 <mqtt_callback+0x104>)
   1944e:	68fb      	ldr	r3, [r7, #12]
   19450:	0011      	movs	r1, r2
   19452:	0018      	movs	r0, r3
   19454:	4b21      	ldr	r3, [pc, #132]	; (194dc <mqtt_callback+0x10c>)
   19456:	4798      	blx	r3
        } break;
   19458:	e02a      	b.n	194b0 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   1945a:	687b      	ldr	r3, [r7, #4]
   1945c:	781b      	ldrb	r3, [r3, #0]
   1945e:	2b00      	cmp	r3, #0
   19460:	d117      	bne.n	19492 <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 0, SubscribeHandlerGameTopic);
   19462:	4b1f      	ldr	r3, [pc, #124]	; (194e0 <mqtt_callback+0x110>)
   19464:	491f      	ldr	r1, [pc, #124]	; (194e4 <mqtt_callback+0x114>)
   19466:	68f8      	ldr	r0, [r7, #12]
   19468:	2200      	movs	r2, #0
   1946a:	4c1f      	ldr	r4, [pc, #124]	; (194e8 <mqtt_callback+0x118>)
   1946c:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 0, SubscribeHandlerLedTopic);
   1946e:	4b1f      	ldr	r3, [pc, #124]	; (194ec <mqtt_callback+0x11c>)
   19470:	491f      	ldr	r1, [pc, #124]	; (194f0 <mqtt_callback+0x120>)
   19472:	68f8      	ldr	r0, [r7, #12]
   19474:	2200      	movs	r2, #0
   19476:	4c1c      	ldr	r4, [pc, #112]	; (194e8 <mqtt_callback+0x118>)
   19478:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 0, SubscribeHandlerImuTopic);
   1947a:	4b1e      	ldr	r3, [pc, #120]	; (194f4 <mqtt_callback+0x124>)
   1947c:	491e      	ldr	r1, [pc, #120]	; (194f8 <mqtt_callback+0x128>)
   1947e:	68f8      	ldr	r0, [r7, #12]
   19480:	2200      	movs	r2, #0
   19482:	4c19      	ldr	r4, [pc, #100]	; (194e8 <mqtt_callback+0x118>)
   19484:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   19486:	4b1d      	ldr	r3, [pc, #116]	; (194fc <mqtt_callback+0x12c>)
   19488:	0019      	movs	r1, r3
   1948a:	2001      	movs	r0, #1
   1948c:	4b0b      	ldr	r3, [pc, #44]	; (194bc <mqtt_callback+0xec>)
   1948e:	4798      	blx	r3
            break;
   19490:	e00e      	b.n	194b0 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   19492:	687b      	ldr	r3, [r7, #4]
   19494:	781b      	ldrb	r3, [r3, #0]
   19496:	001a      	movs	r2, r3
   19498:	4b19      	ldr	r3, [pc, #100]	; (19500 <mqtt_callback+0x130>)
   1949a:	0019      	movs	r1, r3
   1949c:	2001      	movs	r0, #1
   1949e:	4b07      	ldr	r3, [pc, #28]	; (194bc <mqtt_callback+0xec>)
   194a0:	4798      	blx	r3
            break;
   194a2:	e005      	b.n	194b0 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   194a4:	4b17      	ldr	r3, [pc, #92]	; (19504 <mqtt_callback+0x134>)
   194a6:	0019      	movs	r1, r3
   194a8:	2001      	movs	r0, #1
   194aa:	4b04      	ldr	r3, [pc, #16]	; (194bc <mqtt_callback+0xec>)
   194ac:	4798      	blx	r3
            break;
   194ae:	46c0      	nop			; (mov r8, r8)
}
   194b0:	46c0      	nop			; (mov r8, r8)
   194b2:	46bd      	mov	sp, r7
   194b4:	b005      	add	sp, #20
   194b6:	bd90      	pop	{r4, r7, pc}
   194b8:	00039b68 	.word	0x00039b68
   194bc:	00020831 	.word	0x00020831
   194c0:	00039b84 	.word	0x00039b84
   194c4:	00039b94 	.word	0x00039b94
   194c8:	00032295 	.word	0x00032295
   194cc:	00039ba0 	.word	0x00039ba0
   194d0:	00039bc8 	.word	0x00039bc8
   194d4:	000394cc 	.word	0x000394cc
   194d8:	00039be4 	.word	0x00039be4
   194dc:	0003224d 	.word	0x0003224d
   194e0:	0001922d 	.word	0x0001922d
   194e4:	00039c1c 	.word	0x00039c1c
   194e8:	00032435 	.word	0x00032435
   194ec:	00019139 	.word	0x00019139
   194f0:	00039b44 	.word	0x00039b44
   194f4:	00019395 	.word	0x00019395
   194f8:	00039c34 	.word	0x00039c34
   194fc:	00039c48 	.word	0x00039c48
   19500:	00039c5c 	.word	0x00039c5c
   19504:	00039c90 	.word	0x00039c90

00019508 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   19508:	b580      	push	{r7, lr}
   1950a:	b088      	sub	sp, #32
   1950c:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   1950e:	1d3b      	adds	r3, r7, #4
   19510:	0018      	movs	r0, r3
   19512:	4b1f      	ldr	r3, [pc, #124]	; (19590 <configure_mqtt+0x88>)
   19514:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   19516:	1d3b      	adds	r3, r7, #4
   19518:	4a1e      	ldr	r2, [pc, #120]	; (19594 <configure_mqtt+0x8c>)
   1951a:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1951c:	1d3b      	adds	r3, r7, #4
   1951e:	2280      	movs	r2, #128	; 0x80
   19520:	0092      	lsls	r2, r2, #2
   19522:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   19524:	1d3b      	adds	r3, r7, #4
   19526:	4a1c      	ldr	r2, [pc, #112]	; (19598 <configure_mqtt+0x90>)
   19528:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1952a:	1d3b      	adds	r3, r7, #4
   1952c:	2280      	movs	r2, #128	; 0x80
   1952e:	0092      	lsls	r2, r2, #2
   19530:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   19532:	1d3b      	adds	r3, r7, #4
   19534:	4a19      	ldr	r2, [pc, #100]	; (1959c <configure_mqtt+0x94>)
   19536:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   19538:	1d3b      	adds	r3, r7, #4
   1953a:	4a19      	ldr	r2, [pc, #100]	; (195a0 <configure_mqtt+0x98>)
   1953c:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   1953e:	1d3a      	adds	r2, r7, #4
   19540:	4b18      	ldr	r3, [pc, #96]	; (195a4 <configure_mqtt+0x9c>)
   19542:	0011      	movs	r1, r2
   19544:	0018      	movs	r0, r3
   19546:	4b18      	ldr	r3, [pc, #96]	; (195a8 <configure_mqtt+0xa0>)
   19548:	4798      	blx	r3
   1954a:	0003      	movs	r3, r0
   1954c:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   1954e:	69fb      	ldr	r3, [r7, #28]
   19550:	2b00      	cmp	r3, #0
   19552:	da06      	bge.n	19562 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   19554:	69fa      	ldr	r2, [r7, #28]
   19556:	4b15      	ldr	r3, [pc, #84]	; (195ac <configure_mqtt+0xa4>)
   19558:	0019      	movs	r1, r3
   1955a:	2001      	movs	r0, #1
   1955c:	4b14      	ldr	r3, [pc, #80]	; (195b0 <configure_mqtt+0xa8>)
   1955e:	4798      	blx	r3
        while (1) {
   19560:	e7fe      	b.n	19560 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   19562:	4a14      	ldr	r2, [pc, #80]	; (195b4 <configure_mqtt+0xac>)
   19564:	4b0f      	ldr	r3, [pc, #60]	; (195a4 <configure_mqtt+0x9c>)
   19566:	0011      	movs	r1, r2
   19568:	0018      	movs	r0, r3
   1956a:	4b13      	ldr	r3, [pc, #76]	; (195b8 <configure_mqtt+0xb0>)
   1956c:	4798      	blx	r3
   1956e:	0003      	movs	r3, r0
   19570:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   19572:	69fb      	ldr	r3, [r7, #28]
   19574:	2b00      	cmp	r3, #0
   19576:	da06      	bge.n	19586 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   19578:	69fa      	ldr	r2, [r7, #28]
   1957a:	4b10      	ldr	r3, [pc, #64]	; (195bc <configure_mqtt+0xb4>)
   1957c:	0019      	movs	r1, r3
   1957e:	2001      	movs	r0, #1
   19580:	4b0b      	ldr	r3, [pc, #44]	; (195b0 <configure_mqtt+0xa8>)
   19582:	4798      	blx	r3
        while (1) {
   19584:	e7fe      	b.n	19584 <configure_mqtt+0x7c>
        }
    }
}
   19586:	46c0      	nop			; (mov r8, r8)
   19588:	46bd      	mov	sp, r7
   1958a:	b008      	add	sp, #32
   1958c:	bd80      	pop	{r7, pc}
   1958e:	46c0      	nop			; (mov r8, r8)
   19590:	0003218d 	.word	0x0003218d
   19594:	200007fc 	.word	0x200007fc
   19598:	200009fc 	.word	0x200009fc
   1959c:	0000075b 	.word	0x0000075b
   195a0:	00001770 	.word	0x00001770
   195a4:	200007c4 	.word	0x200007c4
   195a8:	000320dd 	.word	0x000320dd
   195ac:	00039ca4 	.word	0x00039ca4
   195b0:	00020831 	.word	0x00020831
   195b4:	000193d1 	.word	0x000193d1
   195b8:	000321cd 	.word	0x000321cd
   195bc:	00039cd8 	.word	0x00039cd8

000195c0 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   195c0:	b580      	push	{r7, lr}
   195c2:	b084      	sub	sp, #16
   195c4:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   195c6:	1d3b      	adds	r3, r7, #4
   195c8:	0018      	movs	r0, r3
   195ca:	4b0b      	ldr	r3, [pc, #44]	; (195f8 <configure_extint_channel+0x38>)
   195cc:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   195ce:	1d3b      	adds	r3, r7, #4
   195d0:	2237      	movs	r2, #55	; 0x37
   195d2:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   195d4:	1d3b      	adds	r3, r7, #4
   195d6:	2200      	movs	r2, #0
   195d8:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   195da:	1d3b      	adds	r3, r7, #4
   195dc:	2201      	movs	r2, #1
   195de:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   195e0:	1d3b      	adds	r3, r7, #4
   195e2:	2202      	movs	r2, #2
   195e4:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   195e6:	1d3b      	adds	r3, r7, #4
   195e8:	0019      	movs	r1, r3
   195ea:	2007      	movs	r0, #7
   195ec:	4b03      	ldr	r3, [pc, #12]	; (195fc <configure_extint_channel+0x3c>)
   195ee:	4798      	blx	r3
}
   195f0:	46c0      	nop			; (mov r8, r8)
   195f2:	46bd      	mov	sp, r7
   195f4:	b004      	add	sp, #16
   195f6:	bd80      	pop	{r7, pc}
   195f8:	000292c5 	.word	0x000292c5
   195fc:	000292f9 	.word	0x000292f9

00019600 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   19600:	b580      	push	{r7, lr}
   19602:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   19604:	4b06      	ldr	r3, [pc, #24]	; (19620 <configure_extint_callbacks+0x20>)
   19606:	2200      	movs	r2, #0
   19608:	2107      	movs	r1, #7
   1960a:	0018      	movs	r0, r3
   1960c:	4b05      	ldr	r3, [pc, #20]	; (19624 <configure_extint_callbacks+0x24>)
   1960e:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   19610:	2100      	movs	r1, #0
   19612:	2007      	movs	r0, #7
   19614:	4b04      	ldr	r3, [pc, #16]	; (19628 <configure_extint_callbacks+0x28>)
   19616:	4798      	blx	r3
}
   19618:	46c0      	nop			; (mov r8, r8)
   1961a:	46bd      	mov	sp, r7
   1961c:	bd80      	pop	{r7, pc}
   1961e:	46c0      	nop			; (mov r8, r8)
   19620:	0001962d 	.word	0x0001962d
   19624:	00028ec5 	.word	0x00028ec5
   19628:	00028f29 	.word	0x00028f29

0001962c <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   1962c:	b5b0      	push	{r4, r5, r7, lr}
   1962e:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   19630:	4b0c      	ldr	r3, [pc, #48]	; (19664 <extint_detection_callback+0x38>)
   19632:	681b      	ldr	r3, [r3, #0]
   19634:	1c5a      	adds	r2, r3, #1
   19636:	4b0b      	ldr	r3, [pc, #44]	; (19664 <extint_detection_callback+0x38>)
   19638:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   1963a:	4b0a      	ldr	r3, [pc, #40]	; (19664 <extint_detection_callback+0x38>)
   1963c:	681b      	ldr	r3, [r3, #0]
   1963e:	2b28      	cmp	r3, #40	; 0x28
   19640:	d902      	bls.n	19648 <extint_detection_callback+0x1c>
   19642:	4b08      	ldr	r3, [pc, #32]	; (19664 <extint_detection_callback+0x38>)
   19644:	2201      	movs	r2, #1
   19646:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   19648:	4b06      	ldr	r3, [pc, #24]	; (19664 <extint_detection_callback+0x38>)
   1964a:	681b      	ldr	r3, [r3, #0]
   1964c:	4a06      	ldr	r2, [pc, #24]	; (19668 <extint_detection_callback+0x3c>)
   1964e:	4807      	ldr	r0, [pc, #28]	; (1966c <extint_detection_callback+0x40>)
   19650:	213f      	movs	r1, #63	; 0x3f
   19652:	4c07      	ldr	r4, [pc, #28]	; (19670 <extint_detection_callback+0x44>)
   19654:	47a0      	blx	r4
    isPressed = true;
   19656:	4b07      	ldr	r3, [pc, #28]	; (19674 <extint_detection_callback+0x48>)
   19658:	2201      	movs	r2, #1
   1965a:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   1965c:	46c0      	nop			; (mov r8, r8)
   1965e:	46bd      	mov	sp, r7
   19660:	bdb0      	pop	{r4, r5, r7, pc}
   19662:	46c0      	nop			; (mov r8, r8)
   19664:	200000a4 	.word	0x200000a4
   19668:	00039d0c 	.word	0x00039d0c
   1966c:	20000064 	.word	0x20000064
   19670:	00037b5d 	.word	0x00037b5d
   19674:	20000bfc 	.word	0x20000bfc

00019678 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   19678:	b580      	push	{r7, lr}
   1967a:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   1967c:	4a15      	ldr	r2, [pc, #84]	; (196d4 <HTTP_DownloadFileInit+0x5c>)
   1967e:	4b16      	ldr	r3, [pc, #88]	; (196d8 <HTTP_DownloadFileInit+0x60>)
   19680:	0011      	movs	r1, r2
   19682:	0018      	movs	r0, r3
   19684:	4b15      	ldr	r3, [pc, #84]	; (196dc <HTTP_DownloadFileInit+0x64>)
   19686:	4798      	blx	r3
   19688:	1e03      	subs	r3, r0, #0
   1968a:	d008      	beq.n	1969e <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   1968c:	4b14      	ldr	r3, [pc, #80]	; (196e0 <HTTP_DownloadFileInit+0x68>)
   1968e:	0019      	movs	r1, r3
   19690:	2001      	movs	r0, #1
   19692:	4b14      	ldr	r3, [pc, #80]	; (196e4 <HTTP_DownloadFileInit+0x6c>)
   19694:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   19696:	e002      	b.n	1969e <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   19698:	2000      	movs	r0, #0
   1969a:	4b13      	ldr	r3, [pc, #76]	; (196e8 <HTTP_DownloadFileInit+0x70>)
   1969c:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   1969e:	4b0e      	ldr	r3, [pc, #56]	; (196d8 <HTTP_DownloadFileInit+0x60>)
   196a0:	2234      	movs	r2, #52	; 0x34
   196a2:	5c9b      	ldrb	r3, [r3, r2]
   196a4:	2b00      	cmp	r3, #0
   196a6:	d1f7      	bne.n	19698 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   196a8:	4b10      	ldr	r3, [pc, #64]	; (196ec <HTTP_DownloadFileInit+0x74>)
   196aa:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   196ac:	4b10      	ldr	r3, [pc, #64]	; (196f0 <HTTP_DownloadFileInit+0x78>)
   196ae:	2201      	movs	r2, #1
   196b0:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   196b2:	4a10      	ldr	r2, [pc, #64]	; (196f4 <HTTP_DownloadFileInit+0x7c>)
   196b4:	4b10      	ldr	r3, [pc, #64]	; (196f8 <HTTP_DownloadFileInit+0x80>)
   196b6:	0011      	movs	r1, r2
   196b8:	0018      	movs	r0, r3
   196ba:	4b10      	ldr	r3, [pc, #64]	; (196fc <HTTP_DownloadFileInit+0x84>)
   196bc:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   196be:	4b10      	ldr	r3, [pc, #64]	; (19700 <HTTP_DownloadFileInit+0x88>)
   196c0:	4798      	blx	r3

    start_download();
   196c2:	4b10      	ldr	r3, [pc, #64]	; (19704 <HTTP_DownloadFileInit+0x8c>)
   196c4:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   196c6:	4b10      	ldr	r3, [pc, #64]	; (19708 <HTTP_DownloadFileInit+0x90>)
   196c8:	2203      	movs	r2, #3
   196ca:	701a      	strb	r2, [r3, #0]
}
   196cc:	46c0      	nop			; (mov r8, r8)
   196ce:	46bd      	mov	sp, r7
   196d0:	bd80      	pop	{r7, pc}
   196d2:	46c0      	nop			; (mov r8, r8)
   196d4:	000394cc 	.word	0x000394cc
   196d8:	200007c4 	.word	0x200007c4
   196dc:	00032381 	.word	0x00032381
   196e0:	000398d4 	.word	0x000398d4
   196e4:	00020831 	.word	0x00020831
   196e8:	000249b5 	.word	0x000249b5
   196ec:	00027f71 	.word	0x00027f71
   196f0:	20000564 	.word	0x20000564
   196f4:	00018d89 	.word	0x00018d89
   196f8:	00018d55 	.word	0x00018d55
   196fc:	00027fb9 	.word	0x00027fb9
   19700:	00027f21 	.word	0x00027f21
   19704:	0001897d 	.word	0x0001897d
   19708:	20000550 	.word	0x20000550

0001970c <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   1970c:	b590      	push	{r4, r7, lr}
   1970e:	b085      	sub	sp, #20
   19710:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   19712:	e009      	b.n	19728 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   19714:	2000      	movs	r0, #0
   19716:	4b2a      	ldr	r3, [pc, #168]	; (197c0 <HTTP_DownloadFileTransaction+0xb4>)
   19718:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   1971a:	4b2a      	ldr	r3, [pc, #168]	; (197c4 <HTTP_DownloadFileTransaction+0xb8>)
   1971c:	0018      	movs	r0, r3
   1971e:	4b2a      	ldr	r3, [pc, #168]	; (197c8 <HTTP_DownloadFileTransaction+0xbc>)
   19720:	4798      	blx	r3
        vTaskDelay(5);
   19722:	2005      	movs	r0, #5
   19724:	4b29      	ldr	r3, [pc, #164]	; (197cc <HTTP_DownloadFileTransaction+0xc0>)
   19726:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   19728:	2010      	movs	r0, #16
   1972a:	4b29      	ldr	r3, [pc, #164]	; (197d0 <HTTP_DownloadFileTransaction+0xc4>)
   1972c:	4798      	blx	r3
   1972e:	0003      	movs	r3, r0
   19730:	001a      	movs	r2, r3
   19732:	2301      	movs	r3, #1
   19734:	4053      	eors	r3, r2
   19736:	b2db      	uxtb	r3, r3
   19738:	2b00      	cmp	r3, #0
   1973a:	d009      	beq.n	19750 <HTTP_DownloadFileTransaction+0x44>
   1973c:	2020      	movs	r0, #32
   1973e:	4b24      	ldr	r3, [pc, #144]	; (197d0 <HTTP_DownloadFileTransaction+0xc4>)
   19740:	4798      	blx	r3
   19742:	0003      	movs	r3, r0
   19744:	001a      	movs	r2, r3
   19746:	2301      	movs	r3, #1
   19748:	4053      	eors	r3, r2
   1974a:	b2db      	uxtb	r3, r3
   1974c:	2b00      	cmp	r3, #0
   1974e:	d1e1      	bne.n	19714 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   19750:	4b20      	ldr	r3, [pc, #128]	; (197d4 <HTTP_DownloadFileTransaction+0xc8>)
   19752:	4798      	blx	r3
    vTaskDelay(1000);
   19754:	23fa      	movs	r3, #250	; 0xfa
   19756:	009b      	lsls	r3, r3, #2
   19758:	0018      	movs	r0, r3
   1975a:	4b1c      	ldr	r3, [pc, #112]	; (197cc <HTTP_DownloadFileTransaction+0xc0>)
   1975c:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   1975e:	4b1e      	ldr	r3, [pc, #120]	; (197d8 <HTTP_DownloadFileTransaction+0xcc>)
   19760:	2200      	movs	r2, #0
   19762:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   19764:	003b      	movs	r3, r7
   19766:	4a1d      	ldr	r2, [pc, #116]	; (197dc <HTTP_DownloadFileTransaction+0xd0>)
   19768:	ca13      	ldmia	r2!, {r0, r1, r4}
   1976a:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1976c:	003b      	movs	r3, r7
   1976e:	2230      	movs	r2, #48	; 0x30
   19770:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   19772:	230f      	movs	r3, #15
   19774:	18fc      	adds	r4, r7, r3
   19776:	0039      	movs	r1, r7
   19778:	4b19      	ldr	r3, [pc, #100]	; (197e0 <HTTP_DownloadFileTransaction+0xd4>)
   1977a:	220a      	movs	r2, #10
   1977c:	0018      	movs	r0, r3
   1977e:	4b19      	ldr	r3, [pc, #100]	; (197e4 <HTTP_DownloadFileTransaction+0xd8>)
   19780:	4798      	blx	r3
   19782:	0003      	movs	r3, r0
   19784:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   19786:	230f      	movs	r3, #15
   19788:	18fb      	adds	r3, r7, r3
   1978a:	781b      	ldrb	r3, [r3, #0]
   1978c:	2b00      	cmp	r3, #0
   1978e:	d008      	beq.n	197a2 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   19790:	230f      	movs	r3, #15
   19792:	18fb      	adds	r3, r7, r3
   19794:	781a      	ldrb	r2, [r3, #0]
   19796:	4b14      	ldr	r3, [pc, #80]	; (197e8 <HTTP_DownloadFileTransaction+0xdc>)
   19798:	0019      	movs	r1, r3
   1979a:	2000      	movs	r0, #0
   1979c:	4b13      	ldr	r3, [pc, #76]	; (197ec <HTTP_DownloadFileTransaction+0xe0>)
   1979e:	4798      	blx	r3
   197a0:	e003      	b.n	197aa <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   197a2:	4b13      	ldr	r3, [pc, #76]	; (197f0 <HTTP_DownloadFileTransaction+0xe4>)
   197a4:	0018      	movs	r0, r3
   197a6:	4b13      	ldr	r3, [pc, #76]	; (197f4 <HTTP_DownloadFileTransaction+0xe8>)
   197a8:	4798      	blx	r3
    }
	
	f_close(&file_object);
   197aa:	4b0d      	ldr	r3, [pc, #52]	; (197e0 <HTTP_DownloadFileTransaction+0xd4>)
   197ac:	0018      	movs	r0, r3
   197ae:	4b12      	ldr	r3, [pc, #72]	; (197f8 <HTTP_DownloadFileTransaction+0xec>)
   197b0:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   197b2:	4b12      	ldr	r3, [pc, #72]	; (197fc <HTTP_DownloadFileTransaction+0xf0>)
   197b4:	2200      	movs	r2, #0
   197b6:	701a      	strb	r2, [r3, #0]
}
   197b8:	46c0      	nop			; (mov r8, r8)
   197ba:	46bd      	mov	sp, r7
   197bc:	b005      	add	sp, #20
   197be:	bd90      	pop	{r4, r7, pc}
   197c0:	000249b5 	.word	0x000249b5
   197c4:	20004838 	.word	0x20004838
   197c8:	000350a9 	.word	0x000350a9
   197cc:	0001eaf1 	.word	0x0001eaf1
   197d0:	00018655 	.word	0x00018655
   197d4:	00027f71 	.word	0x00027f71
   197d8:	20000564 	.word	0x20000564
   197dc:	00039d44 	.word	0x00039d44
   197e0:	20000798 	.word	0x20000798
   197e4:	00030371 	.word	0x00030371
   197e8:	00039d20 	.word	0x00039d20
   197ec:	00020831 	.word	0x00020831
   197f0:	00039d30 	.word	0x00039d30
   197f4:	00020745 	.word	0x00020745
   197f8:	00030d71 	.word	0x00030d71
   197fc:	20000550 	.word	0x20000550

00019800 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   19800:	b580      	push	{r7, lr}
   19802:	af00      	add	r7, sp, #0
    socketDeinit();
   19804:	4b18      	ldr	r3, [pc, #96]	; (19868 <MQTT_InitRoutine+0x68>)
   19806:	4798      	blx	r3
    configure_mqtt();
   19808:	4b18      	ldr	r3, [pc, #96]	; (1986c <MQTT_InitRoutine+0x6c>)
   1980a:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   1980c:	4a18      	ldr	r2, [pc, #96]	; (19870 <MQTT_InitRoutine+0x70>)
   1980e:	4b19      	ldr	r3, [pc, #100]	; (19874 <MQTT_InitRoutine+0x74>)
   19810:	0011      	movs	r1, r2
   19812:	0018      	movs	r0, r3
   19814:	4b18      	ldr	r3, [pc, #96]	; (19878 <MQTT_InitRoutine+0x78>)
   19816:	4798      	blx	r3
    socketInit();
   19818:	4b18      	ldr	r3, [pc, #96]	; (1987c <MQTT_InitRoutine+0x7c>)
   1981a:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   1981c:	4b18      	ldr	r3, [pc, #96]	; (19880 <MQTT_InitRoutine+0x80>)
   1981e:	2234      	movs	r2, #52	; 0x34
   19820:	5c9b      	ldrb	r3, [r3, r2]
   19822:	2201      	movs	r2, #1
   19824:	4053      	eors	r3, r2
   19826:	b2db      	uxtb	r3, r3
   19828:	2b00      	cmp	r3, #0
   1982a:	d00c      	beq.n	19846 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   1982c:	4a15      	ldr	r2, [pc, #84]	; (19884 <MQTT_InitRoutine+0x84>)
   1982e:	4b14      	ldr	r3, [pc, #80]	; (19880 <MQTT_InitRoutine+0x80>)
   19830:	0011      	movs	r1, r2
   19832:	0018      	movs	r0, r3
   19834:	4b14      	ldr	r3, [pc, #80]	; (19888 <MQTT_InitRoutine+0x88>)
   19836:	4798      	blx	r3
   19838:	1e03      	subs	r3, r0, #0
   1983a:	d004      	beq.n	19846 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   1983c:	4b13      	ldr	r3, [pc, #76]	; (1988c <MQTT_InitRoutine+0x8c>)
   1983e:	0019      	movs	r1, r3
   19840:	2001      	movs	r0, #1
   19842:	4b13      	ldr	r3, [pc, #76]	; (19890 <MQTT_InitRoutine+0x90>)
   19844:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   19846:	4b0e      	ldr	r3, [pc, #56]	; (19880 <MQTT_InitRoutine+0x80>)
   19848:	2234      	movs	r2, #52	; 0x34
   1984a:	5c9b      	ldrb	r3, [r3, r2]
   1984c:	2b00      	cmp	r3, #0
   1984e:	d004      	beq.n	1985a <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   19850:	4b10      	ldr	r3, [pc, #64]	; (19894 <MQTT_InitRoutine+0x94>)
   19852:	0019      	movs	r1, r3
   19854:	2001      	movs	r0, #1
   19856:	4b0e      	ldr	r3, [pc, #56]	; (19890 <MQTT_InitRoutine+0x90>)
   19858:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   1985a:	4b0f      	ldr	r3, [pc, #60]	; (19898 <MQTT_InitRoutine+0x98>)
   1985c:	2201      	movs	r2, #1
   1985e:	701a      	strb	r2, [r3, #0]
}
   19860:	46c0      	nop			; (mov r8, r8)
   19862:	46bd      	mov	sp, r7
   19864:	bd80      	pop	{r7, pc}
   19866:	46c0      	nop			; (mov r8, r8)
   19868:	00027f71 	.word	0x00027f71
   1986c:	00019509 	.word	0x00019509
   19870:	00019115 	.word	0x00019115
   19874:	000190e1 	.word	0x000190e1
   19878:	00027fb9 	.word	0x00027fb9
   1987c:	00027f21 	.word	0x00027f21
   19880:	200007c4 	.word	0x200007c4
   19884:	000394cc 	.word	0x000394cc
   19888:	0003224d 	.word	0x0003224d
   1988c:	000398d4 	.word	0x000398d4
   19890:	00020831 	.word	0x00020831
   19894:	00039d50 	.word	0x00039d50
   19898:	20000550 	.word	0x20000550

0001989c <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   1989c:	b580      	push	{r7, lr}
   1989e:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   198a0:	2000      	movs	r0, #0
   198a2:	4b0b      	ldr	r3, [pc, #44]	; (198d0 <MQTT_HandleTransactions+0x34>)
   198a4:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   198a6:	4b0b      	ldr	r3, [pc, #44]	; (198d4 <MQTT_HandleTransactions+0x38>)
   198a8:	0018      	movs	r0, r3
   198aa:	4b0b      	ldr	r3, [pc, #44]	; (198d8 <MQTT_HandleTransactions+0x3c>)
   198ac:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   198ae:	4b0b      	ldr	r3, [pc, #44]	; (198dc <MQTT_HandleTransactions+0x40>)
   198b0:	4798      	blx	r3
    MQTT_HandleImuMessages();
   198b2:	4b0b      	ldr	r3, [pc, #44]	; (198e0 <MQTT_HandleTransactions+0x44>)
   198b4:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   198b6:	4b0b      	ldr	r3, [pc, #44]	; (198e4 <MQTT_HandleTransactions+0x48>)
   198b8:	2234      	movs	r2, #52	; 0x34
   198ba:	5c9b      	ldrb	r3, [r3, r2]
   198bc:	2b00      	cmp	r3, #0
   198be:	d004      	beq.n	198ca <MQTT_HandleTransactions+0x2e>
   198c0:	4b08      	ldr	r3, [pc, #32]	; (198e4 <MQTT_HandleTransactions+0x48>)
   198c2:	2164      	movs	r1, #100	; 0x64
   198c4:	0018      	movs	r0, r3
   198c6:	4b08      	ldr	r3, [pc, #32]	; (198e8 <MQTT_HandleTransactions+0x4c>)
   198c8:	4798      	blx	r3
}
   198ca:	46c0      	nop			; (mov r8, r8)
   198cc:	46bd      	mov	sp, r7
   198ce:	bd80      	pop	{r7, pc}
   198d0:	000249b5 	.word	0x000249b5
   198d4:	20004838 	.word	0x20004838
   198d8:	000350a9 	.word	0x000350a9
   198dc:	00019979 	.word	0x00019979
   198e0:	000198ed 	.word	0x000198ed
   198e4:	200007c4 	.word	0x200007c4
   198e8:	0003247d 	.word	0x0003247d

000198ec <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   198ec:	b590      	push	{r4, r7, lr}
   198ee:	b085      	sub	sp, #20
   198f0:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   198f2:	4b18      	ldr	r3, [pc, #96]	; (19954 <MQTT_HandleImuMessages+0x68>)
   198f4:	681b      	ldr	r3, [r3, #0]
   198f6:	0039      	movs	r1, r7
   198f8:	2200      	movs	r2, #0
   198fa:	0018      	movs	r0, r3
   198fc:	4b16      	ldr	r3, [pc, #88]	; (19958 <MQTT_HandleImuMessages+0x6c>)
   198fe:	4798      	blx	r3
   19900:	0003      	movs	r3, r0
   19902:	2b01      	cmp	r3, #1
   19904:	d121      	bne.n	1994a <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   19906:	003b      	movs	r3, r7
   19908:	2200      	movs	r2, #0
   1990a:	5e9b      	ldrsh	r3, [r3, r2]
   1990c:	001c      	movs	r4, r3
   1990e:	003b      	movs	r3, r7
   19910:	2202      	movs	r2, #2
   19912:	5e9b      	ldrsh	r3, [r3, r2]
   19914:	0019      	movs	r1, r3
   19916:	003b      	movs	r3, r7
   19918:	2204      	movs	r2, #4
   1991a:	5e9b      	ldrsh	r3, [r3, r2]
   1991c:	4a0f      	ldr	r2, [pc, #60]	; (1995c <MQTT_HandleImuMessages+0x70>)
   1991e:	4810      	ldr	r0, [pc, #64]	; (19960 <MQTT_HandleImuMessages+0x74>)
   19920:	9301      	str	r3, [sp, #4]
   19922:	9100      	str	r1, [sp, #0]
   19924:	0023      	movs	r3, r4
   19926:	213f      	movs	r1, #63	; 0x3f
   19928:	4c0e      	ldr	r4, [pc, #56]	; (19964 <MQTT_HandleImuMessages+0x78>)
   1992a:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1992c:	4b0c      	ldr	r3, [pc, #48]	; (19960 <MQTT_HandleImuMessages+0x74>)
   1992e:	0018      	movs	r0, r3
   19930:	4b0d      	ldr	r3, [pc, #52]	; (19968 <MQTT_HandleImuMessages+0x7c>)
   19932:	4798      	blx	r3
   19934:	0004      	movs	r4, r0
   19936:	4a0a      	ldr	r2, [pc, #40]	; (19960 <MQTT_HandleImuMessages+0x74>)
   19938:	490c      	ldr	r1, [pc, #48]	; (1996c <MQTT_HandleImuMessages+0x80>)
   1993a:	480d      	ldr	r0, [pc, #52]	; (19970 <MQTT_HandleImuMessages+0x84>)
   1993c:	2300      	movs	r3, #0
   1993e:	9301      	str	r3, [sp, #4]
   19940:	2301      	movs	r3, #1
   19942:	9300      	str	r3, [sp, #0]
   19944:	0023      	movs	r3, r4
   19946:	4c0b      	ldr	r4, [pc, #44]	; (19974 <MQTT_HandleImuMessages+0x88>)
   19948:	47a0      	blx	r4
    }
}
   1994a:	46c0      	nop			; (mov r8, r8)
   1994c:	46bd      	mov	sp, r7
   1994e:	b003      	add	sp, #12
   19950:	bd90      	pop	{r4, r7, pc}
   19952:	46c0      	nop			; (mov r8, r8)
   19954:	2000055c 	.word	0x2000055c
   19958:	0001d945 	.word	0x0001d945
   1995c:	00039d6c 	.word	0x00039d6c
   19960:	20000024 	.word	0x20000024
   19964:	00037b5d 	.word	0x00037b5d
   19968:	00037cbb 	.word	0x00037cbb
   1996c:	00039c34 	.word	0x00039c34
   19970:	200007c4 	.word	0x200007c4
   19974:	000323c9 	.word	0x000323c9

00019978 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   19978:	b590      	push	{r4, r7, lr}
   1997a:	b08b      	sub	sp, #44	; 0x2c
   1997c:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   1997e:	4b39      	ldr	r3, [pc, #228]	; (19a64 <MQTT_HandleGameMessages+0xec>)
   19980:	681b      	ldr	r3, [r3, #0]
   19982:	2208      	movs	r2, #8
   19984:	18b9      	adds	r1, r7, r2
   19986:	2200      	movs	r2, #0
   19988:	0018      	movs	r0, r3
   1998a:	4b37      	ldr	r3, [pc, #220]	; (19a68 <MQTT_HandleGameMessages+0xf0>)
   1998c:	4798      	blx	r3
   1998e:	0003      	movs	r3, r0
   19990:	2b01      	cmp	r3, #1
   19992:	d163      	bne.n	19a5c <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   19994:	4b35      	ldr	r3, [pc, #212]	; (19a6c <MQTT_HandleGameMessages+0xf4>)
   19996:	4a36      	ldr	r2, [pc, #216]	; (19a70 <MQTT_HandleGameMessages+0xf8>)
   19998:	ca03      	ldmia	r2!, {r0, r1}
   1999a:	c303      	stmia	r3!, {r0, r1}
   1999c:	8812      	ldrh	r2, [r2, #0]
   1999e:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   199a0:	2300      	movs	r3, #0
   199a2:	61fb      	str	r3, [r7, #28]
   199a4:	e02d      	b.n	19a02 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   199a6:	2308      	movs	r3, #8
   199a8:	18fa      	adds	r2, r7, r3
   199aa:	69fb      	ldr	r3, [r7, #28]
   199ac:	18d3      	adds	r3, r2, r3
   199ae:	781b      	ldrb	r3, [r3, #0]
   199b0:	2bff      	cmp	r3, #255	; 0xff
   199b2:	d02a      	beq.n	19a0a <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   199b4:	2308      	movs	r3, #8
   199b6:	18fa      	adds	r2, r7, r3
   199b8:	69fb      	ldr	r3, [r7, #28]
   199ba:	18d3      	adds	r3, r2, r3
   199bc:	781b      	ldrb	r3, [r3, #0]
   199be:	4a2d      	ldr	r2, [pc, #180]	; (19a74 <MQTT_HandleGameMessages+0xfc>)
   199c0:	0038      	movs	r0, r7
   199c2:	2103      	movs	r1, #3
   199c4:	4c2c      	ldr	r4, [pc, #176]	; (19a78 <MQTT_HandleGameMessages+0x100>)
   199c6:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   199c8:	003a      	movs	r2, r7
   199ca:	4b28      	ldr	r3, [pc, #160]	; (19a6c <MQTT_HandleGameMessages+0xf4>)
   199cc:	0011      	movs	r1, r2
   199ce:	0018      	movs	r0, r3
   199d0:	4b2a      	ldr	r3, [pc, #168]	; (19a7c <MQTT_HandleGameMessages+0x104>)
   199d2:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   199d4:	69fb      	ldr	r3, [r7, #28]
   199d6:	3301      	adds	r3, #1
   199d8:	2208      	movs	r2, #8
   199da:	18ba      	adds	r2, r7, r2
   199dc:	5cd3      	ldrb	r3, [r2, r3]
   199de:	2bff      	cmp	r3, #255	; 0xff
   199e0:	d00c      	beq.n	199fc <MQTT_HandleGameMessages+0x84>
   199e2:	69fb      	ldr	r3, [r7, #28]
   199e4:	3301      	adds	r3, #1
   199e6:	2b13      	cmp	r3, #19
   199e8:	dc08      	bgt.n	199fc <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   199ea:	003b      	movs	r3, r7
   199ec:	222c      	movs	r2, #44	; 0x2c
   199ee:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   199f0:	003a      	movs	r2, r7
   199f2:	4b1e      	ldr	r3, [pc, #120]	; (19a6c <MQTT_HandleGameMessages+0xf4>)
   199f4:	0011      	movs	r1, r2
   199f6:	0018      	movs	r0, r3
   199f8:	4b20      	ldr	r3, [pc, #128]	; (19a7c <MQTT_HandleGameMessages+0x104>)
   199fa:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   199fc:	69fb      	ldr	r3, [r7, #28]
   199fe:	3301      	adds	r3, #1
   19a00:	61fb      	str	r3, [r7, #28]
   19a02:	69fb      	ldr	r3, [r7, #28]
   19a04:	2b13      	cmp	r3, #19
   19a06:	ddce      	ble.n	199a6 <MQTT_HandleGameMessages+0x2e>
   19a08:	e000      	b.n	19a0c <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   19a0a:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   19a0c:	4b17      	ldr	r3, [pc, #92]	; (19a6c <MQTT_HandleGameMessages+0xf4>)
   19a0e:	0018      	movs	r0, r3
   19a10:	4b1b      	ldr	r3, [pc, #108]	; (19a80 <MQTT_HandleGameMessages+0x108>)
   19a12:	4798      	blx	r3
   19a14:	0003      	movs	r3, r0
   19a16:	001a      	movs	r2, r3
   19a18:	4b14      	ldr	r3, [pc, #80]	; (19a6c <MQTT_HandleGameMessages+0xf4>)
   19a1a:	18d2      	adds	r2, r2, r3
   19a1c:	4b19      	ldr	r3, [pc, #100]	; (19a84 <MQTT_HandleGameMessages+0x10c>)
   19a1e:	0010      	movs	r0, r2
   19a20:	0019      	movs	r1, r3
   19a22:	2303      	movs	r3, #3
   19a24:	001a      	movs	r2, r3
   19a26:	4b18      	ldr	r3, [pc, #96]	; (19a88 <MQTT_HandleGameMessages+0x110>)
   19a28:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   19a2a:	4b10      	ldr	r3, [pc, #64]	; (19a6c <MQTT_HandleGameMessages+0xf4>)
   19a2c:	0019      	movs	r1, r3
   19a2e:	2001      	movs	r0, #1
   19a30:	4b16      	ldr	r3, [pc, #88]	; (19a8c <MQTT_HandleGameMessages+0x114>)
   19a32:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   19a34:	4b16      	ldr	r3, [pc, #88]	; (19a90 <MQTT_HandleGameMessages+0x118>)
   19a36:	0019      	movs	r1, r3
   19a38:	2001      	movs	r0, #1
   19a3a:	4b14      	ldr	r3, [pc, #80]	; (19a8c <MQTT_HandleGameMessages+0x114>)
   19a3c:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 0, 0);
   19a3e:	4b0b      	ldr	r3, [pc, #44]	; (19a6c <MQTT_HandleGameMessages+0xf4>)
   19a40:	0018      	movs	r0, r3
   19a42:	4b0f      	ldr	r3, [pc, #60]	; (19a80 <MQTT_HandleGameMessages+0x108>)
   19a44:	4798      	blx	r3
   19a46:	0004      	movs	r4, r0
   19a48:	4a08      	ldr	r2, [pc, #32]	; (19a6c <MQTT_HandleGameMessages+0xf4>)
   19a4a:	4912      	ldr	r1, [pc, #72]	; (19a94 <MQTT_HandleGameMessages+0x11c>)
   19a4c:	4812      	ldr	r0, [pc, #72]	; (19a98 <MQTT_HandleGameMessages+0x120>)
   19a4e:	2300      	movs	r3, #0
   19a50:	9301      	str	r3, [sp, #4]
   19a52:	2300      	movs	r3, #0
   19a54:	9300      	str	r3, [sp, #0]
   19a56:	0023      	movs	r3, r4
   19a58:	4c10      	ldr	r4, [pc, #64]	; (19a9c <MQTT_HandleGameMessages+0x124>)
   19a5a:	47a0      	blx	r4
    }
}
   19a5c:	46c0      	nop			; (mov r8, r8)
   19a5e:	46bd      	mov	sp, r7
   19a60:	b009      	add	sp, #36	; 0x24
   19a62:	bd90      	pop	{r4, r7, pc}
   19a64:	20000558 	.word	0x20000558
   19a68:	0001d945 	.word	0x0001d945
   19a6c:	20000024 	.word	0x20000024
   19a70:	00039a70 	.word	0x00039a70
   19a74:	00039d90 	.word	0x00039d90
   19a78:	00037b5d 	.word	0x00037b5d
   19a7c:	00037c41 	.word	0x00037c41
   19a80:	00037cbb 	.word	0x00037cbb
   19a84:	00039d94 	.word	0x00039d94
   19a88:	000378cd 	.word	0x000378cd
   19a8c:	00020831 	.word	0x00020831
   19a90:	00039d98 	.word	0x00039d98
   19a94:	00039d9c 	.word	0x00039d9c
   19a98:	200007c4 	.word	0x200007c4
   19a9c:	000323c9 	.word	0x000323c9

00019aa0 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   19aa0:	b590      	push	{r4, r7, lr}
   19aa2:	b08d      	sub	sp, #52	; 0x34
   19aa4:	af02      	add	r7, sp, #8
   19aa6:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   19aa8:	2064      	movs	r0, #100	; 0x64
   19aaa:	4b79      	ldr	r3, [pc, #484]	; (19c90 <vWifiTask+0x1f0>)
   19aac:	4798      	blx	r3
    init_state();
   19aae:	4b79      	ldr	r3, [pc, #484]	; (19c94 <vWifiTask+0x1f4>)
   19ab0:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   19ab2:	2200      	movs	r2, #0
   19ab4:	2104      	movs	r1, #4
   19ab6:	2005      	movs	r0, #5
   19ab8:	4b77      	ldr	r3, [pc, #476]	; (19c98 <vWifiTask+0x1f8>)
   19aba:	4798      	blx	r3
   19abc:	0002      	movs	r2, r0
   19abe:	4b77      	ldr	r3, [pc, #476]	; (19c9c <vWifiTask+0x1fc>)
   19ac0:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   19ac2:	2200      	movs	r2, #0
   19ac4:	2106      	movs	r1, #6
   19ac6:	2005      	movs	r0, #5
   19ac8:	4b73      	ldr	r3, [pc, #460]	; (19c98 <vWifiTask+0x1f8>)
   19aca:	4798      	blx	r3
   19acc:	0002      	movs	r2, r0
   19ace:	4b74      	ldr	r3, [pc, #464]	; (19ca0 <vWifiTask+0x200>)
   19ad0:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   19ad2:	2200      	movs	r2, #0
   19ad4:	2114      	movs	r1, #20
   19ad6:	2002      	movs	r0, #2
   19ad8:	4b6f      	ldr	r3, [pc, #444]	; (19c98 <vWifiTask+0x1f8>)
   19ada:	4798      	blx	r3
   19adc:	0002      	movs	r2, r0
   19ade:	4b71      	ldr	r3, [pc, #452]	; (19ca4 <vWifiTask+0x204>)
   19ae0:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   19ae2:	2200      	movs	r2, #0
   19ae4:	2102      	movs	r1, #2
   19ae6:	2005      	movs	r0, #5
   19ae8:	4b6b      	ldr	r3, [pc, #428]	; (19c98 <vWifiTask+0x1f8>)
   19aea:	4798      	blx	r3
   19aec:	0002      	movs	r2, r0
   19aee:	4b6e      	ldr	r3, [pc, #440]	; (19ca8 <vWifiTask+0x208>)
   19af0:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   19af2:	4b6a      	ldr	r3, [pc, #424]	; (19c9c <vWifiTask+0x1fc>)
   19af4:	681b      	ldr	r3, [r3, #0]
   19af6:	2b00      	cmp	r3, #0
   19af8:	d00b      	beq.n	19b12 <vWifiTask+0x72>
   19afa:	4b69      	ldr	r3, [pc, #420]	; (19ca0 <vWifiTask+0x200>)
   19afc:	681b      	ldr	r3, [r3, #0]
   19afe:	2b00      	cmp	r3, #0
   19b00:	d007      	beq.n	19b12 <vWifiTask+0x72>
   19b02:	4b68      	ldr	r3, [pc, #416]	; (19ca4 <vWifiTask+0x204>)
   19b04:	681b      	ldr	r3, [r3, #0]
   19b06:	2b00      	cmp	r3, #0
   19b08:	d003      	beq.n	19b12 <vWifiTask+0x72>
   19b0a:	4b67      	ldr	r3, [pc, #412]	; (19ca8 <vWifiTask+0x208>)
   19b0c:	681b      	ldr	r3, [r3, #0]
   19b0e:	2b00      	cmp	r3, #0
   19b10:	d103      	bne.n	19b1a <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   19b12:	4b66      	ldr	r3, [pc, #408]	; (19cac <vWifiTask+0x20c>)
   19b14:	0018      	movs	r0, r3
   19b16:	4b66      	ldr	r3, [pc, #408]	; (19cb0 <vWifiTask+0x210>)
   19b18:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   19b1a:	4b66      	ldr	r3, [pc, #408]	; (19cb4 <vWifiTask+0x214>)
   19b1c:	0018      	movs	r0, r3
   19b1e:	4b64      	ldr	r3, [pc, #400]	; (19cb0 <vWifiTask+0x210>)
   19b20:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   19b22:	4b65      	ldr	r3, [pc, #404]	; (19cb8 <vWifiTask+0x218>)
   19b24:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   19b26:	4b65      	ldr	r3, [pc, #404]	; (19cbc <vWifiTask+0x21c>)
   19b28:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   19b2a:	4b65      	ldr	r3, [pc, #404]	; (19cc0 <vWifiTask+0x220>)
   19b2c:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   19b2e:	4b65      	ldr	r3, [pc, #404]	; (19cc4 <vWifiTask+0x224>)
   19b30:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   19b32:	4b65      	ldr	r3, [pc, #404]	; (19cc8 <vWifiTask+0x228>)
   19b34:	4798      	blx	r3
    configure_extint_callbacks();
   19b36:	4b65      	ldr	r3, [pc, #404]	; (19ccc <vWifiTask+0x22c>)
   19b38:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   19b3a:	230c      	movs	r3, #12
   19b3c:	18fb      	adds	r3, r7, r3
   19b3e:	2218      	movs	r2, #24
   19b40:	2100      	movs	r1, #0
   19b42:	0018      	movs	r0, r3
   19b44:	4b62      	ldr	r3, [pc, #392]	; (19cd0 <vWifiTask+0x230>)
   19b46:	4798      	blx	r3

    nm_bsp_init();
   19b48:	4b62      	ldr	r3, [pc, #392]	; (19cd4 <vWifiTask+0x234>)
   19b4a:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   19b4c:	230c      	movs	r3, #12
   19b4e:	18fb      	adds	r3, r7, r3
   19b50:	4a61      	ldr	r2, [pc, #388]	; (19cd8 <vWifiTask+0x238>)
   19b52:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   19b54:	2327      	movs	r3, #39	; 0x27
   19b56:	18fc      	adds	r4, r7, r3
   19b58:	230c      	movs	r3, #12
   19b5a:	18fb      	adds	r3, r7, r3
   19b5c:	0018      	movs	r0, r3
   19b5e:	4b5f      	ldr	r3, [pc, #380]	; (19cdc <vWifiTask+0x23c>)
   19b60:	4798      	blx	r3
   19b62:	0003      	movs	r3, r0
   19b64:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   19b66:	2327      	movs	r3, #39	; 0x27
   19b68:	18fb      	adds	r3, r7, r3
   19b6a:	781b      	ldrb	r3, [r3, #0]
   19b6c:	b25b      	sxtb	r3, r3
   19b6e:	2b00      	cmp	r3, #0
   19b70:	d009      	beq.n	19b86 <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   19b72:	2327      	movs	r3, #39	; 0x27
   19b74:	18fb      	adds	r3, r7, r3
   19b76:	2200      	movs	r2, #0
   19b78:	569a      	ldrsb	r2, [r3, r2]
   19b7a:	4b59      	ldr	r3, [pc, #356]	; (19ce0 <vWifiTask+0x240>)
   19b7c:	0019      	movs	r1, r3
   19b7e:	2001      	movs	r0, #1
   19b80:	4b58      	ldr	r3, [pc, #352]	; (19ce4 <vWifiTask+0x244>)
   19b82:	4798      	blx	r3
        while (1) {
   19b84:	e7fe      	b.n	19b84 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   19b86:	4a58      	ldr	r2, [pc, #352]	; (19ce8 <vWifiTask+0x248>)
   19b88:	4b58      	ldr	r3, [pc, #352]	; (19cec <vWifiTask+0x24c>)
   19b8a:	0019      	movs	r1, r3
   19b8c:	2001      	movs	r0, #1
   19b8e:	4b55      	ldr	r3, [pc, #340]	; (19ce4 <vWifiTask+0x244>)
   19b90:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   19b92:	4b57      	ldr	r3, [pc, #348]	; (19cf0 <vWifiTask+0x250>)
   19b94:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   19b96:	4a57      	ldr	r2, [pc, #348]	; (19cf4 <vWifiTask+0x254>)
   19b98:	4b57      	ldr	r3, [pc, #348]	; (19cf8 <vWifiTask+0x258>)
   19b9a:	0011      	movs	r1, r2
   19b9c:	0018      	movs	r0, r3
   19b9e:	4b57      	ldr	r3, [pc, #348]	; (19cfc <vWifiTask+0x25c>)
   19ba0:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   19ba2:	4a57      	ldr	r2, [pc, #348]	; (19d00 <vWifiTask+0x260>)
   19ba4:	4850      	ldr	r0, [pc, #320]	; (19ce8 <vWifiTask+0x248>)
   19ba6:	23ff      	movs	r3, #255	; 0xff
   19ba8:	9300      	str	r3, [sp, #0]
   19baa:	0013      	movs	r3, r2
   19bac:	2202      	movs	r2, #2
   19bae:	2107      	movs	r1, #7
   19bb0:	4c54      	ldr	r4, [pc, #336]	; (19d04 <vWifiTask+0x264>)
   19bb2:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   19bb4:	e006      	b.n	19bc4 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   19bb6:	2000      	movs	r0, #0
   19bb8:	4b53      	ldr	r3, [pc, #332]	; (19d08 <vWifiTask+0x268>)
   19bba:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   19bbc:	4b53      	ldr	r3, [pc, #332]	; (19d0c <vWifiTask+0x26c>)
   19bbe:	0018      	movs	r0, r3
   19bc0:	4b53      	ldr	r3, [pc, #332]	; (19d10 <vWifiTask+0x270>)
   19bc2:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   19bc4:	2002      	movs	r0, #2
   19bc6:	4b53      	ldr	r3, [pc, #332]	; (19d14 <vWifiTask+0x274>)
   19bc8:	4798      	blx	r3
   19bca:	0003      	movs	r3, r0
   19bcc:	001a      	movs	r2, r3
   19bce:	2301      	movs	r3, #1
   19bd0:	4053      	eors	r3, r2
   19bd2:	b2db      	uxtb	r3, r3
   19bd4:	2b00      	cmp	r3, #0
   19bd6:	d1ee      	bne.n	19bb6 <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   19bd8:	23fa      	movs	r3, #250	; 0xfa
   19bda:	009b      	lsls	r3, r3, #2
   19bdc:	0018      	movs	r0, r3
   19bde:	4b2c      	ldr	r3, [pc, #176]	; (19c90 <vWifiTask+0x1f0>)
   19be0:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   19be2:	4b4d      	ldr	r3, [pc, #308]	; (19d18 <vWifiTask+0x278>)
   19be4:	2201      	movs	r2, #1
   19be6:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   19be8:	4b4b      	ldr	r3, [pc, #300]	; (19d18 <vWifiTask+0x278>)
   19bea:	781b      	ldrb	r3, [r3, #0]
   19bec:	b25b      	sxtb	r3, r3
   19bee:	2b01      	cmp	r3, #1
   19bf0:	d00b      	beq.n	19c0a <vWifiTask+0x16a>
   19bf2:	dc02      	bgt.n	19bfa <vWifiTask+0x15a>
   19bf4:	2b00      	cmp	r3, #0
   19bf6:	d005      	beq.n	19c04 <vWifiTask+0x164>
   19bf8:	e010      	b.n	19c1c <vWifiTask+0x17c>
   19bfa:	2b02      	cmp	r3, #2
   19bfc:	d008      	beq.n	19c10 <vWifiTask+0x170>
   19bfe:	2b03      	cmp	r3, #3
   19c00:	d009      	beq.n	19c16 <vWifiTask+0x176>
   19c02:	e00b      	b.n	19c1c <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   19c04:	4b45      	ldr	r3, [pc, #276]	; (19d1c <vWifiTask+0x27c>)
   19c06:	4798      	blx	r3

                break;
   19c08:	e00c      	b.n	19c24 <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   19c0a:	4b45      	ldr	r3, [pc, #276]	; (19d20 <vWifiTask+0x280>)
   19c0c:	4798      	blx	r3
                break;
   19c0e:	e009      	b.n	19c24 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   19c10:	4b44      	ldr	r3, [pc, #272]	; (19d24 <vWifiTask+0x284>)
   19c12:	4798      	blx	r3
                break;
   19c14:	e006      	b.n	19c24 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   19c16:	4b44      	ldr	r3, [pc, #272]	; (19d28 <vWifiTask+0x288>)
   19c18:	4798      	blx	r3
                break;
   19c1a:	e003      	b.n	19c24 <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   19c1c:	4b3e      	ldr	r3, [pc, #248]	; (19d18 <vWifiTask+0x278>)
   19c1e:	2200      	movs	r2, #0
   19c20:	701a      	strb	r2, [r3, #0]
                break;
   19c22:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   19c24:	230b      	movs	r3, #11
   19c26:	18fb      	adds	r3, r7, r3
   19c28:	2200      	movs	r2, #0
   19c2a:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   19c2c:	4b1b      	ldr	r3, [pc, #108]	; (19c9c <vWifiTask+0x1fc>)
   19c2e:	681b      	ldr	r3, [r3, #0]
   19c30:	220b      	movs	r2, #11
   19c32:	18b9      	adds	r1, r7, r2
   19c34:	2200      	movs	r2, #0
   19c36:	0018      	movs	r0, r3
   19c38:	4b3c      	ldr	r3, [pc, #240]	; (19d2c <vWifiTask+0x28c>)
   19c3a:	4798      	blx	r3
   19c3c:	0003      	movs	r3, r0
   19c3e:	2b01      	cmp	r3, #1
   19c40:	d105      	bne.n	19c4e <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
   19c42:	230b      	movs	r3, #11
   19c44:	18fb      	adds	r3, r7, r3
   19c46:	781b      	ldrb	r3, [r3, #0]
   19c48:	b25a      	sxtb	r2, r3
   19c4a:	4b33      	ldr	r3, [pc, #204]	; (19d18 <vWifiTask+0x278>)
   19c4c:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   19c4e:	4b38      	ldr	r3, [pc, #224]	; (19d30 <vWifiTask+0x290>)
   19c50:	781b      	ldrb	r3, [r3, #0]
   19c52:	b2db      	uxtb	r3, r3
   19c54:	2b00      	cmp	r3, #0
   19c56:	d017      	beq.n	19c88 <vWifiTask+0x1e8>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   19c58:	4b36      	ldr	r3, [pc, #216]	; (19d34 <vWifiTask+0x294>)
   19c5a:	0018      	movs	r0, r3
   19c5c:	4b36      	ldr	r3, [pc, #216]	; (19d38 <vWifiTask+0x298>)
   19c5e:	4798      	blx	r3
   19c60:	0004      	movs	r4, r0
   19c62:	4a34      	ldr	r2, [pc, #208]	; (19d34 <vWifiTask+0x294>)
   19c64:	4935      	ldr	r1, [pc, #212]	; (19d3c <vWifiTask+0x29c>)
   19c66:	4836      	ldr	r0, [pc, #216]	; (19d40 <vWifiTask+0x2a0>)
   19c68:	2300      	movs	r3, #0
   19c6a:	9301      	str	r3, [sp, #4]
   19c6c:	2301      	movs	r3, #1
   19c6e:	9300      	str	r3, [sp, #0]
   19c70:	0023      	movs	r3, r4
   19c72:	4c34      	ldr	r4, [pc, #208]	; (19d44 <vWifiTask+0x2a4>)
   19c74:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   19c76:	4a2f      	ldr	r2, [pc, #188]	; (19d34 <vWifiTask+0x294>)
   19c78:	4b33      	ldr	r3, [pc, #204]	; (19d48 <vWifiTask+0x2a8>)
   19c7a:	0019      	movs	r1, r3
   19c7c:	2001      	movs	r0, #1
   19c7e:	4b19      	ldr	r3, [pc, #100]	; (19ce4 <vWifiTask+0x244>)
   19c80:	4798      	blx	r3
            isPressed = false;
   19c82:	4b2b      	ldr	r3, [pc, #172]	; (19d30 <vWifiTask+0x290>)
   19c84:	2200      	movs	r2, #0
   19c86:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   19c88:	2064      	movs	r0, #100	; 0x64
   19c8a:	4b01      	ldr	r3, [pc, #4]	; (19c90 <vWifiTask+0x1f0>)
   19c8c:	4798      	blx	r3
    while (1) {
   19c8e:	e7ab      	b.n	19be8 <vWifiTask+0x148>
   19c90:	0001eaf1 	.word	0x0001eaf1
   19c94:	000185e5 	.word	0x000185e5
   19c98:	0001cde5 	.word	0x0001cde5
   19c9c:	20000554 	.word	0x20000554
   19ca0:	2000055c 	.word	0x2000055c
   19ca4:	20000558 	.word	0x20000558
   19ca8:	20000560 	.word	0x20000560
   19cac:	00039db4 	.word	0x00039db4
   19cb0:	00020745 	.word	0x00020745
   19cb4:	00039ddc 	.word	0x00039ddc
   19cb8:	00019021 	.word	0x00019021
   19cbc:	0001905d 	.word	0x0001905d
   19cc0:	00019509 	.word	0x00019509
   19cc4:	00018f3d 	.word	0x00018f3d
   19cc8:	000195c1 	.word	0x000195c1
   19ccc:	00019601 	.word	0x00019601
   19cd0:	00037903 	.word	0x00037903
   19cd4:	00022ce9 	.word	0x00022ce9
   19cd8:	00018de9 	.word	0x00018de9
   19cdc:	000247c1 	.word	0x000247c1
   19ce0:	00039df8 	.word	0x00039df8
   19ce4:	00020831 	.word	0x00020831
   19ce8:	000398a4 	.word	0x000398a4
   19cec:	00039e24 	.word	0x00039e24
   19cf0:	00027f21 	.word	0x00027f21
   19cf4:	00019115 	.word	0x00019115
   19cf8:	000190e1 	.word	0x000190e1
   19cfc:	00027fb9 	.word	0x00027fb9
   19d00:	00039898 	.word	0x00039898
   19d04:	000249d1 	.word	0x000249d1
   19d08:	000249b5 	.word	0x000249b5
   19d0c:	20004838 	.word	0x20004838
   19d10:	000350a9 	.word	0x000350a9
   19d14:	00018655 	.word	0x00018655
   19d18:	20000550 	.word	0x20000550
   19d1c:	00019801 	.word	0x00019801
   19d20:	0001989d 	.word	0x0001989d
   19d24:	00019679 	.word	0x00019679
   19d28:	0001970d 	.word	0x0001970d
   19d2c:	0001d945 	.word	0x0001d945
   19d30:	20000bfc 	.word	0x20000bfc
   19d34:	20000064 	.word	0x20000064
   19d38:	00037cbb 	.word	0x00037cbb
   19d3c:	00039e48 	.word	0x00039e48
   19d40:	200007c4 	.word	0x200007c4
   19d44:	000323c9 	.word	0x000323c9
   19d48:	00039e64 	.word	0x00039e64

00019d4c <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   19d4c:	b590      	push	{r4, r7, lr}
   19d4e:	b083      	sub	sp, #12
   19d50:	af00      	add	r7, sp, #0
   19d52:	0002      	movs	r2, r0
   19d54:	1dfb      	adds	r3, r7, #7
   19d56:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   19d58:	1dfb      	adds	r3, r7, #7
   19d5a:	781b      	ldrb	r3, [r3, #0]
   19d5c:	2b03      	cmp	r3, #3
   19d5e:	d806      	bhi.n	19d6e <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   19d60:	4b05      	ldr	r3, [pc, #20]	; (19d78 <WifiHandlerSetState+0x2c>)
   19d62:	6818      	ldr	r0, [r3, #0]
   19d64:	1df9      	adds	r1, r7, #7
   19d66:	2300      	movs	r3, #0
   19d68:	220a      	movs	r2, #10
   19d6a:	4c04      	ldr	r4, [pc, #16]	; (19d7c <WifiHandlerSetState+0x30>)
   19d6c:	47a0      	blx	r4
    }
}
   19d6e:	46c0      	nop			; (mov r8, r8)
   19d70:	46bd      	mov	sp, r7
   19d72:	b003      	add	sp, #12
   19d74:	bd90      	pop	{r4, r7, pc}
   19d76:	46c0      	nop			; (mov r8, r8)
   19d78:	20000554 	.word	0x20000554
   19d7c:	0001d08d 	.word	0x0001d08d

00019d80 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   19d80:	b590      	push	{r4, r7, lr}
   19d82:	b085      	sub	sp, #20
   19d84:	af00      	add	r7, sp, #0
   19d86:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   19d88:	4b06      	ldr	r3, [pc, #24]	; (19da4 <WifiAddImuDataToQueue+0x24>)
   19d8a:	6818      	ldr	r0, [r3, #0]
   19d8c:	6879      	ldr	r1, [r7, #4]
   19d8e:	2300      	movs	r3, #0
   19d90:	220a      	movs	r2, #10
   19d92:	4c05      	ldr	r4, [pc, #20]	; (19da8 <WifiAddImuDataToQueue+0x28>)
   19d94:	47a0      	blx	r4
   19d96:	0003      	movs	r3, r0
   19d98:	60fb      	str	r3, [r7, #12]
    return error;
   19d9a:	68fb      	ldr	r3, [r7, #12]
}
   19d9c:	0018      	movs	r0, r3
   19d9e:	46bd      	mov	sp, r7
   19da0:	b005      	add	sp, #20
   19da2:	bd90      	pop	{r4, r7, pc}
   19da4:	2000055c 	.word	0x2000055c
   19da8:	0001d08d 	.word	0x0001d08d

00019dac <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   19dac:	b590      	push	{r4, r7, lr}
   19dae:	b085      	sub	sp, #20
   19db0:	af00      	add	r7, sp, #0
   19db2:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   19db4:	4b06      	ldr	r3, [pc, #24]	; (19dd0 <WifiAddDistanceDataToQueue+0x24>)
   19db6:	6818      	ldr	r0, [r3, #0]
   19db8:	6879      	ldr	r1, [r7, #4]
   19dba:	2300      	movs	r3, #0
   19dbc:	220a      	movs	r2, #10
   19dbe:	4c05      	ldr	r4, [pc, #20]	; (19dd4 <WifiAddDistanceDataToQueue+0x28>)
   19dc0:	47a0      	blx	r4
   19dc2:	0003      	movs	r3, r0
   19dc4:	60fb      	str	r3, [r7, #12]
    return error;
   19dc6:	68fb      	ldr	r3, [r7, #12]
}
   19dc8:	0018      	movs	r0, r3
   19dca:	46bd      	mov	sp, r7
   19dcc:	b005      	add	sp, #20
   19dce:	bd90      	pop	{r4, r7, pc}
   19dd0:	20000560 	.word	0x20000560
   19dd4:	0001d08d 	.word	0x0001d08d

00019dd8 <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   19dd8:	b590      	push	{r4, r7, lr}
   19dda:	b085      	sub	sp, #20
   19ddc:	af00      	add	r7, sp, #0
   19dde:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   19de0:	4b06      	ldr	r3, [pc, #24]	; (19dfc <WifiAddGameDataToQueue+0x24>)
   19de2:	6818      	ldr	r0, [r3, #0]
   19de4:	6879      	ldr	r1, [r7, #4]
   19de6:	2300      	movs	r3, #0
   19de8:	220a      	movs	r2, #10
   19dea:	4c05      	ldr	r4, [pc, #20]	; (19e00 <WifiAddGameDataToQueue+0x28>)
   19dec:	47a0      	blx	r4
   19dee:	0003      	movs	r3, r0
   19df0:	60fb      	str	r3, [r7, #12]
    return error;
   19df2:	68fb      	ldr	r3, [r7, #12]
}
   19df4:	0018      	movs	r0, r3
   19df6:	46bd      	mov	sp, r7
   19df8:	b005      	add	sp, #20
   19dfa:	bd90      	pop	{r4, r7, pc}
   19dfc:	20000558 	.word	0x20000558
   19e00:	0001d08d 	.word	0x0001d08d

00019e04 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   19e04:	b580      	push	{r7, lr}
   19e06:	b082      	sub	sp, #8
   19e08:	af00      	add	r7, sp, #0
   19e0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   19e0c:	687b      	ldr	r3, [r7, #4]
   19e0e:	2200      	movs	r2, #0
   19e10:	701a      	strb	r2, [r3, #0]
}
   19e12:	46c0      	nop			; (mov r8, r8)
   19e14:	46bd      	mov	sp, r7
   19e16:	b002      	add	sp, #8
   19e18:	bd80      	pop	{r7, pc}
	...

00019e1c <system_apb_clock_set_mask>:
{
   19e1c:	b580      	push	{r7, lr}
   19e1e:	b082      	sub	sp, #8
   19e20:	af00      	add	r7, sp, #0
   19e22:	0002      	movs	r2, r0
   19e24:	6039      	str	r1, [r7, #0]
   19e26:	1dfb      	adds	r3, r7, #7
   19e28:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   19e2a:	1dfb      	adds	r3, r7, #7
   19e2c:	781b      	ldrb	r3, [r3, #0]
   19e2e:	2b01      	cmp	r3, #1
   19e30:	d00a      	beq.n	19e48 <system_apb_clock_set_mask+0x2c>
   19e32:	2b02      	cmp	r3, #2
   19e34:	d00f      	beq.n	19e56 <system_apb_clock_set_mask+0x3a>
   19e36:	2b00      	cmp	r3, #0
   19e38:	d114      	bne.n	19e64 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   19e3a:	4b0e      	ldr	r3, [pc, #56]	; (19e74 <system_apb_clock_set_mask+0x58>)
   19e3c:	4a0d      	ldr	r2, [pc, #52]	; (19e74 <system_apb_clock_set_mask+0x58>)
   19e3e:	6991      	ldr	r1, [r2, #24]
   19e40:	683a      	ldr	r2, [r7, #0]
   19e42:	430a      	orrs	r2, r1
   19e44:	619a      	str	r2, [r3, #24]
			break;
   19e46:	e00f      	b.n	19e68 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   19e48:	4b0a      	ldr	r3, [pc, #40]	; (19e74 <system_apb_clock_set_mask+0x58>)
   19e4a:	4a0a      	ldr	r2, [pc, #40]	; (19e74 <system_apb_clock_set_mask+0x58>)
   19e4c:	69d1      	ldr	r1, [r2, #28]
   19e4e:	683a      	ldr	r2, [r7, #0]
   19e50:	430a      	orrs	r2, r1
   19e52:	61da      	str	r2, [r3, #28]
			break;
   19e54:	e008      	b.n	19e68 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   19e56:	4b07      	ldr	r3, [pc, #28]	; (19e74 <system_apb_clock_set_mask+0x58>)
   19e58:	4a06      	ldr	r2, [pc, #24]	; (19e74 <system_apb_clock_set_mask+0x58>)
   19e5a:	6a11      	ldr	r1, [r2, #32]
   19e5c:	683a      	ldr	r2, [r7, #0]
   19e5e:	430a      	orrs	r2, r1
   19e60:	621a      	str	r2, [r3, #32]
			break;
   19e62:	e001      	b.n	19e68 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   19e64:	2317      	movs	r3, #23
   19e66:	e000      	b.n	19e6a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   19e68:	2300      	movs	r3, #0
}
   19e6a:	0018      	movs	r0, r3
   19e6c:	46bd      	mov	sp, r7
   19e6e:	b002      	add	sp, #8
   19e70:	bd80      	pop	{r7, pc}
   19e72:	46c0      	nop			; (mov r8, r8)
   19e74:	40000400 	.word	0x40000400

00019e78 <system_pinmux_get_config_defaults>:
{
   19e78:	b580      	push	{r7, lr}
   19e7a:	b082      	sub	sp, #8
   19e7c:	af00      	add	r7, sp, #0
   19e7e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   19e80:	687b      	ldr	r3, [r7, #4]
   19e82:	2280      	movs	r2, #128	; 0x80
   19e84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   19e86:	687b      	ldr	r3, [r7, #4]
   19e88:	2200      	movs	r2, #0
   19e8a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   19e8c:	687b      	ldr	r3, [r7, #4]
   19e8e:	2201      	movs	r2, #1
   19e90:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   19e92:	687b      	ldr	r3, [r7, #4]
   19e94:	2200      	movs	r2, #0
   19e96:	70da      	strb	r2, [r3, #3]
}
   19e98:	46c0      	nop			; (mov r8, r8)
   19e9a:	46bd      	mov	sp, r7
   19e9c:	b002      	add	sp, #8
   19e9e:	bd80      	pop	{r7, pc}

00019ea0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   19ea0:	b580      	push	{r7, lr}
   19ea2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   19ea4:	4b05      	ldr	r3, [pc, #20]	; (19ebc <system_is_debugger_present+0x1c>)
   19ea6:	789b      	ldrb	r3, [r3, #2]
   19ea8:	b2db      	uxtb	r3, r3
   19eaa:	001a      	movs	r2, r3
   19eac:	2302      	movs	r3, #2
   19eae:	4013      	ands	r3, r2
   19eb0:	1e5a      	subs	r2, r3, #1
   19eb2:	4193      	sbcs	r3, r2
   19eb4:	b2db      	uxtb	r3, r3
}
   19eb6:	0018      	movs	r0, r3
   19eb8:	46bd      	mov	sp, r7
   19eba:	bd80      	pop	{r7, pc}
   19ebc:	41002000 	.word	0x41002000

00019ec0 <system_interrupt_enter_critical_section>:
{
   19ec0:	b580      	push	{r7, lr}
   19ec2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   19ec4:	4b02      	ldr	r3, [pc, #8]	; (19ed0 <system_interrupt_enter_critical_section+0x10>)
   19ec6:	4798      	blx	r3
}
   19ec8:	46c0      	nop			; (mov r8, r8)
   19eca:	46bd      	mov	sp, r7
   19ecc:	bd80      	pop	{r7, pc}
   19ece:	46c0      	nop			; (mov r8, r8)
   19ed0:	00028c19 	.word	0x00028c19

00019ed4 <system_interrupt_leave_critical_section>:
{
   19ed4:	b580      	push	{r7, lr}
   19ed6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   19ed8:	4b02      	ldr	r3, [pc, #8]	; (19ee4 <system_interrupt_leave_critical_section+0x10>)
   19eda:	4798      	blx	r3
}
   19edc:	46c0      	nop			; (mov r8, r8)
   19ede:	46bd      	mov	sp, r7
   19ee0:	bd80      	pop	{r7, pc}
   19ee2:	46c0      	nop			; (mov r8, r8)
   19ee4:	00028c6d 	.word	0x00028c6d

00019ee8 <system_interrupt_disable>:
{
   19ee8:	b580      	push	{r7, lr}
   19eea:	b082      	sub	sp, #8
   19eec:	af00      	add	r7, sp, #0
   19eee:	0002      	movs	r2, r0
   19ef0:	1dfb      	adds	r3, r7, #7
   19ef2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   19ef4:	4a07      	ldr	r2, [pc, #28]	; (19f14 <system_interrupt_disable+0x2c>)
   19ef6:	1dfb      	adds	r3, r7, #7
   19ef8:	781b      	ldrb	r3, [r3, #0]
   19efa:	0019      	movs	r1, r3
   19efc:	231f      	movs	r3, #31
   19efe:	400b      	ands	r3, r1
   19f00:	2101      	movs	r1, #1
   19f02:	4099      	lsls	r1, r3
   19f04:	000b      	movs	r3, r1
   19f06:	0019      	movs	r1, r3
   19f08:	2380      	movs	r3, #128	; 0x80
   19f0a:	50d1      	str	r1, [r2, r3]
}
   19f0c:	46c0      	nop			; (mov r8, r8)
   19f0e:	46bd      	mov	sp, r7
   19f10:	b002      	add	sp, #8
   19f12:	bd80      	pop	{r7, pc}
   19f14:	e000e100 	.word	0xe000e100

00019f18 <i2c_master_is_syncing>:
{
   19f18:	b580      	push	{r7, lr}
   19f1a:	b084      	sub	sp, #16
   19f1c:	af00      	add	r7, sp, #0
   19f1e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   19f20:	687b      	ldr	r3, [r7, #4]
   19f22:	681b      	ldr	r3, [r3, #0]
   19f24:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   19f26:	68fb      	ldr	r3, [r7, #12]
   19f28:	69db      	ldr	r3, [r3, #28]
   19f2a:	2207      	movs	r2, #7
   19f2c:	4013      	ands	r3, r2
   19f2e:	1e5a      	subs	r2, r3, #1
   19f30:	4193      	sbcs	r3, r2
   19f32:	b2db      	uxtb	r3, r3
}
   19f34:	0018      	movs	r0, r3
   19f36:	46bd      	mov	sp, r7
   19f38:	b004      	add	sp, #16
   19f3a:	bd80      	pop	{r7, pc}

00019f3c <_i2c_master_wait_for_sync>:
{
   19f3c:	b580      	push	{r7, lr}
   19f3e:	b082      	sub	sp, #8
   19f40:	af00      	add	r7, sp, #0
   19f42:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   19f44:	46c0      	nop			; (mov r8, r8)
   19f46:	687b      	ldr	r3, [r7, #4]
   19f48:	0018      	movs	r0, r3
   19f4a:	4b04      	ldr	r3, [pc, #16]	; (19f5c <_i2c_master_wait_for_sync+0x20>)
   19f4c:	4798      	blx	r3
   19f4e:	1e03      	subs	r3, r0, #0
   19f50:	d1f9      	bne.n	19f46 <_i2c_master_wait_for_sync+0xa>
}
   19f52:	46c0      	nop			; (mov r8, r8)
   19f54:	46bd      	mov	sp, r7
   19f56:	b002      	add	sp, #8
   19f58:	bd80      	pop	{r7, pc}
   19f5a:	46c0      	nop			; (mov r8, r8)
   19f5c:	00019f19 	.word	0x00019f19

00019f60 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   19f60:	b580      	push	{r7, lr}
   19f62:	b084      	sub	sp, #16
   19f64:	af00      	add	r7, sp, #0
   19f66:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19f68:	687b      	ldr	r3, [r7, #4]
   19f6a:	681b      	ldr	r3, [r3, #0]
   19f6c:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   19f6e:	687b      	ldr	r3, [r7, #4]
   19f70:	681b      	ldr	r3, [r3, #0]
   19f72:	0018      	movs	r0, r3
   19f74:	4b0d      	ldr	r3, [pc, #52]	; (19fac <i2c_master_disable+0x4c>)
   19f76:	4798      	blx	r3
   19f78:	0003      	movs	r3, r0
   19f7a:	0018      	movs	r0, r3
   19f7c:	4b0c      	ldr	r3, [pc, #48]	; (19fb0 <i2c_master_disable+0x50>)
   19f7e:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   19f80:	687b      	ldr	r3, [r7, #4]
   19f82:	0018      	movs	r0, r3
   19f84:	4b0b      	ldr	r3, [pc, #44]	; (19fb4 <i2c_master_disable+0x54>)
   19f86:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   19f88:	68fb      	ldr	r3, [r7, #12]
   19f8a:	2283      	movs	r2, #131	; 0x83
   19f8c:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   19f8e:	68fb      	ldr	r3, [r7, #12]
   19f90:	2283      	movs	r2, #131	; 0x83
   19f92:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   19f94:	68fb      	ldr	r3, [r7, #12]
   19f96:	681b      	ldr	r3, [r3, #0]
   19f98:	2202      	movs	r2, #2
   19f9a:	4393      	bics	r3, r2
   19f9c:	001a      	movs	r2, r3
   19f9e:	68fb      	ldr	r3, [r7, #12]
   19fa0:	601a      	str	r2, [r3, #0]

}
   19fa2:	46c0      	nop			; (mov r8, r8)
   19fa4:	46bd      	mov	sp, r7
   19fa6:	b004      	add	sp, #16
   19fa8:	bd80      	pop	{r7, pc}
   19faa:	46c0      	nop			; (mov r8, r8)
   19fac:	0002a0ed 	.word	0x0002a0ed
   19fb0:	00019ee9 	.word	0x00019ee9
   19fb4:	00019f3d 	.word	0x00019f3d

00019fb8 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   19fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19fba:	b097      	sub	sp, #92	; 0x5c
   19fbc:	af00      	add	r7, sp, #0
   19fbe:	6178      	str	r0, [r7, #20]
   19fc0:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   19fc2:	2300      	movs	r3, #0
   19fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   19fc6:	2300      	movs	r3, #0
   19fc8:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   19fca:	2300      	movs	r3, #0
   19fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   19fce:	233b      	movs	r3, #59	; 0x3b
   19fd0:	2210      	movs	r2, #16
   19fd2:	4694      	mov	ip, r2
   19fd4:	44bc      	add	ip, r7
   19fd6:	4463      	add	r3, ip
   19fd8:	2200      	movs	r2, #0
   19fda:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19fdc:	697b      	ldr	r3, [r7, #20]
   19fde:	681b      	ldr	r3, [r3, #0]
   19fe0:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   19fe2:	697b      	ldr	r3, [r7, #20]
   19fe4:	681b      	ldr	r3, [r3, #0]
   19fe6:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   19fe8:	2323      	movs	r3, #35	; 0x23
   19fea:	2210      	movs	r2, #16
   19fec:	18ba      	adds	r2, r7, r2
   19fee:	18d4      	adds	r4, r2, r3
   19ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19ff2:	0018      	movs	r0, r3
   19ff4:	4bc0      	ldr	r3, [pc, #768]	; (1a2f8 <_i2c_master_set_config+0x340>)
   19ff6:	4798      	blx	r3
   19ff8:	0003      	movs	r3, r0
   19ffa:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   19ffc:	230c      	movs	r3, #12
   19ffe:	2210      	movs	r2, #16
   1a000:	4694      	mov	ip, r2
   1a002:	44bc      	add	ip, r7
   1a004:	4463      	add	r3, ip
   1a006:	0018      	movs	r0, r3
   1a008:	4bbc      	ldr	r3, [pc, #752]	; (1a2fc <_i2c_master_set_config+0x344>)
   1a00a:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   1a00c:	693b      	ldr	r3, [r7, #16]
   1a00e:	69db      	ldr	r3, [r3, #28]
   1a010:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   1a012:	693b      	ldr	r3, [r7, #16]
   1a014:	6a1b      	ldr	r3, [r3, #32]
   1a016:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   1a018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a01a:	2b00      	cmp	r3, #0
   1a01c:	d106      	bne.n	1a02c <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1a01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a020:	2100      	movs	r1, #0
   1a022:	0018      	movs	r0, r3
   1a024:	4bb6      	ldr	r3, [pc, #728]	; (1a300 <_i2c_master_set_config+0x348>)
   1a026:	4798      	blx	r3
   1a028:	0003      	movs	r3, r0
   1a02a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   1a02c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a02e:	b2da      	uxtb	r2, r3
   1a030:	230c      	movs	r3, #12
   1a032:	2110      	movs	r1, #16
   1a034:	468c      	mov	ip, r1
   1a036:	44bc      	add	ip, r7
   1a038:	4463      	add	r3, ip
   1a03a:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1a03c:	230c      	movs	r3, #12
   1a03e:	2210      	movs	r2, #16
   1a040:	4694      	mov	ip, r2
   1a042:	44bc      	add	ip, r7
   1a044:	4463      	add	r3, ip
   1a046:	2202      	movs	r2, #2
   1a048:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1a04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a04c:	0c1b      	lsrs	r3, r3, #16
   1a04e:	b2db      	uxtb	r3, r3
   1a050:	220c      	movs	r2, #12
   1a052:	2110      	movs	r1, #16
   1a054:	468c      	mov	ip, r1
   1a056:	44bc      	add	ip, r7
   1a058:	4462      	add	r2, ip
   1a05a:	0011      	movs	r1, r2
   1a05c:	0018      	movs	r0, r3
   1a05e:	4ba9      	ldr	r3, [pc, #676]	; (1a304 <_i2c_master_set_config+0x34c>)
   1a060:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   1a062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a064:	2b00      	cmp	r3, #0
   1a066:	d106      	bne.n	1a076 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   1a068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a06a:	2101      	movs	r1, #1
   1a06c:	0018      	movs	r0, r3
   1a06e:	4ba4      	ldr	r3, [pc, #656]	; (1a300 <_i2c_master_set_config+0x348>)
   1a070:	4798      	blx	r3
   1a072:	0003      	movs	r3, r0
   1a074:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   1a076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a078:	b2da      	uxtb	r2, r3
   1a07a:	230c      	movs	r3, #12
   1a07c:	2110      	movs	r1, #16
   1a07e:	468c      	mov	ip, r1
   1a080:	44bc      	add	ip, r7
   1a082:	4463      	add	r3, ip
   1a084:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1a086:	230c      	movs	r3, #12
   1a088:	2210      	movs	r2, #16
   1a08a:	4694      	mov	ip, r2
   1a08c:	44bc      	add	ip, r7
   1a08e:	4463      	add	r3, ip
   1a090:	2202      	movs	r2, #2
   1a092:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   1a094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a096:	0c1b      	lsrs	r3, r3, #16
   1a098:	b2db      	uxtb	r3, r3
   1a09a:	220c      	movs	r2, #12
   1a09c:	2110      	movs	r1, #16
   1a09e:	468c      	mov	ip, r1
   1a0a0:	44bc      	add	ip, r7
   1a0a2:	4462      	add	r2, ip
   1a0a4:	0011      	movs	r1, r2
   1a0a6:	0018      	movs	r0, r3
   1a0a8:	4b96      	ldr	r3, [pc, #600]	; (1a304 <_i2c_master_set_config+0x34c>)
   1a0aa:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   1a0ac:	693b      	ldr	r3, [r7, #16]
   1a0ae:	8a9a      	ldrh	r2, [r3, #20]
   1a0b0:	697b      	ldr	r3, [r7, #20]
   1a0b2:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   1a0b4:	693b      	ldr	r3, [r7, #16]
   1a0b6:	8ada      	ldrh	r2, [r3, #22]
   1a0b8:	697b      	ldr	r3, [r7, #20]
   1a0ba:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   1a0bc:	693b      	ldr	r3, [r7, #16]
   1a0be:	7e1b      	ldrb	r3, [r3, #24]
   1a0c0:	2b00      	cmp	r3, #0
   1a0c2:	d103      	bne.n	1a0cc <_i2c_master_set_config+0x114>
   1a0c4:	4b90      	ldr	r3, [pc, #576]	; (1a308 <_i2c_master_set_config+0x350>)
   1a0c6:	4798      	blx	r3
   1a0c8:	1e03      	subs	r3, r0, #0
   1a0ca:	d002      	beq.n	1a0d2 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   1a0cc:	2380      	movs	r3, #128	; 0x80
   1a0ce:	657b      	str	r3, [r7, #84]	; 0x54
   1a0d0:	e001      	b.n	1a0d6 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   1a0d2:	2300      	movs	r3, #0
   1a0d4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   1a0d6:	693b      	ldr	r3, [r7, #16]
   1a0d8:	691b      	ldr	r3, [r3, #16]
   1a0da:	2b00      	cmp	r3, #0
   1a0dc:	d004      	beq.n	1a0e8 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   1a0de:	693b      	ldr	r3, [r7, #16]
   1a0e0:	691b      	ldr	r3, [r3, #16]
   1a0e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a0e4:	4313      	orrs	r3, r2
   1a0e6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   1a0e8:	693b      	ldr	r3, [r7, #16]
   1a0ea:	689b      	ldr	r3, [r3, #8]
   1a0ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a0ee:	4313      	orrs	r3, r2
   1a0f0:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   1a0f2:	693b      	ldr	r3, [r7, #16]
   1a0f4:	2224      	movs	r2, #36	; 0x24
   1a0f6:	5c9b      	ldrb	r3, [r3, r2]
   1a0f8:	2b00      	cmp	r3, #0
   1a0fa:	d004      	beq.n	1a106 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   1a0fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a0fe:	2280      	movs	r2, #128	; 0x80
   1a100:	05d2      	lsls	r2, r2, #23
   1a102:	4313      	orrs	r3, r2
   1a104:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   1a106:	693b      	ldr	r3, [r7, #16]
   1a108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a10a:	2b00      	cmp	r3, #0
   1a10c:	d004      	beq.n	1a118 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   1a10e:	693b      	ldr	r3, [r7, #16]
   1a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a112:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a114:	4313      	orrs	r3, r2
   1a116:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   1a118:	693b      	ldr	r3, [r7, #16]
   1a11a:	222c      	movs	r2, #44	; 0x2c
   1a11c:	5c9b      	ldrb	r3, [r3, r2]
   1a11e:	2b00      	cmp	r3, #0
   1a120:	d105      	bne.n	1a12e <_i2c_master_set_config+0x176>
   1a122:	693b      	ldr	r3, [r7, #16]
   1a124:	689a      	ldr	r2, [r3, #8]
   1a126:	2380      	movs	r3, #128	; 0x80
   1a128:	049b      	lsls	r3, r3, #18
   1a12a:	429a      	cmp	r2, r3
   1a12c:	d104      	bne.n	1a138 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   1a12e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a130:	2280      	movs	r2, #128	; 0x80
   1a132:	0512      	lsls	r2, r2, #20
   1a134:	4313      	orrs	r3, r2
   1a136:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   1a138:	693b      	ldr	r3, [r7, #16]
   1a13a:	222d      	movs	r2, #45	; 0x2d
   1a13c:	5c9b      	ldrb	r3, [r3, r2]
   1a13e:	2b00      	cmp	r3, #0
   1a140:	d004      	beq.n	1a14c <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   1a142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a144:	2280      	movs	r2, #128	; 0x80
   1a146:	0412      	lsls	r2, r2, #16
   1a148:	4313      	orrs	r3, r2
   1a14a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   1a14c:	693b      	ldr	r3, [r7, #16]
   1a14e:	222e      	movs	r2, #46	; 0x2e
   1a150:	5c9b      	ldrb	r3, [r3, r2]
   1a152:	2b00      	cmp	r3, #0
   1a154:	d004      	beq.n	1a160 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   1a156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a158:	2280      	movs	r2, #128	; 0x80
   1a15a:	03d2      	lsls	r2, r2, #15
   1a15c:	4313      	orrs	r3, r2
   1a15e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   1a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a162:	681a      	ldr	r2, [r3, #0]
   1a164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a166:	431a      	orrs	r2, r3
   1a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a16a:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   1a16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a16e:	2280      	movs	r2, #128	; 0x80
   1a170:	0052      	lsls	r2, r2, #1
   1a172:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   1a174:	2323      	movs	r3, #35	; 0x23
   1a176:	2210      	movs	r2, #16
   1a178:	4694      	mov	ip, r2
   1a17a:	44bc      	add	ip, r7
   1a17c:	4463      	add	r3, ip
   1a17e:	781b      	ldrb	r3, [r3, #0]
   1a180:	3314      	adds	r3, #20
   1a182:	b2db      	uxtb	r3, r3
   1a184:	0018      	movs	r0, r3
   1a186:	4b61      	ldr	r3, [pc, #388]	; (1a30c <_i2c_master_set_config+0x354>)
   1a188:	4798      	blx	r3
   1a18a:	0003      	movs	r3, r0
   1a18c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   1a18e:	693b      	ldr	r3, [r7, #16]
   1a190:	681b      	ldr	r3, [r3, #0]
   1a192:	22fa      	movs	r2, #250	; 0xfa
   1a194:	0092      	lsls	r2, r2, #2
   1a196:	4353      	muls	r3, r2
   1a198:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   1a19a:	693b      	ldr	r3, [r7, #16]
   1a19c:	685b      	ldr	r3, [r3, #4]
   1a19e:	22fa      	movs	r2, #250	; 0xfa
   1a1a0:	0092      	lsls	r2, r2, #2
   1a1a2:	4353      	muls	r3, r2
   1a1a4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   1a1a6:	693b      	ldr	r3, [r7, #16]
   1a1a8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   1a1aa:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   1a1ac:	4b58      	ldr	r3, [pc, #352]	; (1a310 <_i2c_master_set_config+0x358>)
   1a1ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a1b0:	4798      	blx	r3
   1a1b2:	0005      	movs	r5, r0
   1a1b4:	000e      	movs	r6, r1
   1a1b6:	4b56      	ldr	r3, [pc, #344]	; (1a310 <_i2c_master_set_config+0x358>)
   1a1b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a1ba:	4798      	blx	r3
   1a1bc:	60b8      	str	r0, [r7, #8]
   1a1be:	60f9      	str	r1, [r7, #12]
   1a1c0:	4b53      	ldr	r3, [pc, #332]	; (1a310 <_i2c_master_set_config+0x358>)
   1a1c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a1c4:	4798      	blx	r3
   1a1c6:	4c53      	ldr	r4, [pc, #332]	; (1a314 <_i2c_master_set_config+0x35c>)
   1a1c8:	4a53      	ldr	r2, [pc, #332]	; (1a318 <_i2c_master_set_config+0x360>)
   1a1ca:	4b54      	ldr	r3, [pc, #336]	; (1a31c <_i2c_master_set_config+0x364>)
   1a1cc:	47a0      	blx	r4
   1a1ce:	0003      	movs	r3, r0
   1a1d0:	000c      	movs	r4, r1
   1a1d2:	603b      	str	r3, [r7, #0]
   1a1d4:	607c      	str	r4, [r7, #4]
   1a1d6:	4b4e      	ldr	r3, [pc, #312]	; (1a310 <_i2c_master_set_config+0x358>)
   1a1d8:	6a38      	ldr	r0, [r7, #32]
   1a1da:	4798      	blx	r3
   1a1dc:	0002      	movs	r2, r0
   1a1de:	000b      	movs	r3, r1
   1a1e0:	4c4c      	ldr	r4, [pc, #304]	; (1a314 <_i2c_master_set_config+0x35c>)
   1a1e2:	6838      	ldr	r0, [r7, #0]
   1a1e4:	6879      	ldr	r1, [r7, #4]
   1a1e6:	47a0      	blx	r4
   1a1e8:	0003      	movs	r3, r0
   1a1ea:	000c      	movs	r4, r1
   1a1ec:	0018      	movs	r0, r3
   1a1ee:	0021      	movs	r1, r4
   1a1f0:	4c4b      	ldr	r4, [pc, #300]	; (1a320 <_i2c_master_set_config+0x368>)
   1a1f2:	2200      	movs	r2, #0
   1a1f4:	4b4b      	ldr	r3, [pc, #300]	; (1a324 <_i2c_master_set_config+0x36c>)
   1a1f6:	47a0      	blx	r4
   1a1f8:	0003      	movs	r3, r0
   1a1fa:	000c      	movs	r4, r1
   1a1fc:	001a      	movs	r2, r3
   1a1fe:	0023      	movs	r3, r4
   1a200:	4c44      	ldr	r4, [pc, #272]	; (1a314 <_i2c_master_set_config+0x35c>)
   1a202:	68b8      	ldr	r0, [r7, #8]
   1a204:	68f9      	ldr	r1, [r7, #12]
   1a206:	47a0      	blx	r4
   1a208:	0003      	movs	r3, r0
   1a20a:	000c      	movs	r4, r1
   1a20c:	001a      	movs	r2, r3
   1a20e:	0023      	movs	r3, r4
   1a210:	4c45      	ldr	r4, [pc, #276]	; (1a328 <_i2c_master_set_config+0x370>)
   1a212:	0028      	movs	r0, r5
   1a214:	0031      	movs	r1, r6
   1a216:	47a0      	blx	r4
   1a218:	0003      	movs	r3, r0
   1a21a:	000c      	movs	r4, r1
   1a21c:	001d      	movs	r5, r3
   1a21e:	0026      	movs	r6, r4
   1a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a222:	005a      	lsls	r2, r3, #1
   1a224:	4b3a      	ldr	r3, [pc, #232]	; (1a310 <_i2c_master_set_config+0x358>)
   1a226:	0010      	movs	r0, r2
   1a228:	4798      	blx	r3
   1a22a:	0002      	movs	r2, r0
   1a22c:	000b      	movs	r3, r1
   1a22e:	4c3c      	ldr	r4, [pc, #240]	; (1a320 <_i2c_master_set_config+0x368>)
   1a230:	0028      	movs	r0, r5
   1a232:	0031      	movs	r1, r6
   1a234:	47a0      	blx	r4
   1a236:	0003      	movs	r3, r0
   1a238:	000c      	movs	r4, r1
   1a23a:	0018      	movs	r0, r3
   1a23c:	0021      	movs	r1, r4
   1a23e:	4c3a      	ldr	r4, [pc, #232]	; (1a328 <_i2c_master_set_config+0x370>)
   1a240:	2200      	movs	r2, #0
   1a242:	4b3a      	ldr	r3, [pc, #232]	; (1a32c <_i2c_master_set_config+0x374>)
   1a244:	47a0      	blx	r4
   1a246:	0003      	movs	r3, r0
   1a248:	000c      	movs	r4, r1
   1a24a:	001d      	movs	r5, r3
   1a24c:	0026      	movs	r6, r4
   1a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a250:	005a      	lsls	r2, r3, #1
   1a252:	4b2f      	ldr	r3, [pc, #188]	; (1a310 <_i2c_master_set_config+0x358>)
   1a254:	0010      	movs	r0, r2
   1a256:	4798      	blx	r3
   1a258:	0002      	movs	r2, r0
   1a25a:	000b      	movs	r3, r1
   1a25c:	4c34      	ldr	r4, [pc, #208]	; (1a330 <_i2c_master_set_config+0x378>)
   1a25e:	0028      	movs	r0, r5
   1a260:	0031      	movs	r1, r6
   1a262:	47a0      	blx	r4
   1a264:	0003      	movs	r3, r0
   1a266:	000c      	movs	r4, r1
   1a268:	0019      	movs	r1, r3
   1a26a:	0022      	movs	r2, r4
   1a26c:	4b31      	ldr	r3, [pc, #196]	; (1a334 <_i2c_master_set_config+0x37c>)
   1a26e:	0008      	movs	r0, r1
   1a270:	0011      	movs	r1, r2
   1a272:	4798      	blx	r3
   1a274:	0003      	movs	r3, r0
   1a276:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   1a278:	693b      	ldr	r3, [r7, #16]
   1a27a:	689a      	ldr	r2, [r3, #8]
   1a27c:	2380      	movs	r3, #128	; 0x80
   1a27e:	049b      	lsls	r3, r3, #18
   1a280:	429a      	cmp	r2, r3
   1a282:	d16a      	bne.n	1a35a <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   1a284:	4b22      	ldr	r3, [pc, #136]	; (1a310 <_i2c_master_set_config+0x358>)
   1a286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a288:	4798      	blx	r3
   1a28a:	4c25      	ldr	r4, [pc, #148]	; (1a320 <_i2c_master_set_config+0x368>)
   1a28c:	0002      	movs	r2, r0
   1a28e:	000b      	movs	r3, r1
   1a290:	47a0      	blx	r4
   1a292:	0003      	movs	r3, r0
   1a294:	000c      	movs	r4, r1
   1a296:	001d      	movs	r5, r3
   1a298:	0026      	movs	r6, r4
   1a29a:	4b1d      	ldr	r3, [pc, #116]	; (1a310 <_i2c_master_set_config+0x358>)
   1a29c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1a29e:	4798      	blx	r3
   1a2a0:	4c1c      	ldr	r4, [pc, #112]	; (1a314 <_i2c_master_set_config+0x35c>)
   1a2a2:	2200      	movs	r2, #0
   1a2a4:	4b24      	ldr	r3, [pc, #144]	; (1a338 <_i2c_master_set_config+0x380>)
   1a2a6:	47a0      	blx	r4
   1a2a8:	0003      	movs	r3, r0
   1a2aa:	000c      	movs	r4, r1
   1a2ac:	001a      	movs	r2, r3
   1a2ae:	0023      	movs	r3, r4
   1a2b0:	4c1f      	ldr	r4, [pc, #124]	; (1a330 <_i2c_master_set_config+0x378>)
   1a2b2:	0028      	movs	r0, r5
   1a2b4:	0031      	movs	r1, r6
   1a2b6:	47a0      	blx	r4
   1a2b8:	0003      	movs	r3, r0
   1a2ba:	000c      	movs	r4, r1
   1a2bc:	0018      	movs	r0, r3
   1a2be:	0021      	movs	r1, r4
   1a2c0:	4c19      	ldr	r4, [pc, #100]	; (1a328 <_i2c_master_set_config+0x370>)
   1a2c2:	2200      	movs	r2, #0
   1a2c4:	4b19      	ldr	r3, [pc, #100]	; (1a32c <_i2c_master_set_config+0x374>)
   1a2c6:	47a0      	blx	r4
   1a2c8:	0003      	movs	r3, r0
   1a2ca:	000c      	movs	r4, r1
   1a2cc:	0019      	movs	r1, r3
   1a2ce:	0022      	movs	r2, r4
   1a2d0:	4b18      	ldr	r3, [pc, #96]	; (1a334 <_i2c_master_set_config+0x37c>)
   1a2d2:	0008      	movs	r0, r1
   1a2d4:	0011      	movs	r1, r2
   1a2d6:	4798      	blx	r3
   1a2d8:	0003      	movs	r3, r0
   1a2da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   1a2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a2de:	2b00      	cmp	r3, #0
   1a2e0:	d02e      	beq.n	1a340 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   1a2e2:	4b16      	ldr	r3, [pc, #88]	; (1a33c <_i2c_master_set_config+0x384>)
   1a2e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1a2e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a2e8:	4798      	blx	r3
   1a2ea:	0003      	movs	r3, r0
   1a2ec:	1e9a      	subs	r2, r3, #2
   1a2ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a2f0:	1ad3      	subs	r3, r2, r3
   1a2f2:	653b      	str	r3, [r7, #80]	; 0x50
   1a2f4:	e031      	b.n	1a35a <_i2c_master_set_config+0x3a2>
   1a2f6:	46c0      	nop			; (mov r8, r8)
   1a2f8:	0002a01d 	.word	0x0002a01d
   1a2fc:	00019e79 	.word	0x00019e79
   1a300:	00029e61 	.word	0x00029e61
   1a304:	0002cc0d 	.word	0x0002cc0d
   1a308:	00019ea1 	.word	0x00019ea1
   1a30c:	0002c9d1 	.word	0x0002c9d1
   1a310:	000375d5 	.word	0x000375d5
   1a314:	00036a41 	.word	0x00036a41
   1a318:	e826d695 	.word	0xe826d695
   1a31c:	3e112e0b 	.word	0x3e112e0b
   1a320:	00035db9 	.word	0x00035db9
   1a324:	40240000 	.word	0x40240000
   1a328:	00036f41 	.word	0x00036f41
   1a32c:	3ff00000 	.word	0x3ff00000
   1a330:	000363d9 	.word	0x000363d9
   1a334:	0003756d 	.word	0x0003756d
   1a338:	40080000 	.word	0x40080000
   1a33c:	00035449 	.word	0x00035449
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   1a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a342:	005a      	lsls	r2, r3, #1
   1a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a346:	18d3      	adds	r3, r2, r3
   1a348:	1e5a      	subs	r2, r3, #1
   1a34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a34c:	0059      	lsls	r1, r3, #1
   1a34e:	4b1d      	ldr	r3, [pc, #116]	; (1a3c4 <_i2c_master_set_config+0x40c>)
   1a350:	0010      	movs	r0, r2
   1a352:	4798      	blx	r3
   1a354:	0003      	movs	r3, r0
   1a356:	3b01      	subs	r3, #1
   1a358:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   1a35a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a35c:	2bff      	cmp	r3, #255	; 0xff
   1a35e:	dc08      	bgt.n	1a372 <_i2c_master_set_config+0x3ba>
   1a360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a362:	2b00      	cmp	r3, #0
   1a364:	db05      	blt.n	1a372 <_i2c_master_set_config+0x3ba>
   1a366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a368:	2bff      	cmp	r3, #255	; 0xff
   1a36a:	dc02      	bgt.n	1a372 <_i2c_master_set_config+0x3ba>
   1a36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a36e:	2b00      	cmp	r3, #0
   1a370:	da06      	bge.n	1a380 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1a372:	233b      	movs	r3, #59	; 0x3b
   1a374:	2210      	movs	r2, #16
   1a376:	4694      	mov	ip, r2
   1a378:	44bc      	add	ip, r7
   1a37a:	4463      	add	r3, ip
   1a37c:	2240      	movs	r2, #64	; 0x40
   1a37e:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   1a380:	233b      	movs	r3, #59	; 0x3b
   1a382:	2210      	movs	r2, #16
   1a384:	4694      	mov	ip, r2
   1a386:	44bc      	add	ip, r7
   1a388:	4463      	add	r3, ip
   1a38a:	781b      	ldrb	r3, [r3, #0]
   1a38c:	2b40      	cmp	r3, #64	; 0x40
   1a38e:	d00e      	beq.n	1a3ae <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1a390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a392:	22ff      	movs	r2, #255	; 0xff
   1a394:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1a396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a398:	041b      	lsls	r3, r3, #16
   1a39a:	0019      	movs	r1, r3
   1a39c:	23ff      	movs	r3, #255	; 0xff
   1a39e:	041b      	lsls	r3, r3, #16
   1a3a0:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1a3a2:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1a3a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1a3a6:	0612      	lsls	r2, r2, #24
   1a3a8:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1a3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a3ac:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   1a3ae:	233b      	movs	r3, #59	; 0x3b
   1a3b0:	2210      	movs	r2, #16
   1a3b2:	4694      	mov	ip, r2
   1a3b4:	44bc      	add	ip, r7
   1a3b6:	4463      	add	r3, ip
   1a3b8:	781b      	ldrb	r3, [r3, #0]
}
   1a3ba:	0018      	movs	r0, r3
   1a3bc:	46bd      	mov	sp, r7
   1a3be:	b017      	add	sp, #92	; 0x5c
   1a3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a3c2:	46c0      	nop			; (mov r8, r8)
   1a3c4:	00035449 	.word	0x00035449

0001a3c8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   1a3c8:	b590      	push	{r4, r7, lr}
   1a3ca:	b08b      	sub	sp, #44	; 0x2c
   1a3cc:	af00      	add	r7, sp, #0
   1a3ce:	60f8      	str	r0, [r7, #12]
   1a3d0:	60b9      	str	r1, [r7, #8]
   1a3d2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   1a3d4:	68fb      	ldr	r3, [r7, #12]
   1a3d6:	68ba      	ldr	r2, [r7, #8]
   1a3d8:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a3da:	68fb      	ldr	r3, [r7, #12]
   1a3dc:	681b      	ldr	r3, [r3, #0]
   1a3de:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1a3e0:	68fb      	ldr	r3, [r7, #12]
   1a3e2:	681b      	ldr	r3, [r3, #0]
   1a3e4:	0018      	movs	r0, r3
   1a3e6:	4b3b      	ldr	r3, [pc, #236]	; (1a4d4 <i2c_master_init+0x10c>)
   1a3e8:	4798      	blx	r3
   1a3ea:	0003      	movs	r3, r0
   1a3ec:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1a3ee:	6a3b      	ldr	r3, [r7, #32]
   1a3f0:	3302      	adds	r3, #2
   1a3f2:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1a3f4:	6a3b      	ldr	r3, [r7, #32]
   1a3f6:	3314      	adds	r3, #20
   1a3f8:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1a3fa:	2201      	movs	r2, #1
   1a3fc:	69fb      	ldr	r3, [r7, #28]
   1a3fe:	409a      	lsls	r2, r3
   1a400:	0013      	movs	r3, r2
   1a402:	0019      	movs	r1, r3
   1a404:	2002      	movs	r0, #2
   1a406:	4b34      	ldr	r3, [pc, #208]	; (1a4d8 <i2c_master_init+0x110>)
   1a408:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1a40a:	2314      	movs	r3, #20
   1a40c:	18fb      	adds	r3, r7, r3
   1a40e:	0018      	movs	r0, r3
   1a410:	4b32      	ldr	r3, [pc, #200]	; (1a4dc <i2c_master_init+0x114>)
   1a412:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   1a414:	687b      	ldr	r3, [r7, #4]
   1a416:	7b1a      	ldrb	r2, [r3, #12]
   1a418:	2314      	movs	r3, #20
   1a41a:	18fb      	adds	r3, r7, r3
   1a41c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1a41e:	69bb      	ldr	r3, [r7, #24]
   1a420:	b2db      	uxtb	r3, r3
   1a422:	2214      	movs	r2, #20
   1a424:	18ba      	adds	r2, r7, r2
   1a426:	0011      	movs	r1, r2
   1a428:	0018      	movs	r0, r3
   1a42a:	4b2d      	ldr	r3, [pc, #180]	; (1a4e0 <i2c_master_init+0x118>)
   1a42c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1a42e:	69bb      	ldr	r3, [r7, #24]
   1a430:	b2db      	uxtb	r3, r3
   1a432:	0018      	movs	r0, r3
   1a434:	4b2b      	ldr	r3, [pc, #172]	; (1a4e4 <i2c_master_init+0x11c>)
   1a436:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1a438:	687b      	ldr	r3, [r7, #4]
   1a43a:	7b1b      	ldrb	r3, [r3, #12]
   1a43c:	2100      	movs	r1, #0
   1a43e:	0018      	movs	r0, r3
   1a440:	4b29      	ldr	r3, [pc, #164]	; (1a4e8 <i2c_master_init+0x120>)
   1a442:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   1a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a446:	681b      	ldr	r3, [r3, #0]
   1a448:	2202      	movs	r2, #2
   1a44a:	4013      	ands	r3, r2
   1a44c:	d001      	beq.n	1a452 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   1a44e:	231c      	movs	r3, #28
   1a450:	e03b      	b.n	1a4ca <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   1a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a454:	681b      	ldr	r3, [r3, #0]
   1a456:	2201      	movs	r2, #1
   1a458:	4013      	ands	r3, r2
   1a45a:	d001      	beq.n	1a460 <i2c_master_init+0x98>
		return STATUS_BUSY;
   1a45c:	2305      	movs	r3, #5
   1a45e:	e034      	b.n	1a4ca <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   1a460:	68fb      	ldr	r3, [r7, #12]
   1a462:	681b      	ldr	r3, [r3, #0]
   1a464:	2217      	movs	r2, #23
   1a466:	18bc      	adds	r4, r7, r2
   1a468:	0018      	movs	r0, r3
   1a46a:	4b1a      	ldr	r3, [pc, #104]	; (1a4d4 <i2c_master_init+0x10c>)
   1a46c:	4798      	blx	r3
   1a46e:	0003      	movs	r3, r0
   1a470:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   1a472:	4a1e      	ldr	r2, [pc, #120]	; (1a4ec <i2c_master_init+0x124>)
   1a474:	2317      	movs	r3, #23
   1a476:	18fb      	adds	r3, r7, r3
   1a478:	781b      	ldrb	r3, [r3, #0]
   1a47a:	0011      	movs	r1, r2
   1a47c:	0018      	movs	r0, r3
   1a47e:	4b1c      	ldr	r3, [pc, #112]	; (1a4f0 <i2c_master_init+0x128>)
   1a480:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1a482:	2317      	movs	r3, #23
   1a484:	18fb      	adds	r3, r7, r3
   1a486:	781a      	ldrb	r2, [r3, #0]
   1a488:	4b1a      	ldr	r3, [pc, #104]	; (1a4f4 <i2c_master_init+0x12c>)
   1a48a:	0092      	lsls	r2, r2, #2
   1a48c:	68f9      	ldr	r1, [r7, #12]
   1a48e:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   1a490:	68fb      	ldr	r3, [r7, #12]
   1a492:	2200      	movs	r2, #0
   1a494:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   1a496:	68fb      	ldr	r3, [r7, #12]
   1a498:	2200      	movs	r2, #0
   1a49a:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   1a49c:	68fb      	ldr	r3, [r7, #12]
   1a49e:	2200      	movs	r2, #0
   1a4a0:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   1a4a2:	68fb      	ldr	r3, [r7, #12]
   1a4a4:	2200      	movs	r2, #0
   1a4a6:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   1a4a8:	68fb      	ldr	r3, [r7, #12]
   1a4aa:	2225      	movs	r2, #37	; 0x25
   1a4ac:	2100      	movs	r1, #0
   1a4ae:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   1a4b0:	68fb      	ldr	r3, [r7, #12]
   1a4b2:	2200      	movs	r2, #0
   1a4b4:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   1a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a4b8:	2214      	movs	r2, #20
   1a4ba:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   1a4bc:	687a      	ldr	r2, [r7, #4]
   1a4be:	68fb      	ldr	r3, [r7, #12]
   1a4c0:	0011      	movs	r1, r2
   1a4c2:	0018      	movs	r0, r3
   1a4c4:	4b0c      	ldr	r3, [pc, #48]	; (1a4f8 <i2c_master_init+0x130>)
   1a4c6:	4798      	blx	r3
   1a4c8:	0003      	movs	r3, r0
}
   1a4ca:	0018      	movs	r0, r3
   1a4cc:	46bd      	mov	sp, r7
   1a4ce:	b00b      	add	sp, #44	; 0x2c
   1a4d0:	bd90      	pop	{r4, r7, pc}
   1a4d2:	46c0      	nop			; (mov r8, r8)
   1a4d4:	0002a01d 	.word	0x0002a01d
   1a4d8:	00019e1d 	.word	0x00019e1d
   1a4dc:	00019e05 	.word	0x00019e05
   1a4e0:	0002c8ad 	.word	0x0002c8ad
   1a4e4:	0002c8f1 	.word	0x0002c8f1
   1a4e8:	00029dd5 	.word	0x00029dd5
   1a4ec:	00012bcd 	.word	0x00012bcd
   1a4f0:	0002a081 	.word	0x0002a081
   1a4f4:	20005b90 	.word	0x20005b90
   1a4f8:	00019fb9 	.word	0x00019fb9

0001a4fc <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   1a4fc:	b580      	push	{r7, lr}
   1a4fe:	b084      	sub	sp, #16
   1a500:	af00      	add	r7, sp, #0
   1a502:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a504:	687b      	ldr	r3, [r7, #4]
   1a506:	681b      	ldr	r3, [r3, #0]
   1a508:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1a50a:	687b      	ldr	r3, [r7, #4]
   1a50c:	0018      	movs	r0, r3
   1a50e:	4b0f      	ldr	r3, [pc, #60]	; (1a54c <i2c_master_reset+0x50>)
   1a510:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   1a512:	687b      	ldr	r3, [r7, #4]
   1a514:	0018      	movs	r0, r3
   1a516:	4b0e      	ldr	r3, [pc, #56]	; (1a550 <i2c_master_reset+0x54>)
   1a518:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1a51a:	4b0e      	ldr	r3, [pc, #56]	; (1a554 <i2c_master_reset+0x58>)
   1a51c:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   1a51e:	687b      	ldr	r3, [r7, #4]
   1a520:	681b      	ldr	r3, [r3, #0]
   1a522:	0018      	movs	r0, r3
   1a524:	4b0c      	ldr	r3, [pc, #48]	; (1a558 <i2c_master_reset+0x5c>)
   1a526:	4798      	blx	r3
   1a528:	0003      	movs	r3, r0
   1a52a:	0018      	movs	r0, r3
   1a52c:	4b0b      	ldr	r3, [pc, #44]	; (1a55c <i2c_master_reset+0x60>)
   1a52e:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   1a530:	4b0b      	ldr	r3, [pc, #44]	; (1a560 <i2c_master_reset+0x64>)
   1a532:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1a534:	687b      	ldr	r3, [r7, #4]
   1a536:	0018      	movs	r0, r3
   1a538:	4b04      	ldr	r3, [pc, #16]	; (1a54c <i2c_master_reset+0x50>)
   1a53a:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   1a53c:	68fb      	ldr	r3, [r7, #12]
   1a53e:	2201      	movs	r2, #1
   1a540:	601a      	str	r2, [r3, #0]
}
   1a542:	46c0      	nop			; (mov r8, r8)
   1a544:	46bd      	mov	sp, r7
   1a546:	b004      	add	sp, #16
   1a548:	bd80      	pop	{r7, pc}
   1a54a:	46c0      	nop			; (mov r8, r8)
   1a54c:	00019f3d 	.word	0x00019f3d
   1a550:	00019f61 	.word	0x00019f61
   1a554:	00019ec1 	.word	0x00019ec1
   1a558:	0002a0ed 	.word	0x0002a0ed
   1a55c:	0002ca29 	.word	0x0002ca29
   1a560:	00019ed5 	.word	0x00019ed5

0001a564 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   1a564:	b580      	push	{r7, lr}
   1a566:	b084      	sub	sp, #16
   1a568:	af00      	add	r7, sp, #0
   1a56a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a56c:	687b      	ldr	r3, [r7, #4]
   1a56e:	681b      	ldr	r3, [r3, #0]
   1a570:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   1a572:	68fb      	ldr	r3, [r7, #12]
   1a574:	7e1b      	ldrb	r3, [r3, #24]
   1a576:	b2db      	uxtb	r3, r3
   1a578:	001a      	movs	r2, r3
   1a57a:	2302      	movs	r3, #2
   1a57c:	4013      	ands	r3, r2
   1a57e:	d00b      	beq.n	1a598 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   1a580:	68fb      	ldr	r3, [r7, #12]
   1a582:	2202      	movs	r2, #2
   1a584:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1a586:	68fb      	ldr	r3, [r7, #12]
   1a588:	8b5b      	ldrh	r3, [r3, #26]
   1a58a:	b29b      	uxth	r3, r3
   1a58c:	001a      	movs	r2, r3
   1a58e:	2302      	movs	r3, #2
   1a590:	4013      	ands	r3, r2
   1a592:	d011      	beq.n	1a5b8 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   1a594:	2341      	movs	r3, #65	; 0x41
   1a596:	e010      	b.n	1a5ba <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1a598:	68fb      	ldr	r3, [r7, #12]
   1a59a:	8b5b      	ldrh	r3, [r3, #26]
   1a59c:	b29b      	uxth	r3, r3
   1a59e:	001a      	movs	r2, r3
   1a5a0:	2304      	movs	r3, #4
   1a5a2:	4013      	ands	r3, r2
   1a5a4:	d008      	beq.n	1a5b8 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1a5a6:	68fb      	ldr	r3, [r7, #12]
   1a5a8:	685b      	ldr	r3, [r3, #4]
   1a5aa:	22c0      	movs	r2, #192	; 0xc0
   1a5ac:	0292      	lsls	r2, r2, #10
   1a5ae:	431a      	orrs	r2, r3
   1a5b0:	68fb      	ldr	r3, [r7, #12]
   1a5b2:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   1a5b4:	2318      	movs	r3, #24
   1a5b6:	e000      	b.n	1a5ba <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   1a5b8:	2300      	movs	r3, #0
}
   1a5ba:	0018      	movs	r0, r3
   1a5bc:	46bd      	mov	sp, r7
   1a5be:	b004      	add	sp, #16
   1a5c0:	bd80      	pop	{r7, pc}

0001a5c2 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1a5c2:	b580      	push	{r7, lr}
   1a5c4:	b084      	sub	sp, #16
   1a5c6:	af00      	add	r7, sp, #0
   1a5c8:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a5ca:	687b      	ldr	r3, [r7, #4]
   1a5cc:	681b      	ldr	r3, [r3, #0]
   1a5ce:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   1a5d0:	230e      	movs	r3, #14
   1a5d2:	18fb      	adds	r3, r7, r3
   1a5d4:	2200      	movs	r2, #0
   1a5d6:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1a5d8:	e00f      	b.n	1a5fa <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   1a5da:	230e      	movs	r3, #14
   1a5dc:	18fb      	adds	r3, r7, r3
   1a5de:	220e      	movs	r2, #14
   1a5e0:	18ba      	adds	r2, r7, r2
   1a5e2:	8812      	ldrh	r2, [r2, #0]
   1a5e4:	3201      	adds	r2, #1
   1a5e6:	801a      	strh	r2, [r3, #0]
   1a5e8:	687b      	ldr	r3, [r7, #4]
   1a5ea:	891b      	ldrh	r3, [r3, #8]
   1a5ec:	220e      	movs	r2, #14
   1a5ee:	18ba      	adds	r2, r7, r2
   1a5f0:	8812      	ldrh	r2, [r2, #0]
   1a5f2:	429a      	cmp	r2, r3
   1a5f4:	d301      	bcc.n	1a5fa <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   1a5f6:	2312      	movs	r3, #18
   1a5f8:	e00e      	b.n	1a618 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1a5fa:	68bb      	ldr	r3, [r7, #8]
   1a5fc:	7e1b      	ldrb	r3, [r3, #24]
   1a5fe:	b2db      	uxtb	r3, r3
   1a600:	001a      	movs	r2, r3
   1a602:	2301      	movs	r3, #1
   1a604:	4013      	ands	r3, r2
   1a606:	d106      	bne.n	1a616 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1a608:	68bb      	ldr	r3, [r7, #8]
   1a60a:	7e1b      	ldrb	r3, [r3, #24]
   1a60c:	b2db      	uxtb	r3, r3
   1a60e:	001a      	movs	r2, r3
   1a610:	2302      	movs	r3, #2
   1a612:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1a614:	d0e1      	beq.n	1a5da <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   1a616:	2300      	movs	r3, #0
}
   1a618:	0018      	movs	r0, r3
   1a61a:	46bd      	mov	sp, r7
   1a61c:	b004      	add	sp, #16
   1a61e:	bd80      	pop	{r7, pc}

0001a620 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   1a620:	b590      	push	{r4, r7, lr}
   1a622:	b085      	sub	sp, #20
   1a624:	af00      	add	r7, sp, #0
   1a626:	6078      	str	r0, [r7, #4]
   1a628:	000a      	movs	r2, r1
   1a62a:	1cfb      	adds	r3, r7, #3
   1a62c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a62e:	687b      	ldr	r3, [r7, #4]
   1a630:	681b      	ldr	r3, [r3, #0]
   1a632:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1a634:	68fb      	ldr	r3, [r7, #12]
   1a636:	685b      	ldr	r3, [r3, #4]
   1a638:	2280      	movs	r2, #128	; 0x80
   1a63a:	02d2      	lsls	r2, r2, #11
   1a63c:	431a      	orrs	r2, r3
   1a63e:	68fb      	ldr	r3, [r7, #12]
   1a640:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   1a642:	1cfb      	adds	r3, r7, #3
   1a644:	781a      	ldrb	r2, [r3, #0]
   1a646:	68fb      	ldr	r3, [r7, #12]
   1a648:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1a64a:	230b      	movs	r3, #11
   1a64c:	18fc      	adds	r4, r7, r3
   1a64e:	687b      	ldr	r3, [r7, #4]
   1a650:	0018      	movs	r0, r3
   1a652:	4b07      	ldr	r3, [pc, #28]	; (1a670 <_i2c_master_send_hs_master_code+0x50>)
   1a654:	4798      	blx	r3
   1a656:	0003      	movs	r3, r0
   1a658:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   1a65a:	68fb      	ldr	r3, [r7, #12]
   1a65c:	2201      	movs	r2, #1
   1a65e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   1a660:	230b      	movs	r3, #11
   1a662:	18fb      	adds	r3, r7, r3
   1a664:	781b      	ldrb	r3, [r3, #0]
}
   1a666:	0018      	movs	r0, r3
   1a668:	46bd      	mov	sp, r7
   1a66a:	b005      	add	sp, #20
   1a66c:	bd90      	pop	{r4, r7, pc}
   1a66e:	46c0      	nop			; (mov r8, r8)
   1a670:	0001a5c3 	.word	0x0001a5c3

0001a674 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   1a674:	b580      	push	{r7, lr}
   1a676:	af00      	add	r7, sp, #0
   1a678:	2000      	movs	r0, #0
   1a67a:	4b02      	ldr	r3, [pc, #8]	; (1a684 <TC3_Handler+0x10>)
   1a67c:	4798      	blx	r3
   1a67e:	46c0      	nop			; (mov r8, r8)
   1a680:	46bd      	mov	sp, r7
   1a682:	bd80      	pop	{r7, pc}
   1a684:	0001a6b1 	.word	0x0001a6b1

0001a688 <TC4_Handler>:
   1a688:	b580      	push	{r7, lr}
   1a68a:	af00      	add	r7, sp, #0
   1a68c:	2001      	movs	r0, #1
   1a68e:	4b02      	ldr	r3, [pc, #8]	; (1a698 <TC4_Handler+0x10>)
   1a690:	4798      	blx	r3
   1a692:	46c0      	nop			; (mov r8, r8)
   1a694:	46bd      	mov	sp, r7
   1a696:	bd80      	pop	{r7, pc}
   1a698:	0001a6b1 	.word	0x0001a6b1

0001a69c <TC5_Handler>:
   1a69c:	b580      	push	{r7, lr}
   1a69e:	af00      	add	r7, sp, #0
   1a6a0:	2002      	movs	r0, #2
   1a6a2:	4b02      	ldr	r3, [pc, #8]	; (1a6ac <TC5_Handler+0x10>)
   1a6a4:	4798      	blx	r3
   1a6a6:	46c0      	nop			; (mov r8, r8)
   1a6a8:	46bd      	mov	sp, r7
   1a6aa:	bd80      	pop	{r7, pc}
   1a6ac:	0001a6b1 	.word	0x0001a6b1

0001a6b0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   1a6b0:	b580      	push	{r7, lr}
   1a6b2:	b084      	sub	sp, #16
   1a6b4:	af00      	add	r7, sp, #0
   1a6b6:	0002      	movs	r2, r0
   1a6b8:	1dfb      	adds	r3, r7, #7
   1a6ba:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   1a6bc:	1dfb      	adds	r3, r7, #7
   1a6be:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   1a6c0:	4b28      	ldr	r3, [pc, #160]	; (1a764 <_tc_interrupt_handler+0xb4>)
   1a6c2:	0092      	lsls	r2, r2, #2
   1a6c4:	58d3      	ldr	r3, [r2, r3]
   1a6c6:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1a6c8:	68fb      	ldr	r3, [r7, #12]
   1a6ca:	681b      	ldr	r3, [r3, #0]
   1a6cc:	7b9b      	ldrb	r3, [r3, #14]
   1a6ce:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   1a6d0:	68fa      	ldr	r2, [r7, #12]
   1a6d2:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1a6d4:	4013      	ands	r3, r2
   1a6d6:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   1a6d8:	68fb      	ldr	r3, [r7, #12]
   1a6da:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1a6dc:	230b      	movs	r3, #11
   1a6de:	18fb      	adds	r3, r7, r3
   1a6e0:	400a      	ands	r2, r1
   1a6e2:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1a6e4:	230b      	movs	r3, #11
   1a6e6:	18fb      	adds	r3, r7, r3
   1a6e8:	781b      	ldrb	r3, [r3, #0]
   1a6ea:	2201      	movs	r2, #1
   1a6ec:	4013      	ands	r3, r2
   1a6ee:	d008      	beq.n	1a702 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   1a6f0:	68fb      	ldr	r3, [r7, #12]
   1a6f2:	689b      	ldr	r3, [r3, #8]
   1a6f4:	68fa      	ldr	r2, [r7, #12]
   1a6f6:	0010      	movs	r0, r2
   1a6f8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1a6fa:	68fb      	ldr	r3, [r7, #12]
   1a6fc:	681b      	ldr	r3, [r3, #0]
   1a6fe:	2201      	movs	r2, #1
   1a700:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   1a702:	230b      	movs	r3, #11
   1a704:	18fb      	adds	r3, r7, r3
   1a706:	781b      	ldrb	r3, [r3, #0]
   1a708:	2202      	movs	r2, #2
   1a70a:	4013      	ands	r3, r2
   1a70c:	d008      	beq.n	1a720 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   1a70e:	68fb      	ldr	r3, [r7, #12]
   1a710:	68db      	ldr	r3, [r3, #12]
   1a712:	68fa      	ldr	r2, [r7, #12]
   1a714:	0010      	movs	r0, r2
   1a716:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   1a718:	68fb      	ldr	r3, [r7, #12]
   1a71a:	681b      	ldr	r3, [r3, #0]
   1a71c:	2202      	movs	r2, #2
   1a71e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   1a720:	230b      	movs	r3, #11
   1a722:	18fb      	adds	r3, r7, r3
   1a724:	781b      	ldrb	r3, [r3, #0]
   1a726:	2210      	movs	r2, #16
   1a728:	4013      	ands	r3, r2
   1a72a:	d008      	beq.n	1a73e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   1a72c:	68fb      	ldr	r3, [r7, #12]
   1a72e:	691b      	ldr	r3, [r3, #16]
   1a730:	68fa      	ldr	r2, [r7, #12]
   1a732:	0010      	movs	r0, r2
   1a734:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1a736:	68fb      	ldr	r3, [r7, #12]
   1a738:	681b      	ldr	r3, [r3, #0]
   1a73a:	2210      	movs	r2, #16
   1a73c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   1a73e:	230b      	movs	r3, #11
   1a740:	18fb      	adds	r3, r7, r3
   1a742:	781b      	ldrb	r3, [r3, #0]
   1a744:	2220      	movs	r2, #32
   1a746:	4013      	ands	r3, r2
   1a748:	d008      	beq.n	1a75c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1a74a:	68fb      	ldr	r3, [r7, #12]
   1a74c:	695b      	ldr	r3, [r3, #20]
   1a74e:	68fa      	ldr	r2, [r7, #12]
   1a750:	0010      	movs	r0, r2
   1a752:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1a754:	68fb      	ldr	r3, [r7, #12]
   1a756:	681b      	ldr	r3, [r3, #0]
   1a758:	2220      	movs	r2, #32
   1a75a:	739a      	strb	r2, [r3, #14]
	}
}
   1a75c:	46c0      	nop			; (mov r8, r8)
   1a75e:	46bd      	mov	sp, r7
   1a760:	b004      	add	sp, #16
   1a762:	bd80      	pop	{r7, pc}
   1a764:	20004978 	.word	0x20004978

0001a768 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   1a768:	b580      	push	{r7, lr}
   1a76a:	b084      	sub	sp, #16
   1a76c:	af00      	add	r7, sp, #0
   1a76e:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   1a770:	2300      	movs	r3, #0
   1a772:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   1a774:	687b      	ldr	r3, [r7, #4]
   1a776:	2b00      	cmp	r3, #0
   1a778:	d101      	bne.n	1a77e <FreeRTOS_CLIRegisterCommand+0x16>
   1a77a:	b672      	cpsid	i
   1a77c:	e7fe      	b.n	1a77c <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   1a77e:	2008      	movs	r0, #8
   1a780:	4b11      	ldr	r3, [pc, #68]	; (1a7c8 <FreeRTOS_CLIRegisterCommand+0x60>)
   1a782:	4798      	blx	r3
   1a784:	0003      	movs	r3, r0
   1a786:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   1a788:	68bb      	ldr	r3, [r7, #8]
   1a78a:	2b00      	cmp	r3, #0
   1a78c:	d101      	bne.n	1a792 <FreeRTOS_CLIRegisterCommand+0x2a>
   1a78e:	b672      	cpsid	i
   1a790:	e7fe      	b.n	1a790 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   1a792:	68bb      	ldr	r3, [r7, #8]
   1a794:	2b00      	cmp	r3, #0
   1a796:	d012      	beq.n	1a7be <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   1a798:	4b0c      	ldr	r3, [pc, #48]	; (1a7cc <FreeRTOS_CLIRegisterCommand+0x64>)
   1a79a:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   1a79c:	68bb      	ldr	r3, [r7, #8]
   1a79e:	687a      	ldr	r2, [r7, #4]
   1a7a0:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   1a7a2:	68bb      	ldr	r3, [r7, #8]
   1a7a4:	2200      	movs	r2, #0
   1a7a6:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   1a7a8:	4b09      	ldr	r3, [pc, #36]	; (1a7d0 <FreeRTOS_CLIRegisterCommand+0x68>)
   1a7aa:	681b      	ldr	r3, [r3, #0]
   1a7ac:	68ba      	ldr	r2, [r7, #8]
   1a7ae:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   1a7b0:	4b07      	ldr	r3, [pc, #28]	; (1a7d0 <FreeRTOS_CLIRegisterCommand+0x68>)
   1a7b2:	68ba      	ldr	r2, [r7, #8]
   1a7b4:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1a7b6:	4b07      	ldr	r3, [pc, #28]	; (1a7d4 <FreeRTOS_CLIRegisterCommand+0x6c>)
   1a7b8:	4798      	blx	r3

		xReturn = pdPASS;
   1a7ba:	2301      	movs	r3, #1
   1a7bc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   1a7be:	68fb      	ldr	r3, [r7, #12]
}
   1a7c0:	0018      	movs	r0, r3
   1a7c2:	46bd      	mov	sp, r7
   1a7c4:	b004      	add	sp, #16
   1a7c6:	bd80      	pop	{r7, pc}
   1a7c8:	0001cc31 	.word	0x0001cc31
   1a7cc:	0001caf9 	.word	0x0001caf9
   1a7d0:	200000f4 	.word	0x200000f4
   1a7d4:	0001cb1d 	.word	0x0001cb1d

0001a7d8 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   1a7d8:	b580      	push	{r7, lr}
   1a7da:	b088      	sub	sp, #32
   1a7dc:	af00      	add	r7, sp, #0
   1a7de:	60f8      	str	r0, [r7, #12]
   1a7e0:	60b9      	str	r1, [r7, #8]
   1a7e2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   1a7e4:	2301      	movs	r3, #1
   1a7e6:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   1a7e8:	4b3d      	ldr	r3, [pc, #244]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a7ea:	681b      	ldr	r3, [r3, #0]
   1a7ec:	2b00      	cmp	r3, #0
   1a7ee:	d144      	bne.n	1a87a <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1a7f0:	4b3b      	ldr	r3, [pc, #236]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a7f2:	4a3c      	ldr	r2, [pc, #240]	; (1a8e4 <FreeRTOS_CLIProcessCommand+0x10c>)
   1a7f4:	601a      	str	r2, [r3, #0]
   1a7f6:	e03a      	b.n	1a86e <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   1a7f8:	4b39      	ldr	r3, [pc, #228]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a7fa:	681b      	ldr	r3, [r3, #0]
   1a7fc:	681b      	ldr	r3, [r3, #0]
   1a7fe:	681b      	ldr	r3, [r3, #0]
   1a800:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   1a802:	69bb      	ldr	r3, [r7, #24]
   1a804:	0018      	movs	r0, r3
   1a806:	4b38      	ldr	r3, [pc, #224]	; (1a8e8 <FreeRTOS_CLIProcessCommand+0x110>)
   1a808:	4798      	blx	r3
   1a80a:	0003      	movs	r3, r0
   1a80c:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   1a80e:	68fa      	ldr	r2, [r7, #12]
   1a810:	697b      	ldr	r3, [r7, #20]
   1a812:	18d3      	adds	r3, r2, r3
   1a814:	781b      	ldrb	r3, [r3, #0]
   1a816:	2b20      	cmp	r3, #32
   1a818:	d005      	beq.n	1a826 <FreeRTOS_CLIProcessCommand+0x4e>
   1a81a:	68fa      	ldr	r2, [r7, #12]
   1a81c:	697b      	ldr	r3, [r7, #20]
   1a81e:	18d3      	adds	r3, r2, r3
   1a820:	781b      	ldrb	r3, [r3, #0]
   1a822:	2b00      	cmp	r3, #0
   1a824:	d11e      	bne.n	1a864 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   1a826:	697a      	ldr	r2, [r7, #20]
   1a828:	69b9      	ldr	r1, [r7, #24]
   1a82a:	68fb      	ldr	r3, [r7, #12]
   1a82c:	0018      	movs	r0, r3
   1a82e:	4b2f      	ldr	r3, [pc, #188]	; (1a8ec <FreeRTOS_CLIProcessCommand+0x114>)
   1a830:	4798      	blx	r3
   1a832:	1e03      	subs	r3, r0, #0
   1a834:	d116      	bne.n	1a864 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   1a836:	4b2a      	ldr	r3, [pc, #168]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a838:	681b      	ldr	r3, [r3, #0]
   1a83a:	681b      	ldr	r3, [r3, #0]
   1a83c:	7b1b      	ldrb	r3, [r3, #12]
   1a83e:	b25b      	sxtb	r3, r3
   1a840:	2b00      	cmp	r3, #0
   1a842:	db19      	blt.n	1a878 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   1a844:	68fb      	ldr	r3, [r7, #12]
   1a846:	0018      	movs	r0, r3
   1a848:	4b29      	ldr	r3, [pc, #164]	; (1a8f0 <FreeRTOS_CLIProcessCommand+0x118>)
   1a84a:	4798      	blx	r3
   1a84c:	0003      	movs	r3, r0
   1a84e:	001a      	movs	r2, r3
   1a850:	4b23      	ldr	r3, [pc, #140]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a852:	681b      	ldr	r3, [r3, #0]
   1a854:	681b      	ldr	r3, [r3, #0]
   1a856:	7b1b      	ldrb	r3, [r3, #12]
   1a858:	b25b      	sxtb	r3, r3
   1a85a:	429a      	cmp	r2, r3
   1a85c:	d00c      	beq.n	1a878 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   1a85e:	2300      	movs	r3, #0
   1a860:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   1a862:	e009      	b.n	1a878 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1a864:	4b1e      	ldr	r3, [pc, #120]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a866:	681b      	ldr	r3, [r3, #0]
   1a868:	685a      	ldr	r2, [r3, #4]
   1a86a:	4b1d      	ldr	r3, [pc, #116]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a86c:	601a      	str	r2, [r3, #0]
   1a86e:	4b1c      	ldr	r3, [pc, #112]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a870:	681b      	ldr	r3, [r3, #0]
   1a872:	2b00      	cmp	r3, #0
   1a874:	d1c0      	bne.n	1a7f8 <FreeRTOS_CLIProcessCommand+0x20>
   1a876:	e000      	b.n	1a87a <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   1a878:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1a87a:	4b19      	ldr	r3, [pc, #100]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a87c:	681b      	ldr	r3, [r3, #0]
   1a87e:	2b00      	cmp	r3, #0
   1a880:	d00c      	beq.n	1a89c <FreeRTOS_CLIProcessCommand+0xc4>
   1a882:	69fb      	ldr	r3, [r7, #28]
   1a884:	2b00      	cmp	r3, #0
   1a886:	d109      	bne.n	1a89c <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1a888:	687a      	ldr	r2, [r7, #4]
   1a88a:	491a      	ldr	r1, [pc, #104]	; (1a8f4 <FreeRTOS_CLIProcessCommand+0x11c>)
   1a88c:	68bb      	ldr	r3, [r7, #8]
   1a88e:	0018      	movs	r0, r3
   1a890:	4b19      	ldr	r3, [pc, #100]	; (1a8f8 <FreeRTOS_CLIProcessCommand+0x120>)
   1a892:	4798      	blx	r3
		pxCommand = NULL;
   1a894:	4b12      	ldr	r3, [pc, #72]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a896:	2200      	movs	r2, #0
   1a898:	601a      	str	r2, [r3, #0]
   1a89a:	e01c      	b.n	1a8d6 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   1a89c:	4b10      	ldr	r3, [pc, #64]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a89e:	681b      	ldr	r3, [r3, #0]
   1a8a0:	2b00      	cmp	r3, #0
   1a8a2:	d010      	beq.n	1a8c6 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   1a8a4:	4b0e      	ldr	r3, [pc, #56]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a8a6:	681b      	ldr	r3, [r3, #0]
   1a8a8:	681b      	ldr	r3, [r3, #0]
   1a8aa:	689b      	ldr	r3, [r3, #8]
   1a8ac:	68fa      	ldr	r2, [r7, #12]
   1a8ae:	6879      	ldr	r1, [r7, #4]
   1a8b0:	68b8      	ldr	r0, [r7, #8]
   1a8b2:	4798      	blx	r3
   1a8b4:	0003      	movs	r3, r0
   1a8b6:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   1a8b8:	69fb      	ldr	r3, [r7, #28]
   1a8ba:	2b00      	cmp	r3, #0
   1a8bc:	d10b      	bne.n	1a8d6 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   1a8be:	4b08      	ldr	r3, [pc, #32]	; (1a8e0 <FreeRTOS_CLIProcessCommand+0x108>)
   1a8c0:	2200      	movs	r2, #0
   1a8c2:	601a      	str	r2, [r3, #0]
   1a8c4:	e007      	b.n	1a8d6 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1a8c6:	687a      	ldr	r2, [r7, #4]
   1a8c8:	490c      	ldr	r1, [pc, #48]	; (1a8fc <FreeRTOS_CLIProcessCommand+0x124>)
   1a8ca:	68bb      	ldr	r3, [r7, #8]
   1a8cc:	0018      	movs	r0, r3
   1a8ce:	4b0a      	ldr	r3, [pc, #40]	; (1a8f8 <FreeRTOS_CLIProcessCommand+0x120>)
   1a8d0:	4798      	blx	r3
		xReturn = pdFALSE;
   1a8d2:	2300      	movs	r3, #0
   1a8d4:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   1a8d6:	69fb      	ldr	r3, [r7, #28]
}
   1a8d8:	0018      	movs	r0, r3
   1a8da:	46bd      	mov	sp, r7
   1a8dc:	b008      	add	sp, #32
   1a8de:	bd80      	pop	{r7, pc}
   1a8e0:	20000c00 	.word	0x20000c00
   1a8e4:	200000ec 	.word	0x200000ec
   1a8e8:	00037cbb 	.word	0x00037cbb
   1a8ec:	00037cc9 	.word	0x00037cc9
   1a8f0:	0001aa11 	.word	0x0001aa11
   1a8f4:	00039ec0 	.word	0x00039ec0
   1a8f8:	00037ceb 	.word	0x00037ceb
   1a8fc:	00039f18 	.word	0x00039f18

0001a900 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
   1a900:	b580      	push	{r7, lr}
   1a902:	b086      	sub	sp, #24
   1a904:	af00      	add	r7, sp, #0
   1a906:	60f8      	str	r0, [r7, #12]
   1a908:	60b9      	str	r1, [r7, #8]
   1a90a:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
   1a90c:	2300      	movs	r3, #0
   1a90e:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
   1a910:	2300      	movs	r3, #0
   1a912:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
   1a914:	687b      	ldr	r3, [r7, #4]
   1a916:	2200      	movs	r2, #0
   1a918:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
   1a91a:	e03b      	b.n	1a994 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
   1a91c:	68fb      	ldr	r3, [r7, #12]
   1a91e:	3301      	adds	r3, #1
   1a920:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   1a922:	68fb      	ldr	r3, [r7, #12]
   1a924:	781b      	ldrb	r3, [r3, #0]
   1a926:	2b00      	cmp	r3, #0
   1a928:	d007      	beq.n	1a93a <FreeRTOS_CLIGetParameter+0x3a>
   1a92a:	68fb      	ldr	r3, [r7, #12]
   1a92c:	781b      	ldrb	r3, [r3, #0]
   1a92e:	2b20      	cmp	r3, #32
   1a930:	d1f4      	bne.n	1a91c <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   1a932:	e002      	b.n	1a93a <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
   1a934:	68fb      	ldr	r3, [r7, #12]
   1a936:	3301      	adds	r3, #1
   1a938:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   1a93a:	68fb      	ldr	r3, [r7, #12]
   1a93c:	781b      	ldrb	r3, [r3, #0]
   1a93e:	2b00      	cmp	r3, #0
   1a940:	d003      	beq.n	1a94a <FreeRTOS_CLIGetParameter+0x4a>
   1a942:	68fb      	ldr	r3, [r7, #12]
   1a944:	781b      	ldrb	r3, [r3, #0]
   1a946:	2b20      	cmp	r3, #32
   1a948:	d0f4      	beq.n	1a934 <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
   1a94a:	68fb      	ldr	r3, [r7, #12]
   1a94c:	781b      	ldrb	r3, [r3, #0]
   1a94e:	2b00      	cmp	r3, #0
   1a950:	d025      	beq.n	1a99e <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
   1a952:	697b      	ldr	r3, [r7, #20]
   1a954:	3301      	adds	r3, #1
   1a956:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
   1a958:	697a      	ldr	r2, [r7, #20]
   1a95a:	68bb      	ldr	r3, [r7, #8]
   1a95c:	429a      	cmp	r2, r3
   1a95e:	d119      	bne.n	1a994 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
   1a960:	68fb      	ldr	r3, [r7, #12]
   1a962:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   1a964:	e007      	b.n	1a976 <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
   1a966:	687b      	ldr	r3, [r7, #4]
   1a968:	681b      	ldr	r3, [r3, #0]
   1a96a:	1c5a      	adds	r2, r3, #1
   1a96c:	687b      	ldr	r3, [r7, #4]
   1a96e:	601a      	str	r2, [r3, #0]
					pcCommandString++;
   1a970:	68fb      	ldr	r3, [r7, #12]
   1a972:	3301      	adds	r3, #1
   1a974:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   1a976:	68fb      	ldr	r3, [r7, #12]
   1a978:	781b      	ldrb	r3, [r3, #0]
   1a97a:	2b00      	cmp	r3, #0
   1a97c:	d003      	beq.n	1a986 <FreeRTOS_CLIGetParameter+0x86>
   1a97e:	68fb      	ldr	r3, [r7, #12]
   1a980:	781b      	ldrb	r3, [r3, #0]
   1a982:	2b20      	cmp	r3, #32
   1a984:	d1ef      	bne.n	1a966 <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
   1a986:	687b      	ldr	r3, [r7, #4]
   1a988:	681b      	ldr	r3, [r3, #0]
   1a98a:	2b00      	cmp	r3, #0
   1a98c:	d109      	bne.n	1a9a2 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
   1a98e:	2300      	movs	r3, #0
   1a990:	613b      	str	r3, [r7, #16]
				}

				break;
   1a992:	e006      	b.n	1a9a2 <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
   1a994:	697a      	ldr	r2, [r7, #20]
   1a996:	68bb      	ldr	r3, [r7, #8]
   1a998:	429a      	cmp	r2, r3
   1a99a:	d3c2      	bcc.n	1a922 <FreeRTOS_CLIGetParameter+0x22>
   1a99c:	e002      	b.n	1a9a4 <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
   1a99e:	46c0      	nop			; (mov r8, r8)
   1a9a0:	e000      	b.n	1a9a4 <FreeRTOS_CLIGetParameter+0xa4>
				break;
   1a9a2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return pcReturn;
   1a9a4:	693b      	ldr	r3, [r7, #16]
}
   1a9a6:	0018      	movs	r0, r3
   1a9a8:	46bd      	mov	sp, r7
   1a9aa:	b006      	add	sp, #24
   1a9ac:	bd80      	pop	{r7, pc}
	...

0001a9b0 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   1a9b0:	b580      	push	{r7, lr}
   1a9b2:	b086      	sub	sp, #24
   1a9b4:	af00      	add	r7, sp, #0
   1a9b6:	60f8      	str	r0, [r7, #12]
   1a9b8:	60b9      	str	r1, [r7, #8]
   1a9ba:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   1a9bc:	4b11      	ldr	r3, [pc, #68]	; (1aa04 <prvHelpCommand+0x54>)
   1a9be:	681b      	ldr	r3, [r3, #0]
   1a9c0:	2b00      	cmp	r3, #0
   1a9c2:	d102      	bne.n	1a9ca <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   1a9c4:	4b0f      	ldr	r3, [pc, #60]	; (1aa04 <prvHelpCommand+0x54>)
   1a9c6:	4a10      	ldr	r2, [pc, #64]	; (1aa08 <prvHelpCommand+0x58>)
   1a9c8:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   1a9ca:	4b0e      	ldr	r3, [pc, #56]	; (1aa04 <prvHelpCommand+0x54>)
   1a9cc:	681b      	ldr	r3, [r3, #0]
   1a9ce:	681b      	ldr	r3, [r3, #0]
   1a9d0:	6859      	ldr	r1, [r3, #4]
   1a9d2:	68ba      	ldr	r2, [r7, #8]
   1a9d4:	68fb      	ldr	r3, [r7, #12]
   1a9d6:	0018      	movs	r0, r3
   1a9d8:	4b0c      	ldr	r3, [pc, #48]	; (1aa0c <prvHelpCommand+0x5c>)
   1a9da:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   1a9dc:	4b09      	ldr	r3, [pc, #36]	; (1aa04 <prvHelpCommand+0x54>)
   1a9de:	681b      	ldr	r3, [r3, #0]
   1a9e0:	685a      	ldr	r2, [r3, #4]
   1a9e2:	4b08      	ldr	r3, [pc, #32]	; (1aa04 <prvHelpCommand+0x54>)
   1a9e4:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   1a9e6:	4b07      	ldr	r3, [pc, #28]	; (1aa04 <prvHelpCommand+0x54>)
   1a9e8:	681b      	ldr	r3, [r3, #0]
   1a9ea:	2b00      	cmp	r3, #0
   1a9ec:	d102      	bne.n	1a9f4 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   1a9ee:	2300      	movs	r3, #0
   1a9f0:	617b      	str	r3, [r7, #20]
   1a9f2:	e001      	b.n	1a9f8 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   1a9f4:	2301      	movs	r3, #1
   1a9f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   1a9f8:	697b      	ldr	r3, [r7, #20]
}
   1a9fa:	0018      	movs	r0, r3
   1a9fc:	46bd      	mov	sp, r7
   1a9fe:	b006      	add	sp, #24
   1aa00:	bd80      	pop	{r7, pc}
   1aa02:	46c0      	nop			; (mov r8, r8)
   1aa04:	20000c04 	.word	0x20000c04
   1aa08:	200000ec 	.word	0x200000ec
   1aa0c:	00037ceb 	.word	0x00037ceb

0001aa10 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   1aa10:	b580      	push	{r7, lr}
   1aa12:	b084      	sub	sp, #16
   1aa14:	af00      	add	r7, sp, #0
   1aa16:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   1aa18:	230f      	movs	r3, #15
   1aa1a:	18fb      	adds	r3, r7, r3
   1aa1c:	2200      	movs	r2, #0
   1aa1e:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   1aa20:	2300      	movs	r3, #0
   1aa22:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   1aa24:	e018      	b.n	1aa58 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1aa26:	687b      	ldr	r3, [r7, #4]
   1aa28:	781b      	ldrb	r3, [r3, #0]
   1aa2a:	2b20      	cmp	r3, #32
   1aa2c:	d10f      	bne.n	1aa4e <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   1aa2e:	68bb      	ldr	r3, [r7, #8]
   1aa30:	2b01      	cmp	r3, #1
   1aa32:	d00e      	beq.n	1aa52 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   1aa34:	230f      	movs	r3, #15
   1aa36:	18fb      	adds	r3, r7, r3
   1aa38:	781b      	ldrb	r3, [r3, #0]
   1aa3a:	b25b      	sxtb	r3, r3
   1aa3c:	b2db      	uxtb	r3, r3
   1aa3e:	3301      	adds	r3, #1
   1aa40:	b2da      	uxtb	r2, r3
   1aa42:	230f      	movs	r3, #15
   1aa44:	18fb      	adds	r3, r7, r3
   1aa46:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   1aa48:	2301      	movs	r3, #1
   1aa4a:	60bb      	str	r3, [r7, #8]
   1aa4c:	e001      	b.n	1aa52 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   1aa4e:	2300      	movs	r3, #0
   1aa50:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   1aa52:	687b      	ldr	r3, [r7, #4]
   1aa54:	3301      	adds	r3, #1
   1aa56:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   1aa58:	687b      	ldr	r3, [r7, #4]
   1aa5a:	781b      	ldrb	r3, [r3, #0]
   1aa5c:	2b00      	cmp	r3, #0
   1aa5e:	d1e2      	bne.n	1aa26 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   1aa60:	68bb      	ldr	r3, [r7, #8]
   1aa62:	2b01      	cmp	r3, #1
   1aa64:	d109      	bne.n	1aa7a <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1aa66:	230f      	movs	r3, #15
   1aa68:	18fb      	adds	r3, r7, r3
   1aa6a:	781b      	ldrb	r3, [r3, #0]
   1aa6c:	b25b      	sxtb	r3, r3
   1aa6e:	b2db      	uxtb	r3, r3
   1aa70:	3b01      	subs	r3, #1
   1aa72:	b2da      	uxtb	r2, r3
   1aa74:	230f      	movs	r3, #15
   1aa76:	18fb      	adds	r3, r7, r3
   1aa78:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1aa7a:	230f      	movs	r3, #15
   1aa7c:	18fb      	adds	r3, r7, r3
   1aa7e:	781b      	ldrb	r3, [r3, #0]
   1aa80:	b25b      	sxtb	r3, r3
}
   1aa82:	0018      	movs	r0, r3
   1aa84:	46bd      	mov	sp, r7
   1aa86:	b004      	add	sp, #16
   1aa88:	bd80      	pop	{r7, pc}
	...

0001aa8c <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   1aa8c:	b580      	push	{r7, lr}
   1aa8e:	b082      	sub	sp, #8
   1aa90:	af00      	add	r7, sp, #0
   1aa92:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1aa94:	687b      	ldr	r3, [r7, #4]
   1aa96:	0018      	movs	r0, r3
   1aa98:	4b03      	ldr	r3, [pc, #12]	; (1aaa8 <prvTraceGetQueueNumber+0x1c>)
   1aa9a:	4798      	blx	r3
   1aa9c:	0003      	movs	r3, r0
}
   1aa9e:	0018      	movs	r0, r3
   1aaa0:	46bd      	mov	sp, r7
   1aaa2:	b002      	add	sp, #8
   1aaa4:	bd80      	pop	{r7, pc}
   1aaa6:	46c0      	nop			; (mov r8, r8)
   1aaa8:	0001e255 	.word	0x0001e255

0001aaac <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   1aaac:	b580      	push	{r7, lr}
   1aaae:	b082      	sub	sp, #8
   1aab0:	af00      	add	r7, sp, #0
   1aab2:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   1aab4:	687b      	ldr	r3, [r7, #4]
   1aab6:	0018      	movs	r0, r3
   1aab8:	4b03      	ldr	r3, [pc, #12]	; (1aac8 <prvTraceGetQueueType+0x1c>)
   1aaba:	4798      	blx	r3
   1aabc:	0003      	movs	r3, r0
}
   1aabe:	0018      	movs	r0, r3
   1aac0:	46bd      	mov	sp, r7
   1aac2:	b002      	add	sp, #8
   1aac4:	bd80      	pop	{r7, pc}
   1aac6:	46c0      	nop			; (mov r8, r8)
   1aac8:	0001e281 	.word	0x0001e281

0001aacc <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   1aacc:	b580      	push	{r7, lr}
   1aace:	b082      	sub	sp, #8
   1aad0:	af00      	add	r7, sp, #0
   1aad2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   1aad4:	687b      	ldr	r3, [r7, #4]
   1aad6:	0018      	movs	r0, r3
   1aad8:	4b03      	ldr	r3, [pc, #12]	; (1aae8 <prvTraceGetTaskNumberLow16+0x1c>)
   1aada:	4798      	blx	r3
   1aadc:	0003      	movs	r3, r0
   1aade:	b29b      	uxth	r3, r3
}
   1aae0:	0018      	movs	r0, r3
   1aae2:	46bd      	mov	sp, r7
   1aae4:	b002      	add	sp, #8
   1aae6:	bd80      	pop	{r7, pc}
   1aae8:	0001f5b1 	.word	0x0001f5b1

0001aaec <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   1aaec:	b580      	push	{r7, lr}
   1aaee:	b082      	sub	sp, #8
   1aaf0:	af00      	add	r7, sp, #0
   1aaf2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   1aaf4:	687b      	ldr	r3, [r7, #4]
   1aaf6:	0018      	movs	r0, r3
   1aaf8:	4b04      	ldr	r3, [pc, #16]	; (1ab0c <prvTraceGetTaskNumberHigh16+0x20>)
   1aafa:	4798      	blx	r3
   1aafc:	0003      	movs	r3, r0
   1aafe:	0c1b      	lsrs	r3, r3, #16
   1ab00:	b29b      	uxth	r3, r3
}
   1ab02:	0018      	movs	r0, r3
   1ab04:	46bd      	mov	sp, r7
   1ab06:	b002      	add	sp, #8
   1ab08:	bd80      	pop	{r7, pc}
   1ab0a:	46c0      	nop			; (mov r8, r8)
   1ab0c:	0001f5b1 	.word	0x0001f5b1

0001ab10 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   1ab10:	b580      	push	{r7, lr}
   1ab12:	b082      	sub	sp, #8
   1ab14:	af00      	add	r7, sp, #0
   1ab16:	6078      	str	r0, [r7, #4]
   1ab18:	000a      	movs	r2, r1
   1ab1a:	1cbb      	adds	r3, r7, #2
   1ab1c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   1ab1e:	687b      	ldr	r3, [r7, #4]
   1ab20:	0018      	movs	r0, r3
   1ab22:	4b08      	ldr	r3, [pc, #32]	; (1ab44 <prvTraceSetTaskNumberLow16+0x34>)
   1ab24:	4798      	blx	r3
   1ab26:	0003      	movs	r3, r0
   1ab28:	0c1b      	lsrs	r3, r3, #16
   1ab2a:	041a      	lsls	r2, r3, #16
   1ab2c:	1cbb      	adds	r3, r7, #2
   1ab2e:	881b      	ldrh	r3, [r3, #0]
   1ab30:	431a      	orrs	r2, r3
   1ab32:	687b      	ldr	r3, [r7, #4]
   1ab34:	0011      	movs	r1, r2
   1ab36:	0018      	movs	r0, r3
   1ab38:	4b03      	ldr	r3, [pc, #12]	; (1ab48 <prvTraceSetTaskNumberLow16+0x38>)
   1ab3a:	4798      	blx	r3
}
   1ab3c:	46c0      	nop			; (mov r8, r8)
   1ab3e:	46bd      	mov	sp, r7
   1ab40:	b002      	add	sp, #8
   1ab42:	bd80      	pop	{r7, pc}
   1ab44:	0001f5b1 	.word	0x0001f5b1
   1ab48:	0001f5d9 	.word	0x0001f5d9

0001ab4c <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   1ab4c:	b580      	push	{r7, lr}
   1ab4e:	b082      	sub	sp, #8
   1ab50:	af00      	add	r7, sp, #0
   1ab52:	6078      	str	r0, [r7, #4]
   1ab54:	000a      	movs	r2, r1
   1ab56:	1cbb      	adds	r3, r7, #2
   1ab58:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1ab5a:	687b      	ldr	r3, [r7, #4]
   1ab5c:	0018      	movs	r0, r3
   1ab5e:	4b09      	ldr	r3, [pc, #36]	; (1ab84 <prvTraceSetTaskNumberHigh16+0x38>)
   1ab60:	4798      	blx	r3
   1ab62:	0003      	movs	r3, r0
   1ab64:	041b      	lsls	r3, r3, #16
   1ab66:	0c1a      	lsrs	r2, r3, #16
   1ab68:	1cbb      	adds	r3, r7, #2
   1ab6a:	881b      	ldrh	r3, [r3, #0]
   1ab6c:	041b      	lsls	r3, r3, #16
   1ab6e:	431a      	orrs	r2, r3
   1ab70:	687b      	ldr	r3, [r7, #4]
   1ab72:	0011      	movs	r1, r2
   1ab74:	0018      	movs	r0, r3
   1ab76:	4b04      	ldr	r3, [pc, #16]	; (1ab88 <prvTraceSetTaskNumberHigh16+0x3c>)
   1ab78:	4798      	blx	r3
}
   1ab7a:	46c0      	nop			; (mov r8, r8)
   1ab7c:	46bd      	mov	sp, r7
   1ab7e:	b002      	add	sp, #8
   1ab80:	bd80      	pop	{r7, pc}
   1ab82:	46c0      	nop			; (mov r8, r8)
   1ab84:	0001f5b1 	.word	0x0001f5b1
   1ab88:	0001f5d9 	.word	0x0001f5d9

0001ab8c <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   1ab8c:	b580      	push	{r7, lr}
   1ab8e:	b082      	sub	sp, #8
   1ab90:	af00      	add	r7, sp, #0
   1ab92:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   1ab94:	687b      	ldr	r3, [r7, #4]
   1ab96:	0018      	movs	r0, r3
   1ab98:	4b03      	ldr	r3, [pc, #12]	; (1aba8 <prvTraceGetQueueNumberLow16+0x1c>)
   1ab9a:	4798      	blx	r3
   1ab9c:	0003      	movs	r3, r0
   1ab9e:	b29b      	uxth	r3, r3
}
   1aba0:	0018      	movs	r0, r3
   1aba2:	46bd      	mov	sp, r7
   1aba4:	b002      	add	sp, #8
   1aba6:	bd80      	pop	{r7, pc}
   1aba8:	0001aa8d 	.word	0x0001aa8d

0001abac <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   1abac:	b580      	push	{r7, lr}
   1abae:	b082      	sub	sp, #8
   1abb0:	af00      	add	r7, sp, #0
   1abb2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   1abb4:	687b      	ldr	r3, [r7, #4]
   1abb6:	0018      	movs	r0, r3
   1abb8:	4b04      	ldr	r3, [pc, #16]	; (1abcc <prvTraceGetQueueNumberHigh16+0x20>)
   1abba:	4798      	blx	r3
   1abbc:	0003      	movs	r3, r0
   1abbe:	0c1b      	lsrs	r3, r3, #16
   1abc0:	b29b      	uxth	r3, r3
}
   1abc2:	0018      	movs	r0, r3
   1abc4:	46bd      	mov	sp, r7
   1abc6:	b002      	add	sp, #8
   1abc8:	bd80      	pop	{r7, pc}
   1abca:	46c0      	nop			; (mov r8, r8)
   1abcc:	0001aa8d 	.word	0x0001aa8d

0001abd0 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   1abd0:	b580      	push	{r7, lr}
   1abd2:	b082      	sub	sp, #8
   1abd4:	af00      	add	r7, sp, #0
   1abd6:	6078      	str	r0, [r7, #4]
   1abd8:	000a      	movs	r2, r1
   1abda:	1cbb      	adds	r3, r7, #2
   1abdc:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   1abde:	687b      	ldr	r3, [r7, #4]
   1abe0:	0018      	movs	r0, r3
   1abe2:	4b08      	ldr	r3, [pc, #32]	; (1ac04 <prvTraceSetQueueNumberLow16+0x34>)
   1abe4:	4798      	blx	r3
   1abe6:	0003      	movs	r3, r0
   1abe8:	0c1b      	lsrs	r3, r3, #16
   1abea:	041a      	lsls	r2, r3, #16
   1abec:	1cbb      	adds	r3, r7, #2
   1abee:	881b      	ldrh	r3, [r3, #0]
   1abf0:	431a      	orrs	r2, r3
   1abf2:	687b      	ldr	r3, [r7, #4]
   1abf4:	0011      	movs	r1, r2
   1abf6:	0018      	movs	r0, r3
   1abf8:	4b03      	ldr	r3, [pc, #12]	; (1ac08 <prvTraceSetQueueNumberLow16+0x38>)
   1abfa:	4798      	blx	r3
}
   1abfc:	46c0      	nop			; (mov r8, r8)
   1abfe:	46bd      	mov	sp, r7
   1ac00:	b002      	add	sp, #8
   1ac02:	bd80      	pop	{r7, pc}
   1ac04:	0001aa8d 	.word	0x0001aa8d
   1ac08:	0001e269 	.word	0x0001e269

0001ac0c <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   1ac0c:	b580      	push	{r7, lr}
   1ac0e:	b082      	sub	sp, #8
   1ac10:	af00      	add	r7, sp, #0
   1ac12:	6078      	str	r0, [r7, #4]
   1ac14:	000a      	movs	r2, r1
   1ac16:	1cbb      	adds	r3, r7, #2
   1ac18:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1ac1a:	687b      	ldr	r3, [r7, #4]
   1ac1c:	0018      	movs	r0, r3
   1ac1e:	4b09      	ldr	r3, [pc, #36]	; (1ac44 <prvTraceSetQueueNumberHigh16+0x38>)
   1ac20:	4798      	blx	r3
   1ac22:	0003      	movs	r3, r0
   1ac24:	041b      	lsls	r3, r3, #16
   1ac26:	0c1a      	lsrs	r2, r3, #16
   1ac28:	1cbb      	adds	r3, r7, #2
   1ac2a:	881b      	ldrh	r3, [r3, #0]
   1ac2c:	041b      	lsls	r3, r3, #16
   1ac2e:	431a      	orrs	r2, r3
   1ac30:	687b      	ldr	r3, [r7, #4]
   1ac32:	0011      	movs	r1, r2
   1ac34:	0018      	movs	r0, r3
   1ac36:	4b04      	ldr	r3, [pc, #16]	; (1ac48 <prvTraceSetQueueNumberHigh16+0x3c>)
   1ac38:	4798      	blx	r3
}
   1ac3a:	46c0      	nop			; (mov r8, r8)
   1ac3c:	46bd      	mov	sp, r7
   1ac3e:	b002      	add	sp, #8
   1ac40:	bd80      	pop	{r7, pc}
   1ac42:	46c0      	nop			; (mov r8, r8)
   1ac44:	0001aa8d 	.word	0x0001aa8d
   1ac48:	0001e269 	.word	0x0001e269

0001ac4c <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   1ac4c:	b580      	push	{r7, lr}
   1ac4e:	b084      	sub	sp, #16
   1ac50:	af00      	add	r7, sp, #0
   1ac52:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   1ac54:	2300      	movs	r3, #0
   1ac56:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1ac58:	2300      	movs	r3, #0
   1ac5a:	60bb      	str	r3, [r7, #8]
   1ac5c:	e018      	b.n	1ac90 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1ac5e:	4b14      	ldr	r3, [pc, #80]	; (1acb0 <prvAddTaskToStackMonitor+0x64>)
   1ac60:	68ba      	ldr	r2, [r7, #8]
   1ac62:	00d2      	lsls	r2, r2, #3
   1ac64:	58d3      	ldr	r3, [r2, r3]
   1ac66:	2b00      	cmp	r3, #0
   1ac68:	d10f      	bne.n	1ac8a <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   1ac6a:	4b11      	ldr	r3, [pc, #68]	; (1acb0 <prvAddTaskToStackMonitor+0x64>)
   1ac6c:	68ba      	ldr	r2, [r7, #8]
   1ac6e:	00d2      	lsls	r2, r2, #3
   1ac70:	6879      	ldr	r1, [r7, #4]
   1ac72:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   1ac74:	4a0e      	ldr	r2, [pc, #56]	; (1acb0 <prvAddTaskToStackMonitor+0x64>)
   1ac76:	68bb      	ldr	r3, [r7, #8]
   1ac78:	00db      	lsls	r3, r3, #3
   1ac7a:	18d3      	adds	r3, r2, r3
   1ac7c:	3304      	adds	r3, #4
   1ac7e:	2201      	movs	r2, #1
   1ac80:	4252      	negs	r2, r2
   1ac82:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   1ac84:	2301      	movs	r3, #1
   1ac86:	60fb      	str	r3, [r7, #12]
			break;
   1ac88:	e005      	b.n	1ac96 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1ac8a:	68bb      	ldr	r3, [r7, #8]
   1ac8c:	3301      	adds	r3, #1
   1ac8e:	60bb      	str	r3, [r7, #8]
   1ac90:	68bb      	ldr	r3, [r7, #8]
   1ac92:	2b09      	cmp	r3, #9
   1ac94:	dde3      	ble.n	1ac5e <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1ac96:	68fb      	ldr	r3, [r7, #12]
   1ac98:	2b00      	cmp	r3, #0
   1ac9a:	d104      	bne.n	1aca6 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   1ac9c:	4b05      	ldr	r3, [pc, #20]	; (1acb4 <prvAddTaskToStackMonitor+0x68>)
   1ac9e:	681b      	ldr	r3, [r3, #0]
   1aca0:	1c5a      	adds	r2, r3, #1
   1aca2:	4b04      	ldr	r3, [pc, #16]	; (1acb4 <prvAddTaskToStackMonitor+0x68>)
   1aca4:	601a      	str	r2, [r3, #0]
	}
}
   1aca6:	46c0      	nop			; (mov r8, r8)
   1aca8:	46bd      	mov	sp, r7
   1acaa:	b004      	add	sp, #16
   1acac:	bd80      	pop	{r7, pc}
   1acae:	46c0      	nop			; (mov r8, r8)
   1acb0:	20000c0c 	.word	0x20000c0c
   1acb4:	20000c5c 	.word	0x20000c5c

0001acb8 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1acb8:	b590      	push	{r4, r7, lr}
   1acba:	b085      	sub	sp, #20
   1acbc:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   1acbe:	2300      	movs	r3, #0
   1acc0:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   1acc2:	4b2b      	ldr	r3, [pc, #172]	; (1ad70 <prvReportStackUsage+0xb8>)
   1acc4:	681b      	ldr	r3, [r3, #0]
   1acc6:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1acc8:	4b29      	ldr	r3, [pc, #164]	; (1ad70 <prvReportStackUsage+0xb8>)
   1acca:	681a      	ldr	r2, [r3, #0]
   1accc:	4b29      	ldr	r3, [pc, #164]	; (1ad74 <prvReportStackUsage+0xbc>)
   1acce:	00d2      	lsls	r2, r2, #3
   1acd0:	58d3      	ldr	r3, [r2, r3]
   1acd2:	2b00      	cmp	r3, #0
   1acd4:	d035      	beq.n	1ad42 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1acd6:	4b26      	ldr	r3, [pc, #152]	; (1ad70 <prvReportStackUsage+0xb8>)
   1acd8:	681a      	ldr	r2, [r3, #0]
   1acda:	4b26      	ldr	r3, [pc, #152]	; (1ad74 <prvReportStackUsage+0xbc>)
   1acdc:	00d2      	lsls	r2, r2, #3
   1acde:	58d3      	ldr	r3, [r2, r3]
   1ace0:	0018      	movs	r0, r3
   1ace2:	4b25      	ldr	r3, [pc, #148]	; (1ad78 <prvReportStackUsage+0xc0>)
   1ace4:	4798      	blx	r3
   1ace6:	0003      	movs	r3, r0
   1ace8:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1acea:	4b21      	ldr	r3, [pc, #132]	; (1ad70 <prvReportStackUsage+0xb8>)
   1acec:	681b      	ldr	r3, [r3, #0]
   1acee:	4a21      	ldr	r2, [pc, #132]	; (1ad74 <prvReportStackUsage+0xbc>)
   1acf0:	00db      	lsls	r3, r3, #3
   1acf2:	18d3      	adds	r3, r2, r3
   1acf4:	3304      	adds	r3, #4
   1acf6:	681a      	ldr	r2, [r3, #0]
   1acf8:	687b      	ldr	r3, [r7, #4]
   1acfa:	429a      	cmp	r2, r3
   1acfc:	d907      	bls.n	1ad0e <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   1acfe:	4b1c      	ldr	r3, [pc, #112]	; (1ad70 <prvReportStackUsage+0xb8>)
   1ad00:	681b      	ldr	r3, [r3, #0]
   1ad02:	4a1c      	ldr	r2, [pc, #112]	; (1ad74 <prvReportStackUsage+0xbc>)
   1ad04:	00db      	lsls	r3, r3, #3
   1ad06:	18d3      	adds	r3, r2, r3
   1ad08:	3304      	adds	r3, #4
   1ad0a:	687a      	ldr	r2, [r7, #4]
   1ad0c:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   1ad0e:	4b18      	ldr	r3, [pc, #96]	; (1ad70 <prvReportStackUsage+0xb8>)
   1ad10:	681a      	ldr	r2, [r3, #0]
   1ad12:	4b18      	ldr	r3, [pc, #96]	; (1ad74 <prvReportStackUsage+0xbc>)
   1ad14:	00d2      	lsls	r2, r2, #3
   1ad16:	58d3      	ldr	r3, [r2, r3]
   1ad18:	0018      	movs	r0, r3
   1ad1a:	4b18      	ldr	r3, [pc, #96]	; (1ad7c <prvReportStackUsage+0xc4>)
   1ad1c:	4798      	blx	r3
   1ad1e:	0003      	movs	r3, r0
   1ad20:	b2db      	uxtb	r3, r3
   1ad22:	0019      	movs	r1, r3
   1ad24:	4b12      	ldr	r3, [pc, #72]	; (1ad70 <prvReportStackUsage+0xb8>)
   1ad26:	681b      	ldr	r3, [r3, #0]
   1ad28:	4a12      	ldr	r2, [pc, #72]	; (1ad74 <prvReportStackUsage+0xbc>)
   1ad2a:	00db      	lsls	r3, r3, #3
   1ad2c:	18d3      	adds	r3, r2, r3
   1ad2e:	3304      	adds	r3, #4
   1ad30:	681b      	ldr	r3, [r3, #0]
   1ad32:	000a      	movs	r2, r1
   1ad34:	2103      	movs	r1, #3
   1ad36:	20ea      	movs	r0, #234	; 0xea
   1ad38:	4c11      	ldr	r4, [pc, #68]	; (1ad80 <prvReportStackUsage+0xc8>)
   1ad3a:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   1ad3c:	68fb      	ldr	r3, [r7, #12]
   1ad3e:	3301      	adds	r3, #1
   1ad40:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   1ad42:	4b0b      	ldr	r3, [pc, #44]	; (1ad70 <prvReportStackUsage+0xb8>)
   1ad44:	681b      	ldr	r3, [r3, #0]
   1ad46:	1c5a      	adds	r2, r3, #1
   1ad48:	4b0e      	ldr	r3, [pc, #56]	; (1ad84 <prvReportStackUsage+0xcc>)
   1ad4a:	210a      	movs	r1, #10
   1ad4c:	0010      	movs	r0, r2
   1ad4e:	4798      	blx	r3
   1ad50:	000b      	movs	r3, r1
   1ad52:	001a      	movs	r2, r3
   1ad54:	4b06      	ldr	r3, [pc, #24]	; (1ad70 <prvReportStackUsage+0xb8>)
   1ad56:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1ad58:	68fb      	ldr	r3, [r7, #12]
   1ad5a:	2b00      	cmp	r3, #0
   1ad5c:	dc04      	bgt.n	1ad68 <prvReportStackUsage+0xb0>
   1ad5e:	4b04      	ldr	r3, [pc, #16]	; (1ad70 <prvReportStackUsage+0xb8>)
   1ad60:	681a      	ldr	r2, [r3, #0]
   1ad62:	68bb      	ldr	r3, [r7, #8]
   1ad64:	429a      	cmp	r2, r3
   1ad66:	d1af      	bne.n	1acc8 <prvReportStackUsage+0x10>
}
   1ad68:	46c0      	nop			; (mov r8, r8)
   1ad6a:	46bd      	mov	sp, r7
   1ad6c:	b005      	add	sp, #20
   1ad6e:	bd90      	pop	{r4, r7, pc}
   1ad70:	20000c60 	.word	0x20000c60
   1ad74:	20000c0c 	.word	0x20000c0c
   1ad78:	0001f751 	.word	0x0001f751
   1ad7c:	0001aacd 	.word	0x0001aacd
   1ad80:	0001b615 	.word	0x0001b615
   1ad84:	00035729 	.word	0x00035729

0001ad88 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   1ad88:	b580      	push	{r7, lr}
   1ad8a:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   1ad8c:	4b02      	ldr	r3, [pc, #8]	; (1ad98 <prvTraceGetCurrentTaskHandle+0x10>)
   1ad8e:	4798      	blx	r3
   1ad90:	0003      	movs	r3, r0
}
   1ad92:	0018      	movs	r0, r3
   1ad94:	46bd      	mov	sp, r7
   1ad96:	bd80      	pop	{r7, pc}
   1ad98:	0001f7fd 	.word	0x0001f7fd

0001ad9c <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   1ad9c:	b590      	push	{r4, r7, lr}
   1ad9e:	b085      	sub	sp, #20
   1ada0:	af02      	add	r7, sp, #8
   1ada2:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   1ada4:	4b14      	ldr	r3, [pc, #80]	; (1adf8 <vTraceEnable+0x5c>)
   1ada6:	4798      	blx	r3

	if (startOption == TRC_START)
   1ada8:	687b      	ldr	r3, [r7, #4]
   1adaa:	2b01      	cmp	r3, #1
   1adac:	d102      	bne.n	1adb4 <vTraceEnable+0x18>
	{
		vTraceStart();
   1adae:	4b13      	ldr	r3, [pc, #76]	; (1adfc <vTraceEnable+0x60>)
   1adb0:	4798      	blx	r3
   1adb2:	e00e      	b.n	1add2 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   1adb4:	687b      	ldr	r3, [r7, #4]
   1adb6:	2b02      	cmp	r3, #2
   1adb8:	d104      	bne.n	1adc4 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1adba:	4b11      	ldr	r3, [pc, #68]	; (1ae00 <vTraceEnable+0x64>)
   1adbc:	0018      	movs	r0, r3
   1adbe:	4b11      	ldr	r3, [pc, #68]	; (1ae04 <vTraceEnable+0x68>)
   1adc0:	4798      	blx	r3
   1adc2:	e006      	b.n	1add2 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   1adc4:	687b      	ldr	r3, [r7, #4]
   1adc6:	2b00      	cmp	r3, #0
   1adc8:	d003      	beq.n	1add2 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1adca:	4b0f      	ldr	r3, [pc, #60]	; (1ae08 <vTraceEnable+0x6c>)
   1adcc:	0018      	movs	r0, r3
   1adce:	4b0d      	ldr	r3, [pc, #52]	; (1ae04 <vTraceEnable+0x68>)
   1add0:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   1add2:	4b0e      	ldr	r3, [pc, #56]	; (1ae0c <vTraceEnable+0x70>)
   1add4:	681b      	ldr	r3, [r3, #0]
   1add6:	2b00      	cmp	r3, #0
   1add8:	d10a      	bne.n	1adf0 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1adda:	2396      	movs	r3, #150	; 0x96
   1addc:	005a      	lsls	r2, r3, #1
   1adde:	490c      	ldr	r1, [pc, #48]	; (1ae10 <vTraceEnable+0x74>)
   1ade0:	480c      	ldr	r0, [pc, #48]	; (1ae14 <vTraceEnable+0x78>)
   1ade2:	4b0a      	ldr	r3, [pc, #40]	; (1ae0c <vTraceEnable+0x70>)
   1ade4:	9301      	str	r3, [sp, #4]
   1ade6:	2304      	movs	r3, #4
   1ade8:	9300      	str	r3, [sp, #0]
   1adea:	2300      	movs	r3, #0
   1adec:	4c0a      	ldr	r4, [pc, #40]	; (1ae18 <vTraceEnable+0x7c>)
   1adee:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   1adf0:	46c0      	nop			; (mov r8, r8)
   1adf2:	46bd      	mov	sp, r7
   1adf4:	b003      	add	sp, #12
   1adf6:	bd90      	pop	{r4, r7, pc}
   1adf8:	0001bce1 	.word	0x0001bce1
   1adfc:	0001b239 	.word	0x0001b239
   1ae00:	00039f78 	.word	0x00039f78
   1ae04:	0001c389 	.word	0x0001c389
   1ae08:	00039fb8 	.word	0x00039fb8
   1ae0c:	20000c08 	.word	0x20000c08
   1ae10:	00039fec 	.word	0x00039fec
   1ae14:	0001ae1d 	.word	0x0001ae1d
   1ae18:	0001e755 	.word	0x0001e755

0001ae1c <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   1ae1c:	b580      	push	{r7, lr}
   1ae1e:	b082      	sub	sp, #8
   1ae20:	af00      	add	r7, sp, #0
   1ae22:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   1ae24:	4b04      	ldr	r3, [pc, #16]	; (1ae38 <TzCtrl+0x1c>)
   1ae26:	4798      	blx	r3
   1ae28:	1e03      	subs	r3, r0, #0
   1ae2a:	d001      	beq.n	1ae30 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   1ae2c:	4b03      	ldr	r3, [pc, #12]	; (1ae3c <TzCtrl+0x20>)
   1ae2e:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   1ae30:	2004      	movs	r0, #4
   1ae32:	4b03      	ldr	r3, [pc, #12]	; (1ae40 <TzCtrl+0x24>)
   1ae34:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1ae36:	e7f5      	b.n	1ae24 <TzCtrl+0x8>
   1ae38:	0001b27d 	.word	0x0001b27d
   1ae3c:	0001acb9 	.word	0x0001acb9
   1ae40:	0001eaf1 	.word	0x0001eaf1

0001ae44 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   1ae44:	b580      	push	{r7, lr}
   1ae46:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1ae48:	4b60      	ldr	r3, [pc, #384]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1ae4a:	681b      	ldr	r3, [r3, #0]
   1ae4c:	2209      	movs	r2, #9
   1ae4e:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1ae50:	4b5e      	ldr	r3, [pc, #376]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1ae52:	681b      	ldr	r3, [r3, #0]
   1ae54:	2264      	movs	r2, #100	; 0x64
   1ae56:	210a      	movs	r1, #10
   1ae58:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1ae5a:	4b5c      	ldr	r3, [pc, #368]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1ae5c:	681b      	ldr	r3, [r3, #0]
   1ae5e:	2265      	movs	r2, #101	; 0x65
   1ae60:	210a      	movs	r1, #10
   1ae62:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   1ae64:	4b59      	ldr	r3, [pc, #356]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1ae66:	681b      	ldr	r3, [r3, #0]
   1ae68:	2266      	movs	r2, #102	; 0x66
   1ae6a:	210a      	movs	r1, #10
   1ae6c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1ae6e:	4b57      	ldr	r3, [pc, #348]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1ae70:	681b      	ldr	r3, [r3, #0]
   1ae72:	2267      	movs	r2, #103	; 0x67
   1ae74:	210f      	movs	r1, #15
   1ae76:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1ae78:	4b54      	ldr	r3, [pc, #336]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1ae7a:	681b      	ldr	r3, [r3, #0]
   1ae7c:	2268      	movs	r2, #104	; 0x68
   1ae7e:	2105      	movs	r1, #5
   1ae80:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1ae82:	4b52      	ldr	r3, [pc, #328]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1ae84:	681b      	ldr	r3, [r3, #0]
   1ae86:	2269      	movs	r2, #105	; 0x69
   1ae88:	2105      	movs	r1, #5
   1ae8a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   1ae8c:	4b4f      	ldr	r3, [pc, #316]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1ae8e:	681b      	ldr	r3, [r3, #0]
   1ae90:	226a      	movs	r2, #106	; 0x6a
   1ae92:	2105      	movs	r1, #5
   1ae94:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1ae96:	4b4d      	ldr	r3, [pc, #308]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1ae98:	681b      	ldr	r3, [r3, #0]
   1ae9a:	226b      	movs	r2, #107	; 0x6b
   1ae9c:	2105      	movs	r1, #5
   1ae9e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   1aea0:	4b4a      	ldr	r3, [pc, #296]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1aea2:	681b      	ldr	r3, [r3, #0]
   1aea4:	226c      	movs	r2, #108	; 0x6c
   1aea6:	2105      	movs	r1, #5
   1aea8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1aeaa:	4b48      	ldr	r3, [pc, #288]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1aeac:	681b      	ldr	r3, [r3, #0]
   1aeae:	2270      	movs	r2, #112	; 0x70
   1aeb0:	210f      	movs	r1, #15
   1aeb2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   1aeb4:	4b45      	ldr	r3, [pc, #276]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1aeb6:	681b      	ldr	r3, [r3, #0]
   1aeb8:	2271      	movs	r2, #113	; 0x71
   1aeba:	210f      	movs	r1, #15
   1aebc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1aebe:	4b43      	ldr	r3, [pc, #268]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1aec0:	681b      	ldr	r3, [r3, #0]
   1aec2:	2272      	movs	r2, #114	; 0x72
   1aec4:	210f      	movs	r1, #15
   1aec6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1aec8:	4b40      	ldr	r3, [pc, #256]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1aeca:	681b      	ldr	r3, [r3, #0]
   1aecc:	2273      	movs	r2, #115	; 0x73
   1aece:	210f      	movs	r1, #15
   1aed0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   1aed2:	4b3e      	ldr	r3, [pc, #248]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1aed4:	681b      	ldr	r3, [r3, #0]
   1aed6:	2274      	movs	r2, #116	; 0x74
   1aed8:	210f      	movs	r1, #15
   1aeda:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   1aedc:	4b3b      	ldr	r3, [pc, #236]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1aede:	681b      	ldr	r3, [r3, #0]
   1aee0:	2275      	movs	r2, #117	; 0x75
   1aee2:	210f      	movs	r1, #15
   1aee4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1aee6:	4b39      	ldr	r3, [pc, #228]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1aee8:	681b      	ldr	r3, [r3, #0]
   1aeea:	2276      	movs	r2, #118	; 0x76
   1aeec:	210f      	movs	r1, #15
   1aeee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   1aef0:	4b36      	ldr	r3, [pc, #216]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1aef2:	681b      	ldr	r3, [r3, #0]
   1aef4:	2277      	movs	r2, #119	; 0x77
   1aef6:	210f      	movs	r1, #15
   1aef8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1aefa:	4b34      	ldr	r3, [pc, #208]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1aefc:	681b      	ldr	r3, [r3, #0]
   1aefe:	2278      	movs	r2, #120	; 0x78
   1af00:	210f      	movs	r1, #15
   1af02:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   1af04:	4b31      	ldr	r3, [pc, #196]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af06:	681b      	ldr	r3, [r3, #0]
   1af08:	227c      	movs	r2, #124	; 0x7c
   1af0a:	2110      	movs	r1, #16
   1af0c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   1af0e:	4b2f      	ldr	r3, [pc, #188]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af10:	681b      	ldr	r3, [r3, #0]
   1af12:	227d      	movs	r2, #125	; 0x7d
   1af14:	2110      	movs	r1, #16
   1af16:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1af18:	4b2c      	ldr	r3, [pc, #176]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af1a:	681b      	ldr	r3, [r3, #0]
   1af1c:	227e      	movs	r2, #126	; 0x7e
   1af1e:	2110      	movs	r1, #16
   1af20:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   1af22:	4b2a      	ldr	r3, [pc, #168]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af24:	681b      	ldr	r3, [r3, #0]
   1af26:	227f      	movs	r2, #127	; 0x7f
   1af28:	2113      	movs	r1, #19
   1af2a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   1af2c:	4b27      	ldr	r3, [pc, #156]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af2e:	681b      	ldr	r3, [r3, #0]
   1af30:	2280      	movs	r2, #128	; 0x80
   1af32:	2111      	movs	r1, #17
   1af34:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1af36:	4b25      	ldr	r3, [pc, #148]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af38:	681b      	ldr	r3, [r3, #0]
   1af3a:	2281      	movs	r2, #129	; 0x81
   1af3c:	2110      	movs	r1, #16
   1af3e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   1af40:	4b22      	ldr	r3, [pc, #136]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af42:	681b      	ldr	r3, [r3, #0]
   1af44:	2282      	movs	r2, #130	; 0x82
   1af46:	2113      	movs	r1, #19
   1af48:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1af4a:	4b20      	ldr	r3, [pc, #128]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af4c:	681b      	ldr	r3, [r3, #0]
   1af4e:	2283      	movs	r2, #131	; 0x83
   1af50:	2113      	movs	r1, #19
   1af52:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   1af54:	4b1d      	ldr	r3, [pc, #116]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af56:	681b      	ldr	r3, [r3, #0]
   1af58:	2284      	movs	r2, #132	; 0x84
   1af5a:	2113      	movs	r1, #19
   1af5c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1af5e:	4b1b      	ldr	r3, [pc, #108]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af60:	681b      	ldr	r3, [r3, #0]
   1af62:	2288      	movs	r2, #136	; 0x88
   1af64:	2100      	movs	r1, #0
   1af66:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   1af68:	4b18      	ldr	r3, [pc, #96]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af6a:	681b      	ldr	r3, [r3, #0]
   1af6c:	228a      	movs	r2, #138	; 0x8a
   1af6e:	21a0      	movs	r1, #160	; 0xa0
   1af70:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   1af72:	4b16      	ldr	r3, [pc, #88]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af74:	681b      	ldr	r3, [r3, #0]
   1af76:	228c      	movs	r2, #140	; 0x8c
   1af78:	21a0      	movs	r1, #160	; 0xa0
   1af7a:	0049      	lsls	r1, r1, #1
   1af7c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1af7e:	4b13      	ldr	r3, [pc, #76]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af80:	681b      	ldr	r3, [r3, #0]
   1af82:	228e      	movs	r2, #142	; 0x8e
   1af84:	21f0      	movs	r1, #240	; 0xf0
   1af86:	0049      	lsls	r1, r1, #1
   1af88:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1af8a:	4b10      	ldr	r3, [pc, #64]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af8c:	681b      	ldr	r3, [r3, #0]
   1af8e:	2290      	movs	r2, #144	; 0x90
   1af90:	490f      	ldr	r1, [pc, #60]	; (1afd0 <vTraceInitObjectPropertyTable+0x18c>)
   1af92:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   1af94:	4b0d      	ldr	r3, [pc, #52]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1af96:	681b      	ldr	r3, [r3, #0]
   1af98:	2292      	movs	r2, #146	; 0x92
   1af9a:	490e      	ldr	r1, [pc, #56]	; (1afd4 <vTraceInitObjectPropertyTable+0x190>)
   1af9c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1af9e:	4b0b      	ldr	r3, [pc, #44]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1afa0:	681b      	ldr	r3, [r3, #0]
   1afa2:	2294      	movs	r2, #148	; 0x94
   1afa4:	490c      	ldr	r1, [pc, #48]	; (1afd8 <vTraceInitObjectPropertyTable+0x194>)
   1afa6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   1afa8:	4b08      	ldr	r3, [pc, #32]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1afaa:	681b      	ldr	r3, [r3, #0]
   1afac:	2296      	movs	r2, #150	; 0x96
   1afae:	490b      	ldr	r1, [pc, #44]	; (1afdc <vTraceInitObjectPropertyTable+0x198>)
   1afb0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1afb2:	4b06      	ldr	r3, [pc, #24]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1afb4:	681b      	ldr	r3, [r3, #0]
   1afb6:	2298      	movs	r2, #152	; 0x98
   1afb8:	218c      	movs	r1, #140	; 0x8c
   1afba:	00c9      	lsls	r1, r1, #3
   1afbc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1afbe:	4b03      	ldr	r3, [pc, #12]	; (1afcc <vTraceInitObjectPropertyTable+0x188>)
   1afc0:	681b      	ldr	r3, [r3, #0]
   1afc2:	4a07      	ldr	r2, [pc, #28]	; (1afe0 <vTraceInitObjectPropertyTable+0x19c>)
   1afc4:	661a      	str	r2, [r3, #96]	; 0x60
}
   1afc6:	46c0      	nop			; (mov r8, r8)
   1afc8:	46bd      	mov	sp, r7
   1afca:	bd80      	pop	{r7, pc}
   1afcc:	20000d20 	.word	0x20000d20
   1afd0:	000002fd 	.word	0x000002fd
   1afd4:	00000352 	.word	0x00000352
   1afd8:	000003a2 	.word	0x000003a2
   1afdc:	00000401 	.word	0x00000401
   1afe0:	000004bf 	.word	0x000004bf

0001afe4 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   1afe4:	b580      	push	{r7, lr}
   1afe6:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   1afe8:	4b2e      	ldr	r3, [pc, #184]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1afea:	2200      	movs	r2, #0
   1afec:	825a      	strh	r2, [r3, #18]
   1afee:	4b2d      	ldr	r3, [pc, #180]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1aff0:	8a5a      	ldrh	r2, [r3, #18]
   1aff2:	4b2c      	ldr	r3, [pc, #176]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1aff4:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1aff6:	4b2b      	ldr	r3, [pc, #172]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1aff8:	220a      	movs	r2, #10
   1affa:	829a      	strh	r2, [r3, #20]
   1affc:	4b29      	ldr	r3, [pc, #164]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1affe:	8a9a      	ldrh	r2, [r3, #20]
   1b000:	4b28      	ldr	r3, [pc, #160]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b002:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   1b004:	4b27      	ldr	r3, [pc, #156]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b006:	2214      	movs	r2, #20
   1b008:	82da      	strh	r2, [r3, #22]
   1b00a:	4b26      	ldr	r3, [pc, #152]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b00c:	8ada      	ldrh	r2, [r3, #22]
   1b00e:	4b25      	ldr	r3, [pc, #148]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b010:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   1b012:	4b24      	ldr	r3, [pc, #144]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b014:	221e      	movs	r2, #30
   1b016:	831a      	strh	r2, [r3, #24]
   1b018:	4b22      	ldr	r3, [pc, #136]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b01a:	8b1a      	ldrh	r2, [r3, #24]
   1b01c:	4b21      	ldr	r3, [pc, #132]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b01e:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   1b020:	4b20      	ldr	r3, [pc, #128]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b022:	222d      	movs	r2, #45	; 0x2d
   1b024:	835a      	strh	r2, [r3, #26]
   1b026:	4b1f      	ldr	r3, [pc, #124]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b028:	8b5a      	ldrh	r2, [r3, #26]
   1b02a:	4b1e      	ldr	r3, [pc, #120]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b02c:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   1b02e:	4b1d      	ldr	r3, [pc, #116]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b030:	2232      	movs	r2, #50	; 0x32
   1b032:	839a      	strh	r2, [r3, #28]
   1b034:	4b1b      	ldr	r3, [pc, #108]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b036:	8b9a      	ldrh	r2, [r3, #28]
   1b038:	4b1a      	ldr	r3, [pc, #104]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b03a:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   1b03c:	4b19      	ldr	r3, [pc, #100]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b03e:	2237      	movs	r2, #55	; 0x37
   1b040:	83da      	strh	r2, [r3, #30]
   1b042:	4b18      	ldr	r3, [pc, #96]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b044:	8bda      	ldrh	r2, [r3, #30]
   1b046:	4b17      	ldr	r3, [pc, #92]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b048:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1b04a:	4b16      	ldr	r3, [pc, #88]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b04c:	223c      	movs	r2, #60	; 0x3c
   1b04e:	841a      	strh	r2, [r3, #32]
   1b050:	4b14      	ldr	r3, [pc, #80]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b052:	8c1a      	ldrh	r2, [r3, #32]
   1b054:	4b13      	ldr	r3, [pc, #76]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b056:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1b058:	4b12      	ldr	r3, [pc, #72]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b05a:	2241      	movs	r2, #65	; 0x41
   1b05c:	845a      	strh	r2, [r3, #34]	; 0x22
   1b05e:	4b11      	ldr	r3, [pc, #68]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b060:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1b062:	4b10      	ldr	r3, [pc, #64]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b064:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   1b066:	4b0f      	ldr	r3, [pc, #60]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b068:	2209      	movs	r2, #9
   1b06a:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   1b06c:	4b0d      	ldr	r3, [pc, #52]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b06e:	2213      	movs	r2, #19
   1b070:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1b072:	4b0c      	ldr	r3, [pc, #48]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b074:	221d      	movs	r2, #29
   1b076:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1b078:	4b0a      	ldr	r3, [pc, #40]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b07a:	222c      	movs	r2, #44	; 0x2c
   1b07c:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1b07e:	4b09      	ldr	r3, [pc, #36]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b080:	2231      	movs	r2, #49	; 0x31
   1b082:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   1b084:	4b07      	ldr	r3, [pc, #28]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b086:	2236      	movs	r2, #54	; 0x36
   1b088:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1b08a:	4b06      	ldr	r3, [pc, #24]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b08c:	223b      	movs	r2, #59	; 0x3b
   1b08e:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1b090:	4b04      	ldr	r3, [pc, #16]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b092:	2240      	movs	r2, #64	; 0x40
   1b094:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   1b096:	4b03      	ldr	r3, [pc, #12]	; (1b0a4 <vTraceInitObjectHandleStack+0xc0>)
   1b098:	2245      	movs	r2, #69	; 0x45
   1b09a:	869a      	strh	r2, [r3, #52]	; 0x34
}
   1b09c:	46c0      	nop			; (mov r8, r8)
   1b09e:	46bd      	mov	sp, r7
   1b0a0:	bd80      	pop	{r7, pc}
   1b0a2:	46c0      	nop			; (mov r8, r8)
   1b0a4:	20000c90 	.word	0x20000c90

0001b0a8 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1b0a8:	b580      	push	{r7, lr}
   1b0aa:	b082      	sub	sp, #8
   1b0ac:	af00      	add	r7, sp, #0
   1b0ae:	0002      	movs	r2, r0
   1b0b0:	1dfb      	adds	r3, r7, #7
   1b0b2:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   1b0b4:	1dfb      	adds	r3, r7, #7
   1b0b6:	781b      	ldrb	r3, [r3, #0]
   1b0b8:	2b08      	cmp	r3, #8
   1b0ba:	d816      	bhi.n	1b0ea <pszTraceGetErrorNotEnoughHandles+0x42>
   1b0bc:	009a      	lsls	r2, r3, #2
   1b0be:	4b0d      	ldr	r3, [pc, #52]	; (1b0f4 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1b0c0:	18d3      	adds	r3, r2, r3
   1b0c2:	681b      	ldr	r3, [r3, #0]
   1b0c4:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1b0c6:	4b0c      	ldr	r3, [pc, #48]	; (1b0f8 <pszTraceGetErrorNotEnoughHandles+0x50>)
   1b0c8:	e010      	b.n	1b0ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1b0ca:	4b0c      	ldr	r3, [pc, #48]	; (1b0fc <pszTraceGetErrorNotEnoughHandles+0x54>)
   1b0cc:	e00e      	b.n	1b0ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   1b0ce:	4b0c      	ldr	r3, [pc, #48]	; (1b100 <pszTraceGetErrorNotEnoughHandles+0x58>)
   1b0d0:	e00c      	b.n	1b0ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   1b0d2:	4b0c      	ldr	r3, [pc, #48]	; (1b104 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   1b0d4:	e00a      	b.n	1b0ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1b0d6:	4b0c      	ldr	r3, [pc, #48]	; (1b108 <pszTraceGetErrorNotEnoughHandles+0x60>)
   1b0d8:	e008      	b.n	1b0ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1b0da:	4b0c      	ldr	r3, [pc, #48]	; (1b10c <pszTraceGetErrorNotEnoughHandles+0x64>)
   1b0dc:	e006      	b.n	1b0ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   1b0de:	4b0c      	ldr	r3, [pc, #48]	; (1b110 <pszTraceGetErrorNotEnoughHandles+0x68>)
   1b0e0:	e004      	b.n	1b0ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   1b0e2:	4b0c      	ldr	r3, [pc, #48]	; (1b114 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   1b0e4:	e002      	b.n	1b0ec <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1b0e6:	4b0c      	ldr	r3, [pc, #48]	; (1b118 <pszTraceGetErrorNotEnoughHandles+0x70>)
   1b0e8:	e000      	b.n	1b0ec <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1b0ea:	4b0c      	ldr	r3, [pc, #48]	; (1b11c <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   1b0ec:	0018      	movs	r0, r3
   1b0ee:	46bd      	mov	sp, r7
   1b0f0:	b002      	add	sp, #8
   1b0f2:	bd80      	pop	{r7, pc}
   1b0f4:	0003a2f4 	.word	0x0003a2f4
   1b0f8:	00039ff4 	.word	0x00039ff4
   1b0fc:	0003a03c 	.word	0x0003a03c
   1b100:	0003a084 	.word	0x0003a084
   1b104:	0003a0d8 	.word	0x0003a0d8
   1b108:	0003a124 	.word	0x0003a124
   1b10c:	0003a170 	.word	0x0003a170
   1b110:	0003a1bc 	.word	0x0003a1bc
   1b114:	0003a210 	.word	0x0003a210
   1b118:	0003a268 	.word	0x0003a268
   1b11c:	0003a2c4 	.word	0x0003a2c4

0001b120 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   1b120:	b590      	push	{r4, r7, lr}
   1b122:	b087      	sub	sp, #28
   1b124:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1b126:	2317      	movs	r3, #23
   1b128:	18fb      	adds	r3, r7, r3
   1b12a:	2200      	movs	r2, #0
   1b12c:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   1b12e:	4b36      	ldr	r3, [pc, #216]	; (1b208 <uiTraceStart+0xe8>)
   1b130:	681b      	ldr	r3, [r3, #0]
   1b132:	2b00      	cmp	r3, #0
   1b134:	d10b      	bne.n	1b14e <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1b136:	4b34      	ldr	r3, [pc, #208]	; (1b208 <uiTraceStart+0xe8>)
   1b138:	681b      	ldr	r3, [r3, #0]
   1b13a:	2b00      	cmp	r3, #0
   1b13c:	d105      	bne.n	1b14a <uiTraceStart+0x2a>
   1b13e:	4b33      	ldr	r3, [pc, #204]	; (1b20c <uiTraceStart+0xec>)
   1b140:	0018      	movs	r0, r3
   1b142:	4b33      	ldr	r3, [pc, #204]	; (1b210 <uiTraceStart+0xf0>)
   1b144:	4798      	blx	r3
   1b146:	2300      	movs	r3, #0
   1b148:	e059      	b.n	1b1fe <uiTraceStart+0xde>
		return 0;
   1b14a:	2300      	movs	r3, #0
   1b14c:	e057      	b.n	1b1fe <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   1b14e:	4b2e      	ldr	r3, [pc, #184]	; (1b208 <uiTraceStart+0xe8>)
   1b150:	681b      	ldr	r3, [r3, #0]
   1b152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b154:	2b01      	cmp	r3, #1
   1b156:	d101      	bne.n	1b15c <uiTraceStart+0x3c>
		return 1; /* Already running */
   1b158:	2301      	movs	r3, #1
   1b15a:	e050      	b.n	1b1fe <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   1b15c:	4b2d      	ldr	r3, [pc, #180]	; (1b214 <uiTraceStart+0xf4>)
   1b15e:	681b      	ldr	r3, [r3, #0]
   1b160:	2b00      	cmp	r3, #0
   1b162:	d149      	bne.n	1b1f8 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b164:	f3ef 8310 	mrs	r3, PRIMASK
   1b168:	60bb      	str	r3, [r7, #8]
  return(result);
   1b16a:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   1b16c:	613b      	str	r3, [r7, #16]
   1b16e:	2301      	movs	r3, #1
   1b170:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b172:	68fb      	ldr	r3, [r7, #12]
   1b174:	f383 8810 	msr	PRIMASK, r3
   1b178:	4b27      	ldr	r3, [pc, #156]	; (1b218 <uiTraceStart+0xf8>)
   1b17a:	681b      	ldr	r3, [r3, #0]
   1b17c:	1c5a      	adds	r2, r3, #1
   1b17e:	4b26      	ldr	r3, [pc, #152]	; (1b218 <uiTraceStart+0xf8>)
   1b180:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   1b182:	4b21      	ldr	r3, [pc, #132]	; (1b208 <uiTraceStart+0xe8>)
   1b184:	681b      	ldr	r3, [r3, #0]
   1b186:	2201      	movs	r2, #1
   1b188:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1b18a:	4b24      	ldr	r3, [pc, #144]	; (1b21c <uiTraceStart+0xfc>)
   1b18c:	4798      	blx	r3
   1b18e:	0003      	movs	r3, r0
   1b190:	0018      	movs	r0, r3
   1b192:	4b23      	ldr	r3, [pc, #140]	; (1b220 <uiTraceStart+0x100>)
   1b194:	4798      	blx	r3
   1b196:	0003      	movs	r3, r0
   1b198:	001a      	movs	r2, r3
   1b19a:	2317      	movs	r3, #23
   1b19c:	18fb      	adds	r3, r7, r3
   1b19e:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   1b1a0:	2317      	movs	r3, #23
   1b1a2:	18fb      	adds	r3, r7, r3
   1b1a4:	781b      	ldrb	r3, [r3, #0]
   1b1a6:	2b00      	cmp	r3, #0
   1b1a8:	d116      	bne.n	1b1d8 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1b1aa:	2317      	movs	r3, #23
   1b1ac:	18fc      	adds	r4, r7, r3
   1b1ae:	2003      	movs	r0, #3
   1b1b0:	4b1c      	ldr	r3, [pc, #112]	; (1b224 <uiTraceStart+0x104>)
   1b1b2:	4798      	blx	r3
   1b1b4:	0003      	movs	r3, r0
   1b1b6:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1b1b8:	4a1b      	ldr	r2, [pc, #108]	; (1b228 <uiTraceStart+0x108>)
   1b1ba:	2317      	movs	r3, #23
   1b1bc:	18fb      	adds	r3, r7, r3
   1b1be:	781b      	ldrb	r3, [r3, #0]
   1b1c0:	0019      	movs	r1, r3
   1b1c2:	2003      	movs	r0, #3
   1b1c4:	4b19      	ldr	r3, [pc, #100]	; (1b22c <uiTraceStart+0x10c>)
   1b1c6:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1b1c8:	2317      	movs	r3, #23
   1b1ca:	18fb      	adds	r3, r7, r3
   1b1cc:	781b      	ldrb	r3, [r3, #0]
   1b1ce:	2200      	movs	r2, #0
   1b1d0:	0019      	movs	r1, r3
   1b1d2:	2003      	movs	r0, #3
   1b1d4:	4b16      	ldr	r3, [pc, #88]	; (1b230 <uiTraceStart+0x110>)
   1b1d6:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   1b1d8:	2317      	movs	r3, #23
   1b1da:	18fb      	adds	r3, r7, r3
   1b1dc:	781b      	ldrb	r3, [r3, #0]
   1b1de:	0018      	movs	r0, r3
   1b1e0:	4b14      	ldr	r3, [pc, #80]	; (1b234 <uiTraceStart+0x114>)
   1b1e2:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   1b1e4:	4b0c      	ldr	r3, [pc, #48]	; (1b218 <uiTraceStart+0xf8>)
   1b1e6:	681b      	ldr	r3, [r3, #0]
   1b1e8:	1e5a      	subs	r2, r3, #1
   1b1ea:	4b0b      	ldr	r3, [pc, #44]	; (1b218 <uiTraceStart+0xf8>)
   1b1ec:	601a      	str	r2, [r3, #0]
   1b1ee:	693b      	ldr	r3, [r7, #16]
   1b1f0:	607b      	str	r3, [r7, #4]
   1b1f2:	687b      	ldr	r3, [r7, #4]
   1b1f4:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1b1f8:	4b03      	ldr	r3, [pc, #12]	; (1b208 <uiTraceStart+0xe8>)
   1b1fa:	681b      	ldr	r3, [r3, #0]
   1b1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   1b1fe:	0018      	movs	r0, r3
   1b200:	46bd      	mov	sp, r7
   1b202:	b007      	add	sp, #28
   1b204:	bd90      	pop	{r4, r7, pc}
   1b206:	46c0      	nop			; (mov r8, r8)
   1b208:	20000d20 	.word	0x20000d20
   1b20c:	0003a318 	.word	0x0003a318
   1b210:	0001c389 	.word	0x0001c389
   1b214:	20000c80 	.word	0x20000c80
   1b218:	20000c78 	.word	0x20000c78
   1b21c:	0001ad89 	.word	0x0001ad89
   1b220:	0001aacd 	.word	0x0001aacd
   1b224:	0001c06d 	.word	0x0001c06d
   1b228:	0003a35c 	.word	0x0003a35c
   1b22c:	0001c29d 	.word	0x0001c29d
   1b230:	0001ba01 	.word	0x0001ba01
   1b234:	0001b8e9 	.word	0x0001b8e9

0001b238 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1b238:	b580      	push	{r7, lr}
   1b23a:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   1b23c:	4b02      	ldr	r3, [pc, #8]	; (1b248 <vTraceStart+0x10>)
   1b23e:	4798      	blx	r3
}
   1b240:	46c0      	nop			; (mov r8, r8)
   1b242:	46bd      	mov	sp, r7
   1b244:	bd80      	pop	{r7, pc}
   1b246:	46c0      	nop			; (mov r8, r8)
   1b248:	0001b121 	.word	0x0001b121

0001b24c <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   1b24c:	b580      	push	{r7, lr}
   1b24e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1b250:	4b08      	ldr	r3, [pc, #32]	; (1b274 <vTraceStop+0x28>)
   1b252:	681b      	ldr	r3, [r3, #0]
   1b254:	2b00      	cmp	r3, #0
   1b256:	d003      	beq.n	1b260 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1b258:	4b06      	ldr	r3, [pc, #24]	; (1b274 <vTraceStop+0x28>)
   1b25a:	681b      	ldr	r3, [r3, #0]
   1b25c:	2200      	movs	r2, #0
   1b25e:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   1b260:	4b05      	ldr	r3, [pc, #20]	; (1b278 <vTraceStop+0x2c>)
   1b262:	681b      	ldr	r3, [r3, #0]
   1b264:	2b00      	cmp	r3, #0
   1b266:	d002      	beq.n	1b26e <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1b268:	4b03      	ldr	r3, [pc, #12]	; (1b278 <vTraceStop+0x2c>)
   1b26a:	681b      	ldr	r3, [r3, #0]
   1b26c:	4798      	blx	r3
	}
}
   1b26e:	46c0      	nop			; (mov r8, r8)
   1b270:	46bd      	mov	sp, r7
   1b272:	bd80      	pop	{r7, pc}
   1b274:	20000d20 	.word	0x20000d20
   1b278:	20000c88 	.word	0x20000c88

0001b27c <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   1b27c:	b580      	push	{r7, lr}
   1b27e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1b280:	4b05      	ldr	r3, [pc, #20]	; (1b298 <xTraceIsRecordingEnabled+0x1c>)
   1b282:	681b      	ldr	r3, [r3, #0]
   1b284:	2b00      	cmp	r3, #0
   1b286:	d003      	beq.n	1b290 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1b288:	4b03      	ldr	r3, [pc, #12]	; (1b298 <xTraceIsRecordingEnabled+0x1c>)
   1b28a:	681b      	ldr	r3, [r3, #0]
   1b28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b28e:	e000      	b.n	1b292 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   1b290:	2300      	movs	r3, #0
	}
}
   1b292:	0018      	movs	r0, r3
   1b294:	46bd      	mov	sp, r7
   1b296:	bd80      	pop	{r7, pc}
   1b298:	20000d20 	.word	0x20000d20

0001b29c <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   1b29c:	b590      	push	{r4, r7, lr}
   1b29e:	b089      	sub	sp, #36	; 0x24
   1b2a0:	af00      	add	r7, sp, #0
   1b2a2:	0002      	movs	r2, r0
   1b2a4:	1dfb      	adds	r3, r7, #7
   1b2a6:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1b2a8:	1dfb      	adds	r3, r7, #7
   1b2aa:	781b      	ldrb	r3, [r3, #0]
   1b2ac:	2b00      	cmp	r3, #0
   1b2ae:	d057      	beq.n	1b360 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   1b2b0:	4b2e      	ldr	r3, [pc, #184]	; (1b36c <prvTraceStoreTaskReady+0xd0>)
   1b2b2:	681b      	ldr	r3, [r3, #0]
   1b2b4:	2b00      	cmp	r3, #0
   1b2b6:	d055      	beq.n	1b364 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1b2b8:	1dfb      	adds	r3, r7, #7
   1b2ba:	781b      	ldrb	r3, [r3, #0]
   1b2bc:	2b0f      	cmp	r3, #15
   1b2be:	d904      	bls.n	1b2ca <prvTraceStoreTaskReady+0x2e>
   1b2c0:	4b2b      	ldr	r3, [pc, #172]	; (1b370 <prvTraceStoreTaskReady+0xd4>)
   1b2c2:	0018      	movs	r0, r3
   1b2c4:	4b2b      	ldr	r3, [pc, #172]	; (1b374 <prvTraceStoreTaskReady+0xd8>)
   1b2c6:	4798      	blx	r3
   1b2c8:	e04d      	b.n	1b366 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1b2ca:	4b2b      	ldr	r3, [pc, #172]	; (1b378 <prvTraceStoreTaskReady+0xdc>)
   1b2cc:	681b      	ldr	r3, [r3, #0]
   1b2ce:	2b00      	cmp	r3, #0
   1b2d0:	d004      	beq.n	1b2dc <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   1b2d2:	4b2a      	ldr	r3, [pc, #168]	; (1b37c <prvTraceStoreTaskReady+0xe0>)
   1b2d4:	0018      	movs	r0, r3
   1b2d6:	4b27      	ldr	r3, [pc, #156]	; (1b374 <prvTraceStoreTaskReady+0xd8>)
   1b2d8:	4798      	blx	r3
		return;
   1b2da:	e044      	b.n	1b366 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b2dc:	f3ef 8310 	mrs	r3, PRIMASK
   1b2e0:	60fb      	str	r3, [r7, #12]
  return(result);
   1b2e2:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   1b2e4:	61fb      	str	r3, [r7, #28]
   1b2e6:	2301      	movs	r3, #1
   1b2e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b2ea:	693b      	ldr	r3, [r7, #16]
   1b2ec:	f383 8810 	msr	PRIMASK, r3
   1b2f0:	4b21      	ldr	r3, [pc, #132]	; (1b378 <prvTraceStoreTaskReady+0xdc>)
   1b2f2:	681b      	ldr	r3, [r3, #0]
   1b2f4:	1c5a      	adds	r2, r3, #1
   1b2f6:	4b20      	ldr	r3, [pc, #128]	; (1b378 <prvTraceStoreTaskReady+0xdc>)
   1b2f8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1b2fa:	4b21      	ldr	r3, [pc, #132]	; (1b380 <prvTraceStoreTaskReady+0xe4>)
   1b2fc:	681b      	ldr	r3, [r3, #0]
   1b2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b300:	2b00      	cmp	r3, #0
   1b302:	d022      	beq.n	1b34a <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1b304:	231a      	movs	r3, #26
   1b306:	18fc      	adds	r4, r7, r3
   1b308:	4b1e      	ldr	r3, [pc, #120]	; (1b384 <prvTraceStoreTaskReady+0xe8>)
   1b30a:	0018      	movs	r0, r3
   1b30c:	4b1e      	ldr	r3, [pc, #120]	; (1b388 <prvTraceStoreTaskReady+0xec>)
   1b30e:	4798      	blx	r3
   1b310:	0003      	movs	r3, r0
   1b312:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   1b314:	2319      	movs	r3, #25
   1b316:	18fb      	adds	r3, r7, r3
   1b318:	1dfa      	adds	r2, r7, #7
   1b31a:	7812      	ldrb	r2, [r2, #0]
   1b31c:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   1b31e:	4b1b      	ldr	r3, [pc, #108]	; (1b38c <prvTraceStoreTaskReady+0xf0>)
   1b320:	4798      	blx	r3
   1b322:	0003      	movs	r3, r0
   1b324:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1b326:	697b      	ldr	r3, [r7, #20]
   1b328:	2b00      	cmp	r3, #0
   1b32a:	d00e      	beq.n	1b34a <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   1b32c:	697b      	ldr	r3, [r7, #20]
   1b32e:	2202      	movs	r2, #2
   1b330:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   1b332:	697b      	ldr	r3, [r7, #20]
   1b334:	221a      	movs	r2, #26
   1b336:	18ba      	adds	r2, r7, r2
   1b338:	8812      	ldrh	r2, [r2, #0]
   1b33a:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   1b33c:	697b      	ldr	r3, [r7, #20]
   1b33e:	2219      	movs	r2, #25
   1b340:	18ba      	adds	r2, r7, r2
   1b342:	7812      	ldrb	r2, [r2, #0]
   1b344:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1b346:	4b12      	ldr	r3, [pc, #72]	; (1b390 <prvTraceStoreTaskReady+0xf4>)
   1b348:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b34a:	4b0b      	ldr	r3, [pc, #44]	; (1b378 <prvTraceStoreTaskReady+0xdc>)
   1b34c:	681b      	ldr	r3, [r3, #0]
   1b34e:	1e5a      	subs	r2, r3, #1
   1b350:	4b09      	ldr	r3, [pc, #36]	; (1b378 <prvTraceStoreTaskReady+0xdc>)
   1b352:	601a      	str	r2, [r3, #0]
   1b354:	69fb      	ldr	r3, [r7, #28]
   1b356:	60bb      	str	r3, [r7, #8]
   1b358:	68bb      	ldr	r3, [r7, #8]
   1b35a:	f383 8810 	msr	PRIMASK, r3
   1b35e:	e002      	b.n	1b366 <prvTraceStoreTaskReady+0xca>
		return;
   1b360:	46c0      	nop			; (mov r8, r8)
   1b362:	e000      	b.n	1b366 <prvTraceStoreTaskReady+0xca>
		return;
   1b364:	46c0      	nop			; (mov r8, r8)
}
   1b366:	46bd      	mov	sp, r7
   1b368:	b009      	add	sp, #36	; 0x24
   1b36a:	bd90      	pop	{r4, r7, pc}
   1b36c:	20000100 	.word	0x20000100
   1b370:	0003a6c4 	.word	0x0003a6c4
   1b374:	0001c389 	.word	0x0001c389
   1b378:	20000c78 	.word	0x20000c78
   1b37c:	0003a704 	.word	0x0003a704
   1b380:	20000d20 	.word	0x20000d20
   1b384:	0000ffff 	.word	0x0000ffff
   1b388:	0001c59d 	.word	0x0001c59d
   1b38c:	0001bf41 	.word	0x0001bf41
   1b390:	0001c545 	.word	0x0001c545

0001b394 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   1b394:	b580      	push	{r7, lr}
   1b396:	b08e      	sub	sp, #56	; 0x38
   1b398:	af00      	add	r7, sp, #0
   1b39a:	60f8      	str	r0, [r7, #12]
   1b39c:	60b9      	str	r1, [r7, #8]
   1b39e:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   1b3a0:	4b48      	ldr	r3, [pc, #288]	; (1b4c4 <vTraceStoreMemMangEvent+0x130>)
   1b3a2:	681b      	ldr	r3, [r3, #0]
   1b3a4:	2b00      	cmp	r3, #0
   1b3a6:	d100      	bne.n	1b3aa <vTraceStoreMemMangEvent+0x16>
   1b3a8:	e088      	b.n	1b4bc <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1b3aa:	687b      	ldr	r3, [r7, #4]
   1b3ac:	2b00      	cmp	r3, #0
   1b3ae:	da03      	bge.n	1b3b8 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   1b3b0:	687b      	ldr	r3, [r7, #4]
   1b3b2:	425b      	negs	r3, r3
   1b3b4:	637b      	str	r3, [r7, #52]	; 0x34
   1b3b6:	e001      	b.n	1b3bc <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1b3b8:	687b      	ldr	r3, [r7, #4]
   1b3ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b3bc:	f3ef 8310 	mrs	r3, PRIMASK
   1b3c0:	61bb      	str	r3, [r7, #24]
  return(result);
   1b3c2:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   1b3c4:	633b      	str	r3, [r7, #48]	; 0x30
   1b3c6:	2301      	movs	r3, #1
   1b3c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b3ca:	69fb      	ldr	r3, [r7, #28]
   1b3cc:	f383 8810 	msr	PRIMASK, r3
   1b3d0:	4b3d      	ldr	r3, [pc, #244]	; (1b4c8 <vTraceStoreMemMangEvent+0x134>)
   1b3d2:	681b      	ldr	r3, [r3, #0]
   1b3d4:	1c5a      	adds	r2, r3, #1
   1b3d6:	4b3c      	ldr	r3, [pc, #240]	; (1b4c8 <vTraceStoreMemMangEvent+0x134>)
   1b3d8:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1b3da:	68bb      	ldr	r3, [r7, #8]
   1b3dc:	2b00      	cmp	r3, #0
   1b3de:	d005      	beq.n	1b3ec <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   1b3e0:	4b3a      	ldr	r3, [pc, #232]	; (1b4cc <vTraceStoreMemMangEvent+0x138>)
   1b3e2:	681a      	ldr	r2, [r3, #0]
   1b3e4:	687b      	ldr	r3, [r7, #4]
   1b3e6:	18d2      	adds	r2, r2, r3
   1b3e8:	4b38      	ldr	r3, [pc, #224]	; (1b4cc <vTraceStoreMemMangEvent+0x138>)
   1b3ea:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   1b3ec:	4b35      	ldr	r3, [pc, #212]	; (1b4c4 <vTraceStoreMemMangEvent+0x130>)
   1b3ee:	681b      	ldr	r3, [r3, #0]
   1b3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b3f2:	2b00      	cmp	r3, #0
   1b3f4:	d057      	beq.n	1b4a6 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1b3f6:	20ff      	movs	r0, #255	; 0xff
   1b3f8:	4b35      	ldr	r3, [pc, #212]	; (1b4d0 <vTraceStoreMemMangEvent+0x13c>)
   1b3fa:	4798      	blx	r3
   1b3fc:	0003      	movs	r3, r0
   1b3fe:	001a      	movs	r2, r3
   1b400:	232f      	movs	r3, #47	; 0x2f
   1b402:	18fb      	adds	r3, r7, r3
   1b404:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1b406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b408:	4a32      	ldr	r2, [pc, #200]	; (1b4d4 <vTraceStoreMemMangEvent+0x140>)
   1b40a:	0019      	movs	r1, r3
   1b40c:	0010      	movs	r0, r2
   1b40e:	4b32      	ldr	r3, [pc, #200]	; (1b4d8 <vTraceStoreMemMangEvent+0x144>)
   1b410:	4798      	blx	r3
   1b412:	0002      	movs	r2, r0
   1b414:	232c      	movs	r3, #44	; 0x2c
   1b416:	18fb      	adds	r3, r7, r3
   1b418:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1b41a:	4b30      	ldr	r3, [pc, #192]	; (1b4dc <vTraceStoreMemMangEvent+0x148>)
   1b41c:	4798      	blx	r3
   1b41e:	0003      	movs	r3, r0
   1b420:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   1b422:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b424:	2b00      	cmp	r3, #0
   1b426:	d03e      	beq.n	1b4a6 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   1b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b42a:	222f      	movs	r2, #47	; 0x2f
   1b42c:	18ba      	adds	r2, r7, r2
   1b42e:	7812      	ldrb	r2, [r2, #0]
   1b430:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   1b432:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b434:	2200      	movs	r2, #0
   1b436:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1b438:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b43a:	222c      	movs	r2, #44	; 0x2c
   1b43c:	18ba      	adds	r2, r7, r2
   1b43e:	8812      	ldrh	r2, [r2, #0]
   1b440:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b442:	4b27      	ldr	r3, [pc, #156]	; (1b4e0 <vTraceStoreMemMangEvent+0x14c>)
   1b444:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1b446:	68bb      	ldr	r3, [r7, #8]
   1b448:	4a22      	ldr	r2, [pc, #136]	; (1b4d4 <vTraceStoreMemMangEvent+0x140>)
   1b44a:	0019      	movs	r1, r3
   1b44c:	0010      	movs	r0, r2
   1b44e:	4b22      	ldr	r3, [pc, #136]	; (1b4d8 <vTraceStoreMemMangEvent+0x144>)
   1b450:	4798      	blx	r3
   1b452:	0002      	movs	r2, r0
   1b454:	2326      	movs	r3, #38	; 0x26
   1b456:	18fb      	adds	r3, r7, r3
   1b458:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   1b45a:	2325      	movs	r3, #37	; 0x25
   1b45c:	18fb      	adds	r3, r7, r3
   1b45e:	2200      	movs	r2, #0
   1b460:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1b462:	4b1e      	ldr	r3, [pc, #120]	; (1b4dc <vTraceStoreMemMangEvent+0x148>)
   1b464:	4798      	blx	r3
   1b466:	0003      	movs	r3, r0
   1b468:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   1b46a:	6a3b      	ldr	r3, [r7, #32]
   1b46c:	2b00      	cmp	r3, #0
   1b46e:	d01a      	beq.n	1b4a6 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   1b470:	6a3b      	ldr	r3, [r7, #32]
   1b472:	2226      	movs	r2, #38	; 0x26
   1b474:	18ba      	adds	r2, r7, r2
   1b476:	8812      	ldrh	r2, [r2, #0]
   1b478:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1b47a:	6a3b      	ldr	r3, [r7, #32]
   1b47c:	2225      	movs	r2, #37	; 0x25
   1b47e:	18ba      	adds	r2, r7, r2
   1b480:	7812      	ldrb	r2, [r2, #0]
   1b482:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   1b484:	68fb      	ldr	r3, [r7, #12]
   1b486:	b2db      	uxtb	r3, r3
   1b488:	3301      	adds	r3, #1
   1b48a:	b2da      	uxtb	r2, r3
   1b48c:	6a3b      	ldr	r3, [r7, #32]
   1b48e:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   1b490:	68fb      	ldr	r3, [r7, #12]
   1b492:	b2da      	uxtb	r2, r3
   1b494:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b496:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   1b498:	4b11      	ldr	r3, [pc, #68]	; (1b4e0 <vTraceStoreMemMangEvent+0x14c>)
   1b49a:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   1b49c:	4b09      	ldr	r3, [pc, #36]	; (1b4c4 <vTraceStoreMemMangEvent+0x130>)
   1b49e:	681b      	ldr	r3, [r3, #0]
   1b4a0:	4a0a      	ldr	r2, [pc, #40]	; (1b4cc <vTraceStoreMemMangEvent+0x138>)
   1b4a2:	6812      	ldr	r2, [r2, #0]
   1b4a4:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1b4a6:	4b08      	ldr	r3, [pc, #32]	; (1b4c8 <vTraceStoreMemMangEvent+0x134>)
   1b4a8:	681b      	ldr	r3, [r3, #0]
   1b4aa:	1e5a      	subs	r2, r3, #1
   1b4ac:	4b06      	ldr	r3, [pc, #24]	; (1b4c8 <vTraceStoreMemMangEvent+0x134>)
   1b4ae:	601a      	str	r2, [r3, #0]
   1b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b4b2:	617b      	str	r3, [r7, #20]
   1b4b4:	697b      	ldr	r3, [r7, #20]
   1b4b6:	f383 8810 	msr	PRIMASK, r3
   1b4ba:	e000      	b.n	1b4be <vTraceStoreMemMangEvent+0x12a>
		return;
   1b4bc:	46c0      	nop			; (mov r8, r8)
}
   1b4be:	46bd      	mov	sp, r7
   1b4c0:	b00e      	add	sp, #56	; 0x38
   1b4c2:	bd80      	pop	{r7, pc}
   1b4c4:	20000d20 	.word	0x20000d20
   1b4c8:	20000c78 	.word	0x20000c78
   1b4cc:	20000c8c 	.word	0x20000c8c
   1b4d0:	0001c59d 	.word	0x0001c59d
   1b4d4:	0000ffff 	.word	0x0000ffff
   1b4d8:	0001b761 	.word	0x0001b761
   1b4dc:	0001bf41 	.word	0x0001bf41
   1b4e0:	0001c545 	.word	0x0001c545

0001b4e4 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   1b4e4:	b590      	push	{r4, r7, lr}
   1b4e6:	b08b      	sub	sp, #44	; 0x2c
   1b4e8:	af00      	add	r7, sp, #0
   1b4ea:	60f8      	str	r0, [r7, #12]
   1b4ec:	607a      	str	r2, [r7, #4]
   1b4ee:	230b      	movs	r3, #11
   1b4f0:	18fb      	adds	r3, r7, r3
   1b4f2:	1c0a      	adds	r2, r1, #0
   1b4f4:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1b4f6:	68fb      	ldr	r3, [r7, #12]
   1b4f8:	2bfe      	cmp	r3, #254	; 0xfe
   1b4fa:	d904      	bls.n	1b506 <prvTraceStoreKernelCall+0x22>
   1b4fc:	4b39      	ldr	r3, [pc, #228]	; (1b5e4 <prvTraceStoreKernelCall+0x100>)
   1b4fe:	0018      	movs	r0, r3
   1b500:	4b39      	ldr	r3, [pc, #228]	; (1b5e8 <prvTraceStoreKernelCall+0x104>)
   1b502:	4798      	blx	r3
   1b504:	e06b      	b.n	1b5de <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1b506:	230b      	movs	r3, #11
   1b508:	18fb      	adds	r3, r7, r3
   1b50a:	781b      	ldrb	r3, [r3, #0]
   1b50c:	2b08      	cmp	r3, #8
   1b50e:	d904      	bls.n	1b51a <prvTraceStoreKernelCall+0x36>
   1b510:	4b36      	ldr	r3, [pc, #216]	; (1b5ec <prvTraceStoreKernelCall+0x108>)
   1b512:	0018      	movs	r0, r3
   1b514:	4b34      	ldr	r3, [pc, #208]	; (1b5e8 <prvTraceStoreKernelCall+0x104>)
   1b516:	4798      	blx	r3
   1b518:	e061      	b.n	1b5de <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1b51a:	4b35      	ldr	r3, [pc, #212]	; (1b5f0 <prvTraceStoreKernelCall+0x10c>)
   1b51c:	681a      	ldr	r2, [r3, #0]
   1b51e:	230b      	movs	r3, #11
   1b520:	18fb      	adds	r3, r7, r3
   1b522:	781b      	ldrb	r3, [r3, #0]
   1b524:	2164      	movs	r1, #100	; 0x64
   1b526:	18d3      	adds	r3, r2, r3
   1b528:	185b      	adds	r3, r3, r1
   1b52a:	781b      	ldrb	r3, [r3, #0]
   1b52c:	001a      	movs	r2, r3
   1b52e:	687b      	ldr	r3, [r7, #4]
   1b530:	429a      	cmp	r2, r3
   1b532:	d204      	bcs.n	1b53e <prvTraceStoreKernelCall+0x5a>
   1b534:	4b2f      	ldr	r3, [pc, #188]	; (1b5f4 <prvTraceStoreKernelCall+0x110>)
   1b536:	0018      	movs	r0, r3
   1b538:	4b2b      	ldr	r3, [pc, #172]	; (1b5e8 <prvTraceStoreKernelCall+0x104>)
   1b53a:	4798      	blx	r3
   1b53c:	e04f      	b.n	1b5de <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   1b53e:	4b2e      	ldr	r3, [pc, #184]	; (1b5f8 <prvTraceStoreKernelCall+0x114>)
   1b540:	681b      	ldr	r3, [r3, #0]
   1b542:	2b00      	cmp	r3, #0
   1b544:	d004      	beq.n	1b550 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1b546:	4b2d      	ldr	r3, [pc, #180]	; (1b5fc <prvTraceStoreKernelCall+0x118>)
   1b548:	0018      	movs	r0, r3
   1b54a:	4b27      	ldr	r3, [pc, #156]	; (1b5e8 <prvTraceStoreKernelCall+0x104>)
   1b54c:	4798      	blx	r3
		return;
   1b54e:	e046      	b.n	1b5de <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   1b550:	4b2b      	ldr	r3, [pc, #172]	; (1b600 <prvTraceStoreKernelCall+0x11c>)
   1b552:	781b      	ldrb	r3, [r3, #0]
   1b554:	2b00      	cmp	r3, #0
   1b556:	d041      	beq.n	1b5dc <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b558:	f3ef 8310 	mrs	r3, PRIMASK
   1b55c:	617b      	str	r3, [r7, #20]
  return(result);
   1b55e:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   1b560:	627b      	str	r3, [r7, #36]	; 0x24
   1b562:	2301      	movs	r3, #1
   1b564:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b566:	69bb      	ldr	r3, [r7, #24]
   1b568:	f383 8810 	msr	PRIMASK, r3
   1b56c:	4b22      	ldr	r3, [pc, #136]	; (1b5f8 <prvTraceStoreKernelCall+0x114>)
   1b56e:	681b      	ldr	r3, [r3, #0]
   1b570:	1c5a      	adds	r2, r3, #1
   1b572:	4b21      	ldr	r3, [pc, #132]	; (1b5f8 <prvTraceStoreKernelCall+0x114>)
   1b574:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1b576:	4b1e      	ldr	r3, [pc, #120]	; (1b5f0 <prvTraceStoreKernelCall+0x10c>)
   1b578:	681b      	ldr	r3, [r3, #0]
   1b57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b57c:	2b00      	cmp	r3, #0
   1b57e:	d022      	beq.n	1b5c6 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1b580:	2322      	movs	r3, #34	; 0x22
   1b582:	18fc      	adds	r4, r7, r3
   1b584:	4b1f      	ldr	r3, [pc, #124]	; (1b604 <prvTraceStoreKernelCall+0x120>)
   1b586:	0018      	movs	r0, r3
   1b588:	4b1f      	ldr	r3, [pc, #124]	; (1b608 <prvTraceStoreKernelCall+0x124>)
   1b58a:	4798      	blx	r3
   1b58c:	0003      	movs	r3, r0
   1b58e:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1b590:	2321      	movs	r3, #33	; 0x21
   1b592:	18fb      	adds	r3, r7, r3
   1b594:	687a      	ldr	r2, [r7, #4]
   1b596:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   1b598:	4b1c      	ldr	r3, [pc, #112]	; (1b60c <prvTraceStoreKernelCall+0x128>)
   1b59a:	4798      	blx	r3
   1b59c:	0003      	movs	r3, r0
   1b59e:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1b5a0:	69fb      	ldr	r3, [r7, #28]
   1b5a2:	2b00      	cmp	r3, #0
   1b5a4:	d00f      	beq.n	1b5c6 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   1b5a6:	69fb      	ldr	r3, [r7, #28]
   1b5a8:	2222      	movs	r2, #34	; 0x22
   1b5aa:	18ba      	adds	r2, r7, r2
   1b5ac:	8812      	ldrh	r2, [r2, #0]
   1b5ae:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   1b5b0:	68fb      	ldr	r3, [r7, #12]
   1b5b2:	b2da      	uxtb	r2, r3
   1b5b4:	69fb      	ldr	r3, [r7, #28]
   1b5b6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1b5b8:	69fb      	ldr	r3, [r7, #28]
   1b5ba:	2221      	movs	r2, #33	; 0x21
   1b5bc:	18ba      	adds	r2, r7, r2
   1b5be:	7812      	ldrb	r2, [r2, #0]
   1b5c0:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1b5c2:	4b13      	ldr	r3, [pc, #76]	; (1b610 <prvTraceStoreKernelCall+0x12c>)
   1b5c4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b5c6:	4b0c      	ldr	r3, [pc, #48]	; (1b5f8 <prvTraceStoreKernelCall+0x114>)
   1b5c8:	681b      	ldr	r3, [r3, #0]
   1b5ca:	1e5a      	subs	r2, r3, #1
   1b5cc:	4b0a      	ldr	r3, [pc, #40]	; (1b5f8 <prvTraceStoreKernelCall+0x114>)
   1b5ce:	601a      	str	r2, [r3, #0]
   1b5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b5d2:	613b      	str	r3, [r7, #16]
   1b5d4:	693b      	ldr	r3, [r7, #16]
   1b5d6:	f383 8810 	msr	PRIMASK, r3
   1b5da:	e000      	b.n	1b5de <prvTraceStoreKernelCall+0xfa>
		return;
   1b5dc:	46c0      	nop			; (mov r8, r8)
}
   1b5de:	46bd      	mov	sp, r7
   1b5e0:	b00b      	add	sp, #44	; 0x2c
   1b5e2:	bd90      	pop	{r4, r7, pc}
   1b5e4:	0003a774 	.word	0x0003a774
   1b5e8:	0001c389 	.word	0x0001c389
   1b5ec:	0003a7ac 	.word	0x0003a7ac
   1b5f0:	20000d20 	.word	0x20000d20
   1b5f4:	0003a7f4 	.word	0x0003a7f4
   1b5f8:	20000c78 	.word	0x20000c78
   1b5fc:	0003a83c 	.word	0x0003a83c
   1b600:	20000c84 	.word	0x20000c84
   1b604:	0000ffff 	.word	0x0000ffff
   1b608:	0001c59d 	.word	0x0001c59d
   1b60c:	0001bf41 	.word	0x0001bf41
   1b610:	0001c545 	.word	0x0001c545

0001b614 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   1b614:	b580      	push	{r7, lr}
   1b616:	b08a      	sub	sp, #40	; 0x28
   1b618:	af00      	add	r7, sp, #0
   1b61a:	60f8      	str	r0, [r7, #12]
   1b61c:	607a      	str	r2, [r7, #4]
   1b61e:	603b      	str	r3, [r7, #0]
   1b620:	230b      	movs	r3, #11
   1b622:	18fb      	adds	r3, r7, r3
   1b624:	1c0a      	adds	r2, r1, #0
   1b626:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1b628:	68fb      	ldr	r3, [r7, #12]
   1b62a:	2bfe      	cmp	r3, #254	; 0xfe
   1b62c:	d904      	bls.n	1b638 <prvTraceStoreKernelCallWithParam+0x24>
   1b62e:	4b40      	ldr	r3, [pc, #256]	; (1b730 <prvTraceStoreKernelCallWithParam+0x11c>)
   1b630:	0018      	movs	r0, r3
   1b632:	4b40      	ldr	r3, [pc, #256]	; (1b734 <prvTraceStoreKernelCallWithParam+0x120>)
   1b634:	4798      	blx	r3
   1b636:	e077      	b.n	1b728 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1b638:	230b      	movs	r3, #11
   1b63a:	18fb      	adds	r3, r7, r3
   1b63c:	781b      	ldrb	r3, [r3, #0]
   1b63e:	2b08      	cmp	r3, #8
   1b640:	d904      	bls.n	1b64c <prvTraceStoreKernelCallWithParam+0x38>
   1b642:	4b3d      	ldr	r3, [pc, #244]	; (1b738 <prvTraceStoreKernelCallWithParam+0x124>)
   1b644:	0018      	movs	r0, r3
   1b646:	4b3b      	ldr	r3, [pc, #236]	; (1b734 <prvTraceStoreKernelCallWithParam+0x120>)
   1b648:	4798      	blx	r3
   1b64a:	e06d      	b.n	1b728 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   1b64c:	4b3b      	ldr	r3, [pc, #236]	; (1b73c <prvTraceStoreKernelCallWithParam+0x128>)
   1b64e:	681a      	ldr	r2, [r3, #0]
   1b650:	230b      	movs	r3, #11
   1b652:	18fb      	adds	r3, r7, r3
   1b654:	781b      	ldrb	r3, [r3, #0]
   1b656:	2164      	movs	r1, #100	; 0x64
   1b658:	18d3      	adds	r3, r2, r3
   1b65a:	185b      	adds	r3, r3, r1
   1b65c:	781b      	ldrb	r3, [r3, #0]
   1b65e:	001a      	movs	r2, r3
   1b660:	687b      	ldr	r3, [r7, #4]
   1b662:	429a      	cmp	r2, r3
   1b664:	d204      	bcs.n	1b670 <prvTraceStoreKernelCallWithParam+0x5c>
   1b666:	4b36      	ldr	r3, [pc, #216]	; (1b740 <prvTraceStoreKernelCallWithParam+0x12c>)
   1b668:	0018      	movs	r0, r3
   1b66a:	4b32      	ldr	r3, [pc, #200]	; (1b734 <prvTraceStoreKernelCallWithParam+0x120>)
   1b66c:	4798      	blx	r3
   1b66e:	e05b      	b.n	1b728 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   1b670:	4b34      	ldr	r3, [pc, #208]	; (1b744 <prvTraceStoreKernelCallWithParam+0x130>)
   1b672:	681b      	ldr	r3, [r3, #0]
   1b674:	2b00      	cmp	r3, #0
   1b676:	d004      	beq.n	1b682 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   1b678:	4b33      	ldr	r3, [pc, #204]	; (1b748 <prvTraceStoreKernelCallWithParam+0x134>)
   1b67a:	0018      	movs	r0, r3
   1b67c:	4b2d      	ldr	r3, [pc, #180]	; (1b734 <prvTraceStoreKernelCallWithParam+0x120>)
   1b67e:	4798      	blx	r3
		return;
   1b680:	e052      	b.n	1b728 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b682:	f3ef 8310 	mrs	r3, PRIMASK
   1b686:	617b      	str	r3, [r7, #20]
  return(result);
   1b688:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   1b68a:	627b      	str	r3, [r7, #36]	; 0x24
   1b68c:	2301      	movs	r3, #1
   1b68e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b690:	69bb      	ldr	r3, [r7, #24]
   1b692:	f383 8810 	msr	PRIMASK, r3
   1b696:	4b2b      	ldr	r3, [pc, #172]	; (1b744 <prvTraceStoreKernelCallWithParam+0x130>)
   1b698:	681b      	ldr	r3, [r3, #0]
   1b69a:	1c5a      	adds	r2, r3, #1
   1b69c:	4b29      	ldr	r3, [pc, #164]	; (1b744 <prvTraceStoreKernelCallWithParam+0x130>)
   1b69e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1b6a0:	4b26      	ldr	r3, [pc, #152]	; (1b73c <prvTraceStoreKernelCallWithParam+0x128>)
   1b6a2:	681b      	ldr	r3, [r3, #0]
   1b6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b6a6:	2b00      	cmp	r3, #0
   1b6a8:	d034      	beq.n	1b714 <prvTraceStoreKernelCallWithParam+0x100>
   1b6aa:	4b28      	ldr	r3, [pc, #160]	; (1b74c <prvTraceStoreKernelCallWithParam+0x138>)
   1b6ac:	781b      	ldrb	r3, [r3, #0]
   1b6ae:	2b00      	cmp	r3, #0
   1b6b0:	d030      	beq.n	1b714 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   1b6b2:	20ff      	movs	r0, #255	; 0xff
   1b6b4:	4b26      	ldr	r3, [pc, #152]	; (1b750 <prvTraceStoreKernelCallWithParam+0x13c>)
   1b6b6:	4798      	blx	r3
   1b6b8:	0003      	movs	r3, r0
   1b6ba:	001a      	movs	r2, r3
   1b6bc:	2323      	movs	r3, #35	; 0x23
   1b6be:	18fb      	adds	r3, r7, r3
   1b6c0:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   1b6c2:	683b      	ldr	r3, [r7, #0]
   1b6c4:	0019      	movs	r1, r3
   1b6c6:	20ff      	movs	r0, #255	; 0xff
   1b6c8:	4b22      	ldr	r3, [pc, #136]	; (1b754 <prvTraceStoreKernelCallWithParam+0x140>)
   1b6ca:	4798      	blx	r3
   1b6cc:	0002      	movs	r2, r0
   1b6ce:	2322      	movs	r3, #34	; 0x22
   1b6d0:	18fb      	adds	r3, r7, r3
   1b6d2:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1b6d4:	2321      	movs	r3, #33	; 0x21
   1b6d6:	18fb      	adds	r3, r7, r3
   1b6d8:	687a      	ldr	r2, [r7, #4]
   1b6da:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   1b6dc:	4b1e      	ldr	r3, [pc, #120]	; (1b758 <prvTraceStoreKernelCallWithParam+0x144>)
   1b6de:	4798      	blx	r3
   1b6e0:	0003      	movs	r3, r0
   1b6e2:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1b6e4:	69fb      	ldr	r3, [r7, #28]
   1b6e6:	2b00      	cmp	r3, #0
   1b6e8:	d014      	beq.n	1b714 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   1b6ea:	69fb      	ldr	r3, [r7, #28]
   1b6ec:	2223      	movs	r2, #35	; 0x23
   1b6ee:	18ba      	adds	r2, r7, r2
   1b6f0:	7812      	ldrb	r2, [r2, #0]
   1b6f2:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   1b6f4:	68fb      	ldr	r3, [r7, #12]
   1b6f6:	b2da      	uxtb	r2, r3
   1b6f8:	69fb      	ldr	r3, [r7, #28]
   1b6fa:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1b6fc:	69fb      	ldr	r3, [r7, #28]
   1b6fe:	2221      	movs	r2, #33	; 0x21
   1b700:	18ba      	adds	r2, r7, r2
   1b702:	7812      	ldrb	r2, [r2, #0]
   1b704:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1b706:	69fb      	ldr	r3, [r7, #28]
   1b708:	2222      	movs	r2, #34	; 0x22
   1b70a:	18ba      	adds	r2, r7, r2
   1b70c:	7812      	ldrb	r2, [r2, #0]
   1b70e:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b710:	4b12      	ldr	r3, [pc, #72]	; (1b75c <prvTraceStoreKernelCallWithParam+0x148>)
   1b712:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b714:	4b0b      	ldr	r3, [pc, #44]	; (1b744 <prvTraceStoreKernelCallWithParam+0x130>)
   1b716:	681b      	ldr	r3, [r3, #0]
   1b718:	1e5a      	subs	r2, r3, #1
   1b71a:	4b0a      	ldr	r3, [pc, #40]	; (1b744 <prvTraceStoreKernelCallWithParam+0x130>)
   1b71c:	601a      	str	r2, [r3, #0]
   1b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b720:	613b      	str	r3, [r7, #16]
   1b722:	693b      	ldr	r3, [r7, #16]
   1b724:	f383 8810 	msr	PRIMASK, r3
}
   1b728:	46bd      	mov	sp, r7
   1b72a:	b00a      	add	sp, #40	; 0x28
   1b72c:	bd80      	pop	{r7, pc}
   1b72e:	46c0      	nop			; (mov r8, r8)
   1b730:	0003a874 	.word	0x0003a874
   1b734:	0001c389 	.word	0x0001c389
   1b738:	0003a8b4 	.word	0x0003a8b4
   1b73c:	20000d20 	.word	0x20000d20
   1b740:	0003a904 	.word	0x0003a904
   1b744:	20000c78 	.word	0x20000c78
   1b748:	0003a954 	.word	0x0003a954
   1b74c:	20000c84 	.word	0x20000c84
   1b750:	0001c59d 	.word	0x0001c59d
   1b754:	0001b761 	.word	0x0001b761
   1b758:	0001bf41 	.word	0x0001bf41
   1b75c:	0001c545 	.word	0x0001c545

0001b760 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   1b760:	b580      	push	{r7, lr}
   1b762:	b084      	sub	sp, #16
   1b764:	af00      	add	r7, sp, #0
   1b766:	6078      	str	r0, [r7, #4]
   1b768:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   1b76a:	687b      	ldr	r3, [r7, #4]
   1b76c:	2bff      	cmp	r3, #255	; 0xff
   1b76e:	d009      	beq.n	1b784 <prvTraceGetParam+0x24>
   1b770:	687b      	ldr	r3, [r7, #4]
   1b772:	4a19      	ldr	r2, [pc, #100]	; (1b7d8 <prvTraceGetParam+0x78>)
   1b774:	4293      	cmp	r3, r2
   1b776:	d005      	beq.n	1b784 <prvTraceGetParam+0x24>
   1b778:	4b18      	ldr	r3, [pc, #96]	; (1b7dc <prvTraceGetParam+0x7c>)
   1b77a:	0018      	movs	r0, r3
   1b77c:	4b18      	ldr	r3, [pc, #96]	; (1b7e0 <prvTraceGetParam+0x80>)
   1b77e:	4798      	blx	r3
   1b780:	683b      	ldr	r3, [r7, #0]
   1b782:	e024      	b.n	1b7ce <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   1b784:	683a      	ldr	r2, [r7, #0]
   1b786:	687b      	ldr	r3, [r7, #4]
   1b788:	429a      	cmp	r2, r3
   1b78a:	d801      	bhi.n	1b790 <prvTraceGetParam+0x30>
	{
		return param;
   1b78c:	683b      	ldr	r3, [r7, #0]
   1b78e:	e01e      	b.n	1b7ce <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   1b790:	4b14      	ldr	r3, [pc, #80]	; (1b7e4 <prvTraceGetParam+0x84>)
   1b792:	4798      	blx	r3
   1b794:	0003      	movs	r3, r0
   1b796:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   1b798:	68fb      	ldr	r3, [r7, #12]
   1b79a:	2b00      	cmp	r3, #0
   1b79c:	d014      	beq.n	1b7c8 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   1b79e:	68fb      	ldr	r3, [r7, #12]
   1b7a0:	2201      	movs	r2, #1
   1b7a2:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   1b7a4:	687b      	ldr	r3, [r7, #4]
   1b7a6:	43db      	mvns	r3, r3
   1b7a8:	683a      	ldr	r2, [r7, #0]
   1b7aa:	4013      	ands	r3, r2
   1b7ac:	0a1b      	lsrs	r3, r3, #8
   1b7ae:	b2da      	uxtb	r2, r3
   1b7b0:	68fb      	ldr	r3, [r7, #12]
   1b7b2:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   1b7b4:	687b      	ldr	r3, [r7, #4]
   1b7b6:	43db      	mvns	r3, r3
   1b7b8:	683a      	ldr	r2, [r7, #0]
   1b7ba:	4013      	ands	r3, r2
   1b7bc:	0c1b      	lsrs	r3, r3, #16
   1b7be:	b29a      	uxth	r2, r3
   1b7c0:	68fb      	ldr	r3, [r7, #12]
   1b7c2:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b7c4:	4b08      	ldr	r3, [pc, #32]	; (1b7e8 <prvTraceGetParam+0x88>)
   1b7c6:	4798      	blx	r3
		}

		return param & param_max;
   1b7c8:	683b      	ldr	r3, [r7, #0]
   1b7ca:	687a      	ldr	r2, [r7, #4]
   1b7cc:	4013      	ands	r3, r2
	}
}
   1b7ce:	0018      	movs	r0, r3
   1b7d0:	46bd      	mov	sp, r7
   1b7d2:	b004      	add	sp, #16
   1b7d4:	bd80      	pop	{r7, pc}
   1b7d6:	46c0      	nop			; (mov r8, r8)
   1b7d8:	0000ffff 	.word	0x0000ffff
   1b7dc:	0003a98c 	.word	0x0003a98c
   1b7e0:	0001c389 	.word	0x0001c389
   1b7e4:	0001bf41 	.word	0x0001bf41
   1b7e8:	0001c545 	.word	0x0001c545

0001b7ec <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   1b7ec:	b580      	push	{r7, lr}
   1b7ee:	b08a      	sub	sp, #40	; 0x28
   1b7f0:	af00      	add	r7, sp, #0
   1b7f2:	6078      	str	r0, [r7, #4]
   1b7f4:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1b7f6:	2326      	movs	r3, #38	; 0x26
   1b7f8:	18fb      	adds	r3, r7, r3
   1b7fa:	2200      	movs	r2, #0
   1b7fc:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   1b7fe:	687b      	ldr	r3, [r7, #4]
   1b800:	2bfe      	cmp	r3, #254	; 0xfe
   1b802:	d904      	bls.n	1b80e <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   1b804:	4b2d      	ldr	r3, [pc, #180]	; (1b8bc <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1b806:	0018      	movs	r0, r3
   1b808:	4b2d      	ldr	r3, [pc, #180]	; (1b8c0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1b80a:	4798      	blx	r3
   1b80c:	e053      	b.n	1b8b6 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   1b80e:	4b2d      	ldr	r3, [pc, #180]	; (1b8c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b810:	681b      	ldr	r3, [r3, #0]
   1b812:	2b00      	cmp	r3, #0
   1b814:	d004      	beq.n	1b820 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1b816:	4b2c      	ldr	r3, [pc, #176]	; (1b8c8 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   1b818:	0018      	movs	r0, r3
   1b81a:	4b29      	ldr	r3, [pc, #164]	; (1b8c0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1b81c:	4798      	blx	r3
		return;
   1b81e:	e04a      	b.n	1b8b6 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b820:	f3ef 8310 	mrs	r3, PRIMASK
   1b824:	613b      	str	r3, [r7, #16]
  return(result);
   1b826:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   1b828:	623b      	str	r3, [r7, #32]
   1b82a:	2301      	movs	r3, #1
   1b82c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b82e:	697b      	ldr	r3, [r7, #20]
   1b830:	f383 8810 	msr	PRIMASK, r3
   1b834:	4b23      	ldr	r3, [pc, #140]	; (1b8c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b836:	681b      	ldr	r3, [r3, #0]
   1b838:	1c5a      	adds	r2, r3, #1
   1b83a:	4b22      	ldr	r3, [pc, #136]	; (1b8c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b83c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1b83e:	4b23      	ldr	r3, [pc, #140]	; (1b8cc <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   1b840:	681b      	ldr	r3, [r3, #0]
   1b842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b844:	2b00      	cmp	r3, #0
   1b846:	d02c      	beq.n	1b8a2 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   1b848:	4b21      	ldr	r3, [pc, #132]	; (1b8d0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   1b84a:	781b      	ldrb	r3, [r3, #0]
   1b84c:	2b00      	cmp	r3, #0
   1b84e:	d028      	beq.n	1b8a2 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   1b850:	20ff      	movs	r0, #255	; 0xff
   1b852:	4b20      	ldr	r3, [pc, #128]	; (1b8d4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   1b854:	4798      	blx	r3
   1b856:	0003      	movs	r3, r0
   1b858:	001a      	movs	r2, r3
   1b85a:	231f      	movs	r3, #31
   1b85c:	18fb      	adds	r3, r7, r3
   1b85e:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   1b860:	683b      	ldr	r3, [r7, #0]
   1b862:	4a1d      	ldr	r2, [pc, #116]	; (1b8d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   1b864:	0019      	movs	r1, r3
   1b866:	0010      	movs	r0, r2
   1b868:	4b1c      	ldr	r3, [pc, #112]	; (1b8dc <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   1b86a:	4798      	blx	r3
   1b86c:	0002      	movs	r2, r0
   1b86e:	2326      	movs	r3, #38	; 0x26
   1b870:	18fb      	adds	r3, r7, r3
   1b872:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1b874:	4b1a      	ldr	r3, [pc, #104]	; (1b8e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1b876:	4798      	blx	r3
   1b878:	0003      	movs	r3, r0
   1b87a:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   1b87c:	69bb      	ldr	r3, [r7, #24]
   1b87e:	2b00      	cmp	r3, #0
   1b880:	d00f      	beq.n	1b8a2 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   1b882:	69bb      	ldr	r3, [r7, #24]
   1b884:	221f      	movs	r2, #31
   1b886:	18ba      	adds	r2, r7, r2
   1b888:	7812      	ldrb	r2, [r2, #0]
   1b88a:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   1b88c:	687b      	ldr	r3, [r7, #4]
   1b88e:	b2da      	uxtb	r2, r3
   1b890:	69bb      	ldr	r3, [r7, #24]
   1b892:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   1b894:	69bb      	ldr	r3, [r7, #24]
   1b896:	2226      	movs	r2, #38	; 0x26
   1b898:	18ba      	adds	r2, r7, r2
   1b89a:	8812      	ldrh	r2, [r2, #0]
   1b89c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b89e:	4b11      	ldr	r3, [pc, #68]	; (1b8e4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   1b8a0:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b8a2:	4b08      	ldr	r3, [pc, #32]	; (1b8c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b8a4:	681b      	ldr	r3, [r3, #0]
   1b8a6:	1e5a      	subs	r2, r3, #1
   1b8a8:	4b06      	ldr	r3, [pc, #24]	; (1b8c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b8aa:	601a      	str	r2, [r3, #0]
   1b8ac:	6a3b      	ldr	r3, [r7, #32]
   1b8ae:	60fb      	str	r3, [r7, #12]
   1b8b0:	68fb      	ldr	r3, [r7, #12]
   1b8b2:	f383 8810 	msr	PRIMASK, r3
}
   1b8b6:	46bd      	mov	sp, r7
   1b8b8:	b00a      	add	sp, #40	; 0x28
   1b8ba:	bd80      	pop	{r7, pc}
   1b8bc:	0003a9c8 	.word	0x0003a9c8
   1b8c0:	0001c389 	.word	0x0001c389
   1b8c4:	20000c78 	.word	0x20000c78
   1b8c8:	0003aa20 	.word	0x0003aa20
   1b8cc:	20000d20 	.word	0x20000d20
   1b8d0:	20000c84 	.word	0x20000c84
   1b8d4:	0001c59d 	.word	0x0001c59d
   1b8d8:	0000ffff 	.word	0x0000ffff
   1b8dc:	0001b761 	.word	0x0001b761
   1b8e0:	0001bf41 	.word	0x0001bf41
   1b8e4:	0001c545 	.word	0x0001c545

0001b8e8 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   1b8e8:	b590      	push	{r4, r7, lr}
   1b8ea:	b089      	sub	sp, #36	; 0x24
   1b8ec:	af00      	add	r7, sp, #0
   1b8ee:	0002      	movs	r2, r0
   1b8f0:	1dfb      	adds	r3, r7, #7
   1b8f2:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1b8f4:	1dfb      	adds	r3, r7, #7
   1b8f6:	781b      	ldrb	r3, [r3, #0]
   1b8f8:	2b0f      	cmp	r3, #15
   1b8fa:	d904      	bls.n	1b906 <prvTraceStoreTaskswitch+0x1e>
   1b8fc:	4b34      	ldr	r3, [pc, #208]	; (1b9d0 <prvTraceStoreTaskswitch+0xe8>)
   1b8fe:	0018      	movs	r0, r3
   1b900:	4b34      	ldr	r3, [pc, #208]	; (1b9d4 <prvTraceStoreTaskswitch+0xec>)
   1b902:	4798      	blx	r3
   1b904:	e061      	b.n	1b9ca <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b906:	f3ef 8310 	mrs	r3, PRIMASK
   1b90a:	60fb      	str	r3, [r7, #12]
  return(result);
   1b90c:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   1b90e:	61fb      	str	r3, [r7, #28]
   1b910:	2301      	movs	r3, #1
   1b912:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b914:	693b      	ldr	r3, [r7, #16]
   1b916:	f383 8810 	msr	PRIMASK, r3
   1b91a:	4b2f      	ldr	r3, [pc, #188]	; (1b9d8 <prvTraceStoreTaskswitch+0xf0>)
   1b91c:	681b      	ldr	r3, [r3, #0]
   1b91e:	1c5a      	adds	r2, r3, #1
   1b920:	4b2d      	ldr	r3, [pc, #180]	; (1b9d8 <prvTraceStoreTaskswitch+0xf0>)
   1b922:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   1b924:	4b2d      	ldr	r3, [pc, #180]	; (1b9dc <prvTraceStoreTaskswitch+0xf4>)
   1b926:	781b      	ldrb	r3, [r3, #0]
   1b928:	1dfa      	adds	r2, r7, #7
   1b92a:	7812      	ldrb	r2, [r2, #0]
   1b92c:	429a      	cmp	r2, r3
   1b92e:	d042      	beq.n	1b9b6 <prvTraceStoreTaskswitch+0xce>
   1b930:	4b2b      	ldr	r3, [pc, #172]	; (1b9e0 <prvTraceStoreTaskswitch+0xf8>)
   1b932:	681b      	ldr	r3, [r3, #0]
   1b934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b936:	2b00      	cmp	r3, #0
   1b938:	d03d      	beq.n	1b9b6 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1b93a:	4b2a      	ldr	r3, [pc, #168]	; (1b9e4 <prvTraceStoreTaskswitch+0xfc>)
   1b93c:	2200      	movs	r2, #0
   1b93e:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1b940:	231a      	movs	r3, #26
   1b942:	18fc      	adds	r4, r7, r3
   1b944:	4b28      	ldr	r3, [pc, #160]	; (1b9e8 <prvTraceStoreTaskswitch+0x100>)
   1b946:	0018      	movs	r0, r3
   1b948:	4b28      	ldr	r3, [pc, #160]	; (1b9ec <prvTraceStoreTaskswitch+0x104>)
   1b94a:	4798      	blx	r3
   1b94c:	0003      	movs	r3, r0
   1b94e:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   1b950:	4b22      	ldr	r3, [pc, #136]	; (1b9dc <prvTraceStoreTaskswitch+0xf4>)
   1b952:	1dfa      	adds	r2, r7, #7
   1b954:	7812      	ldrb	r2, [r2, #0]
   1b956:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   1b958:	2319      	movs	r3, #25
   1b95a:	18fb      	adds	r3, r7, r3
   1b95c:	4a1f      	ldr	r2, [pc, #124]	; (1b9dc <prvTraceStoreTaskswitch+0xf4>)
   1b95e:	7812      	ldrb	r2, [r2, #0]
   1b960:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   1b962:	4b23      	ldr	r3, [pc, #140]	; (1b9f0 <prvTraceStoreTaskswitch+0x108>)
   1b964:	4798      	blx	r3
   1b966:	0003      	movs	r3, r0
   1b968:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   1b96a:	697b      	ldr	r3, [r7, #20]
   1b96c:	2b00      	cmp	r3, #0
   1b96e:	d022      	beq.n	1b9b6 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   1b970:	4b1a      	ldr	r3, [pc, #104]	; (1b9dc <prvTraceStoreTaskswitch+0xf4>)
   1b972:	781b      	ldrb	r3, [r3, #0]
   1b974:	0019      	movs	r1, r3
   1b976:	2003      	movs	r0, #3
   1b978:	4b1e      	ldr	r3, [pc, #120]	; (1b9f4 <prvTraceStoreTaskswitch+0x10c>)
   1b97a:	4798      	blx	r3
   1b97c:	0003      	movs	r3, r0
   1b97e:	2b01      	cmp	r3, #1
   1b980:	d103      	bne.n	1b98a <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   1b982:	697b      	ldr	r3, [r7, #20]
   1b984:	2207      	movs	r2, #7
   1b986:	701a      	strb	r2, [r3, #0]
   1b988:	e002      	b.n	1b990 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   1b98a:	697b      	ldr	r3, [r7, #20]
   1b98c:	2206      	movs	r2, #6
   1b98e:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   1b990:	697b      	ldr	r3, [r7, #20]
   1b992:	221a      	movs	r2, #26
   1b994:	18ba      	adds	r2, r7, r2
   1b996:	8812      	ldrh	r2, [r2, #0]
   1b998:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   1b99a:	697b      	ldr	r3, [r7, #20]
   1b99c:	2219      	movs	r2, #25
   1b99e:	18ba      	adds	r2, r7, r2
   1b9a0:	7812      	ldrb	r2, [r2, #0]
   1b9a2:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   1b9a4:	4b0d      	ldr	r3, [pc, #52]	; (1b9dc <prvTraceStoreTaskswitch+0xf4>)
   1b9a6:	781b      	ldrb	r3, [r3, #0]
   1b9a8:	2201      	movs	r2, #1
   1b9aa:	0019      	movs	r1, r3
   1b9ac:	2003      	movs	r0, #3
   1b9ae:	4b12      	ldr	r3, [pc, #72]	; (1b9f8 <prvTraceStoreTaskswitch+0x110>)
   1b9b0:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   1b9b2:	4b12      	ldr	r3, [pc, #72]	; (1b9fc <prvTraceStoreTaskswitch+0x114>)
   1b9b4:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   1b9b6:	4b08      	ldr	r3, [pc, #32]	; (1b9d8 <prvTraceStoreTaskswitch+0xf0>)
   1b9b8:	681b      	ldr	r3, [r3, #0]
   1b9ba:	1e5a      	subs	r2, r3, #1
   1b9bc:	4b06      	ldr	r3, [pc, #24]	; (1b9d8 <prvTraceStoreTaskswitch+0xf0>)
   1b9be:	601a      	str	r2, [r3, #0]
   1b9c0:	69fb      	ldr	r3, [r7, #28]
   1b9c2:	60bb      	str	r3, [r7, #8]
   1b9c4:	68bb      	ldr	r3, [r7, #8]
   1b9c6:	f383 8810 	msr	PRIMASK, r3
}
   1b9ca:	46bd      	mov	sp, r7
   1b9cc:	b009      	add	sp, #36	; 0x24
   1b9ce:	bd90      	pop	{r4, r7, pc}
   1b9d0:	0003aa58 	.word	0x0003aa58
   1b9d4:	0001c389 	.word	0x0001c389
   1b9d8:	20000c78 	.word	0x20000c78
   1b9dc:	20000c84 	.word	0x20000c84
   1b9e0:	20000d20 	.word	0x20000d20
   1b9e4:	20000c64 	.word	0x20000c64
   1b9e8:	0000ffff 	.word	0x0000ffff
   1b9ec:	0001c59d 	.word	0x0001c59d
   1b9f0:	0001bf41 	.word	0x0001bf41
   1b9f4:	0001bbe5 	.word	0x0001bbe5
   1b9f8:	0001bb41 	.word	0x0001bb41
   1b9fc:	0001c545 	.word	0x0001c545

0001ba00 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1ba00:	b590      	push	{r4, r7, lr}
   1ba02:	b083      	sub	sp, #12
   1ba04:	af00      	add	r7, sp, #0
   1ba06:	0004      	movs	r4, r0
   1ba08:	0008      	movs	r0, r1
   1ba0a:	0011      	movs	r1, r2
   1ba0c:	1dfb      	adds	r3, r7, #7
   1ba0e:	1c22      	adds	r2, r4, #0
   1ba10:	701a      	strb	r2, [r3, #0]
   1ba12:	1dbb      	adds	r3, r7, #6
   1ba14:	1c02      	adds	r2, r0, #0
   1ba16:	701a      	strb	r2, [r3, #0]
   1ba18:	1d7b      	adds	r3, r7, #5
   1ba1a:	1c0a      	adds	r2, r1, #0
   1ba1c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1ba1e:	1dfb      	adds	r3, r7, #7
   1ba20:	781b      	ldrb	r3, [r3, #0]
   1ba22:	2b08      	cmp	r3, #8
   1ba24:	d904      	bls.n	1ba30 <prvTraceSetPriorityProperty+0x30>
   1ba26:	4b1a      	ldr	r3, [pc, #104]	; (1ba90 <prvTraceSetPriorityProperty+0x90>)
   1ba28:	0018      	movs	r0, r3
   1ba2a:	4b1a      	ldr	r3, [pc, #104]	; (1ba94 <prvTraceSetPriorityProperty+0x94>)
   1ba2c:	4798      	blx	r3
   1ba2e:	e02c      	b.n	1ba8a <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1ba30:	4b19      	ldr	r3, [pc, #100]	; (1ba98 <prvTraceSetPriorityProperty+0x98>)
   1ba32:	681a      	ldr	r2, [r3, #0]
   1ba34:	1dfb      	adds	r3, r7, #7
   1ba36:	781b      	ldrb	r3, [r3, #0]
   1ba38:	2164      	movs	r1, #100	; 0x64
   1ba3a:	18d3      	adds	r3, r2, r3
   1ba3c:	185b      	adds	r3, r3, r1
   1ba3e:	781b      	ldrb	r3, [r3, #0]
   1ba40:	1dba      	adds	r2, r7, #6
   1ba42:	7812      	ldrb	r2, [r2, #0]
   1ba44:	429a      	cmp	r2, r3
   1ba46:	d904      	bls.n	1ba52 <prvTraceSetPriorityProperty+0x52>
   1ba48:	4b14      	ldr	r3, [pc, #80]	; (1ba9c <prvTraceSetPriorityProperty+0x9c>)
   1ba4a:	0018      	movs	r0, r3
   1ba4c:	4b11      	ldr	r3, [pc, #68]	; (1ba94 <prvTraceSetPriorityProperty+0x94>)
   1ba4e:	4798      	blx	r3
   1ba50:	e01b      	b.n	1ba8a <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   1ba52:	4b11      	ldr	r3, [pc, #68]	; (1ba98 <prvTraceSetPriorityProperty+0x98>)
   1ba54:	681c      	ldr	r4, [r3, #0]
   1ba56:	1dfb      	adds	r3, r7, #7
   1ba58:	781a      	ldrb	r2, [r3, #0]
   1ba5a:	1dbb      	adds	r3, r7, #6
   1ba5c:	781b      	ldrb	r3, [r3, #0]
   1ba5e:	0011      	movs	r1, r2
   1ba60:	0018      	movs	r0, r3
   1ba62:	4b0f      	ldr	r3, [pc, #60]	; (1baa0 <prvTraceSetPriorityProperty+0xa0>)
   1ba64:	4798      	blx	r3
   1ba66:	0003      	movs	r3, r0
   1ba68:	0018      	movs	r0, r3
   1ba6a:	4b0b      	ldr	r3, [pc, #44]	; (1ba98 <prvTraceSetPriorityProperty+0x98>)
   1ba6c:	681a      	ldr	r2, [r3, #0]
   1ba6e:	1dfb      	adds	r3, r7, #7
   1ba70:	781b      	ldrb	r3, [r3, #0]
   1ba72:	2170      	movs	r1, #112	; 0x70
   1ba74:	18d3      	adds	r3, r2, r3
   1ba76:	185b      	adds	r3, r3, r1
   1ba78:	781b      	ldrb	r3, [r3, #0]
   1ba7a:	18c3      	adds	r3, r0, r3
   1ba7c:	3301      	adds	r3, #1
   1ba7e:	229c      	movs	r2, #156	; 0x9c
   1ba80:	18e3      	adds	r3, r4, r3
   1ba82:	189b      	adds	r3, r3, r2
   1ba84:	1d7a      	adds	r2, r7, #5
   1ba86:	7812      	ldrb	r2, [r2, #0]
   1ba88:	701a      	strb	r2, [r3, #0]
}
   1ba8a:	46bd      	mov	sp, r7
   1ba8c:	b003      	add	sp, #12
   1ba8e:	bd90      	pop	{r4, r7, pc}
   1ba90:	0003abec 	.word	0x0003abec
   1ba94:	0001c389 	.word	0x0001c389
   1ba98:	20000d20 	.word	0x20000d20
   1ba9c:	0003ac38 	.word	0x0003ac38
   1baa0:	0001bf95 	.word	0x0001bf95

0001baa4 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   1baa4:	b590      	push	{r4, r7, lr}
   1baa6:	b083      	sub	sp, #12
   1baa8:	af00      	add	r7, sp, #0
   1baaa:	0002      	movs	r2, r0
   1baac:	1dfb      	adds	r3, r7, #7
   1baae:	701a      	strb	r2, [r3, #0]
   1bab0:	1dbb      	adds	r3, r7, #6
   1bab2:	1c0a      	adds	r2, r1, #0
   1bab4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1bab6:	1dfb      	adds	r3, r7, #7
   1bab8:	781b      	ldrb	r3, [r3, #0]
   1baba:	2b08      	cmp	r3, #8
   1babc:	d905      	bls.n	1baca <prvTraceGetPriorityProperty+0x26>
   1babe:	4b1b      	ldr	r3, [pc, #108]	; (1bb2c <prvTraceGetPriorityProperty+0x88>)
   1bac0:	0018      	movs	r0, r3
   1bac2:	4b1b      	ldr	r3, [pc, #108]	; (1bb30 <prvTraceGetPriorityProperty+0x8c>)
   1bac4:	4798      	blx	r3
   1bac6:	2300      	movs	r3, #0
   1bac8:	e02b      	b.n	1bb22 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1baca:	4b1a      	ldr	r3, [pc, #104]	; (1bb34 <prvTraceGetPriorityProperty+0x90>)
   1bacc:	681a      	ldr	r2, [r3, #0]
   1bace:	1dfb      	adds	r3, r7, #7
   1bad0:	781b      	ldrb	r3, [r3, #0]
   1bad2:	2164      	movs	r1, #100	; 0x64
   1bad4:	18d3      	adds	r3, r2, r3
   1bad6:	185b      	adds	r3, r3, r1
   1bad8:	781b      	ldrb	r3, [r3, #0]
   1bada:	1dba      	adds	r2, r7, #6
   1badc:	7812      	ldrb	r2, [r2, #0]
   1bade:	429a      	cmp	r2, r3
   1bae0:	d905      	bls.n	1baee <prvTraceGetPriorityProperty+0x4a>
   1bae2:	4b15      	ldr	r3, [pc, #84]	; (1bb38 <prvTraceGetPriorityProperty+0x94>)
   1bae4:	0018      	movs	r0, r3
   1bae6:	4b12      	ldr	r3, [pc, #72]	; (1bb30 <prvTraceGetPriorityProperty+0x8c>)
   1bae8:	4798      	blx	r3
   1baea:	2300      	movs	r3, #0
   1baec:	e019      	b.n	1bb22 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   1baee:	4b11      	ldr	r3, [pc, #68]	; (1bb34 <prvTraceGetPriorityProperty+0x90>)
   1baf0:	681c      	ldr	r4, [r3, #0]
   1baf2:	1dfb      	adds	r3, r7, #7
   1baf4:	781a      	ldrb	r2, [r3, #0]
   1baf6:	1dbb      	adds	r3, r7, #6
   1baf8:	781b      	ldrb	r3, [r3, #0]
   1bafa:	0011      	movs	r1, r2
   1bafc:	0018      	movs	r0, r3
   1bafe:	4b0f      	ldr	r3, [pc, #60]	; (1bb3c <prvTraceGetPriorityProperty+0x98>)
   1bb00:	4798      	blx	r3
   1bb02:	0003      	movs	r3, r0
   1bb04:	0018      	movs	r0, r3
   1bb06:	4b0b      	ldr	r3, [pc, #44]	; (1bb34 <prvTraceGetPriorityProperty+0x90>)
   1bb08:	681a      	ldr	r2, [r3, #0]
   1bb0a:	1dfb      	adds	r3, r7, #7
   1bb0c:	781b      	ldrb	r3, [r3, #0]
   1bb0e:	2170      	movs	r1, #112	; 0x70
   1bb10:	18d3      	adds	r3, r2, r3
   1bb12:	185b      	adds	r3, r3, r1
   1bb14:	781b      	ldrb	r3, [r3, #0]
   1bb16:	18c3      	adds	r3, r0, r3
   1bb18:	3301      	adds	r3, #1
   1bb1a:	229c      	movs	r2, #156	; 0x9c
   1bb1c:	18e3      	adds	r3, r4, r3
   1bb1e:	189b      	adds	r3, r3, r2
   1bb20:	781b      	ldrb	r3, [r3, #0]
}
   1bb22:	0018      	movs	r0, r3
   1bb24:	46bd      	mov	sp, r7
   1bb26:	b003      	add	sp, #12
   1bb28:	bd90      	pop	{r4, r7, pc}
   1bb2a:	46c0      	nop			; (mov r8, r8)
   1bb2c:	0003ac78 	.word	0x0003ac78
   1bb30:	0001c389 	.word	0x0001c389
   1bb34:	20000d20 	.word	0x20000d20
   1bb38:	0003acc4 	.word	0x0003acc4
   1bb3c:	0001bf95 	.word	0x0001bf95

0001bb40 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1bb40:	b590      	push	{r4, r7, lr}
   1bb42:	b083      	sub	sp, #12
   1bb44:	af00      	add	r7, sp, #0
   1bb46:	0004      	movs	r4, r0
   1bb48:	0008      	movs	r0, r1
   1bb4a:	0011      	movs	r1, r2
   1bb4c:	1dfb      	adds	r3, r7, #7
   1bb4e:	1c22      	adds	r2, r4, #0
   1bb50:	701a      	strb	r2, [r3, #0]
   1bb52:	1dbb      	adds	r3, r7, #6
   1bb54:	1c02      	adds	r2, r0, #0
   1bb56:	701a      	strb	r2, [r3, #0]
   1bb58:	1d7b      	adds	r3, r7, #5
   1bb5a:	1c0a      	adds	r2, r1, #0
   1bb5c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1bb5e:	1dfb      	adds	r3, r7, #7
   1bb60:	781b      	ldrb	r3, [r3, #0]
   1bb62:	2b08      	cmp	r3, #8
   1bb64:	d904      	bls.n	1bb70 <prvTraceSetObjectState+0x30>
   1bb66:	4b1a      	ldr	r3, [pc, #104]	; (1bbd0 <prvTraceSetObjectState+0x90>)
   1bb68:	0018      	movs	r0, r3
   1bb6a:	4b1a      	ldr	r3, [pc, #104]	; (1bbd4 <prvTraceSetObjectState+0x94>)
   1bb6c:	4798      	blx	r3
   1bb6e:	e02b      	b.n	1bbc8 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1bb70:	4b19      	ldr	r3, [pc, #100]	; (1bbd8 <prvTraceSetObjectState+0x98>)
   1bb72:	681a      	ldr	r2, [r3, #0]
   1bb74:	1dfb      	adds	r3, r7, #7
   1bb76:	781b      	ldrb	r3, [r3, #0]
   1bb78:	2164      	movs	r1, #100	; 0x64
   1bb7a:	18d3      	adds	r3, r2, r3
   1bb7c:	185b      	adds	r3, r3, r1
   1bb7e:	781b      	ldrb	r3, [r3, #0]
   1bb80:	1dba      	adds	r2, r7, #6
   1bb82:	7812      	ldrb	r2, [r2, #0]
   1bb84:	429a      	cmp	r2, r3
   1bb86:	d904      	bls.n	1bb92 <prvTraceSetObjectState+0x52>
   1bb88:	4b14      	ldr	r3, [pc, #80]	; (1bbdc <prvTraceSetObjectState+0x9c>)
   1bb8a:	0018      	movs	r0, r3
   1bb8c:	4b11      	ldr	r3, [pc, #68]	; (1bbd4 <prvTraceSetObjectState+0x94>)
   1bb8e:	4798      	blx	r3
   1bb90:	e01a      	b.n	1bbc8 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1bb92:	4b11      	ldr	r3, [pc, #68]	; (1bbd8 <prvTraceSetObjectState+0x98>)
   1bb94:	681c      	ldr	r4, [r3, #0]
   1bb96:	1dfb      	adds	r3, r7, #7
   1bb98:	781a      	ldrb	r2, [r3, #0]
   1bb9a:	1dbb      	adds	r3, r7, #6
   1bb9c:	781b      	ldrb	r3, [r3, #0]
   1bb9e:	0011      	movs	r1, r2
   1bba0:	0018      	movs	r0, r3
   1bba2:	4b0f      	ldr	r3, [pc, #60]	; (1bbe0 <prvTraceSetObjectState+0xa0>)
   1bba4:	4798      	blx	r3
   1bba6:	0003      	movs	r3, r0
   1bba8:	0018      	movs	r0, r3
   1bbaa:	4b0b      	ldr	r3, [pc, #44]	; (1bbd8 <prvTraceSetObjectState+0x98>)
   1bbac:	681a      	ldr	r2, [r3, #0]
   1bbae:	1dfb      	adds	r3, r7, #7
   1bbb0:	781b      	ldrb	r3, [r3, #0]
   1bbb2:	2170      	movs	r1, #112	; 0x70
   1bbb4:	18d3      	adds	r3, r2, r3
   1bbb6:	185b      	adds	r3, r3, r1
   1bbb8:	781b      	ldrb	r3, [r3, #0]
   1bbba:	18c3      	adds	r3, r0, r3
   1bbbc:	229c      	movs	r2, #156	; 0x9c
   1bbbe:	18e3      	adds	r3, r4, r3
   1bbc0:	189b      	adds	r3, r3, r2
   1bbc2:	1d7a      	adds	r2, r7, #5
   1bbc4:	7812      	ldrb	r2, [r2, #0]
   1bbc6:	701a      	strb	r2, [r3, #0]
}
   1bbc8:	46bd      	mov	sp, r7
   1bbca:	b003      	add	sp, #12
   1bbcc:	bd90      	pop	{r4, r7, pc}
   1bbce:	46c0      	nop			; (mov r8, r8)
   1bbd0:	0003ad04 	.word	0x0003ad04
   1bbd4:	0001c389 	.word	0x0001c389
   1bbd8:	20000d20 	.word	0x20000d20
   1bbdc:	0003ad48 	.word	0x0003ad48
   1bbe0:	0001bf95 	.word	0x0001bf95

0001bbe4 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   1bbe4:	b590      	push	{r4, r7, lr}
   1bbe6:	b083      	sub	sp, #12
   1bbe8:	af00      	add	r7, sp, #0
   1bbea:	0002      	movs	r2, r0
   1bbec:	1dfb      	adds	r3, r7, #7
   1bbee:	701a      	strb	r2, [r3, #0]
   1bbf0:	1dbb      	adds	r3, r7, #6
   1bbf2:	1c0a      	adds	r2, r1, #0
   1bbf4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1bbf6:	1dfb      	adds	r3, r7, #7
   1bbf8:	781b      	ldrb	r3, [r3, #0]
   1bbfa:	2b08      	cmp	r3, #8
   1bbfc:	d905      	bls.n	1bc0a <prvTraceGetObjectState+0x26>
   1bbfe:	4b1a      	ldr	r3, [pc, #104]	; (1bc68 <prvTraceGetObjectState+0x84>)
   1bc00:	0018      	movs	r0, r3
   1bc02:	4b1a      	ldr	r3, [pc, #104]	; (1bc6c <prvTraceGetObjectState+0x88>)
   1bc04:	4798      	blx	r3
   1bc06:	2300      	movs	r3, #0
   1bc08:	e02a      	b.n	1bc60 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1bc0a:	4b19      	ldr	r3, [pc, #100]	; (1bc70 <prvTraceGetObjectState+0x8c>)
   1bc0c:	681a      	ldr	r2, [r3, #0]
   1bc0e:	1dfb      	adds	r3, r7, #7
   1bc10:	781b      	ldrb	r3, [r3, #0]
   1bc12:	2164      	movs	r1, #100	; 0x64
   1bc14:	18d3      	adds	r3, r2, r3
   1bc16:	185b      	adds	r3, r3, r1
   1bc18:	781b      	ldrb	r3, [r3, #0]
   1bc1a:	1dba      	adds	r2, r7, #6
   1bc1c:	7812      	ldrb	r2, [r2, #0]
   1bc1e:	429a      	cmp	r2, r3
   1bc20:	d905      	bls.n	1bc2e <prvTraceGetObjectState+0x4a>
   1bc22:	4b14      	ldr	r3, [pc, #80]	; (1bc74 <prvTraceGetObjectState+0x90>)
   1bc24:	0018      	movs	r0, r3
   1bc26:	4b11      	ldr	r3, [pc, #68]	; (1bc6c <prvTraceGetObjectState+0x88>)
   1bc28:	4798      	blx	r3
   1bc2a:	2300      	movs	r3, #0
   1bc2c:	e018      	b.n	1bc60 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1bc2e:	4b10      	ldr	r3, [pc, #64]	; (1bc70 <prvTraceGetObjectState+0x8c>)
   1bc30:	681c      	ldr	r4, [r3, #0]
   1bc32:	1dfb      	adds	r3, r7, #7
   1bc34:	781a      	ldrb	r2, [r3, #0]
   1bc36:	1dbb      	adds	r3, r7, #6
   1bc38:	781b      	ldrb	r3, [r3, #0]
   1bc3a:	0011      	movs	r1, r2
   1bc3c:	0018      	movs	r0, r3
   1bc3e:	4b0e      	ldr	r3, [pc, #56]	; (1bc78 <prvTraceGetObjectState+0x94>)
   1bc40:	4798      	blx	r3
   1bc42:	0003      	movs	r3, r0
   1bc44:	0018      	movs	r0, r3
   1bc46:	4b0a      	ldr	r3, [pc, #40]	; (1bc70 <prvTraceGetObjectState+0x8c>)
   1bc48:	681a      	ldr	r2, [r3, #0]
   1bc4a:	1dfb      	adds	r3, r7, #7
   1bc4c:	781b      	ldrb	r3, [r3, #0]
   1bc4e:	2170      	movs	r1, #112	; 0x70
   1bc50:	18d3      	adds	r3, r2, r3
   1bc52:	185b      	adds	r3, r3, r1
   1bc54:	781b      	ldrb	r3, [r3, #0]
   1bc56:	18c3      	adds	r3, r0, r3
   1bc58:	229c      	movs	r2, #156	; 0x9c
   1bc5a:	18e3      	adds	r3, r4, r3
   1bc5c:	189b      	adds	r3, r3, r2
   1bc5e:	781b      	ldrb	r3, [r3, #0]
}
   1bc60:	0018      	movs	r0, r3
   1bc62:	46bd      	mov	sp, r7
   1bc64:	b003      	add	sp, #12
   1bc66:	bd90      	pop	{r4, r7, pc}
   1bc68:	0003ad84 	.word	0x0003ad84
   1bc6c:	0001c389 	.word	0x0001c389
   1bc70:	20000d20 	.word	0x20000d20
   1bc74:	0003adc8 	.word	0x0003adc8
   1bc78:	0001bf95 	.word	0x0001bf95

0001bc7c <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   1bc7c:	b590      	push	{r4, r7, lr}
   1bc7e:	b083      	sub	sp, #12
   1bc80:	af00      	add	r7, sp, #0
   1bc82:	0002      	movs	r2, r0
   1bc84:	1dfb      	adds	r3, r7, #7
   1bc86:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1bc88:	4b11      	ldr	r3, [pc, #68]	; (1bcd0 <prvTraceSetTaskInstanceFinished+0x54>)
   1bc8a:	681b      	ldr	r3, [r3, #0]
   1bc8c:	2267      	movs	r2, #103	; 0x67
   1bc8e:	5c9b      	ldrb	r3, [r3, r2]
   1bc90:	1dfa      	adds	r2, r7, #7
   1bc92:	7812      	ldrb	r2, [r2, #0]
   1bc94:	429a      	cmp	r2, r3
   1bc96:	d904      	bls.n	1bca2 <prvTraceSetTaskInstanceFinished+0x26>
   1bc98:	4b0e      	ldr	r3, [pc, #56]	; (1bcd4 <prvTraceSetTaskInstanceFinished+0x58>)
   1bc9a:	0018      	movs	r0, r3
   1bc9c:	4b0e      	ldr	r3, [pc, #56]	; (1bcd8 <prvTraceSetTaskInstanceFinished+0x5c>)
   1bc9e:	4798      	blx	r3
   1bca0:	e013      	b.n	1bcca <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1bca2:	4b0b      	ldr	r3, [pc, #44]	; (1bcd0 <prvTraceSetTaskInstanceFinished+0x54>)
   1bca4:	681c      	ldr	r4, [r3, #0]
   1bca6:	1dfb      	adds	r3, r7, #7
   1bca8:	781b      	ldrb	r3, [r3, #0]
   1bcaa:	2103      	movs	r1, #3
   1bcac:	0018      	movs	r0, r3
   1bcae:	4b0b      	ldr	r3, [pc, #44]	; (1bcdc <prvTraceSetTaskInstanceFinished+0x60>)
   1bcb0:	4798      	blx	r3
   1bcb2:	0003      	movs	r3, r0
   1bcb4:	0019      	movs	r1, r3
   1bcb6:	4b06      	ldr	r3, [pc, #24]	; (1bcd0 <prvTraceSetTaskInstanceFinished+0x54>)
   1bcb8:	681b      	ldr	r3, [r3, #0]
   1bcba:	2273      	movs	r2, #115	; 0x73
   1bcbc:	5c9b      	ldrb	r3, [r3, r2]
   1bcbe:	18cb      	adds	r3, r1, r3
   1bcc0:	229c      	movs	r2, #156	; 0x9c
   1bcc2:	18e3      	adds	r3, r4, r3
   1bcc4:	189b      	adds	r3, r3, r2
   1bcc6:	2200      	movs	r2, #0
   1bcc8:	701a      	strb	r2, [r3, #0]
#endif
}
   1bcca:	46bd      	mov	sp, r7
   1bccc:	b003      	add	sp, #12
   1bcce:	bd90      	pop	{r4, r7, pc}
   1bcd0:	20000d20 	.word	0x20000d20
   1bcd4:	0003ae04 	.word	0x0003ae04
   1bcd8:	0001c389 	.word	0x0001c389
   1bcdc:	0001bf95 	.word	0x0001bf95

0001bce0 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   1bce0:	b580      	push	{r7, lr}
   1bce2:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   1bce4:	4b75      	ldr	r3, [pc, #468]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bce6:	681b      	ldr	r3, [r3, #0]
   1bce8:	2b00      	cmp	r3, #0
   1bcea:	d103      	bne.n	1bcf4 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   1bcec:	4b73      	ldr	r3, [pc, #460]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bcee:	4a74      	ldr	r2, [pc, #464]	; (1bec0 <prvTraceInitTraceData+0x1e0>)
   1bcf0:	601a      	str	r2, [r3, #0]
   1bcf2:	e006      	b.n	1bd02 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   1bcf4:	4b71      	ldr	r3, [pc, #452]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bcf6:	681b      	ldr	r3, [r3, #0]
   1bcf8:	781b      	ldrb	r3, [r3, #0]
   1bcfa:	b2db      	uxtb	r3, r3
   1bcfc:	2b01      	cmp	r3, #1
   1bcfe:	d100      	bne.n	1bd02 <prvTraceInitTraceData+0x22>
   1bd00:	e0d8      	b.n	1beb4 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   1bd02:	4b70      	ldr	r3, [pc, #448]	; (1bec4 <prvTraceInitTraceData+0x1e4>)
   1bd04:	681a      	ldr	r2, [r3, #0]
   1bd06:	4b70      	ldr	r3, [pc, #448]	; (1bec8 <prvTraceInitTraceData+0x1e8>)
   1bd08:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1bd0a:	4b6c      	ldr	r3, [pc, #432]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd0c:	6818      	ldr	r0, [r3, #0]
   1bd0e:	23bd      	movs	r3, #189	; 0xbd
   1bd10:	011b      	lsls	r3, r3, #4
   1bd12:	001a      	movs	r2, r3
   1bd14:	2100      	movs	r1, #0
   1bd16:	4b6d      	ldr	r3, [pc, #436]	; (1becc <prvTraceInitTraceData+0x1ec>)
   1bd18:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1bd1a:	4b68      	ldr	r3, [pc, #416]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd1c:	681b      	ldr	r3, [r3, #0]
   1bd1e:	4a6c      	ldr	r2, [pc, #432]	; (1bed0 <prvTraceInitTraceData+0x1f0>)
   1bd20:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   1bd22:	4b66      	ldr	r3, [pc, #408]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd24:	681b      	ldr	r3, [r3, #0]
   1bd26:	2205      	movs	r2, #5
   1bd28:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1bd2a:	4b64      	ldr	r3, [pc, #400]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd2c:	681b      	ldr	r3, [r3, #0]
   1bd2e:	2200      	movs	r2, #0
   1bd30:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1bd32:	4b62      	ldr	r3, [pc, #392]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd34:	681b      	ldr	r3, [r3, #0]
   1bd36:	22bd      	movs	r2, #189	; 0xbd
   1bd38:	0112      	lsls	r2, r2, #4
   1bd3a:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1bd3c:	4b5f      	ldr	r3, [pc, #380]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd3e:	681b      	ldr	r3, [r3, #0]
   1bd40:	2296      	movs	r2, #150	; 0x96
   1bd42:	0052      	lsls	r2, r2, #1
   1bd44:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1bd46:	4b5d      	ldr	r3, [pc, #372]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd48:	681b      	ldr	r3, [r3, #0]
   1bd4a:	4a62      	ldr	r2, [pc, #392]	; (1bed4 <prvTraceInitTraceData+0x1f4>)
   1bd4c:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1bd4e:	4b5b      	ldr	r3, [pc, #364]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd50:	681b      	ldr	r3, [r3, #0]
   1bd52:	2200      	movs	r2, #0
   1bd54:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1bd56:	4b59      	ldr	r3, [pc, #356]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd58:	681b      	ldr	r3, [r3, #0]
   1bd5a:	2200      	movs	r2, #0
   1bd5c:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1bd5e:	4b5e      	ldr	r3, [pc, #376]	; (1bed8 <prvTraceInitTraceData+0x1f8>)
   1bd60:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1bd62:	4b56      	ldr	r3, [pc, #344]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd64:	681b      	ldr	r3, [r3, #0]
   1bd66:	4a5d      	ldr	r2, [pc, #372]	; (1bedc <prvTraceInitTraceData+0x1fc>)
   1bd68:	495d      	ldr	r1, [pc, #372]	; (1bee0 <prvTraceInitTraceData+0x200>)
   1bd6a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   1bd6c:	4b53      	ldr	r3, [pc, #332]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd6e:	681a      	ldr	r2, [r3, #0]
   1bd70:	23ac      	movs	r3, #172	; 0xac
   1bd72:	00db      	lsls	r3, r3, #3
   1bd74:	21c8      	movs	r1, #200	; 0xc8
   1bd76:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1bd78:	4b50      	ldr	r3, [pc, #320]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd7a:	681b      	ldr	r3, [r3, #0]
   1bd7c:	4a59      	ldr	r2, [pc, #356]	; (1bee4 <prvTraceInitTraceData+0x204>)
   1bd7e:	2101      	movs	r1, #1
   1bd80:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1bd82:	4b4e      	ldr	r3, [pc, #312]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd84:	681a      	ldr	r2, [r3, #0]
   1bd86:	23d7      	movs	r3, #215	; 0xd7
   1bd88:	00db      	lsls	r3, r3, #3
   1bd8a:	4957      	ldr	r1, [pc, #348]	; (1bee8 <prvTraceInitTraceData+0x208>)
   1bd8c:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1bd8e:	4b4b      	ldr	r3, [pc, #300]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bd90:	681b      	ldr	r3, [r3, #0]
   1bd92:	4a56      	ldr	r2, [pc, #344]	; (1beec <prvTraceInitTraceData+0x20c>)
   1bd94:	4694      	mov	ip, r2
   1bd96:	4463      	add	r3, ip
   1bd98:	4955      	ldr	r1, [pc, #340]	; (1bef0 <prvTraceInitTraceData+0x210>)
   1bd9a:	2250      	movs	r2, #80	; 0x50
   1bd9c:	0018      	movs	r0, r3
   1bd9e:	4b55      	ldr	r3, [pc, #340]	; (1bef4 <prvTraceInitTraceData+0x214>)
   1bda0:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1bda2:	4b46      	ldr	r3, [pc, #280]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bda4:	681b      	ldr	r3, [r3, #0]
   1bda6:	4a54      	ldr	r2, [pc, #336]	; (1bef8 <prvTraceInitTraceData+0x218>)
   1bda8:	4954      	ldr	r1, [pc, #336]	; (1befc <prvTraceInitTraceData+0x21c>)
   1bdaa:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1bdac:	4b43      	ldr	r3, [pc, #268]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bdae:	681b      	ldr	r3, [r3, #0]
   1bdb0:	4a53      	ldr	r2, [pc, #332]	; (1bf00 <prvTraceInitTraceData+0x220>)
   1bdb2:	210a      	movs	r1, #10
   1bdb4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1bdb6:	4b41      	ldr	r3, [pc, #260]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bdb8:	681b      	ldr	r3, [r3, #0]
   1bdba:	4a52      	ldr	r2, [pc, #328]	; (1bf04 <prvTraceInitTraceData+0x224>)
   1bdbc:	210b      	movs	r1, #11
   1bdbe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1bdc0:	4b3e      	ldr	r3, [pc, #248]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bdc2:	681b      	ldr	r3, [r3, #0]
   1bdc4:	4a50      	ldr	r2, [pc, #320]	; (1bf08 <prvTraceInitTraceData+0x228>)
   1bdc6:	210c      	movs	r1, #12
   1bdc8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1bdca:	4b3c      	ldr	r3, [pc, #240]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bdcc:	681b      	ldr	r3, [r3, #0]
   1bdce:	4a4f      	ldr	r2, [pc, #316]	; (1bf0c <prvTraceInitTraceData+0x22c>)
   1bdd0:	210d      	movs	r1, #13
   1bdd2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   1bdd4:	4b39      	ldr	r3, [pc, #228]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bdd6:	681b      	ldr	r3, [r3, #0]
   1bdd8:	4a4d      	ldr	r2, [pc, #308]	; (1bf10 <prvTraceInitTraceData+0x230>)
   1bdda:	2171      	movs	r1, #113	; 0x71
   1bddc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1bdde:	4b37      	ldr	r3, [pc, #220]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bde0:	681b      	ldr	r3, [r3, #0]
   1bde2:	4a4c      	ldr	r2, [pc, #304]	; (1bf14 <prvTraceInitTraceData+0x234>)
   1bde4:	2172      	movs	r1, #114	; 0x72
   1bde6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1bde8:	4b34      	ldr	r3, [pc, #208]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bdea:	681b      	ldr	r3, [r3, #0]
   1bdec:	4a4a      	ldr	r2, [pc, #296]	; (1bf18 <prvTraceInitTraceData+0x238>)
   1bdee:	2173      	movs	r1, #115	; 0x73
   1bdf0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   1bdf2:	4b32      	ldr	r3, [pc, #200]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bdf4:	681b      	ldr	r3, [r3, #0]
   1bdf6:	4a49      	ldr	r2, [pc, #292]	; (1bf1c <prvTraceInitTraceData+0x23c>)
   1bdf8:	2174      	movs	r1, #116	; 0x74
   1bdfa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1bdfc:	4b2f      	ldr	r3, [pc, #188]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bdfe:	681b      	ldr	r3, [r3, #0]
   1be00:	4a47      	ldr	r2, [pc, #284]	; (1bf20 <prvTraceInitTraceData+0x240>)
   1be02:	21f1      	movs	r1, #241	; 0xf1
   1be04:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1be06:	4b2d      	ldr	r3, [pc, #180]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be08:	681b      	ldr	r3, [r3, #0]
   1be0a:	4a46      	ldr	r2, [pc, #280]	; (1bf24 <prvTraceInitTraceData+0x244>)
   1be0c:	21f2      	movs	r1, #242	; 0xf2
   1be0e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   1be10:	4b2a      	ldr	r3, [pc, #168]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be12:	681b      	ldr	r3, [r3, #0]
   1be14:	4a44      	ldr	r2, [pc, #272]	; (1bf28 <prvTraceInitTraceData+0x248>)
   1be16:	21f3      	movs	r1, #243	; 0xf3
   1be18:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1be1a:	4b28      	ldr	r3, [pc, #160]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be1c:	681b      	ldr	r3, [r3, #0]
   1be1e:	4a43      	ldr	r2, [pc, #268]	; (1bf2c <prvTraceInitTraceData+0x24c>)
   1be20:	21f4      	movs	r1, #244	; 0xf4
   1be22:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   1be24:	4b42      	ldr	r3, [pc, #264]	; (1bf30 <prvTraceInitTraceData+0x250>)
   1be26:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1be28:	4b24      	ldr	r3, [pc, #144]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be2a:	681b      	ldr	r3, [r3, #0]
   1be2c:	22f4      	movs	r2, #244	; 0xf4
   1be2e:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   1be30:	4b22      	ldr	r3, [pc, #136]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be32:	681b      	ldr	r3, [r3, #0]
   1be34:	22f3      	movs	r2, #243	; 0xf3
   1be36:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1be38:	4b20      	ldr	r3, [pc, #128]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be3a:	681b      	ldr	r3, [r3, #0]
   1be3c:	22f2      	movs	r2, #242	; 0xf2
   1be3e:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1be40:	4b1e      	ldr	r3, [pc, #120]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be42:	681b      	ldr	r3, [r3, #0]
   1be44:	22f1      	movs	r2, #241	; 0xf1
   1be46:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1be48:	4b1c      	ldr	r3, [pc, #112]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be4a:	681b      	ldr	r3, [r3, #0]
   1be4c:	2274      	movs	r2, #116	; 0x74
   1be4e:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1be50:	4b1a      	ldr	r3, [pc, #104]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be52:	681b      	ldr	r3, [r3, #0]
   1be54:	2273      	movs	r2, #115	; 0x73
   1be56:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1be58:	4b18      	ldr	r3, [pc, #96]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be5a:	681b      	ldr	r3, [r3, #0]
   1be5c:	2272      	movs	r2, #114	; 0x72
   1be5e:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1be60:	4b16      	ldr	r3, [pc, #88]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be62:	681b      	ldr	r3, [r3, #0]
   1be64:	2271      	movs	r2, #113	; 0x71
   1be66:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1be68:	4b14      	ldr	r3, [pc, #80]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be6a:	681b      	ldr	r3, [r3, #0]
   1be6c:	2204      	movs	r2, #4
   1be6e:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1be70:	4b12      	ldr	r3, [pc, #72]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be72:	681b      	ldr	r3, [r3, #0]
   1be74:	2203      	movs	r2, #3
   1be76:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1be78:	4b10      	ldr	r3, [pc, #64]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be7a:	681b      	ldr	r3, [r3, #0]
   1be7c:	2202      	movs	r2, #2
   1be7e:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1be80:	4b0e      	ldr	r3, [pc, #56]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be82:	681b      	ldr	r3, [r3, #0]
   1be84:	2201      	movs	r2, #1
   1be86:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1be88:	4b2a      	ldr	r3, [pc, #168]	; (1bf34 <prvTraceInitTraceData+0x254>)
   1be8a:	681b      	ldr	r3, [r3, #0]
   1be8c:	2b00      	cmp	r3, #0
   1be8e:	d012      	beq.n	1beb6 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1be90:	4b0a      	ldr	r3, [pc, #40]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1be92:	681b      	ldr	r3, [r3, #0]
   1be94:	4a15      	ldr	r2, [pc, #84]	; (1beec <prvTraceInitTraceData+0x20c>)
   1be96:	1898      	adds	r0, r3, r2
   1be98:	4b26      	ldr	r3, [pc, #152]	; (1bf34 <prvTraceInitTraceData+0x254>)
   1be9a:	681b      	ldr	r3, [r3, #0]
   1be9c:	2250      	movs	r2, #80	; 0x50
   1be9e:	0019      	movs	r1, r3
   1bea0:	4b14      	ldr	r3, [pc, #80]	; (1bef4 <prvTraceInitTraceData+0x214>)
   1bea2:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1bea4:	4b05      	ldr	r3, [pc, #20]	; (1bebc <prvTraceInitTraceData+0x1dc>)
   1bea6:	681b      	ldr	r3, [r3, #0]
   1bea8:	4a23      	ldr	r2, [pc, #140]	; (1bf38 <prvTraceInitTraceData+0x258>)
   1beaa:	2101      	movs	r1, #1
   1beac:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1beae:	4b23      	ldr	r3, [pc, #140]	; (1bf3c <prvTraceInitTraceData+0x25c>)
   1beb0:	4798      	blx	r3
   1beb2:	e000      	b.n	1beb6 <prvTraceInitTraceData+0x1d6>
			return;
   1beb4:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1beb6:	46bd      	mov	sp, r7
   1beb8:	bd80      	pop	{r7, pc}
   1beba:	46c0      	nop			; (mov r8, r8)
   1bebc:	20000d20 	.word	0x20000d20
   1bec0:	20004984 	.word	0x20004984
   1bec4:	e000e018 	.word	0xe000e018
   1bec8:	20005554 	.word	0x20005554
   1becc:	00037903 	.word	0x00037903
   1bed0:	00001aa1 	.word	0x00001aa1
   1bed4:	f0f0f0f0 	.word	0xf0f0f0f0
   1bed8:	0001ae45 	.word	0x0001ae45
   1bedc:	0000055c 	.word	0x0000055c
   1bee0:	f1f1f1f1 	.word	0xf1f1f1f1
   1bee4:	00000564 	.word	0x00000564
   1bee8:	f2f2f2f2 	.word	0xf2f2f2f2
   1beec:	000006bc 	.word	0x000006bc
   1bef0:	0003ae4c 	.word	0x0003ae4c
   1bef4:	0001c255 	.word	0x0001c255
   1bef8:	0000070c 	.word	0x0000070c
   1befc:	f3f3f3f3 	.word	0xf3f3f3f3
   1bf00:	00000bc4 	.word	0x00000bc4
   1bf04:	00000bc5 	.word	0x00000bc5
   1bf08:	00000bc6 	.word	0x00000bc6
   1bf0c:	00000bc7 	.word	0x00000bc7
   1bf10:	00000bc8 	.word	0x00000bc8
   1bf14:	00000bc9 	.word	0x00000bc9
   1bf18:	00000bca 	.word	0x00000bca
   1bf1c:	00000bcb 	.word	0x00000bcb
   1bf20:	00000bcc 	.word	0x00000bcc
   1bf24:	00000bcd 	.word	0x00000bcd
   1bf28:	00000bce 	.word	0x00000bce
   1bf2c:	00000bcf 	.word	0x00000bcf
   1bf30:	0001afe5 	.word	0x0001afe5
   1bf34:	20000c80 	.word	0x20000c80
   1bf38:	000006b4 	.word	0x000006b4
   1bf3c:	0001b24d 	.word	0x0001b24d

0001bf40 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1bf40:	b580      	push	{r7, lr}
   1bf42:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1bf44:	4b10      	ldr	r3, [pc, #64]	; (1bf88 <prvTraceNextFreeEventBufferSlot+0x48>)
   1bf46:	681b      	ldr	r3, [r3, #0]
   1bf48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bf4a:	2b00      	cmp	r3, #0
   1bf4c:	d101      	bne.n	1bf52 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1bf4e:	2300      	movs	r3, #0
   1bf50:	e017      	b.n	1bf82 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1bf52:	4b0d      	ldr	r3, [pc, #52]	; (1bf88 <prvTraceNextFreeEventBufferSlot+0x48>)
   1bf54:	681b      	ldr	r3, [r3, #0]
   1bf56:	69da      	ldr	r2, [r3, #28]
   1bf58:	232c      	movs	r3, #44	; 0x2c
   1bf5a:	33ff      	adds	r3, #255	; 0xff
   1bf5c:	429a      	cmp	r2, r3
   1bf5e:	d905      	bls.n	1bf6c <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1bf60:	4b0a      	ldr	r3, [pc, #40]	; (1bf8c <prvTraceNextFreeEventBufferSlot+0x4c>)
   1bf62:	0018      	movs	r0, r3
   1bf64:	4b0a      	ldr	r3, [pc, #40]	; (1bf90 <prvTraceNextFreeEventBufferSlot+0x50>)
   1bf66:	4798      	blx	r3
		return NULL;
   1bf68:	2300      	movs	r3, #0
   1bf6a:	e00a      	b.n	1bf82 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1bf6c:	4b06      	ldr	r3, [pc, #24]	; (1bf88 <prvTraceNextFreeEventBufferSlot+0x48>)
   1bf6e:	681a      	ldr	r2, [r3, #0]
   1bf70:	4b05      	ldr	r3, [pc, #20]	; (1bf88 <prvTraceNextFreeEventBufferSlot+0x48>)
   1bf72:	681b      	ldr	r3, [r3, #0]
   1bf74:	69db      	ldr	r3, [r3, #28]
   1bf76:	009b      	lsls	r3, r3, #2
   1bf78:	21e2      	movs	r1, #226	; 0xe2
   1bf7a:	00c9      	lsls	r1, r1, #3
   1bf7c:	468c      	mov	ip, r1
   1bf7e:	4463      	add	r3, ip
   1bf80:	18d3      	adds	r3, r2, r3
}
   1bf82:	0018      	movs	r0, r3
   1bf84:	46bd      	mov	sp, r7
   1bf86:	bd80      	pop	{r7, pc}
   1bf88:	20000d20 	.word	0x20000d20
   1bf8c:	0003ae60 	.word	0x0003ae60
   1bf90:	0001c389 	.word	0x0001c389

0001bf94 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1bf94:	b580      	push	{r7, lr}
   1bf96:	b082      	sub	sp, #8
   1bf98:	af00      	add	r7, sp, #0
   1bf9a:	0002      	movs	r2, r0
   1bf9c:	1dfb      	adds	r3, r7, #7
   1bf9e:	701a      	strb	r2, [r3, #0]
   1bfa0:	1dbb      	adds	r3, r7, #6
   1bfa2:	1c0a      	adds	r2, r1, #0
   1bfa4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1bfa6:	1dbb      	adds	r3, r7, #6
   1bfa8:	781b      	ldrb	r3, [r3, #0]
   1bfaa:	2b08      	cmp	r3, #8
   1bfac:	d905      	bls.n	1bfba <uiIndexOfObject+0x26>
   1bfae:	4b2a      	ldr	r3, [pc, #168]	; (1c058 <uiIndexOfObject+0xc4>)
   1bfb0:	0018      	movs	r0, r3
   1bfb2:	4b2a      	ldr	r3, [pc, #168]	; (1c05c <uiIndexOfObject+0xc8>)
   1bfb4:	4798      	blx	r3
   1bfb6:	2300      	movs	r3, #0
   1bfb8:	e049      	b.n	1c04e <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1bfba:	1dfb      	adds	r3, r7, #7
   1bfbc:	781b      	ldrb	r3, [r3, #0]
   1bfbe:	2b00      	cmp	r3, #0
   1bfc0:	d00b      	beq.n	1bfda <uiIndexOfObject+0x46>
   1bfc2:	4b27      	ldr	r3, [pc, #156]	; (1c060 <uiIndexOfObject+0xcc>)
   1bfc4:	681a      	ldr	r2, [r3, #0]
   1bfc6:	1dbb      	adds	r3, r7, #6
   1bfc8:	781b      	ldrb	r3, [r3, #0]
   1bfca:	2164      	movs	r1, #100	; 0x64
   1bfcc:	18d3      	adds	r3, r2, r3
   1bfce:	185b      	adds	r3, r3, r1
   1bfd0:	781b      	ldrb	r3, [r3, #0]
   1bfd2:	1dfa      	adds	r2, r7, #7
   1bfd4:	7812      	ldrb	r2, [r2, #0]
   1bfd6:	429a      	cmp	r2, r3
   1bfd8:	d905      	bls.n	1bfe6 <uiIndexOfObject+0x52>
   1bfda:	4b22      	ldr	r3, [pc, #136]	; (1c064 <uiIndexOfObject+0xd0>)
   1bfdc:	0018      	movs	r0, r3
   1bfde:	4b1f      	ldr	r3, [pc, #124]	; (1c05c <uiIndexOfObject+0xc8>)
   1bfe0:	4798      	blx	r3
   1bfe2:	2300      	movs	r3, #0
   1bfe4:	e033      	b.n	1c04e <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1bfe6:	1dbb      	adds	r3, r7, #6
   1bfe8:	781b      	ldrb	r3, [r3, #0]
   1bfea:	2b08      	cmp	r3, #8
   1bfec:	d82a      	bhi.n	1c044 <uiIndexOfObject+0xb0>
   1bfee:	1dfb      	adds	r3, r7, #7
   1bff0:	781b      	ldrb	r3, [r3, #0]
   1bff2:	2b00      	cmp	r3, #0
   1bff4:	d026      	beq.n	1c044 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1bff6:	4b1a      	ldr	r3, [pc, #104]	; (1c060 <uiIndexOfObject+0xcc>)
   1bff8:	681a      	ldr	r2, [r3, #0]
   1bffa:	1dbb      	adds	r3, r7, #6
   1bffc:	781b      	ldrb	r3, [r3, #0]
   1bffe:	2164      	movs	r1, #100	; 0x64
   1c000:	18d3      	adds	r3, r2, r3
   1c002:	185b      	adds	r3, r3, r1
   1c004:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1c006:	1dfa      	adds	r2, r7, #7
   1c008:	7812      	ldrb	r2, [r2, #0]
   1c00a:	429a      	cmp	r2, r3
   1c00c:	d81a      	bhi.n	1c044 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1c00e:	4b14      	ldr	r3, [pc, #80]	; (1c060 <uiIndexOfObject+0xcc>)
   1c010:	681a      	ldr	r2, [r3, #0]
   1c012:	1dbb      	adds	r3, r7, #6
   1c014:	781b      	ldrb	r3, [r3, #0]
   1c016:	3340      	adds	r3, #64	; 0x40
   1c018:	005b      	lsls	r3, r3, #1
   1c01a:	18d3      	adds	r3, r2, r3
   1c01c:	3308      	adds	r3, #8
   1c01e:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1c020:	4b0f      	ldr	r3, [pc, #60]	; (1c060 <uiIndexOfObject+0xcc>)
   1c022:	6819      	ldr	r1, [r3, #0]
   1c024:	1dbb      	adds	r3, r7, #6
   1c026:	781b      	ldrb	r3, [r3, #0]
   1c028:	207c      	movs	r0, #124	; 0x7c
   1c02a:	18cb      	adds	r3, r1, r3
   1c02c:	181b      	adds	r3, r3, r0
   1c02e:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1c030:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1c032:	1df9      	adds	r1, r7, #7
   1c034:	7809      	ldrb	r1, [r1, #0]
   1c036:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1c038:	b289      	uxth	r1, r1
   1c03a:	434b      	muls	r3, r1
   1c03c:	b29b      	uxth	r3, r3
   1c03e:	18d3      	adds	r3, r2, r3
   1c040:	b29b      	uxth	r3, r3
   1c042:	e004      	b.n	1c04e <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1c044:	4b08      	ldr	r3, [pc, #32]	; (1c068 <uiIndexOfObject+0xd4>)
   1c046:	0018      	movs	r0, r3
   1c048:	4b04      	ldr	r3, [pc, #16]	; (1c05c <uiIndexOfObject+0xc8>)
   1c04a:	4798      	blx	r3
	return 0;
   1c04c:	2300      	movs	r3, #0
}
   1c04e:	0018      	movs	r0, r3
   1c050:	46bd      	mov	sp, r7
   1c052:	b002      	add	sp, #8
   1c054:	bd80      	pop	{r7, pc}
   1c056:	46c0      	nop			; (mov r8, r8)
   1c058:	0003ae88 	.word	0x0003ae88
   1c05c:	0001c389 	.word	0x0001c389
   1c060:	20000d20 	.word	0x20000d20
   1c064:	0003aec8 	.word	0x0003aec8
   1c068:	0003af08 	.word	0x0003af08

0001c06c <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1c06c:	b580      	push	{r7, lr}
   1c06e:	b088      	sub	sp, #32
   1c070:	af00      	add	r7, sp, #0
   1c072:	0002      	movs	r2, r0
   1c074:	1dfb      	adds	r3, r7, #7
   1c076:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1c078:	4b5a      	ldr	r3, [pc, #360]	; (1c1e4 <prvTraceGetObjectHandle+0x178>)
   1c07a:	681b      	ldr	r3, [r3, #0]
   1c07c:	2b00      	cmp	r3, #0
   1c07e:	d105      	bne.n	1c08c <prvTraceGetObjectHandle+0x20>
   1c080:	4b59      	ldr	r3, [pc, #356]	; (1c1e8 <prvTraceGetObjectHandle+0x17c>)
   1c082:	0018      	movs	r0, r3
   1c084:	4b59      	ldr	r3, [pc, #356]	; (1c1ec <prvTraceGetObjectHandle+0x180>)
   1c086:	4798      	blx	r3
   1c088:	2300      	movs	r3, #0
   1c08a:	e0a7      	b.n	1c1dc <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1c08c:	1dfb      	adds	r3, r7, #7
   1c08e:	781b      	ldrb	r3, [r3, #0]
   1c090:	2b08      	cmp	r3, #8
   1c092:	d905      	bls.n	1c0a0 <prvTraceGetObjectHandle+0x34>
   1c094:	4b56      	ldr	r3, [pc, #344]	; (1c1f0 <prvTraceGetObjectHandle+0x184>)
   1c096:	0018      	movs	r0, r3
   1c098:	4b54      	ldr	r3, [pc, #336]	; (1c1ec <prvTraceGetObjectHandle+0x180>)
   1c09a:	4798      	blx	r3
   1c09c:	2300      	movs	r3, #0
   1c09e:	e09d      	b.n	1c1dc <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1c0a0:	f3ef 8310 	mrs	r3, PRIMASK
   1c0a4:	60fb      	str	r3, [r7, #12]
  return(result);
   1c0a6:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1c0a8:	61bb      	str	r3, [r7, #24]
   1c0aa:	2301      	movs	r3, #1
   1c0ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1c0ae:	693b      	ldr	r3, [r7, #16]
   1c0b0:	f383 8810 	msr	PRIMASK, r3
   1c0b4:	4b4f      	ldr	r3, [pc, #316]	; (1c1f4 <prvTraceGetObjectHandle+0x188>)
   1c0b6:	681b      	ldr	r3, [r3, #0]
   1c0b8:	1c5a      	adds	r2, r3, #1
   1c0ba:	4b4e      	ldr	r3, [pc, #312]	; (1c1f4 <prvTraceGetObjectHandle+0x188>)
   1c0bc:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1c0be:	1dfb      	adds	r3, r7, #7
   1c0c0:	781a      	ldrb	r2, [r3, #0]
   1c0c2:	4b4d      	ldr	r3, [pc, #308]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c0c4:	0052      	lsls	r2, r2, #1
   1c0c6:	5ad3      	ldrh	r3, [r2, r3]
   1c0c8:	001a      	movs	r2, r3
   1c0ca:	4b4c      	ldr	r3, [pc, #304]	; (1c1fc <prvTraceGetObjectHandle+0x190>)
   1c0cc:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1c0ce:	4b4b      	ldr	r3, [pc, #300]	; (1c1fc <prvTraceGetObjectHandle+0x190>)
   1c0d0:	681b      	ldr	r3, [r3, #0]
   1c0d2:	4a49      	ldr	r2, [pc, #292]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c0d4:	2148      	movs	r1, #72	; 0x48
   1c0d6:	18d3      	adds	r3, r2, r3
   1c0d8:	185b      	adds	r3, r3, r1
   1c0da:	781b      	ldrb	r3, [r3, #0]
   1c0dc:	2b00      	cmp	r3, #0
   1c0de:	d117      	bne.n	1c110 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1c0e0:	4b46      	ldr	r3, [pc, #280]	; (1c1fc <prvTraceGetObjectHandle+0x190>)
   1c0e2:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1c0e4:	4b45      	ldr	r3, [pc, #276]	; (1c1fc <prvTraceGetObjectHandle+0x190>)
   1c0e6:	681b      	ldr	r3, [r3, #0]
   1c0e8:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1c0ea:	1dfb      	adds	r3, r7, #7
   1c0ec:	781b      	ldrb	r3, [r3, #0]
   1c0ee:	4842      	ldr	r0, [pc, #264]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c0f0:	3308      	adds	r3, #8
   1c0f2:	005b      	lsls	r3, r3, #1
   1c0f4:	18c3      	adds	r3, r0, r3
   1c0f6:	3302      	adds	r3, #2
   1c0f8:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1c0fa:	b2db      	uxtb	r3, r3
   1c0fc:	1acb      	subs	r3, r1, r3
   1c0fe:	b2db      	uxtb	r3, r3
   1c100:	3301      	adds	r3, #1
   1c102:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1c104:	4b3c      	ldr	r3, [pc, #240]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c106:	2148      	movs	r1, #72	; 0x48
   1c108:	189b      	adds	r3, r3, r2
   1c10a:	185b      	adds	r3, r3, r1
   1c10c:	1c02      	adds	r2, r0, #0
   1c10e:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1c110:	4b3a      	ldr	r3, [pc, #232]	; (1c1fc <prvTraceGetObjectHandle+0x190>)
   1c112:	681a      	ldr	r2, [r3, #0]
   1c114:	231f      	movs	r3, #31
   1c116:	18fb      	adds	r3, r7, r3
   1c118:	4937      	ldr	r1, [pc, #220]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c11a:	2048      	movs	r0, #72	; 0x48
   1c11c:	188a      	adds	r2, r1, r2
   1c11e:	1812      	adds	r2, r2, r0
   1c120:	7812      	ldrb	r2, [r2, #0]
   1c122:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1c124:	1dfb      	adds	r3, r7, #7
   1c126:	781a      	ldrb	r2, [r3, #0]
   1c128:	4b33      	ldr	r3, [pc, #204]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c12a:	0052      	lsls	r2, r2, #1
   1c12c:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1c12e:	1dfb      	adds	r3, r7, #7
   1c130:	781b      	ldrb	r3, [r3, #0]
   1c132:	4931      	ldr	r1, [pc, #196]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c134:	3310      	adds	r3, #16
   1c136:	005b      	lsls	r3, r3, #1
   1c138:	18cb      	adds	r3, r1, r3
   1c13a:	3304      	adds	r3, #4
   1c13c:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1c13e:	429a      	cmp	r2, r3
   1c140:	d90d      	bls.n	1c15e <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1c142:	1dfb      	adds	r3, r7, #7
   1c144:	781b      	ldrb	r3, [r3, #0]
   1c146:	0018      	movs	r0, r3
   1c148:	4b2d      	ldr	r3, [pc, #180]	; (1c200 <prvTraceGetObjectHandle+0x194>)
   1c14a:	4798      	blx	r3
   1c14c:	0003      	movs	r3, r0
   1c14e:	0018      	movs	r0, r3
   1c150:	4b26      	ldr	r3, [pc, #152]	; (1c1ec <prvTraceGetObjectHandle+0x180>)
   1c152:	4798      	blx	r3
		handle = 0;
   1c154:	231f      	movs	r3, #31
   1c156:	18fb      	adds	r3, r7, r3
   1c158:	2200      	movs	r2, #0
   1c15a:	701a      	strb	r2, [r3, #0]
   1c15c:	e031      	b.n	1c1c2 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1c15e:	1dfb      	adds	r3, r7, #7
   1c160:	781b      	ldrb	r3, [r3, #0]
   1c162:	4a25      	ldr	r2, [pc, #148]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c164:	0059      	lsls	r1, r3, #1
   1c166:	5a8a      	ldrh	r2, [r1, r2]
   1c168:	3201      	adds	r2, #1
   1c16a:	b291      	uxth	r1, r2
   1c16c:	4a22      	ldr	r2, [pc, #136]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c16e:	005b      	lsls	r3, r3, #1
   1c170:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1c172:	1dfb      	adds	r3, r7, #7
   1c174:	781a      	ldrb	r2, [r3, #0]
   1c176:	4b20      	ldr	r3, [pc, #128]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c178:	0052      	lsls	r2, r2, #1
   1c17a:	5ad3      	ldrh	r3, [r2, r3]
   1c17c:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1c17e:	1dfb      	adds	r3, r7, #7
   1c180:	781b      	ldrb	r3, [r3, #0]
   1c182:	4a1d      	ldr	r2, [pc, #116]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c184:	3308      	adds	r3, #8
   1c186:	005b      	lsls	r3, r3, #1
   1c188:	18d3      	adds	r3, r2, r3
   1c18a:	3302      	adds	r3, #2
   1c18c:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1c18e:	1acb      	subs	r3, r1, r3
   1c190:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1c192:	1dfb      	adds	r3, r7, #7
   1c194:	781b      	ldrb	r3, [r3, #0]
   1c196:	4a18      	ldr	r2, [pc, #96]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c198:	3318      	adds	r3, #24
   1c19a:	005b      	lsls	r3, r3, #1
   1c19c:	18d3      	adds	r3, r2, r3
   1c19e:	3306      	adds	r3, #6
   1c1a0:	881b      	ldrh	r3, [r3, #0]
   1c1a2:	001a      	movs	r2, r3
		if (hndCount >
   1c1a4:	697b      	ldr	r3, [r7, #20]
   1c1a6:	429a      	cmp	r2, r3
   1c1a8:	da0b      	bge.n	1c1c2 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1c1aa:	1dfb      	adds	r3, r7, #7
   1c1ac:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1c1ae:	697a      	ldr	r2, [r7, #20]
   1c1b0:	b2d2      	uxtb	r2, r2
   1c1b2:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1c1b4:	4a10      	ldr	r2, [pc, #64]	; (1c1f8 <prvTraceGetObjectHandle+0x18c>)
   1c1b6:	3318      	adds	r3, #24
   1c1b8:	005b      	lsls	r3, r3, #1
   1c1ba:	18d3      	adds	r3, r2, r3
   1c1bc:	3306      	adds	r3, #6
   1c1be:	1c0a      	adds	r2, r1, #0
   1c1c0:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1c1c2:	4b0c      	ldr	r3, [pc, #48]	; (1c1f4 <prvTraceGetObjectHandle+0x188>)
   1c1c4:	681b      	ldr	r3, [r3, #0]
   1c1c6:	1e5a      	subs	r2, r3, #1
   1c1c8:	4b0a      	ldr	r3, [pc, #40]	; (1c1f4 <prvTraceGetObjectHandle+0x188>)
   1c1ca:	601a      	str	r2, [r3, #0]
   1c1cc:	69bb      	ldr	r3, [r7, #24]
   1c1ce:	60bb      	str	r3, [r7, #8]
   1c1d0:	68bb      	ldr	r3, [r7, #8]
   1c1d2:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1c1d6:	231f      	movs	r3, #31
   1c1d8:	18fb      	adds	r3, r7, r3
   1c1da:	781b      	ldrb	r3, [r3, #0]
}
   1c1dc:	0018      	movs	r0, r3
   1c1de:	46bd      	mov	sp, r7
   1c1e0:	b008      	add	sp, #32
   1c1e2:	bd80      	pop	{r7, pc}
   1c1e4:	20000d20 	.word	0x20000d20
   1c1e8:	0003a368 	.word	0x0003a368
   1c1ec:	0001c389 	.word	0x0001c389
   1c1f0:	0003af48 	.word	0x0003af48
   1c1f4:	20000c78 	.word	0x20000c78
   1c1f8:	20000c90 	.word	0x20000c90
   1c1fc:	20000d24 	.word	0x20000d24
   1c200:	0001b0a9 	.word	0x0001b0a9

0001c204 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1c204:	b590      	push	{r4, r7, lr}
   1c206:	b085      	sub	sp, #20
   1c208:	af00      	add	r7, sp, #0
   1c20a:	0002      	movs	r2, r0
   1c20c:	1dfb      	adds	r3, r7, #7
   1c20e:	701a      	strb	r2, [r3, #0]
   1c210:	1dbb      	adds	r3, r7, #6
   1c212:	1c0a      	adds	r2, r1, #0
   1c214:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1c216:	230e      	movs	r3, #14
   1c218:	18fc      	adds	r4, r7, r3
   1c21a:	1dfb      	adds	r3, r7, #7
   1c21c:	781a      	ldrb	r2, [r3, #0]
   1c21e:	1dbb      	adds	r3, r7, #6
   1c220:	781b      	ldrb	r3, [r3, #0]
   1c222:	0011      	movs	r1, r2
   1c224:	0018      	movs	r0, r3
   1c226:	4b09      	ldr	r3, [pc, #36]	; (1c24c <prvMarkObjectAsUsed+0x48>)
   1c228:	4798      	blx	r3
   1c22a:	0003      	movs	r3, r0
   1c22c:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1c22e:	4b08      	ldr	r3, [pc, #32]	; (1c250 <prvMarkObjectAsUsed+0x4c>)
   1c230:	681a      	ldr	r2, [r3, #0]
   1c232:	230e      	movs	r3, #14
   1c234:	18fb      	adds	r3, r7, r3
   1c236:	881b      	ldrh	r3, [r3, #0]
   1c238:	219c      	movs	r1, #156	; 0x9c
   1c23a:	18d3      	adds	r3, r2, r3
   1c23c:	185b      	adds	r3, r3, r1
   1c23e:	2201      	movs	r2, #1
   1c240:	701a      	strb	r2, [r3, #0]
}
   1c242:	46c0      	nop			; (mov r8, r8)
   1c244:	46bd      	mov	sp, r7
   1c246:	b005      	add	sp, #20
   1c248:	bd90      	pop	{r4, r7, pc}
   1c24a:	46c0      	nop			; (mov r8, r8)
   1c24c:	0001bf95 	.word	0x0001bf95
   1c250:	20000d20 	.word	0x20000d20

0001c254 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1c254:	b580      	push	{r7, lr}
   1c256:	b086      	sub	sp, #24
   1c258:	af00      	add	r7, sp, #0
   1c25a:	60f8      	str	r0, [r7, #12]
   1c25c:	60b9      	str	r1, [r7, #8]
   1c25e:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1c260:	2300      	movs	r3, #0
   1c262:	617b      	str	r3, [r7, #20]
   1c264:	e010      	b.n	1c288 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1c266:	68fa      	ldr	r2, [r7, #12]
   1c268:	697b      	ldr	r3, [r7, #20]
   1c26a:	18d3      	adds	r3, r2, r3
   1c26c:	68b9      	ldr	r1, [r7, #8]
   1c26e:	697a      	ldr	r2, [r7, #20]
   1c270:	188a      	adds	r2, r1, r2
   1c272:	7812      	ldrb	r2, [r2, #0]
   1c274:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1c276:	68ba      	ldr	r2, [r7, #8]
   1c278:	697b      	ldr	r3, [r7, #20]
   1c27a:	18d3      	adds	r3, r2, r3
   1c27c:	781b      	ldrb	r3, [r3, #0]
   1c27e:	2b00      	cmp	r3, #0
   1c280:	d007      	beq.n	1c292 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1c282:	697b      	ldr	r3, [r7, #20]
   1c284:	3301      	adds	r3, #1
   1c286:	617b      	str	r3, [r7, #20]
   1c288:	697a      	ldr	r2, [r7, #20]
   1c28a:	687b      	ldr	r3, [r7, #4]
   1c28c:	429a      	cmp	r2, r3
   1c28e:	d3ea      	bcc.n	1c266 <prvStrncpy+0x12>
			break;
	}
}
   1c290:	e000      	b.n	1c294 <prvStrncpy+0x40>
			break;
   1c292:	46c0      	nop			; (mov r8, r8)
}
   1c294:	46c0      	nop			; (mov r8, r8)
   1c296:	46bd      	mov	sp, r7
   1c298:	b006      	add	sp, #24
   1c29a:	bd80      	pop	{r7, pc}

0001c29c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1c29c:	b580      	push	{r7, lr}
   1c29e:	b082      	sub	sp, #8
   1c2a0:	af00      	add	r7, sp, #0
   1c2a2:	603a      	str	r2, [r7, #0]
   1c2a4:	1dfb      	adds	r3, r7, #7
   1c2a6:	1c02      	adds	r2, r0, #0
   1c2a8:	701a      	strb	r2, [r3, #0]
   1c2aa:	1dbb      	adds	r3, r7, #6
   1c2ac:	1c0a      	adds	r2, r1, #0
   1c2ae:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1c2b0:	683b      	ldr	r3, [r7, #0]
   1c2b2:	2b00      	cmp	r3, #0
   1c2b4:	d104      	bne.n	1c2c0 <prvTraceSetObjectName+0x24>
   1c2b6:	4b2a      	ldr	r3, [pc, #168]	; (1c360 <prvTraceSetObjectName+0xc4>)
   1c2b8:	0018      	movs	r0, r3
   1c2ba:	4b2a      	ldr	r3, [pc, #168]	; (1c364 <prvTraceSetObjectName+0xc8>)
   1c2bc:	4798      	blx	r3
   1c2be:	e04b      	b.n	1c358 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1c2c0:	1dfb      	adds	r3, r7, #7
   1c2c2:	781b      	ldrb	r3, [r3, #0]
   1c2c4:	2b08      	cmp	r3, #8
   1c2c6:	d904      	bls.n	1c2d2 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1c2c8:	4b27      	ldr	r3, [pc, #156]	; (1c368 <prvTraceSetObjectName+0xcc>)
   1c2ca:	0018      	movs	r0, r3
   1c2cc:	4b25      	ldr	r3, [pc, #148]	; (1c364 <prvTraceSetObjectName+0xc8>)
   1c2ce:	4798      	blx	r3
		return;
   1c2d0:	e042      	b.n	1c358 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1c2d2:	1dbb      	adds	r3, r7, #6
   1c2d4:	781b      	ldrb	r3, [r3, #0]
   1c2d6:	2b00      	cmp	r3, #0
   1c2d8:	d104      	bne.n	1c2e4 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1c2da:	4b24      	ldr	r3, [pc, #144]	; (1c36c <prvTraceSetObjectName+0xd0>)
   1c2dc:	0018      	movs	r0, r3
   1c2de:	4b21      	ldr	r3, [pc, #132]	; (1c364 <prvTraceSetObjectName+0xc8>)
   1c2e0:	4798      	blx	r3
		return;
   1c2e2:	e039      	b.n	1c358 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1c2e4:	4b22      	ldr	r3, [pc, #136]	; (1c370 <prvTraceSetObjectName+0xd4>)
   1c2e6:	681a      	ldr	r2, [r3, #0]
   1c2e8:	1dfb      	adds	r3, r7, #7
   1c2ea:	781b      	ldrb	r3, [r3, #0]
   1c2ec:	2164      	movs	r1, #100	; 0x64
   1c2ee:	18d3      	adds	r3, r2, r3
   1c2f0:	185b      	adds	r3, r3, r1
   1c2f2:	781b      	ldrb	r3, [r3, #0]
   1c2f4:	1dba      	adds	r2, r7, #6
   1c2f6:	7812      	ldrb	r2, [r2, #0]
   1c2f8:	429a      	cmp	r2, r3
   1c2fa:	d909      	bls.n	1c310 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1c2fc:	1dfb      	adds	r3, r7, #7
   1c2fe:	781b      	ldrb	r3, [r3, #0]
   1c300:	0018      	movs	r0, r3
   1c302:	4b1c      	ldr	r3, [pc, #112]	; (1c374 <prvTraceSetObjectName+0xd8>)
   1c304:	4798      	blx	r3
   1c306:	0003      	movs	r3, r0
   1c308:	0018      	movs	r0, r3
   1c30a:	4b16      	ldr	r3, [pc, #88]	; (1c364 <prvTraceSetObjectName+0xc8>)
   1c30c:	4798      	blx	r3
   1c30e:	e023      	b.n	1c358 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1c310:	1dfb      	adds	r3, r7, #7
   1c312:	781a      	ldrb	r2, [r3, #0]
   1c314:	1dbb      	adds	r3, r7, #6
   1c316:	781b      	ldrb	r3, [r3, #0]
   1c318:	0011      	movs	r1, r2
   1c31a:	0018      	movs	r0, r3
   1c31c:	4b16      	ldr	r3, [pc, #88]	; (1c378 <prvTraceSetObjectName+0xdc>)
   1c31e:	4798      	blx	r3
   1c320:	0003      	movs	r3, r0
   1c322:	001a      	movs	r2, r3
   1c324:	4b15      	ldr	r3, [pc, #84]	; (1c37c <prvTraceSetObjectName+0xe0>)
   1c326:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1c328:	4b15      	ldr	r3, [pc, #84]	; (1c380 <prvTraceSetObjectName+0xe4>)
   1c32a:	681b      	ldr	r3, [r3, #0]
   1c32c:	2b00      	cmp	r3, #0
   1c32e:	d113      	bne.n	1c358 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1c330:	4b0f      	ldr	r3, [pc, #60]	; (1c370 <prvTraceSetObjectName+0xd4>)
   1c332:	681a      	ldr	r2, [r3, #0]
   1c334:	4b11      	ldr	r3, [pc, #68]	; (1c37c <prvTraceSetObjectName+0xe0>)
   1c336:	881b      	ldrh	r3, [r3, #0]
   1c338:	3398      	adds	r3, #152	; 0x98
   1c33a:	18d3      	adds	r3, r2, r3
   1c33c:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1c33e:	4b0c      	ldr	r3, [pc, #48]	; (1c370 <prvTraceSetObjectName+0xd4>)
   1c340:	681a      	ldr	r2, [r3, #0]
   1c342:	1dfb      	adds	r3, r7, #7
   1c344:	781b      	ldrb	r3, [r3, #0]
   1c346:	2170      	movs	r1, #112	; 0x70
   1c348:	18d3      	adds	r3, r2, r3
   1c34a:	185b      	adds	r3, r3, r1
   1c34c:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1c34e:	001a      	movs	r2, r3
   1c350:	683b      	ldr	r3, [r7, #0]
   1c352:	0019      	movs	r1, r3
   1c354:	4b0b      	ldr	r3, [pc, #44]	; (1c384 <prvTraceSetObjectName+0xe8>)
   1c356:	4798      	blx	r3
		}
	}
}
   1c358:	46bd      	mov	sp, r7
   1c35a:	b002      	add	sp, #8
   1c35c:	bd80      	pop	{r7, pc}
   1c35e:	46c0      	nop			; (mov r8, r8)
   1c360:	0003b04c 	.word	0x0003b04c
   1c364:	0001c389 	.word	0x0001c389
   1c368:	0003b080 	.word	0x0003b080
   1c36c:	0003b0b0 	.word	0x0003b0b0
   1c370:	20000d20 	.word	0x20000d20
   1c374:	0001b0a9 	.word	0x0001b0a9
   1c378:	0001bf95 	.word	0x0001bf95
   1c37c:	20000d28 	.word	0x20000d28
   1c380:	20000c80 	.word	0x20000c80
   1c384:	0001c255 	.word	0x0001c255

0001c388 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1c388:	b580      	push	{r7, lr}
   1c38a:	b082      	sub	sp, #8
   1c38c:	af00      	add	r7, sp, #0
   1c38e:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1c390:	4b11      	ldr	r3, [pc, #68]	; (1c3d8 <prvTraceError+0x50>)
   1c392:	681b      	ldr	r3, [r3, #0]
   1c394:	2b00      	cmp	r3, #0
   1c396:	d001      	beq.n	1c39c <prvTraceError+0x14>
	{
		vTraceStop();
   1c398:	4b10      	ldr	r3, [pc, #64]	; (1c3dc <prvTraceError+0x54>)
   1c39a:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1c39c:	4b10      	ldr	r3, [pc, #64]	; (1c3e0 <prvTraceError+0x58>)
   1c39e:	681b      	ldr	r3, [r3, #0]
   1c3a0:	2b00      	cmp	r3, #0
   1c3a2:	d115      	bne.n	1c3d0 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1c3a4:	4b0e      	ldr	r3, [pc, #56]	; (1c3e0 <prvTraceError+0x58>)
   1c3a6:	687a      	ldr	r2, [r7, #4]
   1c3a8:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1c3aa:	4b0b      	ldr	r3, [pc, #44]	; (1c3d8 <prvTraceError+0x50>)
   1c3ac:	681b      	ldr	r3, [r3, #0]
   1c3ae:	2b00      	cmp	r3, #0
   1c3b0:	d00e      	beq.n	1c3d0 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1c3b2:	4b09      	ldr	r3, [pc, #36]	; (1c3d8 <prvTraceError+0x50>)
   1c3b4:	681b      	ldr	r3, [r3, #0]
   1c3b6:	4a0b      	ldr	r2, [pc, #44]	; (1c3e4 <prvTraceError+0x5c>)
   1c3b8:	1898      	adds	r0, r3, r2
   1c3ba:	4b09      	ldr	r3, [pc, #36]	; (1c3e0 <prvTraceError+0x58>)
   1c3bc:	681b      	ldr	r3, [r3, #0]
   1c3be:	2250      	movs	r2, #80	; 0x50
   1c3c0:	0019      	movs	r1, r3
   1c3c2:	4b09      	ldr	r3, [pc, #36]	; (1c3e8 <prvTraceError+0x60>)
   1c3c4:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1c3c6:	4b04      	ldr	r3, [pc, #16]	; (1c3d8 <prvTraceError+0x50>)
   1c3c8:	681b      	ldr	r3, [r3, #0]
   1c3ca:	4a08      	ldr	r2, [pc, #32]	; (1c3ec <prvTraceError+0x64>)
   1c3cc:	2101      	movs	r1, #1
   1c3ce:	5099      	str	r1, [r3, r2]
		}
	}
}
   1c3d0:	46c0      	nop			; (mov r8, r8)
   1c3d2:	46bd      	mov	sp, r7
   1c3d4:	b002      	add	sp, #8
   1c3d6:	bd80      	pop	{r7, pc}
   1c3d8:	20000d20 	.word	0x20000d20
   1c3dc:	0001b24d 	.word	0x0001b24d
   1c3e0:	20000c80 	.word	0x20000c80
   1c3e4:	000006bc 	.word	0x000006bc
   1c3e8:	0001c255 	.word	0x0001c255
   1c3ec:	000006b4 	.word	0x000006b4

0001c3f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1c3f0:	b580      	push	{r7, lr}
   1c3f2:	b086      	sub	sp, #24
   1c3f4:	af00      	add	r7, sp, #0
   1c3f6:	0002      	movs	r2, r0
   1c3f8:	1dfb      	adds	r3, r7, #7
   1c3fa:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1c3fc:	2300      	movs	r3, #0
   1c3fe:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1c400:	2300      	movs	r3, #0
   1c402:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1c404:	1dfb      	adds	r3, r7, #7
   1c406:	781b      	ldrb	r3, [r3, #0]
   1c408:	2b00      	cmp	r3, #0
   1c40a:	d000      	beq.n	1c40e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1c40c:	e089      	b.n	1c522 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1c40e:	4b49      	ldr	r3, [pc, #292]	; (1c534 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1c410:	0018      	movs	r0, r3
   1c412:	4b49      	ldr	r3, [pc, #292]	; (1c538 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1c414:	4798      	blx	r3
   1c416:	e08a      	b.n	1c52e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1c418:	4b48      	ldr	r3, [pc, #288]	; (1c53c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c41a:	681b      	ldr	r3, [r3, #0]
   1c41c:	69da      	ldr	r2, [r3, #28]
   1c41e:	697b      	ldr	r3, [r7, #20]
   1c420:	18d3      	adds	r3, r2, r3
   1c422:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1c424:	4b45      	ldr	r3, [pc, #276]	; (1c53c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c426:	6819      	ldr	r1, [r3, #0]
   1c428:	693b      	ldr	r3, [r7, #16]
   1c42a:	009a      	lsls	r2, r3, #2
   1c42c:	23e2      	movs	r3, #226	; 0xe2
   1c42e:	00db      	lsls	r3, r3, #3
   1c430:	188a      	adds	r2, r1, r2
   1c432:	18d3      	adds	r3, r2, r3
   1c434:	781b      	ldrb	r3, [r3, #0]
   1c436:	2b98      	cmp	r3, #152	; 0x98
   1c438:	d934      	bls.n	1c4a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1c43a:	4b40      	ldr	r3, [pc, #256]	; (1c53c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c43c:	6819      	ldr	r1, [r3, #0]
   1c43e:	693b      	ldr	r3, [r7, #16]
   1c440:	009a      	lsls	r2, r3, #2
   1c442:	23e2      	movs	r3, #226	; 0xe2
   1c444:	00db      	lsls	r3, r3, #3
   1c446:	188a      	adds	r2, r1, r2
   1c448:	18d3      	adds	r3, r2, r3
   1c44a:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1c44c:	2ba7      	cmp	r3, #167	; 0xa7
   1c44e:	d829      	bhi.n	1c4a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1c450:	4b3a      	ldr	r3, [pc, #232]	; (1c53c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c452:	6819      	ldr	r1, [r3, #0]
   1c454:	693b      	ldr	r3, [r7, #16]
   1c456:	009a      	lsls	r2, r3, #2
   1c458:	23e2      	movs	r3, #226	; 0xe2
   1c45a:	00db      	lsls	r3, r3, #3
   1c45c:	188a      	adds	r2, r1, r2
   1c45e:	18d3      	adds	r3, r2, r3
   1c460:	781a      	ldrb	r2, [r3, #0]
   1c462:	230f      	movs	r3, #15
   1c464:	18fb      	adds	r3, r7, r3
   1c466:	3268      	adds	r2, #104	; 0x68
   1c468:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1c46a:	230f      	movs	r3, #15
   1c46c:	18fb      	adds	r3, r7, r3
   1c46e:	781a      	ldrb	r2, [r3, #0]
   1c470:	693b      	ldr	r3, [r7, #16]
   1c472:	18d2      	adds	r2, r2, r3
   1c474:	4b31      	ldr	r3, [pc, #196]	; (1c53c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c476:	681b      	ldr	r3, [r3, #0]
   1c478:	699b      	ldr	r3, [r3, #24]
   1c47a:	429a      	cmp	r2, r3
   1c47c:	d24d      	bcs.n	1c51a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1c47e:	4b2f      	ldr	r3, [pc, #188]	; (1c53c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c480:	681a      	ldr	r2, [r3, #0]
   1c482:	693b      	ldr	r3, [r7, #16]
   1c484:	009b      	lsls	r3, r3, #2
   1c486:	21e2      	movs	r1, #226	; 0xe2
   1c488:	00c9      	lsls	r1, r1, #3
   1c48a:	468c      	mov	ip, r1
   1c48c:	4463      	add	r3, ip
   1c48e:	18d0      	adds	r0, r2, r3
   1c490:	230f      	movs	r3, #15
   1c492:	18fb      	adds	r3, r7, r3
   1c494:	781b      	ldrb	r3, [r3, #0]
   1c496:	3301      	adds	r3, #1
   1c498:	009b      	lsls	r3, r3, #2
   1c49a:	001a      	movs	r2, r3
   1c49c:	2100      	movs	r1, #0
   1c49e:	4b28      	ldr	r3, [pc, #160]	; (1c540 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1c4a0:	4798      	blx	r3
		{
   1c4a2:	e03a      	b.n	1c51a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1c4a4:	4b25      	ldr	r3, [pc, #148]	; (1c53c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c4a6:	6819      	ldr	r1, [r3, #0]
   1c4a8:	693b      	ldr	r3, [r7, #16]
   1c4aa:	009a      	lsls	r2, r3, #2
   1c4ac:	23e2      	movs	r3, #226	; 0xe2
   1c4ae:	00db      	lsls	r3, r3, #3
   1c4b0:	188a      	adds	r2, r1, r2
   1c4b2:	18d3      	adds	r3, r2, r3
   1c4b4:	781b      	ldrb	r3, [r3, #0]
   1c4b6:	2b01      	cmp	r3, #1
   1c4b8:	d130      	bne.n	1c51c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1c4ba:	693b      	ldr	r3, [r7, #16]
   1c4bc:	1c5a      	adds	r2, r3, #1
   1c4be:	4b1f      	ldr	r3, [pc, #124]	; (1c53c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c4c0:	681b      	ldr	r3, [r3, #0]
   1c4c2:	699b      	ldr	r3, [r3, #24]
   1c4c4:	429a      	cmp	r2, r3
   1c4c6:	d20e      	bcs.n	1c4e6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1c4c8:	4b1c      	ldr	r3, [pc, #112]	; (1c53c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c4ca:	681a      	ldr	r2, [r3, #0]
   1c4cc:	693b      	ldr	r3, [r7, #16]
   1c4ce:	009b      	lsls	r3, r3, #2
   1c4d0:	21e2      	movs	r1, #226	; 0xe2
   1c4d2:	00c9      	lsls	r1, r1, #3
   1c4d4:	468c      	mov	ip, r1
   1c4d6:	4463      	add	r3, ip
   1c4d8:	18d3      	adds	r3, r2, r3
   1c4da:	2208      	movs	r2, #8
   1c4dc:	2100      	movs	r1, #0
   1c4de:	0018      	movs	r0, r3
   1c4e0:	4b17      	ldr	r3, [pc, #92]	; (1c540 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1c4e2:	4798      	blx	r3
   1c4e4:	e01a      	b.n	1c51c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1c4e6:	4b15      	ldr	r3, [pc, #84]	; (1c53c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c4e8:	681b      	ldr	r3, [r3, #0]
   1c4ea:	22e2      	movs	r2, #226	; 0xe2
   1c4ec:	00d2      	lsls	r2, r2, #3
   1c4ee:	4694      	mov	ip, r2
   1c4f0:	4463      	add	r3, ip
   1c4f2:	2204      	movs	r2, #4
   1c4f4:	2100      	movs	r1, #0
   1c4f6:	0018      	movs	r0, r3
   1c4f8:	4b11      	ldr	r3, [pc, #68]	; (1c540 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1c4fa:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1c4fc:	4b0f      	ldr	r3, [pc, #60]	; (1c53c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c4fe:	681a      	ldr	r2, [r3, #0]
   1c500:	693b      	ldr	r3, [r7, #16]
   1c502:	009b      	lsls	r3, r3, #2
   1c504:	21e2      	movs	r1, #226	; 0xe2
   1c506:	00c9      	lsls	r1, r1, #3
   1c508:	468c      	mov	ip, r1
   1c50a:	4463      	add	r3, ip
   1c50c:	18d3      	adds	r3, r2, r3
   1c50e:	2204      	movs	r2, #4
   1c510:	2100      	movs	r1, #0
   1c512:	0018      	movs	r0, r3
   1c514:	4b0a      	ldr	r3, [pc, #40]	; (1c540 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1c516:	4798      	blx	r3
   1c518:	e000      	b.n	1c51c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1c51a:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1c51c:	697b      	ldr	r3, [r7, #20]
   1c51e:	3301      	adds	r3, #1
   1c520:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1c522:	1dfb      	adds	r3, r7, #7
   1c524:	781a      	ldrb	r2, [r3, #0]
   1c526:	697b      	ldr	r3, [r7, #20]
   1c528:	429a      	cmp	r2, r3
   1c52a:	d900      	bls.n	1c52e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1c52c:	e774      	b.n	1c418 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1c52e:	46bd      	mov	sp, r7
   1c530:	b006      	add	sp, #24
   1c532:	bd80      	pop	{r7, pc}
   1c534:	0003b110 	.word	0x0003b110
   1c538:	0001c389 	.word	0x0001c389
   1c53c:	20000d20 	.word	0x20000d20
   1c540:	00037903 	.word	0x00037903

0001c544 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1c544:	b580      	push	{r7, lr}
   1c546:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1c548:	4b12      	ldr	r3, [pc, #72]	; (1c594 <prvTraceUpdateCounters+0x50>)
   1c54a:	681b      	ldr	r3, [r3, #0]
   1c54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c54e:	2b00      	cmp	r3, #0
   1c550:	d01c      	beq.n	1c58c <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1c552:	4b10      	ldr	r3, [pc, #64]	; (1c594 <prvTraceUpdateCounters+0x50>)
   1c554:	681b      	ldr	r3, [r3, #0]
   1c556:	695a      	ldr	r2, [r3, #20]
   1c558:	3201      	adds	r2, #1
   1c55a:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1c55c:	4b0d      	ldr	r3, [pc, #52]	; (1c594 <prvTraceUpdateCounters+0x50>)
   1c55e:	681b      	ldr	r3, [r3, #0]
   1c560:	69da      	ldr	r2, [r3, #28]
   1c562:	3201      	adds	r2, #1
   1c564:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1c566:	4b0b      	ldr	r3, [pc, #44]	; (1c594 <prvTraceUpdateCounters+0x50>)
   1c568:	681b      	ldr	r3, [r3, #0]
   1c56a:	69da      	ldr	r2, [r3, #28]
   1c56c:	232c      	movs	r3, #44	; 0x2c
   1c56e:	33ff      	adds	r3, #255	; 0xff
   1c570:	429a      	cmp	r2, r3
   1c572:	d907      	bls.n	1c584 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1c574:	4b07      	ldr	r3, [pc, #28]	; (1c594 <prvTraceUpdateCounters+0x50>)
   1c576:	681b      	ldr	r3, [r3, #0]
   1c578:	2201      	movs	r2, #1
   1c57a:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1c57c:	4b05      	ldr	r3, [pc, #20]	; (1c594 <prvTraceUpdateCounters+0x50>)
   1c57e:	681b      	ldr	r3, [r3, #0]
   1c580:	2200      	movs	r2, #0
   1c582:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1c584:	2001      	movs	r0, #1
   1c586:	4b04      	ldr	r3, [pc, #16]	; (1c598 <prvTraceUpdateCounters+0x54>)
   1c588:	4798      	blx	r3
   1c58a:	e000      	b.n	1c58e <prvTraceUpdateCounters+0x4a>
		return;
   1c58c:	46c0      	nop			; (mov r8, r8)
#endif
}
   1c58e:	46bd      	mov	sp, r7
   1c590:	bd80      	pop	{r7, pc}
   1c592:	46c0      	nop			; (mov r8, r8)
   1c594:	20000d20 	.word	0x20000d20
   1c598:	0001c3f1 	.word	0x0001c3f1

0001c59c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1c59c:	b5b0      	push	{r4, r5, r7, lr}
   1c59e:	b086      	sub	sp, #24
   1c5a0:	af00      	add	r7, sp, #0
   1c5a2:	0002      	movs	r2, r0
   1c5a4:	1dbb      	adds	r3, r7, #6
   1c5a6:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1c5a8:	2300      	movs	r3, #0
   1c5aa:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1c5ac:	2300      	movs	r3, #0
   1c5ae:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1c5b0:	2300      	movs	r3, #0
   1c5b2:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1c5b4:	1dbb      	adds	r3, r7, #6
   1c5b6:	881b      	ldrh	r3, [r3, #0]
   1c5b8:	2bff      	cmp	r3, #255	; 0xff
   1c5ba:	d00a      	beq.n	1c5d2 <prvTraceGetDTS+0x36>
   1c5bc:	1dbb      	adds	r3, r7, #6
   1c5be:	881b      	ldrh	r3, [r3, #0]
   1c5c0:	4a60      	ldr	r2, [pc, #384]	; (1c744 <prvTraceGetDTS+0x1a8>)
   1c5c2:	4293      	cmp	r3, r2
   1c5c4:	d005      	beq.n	1c5d2 <prvTraceGetDTS+0x36>
   1c5c6:	4b60      	ldr	r3, [pc, #384]	; (1c748 <prvTraceGetDTS+0x1ac>)
   1c5c8:	0018      	movs	r0, r3
   1c5ca:	4b60      	ldr	r3, [pc, #384]	; (1c74c <prvTraceGetDTS+0x1b0>)
   1c5cc:	4798      	blx	r3
   1c5ce:	2300      	movs	r3, #0
   1c5d0:	e0b3      	b.n	1c73a <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1c5d2:	4b5f      	ldr	r3, [pc, #380]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c5d4:	681b      	ldr	r3, [r3, #0]
   1c5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c5d8:	2b00      	cmp	r3, #0
   1c5da:	d118      	bne.n	1c60e <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1c5dc:	4b5d      	ldr	r3, [pc, #372]	; (1c754 <prvTraceGetDTS+0x1b8>)
   1c5de:	681b      	ldr	r3, [r3, #0]
   1c5e0:	2b00      	cmp	r3, #0
   1c5e2:	d006      	beq.n	1c5f2 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1c5e4:	4b5a      	ldr	r3, [pc, #360]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c5e6:	681b      	ldr	r3, [r3, #0]
   1c5e8:	4a5a      	ldr	r2, [pc, #360]	; (1c754 <prvTraceGetDTS+0x1b8>)
   1c5ea:	6812      	ldr	r2, [r2, #0]
   1c5ec:	0892      	lsrs	r2, r2, #2
   1c5ee:	625a      	str	r2, [r3, #36]	; 0x24
   1c5f0:	e00d      	b.n	1c60e <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1c5f2:	4b59      	ldr	r3, [pc, #356]	; (1c758 <prvTraceGetDTS+0x1bc>)
   1c5f4:	681a      	ldr	r2, [r3, #0]
   1c5f6:	4b59      	ldr	r3, [pc, #356]	; (1c75c <prvTraceGetDTS+0x1c0>)
   1c5f8:	681b      	ldr	r3, [r3, #0]
   1c5fa:	429a      	cmp	r2, r3
   1c5fc:	d007      	beq.n	1c60e <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1c5fe:	4b54      	ldr	r3, [pc, #336]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c600:	681c      	ldr	r4, [r3, #0]
   1c602:	2000      	movs	r0, #0
   1c604:	4b56      	ldr	r3, [pc, #344]	; (1c760 <prvTraceGetDTS+0x1c4>)
   1c606:	4798      	blx	r3
   1c608:	0003      	movs	r3, r0
   1c60a:	089b      	lsrs	r3, r3, #2
   1c60c:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1c60e:	230c      	movs	r3, #12
   1c610:	18fb      	adds	r3, r7, r3
   1c612:	0018      	movs	r0, r3
   1c614:	4b53      	ldr	r3, [pc, #332]	; (1c764 <prvTraceGetDTS+0x1c8>)
   1c616:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1c618:	68fa      	ldr	r2, [r7, #12]
   1c61a:	4b53      	ldr	r3, [pc, #332]	; (1c768 <prvTraceGetDTS+0x1cc>)
   1c61c:	681b      	ldr	r3, [r3, #0]
   1c61e:	1ad3      	subs	r3, r2, r3
   1c620:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1c622:	68fa      	ldr	r2, [r7, #12]
   1c624:	4b50      	ldr	r3, [pc, #320]	; (1c768 <prvTraceGetDTS+0x1cc>)
   1c626:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1c628:	4b49      	ldr	r3, [pc, #292]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c62a:	681b      	ldr	r3, [r3, #0]
   1c62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c62e:	2b00      	cmp	r3, #0
   1c630:	d044      	beq.n	1c6bc <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1c632:	4b47      	ldr	r3, [pc, #284]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c634:	681b      	ldr	r3, [r3, #0]
   1c636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1c638:	693b      	ldr	r3, [r7, #16]
   1c63a:	429a      	cmp	r2, r3
   1c63c:	d21e      	bcs.n	1c67c <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1c63e:	4b44      	ldr	r3, [pc, #272]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c640:	681c      	ldr	r4, [r3, #0]
   1c642:	4b43      	ldr	r3, [pc, #268]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c644:	681b      	ldr	r3, [r3, #0]
   1c646:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1c648:	4b41      	ldr	r3, [pc, #260]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c64a:	681b      	ldr	r3, [r3, #0]
   1c64c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1c64e:	4b47      	ldr	r3, [pc, #284]	; (1c76c <prvTraceGetDTS+0x1d0>)
   1c650:	0011      	movs	r1, r2
   1c652:	6938      	ldr	r0, [r7, #16]
   1c654:	4798      	blx	r3
   1c656:	0003      	movs	r3, r0
   1c658:	18eb      	adds	r3, r5, r3
   1c65a:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1c65c:	4b3c      	ldr	r3, [pc, #240]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c65e:	681c      	ldr	r4, [r3, #0]
   1c660:	4b3b      	ldr	r3, [pc, #236]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c662:	681b      	ldr	r3, [r3, #0]
   1c664:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1c666:	4b3a      	ldr	r3, [pc, #232]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c668:	681b      	ldr	r3, [r3, #0]
   1c66a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1c66c:	693a      	ldr	r2, [r7, #16]
   1c66e:	4b40      	ldr	r3, [pc, #256]	; (1c770 <prvTraceGetDTS+0x1d4>)
   1c670:	0010      	movs	r0, r2
   1c672:	4798      	blx	r3
   1c674:	000b      	movs	r3, r1
   1c676:	18eb      	adds	r3, r5, r3
   1c678:	62a3      	str	r3, [r4, #40]	; 0x28
   1c67a:	e007      	b.n	1c68c <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1c67c:	4b34      	ldr	r3, [pc, #208]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c67e:	681b      	ldr	r3, [r3, #0]
   1c680:	4a33      	ldr	r2, [pc, #204]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c682:	6812      	ldr	r2, [r2, #0]
   1c684:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1c686:	693a      	ldr	r2, [r7, #16]
   1c688:	188a      	adds	r2, r1, r2
   1c68a:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1c68c:	4b30      	ldr	r3, [pc, #192]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c68e:	681b      	ldr	r3, [r3, #0]
   1c690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c692:	4b2f      	ldr	r3, [pc, #188]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c694:	681b      	ldr	r3, [r3, #0]
   1c696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c698:	429a      	cmp	r2, r3
   1c69a:	d313      	bcc.n	1c6c4 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1c69c:	4b2c      	ldr	r3, [pc, #176]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c69e:	681b      	ldr	r3, [r3, #0]
   1c6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c6a2:	3201      	adds	r2, #1
   1c6a4:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1c6a6:	4b2a      	ldr	r3, [pc, #168]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c6a8:	681b      	ldr	r3, [r3, #0]
   1c6aa:	4a29      	ldr	r2, [pc, #164]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c6ac:	6812      	ldr	r2, [r2, #0]
   1c6ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1c6b0:	4a27      	ldr	r2, [pc, #156]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c6b2:	6812      	ldr	r2, [r2, #0]
   1c6b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1c6b6:	1a8a      	subs	r2, r1, r2
   1c6b8:	629a      	str	r2, [r3, #40]	; 0x28
   1c6ba:	e003      	b.n	1c6c4 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1c6bc:	4b24      	ldr	r3, [pc, #144]	; (1c750 <prvTraceGetDTS+0x1b4>)
   1c6be:	681b      	ldr	r3, [r3, #0]
   1c6c0:	68fa      	ldr	r2, [r7, #12]
   1c6c2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1c6c4:	1dbb      	adds	r3, r7, #6
   1c6c6:	881a      	ldrh	r2, [r3, #0]
   1c6c8:	693b      	ldr	r3, [r7, #16]
   1c6ca:	429a      	cmp	r2, r3
   1c6cc:	d22f      	bcs.n	1c72e <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1c6ce:	4b29      	ldr	r3, [pc, #164]	; (1c774 <prvTraceGetDTS+0x1d8>)
   1c6d0:	4798      	blx	r3
   1c6d2:	0003      	movs	r3, r0
   1c6d4:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1c6d6:	697b      	ldr	r3, [r7, #20]
   1c6d8:	2b00      	cmp	r3, #0
   1c6da:	d028      	beq.n	1c72e <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1c6dc:	1dbb      	adds	r3, r7, #6
   1c6de:	881b      	ldrh	r3, [r3, #0]
   1c6e0:	4a18      	ldr	r2, [pc, #96]	; (1c744 <prvTraceGetDTS+0x1a8>)
   1c6e2:	4293      	cmp	r3, r2
   1c6e4:	d10b      	bne.n	1c6fe <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1c6e6:	697b      	ldr	r3, [r7, #20]
   1c6e8:	22a9      	movs	r2, #169	; 0xa9
   1c6ea:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1c6ec:	693b      	ldr	r3, [r7, #16]
   1c6ee:	0c1b      	lsrs	r3, r3, #16
   1c6f0:	b29a      	uxth	r2, r3
   1c6f2:	697b      	ldr	r3, [r7, #20]
   1c6f4:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1c6f6:	697b      	ldr	r3, [r7, #20]
   1c6f8:	2200      	movs	r2, #0
   1c6fa:	705a      	strb	r2, [r3, #1]
   1c6fc:	e015      	b.n	1c72a <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1c6fe:	1dbb      	adds	r3, r7, #6
   1c700:	881b      	ldrh	r3, [r3, #0]
   1c702:	2bff      	cmp	r3, #255	; 0xff
   1c704:	d10d      	bne.n	1c722 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1c706:	697b      	ldr	r3, [r7, #20]
   1c708:	22a8      	movs	r2, #168	; 0xa8
   1c70a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1c70c:	693b      	ldr	r3, [r7, #16]
   1c70e:	0a1b      	lsrs	r3, r3, #8
   1c710:	b29a      	uxth	r2, r3
   1c712:	697b      	ldr	r3, [r7, #20]
   1c714:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1c716:	693b      	ldr	r3, [r7, #16]
   1c718:	0e1b      	lsrs	r3, r3, #24
   1c71a:	b2da      	uxtb	r2, r3
   1c71c:	697b      	ldr	r3, [r7, #20]
   1c71e:	705a      	strb	r2, [r3, #1]
   1c720:	e003      	b.n	1c72a <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1c722:	4b15      	ldr	r3, [pc, #84]	; (1c778 <prvTraceGetDTS+0x1dc>)
   1c724:	0018      	movs	r0, r3
   1c726:	4b09      	ldr	r3, [pc, #36]	; (1c74c <prvTraceGetDTS+0x1b0>)
   1c728:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1c72a:	4b14      	ldr	r3, [pc, #80]	; (1c77c <prvTraceGetDTS+0x1e0>)
   1c72c:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1c72e:	693b      	ldr	r3, [r7, #16]
   1c730:	b29b      	uxth	r3, r3
   1c732:	1dba      	adds	r2, r7, #6
   1c734:	8812      	ldrh	r2, [r2, #0]
   1c736:	4013      	ands	r3, r2
   1c738:	b29b      	uxth	r3, r3
}
   1c73a:	0018      	movs	r0, r3
   1c73c:	46bd      	mov	sp, r7
   1c73e:	b006      	add	sp, #24
   1c740:	bdb0      	pop	{r4, r5, r7, pc}
   1c742:	46c0      	nop			; (mov r8, r8)
   1c744:	0000ffff 	.word	0x0000ffff
   1c748:	0003b168 	.word	0x0003b168
   1c74c:	0001c389 	.word	0x0001c389
   1c750:	20000d20 	.word	0x20000d20
   1c754:	20000c7c 	.word	0x20000c7c
   1c758:	e000e018 	.word	0xe000e018
   1c75c:	20005554 	.word	0x20005554
   1c760:	0002c7d5 	.word	0x0002c7d5
   1c764:	0001c781 	.word	0x0001c781
   1c768:	20000d2c 	.word	0x20000d2c
   1c76c:	00035449 	.word	0x00035449
   1c770:	00035555 	.word	0x00035555
   1c774:	0001bf41 	.word	0x0001bf41
   1c778:	0003b1a8 	.word	0x0003b1a8
   1c77c:	0001c545 	.word	0x0001c545

0001c780 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1c780:	b580      	push	{r7, lr}
   1c782:	b084      	sub	sp, #16
   1c784:	af00      	add	r7, sp, #0
   1c786:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1c788:	2300      	movs	r3, #0
   1c78a:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1c78c:	2300      	movs	r3, #0
   1c78e:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1c790:	4b2d      	ldr	r3, [pc, #180]	; (1c848 <prvTracePortGetTimeStamp+0xc8>)
   1c792:	681b      	ldr	r3, [r3, #0]
   1c794:	2b01      	cmp	r3, #1
   1c796:	d107      	bne.n	1c7a8 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1c798:	687b      	ldr	r3, [r7, #4]
   1c79a:	2b00      	cmp	r3, #0
   1c79c:	d04f      	beq.n	1c83e <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1c79e:	4b2b      	ldr	r3, [pc, #172]	; (1c84c <prvTracePortGetTimeStamp+0xcc>)
   1c7a0:	681a      	ldr	r2, [r3, #0]
   1c7a2:	687b      	ldr	r3, [r7, #4]
   1c7a4:	601a      	str	r2, [r3, #0]
		return;
   1c7a6:	e04a      	b.n	1c83e <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1c7a8:	4b29      	ldr	r3, [pc, #164]	; (1c850 <prvTracePortGetTimeStamp+0xd0>)
   1c7aa:	681a      	ldr	r2, [r3, #0]
   1c7ac:	4b29      	ldr	r3, [pc, #164]	; (1c854 <prvTracePortGetTimeStamp+0xd4>)
   1c7ae:	681b      	ldr	r3, [r3, #0]
   1c7b0:	1ad3      	subs	r3, r2, r3
   1c7b2:	3301      	adds	r3, #1
   1c7b4:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1c7b6:	4b28      	ldr	r3, [pc, #160]	; (1c858 <prvTracePortGetTimeStamp+0xd8>)
   1c7b8:	681a      	ldr	r2, [r3, #0]
   1c7ba:	4b28      	ldr	r3, [pc, #160]	; (1c85c <prvTracePortGetTimeStamp+0xdc>)
   1c7bc:	681b      	ldr	r3, [r3, #0]
   1c7be:	1ad3      	subs	r3, r2, r3
   1c7c0:	3b01      	subs	r3, #1
   1c7c2:	2b00      	cmp	r3, #0
   1c7c4:	db03      	blt.n	1c7ce <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1c7c6:	4b24      	ldr	r3, [pc, #144]	; (1c858 <prvTracePortGetTimeStamp+0xd8>)
   1c7c8:	681b      	ldr	r3, [r3, #0]
   1c7ca:	60fb      	str	r3, [r7, #12]
   1c7cc:	e002      	b.n	1c7d4 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1c7ce:	4b23      	ldr	r3, [pc, #140]	; (1c85c <prvTracePortGetTimeStamp+0xdc>)
   1c7d0:	681b      	ldr	r3, [r3, #0]
   1c7d2:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1c7d4:	4b20      	ldr	r3, [pc, #128]	; (1c858 <prvTracePortGetTimeStamp+0xd8>)
   1c7d6:	681b      	ldr	r3, [r3, #0]
   1c7d8:	68fa      	ldr	r2, [r7, #12]
   1c7da:	429a      	cmp	r2, r3
   1c7dc:	d107      	bne.n	1c7ee <prvTracePortGetTimeStamp+0x6e>
   1c7de:	4b20      	ldr	r3, [pc, #128]	; (1c860 <prvTracePortGetTimeStamp+0xe0>)
   1c7e0:	681b      	ldr	r3, [r3, #0]
   1c7e2:	68ba      	ldr	r2, [r7, #8]
   1c7e4:	429a      	cmp	r2, r3
   1c7e6:	d202      	bcs.n	1c7ee <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1c7e8:	68fb      	ldr	r3, [r7, #12]
   1c7ea:	3301      	adds	r3, #1
   1c7ec:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1c7ee:	687b      	ldr	r3, [r7, #4]
   1c7f0:	2b00      	cmp	r3, #0
   1c7f2:	d016      	beq.n	1c822 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1c7f4:	4b16      	ldr	r3, [pc, #88]	; (1c850 <prvTracePortGetTimeStamp+0xd0>)
   1c7f6:	681b      	ldr	r3, [r3, #0]
   1c7f8:	3301      	adds	r3, #1
   1c7fa:	089b      	lsrs	r3, r3, #2
   1c7fc:	68fa      	ldr	r2, [r7, #12]
   1c7fe:	435a      	muls	r2, r3
   1c800:	4b12      	ldr	r3, [pc, #72]	; (1c84c <prvTracePortGetTimeStamp+0xcc>)
   1c802:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1c804:	4b12      	ldr	r3, [pc, #72]	; (1c850 <prvTracePortGetTimeStamp+0xd0>)
   1c806:	681b      	ldr	r3, [r3, #0]
   1c808:	3301      	adds	r3, #1
   1c80a:	2203      	movs	r2, #3
   1c80c:	4013      	ands	r3, r2
   1c80e:	68fa      	ldr	r2, [r7, #12]
   1c810:	435a      	muls	r2, r3
   1c812:	68bb      	ldr	r3, [r7, #8]
   1c814:	18d3      	adds	r3, r2, r3
   1c816:	089a      	lsrs	r2, r3, #2
   1c818:	4b0c      	ldr	r3, [pc, #48]	; (1c84c <prvTracePortGetTimeStamp+0xcc>)
   1c81a:	681b      	ldr	r3, [r3, #0]
   1c81c:	18d2      	adds	r2, r2, r3
   1c81e:	4b0b      	ldr	r3, [pc, #44]	; (1c84c <prvTracePortGetTimeStamp+0xcc>)
   1c820:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1c822:	4b0d      	ldr	r3, [pc, #52]	; (1c858 <prvTracePortGetTimeStamp+0xd8>)
   1c824:	68fa      	ldr	r2, [r7, #12]
   1c826:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1c828:	687b      	ldr	r3, [r7, #4]
   1c82a:	2b00      	cmp	r3, #0
   1c82c:	d003      	beq.n	1c836 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1c82e:	4b07      	ldr	r3, [pc, #28]	; (1c84c <prvTracePortGetTimeStamp+0xcc>)
   1c830:	681a      	ldr	r2, [r3, #0]
   1c832:	687b      	ldr	r3, [r7, #4]
   1c834:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1c836:	4b0a      	ldr	r3, [pc, #40]	; (1c860 <prvTracePortGetTimeStamp+0xe0>)
   1c838:	68ba      	ldr	r2, [r7, #8]
   1c83a:	601a      	str	r2, [r3, #0]
   1c83c:	e000      	b.n	1c840 <prvTracePortGetTimeStamp+0xc0>
		return;
   1c83e:	46c0      	nop			; (mov r8, r8)
}
   1c840:	46bd      	mov	sp, r7
   1c842:	b004      	add	sp, #16
   1c844:	bd80      	pop	{r7, pc}
   1c846:	46c0      	nop			; (mov r8, r8)
   1c848:	20000c6c 	.word	0x20000c6c
   1c84c:	20000c70 	.word	0x20000c70
   1c850:	e000e014 	.word	0xe000e014
   1c854:	e000e018 	.word	0xe000e018
   1c858:	20000d30 	.word	0x20000d30
   1c85c:	20000c68 	.word	0x20000c68
   1c860:	20000d34 	.word	0x20000d34

0001c864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1c864:	b580      	push	{r7, lr}
   1c866:	b082      	sub	sp, #8
   1c868:	af00      	add	r7, sp, #0
   1c86a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c86c:	687b      	ldr	r3, [r7, #4]
   1c86e:	3308      	adds	r3, #8
   1c870:	001a      	movs	r2, r3
   1c872:	687b      	ldr	r3, [r7, #4]
   1c874:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1c876:	687b      	ldr	r3, [r7, #4]
   1c878:	2201      	movs	r2, #1
   1c87a:	4252      	negs	r2, r2
   1c87c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c87e:	687b      	ldr	r3, [r7, #4]
   1c880:	3308      	adds	r3, #8
   1c882:	001a      	movs	r2, r3
   1c884:	687b      	ldr	r3, [r7, #4]
   1c886:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c888:	687b      	ldr	r3, [r7, #4]
   1c88a:	3308      	adds	r3, #8
   1c88c:	001a      	movs	r2, r3
   1c88e:	687b      	ldr	r3, [r7, #4]
   1c890:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1c892:	687b      	ldr	r3, [r7, #4]
   1c894:	2200      	movs	r2, #0
   1c896:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1c898:	46c0      	nop			; (mov r8, r8)
   1c89a:	46bd      	mov	sp, r7
   1c89c:	b002      	add	sp, #8
   1c89e:	bd80      	pop	{r7, pc}

0001c8a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1c8a0:	b580      	push	{r7, lr}
   1c8a2:	b082      	sub	sp, #8
   1c8a4:	af00      	add	r7, sp, #0
   1c8a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1c8a8:	687b      	ldr	r3, [r7, #4]
   1c8aa:	2200      	movs	r2, #0
   1c8ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1c8ae:	46c0      	nop			; (mov r8, r8)
   1c8b0:	46bd      	mov	sp, r7
   1c8b2:	b002      	add	sp, #8
   1c8b4:	bd80      	pop	{r7, pc}

0001c8b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1c8b6:	b580      	push	{r7, lr}
   1c8b8:	b084      	sub	sp, #16
   1c8ba:	af00      	add	r7, sp, #0
   1c8bc:	6078      	str	r0, [r7, #4]
   1c8be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1c8c0:	687b      	ldr	r3, [r7, #4]
   1c8c2:	685b      	ldr	r3, [r3, #4]
   1c8c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1c8c6:	683b      	ldr	r3, [r7, #0]
   1c8c8:	68fa      	ldr	r2, [r7, #12]
   1c8ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1c8cc:	68fb      	ldr	r3, [r7, #12]
   1c8ce:	689a      	ldr	r2, [r3, #8]
   1c8d0:	683b      	ldr	r3, [r7, #0]
   1c8d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1c8d4:	68fb      	ldr	r3, [r7, #12]
   1c8d6:	689b      	ldr	r3, [r3, #8]
   1c8d8:	683a      	ldr	r2, [r7, #0]
   1c8da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1c8dc:	68fb      	ldr	r3, [r7, #12]
   1c8de:	683a      	ldr	r2, [r7, #0]
   1c8e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1c8e2:	683b      	ldr	r3, [r7, #0]
   1c8e4:	687a      	ldr	r2, [r7, #4]
   1c8e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1c8e8:	687b      	ldr	r3, [r7, #4]
   1c8ea:	681b      	ldr	r3, [r3, #0]
   1c8ec:	1c5a      	adds	r2, r3, #1
   1c8ee:	687b      	ldr	r3, [r7, #4]
   1c8f0:	601a      	str	r2, [r3, #0]
}
   1c8f2:	46c0      	nop			; (mov r8, r8)
   1c8f4:	46bd      	mov	sp, r7
   1c8f6:	b004      	add	sp, #16
   1c8f8:	bd80      	pop	{r7, pc}

0001c8fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1c8fa:	b580      	push	{r7, lr}
   1c8fc:	b084      	sub	sp, #16
   1c8fe:	af00      	add	r7, sp, #0
   1c900:	6078      	str	r0, [r7, #4]
   1c902:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1c904:	683b      	ldr	r3, [r7, #0]
   1c906:	681b      	ldr	r3, [r3, #0]
   1c908:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1c90a:	68bb      	ldr	r3, [r7, #8]
   1c90c:	3301      	adds	r3, #1
   1c90e:	d103      	bne.n	1c918 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1c910:	687b      	ldr	r3, [r7, #4]
   1c912:	691b      	ldr	r3, [r3, #16]
   1c914:	60fb      	str	r3, [r7, #12]
   1c916:	e00c      	b.n	1c932 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c918:	687b      	ldr	r3, [r7, #4]
   1c91a:	3308      	adds	r3, #8
   1c91c:	60fb      	str	r3, [r7, #12]
   1c91e:	e002      	b.n	1c926 <vListInsert+0x2c>
   1c920:	68fb      	ldr	r3, [r7, #12]
   1c922:	685b      	ldr	r3, [r3, #4]
   1c924:	60fb      	str	r3, [r7, #12]
   1c926:	68fb      	ldr	r3, [r7, #12]
   1c928:	685b      	ldr	r3, [r3, #4]
   1c92a:	681a      	ldr	r2, [r3, #0]
   1c92c:	68bb      	ldr	r3, [r7, #8]
   1c92e:	429a      	cmp	r2, r3
   1c930:	d9f6      	bls.n	1c920 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1c932:	68fb      	ldr	r3, [r7, #12]
   1c934:	685a      	ldr	r2, [r3, #4]
   1c936:	683b      	ldr	r3, [r7, #0]
   1c938:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1c93a:	683b      	ldr	r3, [r7, #0]
   1c93c:	685b      	ldr	r3, [r3, #4]
   1c93e:	683a      	ldr	r2, [r7, #0]
   1c940:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1c942:	683b      	ldr	r3, [r7, #0]
   1c944:	68fa      	ldr	r2, [r7, #12]
   1c946:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1c948:	68fb      	ldr	r3, [r7, #12]
   1c94a:	683a      	ldr	r2, [r7, #0]
   1c94c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1c94e:	683b      	ldr	r3, [r7, #0]
   1c950:	687a      	ldr	r2, [r7, #4]
   1c952:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1c954:	687b      	ldr	r3, [r7, #4]
   1c956:	681b      	ldr	r3, [r3, #0]
   1c958:	1c5a      	adds	r2, r3, #1
   1c95a:	687b      	ldr	r3, [r7, #4]
   1c95c:	601a      	str	r2, [r3, #0]
}
   1c95e:	46c0      	nop			; (mov r8, r8)
   1c960:	46bd      	mov	sp, r7
   1c962:	b004      	add	sp, #16
   1c964:	bd80      	pop	{r7, pc}

0001c966 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1c966:	b580      	push	{r7, lr}
   1c968:	b084      	sub	sp, #16
   1c96a:	af00      	add	r7, sp, #0
   1c96c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1c96e:	687b      	ldr	r3, [r7, #4]
   1c970:	691b      	ldr	r3, [r3, #16]
   1c972:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1c974:	687b      	ldr	r3, [r7, #4]
   1c976:	685b      	ldr	r3, [r3, #4]
   1c978:	687a      	ldr	r2, [r7, #4]
   1c97a:	6892      	ldr	r2, [r2, #8]
   1c97c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1c97e:	687b      	ldr	r3, [r7, #4]
   1c980:	689b      	ldr	r3, [r3, #8]
   1c982:	687a      	ldr	r2, [r7, #4]
   1c984:	6852      	ldr	r2, [r2, #4]
   1c986:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1c988:	68fb      	ldr	r3, [r7, #12]
   1c98a:	685a      	ldr	r2, [r3, #4]
   1c98c:	687b      	ldr	r3, [r7, #4]
   1c98e:	429a      	cmp	r2, r3
   1c990:	d103      	bne.n	1c99a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1c992:	687b      	ldr	r3, [r7, #4]
   1c994:	689a      	ldr	r2, [r3, #8]
   1c996:	68fb      	ldr	r3, [r7, #12]
   1c998:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1c99a:	687b      	ldr	r3, [r7, #4]
   1c99c:	2200      	movs	r2, #0
   1c99e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1c9a0:	68fb      	ldr	r3, [r7, #12]
   1c9a2:	681b      	ldr	r3, [r3, #0]
   1c9a4:	1e5a      	subs	r2, r3, #1
   1c9a6:	68fb      	ldr	r3, [r7, #12]
   1c9a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1c9aa:	68fb      	ldr	r3, [r7, #12]
   1c9ac:	681b      	ldr	r3, [r3, #0]
}
   1c9ae:	0018      	movs	r0, r3
   1c9b0:	46bd      	mov	sp, r7
   1c9b2:	b004      	add	sp, #16
   1c9b4:	bd80      	pop	{r7, pc}
	...

0001c9b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1c9b8:	b580      	push	{r7, lr}
   1c9ba:	b084      	sub	sp, #16
   1c9bc:	af00      	add	r7, sp, #0
   1c9be:	60f8      	str	r0, [r7, #12]
   1c9c0:	60b9      	str	r1, [r7, #8]
   1c9c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1c9c4:	68fb      	ldr	r3, [r7, #12]
   1c9c6:	3b04      	subs	r3, #4
   1c9c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1c9ca:	68fb      	ldr	r3, [r7, #12]
   1c9cc:	2280      	movs	r2, #128	; 0x80
   1c9ce:	0452      	lsls	r2, r2, #17
   1c9d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1c9d2:	68fb      	ldr	r3, [r7, #12]
   1c9d4:	3b04      	subs	r3, #4
   1c9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1c9d8:	68ba      	ldr	r2, [r7, #8]
   1c9da:	68fb      	ldr	r3, [r7, #12]
   1c9dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1c9de:	68fb      	ldr	r3, [r7, #12]
   1c9e0:	3b04      	subs	r3, #4
   1c9e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1c9e4:	4a08      	ldr	r2, [pc, #32]	; (1ca08 <pxPortInitialiseStack+0x50>)
   1c9e6:	68fb      	ldr	r3, [r7, #12]
   1c9e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1c9ea:	68fb      	ldr	r3, [r7, #12]
   1c9ec:	3b14      	subs	r3, #20
   1c9ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1c9f0:	687a      	ldr	r2, [r7, #4]
   1c9f2:	68fb      	ldr	r3, [r7, #12]
   1c9f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1c9f6:	68fb      	ldr	r3, [r7, #12]
   1c9f8:	3b20      	subs	r3, #32
   1c9fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1c9fc:	68fb      	ldr	r3, [r7, #12]
}
   1c9fe:	0018      	movs	r0, r3
   1ca00:	46bd      	mov	sp, r7
   1ca02:	b004      	add	sp, #16
   1ca04:	bd80      	pop	{r7, pc}
   1ca06:	46c0      	nop			; (mov r8, r8)
   1ca08:	0001ca0d 	.word	0x0001ca0d

0001ca0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1ca0c:	b580      	push	{r7, lr}
   1ca0e:	b082      	sub	sp, #8
   1ca10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1ca12:	2300      	movs	r3, #0
   1ca14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1ca16:	4b07      	ldr	r3, [pc, #28]	; (1ca34 <prvTaskExitError+0x28>)
   1ca18:	681b      	ldr	r3, [r3, #0]
   1ca1a:	3301      	adds	r3, #1
   1ca1c:	d001      	beq.n	1ca22 <prvTaskExitError+0x16>
   1ca1e:	b672      	cpsid	i
   1ca20:	e7fe      	b.n	1ca20 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1ca22:	b672      	cpsid	i
	while( ulDummy == 0 )
   1ca24:	46c0      	nop			; (mov r8, r8)
   1ca26:	687b      	ldr	r3, [r7, #4]
   1ca28:	2b00      	cmp	r3, #0
   1ca2a:	d0fc      	beq.n	1ca26 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1ca2c:	46c0      	nop			; (mov r8, r8)
   1ca2e:	46bd      	mov	sp, r7
   1ca30:	b002      	add	sp, #8
   1ca32:	bd80      	pop	{r7, pc}
   1ca34:	20000108 	.word	0x20000108

0001ca38 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1ca38:	b580      	push	{r7, lr}
   1ca3a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1ca3c:	46c0      	nop			; (mov r8, r8)
   1ca3e:	46bd      	mov	sp, r7
   1ca40:	bd80      	pop	{r7, pc}
	...

0001ca50 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1ca50:	4a0b      	ldr	r2, [pc, #44]	; (1ca80 <pxCurrentTCBConst2>)
   1ca52:	6813      	ldr	r3, [r2, #0]
   1ca54:	6818      	ldr	r0, [r3, #0]
   1ca56:	3020      	adds	r0, #32
   1ca58:	f380 8809 	msr	PSP, r0
   1ca5c:	2002      	movs	r0, #2
   1ca5e:	f380 8814 	msr	CONTROL, r0
   1ca62:	f3bf 8f6f 	isb	sy
   1ca66:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1ca68:	46ae      	mov	lr, r5
   1ca6a:	bc08      	pop	{r3}
   1ca6c:	bc04      	pop	{r2}
   1ca6e:	b662      	cpsie	i
   1ca70:	4718      	bx	r3
   1ca72:	46c0      	nop			; (mov r8, r8)
   1ca74:	46c0      	nop			; (mov r8, r8)
   1ca76:	46c0      	nop			; (mov r8, r8)
   1ca78:	46c0      	nop			; (mov r8, r8)
   1ca7a:	46c0      	nop			; (mov r8, r8)
   1ca7c:	46c0      	nop			; (mov r8, r8)
   1ca7e:	46c0      	nop			; (mov r8, r8)

0001ca80 <pxCurrentTCBConst2>:
   1ca80:	20004008 	.word	0x20004008
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1ca84:	46c0      	nop			; (mov r8, r8)
   1ca86:	46c0      	nop			; (mov r8, r8)

0001ca88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1ca88:	b580      	push	{r7, lr}
   1ca8a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1ca8c:	4b0e      	ldr	r3, [pc, #56]	; (1cac8 <xPortStartScheduler+0x40>)
   1ca8e:	4a0e      	ldr	r2, [pc, #56]	; (1cac8 <xPortStartScheduler+0x40>)
   1ca90:	6812      	ldr	r2, [r2, #0]
   1ca92:	21ff      	movs	r1, #255	; 0xff
   1ca94:	0409      	lsls	r1, r1, #16
   1ca96:	430a      	orrs	r2, r1
   1ca98:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1ca9a:	4b0b      	ldr	r3, [pc, #44]	; (1cac8 <xPortStartScheduler+0x40>)
   1ca9c:	4a0a      	ldr	r2, [pc, #40]	; (1cac8 <xPortStartScheduler+0x40>)
   1ca9e:	6812      	ldr	r2, [r2, #0]
   1caa0:	21ff      	movs	r1, #255	; 0xff
   1caa2:	0609      	lsls	r1, r1, #24
   1caa4:	430a      	orrs	r2, r1
   1caa6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1caa8:	4b08      	ldr	r3, [pc, #32]	; (1cacc <xPortStartScheduler+0x44>)
   1caaa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1caac:	4b08      	ldr	r3, [pc, #32]	; (1cad0 <xPortStartScheduler+0x48>)
   1caae:	2200      	movs	r2, #0
   1cab0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1cab2:	4b08      	ldr	r3, [pc, #32]	; (1cad4 <xPortStartScheduler+0x4c>)
   1cab4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1cab6:	4b08      	ldr	r3, [pc, #32]	; (1cad8 <xPortStartScheduler+0x50>)
   1cab8:	4798      	blx	r3
	prvTaskExitError();
   1caba:	4b08      	ldr	r3, [pc, #32]	; (1cadc <xPortStartScheduler+0x54>)
   1cabc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1cabe:	2300      	movs	r3, #0
}
   1cac0:	0018      	movs	r0, r3
   1cac2:	46bd      	mov	sp, r7
   1cac4:	bd80      	pop	{r7, pc}
   1cac6:	46c0      	nop			; (mov r8, r8)
   1cac8:	e000ed20 	.word	0xe000ed20
   1cacc:	0001cbe9 	.word	0x0001cbe9
   1cad0:	20000108 	.word	0x20000108
   1cad4:	0001ca51 	.word	0x0001ca51
   1cad8:	0001f145 	.word	0x0001f145
   1cadc:	0001ca0d 	.word	0x0001ca0d

0001cae0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1cae0:	b580      	push	{r7, lr}
   1cae2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1cae4:	4b03      	ldr	r3, [pc, #12]	; (1caf4 <vPortYield+0x14>)
   1cae6:	2280      	movs	r2, #128	; 0x80
   1cae8:	0552      	lsls	r2, r2, #21
   1caea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1caec:	46c0      	nop			; (mov r8, r8)
   1caee:	46bd      	mov	sp, r7
   1caf0:	bd80      	pop	{r7, pc}
   1caf2:	46c0      	nop			; (mov r8, r8)
   1caf4:	e000ed04 	.word	0xe000ed04

0001caf8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1caf8:	b580      	push	{r7, lr}
   1cafa:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1cafc:	b672      	cpsid	i
    uxCriticalNesting++;
   1cafe:	4b06      	ldr	r3, [pc, #24]	; (1cb18 <vPortEnterCritical+0x20>)
   1cb00:	681b      	ldr	r3, [r3, #0]
   1cb02:	1c5a      	adds	r2, r3, #1
   1cb04:	4b04      	ldr	r3, [pc, #16]	; (1cb18 <vPortEnterCritical+0x20>)
   1cb06:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1cb08:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1cb0c:	f3bf 8f6f 	isb	sy
}
   1cb10:	46c0      	nop			; (mov r8, r8)
   1cb12:	46bd      	mov	sp, r7
   1cb14:	bd80      	pop	{r7, pc}
   1cb16:	46c0      	nop			; (mov r8, r8)
   1cb18:	20000108 	.word	0x20000108

0001cb1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1cb1c:	b580      	push	{r7, lr}
   1cb1e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1cb20:	4b09      	ldr	r3, [pc, #36]	; (1cb48 <vPortExitCritical+0x2c>)
   1cb22:	681b      	ldr	r3, [r3, #0]
   1cb24:	2b00      	cmp	r3, #0
   1cb26:	d101      	bne.n	1cb2c <vPortExitCritical+0x10>
   1cb28:	b672      	cpsid	i
   1cb2a:	e7fe      	b.n	1cb2a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1cb2c:	4b06      	ldr	r3, [pc, #24]	; (1cb48 <vPortExitCritical+0x2c>)
   1cb2e:	681b      	ldr	r3, [r3, #0]
   1cb30:	1e5a      	subs	r2, r3, #1
   1cb32:	4b05      	ldr	r3, [pc, #20]	; (1cb48 <vPortExitCritical+0x2c>)
   1cb34:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1cb36:	4b04      	ldr	r3, [pc, #16]	; (1cb48 <vPortExitCritical+0x2c>)
   1cb38:	681b      	ldr	r3, [r3, #0]
   1cb3a:	2b00      	cmp	r3, #0
   1cb3c:	d100      	bne.n	1cb40 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1cb3e:	b662      	cpsie	i
    }
}
   1cb40:	46c0      	nop			; (mov r8, r8)
   1cb42:	46bd      	mov	sp, r7
   1cb44:	bd80      	pop	{r7, pc}
   1cb46:	46c0      	nop			; (mov r8, r8)
   1cb48:	20000108 	.word	0x20000108

0001cb4c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1cb4c:	f3ef 8010 	mrs	r0, PRIMASK
   1cb50:	b672      	cpsid	i
   1cb52:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1cb54:	46c0      	nop			; (mov r8, r8)
   1cb56:	0018      	movs	r0, r3

0001cb58 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1cb58:	f380 8810 	msr	PRIMASK, r0
   1cb5c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1cb5e:	46c0      	nop			; (mov r8, r8)

0001cb60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1cb60:	f3ef 8009 	mrs	r0, PSP
   1cb64:	4b0e      	ldr	r3, [pc, #56]	; (1cba0 <pxCurrentTCBConst>)
   1cb66:	681a      	ldr	r2, [r3, #0]
   1cb68:	3820      	subs	r0, #32
   1cb6a:	6010      	str	r0, [r2, #0]
   1cb6c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1cb6e:	4644      	mov	r4, r8
   1cb70:	464d      	mov	r5, r9
   1cb72:	4656      	mov	r6, sl
   1cb74:	465f      	mov	r7, fp
   1cb76:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1cb78:	b508      	push	{r3, lr}
   1cb7a:	b672      	cpsid	i
   1cb7c:	f002 fae2 	bl	1f144 <vTaskSwitchContext>
   1cb80:	b662      	cpsie	i
   1cb82:	bc0c      	pop	{r2, r3}
   1cb84:	6811      	ldr	r1, [r2, #0]
   1cb86:	6808      	ldr	r0, [r1, #0]
   1cb88:	3010      	adds	r0, #16
   1cb8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1cb8c:	46a0      	mov	r8, r4
   1cb8e:	46a9      	mov	r9, r5
   1cb90:	46b2      	mov	sl, r6
   1cb92:	46bb      	mov	fp, r7
   1cb94:	f380 8809 	msr	PSP, r0
   1cb98:	3820      	subs	r0, #32
   1cb9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1cb9c:	4718      	bx	r3
   1cb9e:	46c0      	nop			; (mov r8, r8)

0001cba0 <pxCurrentTCBConst>:
   1cba0:	20004008 	.word	0x20004008
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1cba4:	46c0      	nop			; (mov r8, r8)
   1cba6:	46c0      	nop			; (mov r8, r8)

0001cba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1cba8:	b580      	push	{r7, lr}
   1cbaa:	b082      	sub	sp, #8
   1cbac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1cbae:	4b0a      	ldr	r3, [pc, #40]	; (1cbd8 <SysTick_Handler+0x30>)
   1cbb0:	4798      	blx	r3
   1cbb2:	0003      	movs	r3, r0
   1cbb4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1cbb6:	4b09      	ldr	r3, [pc, #36]	; (1cbdc <SysTick_Handler+0x34>)
   1cbb8:	4798      	blx	r3
   1cbba:	1e03      	subs	r3, r0, #0
   1cbbc:	d003      	beq.n	1cbc6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1cbbe:	4b08      	ldr	r3, [pc, #32]	; (1cbe0 <SysTick_Handler+0x38>)
   1cbc0:	2280      	movs	r2, #128	; 0x80
   1cbc2:	0552      	lsls	r2, r2, #21
   1cbc4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1cbc6:	687b      	ldr	r3, [r7, #4]
   1cbc8:	0018      	movs	r0, r3
   1cbca:	4b06      	ldr	r3, [pc, #24]	; (1cbe4 <SysTick_Handler+0x3c>)
   1cbcc:	4798      	blx	r3
}
   1cbce:	46c0      	nop			; (mov r8, r8)
   1cbd0:	46bd      	mov	sp, r7
   1cbd2:	b002      	add	sp, #8
   1cbd4:	bd80      	pop	{r7, pc}
   1cbd6:	46c0      	nop			; (mov r8, r8)
   1cbd8:	0001cb4d 	.word	0x0001cb4d
   1cbdc:	0001ef55 	.word	0x0001ef55
   1cbe0:	e000ed04 	.word	0xe000ed04
   1cbe4:	0001cb59 	.word	0x0001cb59

0001cbe8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1cbe8:	b5b0      	push	{r4, r5, r7, lr}
   1cbea:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1cbec:	4b0b      	ldr	r3, [pc, #44]	; (1cc1c <prvSetupTimerInterrupt+0x34>)
   1cbee:	2200      	movs	r2, #0
   1cbf0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1cbf2:	4b0b      	ldr	r3, [pc, #44]	; (1cc20 <prvSetupTimerInterrupt+0x38>)
   1cbf4:	2200      	movs	r2, #0
   1cbf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1cbf8:	4c0a      	ldr	r4, [pc, #40]	; (1cc24 <prvSetupTimerInterrupt+0x3c>)
   1cbfa:	2000      	movs	r0, #0
   1cbfc:	4b0a      	ldr	r3, [pc, #40]	; (1cc28 <prvSetupTimerInterrupt+0x40>)
   1cbfe:	4798      	blx	r3
   1cc00:	4b0a      	ldr	r3, [pc, #40]	; (1cc2c <prvSetupTimerInterrupt+0x44>)
   1cc02:	22fa      	movs	r2, #250	; 0xfa
   1cc04:	0091      	lsls	r1, r2, #2
   1cc06:	4798      	blx	r3
   1cc08:	0003      	movs	r3, r0
   1cc0a:	3b01      	subs	r3, #1
   1cc0c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1cc0e:	4b03      	ldr	r3, [pc, #12]	; (1cc1c <prvSetupTimerInterrupt+0x34>)
   1cc10:	2207      	movs	r2, #7
   1cc12:	601a      	str	r2, [r3, #0]
}
   1cc14:	46c0      	nop			; (mov r8, r8)
   1cc16:	46bd      	mov	sp, r7
   1cc18:	bdb0      	pop	{r4, r5, r7, pc}
   1cc1a:	46c0      	nop			; (mov r8, r8)
   1cc1c:	e000e010 	.word	0xe000e010
   1cc20:	e000e018 	.word	0xe000e018
   1cc24:	e000e014 	.word	0xe000e014
   1cc28:	0002c7d5 	.word	0x0002c7d5
   1cc2c:	00035449 	.word	0x00035449

0001cc30 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1cc30:	b580      	push	{r7, lr}
   1cc32:	b084      	sub	sp, #16
   1cc34:	af00      	add	r7, sp, #0
   1cc36:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1cc38:	2300      	movs	r3, #0
   1cc3a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1cc3c:	687b      	ldr	r3, [r7, #4]
   1cc3e:	2207      	movs	r2, #7
   1cc40:	4013      	ands	r3, r2
   1cc42:	d004      	beq.n	1cc4e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1cc44:	687b      	ldr	r3, [r7, #4]
   1cc46:	2207      	movs	r2, #7
   1cc48:	4393      	bics	r3, r2
   1cc4a:	3308      	adds	r3, #8
   1cc4c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1cc4e:	4b21      	ldr	r3, [pc, #132]	; (1ccd4 <pvPortMalloc+0xa4>)
   1cc50:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1cc52:	4b21      	ldr	r3, [pc, #132]	; (1ccd8 <pvPortMalloc+0xa8>)
   1cc54:	681b      	ldr	r3, [r3, #0]
   1cc56:	2b00      	cmp	r3, #0
   1cc58:	d105      	bne.n	1cc66 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1cc5a:	4b20      	ldr	r3, [pc, #128]	; (1ccdc <pvPortMalloc+0xac>)
   1cc5c:	2207      	movs	r2, #7
   1cc5e:	4393      	bics	r3, r2
   1cc60:	001a      	movs	r2, r3
   1cc62:	4b1d      	ldr	r3, [pc, #116]	; (1ccd8 <pvPortMalloc+0xa8>)
   1cc64:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1cc66:	4b1e      	ldr	r3, [pc, #120]	; (1cce0 <pvPortMalloc+0xb0>)
   1cc68:	681a      	ldr	r2, [r3, #0]
   1cc6a:	687b      	ldr	r3, [r7, #4]
   1cc6c:	18d3      	adds	r3, r2, r3
   1cc6e:	4a1d      	ldr	r2, [pc, #116]	; (1cce4 <pvPortMalloc+0xb4>)
   1cc70:	4293      	cmp	r3, r2
   1cc72:	d813      	bhi.n	1cc9c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1cc74:	4b1a      	ldr	r3, [pc, #104]	; (1cce0 <pvPortMalloc+0xb0>)
   1cc76:	681a      	ldr	r2, [r3, #0]
   1cc78:	687b      	ldr	r3, [r7, #4]
   1cc7a:	18d2      	adds	r2, r2, r3
   1cc7c:	4b18      	ldr	r3, [pc, #96]	; (1cce0 <pvPortMalloc+0xb0>)
   1cc7e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1cc80:	429a      	cmp	r2, r3
   1cc82:	d90b      	bls.n	1cc9c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1cc84:	4b14      	ldr	r3, [pc, #80]	; (1ccd8 <pvPortMalloc+0xa8>)
   1cc86:	681a      	ldr	r2, [r3, #0]
   1cc88:	4b15      	ldr	r3, [pc, #84]	; (1cce0 <pvPortMalloc+0xb0>)
   1cc8a:	681b      	ldr	r3, [r3, #0]
   1cc8c:	18d3      	adds	r3, r2, r3
   1cc8e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1cc90:	4b13      	ldr	r3, [pc, #76]	; (1cce0 <pvPortMalloc+0xb0>)
   1cc92:	681a      	ldr	r2, [r3, #0]
   1cc94:	687b      	ldr	r3, [r7, #4]
   1cc96:	18d2      	adds	r2, r2, r3
   1cc98:	4b11      	ldr	r3, [pc, #68]	; (1cce0 <pvPortMalloc+0xb0>)
   1cc9a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1cc9c:	68fb      	ldr	r3, [r7, #12]
   1cc9e:	2b00      	cmp	r3, #0
   1cca0:	d006      	beq.n	1ccb0 <pvPortMalloc+0x80>
   1cca2:	68fb      	ldr	r3, [r7, #12]
   1cca4:	687a      	ldr	r2, [r7, #4]
   1cca6:	0019      	movs	r1, r3
   1cca8:	2094      	movs	r0, #148	; 0x94
   1ccaa:	4b0f      	ldr	r3, [pc, #60]	; (1cce8 <pvPortMalloc+0xb8>)
   1ccac:	4798      	blx	r3
   1ccae:	e005      	b.n	1ccbc <pvPortMalloc+0x8c>
   1ccb0:	68fb      	ldr	r3, [r7, #12]
   1ccb2:	687a      	ldr	r2, [r7, #4]
   1ccb4:	0019      	movs	r1, r3
   1ccb6:	20e8      	movs	r0, #232	; 0xe8
   1ccb8:	4b0b      	ldr	r3, [pc, #44]	; (1cce8 <pvPortMalloc+0xb8>)
   1ccba:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1ccbc:	4b0b      	ldr	r3, [pc, #44]	; (1ccec <pvPortMalloc+0xbc>)
   1ccbe:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1ccc0:	68fb      	ldr	r3, [r7, #12]
   1ccc2:	2b00      	cmp	r3, #0
   1ccc4:	d101      	bne.n	1ccca <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1ccc6:	4b0a      	ldr	r3, [pc, #40]	; (1ccf0 <pvPortMalloc+0xc0>)
   1ccc8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1ccca:	68fb      	ldr	r3, [r7, #12]
}
   1cccc:	0018      	movs	r0, r3
   1ccce:	46bd      	mov	sp, r7
   1ccd0:	b004      	add	sp, #16
   1ccd2:	bd80      	pop	{r7, pc}
   1ccd4:	0001edb1 	.word	0x0001edb1
   1ccd8:	20004004 	.word	0x20004004
   1ccdc:	20000d40 	.word	0x20000d40
   1cce0:	20004000 	.word	0x20004000
   1cce4:	000032bf 	.word	0x000032bf
   1cce8:	0001b395 	.word	0x0001b395
   1ccec:	0001edc9 	.word	0x0001edc9
   1ccf0:	00035419 	.word	0x00035419

0001ccf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1ccf4:	b580      	push	{r7, lr}
   1ccf6:	b082      	sub	sp, #8
   1ccf8:	af00      	add	r7, sp, #0
   1ccfa:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1ccfc:	687b      	ldr	r3, [r7, #4]
   1ccfe:	2b00      	cmp	r3, #0
   1cd00:	d001      	beq.n	1cd06 <vPortFree+0x12>
   1cd02:	b672      	cpsid	i
   1cd04:	e7fe      	b.n	1cd04 <vPortFree+0x10>
}
   1cd06:	46c0      	nop			; (mov r8, r8)
   1cd08:	46bd      	mov	sp, r7
   1cd0a:	b002      	add	sp, #8
   1cd0c:	bd80      	pop	{r7, pc}
	...

0001cd10 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1cd10:	b580      	push	{r7, lr}
   1cd12:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1cd14:	4b03      	ldr	r3, [pc, #12]	; (1cd24 <xPortGetFreeHeapSize+0x14>)
   1cd16:	681b      	ldr	r3, [r3, #0]
   1cd18:	22cb      	movs	r2, #203	; 0xcb
   1cd1a:	0192      	lsls	r2, r2, #6
   1cd1c:	1ad3      	subs	r3, r2, r3
}
   1cd1e:	0018      	movs	r0, r3
   1cd20:	46bd      	mov	sp, r7
   1cd22:	bd80      	pop	{r7, pc}
   1cd24:	20004000 	.word	0x20004000

0001cd28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1cd28:	b580      	push	{r7, lr}
   1cd2a:	b084      	sub	sp, #16
   1cd2c:	af00      	add	r7, sp, #0
   1cd2e:	6078      	str	r0, [r7, #4]
   1cd30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1cd32:	687b      	ldr	r3, [r7, #4]
   1cd34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1cd36:	68fb      	ldr	r3, [r7, #12]
   1cd38:	2b00      	cmp	r3, #0
   1cd3a:	d101      	bne.n	1cd40 <xQueueGenericReset+0x18>
   1cd3c:	b672      	cpsid	i
   1cd3e:	e7fe      	b.n	1cd3e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1cd40:	4b23      	ldr	r3, [pc, #140]	; (1cdd0 <xQueueGenericReset+0xa8>)
   1cd42:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1cd44:	68fb      	ldr	r3, [r7, #12]
   1cd46:	681a      	ldr	r2, [r3, #0]
   1cd48:	68fb      	ldr	r3, [r7, #12]
   1cd4a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1cd4c:	68fb      	ldr	r3, [r7, #12]
   1cd4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cd50:	434b      	muls	r3, r1
   1cd52:	18d2      	adds	r2, r2, r3
   1cd54:	68fb      	ldr	r3, [r7, #12]
   1cd56:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1cd58:	68fb      	ldr	r3, [r7, #12]
   1cd5a:	2200      	movs	r2, #0
   1cd5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1cd5e:	68fb      	ldr	r3, [r7, #12]
   1cd60:	681a      	ldr	r2, [r3, #0]
   1cd62:	68fb      	ldr	r3, [r7, #12]
   1cd64:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1cd66:	68fb      	ldr	r3, [r7, #12]
   1cd68:	681a      	ldr	r2, [r3, #0]
   1cd6a:	68fb      	ldr	r3, [r7, #12]
   1cd6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cd6e:	1e59      	subs	r1, r3, #1
   1cd70:	68fb      	ldr	r3, [r7, #12]
   1cd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cd74:	434b      	muls	r3, r1
   1cd76:	18d2      	adds	r2, r2, r3
   1cd78:	68fb      	ldr	r3, [r7, #12]
   1cd7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1cd7c:	68fb      	ldr	r3, [r7, #12]
   1cd7e:	2244      	movs	r2, #68	; 0x44
   1cd80:	21ff      	movs	r1, #255	; 0xff
   1cd82:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1cd84:	68fb      	ldr	r3, [r7, #12]
   1cd86:	2245      	movs	r2, #69	; 0x45
   1cd88:	21ff      	movs	r1, #255	; 0xff
   1cd8a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1cd8c:	683b      	ldr	r3, [r7, #0]
   1cd8e:	2b00      	cmp	r3, #0
   1cd90:	d10d      	bne.n	1cdae <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1cd92:	68fb      	ldr	r3, [r7, #12]
   1cd94:	691b      	ldr	r3, [r3, #16]
   1cd96:	2b00      	cmp	r3, #0
   1cd98:	d013      	beq.n	1cdc2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1cd9a:	68fb      	ldr	r3, [r7, #12]
   1cd9c:	3310      	adds	r3, #16
   1cd9e:	0018      	movs	r0, r3
   1cda0:	4b0c      	ldr	r3, [pc, #48]	; (1cdd4 <xQueueGenericReset+0xac>)
   1cda2:	4798      	blx	r3
   1cda4:	1e03      	subs	r3, r0, #0
   1cda6:	d00c      	beq.n	1cdc2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1cda8:	4b0b      	ldr	r3, [pc, #44]	; (1cdd8 <xQueueGenericReset+0xb0>)
   1cdaa:	4798      	blx	r3
   1cdac:	e009      	b.n	1cdc2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1cdae:	68fb      	ldr	r3, [r7, #12]
   1cdb0:	3310      	adds	r3, #16
   1cdb2:	0018      	movs	r0, r3
   1cdb4:	4b09      	ldr	r3, [pc, #36]	; (1cddc <xQueueGenericReset+0xb4>)
   1cdb6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1cdb8:	68fb      	ldr	r3, [r7, #12]
   1cdba:	3324      	adds	r3, #36	; 0x24
   1cdbc:	0018      	movs	r0, r3
   1cdbe:	4b07      	ldr	r3, [pc, #28]	; (1cddc <xQueueGenericReset+0xb4>)
   1cdc0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1cdc2:	4b07      	ldr	r3, [pc, #28]	; (1cde0 <xQueueGenericReset+0xb8>)
   1cdc4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1cdc6:	2301      	movs	r3, #1
}
   1cdc8:	0018      	movs	r0, r3
   1cdca:	46bd      	mov	sp, r7
   1cdcc:	b004      	add	sp, #16
   1cdce:	bd80      	pop	{r7, pc}
   1cdd0:	0001caf9 	.word	0x0001caf9
   1cdd4:	0001f389 	.word	0x0001f389
   1cdd8:	0001cae1 	.word	0x0001cae1
   1cddc:	0001c865 	.word	0x0001c865
   1cde0:	0001cb1d 	.word	0x0001cb1d

0001cde4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1cde4:	b590      	push	{r4, r7, lr}
   1cde6:	b08b      	sub	sp, #44	; 0x2c
   1cde8:	af02      	add	r7, sp, #8
   1cdea:	60f8      	str	r0, [r7, #12]
   1cdec:	60b9      	str	r1, [r7, #8]
   1cdee:	1dfb      	adds	r3, r7, #7
   1cdf0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1cdf2:	68fb      	ldr	r3, [r7, #12]
   1cdf4:	2b00      	cmp	r3, #0
   1cdf6:	d101      	bne.n	1cdfc <xQueueGenericCreate+0x18>
   1cdf8:	b672      	cpsid	i
   1cdfa:	e7fe      	b.n	1cdfa <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1cdfc:	68bb      	ldr	r3, [r7, #8]
   1cdfe:	2b00      	cmp	r3, #0
   1ce00:	d102      	bne.n	1ce08 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1ce02:	2300      	movs	r3, #0
   1ce04:	61fb      	str	r3, [r7, #28]
   1ce06:	e003      	b.n	1ce10 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ce08:	68fb      	ldr	r3, [r7, #12]
   1ce0a:	68ba      	ldr	r2, [r7, #8]
   1ce0c:	4353      	muls	r3, r2
   1ce0e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1ce10:	69fb      	ldr	r3, [r7, #28]
   1ce12:	3354      	adds	r3, #84	; 0x54
   1ce14:	0018      	movs	r0, r3
   1ce16:	4b19      	ldr	r3, [pc, #100]	; (1ce7c <xQueueGenericCreate+0x98>)
   1ce18:	4798      	blx	r3
   1ce1a:	0003      	movs	r3, r0
   1ce1c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1ce1e:	69bb      	ldr	r3, [r7, #24]
   1ce20:	2b00      	cmp	r3, #0
   1ce22:	d00d      	beq.n	1ce40 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1ce24:	69bb      	ldr	r3, [r7, #24]
   1ce26:	3354      	adds	r3, #84	; 0x54
   1ce28:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1ce2a:	1dfb      	adds	r3, r7, #7
   1ce2c:	781c      	ldrb	r4, [r3, #0]
   1ce2e:	697a      	ldr	r2, [r7, #20]
   1ce30:	68b9      	ldr	r1, [r7, #8]
   1ce32:	68f8      	ldr	r0, [r7, #12]
   1ce34:	69bb      	ldr	r3, [r7, #24]
   1ce36:	9300      	str	r3, [sp, #0]
   1ce38:	0023      	movs	r3, r4
   1ce3a:	4c11      	ldr	r4, [pc, #68]	; (1ce80 <xQueueGenericCreate+0x9c>)
   1ce3c:	47a0      	blx	r4
   1ce3e:	e017      	b.n	1ce70 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1ce40:	4b10      	ldr	r3, [pc, #64]	; (1ce84 <xQueueGenericCreate+0xa0>)
   1ce42:	4798      	blx	r3
   1ce44:	0003      	movs	r3, r0
   1ce46:	0018      	movs	r0, r3
   1ce48:	4b0f      	ldr	r3, [pc, #60]	; (1ce88 <xQueueGenericCreate+0xa4>)
   1ce4a:	4798      	blx	r3
   1ce4c:	0003      	movs	r3, r0
   1ce4e:	001a      	movs	r2, r3
   1ce50:	4b0e      	ldr	r3, [pc, #56]	; (1ce8c <xQueueGenericCreate+0xa8>)
   1ce52:	881b      	ldrh	r3, [r3, #0]
   1ce54:	4013      	ands	r3, r2
   1ce56:	b29b      	uxth	r3, r3
   1ce58:	2b00      	cmp	r3, #0
   1ce5a:	d009      	beq.n	1ce70 <xQueueGenericCreate+0x8c>
   1ce5c:	1dfb      	adds	r3, r7, #7
   1ce5e:	781b      	ldrb	r3, [r3, #0]
   1ce60:	4a0b      	ldr	r2, [pc, #44]	; (1ce90 <xQueueGenericCreate+0xac>)
   1ce62:	5cd3      	ldrb	r3, [r2, r3]
   1ce64:	3340      	adds	r3, #64	; 0x40
   1ce66:	b2db      	uxtb	r3, r3
   1ce68:	2100      	movs	r1, #0
   1ce6a:	0018      	movs	r0, r3
   1ce6c:	4b09      	ldr	r3, [pc, #36]	; (1ce94 <xQueueGenericCreate+0xb0>)
   1ce6e:	4798      	blx	r3
		}

		return pxNewQueue;
   1ce70:	69bb      	ldr	r3, [r7, #24]
	}
   1ce72:	0018      	movs	r0, r3
   1ce74:	46bd      	mov	sp, r7
   1ce76:	b009      	add	sp, #36	; 0x24
   1ce78:	bd90      	pop	{r4, r7, pc}
   1ce7a:	46c0      	nop			; (mov r8, r8)
   1ce7c:	0001cc31 	.word	0x0001cc31
   1ce80:	0001ce99 	.word	0x0001ce99
   1ce84:	0001ad89 	.word	0x0001ad89
   1ce88:	0001aaed 	.word	0x0001aaed
   1ce8c:	20000104 	.word	0x20000104
   1ce90:	200000f8 	.word	0x200000f8
   1ce94:	0001b7ed 	.word	0x0001b7ed

0001ce98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1ce98:	b5b0      	push	{r4, r5, r7, lr}
   1ce9a:	b084      	sub	sp, #16
   1ce9c:	af00      	add	r7, sp, #0
   1ce9e:	60f8      	str	r0, [r7, #12]
   1cea0:	60b9      	str	r1, [r7, #8]
   1cea2:	607a      	str	r2, [r7, #4]
   1cea4:	001a      	movs	r2, r3
   1cea6:	1cfb      	adds	r3, r7, #3
   1cea8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1ceaa:	68bb      	ldr	r3, [r7, #8]
   1ceac:	2b00      	cmp	r3, #0
   1ceae:	d103      	bne.n	1ceb8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1ceb0:	6a3b      	ldr	r3, [r7, #32]
   1ceb2:	6a3a      	ldr	r2, [r7, #32]
   1ceb4:	601a      	str	r2, [r3, #0]
   1ceb6:	e002      	b.n	1cebe <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1ceb8:	6a3b      	ldr	r3, [r7, #32]
   1ceba:	687a      	ldr	r2, [r7, #4]
   1cebc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1cebe:	6a3b      	ldr	r3, [r7, #32]
   1cec0:	68fa      	ldr	r2, [r7, #12]
   1cec2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1cec4:	6a3b      	ldr	r3, [r7, #32]
   1cec6:	68ba      	ldr	r2, [r7, #8]
   1cec8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1ceca:	6a3b      	ldr	r3, [r7, #32]
   1cecc:	2101      	movs	r1, #1
   1cece:	0018      	movs	r0, r3
   1ced0:	4b41      	ldr	r3, [pc, #260]	; (1cfd8 <prvInitialiseNewQueue+0x140>)
   1ced2:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1ced4:	6a3b      	ldr	r3, [r7, #32]
   1ced6:	1cfa      	adds	r2, r7, #3
   1ced8:	2150      	movs	r1, #80	; 0x50
   1ceda:	7812      	ldrb	r2, [r2, #0]
   1cedc:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1cede:	6a3b      	ldr	r3, [r7, #32]
   1cee0:	2200      	movs	r2, #0
   1cee2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1cee4:	6a3b      	ldr	r3, [r7, #32]
   1cee6:	0018      	movs	r0, r3
   1cee8:	4b3c      	ldr	r3, [pc, #240]	; (1cfdc <prvInitialiseNewQueue+0x144>)
   1ceea:	4798      	blx	r3
   1ceec:	0003      	movs	r3, r0
   1ceee:	001a      	movs	r2, r3
   1cef0:	4b3b      	ldr	r3, [pc, #236]	; (1cfe0 <prvInitialiseNewQueue+0x148>)
   1cef2:	5c9b      	ldrb	r3, [r3, r2]
   1cef4:	0018      	movs	r0, r3
   1cef6:	4b3b      	ldr	r3, [pc, #236]	; (1cfe4 <prvInitialiseNewQueue+0x14c>)
   1cef8:	4798      	blx	r3
   1cefa:	0003      	movs	r3, r0
   1cefc:	b29a      	uxth	r2, r3
   1cefe:	6a3b      	ldr	r3, [r7, #32]
   1cf00:	0011      	movs	r1, r2
   1cf02:	0018      	movs	r0, r3
   1cf04:	4b38      	ldr	r3, [pc, #224]	; (1cfe8 <prvInitialiseNewQueue+0x150>)
   1cf06:	4798      	blx	r3
   1cf08:	4b38      	ldr	r3, [pc, #224]	; (1cfec <prvInitialiseNewQueue+0x154>)
   1cf0a:	881a      	ldrh	r2, [r3, #0]
   1cf0c:	6a3b      	ldr	r3, [r7, #32]
   1cf0e:	0011      	movs	r1, r2
   1cf10:	0018      	movs	r0, r3
   1cf12:	4b37      	ldr	r3, [pc, #220]	; (1cff0 <prvInitialiseNewQueue+0x158>)
   1cf14:	4798      	blx	r3
   1cf16:	6a3b      	ldr	r3, [r7, #32]
   1cf18:	0018      	movs	r0, r3
   1cf1a:	4b30      	ldr	r3, [pc, #192]	; (1cfdc <prvInitialiseNewQueue+0x144>)
   1cf1c:	4798      	blx	r3
   1cf1e:	0003      	movs	r3, r0
   1cf20:	001a      	movs	r2, r3
   1cf22:	4b2f      	ldr	r3, [pc, #188]	; (1cfe0 <prvInitialiseNewQueue+0x148>)
   1cf24:	5c9c      	ldrb	r4, [r3, r2]
   1cf26:	6a3b      	ldr	r3, [r7, #32]
   1cf28:	0018      	movs	r0, r3
   1cf2a:	4b32      	ldr	r3, [pc, #200]	; (1cff4 <prvInitialiseNewQueue+0x15c>)
   1cf2c:	4798      	blx	r3
   1cf2e:	0003      	movs	r3, r0
   1cf30:	b2db      	uxtb	r3, r3
   1cf32:	0019      	movs	r1, r3
   1cf34:	0020      	movs	r0, r4
   1cf36:	4b30      	ldr	r3, [pc, #192]	; (1cff8 <prvInitialiseNewQueue+0x160>)
   1cf38:	4798      	blx	r3
   1cf3a:	4b30      	ldr	r3, [pc, #192]	; (1cffc <prvInitialiseNewQueue+0x164>)
   1cf3c:	4798      	blx	r3
   1cf3e:	0003      	movs	r3, r0
   1cf40:	0018      	movs	r0, r3
   1cf42:	4b2f      	ldr	r3, [pc, #188]	; (1d000 <prvInitialiseNewQueue+0x168>)
   1cf44:	4798      	blx	r3
   1cf46:	0003      	movs	r3, r0
   1cf48:	001a      	movs	r2, r3
   1cf4a:	4b2e      	ldr	r3, [pc, #184]	; (1d004 <prvInitialiseNewQueue+0x16c>)
   1cf4c:	881b      	ldrh	r3, [r3, #0]
   1cf4e:	4013      	ands	r3, r2
   1cf50:	b29b      	uxth	r3, r3
   1cf52:	2b00      	cmp	r3, #0
   1cf54:	d029      	beq.n	1cfaa <prvInitialiseNewQueue+0x112>
   1cf56:	6a3b      	ldr	r3, [r7, #32]
   1cf58:	0018      	movs	r0, r3
   1cf5a:	4b2b      	ldr	r3, [pc, #172]	; (1d008 <prvInitialiseNewQueue+0x170>)
   1cf5c:	4798      	blx	r3
   1cf5e:	0003      	movs	r3, r0
   1cf60:	001a      	movs	r2, r3
   1cf62:	4b28      	ldr	r3, [pc, #160]	; (1d004 <prvInitialiseNewQueue+0x16c>)
   1cf64:	881b      	ldrh	r3, [r3, #0]
   1cf66:	4013      	ands	r3, r2
   1cf68:	b29b      	uxth	r3, r3
   1cf6a:	2b00      	cmp	r3, #0
   1cf6c:	d01d      	beq.n	1cfaa <prvInitialiseNewQueue+0x112>
   1cf6e:	6a3b      	ldr	r3, [r7, #32]
   1cf70:	0018      	movs	r0, r3
   1cf72:	4b1a      	ldr	r3, [pc, #104]	; (1cfdc <prvInitialiseNewQueue+0x144>)
   1cf74:	4798      	blx	r3
   1cf76:	0003      	movs	r3, r0
   1cf78:	001a      	movs	r2, r3
   1cf7a:	4b19      	ldr	r3, [pc, #100]	; (1cfe0 <prvInitialiseNewQueue+0x148>)
   1cf7c:	5c9b      	ldrb	r3, [r3, r2]
   1cf7e:	3318      	adds	r3, #24
   1cf80:	b2db      	uxtb	r3, r3
   1cf82:	001d      	movs	r5, r3
   1cf84:	6a3b      	ldr	r3, [r7, #32]
   1cf86:	0018      	movs	r0, r3
   1cf88:	4b14      	ldr	r3, [pc, #80]	; (1cfdc <prvInitialiseNewQueue+0x144>)
   1cf8a:	4798      	blx	r3
   1cf8c:	0003      	movs	r3, r0
   1cf8e:	001a      	movs	r2, r3
   1cf90:	4b13      	ldr	r3, [pc, #76]	; (1cfe0 <prvInitialiseNewQueue+0x148>)
   1cf92:	5c9c      	ldrb	r4, [r3, r2]
   1cf94:	6a3b      	ldr	r3, [r7, #32]
   1cf96:	0018      	movs	r0, r3
   1cf98:	4b16      	ldr	r3, [pc, #88]	; (1cff4 <prvInitialiseNewQueue+0x15c>)
   1cf9a:	4798      	blx	r3
   1cf9c:	0003      	movs	r3, r0
   1cf9e:	b2db      	uxtb	r3, r3
   1cfa0:	001a      	movs	r2, r3
   1cfa2:	0021      	movs	r1, r4
   1cfa4:	0028      	movs	r0, r5
   1cfa6:	4b19      	ldr	r3, [pc, #100]	; (1d00c <prvInitialiseNewQueue+0x174>)
   1cfa8:	4798      	blx	r3
   1cfaa:	6a3b      	ldr	r3, [r7, #32]
   1cfac:	0018      	movs	r0, r3
   1cfae:	4b0b      	ldr	r3, [pc, #44]	; (1cfdc <prvInitialiseNewQueue+0x144>)
   1cfb0:	4798      	blx	r3
   1cfb2:	0003      	movs	r3, r0
   1cfb4:	001a      	movs	r2, r3
   1cfb6:	4b0a      	ldr	r3, [pc, #40]	; (1cfe0 <prvInitialiseNewQueue+0x148>)
   1cfb8:	5c9c      	ldrb	r4, [r3, r2]
   1cfba:	6a3b      	ldr	r3, [r7, #32]
   1cfbc:	0018      	movs	r0, r3
   1cfbe:	4b0d      	ldr	r3, [pc, #52]	; (1cff4 <prvInitialiseNewQueue+0x15c>)
   1cfc0:	4798      	blx	r3
   1cfc2:	0003      	movs	r3, r0
   1cfc4:	b2db      	uxtb	r3, r3
   1cfc6:	2200      	movs	r2, #0
   1cfc8:	0019      	movs	r1, r3
   1cfca:	0020      	movs	r0, r4
   1cfcc:	4b10      	ldr	r3, [pc, #64]	; (1d010 <prvInitialiseNewQueue+0x178>)
   1cfce:	4798      	blx	r3
}
   1cfd0:	46c0      	nop			; (mov r8, r8)
   1cfd2:	46bd      	mov	sp, r7
   1cfd4:	b004      	add	sp, #16
   1cfd6:	bdb0      	pop	{r4, r5, r7, pc}
   1cfd8:	0001cd29 	.word	0x0001cd29
   1cfdc:	0001aaad 	.word	0x0001aaad
   1cfe0:	200000f8 	.word	0x200000f8
   1cfe4:	0001c06d 	.word	0x0001c06d
   1cfe8:	0001abd1 	.word	0x0001abd1
   1cfec:	20000106 	.word	0x20000106
   1cff0:	0001ac0d 	.word	0x0001ac0d
   1cff4:	0001ab8d 	.word	0x0001ab8d
   1cff8:	0001c205 	.word	0x0001c205
   1cffc:	0001ad89 	.word	0x0001ad89
   1d000:	0001aaed 	.word	0x0001aaed
   1d004:	20000104 	.word	0x20000104
   1d008:	0001abad 	.word	0x0001abad
   1d00c:	0001b4e5 	.word	0x0001b4e5
   1d010:	0001bb41 	.word	0x0001bb41

0001d014 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1d014:	b590      	push	{r4, r7, lr}
   1d016:	b083      	sub	sp, #12
   1d018:	af00      	add	r7, sp, #0
   1d01a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1d01c:	687b      	ldr	r3, [r7, #4]
   1d01e:	2b00      	cmp	r3, #0
   1d020:	d00e      	beq.n	1d040 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1d022:	687b      	ldr	r3, [r7, #4]
   1d024:	2200      	movs	r2, #0
   1d026:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1d028:	687b      	ldr	r3, [r7, #4]
   1d02a:	2200      	movs	r2, #0
   1d02c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1d02e:	687b      	ldr	r3, [r7, #4]
   1d030:	2200      	movs	r2, #0
   1d032:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1d034:	6878      	ldr	r0, [r7, #4]
   1d036:	2300      	movs	r3, #0
   1d038:	2200      	movs	r2, #0
   1d03a:	2100      	movs	r1, #0
   1d03c:	4c02      	ldr	r4, [pc, #8]	; (1d048 <prvInitialiseMutex+0x34>)
   1d03e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1d040:	46c0      	nop			; (mov r8, r8)
   1d042:	46bd      	mov	sp, r7
   1d044:	b003      	add	sp, #12
   1d046:	bd90      	pop	{r4, r7, pc}
   1d048:	0001d08d 	.word	0x0001d08d

0001d04c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1d04c:	b580      	push	{r7, lr}
   1d04e:	b086      	sub	sp, #24
   1d050:	af00      	add	r7, sp, #0
   1d052:	0002      	movs	r2, r0
   1d054:	1dfb      	adds	r3, r7, #7
   1d056:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1d058:	2301      	movs	r3, #1
   1d05a:	617b      	str	r3, [r7, #20]
   1d05c:	2300      	movs	r3, #0
   1d05e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1d060:	1dfb      	adds	r3, r7, #7
   1d062:	781a      	ldrb	r2, [r3, #0]
   1d064:	6939      	ldr	r1, [r7, #16]
   1d066:	697b      	ldr	r3, [r7, #20]
   1d068:	0018      	movs	r0, r3
   1d06a:	4b06      	ldr	r3, [pc, #24]	; (1d084 <xQueueCreateMutex+0x38>)
   1d06c:	4798      	blx	r3
   1d06e:	0003      	movs	r3, r0
   1d070:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1d072:	68fb      	ldr	r3, [r7, #12]
   1d074:	0018      	movs	r0, r3
   1d076:	4b04      	ldr	r3, [pc, #16]	; (1d088 <xQueueCreateMutex+0x3c>)
   1d078:	4798      	blx	r3

		return pxNewQueue;
   1d07a:	68fb      	ldr	r3, [r7, #12]
	}
   1d07c:	0018      	movs	r0, r3
   1d07e:	46bd      	mov	sp, r7
   1d080:	b006      	add	sp, #24
   1d082:	bd80      	pop	{r7, pc}
   1d084:	0001cde5 	.word	0x0001cde5
   1d088:	0001d015 	.word	0x0001d015

0001d08c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1d08c:	b5b0      	push	{r4, r5, r7, lr}
   1d08e:	b08a      	sub	sp, #40	; 0x28
   1d090:	af00      	add	r7, sp, #0
   1d092:	60f8      	str	r0, [r7, #12]
   1d094:	60b9      	str	r1, [r7, #8]
   1d096:	607a      	str	r2, [r7, #4]
   1d098:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1d09a:	2300      	movs	r3, #0
   1d09c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d09e:	68fb      	ldr	r3, [r7, #12]
   1d0a0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1d0a2:	6a3b      	ldr	r3, [r7, #32]
   1d0a4:	2b00      	cmp	r3, #0
   1d0a6:	d101      	bne.n	1d0ac <xQueueGenericSend+0x20>
   1d0a8:	b672      	cpsid	i
   1d0aa:	e7fe      	b.n	1d0aa <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1d0ac:	68bb      	ldr	r3, [r7, #8]
   1d0ae:	2b00      	cmp	r3, #0
   1d0b0:	d103      	bne.n	1d0ba <xQueueGenericSend+0x2e>
   1d0b2:	6a3b      	ldr	r3, [r7, #32]
   1d0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d0b6:	2b00      	cmp	r3, #0
   1d0b8:	d101      	bne.n	1d0be <xQueueGenericSend+0x32>
   1d0ba:	2301      	movs	r3, #1
   1d0bc:	e000      	b.n	1d0c0 <xQueueGenericSend+0x34>
   1d0be:	2300      	movs	r3, #0
   1d0c0:	2b00      	cmp	r3, #0
   1d0c2:	d101      	bne.n	1d0c8 <xQueueGenericSend+0x3c>
   1d0c4:	b672      	cpsid	i
   1d0c6:	e7fe      	b.n	1d0c6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1d0c8:	683b      	ldr	r3, [r7, #0]
   1d0ca:	2b02      	cmp	r3, #2
   1d0cc:	d103      	bne.n	1d0d6 <xQueueGenericSend+0x4a>
   1d0ce:	6a3b      	ldr	r3, [r7, #32]
   1d0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1d0d2:	2b01      	cmp	r3, #1
   1d0d4:	d101      	bne.n	1d0da <xQueueGenericSend+0x4e>
   1d0d6:	2301      	movs	r3, #1
   1d0d8:	e000      	b.n	1d0dc <xQueueGenericSend+0x50>
   1d0da:	2300      	movs	r3, #0
   1d0dc:	2b00      	cmp	r3, #0
   1d0de:	d101      	bne.n	1d0e4 <xQueueGenericSend+0x58>
   1d0e0:	b672      	cpsid	i
   1d0e2:	e7fe      	b.n	1d0e2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d0e4:	4bbc      	ldr	r3, [pc, #752]	; (1d3d8 <xQueueGenericSend+0x34c>)
   1d0e6:	4798      	blx	r3
   1d0e8:	1e03      	subs	r3, r0, #0
   1d0ea:	d102      	bne.n	1d0f2 <xQueueGenericSend+0x66>
   1d0ec:	687b      	ldr	r3, [r7, #4]
   1d0ee:	2b00      	cmp	r3, #0
   1d0f0:	d101      	bne.n	1d0f6 <xQueueGenericSend+0x6a>
   1d0f2:	2301      	movs	r3, #1
   1d0f4:	e000      	b.n	1d0f8 <xQueueGenericSend+0x6c>
   1d0f6:	2300      	movs	r3, #0
   1d0f8:	2b00      	cmp	r3, #0
   1d0fa:	d101      	bne.n	1d100 <xQueueGenericSend+0x74>
   1d0fc:	b672      	cpsid	i
   1d0fe:	e7fe      	b.n	1d0fe <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1d100:	4bb6      	ldr	r3, [pc, #728]	; (1d3dc <xQueueGenericSend+0x350>)
   1d102:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1d104:	6a3b      	ldr	r3, [r7, #32]
   1d106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1d108:	6a3b      	ldr	r3, [r7, #32]
   1d10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1d10c:	429a      	cmp	r2, r3
   1d10e:	d303      	bcc.n	1d118 <xQueueGenericSend+0x8c>
   1d110:	683b      	ldr	r3, [r7, #0]
   1d112:	2b02      	cmp	r3, #2
   1d114:	d000      	beq.n	1d118 <xQueueGenericSend+0x8c>
   1d116:	e08e      	b.n	1d236 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1d118:	4bb1      	ldr	r3, [pc, #708]	; (1d3e0 <xQueueGenericSend+0x354>)
   1d11a:	4798      	blx	r3
   1d11c:	0003      	movs	r3, r0
   1d11e:	0018      	movs	r0, r3
   1d120:	4bb0      	ldr	r3, [pc, #704]	; (1d3e4 <xQueueGenericSend+0x358>)
   1d122:	4798      	blx	r3
   1d124:	0003      	movs	r3, r0
   1d126:	001a      	movs	r2, r3
   1d128:	4baf      	ldr	r3, [pc, #700]	; (1d3e8 <xQueueGenericSend+0x35c>)
   1d12a:	881b      	ldrh	r3, [r3, #0]
   1d12c:	4013      	ands	r3, r2
   1d12e:	b29b      	uxth	r3, r3
   1d130:	2b00      	cmp	r3, #0
   1d132:	d02e      	beq.n	1d192 <xQueueGenericSend+0x106>
   1d134:	6a3b      	ldr	r3, [r7, #32]
   1d136:	0018      	movs	r0, r3
   1d138:	4bac      	ldr	r3, [pc, #688]	; (1d3ec <xQueueGenericSend+0x360>)
   1d13a:	4798      	blx	r3
   1d13c:	0003      	movs	r3, r0
   1d13e:	001a      	movs	r2, r3
   1d140:	4ba9      	ldr	r3, [pc, #676]	; (1d3e8 <xQueueGenericSend+0x35c>)
   1d142:	881b      	ldrh	r3, [r3, #0]
   1d144:	4013      	ands	r3, r2
   1d146:	b29b      	uxth	r3, r3
   1d148:	2b00      	cmp	r3, #0
   1d14a:	d022      	beq.n	1d192 <xQueueGenericSend+0x106>
   1d14c:	683b      	ldr	r3, [r7, #0]
   1d14e:	2b00      	cmp	r3, #0
   1d150:	d10b      	bne.n	1d16a <xQueueGenericSend+0xde>
   1d152:	6a3b      	ldr	r3, [r7, #32]
   1d154:	0018      	movs	r0, r3
   1d156:	4ba6      	ldr	r3, [pc, #664]	; (1d3f0 <xQueueGenericSend+0x364>)
   1d158:	4798      	blx	r3
   1d15a:	0003      	movs	r3, r0
   1d15c:	001a      	movs	r2, r3
   1d15e:	4ba5      	ldr	r3, [pc, #660]	; (1d3f4 <xQueueGenericSend+0x368>)
   1d160:	5c9b      	ldrb	r3, [r3, r2]
   1d162:	3320      	adds	r3, #32
   1d164:	b2db      	uxtb	r3, r3
   1d166:	001d      	movs	r5, r3
   1d168:	e000      	b.n	1d16c <xQueueGenericSend+0xe0>
   1d16a:	2525      	movs	r5, #37	; 0x25
   1d16c:	6a3b      	ldr	r3, [r7, #32]
   1d16e:	0018      	movs	r0, r3
   1d170:	4b9f      	ldr	r3, [pc, #636]	; (1d3f0 <xQueueGenericSend+0x364>)
   1d172:	4798      	blx	r3
   1d174:	0003      	movs	r3, r0
   1d176:	001a      	movs	r2, r3
   1d178:	4b9e      	ldr	r3, [pc, #632]	; (1d3f4 <xQueueGenericSend+0x368>)
   1d17a:	5c9c      	ldrb	r4, [r3, r2]
   1d17c:	6a3b      	ldr	r3, [r7, #32]
   1d17e:	0018      	movs	r0, r3
   1d180:	4b9d      	ldr	r3, [pc, #628]	; (1d3f8 <xQueueGenericSend+0x36c>)
   1d182:	4798      	blx	r3
   1d184:	0003      	movs	r3, r0
   1d186:	b2db      	uxtb	r3, r3
   1d188:	001a      	movs	r2, r3
   1d18a:	0021      	movs	r1, r4
   1d18c:	0028      	movs	r0, r5
   1d18e:	4b9b      	ldr	r3, [pc, #620]	; (1d3fc <xQueueGenericSend+0x370>)
   1d190:	4798      	blx	r3
   1d192:	6a3b      	ldr	r3, [r7, #32]
   1d194:	0018      	movs	r0, r3
   1d196:	4b96      	ldr	r3, [pc, #600]	; (1d3f0 <xQueueGenericSend+0x364>)
   1d198:	4798      	blx	r3
   1d19a:	0003      	movs	r3, r0
   1d19c:	001a      	movs	r2, r3
   1d19e:	4b95      	ldr	r3, [pc, #596]	; (1d3f4 <xQueueGenericSend+0x368>)
   1d1a0:	5c9c      	ldrb	r4, [r3, r2]
   1d1a2:	6a3b      	ldr	r3, [r7, #32]
   1d1a4:	0018      	movs	r0, r3
   1d1a6:	4b94      	ldr	r3, [pc, #592]	; (1d3f8 <xQueueGenericSend+0x36c>)
   1d1a8:	4798      	blx	r3
   1d1aa:	0003      	movs	r3, r0
   1d1ac:	b2dd      	uxtb	r5, r3
   1d1ae:	6a3b      	ldr	r3, [r7, #32]
   1d1b0:	0018      	movs	r0, r3
   1d1b2:	4b8f      	ldr	r3, [pc, #572]	; (1d3f0 <xQueueGenericSend+0x364>)
   1d1b4:	4798      	blx	r3
   1d1b6:	0003      	movs	r3, r0
   1d1b8:	001a      	movs	r2, r3
   1d1ba:	4b8e      	ldr	r3, [pc, #568]	; (1d3f4 <xQueueGenericSend+0x368>)
   1d1bc:	5c9b      	ldrb	r3, [r3, r2]
   1d1be:	2b02      	cmp	r3, #2
   1d1c0:	d005      	beq.n	1d1ce <xQueueGenericSend+0x142>
   1d1c2:	6a3b      	ldr	r3, [r7, #32]
   1d1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d1c6:	b2db      	uxtb	r3, r3
   1d1c8:	3301      	adds	r3, #1
   1d1ca:	b2db      	uxtb	r3, r3
   1d1cc:	e000      	b.n	1d1d0 <xQueueGenericSend+0x144>
   1d1ce:	2300      	movs	r3, #0
   1d1d0:	001a      	movs	r2, r3
   1d1d2:	0029      	movs	r1, r5
   1d1d4:	0020      	movs	r0, r4
   1d1d6:	4b8a      	ldr	r3, [pc, #552]	; (1d400 <xQueueGenericSend+0x374>)
   1d1d8:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1d1da:	683a      	ldr	r2, [r7, #0]
   1d1dc:	68b9      	ldr	r1, [r7, #8]
   1d1de:	6a3b      	ldr	r3, [r7, #32]
   1d1e0:	0018      	movs	r0, r3
   1d1e2:	4b88      	ldr	r3, [pc, #544]	; (1d404 <xQueueGenericSend+0x378>)
   1d1e4:	4798      	blx	r3
   1d1e6:	0003      	movs	r3, r0
   1d1e8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1d1ea:	6a3b      	ldr	r3, [r7, #32]
   1d1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d1ee:	2b00      	cmp	r3, #0
   1d1f0:	d00a      	beq.n	1d208 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1d1f2:	683a      	ldr	r2, [r7, #0]
   1d1f4:	6a3b      	ldr	r3, [r7, #32]
   1d1f6:	0011      	movs	r1, r2
   1d1f8:	0018      	movs	r0, r3
   1d1fa:	4b83      	ldr	r3, [pc, #524]	; (1d408 <xQueueGenericSend+0x37c>)
   1d1fc:	4798      	blx	r3
   1d1fe:	1e03      	subs	r3, r0, #0
   1d200:	d015      	beq.n	1d22e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1d202:	4b82      	ldr	r3, [pc, #520]	; (1d40c <xQueueGenericSend+0x380>)
   1d204:	4798      	blx	r3
   1d206:	e012      	b.n	1d22e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1d208:	6a3b      	ldr	r3, [r7, #32]
   1d20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d20c:	2b00      	cmp	r3, #0
   1d20e:	d009      	beq.n	1d224 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1d210:	6a3b      	ldr	r3, [r7, #32]
   1d212:	3324      	adds	r3, #36	; 0x24
   1d214:	0018      	movs	r0, r3
   1d216:	4b7e      	ldr	r3, [pc, #504]	; (1d410 <xQueueGenericSend+0x384>)
   1d218:	4798      	blx	r3
   1d21a:	1e03      	subs	r3, r0, #0
   1d21c:	d007      	beq.n	1d22e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1d21e:	4b7b      	ldr	r3, [pc, #492]	; (1d40c <xQueueGenericSend+0x380>)
   1d220:	4798      	blx	r3
   1d222:	e004      	b.n	1d22e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1d224:	69fb      	ldr	r3, [r7, #28]
   1d226:	2b00      	cmp	r3, #0
   1d228:	d001      	beq.n	1d22e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1d22a:	4b78      	ldr	r3, [pc, #480]	; (1d40c <xQueueGenericSend+0x380>)
   1d22c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1d22e:	4b79      	ldr	r3, [pc, #484]	; (1d414 <xQueueGenericSend+0x388>)
   1d230:	4798      	blx	r3
				return pdPASS;
   1d232:	2301      	movs	r3, #1
   1d234:	e142      	b.n	1d4bc <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1d236:	687b      	ldr	r3, [r7, #4]
   1d238:	2b00      	cmp	r3, #0
   1d23a:	d140      	bne.n	1d2be <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1d23c:	4b75      	ldr	r3, [pc, #468]	; (1d414 <xQueueGenericSend+0x388>)
   1d23e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1d240:	4b67      	ldr	r3, [pc, #412]	; (1d3e0 <xQueueGenericSend+0x354>)
   1d242:	4798      	blx	r3
   1d244:	0003      	movs	r3, r0
   1d246:	0018      	movs	r0, r3
   1d248:	4b66      	ldr	r3, [pc, #408]	; (1d3e4 <xQueueGenericSend+0x358>)
   1d24a:	4798      	blx	r3
   1d24c:	0003      	movs	r3, r0
   1d24e:	001a      	movs	r2, r3
   1d250:	4b65      	ldr	r3, [pc, #404]	; (1d3e8 <xQueueGenericSend+0x35c>)
   1d252:	881b      	ldrh	r3, [r3, #0]
   1d254:	4013      	ands	r3, r2
   1d256:	b29b      	uxth	r3, r3
   1d258:	2b00      	cmp	r3, #0
   1d25a:	d02e      	beq.n	1d2ba <xQueueGenericSend+0x22e>
   1d25c:	6a3b      	ldr	r3, [r7, #32]
   1d25e:	0018      	movs	r0, r3
   1d260:	4b62      	ldr	r3, [pc, #392]	; (1d3ec <xQueueGenericSend+0x360>)
   1d262:	4798      	blx	r3
   1d264:	0003      	movs	r3, r0
   1d266:	001a      	movs	r2, r3
   1d268:	4b5f      	ldr	r3, [pc, #380]	; (1d3e8 <xQueueGenericSend+0x35c>)
   1d26a:	881b      	ldrh	r3, [r3, #0]
   1d26c:	4013      	ands	r3, r2
   1d26e:	b29b      	uxth	r3, r3
   1d270:	2b00      	cmp	r3, #0
   1d272:	d022      	beq.n	1d2ba <xQueueGenericSend+0x22e>
   1d274:	683b      	ldr	r3, [r7, #0]
   1d276:	2b00      	cmp	r3, #0
   1d278:	d10b      	bne.n	1d292 <xQueueGenericSend+0x206>
   1d27a:	6a3b      	ldr	r3, [r7, #32]
   1d27c:	0018      	movs	r0, r3
   1d27e:	4b5c      	ldr	r3, [pc, #368]	; (1d3f0 <xQueueGenericSend+0x364>)
   1d280:	4798      	blx	r3
   1d282:	0003      	movs	r3, r0
   1d284:	001a      	movs	r2, r3
   1d286:	4b5b      	ldr	r3, [pc, #364]	; (1d3f4 <xQueueGenericSend+0x368>)
   1d288:	5c9b      	ldrb	r3, [r3, r2]
   1d28a:	3348      	adds	r3, #72	; 0x48
   1d28c:	b2db      	uxtb	r3, r3
   1d28e:	001d      	movs	r5, r3
   1d290:	e000      	b.n	1d294 <xQueueGenericSend+0x208>
   1d292:	254d      	movs	r5, #77	; 0x4d
   1d294:	6a3b      	ldr	r3, [r7, #32]
   1d296:	0018      	movs	r0, r3
   1d298:	4b55      	ldr	r3, [pc, #340]	; (1d3f0 <xQueueGenericSend+0x364>)
   1d29a:	4798      	blx	r3
   1d29c:	0003      	movs	r3, r0
   1d29e:	001a      	movs	r2, r3
   1d2a0:	4b54      	ldr	r3, [pc, #336]	; (1d3f4 <xQueueGenericSend+0x368>)
   1d2a2:	5c9c      	ldrb	r4, [r3, r2]
   1d2a4:	6a3b      	ldr	r3, [r7, #32]
   1d2a6:	0018      	movs	r0, r3
   1d2a8:	4b53      	ldr	r3, [pc, #332]	; (1d3f8 <xQueueGenericSend+0x36c>)
   1d2aa:	4798      	blx	r3
   1d2ac:	0003      	movs	r3, r0
   1d2ae:	b2db      	uxtb	r3, r3
   1d2b0:	001a      	movs	r2, r3
   1d2b2:	0021      	movs	r1, r4
   1d2b4:	0028      	movs	r0, r5
   1d2b6:	4b51      	ldr	r3, [pc, #324]	; (1d3fc <xQueueGenericSend+0x370>)
   1d2b8:	4798      	blx	r3
					return errQUEUE_FULL;
   1d2ba:	2300      	movs	r3, #0
   1d2bc:	e0fe      	b.n	1d4bc <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1d2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d2c0:	2b00      	cmp	r3, #0
   1d2c2:	d106      	bne.n	1d2d2 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1d2c4:	2314      	movs	r3, #20
   1d2c6:	18fb      	adds	r3, r7, r3
   1d2c8:	0018      	movs	r0, r3
   1d2ca:	4b53      	ldr	r3, [pc, #332]	; (1d418 <xQueueGenericSend+0x38c>)
   1d2cc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1d2ce:	2301      	movs	r3, #1
   1d2d0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1d2d2:	4b50      	ldr	r3, [pc, #320]	; (1d414 <xQueueGenericSend+0x388>)
   1d2d4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1d2d6:	4b51      	ldr	r3, [pc, #324]	; (1d41c <xQueueGenericSend+0x390>)
   1d2d8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1d2da:	4b40      	ldr	r3, [pc, #256]	; (1d3dc <xQueueGenericSend+0x350>)
   1d2dc:	4798      	blx	r3
   1d2de:	6a3b      	ldr	r3, [r7, #32]
   1d2e0:	2244      	movs	r2, #68	; 0x44
   1d2e2:	5c9b      	ldrb	r3, [r3, r2]
   1d2e4:	b25b      	sxtb	r3, r3
   1d2e6:	3301      	adds	r3, #1
   1d2e8:	d103      	bne.n	1d2f2 <xQueueGenericSend+0x266>
   1d2ea:	6a3b      	ldr	r3, [r7, #32]
   1d2ec:	2244      	movs	r2, #68	; 0x44
   1d2ee:	2100      	movs	r1, #0
   1d2f0:	5499      	strb	r1, [r3, r2]
   1d2f2:	6a3b      	ldr	r3, [r7, #32]
   1d2f4:	2245      	movs	r2, #69	; 0x45
   1d2f6:	5c9b      	ldrb	r3, [r3, r2]
   1d2f8:	b25b      	sxtb	r3, r3
   1d2fa:	3301      	adds	r3, #1
   1d2fc:	d103      	bne.n	1d306 <xQueueGenericSend+0x27a>
   1d2fe:	6a3b      	ldr	r3, [r7, #32]
   1d300:	2245      	movs	r2, #69	; 0x45
   1d302:	2100      	movs	r1, #0
   1d304:	5499      	strb	r1, [r3, r2]
   1d306:	4b43      	ldr	r3, [pc, #268]	; (1d414 <xQueueGenericSend+0x388>)
   1d308:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1d30a:	1d3a      	adds	r2, r7, #4
   1d30c:	2314      	movs	r3, #20
   1d30e:	18fb      	adds	r3, r7, r3
   1d310:	0011      	movs	r1, r2
   1d312:	0018      	movs	r0, r3
   1d314:	4b42      	ldr	r3, [pc, #264]	; (1d420 <xQueueGenericSend+0x394>)
   1d316:	4798      	blx	r3
   1d318:	1e03      	subs	r3, r0, #0
   1d31a:	d000      	beq.n	1d31e <xQueueGenericSend+0x292>
   1d31c:	e08a      	b.n	1d434 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1d31e:	6a3b      	ldr	r3, [r7, #32]
   1d320:	0018      	movs	r0, r3
   1d322:	4b40      	ldr	r3, [pc, #256]	; (1d424 <xQueueGenericSend+0x398>)
   1d324:	4798      	blx	r3
   1d326:	1e03      	subs	r3, r0, #0
   1d328:	d04f      	beq.n	1d3ca <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1d32a:	4b2d      	ldr	r3, [pc, #180]	; (1d3e0 <xQueueGenericSend+0x354>)
   1d32c:	4798      	blx	r3
   1d32e:	0003      	movs	r3, r0
   1d330:	0018      	movs	r0, r3
   1d332:	4b2c      	ldr	r3, [pc, #176]	; (1d3e4 <xQueueGenericSend+0x358>)
   1d334:	4798      	blx	r3
   1d336:	0003      	movs	r3, r0
   1d338:	001a      	movs	r2, r3
   1d33a:	4b2b      	ldr	r3, [pc, #172]	; (1d3e8 <xQueueGenericSend+0x35c>)
   1d33c:	881b      	ldrh	r3, [r3, #0]
   1d33e:	4013      	ands	r3, r2
   1d340:	b29b      	uxth	r3, r3
   1d342:	2b00      	cmp	r3, #0
   1d344:	d02e      	beq.n	1d3a4 <xQueueGenericSend+0x318>
   1d346:	6a3b      	ldr	r3, [r7, #32]
   1d348:	0018      	movs	r0, r3
   1d34a:	4b28      	ldr	r3, [pc, #160]	; (1d3ec <xQueueGenericSend+0x360>)
   1d34c:	4798      	blx	r3
   1d34e:	0003      	movs	r3, r0
   1d350:	001a      	movs	r2, r3
   1d352:	4b25      	ldr	r3, [pc, #148]	; (1d3e8 <xQueueGenericSend+0x35c>)
   1d354:	881b      	ldrh	r3, [r3, #0]
   1d356:	4013      	ands	r3, r2
   1d358:	b29b      	uxth	r3, r3
   1d35a:	2b00      	cmp	r3, #0
   1d35c:	d022      	beq.n	1d3a4 <xQueueGenericSend+0x318>
   1d35e:	683b      	ldr	r3, [r7, #0]
   1d360:	2b00      	cmp	r3, #0
   1d362:	d10b      	bne.n	1d37c <xQueueGenericSend+0x2f0>
   1d364:	6a3b      	ldr	r3, [r7, #32]
   1d366:	0018      	movs	r0, r3
   1d368:	4b21      	ldr	r3, [pc, #132]	; (1d3f0 <xQueueGenericSend+0x364>)
   1d36a:	4798      	blx	r3
   1d36c:	0003      	movs	r3, r0
   1d36e:	001a      	movs	r2, r3
   1d370:	4b20      	ldr	r3, [pc, #128]	; (1d3f4 <xQueueGenericSend+0x368>)
   1d372:	5c9b      	ldrb	r3, [r3, r2]
   1d374:	3370      	adds	r3, #112	; 0x70
   1d376:	b2db      	uxtb	r3, r3
   1d378:	001d      	movs	r5, r3
   1d37a:	e000      	b.n	1d37e <xQueueGenericSend+0x2f2>
   1d37c:	2575      	movs	r5, #117	; 0x75
   1d37e:	6a3b      	ldr	r3, [r7, #32]
   1d380:	0018      	movs	r0, r3
   1d382:	4b1b      	ldr	r3, [pc, #108]	; (1d3f0 <xQueueGenericSend+0x364>)
   1d384:	4798      	blx	r3
   1d386:	0003      	movs	r3, r0
   1d388:	001a      	movs	r2, r3
   1d38a:	4b1a      	ldr	r3, [pc, #104]	; (1d3f4 <xQueueGenericSend+0x368>)
   1d38c:	5c9c      	ldrb	r4, [r3, r2]
   1d38e:	6a3b      	ldr	r3, [r7, #32]
   1d390:	0018      	movs	r0, r3
   1d392:	4b19      	ldr	r3, [pc, #100]	; (1d3f8 <xQueueGenericSend+0x36c>)
   1d394:	4798      	blx	r3
   1d396:	0003      	movs	r3, r0
   1d398:	b2db      	uxtb	r3, r3
   1d39a:	001a      	movs	r2, r3
   1d39c:	0021      	movs	r1, r4
   1d39e:	0028      	movs	r0, r5
   1d3a0:	4b16      	ldr	r3, [pc, #88]	; (1d3fc <xQueueGenericSend+0x370>)
   1d3a2:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1d3a4:	6a3b      	ldr	r3, [r7, #32]
   1d3a6:	3310      	adds	r3, #16
   1d3a8:	687a      	ldr	r2, [r7, #4]
   1d3aa:	0011      	movs	r1, r2
   1d3ac:	0018      	movs	r0, r3
   1d3ae:	4b1e      	ldr	r3, [pc, #120]	; (1d428 <xQueueGenericSend+0x39c>)
   1d3b0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1d3b2:	6a3b      	ldr	r3, [r7, #32]
   1d3b4:	0018      	movs	r0, r3
   1d3b6:	4b1d      	ldr	r3, [pc, #116]	; (1d42c <xQueueGenericSend+0x3a0>)
   1d3b8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1d3ba:	4b1d      	ldr	r3, [pc, #116]	; (1d430 <xQueueGenericSend+0x3a4>)
   1d3bc:	4798      	blx	r3
   1d3be:	1e03      	subs	r3, r0, #0
   1d3c0:	d000      	beq.n	1d3c4 <xQueueGenericSend+0x338>
   1d3c2:	e69d      	b.n	1d100 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1d3c4:	4b11      	ldr	r3, [pc, #68]	; (1d40c <xQueueGenericSend+0x380>)
   1d3c6:	4798      	blx	r3
   1d3c8:	e69a      	b.n	1d100 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1d3ca:	6a3b      	ldr	r3, [r7, #32]
   1d3cc:	0018      	movs	r0, r3
   1d3ce:	4b17      	ldr	r3, [pc, #92]	; (1d42c <xQueueGenericSend+0x3a0>)
   1d3d0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1d3d2:	4b17      	ldr	r3, [pc, #92]	; (1d430 <xQueueGenericSend+0x3a4>)
   1d3d4:	4798      	blx	r3
   1d3d6:	e693      	b.n	1d100 <xQueueGenericSend+0x74>
   1d3d8:	0001f819 	.word	0x0001f819
   1d3dc:	0001caf9 	.word	0x0001caf9
   1d3e0:	0001ad89 	.word	0x0001ad89
   1d3e4:	0001aaed 	.word	0x0001aaed
   1d3e8:	20000104 	.word	0x20000104
   1d3ec:	0001abad 	.word	0x0001abad
   1d3f0:	0001aaad 	.word	0x0001aaad
   1d3f4:	200000f8 	.word	0x200000f8
   1d3f8:	0001ab8d 	.word	0x0001ab8d
   1d3fc:	0001b4e5 	.word	0x0001b4e5
   1d400:	0001bb41 	.word	0x0001bb41
   1d404:	0001e2c5 	.word	0x0001e2c5
   1d408:	0001e5c9 	.word	0x0001e5c9
   1d40c:	0001cae1 	.word	0x0001cae1
   1d410:	0001f389 	.word	0x0001f389
   1d414:	0001cb1d 	.word	0x0001cb1d
   1d418:	0001f4c9 	.word	0x0001f4c9
   1d41c:	0001edb1 	.word	0x0001edb1
   1d420:	0001f4f1 	.word	0x0001f4f1
   1d424:	0001e519 	.word	0x0001e519
   1d428:	0001f265 	.word	0x0001f265
   1d42c:	0001e3f5 	.word	0x0001e3f5
   1d430:	0001edc9 	.word	0x0001edc9
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1d434:	6a3b      	ldr	r3, [r7, #32]
   1d436:	0018      	movs	r0, r3
   1d438:	4b22      	ldr	r3, [pc, #136]	; (1d4c4 <xQueueGenericSend+0x438>)
   1d43a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1d43c:	4b22      	ldr	r3, [pc, #136]	; (1d4c8 <xQueueGenericSend+0x43c>)
   1d43e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1d440:	4b22      	ldr	r3, [pc, #136]	; (1d4cc <xQueueGenericSend+0x440>)
   1d442:	4798      	blx	r3
   1d444:	0003      	movs	r3, r0
   1d446:	0018      	movs	r0, r3
   1d448:	4b21      	ldr	r3, [pc, #132]	; (1d4d0 <xQueueGenericSend+0x444>)
   1d44a:	4798      	blx	r3
   1d44c:	0003      	movs	r3, r0
   1d44e:	001a      	movs	r2, r3
   1d450:	4b20      	ldr	r3, [pc, #128]	; (1d4d4 <xQueueGenericSend+0x448>)
   1d452:	881b      	ldrh	r3, [r3, #0]
   1d454:	4013      	ands	r3, r2
   1d456:	b29b      	uxth	r3, r3
   1d458:	2b00      	cmp	r3, #0
   1d45a:	d02e      	beq.n	1d4ba <xQueueGenericSend+0x42e>
   1d45c:	6a3b      	ldr	r3, [r7, #32]
   1d45e:	0018      	movs	r0, r3
   1d460:	4b1d      	ldr	r3, [pc, #116]	; (1d4d8 <xQueueGenericSend+0x44c>)
   1d462:	4798      	blx	r3
   1d464:	0003      	movs	r3, r0
   1d466:	001a      	movs	r2, r3
   1d468:	4b1a      	ldr	r3, [pc, #104]	; (1d4d4 <xQueueGenericSend+0x448>)
   1d46a:	881b      	ldrh	r3, [r3, #0]
   1d46c:	4013      	ands	r3, r2
   1d46e:	b29b      	uxth	r3, r3
   1d470:	2b00      	cmp	r3, #0
   1d472:	d022      	beq.n	1d4ba <xQueueGenericSend+0x42e>
   1d474:	683b      	ldr	r3, [r7, #0]
   1d476:	2b00      	cmp	r3, #0
   1d478:	d10b      	bne.n	1d492 <xQueueGenericSend+0x406>
   1d47a:	6a3b      	ldr	r3, [r7, #32]
   1d47c:	0018      	movs	r0, r3
   1d47e:	4b17      	ldr	r3, [pc, #92]	; (1d4dc <xQueueGenericSend+0x450>)
   1d480:	4798      	blx	r3
   1d482:	0003      	movs	r3, r0
   1d484:	001a      	movs	r2, r3
   1d486:	4b16      	ldr	r3, [pc, #88]	; (1d4e0 <xQueueGenericSend+0x454>)
   1d488:	5c9b      	ldrb	r3, [r3, r2]
   1d48a:	3348      	adds	r3, #72	; 0x48
   1d48c:	b2db      	uxtb	r3, r3
   1d48e:	001d      	movs	r5, r3
   1d490:	e000      	b.n	1d494 <xQueueGenericSend+0x408>
   1d492:	254d      	movs	r5, #77	; 0x4d
   1d494:	6a3b      	ldr	r3, [r7, #32]
   1d496:	0018      	movs	r0, r3
   1d498:	4b10      	ldr	r3, [pc, #64]	; (1d4dc <xQueueGenericSend+0x450>)
   1d49a:	4798      	blx	r3
   1d49c:	0003      	movs	r3, r0
   1d49e:	001a      	movs	r2, r3
   1d4a0:	4b0f      	ldr	r3, [pc, #60]	; (1d4e0 <xQueueGenericSend+0x454>)
   1d4a2:	5c9c      	ldrb	r4, [r3, r2]
   1d4a4:	6a3b      	ldr	r3, [r7, #32]
   1d4a6:	0018      	movs	r0, r3
   1d4a8:	4b0e      	ldr	r3, [pc, #56]	; (1d4e4 <xQueueGenericSend+0x458>)
   1d4aa:	4798      	blx	r3
   1d4ac:	0003      	movs	r3, r0
   1d4ae:	b2db      	uxtb	r3, r3
   1d4b0:	001a      	movs	r2, r3
   1d4b2:	0021      	movs	r1, r4
   1d4b4:	0028      	movs	r0, r5
   1d4b6:	4b0c      	ldr	r3, [pc, #48]	; (1d4e8 <xQueueGenericSend+0x45c>)
   1d4b8:	4798      	blx	r3
			return errQUEUE_FULL;
   1d4ba:	2300      	movs	r3, #0
		}
	}
}
   1d4bc:	0018      	movs	r0, r3
   1d4be:	46bd      	mov	sp, r7
   1d4c0:	b00a      	add	sp, #40	; 0x28
   1d4c2:	bdb0      	pop	{r4, r5, r7, pc}
   1d4c4:	0001e3f5 	.word	0x0001e3f5
   1d4c8:	0001edc9 	.word	0x0001edc9
   1d4cc:	0001ad89 	.word	0x0001ad89
   1d4d0:	0001aaed 	.word	0x0001aaed
   1d4d4:	20000104 	.word	0x20000104
   1d4d8:	0001abad 	.word	0x0001abad
   1d4dc:	0001aaad 	.word	0x0001aaad
   1d4e0:	200000f8 	.word	0x200000f8
   1d4e4:	0001ab8d 	.word	0x0001ab8d
   1d4e8:	0001b4e5 	.word	0x0001b4e5

0001d4ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1d4ec:	b5b0      	push	{r4, r5, r7, lr}
   1d4ee:	b088      	sub	sp, #32
   1d4f0:	af00      	add	r7, sp, #0
   1d4f2:	60f8      	str	r0, [r7, #12]
   1d4f4:	60b9      	str	r1, [r7, #8]
   1d4f6:	607a      	str	r2, [r7, #4]
   1d4f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d4fa:	68fb      	ldr	r3, [r7, #12]
   1d4fc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1d4fe:	69bb      	ldr	r3, [r7, #24]
   1d500:	2b00      	cmp	r3, #0
   1d502:	d101      	bne.n	1d508 <xQueueGenericSendFromISR+0x1c>
   1d504:	b672      	cpsid	i
   1d506:	e7fe      	b.n	1d506 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1d508:	68bb      	ldr	r3, [r7, #8]
   1d50a:	2b00      	cmp	r3, #0
   1d50c:	d103      	bne.n	1d516 <xQueueGenericSendFromISR+0x2a>
   1d50e:	69bb      	ldr	r3, [r7, #24]
   1d510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d512:	2b00      	cmp	r3, #0
   1d514:	d101      	bne.n	1d51a <xQueueGenericSendFromISR+0x2e>
   1d516:	2301      	movs	r3, #1
   1d518:	e000      	b.n	1d51c <xQueueGenericSendFromISR+0x30>
   1d51a:	2300      	movs	r3, #0
   1d51c:	2b00      	cmp	r3, #0
   1d51e:	d101      	bne.n	1d524 <xQueueGenericSendFromISR+0x38>
   1d520:	b672      	cpsid	i
   1d522:	e7fe      	b.n	1d522 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1d524:	683b      	ldr	r3, [r7, #0]
   1d526:	2b02      	cmp	r3, #2
   1d528:	d103      	bne.n	1d532 <xQueueGenericSendFromISR+0x46>
   1d52a:	69bb      	ldr	r3, [r7, #24]
   1d52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1d52e:	2b01      	cmp	r3, #1
   1d530:	d101      	bne.n	1d536 <xQueueGenericSendFromISR+0x4a>
   1d532:	2301      	movs	r3, #1
   1d534:	e000      	b.n	1d538 <xQueueGenericSendFromISR+0x4c>
   1d536:	2300      	movs	r3, #0
   1d538:	2b00      	cmp	r3, #0
   1d53a:	d101      	bne.n	1d540 <xQueueGenericSendFromISR+0x54>
   1d53c:	b672      	cpsid	i
   1d53e:	e7fe      	b.n	1d53e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1d540:	4b68      	ldr	r3, [pc, #416]	; (1d6e4 <xQueueGenericSendFromISR+0x1f8>)
   1d542:	4798      	blx	r3
   1d544:	0003      	movs	r3, r0
   1d546:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1d548:	69bb      	ldr	r3, [r7, #24]
   1d54a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1d54c:	69bb      	ldr	r3, [r7, #24]
   1d54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1d550:	429a      	cmp	r2, r3
   1d552:	d303      	bcc.n	1d55c <xQueueGenericSendFromISR+0x70>
   1d554:	683b      	ldr	r3, [r7, #0]
   1d556:	2b02      	cmp	r3, #2
   1d558:	d000      	beq.n	1d55c <xQueueGenericSendFromISR+0x70>
   1d55a:	e088      	b.n	1d66e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1d55c:	2313      	movs	r3, #19
   1d55e:	18fb      	adds	r3, r7, r3
   1d560:	69ba      	ldr	r2, [r7, #24]
   1d562:	2145      	movs	r1, #69	; 0x45
   1d564:	5c52      	ldrb	r2, [r2, r1]
   1d566:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1d568:	69bb      	ldr	r3, [r7, #24]
   1d56a:	0018      	movs	r0, r3
   1d56c:	4b5e      	ldr	r3, [pc, #376]	; (1d6e8 <xQueueGenericSendFromISR+0x1fc>)
   1d56e:	4798      	blx	r3
   1d570:	0003      	movs	r3, r0
   1d572:	001a      	movs	r2, r3
   1d574:	4b5d      	ldr	r3, [pc, #372]	; (1d6ec <xQueueGenericSendFromISR+0x200>)
   1d576:	881b      	ldrh	r3, [r3, #0]
   1d578:	4013      	ands	r3, r2
   1d57a:	b29b      	uxth	r3, r3
   1d57c:	2b00      	cmp	r3, #0
   1d57e:	d022      	beq.n	1d5c6 <xQueueGenericSendFromISR+0xda>
   1d580:	683b      	ldr	r3, [r7, #0]
   1d582:	2b00      	cmp	r3, #0
   1d584:	d10b      	bne.n	1d59e <xQueueGenericSendFromISR+0xb2>
   1d586:	69bb      	ldr	r3, [r7, #24]
   1d588:	0018      	movs	r0, r3
   1d58a:	4b59      	ldr	r3, [pc, #356]	; (1d6f0 <xQueueGenericSendFromISR+0x204>)
   1d58c:	4798      	blx	r3
   1d58e:	0003      	movs	r3, r0
   1d590:	001a      	movs	r2, r3
   1d592:	4b58      	ldr	r3, [pc, #352]	; (1d6f4 <xQueueGenericSendFromISR+0x208>)
   1d594:	5c9b      	ldrb	r3, [r3, r2]
   1d596:	3330      	adds	r3, #48	; 0x30
   1d598:	b2db      	uxtb	r3, r3
   1d59a:	001d      	movs	r5, r3
   1d59c:	e000      	b.n	1d5a0 <xQueueGenericSendFromISR+0xb4>
   1d59e:	2535      	movs	r5, #53	; 0x35
   1d5a0:	69bb      	ldr	r3, [r7, #24]
   1d5a2:	0018      	movs	r0, r3
   1d5a4:	4b52      	ldr	r3, [pc, #328]	; (1d6f0 <xQueueGenericSendFromISR+0x204>)
   1d5a6:	4798      	blx	r3
   1d5a8:	0003      	movs	r3, r0
   1d5aa:	001a      	movs	r2, r3
   1d5ac:	4b51      	ldr	r3, [pc, #324]	; (1d6f4 <xQueueGenericSendFromISR+0x208>)
   1d5ae:	5c9c      	ldrb	r4, [r3, r2]
   1d5b0:	69bb      	ldr	r3, [r7, #24]
   1d5b2:	0018      	movs	r0, r3
   1d5b4:	4b50      	ldr	r3, [pc, #320]	; (1d6f8 <xQueueGenericSendFromISR+0x20c>)
   1d5b6:	4798      	blx	r3
   1d5b8:	0003      	movs	r3, r0
   1d5ba:	b2db      	uxtb	r3, r3
   1d5bc:	001a      	movs	r2, r3
   1d5be:	0021      	movs	r1, r4
   1d5c0:	0028      	movs	r0, r5
   1d5c2:	4b4e      	ldr	r3, [pc, #312]	; (1d6fc <xQueueGenericSendFromISR+0x210>)
   1d5c4:	4798      	blx	r3
   1d5c6:	69bb      	ldr	r3, [r7, #24]
   1d5c8:	0018      	movs	r0, r3
   1d5ca:	4b49      	ldr	r3, [pc, #292]	; (1d6f0 <xQueueGenericSendFromISR+0x204>)
   1d5cc:	4798      	blx	r3
   1d5ce:	0003      	movs	r3, r0
   1d5d0:	001a      	movs	r2, r3
   1d5d2:	4b48      	ldr	r3, [pc, #288]	; (1d6f4 <xQueueGenericSendFromISR+0x208>)
   1d5d4:	5c9c      	ldrb	r4, [r3, r2]
   1d5d6:	69bb      	ldr	r3, [r7, #24]
   1d5d8:	0018      	movs	r0, r3
   1d5da:	4b47      	ldr	r3, [pc, #284]	; (1d6f8 <xQueueGenericSendFromISR+0x20c>)
   1d5dc:	4798      	blx	r3
   1d5de:	0003      	movs	r3, r0
   1d5e0:	b2d9      	uxtb	r1, r3
   1d5e2:	69bb      	ldr	r3, [r7, #24]
   1d5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d5e6:	b2db      	uxtb	r3, r3
   1d5e8:	3301      	adds	r3, #1
   1d5ea:	b2db      	uxtb	r3, r3
   1d5ec:	001a      	movs	r2, r3
   1d5ee:	0020      	movs	r0, r4
   1d5f0:	4b43      	ldr	r3, [pc, #268]	; (1d700 <xQueueGenericSendFromISR+0x214>)
   1d5f2:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1d5f4:	683a      	ldr	r2, [r7, #0]
   1d5f6:	68b9      	ldr	r1, [r7, #8]
   1d5f8:	69bb      	ldr	r3, [r7, #24]
   1d5fa:	0018      	movs	r0, r3
   1d5fc:	4b41      	ldr	r3, [pc, #260]	; (1d704 <xQueueGenericSendFromISR+0x218>)
   1d5fe:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1d600:	2313      	movs	r3, #19
   1d602:	18fb      	adds	r3, r7, r3
   1d604:	781b      	ldrb	r3, [r3, #0]
   1d606:	b25b      	sxtb	r3, r3
   1d608:	3301      	adds	r3, #1
   1d60a:	d124      	bne.n	1d656 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1d60c:	69bb      	ldr	r3, [r7, #24]
   1d60e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d610:	2b00      	cmp	r3, #0
   1d612:	d00e      	beq.n	1d632 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1d614:	683a      	ldr	r2, [r7, #0]
   1d616:	69bb      	ldr	r3, [r7, #24]
   1d618:	0011      	movs	r1, r2
   1d61a:	0018      	movs	r0, r3
   1d61c:	4b3a      	ldr	r3, [pc, #232]	; (1d708 <xQueueGenericSendFromISR+0x21c>)
   1d61e:	4798      	blx	r3
   1d620:	1e03      	subs	r3, r0, #0
   1d622:	d021      	beq.n	1d668 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1d624:	687b      	ldr	r3, [r7, #4]
   1d626:	2b00      	cmp	r3, #0
   1d628:	d01e      	beq.n	1d668 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1d62a:	687b      	ldr	r3, [r7, #4]
   1d62c:	2201      	movs	r2, #1
   1d62e:	601a      	str	r2, [r3, #0]
   1d630:	e01a      	b.n	1d668 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1d632:	69bb      	ldr	r3, [r7, #24]
   1d634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d636:	2b00      	cmp	r3, #0
   1d638:	d016      	beq.n	1d668 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1d63a:	69bb      	ldr	r3, [r7, #24]
   1d63c:	3324      	adds	r3, #36	; 0x24
   1d63e:	0018      	movs	r0, r3
   1d640:	4b32      	ldr	r3, [pc, #200]	; (1d70c <xQueueGenericSendFromISR+0x220>)
   1d642:	4798      	blx	r3
   1d644:	1e03      	subs	r3, r0, #0
   1d646:	d00f      	beq.n	1d668 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1d648:	687b      	ldr	r3, [r7, #4]
   1d64a:	2b00      	cmp	r3, #0
   1d64c:	d00c      	beq.n	1d668 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1d64e:	687b      	ldr	r3, [r7, #4]
   1d650:	2201      	movs	r2, #1
   1d652:	601a      	str	r2, [r3, #0]
   1d654:	e008      	b.n	1d668 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1d656:	2313      	movs	r3, #19
   1d658:	18fb      	adds	r3, r7, r3
   1d65a:	781b      	ldrb	r3, [r3, #0]
   1d65c:	3301      	adds	r3, #1
   1d65e:	b2db      	uxtb	r3, r3
   1d660:	b259      	sxtb	r1, r3
   1d662:	69bb      	ldr	r3, [r7, #24]
   1d664:	2245      	movs	r2, #69	; 0x45
   1d666:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1d668:	2301      	movs	r3, #1
   1d66a:	61fb      	str	r3, [r7, #28]
		{
   1d66c:	e030      	b.n	1d6d0 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1d66e:	69bb      	ldr	r3, [r7, #24]
   1d670:	0018      	movs	r0, r3
   1d672:	4b1d      	ldr	r3, [pc, #116]	; (1d6e8 <xQueueGenericSendFromISR+0x1fc>)
   1d674:	4798      	blx	r3
   1d676:	0003      	movs	r3, r0
   1d678:	001a      	movs	r2, r3
   1d67a:	4b1c      	ldr	r3, [pc, #112]	; (1d6ec <xQueueGenericSendFromISR+0x200>)
   1d67c:	881b      	ldrh	r3, [r3, #0]
   1d67e:	4013      	ands	r3, r2
   1d680:	b29b      	uxth	r3, r3
   1d682:	2b00      	cmp	r3, #0
   1d684:	d022      	beq.n	1d6cc <xQueueGenericSendFromISR+0x1e0>
   1d686:	683b      	ldr	r3, [r7, #0]
   1d688:	2b00      	cmp	r3, #0
   1d68a:	d10b      	bne.n	1d6a4 <xQueueGenericSendFromISR+0x1b8>
   1d68c:	69bb      	ldr	r3, [r7, #24]
   1d68e:	0018      	movs	r0, r3
   1d690:	4b17      	ldr	r3, [pc, #92]	; (1d6f0 <xQueueGenericSendFromISR+0x204>)
   1d692:	4798      	blx	r3
   1d694:	0003      	movs	r3, r0
   1d696:	001a      	movs	r2, r3
   1d698:	4b16      	ldr	r3, [pc, #88]	; (1d6f4 <xQueueGenericSendFromISR+0x208>)
   1d69a:	5c9b      	ldrb	r3, [r3, r2]
   1d69c:	3358      	adds	r3, #88	; 0x58
   1d69e:	b2db      	uxtb	r3, r3
   1d6a0:	001d      	movs	r5, r3
   1d6a2:	e000      	b.n	1d6a6 <xQueueGenericSendFromISR+0x1ba>
   1d6a4:	255d      	movs	r5, #93	; 0x5d
   1d6a6:	69bb      	ldr	r3, [r7, #24]
   1d6a8:	0018      	movs	r0, r3
   1d6aa:	4b11      	ldr	r3, [pc, #68]	; (1d6f0 <xQueueGenericSendFromISR+0x204>)
   1d6ac:	4798      	blx	r3
   1d6ae:	0003      	movs	r3, r0
   1d6b0:	001a      	movs	r2, r3
   1d6b2:	4b10      	ldr	r3, [pc, #64]	; (1d6f4 <xQueueGenericSendFromISR+0x208>)
   1d6b4:	5c9c      	ldrb	r4, [r3, r2]
   1d6b6:	69bb      	ldr	r3, [r7, #24]
   1d6b8:	0018      	movs	r0, r3
   1d6ba:	4b0f      	ldr	r3, [pc, #60]	; (1d6f8 <xQueueGenericSendFromISR+0x20c>)
   1d6bc:	4798      	blx	r3
   1d6be:	0003      	movs	r3, r0
   1d6c0:	b2db      	uxtb	r3, r3
   1d6c2:	001a      	movs	r2, r3
   1d6c4:	0021      	movs	r1, r4
   1d6c6:	0028      	movs	r0, r5
   1d6c8:	4b0c      	ldr	r3, [pc, #48]	; (1d6fc <xQueueGenericSendFromISR+0x210>)
   1d6ca:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1d6cc:	2300      	movs	r3, #0
   1d6ce:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1d6d0:	697b      	ldr	r3, [r7, #20]
   1d6d2:	0018      	movs	r0, r3
   1d6d4:	4b0e      	ldr	r3, [pc, #56]	; (1d710 <xQueueGenericSendFromISR+0x224>)
   1d6d6:	4798      	blx	r3

	return xReturn;
   1d6d8:	69fb      	ldr	r3, [r7, #28]
}
   1d6da:	0018      	movs	r0, r3
   1d6dc:	46bd      	mov	sp, r7
   1d6de:	b008      	add	sp, #32
   1d6e0:	bdb0      	pop	{r4, r5, r7, pc}
   1d6e2:	46c0      	nop			; (mov r8, r8)
   1d6e4:	0001cb4d 	.word	0x0001cb4d
   1d6e8:	0001abad 	.word	0x0001abad
   1d6ec:	20000104 	.word	0x20000104
   1d6f0:	0001aaad 	.word	0x0001aaad
   1d6f4:	200000f8 	.word	0x200000f8
   1d6f8:	0001ab8d 	.word	0x0001ab8d
   1d6fc:	0001b4e5 	.word	0x0001b4e5
   1d700:	0001bb41 	.word	0x0001bb41
   1d704:	0001e2c5 	.word	0x0001e2c5
   1d708:	0001e5c9 	.word	0x0001e5c9
   1d70c:	0001f389 	.word	0x0001f389
   1d710:	0001cb59 	.word	0x0001cb59

0001d714 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1d714:	b580      	push	{r7, lr}
   1d716:	b082      	sub	sp, #8
   1d718:	af00      	add	r7, sp, #0
   1d71a:	6078      	str	r0, [r7, #4]
   1d71c:	6039      	str	r1, [r7, #0]
   1d71e:	6839      	ldr	r1, [r7, #0]
   1d720:	687b      	ldr	r3, [r7, #4]
   1d722:	2200      	movs	r2, #0
   1d724:	0018      	movs	r0, r3
   1d726:	4b03      	ldr	r3, [pc, #12]	; (1d734 <xQueueGiveFromISR+0x20>)
   1d728:	4798      	blx	r3
   1d72a:	0003      	movs	r3, r0
   1d72c:	0018      	movs	r0, r3
   1d72e:	46bd      	mov	sp, r7
   1d730:	b002      	add	sp, #8
   1d732:	bd80      	pop	{r7, pc}
   1d734:	0001d739 	.word	0x0001d739

0001d738 <MyWrapper>:
{
   1d738:	b5b0      	push	{r4, r5, r7, lr}
   1d73a:	b08a      	sub	sp, #40	; 0x28
   1d73c:	af00      	add	r7, sp, #0
   1d73e:	60f8      	str	r0, [r7, #12]
   1d740:	60b9      	str	r1, [r7, #8]
   1d742:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d744:	68fb      	ldr	r3, [r7, #12]
   1d746:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1d748:	6a3b      	ldr	r3, [r7, #32]
   1d74a:	2b00      	cmp	r3, #0
   1d74c:	d101      	bne.n	1d752 <MyWrapper+0x1a>
   1d74e:	b672      	cpsid	i
   1d750:	e7fe      	b.n	1d750 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1d752:	6a3b      	ldr	r3, [r7, #32]
   1d754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d756:	2b00      	cmp	r3, #0
   1d758:	d001      	beq.n	1d75e <MyWrapper+0x26>
   1d75a:	b672      	cpsid	i
   1d75c:	e7fe      	b.n	1d75c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1d75e:	6a3b      	ldr	r3, [r7, #32]
   1d760:	681b      	ldr	r3, [r3, #0]
   1d762:	2b00      	cmp	r3, #0
   1d764:	d103      	bne.n	1d76e <MyWrapper+0x36>
   1d766:	6a3b      	ldr	r3, [r7, #32]
   1d768:	685b      	ldr	r3, [r3, #4]
   1d76a:	2b00      	cmp	r3, #0
   1d76c:	d101      	bne.n	1d772 <MyWrapper+0x3a>
   1d76e:	2301      	movs	r3, #1
   1d770:	e000      	b.n	1d774 <MyWrapper+0x3c>
   1d772:	2300      	movs	r3, #0
   1d774:	2b00      	cmp	r3, #0
   1d776:	d101      	bne.n	1d77c <MyWrapper+0x44>
   1d778:	b672      	cpsid	i
   1d77a:	e7fe      	b.n	1d77a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1d77c:	4b66      	ldr	r3, [pc, #408]	; (1d918 <MyWrapper+0x1e0>)
   1d77e:	4798      	blx	r3
   1d780:	0003      	movs	r3, r0
   1d782:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1d784:	6a3b      	ldr	r3, [r7, #32]
   1d786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d788:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1d78a:	6a3b      	ldr	r3, [r7, #32]
   1d78c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1d78e:	69bb      	ldr	r3, [r7, #24]
   1d790:	429a      	cmp	r2, r3
   1d792:	d800      	bhi.n	1d796 <MyWrapper+0x5e>
   1d794:	e085      	b.n	1d8a2 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1d796:	2317      	movs	r3, #23
   1d798:	18fb      	adds	r3, r7, r3
   1d79a:	6a3a      	ldr	r2, [r7, #32]
   1d79c:	2145      	movs	r1, #69	; 0x45
   1d79e:	5c52      	ldrb	r2, [r2, r1]
   1d7a0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1d7a2:	6a3b      	ldr	r3, [r7, #32]
   1d7a4:	0018      	movs	r0, r3
   1d7a6:	4b5d      	ldr	r3, [pc, #372]	; (1d91c <MyWrapper+0x1e4>)
   1d7a8:	4798      	blx	r3
   1d7aa:	0003      	movs	r3, r0
   1d7ac:	001a      	movs	r2, r3
   1d7ae:	4b5c      	ldr	r3, [pc, #368]	; (1d920 <MyWrapper+0x1e8>)
   1d7b0:	881b      	ldrh	r3, [r3, #0]
   1d7b2:	4013      	ands	r3, r2
   1d7b4:	b29b      	uxth	r3, r3
   1d7b6:	2b00      	cmp	r3, #0
   1d7b8:	d022      	beq.n	1d800 <MyWrapper+0xc8>
   1d7ba:	687b      	ldr	r3, [r7, #4]
   1d7bc:	2b00      	cmp	r3, #0
   1d7be:	d10b      	bne.n	1d7d8 <MyWrapper+0xa0>
   1d7c0:	6a3b      	ldr	r3, [r7, #32]
   1d7c2:	0018      	movs	r0, r3
   1d7c4:	4b57      	ldr	r3, [pc, #348]	; (1d924 <MyWrapper+0x1ec>)
   1d7c6:	4798      	blx	r3
   1d7c8:	0003      	movs	r3, r0
   1d7ca:	001a      	movs	r2, r3
   1d7cc:	4b56      	ldr	r3, [pc, #344]	; (1d928 <MyWrapper+0x1f0>)
   1d7ce:	5c9b      	ldrb	r3, [r3, r2]
   1d7d0:	3330      	adds	r3, #48	; 0x30
   1d7d2:	b2db      	uxtb	r3, r3
   1d7d4:	001d      	movs	r5, r3
   1d7d6:	e000      	b.n	1d7da <MyWrapper+0xa2>
   1d7d8:	2535      	movs	r5, #53	; 0x35
   1d7da:	6a3b      	ldr	r3, [r7, #32]
   1d7dc:	0018      	movs	r0, r3
   1d7de:	4b51      	ldr	r3, [pc, #324]	; (1d924 <MyWrapper+0x1ec>)
   1d7e0:	4798      	blx	r3
   1d7e2:	0003      	movs	r3, r0
   1d7e4:	001a      	movs	r2, r3
   1d7e6:	4b50      	ldr	r3, [pc, #320]	; (1d928 <MyWrapper+0x1f0>)
   1d7e8:	5c9c      	ldrb	r4, [r3, r2]
   1d7ea:	6a3b      	ldr	r3, [r7, #32]
   1d7ec:	0018      	movs	r0, r3
   1d7ee:	4b4f      	ldr	r3, [pc, #316]	; (1d92c <MyWrapper+0x1f4>)
   1d7f0:	4798      	blx	r3
   1d7f2:	0003      	movs	r3, r0
   1d7f4:	b2db      	uxtb	r3, r3
   1d7f6:	001a      	movs	r2, r3
   1d7f8:	0021      	movs	r1, r4
   1d7fa:	0028      	movs	r0, r5
   1d7fc:	4b4c      	ldr	r3, [pc, #304]	; (1d930 <MyWrapper+0x1f8>)
   1d7fe:	4798      	blx	r3
   1d800:	6a3b      	ldr	r3, [r7, #32]
   1d802:	0018      	movs	r0, r3
   1d804:	4b47      	ldr	r3, [pc, #284]	; (1d924 <MyWrapper+0x1ec>)
   1d806:	4798      	blx	r3
   1d808:	0003      	movs	r3, r0
   1d80a:	001a      	movs	r2, r3
   1d80c:	4b46      	ldr	r3, [pc, #280]	; (1d928 <MyWrapper+0x1f0>)
   1d80e:	5c9c      	ldrb	r4, [r3, r2]
   1d810:	6a3b      	ldr	r3, [r7, #32]
   1d812:	0018      	movs	r0, r3
   1d814:	4b45      	ldr	r3, [pc, #276]	; (1d92c <MyWrapper+0x1f4>)
   1d816:	4798      	blx	r3
   1d818:	0003      	movs	r3, r0
   1d81a:	b2d9      	uxtb	r1, r3
   1d81c:	6a3b      	ldr	r3, [r7, #32]
   1d81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d820:	b2db      	uxtb	r3, r3
   1d822:	3301      	adds	r3, #1
   1d824:	b2db      	uxtb	r3, r3
   1d826:	001a      	movs	r2, r3
   1d828:	0020      	movs	r0, r4
   1d82a:	4b42      	ldr	r3, [pc, #264]	; (1d934 <MyWrapper+0x1fc>)
   1d82c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1d82e:	69bb      	ldr	r3, [r7, #24]
   1d830:	1c5a      	adds	r2, r3, #1
   1d832:	6a3b      	ldr	r3, [r7, #32]
   1d834:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1d836:	2317      	movs	r3, #23
   1d838:	18fb      	adds	r3, r7, r3
   1d83a:	781b      	ldrb	r3, [r3, #0]
   1d83c:	b25b      	sxtb	r3, r3
   1d83e:	3301      	adds	r3, #1
   1d840:	d123      	bne.n	1d88a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1d842:	6a3b      	ldr	r3, [r7, #32]
   1d844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d846:	2b00      	cmp	r3, #0
   1d848:	d00d      	beq.n	1d866 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1d84a:	6a3b      	ldr	r3, [r7, #32]
   1d84c:	2100      	movs	r1, #0
   1d84e:	0018      	movs	r0, r3
   1d850:	4b39      	ldr	r3, [pc, #228]	; (1d938 <MyWrapper+0x200>)
   1d852:	4798      	blx	r3
   1d854:	1e03      	subs	r3, r0, #0
   1d856:	d021      	beq.n	1d89c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1d858:	68bb      	ldr	r3, [r7, #8]
   1d85a:	2b00      	cmp	r3, #0
   1d85c:	d01e      	beq.n	1d89c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1d85e:	68bb      	ldr	r3, [r7, #8]
   1d860:	2201      	movs	r2, #1
   1d862:	601a      	str	r2, [r3, #0]
   1d864:	e01a      	b.n	1d89c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1d866:	6a3b      	ldr	r3, [r7, #32]
   1d868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d86a:	2b00      	cmp	r3, #0
   1d86c:	d016      	beq.n	1d89c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1d86e:	6a3b      	ldr	r3, [r7, #32]
   1d870:	3324      	adds	r3, #36	; 0x24
   1d872:	0018      	movs	r0, r3
   1d874:	4b31      	ldr	r3, [pc, #196]	; (1d93c <MyWrapper+0x204>)
   1d876:	4798      	blx	r3
   1d878:	1e03      	subs	r3, r0, #0
   1d87a:	d00f      	beq.n	1d89c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1d87c:	68bb      	ldr	r3, [r7, #8]
   1d87e:	2b00      	cmp	r3, #0
   1d880:	d00c      	beq.n	1d89c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1d882:	68bb      	ldr	r3, [r7, #8]
   1d884:	2201      	movs	r2, #1
   1d886:	601a      	str	r2, [r3, #0]
   1d888:	e008      	b.n	1d89c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1d88a:	2317      	movs	r3, #23
   1d88c:	18fb      	adds	r3, r7, r3
   1d88e:	781b      	ldrb	r3, [r3, #0]
   1d890:	3301      	adds	r3, #1
   1d892:	b2db      	uxtb	r3, r3
   1d894:	b259      	sxtb	r1, r3
   1d896:	6a3b      	ldr	r3, [r7, #32]
   1d898:	2245      	movs	r2, #69	; 0x45
   1d89a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1d89c:	2301      	movs	r3, #1
   1d89e:	627b      	str	r3, [r7, #36]	; 0x24
   1d8a0:	e030      	b.n	1d904 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1d8a2:	6a3b      	ldr	r3, [r7, #32]
   1d8a4:	0018      	movs	r0, r3
   1d8a6:	4b1d      	ldr	r3, [pc, #116]	; (1d91c <MyWrapper+0x1e4>)
   1d8a8:	4798      	blx	r3
   1d8aa:	0003      	movs	r3, r0
   1d8ac:	001a      	movs	r2, r3
   1d8ae:	4b1c      	ldr	r3, [pc, #112]	; (1d920 <MyWrapper+0x1e8>)
   1d8b0:	881b      	ldrh	r3, [r3, #0]
   1d8b2:	4013      	ands	r3, r2
   1d8b4:	b29b      	uxth	r3, r3
   1d8b6:	2b00      	cmp	r3, #0
   1d8b8:	d022      	beq.n	1d900 <MyWrapper+0x1c8>
   1d8ba:	687b      	ldr	r3, [r7, #4]
   1d8bc:	2b00      	cmp	r3, #0
   1d8be:	d10b      	bne.n	1d8d8 <MyWrapper+0x1a0>
   1d8c0:	6a3b      	ldr	r3, [r7, #32]
   1d8c2:	0018      	movs	r0, r3
   1d8c4:	4b17      	ldr	r3, [pc, #92]	; (1d924 <MyWrapper+0x1ec>)
   1d8c6:	4798      	blx	r3
   1d8c8:	0003      	movs	r3, r0
   1d8ca:	001a      	movs	r2, r3
   1d8cc:	4b16      	ldr	r3, [pc, #88]	; (1d928 <MyWrapper+0x1f0>)
   1d8ce:	5c9b      	ldrb	r3, [r3, r2]
   1d8d0:	3358      	adds	r3, #88	; 0x58
   1d8d2:	b2db      	uxtb	r3, r3
   1d8d4:	001d      	movs	r5, r3
   1d8d6:	e000      	b.n	1d8da <MyWrapper+0x1a2>
   1d8d8:	255d      	movs	r5, #93	; 0x5d
   1d8da:	6a3b      	ldr	r3, [r7, #32]
   1d8dc:	0018      	movs	r0, r3
   1d8de:	4b11      	ldr	r3, [pc, #68]	; (1d924 <MyWrapper+0x1ec>)
   1d8e0:	4798      	blx	r3
   1d8e2:	0003      	movs	r3, r0
   1d8e4:	001a      	movs	r2, r3
   1d8e6:	4b10      	ldr	r3, [pc, #64]	; (1d928 <MyWrapper+0x1f0>)
   1d8e8:	5c9c      	ldrb	r4, [r3, r2]
   1d8ea:	6a3b      	ldr	r3, [r7, #32]
   1d8ec:	0018      	movs	r0, r3
   1d8ee:	4b0f      	ldr	r3, [pc, #60]	; (1d92c <MyWrapper+0x1f4>)
   1d8f0:	4798      	blx	r3
   1d8f2:	0003      	movs	r3, r0
   1d8f4:	b2db      	uxtb	r3, r3
   1d8f6:	001a      	movs	r2, r3
   1d8f8:	0021      	movs	r1, r4
   1d8fa:	0028      	movs	r0, r5
   1d8fc:	4b0c      	ldr	r3, [pc, #48]	; (1d930 <MyWrapper+0x1f8>)
   1d8fe:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1d900:	2300      	movs	r3, #0
   1d902:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1d904:	69fb      	ldr	r3, [r7, #28]
   1d906:	0018      	movs	r0, r3
   1d908:	4b0d      	ldr	r3, [pc, #52]	; (1d940 <MyWrapper+0x208>)
   1d90a:	4798      	blx	r3

	return xReturn;
   1d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d90e:	0018      	movs	r0, r3
   1d910:	46bd      	mov	sp, r7
   1d912:	b00a      	add	sp, #40	; 0x28
   1d914:	bdb0      	pop	{r4, r5, r7, pc}
   1d916:	46c0      	nop			; (mov r8, r8)
   1d918:	0001cb4d 	.word	0x0001cb4d
   1d91c:	0001abad 	.word	0x0001abad
   1d920:	20000104 	.word	0x20000104
   1d924:	0001aaad 	.word	0x0001aaad
   1d928:	200000f8 	.word	0x200000f8
   1d92c:	0001ab8d 	.word	0x0001ab8d
   1d930:	0001b4e5 	.word	0x0001b4e5
   1d934:	0001bb41 	.word	0x0001bb41
   1d938:	0001e5c9 	.word	0x0001e5c9
   1d93c:	0001f389 	.word	0x0001f389
   1d940:	0001cb59 	.word	0x0001cb59

0001d944 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1d944:	b5b0      	push	{r4, r5, r7, lr}
   1d946:	b08a      	sub	sp, #40	; 0x28
   1d948:	af00      	add	r7, sp, #0
   1d94a:	60f8      	str	r0, [r7, #12]
   1d94c:	60b9      	str	r1, [r7, #8]
   1d94e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1d950:	2300      	movs	r3, #0
   1d952:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d954:	68fb      	ldr	r3, [r7, #12]
   1d956:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1d958:	6a3b      	ldr	r3, [r7, #32]
   1d95a:	2b00      	cmp	r3, #0
   1d95c:	d101      	bne.n	1d962 <xQueueReceive+0x1e>
   1d95e:	b672      	cpsid	i
   1d960:	e7fe      	b.n	1d960 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1d962:	68bb      	ldr	r3, [r7, #8]
   1d964:	2b00      	cmp	r3, #0
   1d966:	d103      	bne.n	1d970 <xQueueReceive+0x2c>
   1d968:	6a3b      	ldr	r3, [r7, #32]
   1d96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d96c:	2b00      	cmp	r3, #0
   1d96e:	d101      	bne.n	1d974 <xQueueReceive+0x30>
   1d970:	2301      	movs	r3, #1
   1d972:	e000      	b.n	1d976 <xQueueReceive+0x32>
   1d974:	2300      	movs	r3, #0
   1d976:	2b00      	cmp	r3, #0
   1d978:	d101      	bne.n	1d97e <xQueueReceive+0x3a>
   1d97a:	b672      	cpsid	i
   1d97c:	e7fe      	b.n	1d97c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d97e:	4bbf      	ldr	r3, [pc, #764]	; (1dc7c <xQueueReceive+0x338>)
   1d980:	4798      	blx	r3
   1d982:	1e03      	subs	r3, r0, #0
   1d984:	d102      	bne.n	1d98c <xQueueReceive+0x48>
   1d986:	687b      	ldr	r3, [r7, #4]
   1d988:	2b00      	cmp	r3, #0
   1d98a:	d101      	bne.n	1d990 <xQueueReceive+0x4c>
   1d98c:	2301      	movs	r3, #1
   1d98e:	e000      	b.n	1d992 <xQueueReceive+0x4e>
   1d990:	2300      	movs	r3, #0
   1d992:	2b00      	cmp	r3, #0
   1d994:	d101      	bne.n	1d99a <xQueueReceive+0x56>
   1d996:	b672      	cpsid	i
   1d998:	e7fe      	b.n	1d998 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1d99a:	4bb9      	ldr	r3, [pc, #740]	; (1dc80 <xQueueReceive+0x33c>)
   1d99c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1d99e:	6a3b      	ldr	r3, [r7, #32]
   1d9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d9a2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1d9a4:	69fb      	ldr	r3, [r7, #28]
   1d9a6:	2b00      	cmp	r3, #0
   1d9a8:	d100      	bne.n	1d9ac <xQueueReceive+0x68>
   1d9aa:	e07d      	b.n	1daa8 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1d9ac:	68ba      	ldr	r2, [r7, #8]
   1d9ae:	6a3b      	ldr	r3, [r7, #32]
   1d9b0:	0011      	movs	r1, r2
   1d9b2:	0018      	movs	r0, r3
   1d9b4:	4bb3      	ldr	r3, [pc, #716]	; (1dc84 <xQueueReceive+0x340>)
   1d9b6:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1d9b8:	4bb3      	ldr	r3, [pc, #716]	; (1dc88 <xQueueReceive+0x344>)
   1d9ba:	4798      	blx	r3
   1d9bc:	0003      	movs	r3, r0
   1d9be:	0018      	movs	r0, r3
   1d9c0:	4bb2      	ldr	r3, [pc, #712]	; (1dc8c <xQueueReceive+0x348>)
   1d9c2:	4798      	blx	r3
   1d9c4:	0003      	movs	r3, r0
   1d9c6:	001a      	movs	r2, r3
   1d9c8:	4bb1      	ldr	r3, [pc, #708]	; (1dc90 <xQueueReceive+0x34c>)
   1d9ca:	881b      	ldrh	r3, [r3, #0]
   1d9cc:	4013      	ands	r3, r2
   1d9ce:	b29b      	uxth	r3, r3
   1d9d0:	2b00      	cmp	r3, #0
   1d9d2:	d029      	beq.n	1da28 <xQueueReceive+0xe4>
   1d9d4:	6a3b      	ldr	r3, [r7, #32]
   1d9d6:	0018      	movs	r0, r3
   1d9d8:	4bae      	ldr	r3, [pc, #696]	; (1dc94 <xQueueReceive+0x350>)
   1d9da:	4798      	blx	r3
   1d9dc:	0003      	movs	r3, r0
   1d9de:	001a      	movs	r2, r3
   1d9e0:	4bab      	ldr	r3, [pc, #684]	; (1dc90 <xQueueReceive+0x34c>)
   1d9e2:	881b      	ldrh	r3, [r3, #0]
   1d9e4:	4013      	ands	r3, r2
   1d9e6:	b29b      	uxth	r3, r3
   1d9e8:	2b00      	cmp	r3, #0
   1d9ea:	d01d      	beq.n	1da28 <xQueueReceive+0xe4>
   1d9ec:	6a3b      	ldr	r3, [r7, #32]
   1d9ee:	0018      	movs	r0, r3
   1d9f0:	4ba9      	ldr	r3, [pc, #676]	; (1dc98 <xQueueReceive+0x354>)
   1d9f2:	4798      	blx	r3
   1d9f4:	0003      	movs	r3, r0
   1d9f6:	001a      	movs	r2, r3
   1d9f8:	4ba8      	ldr	r3, [pc, #672]	; (1dc9c <xQueueReceive+0x358>)
   1d9fa:	5c9b      	ldrb	r3, [r3, r2]
   1d9fc:	3328      	adds	r3, #40	; 0x28
   1d9fe:	b2db      	uxtb	r3, r3
   1da00:	001d      	movs	r5, r3
   1da02:	6a3b      	ldr	r3, [r7, #32]
   1da04:	0018      	movs	r0, r3
   1da06:	4ba4      	ldr	r3, [pc, #656]	; (1dc98 <xQueueReceive+0x354>)
   1da08:	4798      	blx	r3
   1da0a:	0003      	movs	r3, r0
   1da0c:	001a      	movs	r2, r3
   1da0e:	4ba3      	ldr	r3, [pc, #652]	; (1dc9c <xQueueReceive+0x358>)
   1da10:	5c9c      	ldrb	r4, [r3, r2]
   1da12:	6a3b      	ldr	r3, [r7, #32]
   1da14:	0018      	movs	r0, r3
   1da16:	4ba2      	ldr	r3, [pc, #648]	; (1dca0 <xQueueReceive+0x35c>)
   1da18:	4798      	blx	r3
   1da1a:	0003      	movs	r3, r0
   1da1c:	b2db      	uxtb	r3, r3
   1da1e:	001a      	movs	r2, r3
   1da20:	0021      	movs	r1, r4
   1da22:	0028      	movs	r0, r5
   1da24:	4b9f      	ldr	r3, [pc, #636]	; (1dca4 <xQueueReceive+0x360>)
   1da26:	4798      	blx	r3
   1da28:	6a3b      	ldr	r3, [r7, #32]
   1da2a:	0018      	movs	r0, r3
   1da2c:	4b9a      	ldr	r3, [pc, #616]	; (1dc98 <xQueueReceive+0x354>)
   1da2e:	4798      	blx	r3
   1da30:	0003      	movs	r3, r0
   1da32:	001a      	movs	r2, r3
   1da34:	4b99      	ldr	r3, [pc, #612]	; (1dc9c <xQueueReceive+0x358>)
   1da36:	5c9c      	ldrb	r4, [r3, r2]
   1da38:	6a3b      	ldr	r3, [r7, #32]
   1da3a:	0018      	movs	r0, r3
   1da3c:	4b98      	ldr	r3, [pc, #608]	; (1dca0 <xQueueReceive+0x35c>)
   1da3e:	4798      	blx	r3
   1da40:	0003      	movs	r3, r0
   1da42:	b2dd      	uxtb	r5, r3
   1da44:	6a3b      	ldr	r3, [r7, #32]
   1da46:	0018      	movs	r0, r3
   1da48:	4b93      	ldr	r3, [pc, #588]	; (1dc98 <xQueueReceive+0x354>)
   1da4a:	4798      	blx	r3
   1da4c:	0003      	movs	r3, r0
   1da4e:	001a      	movs	r2, r3
   1da50:	4b92      	ldr	r3, [pc, #584]	; (1dc9c <xQueueReceive+0x358>)
   1da52:	5c9b      	ldrb	r3, [r3, r2]
   1da54:	2b02      	cmp	r3, #2
   1da56:	d108      	bne.n	1da6a <xQueueReceive+0x126>
   1da58:	4b8b      	ldr	r3, [pc, #556]	; (1dc88 <xQueueReceive+0x344>)
   1da5a:	4798      	blx	r3
   1da5c:	0003      	movs	r3, r0
   1da5e:	0018      	movs	r0, r3
   1da60:	4b91      	ldr	r3, [pc, #580]	; (1dca8 <xQueueReceive+0x364>)
   1da62:	4798      	blx	r3
   1da64:	0003      	movs	r3, r0
   1da66:	b2db      	uxtb	r3, r3
   1da68:	e004      	b.n	1da74 <xQueueReceive+0x130>
   1da6a:	6a3b      	ldr	r3, [r7, #32]
   1da6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1da6e:	b2db      	uxtb	r3, r3
   1da70:	3b01      	subs	r3, #1
   1da72:	b2db      	uxtb	r3, r3
   1da74:	001a      	movs	r2, r3
   1da76:	0029      	movs	r1, r5
   1da78:	0020      	movs	r0, r4
   1da7a:	4b8c      	ldr	r3, [pc, #560]	; (1dcac <xQueueReceive+0x368>)
   1da7c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1da7e:	69fb      	ldr	r3, [r7, #28]
   1da80:	1e5a      	subs	r2, r3, #1
   1da82:	6a3b      	ldr	r3, [r7, #32]
   1da84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1da86:	6a3b      	ldr	r3, [r7, #32]
   1da88:	691b      	ldr	r3, [r3, #16]
   1da8a:	2b00      	cmp	r3, #0
   1da8c:	d008      	beq.n	1daa0 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1da8e:	6a3b      	ldr	r3, [r7, #32]
   1da90:	3310      	adds	r3, #16
   1da92:	0018      	movs	r0, r3
   1da94:	4b86      	ldr	r3, [pc, #536]	; (1dcb0 <xQueueReceive+0x36c>)
   1da96:	4798      	blx	r3
   1da98:	1e03      	subs	r3, r0, #0
   1da9a:	d001      	beq.n	1daa0 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1da9c:	4b85      	ldr	r3, [pc, #532]	; (1dcb4 <xQueueReceive+0x370>)
   1da9e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1daa0:	4b85      	ldr	r3, [pc, #532]	; (1dcb8 <xQueueReceive+0x374>)
   1daa2:	4798      	blx	r3
				return pdPASS;
   1daa4:	2301      	movs	r3, #1
   1daa6:	e15f      	b.n	1dd68 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1daa8:	687b      	ldr	r3, [r7, #4]
   1daaa:	2b00      	cmp	r3, #0
   1daac:	d13b      	bne.n	1db26 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1daae:	4b82      	ldr	r3, [pc, #520]	; (1dcb8 <xQueueReceive+0x374>)
   1dab0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1dab2:	4b75      	ldr	r3, [pc, #468]	; (1dc88 <xQueueReceive+0x344>)
   1dab4:	4798      	blx	r3
   1dab6:	0003      	movs	r3, r0
   1dab8:	0018      	movs	r0, r3
   1daba:	4b74      	ldr	r3, [pc, #464]	; (1dc8c <xQueueReceive+0x348>)
   1dabc:	4798      	blx	r3
   1dabe:	0003      	movs	r3, r0
   1dac0:	001a      	movs	r2, r3
   1dac2:	4b73      	ldr	r3, [pc, #460]	; (1dc90 <xQueueReceive+0x34c>)
   1dac4:	881b      	ldrh	r3, [r3, #0]
   1dac6:	4013      	ands	r3, r2
   1dac8:	b29b      	uxth	r3, r3
   1daca:	2b00      	cmp	r3, #0
   1dacc:	d029      	beq.n	1db22 <xQueueReceive+0x1de>
   1dace:	6a3b      	ldr	r3, [r7, #32]
   1dad0:	0018      	movs	r0, r3
   1dad2:	4b70      	ldr	r3, [pc, #448]	; (1dc94 <xQueueReceive+0x350>)
   1dad4:	4798      	blx	r3
   1dad6:	0003      	movs	r3, r0
   1dad8:	001a      	movs	r2, r3
   1dada:	4b6d      	ldr	r3, [pc, #436]	; (1dc90 <xQueueReceive+0x34c>)
   1dadc:	881b      	ldrh	r3, [r3, #0]
   1dade:	4013      	ands	r3, r2
   1dae0:	b29b      	uxth	r3, r3
   1dae2:	2b00      	cmp	r3, #0
   1dae4:	d01d      	beq.n	1db22 <xQueueReceive+0x1de>
   1dae6:	6a3b      	ldr	r3, [r7, #32]
   1dae8:	0018      	movs	r0, r3
   1daea:	4b6b      	ldr	r3, [pc, #428]	; (1dc98 <xQueueReceive+0x354>)
   1daec:	4798      	blx	r3
   1daee:	0003      	movs	r3, r0
   1daf0:	001a      	movs	r2, r3
   1daf2:	4b6a      	ldr	r3, [pc, #424]	; (1dc9c <xQueueReceive+0x358>)
   1daf4:	5c9b      	ldrb	r3, [r3, r2]
   1daf6:	3350      	adds	r3, #80	; 0x50
   1daf8:	b2db      	uxtb	r3, r3
   1dafa:	001d      	movs	r5, r3
   1dafc:	6a3b      	ldr	r3, [r7, #32]
   1dafe:	0018      	movs	r0, r3
   1db00:	4b65      	ldr	r3, [pc, #404]	; (1dc98 <xQueueReceive+0x354>)
   1db02:	4798      	blx	r3
   1db04:	0003      	movs	r3, r0
   1db06:	001a      	movs	r2, r3
   1db08:	4b64      	ldr	r3, [pc, #400]	; (1dc9c <xQueueReceive+0x358>)
   1db0a:	5c9c      	ldrb	r4, [r3, r2]
   1db0c:	6a3b      	ldr	r3, [r7, #32]
   1db0e:	0018      	movs	r0, r3
   1db10:	4b63      	ldr	r3, [pc, #396]	; (1dca0 <xQueueReceive+0x35c>)
   1db12:	4798      	blx	r3
   1db14:	0003      	movs	r3, r0
   1db16:	b2db      	uxtb	r3, r3
   1db18:	001a      	movs	r2, r3
   1db1a:	0021      	movs	r1, r4
   1db1c:	0028      	movs	r0, r5
   1db1e:	4b61      	ldr	r3, [pc, #388]	; (1dca4 <xQueueReceive+0x360>)
   1db20:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1db22:	2300      	movs	r3, #0
   1db24:	e120      	b.n	1dd68 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1db26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1db28:	2b00      	cmp	r3, #0
   1db2a:	d106      	bne.n	1db3a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1db2c:	2314      	movs	r3, #20
   1db2e:	18fb      	adds	r3, r7, r3
   1db30:	0018      	movs	r0, r3
   1db32:	4b62      	ldr	r3, [pc, #392]	; (1dcbc <xQueueReceive+0x378>)
   1db34:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1db36:	2301      	movs	r3, #1
   1db38:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1db3a:	4b5f      	ldr	r3, [pc, #380]	; (1dcb8 <xQueueReceive+0x374>)
   1db3c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1db3e:	4b60      	ldr	r3, [pc, #384]	; (1dcc0 <xQueueReceive+0x37c>)
   1db40:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1db42:	4b4f      	ldr	r3, [pc, #316]	; (1dc80 <xQueueReceive+0x33c>)
   1db44:	4798      	blx	r3
   1db46:	6a3b      	ldr	r3, [r7, #32]
   1db48:	2244      	movs	r2, #68	; 0x44
   1db4a:	5c9b      	ldrb	r3, [r3, r2]
   1db4c:	b25b      	sxtb	r3, r3
   1db4e:	3301      	adds	r3, #1
   1db50:	d103      	bne.n	1db5a <xQueueReceive+0x216>
   1db52:	6a3b      	ldr	r3, [r7, #32]
   1db54:	2244      	movs	r2, #68	; 0x44
   1db56:	2100      	movs	r1, #0
   1db58:	5499      	strb	r1, [r3, r2]
   1db5a:	6a3b      	ldr	r3, [r7, #32]
   1db5c:	2245      	movs	r2, #69	; 0x45
   1db5e:	5c9b      	ldrb	r3, [r3, r2]
   1db60:	b25b      	sxtb	r3, r3
   1db62:	3301      	adds	r3, #1
   1db64:	d103      	bne.n	1db6e <xQueueReceive+0x22a>
   1db66:	6a3b      	ldr	r3, [r7, #32]
   1db68:	2245      	movs	r2, #69	; 0x45
   1db6a:	2100      	movs	r1, #0
   1db6c:	5499      	strb	r1, [r3, r2]
   1db6e:	4b52      	ldr	r3, [pc, #328]	; (1dcb8 <xQueueReceive+0x374>)
   1db70:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1db72:	1d3a      	adds	r2, r7, #4
   1db74:	2314      	movs	r3, #20
   1db76:	18fb      	adds	r3, r7, r3
   1db78:	0011      	movs	r1, r2
   1db7a:	0018      	movs	r0, r3
   1db7c:	4b51      	ldr	r3, [pc, #324]	; (1dcc4 <xQueueReceive+0x380>)
   1db7e:	4798      	blx	r3
   1db80:	1e03      	subs	r3, r0, #0
   1db82:	d000      	beq.n	1db86 <xQueueReceive+0x242>
   1db84:	e0aa      	b.n	1dcdc <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1db86:	6a3b      	ldr	r3, [r7, #32]
   1db88:	0018      	movs	r0, r3
   1db8a:	4b4f      	ldr	r3, [pc, #316]	; (1dcc8 <xQueueReceive+0x384>)
   1db8c:	4798      	blx	r3
   1db8e:	1e03      	subs	r3, r0, #0
   1db90:	d06d      	beq.n	1dc6e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1db92:	4b3d      	ldr	r3, [pc, #244]	; (1dc88 <xQueueReceive+0x344>)
   1db94:	4798      	blx	r3
   1db96:	0003      	movs	r3, r0
   1db98:	0018      	movs	r0, r3
   1db9a:	4b3c      	ldr	r3, [pc, #240]	; (1dc8c <xQueueReceive+0x348>)
   1db9c:	4798      	blx	r3
   1db9e:	0003      	movs	r3, r0
   1dba0:	001a      	movs	r2, r3
   1dba2:	4b3b      	ldr	r3, [pc, #236]	; (1dc90 <xQueueReceive+0x34c>)
   1dba4:	881b      	ldrh	r3, [r3, #0]
   1dba6:	4013      	ands	r3, r2
   1dba8:	b29b      	uxth	r3, r3
   1dbaa:	2b00      	cmp	r3, #0
   1dbac:	d029      	beq.n	1dc02 <xQueueReceive+0x2be>
   1dbae:	6a3b      	ldr	r3, [r7, #32]
   1dbb0:	0018      	movs	r0, r3
   1dbb2:	4b38      	ldr	r3, [pc, #224]	; (1dc94 <xQueueReceive+0x350>)
   1dbb4:	4798      	blx	r3
   1dbb6:	0003      	movs	r3, r0
   1dbb8:	001a      	movs	r2, r3
   1dbba:	4b35      	ldr	r3, [pc, #212]	; (1dc90 <xQueueReceive+0x34c>)
   1dbbc:	881b      	ldrh	r3, [r3, #0]
   1dbbe:	4013      	ands	r3, r2
   1dbc0:	b29b      	uxth	r3, r3
   1dbc2:	2b00      	cmp	r3, #0
   1dbc4:	d01d      	beq.n	1dc02 <xQueueReceive+0x2be>
   1dbc6:	6a3b      	ldr	r3, [r7, #32]
   1dbc8:	0018      	movs	r0, r3
   1dbca:	4b33      	ldr	r3, [pc, #204]	; (1dc98 <xQueueReceive+0x354>)
   1dbcc:	4798      	blx	r3
   1dbce:	0003      	movs	r3, r0
   1dbd0:	001a      	movs	r2, r3
   1dbd2:	4b32      	ldr	r3, [pc, #200]	; (1dc9c <xQueueReceive+0x358>)
   1dbd4:	5c9b      	ldrb	r3, [r3, r2]
   1dbd6:	3368      	adds	r3, #104	; 0x68
   1dbd8:	b2db      	uxtb	r3, r3
   1dbda:	001d      	movs	r5, r3
   1dbdc:	6a3b      	ldr	r3, [r7, #32]
   1dbde:	0018      	movs	r0, r3
   1dbe0:	4b2d      	ldr	r3, [pc, #180]	; (1dc98 <xQueueReceive+0x354>)
   1dbe2:	4798      	blx	r3
   1dbe4:	0003      	movs	r3, r0
   1dbe6:	001a      	movs	r2, r3
   1dbe8:	4b2c      	ldr	r3, [pc, #176]	; (1dc9c <xQueueReceive+0x358>)
   1dbea:	5c9c      	ldrb	r4, [r3, r2]
   1dbec:	6a3b      	ldr	r3, [r7, #32]
   1dbee:	0018      	movs	r0, r3
   1dbf0:	4b2b      	ldr	r3, [pc, #172]	; (1dca0 <xQueueReceive+0x35c>)
   1dbf2:	4798      	blx	r3
   1dbf4:	0003      	movs	r3, r0
   1dbf6:	b2db      	uxtb	r3, r3
   1dbf8:	001a      	movs	r2, r3
   1dbfa:	0021      	movs	r1, r4
   1dbfc:	0028      	movs	r0, r5
   1dbfe:	4b29      	ldr	r3, [pc, #164]	; (1dca4 <xQueueReceive+0x360>)
   1dc00:	4798      	blx	r3
   1dc02:	6a3b      	ldr	r3, [r7, #32]
   1dc04:	0018      	movs	r0, r3
   1dc06:	4b24      	ldr	r3, [pc, #144]	; (1dc98 <xQueueReceive+0x354>)
   1dc08:	4798      	blx	r3
   1dc0a:	0003      	movs	r3, r0
   1dc0c:	001a      	movs	r2, r3
   1dc0e:	4b23      	ldr	r3, [pc, #140]	; (1dc9c <xQueueReceive+0x358>)
   1dc10:	5c9b      	ldrb	r3, [r3, r2]
   1dc12:	2b02      	cmp	r3, #2
   1dc14:	d018      	beq.n	1dc48 <xQueueReceive+0x304>
   1dc16:	4b1c      	ldr	r3, [pc, #112]	; (1dc88 <xQueueReceive+0x344>)
   1dc18:	4798      	blx	r3
   1dc1a:	0003      	movs	r3, r0
   1dc1c:	0018      	movs	r0, r3
   1dc1e:	4b1b      	ldr	r3, [pc, #108]	; (1dc8c <xQueueReceive+0x348>)
   1dc20:	4798      	blx	r3
   1dc22:	0003      	movs	r3, r0
   1dc24:	001a      	movs	r2, r3
   1dc26:	4b1a      	ldr	r3, [pc, #104]	; (1dc90 <xQueueReceive+0x34c>)
   1dc28:	881b      	ldrh	r3, [r3, #0]
   1dc2a:	4013      	ands	r3, r2
   1dc2c:	b29b      	uxth	r3, r3
   1dc2e:	2b00      	cmp	r3, #0
   1dc30:	d00a      	beq.n	1dc48 <xQueueReceive+0x304>
   1dc32:	4b15      	ldr	r3, [pc, #84]	; (1dc88 <xQueueReceive+0x344>)
   1dc34:	4798      	blx	r3
   1dc36:	0003      	movs	r3, r0
   1dc38:	0018      	movs	r0, r3
   1dc3a:	4b1b      	ldr	r3, [pc, #108]	; (1dca8 <xQueueReceive+0x364>)
   1dc3c:	4798      	blx	r3
   1dc3e:	0003      	movs	r3, r0
   1dc40:	b2db      	uxtb	r3, r3
   1dc42:	0018      	movs	r0, r3
   1dc44:	4b21      	ldr	r3, [pc, #132]	; (1dccc <xQueueReceive+0x388>)
   1dc46:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1dc48:	6a3b      	ldr	r3, [r7, #32]
   1dc4a:	3324      	adds	r3, #36	; 0x24
   1dc4c:	687a      	ldr	r2, [r7, #4]
   1dc4e:	0011      	movs	r1, r2
   1dc50:	0018      	movs	r0, r3
   1dc52:	4b1f      	ldr	r3, [pc, #124]	; (1dcd0 <xQueueReceive+0x38c>)
   1dc54:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1dc56:	6a3b      	ldr	r3, [r7, #32]
   1dc58:	0018      	movs	r0, r3
   1dc5a:	4b1e      	ldr	r3, [pc, #120]	; (1dcd4 <xQueueReceive+0x390>)
   1dc5c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1dc5e:	4b1e      	ldr	r3, [pc, #120]	; (1dcd8 <xQueueReceive+0x394>)
   1dc60:	4798      	blx	r3
   1dc62:	1e03      	subs	r3, r0, #0
   1dc64:	d000      	beq.n	1dc68 <xQueueReceive+0x324>
   1dc66:	e698      	b.n	1d99a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1dc68:	4b12      	ldr	r3, [pc, #72]	; (1dcb4 <xQueueReceive+0x370>)
   1dc6a:	4798      	blx	r3
   1dc6c:	e695      	b.n	1d99a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1dc6e:	6a3b      	ldr	r3, [r7, #32]
   1dc70:	0018      	movs	r0, r3
   1dc72:	4b18      	ldr	r3, [pc, #96]	; (1dcd4 <xQueueReceive+0x390>)
   1dc74:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1dc76:	4b18      	ldr	r3, [pc, #96]	; (1dcd8 <xQueueReceive+0x394>)
   1dc78:	4798      	blx	r3
   1dc7a:	e68e      	b.n	1d99a <xQueueReceive+0x56>
   1dc7c:	0001f819 	.word	0x0001f819
   1dc80:	0001caf9 	.word	0x0001caf9
   1dc84:	0001e3a5 	.word	0x0001e3a5
   1dc88:	0001ad89 	.word	0x0001ad89
   1dc8c:	0001aaed 	.word	0x0001aaed
   1dc90:	20000104 	.word	0x20000104
   1dc94:	0001abad 	.word	0x0001abad
   1dc98:	0001aaad 	.word	0x0001aaad
   1dc9c:	200000f8 	.word	0x200000f8
   1dca0:	0001ab8d 	.word	0x0001ab8d
   1dca4:	0001b4e5 	.word	0x0001b4e5
   1dca8:	0001aacd 	.word	0x0001aacd
   1dcac:	0001bb41 	.word	0x0001bb41
   1dcb0:	0001f389 	.word	0x0001f389
   1dcb4:	0001cae1 	.word	0x0001cae1
   1dcb8:	0001cb1d 	.word	0x0001cb1d
   1dcbc:	0001f4c9 	.word	0x0001f4c9
   1dcc0:	0001edb1 	.word	0x0001edb1
   1dcc4:	0001f4f1 	.word	0x0001f4f1
   1dcc8:	0001e4e5 	.word	0x0001e4e5
   1dccc:	0001bc7d 	.word	0x0001bc7d
   1dcd0:	0001f265 	.word	0x0001f265
   1dcd4:	0001e3f5 	.word	0x0001e3f5
   1dcd8:	0001edc9 	.word	0x0001edc9
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1dcdc:	6a3b      	ldr	r3, [r7, #32]
   1dcde:	0018      	movs	r0, r3
   1dce0:	4b23      	ldr	r3, [pc, #140]	; (1dd70 <xQueueReceive+0x42c>)
   1dce2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1dce4:	4b23      	ldr	r3, [pc, #140]	; (1dd74 <xQueueReceive+0x430>)
   1dce6:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1dce8:	6a3b      	ldr	r3, [r7, #32]
   1dcea:	0018      	movs	r0, r3
   1dcec:	4b22      	ldr	r3, [pc, #136]	; (1dd78 <xQueueReceive+0x434>)
   1dcee:	4798      	blx	r3
   1dcf0:	1e03      	subs	r3, r0, #0
   1dcf2:	d100      	bne.n	1dcf6 <xQueueReceive+0x3b2>
   1dcf4:	e651      	b.n	1d99a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1dcf6:	4b21      	ldr	r3, [pc, #132]	; (1dd7c <xQueueReceive+0x438>)
   1dcf8:	4798      	blx	r3
   1dcfa:	0003      	movs	r3, r0
   1dcfc:	0018      	movs	r0, r3
   1dcfe:	4b20      	ldr	r3, [pc, #128]	; (1dd80 <xQueueReceive+0x43c>)
   1dd00:	4798      	blx	r3
   1dd02:	0003      	movs	r3, r0
   1dd04:	001a      	movs	r2, r3
   1dd06:	4b1f      	ldr	r3, [pc, #124]	; (1dd84 <xQueueReceive+0x440>)
   1dd08:	881b      	ldrh	r3, [r3, #0]
   1dd0a:	4013      	ands	r3, r2
   1dd0c:	b29b      	uxth	r3, r3
   1dd0e:	2b00      	cmp	r3, #0
   1dd10:	d029      	beq.n	1dd66 <xQueueReceive+0x422>
   1dd12:	6a3b      	ldr	r3, [r7, #32]
   1dd14:	0018      	movs	r0, r3
   1dd16:	4b1c      	ldr	r3, [pc, #112]	; (1dd88 <xQueueReceive+0x444>)
   1dd18:	4798      	blx	r3
   1dd1a:	0003      	movs	r3, r0
   1dd1c:	001a      	movs	r2, r3
   1dd1e:	4b19      	ldr	r3, [pc, #100]	; (1dd84 <xQueueReceive+0x440>)
   1dd20:	881b      	ldrh	r3, [r3, #0]
   1dd22:	4013      	ands	r3, r2
   1dd24:	b29b      	uxth	r3, r3
   1dd26:	2b00      	cmp	r3, #0
   1dd28:	d01d      	beq.n	1dd66 <xQueueReceive+0x422>
   1dd2a:	6a3b      	ldr	r3, [r7, #32]
   1dd2c:	0018      	movs	r0, r3
   1dd2e:	4b17      	ldr	r3, [pc, #92]	; (1dd8c <xQueueReceive+0x448>)
   1dd30:	4798      	blx	r3
   1dd32:	0003      	movs	r3, r0
   1dd34:	001a      	movs	r2, r3
   1dd36:	4b16      	ldr	r3, [pc, #88]	; (1dd90 <xQueueReceive+0x44c>)
   1dd38:	5c9b      	ldrb	r3, [r3, r2]
   1dd3a:	3350      	adds	r3, #80	; 0x50
   1dd3c:	b2db      	uxtb	r3, r3
   1dd3e:	001d      	movs	r5, r3
   1dd40:	6a3b      	ldr	r3, [r7, #32]
   1dd42:	0018      	movs	r0, r3
   1dd44:	4b11      	ldr	r3, [pc, #68]	; (1dd8c <xQueueReceive+0x448>)
   1dd46:	4798      	blx	r3
   1dd48:	0003      	movs	r3, r0
   1dd4a:	001a      	movs	r2, r3
   1dd4c:	4b10      	ldr	r3, [pc, #64]	; (1dd90 <xQueueReceive+0x44c>)
   1dd4e:	5c9c      	ldrb	r4, [r3, r2]
   1dd50:	6a3b      	ldr	r3, [r7, #32]
   1dd52:	0018      	movs	r0, r3
   1dd54:	4b0f      	ldr	r3, [pc, #60]	; (1dd94 <xQueueReceive+0x450>)
   1dd56:	4798      	blx	r3
   1dd58:	0003      	movs	r3, r0
   1dd5a:	b2db      	uxtb	r3, r3
   1dd5c:	001a      	movs	r2, r3
   1dd5e:	0021      	movs	r1, r4
   1dd60:	0028      	movs	r0, r5
   1dd62:	4b0d      	ldr	r3, [pc, #52]	; (1dd98 <xQueueReceive+0x454>)
   1dd64:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1dd66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1dd68:	0018      	movs	r0, r3
   1dd6a:	46bd      	mov	sp, r7
   1dd6c:	b00a      	add	sp, #40	; 0x28
   1dd6e:	bdb0      	pop	{r4, r5, r7, pc}
   1dd70:	0001e3f5 	.word	0x0001e3f5
   1dd74:	0001edc9 	.word	0x0001edc9
   1dd78:	0001e4e5 	.word	0x0001e4e5
   1dd7c:	0001ad89 	.word	0x0001ad89
   1dd80:	0001aaed 	.word	0x0001aaed
   1dd84:	20000104 	.word	0x20000104
   1dd88:	0001abad 	.word	0x0001abad
   1dd8c:	0001aaad 	.word	0x0001aaad
   1dd90:	200000f8 	.word	0x200000f8
   1dd94:	0001ab8d 	.word	0x0001ab8d
   1dd98:	0001b4e5 	.word	0x0001b4e5

0001dd9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1dd9c:	b5b0      	push	{r4, r5, r7, lr}
   1dd9e:	b08a      	sub	sp, #40	; 0x28
   1dda0:	af00      	add	r7, sp, #0
   1dda2:	6078      	str	r0, [r7, #4]
   1dda4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1dda6:	2300      	movs	r3, #0
   1dda8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ddaa:	687b      	ldr	r3, [r7, #4]
   1ddac:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1ddae:	2300      	movs	r3, #0
   1ddb0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1ddb2:	69fb      	ldr	r3, [r7, #28]
   1ddb4:	2b00      	cmp	r3, #0
   1ddb6:	d101      	bne.n	1ddbc <xQueueSemaphoreTake+0x20>
   1ddb8:	b672      	cpsid	i
   1ddba:	e7fe      	b.n	1ddba <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1ddbc:	69fb      	ldr	r3, [r7, #28]
   1ddbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ddc0:	2b00      	cmp	r3, #0
   1ddc2:	d001      	beq.n	1ddc8 <xQueueSemaphoreTake+0x2c>
   1ddc4:	b672      	cpsid	i
   1ddc6:	e7fe      	b.n	1ddc6 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ddc8:	4bcb      	ldr	r3, [pc, #812]	; (1e0f8 <xQueueSemaphoreTake+0x35c>)
   1ddca:	4798      	blx	r3
   1ddcc:	1e03      	subs	r3, r0, #0
   1ddce:	d102      	bne.n	1ddd6 <xQueueSemaphoreTake+0x3a>
   1ddd0:	683b      	ldr	r3, [r7, #0]
   1ddd2:	2b00      	cmp	r3, #0
   1ddd4:	d101      	bne.n	1ddda <xQueueSemaphoreTake+0x3e>
   1ddd6:	2301      	movs	r3, #1
   1ddd8:	e000      	b.n	1dddc <xQueueSemaphoreTake+0x40>
   1ddda:	2300      	movs	r3, #0
   1dddc:	2b00      	cmp	r3, #0
   1ddde:	d101      	bne.n	1dde4 <xQueueSemaphoreTake+0x48>
   1dde0:	b672      	cpsid	i
   1dde2:	e7fe      	b.n	1dde2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1dde4:	4bc5      	ldr	r3, [pc, #788]	; (1e0fc <xQueueSemaphoreTake+0x360>)
   1dde6:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1dde8:	69fb      	ldr	r3, [r7, #28]
   1ddea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ddec:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1ddee:	69bb      	ldr	r3, [r7, #24]
   1ddf0:	2b00      	cmp	r3, #0
   1ddf2:	d100      	bne.n	1ddf6 <xQueueSemaphoreTake+0x5a>
   1ddf4:	e080      	b.n	1def8 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1ddf6:	4bc2      	ldr	r3, [pc, #776]	; (1e100 <xQueueSemaphoreTake+0x364>)
   1ddf8:	4798      	blx	r3
   1ddfa:	0003      	movs	r3, r0
   1ddfc:	0018      	movs	r0, r3
   1ddfe:	4bc1      	ldr	r3, [pc, #772]	; (1e104 <xQueueSemaphoreTake+0x368>)
   1de00:	4798      	blx	r3
   1de02:	0003      	movs	r3, r0
   1de04:	001a      	movs	r2, r3
   1de06:	4bc0      	ldr	r3, [pc, #768]	; (1e108 <xQueueSemaphoreTake+0x36c>)
   1de08:	881b      	ldrh	r3, [r3, #0]
   1de0a:	4013      	ands	r3, r2
   1de0c:	b29b      	uxth	r3, r3
   1de0e:	2b00      	cmp	r3, #0
   1de10:	d029      	beq.n	1de66 <xQueueSemaphoreTake+0xca>
   1de12:	69fb      	ldr	r3, [r7, #28]
   1de14:	0018      	movs	r0, r3
   1de16:	4bbd      	ldr	r3, [pc, #756]	; (1e10c <xQueueSemaphoreTake+0x370>)
   1de18:	4798      	blx	r3
   1de1a:	0003      	movs	r3, r0
   1de1c:	001a      	movs	r2, r3
   1de1e:	4bba      	ldr	r3, [pc, #744]	; (1e108 <xQueueSemaphoreTake+0x36c>)
   1de20:	881b      	ldrh	r3, [r3, #0]
   1de22:	4013      	ands	r3, r2
   1de24:	b29b      	uxth	r3, r3
   1de26:	2b00      	cmp	r3, #0
   1de28:	d01d      	beq.n	1de66 <xQueueSemaphoreTake+0xca>
   1de2a:	69fb      	ldr	r3, [r7, #28]
   1de2c:	0018      	movs	r0, r3
   1de2e:	4bb8      	ldr	r3, [pc, #736]	; (1e110 <xQueueSemaphoreTake+0x374>)
   1de30:	4798      	blx	r3
   1de32:	0003      	movs	r3, r0
   1de34:	001a      	movs	r2, r3
   1de36:	4bb7      	ldr	r3, [pc, #732]	; (1e114 <xQueueSemaphoreTake+0x378>)
   1de38:	5c9b      	ldrb	r3, [r3, r2]
   1de3a:	3328      	adds	r3, #40	; 0x28
   1de3c:	b2db      	uxtb	r3, r3
   1de3e:	001d      	movs	r5, r3
   1de40:	69fb      	ldr	r3, [r7, #28]
   1de42:	0018      	movs	r0, r3
   1de44:	4bb2      	ldr	r3, [pc, #712]	; (1e110 <xQueueSemaphoreTake+0x374>)
   1de46:	4798      	blx	r3
   1de48:	0003      	movs	r3, r0
   1de4a:	001a      	movs	r2, r3
   1de4c:	4bb1      	ldr	r3, [pc, #708]	; (1e114 <xQueueSemaphoreTake+0x378>)
   1de4e:	5c9c      	ldrb	r4, [r3, r2]
   1de50:	69fb      	ldr	r3, [r7, #28]
   1de52:	0018      	movs	r0, r3
   1de54:	4bb0      	ldr	r3, [pc, #704]	; (1e118 <xQueueSemaphoreTake+0x37c>)
   1de56:	4798      	blx	r3
   1de58:	0003      	movs	r3, r0
   1de5a:	b2db      	uxtb	r3, r3
   1de5c:	001a      	movs	r2, r3
   1de5e:	0021      	movs	r1, r4
   1de60:	0028      	movs	r0, r5
   1de62:	4bae      	ldr	r3, [pc, #696]	; (1e11c <xQueueSemaphoreTake+0x380>)
   1de64:	4798      	blx	r3
   1de66:	69fb      	ldr	r3, [r7, #28]
   1de68:	0018      	movs	r0, r3
   1de6a:	4ba9      	ldr	r3, [pc, #676]	; (1e110 <xQueueSemaphoreTake+0x374>)
   1de6c:	4798      	blx	r3
   1de6e:	0003      	movs	r3, r0
   1de70:	001a      	movs	r2, r3
   1de72:	4ba8      	ldr	r3, [pc, #672]	; (1e114 <xQueueSemaphoreTake+0x378>)
   1de74:	5c9c      	ldrb	r4, [r3, r2]
   1de76:	69fb      	ldr	r3, [r7, #28]
   1de78:	0018      	movs	r0, r3
   1de7a:	4ba7      	ldr	r3, [pc, #668]	; (1e118 <xQueueSemaphoreTake+0x37c>)
   1de7c:	4798      	blx	r3
   1de7e:	0003      	movs	r3, r0
   1de80:	b2dd      	uxtb	r5, r3
   1de82:	69fb      	ldr	r3, [r7, #28]
   1de84:	0018      	movs	r0, r3
   1de86:	4ba2      	ldr	r3, [pc, #648]	; (1e110 <xQueueSemaphoreTake+0x374>)
   1de88:	4798      	blx	r3
   1de8a:	0003      	movs	r3, r0
   1de8c:	001a      	movs	r2, r3
   1de8e:	4ba1      	ldr	r3, [pc, #644]	; (1e114 <xQueueSemaphoreTake+0x378>)
   1de90:	5c9b      	ldrb	r3, [r3, r2]
   1de92:	2b02      	cmp	r3, #2
   1de94:	d108      	bne.n	1dea8 <xQueueSemaphoreTake+0x10c>
   1de96:	4b9a      	ldr	r3, [pc, #616]	; (1e100 <xQueueSemaphoreTake+0x364>)
   1de98:	4798      	blx	r3
   1de9a:	0003      	movs	r3, r0
   1de9c:	0018      	movs	r0, r3
   1de9e:	4ba0      	ldr	r3, [pc, #640]	; (1e120 <xQueueSemaphoreTake+0x384>)
   1dea0:	4798      	blx	r3
   1dea2:	0003      	movs	r3, r0
   1dea4:	b2db      	uxtb	r3, r3
   1dea6:	e004      	b.n	1deb2 <xQueueSemaphoreTake+0x116>
   1dea8:	69fb      	ldr	r3, [r7, #28]
   1deaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1deac:	b2db      	uxtb	r3, r3
   1deae:	3b01      	subs	r3, #1
   1deb0:	b2db      	uxtb	r3, r3
   1deb2:	001a      	movs	r2, r3
   1deb4:	0029      	movs	r1, r5
   1deb6:	0020      	movs	r0, r4
   1deb8:	4b9a      	ldr	r3, [pc, #616]	; (1e124 <xQueueSemaphoreTake+0x388>)
   1deba:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1debc:	69bb      	ldr	r3, [r7, #24]
   1debe:	1e5a      	subs	r2, r3, #1
   1dec0:	69fb      	ldr	r3, [r7, #28]
   1dec2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1dec4:	69fb      	ldr	r3, [r7, #28]
   1dec6:	681b      	ldr	r3, [r3, #0]
   1dec8:	2b00      	cmp	r3, #0
   1deca:	d104      	bne.n	1ded6 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1decc:	4b96      	ldr	r3, [pc, #600]	; (1e128 <xQueueSemaphoreTake+0x38c>)
   1dece:	4798      	blx	r3
   1ded0:	0002      	movs	r2, r0
   1ded2:	69fb      	ldr	r3, [r7, #28]
   1ded4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ded6:	69fb      	ldr	r3, [r7, #28]
   1ded8:	691b      	ldr	r3, [r3, #16]
   1deda:	2b00      	cmp	r3, #0
   1dedc:	d008      	beq.n	1def0 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1dede:	69fb      	ldr	r3, [r7, #28]
   1dee0:	3310      	adds	r3, #16
   1dee2:	0018      	movs	r0, r3
   1dee4:	4b91      	ldr	r3, [pc, #580]	; (1e12c <xQueueSemaphoreTake+0x390>)
   1dee6:	4798      	blx	r3
   1dee8:	1e03      	subs	r3, r0, #0
   1deea:	d001      	beq.n	1def0 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1deec:	4b90      	ldr	r3, [pc, #576]	; (1e130 <xQueueSemaphoreTake+0x394>)
   1deee:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1def0:	4b90      	ldr	r3, [pc, #576]	; (1e134 <xQueueSemaphoreTake+0x398>)
   1def2:	4798      	blx	r3
				return pdPASS;
   1def4:	2301      	movs	r3, #1
   1def6:	e18b      	b.n	1e210 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1def8:	683b      	ldr	r3, [r7, #0]
   1defa:	2b00      	cmp	r3, #0
   1defc:	d140      	bne.n	1df80 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1defe:	6a3b      	ldr	r3, [r7, #32]
   1df00:	2b00      	cmp	r3, #0
   1df02:	d001      	beq.n	1df08 <xQueueSemaphoreTake+0x16c>
   1df04:	b672      	cpsid	i
   1df06:	e7fe      	b.n	1df06 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1df08:	4b8a      	ldr	r3, [pc, #552]	; (1e134 <xQueueSemaphoreTake+0x398>)
   1df0a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1df0c:	4b7c      	ldr	r3, [pc, #496]	; (1e100 <xQueueSemaphoreTake+0x364>)
   1df0e:	4798      	blx	r3
   1df10:	0003      	movs	r3, r0
   1df12:	0018      	movs	r0, r3
   1df14:	4b7b      	ldr	r3, [pc, #492]	; (1e104 <xQueueSemaphoreTake+0x368>)
   1df16:	4798      	blx	r3
   1df18:	0003      	movs	r3, r0
   1df1a:	001a      	movs	r2, r3
   1df1c:	4b7a      	ldr	r3, [pc, #488]	; (1e108 <xQueueSemaphoreTake+0x36c>)
   1df1e:	881b      	ldrh	r3, [r3, #0]
   1df20:	4013      	ands	r3, r2
   1df22:	b29b      	uxth	r3, r3
   1df24:	2b00      	cmp	r3, #0
   1df26:	d029      	beq.n	1df7c <xQueueSemaphoreTake+0x1e0>
   1df28:	69fb      	ldr	r3, [r7, #28]
   1df2a:	0018      	movs	r0, r3
   1df2c:	4b77      	ldr	r3, [pc, #476]	; (1e10c <xQueueSemaphoreTake+0x370>)
   1df2e:	4798      	blx	r3
   1df30:	0003      	movs	r3, r0
   1df32:	001a      	movs	r2, r3
   1df34:	4b74      	ldr	r3, [pc, #464]	; (1e108 <xQueueSemaphoreTake+0x36c>)
   1df36:	881b      	ldrh	r3, [r3, #0]
   1df38:	4013      	ands	r3, r2
   1df3a:	b29b      	uxth	r3, r3
   1df3c:	2b00      	cmp	r3, #0
   1df3e:	d01d      	beq.n	1df7c <xQueueSemaphoreTake+0x1e0>
   1df40:	69fb      	ldr	r3, [r7, #28]
   1df42:	0018      	movs	r0, r3
   1df44:	4b72      	ldr	r3, [pc, #456]	; (1e110 <xQueueSemaphoreTake+0x374>)
   1df46:	4798      	blx	r3
   1df48:	0003      	movs	r3, r0
   1df4a:	001a      	movs	r2, r3
   1df4c:	4b71      	ldr	r3, [pc, #452]	; (1e114 <xQueueSemaphoreTake+0x378>)
   1df4e:	5c9b      	ldrb	r3, [r3, r2]
   1df50:	3350      	adds	r3, #80	; 0x50
   1df52:	b2db      	uxtb	r3, r3
   1df54:	001d      	movs	r5, r3
   1df56:	69fb      	ldr	r3, [r7, #28]
   1df58:	0018      	movs	r0, r3
   1df5a:	4b6d      	ldr	r3, [pc, #436]	; (1e110 <xQueueSemaphoreTake+0x374>)
   1df5c:	4798      	blx	r3
   1df5e:	0003      	movs	r3, r0
   1df60:	001a      	movs	r2, r3
   1df62:	4b6c      	ldr	r3, [pc, #432]	; (1e114 <xQueueSemaphoreTake+0x378>)
   1df64:	5c9c      	ldrb	r4, [r3, r2]
   1df66:	69fb      	ldr	r3, [r7, #28]
   1df68:	0018      	movs	r0, r3
   1df6a:	4b6b      	ldr	r3, [pc, #428]	; (1e118 <xQueueSemaphoreTake+0x37c>)
   1df6c:	4798      	blx	r3
   1df6e:	0003      	movs	r3, r0
   1df70:	b2db      	uxtb	r3, r3
   1df72:	001a      	movs	r2, r3
   1df74:	0021      	movs	r1, r4
   1df76:	0028      	movs	r0, r5
   1df78:	4b68      	ldr	r3, [pc, #416]	; (1e11c <xQueueSemaphoreTake+0x380>)
   1df7a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1df7c:	2300      	movs	r3, #0
   1df7e:	e147      	b.n	1e210 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1df82:	2b00      	cmp	r3, #0
   1df84:	d106      	bne.n	1df94 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1df86:	230c      	movs	r3, #12
   1df88:	18fb      	adds	r3, r7, r3
   1df8a:	0018      	movs	r0, r3
   1df8c:	4b6a      	ldr	r3, [pc, #424]	; (1e138 <xQueueSemaphoreTake+0x39c>)
   1df8e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1df90:	2301      	movs	r3, #1
   1df92:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1df94:	4b67      	ldr	r3, [pc, #412]	; (1e134 <xQueueSemaphoreTake+0x398>)
   1df96:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1df98:	4b68      	ldr	r3, [pc, #416]	; (1e13c <xQueueSemaphoreTake+0x3a0>)
   1df9a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1df9c:	4b57      	ldr	r3, [pc, #348]	; (1e0fc <xQueueSemaphoreTake+0x360>)
   1df9e:	4798      	blx	r3
   1dfa0:	69fb      	ldr	r3, [r7, #28]
   1dfa2:	2244      	movs	r2, #68	; 0x44
   1dfa4:	5c9b      	ldrb	r3, [r3, r2]
   1dfa6:	b25b      	sxtb	r3, r3
   1dfa8:	3301      	adds	r3, #1
   1dfaa:	d103      	bne.n	1dfb4 <xQueueSemaphoreTake+0x218>
   1dfac:	69fb      	ldr	r3, [r7, #28]
   1dfae:	2244      	movs	r2, #68	; 0x44
   1dfb0:	2100      	movs	r1, #0
   1dfb2:	5499      	strb	r1, [r3, r2]
   1dfb4:	69fb      	ldr	r3, [r7, #28]
   1dfb6:	2245      	movs	r2, #69	; 0x45
   1dfb8:	5c9b      	ldrb	r3, [r3, r2]
   1dfba:	b25b      	sxtb	r3, r3
   1dfbc:	3301      	adds	r3, #1
   1dfbe:	d103      	bne.n	1dfc8 <xQueueSemaphoreTake+0x22c>
   1dfc0:	69fb      	ldr	r3, [r7, #28]
   1dfc2:	2245      	movs	r2, #69	; 0x45
   1dfc4:	2100      	movs	r1, #0
   1dfc6:	5499      	strb	r1, [r3, r2]
   1dfc8:	4b5a      	ldr	r3, [pc, #360]	; (1e134 <xQueueSemaphoreTake+0x398>)
   1dfca:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1dfcc:	003a      	movs	r2, r7
   1dfce:	230c      	movs	r3, #12
   1dfd0:	18fb      	adds	r3, r7, r3
   1dfd2:	0011      	movs	r1, r2
   1dfd4:	0018      	movs	r0, r3
   1dfd6:	4b5a      	ldr	r3, [pc, #360]	; (1e140 <xQueueSemaphoreTake+0x3a4>)
   1dfd8:	4798      	blx	r3
   1dfda:	1e03      	subs	r3, r0, #0
   1dfdc:	d000      	beq.n	1dfe0 <xQueueSemaphoreTake+0x244>
   1dfde:	e0bd      	b.n	1e15c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1dfe0:	69fb      	ldr	r3, [r7, #28]
   1dfe2:	0018      	movs	r0, r3
   1dfe4:	4b57      	ldr	r3, [pc, #348]	; (1e144 <xQueueSemaphoreTake+0x3a8>)
   1dfe6:	4798      	blx	r3
   1dfe8:	1e03      	subs	r3, r0, #0
   1dfea:	d100      	bne.n	1dfee <xQueueSemaphoreTake+0x252>
   1dfec:	e07c      	b.n	1e0e8 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1dfee:	4b44      	ldr	r3, [pc, #272]	; (1e100 <xQueueSemaphoreTake+0x364>)
   1dff0:	4798      	blx	r3
   1dff2:	0003      	movs	r3, r0
   1dff4:	0018      	movs	r0, r3
   1dff6:	4b43      	ldr	r3, [pc, #268]	; (1e104 <xQueueSemaphoreTake+0x368>)
   1dff8:	4798      	blx	r3
   1dffa:	0003      	movs	r3, r0
   1dffc:	001a      	movs	r2, r3
   1dffe:	4b42      	ldr	r3, [pc, #264]	; (1e108 <xQueueSemaphoreTake+0x36c>)
   1e000:	881b      	ldrh	r3, [r3, #0]
   1e002:	4013      	ands	r3, r2
   1e004:	b29b      	uxth	r3, r3
   1e006:	2b00      	cmp	r3, #0
   1e008:	d029      	beq.n	1e05e <xQueueSemaphoreTake+0x2c2>
   1e00a:	69fb      	ldr	r3, [r7, #28]
   1e00c:	0018      	movs	r0, r3
   1e00e:	4b3f      	ldr	r3, [pc, #252]	; (1e10c <xQueueSemaphoreTake+0x370>)
   1e010:	4798      	blx	r3
   1e012:	0003      	movs	r3, r0
   1e014:	001a      	movs	r2, r3
   1e016:	4b3c      	ldr	r3, [pc, #240]	; (1e108 <xQueueSemaphoreTake+0x36c>)
   1e018:	881b      	ldrh	r3, [r3, #0]
   1e01a:	4013      	ands	r3, r2
   1e01c:	b29b      	uxth	r3, r3
   1e01e:	2b00      	cmp	r3, #0
   1e020:	d01d      	beq.n	1e05e <xQueueSemaphoreTake+0x2c2>
   1e022:	69fb      	ldr	r3, [r7, #28]
   1e024:	0018      	movs	r0, r3
   1e026:	4b3a      	ldr	r3, [pc, #232]	; (1e110 <xQueueSemaphoreTake+0x374>)
   1e028:	4798      	blx	r3
   1e02a:	0003      	movs	r3, r0
   1e02c:	001a      	movs	r2, r3
   1e02e:	4b39      	ldr	r3, [pc, #228]	; (1e114 <xQueueSemaphoreTake+0x378>)
   1e030:	5c9b      	ldrb	r3, [r3, r2]
   1e032:	3368      	adds	r3, #104	; 0x68
   1e034:	b2db      	uxtb	r3, r3
   1e036:	001d      	movs	r5, r3
   1e038:	69fb      	ldr	r3, [r7, #28]
   1e03a:	0018      	movs	r0, r3
   1e03c:	4b34      	ldr	r3, [pc, #208]	; (1e110 <xQueueSemaphoreTake+0x374>)
   1e03e:	4798      	blx	r3
   1e040:	0003      	movs	r3, r0
   1e042:	001a      	movs	r2, r3
   1e044:	4b33      	ldr	r3, [pc, #204]	; (1e114 <xQueueSemaphoreTake+0x378>)
   1e046:	5c9c      	ldrb	r4, [r3, r2]
   1e048:	69fb      	ldr	r3, [r7, #28]
   1e04a:	0018      	movs	r0, r3
   1e04c:	4b32      	ldr	r3, [pc, #200]	; (1e118 <xQueueSemaphoreTake+0x37c>)
   1e04e:	4798      	blx	r3
   1e050:	0003      	movs	r3, r0
   1e052:	b2db      	uxtb	r3, r3
   1e054:	001a      	movs	r2, r3
   1e056:	0021      	movs	r1, r4
   1e058:	0028      	movs	r0, r5
   1e05a:	4b30      	ldr	r3, [pc, #192]	; (1e11c <xQueueSemaphoreTake+0x380>)
   1e05c:	4798      	blx	r3
   1e05e:	69fb      	ldr	r3, [r7, #28]
   1e060:	0018      	movs	r0, r3
   1e062:	4b2b      	ldr	r3, [pc, #172]	; (1e110 <xQueueSemaphoreTake+0x374>)
   1e064:	4798      	blx	r3
   1e066:	0003      	movs	r3, r0
   1e068:	001a      	movs	r2, r3
   1e06a:	4b2a      	ldr	r3, [pc, #168]	; (1e114 <xQueueSemaphoreTake+0x378>)
   1e06c:	5c9b      	ldrb	r3, [r3, r2]
   1e06e:	2b02      	cmp	r3, #2
   1e070:	d018      	beq.n	1e0a4 <xQueueSemaphoreTake+0x308>
   1e072:	4b23      	ldr	r3, [pc, #140]	; (1e100 <xQueueSemaphoreTake+0x364>)
   1e074:	4798      	blx	r3
   1e076:	0003      	movs	r3, r0
   1e078:	0018      	movs	r0, r3
   1e07a:	4b22      	ldr	r3, [pc, #136]	; (1e104 <xQueueSemaphoreTake+0x368>)
   1e07c:	4798      	blx	r3
   1e07e:	0003      	movs	r3, r0
   1e080:	001a      	movs	r2, r3
   1e082:	4b21      	ldr	r3, [pc, #132]	; (1e108 <xQueueSemaphoreTake+0x36c>)
   1e084:	881b      	ldrh	r3, [r3, #0]
   1e086:	4013      	ands	r3, r2
   1e088:	b29b      	uxth	r3, r3
   1e08a:	2b00      	cmp	r3, #0
   1e08c:	d00a      	beq.n	1e0a4 <xQueueSemaphoreTake+0x308>
   1e08e:	4b1c      	ldr	r3, [pc, #112]	; (1e100 <xQueueSemaphoreTake+0x364>)
   1e090:	4798      	blx	r3
   1e092:	0003      	movs	r3, r0
   1e094:	0018      	movs	r0, r3
   1e096:	4b22      	ldr	r3, [pc, #136]	; (1e120 <xQueueSemaphoreTake+0x384>)
   1e098:	4798      	blx	r3
   1e09a:	0003      	movs	r3, r0
   1e09c:	b2db      	uxtb	r3, r3
   1e09e:	0018      	movs	r0, r3
   1e0a0:	4b29      	ldr	r3, [pc, #164]	; (1e148 <xQueueSemaphoreTake+0x3ac>)
   1e0a2:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1e0a4:	69fb      	ldr	r3, [r7, #28]
   1e0a6:	681b      	ldr	r3, [r3, #0]
   1e0a8:	2b00      	cmp	r3, #0
   1e0aa:	d10a      	bne.n	1e0c2 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1e0ac:	4b13      	ldr	r3, [pc, #76]	; (1e0fc <xQueueSemaphoreTake+0x360>)
   1e0ae:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1e0b0:	69fb      	ldr	r3, [r7, #28]
   1e0b2:	685b      	ldr	r3, [r3, #4]
   1e0b4:	0018      	movs	r0, r3
   1e0b6:	4b25      	ldr	r3, [pc, #148]	; (1e14c <xQueueSemaphoreTake+0x3b0>)
   1e0b8:	4798      	blx	r3
   1e0ba:	0003      	movs	r3, r0
   1e0bc:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1e0be:	4b1d      	ldr	r3, [pc, #116]	; (1e134 <xQueueSemaphoreTake+0x398>)
   1e0c0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1e0c2:	69fb      	ldr	r3, [r7, #28]
   1e0c4:	3324      	adds	r3, #36	; 0x24
   1e0c6:	683a      	ldr	r2, [r7, #0]
   1e0c8:	0011      	movs	r1, r2
   1e0ca:	0018      	movs	r0, r3
   1e0cc:	4b20      	ldr	r3, [pc, #128]	; (1e150 <xQueueSemaphoreTake+0x3b4>)
   1e0ce:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1e0d0:	69fb      	ldr	r3, [r7, #28]
   1e0d2:	0018      	movs	r0, r3
   1e0d4:	4b1f      	ldr	r3, [pc, #124]	; (1e154 <xQueueSemaphoreTake+0x3b8>)
   1e0d6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1e0d8:	4b1f      	ldr	r3, [pc, #124]	; (1e158 <xQueueSemaphoreTake+0x3bc>)
   1e0da:	4798      	blx	r3
   1e0dc:	1e03      	subs	r3, r0, #0
   1e0de:	d000      	beq.n	1e0e2 <xQueueSemaphoreTake+0x346>
   1e0e0:	e680      	b.n	1dde4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1e0e2:	4b13      	ldr	r3, [pc, #76]	; (1e130 <xQueueSemaphoreTake+0x394>)
   1e0e4:	4798      	blx	r3
   1e0e6:	e67d      	b.n	1dde4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1e0e8:	69fb      	ldr	r3, [r7, #28]
   1e0ea:	0018      	movs	r0, r3
   1e0ec:	4b19      	ldr	r3, [pc, #100]	; (1e154 <xQueueSemaphoreTake+0x3b8>)
   1e0ee:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1e0f0:	4b19      	ldr	r3, [pc, #100]	; (1e158 <xQueueSemaphoreTake+0x3bc>)
   1e0f2:	4798      	blx	r3
   1e0f4:	e676      	b.n	1dde4 <xQueueSemaphoreTake+0x48>
   1e0f6:	46c0      	nop			; (mov r8, r8)
   1e0f8:	0001f819 	.word	0x0001f819
   1e0fc:	0001caf9 	.word	0x0001caf9
   1e100:	0001ad89 	.word	0x0001ad89
   1e104:	0001aaed 	.word	0x0001aaed
   1e108:	20000104 	.word	0x20000104
   1e10c:	0001abad 	.word	0x0001abad
   1e110:	0001aaad 	.word	0x0001aaad
   1e114:	200000f8 	.word	0x200000f8
   1e118:	0001ab8d 	.word	0x0001ab8d
   1e11c:	0001b4e5 	.word	0x0001b4e5
   1e120:	0001aacd 	.word	0x0001aacd
   1e124:	0001bb41 	.word	0x0001bb41
   1e128:	0001fce5 	.word	0x0001fce5
   1e12c:	0001f389 	.word	0x0001f389
   1e130:	0001cae1 	.word	0x0001cae1
   1e134:	0001cb1d 	.word	0x0001cb1d
   1e138:	0001f4c9 	.word	0x0001f4c9
   1e13c:	0001edb1 	.word	0x0001edb1
   1e140:	0001f4f1 	.word	0x0001f4f1
   1e144:	0001e4e5 	.word	0x0001e4e5
   1e148:	0001bc7d 	.word	0x0001bc7d
   1e14c:	0001f851 	.word	0x0001f851
   1e150:	0001f265 	.word	0x0001f265
   1e154:	0001e3f5 	.word	0x0001e3f5
   1e158:	0001edc9 	.word	0x0001edc9
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1e15c:	69fb      	ldr	r3, [r7, #28]
   1e15e:	0018      	movs	r0, r3
   1e160:	4b2d      	ldr	r3, [pc, #180]	; (1e218 <xQueueSemaphoreTake+0x47c>)
   1e162:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1e164:	4b2d      	ldr	r3, [pc, #180]	; (1e21c <xQueueSemaphoreTake+0x480>)
   1e166:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1e168:	69fb      	ldr	r3, [r7, #28]
   1e16a:	0018      	movs	r0, r3
   1e16c:	4b2c      	ldr	r3, [pc, #176]	; (1e220 <xQueueSemaphoreTake+0x484>)
   1e16e:	4798      	blx	r3
   1e170:	1e03      	subs	r3, r0, #0
   1e172:	d100      	bne.n	1e176 <xQueueSemaphoreTake+0x3da>
   1e174:	e636      	b.n	1dde4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1e176:	6a3b      	ldr	r3, [r7, #32]
   1e178:	2b00      	cmp	r3, #0
   1e17a:	d010      	beq.n	1e19e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1e17c:	4b29      	ldr	r3, [pc, #164]	; (1e224 <xQueueSemaphoreTake+0x488>)
   1e17e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1e180:	69fb      	ldr	r3, [r7, #28]
   1e182:	0018      	movs	r0, r3
   1e184:	4b28      	ldr	r3, [pc, #160]	; (1e228 <xQueueSemaphoreTake+0x48c>)
   1e186:	4798      	blx	r3
   1e188:	0003      	movs	r3, r0
   1e18a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1e18c:	69fb      	ldr	r3, [r7, #28]
   1e18e:	685b      	ldr	r3, [r3, #4]
   1e190:	697a      	ldr	r2, [r7, #20]
   1e192:	0011      	movs	r1, r2
   1e194:	0018      	movs	r0, r3
   1e196:	4b25      	ldr	r3, [pc, #148]	; (1e22c <xQueueSemaphoreTake+0x490>)
   1e198:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1e19a:	4b25      	ldr	r3, [pc, #148]	; (1e230 <xQueueSemaphoreTake+0x494>)
   1e19c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1e19e:	4b25      	ldr	r3, [pc, #148]	; (1e234 <xQueueSemaphoreTake+0x498>)
   1e1a0:	4798      	blx	r3
   1e1a2:	0003      	movs	r3, r0
   1e1a4:	0018      	movs	r0, r3
   1e1a6:	4b24      	ldr	r3, [pc, #144]	; (1e238 <xQueueSemaphoreTake+0x49c>)
   1e1a8:	4798      	blx	r3
   1e1aa:	0003      	movs	r3, r0
   1e1ac:	001a      	movs	r2, r3
   1e1ae:	4b23      	ldr	r3, [pc, #140]	; (1e23c <xQueueSemaphoreTake+0x4a0>)
   1e1b0:	881b      	ldrh	r3, [r3, #0]
   1e1b2:	4013      	ands	r3, r2
   1e1b4:	b29b      	uxth	r3, r3
   1e1b6:	2b00      	cmp	r3, #0
   1e1b8:	d029      	beq.n	1e20e <xQueueSemaphoreTake+0x472>
   1e1ba:	69fb      	ldr	r3, [r7, #28]
   1e1bc:	0018      	movs	r0, r3
   1e1be:	4b20      	ldr	r3, [pc, #128]	; (1e240 <xQueueSemaphoreTake+0x4a4>)
   1e1c0:	4798      	blx	r3
   1e1c2:	0003      	movs	r3, r0
   1e1c4:	001a      	movs	r2, r3
   1e1c6:	4b1d      	ldr	r3, [pc, #116]	; (1e23c <xQueueSemaphoreTake+0x4a0>)
   1e1c8:	881b      	ldrh	r3, [r3, #0]
   1e1ca:	4013      	ands	r3, r2
   1e1cc:	b29b      	uxth	r3, r3
   1e1ce:	2b00      	cmp	r3, #0
   1e1d0:	d01d      	beq.n	1e20e <xQueueSemaphoreTake+0x472>
   1e1d2:	69fb      	ldr	r3, [r7, #28]
   1e1d4:	0018      	movs	r0, r3
   1e1d6:	4b1b      	ldr	r3, [pc, #108]	; (1e244 <xQueueSemaphoreTake+0x4a8>)
   1e1d8:	4798      	blx	r3
   1e1da:	0003      	movs	r3, r0
   1e1dc:	001a      	movs	r2, r3
   1e1de:	4b1a      	ldr	r3, [pc, #104]	; (1e248 <xQueueSemaphoreTake+0x4ac>)
   1e1e0:	5c9b      	ldrb	r3, [r3, r2]
   1e1e2:	3350      	adds	r3, #80	; 0x50
   1e1e4:	b2db      	uxtb	r3, r3
   1e1e6:	001d      	movs	r5, r3
   1e1e8:	69fb      	ldr	r3, [r7, #28]
   1e1ea:	0018      	movs	r0, r3
   1e1ec:	4b15      	ldr	r3, [pc, #84]	; (1e244 <xQueueSemaphoreTake+0x4a8>)
   1e1ee:	4798      	blx	r3
   1e1f0:	0003      	movs	r3, r0
   1e1f2:	001a      	movs	r2, r3
   1e1f4:	4b14      	ldr	r3, [pc, #80]	; (1e248 <xQueueSemaphoreTake+0x4ac>)
   1e1f6:	5c9c      	ldrb	r4, [r3, r2]
   1e1f8:	69fb      	ldr	r3, [r7, #28]
   1e1fa:	0018      	movs	r0, r3
   1e1fc:	4b13      	ldr	r3, [pc, #76]	; (1e24c <xQueueSemaphoreTake+0x4b0>)
   1e1fe:	4798      	blx	r3
   1e200:	0003      	movs	r3, r0
   1e202:	b2db      	uxtb	r3, r3
   1e204:	001a      	movs	r2, r3
   1e206:	0021      	movs	r1, r4
   1e208:	0028      	movs	r0, r5
   1e20a:	4b11      	ldr	r3, [pc, #68]	; (1e250 <xQueueSemaphoreTake+0x4b4>)
   1e20c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1e20e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1e210:	0018      	movs	r0, r3
   1e212:	46bd      	mov	sp, r7
   1e214:	b00a      	add	sp, #40	; 0x28
   1e216:	bdb0      	pop	{r4, r5, r7, pc}
   1e218:	0001e3f5 	.word	0x0001e3f5
   1e21c:	0001edc9 	.word	0x0001edc9
   1e220:	0001e4e5 	.word	0x0001e4e5
   1e224:	0001caf9 	.word	0x0001caf9
   1e228:	0001e297 	.word	0x0001e297
   1e22c:	0001fb49 	.word	0x0001fb49
   1e230:	0001cb1d 	.word	0x0001cb1d
   1e234:	0001ad89 	.word	0x0001ad89
   1e238:	0001aaed 	.word	0x0001aaed
   1e23c:	20000104 	.word	0x20000104
   1e240:	0001abad 	.word	0x0001abad
   1e244:	0001aaad 	.word	0x0001aaad
   1e248:	200000f8 	.word	0x200000f8
   1e24c:	0001ab8d 	.word	0x0001ab8d
   1e250:	0001b4e5 	.word	0x0001b4e5

0001e254 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1e254:	b580      	push	{r7, lr}
   1e256:	b082      	sub	sp, #8
   1e258:	af00      	add	r7, sp, #0
   1e25a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1e25c:	687b      	ldr	r3, [r7, #4]
   1e25e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1e260:	0018      	movs	r0, r3
   1e262:	46bd      	mov	sp, r7
   1e264:	b002      	add	sp, #8
   1e266:	bd80      	pop	{r7, pc}

0001e268 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1e268:	b580      	push	{r7, lr}
   1e26a:	b082      	sub	sp, #8
   1e26c:	af00      	add	r7, sp, #0
   1e26e:	6078      	str	r0, [r7, #4]
   1e270:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1e272:	687b      	ldr	r3, [r7, #4]
   1e274:	683a      	ldr	r2, [r7, #0]
   1e276:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1e278:	46c0      	nop			; (mov r8, r8)
   1e27a:	46bd      	mov	sp, r7
   1e27c:	b002      	add	sp, #8
   1e27e:	bd80      	pop	{r7, pc}

0001e280 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1e280:	b580      	push	{r7, lr}
   1e282:	b082      	sub	sp, #8
   1e284:	af00      	add	r7, sp, #0
   1e286:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1e288:	687b      	ldr	r3, [r7, #4]
   1e28a:	2250      	movs	r2, #80	; 0x50
   1e28c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1e28e:	0018      	movs	r0, r3
   1e290:	46bd      	mov	sp, r7
   1e292:	b002      	add	sp, #8
   1e294:	bd80      	pop	{r7, pc}

0001e296 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1e296:	b580      	push	{r7, lr}
   1e298:	b084      	sub	sp, #16
   1e29a:	af00      	add	r7, sp, #0
   1e29c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1e29e:	687b      	ldr	r3, [r7, #4]
   1e2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e2a2:	2b00      	cmp	r3, #0
   1e2a4:	d006      	beq.n	1e2b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1e2a6:	687b      	ldr	r3, [r7, #4]
   1e2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e2aa:	681b      	ldr	r3, [r3, #0]
   1e2ac:	2205      	movs	r2, #5
   1e2ae:	1ad3      	subs	r3, r2, r3
   1e2b0:	60fb      	str	r3, [r7, #12]
   1e2b2:	e001      	b.n	1e2b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1e2b4:	2300      	movs	r3, #0
   1e2b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1e2b8:	68fb      	ldr	r3, [r7, #12]
	}
   1e2ba:	0018      	movs	r0, r3
   1e2bc:	46bd      	mov	sp, r7
   1e2be:	b004      	add	sp, #16
   1e2c0:	bd80      	pop	{r7, pc}
	...

0001e2c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1e2c4:	b580      	push	{r7, lr}
   1e2c6:	b086      	sub	sp, #24
   1e2c8:	af00      	add	r7, sp, #0
   1e2ca:	60f8      	str	r0, [r7, #12]
   1e2cc:	60b9      	str	r1, [r7, #8]
   1e2ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1e2d0:	2300      	movs	r3, #0
   1e2d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1e2d4:	68fb      	ldr	r3, [r7, #12]
   1e2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e2d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1e2da:	68fb      	ldr	r3, [r7, #12]
   1e2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e2de:	2b00      	cmp	r3, #0
   1e2e0:	d10e      	bne.n	1e300 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1e2e2:	68fb      	ldr	r3, [r7, #12]
   1e2e4:	681b      	ldr	r3, [r3, #0]
   1e2e6:	2b00      	cmp	r3, #0
   1e2e8:	d14e      	bne.n	1e388 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1e2ea:	68fb      	ldr	r3, [r7, #12]
   1e2ec:	685b      	ldr	r3, [r3, #4]
   1e2ee:	0018      	movs	r0, r3
   1e2f0:	4b2a      	ldr	r3, [pc, #168]	; (1e39c <prvCopyDataToQueue+0xd8>)
   1e2f2:	4798      	blx	r3
   1e2f4:	0003      	movs	r3, r0
   1e2f6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1e2f8:	68fb      	ldr	r3, [r7, #12]
   1e2fa:	2200      	movs	r2, #0
   1e2fc:	605a      	str	r2, [r3, #4]
   1e2fe:	e043      	b.n	1e388 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1e300:	687b      	ldr	r3, [r7, #4]
   1e302:	2b00      	cmp	r3, #0
   1e304:	d119      	bne.n	1e33a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1e306:	68fb      	ldr	r3, [r7, #12]
   1e308:	6898      	ldr	r0, [r3, #8]
   1e30a:	68fb      	ldr	r3, [r7, #12]
   1e30c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1e30e:	68bb      	ldr	r3, [r7, #8]
   1e310:	0019      	movs	r1, r3
   1e312:	4b23      	ldr	r3, [pc, #140]	; (1e3a0 <prvCopyDataToQueue+0xdc>)
   1e314:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1e316:	68fb      	ldr	r3, [r7, #12]
   1e318:	689a      	ldr	r2, [r3, #8]
   1e31a:	68fb      	ldr	r3, [r7, #12]
   1e31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e31e:	18d2      	adds	r2, r2, r3
   1e320:	68fb      	ldr	r3, [r7, #12]
   1e322:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1e324:	68fb      	ldr	r3, [r7, #12]
   1e326:	689a      	ldr	r2, [r3, #8]
   1e328:	68fb      	ldr	r3, [r7, #12]
   1e32a:	685b      	ldr	r3, [r3, #4]
   1e32c:	429a      	cmp	r2, r3
   1e32e:	d32b      	bcc.n	1e388 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1e330:	68fb      	ldr	r3, [r7, #12]
   1e332:	681a      	ldr	r2, [r3, #0]
   1e334:	68fb      	ldr	r3, [r7, #12]
   1e336:	609a      	str	r2, [r3, #8]
   1e338:	e026      	b.n	1e388 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e33a:	68fb      	ldr	r3, [r7, #12]
   1e33c:	68d8      	ldr	r0, [r3, #12]
   1e33e:	68fb      	ldr	r3, [r7, #12]
   1e340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1e342:	68bb      	ldr	r3, [r7, #8]
   1e344:	0019      	movs	r1, r3
   1e346:	4b16      	ldr	r3, [pc, #88]	; (1e3a0 <prvCopyDataToQueue+0xdc>)
   1e348:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1e34a:	68fb      	ldr	r3, [r7, #12]
   1e34c:	68da      	ldr	r2, [r3, #12]
   1e34e:	68fb      	ldr	r3, [r7, #12]
   1e350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e352:	425b      	negs	r3, r3
   1e354:	18d2      	adds	r2, r2, r3
   1e356:	68fb      	ldr	r3, [r7, #12]
   1e358:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1e35a:	68fb      	ldr	r3, [r7, #12]
   1e35c:	68da      	ldr	r2, [r3, #12]
   1e35e:	68fb      	ldr	r3, [r7, #12]
   1e360:	681b      	ldr	r3, [r3, #0]
   1e362:	429a      	cmp	r2, r3
   1e364:	d207      	bcs.n	1e376 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1e366:	68fb      	ldr	r3, [r7, #12]
   1e368:	685a      	ldr	r2, [r3, #4]
   1e36a:	68fb      	ldr	r3, [r7, #12]
   1e36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e36e:	425b      	negs	r3, r3
   1e370:	18d2      	adds	r2, r2, r3
   1e372:	68fb      	ldr	r3, [r7, #12]
   1e374:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1e376:	687b      	ldr	r3, [r7, #4]
   1e378:	2b02      	cmp	r3, #2
   1e37a:	d105      	bne.n	1e388 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1e37c:	693b      	ldr	r3, [r7, #16]
   1e37e:	2b00      	cmp	r3, #0
   1e380:	d002      	beq.n	1e388 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1e382:	693b      	ldr	r3, [r7, #16]
   1e384:	3b01      	subs	r3, #1
   1e386:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1e388:	693b      	ldr	r3, [r7, #16]
   1e38a:	1c5a      	adds	r2, r3, #1
   1e38c:	68fb      	ldr	r3, [r7, #12]
   1e38e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1e390:	697b      	ldr	r3, [r7, #20]
}
   1e392:	0018      	movs	r0, r3
   1e394:	46bd      	mov	sp, r7
   1e396:	b006      	add	sp, #24
   1e398:	bd80      	pop	{r7, pc}
   1e39a:	46c0      	nop			; (mov r8, r8)
   1e39c:	0001f9e1 	.word	0x0001f9e1
   1e3a0:	000378cd 	.word	0x000378cd

0001e3a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1e3a4:	b580      	push	{r7, lr}
   1e3a6:	b082      	sub	sp, #8
   1e3a8:	af00      	add	r7, sp, #0
   1e3aa:	6078      	str	r0, [r7, #4]
   1e3ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1e3ae:	687b      	ldr	r3, [r7, #4]
   1e3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e3b2:	2b00      	cmp	r3, #0
   1e3b4:	d018      	beq.n	1e3e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1e3b6:	687b      	ldr	r3, [r7, #4]
   1e3b8:	68da      	ldr	r2, [r3, #12]
   1e3ba:	687b      	ldr	r3, [r7, #4]
   1e3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e3be:	18d2      	adds	r2, r2, r3
   1e3c0:	687b      	ldr	r3, [r7, #4]
   1e3c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1e3c4:	687b      	ldr	r3, [r7, #4]
   1e3c6:	68da      	ldr	r2, [r3, #12]
   1e3c8:	687b      	ldr	r3, [r7, #4]
   1e3ca:	685b      	ldr	r3, [r3, #4]
   1e3cc:	429a      	cmp	r2, r3
   1e3ce:	d303      	bcc.n	1e3d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1e3d0:	687b      	ldr	r3, [r7, #4]
   1e3d2:	681a      	ldr	r2, [r3, #0]
   1e3d4:	687b      	ldr	r3, [r7, #4]
   1e3d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1e3d8:	687b      	ldr	r3, [r7, #4]
   1e3da:	68d9      	ldr	r1, [r3, #12]
   1e3dc:	687b      	ldr	r3, [r7, #4]
   1e3de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1e3e0:	683b      	ldr	r3, [r7, #0]
   1e3e2:	0018      	movs	r0, r3
   1e3e4:	4b02      	ldr	r3, [pc, #8]	; (1e3f0 <prvCopyDataFromQueue+0x4c>)
   1e3e6:	4798      	blx	r3
	}
}
   1e3e8:	46c0      	nop			; (mov r8, r8)
   1e3ea:	46bd      	mov	sp, r7
   1e3ec:	b002      	add	sp, #8
   1e3ee:	bd80      	pop	{r7, pc}
   1e3f0:	000378cd 	.word	0x000378cd

0001e3f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1e3f4:	b580      	push	{r7, lr}
   1e3f6:	b084      	sub	sp, #16
   1e3f8:	af00      	add	r7, sp, #0
   1e3fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1e3fc:	4b34      	ldr	r3, [pc, #208]	; (1e4d0 <prvUnlockQueue+0xdc>)
   1e3fe:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1e400:	230f      	movs	r3, #15
   1e402:	18fb      	adds	r3, r7, r3
   1e404:	687a      	ldr	r2, [r7, #4]
   1e406:	2145      	movs	r1, #69	; 0x45
   1e408:	5c52      	ldrb	r2, [r2, r1]
   1e40a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e40c:	e022      	b.n	1e454 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1e40e:	687b      	ldr	r3, [r7, #4]
   1e410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e412:	2b00      	cmp	r3, #0
   1e414:	d009      	beq.n	1e42a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1e416:	687b      	ldr	r3, [r7, #4]
   1e418:	2100      	movs	r1, #0
   1e41a:	0018      	movs	r0, r3
   1e41c:	4b2d      	ldr	r3, [pc, #180]	; (1e4d4 <prvUnlockQueue+0xe0>)
   1e41e:	4798      	blx	r3
   1e420:	1e03      	subs	r3, r0, #0
   1e422:	d00f      	beq.n	1e444 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1e424:	4b2c      	ldr	r3, [pc, #176]	; (1e4d8 <prvUnlockQueue+0xe4>)
   1e426:	4798      	blx	r3
   1e428:	e00c      	b.n	1e444 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1e42a:	687b      	ldr	r3, [r7, #4]
   1e42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e42e:	2b00      	cmp	r3, #0
   1e430:	d017      	beq.n	1e462 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e432:	687b      	ldr	r3, [r7, #4]
   1e434:	3324      	adds	r3, #36	; 0x24
   1e436:	0018      	movs	r0, r3
   1e438:	4b28      	ldr	r3, [pc, #160]	; (1e4dc <prvUnlockQueue+0xe8>)
   1e43a:	4798      	blx	r3
   1e43c:	1e03      	subs	r3, r0, #0
   1e43e:	d001      	beq.n	1e444 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1e440:	4b25      	ldr	r3, [pc, #148]	; (1e4d8 <prvUnlockQueue+0xe4>)
   1e442:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1e444:	230f      	movs	r3, #15
   1e446:	18fb      	adds	r3, r7, r3
   1e448:	781b      	ldrb	r3, [r3, #0]
   1e44a:	3b01      	subs	r3, #1
   1e44c:	b2da      	uxtb	r2, r3
   1e44e:	230f      	movs	r3, #15
   1e450:	18fb      	adds	r3, r7, r3
   1e452:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e454:	230f      	movs	r3, #15
   1e456:	18fb      	adds	r3, r7, r3
   1e458:	781b      	ldrb	r3, [r3, #0]
   1e45a:	b25b      	sxtb	r3, r3
   1e45c:	2b00      	cmp	r3, #0
   1e45e:	dcd6      	bgt.n	1e40e <prvUnlockQueue+0x1a>
   1e460:	e000      	b.n	1e464 <prvUnlockQueue+0x70>
						break;
   1e462:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1e464:	687b      	ldr	r3, [r7, #4]
   1e466:	2245      	movs	r2, #69	; 0x45
   1e468:	21ff      	movs	r1, #255	; 0xff
   1e46a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1e46c:	4b1c      	ldr	r3, [pc, #112]	; (1e4e0 <prvUnlockQueue+0xec>)
   1e46e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1e470:	4b17      	ldr	r3, [pc, #92]	; (1e4d0 <prvUnlockQueue+0xdc>)
   1e472:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1e474:	230e      	movs	r3, #14
   1e476:	18fb      	adds	r3, r7, r3
   1e478:	687a      	ldr	r2, [r7, #4]
   1e47a:	2144      	movs	r1, #68	; 0x44
   1e47c:	5c52      	ldrb	r2, [r2, r1]
   1e47e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e480:	e014      	b.n	1e4ac <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e482:	687b      	ldr	r3, [r7, #4]
   1e484:	691b      	ldr	r3, [r3, #16]
   1e486:	2b00      	cmp	r3, #0
   1e488:	d017      	beq.n	1e4ba <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e48a:	687b      	ldr	r3, [r7, #4]
   1e48c:	3310      	adds	r3, #16
   1e48e:	0018      	movs	r0, r3
   1e490:	4b12      	ldr	r3, [pc, #72]	; (1e4dc <prvUnlockQueue+0xe8>)
   1e492:	4798      	blx	r3
   1e494:	1e03      	subs	r3, r0, #0
   1e496:	d001      	beq.n	1e49c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1e498:	4b0f      	ldr	r3, [pc, #60]	; (1e4d8 <prvUnlockQueue+0xe4>)
   1e49a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1e49c:	230e      	movs	r3, #14
   1e49e:	18fb      	adds	r3, r7, r3
   1e4a0:	781b      	ldrb	r3, [r3, #0]
   1e4a2:	3b01      	subs	r3, #1
   1e4a4:	b2da      	uxtb	r2, r3
   1e4a6:	230e      	movs	r3, #14
   1e4a8:	18fb      	adds	r3, r7, r3
   1e4aa:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e4ac:	230e      	movs	r3, #14
   1e4ae:	18fb      	adds	r3, r7, r3
   1e4b0:	781b      	ldrb	r3, [r3, #0]
   1e4b2:	b25b      	sxtb	r3, r3
   1e4b4:	2b00      	cmp	r3, #0
   1e4b6:	dce4      	bgt.n	1e482 <prvUnlockQueue+0x8e>
   1e4b8:	e000      	b.n	1e4bc <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1e4ba:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1e4bc:	687b      	ldr	r3, [r7, #4]
   1e4be:	2244      	movs	r2, #68	; 0x44
   1e4c0:	21ff      	movs	r1, #255	; 0xff
   1e4c2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1e4c4:	4b06      	ldr	r3, [pc, #24]	; (1e4e0 <prvUnlockQueue+0xec>)
   1e4c6:	4798      	blx	r3
}
   1e4c8:	46c0      	nop			; (mov r8, r8)
   1e4ca:	46bd      	mov	sp, r7
   1e4cc:	b004      	add	sp, #16
   1e4ce:	bd80      	pop	{r7, pc}
   1e4d0:	0001caf9 	.word	0x0001caf9
   1e4d4:	0001e5c9 	.word	0x0001e5c9
   1e4d8:	0001f59d 	.word	0x0001f59d
   1e4dc:	0001f389 	.word	0x0001f389
   1e4e0:	0001cb1d 	.word	0x0001cb1d

0001e4e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1e4e4:	b580      	push	{r7, lr}
   1e4e6:	b084      	sub	sp, #16
   1e4e8:	af00      	add	r7, sp, #0
   1e4ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1e4ec:	4b08      	ldr	r3, [pc, #32]	; (1e510 <prvIsQueueEmpty+0x2c>)
   1e4ee:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1e4f0:	687b      	ldr	r3, [r7, #4]
   1e4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e4f4:	2b00      	cmp	r3, #0
   1e4f6:	d102      	bne.n	1e4fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1e4f8:	2301      	movs	r3, #1
   1e4fa:	60fb      	str	r3, [r7, #12]
   1e4fc:	e001      	b.n	1e502 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1e4fe:	2300      	movs	r3, #0
   1e500:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1e502:	4b04      	ldr	r3, [pc, #16]	; (1e514 <prvIsQueueEmpty+0x30>)
   1e504:	4798      	blx	r3

	return xReturn;
   1e506:	68fb      	ldr	r3, [r7, #12]
}
   1e508:	0018      	movs	r0, r3
   1e50a:	46bd      	mov	sp, r7
   1e50c:	b004      	add	sp, #16
   1e50e:	bd80      	pop	{r7, pc}
   1e510:	0001caf9 	.word	0x0001caf9
   1e514:	0001cb1d 	.word	0x0001cb1d

0001e518 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1e518:	b580      	push	{r7, lr}
   1e51a:	b084      	sub	sp, #16
   1e51c:	af00      	add	r7, sp, #0
   1e51e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1e520:	4b09      	ldr	r3, [pc, #36]	; (1e548 <prvIsQueueFull+0x30>)
   1e522:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1e524:	687b      	ldr	r3, [r7, #4]
   1e526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e528:	687b      	ldr	r3, [r7, #4]
   1e52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e52c:	429a      	cmp	r2, r3
   1e52e:	d102      	bne.n	1e536 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1e530:	2301      	movs	r3, #1
   1e532:	60fb      	str	r3, [r7, #12]
   1e534:	e001      	b.n	1e53a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1e536:	2300      	movs	r3, #0
   1e538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1e53a:	4b04      	ldr	r3, [pc, #16]	; (1e54c <prvIsQueueFull+0x34>)
   1e53c:	4798      	blx	r3

	return xReturn;
   1e53e:	68fb      	ldr	r3, [r7, #12]
}
   1e540:	0018      	movs	r0, r3
   1e542:	46bd      	mov	sp, r7
   1e544:	b004      	add	sp, #16
   1e546:	bd80      	pop	{r7, pc}
   1e548:	0001caf9 	.word	0x0001caf9
   1e54c:	0001cb1d 	.word	0x0001cb1d

0001e550 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1e550:	b580      	push	{r7, lr}
   1e552:	b086      	sub	sp, #24
   1e554:	af00      	add	r7, sp, #0
   1e556:	60f8      	str	r0, [r7, #12]
   1e558:	60b9      	str	r1, [r7, #8]
   1e55a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1e55c:	68fb      	ldr	r3, [r7, #12]
   1e55e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1e560:	4b15      	ldr	r3, [pc, #84]	; (1e5b8 <vQueueWaitForMessageRestricted+0x68>)
   1e562:	4798      	blx	r3
   1e564:	697b      	ldr	r3, [r7, #20]
   1e566:	2244      	movs	r2, #68	; 0x44
   1e568:	5c9b      	ldrb	r3, [r3, r2]
   1e56a:	b25b      	sxtb	r3, r3
   1e56c:	3301      	adds	r3, #1
   1e56e:	d103      	bne.n	1e578 <vQueueWaitForMessageRestricted+0x28>
   1e570:	697b      	ldr	r3, [r7, #20]
   1e572:	2244      	movs	r2, #68	; 0x44
   1e574:	2100      	movs	r1, #0
   1e576:	5499      	strb	r1, [r3, r2]
   1e578:	697b      	ldr	r3, [r7, #20]
   1e57a:	2245      	movs	r2, #69	; 0x45
   1e57c:	5c9b      	ldrb	r3, [r3, r2]
   1e57e:	b25b      	sxtb	r3, r3
   1e580:	3301      	adds	r3, #1
   1e582:	d103      	bne.n	1e58c <vQueueWaitForMessageRestricted+0x3c>
   1e584:	697b      	ldr	r3, [r7, #20]
   1e586:	2245      	movs	r2, #69	; 0x45
   1e588:	2100      	movs	r1, #0
   1e58a:	5499      	strb	r1, [r3, r2]
   1e58c:	4b0b      	ldr	r3, [pc, #44]	; (1e5bc <vQueueWaitForMessageRestricted+0x6c>)
   1e58e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1e590:	697b      	ldr	r3, [r7, #20]
   1e592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e594:	2b00      	cmp	r3, #0
   1e596:	d106      	bne.n	1e5a6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1e598:	697b      	ldr	r3, [r7, #20]
   1e59a:	3324      	adds	r3, #36	; 0x24
   1e59c:	687a      	ldr	r2, [r7, #4]
   1e59e:	68b9      	ldr	r1, [r7, #8]
   1e5a0:	0018      	movs	r0, r3
   1e5a2:	4b07      	ldr	r3, [pc, #28]	; (1e5c0 <vQueueWaitForMessageRestricted+0x70>)
   1e5a4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1e5a6:	697b      	ldr	r3, [r7, #20]
   1e5a8:	0018      	movs	r0, r3
   1e5aa:	4b06      	ldr	r3, [pc, #24]	; (1e5c4 <vQueueWaitForMessageRestricted+0x74>)
   1e5ac:	4798      	blx	r3
	}
   1e5ae:	46c0      	nop			; (mov r8, r8)
   1e5b0:	46bd      	mov	sp, r7
   1e5b2:	b006      	add	sp, #24
   1e5b4:	bd80      	pop	{r7, pc}
   1e5b6:	46c0      	nop			; (mov r8, r8)
   1e5b8:	0001caf9 	.word	0x0001caf9
   1e5bc:	0001cb1d 	.word	0x0001cb1d
   1e5c0:	0001f2a9 	.word	0x0001f2a9
   1e5c4:	0001e3f5 	.word	0x0001e3f5

0001e5c8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1e5c8:	b5b0      	push	{r4, r5, r7, lr}
   1e5ca:	b086      	sub	sp, #24
   1e5cc:	af00      	add	r7, sp, #0
   1e5ce:	6078      	str	r0, [r7, #4]
   1e5d0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1e5d2:	687b      	ldr	r3, [r7, #4]
   1e5d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e5d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1e5d8:	2300      	movs	r3, #0
   1e5da:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1e5dc:	693b      	ldr	r3, [r7, #16]
   1e5de:	2b00      	cmp	r3, #0
   1e5e0:	d101      	bne.n	1e5e6 <prvNotifyQueueSetContainer+0x1e>
   1e5e2:	b672      	cpsid	i
   1e5e4:	e7fe      	b.n	1e5e4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1e5e6:	693b      	ldr	r3, [r7, #16]
   1e5e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e5ea:	693b      	ldr	r3, [r7, #16]
   1e5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e5ee:	429a      	cmp	r2, r3
   1e5f0:	d301      	bcc.n	1e5f6 <prvNotifyQueueSetContainer+0x2e>
   1e5f2:	b672      	cpsid	i
   1e5f4:	e7fe      	b.n	1e5f4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1e5f6:	693b      	ldr	r3, [r7, #16]
   1e5f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e5fa:	693b      	ldr	r3, [r7, #16]
   1e5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e5fe:	429a      	cmp	r2, r3
   1e600:	d300      	bcc.n	1e604 <prvNotifyQueueSetContainer+0x3c>
   1e602:	e08b      	b.n	1e71c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1e604:	230f      	movs	r3, #15
   1e606:	18fb      	adds	r3, r7, r3
   1e608:	693a      	ldr	r2, [r7, #16]
   1e60a:	2145      	movs	r1, #69	; 0x45
   1e60c:	5c52      	ldrb	r2, [r2, r1]
   1e60e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1e610:	4b45      	ldr	r3, [pc, #276]	; (1e728 <prvNotifyQueueSetContainer+0x160>)
   1e612:	4798      	blx	r3
   1e614:	0003      	movs	r3, r0
   1e616:	0018      	movs	r0, r3
   1e618:	4b44      	ldr	r3, [pc, #272]	; (1e72c <prvNotifyQueueSetContainer+0x164>)
   1e61a:	4798      	blx	r3
   1e61c:	0003      	movs	r3, r0
   1e61e:	001a      	movs	r2, r3
   1e620:	4b43      	ldr	r3, [pc, #268]	; (1e730 <prvNotifyQueueSetContainer+0x168>)
   1e622:	881b      	ldrh	r3, [r3, #0]
   1e624:	4013      	ands	r3, r2
   1e626:	b29b      	uxth	r3, r3
   1e628:	2b00      	cmp	r3, #0
   1e62a:	d02e      	beq.n	1e68a <prvNotifyQueueSetContainer+0xc2>
   1e62c:	693b      	ldr	r3, [r7, #16]
   1e62e:	0018      	movs	r0, r3
   1e630:	4b40      	ldr	r3, [pc, #256]	; (1e734 <prvNotifyQueueSetContainer+0x16c>)
   1e632:	4798      	blx	r3
   1e634:	0003      	movs	r3, r0
   1e636:	001a      	movs	r2, r3
   1e638:	4b3d      	ldr	r3, [pc, #244]	; (1e730 <prvNotifyQueueSetContainer+0x168>)
   1e63a:	881b      	ldrh	r3, [r3, #0]
   1e63c:	4013      	ands	r3, r2
   1e63e:	b29b      	uxth	r3, r3
   1e640:	2b00      	cmp	r3, #0
   1e642:	d022      	beq.n	1e68a <prvNotifyQueueSetContainer+0xc2>
   1e644:	683b      	ldr	r3, [r7, #0]
   1e646:	2b00      	cmp	r3, #0
   1e648:	d10b      	bne.n	1e662 <prvNotifyQueueSetContainer+0x9a>
   1e64a:	693b      	ldr	r3, [r7, #16]
   1e64c:	0018      	movs	r0, r3
   1e64e:	4b3a      	ldr	r3, [pc, #232]	; (1e738 <prvNotifyQueueSetContainer+0x170>)
   1e650:	4798      	blx	r3
   1e652:	0003      	movs	r3, r0
   1e654:	001a      	movs	r2, r3
   1e656:	4b39      	ldr	r3, [pc, #228]	; (1e73c <prvNotifyQueueSetContainer+0x174>)
   1e658:	5c9b      	ldrb	r3, [r3, r2]
   1e65a:	3320      	adds	r3, #32
   1e65c:	b2db      	uxtb	r3, r3
   1e65e:	001d      	movs	r5, r3
   1e660:	e000      	b.n	1e664 <prvNotifyQueueSetContainer+0x9c>
   1e662:	2525      	movs	r5, #37	; 0x25
   1e664:	693b      	ldr	r3, [r7, #16]
   1e666:	0018      	movs	r0, r3
   1e668:	4b33      	ldr	r3, [pc, #204]	; (1e738 <prvNotifyQueueSetContainer+0x170>)
   1e66a:	4798      	blx	r3
   1e66c:	0003      	movs	r3, r0
   1e66e:	001a      	movs	r2, r3
   1e670:	4b32      	ldr	r3, [pc, #200]	; (1e73c <prvNotifyQueueSetContainer+0x174>)
   1e672:	5c9c      	ldrb	r4, [r3, r2]
   1e674:	693b      	ldr	r3, [r7, #16]
   1e676:	0018      	movs	r0, r3
   1e678:	4b31      	ldr	r3, [pc, #196]	; (1e740 <prvNotifyQueueSetContainer+0x178>)
   1e67a:	4798      	blx	r3
   1e67c:	0003      	movs	r3, r0
   1e67e:	b2db      	uxtb	r3, r3
   1e680:	001a      	movs	r2, r3
   1e682:	0021      	movs	r1, r4
   1e684:	0028      	movs	r0, r5
   1e686:	4b2f      	ldr	r3, [pc, #188]	; (1e744 <prvNotifyQueueSetContainer+0x17c>)
   1e688:	4798      	blx	r3
   1e68a:	693b      	ldr	r3, [r7, #16]
   1e68c:	0018      	movs	r0, r3
   1e68e:	4b2a      	ldr	r3, [pc, #168]	; (1e738 <prvNotifyQueueSetContainer+0x170>)
   1e690:	4798      	blx	r3
   1e692:	0003      	movs	r3, r0
   1e694:	001a      	movs	r2, r3
   1e696:	4b29      	ldr	r3, [pc, #164]	; (1e73c <prvNotifyQueueSetContainer+0x174>)
   1e698:	5c9c      	ldrb	r4, [r3, r2]
   1e69a:	693b      	ldr	r3, [r7, #16]
   1e69c:	0018      	movs	r0, r3
   1e69e:	4b28      	ldr	r3, [pc, #160]	; (1e740 <prvNotifyQueueSetContainer+0x178>)
   1e6a0:	4798      	blx	r3
   1e6a2:	0003      	movs	r3, r0
   1e6a4:	b2dd      	uxtb	r5, r3
   1e6a6:	693b      	ldr	r3, [r7, #16]
   1e6a8:	0018      	movs	r0, r3
   1e6aa:	4b23      	ldr	r3, [pc, #140]	; (1e738 <prvNotifyQueueSetContainer+0x170>)
   1e6ac:	4798      	blx	r3
   1e6ae:	0003      	movs	r3, r0
   1e6b0:	001a      	movs	r2, r3
   1e6b2:	4b22      	ldr	r3, [pc, #136]	; (1e73c <prvNotifyQueueSetContainer+0x174>)
   1e6b4:	5c9b      	ldrb	r3, [r3, r2]
   1e6b6:	2b02      	cmp	r3, #2
   1e6b8:	d005      	beq.n	1e6c6 <prvNotifyQueueSetContainer+0xfe>
   1e6ba:	693b      	ldr	r3, [r7, #16]
   1e6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e6be:	b2db      	uxtb	r3, r3
   1e6c0:	3301      	adds	r3, #1
   1e6c2:	b2db      	uxtb	r3, r3
   1e6c4:	e000      	b.n	1e6c8 <prvNotifyQueueSetContainer+0x100>
   1e6c6:	2300      	movs	r3, #0
   1e6c8:	001a      	movs	r2, r3
   1e6ca:	0029      	movs	r1, r5
   1e6cc:	0020      	movs	r0, r4
   1e6ce:	4b1e      	ldr	r3, [pc, #120]	; (1e748 <prvNotifyQueueSetContainer+0x180>)
   1e6d0:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1e6d2:	683a      	ldr	r2, [r7, #0]
   1e6d4:	1d39      	adds	r1, r7, #4
   1e6d6:	693b      	ldr	r3, [r7, #16]
   1e6d8:	0018      	movs	r0, r3
   1e6da:	4b1c      	ldr	r3, [pc, #112]	; (1e74c <prvNotifyQueueSetContainer+0x184>)
   1e6dc:	4798      	blx	r3
   1e6de:	0003      	movs	r3, r0
   1e6e0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1e6e2:	230f      	movs	r3, #15
   1e6e4:	18fb      	adds	r3, r7, r3
   1e6e6:	781b      	ldrb	r3, [r3, #0]
   1e6e8:	b25b      	sxtb	r3, r3
   1e6ea:	3301      	adds	r3, #1
   1e6ec:	d10d      	bne.n	1e70a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1e6ee:	693b      	ldr	r3, [r7, #16]
   1e6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e6f2:	2b00      	cmp	r3, #0
   1e6f4:	d012      	beq.n	1e71c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1e6f6:	693b      	ldr	r3, [r7, #16]
   1e6f8:	3324      	adds	r3, #36	; 0x24
   1e6fa:	0018      	movs	r0, r3
   1e6fc:	4b14      	ldr	r3, [pc, #80]	; (1e750 <prvNotifyQueueSetContainer+0x188>)
   1e6fe:	4798      	blx	r3
   1e700:	1e03      	subs	r3, r0, #0
   1e702:	d00b      	beq.n	1e71c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1e704:	2301      	movs	r3, #1
   1e706:	617b      	str	r3, [r7, #20]
   1e708:	e008      	b.n	1e71c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1e70a:	230f      	movs	r3, #15
   1e70c:	18fb      	adds	r3, r7, r3
   1e70e:	781b      	ldrb	r3, [r3, #0]
   1e710:	3301      	adds	r3, #1
   1e712:	b2db      	uxtb	r3, r3
   1e714:	b259      	sxtb	r1, r3
   1e716:	693b      	ldr	r3, [r7, #16]
   1e718:	2245      	movs	r2, #69	; 0x45
   1e71a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1e71c:	697b      	ldr	r3, [r7, #20]
	}
   1e71e:	0018      	movs	r0, r3
   1e720:	46bd      	mov	sp, r7
   1e722:	b006      	add	sp, #24
   1e724:	bdb0      	pop	{r4, r5, r7, pc}
   1e726:	46c0      	nop			; (mov r8, r8)
   1e728:	0001ad89 	.word	0x0001ad89
   1e72c:	0001aaed 	.word	0x0001aaed
   1e730:	20000104 	.word	0x20000104
   1e734:	0001abad 	.word	0x0001abad
   1e738:	0001aaad 	.word	0x0001aaad
   1e73c:	200000f8 	.word	0x200000f8
   1e740:	0001ab8d 	.word	0x0001ab8d
   1e744:	0001b4e5 	.word	0x0001b4e5
   1e748:	0001bb41 	.word	0x0001bb41
   1e74c:	0001e2c5 	.word	0x0001e2c5
   1e750:	0001f389 	.word	0x0001f389

0001e754 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1e754:	b590      	push	{r4, r7, lr}
   1e756:	b08d      	sub	sp, #52	; 0x34
   1e758:	af04      	add	r7, sp, #16
   1e75a:	60f8      	str	r0, [r7, #12]
   1e75c:	60b9      	str	r1, [r7, #8]
   1e75e:	603b      	str	r3, [r7, #0]
   1e760:	1dbb      	adds	r3, r7, #6
   1e762:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e764:	1dbb      	adds	r3, r7, #6
   1e766:	881b      	ldrh	r3, [r3, #0]
   1e768:	009b      	lsls	r3, r3, #2
   1e76a:	0018      	movs	r0, r3
   1e76c:	4b1d      	ldr	r3, [pc, #116]	; (1e7e4 <xTaskCreate+0x90>)
   1e76e:	4798      	blx	r3
   1e770:	0003      	movs	r3, r0
   1e772:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1e774:	697b      	ldr	r3, [r7, #20]
   1e776:	2b00      	cmp	r3, #0
   1e778:	d010      	beq.n	1e79c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1e77a:	2054      	movs	r0, #84	; 0x54
   1e77c:	4b19      	ldr	r3, [pc, #100]	; (1e7e4 <xTaskCreate+0x90>)
   1e77e:	4798      	blx	r3
   1e780:	0003      	movs	r3, r0
   1e782:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1e784:	69fb      	ldr	r3, [r7, #28]
   1e786:	2b00      	cmp	r3, #0
   1e788:	d003      	beq.n	1e792 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1e78a:	69fb      	ldr	r3, [r7, #28]
   1e78c:	697a      	ldr	r2, [r7, #20]
   1e78e:	631a      	str	r2, [r3, #48]	; 0x30
   1e790:	e006      	b.n	1e7a0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1e792:	697b      	ldr	r3, [r7, #20]
   1e794:	0018      	movs	r0, r3
   1e796:	4b14      	ldr	r3, [pc, #80]	; (1e7e8 <xTaskCreate+0x94>)
   1e798:	4798      	blx	r3
   1e79a:	e001      	b.n	1e7a0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1e79c:	2300      	movs	r3, #0
   1e79e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1e7a0:	69fb      	ldr	r3, [r7, #28]
   1e7a2:	2b00      	cmp	r3, #0
   1e7a4:	d016      	beq.n	1e7d4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1e7a6:	1dbb      	adds	r3, r7, #6
   1e7a8:	881a      	ldrh	r2, [r3, #0]
   1e7aa:	683c      	ldr	r4, [r7, #0]
   1e7ac:	68b9      	ldr	r1, [r7, #8]
   1e7ae:	68f8      	ldr	r0, [r7, #12]
   1e7b0:	2300      	movs	r3, #0
   1e7b2:	9303      	str	r3, [sp, #12]
   1e7b4:	69fb      	ldr	r3, [r7, #28]
   1e7b6:	9302      	str	r3, [sp, #8]
   1e7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e7ba:	9301      	str	r3, [sp, #4]
   1e7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e7be:	9300      	str	r3, [sp, #0]
   1e7c0:	0023      	movs	r3, r4
   1e7c2:	4c0a      	ldr	r4, [pc, #40]	; (1e7ec <xTaskCreate+0x98>)
   1e7c4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1e7c6:	69fb      	ldr	r3, [r7, #28]
   1e7c8:	0018      	movs	r0, r3
   1e7ca:	4b09      	ldr	r3, [pc, #36]	; (1e7f0 <xTaskCreate+0x9c>)
   1e7cc:	4798      	blx	r3
			xReturn = pdPASS;
   1e7ce:	2301      	movs	r3, #1
   1e7d0:	61bb      	str	r3, [r7, #24]
   1e7d2:	e002      	b.n	1e7da <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1e7d4:	2301      	movs	r3, #1
   1e7d6:	425b      	negs	r3, r3
   1e7d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1e7da:	69bb      	ldr	r3, [r7, #24]
	}
   1e7dc:	0018      	movs	r0, r3
   1e7de:	46bd      	mov	sp, r7
   1e7e0:	b009      	add	sp, #36	; 0x24
   1e7e2:	bd90      	pop	{r4, r7, pc}
   1e7e4:	0001cc31 	.word	0x0001cc31
   1e7e8:	0001ccf5 	.word	0x0001ccf5
   1e7ec:	0001e7f5 	.word	0x0001e7f5
   1e7f0:	0001e905 	.word	0x0001e905

0001e7f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1e7f4:	b580      	push	{r7, lr}
   1e7f6:	b086      	sub	sp, #24
   1e7f8:	af00      	add	r7, sp, #0
   1e7fa:	60f8      	str	r0, [r7, #12]
   1e7fc:	60b9      	str	r1, [r7, #8]
   1e7fe:	607a      	str	r2, [r7, #4]
   1e800:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1e802:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e804:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1e806:	687b      	ldr	r3, [r7, #4]
   1e808:	009b      	lsls	r3, r3, #2
   1e80a:	001a      	movs	r2, r3
   1e80c:	21a5      	movs	r1, #165	; 0xa5
   1e80e:	4b39      	ldr	r3, [pc, #228]	; (1e8f4 <prvInitialiseNewTask+0x100>)
   1e810:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1e812:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1e816:	687b      	ldr	r3, [r7, #4]
   1e818:	4937      	ldr	r1, [pc, #220]	; (1e8f8 <prvInitialiseNewTask+0x104>)
   1e81a:	468c      	mov	ip, r1
   1e81c:	4463      	add	r3, ip
   1e81e:	009b      	lsls	r3, r3, #2
   1e820:	18d3      	adds	r3, r2, r3
   1e822:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1e824:	693b      	ldr	r3, [r7, #16]
   1e826:	2207      	movs	r2, #7
   1e828:	4393      	bics	r3, r2
   1e82a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1e82c:	693b      	ldr	r3, [r7, #16]
   1e82e:	2207      	movs	r2, #7
   1e830:	4013      	ands	r3, r2
   1e832:	d001      	beq.n	1e838 <prvInitialiseNewTask+0x44>
   1e834:	b672      	cpsid	i
   1e836:	e7fe      	b.n	1e836 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1e838:	2300      	movs	r3, #0
   1e83a:	617b      	str	r3, [r7, #20]
   1e83c:	e013      	b.n	1e866 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e83e:	68ba      	ldr	r2, [r7, #8]
   1e840:	697b      	ldr	r3, [r7, #20]
   1e842:	18d3      	adds	r3, r2, r3
   1e844:	7818      	ldrb	r0, [r3, #0]
   1e846:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e848:	2134      	movs	r1, #52	; 0x34
   1e84a:	697b      	ldr	r3, [r7, #20]
   1e84c:	18d3      	adds	r3, r2, r3
   1e84e:	185b      	adds	r3, r3, r1
   1e850:	1c02      	adds	r2, r0, #0
   1e852:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1e854:	68ba      	ldr	r2, [r7, #8]
   1e856:	697b      	ldr	r3, [r7, #20]
   1e858:	18d3      	adds	r3, r2, r3
   1e85a:	781b      	ldrb	r3, [r3, #0]
   1e85c:	2b00      	cmp	r3, #0
   1e85e:	d006      	beq.n	1e86e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1e860:	697b      	ldr	r3, [r7, #20]
   1e862:	3301      	adds	r3, #1
   1e864:	617b      	str	r3, [r7, #20]
   1e866:	697b      	ldr	r3, [r7, #20]
   1e868:	2b07      	cmp	r3, #7
   1e86a:	d9e8      	bls.n	1e83e <prvInitialiseNewTask+0x4a>
   1e86c:	e000      	b.n	1e870 <prvInitialiseNewTask+0x7c>
		{
			break;
   1e86e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e872:	223b      	movs	r2, #59	; 0x3b
   1e874:	2100      	movs	r1, #0
   1e876:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1e878:	6a3b      	ldr	r3, [r7, #32]
   1e87a:	2b04      	cmp	r3, #4
   1e87c:	d901      	bls.n	1e882 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1e87e:	2304      	movs	r3, #4
   1e880:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1e882:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e884:	6a3a      	ldr	r2, [r7, #32]
   1e886:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1e888:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e88a:	6a3a      	ldr	r2, [r7, #32]
   1e88c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1e88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e890:	2200      	movs	r2, #0
   1e892:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1e894:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e896:	3304      	adds	r3, #4
   1e898:	0018      	movs	r0, r3
   1e89a:	4b18      	ldr	r3, [pc, #96]	; (1e8fc <prvInitialiseNewTask+0x108>)
   1e89c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1e89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e8a0:	3318      	adds	r3, #24
   1e8a2:	0018      	movs	r0, r3
   1e8a4:	4b15      	ldr	r3, [pc, #84]	; (1e8fc <prvInitialiseNewTask+0x108>)
   1e8a6:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1e8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e8aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e8ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e8ae:	6a3b      	ldr	r3, [r7, #32]
   1e8b0:	2205      	movs	r2, #5
   1e8b2:	1ad2      	subs	r2, r2, r3
   1e8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e8b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1e8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e8ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e8bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e8c0:	2200      	movs	r2, #0
   1e8c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1e8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e8c6:	2250      	movs	r2, #80	; 0x50
   1e8c8:	2100      	movs	r1, #0
   1e8ca:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1e8cc:	683a      	ldr	r2, [r7, #0]
   1e8ce:	68f9      	ldr	r1, [r7, #12]
   1e8d0:	693b      	ldr	r3, [r7, #16]
   1e8d2:	0018      	movs	r0, r3
   1e8d4:	4b0a      	ldr	r3, [pc, #40]	; (1e900 <prvInitialiseNewTask+0x10c>)
   1e8d6:	4798      	blx	r3
   1e8d8:	0002      	movs	r2, r0
   1e8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e8dc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1e8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e8e0:	2b00      	cmp	r3, #0
   1e8e2:	d002      	beq.n	1e8ea <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1e8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e8e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e8e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1e8ea:	46c0      	nop			; (mov r8, r8)
   1e8ec:	46bd      	mov	sp, r7
   1e8ee:	b006      	add	sp, #24
   1e8f0:	bd80      	pop	{r7, pc}
   1e8f2:	46c0      	nop			; (mov r8, r8)
   1e8f4:	00037903 	.word	0x00037903
   1e8f8:	3fffffff 	.word	0x3fffffff
   1e8fc:	0001c8a1 	.word	0x0001c8a1
   1e900:	0001c9b9 	.word	0x0001c9b9

0001e904 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1e904:	b580      	push	{r7, lr}
   1e906:	b082      	sub	sp, #8
   1e908:	af00      	add	r7, sp, #0
   1e90a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1e90c:	4b60      	ldr	r3, [pc, #384]	; (1ea90 <prvAddNewTaskToReadyList+0x18c>)
   1e90e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1e910:	4b60      	ldr	r3, [pc, #384]	; (1ea94 <prvAddNewTaskToReadyList+0x190>)
   1e912:	681b      	ldr	r3, [r3, #0]
   1e914:	1c5a      	adds	r2, r3, #1
   1e916:	4b5f      	ldr	r3, [pc, #380]	; (1ea94 <prvAddNewTaskToReadyList+0x190>)
   1e918:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1e91a:	4b5f      	ldr	r3, [pc, #380]	; (1ea98 <prvAddNewTaskToReadyList+0x194>)
   1e91c:	681b      	ldr	r3, [r3, #0]
   1e91e:	2b00      	cmp	r3, #0
   1e920:	d109      	bne.n	1e936 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1e922:	4b5d      	ldr	r3, [pc, #372]	; (1ea98 <prvAddNewTaskToReadyList+0x194>)
   1e924:	687a      	ldr	r2, [r7, #4]
   1e926:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1e928:	4b5a      	ldr	r3, [pc, #360]	; (1ea94 <prvAddNewTaskToReadyList+0x190>)
   1e92a:	681b      	ldr	r3, [r3, #0]
   1e92c:	2b01      	cmp	r3, #1
   1e92e:	d110      	bne.n	1e952 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1e930:	4b5a      	ldr	r3, [pc, #360]	; (1ea9c <prvAddNewTaskToReadyList+0x198>)
   1e932:	4798      	blx	r3
   1e934:	e00d      	b.n	1e952 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1e936:	4b5a      	ldr	r3, [pc, #360]	; (1eaa0 <prvAddNewTaskToReadyList+0x19c>)
   1e938:	681b      	ldr	r3, [r3, #0]
   1e93a:	2b00      	cmp	r3, #0
   1e93c:	d109      	bne.n	1e952 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1e93e:	4b56      	ldr	r3, [pc, #344]	; (1ea98 <prvAddNewTaskToReadyList+0x194>)
   1e940:	681b      	ldr	r3, [r3, #0]
   1e942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e944:	687b      	ldr	r3, [r7, #4]
   1e946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e948:	429a      	cmp	r2, r3
   1e94a:	d802      	bhi.n	1e952 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1e94c:	4b52      	ldr	r3, [pc, #328]	; (1ea98 <prvAddNewTaskToReadyList+0x194>)
   1e94e:	687a      	ldr	r2, [r7, #4]
   1e950:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1e952:	4b54      	ldr	r3, [pc, #336]	; (1eaa4 <prvAddNewTaskToReadyList+0x1a0>)
   1e954:	681b      	ldr	r3, [r3, #0]
   1e956:	1c5a      	adds	r2, r3, #1
   1e958:	4b52      	ldr	r3, [pc, #328]	; (1eaa4 <prvAddNewTaskToReadyList+0x1a0>)
   1e95a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1e95c:	4b51      	ldr	r3, [pc, #324]	; (1eaa4 <prvAddNewTaskToReadyList+0x1a0>)
   1e95e:	681a      	ldr	r2, [r3, #0]
   1e960:	687b      	ldr	r3, [r7, #4]
   1e962:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1e964:	687b      	ldr	r3, [r7, #4]
   1e966:	2b00      	cmp	r3, #0
   1e968:	d052      	beq.n	1ea10 <prvAddNewTaskToReadyList+0x10c>
   1e96a:	2003      	movs	r0, #3
   1e96c:	4b4e      	ldr	r3, [pc, #312]	; (1eaa8 <prvAddNewTaskToReadyList+0x1a4>)
   1e96e:	4798      	blx	r3
   1e970:	0003      	movs	r3, r0
   1e972:	b29a      	uxth	r2, r3
   1e974:	687b      	ldr	r3, [r7, #4]
   1e976:	0011      	movs	r1, r2
   1e978:	0018      	movs	r0, r3
   1e97a:	4b4c      	ldr	r3, [pc, #304]	; (1eaac <prvAddNewTaskToReadyList+0x1a8>)
   1e97c:	4798      	blx	r3
   1e97e:	4b4c      	ldr	r3, [pc, #304]	; (1eab0 <prvAddNewTaskToReadyList+0x1ac>)
   1e980:	881a      	ldrh	r2, [r3, #0]
   1e982:	687b      	ldr	r3, [r7, #4]
   1e984:	0011      	movs	r1, r2
   1e986:	0018      	movs	r0, r3
   1e988:	4b4a      	ldr	r3, [pc, #296]	; (1eab4 <prvAddNewTaskToReadyList+0x1b0>)
   1e98a:	4798      	blx	r3
   1e98c:	687b      	ldr	r3, [r7, #4]
   1e98e:	0018      	movs	r0, r3
   1e990:	4b49      	ldr	r3, [pc, #292]	; (1eab8 <prvAddNewTaskToReadyList+0x1b4>)
   1e992:	4798      	blx	r3
   1e994:	0003      	movs	r3, r0
   1e996:	b2d9      	uxtb	r1, r3
   1e998:	687b      	ldr	r3, [r7, #4]
   1e99a:	3334      	adds	r3, #52	; 0x34
   1e99c:	001a      	movs	r2, r3
   1e99e:	2003      	movs	r0, #3
   1e9a0:	4b46      	ldr	r3, [pc, #280]	; (1eabc <prvAddNewTaskToReadyList+0x1b8>)
   1e9a2:	4798      	blx	r3
   1e9a4:	687b      	ldr	r3, [r7, #4]
   1e9a6:	0018      	movs	r0, r3
   1e9a8:	4b43      	ldr	r3, [pc, #268]	; (1eab8 <prvAddNewTaskToReadyList+0x1b4>)
   1e9aa:	4798      	blx	r3
   1e9ac:	0003      	movs	r3, r0
   1e9ae:	b2d9      	uxtb	r1, r3
   1e9b0:	687b      	ldr	r3, [r7, #4]
   1e9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e9b4:	b2db      	uxtb	r3, r3
   1e9b6:	001a      	movs	r2, r3
   1e9b8:	2003      	movs	r0, #3
   1e9ba:	4b41      	ldr	r3, [pc, #260]	; (1eac0 <prvAddNewTaskToReadyList+0x1bc>)
   1e9bc:	4798      	blx	r3
   1e9be:	4b41      	ldr	r3, [pc, #260]	; (1eac4 <prvAddNewTaskToReadyList+0x1c0>)
   1e9c0:	4798      	blx	r3
   1e9c2:	0003      	movs	r3, r0
   1e9c4:	0018      	movs	r0, r3
   1e9c6:	4b40      	ldr	r3, [pc, #256]	; (1eac8 <prvAddNewTaskToReadyList+0x1c4>)
   1e9c8:	4798      	blx	r3
   1e9ca:	0003      	movs	r3, r0
   1e9cc:	001a      	movs	r2, r3
   1e9ce:	4b3f      	ldr	r3, [pc, #252]	; (1eacc <prvAddNewTaskToReadyList+0x1c8>)
   1e9d0:	881b      	ldrh	r3, [r3, #0]
   1e9d2:	4013      	ands	r3, r2
   1e9d4:	b29b      	uxth	r3, r3
   1e9d6:	2b00      	cmp	r3, #0
   1e9d8:	d016      	beq.n	1ea08 <prvAddNewTaskToReadyList+0x104>
   1e9da:	687b      	ldr	r3, [r7, #4]
   1e9dc:	0018      	movs	r0, r3
   1e9de:	4b3a      	ldr	r3, [pc, #232]	; (1eac8 <prvAddNewTaskToReadyList+0x1c4>)
   1e9e0:	4798      	blx	r3
   1e9e2:	0003      	movs	r3, r0
   1e9e4:	001a      	movs	r2, r3
   1e9e6:	4b39      	ldr	r3, [pc, #228]	; (1eacc <prvAddNewTaskToReadyList+0x1c8>)
   1e9e8:	881b      	ldrh	r3, [r3, #0]
   1e9ea:	4013      	ands	r3, r2
   1e9ec:	b29b      	uxth	r3, r3
   1e9ee:	2b00      	cmp	r3, #0
   1e9f0:	d00a      	beq.n	1ea08 <prvAddNewTaskToReadyList+0x104>
   1e9f2:	687b      	ldr	r3, [r7, #4]
   1e9f4:	0018      	movs	r0, r3
   1e9f6:	4b30      	ldr	r3, [pc, #192]	; (1eab8 <prvAddNewTaskToReadyList+0x1b4>)
   1e9f8:	4798      	blx	r3
   1e9fa:	0003      	movs	r3, r0
   1e9fc:	b2db      	uxtb	r3, r3
   1e9fe:	001a      	movs	r2, r3
   1ea00:	2103      	movs	r1, #3
   1ea02:	201b      	movs	r0, #27
   1ea04:	4b32      	ldr	r3, [pc, #200]	; (1ead0 <prvAddNewTaskToReadyList+0x1cc>)
   1ea06:	4798      	blx	r3
   1ea08:	687b      	ldr	r3, [r7, #4]
   1ea0a:	0018      	movs	r0, r3
   1ea0c:	4b31      	ldr	r3, [pc, #196]	; (1ead4 <prvAddNewTaskToReadyList+0x1d0>)
   1ea0e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1ea10:	687b      	ldr	r3, [r7, #4]
   1ea12:	0018      	movs	r0, r3
   1ea14:	4b2c      	ldr	r3, [pc, #176]	; (1eac8 <prvAddNewTaskToReadyList+0x1c4>)
   1ea16:	4798      	blx	r3
   1ea18:	0003      	movs	r3, r0
   1ea1a:	001a      	movs	r2, r3
   1ea1c:	4b2b      	ldr	r3, [pc, #172]	; (1eacc <prvAddNewTaskToReadyList+0x1c8>)
   1ea1e:	881b      	ldrh	r3, [r3, #0]
   1ea20:	4013      	ands	r3, r2
   1ea22:	b29b      	uxth	r3, r3
   1ea24:	2b00      	cmp	r3, #0
   1ea26:	d008      	beq.n	1ea3a <prvAddNewTaskToReadyList+0x136>
   1ea28:	687b      	ldr	r3, [r7, #4]
   1ea2a:	0018      	movs	r0, r3
   1ea2c:	4b22      	ldr	r3, [pc, #136]	; (1eab8 <prvAddNewTaskToReadyList+0x1b4>)
   1ea2e:	4798      	blx	r3
   1ea30:	0003      	movs	r3, r0
   1ea32:	b2db      	uxtb	r3, r3
   1ea34:	0018      	movs	r0, r3
   1ea36:	4b28      	ldr	r3, [pc, #160]	; (1ead8 <prvAddNewTaskToReadyList+0x1d4>)
   1ea38:	4798      	blx	r3
   1ea3a:	687b      	ldr	r3, [r7, #4]
   1ea3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ea3e:	4b27      	ldr	r3, [pc, #156]	; (1eadc <prvAddNewTaskToReadyList+0x1d8>)
   1ea40:	681b      	ldr	r3, [r3, #0]
   1ea42:	429a      	cmp	r2, r3
   1ea44:	d903      	bls.n	1ea4e <prvAddNewTaskToReadyList+0x14a>
   1ea46:	687b      	ldr	r3, [r7, #4]
   1ea48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ea4a:	4b24      	ldr	r3, [pc, #144]	; (1eadc <prvAddNewTaskToReadyList+0x1d8>)
   1ea4c:	601a      	str	r2, [r3, #0]
   1ea4e:	687b      	ldr	r3, [r7, #4]
   1ea50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ea52:	0013      	movs	r3, r2
   1ea54:	009b      	lsls	r3, r3, #2
   1ea56:	189b      	adds	r3, r3, r2
   1ea58:	009b      	lsls	r3, r3, #2
   1ea5a:	4a21      	ldr	r2, [pc, #132]	; (1eae0 <prvAddNewTaskToReadyList+0x1dc>)
   1ea5c:	189a      	adds	r2, r3, r2
   1ea5e:	687b      	ldr	r3, [r7, #4]
   1ea60:	3304      	adds	r3, #4
   1ea62:	0019      	movs	r1, r3
   1ea64:	0010      	movs	r0, r2
   1ea66:	4b1f      	ldr	r3, [pc, #124]	; (1eae4 <prvAddNewTaskToReadyList+0x1e0>)
   1ea68:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1ea6a:	4b1f      	ldr	r3, [pc, #124]	; (1eae8 <prvAddNewTaskToReadyList+0x1e4>)
   1ea6c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1ea6e:	4b0c      	ldr	r3, [pc, #48]	; (1eaa0 <prvAddNewTaskToReadyList+0x19c>)
   1ea70:	681b      	ldr	r3, [r3, #0]
   1ea72:	2b00      	cmp	r3, #0
   1ea74:	d008      	beq.n	1ea88 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1ea76:	4b08      	ldr	r3, [pc, #32]	; (1ea98 <prvAddNewTaskToReadyList+0x194>)
   1ea78:	681b      	ldr	r3, [r3, #0]
   1ea7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ea7c:	687b      	ldr	r3, [r7, #4]
   1ea7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ea80:	429a      	cmp	r2, r3
   1ea82:	d201      	bcs.n	1ea88 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1ea84:	4b19      	ldr	r3, [pc, #100]	; (1eaec <prvAddNewTaskToReadyList+0x1e8>)
   1ea86:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1ea88:	46c0      	nop			; (mov r8, r8)
   1ea8a:	46bd      	mov	sp, r7
   1ea8c:	b002      	add	sp, #8
   1ea8e:	bd80      	pop	{r7, pc}
   1ea90:	0001caf9 	.word	0x0001caf9
   1ea94:	200040e0 	.word	0x200040e0
   1ea98:	20004008 	.word	0x20004008
   1ea9c:	0001f625 	.word	0x0001f625
   1eaa0:	200040ec 	.word	0x200040ec
   1eaa4:	200040fc 	.word	0x200040fc
   1eaa8:	0001c06d 	.word	0x0001c06d
   1eaac:	0001ab11 	.word	0x0001ab11
   1eab0:	20000106 	.word	0x20000106
   1eab4:	0001ab4d 	.word	0x0001ab4d
   1eab8:	0001aacd 	.word	0x0001aacd
   1eabc:	0001c29d 	.word	0x0001c29d
   1eac0:	0001ba01 	.word	0x0001ba01
   1eac4:	0001ad89 	.word	0x0001ad89
   1eac8:	0001aaed 	.word	0x0001aaed
   1eacc:	20000104 	.word	0x20000104
   1ead0:	0001b4e5 	.word	0x0001b4e5
   1ead4:	0001ac4d 	.word	0x0001ac4d
   1ead8:	0001b29d 	.word	0x0001b29d
   1eadc:	200040e8 	.word	0x200040e8
   1eae0:	2000400c 	.word	0x2000400c
   1eae4:	0001c8b7 	.word	0x0001c8b7
   1eae8:	0001cb1d 	.word	0x0001cb1d
   1eaec:	0001cae1 	.word	0x0001cae1

0001eaf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1eaf0:	b580      	push	{r7, lr}
   1eaf2:	b084      	sub	sp, #16
   1eaf4:	af00      	add	r7, sp, #0
   1eaf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1eaf8:	2300      	movs	r3, #0
   1eafa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1eafc:	687b      	ldr	r3, [r7, #4]
   1eafe:	2b00      	cmp	r3, #0
   1eb00:	d045      	beq.n	1eb8e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1eb02:	4b27      	ldr	r3, [pc, #156]	; (1eba0 <vTaskDelay+0xb0>)
   1eb04:	681b      	ldr	r3, [r3, #0]
   1eb06:	2b00      	cmp	r3, #0
   1eb08:	d001      	beq.n	1eb0e <vTaskDelay+0x1e>
   1eb0a:	b672      	cpsid	i
   1eb0c:	e7fe      	b.n	1eb0c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1eb0e:	4b25      	ldr	r3, [pc, #148]	; (1eba4 <vTaskDelay+0xb4>)
   1eb10:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1eb12:	4b25      	ldr	r3, [pc, #148]	; (1eba8 <vTaskDelay+0xb8>)
   1eb14:	681b      	ldr	r3, [r3, #0]
   1eb16:	0018      	movs	r0, r3
   1eb18:	4b24      	ldr	r3, [pc, #144]	; (1ebac <vTaskDelay+0xbc>)
   1eb1a:	4798      	blx	r3
   1eb1c:	0003      	movs	r3, r0
   1eb1e:	001a      	movs	r2, r3
   1eb20:	4b23      	ldr	r3, [pc, #140]	; (1ebb0 <vTaskDelay+0xc0>)
   1eb22:	881b      	ldrh	r3, [r3, #0]
   1eb24:	4013      	ands	r3, r2
   1eb26:	b29b      	uxth	r3, r3
   1eb28:	2b00      	cmp	r3, #0
   1eb2a:	d00e      	beq.n	1eb4a <vTaskDelay+0x5a>
   1eb2c:	687b      	ldr	r3, [r7, #4]
   1eb2e:	0019      	movs	r1, r3
   1eb30:	2089      	movs	r0, #137	; 0x89
   1eb32:	4b20      	ldr	r3, [pc, #128]	; (1ebb4 <vTaskDelay+0xc4>)
   1eb34:	4798      	blx	r3
   1eb36:	4b1c      	ldr	r3, [pc, #112]	; (1eba8 <vTaskDelay+0xb8>)
   1eb38:	681b      	ldr	r3, [r3, #0]
   1eb3a:	0018      	movs	r0, r3
   1eb3c:	4b1e      	ldr	r3, [pc, #120]	; (1ebb8 <vTaskDelay+0xc8>)
   1eb3e:	4798      	blx	r3
   1eb40:	0003      	movs	r3, r0
   1eb42:	b2db      	uxtb	r3, r3
   1eb44:	0018      	movs	r0, r3
   1eb46:	4b1d      	ldr	r3, [pc, #116]	; (1ebbc <vTaskDelay+0xcc>)
   1eb48:	4798      	blx	r3
   1eb4a:	4b1d      	ldr	r3, [pc, #116]	; (1ebc0 <vTaskDelay+0xd0>)
   1eb4c:	4798      	blx	r3
   1eb4e:	0003      	movs	r3, r0
   1eb50:	0018      	movs	r0, r3
   1eb52:	4b16      	ldr	r3, [pc, #88]	; (1ebac <vTaskDelay+0xbc>)
   1eb54:	4798      	blx	r3
   1eb56:	0003      	movs	r3, r0
   1eb58:	001a      	movs	r2, r3
   1eb5a:	4b15      	ldr	r3, [pc, #84]	; (1ebb0 <vTaskDelay+0xc0>)
   1eb5c:	881b      	ldrh	r3, [r3, #0]
   1eb5e:	4013      	ands	r3, r2
   1eb60:	b29b      	uxth	r3, r3
   1eb62:	2b00      	cmp	r3, #0
   1eb64:	d00a      	beq.n	1eb7c <vTaskDelay+0x8c>
   1eb66:	4b16      	ldr	r3, [pc, #88]	; (1ebc0 <vTaskDelay+0xd0>)
   1eb68:	4798      	blx	r3
   1eb6a:	0003      	movs	r3, r0
   1eb6c:	0018      	movs	r0, r3
   1eb6e:	4b12      	ldr	r3, [pc, #72]	; (1ebb8 <vTaskDelay+0xc8>)
   1eb70:	4798      	blx	r3
   1eb72:	0003      	movs	r3, r0
   1eb74:	b2db      	uxtb	r3, r3
   1eb76:	0018      	movs	r0, r3
   1eb78:	4b10      	ldr	r3, [pc, #64]	; (1ebbc <vTaskDelay+0xcc>)
   1eb7a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1eb7c:	687b      	ldr	r3, [r7, #4]
   1eb7e:	2100      	movs	r1, #0
   1eb80:	0018      	movs	r0, r3
   1eb82:	4b10      	ldr	r3, [pc, #64]	; (1ebc4 <vTaskDelay+0xd4>)
   1eb84:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1eb86:	4b10      	ldr	r3, [pc, #64]	; (1ebc8 <vTaskDelay+0xd8>)
   1eb88:	4798      	blx	r3
   1eb8a:	0003      	movs	r3, r0
   1eb8c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1eb8e:	68fb      	ldr	r3, [r7, #12]
   1eb90:	2b00      	cmp	r3, #0
   1eb92:	d101      	bne.n	1eb98 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1eb94:	4b0d      	ldr	r3, [pc, #52]	; (1ebcc <vTaskDelay+0xdc>)
   1eb96:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1eb98:	46c0      	nop			; (mov r8, r8)
   1eb9a:	46bd      	mov	sp, r7
   1eb9c:	b004      	add	sp, #16
   1eb9e:	bd80      	pop	{r7, pc}
   1eba0:	20004108 	.word	0x20004108
   1eba4:	0001edb1 	.word	0x0001edb1
   1eba8:	20004008 	.word	0x20004008
   1ebac:	0001aaed 	.word	0x0001aaed
   1ebb0:	20000104 	.word	0x20000104
   1ebb4:	0001b7ed 	.word	0x0001b7ed
   1ebb8:	0001aacd 	.word	0x0001aacd
   1ebbc:	0001bc7d 	.word	0x0001bc7d
   1ebc0:	0001ad89 	.word	0x0001ad89
   1ebc4:	0001fd09 	.word	0x0001fd09
   1ebc8:	0001edc9 	.word	0x0001edc9
   1ebcc:	0001cae1 	.word	0x0001cae1

0001ebd0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1ebd0:	b580      	push	{r7, lr}
   1ebd2:	b084      	sub	sp, #16
   1ebd4:	af00      	add	r7, sp, #0
   1ebd6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1ebd8:	4b42      	ldr	r3, [pc, #264]	; (1ece4 <vTaskSuspend+0x114>)
   1ebda:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1ebdc:	687b      	ldr	r3, [r7, #4]
   1ebde:	2b00      	cmp	r3, #0
   1ebe0:	d102      	bne.n	1ebe8 <vTaskSuspend+0x18>
   1ebe2:	4b41      	ldr	r3, [pc, #260]	; (1ece8 <vTaskSuspend+0x118>)
   1ebe4:	681b      	ldr	r3, [r3, #0]
   1ebe6:	e000      	b.n	1ebea <vTaskSuspend+0x1a>
   1ebe8:	687b      	ldr	r3, [r7, #4]
   1ebea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1ebec:	4b3f      	ldr	r3, [pc, #252]	; (1ecec <vTaskSuspend+0x11c>)
   1ebee:	4798      	blx	r3
   1ebf0:	0003      	movs	r3, r0
   1ebf2:	0018      	movs	r0, r3
   1ebf4:	4b3e      	ldr	r3, [pc, #248]	; (1ecf0 <vTaskSuspend+0x120>)
   1ebf6:	4798      	blx	r3
   1ebf8:	0003      	movs	r3, r0
   1ebfa:	001a      	movs	r2, r3
   1ebfc:	4b3d      	ldr	r3, [pc, #244]	; (1ecf4 <vTaskSuspend+0x124>)
   1ebfe:	881b      	ldrh	r3, [r3, #0]
   1ec00:	4013      	ands	r3, r2
   1ec02:	b29b      	uxth	r3, r3
   1ec04:	2b00      	cmp	r3, #0
   1ec06:	d016      	beq.n	1ec36 <vTaskSuspend+0x66>
   1ec08:	68fb      	ldr	r3, [r7, #12]
   1ec0a:	0018      	movs	r0, r3
   1ec0c:	4b38      	ldr	r3, [pc, #224]	; (1ecf0 <vTaskSuspend+0x120>)
   1ec0e:	4798      	blx	r3
   1ec10:	0003      	movs	r3, r0
   1ec12:	001a      	movs	r2, r3
   1ec14:	4b37      	ldr	r3, [pc, #220]	; (1ecf4 <vTaskSuspend+0x124>)
   1ec16:	881b      	ldrh	r3, [r3, #0]
   1ec18:	4013      	ands	r3, r2
   1ec1a:	b29b      	uxth	r3, r3
   1ec1c:	2b00      	cmp	r3, #0
   1ec1e:	d00a      	beq.n	1ec36 <vTaskSuspend+0x66>
   1ec20:	68fb      	ldr	r3, [r7, #12]
   1ec22:	0018      	movs	r0, r3
   1ec24:	4b34      	ldr	r3, [pc, #208]	; (1ecf8 <vTaskSuspend+0x128>)
   1ec26:	4798      	blx	r3
   1ec28:	0003      	movs	r3, r0
   1ec2a:	b2db      	uxtb	r3, r3
   1ec2c:	001a      	movs	r2, r3
   1ec2e:	2103      	movs	r1, #3
   1ec30:	208a      	movs	r0, #138	; 0x8a
   1ec32:	4b32      	ldr	r3, [pc, #200]	; (1ecfc <vTaskSuspend+0x12c>)
   1ec34:	4798      	blx	r3
   1ec36:	68fb      	ldr	r3, [r7, #12]
   1ec38:	0018      	movs	r0, r3
   1ec3a:	4b2f      	ldr	r3, [pc, #188]	; (1ecf8 <vTaskSuspend+0x128>)
   1ec3c:	4798      	blx	r3
   1ec3e:	0003      	movs	r3, r0
   1ec40:	b2db      	uxtb	r3, r3
   1ec42:	0018      	movs	r0, r3
   1ec44:	4b2e      	ldr	r3, [pc, #184]	; (1ed00 <vTaskSuspend+0x130>)
   1ec46:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ec48:	68fb      	ldr	r3, [r7, #12]
   1ec4a:	3304      	adds	r3, #4
   1ec4c:	0018      	movs	r0, r3
   1ec4e:	4b2d      	ldr	r3, [pc, #180]	; (1ed04 <vTaskSuspend+0x134>)
   1ec50:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1ec52:	68fb      	ldr	r3, [r7, #12]
   1ec54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ec56:	2b00      	cmp	r3, #0
   1ec58:	d004      	beq.n	1ec64 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ec5a:	68fb      	ldr	r3, [r7, #12]
   1ec5c:	3318      	adds	r3, #24
   1ec5e:	0018      	movs	r0, r3
   1ec60:	4b28      	ldr	r3, [pc, #160]	; (1ed04 <vTaskSuspend+0x134>)
   1ec62:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1ec64:	68fb      	ldr	r3, [r7, #12]
   1ec66:	1d1a      	adds	r2, r3, #4
   1ec68:	4b27      	ldr	r3, [pc, #156]	; (1ed08 <vTaskSuspend+0x138>)
   1ec6a:	0011      	movs	r1, r2
   1ec6c:	0018      	movs	r0, r3
   1ec6e:	4b27      	ldr	r3, [pc, #156]	; (1ed0c <vTaskSuspend+0x13c>)
   1ec70:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1ec72:	68fb      	ldr	r3, [r7, #12]
   1ec74:	2250      	movs	r2, #80	; 0x50
   1ec76:	5c9b      	ldrb	r3, [r3, r2]
   1ec78:	b2db      	uxtb	r3, r3
   1ec7a:	2b01      	cmp	r3, #1
   1ec7c:	d103      	bne.n	1ec86 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1ec7e:	68fb      	ldr	r3, [r7, #12]
   1ec80:	2250      	movs	r2, #80	; 0x50
   1ec82:	2100      	movs	r1, #0
   1ec84:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1ec86:	4b22      	ldr	r3, [pc, #136]	; (1ed10 <vTaskSuspend+0x140>)
   1ec88:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1ec8a:	4b22      	ldr	r3, [pc, #136]	; (1ed14 <vTaskSuspend+0x144>)
   1ec8c:	681b      	ldr	r3, [r3, #0]
   1ec8e:	2b00      	cmp	r3, #0
   1ec90:	d005      	beq.n	1ec9e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1ec92:	4b14      	ldr	r3, [pc, #80]	; (1ece4 <vTaskSuspend+0x114>)
   1ec94:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1ec96:	4b20      	ldr	r3, [pc, #128]	; (1ed18 <vTaskSuspend+0x148>)
   1ec98:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1ec9a:	4b1d      	ldr	r3, [pc, #116]	; (1ed10 <vTaskSuspend+0x140>)
   1ec9c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1ec9e:	4b12      	ldr	r3, [pc, #72]	; (1ece8 <vTaskSuspend+0x118>)
   1eca0:	681b      	ldr	r3, [r3, #0]
   1eca2:	68fa      	ldr	r2, [r7, #12]
   1eca4:	429a      	cmp	r2, r3
   1eca6:	d118      	bne.n	1ecda <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1eca8:	4b1a      	ldr	r3, [pc, #104]	; (1ed14 <vTaskSuspend+0x144>)
   1ecaa:	681b      	ldr	r3, [r3, #0]
   1ecac:	2b00      	cmp	r3, #0
   1ecae:	d008      	beq.n	1ecc2 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1ecb0:	4b1a      	ldr	r3, [pc, #104]	; (1ed1c <vTaskSuspend+0x14c>)
   1ecb2:	681b      	ldr	r3, [r3, #0]
   1ecb4:	2b00      	cmp	r3, #0
   1ecb6:	d001      	beq.n	1ecbc <vTaskSuspend+0xec>
   1ecb8:	b672      	cpsid	i
   1ecba:	e7fe      	b.n	1ecba <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1ecbc:	4b18      	ldr	r3, [pc, #96]	; (1ed20 <vTaskSuspend+0x150>)
   1ecbe:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ecc0:	e00b      	b.n	1ecda <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1ecc2:	4b11      	ldr	r3, [pc, #68]	; (1ed08 <vTaskSuspend+0x138>)
   1ecc4:	681a      	ldr	r2, [r3, #0]
   1ecc6:	4b17      	ldr	r3, [pc, #92]	; (1ed24 <vTaskSuspend+0x154>)
   1ecc8:	681b      	ldr	r3, [r3, #0]
   1ecca:	429a      	cmp	r2, r3
   1eccc:	d103      	bne.n	1ecd6 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1ecce:	4b06      	ldr	r3, [pc, #24]	; (1ece8 <vTaskSuspend+0x118>)
   1ecd0:	2200      	movs	r2, #0
   1ecd2:	601a      	str	r2, [r3, #0]
	}
   1ecd4:	e001      	b.n	1ecda <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1ecd6:	4b14      	ldr	r3, [pc, #80]	; (1ed28 <vTaskSuspend+0x158>)
   1ecd8:	4798      	blx	r3
	}
   1ecda:	46c0      	nop			; (mov r8, r8)
   1ecdc:	46bd      	mov	sp, r7
   1ecde:	b004      	add	sp, #16
   1ece0:	bd80      	pop	{r7, pc}
   1ece2:	46c0      	nop			; (mov r8, r8)
   1ece4:	0001caf9 	.word	0x0001caf9
   1ece8:	20004008 	.word	0x20004008
   1ecec:	0001ad89 	.word	0x0001ad89
   1ecf0:	0001aaed 	.word	0x0001aaed
   1ecf4:	20000104 	.word	0x20000104
   1ecf8:	0001aacd 	.word	0x0001aacd
   1ecfc:	0001b4e5 	.word	0x0001b4e5
   1ed00:	0001bc7d 	.word	0x0001bc7d
   1ed04:	0001c967 	.word	0x0001c967
   1ed08:	200040cc 	.word	0x200040cc
   1ed0c:	0001c8b7 	.word	0x0001c8b7
   1ed10:	0001cb1d 	.word	0x0001cb1d
   1ed14:	200040ec 	.word	0x200040ec
   1ed18:	0001f7b5 	.word	0x0001f7b5
   1ed1c:	20004108 	.word	0x20004108
   1ed20:	0001cae1 	.word	0x0001cae1
   1ed24:	200040e0 	.word	0x200040e0
   1ed28:	0001f145 	.word	0x0001f145

0001ed2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1ed2c:	b590      	push	{r4, r7, lr}
   1ed2e:	b085      	sub	sp, #20
   1ed30:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1ed32:	4916      	ldr	r1, [pc, #88]	; (1ed8c <vTaskStartScheduler+0x60>)
   1ed34:	4816      	ldr	r0, [pc, #88]	; (1ed90 <vTaskStartScheduler+0x64>)
   1ed36:	4b17      	ldr	r3, [pc, #92]	; (1ed94 <vTaskStartScheduler+0x68>)
   1ed38:	9301      	str	r3, [sp, #4]
   1ed3a:	2300      	movs	r3, #0
   1ed3c:	9300      	str	r3, [sp, #0]
   1ed3e:	2300      	movs	r3, #0
   1ed40:	2296      	movs	r2, #150	; 0x96
   1ed42:	4c15      	ldr	r4, [pc, #84]	; (1ed98 <vTaskStartScheduler+0x6c>)
   1ed44:	47a0      	blx	r4
   1ed46:	0003      	movs	r3, r0
   1ed48:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1ed4a:	687b      	ldr	r3, [r7, #4]
   1ed4c:	2b01      	cmp	r3, #1
   1ed4e:	d103      	bne.n	1ed58 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1ed50:	4b12      	ldr	r3, [pc, #72]	; (1ed9c <vTaskStartScheduler+0x70>)
   1ed52:	4798      	blx	r3
   1ed54:	0003      	movs	r3, r0
   1ed56:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1ed58:	687b      	ldr	r3, [r7, #4]
   1ed5a:	2b01      	cmp	r3, #1
   1ed5c:	d10d      	bne.n	1ed7a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1ed5e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1ed60:	4b0f      	ldr	r3, [pc, #60]	; (1eda0 <vTaskStartScheduler+0x74>)
   1ed62:	2201      	movs	r2, #1
   1ed64:	4252      	negs	r2, r2
   1ed66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1ed68:	4b0e      	ldr	r3, [pc, #56]	; (1eda4 <vTaskStartScheduler+0x78>)
   1ed6a:	2201      	movs	r2, #1
   1ed6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1ed6e:	4b0e      	ldr	r3, [pc, #56]	; (1eda8 <vTaskStartScheduler+0x7c>)
   1ed70:	2200      	movs	r2, #0
   1ed72:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1ed74:	4b0d      	ldr	r3, [pc, #52]	; (1edac <vTaskStartScheduler+0x80>)
   1ed76:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1ed78:	e004      	b.n	1ed84 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1ed7a:	687b      	ldr	r3, [r7, #4]
   1ed7c:	3301      	adds	r3, #1
   1ed7e:	d101      	bne.n	1ed84 <vTaskStartScheduler+0x58>
   1ed80:	b672      	cpsid	i
   1ed82:	e7fe      	b.n	1ed82 <vTaskStartScheduler+0x56>
}
   1ed84:	46c0      	nop			; (mov r8, r8)
   1ed86:	46bd      	mov	sp, r7
   1ed88:	b003      	add	sp, #12
   1ed8a:	bd90      	pop	{r4, r7, pc}
   1ed8c:	0003b394 	.word	0x0003b394
   1ed90:	0001f5fd 	.word	0x0001f5fd
   1ed94:	20004104 	.word	0x20004104
   1ed98:	0001e755 	.word	0x0001e755
   1ed9c:	0001fdbd 	.word	0x0001fdbd
   1eda0:	20004100 	.word	0x20004100
   1eda4:	200040ec 	.word	0x200040ec
   1eda8:	200040e4 	.word	0x200040e4
   1edac:	0001ca89 	.word	0x0001ca89

0001edb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1edb0:	b580      	push	{r7, lr}
   1edb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1edb4:	4b03      	ldr	r3, [pc, #12]	; (1edc4 <vTaskSuspendAll+0x14>)
   1edb6:	681b      	ldr	r3, [r3, #0]
   1edb8:	1c5a      	adds	r2, r3, #1
   1edba:	4b02      	ldr	r3, [pc, #8]	; (1edc4 <vTaskSuspendAll+0x14>)
   1edbc:	601a      	str	r2, [r3, #0]
}
   1edbe:	46c0      	nop			; (mov r8, r8)
   1edc0:	46bd      	mov	sp, r7
   1edc2:	bd80      	pop	{r7, pc}
   1edc4:	20004108 	.word	0x20004108

0001edc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1edc8:	b580      	push	{r7, lr}
   1edca:	b084      	sub	sp, #16
   1edcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1edce:	2300      	movs	r3, #0
   1edd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1edd2:	2300      	movs	r3, #0
   1edd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1edd6:	4b45      	ldr	r3, [pc, #276]	; (1eeec <xTaskResumeAll+0x124>)
   1edd8:	681b      	ldr	r3, [r3, #0]
   1edda:	2b00      	cmp	r3, #0
   1eddc:	d101      	bne.n	1ede2 <xTaskResumeAll+0x1a>
   1edde:	b672      	cpsid	i
   1ede0:	e7fe      	b.n	1ede0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1ede2:	4b43      	ldr	r3, [pc, #268]	; (1eef0 <xTaskResumeAll+0x128>)
   1ede4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1ede6:	4b41      	ldr	r3, [pc, #260]	; (1eeec <xTaskResumeAll+0x124>)
   1ede8:	681b      	ldr	r3, [r3, #0]
   1edea:	1e5a      	subs	r2, r3, #1
   1edec:	4b3f      	ldr	r3, [pc, #252]	; (1eeec <xTaskResumeAll+0x124>)
   1edee:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1edf0:	4b3e      	ldr	r3, [pc, #248]	; (1eeec <xTaskResumeAll+0x124>)
   1edf2:	681b      	ldr	r3, [r3, #0]
   1edf4:	2b00      	cmp	r3, #0
   1edf6:	d000      	beq.n	1edfa <xTaskResumeAll+0x32>
   1edf8:	e071      	b.n	1eede <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1edfa:	4b3e      	ldr	r3, [pc, #248]	; (1eef4 <xTaskResumeAll+0x12c>)
   1edfc:	681b      	ldr	r3, [r3, #0]
   1edfe:	2b00      	cmp	r3, #0
   1ee00:	d100      	bne.n	1ee04 <xTaskResumeAll+0x3c>
   1ee02:	e06c      	b.n	1eede <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ee04:	e044      	b.n	1ee90 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1ee06:	4b3c      	ldr	r3, [pc, #240]	; (1eef8 <xTaskResumeAll+0x130>)
   1ee08:	68db      	ldr	r3, [r3, #12]
   1ee0a:	68db      	ldr	r3, [r3, #12]
   1ee0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ee0e:	68fb      	ldr	r3, [r7, #12]
   1ee10:	3318      	adds	r3, #24
   1ee12:	0018      	movs	r0, r3
   1ee14:	4b39      	ldr	r3, [pc, #228]	; (1eefc <xTaskResumeAll+0x134>)
   1ee16:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ee18:	68fb      	ldr	r3, [r7, #12]
   1ee1a:	3304      	adds	r3, #4
   1ee1c:	0018      	movs	r0, r3
   1ee1e:	4b37      	ldr	r3, [pc, #220]	; (1eefc <xTaskResumeAll+0x134>)
   1ee20:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1ee22:	68fb      	ldr	r3, [r7, #12]
   1ee24:	0018      	movs	r0, r3
   1ee26:	4b36      	ldr	r3, [pc, #216]	; (1ef00 <xTaskResumeAll+0x138>)
   1ee28:	4798      	blx	r3
   1ee2a:	0003      	movs	r3, r0
   1ee2c:	001a      	movs	r2, r3
   1ee2e:	4b35      	ldr	r3, [pc, #212]	; (1ef04 <xTaskResumeAll+0x13c>)
   1ee30:	881b      	ldrh	r3, [r3, #0]
   1ee32:	4013      	ands	r3, r2
   1ee34:	b29b      	uxth	r3, r3
   1ee36:	2b00      	cmp	r3, #0
   1ee38:	d008      	beq.n	1ee4c <xTaskResumeAll+0x84>
   1ee3a:	68fb      	ldr	r3, [r7, #12]
   1ee3c:	0018      	movs	r0, r3
   1ee3e:	4b32      	ldr	r3, [pc, #200]	; (1ef08 <xTaskResumeAll+0x140>)
   1ee40:	4798      	blx	r3
   1ee42:	0003      	movs	r3, r0
   1ee44:	b2db      	uxtb	r3, r3
   1ee46:	0018      	movs	r0, r3
   1ee48:	4b30      	ldr	r3, [pc, #192]	; (1ef0c <xTaskResumeAll+0x144>)
   1ee4a:	4798      	blx	r3
   1ee4c:	68fb      	ldr	r3, [r7, #12]
   1ee4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ee50:	4b2f      	ldr	r3, [pc, #188]	; (1ef10 <xTaskResumeAll+0x148>)
   1ee52:	681b      	ldr	r3, [r3, #0]
   1ee54:	429a      	cmp	r2, r3
   1ee56:	d903      	bls.n	1ee60 <xTaskResumeAll+0x98>
   1ee58:	68fb      	ldr	r3, [r7, #12]
   1ee5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ee5c:	4b2c      	ldr	r3, [pc, #176]	; (1ef10 <xTaskResumeAll+0x148>)
   1ee5e:	601a      	str	r2, [r3, #0]
   1ee60:	68fb      	ldr	r3, [r7, #12]
   1ee62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ee64:	0013      	movs	r3, r2
   1ee66:	009b      	lsls	r3, r3, #2
   1ee68:	189b      	adds	r3, r3, r2
   1ee6a:	009b      	lsls	r3, r3, #2
   1ee6c:	4a29      	ldr	r2, [pc, #164]	; (1ef14 <xTaskResumeAll+0x14c>)
   1ee6e:	189a      	adds	r2, r3, r2
   1ee70:	68fb      	ldr	r3, [r7, #12]
   1ee72:	3304      	adds	r3, #4
   1ee74:	0019      	movs	r1, r3
   1ee76:	0010      	movs	r0, r2
   1ee78:	4b27      	ldr	r3, [pc, #156]	; (1ef18 <xTaskResumeAll+0x150>)
   1ee7a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1ee7c:	68fb      	ldr	r3, [r7, #12]
   1ee7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ee80:	4b26      	ldr	r3, [pc, #152]	; (1ef1c <xTaskResumeAll+0x154>)
   1ee82:	681b      	ldr	r3, [r3, #0]
   1ee84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ee86:	429a      	cmp	r2, r3
   1ee88:	d302      	bcc.n	1ee90 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1ee8a:	4b25      	ldr	r3, [pc, #148]	; (1ef20 <xTaskResumeAll+0x158>)
   1ee8c:	2201      	movs	r2, #1
   1ee8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ee90:	4b19      	ldr	r3, [pc, #100]	; (1eef8 <xTaskResumeAll+0x130>)
   1ee92:	681b      	ldr	r3, [r3, #0]
   1ee94:	2b00      	cmp	r3, #0
   1ee96:	d1b6      	bne.n	1ee06 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1ee98:	68fb      	ldr	r3, [r7, #12]
   1ee9a:	2b00      	cmp	r3, #0
   1ee9c:	d001      	beq.n	1eea2 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1ee9e:	4b21      	ldr	r3, [pc, #132]	; (1ef24 <xTaskResumeAll+0x15c>)
   1eea0:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1eea2:	4b21      	ldr	r3, [pc, #132]	; (1ef28 <xTaskResumeAll+0x160>)
   1eea4:	681b      	ldr	r3, [r3, #0]
   1eea6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1eea8:	687b      	ldr	r3, [r7, #4]
   1eeaa:	2b00      	cmp	r3, #0
   1eeac:	d00f      	beq.n	1eece <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1eeae:	4b1f      	ldr	r3, [pc, #124]	; (1ef2c <xTaskResumeAll+0x164>)
   1eeb0:	4798      	blx	r3
   1eeb2:	1e03      	subs	r3, r0, #0
   1eeb4:	d002      	beq.n	1eebc <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1eeb6:	4b1a      	ldr	r3, [pc, #104]	; (1ef20 <xTaskResumeAll+0x158>)
   1eeb8:	2201      	movs	r2, #1
   1eeba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1eebc:	687b      	ldr	r3, [r7, #4]
   1eebe:	3b01      	subs	r3, #1
   1eec0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1eec2:	687b      	ldr	r3, [r7, #4]
   1eec4:	2b00      	cmp	r3, #0
   1eec6:	d1f2      	bne.n	1eeae <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1eec8:	4b17      	ldr	r3, [pc, #92]	; (1ef28 <xTaskResumeAll+0x160>)
   1eeca:	2200      	movs	r2, #0
   1eecc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1eece:	4b14      	ldr	r3, [pc, #80]	; (1ef20 <xTaskResumeAll+0x158>)
   1eed0:	681b      	ldr	r3, [r3, #0]
   1eed2:	2b00      	cmp	r3, #0
   1eed4:	d003      	beq.n	1eede <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1eed6:	2301      	movs	r3, #1
   1eed8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1eeda:	4b15      	ldr	r3, [pc, #84]	; (1ef30 <xTaskResumeAll+0x168>)
   1eedc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1eede:	4b15      	ldr	r3, [pc, #84]	; (1ef34 <xTaskResumeAll+0x16c>)
   1eee0:	4798      	blx	r3

	return xAlreadyYielded;
   1eee2:	68bb      	ldr	r3, [r7, #8]
}
   1eee4:	0018      	movs	r0, r3
   1eee6:	46bd      	mov	sp, r7
   1eee8:	b004      	add	sp, #16
   1eeea:	bd80      	pop	{r7, pc}
   1eeec:	20004108 	.word	0x20004108
   1eef0:	0001caf9 	.word	0x0001caf9
   1eef4:	200040e0 	.word	0x200040e0
   1eef8:	200040a0 	.word	0x200040a0
   1eefc:	0001c967 	.word	0x0001c967
   1ef00:	0001aaed 	.word	0x0001aaed
   1ef04:	20000104 	.word	0x20000104
   1ef08:	0001aacd 	.word	0x0001aacd
   1ef0c:	0001b29d 	.word	0x0001b29d
   1ef10:	200040e8 	.word	0x200040e8
   1ef14:	2000400c 	.word	0x2000400c
   1ef18:	0001c8b7 	.word	0x0001c8b7
   1ef1c:	20004008 	.word	0x20004008
   1ef20:	200040f4 	.word	0x200040f4
   1ef24:	0001f7b5 	.word	0x0001f7b5
   1ef28:	200040f0 	.word	0x200040f0
   1ef2c:	0001ef55 	.word	0x0001ef55
   1ef30:	0001cae1 	.word	0x0001cae1
   1ef34:	0001cb1d 	.word	0x0001cb1d

0001ef38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1ef38:	b580      	push	{r7, lr}
   1ef3a:	b082      	sub	sp, #8
   1ef3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1ef3e:	4b04      	ldr	r3, [pc, #16]	; (1ef50 <xTaskGetTickCount+0x18>)
   1ef40:	681b      	ldr	r3, [r3, #0]
   1ef42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1ef44:	687b      	ldr	r3, [r7, #4]
}
   1ef46:	0018      	movs	r0, r3
   1ef48:	46bd      	mov	sp, r7
   1ef4a:	b002      	add	sp, #8
   1ef4c:	bd80      	pop	{r7, pc}
   1ef4e:	46c0      	nop			; (mov r8, r8)
   1ef50:	200040e4 	.word	0x200040e4

0001ef54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1ef54:	b580      	push	{r7, lr}
   1ef56:	b086      	sub	sp, #24
   1ef58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1ef5a:	2300      	movs	r3, #0
   1ef5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1ef5e:	4b64      	ldr	r3, [pc, #400]	; (1f0f0 <xTaskIncrementTick+0x19c>)
   1ef60:	681b      	ldr	r3, [r3, #0]
   1ef62:	2b01      	cmp	r3, #1
   1ef64:	d003      	beq.n	1ef6e <xTaskIncrementTick+0x1a>
   1ef66:	4b63      	ldr	r3, [pc, #396]	; (1f0f4 <xTaskIncrementTick+0x1a0>)
   1ef68:	681b      	ldr	r3, [r3, #0]
   1ef6a:	2b00      	cmp	r3, #0
   1ef6c:	d107      	bne.n	1ef7e <xTaskIncrementTick+0x2a>
   1ef6e:	4b62      	ldr	r3, [pc, #392]	; (1f0f8 <xTaskIncrementTick+0x1a4>)
   1ef70:	681b      	ldr	r3, [r3, #0]
   1ef72:	1c5a      	adds	r2, r3, #1
   1ef74:	4b60      	ldr	r3, [pc, #384]	; (1f0f8 <xTaskIncrementTick+0x1a4>)
   1ef76:	601a      	str	r2, [r3, #0]
   1ef78:	2000      	movs	r0, #0
   1ef7a:	4b60      	ldr	r3, [pc, #384]	; (1f0fc <xTaskIncrementTick+0x1a8>)
   1ef7c:	4798      	blx	r3
   1ef7e:	4b5c      	ldr	r3, [pc, #368]	; (1f0f0 <xTaskIncrementTick+0x19c>)
   1ef80:	681b      	ldr	r3, [r3, #0]
   1ef82:	2b00      	cmp	r3, #0
   1ef84:	d106      	bne.n	1ef94 <xTaskIncrementTick+0x40>
   1ef86:	4b5e      	ldr	r3, [pc, #376]	; (1f100 <xTaskIncrementTick+0x1ac>)
   1ef88:	681b      	ldr	r3, [r3, #0]
   1ef8a:	3301      	adds	r3, #1
   1ef8c:	0019      	movs	r1, r3
   1ef8e:	2003      	movs	r0, #3
   1ef90:	4b5c      	ldr	r3, [pc, #368]	; (1f104 <xTaskIncrementTick+0x1b0>)
   1ef92:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ef94:	4b56      	ldr	r3, [pc, #344]	; (1f0f0 <xTaskIncrementTick+0x19c>)
   1ef96:	681b      	ldr	r3, [r3, #0]
   1ef98:	2b00      	cmp	r3, #0
   1ef9a:	d000      	beq.n	1ef9e <xTaskIncrementTick+0x4a>
   1ef9c:	e098      	b.n	1f0d0 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1ef9e:	4b58      	ldr	r3, [pc, #352]	; (1f100 <xTaskIncrementTick+0x1ac>)
   1efa0:	681b      	ldr	r3, [r3, #0]
   1efa2:	3301      	adds	r3, #1
   1efa4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1efa6:	4b56      	ldr	r3, [pc, #344]	; (1f100 <xTaskIncrementTick+0x1ac>)
   1efa8:	693a      	ldr	r2, [r7, #16]
   1efaa:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1efac:	693b      	ldr	r3, [r7, #16]
   1efae:	2b00      	cmp	r3, #0
   1efb0:	d117      	bne.n	1efe2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1efb2:	4b55      	ldr	r3, [pc, #340]	; (1f108 <xTaskIncrementTick+0x1b4>)
   1efb4:	681b      	ldr	r3, [r3, #0]
   1efb6:	681b      	ldr	r3, [r3, #0]
   1efb8:	2b00      	cmp	r3, #0
   1efba:	d001      	beq.n	1efc0 <xTaskIncrementTick+0x6c>
   1efbc:	b672      	cpsid	i
   1efbe:	e7fe      	b.n	1efbe <xTaskIncrementTick+0x6a>
   1efc0:	4b51      	ldr	r3, [pc, #324]	; (1f108 <xTaskIncrementTick+0x1b4>)
   1efc2:	681b      	ldr	r3, [r3, #0]
   1efc4:	60fb      	str	r3, [r7, #12]
   1efc6:	4b51      	ldr	r3, [pc, #324]	; (1f10c <xTaskIncrementTick+0x1b8>)
   1efc8:	681a      	ldr	r2, [r3, #0]
   1efca:	4b4f      	ldr	r3, [pc, #316]	; (1f108 <xTaskIncrementTick+0x1b4>)
   1efcc:	601a      	str	r2, [r3, #0]
   1efce:	4b4f      	ldr	r3, [pc, #316]	; (1f10c <xTaskIncrementTick+0x1b8>)
   1efd0:	68fa      	ldr	r2, [r7, #12]
   1efd2:	601a      	str	r2, [r3, #0]
   1efd4:	4b4e      	ldr	r3, [pc, #312]	; (1f110 <xTaskIncrementTick+0x1bc>)
   1efd6:	681b      	ldr	r3, [r3, #0]
   1efd8:	1c5a      	adds	r2, r3, #1
   1efda:	4b4d      	ldr	r3, [pc, #308]	; (1f110 <xTaskIncrementTick+0x1bc>)
   1efdc:	601a      	str	r2, [r3, #0]
   1efde:	4b4d      	ldr	r3, [pc, #308]	; (1f114 <xTaskIncrementTick+0x1c0>)
   1efe0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1efe2:	4b4d      	ldr	r3, [pc, #308]	; (1f118 <xTaskIncrementTick+0x1c4>)
   1efe4:	681b      	ldr	r3, [r3, #0]
   1efe6:	693a      	ldr	r2, [r7, #16]
   1efe8:	429a      	cmp	r2, r3
   1efea:	d363      	bcc.n	1f0b4 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1efec:	4b46      	ldr	r3, [pc, #280]	; (1f108 <xTaskIncrementTick+0x1b4>)
   1efee:	681b      	ldr	r3, [r3, #0]
   1eff0:	681b      	ldr	r3, [r3, #0]
   1eff2:	2b00      	cmp	r3, #0
   1eff4:	d101      	bne.n	1effa <xTaskIncrementTick+0xa6>
   1eff6:	2301      	movs	r3, #1
   1eff8:	e000      	b.n	1effc <xTaskIncrementTick+0xa8>
   1effa:	2300      	movs	r3, #0
   1effc:	2b00      	cmp	r3, #0
   1effe:	d004      	beq.n	1f00a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f000:	4b45      	ldr	r3, [pc, #276]	; (1f118 <xTaskIncrementTick+0x1c4>)
   1f002:	2201      	movs	r2, #1
   1f004:	4252      	negs	r2, r2
   1f006:	601a      	str	r2, [r3, #0]
					break;
   1f008:	e054      	b.n	1f0b4 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1f00a:	4b3f      	ldr	r3, [pc, #252]	; (1f108 <xTaskIncrementTick+0x1b4>)
   1f00c:	681b      	ldr	r3, [r3, #0]
   1f00e:	68db      	ldr	r3, [r3, #12]
   1f010:	68db      	ldr	r3, [r3, #12]
   1f012:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1f014:	68bb      	ldr	r3, [r7, #8]
   1f016:	685b      	ldr	r3, [r3, #4]
   1f018:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1f01a:	693a      	ldr	r2, [r7, #16]
   1f01c:	687b      	ldr	r3, [r7, #4]
   1f01e:	429a      	cmp	r2, r3
   1f020:	d203      	bcs.n	1f02a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1f022:	4b3d      	ldr	r3, [pc, #244]	; (1f118 <xTaskIncrementTick+0x1c4>)
   1f024:	687a      	ldr	r2, [r7, #4]
   1f026:	601a      	str	r2, [r3, #0]
						break;
   1f028:	e044      	b.n	1f0b4 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1f02a:	68bb      	ldr	r3, [r7, #8]
   1f02c:	3304      	adds	r3, #4
   1f02e:	0018      	movs	r0, r3
   1f030:	4b3a      	ldr	r3, [pc, #232]	; (1f11c <xTaskIncrementTick+0x1c8>)
   1f032:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1f034:	68bb      	ldr	r3, [r7, #8]
   1f036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f038:	2b00      	cmp	r3, #0
   1f03a:	d004      	beq.n	1f046 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1f03c:	68bb      	ldr	r3, [r7, #8]
   1f03e:	3318      	adds	r3, #24
   1f040:	0018      	movs	r0, r3
   1f042:	4b36      	ldr	r3, [pc, #216]	; (1f11c <xTaskIncrementTick+0x1c8>)
   1f044:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1f046:	68bb      	ldr	r3, [r7, #8]
   1f048:	0018      	movs	r0, r3
   1f04a:	4b35      	ldr	r3, [pc, #212]	; (1f120 <xTaskIncrementTick+0x1cc>)
   1f04c:	4798      	blx	r3
   1f04e:	0003      	movs	r3, r0
   1f050:	001a      	movs	r2, r3
   1f052:	4b34      	ldr	r3, [pc, #208]	; (1f124 <xTaskIncrementTick+0x1d0>)
   1f054:	881b      	ldrh	r3, [r3, #0]
   1f056:	4013      	ands	r3, r2
   1f058:	b29b      	uxth	r3, r3
   1f05a:	2b00      	cmp	r3, #0
   1f05c:	d008      	beq.n	1f070 <xTaskIncrementTick+0x11c>
   1f05e:	68bb      	ldr	r3, [r7, #8]
   1f060:	0018      	movs	r0, r3
   1f062:	4b31      	ldr	r3, [pc, #196]	; (1f128 <xTaskIncrementTick+0x1d4>)
   1f064:	4798      	blx	r3
   1f066:	0003      	movs	r3, r0
   1f068:	b2db      	uxtb	r3, r3
   1f06a:	0018      	movs	r0, r3
   1f06c:	4b2f      	ldr	r3, [pc, #188]	; (1f12c <xTaskIncrementTick+0x1d8>)
   1f06e:	4798      	blx	r3
   1f070:	68bb      	ldr	r3, [r7, #8]
   1f072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f074:	4b2e      	ldr	r3, [pc, #184]	; (1f130 <xTaskIncrementTick+0x1dc>)
   1f076:	681b      	ldr	r3, [r3, #0]
   1f078:	429a      	cmp	r2, r3
   1f07a:	d903      	bls.n	1f084 <xTaskIncrementTick+0x130>
   1f07c:	68bb      	ldr	r3, [r7, #8]
   1f07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f080:	4b2b      	ldr	r3, [pc, #172]	; (1f130 <xTaskIncrementTick+0x1dc>)
   1f082:	601a      	str	r2, [r3, #0]
   1f084:	68bb      	ldr	r3, [r7, #8]
   1f086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f088:	0013      	movs	r3, r2
   1f08a:	009b      	lsls	r3, r3, #2
   1f08c:	189b      	adds	r3, r3, r2
   1f08e:	009b      	lsls	r3, r3, #2
   1f090:	4a28      	ldr	r2, [pc, #160]	; (1f134 <xTaskIncrementTick+0x1e0>)
   1f092:	189a      	adds	r2, r3, r2
   1f094:	68bb      	ldr	r3, [r7, #8]
   1f096:	3304      	adds	r3, #4
   1f098:	0019      	movs	r1, r3
   1f09a:	0010      	movs	r0, r2
   1f09c:	4b26      	ldr	r3, [pc, #152]	; (1f138 <xTaskIncrementTick+0x1e4>)
   1f09e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1f0a0:	68bb      	ldr	r3, [r7, #8]
   1f0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f0a4:	4b25      	ldr	r3, [pc, #148]	; (1f13c <xTaskIncrementTick+0x1e8>)
   1f0a6:	681b      	ldr	r3, [r3, #0]
   1f0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f0aa:	429a      	cmp	r2, r3
   1f0ac:	d39e      	bcc.n	1efec <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1f0ae:	2301      	movs	r3, #1
   1f0b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1f0b2:	e79b      	b.n	1efec <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1f0b4:	4b21      	ldr	r3, [pc, #132]	; (1f13c <xTaskIncrementTick+0x1e8>)
   1f0b6:	681b      	ldr	r3, [r3, #0]
   1f0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f0ba:	491e      	ldr	r1, [pc, #120]	; (1f134 <xTaskIncrementTick+0x1e0>)
   1f0bc:	0013      	movs	r3, r2
   1f0be:	009b      	lsls	r3, r3, #2
   1f0c0:	189b      	adds	r3, r3, r2
   1f0c2:	009b      	lsls	r3, r3, #2
   1f0c4:	585b      	ldr	r3, [r3, r1]
   1f0c6:	2b01      	cmp	r3, #1
   1f0c8:	d907      	bls.n	1f0da <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1f0ca:	2301      	movs	r3, #1
   1f0cc:	617b      	str	r3, [r7, #20]
   1f0ce:	e004      	b.n	1f0da <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1f0d0:	4b08      	ldr	r3, [pc, #32]	; (1f0f4 <xTaskIncrementTick+0x1a0>)
   1f0d2:	681b      	ldr	r3, [r3, #0]
   1f0d4:	1c5a      	adds	r2, r3, #1
   1f0d6:	4b07      	ldr	r3, [pc, #28]	; (1f0f4 <xTaskIncrementTick+0x1a0>)
   1f0d8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1f0da:	4b19      	ldr	r3, [pc, #100]	; (1f140 <xTaskIncrementTick+0x1ec>)
   1f0dc:	681b      	ldr	r3, [r3, #0]
   1f0de:	2b00      	cmp	r3, #0
   1f0e0:	d001      	beq.n	1f0e6 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1f0e2:	2301      	movs	r3, #1
   1f0e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1f0e6:	697b      	ldr	r3, [r7, #20]
}
   1f0e8:	0018      	movs	r0, r3
   1f0ea:	46bd      	mov	sp, r7
   1f0ec:	b006      	add	sp, #24
   1f0ee:	bd80      	pop	{r7, pc}
   1f0f0:	20004108 	.word	0x20004108
   1f0f4:	200040f0 	.word	0x200040f0
   1f0f8:	20000c68 	.word	0x20000c68
   1f0fc:	0001c781 	.word	0x0001c781
   1f100:	200040e4 	.word	0x200040e4
   1f104:	0001b7ed 	.word	0x0001b7ed
   1f108:	20004098 	.word	0x20004098
   1f10c:	2000409c 	.word	0x2000409c
   1f110:	200040f8 	.word	0x200040f8
   1f114:	0001f7b5 	.word	0x0001f7b5
   1f118:	20004100 	.word	0x20004100
   1f11c:	0001c967 	.word	0x0001c967
   1f120:	0001aaed 	.word	0x0001aaed
   1f124:	20000104 	.word	0x20000104
   1f128:	0001aacd 	.word	0x0001aacd
   1f12c:	0001b29d 	.word	0x0001b29d
   1f130:	200040e8 	.word	0x200040e8
   1f134:	2000400c 	.word	0x2000400c
   1f138:	0001c8b7 	.word	0x0001c8b7
   1f13c:	20004008 	.word	0x20004008
   1f140:	200040f4 	.word	0x200040f4

0001f144 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1f144:	b580      	push	{r7, lr}
   1f146:	b082      	sub	sp, #8
   1f148:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1f14a:	4b3a      	ldr	r3, [pc, #232]	; (1f234 <vTaskSwitchContext+0xf0>)
   1f14c:	681b      	ldr	r3, [r3, #0]
   1f14e:	2b00      	cmp	r3, #0
   1f150:	d003      	beq.n	1f15a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1f152:	4b39      	ldr	r3, [pc, #228]	; (1f238 <vTaskSwitchContext+0xf4>)
   1f154:	2201      	movs	r2, #1
   1f156:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1f158:	e067      	b.n	1f22a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1f15a:	4b37      	ldr	r3, [pc, #220]	; (1f238 <vTaskSwitchContext+0xf4>)
   1f15c:	2200      	movs	r2, #0
   1f15e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1f160:	4b36      	ldr	r3, [pc, #216]	; (1f23c <vTaskSwitchContext+0xf8>)
   1f162:	681b      	ldr	r3, [r3, #0]
   1f164:	681a      	ldr	r2, [r3, #0]
   1f166:	4b35      	ldr	r3, [pc, #212]	; (1f23c <vTaskSwitchContext+0xf8>)
   1f168:	681b      	ldr	r3, [r3, #0]
   1f16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f16c:	429a      	cmp	r2, r3
   1f16e:	d808      	bhi.n	1f182 <vTaskSwitchContext+0x3e>
   1f170:	4b32      	ldr	r3, [pc, #200]	; (1f23c <vTaskSwitchContext+0xf8>)
   1f172:	681a      	ldr	r2, [r3, #0]
   1f174:	4b31      	ldr	r3, [pc, #196]	; (1f23c <vTaskSwitchContext+0xf8>)
   1f176:	681b      	ldr	r3, [r3, #0]
   1f178:	3334      	adds	r3, #52	; 0x34
   1f17a:	0019      	movs	r1, r3
   1f17c:	0010      	movs	r0, r2
   1f17e:	4b30      	ldr	r3, [pc, #192]	; (1f240 <vTaskSwitchContext+0xfc>)
   1f180:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1f182:	4b30      	ldr	r3, [pc, #192]	; (1f244 <vTaskSwitchContext+0x100>)
   1f184:	681b      	ldr	r3, [r3, #0]
   1f186:	607b      	str	r3, [r7, #4]
   1f188:	e007      	b.n	1f19a <vTaskSwitchContext+0x56>
   1f18a:	687b      	ldr	r3, [r7, #4]
   1f18c:	2b00      	cmp	r3, #0
   1f18e:	d101      	bne.n	1f194 <vTaskSwitchContext+0x50>
   1f190:	b672      	cpsid	i
   1f192:	e7fe      	b.n	1f192 <vTaskSwitchContext+0x4e>
   1f194:	687b      	ldr	r3, [r7, #4]
   1f196:	3b01      	subs	r3, #1
   1f198:	607b      	str	r3, [r7, #4]
   1f19a:	492b      	ldr	r1, [pc, #172]	; (1f248 <vTaskSwitchContext+0x104>)
   1f19c:	687a      	ldr	r2, [r7, #4]
   1f19e:	0013      	movs	r3, r2
   1f1a0:	009b      	lsls	r3, r3, #2
   1f1a2:	189b      	adds	r3, r3, r2
   1f1a4:	009b      	lsls	r3, r3, #2
   1f1a6:	585b      	ldr	r3, [r3, r1]
   1f1a8:	2b00      	cmp	r3, #0
   1f1aa:	d0ee      	beq.n	1f18a <vTaskSwitchContext+0x46>
   1f1ac:	687a      	ldr	r2, [r7, #4]
   1f1ae:	0013      	movs	r3, r2
   1f1b0:	009b      	lsls	r3, r3, #2
   1f1b2:	189b      	adds	r3, r3, r2
   1f1b4:	009b      	lsls	r3, r3, #2
   1f1b6:	4a24      	ldr	r2, [pc, #144]	; (1f248 <vTaskSwitchContext+0x104>)
   1f1b8:	189b      	adds	r3, r3, r2
   1f1ba:	603b      	str	r3, [r7, #0]
   1f1bc:	683b      	ldr	r3, [r7, #0]
   1f1be:	685b      	ldr	r3, [r3, #4]
   1f1c0:	685a      	ldr	r2, [r3, #4]
   1f1c2:	683b      	ldr	r3, [r7, #0]
   1f1c4:	605a      	str	r2, [r3, #4]
   1f1c6:	683b      	ldr	r3, [r7, #0]
   1f1c8:	685a      	ldr	r2, [r3, #4]
   1f1ca:	683b      	ldr	r3, [r7, #0]
   1f1cc:	3308      	adds	r3, #8
   1f1ce:	429a      	cmp	r2, r3
   1f1d0:	d104      	bne.n	1f1dc <vTaskSwitchContext+0x98>
   1f1d2:	683b      	ldr	r3, [r7, #0]
   1f1d4:	685b      	ldr	r3, [r3, #4]
   1f1d6:	685a      	ldr	r2, [r3, #4]
   1f1d8:	683b      	ldr	r3, [r7, #0]
   1f1da:	605a      	str	r2, [r3, #4]
   1f1dc:	683b      	ldr	r3, [r7, #0]
   1f1de:	685b      	ldr	r3, [r3, #4]
   1f1e0:	68da      	ldr	r2, [r3, #12]
   1f1e2:	4b16      	ldr	r3, [pc, #88]	; (1f23c <vTaskSwitchContext+0xf8>)
   1f1e4:	601a      	str	r2, [r3, #0]
   1f1e6:	4b17      	ldr	r3, [pc, #92]	; (1f244 <vTaskSwitchContext+0x100>)
   1f1e8:	687a      	ldr	r2, [r7, #4]
   1f1ea:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1f1ec:	4b17      	ldr	r3, [pc, #92]	; (1f24c <vTaskSwitchContext+0x108>)
   1f1ee:	2201      	movs	r2, #1
   1f1f0:	601a      	str	r2, [r3, #0]
   1f1f2:	4b17      	ldr	r3, [pc, #92]	; (1f250 <vTaskSwitchContext+0x10c>)
   1f1f4:	4798      	blx	r3
   1f1f6:	0003      	movs	r3, r0
   1f1f8:	0018      	movs	r0, r3
   1f1fa:	4b16      	ldr	r3, [pc, #88]	; (1f254 <vTaskSwitchContext+0x110>)
   1f1fc:	4798      	blx	r3
   1f1fe:	0003      	movs	r3, r0
   1f200:	001a      	movs	r2, r3
   1f202:	4b15      	ldr	r3, [pc, #84]	; (1f258 <vTaskSwitchContext+0x114>)
   1f204:	881b      	ldrh	r3, [r3, #0]
   1f206:	4013      	ands	r3, r2
   1f208:	b29b      	uxth	r3, r3
   1f20a:	2b00      	cmp	r3, #0
   1f20c:	d00a      	beq.n	1f224 <vTaskSwitchContext+0xe0>
   1f20e:	4b10      	ldr	r3, [pc, #64]	; (1f250 <vTaskSwitchContext+0x10c>)
   1f210:	4798      	blx	r3
   1f212:	0003      	movs	r3, r0
   1f214:	0018      	movs	r0, r3
   1f216:	4b11      	ldr	r3, [pc, #68]	; (1f25c <vTaskSwitchContext+0x118>)
   1f218:	4798      	blx	r3
   1f21a:	0003      	movs	r3, r0
   1f21c:	b2db      	uxtb	r3, r3
   1f21e:	0018      	movs	r0, r3
   1f220:	4b0f      	ldr	r3, [pc, #60]	; (1f260 <vTaskSwitchContext+0x11c>)
   1f222:	4798      	blx	r3
   1f224:	4b09      	ldr	r3, [pc, #36]	; (1f24c <vTaskSwitchContext+0x108>)
   1f226:	2202      	movs	r2, #2
   1f228:	601a      	str	r2, [r3, #0]
}
   1f22a:	46c0      	nop			; (mov r8, r8)
   1f22c:	46bd      	mov	sp, r7
   1f22e:	b002      	add	sp, #8
   1f230:	bd80      	pop	{r7, pc}
   1f232:	46c0      	nop			; (mov r8, r8)
   1f234:	20004108 	.word	0x20004108
   1f238:	200040f4 	.word	0x200040f4
   1f23c:	20004008 	.word	0x20004008
   1f240:	00035431 	.word	0x00035431
   1f244:	200040e8 	.word	0x200040e8
   1f248:	2000400c 	.word	0x2000400c
   1f24c:	20000c74 	.word	0x20000c74
   1f250:	0001ad89 	.word	0x0001ad89
   1f254:	0001aaed 	.word	0x0001aaed
   1f258:	20000104 	.word	0x20000104
   1f25c:	0001aacd 	.word	0x0001aacd
   1f260:	0001b8e9 	.word	0x0001b8e9

0001f264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1f264:	b580      	push	{r7, lr}
   1f266:	b082      	sub	sp, #8
   1f268:	af00      	add	r7, sp, #0
   1f26a:	6078      	str	r0, [r7, #4]
   1f26c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1f26e:	687b      	ldr	r3, [r7, #4]
   1f270:	2b00      	cmp	r3, #0
   1f272:	d101      	bne.n	1f278 <vTaskPlaceOnEventList+0x14>
   1f274:	b672      	cpsid	i
   1f276:	e7fe      	b.n	1f276 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1f278:	4b08      	ldr	r3, [pc, #32]	; (1f29c <vTaskPlaceOnEventList+0x38>)
   1f27a:	681b      	ldr	r3, [r3, #0]
   1f27c:	3318      	adds	r3, #24
   1f27e:	001a      	movs	r2, r3
   1f280:	687b      	ldr	r3, [r7, #4]
   1f282:	0011      	movs	r1, r2
   1f284:	0018      	movs	r0, r3
   1f286:	4b06      	ldr	r3, [pc, #24]	; (1f2a0 <vTaskPlaceOnEventList+0x3c>)
   1f288:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1f28a:	683b      	ldr	r3, [r7, #0]
   1f28c:	2101      	movs	r1, #1
   1f28e:	0018      	movs	r0, r3
   1f290:	4b04      	ldr	r3, [pc, #16]	; (1f2a4 <vTaskPlaceOnEventList+0x40>)
   1f292:	4798      	blx	r3
}
   1f294:	46c0      	nop			; (mov r8, r8)
   1f296:	46bd      	mov	sp, r7
   1f298:	b002      	add	sp, #8
   1f29a:	bd80      	pop	{r7, pc}
   1f29c:	20004008 	.word	0x20004008
   1f2a0:	0001c8fb 	.word	0x0001c8fb
   1f2a4:	0001fd09 	.word	0x0001fd09

0001f2a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1f2a8:	b580      	push	{r7, lr}
   1f2aa:	b084      	sub	sp, #16
   1f2ac:	af00      	add	r7, sp, #0
   1f2ae:	60f8      	str	r0, [r7, #12]
   1f2b0:	60b9      	str	r1, [r7, #8]
   1f2b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1f2b4:	68fb      	ldr	r3, [r7, #12]
   1f2b6:	2b00      	cmp	r3, #0
   1f2b8:	d101      	bne.n	1f2be <vTaskPlaceOnEventListRestricted+0x16>
   1f2ba:	b672      	cpsid	i
   1f2bc:	e7fe      	b.n	1f2bc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1f2be:	4b28      	ldr	r3, [pc, #160]	; (1f360 <vTaskPlaceOnEventListRestricted+0xb8>)
   1f2c0:	681b      	ldr	r3, [r3, #0]
   1f2c2:	3318      	adds	r3, #24
   1f2c4:	001a      	movs	r2, r3
   1f2c6:	68fb      	ldr	r3, [r7, #12]
   1f2c8:	0011      	movs	r1, r2
   1f2ca:	0018      	movs	r0, r3
   1f2cc:	4b25      	ldr	r3, [pc, #148]	; (1f364 <vTaskPlaceOnEventListRestricted+0xbc>)
   1f2ce:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1f2d0:	687b      	ldr	r3, [r7, #4]
   1f2d2:	2b00      	cmp	r3, #0
   1f2d4:	d002      	beq.n	1f2dc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1f2d6:	2301      	movs	r3, #1
   1f2d8:	425b      	negs	r3, r3
   1f2da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1f2dc:	4b20      	ldr	r3, [pc, #128]	; (1f360 <vTaskPlaceOnEventListRestricted+0xb8>)
   1f2de:	681b      	ldr	r3, [r3, #0]
   1f2e0:	0018      	movs	r0, r3
   1f2e2:	4b21      	ldr	r3, [pc, #132]	; (1f368 <vTaskPlaceOnEventListRestricted+0xc0>)
   1f2e4:	4798      	blx	r3
   1f2e6:	0003      	movs	r3, r0
   1f2e8:	001a      	movs	r2, r3
   1f2ea:	4b20      	ldr	r3, [pc, #128]	; (1f36c <vTaskPlaceOnEventListRestricted+0xc4>)
   1f2ec:	881b      	ldrh	r3, [r3, #0]
   1f2ee:	4013      	ands	r3, r2
   1f2f0:	b29b      	uxth	r3, r3
   1f2f2:	2b00      	cmp	r3, #0
   1f2f4:	d011      	beq.n	1f31a <vTaskPlaceOnEventListRestricted+0x72>
   1f2f6:	4b1e      	ldr	r3, [pc, #120]	; (1f370 <vTaskPlaceOnEventListRestricted+0xc8>)
   1f2f8:	681a      	ldr	r2, [r3, #0]
   1f2fa:	68bb      	ldr	r3, [r7, #8]
   1f2fc:	18d3      	adds	r3, r2, r3
   1f2fe:	0019      	movs	r1, r3
   1f300:	2088      	movs	r0, #136	; 0x88
   1f302:	4b1c      	ldr	r3, [pc, #112]	; (1f374 <vTaskPlaceOnEventListRestricted+0xcc>)
   1f304:	4798      	blx	r3
   1f306:	4b16      	ldr	r3, [pc, #88]	; (1f360 <vTaskPlaceOnEventListRestricted+0xb8>)
   1f308:	681b      	ldr	r3, [r3, #0]
   1f30a:	0018      	movs	r0, r3
   1f30c:	4b1a      	ldr	r3, [pc, #104]	; (1f378 <vTaskPlaceOnEventListRestricted+0xd0>)
   1f30e:	4798      	blx	r3
   1f310:	0003      	movs	r3, r0
   1f312:	b2db      	uxtb	r3, r3
   1f314:	0018      	movs	r0, r3
   1f316:	4b19      	ldr	r3, [pc, #100]	; (1f37c <vTaskPlaceOnEventListRestricted+0xd4>)
   1f318:	4798      	blx	r3
   1f31a:	4b19      	ldr	r3, [pc, #100]	; (1f380 <vTaskPlaceOnEventListRestricted+0xd8>)
   1f31c:	4798      	blx	r3
   1f31e:	0003      	movs	r3, r0
   1f320:	0018      	movs	r0, r3
   1f322:	4b11      	ldr	r3, [pc, #68]	; (1f368 <vTaskPlaceOnEventListRestricted+0xc0>)
   1f324:	4798      	blx	r3
   1f326:	0003      	movs	r3, r0
   1f328:	001a      	movs	r2, r3
   1f32a:	4b10      	ldr	r3, [pc, #64]	; (1f36c <vTaskPlaceOnEventListRestricted+0xc4>)
   1f32c:	881b      	ldrh	r3, [r3, #0]
   1f32e:	4013      	ands	r3, r2
   1f330:	b29b      	uxth	r3, r3
   1f332:	2b00      	cmp	r3, #0
   1f334:	d00a      	beq.n	1f34c <vTaskPlaceOnEventListRestricted+0xa4>
   1f336:	4b12      	ldr	r3, [pc, #72]	; (1f380 <vTaskPlaceOnEventListRestricted+0xd8>)
   1f338:	4798      	blx	r3
   1f33a:	0003      	movs	r3, r0
   1f33c:	0018      	movs	r0, r3
   1f33e:	4b0e      	ldr	r3, [pc, #56]	; (1f378 <vTaskPlaceOnEventListRestricted+0xd0>)
   1f340:	4798      	blx	r3
   1f342:	0003      	movs	r3, r0
   1f344:	b2db      	uxtb	r3, r3
   1f346:	0018      	movs	r0, r3
   1f348:	4b0c      	ldr	r3, [pc, #48]	; (1f37c <vTaskPlaceOnEventListRestricted+0xd4>)
   1f34a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1f34c:	687a      	ldr	r2, [r7, #4]
   1f34e:	68bb      	ldr	r3, [r7, #8]
   1f350:	0011      	movs	r1, r2
   1f352:	0018      	movs	r0, r3
   1f354:	4b0b      	ldr	r3, [pc, #44]	; (1f384 <vTaskPlaceOnEventListRestricted+0xdc>)
   1f356:	4798      	blx	r3
	}
   1f358:	46c0      	nop			; (mov r8, r8)
   1f35a:	46bd      	mov	sp, r7
   1f35c:	b004      	add	sp, #16
   1f35e:	bd80      	pop	{r7, pc}
   1f360:	20004008 	.word	0x20004008
   1f364:	0001c8b7 	.word	0x0001c8b7
   1f368:	0001aaed 	.word	0x0001aaed
   1f36c:	20000104 	.word	0x20000104
   1f370:	200040e4 	.word	0x200040e4
   1f374:	0001b7ed 	.word	0x0001b7ed
   1f378:	0001aacd 	.word	0x0001aacd
   1f37c:	0001bc7d 	.word	0x0001bc7d
   1f380:	0001ad89 	.word	0x0001ad89
   1f384:	0001fd09 	.word	0x0001fd09

0001f388 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1f388:	b580      	push	{r7, lr}
   1f38a:	b084      	sub	sp, #16
   1f38c:	af00      	add	r7, sp, #0
   1f38e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1f390:	687b      	ldr	r3, [r7, #4]
   1f392:	68db      	ldr	r3, [r3, #12]
   1f394:	68db      	ldr	r3, [r3, #12]
   1f396:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1f398:	68bb      	ldr	r3, [r7, #8]
   1f39a:	2b00      	cmp	r3, #0
   1f39c:	d101      	bne.n	1f3a2 <xTaskRemoveFromEventList+0x1a>
   1f39e:	b672      	cpsid	i
   1f3a0:	e7fe      	b.n	1f3a0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1f3a2:	68bb      	ldr	r3, [r7, #8]
   1f3a4:	3318      	adds	r3, #24
   1f3a6:	0018      	movs	r0, r3
   1f3a8:	4b2a      	ldr	r3, [pc, #168]	; (1f454 <xTaskRemoveFromEventList+0xcc>)
   1f3aa:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f3ac:	4b2a      	ldr	r3, [pc, #168]	; (1f458 <xTaskRemoveFromEventList+0xd0>)
   1f3ae:	681b      	ldr	r3, [r3, #0]
   1f3b0:	2b00      	cmp	r3, #0
   1f3b2:	d132      	bne.n	1f41a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1f3b4:	68bb      	ldr	r3, [r7, #8]
   1f3b6:	3304      	adds	r3, #4
   1f3b8:	0018      	movs	r0, r3
   1f3ba:	4b26      	ldr	r3, [pc, #152]	; (1f454 <xTaskRemoveFromEventList+0xcc>)
   1f3bc:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1f3be:	68bb      	ldr	r3, [r7, #8]
   1f3c0:	0018      	movs	r0, r3
   1f3c2:	4b26      	ldr	r3, [pc, #152]	; (1f45c <xTaskRemoveFromEventList+0xd4>)
   1f3c4:	4798      	blx	r3
   1f3c6:	0003      	movs	r3, r0
   1f3c8:	001a      	movs	r2, r3
   1f3ca:	4b25      	ldr	r3, [pc, #148]	; (1f460 <xTaskRemoveFromEventList+0xd8>)
   1f3cc:	881b      	ldrh	r3, [r3, #0]
   1f3ce:	4013      	ands	r3, r2
   1f3d0:	b29b      	uxth	r3, r3
   1f3d2:	2b00      	cmp	r3, #0
   1f3d4:	d008      	beq.n	1f3e8 <xTaskRemoveFromEventList+0x60>
   1f3d6:	68bb      	ldr	r3, [r7, #8]
   1f3d8:	0018      	movs	r0, r3
   1f3da:	4b22      	ldr	r3, [pc, #136]	; (1f464 <xTaskRemoveFromEventList+0xdc>)
   1f3dc:	4798      	blx	r3
   1f3de:	0003      	movs	r3, r0
   1f3e0:	b2db      	uxtb	r3, r3
   1f3e2:	0018      	movs	r0, r3
   1f3e4:	4b20      	ldr	r3, [pc, #128]	; (1f468 <xTaskRemoveFromEventList+0xe0>)
   1f3e6:	4798      	blx	r3
   1f3e8:	68bb      	ldr	r3, [r7, #8]
   1f3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f3ec:	4b1f      	ldr	r3, [pc, #124]	; (1f46c <xTaskRemoveFromEventList+0xe4>)
   1f3ee:	681b      	ldr	r3, [r3, #0]
   1f3f0:	429a      	cmp	r2, r3
   1f3f2:	d903      	bls.n	1f3fc <xTaskRemoveFromEventList+0x74>
   1f3f4:	68bb      	ldr	r3, [r7, #8]
   1f3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f3f8:	4b1c      	ldr	r3, [pc, #112]	; (1f46c <xTaskRemoveFromEventList+0xe4>)
   1f3fa:	601a      	str	r2, [r3, #0]
   1f3fc:	68bb      	ldr	r3, [r7, #8]
   1f3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f400:	0013      	movs	r3, r2
   1f402:	009b      	lsls	r3, r3, #2
   1f404:	189b      	adds	r3, r3, r2
   1f406:	009b      	lsls	r3, r3, #2
   1f408:	4a19      	ldr	r2, [pc, #100]	; (1f470 <xTaskRemoveFromEventList+0xe8>)
   1f40a:	189a      	adds	r2, r3, r2
   1f40c:	68bb      	ldr	r3, [r7, #8]
   1f40e:	3304      	adds	r3, #4
   1f410:	0019      	movs	r1, r3
   1f412:	0010      	movs	r0, r2
   1f414:	4b17      	ldr	r3, [pc, #92]	; (1f474 <xTaskRemoveFromEventList+0xec>)
   1f416:	4798      	blx	r3
   1f418:	e007      	b.n	1f42a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1f41a:	68bb      	ldr	r3, [r7, #8]
   1f41c:	3318      	adds	r3, #24
   1f41e:	001a      	movs	r2, r3
   1f420:	4b15      	ldr	r3, [pc, #84]	; (1f478 <xTaskRemoveFromEventList+0xf0>)
   1f422:	0011      	movs	r1, r2
   1f424:	0018      	movs	r0, r3
   1f426:	4b13      	ldr	r3, [pc, #76]	; (1f474 <xTaskRemoveFromEventList+0xec>)
   1f428:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1f42a:	68bb      	ldr	r3, [r7, #8]
   1f42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f42e:	4b13      	ldr	r3, [pc, #76]	; (1f47c <xTaskRemoveFromEventList+0xf4>)
   1f430:	681b      	ldr	r3, [r3, #0]
   1f432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f434:	429a      	cmp	r2, r3
   1f436:	d905      	bls.n	1f444 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1f438:	2301      	movs	r3, #1
   1f43a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1f43c:	4b10      	ldr	r3, [pc, #64]	; (1f480 <xTaskRemoveFromEventList+0xf8>)
   1f43e:	2201      	movs	r2, #1
   1f440:	601a      	str	r2, [r3, #0]
   1f442:	e001      	b.n	1f448 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1f444:	2300      	movs	r3, #0
   1f446:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1f448:	68fb      	ldr	r3, [r7, #12]
}
   1f44a:	0018      	movs	r0, r3
   1f44c:	46bd      	mov	sp, r7
   1f44e:	b004      	add	sp, #16
   1f450:	bd80      	pop	{r7, pc}
   1f452:	46c0      	nop			; (mov r8, r8)
   1f454:	0001c967 	.word	0x0001c967
   1f458:	20004108 	.word	0x20004108
   1f45c:	0001aaed 	.word	0x0001aaed
   1f460:	20000104 	.word	0x20000104
   1f464:	0001aacd 	.word	0x0001aacd
   1f468:	0001b29d 	.word	0x0001b29d
   1f46c:	200040e8 	.word	0x200040e8
   1f470:	2000400c 	.word	0x2000400c
   1f474:	0001c8b7 	.word	0x0001c8b7
   1f478:	200040a0 	.word	0x200040a0
   1f47c:	20004008 	.word	0x20004008
   1f480:	200040f4 	.word	0x200040f4

0001f484 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1f484:	b580      	push	{r7, lr}
   1f486:	b082      	sub	sp, #8
   1f488:	af00      	add	r7, sp, #0
   1f48a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1f48c:	687b      	ldr	r3, [r7, #4]
   1f48e:	2b00      	cmp	r3, #0
   1f490:	d101      	bne.n	1f496 <vTaskSetTimeOutState+0x12>
   1f492:	b672      	cpsid	i
   1f494:	e7fe      	b.n	1f494 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1f496:	4b08      	ldr	r3, [pc, #32]	; (1f4b8 <vTaskSetTimeOutState+0x34>)
   1f498:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1f49a:	4b08      	ldr	r3, [pc, #32]	; (1f4bc <vTaskSetTimeOutState+0x38>)
   1f49c:	681a      	ldr	r2, [r3, #0]
   1f49e:	687b      	ldr	r3, [r7, #4]
   1f4a0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1f4a2:	4b07      	ldr	r3, [pc, #28]	; (1f4c0 <vTaskSetTimeOutState+0x3c>)
   1f4a4:	681a      	ldr	r2, [r3, #0]
   1f4a6:	687b      	ldr	r3, [r7, #4]
   1f4a8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1f4aa:	4b06      	ldr	r3, [pc, #24]	; (1f4c4 <vTaskSetTimeOutState+0x40>)
   1f4ac:	4798      	blx	r3
}
   1f4ae:	46c0      	nop			; (mov r8, r8)
   1f4b0:	46bd      	mov	sp, r7
   1f4b2:	b002      	add	sp, #8
   1f4b4:	bd80      	pop	{r7, pc}
   1f4b6:	46c0      	nop			; (mov r8, r8)
   1f4b8:	0001caf9 	.word	0x0001caf9
   1f4bc:	200040f8 	.word	0x200040f8
   1f4c0:	200040e4 	.word	0x200040e4
   1f4c4:	0001cb1d 	.word	0x0001cb1d

0001f4c8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1f4c8:	b580      	push	{r7, lr}
   1f4ca:	b082      	sub	sp, #8
   1f4cc:	af00      	add	r7, sp, #0
   1f4ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1f4d0:	4b05      	ldr	r3, [pc, #20]	; (1f4e8 <vTaskInternalSetTimeOutState+0x20>)
   1f4d2:	681a      	ldr	r2, [r3, #0]
   1f4d4:	687b      	ldr	r3, [r7, #4]
   1f4d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1f4d8:	4b04      	ldr	r3, [pc, #16]	; (1f4ec <vTaskInternalSetTimeOutState+0x24>)
   1f4da:	681a      	ldr	r2, [r3, #0]
   1f4dc:	687b      	ldr	r3, [r7, #4]
   1f4de:	605a      	str	r2, [r3, #4]
}
   1f4e0:	46c0      	nop			; (mov r8, r8)
   1f4e2:	46bd      	mov	sp, r7
   1f4e4:	b002      	add	sp, #8
   1f4e6:	bd80      	pop	{r7, pc}
   1f4e8:	200040f8 	.word	0x200040f8
   1f4ec:	200040e4 	.word	0x200040e4

0001f4f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1f4f0:	b580      	push	{r7, lr}
   1f4f2:	b086      	sub	sp, #24
   1f4f4:	af00      	add	r7, sp, #0
   1f4f6:	6078      	str	r0, [r7, #4]
   1f4f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1f4fa:	687b      	ldr	r3, [r7, #4]
   1f4fc:	2b00      	cmp	r3, #0
   1f4fe:	d101      	bne.n	1f504 <xTaskCheckForTimeOut+0x14>
   1f500:	b672      	cpsid	i
   1f502:	e7fe      	b.n	1f502 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1f504:	683b      	ldr	r3, [r7, #0]
   1f506:	2b00      	cmp	r3, #0
   1f508:	d101      	bne.n	1f50e <xTaskCheckForTimeOut+0x1e>
   1f50a:	b672      	cpsid	i
   1f50c:	e7fe      	b.n	1f50c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1f50e:	4b1e      	ldr	r3, [pc, #120]	; (1f588 <xTaskCheckForTimeOut+0x98>)
   1f510:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1f512:	4b1e      	ldr	r3, [pc, #120]	; (1f58c <xTaskCheckForTimeOut+0x9c>)
   1f514:	681b      	ldr	r3, [r3, #0]
   1f516:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1f518:	687b      	ldr	r3, [r7, #4]
   1f51a:	685b      	ldr	r3, [r3, #4]
   1f51c:	693a      	ldr	r2, [r7, #16]
   1f51e:	1ad3      	subs	r3, r2, r3
   1f520:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1f522:	683b      	ldr	r3, [r7, #0]
   1f524:	681b      	ldr	r3, [r3, #0]
   1f526:	3301      	adds	r3, #1
   1f528:	d102      	bne.n	1f530 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1f52a:	2300      	movs	r3, #0
   1f52c:	617b      	str	r3, [r7, #20]
   1f52e:	e024      	b.n	1f57a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1f530:	687b      	ldr	r3, [r7, #4]
   1f532:	681a      	ldr	r2, [r3, #0]
   1f534:	4b16      	ldr	r3, [pc, #88]	; (1f590 <xTaskCheckForTimeOut+0xa0>)
   1f536:	681b      	ldr	r3, [r3, #0]
   1f538:	429a      	cmp	r2, r3
   1f53a:	d007      	beq.n	1f54c <xTaskCheckForTimeOut+0x5c>
   1f53c:	687b      	ldr	r3, [r7, #4]
   1f53e:	685a      	ldr	r2, [r3, #4]
   1f540:	693b      	ldr	r3, [r7, #16]
   1f542:	429a      	cmp	r2, r3
   1f544:	d802      	bhi.n	1f54c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1f546:	2301      	movs	r3, #1
   1f548:	617b      	str	r3, [r7, #20]
   1f54a:	e016      	b.n	1f57a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1f54c:	683b      	ldr	r3, [r7, #0]
   1f54e:	681a      	ldr	r2, [r3, #0]
   1f550:	68fb      	ldr	r3, [r7, #12]
   1f552:	429a      	cmp	r2, r3
   1f554:	d90c      	bls.n	1f570 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1f556:	683b      	ldr	r3, [r7, #0]
   1f558:	681a      	ldr	r2, [r3, #0]
   1f55a:	68fb      	ldr	r3, [r7, #12]
   1f55c:	1ad2      	subs	r2, r2, r3
   1f55e:	683b      	ldr	r3, [r7, #0]
   1f560:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1f562:	687b      	ldr	r3, [r7, #4]
   1f564:	0018      	movs	r0, r3
   1f566:	4b0b      	ldr	r3, [pc, #44]	; (1f594 <xTaskCheckForTimeOut+0xa4>)
   1f568:	4798      	blx	r3
			xReturn = pdFALSE;
   1f56a:	2300      	movs	r3, #0
   1f56c:	617b      	str	r3, [r7, #20]
   1f56e:	e004      	b.n	1f57a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1f570:	683b      	ldr	r3, [r7, #0]
   1f572:	2200      	movs	r2, #0
   1f574:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1f576:	2301      	movs	r3, #1
   1f578:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1f57a:	4b07      	ldr	r3, [pc, #28]	; (1f598 <xTaskCheckForTimeOut+0xa8>)
   1f57c:	4798      	blx	r3

	return xReturn;
   1f57e:	697b      	ldr	r3, [r7, #20]
}
   1f580:	0018      	movs	r0, r3
   1f582:	46bd      	mov	sp, r7
   1f584:	b006      	add	sp, #24
   1f586:	bd80      	pop	{r7, pc}
   1f588:	0001caf9 	.word	0x0001caf9
   1f58c:	200040e4 	.word	0x200040e4
   1f590:	200040f8 	.word	0x200040f8
   1f594:	0001f4c9 	.word	0x0001f4c9
   1f598:	0001cb1d 	.word	0x0001cb1d

0001f59c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1f59c:	b580      	push	{r7, lr}
   1f59e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1f5a0:	4b02      	ldr	r3, [pc, #8]	; (1f5ac <vTaskMissedYield+0x10>)
   1f5a2:	2201      	movs	r2, #1
   1f5a4:	601a      	str	r2, [r3, #0]
}
   1f5a6:	46c0      	nop			; (mov r8, r8)
   1f5a8:	46bd      	mov	sp, r7
   1f5aa:	bd80      	pop	{r7, pc}
   1f5ac:	200040f4 	.word	0x200040f4

0001f5b0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1f5b0:	b580      	push	{r7, lr}
   1f5b2:	b084      	sub	sp, #16
   1f5b4:	af00      	add	r7, sp, #0
   1f5b6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1f5b8:	687b      	ldr	r3, [r7, #4]
   1f5ba:	2b00      	cmp	r3, #0
   1f5bc:	d005      	beq.n	1f5ca <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1f5be:	687b      	ldr	r3, [r7, #4]
   1f5c0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1f5c2:	68bb      	ldr	r3, [r7, #8]
   1f5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f5c6:	60fb      	str	r3, [r7, #12]
   1f5c8:	e001      	b.n	1f5ce <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1f5ca:	2300      	movs	r3, #0
   1f5cc:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1f5ce:	68fb      	ldr	r3, [r7, #12]
	}
   1f5d0:	0018      	movs	r0, r3
   1f5d2:	46bd      	mov	sp, r7
   1f5d4:	b004      	add	sp, #16
   1f5d6:	bd80      	pop	{r7, pc}

0001f5d8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1f5d8:	b580      	push	{r7, lr}
   1f5da:	b084      	sub	sp, #16
   1f5dc:	af00      	add	r7, sp, #0
   1f5de:	6078      	str	r0, [r7, #4]
   1f5e0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1f5e2:	687b      	ldr	r3, [r7, #4]
   1f5e4:	2b00      	cmp	r3, #0
   1f5e6:	d004      	beq.n	1f5f2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1f5e8:	687b      	ldr	r3, [r7, #4]
   1f5ea:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1f5ec:	68fb      	ldr	r3, [r7, #12]
   1f5ee:	683a      	ldr	r2, [r7, #0]
   1f5f0:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1f5f2:	46c0      	nop			; (mov r8, r8)
   1f5f4:	46bd      	mov	sp, r7
   1f5f6:	b004      	add	sp, #16
   1f5f8:	bd80      	pop	{r7, pc}
	...

0001f5fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1f5fc:	b580      	push	{r7, lr}
   1f5fe:	b082      	sub	sp, #8
   1f600:	af00      	add	r7, sp, #0
   1f602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1f604:	4b04      	ldr	r3, [pc, #16]	; (1f618 <prvIdleTask+0x1c>)
   1f606:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1f608:	4b04      	ldr	r3, [pc, #16]	; (1f61c <prvIdleTask+0x20>)
   1f60a:	681b      	ldr	r3, [r3, #0]
   1f60c:	2b01      	cmp	r3, #1
   1f60e:	d9f9      	bls.n	1f604 <prvIdleTask+0x8>
			{
				taskYIELD();
   1f610:	4b03      	ldr	r3, [pc, #12]	; (1f620 <prvIdleTask+0x24>)
   1f612:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1f614:	e7f6      	b.n	1f604 <prvIdleTask+0x8>
   1f616:	46c0      	nop			; (mov r8, r8)
   1f618:	0001f6b1 	.word	0x0001f6b1
   1f61c:	2000400c 	.word	0x2000400c
   1f620:	0001cae1 	.word	0x0001cae1

0001f624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1f624:	b580      	push	{r7, lr}
   1f626:	b082      	sub	sp, #8
   1f628:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1f62a:	2300      	movs	r3, #0
   1f62c:	607b      	str	r3, [r7, #4]
   1f62e:	e00c      	b.n	1f64a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1f630:	687a      	ldr	r2, [r7, #4]
   1f632:	0013      	movs	r3, r2
   1f634:	009b      	lsls	r3, r3, #2
   1f636:	189b      	adds	r3, r3, r2
   1f638:	009b      	lsls	r3, r3, #2
   1f63a:	4a14      	ldr	r2, [pc, #80]	; (1f68c <prvInitialiseTaskLists+0x68>)
   1f63c:	189b      	adds	r3, r3, r2
   1f63e:	0018      	movs	r0, r3
   1f640:	4b13      	ldr	r3, [pc, #76]	; (1f690 <prvInitialiseTaskLists+0x6c>)
   1f642:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1f644:	687b      	ldr	r3, [r7, #4]
   1f646:	3301      	adds	r3, #1
   1f648:	607b      	str	r3, [r7, #4]
   1f64a:	687b      	ldr	r3, [r7, #4]
   1f64c:	2b04      	cmp	r3, #4
   1f64e:	d9ef      	bls.n	1f630 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1f650:	4b10      	ldr	r3, [pc, #64]	; (1f694 <prvInitialiseTaskLists+0x70>)
   1f652:	0018      	movs	r0, r3
   1f654:	4b0e      	ldr	r3, [pc, #56]	; (1f690 <prvInitialiseTaskLists+0x6c>)
   1f656:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1f658:	4b0f      	ldr	r3, [pc, #60]	; (1f698 <prvInitialiseTaskLists+0x74>)
   1f65a:	0018      	movs	r0, r3
   1f65c:	4b0c      	ldr	r3, [pc, #48]	; (1f690 <prvInitialiseTaskLists+0x6c>)
   1f65e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1f660:	4b0e      	ldr	r3, [pc, #56]	; (1f69c <prvInitialiseTaskLists+0x78>)
   1f662:	0018      	movs	r0, r3
   1f664:	4b0a      	ldr	r3, [pc, #40]	; (1f690 <prvInitialiseTaskLists+0x6c>)
   1f666:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1f668:	4b0d      	ldr	r3, [pc, #52]	; (1f6a0 <prvInitialiseTaskLists+0x7c>)
   1f66a:	0018      	movs	r0, r3
   1f66c:	4b08      	ldr	r3, [pc, #32]	; (1f690 <prvInitialiseTaskLists+0x6c>)
   1f66e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1f670:	4b0c      	ldr	r3, [pc, #48]	; (1f6a4 <prvInitialiseTaskLists+0x80>)
   1f672:	0018      	movs	r0, r3
   1f674:	4b06      	ldr	r3, [pc, #24]	; (1f690 <prvInitialiseTaskLists+0x6c>)
   1f676:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1f678:	4b0b      	ldr	r3, [pc, #44]	; (1f6a8 <prvInitialiseTaskLists+0x84>)
   1f67a:	4a06      	ldr	r2, [pc, #24]	; (1f694 <prvInitialiseTaskLists+0x70>)
   1f67c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1f67e:	4b0b      	ldr	r3, [pc, #44]	; (1f6ac <prvInitialiseTaskLists+0x88>)
   1f680:	4a05      	ldr	r2, [pc, #20]	; (1f698 <prvInitialiseTaskLists+0x74>)
   1f682:	601a      	str	r2, [r3, #0]
}
   1f684:	46c0      	nop			; (mov r8, r8)
   1f686:	46bd      	mov	sp, r7
   1f688:	b002      	add	sp, #8
   1f68a:	bd80      	pop	{r7, pc}
   1f68c:	2000400c 	.word	0x2000400c
   1f690:	0001c865 	.word	0x0001c865
   1f694:	20004070 	.word	0x20004070
   1f698:	20004084 	.word	0x20004084
   1f69c:	200040a0 	.word	0x200040a0
   1f6a0:	200040b4 	.word	0x200040b4
   1f6a4:	200040cc 	.word	0x200040cc
   1f6a8:	20004098 	.word	0x20004098
   1f6ac:	2000409c 	.word	0x2000409c

0001f6b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1f6b0:	b580      	push	{r7, lr}
   1f6b2:	b082      	sub	sp, #8
   1f6b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1f6b6:	e01a      	b.n	1f6ee <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1f6b8:	4b11      	ldr	r3, [pc, #68]	; (1f700 <prvCheckTasksWaitingTermination+0x50>)
   1f6ba:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1f6bc:	4b11      	ldr	r3, [pc, #68]	; (1f704 <prvCheckTasksWaitingTermination+0x54>)
   1f6be:	68db      	ldr	r3, [r3, #12]
   1f6c0:	68db      	ldr	r3, [r3, #12]
   1f6c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1f6c4:	687b      	ldr	r3, [r7, #4]
   1f6c6:	3304      	adds	r3, #4
   1f6c8:	0018      	movs	r0, r3
   1f6ca:	4b0f      	ldr	r3, [pc, #60]	; (1f708 <prvCheckTasksWaitingTermination+0x58>)
   1f6cc:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1f6ce:	4b0f      	ldr	r3, [pc, #60]	; (1f70c <prvCheckTasksWaitingTermination+0x5c>)
   1f6d0:	681b      	ldr	r3, [r3, #0]
   1f6d2:	1e5a      	subs	r2, r3, #1
   1f6d4:	4b0d      	ldr	r3, [pc, #52]	; (1f70c <prvCheckTasksWaitingTermination+0x5c>)
   1f6d6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1f6d8:	4b0d      	ldr	r3, [pc, #52]	; (1f710 <prvCheckTasksWaitingTermination+0x60>)
   1f6da:	681b      	ldr	r3, [r3, #0]
   1f6dc:	1e5a      	subs	r2, r3, #1
   1f6de:	4b0c      	ldr	r3, [pc, #48]	; (1f710 <prvCheckTasksWaitingTermination+0x60>)
   1f6e0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1f6e2:	4b0c      	ldr	r3, [pc, #48]	; (1f714 <prvCheckTasksWaitingTermination+0x64>)
   1f6e4:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1f6e6:	687b      	ldr	r3, [r7, #4]
   1f6e8:	0018      	movs	r0, r3
   1f6ea:	4b0b      	ldr	r3, [pc, #44]	; (1f718 <prvCheckTasksWaitingTermination+0x68>)
   1f6ec:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1f6ee:	4b08      	ldr	r3, [pc, #32]	; (1f710 <prvCheckTasksWaitingTermination+0x60>)
   1f6f0:	681b      	ldr	r3, [r3, #0]
   1f6f2:	2b00      	cmp	r3, #0
   1f6f4:	d1e0      	bne.n	1f6b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1f6f6:	46c0      	nop			; (mov r8, r8)
   1f6f8:	46bd      	mov	sp, r7
   1f6fa:	b002      	add	sp, #8
   1f6fc:	bd80      	pop	{r7, pc}
   1f6fe:	46c0      	nop			; (mov r8, r8)
   1f700:	0001caf9 	.word	0x0001caf9
   1f704:	200040b4 	.word	0x200040b4
   1f708:	0001c967 	.word	0x0001c967
   1f70c:	200040e0 	.word	0x200040e0
   1f710:	200040c8 	.word	0x200040c8
   1f714:	0001cb1d 	.word	0x0001cb1d
   1f718:	0001f78d 	.word	0x0001f78d

0001f71c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1f71c:	b580      	push	{r7, lr}
   1f71e:	b084      	sub	sp, #16
   1f720:	af00      	add	r7, sp, #0
   1f722:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1f724:	2300      	movs	r3, #0
   1f726:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1f728:	e005      	b.n	1f736 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1f72a:	687b      	ldr	r3, [r7, #4]
   1f72c:	3301      	adds	r3, #1
   1f72e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1f730:	68fb      	ldr	r3, [r7, #12]
   1f732:	3301      	adds	r3, #1
   1f734:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1f736:	687b      	ldr	r3, [r7, #4]
   1f738:	781b      	ldrb	r3, [r3, #0]
   1f73a:	2ba5      	cmp	r3, #165	; 0xa5
   1f73c:	d0f5      	beq.n	1f72a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1f73e:	68fb      	ldr	r3, [r7, #12]
   1f740:	089b      	lsrs	r3, r3, #2
   1f742:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1f744:	68fb      	ldr	r3, [r7, #12]
   1f746:	b29b      	uxth	r3, r3
	}
   1f748:	0018      	movs	r0, r3
   1f74a:	46bd      	mov	sp, r7
   1f74c:	b004      	add	sp, #16
   1f74e:	bd80      	pop	{r7, pc}

0001f750 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1f750:	b580      	push	{r7, lr}
   1f752:	b086      	sub	sp, #24
   1f754:	af00      	add	r7, sp, #0
   1f756:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1f758:	687b      	ldr	r3, [r7, #4]
   1f75a:	2b00      	cmp	r3, #0
   1f75c:	d102      	bne.n	1f764 <uxTaskGetStackHighWaterMark+0x14>
   1f75e:	4b09      	ldr	r3, [pc, #36]	; (1f784 <uxTaskGetStackHighWaterMark+0x34>)
   1f760:	681b      	ldr	r3, [r3, #0]
   1f762:	e000      	b.n	1f766 <uxTaskGetStackHighWaterMark+0x16>
   1f764:	687b      	ldr	r3, [r7, #4]
   1f766:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1f768:	697b      	ldr	r3, [r7, #20]
   1f76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f76c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1f76e:	693b      	ldr	r3, [r7, #16]
   1f770:	0018      	movs	r0, r3
   1f772:	4b05      	ldr	r3, [pc, #20]	; (1f788 <uxTaskGetStackHighWaterMark+0x38>)
   1f774:	4798      	blx	r3
   1f776:	0003      	movs	r3, r0
   1f778:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1f77a:	68fb      	ldr	r3, [r7, #12]
	}
   1f77c:	0018      	movs	r0, r3
   1f77e:	46bd      	mov	sp, r7
   1f780:	b006      	add	sp, #24
   1f782:	bd80      	pop	{r7, pc}
   1f784:	20004008 	.word	0x20004008
   1f788:	0001f71d 	.word	0x0001f71d

0001f78c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1f78c:	b580      	push	{r7, lr}
   1f78e:	b082      	sub	sp, #8
   1f790:	af00      	add	r7, sp, #0
   1f792:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1f794:	687b      	ldr	r3, [r7, #4]
   1f796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f798:	0018      	movs	r0, r3
   1f79a:	4b05      	ldr	r3, [pc, #20]	; (1f7b0 <prvDeleteTCB+0x24>)
   1f79c:	4798      	blx	r3
			vPortFree( pxTCB );
   1f79e:	687b      	ldr	r3, [r7, #4]
   1f7a0:	0018      	movs	r0, r3
   1f7a2:	4b03      	ldr	r3, [pc, #12]	; (1f7b0 <prvDeleteTCB+0x24>)
   1f7a4:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1f7a6:	46c0      	nop			; (mov r8, r8)
   1f7a8:	46bd      	mov	sp, r7
   1f7aa:	b002      	add	sp, #8
   1f7ac:	bd80      	pop	{r7, pc}
   1f7ae:	46c0      	nop			; (mov r8, r8)
   1f7b0:	0001ccf5 	.word	0x0001ccf5

0001f7b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1f7b4:	b580      	push	{r7, lr}
   1f7b6:	b082      	sub	sp, #8
   1f7b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1f7ba:	4b0e      	ldr	r3, [pc, #56]	; (1f7f4 <prvResetNextTaskUnblockTime+0x40>)
   1f7bc:	681b      	ldr	r3, [r3, #0]
   1f7be:	681b      	ldr	r3, [r3, #0]
   1f7c0:	2b00      	cmp	r3, #0
   1f7c2:	d101      	bne.n	1f7c8 <prvResetNextTaskUnblockTime+0x14>
   1f7c4:	2301      	movs	r3, #1
   1f7c6:	e000      	b.n	1f7ca <prvResetNextTaskUnblockTime+0x16>
   1f7c8:	2300      	movs	r3, #0
   1f7ca:	2b00      	cmp	r3, #0
   1f7cc:	d004      	beq.n	1f7d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1f7ce:	4b0a      	ldr	r3, [pc, #40]	; (1f7f8 <prvResetNextTaskUnblockTime+0x44>)
   1f7d0:	2201      	movs	r2, #1
   1f7d2:	4252      	negs	r2, r2
   1f7d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1f7d6:	e008      	b.n	1f7ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1f7d8:	4b06      	ldr	r3, [pc, #24]	; (1f7f4 <prvResetNextTaskUnblockTime+0x40>)
   1f7da:	681b      	ldr	r3, [r3, #0]
   1f7dc:	68db      	ldr	r3, [r3, #12]
   1f7de:	68db      	ldr	r3, [r3, #12]
   1f7e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1f7e2:	687b      	ldr	r3, [r7, #4]
   1f7e4:	685a      	ldr	r2, [r3, #4]
   1f7e6:	4b04      	ldr	r3, [pc, #16]	; (1f7f8 <prvResetNextTaskUnblockTime+0x44>)
   1f7e8:	601a      	str	r2, [r3, #0]
}
   1f7ea:	46c0      	nop			; (mov r8, r8)
   1f7ec:	46bd      	mov	sp, r7
   1f7ee:	b002      	add	sp, #8
   1f7f0:	bd80      	pop	{r7, pc}
   1f7f2:	46c0      	nop			; (mov r8, r8)
   1f7f4:	20004098 	.word	0x20004098
   1f7f8:	20004100 	.word	0x20004100

0001f7fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1f7fc:	b580      	push	{r7, lr}
   1f7fe:	b082      	sub	sp, #8
   1f800:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1f802:	4b04      	ldr	r3, [pc, #16]	; (1f814 <xTaskGetCurrentTaskHandle+0x18>)
   1f804:	681b      	ldr	r3, [r3, #0]
   1f806:	607b      	str	r3, [r7, #4]

		return xReturn;
   1f808:	687b      	ldr	r3, [r7, #4]
	}
   1f80a:	0018      	movs	r0, r3
   1f80c:	46bd      	mov	sp, r7
   1f80e:	b002      	add	sp, #8
   1f810:	bd80      	pop	{r7, pc}
   1f812:	46c0      	nop			; (mov r8, r8)
   1f814:	20004008 	.word	0x20004008

0001f818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1f818:	b580      	push	{r7, lr}
   1f81a:	b082      	sub	sp, #8
   1f81c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1f81e:	4b0a      	ldr	r3, [pc, #40]	; (1f848 <xTaskGetSchedulerState+0x30>)
   1f820:	681b      	ldr	r3, [r3, #0]
   1f822:	2b00      	cmp	r3, #0
   1f824:	d102      	bne.n	1f82c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1f826:	2301      	movs	r3, #1
   1f828:	607b      	str	r3, [r7, #4]
   1f82a:	e008      	b.n	1f83e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f82c:	4b07      	ldr	r3, [pc, #28]	; (1f84c <xTaskGetSchedulerState+0x34>)
   1f82e:	681b      	ldr	r3, [r3, #0]
   1f830:	2b00      	cmp	r3, #0
   1f832:	d102      	bne.n	1f83a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1f834:	2302      	movs	r3, #2
   1f836:	607b      	str	r3, [r7, #4]
   1f838:	e001      	b.n	1f83e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1f83a:	2300      	movs	r3, #0
   1f83c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1f83e:	687b      	ldr	r3, [r7, #4]
	}
   1f840:	0018      	movs	r0, r3
   1f842:	46bd      	mov	sp, r7
   1f844:	b002      	add	sp, #8
   1f846:	bd80      	pop	{r7, pc}
   1f848:	200040ec 	.word	0x200040ec
   1f84c:	20004108 	.word	0x20004108

0001f850 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1f850:	b590      	push	{r4, r7, lr}
   1f852:	b085      	sub	sp, #20
   1f854:	af00      	add	r7, sp, #0
   1f856:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1f858:	687b      	ldr	r3, [r7, #4]
   1f85a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1f85c:	2300      	movs	r3, #0
   1f85e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1f860:	687b      	ldr	r3, [r7, #4]
   1f862:	2b00      	cmp	r3, #0
   1f864:	d100      	bne.n	1f868 <xTaskPriorityInherit+0x18>
   1f866:	e09d      	b.n	1f9a4 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1f868:	68bb      	ldr	r3, [r7, #8]
   1f86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f86c:	4b50      	ldr	r3, [pc, #320]	; (1f9b0 <xTaskPriorityInherit+0x160>)
   1f86e:	681b      	ldr	r3, [r3, #0]
   1f870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f872:	429a      	cmp	r2, r3
   1f874:	d300      	bcc.n	1f878 <xTaskPriorityInherit+0x28>
   1f876:	e08c      	b.n	1f992 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1f878:	68bb      	ldr	r3, [r7, #8]
   1f87a:	699b      	ldr	r3, [r3, #24]
   1f87c:	2b00      	cmp	r3, #0
   1f87e:	db06      	blt.n	1f88e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f880:	4b4b      	ldr	r3, [pc, #300]	; (1f9b0 <xTaskPriorityInherit+0x160>)
   1f882:	681b      	ldr	r3, [r3, #0]
   1f884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f886:	2205      	movs	r2, #5
   1f888:	1ad2      	subs	r2, r2, r3
   1f88a:	68bb      	ldr	r3, [r7, #8]
   1f88c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1f88e:	68bb      	ldr	r3, [r7, #8]
   1f890:	6959      	ldr	r1, [r3, #20]
   1f892:	68bb      	ldr	r3, [r7, #8]
   1f894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f896:	0013      	movs	r3, r2
   1f898:	009b      	lsls	r3, r3, #2
   1f89a:	189b      	adds	r3, r3, r2
   1f89c:	009b      	lsls	r3, r3, #2
   1f89e:	4a45      	ldr	r2, [pc, #276]	; (1f9b4 <xTaskPriorityInherit+0x164>)
   1f8a0:	189b      	adds	r3, r3, r2
   1f8a2:	4299      	cmp	r1, r3
   1f8a4:	d101      	bne.n	1f8aa <xTaskPriorityInherit+0x5a>
   1f8a6:	2301      	movs	r3, #1
   1f8a8:	e000      	b.n	1f8ac <xTaskPriorityInherit+0x5c>
   1f8aa:	2300      	movs	r3, #0
   1f8ac:	2b00      	cmp	r3, #0
   1f8ae:	d037      	beq.n	1f920 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f8b0:	68bb      	ldr	r3, [r7, #8]
   1f8b2:	3304      	adds	r3, #4
   1f8b4:	0018      	movs	r0, r3
   1f8b6:	4b40      	ldr	r3, [pc, #256]	; (1f9b8 <xTaskPriorityInherit+0x168>)
   1f8b8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1f8ba:	4b3d      	ldr	r3, [pc, #244]	; (1f9b0 <xTaskPriorityInherit+0x160>)
   1f8bc:	681b      	ldr	r3, [r3, #0]
   1f8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f8c0:	68bb      	ldr	r3, [r7, #8]
   1f8c2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1f8c4:	68bb      	ldr	r3, [r7, #8]
   1f8c6:	0018      	movs	r0, r3
   1f8c8:	4b3c      	ldr	r3, [pc, #240]	; (1f9bc <xTaskPriorityInherit+0x16c>)
   1f8ca:	4798      	blx	r3
   1f8cc:	0003      	movs	r3, r0
   1f8ce:	001a      	movs	r2, r3
   1f8d0:	4b3b      	ldr	r3, [pc, #236]	; (1f9c0 <xTaskPriorityInherit+0x170>)
   1f8d2:	881b      	ldrh	r3, [r3, #0]
   1f8d4:	4013      	ands	r3, r2
   1f8d6:	b29b      	uxth	r3, r3
   1f8d8:	2b00      	cmp	r3, #0
   1f8da:	d008      	beq.n	1f8ee <xTaskPriorityInherit+0x9e>
   1f8dc:	68bb      	ldr	r3, [r7, #8]
   1f8de:	0018      	movs	r0, r3
   1f8e0:	4b38      	ldr	r3, [pc, #224]	; (1f9c4 <xTaskPriorityInherit+0x174>)
   1f8e2:	4798      	blx	r3
   1f8e4:	0003      	movs	r3, r0
   1f8e6:	b2db      	uxtb	r3, r3
   1f8e8:	0018      	movs	r0, r3
   1f8ea:	4b37      	ldr	r3, [pc, #220]	; (1f9c8 <xTaskPriorityInherit+0x178>)
   1f8ec:	4798      	blx	r3
   1f8ee:	68bb      	ldr	r3, [r7, #8]
   1f8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f8f2:	4b36      	ldr	r3, [pc, #216]	; (1f9cc <xTaskPriorityInherit+0x17c>)
   1f8f4:	681b      	ldr	r3, [r3, #0]
   1f8f6:	429a      	cmp	r2, r3
   1f8f8:	d903      	bls.n	1f902 <xTaskPriorityInherit+0xb2>
   1f8fa:	68bb      	ldr	r3, [r7, #8]
   1f8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f8fe:	4b33      	ldr	r3, [pc, #204]	; (1f9cc <xTaskPriorityInherit+0x17c>)
   1f900:	601a      	str	r2, [r3, #0]
   1f902:	68bb      	ldr	r3, [r7, #8]
   1f904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f906:	0013      	movs	r3, r2
   1f908:	009b      	lsls	r3, r3, #2
   1f90a:	189b      	adds	r3, r3, r2
   1f90c:	009b      	lsls	r3, r3, #2
   1f90e:	4a29      	ldr	r2, [pc, #164]	; (1f9b4 <xTaskPriorityInherit+0x164>)
   1f910:	189a      	adds	r2, r3, r2
   1f912:	68bb      	ldr	r3, [r7, #8]
   1f914:	3304      	adds	r3, #4
   1f916:	0019      	movs	r1, r3
   1f918:	0010      	movs	r0, r2
   1f91a:	4b2d      	ldr	r3, [pc, #180]	; (1f9d0 <xTaskPriorityInherit+0x180>)
   1f91c:	4798      	blx	r3
   1f91e:	e004      	b.n	1f92a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1f920:	4b23      	ldr	r3, [pc, #140]	; (1f9b0 <xTaskPriorityInherit+0x160>)
   1f922:	681b      	ldr	r3, [r3, #0]
   1f924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f926:	68bb      	ldr	r3, [r7, #8]
   1f928:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1f92a:	68bb      	ldr	r3, [r7, #8]
   1f92c:	0018      	movs	r0, r3
   1f92e:	4b23      	ldr	r3, [pc, #140]	; (1f9bc <xTaskPriorityInherit+0x16c>)
   1f930:	4798      	blx	r3
   1f932:	0003      	movs	r3, r0
   1f934:	001a      	movs	r2, r3
   1f936:	4b22      	ldr	r3, [pc, #136]	; (1f9c0 <xTaskPriorityInherit+0x170>)
   1f938:	881b      	ldrh	r3, [r3, #0]
   1f93a:	4013      	ands	r3, r2
   1f93c:	b29b      	uxth	r3, r3
   1f93e:	2b00      	cmp	r3, #0
   1f940:	d024      	beq.n	1f98c <xTaskPriorityInherit+0x13c>
   1f942:	68bb      	ldr	r3, [r7, #8]
   1f944:	0018      	movs	r0, r3
   1f946:	4b1f      	ldr	r3, [pc, #124]	; (1f9c4 <xTaskPriorityInherit+0x174>)
   1f948:	4798      	blx	r3
   1f94a:	0003      	movs	r3, r0
   1f94c:	b2db      	uxtb	r3, r3
   1f94e:	001c      	movs	r4, r3
   1f950:	68bb      	ldr	r3, [r7, #8]
   1f952:	0018      	movs	r0, r3
   1f954:	4b1b      	ldr	r3, [pc, #108]	; (1f9c4 <xTaskPriorityInherit+0x174>)
   1f956:	4798      	blx	r3
   1f958:	0003      	movs	r3, r0
   1f95a:	b2db      	uxtb	r3, r3
   1f95c:	0019      	movs	r1, r3
   1f95e:	2003      	movs	r0, #3
   1f960:	4b1c      	ldr	r3, [pc, #112]	; (1f9d4 <xTaskPriorityInherit+0x184>)
   1f962:	4798      	blx	r3
   1f964:	0003      	movs	r3, r0
   1f966:	0022      	movs	r2, r4
   1f968:	2103      	movs	r1, #3
   1f96a:	208e      	movs	r0, #142	; 0x8e
   1f96c:	4c1a      	ldr	r4, [pc, #104]	; (1f9d8 <xTaskPriorityInherit+0x188>)
   1f96e:	47a0      	blx	r4
   1f970:	68bb      	ldr	r3, [r7, #8]
   1f972:	0018      	movs	r0, r3
   1f974:	4b13      	ldr	r3, [pc, #76]	; (1f9c4 <xTaskPriorityInherit+0x174>)
   1f976:	4798      	blx	r3
   1f978:	0003      	movs	r3, r0
   1f97a:	b2d9      	uxtb	r1, r3
   1f97c:	4b0c      	ldr	r3, [pc, #48]	; (1f9b0 <xTaskPriorityInherit+0x160>)
   1f97e:	681b      	ldr	r3, [r3, #0]
   1f980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f982:	b2db      	uxtb	r3, r3
   1f984:	001a      	movs	r2, r3
   1f986:	2003      	movs	r0, #3
   1f988:	4b14      	ldr	r3, [pc, #80]	; (1f9dc <xTaskPriorityInherit+0x18c>)
   1f98a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1f98c:	2301      	movs	r3, #1
   1f98e:	60fb      	str	r3, [r7, #12]
   1f990:	e008      	b.n	1f9a4 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1f992:	68bb      	ldr	r3, [r7, #8]
   1f994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f996:	4b06      	ldr	r3, [pc, #24]	; (1f9b0 <xTaskPriorityInherit+0x160>)
   1f998:	681b      	ldr	r3, [r3, #0]
   1f99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f99c:	429a      	cmp	r2, r3
   1f99e:	d201      	bcs.n	1f9a4 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1f9a0:	2301      	movs	r3, #1
   1f9a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1f9a4:	68fb      	ldr	r3, [r7, #12]
	}
   1f9a6:	0018      	movs	r0, r3
   1f9a8:	46bd      	mov	sp, r7
   1f9aa:	b005      	add	sp, #20
   1f9ac:	bd90      	pop	{r4, r7, pc}
   1f9ae:	46c0      	nop			; (mov r8, r8)
   1f9b0:	20004008 	.word	0x20004008
   1f9b4:	2000400c 	.word	0x2000400c
   1f9b8:	0001c967 	.word	0x0001c967
   1f9bc:	0001aaed 	.word	0x0001aaed
   1f9c0:	20000104 	.word	0x20000104
   1f9c4:	0001aacd 	.word	0x0001aacd
   1f9c8:	0001b29d 	.word	0x0001b29d
   1f9cc:	200040e8 	.word	0x200040e8
   1f9d0:	0001c8b7 	.word	0x0001c8b7
   1f9d4:	0001baa5 	.word	0x0001baa5
   1f9d8:	0001b615 	.word	0x0001b615
   1f9dc:	0001ba01 	.word	0x0001ba01

0001f9e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1f9e0:	b590      	push	{r4, r7, lr}
   1f9e2:	b085      	sub	sp, #20
   1f9e4:	af00      	add	r7, sp, #0
   1f9e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1f9e8:	687b      	ldr	r3, [r7, #4]
   1f9ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1f9ec:	2300      	movs	r3, #0
   1f9ee:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1f9f0:	687b      	ldr	r3, [r7, #4]
   1f9f2:	2b00      	cmp	r3, #0
   1f9f4:	d100      	bne.n	1f9f8 <xTaskPriorityDisinherit+0x18>
   1f9f6:	e089      	b.n	1fb0c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1f9f8:	4b47      	ldr	r3, [pc, #284]	; (1fb18 <xTaskPriorityDisinherit+0x138>)
   1f9fa:	681b      	ldr	r3, [r3, #0]
   1f9fc:	68ba      	ldr	r2, [r7, #8]
   1f9fe:	429a      	cmp	r2, r3
   1fa00:	d001      	beq.n	1fa06 <xTaskPriorityDisinherit+0x26>
   1fa02:	b672      	cpsid	i
   1fa04:	e7fe      	b.n	1fa04 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1fa06:	68bb      	ldr	r3, [r7, #8]
   1fa08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fa0a:	2b00      	cmp	r3, #0
   1fa0c:	d101      	bne.n	1fa12 <xTaskPriorityDisinherit+0x32>
   1fa0e:	b672      	cpsid	i
   1fa10:	e7fe      	b.n	1fa10 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1fa12:	68bb      	ldr	r3, [r7, #8]
   1fa14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fa16:	1e5a      	subs	r2, r3, #1
   1fa18:	68bb      	ldr	r3, [r7, #8]
   1fa1a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1fa1c:	68bb      	ldr	r3, [r7, #8]
   1fa1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fa20:	68bb      	ldr	r3, [r7, #8]
   1fa22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fa24:	429a      	cmp	r2, r3
   1fa26:	d071      	beq.n	1fb0c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1fa28:	68bb      	ldr	r3, [r7, #8]
   1fa2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fa2c:	2b00      	cmp	r3, #0
   1fa2e:	d16d      	bne.n	1fb0c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1fa30:	68bb      	ldr	r3, [r7, #8]
   1fa32:	3304      	adds	r3, #4
   1fa34:	0018      	movs	r0, r3
   1fa36:	4b39      	ldr	r3, [pc, #228]	; (1fb1c <xTaskPriorityDisinherit+0x13c>)
   1fa38:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1fa3a:	68bb      	ldr	r3, [r7, #8]
   1fa3c:	0018      	movs	r0, r3
   1fa3e:	4b38      	ldr	r3, [pc, #224]	; (1fb20 <xTaskPriorityDisinherit+0x140>)
   1fa40:	4798      	blx	r3
   1fa42:	0003      	movs	r3, r0
   1fa44:	001a      	movs	r2, r3
   1fa46:	4b37      	ldr	r3, [pc, #220]	; (1fb24 <xTaskPriorityDisinherit+0x144>)
   1fa48:	881b      	ldrh	r3, [r3, #0]
   1fa4a:	4013      	ands	r3, r2
   1fa4c:	b29b      	uxth	r3, r3
   1fa4e:	2b00      	cmp	r3, #0
   1fa50:	d023      	beq.n	1fa9a <xTaskPriorityDisinherit+0xba>
   1fa52:	68bb      	ldr	r3, [r7, #8]
   1fa54:	0018      	movs	r0, r3
   1fa56:	4b34      	ldr	r3, [pc, #208]	; (1fb28 <xTaskPriorityDisinherit+0x148>)
   1fa58:	4798      	blx	r3
   1fa5a:	0003      	movs	r3, r0
   1fa5c:	b2db      	uxtb	r3, r3
   1fa5e:	001c      	movs	r4, r3
   1fa60:	68bb      	ldr	r3, [r7, #8]
   1fa62:	0018      	movs	r0, r3
   1fa64:	4b30      	ldr	r3, [pc, #192]	; (1fb28 <xTaskPriorityDisinherit+0x148>)
   1fa66:	4798      	blx	r3
   1fa68:	0003      	movs	r3, r0
   1fa6a:	b2db      	uxtb	r3, r3
   1fa6c:	0019      	movs	r1, r3
   1fa6e:	2003      	movs	r0, #3
   1fa70:	4b2e      	ldr	r3, [pc, #184]	; (1fb2c <xTaskPriorityDisinherit+0x14c>)
   1fa72:	4798      	blx	r3
   1fa74:	0003      	movs	r3, r0
   1fa76:	0022      	movs	r2, r4
   1fa78:	2103      	movs	r1, #3
   1fa7a:	208f      	movs	r0, #143	; 0x8f
   1fa7c:	4c2c      	ldr	r4, [pc, #176]	; (1fb30 <xTaskPriorityDisinherit+0x150>)
   1fa7e:	47a0      	blx	r4
   1fa80:	68bb      	ldr	r3, [r7, #8]
   1fa82:	0018      	movs	r0, r3
   1fa84:	4b28      	ldr	r3, [pc, #160]	; (1fb28 <xTaskPriorityDisinherit+0x148>)
   1fa86:	4798      	blx	r3
   1fa88:	0003      	movs	r3, r0
   1fa8a:	b2d9      	uxtb	r1, r3
   1fa8c:	68bb      	ldr	r3, [r7, #8]
   1fa8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fa90:	b2db      	uxtb	r3, r3
   1fa92:	001a      	movs	r2, r3
   1fa94:	2003      	movs	r0, #3
   1fa96:	4b27      	ldr	r3, [pc, #156]	; (1fb34 <xTaskPriorityDisinherit+0x154>)
   1fa98:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1fa9a:	68bb      	ldr	r3, [r7, #8]
   1fa9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1fa9e:	68bb      	ldr	r3, [r7, #8]
   1faa0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1faa2:	68bb      	ldr	r3, [r7, #8]
   1faa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1faa6:	2205      	movs	r2, #5
   1faa8:	1ad2      	subs	r2, r2, r3
   1faaa:	68bb      	ldr	r3, [r7, #8]
   1faac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1faae:	68bb      	ldr	r3, [r7, #8]
   1fab0:	0018      	movs	r0, r3
   1fab2:	4b1b      	ldr	r3, [pc, #108]	; (1fb20 <xTaskPriorityDisinherit+0x140>)
   1fab4:	4798      	blx	r3
   1fab6:	0003      	movs	r3, r0
   1fab8:	001a      	movs	r2, r3
   1faba:	4b1a      	ldr	r3, [pc, #104]	; (1fb24 <xTaskPriorityDisinherit+0x144>)
   1fabc:	881b      	ldrh	r3, [r3, #0]
   1fabe:	4013      	ands	r3, r2
   1fac0:	b29b      	uxth	r3, r3
   1fac2:	2b00      	cmp	r3, #0
   1fac4:	d008      	beq.n	1fad8 <xTaskPriorityDisinherit+0xf8>
   1fac6:	68bb      	ldr	r3, [r7, #8]
   1fac8:	0018      	movs	r0, r3
   1faca:	4b17      	ldr	r3, [pc, #92]	; (1fb28 <xTaskPriorityDisinherit+0x148>)
   1facc:	4798      	blx	r3
   1face:	0003      	movs	r3, r0
   1fad0:	b2db      	uxtb	r3, r3
   1fad2:	0018      	movs	r0, r3
   1fad4:	4b18      	ldr	r3, [pc, #96]	; (1fb38 <xTaskPriorityDisinherit+0x158>)
   1fad6:	4798      	blx	r3
   1fad8:	68bb      	ldr	r3, [r7, #8]
   1fada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fadc:	4b17      	ldr	r3, [pc, #92]	; (1fb3c <xTaskPriorityDisinherit+0x15c>)
   1fade:	681b      	ldr	r3, [r3, #0]
   1fae0:	429a      	cmp	r2, r3
   1fae2:	d903      	bls.n	1faec <xTaskPriorityDisinherit+0x10c>
   1fae4:	68bb      	ldr	r3, [r7, #8]
   1fae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fae8:	4b14      	ldr	r3, [pc, #80]	; (1fb3c <xTaskPriorityDisinherit+0x15c>)
   1faea:	601a      	str	r2, [r3, #0]
   1faec:	68bb      	ldr	r3, [r7, #8]
   1faee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1faf0:	0013      	movs	r3, r2
   1faf2:	009b      	lsls	r3, r3, #2
   1faf4:	189b      	adds	r3, r3, r2
   1faf6:	009b      	lsls	r3, r3, #2
   1faf8:	4a11      	ldr	r2, [pc, #68]	; (1fb40 <xTaskPriorityDisinherit+0x160>)
   1fafa:	189a      	adds	r2, r3, r2
   1fafc:	68bb      	ldr	r3, [r7, #8]
   1fafe:	3304      	adds	r3, #4
   1fb00:	0019      	movs	r1, r3
   1fb02:	0010      	movs	r0, r2
   1fb04:	4b0f      	ldr	r3, [pc, #60]	; (1fb44 <xTaskPriorityDisinherit+0x164>)
   1fb06:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1fb08:	2301      	movs	r3, #1
   1fb0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1fb0c:	68fb      	ldr	r3, [r7, #12]
	}
   1fb0e:	0018      	movs	r0, r3
   1fb10:	46bd      	mov	sp, r7
   1fb12:	b005      	add	sp, #20
   1fb14:	bd90      	pop	{r4, r7, pc}
   1fb16:	46c0      	nop			; (mov r8, r8)
   1fb18:	20004008 	.word	0x20004008
   1fb1c:	0001c967 	.word	0x0001c967
   1fb20:	0001aaed 	.word	0x0001aaed
   1fb24:	20000104 	.word	0x20000104
   1fb28:	0001aacd 	.word	0x0001aacd
   1fb2c:	0001baa5 	.word	0x0001baa5
   1fb30:	0001b615 	.word	0x0001b615
   1fb34:	0001ba01 	.word	0x0001ba01
   1fb38:	0001b29d 	.word	0x0001b29d
   1fb3c:	200040e8 	.word	0x200040e8
   1fb40:	2000400c 	.word	0x2000400c
   1fb44:	0001c8b7 	.word	0x0001c8b7

0001fb48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1fb48:	b590      	push	{r4, r7, lr}
   1fb4a:	b087      	sub	sp, #28
   1fb4c:	af00      	add	r7, sp, #0
   1fb4e:	6078      	str	r0, [r7, #4]
   1fb50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1fb52:	687b      	ldr	r3, [r7, #4]
   1fb54:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1fb56:	2301      	movs	r3, #1
   1fb58:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1fb5a:	687b      	ldr	r3, [r7, #4]
   1fb5c:	2b00      	cmp	r3, #0
   1fb5e:	d100      	bne.n	1fb62 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1fb60:	e0a4      	b.n	1fcac <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1fb62:	693b      	ldr	r3, [r7, #16]
   1fb64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fb66:	2b00      	cmp	r3, #0
   1fb68:	d101      	bne.n	1fb6e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1fb6a:	b672      	cpsid	i
   1fb6c:	e7fe      	b.n	1fb6c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1fb6e:	693b      	ldr	r3, [r7, #16]
   1fb70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1fb72:	683b      	ldr	r3, [r7, #0]
   1fb74:	429a      	cmp	r2, r3
   1fb76:	d202      	bcs.n	1fb7e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1fb78:	683b      	ldr	r3, [r7, #0]
   1fb7a:	617b      	str	r3, [r7, #20]
   1fb7c:	e002      	b.n	1fb84 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1fb7e:	693b      	ldr	r3, [r7, #16]
   1fb80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fb82:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1fb84:	693b      	ldr	r3, [r7, #16]
   1fb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fb88:	697b      	ldr	r3, [r7, #20]
   1fb8a:	429a      	cmp	r2, r3
   1fb8c:	d100      	bne.n	1fb90 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1fb8e:	e08d      	b.n	1fcac <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1fb90:	693b      	ldr	r3, [r7, #16]
   1fb92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1fb94:	68fb      	ldr	r3, [r7, #12]
   1fb96:	429a      	cmp	r2, r3
   1fb98:	d000      	beq.n	1fb9c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1fb9a:	e087      	b.n	1fcac <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1fb9c:	4b45      	ldr	r3, [pc, #276]	; (1fcb4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1fb9e:	681b      	ldr	r3, [r3, #0]
   1fba0:	693a      	ldr	r2, [r7, #16]
   1fba2:	429a      	cmp	r2, r3
   1fba4:	d101      	bne.n	1fbaa <vTaskPriorityDisinheritAfterTimeout+0x62>
   1fba6:	b672      	cpsid	i
   1fba8:	e7fe      	b.n	1fba8 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1fbaa:	693b      	ldr	r3, [r7, #16]
   1fbac:	0018      	movs	r0, r3
   1fbae:	4b42      	ldr	r3, [pc, #264]	; (1fcb8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1fbb0:	4798      	blx	r3
   1fbb2:	0003      	movs	r3, r0
   1fbb4:	001a      	movs	r2, r3
   1fbb6:	4b41      	ldr	r3, [pc, #260]	; (1fcbc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1fbb8:	881b      	ldrh	r3, [r3, #0]
   1fbba:	4013      	ands	r3, r2
   1fbbc:	b29b      	uxth	r3, r3
   1fbbe:	2b00      	cmp	r3, #0
   1fbc0:	d023      	beq.n	1fc0a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1fbc2:	693b      	ldr	r3, [r7, #16]
   1fbc4:	0018      	movs	r0, r3
   1fbc6:	4b3e      	ldr	r3, [pc, #248]	; (1fcc0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1fbc8:	4798      	blx	r3
   1fbca:	0003      	movs	r3, r0
   1fbcc:	b2db      	uxtb	r3, r3
   1fbce:	001c      	movs	r4, r3
   1fbd0:	693b      	ldr	r3, [r7, #16]
   1fbd2:	0018      	movs	r0, r3
   1fbd4:	4b3a      	ldr	r3, [pc, #232]	; (1fcc0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1fbd6:	4798      	blx	r3
   1fbd8:	0003      	movs	r3, r0
   1fbda:	b2db      	uxtb	r3, r3
   1fbdc:	0019      	movs	r1, r3
   1fbde:	2003      	movs	r0, #3
   1fbe0:	4b38      	ldr	r3, [pc, #224]	; (1fcc4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1fbe2:	4798      	blx	r3
   1fbe4:	0003      	movs	r3, r0
   1fbe6:	0022      	movs	r2, r4
   1fbe8:	2103      	movs	r1, #3
   1fbea:	208f      	movs	r0, #143	; 0x8f
   1fbec:	4c36      	ldr	r4, [pc, #216]	; (1fcc8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1fbee:	47a0      	blx	r4
   1fbf0:	693b      	ldr	r3, [r7, #16]
   1fbf2:	0018      	movs	r0, r3
   1fbf4:	4b32      	ldr	r3, [pc, #200]	; (1fcc0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1fbf6:	4798      	blx	r3
   1fbf8:	0003      	movs	r3, r0
   1fbfa:	b2d9      	uxtb	r1, r3
   1fbfc:	693b      	ldr	r3, [r7, #16]
   1fbfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fc00:	b2db      	uxtb	r3, r3
   1fc02:	001a      	movs	r2, r3
   1fc04:	2003      	movs	r0, #3
   1fc06:	4b31      	ldr	r3, [pc, #196]	; (1fccc <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1fc08:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1fc0a:	693b      	ldr	r3, [r7, #16]
   1fc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fc0e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1fc10:	693b      	ldr	r3, [r7, #16]
   1fc12:	697a      	ldr	r2, [r7, #20]
   1fc14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1fc16:	693b      	ldr	r3, [r7, #16]
   1fc18:	699b      	ldr	r3, [r3, #24]
   1fc1a:	2b00      	cmp	r3, #0
   1fc1c:	db04      	blt.n	1fc28 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fc1e:	697b      	ldr	r3, [r7, #20]
   1fc20:	2205      	movs	r2, #5
   1fc22:	1ad2      	subs	r2, r2, r3
   1fc24:	693b      	ldr	r3, [r7, #16]
   1fc26:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1fc28:	693b      	ldr	r3, [r7, #16]
   1fc2a:	6959      	ldr	r1, [r3, #20]
   1fc2c:	68ba      	ldr	r2, [r7, #8]
   1fc2e:	0013      	movs	r3, r2
   1fc30:	009b      	lsls	r3, r3, #2
   1fc32:	189b      	adds	r3, r3, r2
   1fc34:	009b      	lsls	r3, r3, #2
   1fc36:	4a26      	ldr	r2, [pc, #152]	; (1fcd0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1fc38:	189b      	adds	r3, r3, r2
   1fc3a:	4299      	cmp	r1, r3
   1fc3c:	d101      	bne.n	1fc42 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1fc3e:	2301      	movs	r3, #1
   1fc40:	e000      	b.n	1fc44 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1fc42:	2300      	movs	r3, #0
   1fc44:	2b00      	cmp	r3, #0
   1fc46:	d031      	beq.n	1fcac <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1fc48:	693b      	ldr	r3, [r7, #16]
   1fc4a:	3304      	adds	r3, #4
   1fc4c:	0018      	movs	r0, r3
   1fc4e:	4b21      	ldr	r3, [pc, #132]	; (1fcd4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1fc50:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1fc52:	693b      	ldr	r3, [r7, #16]
   1fc54:	0018      	movs	r0, r3
   1fc56:	4b18      	ldr	r3, [pc, #96]	; (1fcb8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1fc58:	4798      	blx	r3
   1fc5a:	0003      	movs	r3, r0
   1fc5c:	001a      	movs	r2, r3
   1fc5e:	4b17      	ldr	r3, [pc, #92]	; (1fcbc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1fc60:	881b      	ldrh	r3, [r3, #0]
   1fc62:	4013      	ands	r3, r2
   1fc64:	b29b      	uxth	r3, r3
   1fc66:	2b00      	cmp	r3, #0
   1fc68:	d008      	beq.n	1fc7c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1fc6a:	693b      	ldr	r3, [r7, #16]
   1fc6c:	0018      	movs	r0, r3
   1fc6e:	4b14      	ldr	r3, [pc, #80]	; (1fcc0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1fc70:	4798      	blx	r3
   1fc72:	0003      	movs	r3, r0
   1fc74:	b2db      	uxtb	r3, r3
   1fc76:	0018      	movs	r0, r3
   1fc78:	4b17      	ldr	r3, [pc, #92]	; (1fcd8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1fc7a:	4798      	blx	r3
   1fc7c:	693b      	ldr	r3, [r7, #16]
   1fc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fc80:	4b16      	ldr	r3, [pc, #88]	; (1fcdc <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1fc82:	681b      	ldr	r3, [r3, #0]
   1fc84:	429a      	cmp	r2, r3
   1fc86:	d903      	bls.n	1fc90 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1fc88:	693b      	ldr	r3, [r7, #16]
   1fc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fc8c:	4b13      	ldr	r3, [pc, #76]	; (1fcdc <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1fc8e:	601a      	str	r2, [r3, #0]
   1fc90:	693b      	ldr	r3, [r7, #16]
   1fc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fc94:	0013      	movs	r3, r2
   1fc96:	009b      	lsls	r3, r3, #2
   1fc98:	189b      	adds	r3, r3, r2
   1fc9a:	009b      	lsls	r3, r3, #2
   1fc9c:	4a0c      	ldr	r2, [pc, #48]	; (1fcd0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1fc9e:	189a      	adds	r2, r3, r2
   1fca0:	693b      	ldr	r3, [r7, #16]
   1fca2:	3304      	adds	r3, #4
   1fca4:	0019      	movs	r1, r3
   1fca6:	0010      	movs	r0, r2
   1fca8:	4b0d      	ldr	r3, [pc, #52]	; (1fce0 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1fcaa:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1fcac:	46c0      	nop			; (mov r8, r8)
   1fcae:	46bd      	mov	sp, r7
   1fcb0:	b007      	add	sp, #28
   1fcb2:	bd90      	pop	{r4, r7, pc}
   1fcb4:	20004008 	.word	0x20004008
   1fcb8:	0001aaed 	.word	0x0001aaed
   1fcbc:	20000104 	.word	0x20000104
   1fcc0:	0001aacd 	.word	0x0001aacd
   1fcc4:	0001baa5 	.word	0x0001baa5
   1fcc8:	0001b615 	.word	0x0001b615
   1fccc:	0001ba01 	.word	0x0001ba01
   1fcd0:	2000400c 	.word	0x2000400c
   1fcd4:	0001c967 	.word	0x0001c967
   1fcd8:	0001b29d 	.word	0x0001b29d
   1fcdc:	200040e8 	.word	0x200040e8
   1fce0:	0001c8b7 	.word	0x0001c8b7

0001fce4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1fce4:	b580      	push	{r7, lr}
   1fce6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1fce8:	4b06      	ldr	r3, [pc, #24]	; (1fd04 <pvTaskIncrementMutexHeldCount+0x20>)
   1fcea:	681b      	ldr	r3, [r3, #0]
   1fcec:	2b00      	cmp	r3, #0
   1fcee:	d004      	beq.n	1fcfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1fcf0:	4b04      	ldr	r3, [pc, #16]	; (1fd04 <pvTaskIncrementMutexHeldCount+0x20>)
   1fcf2:	681b      	ldr	r3, [r3, #0]
   1fcf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1fcf6:	3201      	adds	r2, #1
   1fcf8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1fcfa:	4b02      	ldr	r3, [pc, #8]	; (1fd04 <pvTaskIncrementMutexHeldCount+0x20>)
   1fcfc:	681b      	ldr	r3, [r3, #0]
	}
   1fcfe:	0018      	movs	r0, r3
   1fd00:	46bd      	mov	sp, r7
   1fd02:	bd80      	pop	{r7, pc}
   1fd04:	20004008 	.word	0x20004008

0001fd08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1fd08:	b580      	push	{r7, lr}
   1fd0a:	b084      	sub	sp, #16
   1fd0c:	af00      	add	r7, sp, #0
   1fd0e:	6078      	str	r0, [r7, #4]
   1fd10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1fd12:	4b21      	ldr	r3, [pc, #132]	; (1fd98 <prvAddCurrentTaskToDelayedList+0x90>)
   1fd14:	681b      	ldr	r3, [r3, #0]
   1fd16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1fd18:	4b20      	ldr	r3, [pc, #128]	; (1fd9c <prvAddCurrentTaskToDelayedList+0x94>)
   1fd1a:	681b      	ldr	r3, [r3, #0]
   1fd1c:	3304      	adds	r3, #4
   1fd1e:	0018      	movs	r0, r3
   1fd20:	4b1f      	ldr	r3, [pc, #124]	; (1fda0 <prvAddCurrentTaskToDelayedList+0x98>)
   1fd22:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1fd24:	687b      	ldr	r3, [r7, #4]
   1fd26:	3301      	adds	r3, #1
   1fd28:	d10b      	bne.n	1fd42 <prvAddCurrentTaskToDelayedList+0x3a>
   1fd2a:	683b      	ldr	r3, [r7, #0]
   1fd2c:	2b00      	cmp	r3, #0
   1fd2e:	d008      	beq.n	1fd42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1fd30:	4b1a      	ldr	r3, [pc, #104]	; (1fd9c <prvAddCurrentTaskToDelayedList+0x94>)
   1fd32:	681b      	ldr	r3, [r3, #0]
   1fd34:	1d1a      	adds	r2, r3, #4
   1fd36:	4b1b      	ldr	r3, [pc, #108]	; (1fda4 <prvAddCurrentTaskToDelayedList+0x9c>)
   1fd38:	0011      	movs	r1, r2
   1fd3a:	0018      	movs	r0, r3
   1fd3c:	4b1a      	ldr	r3, [pc, #104]	; (1fda8 <prvAddCurrentTaskToDelayedList+0xa0>)
   1fd3e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1fd40:	e026      	b.n	1fd90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1fd42:	68fa      	ldr	r2, [r7, #12]
   1fd44:	687b      	ldr	r3, [r7, #4]
   1fd46:	18d3      	adds	r3, r2, r3
   1fd48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1fd4a:	4b14      	ldr	r3, [pc, #80]	; (1fd9c <prvAddCurrentTaskToDelayedList+0x94>)
   1fd4c:	681b      	ldr	r3, [r3, #0]
   1fd4e:	68ba      	ldr	r2, [r7, #8]
   1fd50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1fd52:	68ba      	ldr	r2, [r7, #8]
   1fd54:	68fb      	ldr	r3, [r7, #12]
   1fd56:	429a      	cmp	r2, r3
   1fd58:	d209      	bcs.n	1fd6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1fd5a:	4b14      	ldr	r3, [pc, #80]	; (1fdac <prvAddCurrentTaskToDelayedList+0xa4>)
   1fd5c:	681a      	ldr	r2, [r3, #0]
   1fd5e:	4b0f      	ldr	r3, [pc, #60]	; (1fd9c <prvAddCurrentTaskToDelayedList+0x94>)
   1fd60:	681b      	ldr	r3, [r3, #0]
   1fd62:	3304      	adds	r3, #4
   1fd64:	0019      	movs	r1, r3
   1fd66:	0010      	movs	r0, r2
   1fd68:	4b11      	ldr	r3, [pc, #68]	; (1fdb0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1fd6a:	4798      	blx	r3
}
   1fd6c:	e010      	b.n	1fd90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1fd6e:	4b11      	ldr	r3, [pc, #68]	; (1fdb4 <prvAddCurrentTaskToDelayedList+0xac>)
   1fd70:	681a      	ldr	r2, [r3, #0]
   1fd72:	4b0a      	ldr	r3, [pc, #40]	; (1fd9c <prvAddCurrentTaskToDelayedList+0x94>)
   1fd74:	681b      	ldr	r3, [r3, #0]
   1fd76:	3304      	adds	r3, #4
   1fd78:	0019      	movs	r1, r3
   1fd7a:	0010      	movs	r0, r2
   1fd7c:	4b0c      	ldr	r3, [pc, #48]	; (1fdb0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1fd7e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1fd80:	4b0d      	ldr	r3, [pc, #52]	; (1fdb8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1fd82:	681b      	ldr	r3, [r3, #0]
   1fd84:	68ba      	ldr	r2, [r7, #8]
   1fd86:	429a      	cmp	r2, r3
   1fd88:	d202      	bcs.n	1fd90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1fd8a:	4b0b      	ldr	r3, [pc, #44]	; (1fdb8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1fd8c:	68ba      	ldr	r2, [r7, #8]
   1fd8e:	601a      	str	r2, [r3, #0]
}
   1fd90:	46c0      	nop			; (mov r8, r8)
   1fd92:	46bd      	mov	sp, r7
   1fd94:	b004      	add	sp, #16
   1fd96:	bd80      	pop	{r7, pc}
   1fd98:	200040e4 	.word	0x200040e4
   1fd9c:	20004008 	.word	0x20004008
   1fda0:	0001c967 	.word	0x0001c967
   1fda4:	200040cc 	.word	0x200040cc
   1fda8:	0001c8b7 	.word	0x0001c8b7
   1fdac:	2000409c 	.word	0x2000409c
   1fdb0:	0001c8fb 	.word	0x0001c8fb
   1fdb4:	20004098 	.word	0x20004098
   1fdb8:	20004100 	.word	0x20004100

0001fdbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1fdbc:	b590      	push	{r4, r7, lr}
   1fdbe:	b085      	sub	sp, #20
   1fdc0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1fdc2:	2300      	movs	r3, #0
   1fdc4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1fdc6:	4b0e      	ldr	r3, [pc, #56]	; (1fe00 <xTimerCreateTimerTask+0x44>)
   1fdc8:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1fdca:	4b0e      	ldr	r3, [pc, #56]	; (1fe04 <xTimerCreateTimerTask+0x48>)
   1fdcc:	681b      	ldr	r3, [r3, #0]
   1fdce:	2b00      	cmp	r3, #0
   1fdd0:	d00b      	beq.n	1fdea <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1fdd2:	490d      	ldr	r1, [pc, #52]	; (1fe08 <xTimerCreateTimerTask+0x4c>)
   1fdd4:	480d      	ldr	r0, [pc, #52]	; (1fe0c <xTimerCreateTimerTask+0x50>)
   1fdd6:	4b0e      	ldr	r3, [pc, #56]	; (1fe10 <xTimerCreateTimerTask+0x54>)
   1fdd8:	9301      	str	r3, [sp, #4]
   1fdda:	2302      	movs	r3, #2
   1fddc:	9300      	str	r3, [sp, #0]
   1fdde:	2300      	movs	r3, #0
   1fde0:	2280      	movs	r2, #128	; 0x80
   1fde2:	4c0c      	ldr	r4, [pc, #48]	; (1fe14 <xTimerCreateTimerTask+0x58>)
   1fde4:	47a0      	blx	r4
   1fde6:	0003      	movs	r3, r0
   1fde8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1fdea:	687b      	ldr	r3, [r7, #4]
   1fdec:	2b00      	cmp	r3, #0
   1fdee:	d101      	bne.n	1fdf4 <xTimerCreateTimerTask+0x38>
   1fdf0:	b672      	cpsid	i
   1fdf2:	e7fe      	b.n	1fdf2 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1fdf4:	687b      	ldr	r3, [r7, #4]
}
   1fdf6:	0018      	movs	r0, r3
   1fdf8:	46bd      	mov	sp, r7
   1fdfa:	b003      	add	sp, #12
   1fdfc:	bd90      	pop	{r4, r7, pc}
   1fdfe:	46c0      	nop			; (mov r8, r8)
   1fe00:	00020305 	.word	0x00020305
   1fe04:	2000413c 	.word	0x2000413c
   1fe08:	0003b39c 	.word	0x0003b39c
   1fe0c:	0001ff3d 	.word	0x0001ff3d
   1fe10:	20004140 	.word	0x20004140
   1fe14:	0001e755 	.word	0x0001e755

0001fe18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1fe18:	b590      	push	{r4, r7, lr}
   1fe1a:	b089      	sub	sp, #36	; 0x24
   1fe1c:	af00      	add	r7, sp, #0
   1fe1e:	60f8      	str	r0, [r7, #12]
   1fe20:	60b9      	str	r1, [r7, #8]
   1fe22:	607a      	str	r2, [r7, #4]
   1fe24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1fe26:	2300      	movs	r3, #0
   1fe28:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1fe2a:	68fb      	ldr	r3, [r7, #12]
   1fe2c:	2b00      	cmp	r3, #0
   1fe2e:	d101      	bne.n	1fe34 <xTimerGenericCommand+0x1c>
   1fe30:	b672      	cpsid	i
   1fe32:	e7fe      	b.n	1fe32 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1fe34:	4b1e      	ldr	r3, [pc, #120]	; (1feb0 <xTimerGenericCommand+0x98>)
   1fe36:	681b      	ldr	r3, [r3, #0]
   1fe38:	2b00      	cmp	r3, #0
   1fe3a:	d033      	beq.n	1fea4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1fe3c:	2310      	movs	r3, #16
   1fe3e:	18fb      	adds	r3, r7, r3
   1fe40:	68ba      	ldr	r2, [r7, #8]
   1fe42:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1fe44:	2310      	movs	r3, #16
   1fe46:	18fb      	adds	r3, r7, r3
   1fe48:	687a      	ldr	r2, [r7, #4]
   1fe4a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1fe4c:	2310      	movs	r3, #16
   1fe4e:	18fb      	adds	r3, r7, r3
   1fe50:	68fa      	ldr	r2, [r7, #12]
   1fe52:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1fe54:	68bb      	ldr	r3, [r7, #8]
   1fe56:	2b05      	cmp	r3, #5
   1fe58:	dc1a      	bgt.n	1fe90 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1fe5a:	4b16      	ldr	r3, [pc, #88]	; (1feb4 <xTimerGenericCommand+0x9c>)
   1fe5c:	4798      	blx	r3
   1fe5e:	0003      	movs	r3, r0
   1fe60:	2b02      	cmp	r3, #2
   1fe62:	d10a      	bne.n	1fe7a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1fe64:	4b12      	ldr	r3, [pc, #72]	; (1feb0 <xTimerGenericCommand+0x98>)
   1fe66:	6818      	ldr	r0, [r3, #0]
   1fe68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1fe6a:	2310      	movs	r3, #16
   1fe6c:	18f9      	adds	r1, r7, r3
   1fe6e:	2300      	movs	r3, #0
   1fe70:	4c11      	ldr	r4, [pc, #68]	; (1feb8 <xTimerGenericCommand+0xa0>)
   1fe72:	47a0      	blx	r4
   1fe74:	0003      	movs	r3, r0
   1fe76:	61fb      	str	r3, [r7, #28]
   1fe78:	e014      	b.n	1fea4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1fe7a:	4b0d      	ldr	r3, [pc, #52]	; (1feb0 <xTimerGenericCommand+0x98>)
   1fe7c:	6818      	ldr	r0, [r3, #0]
   1fe7e:	2310      	movs	r3, #16
   1fe80:	18f9      	adds	r1, r7, r3
   1fe82:	2300      	movs	r3, #0
   1fe84:	2200      	movs	r2, #0
   1fe86:	4c0c      	ldr	r4, [pc, #48]	; (1feb8 <xTimerGenericCommand+0xa0>)
   1fe88:	47a0      	blx	r4
   1fe8a:	0003      	movs	r3, r0
   1fe8c:	61fb      	str	r3, [r7, #28]
   1fe8e:	e009      	b.n	1fea4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1fe90:	4b07      	ldr	r3, [pc, #28]	; (1feb0 <xTimerGenericCommand+0x98>)
   1fe92:	6818      	ldr	r0, [r3, #0]
   1fe94:	683a      	ldr	r2, [r7, #0]
   1fe96:	2310      	movs	r3, #16
   1fe98:	18f9      	adds	r1, r7, r3
   1fe9a:	2300      	movs	r3, #0
   1fe9c:	4c07      	ldr	r4, [pc, #28]	; (1febc <xTimerGenericCommand+0xa4>)
   1fe9e:	47a0      	blx	r4
   1fea0:	0003      	movs	r3, r0
   1fea2:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1fea4:	69fb      	ldr	r3, [r7, #28]
}
   1fea6:	0018      	movs	r0, r3
   1fea8:	46bd      	mov	sp, r7
   1feaa:	b009      	add	sp, #36	; 0x24
   1feac:	bd90      	pop	{r4, r7, pc}
   1feae:	46c0      	nop			; (mov r8, r8)
   1feb0:	2000413c 	.word	0x2000413c
   1feb4:	0001f819 	.word	0x0001f819
   1feb8:	0001d08d 	.word	0x0001d08d
   1febc:	0001d4ed 	.word	0x0001d4ed

0001fec0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1fec0:	b590      	push	{r4, r7, lr}
   1fec2:	b087      	sub	sp, #28
   1fec4:	af02      	add	r7, sp, #8
   1fec6:	6078      	str	r0, [r7, #4]
   1fec8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1feca:	4b18      	ldr	r3, [pc, #96]	; (1ff2c <prvProcessExpiredTimer+0x6c>)
   1fecc:	681b      	ldr	r3, [r3, #0]
   1fece:	68db      	ldr	r3, [r3, #12]
   1fed0:	68db      	ldr	r3, [r3, #12]
   1fed2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1fed4:	68fb      	ldr	r3, [r7, #12]
   1fed6:	3304      	adds	r3, #4
   1fed8:	0018      	movs	r0, r3
   1feda:	4b15      	ldr	r3, [pc, #84]	; (1ff30 <prvProcessExpiredTimer+0x70>)
   1fedc:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1fede:	68fb      	ldr	r3, [r7, #12]
   1fee0:	69db      	ldr	r3, [r3, #28]
   1fee2:	2b01      	cmp	r3, #1
   1fee4:	d119      	bne.n	1ff1a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1fee6:	68fb      	ldr	r3, [r7, #12]
   1fee8:	699a      	ldr	r2, [r3, #24]
   1feea:	687b      	ldr	r3, [r7, #4]
   1feec:	18d1      	adds	r1, r2, r3
   1feee:	687b      	ldr	r3, [r7, #4]
   1fef0:	683a      	ldr	r2, [r7, #0]
   1fef2:	68f8      	ldr	r0, [r7, #12]
   1fef4:	4c0f      	ldr	r4, [pc, #60]	; (1ff34 <prvProcessExpiredTimer+0x74>)
   1fef6:	47a0      	blx	r4
   1fef8:	1e03      	subs	r3, r0, #0
   1fefa:	d00e      	beq.n	1ff1a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1fefc:	687a      	ldr	r2, [r7, #4]
   1fefe:	68f8      	ldr	r0, [r7, #12]
   1ff00:	2300      	movs	r3, #0
   1ff02:	9300      	str	r3, [sp, #0]
   1ff04:	2300      	movs	r3, #0
   1ff06:	2100      	movs	r1, #0
   1ff08:	4c0b      	ldr	r4, [pc, #44]	; (1ff38 <prvProcessExpiredTimer+0x78>)
   1ff0a:	47a0      	blx	r4
   1ff0c:	0003      	movs	r3, r0
   1ff0e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1ff10:	68bb      	ldr	r3, [r7, #8]
   1ff12:	2b00      	cmp	r3, #0
   1ff14:	d101      	bne.n	1ff1a <prvProcessExpiredTimer+0x5a>
   1ff16:	b672      	cpsid	i
   1ff18:	e7fe      	b.n	1ff18 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1ff1a:	68fb      	ldr	r3, [r7, #12]
   1ff1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ff1e:	68fa      	ldr	r2, [r7, #12]
   1ff20:	0010      	movs	r0, r2
   1ff22:	4798      	blx	r3
}
   1ff24:	46c0      	nop			; (mov r8, r8)
   1ff26:	46bd      	mov	sp, r7
   1ff28:	b005      	add	sp, #20
   1ff2a:	bd90      	pop	{r4, r7, pc}
   1ff2c:	20004134 	.word	0x20004134
   1ff30:	0001c967 	.word	0x0001c967
   1ff34:	000200a5 	.word	0x000200a5
   1ff38:	0001fe19 	.word	0x0001fe19

0001ff3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1ff3c:	b580      	push	{r7, lr}
   1ff3e:	b084      	sub	sp, #16
   1ff40:	af00      	add	r7, sp, #0
   1ff42:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1ff44:	4b08      	ldr	r3, [pc, #32]	; (1ff68 <prvTimerTask+0x2c>)
   1ff46:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1ff48:	2308      	movs	r3, #8
   1ff4a:	18fb      	adds	r3, r7, r3
   1ff4c:	0018      	movs	r0, r3
   1ff4e:	4b07      	ldr	r3, [pc, #28]	; (1ff6c <prvTimerTask+0x30>)
   1ff50:	4798      	blx	r3
   1ff52:	0003      	movs	r3, r0
   1ff54:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1ff56:	68ba      	ldr	r2, [r7, #8]
   1ff58:	68fb      	ldr	r3, [r7, #12]
   1ff5a:	0011      	movs	r1, r2
   1ff5c:	0018      	movs	r0, r3
   1ff5e:	4b04      	ldr	r3, [pc, #16]	; (1ff70 <prvTimerTask+0x34>)
   1ff60:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1ff62:	4b04      	ldr	r3, [pc, #16]	; (1ff74 <prvTimerTask+0x38>)
   1ff64:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1ff66:	e7ef      	b.n	1ff48 <prvTimerTask+0xc>
   1ff68:	000351a1 	.word	0x000351a1
   1ff6c:	0002001d 	.word	0x0002001d
   1ff70:	0001ff79 	.word	0x0001ff79
   1ff74:	0002012d 	.word	0x0002012d

0001ff78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1ff78:	b580      	push	{r7, lr}
   1ff7a:	b084      	sub	sp, #16
   1ff7c:	af00      	add	r7, sp, #0
   1ff7e:	6078      	str	r0, [r7, #4]
   1ff80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1ff82:	4b1e      	ldr	r3, [pc, #120]	; (1fffc <prvProcessTimerOrBlockTask+0x84>)
   1ff84:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1ff86:	2308      	movs	r3, #8
   1ff88:	18fb      	adds	r3, r7, r3
   1ff8a:	0018      	movs	r0, r3
   1ff8c:	4b1c      	ldr	r3, [pc, #112]	; (20000 <prvProcessTimerOrBlockTask+0x88>)
   1ff8e:	4798      	blx	r3
   1ff90:	0003      	movs	r3, r0
   1ff92:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1ff94:	68bb      	ldr	r3, [r7, #8]
   1ff96:	2b00      	cmp	r3, #0
   1ff98:	d129      	bne.n	1ffee <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1ff9a:	683b      	ldr	r3, [r7, #0]
   1ff9c:	2b00      	cmp	r3, #0
   1ff9e:	d10c      	bne.n	1ffba <prvProcessTimerOrBlockTask+0x42>
   1ffa0:	687a      	ldr	r2, [r7, #4]
   1ffa2:	68fb      	ldr	r3, [r7, #12]
   1ffa4:	429a      	cmp	r2, r3
   1ffa6:	d808      	bhi.n	1ffba <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1ffa8:	4b16      	ldr	r3, [pc, #88]	; (20004 <prvProcessTimerOrBlockTask+0x8c>)
   1ffaa:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1ffac:	68fa      	ldr	r2, [r7, #12]
   1ffae:	687b      	ldr	r3, [r7, #4]
   1ffb0:	0011      	movs	r1, r2
   1ffb2:	0018      	movs	r0, r3
   1ffb4:	4b14      	ldr	r3, [pc, #80]	; (20008 <prvProcessTimerOrBlockTask+0x90>)
   1ffb6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1ffb8:	e01b      	b.n	1fff2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1ffba:	683b      	ldr	r3, [r7, #0]
   1ffbc:	2b00      	cmp	r3, #0
   1ffbe:	d006      	beq.n	1ffce <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1ffc0:	4b12      	ldr	r3, [pc, #72]	; (2000c <prvProcessTimerOrBlockTask+0x94>)
   1ffc2:	681b      	ldr	r3, [r3, #0]
   1ffc4:	681b      	ldr	r3, [r3, #0]
   1ffc6:	425a      	negs	r2, r3
   1ffc8:	4153      	adcs	r3, r2
   1ffca:	b2db      	uxtb	r3, r3
   1ffcc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1ffce:	4b10      	ldr	r3, [pc, #64]	; (20010 <prvProcessTimerOrBlockTask+0x98>)
   1ffd0:	6818      	ldr	r0, [r3, #0]
   1ffd2:	687a      	ldr	r2, [r7, #4]
   1ffd4:	68fb      	ldr	r3, [r7, #12]
   1ffd6:	1ad3      	subs	r3, r2, r3
   1ffd8:	683a      	ldr	r2, [r7, #0]
   1ffda:	0019      	movs	r1, r3
   1ffdc:	4b0d      	ldr	r3, [pc, #52]	; (20014 <prvProcessTimerOrBlockTask+0x9c>)
   1ffde:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1ffe0:	4b08      	ldr	r3, [pc, #32]	; (20004 <prvProcessTimerOrBlockTask+0x8c>)
   1ffe2:	4798      	blx	r3
   1ffe4:	1e03      	subs	r3, r0, #0
   1ffe6:	d104      	bne.n	1fff2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1ffe8:	4b0b      	ldr	r3, [pc, #44]	; (20018 <prvProcessTimerOrBlockTask+0xa0>)
   1ffea:	4798      	blx	r3
}
   1ffec:	e001      	b.n	1fff2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1ffee:	4b05      	ldr	r3, [pc, #20]	; (20004 <prvProcessTimerOrBlockTask+0x8c>)
   1fff0:	4798      	blx	r3
}
   1fff2:	46c0      	nop			; (mov r8, r8)
   1fff4:	46bd      	mov	sp, r7
   1fff6:	b004      	add	sp, #16
   1fff8:	bd80      	pop	{r7, pc}
   1fffa:	46c0      	nop			; (mov r8, r8)
   1fffc:	0001edb1 	.word	0x0001edb1
   20000:	0002005d 	.word	0x0002005d
   20004:	0001edc9 	.word	0x0001edc9
   20008:	0001fec1 	.word	0x0001fec1
   2000c:	20004138 	.word	0x20004138
   20010:	2000413c 	.word	0x2000413c
   20014:	0001e551 	.word	0x0001e551
   20018:	0001cae1 	.word	0x0001cae1

0002001c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   2001c:	b580      	push	{r7, lr}
   2001e:	b084      	sub	sp, #16
   20020:	af00      	add	r7, sp, #0
   20022:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   20024:	4b0c      	ldr	r3, [pc, #48]	; (20058 <prvGetNextExpireTime+0x3c>)
   20026:	681b      	ldr	r3, [r3, #0]
   20028:	681b      	ldr	r3, [r3, #0]
   2002a:	425a      	negs	r2, r3
   2002c:	4153      	adcs	r3, r2
   2002e:	b2db      	uxtb	r3, r3
   20030:	001a      	movs	r2, r3
   20032:	687b      	ldr	r3, [r7, #4]
   20034:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   20036:	687b      	ldr	r3, [r7, #4]
   20038:	681b      	ldr	r3, [r3, #0]
   2003a:	2b00      	cmp	r3, #0
   2003c:	d105      	bne.n	2004a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   2003e:	4b06      	ldr	r3, [pc, #24]	; (20058 <prvGetNextExpireTime+0x3c>)
   20040:	681b      	ldr	r3, [r3, #0]
   20042:	68db      	ldr	r3, [r3, #12]
   20044:	681b      	ldr	r3, [r3, #0]
   20046:	60fb      	str	r3, [r7, #12]
   20048:	e001      	b.n	2004e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   2004a:	2300      	movs	r3, #0
   2004c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   2004e:	68fb      	ldr	r3, [r7, #12]
}
   20050:	0018      	movs	r0, r3
   20052:	46bd      	mov	sp, r7
   20054:	b004      	add	sp, #16
   20056:	bd80      	pop	{r7, pc}
   20058:	20004134 	.word	0x20004134

0002005c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   2005c:	b580      	push	{r7, lr}
   2005e:	b084      	sub	sp, #16
   20060:	af00      	add	r7, sp, #0
   20062:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   20064:	4b0c      	ldr	r3, [pc, #48]	; (20098 <prvSampleTimeNow+0x3c>)
   20066:	4798      	blx	r3
   20068:	0003      	movs	r3, r0
   2006a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   2006c:	4b0b      	ldr	r3, [pc, #44]	; (2009c <prvSampleTimeNow+0x40>)
   2006e:	681b      	ldr	r3, [r3, #0]
   20070:	68fa      	ldr	r2, [r7, #12]
   20072:	429a      	cmp	r2, r3
   20074:	d205      	bcs.n	20082 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   20076:	4b0a      	ldr	r3, [pc, #40]	; (200a0 <prvSampleTimeNow+0x44>)
   20078:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   2007a:	687b      	ldr	r3, [r7, #4]
   2007c:	2201      	movs	r2, #1
   2007e:	601a      	str	r2, [r3, #0]
   20080:	e002      	b.n	20088 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   20082:	687b      	ldr	r3, [r7, #4]
   20084:	2200      	movs	r2, #0
   20086:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   20088:	4b04      	ldr	r3, [pc, #16]	; (2009c <prvSampleTimeNow+0x40>)
   2008a:	68fa      	ldr	r2, [r7, #12]
   2008c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   2008e:	68fb      	ldr	r3, [r7, #12]
}
   20090:	0018      	movs	r0, r3
   20092:	46bd      	mov	sp, r7
   20094:	b004      	add	sp, #16
   20096:	bd80      	pop	{r7, pc}
   20098:	0001ef39 	.word	0x0001ef39
   2009c:	20004144 	.word	0x20004144
   200a0:	00020245 	.word	0x00020245

000200a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   200a4:	b580      	push	{r7, lr}
   200a6:	b086      	sub	sp, #24
   200a8:	af00      	add	r7, sp, #0
   200aa:	60f8      	str	r0, [r7, #12]
   200ac:	60b9      	str	r1, [r7, #8]
   200ae:	607a      	str	r2, [r7, #4]
   200b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   200b2:	2300      	movs	r3, #0
   200b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   200b6:	68fb      	ldr	r3, [r7, #12]
   200b8:	68ba      	ldr	r2, [r7, #8]
   200ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   200bc:	68fb      	ldr	r3, [r7, #12]
   200be:	68fa      	ldr	r2, [r7, #12]
   200c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   200c2:	68ba      	ldr	r2, [r7, #8]
   200c4:	687b      	ldr	r3, [r7, #4]
   200c6:	429a      	cmp	r2, r3
   200c8:	d812      	bhi.n	200f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   200ca:	687a      	ldr	r2, [r7, #4]
   200cc:	683b      	ldr	r3, [r7, #0]
   200ce:	1ad2      	subs	r2, r2, r3
   200d0:	68fb      	ldr	r3, [r7, #12]
   200d2:	699b      	ldr	r3, [r3, #24]
   200d4:	429a      	cmp	r2, r3
   200d6:	d302      	bcc.n	200de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   200d8:	2301      	movs	r3, #1
   200da:	617b      	str	r3, [r7, #20]
   200dc:	e01b      	b.n	20116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   200de:	4b10      	ldr	r3, [pc, #64]	; (20120 <prvInsertTimerInActiveList+0x7c>)
   200e0:	681a      	ldr	r2, [r3, #0]
   200e2:	68fb      	ldr	r3, [r7, #12]
   200e4:	3304      	adds	r3, #4
   200e6:	0019      	movs	r1, r3
   200e8:	0010      	movs	r0, r2
   200ea:	4b0e      	ldr	r3, [pc, #56]	; (20124 <prvInsertTimerInActiveList+0x80>)
   200ec:	4798      	blx	r3
   200ee:	e012      	b.n	20116 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   200f0:	687a      	ldr	r2, [r7, #4]
   200f2:	683b      	ldr	r3, [r7, #0]
   200f4:	429a      	cmp	r2, r3
   200f6:	d206      	bcs.n	20106 <prvInsertTimerInActiveList+0x62>
   200f8:	68ba      	ldr	r2, [r7, #8]
   200fa:	683b      	ldr	r3, [r7, #0]
   200fc:	429a      	cmp	r2, r3
   200fe:	d302      	bcc.n	20106 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   20100:	2301      	movs	r3, #1
   20102:	617b      	str	r3, [r7, #20]
   20104:	e007      	b.n	20116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   20106:	4b08      	ldr	r3, [pc, #32]	; (20128 <prvInsertTimerInActiveList+0x84>)
   20108:	681a      	ldr	r2, [r3, #0]
   2010a:	68fb      	ldr	r3, [r7, #12]
   2010c:	3304      	adds	r3, #4
   2010e:	0019      	movs	r1, r3
   20110:	0010      	movs	r0, r2
   20112:	4b04      	ldr	r3, [pc, #16]	; (20124 <prvInsertTimerInActiveList+0x80>)
   20114:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   20116:	697b      	ldr	r3, [r7, #20]
}
   20118:	0018      	movs	r0, r3
   2011a:	46bd      	mov	sp, r7
   2011c:	b006      	add	sp, #24
   2011e:	bd80      	pop	{r7, pc}
   20120:	20004138 	.word	0x20004138
   20124:	0001c8fb 	.word	0x0001c8fb
   20128:	20004134 	.word	0x20004134

0002012c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   2012c:	b590      	push	{r4, r7, lr}
   2012e:	b08b      	sub	sp, #44	; 0x2c
   20130:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   20132:	e068      	b.n	20206 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   20134:	2308      	movs	r3, #8
   20136:	18fb      	adds	r3, r7, r3
   20138:	681b      	ldr	r3, [r3, #0]
   2013a:	2b00      	cmp	r3, #0
   2013c:	db63      	blt.n	20206 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   2013e:	2308      	movs	r3, #8
   20140:	18fb      	adds	r3, r7, r3
   20142:	689b      	ldr	r3, [r3, #8]
   20144:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   20146:	69fb      	ldr	r3, [r7, #28]
   20148:	695b      	ldr	r3, [r3, #20]
   2014a:	2b00      	cmp	r3, #0
   2014c:	d004      	beq.n	20158 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   2014e:	69fb      	ldr	r3, [r7, #28]
   20150:	3304      	adds	r3, #4
   20152:	0018      	movs	r0, r3
   20154:	4b33      	ldr	r3, [pc, #204]	; (20224 <prvProcessReceivedCommands+0xf8>)
   20156:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   20158:	1d3b      	adds	r3, r7, #4
   2015a:	0018      	movs	r0, r3
   2015c:	4b32      	ldr	r3, [pc, #200]	; (20228 <prvProcessReceivedCommands+0xfc>)
   2015e:	4798      	blx	r3
   20160:	0003      	movs	r3, r0
   20162:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   20164:	2308      	movs	r3, #8
   20166:	18fb      	adds	r3, r7, r3
   20168:	681b      	ldr	r3, [r3, #0]
   2016a:	2b09      	cmp	r3, #9
   2016c:	d84a      	bhi.n	20204 <prvProcessReceivedCommands+0xd8>
   2016e:	009a      	lsls	r2, r3, #2
   20170:	4b2e      	ldr	r3, [pc, #184]	; (2022c <prvProcessReceivedCommands+0x100>)
   20172:	18d3      	adds	r3, r2, r3
   20174:	681b      	ldr	r3, [r3, #0]
   20176:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   20178:	2308      	movs	r3, #8
   2017a:	18fb      	adds	r3, r7, r3
   2017c:	685a      	ldr	r2, [r3, #4]
   2017e:	69fb      	ldr	r3, [r7, #28]
   20180:	699b      	ldr	r3, [r3, #24]
   20182:	18d1      	adds	r1, r2, r3
   20184:	2308      	movs	r3, #8
   20186:	18fb      	adds	r3, r7, r3
   20188:	685b      	ldr	r3, [r3, #4]
   2018a:	69ba      	ldr	r2, [r7, #24]
   2018c:	69f8      	ldr	r0, [r7, #28]
   2018e:	4c28      	ldr	r4, [pc, #160]	; (20230 <prvProcessReceivedCommands+0x104>)
   20190:	47a0      	blx	r4
   20192:	1e03      	subs	r3, r0, #0
   20194:	d037      	beq.n	20206 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   20196:	69fb      	ldr	r3, [r7, #28]
   20198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2019a:	69fa      	ldr	r2, [r7, #28]
   2019c:	0010      	movs	r0, r2
   2019e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   201a0:	69fb      	ldr	r3, [r7, #28]
   201a2:	69db      	ldr	r3, [r3, #28]
   201a4:	2b01      	cmp	r3, #1
   201a6:	d12e      	bne.n	20206 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   201a8:	2308      	movs	r3, #8
   201aa:	18fb      	adds	r3, r7, r3
   201ac:	685a      	ldr	r2, [r3, #4]
   201ae:	69fb      	ldr	r3, [r7, #28]
   201b0:	699b      	ldr	r3, [r3, #24]
   201b2:	18d2      	adds	r2, r2, r3
   201b4:	69f8      	ldr	r0, [r7, #28]
   201b6:	2300      	movs	r3, #0
   201b8:	9300      	str	r3, [sp, #0]
   201ba:	2300      	movs	r3, #0
   201bc:	2100      	movs	r1, #0
   201be:	4c1d      	ldr	r4, [pc, #116]	; (20234 <prvProcessReceivedCommands+0x108>)
   201c0:	47a0      	blx	r4
   201c2:	0003      	movs	r3, r0
   201c4:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   201c6:	697b      	ldr	r3, [r7, #20]
   201c8:	2b00      	cmp	r3, #0
   201ca:	d11c      	bne.n	20206 <prvProcessReceivedCommands+0xda>
   201cc:	b672      	cpsid	i
   201ce:	e7fe      	b.n	201ce <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   201d0:	2308      	movs	r3, #8
   201d2:	18fb      	adds	r3, r7, r3
   201d4:	685a      	ldr	r2, [r3, #4]
   201d6:	69fb      	ldr	r3, [r7, #28]
   201d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   201da:	69fb      	ldr	r3, [r7, #28]
   201dc:	699b      	ldr	r3, [r3, #24]
   201de:	2b00      	cmp	r3, #0
   201e0:	d101      	bne.n	201e6 <prvProcessReceivedCommands+0xba>
   201e2:	b672      	cpsid	i
   201e4:	e7fe      	b.n	201e4 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   201e6:	69fb      	ldr	r3, [r7, #28]
   201e8:	699a      	ldr	r2, [r3, #24]
   201ea:	69bb      	ldr	r3, [r7, #24]
   201ec:	18d1      	adds	r1, r2, r3
   201ee:	69bb      	ldr	r3, [r7, #24]
   201f0:	69ba      	ldr	r2, [r7, #24]
   201f2:	69f8      	ldr	r0, [r7, #28]
   201f4:	4c0e      	ldr	r4, [pc, #56]	; (20230 <prvProcessReceivedCommands+0x104>)
   201f6:	47a0      	blx	r4
					break;
   201f8:	e005      	b.n	20206 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   201fa:	69fb      	ldr	r3, [r7, #28]
   201fc:	0018      	movs	r0, r3
   201fe:	4b0e      	ldr	r3, [pc, #56]	; (20238 <prvProcessReceivedCommands+0x10c>)
   20200:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   20202:	e000      	b.n	20206 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   20204:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   20206:	4b0d      	ldr	r3, [pc, #52]	; (2023c <prvProcessReceivedCommands+0x110>)
   20208:	681b      	ldr	r3, [r3, #0]
   2020a:	2208      	movs	r2, #8
   2020c:	18b9      	adds	r1, r7, r2
   2020e:	2200      	movs	r2, #0
   20210:	0018      	movs	r0, r3
   20212:	4b0b      	ldr	r3, [pc, #44]	; (20240 <prvProcessReceivedCommands+0x114>)
   20214:	4798      	blx	r3
   20216:	1e03      	subs	r3, r0, #0
   20218:	d18c      	bne.n	20134 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   2021a:	46c0      	nop			; (mov r8, r8)
   2021c:	46bd      	mov	sp, r7
   2021e:	b009      	add	sp, #36	; 0x24
   20220:	bd90      	pop	{r4, r7, pc}
   20222:	46c0      	nop			; (mov r8, r8)
   20224:	0001c967 	.word	0x0001c967
   20228:	0002005d 	.word	0x0002005d
   2022c:	0003b3a4 	.word	0x0003b3a4
   20230:	000200a5 	.word	0x000200a5
   20234:	0001fe19 	.word	0x0001fe19
   20238:	0001ccf5 	.word	0x0001ccf5
   2023c:	2000413c 	.word	0x2000413c
   20240:	0001d945 	.word	0x0001d945

00020244 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   20244:	b590      	push	{r4, r7, lr}
   20246:	b089      	sub	sp, #36	; 0x24
   20248:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   2024a:	e03e      	b.n	202ca <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   2024c:	4b28      	ldr	r3, [pc, #160]	; (202f0 <prvSwitchTimerLists+0xac>)
   2024e:	681b      	ldr	r3, [r3, #0]
   20250:	68db      	ldr	r3, [r3, #12]
   20252:	681b      	ldr	r3, [r3, #0]
   20254:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   20256:	4b26      	ldr	r3, [pc, #152]	; (202f0 <prvSwitchTimerLists+0xac>)
   20258:	681b      	ldr	r3, [r3, #0]
   2025a:	68db      	ldr	r3, [r3, #12]
   2025c:	68db      	ldr	r3, [r3, #12]
   2025e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   20260:	693b      	ldr	r3, [r7, #16]
   20262:	3304      	adds	r3, #4
   20264:	0018      	movs	r0, r3
   20266:	4b23      	ldr	r3, [pc, #140]	; (202f4 <prvSwitchTimerLists+0xb0>)
   20268:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   2026a:	693b      	ldr	r3, [r7, #16]
   2026c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2026e:	693a      	ldr	r2, [r7, #16]
   20270:	0010      	movs	r0, r2
   20272:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   20274:	693b      	ldr	r3, [r7, #16]
   20276:	69db      	ldr	r3, [r3, #28]
   20278:	2b01      	cmp	r3, #1
   2027a:	d126      	bne.n	202ca <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   2027c:	693b      	ldr	r3, [r7, #16]
   2027e:	699a      	ldr	r2, [r3, #24]
   20280:	697b      	ldr	r3, [r7, #20]
   20282:	18d3      	adds	r3, r2, r3
   20284:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   20286:	68fa      	ldr	r2, [r7, #12]
   20288:	697b      	ldr	r3, [r7, #20]
   2028a:	429a      	cmp	r2, r3
   2028c:	d90e      	bls.n	202ac <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   2028e:	693b      	ldr	r3, [r7, #16]
   20290:	68fa      	ldr	r2, [r7, #12]
   20292:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   20294:	693b      	ldr	r3, [r7, #16]
   20296:	693a      	ldr	r2, [r7, #16]
   20298:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   2029a:	4b15      	ldr	r3, [pc, #84]	; (202f0 <prvSwitchTimerLists+0xac>)
   2029c:	681a      	ldr	r2, [r3, #0]
   2029e:	693b      	ldr	r3, [r7, #16]
   202a0:	3304      	adds	r3, #4
   202a2:	0019      	movs	r1, r3
   202a4:	0010      	movs	r0, r2
   202a6:	4b14      	ldr	r3, [pc, #80]	; (202f8 <prvSwitchTimerLists+0xb4>)
   202a8:	4798      	blx	r3
   202aa:	e00e      	b.n	202ca <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   202ac:	697a      	ldr	r2, [r7, #20]
   202ae:	6938      	ldr	r0, [r7, #16]
   202b0:	2300      	movs	r3, #0
   202b2:	9300      	str	r3, [sp, #0]
   202b4:	2300      	movs	r3, #0
   202b6:	2100      	movs	r1, #0
   202b8:	4c10      	ldr	r4, [pc, #64]	; (202fc <prvSwitchTimerLists+0xb8>)
   202ba:	47a0      	blx	r4
   202bc:	0003      	movs	r3, r0
   202be:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   202c0:	68bb      	ldr	r3, [r7, #8]
   202c2:	2b00      	cmp	r3, #0
   202c4:	d101      	bne.n	202ca <prvSwitchTimerLists+0x86>
   202c6:	b672      	cpsid	i
   202c8:	e7fe      	b.n	202c8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   202ca:	4b09      	ldr	r3, [pc, #36]	; (202f0 <prvSwitchTimerLists+0xac>)
   202cc:	681b      	ldr	r3, [r3, #0]
   202ce:	681b      	ldr	r3, [r3, #0]
   202d0:	2b00      	cmp	r3, #0
   202d2:	d1bb      	bne.n	2024c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   202d4:	4b06      	ldr	r3, [pc, #24]	; (202f0 <prvSwitchTimerLists+0xac>)
   202d6:	681b      	ldr	r3, [r3, #0]
   202d8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   202da:	4b09      	ldr	r3, [pc, #36]	; (20300 <prvSwitchTimerLists+0xbc>)
   202dc:	681a      	ldr	r2, [r3, #0]
   202de:	4b04      	ldr	r3, [pc, #16]	; (202f0 <prvSwitchTimerLists+0xac>)
   202e0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   202e2:	4b07      	ldr	r3, [pc, #28]	; (20300 <prvSwitchTimerLists+0xbc>)
   202e4:	687a      	ldr	r2, [r7, #4]
   202e6:	601a      	str	r2, [r3, #0]
}
   202e8:	46c0      	nop			; (mov r8, r8)
   202ea:	46bd      	mov	sp, r7
   202ec:	b007      	add	sp, #28
   202ee:	bd90      	pop	{r4, r7, pc}
   202f0:	20004134 	.word	0x20004134
   202f4:	0001c967 	.word	0x0001c967
   202f8:	0001c8fb 	.word	0x0001c8fb
   202fc:	0001fe19 	.word	0x0001fe19
   20300:	20004138 	.word	0x20004138

00020304 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   20304:	b580      	push	{r7, lr}
   20306:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   20308:	4b10      	ldr	r3, [pc, #64]	; (2034c <prvCheckForValidListAndQueue+0x48>)
   2030a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   2030c:	4b10      	ldr	r3, [pc, #64]	; (20350 <prvCheckForValidListAndQueue+0x4c>)
   2030e:	681b      	ldr	r3, [r3, #0]
   20310:	2b00      	cmp	r3, #0
   20312:	d115      	bne.n	20340 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   20314:	4b0f      	ldr	r3, [pc, #60]	; (20354 <prvCheckForValidListAndQueue+0x50>)
   20316:	0018      	movs	r0, r3
   20318:	4b0f      	ldr	r3, [pc, #60]	; (20358 <prvCheckForValidListAndQueue+0x54>)
   2031a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   2031c:	4b0f      	ldr	r3, [pc, #60]	; (2035c <prvCheckForValidListAndQueue+0x58>)
   2031e:	0018      	movs	r0, r3
   20320:	4b0d      	ldr	r3, [pc, #52]	; (20358 <prvCheckForValidListAndQueue+0x54>)
   20322:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   20324:	4b0e      	ldr	r3, [pc, #56]	; (20360 <prvCheckForValidListAndQueue+0x5c>)
   20326:	4a0b      	ldr	r2, [pc, #44]	; (20354 <prvCheckForValidListAndQueue+0x50>)
   20328:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   2032a:	4b0e      	ldr	r3, [pc, #56]	; (20364 <prvCheckForValidListAndQueue+0x60>)
   2032c:	4a0b      	ldr	r2, [pc, #44]	; (2035c <prvCheckForValidListAndQueue+0x58>)
   2032e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   20330:	2200      	movs	r2, #0
   20332:	210c      	movs	r1, #12
   20334:	2005      	movs	r0, #5
   20336:	4b0c      	ldr	r3, [pc, #48]	; (20368 <prvCheckForValidListAndQueue+0x64>)
   20338:	4798      	blx	r3
   2033a:	0002      	movs	r2, r0
   2033c:	4b04      	ldr	r3, [pc, #16]	; (20350 <prvCheckForValidListAndQueue+0x4c>)
   2033e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   20340:	4b0a      	ldr	r3, [pc, #40]	; (2036c <prvCheckForValidListAndQueue+0x68>)
   20342:	4798      	blx	r3
}
   20344:	46c0      	nop			; (mov r8, r8)
   20346:	46bd      	mov	sp, r7
   20348:	bd80      	pop	{r7, pc}
   2034a:	46c0      	nop			; (mov r8, r8)
   2034c:	0001caf9 	.word	0x0001caf9
   20350:	2000413c 	.word	0x2000413c
   20354:	2000410c 	.word	0x2000410c
   20358:	0001c865 	.word	0x0001c865
   2035c:	20004120 	.word	0x20004120
   20360:	20004134 	.word	0x20004134
   20364:	20004138 	.word	0x20004138
   20368:	0001cde5 	.word	0x0001cde5
   2036c:	0001cb1d 	.word	0x0001cb1d

00020370 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   20370:	b580      	push	{r7, lr}
   20372:	b082      	sub	sp, #8
   20374:	af00      	add	r7, sp, #0
   20376:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   20378:	687b      	ldr	r3, [r7, #4]
   2037a:	7c1b      	ldrb	r3, [r3, #16]
   2037c:	2b00      	cmp	r3, #0
   2037e:	d00b      	beq.n	20398 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   20380:	687b      	ldr	r3, [r7, #4]
   20382:	689b      	ldr	r3, [r3, #8]
   20384:	1c5a      	adds	r2, r3, #1
   20386:	687b      	ldr	r3, [r7, #4]
   20388:	68d9      	ldr	r1, [r3, #12]
   2038a:	4b10      	ldr	r3, [pc, #64]	; (203cc <advance_pointer+0x5c>)
   2038c:	0010      	movs	r0, r2
   2038e:	4798      	blx	r3
   20390:	000b      	movs	r3, r1
   20392:	001a      	movs	r2, r3
   20394:	687b      	ldr	r3, [r7, #4]
   20396:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   20398:	687b      	ldr	r3, [r7, #4]
   2039a:	685b      	ldr	r3, [r3, #4]
   2039c:	1c5a      	adds	r2, r3, #1
   2039e:	687b      	ldr	r3, [r7, #4]
   203a0:	68d9      	ldr	r1, [r3, #12]
   203a2:	4b0a      	ldr	r3, [pc, #40]	; (203cc <advance_pointer+0x5c>)
   203a4:	0010      	movs	r0, r2
   203a6:	4798      	blx	r3
   203a8:	000b      	movs	r3, r1
   203aa:	001a      	movs	r2, r3
   203ac:	687b      	ldr	r3, [r7, #4]
   203ae:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   203b0:	687b      	ldr	r3, [r7, #4]
   203b2:	685a      	ldr	r2, [r3, #4]
   203b4:	687b      	ldr	r3, [r7, #4]
   203b6:	689b      	ldr	r3, [r3, #8]
   203b8:	1ad3      	subs	r3, r2, r3
   203ba:	425a      	negs	r2, r3
   203bc:	4153      	adcs	r3, r2
   203be:	b2da      	uxtb	r2, r3
   203c0:	687b      	ldr	r3, [r7, #4]
   203c2:	741a      	strb	r2, [r3, #16]
 }
   203c4:	46c0      	nop			; (mov r8, r8)
   203c6:	46bd      	mov	sp, r7
   203c8:	b002      	add	sp, #8
   203ca:	bd80      	pop	{r7, pc}
   203cc:	00035555 	.word	0x00035555

000203d0 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   203d0:	b580      	push	{r7, lr}
   203d2:	b082      	sub	sp, #8
   203d4:	af00      	add	r7, sp, #0
   203d6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   203d8:	687b      	ldr	r3, [r7, #4]
   203da:	2200      	movs	r2, #0
   203dc:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   203de:	687b      	ldr	r3, [r7, #4]
   203e0:	689b      	ldr	r3, [r3, #8]
   203e2:	1c5a      	adds	r2, r3, #1
   203e4:	687b      	ldr	r3, [r7, #4]
   203e6:	68d9      	ldr	r1, [r3, #12]
   203e8:	4b05      	ldr	r3, [pc, #20]	; (20400 <retreat_pointer+0x30>)
   203ea:	0010      	movs	r0, r2
   203ec:	4798      	blx	r3
   203ee:	000b      	movs	r3, r1
   203f0:	001a      	movs	r2, r3
   203f2:	687b      	ldr	r3, [r7, #4]
   203f4:	609a      	str	r2, [r3, #8]
 }
   203f6:	46c0      	nop			; (mov r8, r8)
   203f8:	46bd      	mov	sp, r7
   203fa:	b002      	add	sp, #8
   203fc:	bd80      	pop	{r7, pc}
   203fe:	46c0      	nop			; (mov r8, r8)
   20400:	00035555 	.word	0x00035555

00020404 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   20404:	b580      	push	{r7, lr}
   20406:	b084      	sub	sp, #16
   20408:	af00      	add	r7, sp, #0
   2040a:	6078      	str	r0, [r7, #4]
   2040c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   2040e:	2014      	movs	r0, #20
   20410:	4b09      	ldr	r3, [pc, #36]	; (20438 <circular_buf_init+0x34>)
   20412:	4798      	blx	r3
   20414:	0003      	movs	r3, r0
   20416:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   20418:	68fb      	ldr	r3, [r7, #12]
   2041a:	687a      	ldr	r2, [r7, #4]
   2041c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   2041e:	68fb      	ldr	r3, [r7, #12]
   20420:	683a      	ldr	r2, [r7, #0]
   20422:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   20424:	68fb      	ldr	r3, [r7, #12]
   20426:	0018      	movs	r0, r3
   20428:	4b04      	ldr	r3, [pc, #16]	; (2043c <circular_buf_init+0x38>)
   2042a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   2042c:	68fb      	ldr	r3, [r7, #12]
 }
   2042e:	0018      	movs	r0, r3
   20430:	46bd      	mov	sp, r7
   20432:	b004      	add	sp, #16
   20434:	bd80      	pop	{r7, pc}
   20436:	46c0      	nop			; (mov r8, r8)
   20438:	000378a5 	.word	0x000378a5
   2043c:	00020441 	.word	0x00020441

00020440 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   20440:	b580      	push	{r7, lr}
   20442:	b082      	sub	sp, #8
   20444:	af00      	add	r7, sp, #0
   20446:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   20448:	687b      	ldr	r3, [r7, #4]
   2044a:	2200      	movs	r2, #0
   2044c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   2044e:	687b      	ldr	r3, [r7, #4]
   20450:	2200      	movs	r2, #0
   20452:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   20454:	687b      	ldr	r3, [r7, #4]
   20456:	2200      	movs	r2, #0
   20458:	741a      	strb	r2, [r3, #16]
 }
   2045a:	46c0      	nop			; (mov r8, r8)
   2045c:	46bd      	mov	sp, r7
   2045e:	b002      	add	sp, #8
   20460:	bd80      	pop	{r7, pc}
	...

00020464 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   20464:	b580      	push	{r7, lr}
   20466:	b082      	sub	sp, #8
   20468:	af00      	add	r7, sp, #0
   2046a:	6078      	str	r0, [r7, #4]
   2046c:	000a      	movs	r2, r1
   2046e:	1cfb      	adds	r3, r7, #3
   20470:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   20472:	687b      	ldr	r3, [r7, #4]
   20474:	681a      	ldr	r2, [r3, #0]
   20476:	687b      	ldr	r3, [r7, #4]
   20478:	685b      	ldr	r3, [r3, #4]
   2047a:	18d3      	adds	r3, r2, r3
   2047c:	1cfa      	adds	r2, r7, #3
   2047e:	7812      	ldrb	r2, [r2, #0]
   20480:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   20482:	687b      	ldr	r3, [r7, #4]
   20484:	0018      	movs	r0, r3
   20486:	4b03      	ldr	r3, [pc, #12]	; (20494 <circular_buf_put+0x30>)
   20488:	4798      	blx	r3
 }
   2048a:	46c0      	nop			; (mov r8, r8)
   2048c:	46bd      	mov	sp, r7
   2048e:	b002      	add	sp, #8
   20490:	bd80      	pop	{r7, pc}
   20492:	46c0      	nop			; (mov r8, r8)
   20494:	00020371 	.word	0x00020371

00020498 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   20498:	b580      	push	{r7, lr}
   2049a:	b084      	sub	sp, #16
   2049c:	af00      	add	r7, sp, #0
   2049e:	6078      	str	r0, [r7, #4]
   204a0:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   204a2:	2301      	movs	r3, #1
   204a4:	425b      	negs	r3, r3
   204a6:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   204a8:	687b      	ldr	r3, [r7, #4]
   204aa:	0018      	movs	r0, r3
   204ac:	4b0d      	ldr	r3, [pc, #52]	; (204e4 <circular_buf_get+0x4c>)
   204ae:	4798      	blx	r3
   204b0:	0003      	movs	r3, r0
   204b2:	001a      	movs	r2, r3
   204b4:	2301      	movs	r3, #1
   204b6:	4053      	eors	r3, r2
   204b8:	b2db      	uxtb	r3, r3
   204ba:	2b00      	cmp	r3, #0
   204bc:	d00d      	beq.n	204da <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   204be:	687b      	ldr	r3, [r7, #4]
   204c0:	681a      	ldr	r2, [r3, #0]
   204c2:	687b      	ldr	r3, [r7, #4]
   204c4:	689b      	ldr	r3, [r3, #8]
   204c6:	18d3      	adds	r3, r2, r3
   204c8:	781a      	ldrb	r2, [r3, #0]
   204ca:	683b      	ldr	r3, [r7, #0]
   204cc:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   204ce:	687b      	ldr	r3, [r7, #4]
   204d0:	0018      	movs	r0, r3
   204d2:	4b05      	ldr	r3, [pc, #20]	; (204e8 <circular_buf_get+0x50>)
   204d4:	4798      	blx	r3

		 r = 0;
   204d6:	2300      	movs	r3, #0
   204d8:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   204da:	68fb      	ldr	r3, [r7, #12]
 }
   204dc:	0018      	movs	r0, r3
   204de:	46bd      	mov	sp, r7
   204e0:	b004      	add	sp, #16
   204e2:	bd80      	pop	{r7, pc}
   204e4:	000204ed 	.word	0x000204ed
   204e8:	000203d1 	.word	0x000203d1

000204ec <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   204ec:	b580      	push	{r7, lr}
   204ee:	b082      	sub	sp, #8
   204f0:	af00      	add	r7, sp, #0
   204f2:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   204f4:	687b      	ldr	r3, [r7, #4]
   204f6:	7c1b      	ldrb	r3, [r3, #16]
   204f8:	2201      	movs	r2, #1
   204fa:	4053      	eors	r3, r2
   204fc:	b2db      	uxtb	r3, r3
   204fe:	2b00      	cmp	r3, #0
   20500:	d007      	beq.n	20512 <circular_buf_empty+0x26>
   20502:	687b      	ldr	r3, [r7, #4]
   20504:	685a      	ldr	r2, [r3, #4]
   20506:	687b      	ldr	r3, [r7, #4]
   20508:	689b      	ldr	r3, [r3, #8]
   2050a:	429a      	cmp	r2, r3
   2050c:	d101      	bne.n	20512 <circular_buf_empty+0x26>
   2050e:	2301      	movs	r3, #1
   20510:	e000      	b.n	20514 <circular_buf_empty+0x28>
   20512:	2300      	movs	r3, #0
   20514:	1c1a      	adds	r2, r3, #0
   20516:	2301      	movs	r3, #1
   20518:	4013      	ands	r3, r2
   2051a:	b2db      	uxtb	r3, r3
 }
   2051c:	0018      	movs	r0, r3
   2051e:	46bd      	mov	sp, r7
   20520:	b002      	add	sp, #8
   20522:	bd80      	pop	{r7, pc}

00020524 <system_interrupt_enable>:
{
   20524:	b580      	push	{r7, lr}
   20526:	b082      	sub	sp, #8
   20528:	af00      	add	r7, sp, #0
   2052a:	0002      	movs	r2, r0
   2052c:	1dfb      	adds	r3, r7, #7
   2052e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20530:	4b06      	ldr	r3, [pc, #24]	; (2054c <system_interrupt_enable+0x28>)
   20532:	1dfa      	adds	r2, r7, #7
   20534:	7812      	ldrb	r2, [r2, #0]
   20536:	0011      	movs	r1, r2
   20538:	221f      	movs	r2, #31
   2053a:	400a      	ands	r2, r1
   2053c:	2101      	movs	r1, #1
   2053e:	4091      	lsls	r1, r2
   20540:	000a      	movs	r2, r1
   20542:	601a      	str	r2, [r3, #0]
}
   20544:	46c0      	nop			; (mov r8, r8)
   20546:	46bd      	mov	sp, r7
   20548:	b002      	add	sp, #8
   2054a:	bd80      	pop	{r7, pc}
   2054c:	e000e100 	.word	0xe000e100

00020550 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   20550:	b580      	push	{r7, lr}
   20552:	b084      	sub	sp, #16
   20554:	af00      	add	r7, sp, #0
   20556:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   20558:	687b      	ldr	r3, [r7, #4]
   2055a:	681b      	ldr	r3, [r3, #0]
   2055c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   2055e:	68fb      	ldr	r3, [r7, #12]
   20560:	69db      	ldr	r3, [r3, #28]
   20562:	1e5a      	subs	r2, r3, #1
   20564:	4193      	sbcs	r3, r2
   20566:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   20568:	0018      	movs	r0, r3
   2056a:	46bd      	mov	sp, r7
   2056c:	b004      	add	sp, #16
   2056e:	bd80      	pop	{r7, pc}

00020570 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   20570:	b580      	push	{r7, lr}
   20572:	b082      	sub	sp, #8
   20574:	af00      	add	r7, sp, #0
   20576:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   20578:	46c0      	nop			; (mov r8, r8)
   2057a:	687b      	ldr	r3, [r7, #4]
   2057c:	0018      	movs	r0, r3
   2057e:	4b04      	ldr	r3, [pc, #16]	; (20590 <_usart_wait_for_sync+0x20>)
   20580:	4798      	blx	r3
   20582:	1e03      	subs	r3, r0, #0
   20584:	d1f9      	bne.n	2057a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   20586:	46c0      	nop			; (mov r8, r8)
   20588:	46bd      	mov	sp, r7
   2058a:	b002      	add	sp, #8
   2058c:	bd80      	pop	{r7, pc}
   2058e:	46c0      	nop			; (mov r8, r8)
   20590:	00020551 	.word	0x00020551

00020594 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   20594:	b580      	push	{r7, lr}
   20596:	b082      	sub	sp, #8
   20598:	af00      	add	r7, sp, #0
   2059a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   2059c:	687b      	ldr	r3, [r7, #4]
   2059e:	2280      	movs	r2, #128	; 0x80
   205a0:	05d2      	lsls	r2, r2, #23
   205a2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   205a4:	687b      	ldr	r3, [r7, #4]
   205a6:	2200      	movs	r2, #0
   205a8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   205aa:	687b      	ldr	r3, [r7, #4]
   205ac:	22ff      	movs	r2, #255	; 0xff
   205ae:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   205b0:	687b      	ldr	r3, [r7, #4]
   205b2:	2200      	movs	r2, #0
   205b4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   205b6:	687b      	ldr	r3, [r7, #4]
   205b8:	2200      	movs	r2, #0
   205ba:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   205bc:	687b      	ldr	r3, [r7, #4]
   205be:	2296      	movs	r2, #150	; 0x96
   205c0:	0192      	lsls	r2, r2, #6
   205c2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   205c4:	687b      	ldr	r3, [r7, #4]
   205c6:	2224      	movs	r2, #36	; 0x24
   205c8:	2101      	movs	r1, #1
   205ca:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   205cc:	687b      	ldr	r3, [r7, #4]
   205ce:	2225      	movs	r2, #37	; 0x25
   205d0:	2101      	movs	r1, #1
   205d2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   205d4:	687b      	ldr	r3, [r7, #4]
   205d6:	2226      	movs	r2, #38	; 0x26
   205d8:	2100      	movs	r1, #0
   205da:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   205dc:	687b      	ldr	r3, [r7, #4]
   205de:	2227      	movs	r2, #39	; 0x27
   205e0:	2100      	movs	r1, #0
   205e2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   205e4:	687b      	ldr	r3, [r7, #4]
   205e6:	2200      	movs	r2, #0
   205e8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   205ea:	687b      	ldr	r3, [r7, #4]
   205ec:	2288      	movs	r2, #136	; 0x88
   205ee:	0352      	lsls	r2, r2, #13
   205f0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   205f2:	687b      	ldr	r3, [r7, #4]
   205f4:	222c      	movs	r2, #44	; 0x2c
   205f6:	2100      	movs	r1, #0
   205f8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   205fa:	687b      	ldr	r3, [r7, #4]
   205fc:	222d      	movs	r2, #45	; 0x2d
   205fe:	2100      	movs	r1, #0
   20600:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   20602:	687b      	ldr	r3, [r7, #4]
   20604:	2200      	movs	r2, #0
   20606:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   20608:	687b      	ldr	r3, [r7, #4]
   2060a:	2200      	movs	r2, #0
   2060c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   2060e:	687b      	ldr	r3, [r7, #4]
   20610:	2200      	movs	r2, #0
   20612:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   20614:	687b      	ldr	r3, [r7, #4]
   20616:	2200      	movs	r2, #0
   20618:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   2061a:	687b      	ldr	r3, [r7, #4]
   2061c:	2200      	movs	r2, #0
   2061e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   20620:	687b      	ldr	r3, [r7, #4]
   20622:	2200      	movs	r2, #0
   20624:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   20626:	687b      	ldr	r3, [r7, #4]
   20628:	2200      	movs	r2, #0
   2062a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   2062c:	687b      	ldr	r3, [r7, #4]
   2062e:	2200      	movs	r2, #0
   20630:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   20632:	687b      	ldr	r3, [r7, #4]
   20634:	2200      	movs	r2, #0
   20636:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   20638:	687b      	ldr	r3, [r7, #4]
   2063a:	2200      	movs	r2, #0
   2063c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   2063e:	687b      	ldr	r3, [r7, #4]
   20640:	2213      	movs	r2, #19
   20642:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   20644:	687b      	ldr	r3, [r7, #4]
   20646:	2200      	movs	r2, #0
   20648:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   2064a:	46c0      	nop			; (mov r8, r8)
   2064c:	46bd      	mov	sp, r7
   2064e:	b002      	add	sp, #8
   20650:	bd80      	pop	{r7, pc}
	...

00020654 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   20654:	b580      	push	{r7, lr}
   20656:	b084      	sub	sp, #16
   20658:	af00      	add	r7, sp, #0
   2065a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2065c:	687b      	ldr	r3, [r7, #4]
   2065e:	681b      	ldr	r3, [r3, #0]
   20660:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   20662:	687b      	ldr	r3, [r7, #4]
   20664:	681b      	ldr	r3, [r3, #0]
   20666:	0018      	movs	r0, r3
   20668:	4b09      	ldr	r3, [pc, #36]	; (20690 <usart_enable+0x3c>)
   2066a:	4798      	blx	r3
   2066c:	0003      	movs	r3, r0
   2066e:	0018      	movs	r0, r3
   20670:	4b08      	ldr	r3, [pc, #32]	; (20694 <usart_enable+0x40>)
   20672:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   20674:	687b      	ldr	r3, [r7, #4]
   20676:	0018      	movs	r0, r3
   20678:	4b07      	ldr	r3, [pc, #28]	; (20698 <usart_enable+0x44>)
   2067a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   2067c:	68fb      	ldr	r3, [r7, #12]
   2067e:	681b      	ldr	r3, [r3, #0]
   20680:	2202      	movs	r2, #2
   20682:	431a      	orrs	r2, r3
   20684:	68fb      	ldr	r3, [r7, #12]
   20686:	601a      	str	r2, [r3, #0]
}
   20688:	46c0      	nop			; (mov r8, r8)
   2068a:	46bd      	mov	sp, r7
   2068c:	b004      	add	sp, #16
   2068e:	bd80      	pop	{r7, pc}
   20690:	0002a0ed 	.word	0x0002a0ed
   20694:	00020525 	.word	0x00020525
   20698:	00020571 	.word	0x00020571

0002069c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   2069c:	b580      	push	{r7, lr}
   2069e:	b082      	sub	sp, #8
   206a0:	af00      	add	r7, sp, #0
   206a2:	6078      	str	r0, [r7, #4]
   206a4:	000a      	movs	r2, r1
   206a6:	1cfb      	adds	r3, r7, #3
   206a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   206aa:	687b      	ldr	r3, [r7, #4]
   206ac:	2231      	movs	r2, #49	; 0x31
   206ae:	5c9b      	ldrb	r3, [r3, r2]
   206b0:	b25a      	sxtb	r2, r3
   206b2:	1cfb      	adds	r3, r7, #3
   206b4:	781b      	ldrb	r3, [r3, #0]
   206b6:	2101      	movs	r1, #1
   206b8:	4099      	lsls	r1, r3
   206ba:	000b      	movs	r3, r1
   206bc:	b25b      	sxtb	r3, r3
   206be:	4313      	orrs	r3, r2
   206c0:	b25b      	sxtb	r3, r3
   206c2:	b2d9      	uxtb	r1, r3
   206c4:	687b      	ldr	r3, [r7, #4]
   206c6:	2231      	movs	r2, #49	; 0x31
   206c8:	5499      	strb	r1, [r3, r2]

}
   206ca:	46c0      	nop			; (mov r8, r8)
   206cc:	46bd      	mov	sp, r7
   206ce:	b002      	add	sp, #8
   206d0:	bd80      	pop	{r7, pc}
	...

000206d4 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   206d4:	b580      	push	{r7, lr}
   206d6:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   206d8:	2380      	movs	r3, #128	; 0x80
   206da:	009a      	lsls	r2, r3, #2
   206dc:	4b0f      	ldr	r3, [pc, #60]	; (2071c <InitializeSerialConsole+0x48>)
   206de:	0011      	movs	r1, r2
   206e0:	0018      	movs	r0, r3
   206e2:	4b0f      	ldr	r3, [pc, #60]	; (20720 <InitializeSerialConsole+0x4c>)
   206e4:	4798      	blx	r3
   206e6:	0002      	movs	r2, r0
   206e8:	4b0e      	ldr	r3, [pc, #56]	; (20724 <InitializeSerialConsole+0x50>)
   206ea:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   206ec:	2380      	movs	r3, #128	; 0x80
   206ee:	009a      	lsls	r2, r3, #2
   206f0:	4b0d      	ldr	r3, [pc, #52]	; (20728 <InitializeSerialConsole+0x54>)
   206f2:	0011      	movs	r1, r2
   206f4:	0018      	movs	r0, r3
   206f6:	4b0a      	ldr	r3, [pc, #40]	; (20720 <InitializeSerialConsole+0x4c>)
   206f8:	4798      	blx	r3
   206fa:	0002      	movs	r2, r0
   206fc:	4b0b      	ldr	r3, [pc, #44]	; (2072c <InitializeSerialConsole+0x58>)
   206fe:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   20700:	4b0b      	ldr	r3, [pc, #44]	; (20730 <InitializeSerialConsole+0x5c>)
   20702:	4798      	blx	r3
    configure_usart_callbacks();
   20704:	4b0b      	ldr	r3, [pc, #44]	; (20734 <InitializeSerialConsole+0x60>)
   20706:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   20708:	490b      	ldr	r1, [pc, #44]	; (20738 <InitializeSerialConsole+0x64>)
   2070a:	4b0c      	ldr	r3, [pc, #48]	; (2073c <InitializeSerialConsole+0x68>)
   2070c:	2201      	movs	r2, #1
   2070e:	0018      	movs	r0, r3
   20710:	4b0b      	ldr	r3, [pc, #44]	; (20740 <InitializeSerialConsole+0x6c>)
   20712:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   20714:	46c0      	nop			; (mov r8, r8)
   20716:	46bd      	mov	sp, r7
   20718:	bd80      	pop	{r7, pc}
   2071a:	46c0      	nop			; (mov r8, r8)
   2071c:	20005814 	.word	0x20005814
   20720:	00020405 	.word	0x00020405
   20724:	2000560c 	.word	0x2000560c
   20728:	20005614 	.word	0x20005614
   2072c:	20005a18 	.word	0x20005a18
   20730:	000208a9 	.word	0x000208a9
   20734:	00020921 	.word	0x00020921
   20738:	20005610 	.word	0x20005610
   2073c:	200055d8 	.word	0x200055d8
   20740:	0002b995 	.word	0x0002b995

00020744 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   20744:	b580      	push	{r7, lr}
   20746:	b084      	sub	sp, #16
   20748:	af00      	add	r7, sp, #0
   2074a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   2074c:	4b1a      	ldr	r3, [pc, #104]	; (207b8 <SerialConsoleWriteString+0x74>)
   2074e:	4798      	blx	r3
    if (string != NULL) {
   20750:	687b      	ldr	r3, [r7, #4]
   20752:	2b00      	cmp	r3, #0
   20754:	d02a      	beq.n	207ac <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   20756:	2300      	movs	r3, #0
   20758:	60fb      	str	r3, [r7, #12]
   2075a:	e00b      	b.n	20774 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   2075c:	4b17      	ldr	r3, [pc, #92]	; (207bc <SerialConsoleWriteString+0x78>)
   2075e:	6818      	ldr	r0, [r3, #0]
   20760:	687a      	ldr	r2, [r7, #4]
   20762:	68fb      	ldr	r3, [r7, #12]
   20764:	18d3      	adds	r3, r2, r3
   20766:	781b      	ldrb	r3, [r3, #0]
   20768:	0019      	movs	r1, r3
   2076a:	4b15      	ldr	r3, [pc, #84]	; (207c0 <SerialConsoleWriteString+0x7c>)
   2076c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   2076e:	68fb      	ldr	r3, [r7, #12]
   20770:	3301      	adds	r3, #1
   20772:	60fb      	str	r3, [r7, #12]
   20774:	687b      	ldr	r3, [r7, #4]
   20776:	0018      	movs	r0, r3
   20778:	4b12      	ldr	r3, [pc, #72]	; (207c4 <SerialConsoleWriteString+0x80>)
   2077a:	4798      	blx	r3
   2077c:	0002      	movs	r2, r0
   2077e:	68fb      	ldr	r3, [r7, #12]
   20780:	429a      	cmp	r2, r3
   20782:	d8eb      	bhi.n	2075c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   20784:	4b10      	ldr	r3, [pc, #64]	; (207c8 <SerialConsoleWriteString+0x84>)
   20786:	2101      	movs	r1, #1
   20788:	0018      	movs	r0, r3
   2078a:	4b10      	ldr	r3, [pc, #64]	; (207cc <SerialConsoleWriteString+0x88>)
   2078c:	4798      	blx	r3
   2078e:	1e03      	subs	r3, r0, #0
   20790:	d10c      	bne.n	207ac <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   20792:	4b0a      	ldr	r3, [pc, #40]	; (207bc <SerialConsoleWriteString+0x78>)
   20794:	681b      	ldr	r3, [r3, #0]
   20796:	4a0e      	ldr	r2, [pc, #56]	; (207d0 <SerialConsoleWriteString+0x8c>)
   20798:	0011      	movs	r1, r2
   2079a:	0018      	movs	r0, r3
   2079c:	4b0d      	ldr	r3, [pc, #52]	; (207d4 <SerialConsoleWriteString+0x90>)
   2079e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   207a0:	490b      	ldr	r1, [pc, #44]	; (207d0 <SerialConsoleWriteString+0x8c>)
   207a2:	4b09      	ldr	r3, [pc, #36]	; (207c8 <SerialConsoleWriteString+0x84>)
   207a4:	2201      	movs	r2, #1
   207a6:	0018      	movs	r0, r3
   207a8:	4b0b      	ldr	r3, [pc, #44]	; (207d8 <SerialConsoleWriteString+0x94>)
   207aa:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   207ac:	4b0b      	ldr	r3, [pc, #44]	; (207dc <SerialConsoleWriteString+0x98>)
   207ae:	4798      	blx	r3
}
   207b0:	46c0      	nop			; (mov r8, r8)
   207b2:	46bd      	mov	sp, r7
   207b4:	b004      	add	sp, #16
   207b6:	bd80      	pop	{r7, pc}
   207b8:	0001edb1 	.word	0x0001edb1
   207bc:	20005a18 	.word	0x20005a18
   207c0:	00020465 	.word	0x00020465
   207c4:	00037cbb 	.word	0x00037cbb
   207c8:	200055d8 	.word	0x200055d8
   207cc:	0002b9dd 	.word	0x0002b9dd
   207d0:	20005a14 	.word	0x20005a14
   207d4:	00020499 	.word	0x00020499
   207d8:	0002b94d 	.word	0x0002b94d
   207dc:	0001edc9 	.word	0x0001edc9

000207e0 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   207e0:	b580      	push	{r7, lr}
   207e2:	b084      	sub	sp, #16
   207e4:	af00      	add	r7, sp, #0
   207e6:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   207e8:	4b08      	ldr	r3, [pc, #32]	; (2080c <SerialConsoleReadCharacter+0x2c>)
   207ea:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   207ec:	4b08      	ldr	r3, [pc, #32]	; (20810 <SerialConsoleReadCharacter+0x30>)
   207ee:	681b      	ldr	r3, [r3, #0]
   207f0:	687a      	ldr	r2, [r7, #4]
   207f2:	0011      	movs	r1, r2
   207f4:	0018      	movs	r0, r3
   207f6:	4b07      	ldr	r3, [pc, #28]	; (20814 <SerialConsoleReadCharacter+0x34>)
   207f8:	4798      	blx	r3
   207fa:	0003      	movs	r3, r0
   207fc:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   207fe:	4b06      	ldr	r3, [pc, #24]	; (20818 <SerialConsoleReadCharacter+0x38>)
   20800:	4798      	blx	r3
    return a;
   20802:	68fb      	ldr	r3, [r7, #12]
}
   20804:	0018      	movs	r0, r3
   20806:	46bd      	mov	sp, r7
   20808:	b004      	add	sp, #16
   2080a:	bd80      	pop	{r7, pc}
   2080c:	0001edb1 	.word	0x0001edb1
   20810:	2000560c 	.word	0x2000560c
   20814:	00020499 	.word	0x00020499
   20818:	0001edc9 	.word	0x0001edc9

0002081c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   2081c:	b580      	push	{r7, lr}
   2081e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   20820:	4b02      	ldr	r3, [pc, #8]	; (2082c <getLogLevel+0x10>)
   20822:	781b      	ldrb	r3, [r3, #0]
}
   20824:	0018      	movs	r0, r3
   20826:	46bd      	mov	sp, r7
   20828:	bd80      	pop	{r7, pc}
   2082a:	46c0      	nop			; (mov r8, r8)
   2082c:	20004148 	.word	0x20004148

00020830 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   20830:	b40e      	push	{r1, r2, r3}
   20832:	b590      	push	{r4, r7, lr}
   20834:	b084      	sub	sp, #16
   20836:	af00      	add	r7, sp, #0
   20838:	0002      	movs	r2, r0
   2083a:	1dfb      	adds	r3, r7, #7
   2083c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   2083e:	4b0e      	ldr	r3, [pc, #56]	; (20878 <LogMessage+0x48>)
   20840:	4798      	blx	r3
   20842:	0003      	movs	r3, r0
   20844:	001a      	movs	r2, r3
   20846:	1dfb      	adds	r3, r7, #7
   20848:	781b      	ldrb	r3, [r3, #0]
   2084a:	4293      	cmp	r3, r2
   2084c:	d30c      	bcc.n	20868 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   2084e:	2320      	movs	r3, #32
   20850:	18fb      	adds	r3, r7, r3
   20852:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   20854:	68fb      	ldr	r3, [r7, #12]
   20856:	69fa      	ldr	r2, [r7, #28]
   20858:	4808      	ldr	r0, [pc, #32]	; (2087c <LogMessage+0x4c>)
   2085a:	217f      	movs	r1, #127	; 0x7f
   2085c:	4c08      	ldr	r4, [pc, #32]	; (20880 <LogMessage+0x50>)
   2085e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   20860:	4b06      	ldr	r3, [pc, #24]	; (2087c <LogMessage+0x4c>)
   20862:	0018      	movs	r0, r3
   20864:	4b07      	ldr	r3, [pc, #28]	; (20884 <LogMessage+0x54>)
   20866:	4798      	blx	r3
        va_end(ap);
    }
};
   20868:	46c0      	nop			; (mov r8, r8)
   2086a:	46bd      	mov	sp, r7
   2086c:	b004      	add	sp, #16
   2086e:	bc90      	pop	{r4, r7}
   20870:	bc08      	pop	{r3}
   20872:	b003      	add	sp, #12
   20874:	4718      	bx	r3
   20876:	46c0      	nop			; (mov r8, r8)
   20878:	0002081d 	.word	0x0002081d
   2087c:	20005558 	.word	0x20005558
   20880:	00037ef5 	.word	0x00037ef5
   20884:	00020745 	.word	0x00020745

00020888 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   20888:	b40f      	push	{r0, r1, r2, r3}
   2088a:	b580      	push	{r7, lr}
   2088c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   2088e:	68bb      	ldr	r3, [r7, #8]
   20890:	0019      	movs	r1, r3
   20892:	2001      	movs	r0, #1
   20894:	4b03      	ldr	r3, [pc, #12]	; (208a4 <LogMessageDebug+0x1c>)
   20896:	4798      	blx	r3
};
   20898:	46c0      	nop			; (mov r8, r8)
   2089a:	46bd      	mov	sp, r7
   2089c:	bc80      	pop	{r7}
   2089e:	bc08      	pop	{r3}
   208a0:	b004      	add	sp, #16
   208a2:	4718      	bx	r3
   208a4:	00020831 	.word	0x00020831

000208a8 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   208a8:	b580      	push	{r7, lr}
   208aa:	b090      	sub	sp, #64	; 0x40
   208ac:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   208ae:	003b      	movs	r3, r7
   208b0:	0018      	movs	r0, r3
   208b2:	4b14      	ldr	r3, [pc, #80]	; (20904 <configure_usart+0x5c>)
   208b4:	4798      	blx	r3

    config_usart.baudrate = 115200;
   208b6:	003b      	movs	r3, r7
   208b8:	22e1      	movs	r2, #225	; 0xe1
   208ba:	0252      	lsls	r2, r2, #9
   208bc:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   208be:	003b      	movs	r3, r7
   208c0:	22c4      	movs	r2, #196	; 0xc4
   208c2:	0392      	lsls	r2, r2, #14
   208c4:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   208c6:	003b      	movs	r3, r7
   208c8:	2201      	movs	r2, #1
   208ca:	4252      	negs	r2, r2
   208cc:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   208ce:	003b      	movs	r3, r7
   208d0:	2201      	movs	r2, #1
   208d2:	4252      	negs	r2, r2
   208d4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   208d6:	003b      	movs	r3, r7
   208d8:	4a0b      	ldr	r2, [pc, #44]	; (20908 <configure_usart+0x60>)
   208da:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   208dc:	003b      	movs	r3, r7
   208de:	4a0b      	ldr	r2, [pc, #44]	; (2090c <configure_usart+0x64>)
   208e0:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   208e2:	46c0      	nop			; (mov r8, r8)
   208e4:	003a      	movs	r2, r7
   208e6:	490a      	ldr	r1, [pc, #40]	; (20910 <configure_usart+0x68>)
   208e8:	4b0a      	ldr	r3, [pc, #40]	; (20914 <configure_usart+0x6c>)
   208ea:	0018      	movs	r0, r3
   208ec:	4b0a      	ldr	r3, [pc, #40]	; (20918 <configure_usart+0x70>)
   208ee:	4798      	blx	r3
   208f0:	1e03      	subs	r3, r0, #0
   208f2:	d1f7      	bne.n	208e4 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   208f4:	4b07      	ldr	r3, [pc, #28]	; (20914 <configure_usart+0x6c>)
   208f6:	0018      	movs	r0, r3
   208f8:	4b08      	ldr	r3, [pc, #32]	; (2091c <configure_usart+0x74>)
   208fa:	4798      	blx	r3
}
   208fc:	46c0      	nop			; (mov r8, r8)
   208fe:	46bd      	mov	sp, r7
   20900:	b010      	add	sp, #64	; 0x40
   20902:	bd80      	pop	{r7, pc}
   20904:	00020595 	.word	0x00020595
   20908:	002a0003 	.word	0x002a0003
   2090c:	002b0003 	.word	0x002b0003
   20910:	42001800 	.word	0x42001800
   20914:	200055d8 	.word	0x200055d8
   20918:	0002b551 	.word	0x0002b551
   2091c:	00020655 	.word	0x00020655

00020920 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   20920:	b580      	push	{r7, lr}
   20922:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   20924:	490c      	ldr	r1, [pc, #48]	; (20958 <configure_usart_callbacks+0x38>)
   20926:	4b0d      	ldr	r3, [pc, #52]	; (2095c <configure_usart_callbacks+0x3c>)
   20928:	2200      	movs	r2, #0
   2092a:	0018      	movs	r0, r3
   2092c:	4b0c      	ldr	r3, [pc, #48]	; (20960 <configure_usart_callbacks+0x40>)
   2092e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   20930:	490c      	ldr	r1, [pc, #48]	; (20964 <configure_usart_callbacks+0x44>)
   20932:	4b0a      	ldr	r3, [pc, #40]	; (2095c <configure_usart_callbacks+0x3c>)
   20934:	2201      	movs	r2, #1
   20936:	0018      	movs	r0, r3
   20938:	4b09      	ldr	r3, [pc, #36]	; (20960 <configure_usart_callbacks+0x40>)
   2093a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   2093c:	4b07      	ldr	r3, [pc, #28]	; (2095c <configure_usart_callbacks+0x3c>)
   2093e:	2100      	movs	r1, #0
   20940:	0018      	movs	r0, r3
   20942:	4b09      	ldr	r3, [pc, #36]	; (20968 <configure_usart_callbacks+0x48>)
   20944:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   20946:	4b05      	ldr	r3, [pc, #20]	; (2095c <configure_usart_callbacks+0x3c>)
   20948:	2101      	movs	r1, #1
   2094a:	0018      	movs	r0, r3
   2094c:	4b06      	ldr	r3, [pc, #24]	; (20968 <configure_usart_callbacks+0x48>)
   2094e:	4798      	blx	r3
}
   20950:	46c0      	nop			; (mov r8, r8)
   20952:	46bd      	mov	sp, r7
   20954:	bd80      	pop	{r7, pc}
   20956:	46c0      	nop			; (mov r8, r8)
   20958:	000209b5 	.word	0x000209b5
   2095c:	200055d8 	.word	0x200055d8
   20960:	0002b905 	.word	0x0002b905
   20964:	0002096d 	.word	0x0002096d
   20968:	0002069d 	.word	0x0002069d

0002096c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   2096c:	b580      	push	{r7, lr}
   2096e:	b082      	sub	sp, #8
   20970:	af00      	add	r7, sp, #0
   20972:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   20974:	4b09      	ldr	r3, [pc, #36]	; (2099c <usart_read_callback+0x30>)
   20976:	681a      	ldr	r2, [r3, #0]
   20978:	4b09      	ldr	r3, [pc, #36]	; (209a0 <usart_read_callback+0x34>)
   2097a:	781b      	ldrb	r3, [r3, #0]
   2097c:	0019      	movs	r1, r3
   2097e:	0010      	movs	r0, r2
   20980:	4b08      	ldr	r3, [pc, #32]	; (209a4 <usart_read_callback+0x38>)
   20982:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   20984:	4906      	ldr	r1, [pc, #24]	; (209a0 <usart_read_callback+0x34>)
   20986:	4b08      	ldr	r3, [pc, #32]	; (209a8 <usart_read_callback+0x3c>)
   20988:	2201      	movs	r2, #1
   2098a:	0018      	movs	r0, r3
   2098c:	4b07      	ldr	r3, [pc, #28]	; (209ac <usart_read_callback+0x40>)
   2098e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   20990:	4b07      	ldr	r3, [pc, #28]	; (209b0 <usart_read_callback+0x44>)
   20992:	4798      	blx	r3
}
   20994:	46c0      	nop			; (mov r8, r8)
   20996:	46bd      	mov	sp, r7
   20998:	b002      	add	sp, #8
   2099a:	bd80      	pop	{r7, pc}
   2099c:	2000560c 	.word	0x2000560c
   209a0:	20005610 	.word	0x20005610
   209a4:	00020465 	.word	0x00020465
   209a8:	200055d8 	.word	0x200055d8
   209ac:	0002b995 	.word	0x0002b995
   209b0:	00014d09 	.word	0x00014d09

000209b4 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   209b4:	b580      	push	{r7, lr}
   209b6:	b082      	sub	sp, #8
   209b8:	af00      	add	r7, sp, #0
   209ba:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   209bc:	4b09      	ldr	r3, [pc, #36]	; (209e4 <usart_write_callback+0x30>)
   209be:	681b      	ldr	r3, [r3, #0]
   209c0:	4a09      	ldr	r2, [pc, #36]	; (209e8 <usart_write_callback+0x34>)
   209c2:	0011      	movs	r1, r2
   209c4:	0018      	movs	r0, r3
   209c6:	4b09      	ldr	r3, [pc, #36]	; (209ec <usart_write_callback+0x38>)
   209c8:	4798      	blx	r3
   209ca:	0003      	movs	r3, r0
   209cc:	3301      	adds	r3, #1
   209ce:	d005      	beq.n	209dc <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   209d0:	4905      	ldr	r1, [pc, #20]	; (209e8 <usart_write_callback+0x34>)
   209d2:	4b07      	ldr	r3, [pc, #28]	; (209f0 <usart_write_callback+0x3c>)
   209d4:	2201      	movs	r2, #1
   209d6:	0018      	movs	r0, r3
   209d8:	4b06      	ldr	r3, [pc, #24]	; (209f4 <usart_write_callback+0x40>)
   209da:	4798      	blx	r3
    }
}
   209dc:	46c0      	nop			; (mov r8, r8)
   209de:	46bd      	mov	sp, r7
   209e0:	b002      	add	sp, #8
   209e2:	bd80      	pop	{r7, pc}
   209e4:	20005a18 	.word	0x20005a18
   209e8:	20005a14 	.word	0x20005a14
   209ec:	00020499 	.word	0x00020499
   209f0:	200055d8 	.word	0x200055d8
   209f4:	0002b94d 	.word	0x0002b94d

000209f8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   209f8:	b590      	push	{r4, r7, lr}
   209fa:	b087      	sub	sp, #28
   209fc:	af00      	add	r7, sp, #0
   209fe:	60f8      	str	r0, [r7, #12]
   20a00:	000c      	movs	r4, r1
   20a02:	0010      	movs	r0, r2
   20a04:	0019      	movs	r1, r3
   20a06:	230a      	movs	r3, #10
   20a08:	18fb      	adds	r3, r7, r3
   20a0a:	1c22      	adds	r2, r4, #0
   20a0c:	801a      	strh	r2, [r3, #0]
   20a0e:	2308      	movs	r3, #8
   20a10:	18fb      	adds	r3, r7, r3
   20a12:	1c02      	adds	r2, r0, #0
   20a14:	801a      	strh	r2, [r3, #0]
   20a16:	1dfb      	adds	r3, r7, #7
   20a18:	1c0a      	adds	r2, r1, #0
   20a1a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   20a1c:	230a      	movs	r3, #10
   20a1e:	18fb      	adds	r3, r7, r3
   20a20:	881a      	ldrh	r2, [r3, #0]
   20a22:	2308      	movs	r3, #8
   20a24:	18fb      	adds	r3, r7, r3
   20a26:	881b      	ldrh	r3, [r3, #0]
   20a28:	1ad3      	subs	r3, r2, r3
   20a2a:	3307      	adds	r3, #7
   20a2c:	2b00      	cmp	r3, #0
   20a2e:	da00      	bge.n	20a32 <SDMMC_UNSTUFF_BITS+0x3a>
   20a30:	3307      	adds	r3, #7
   20a32:	10db      	asrs	r3, r3, #3
   20a34:	3b01      	subs	r3, #1
   20a36:	68fa      	ldr	r2, [r7, #12]
   20a38:	18d3      	adds	r3, r2, r3
   20a3a:	781b      	ldrb	r3, [r3, #0]
   20a3c:	0019      	movs	r1, r3
   20a3e:	2308      	movs	r3, #8
   20a40:	18fb      	adds	r3, r7, r3
   20a42:	881b      	ldrh	r3, [r3, #0]
   20a44:	2207      	movs	r2, #7
   20a46:	4013      	ands	r3, r2
   20a48:	4119      	asrs	r1, r3
   20a4a:	000b      	movs	r3, r1
   20a4c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   20a4e:	2308      	movs	r3, #8
   20a50:	18fb      	adds	r3, r7, r3
   20a52:	881b      	ldrh	r3, [r3, #0]
   20a54:	2207      	movs	r2, #7
   20a56:	401a      	ands	r2, r3
   20a58:	1dfb      	adds	r3, r7, #7
   20a5a:	781b      	ldrb	r3, [r3, #0]
   20a5c:	18d3      	adds	r3, r2, r3
   20a5e:	2b08      	cmp	r3, #8
   20a60:	dd1c      	ble.n	20a9c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   20a62:	230a      	movs	r3, #10
   20a64:	18fb      	adds	r3, r7, r3
   20a66:	881a      	ldrh	r2, [r3, #0]
   20a68:	2308      	movs	r3, #8
   20a6a:	18fb      	adds	r3, r7, r3
   20a6c:	881b      	ldrh	r3, [r3, #0]
   20a6e:	1ad3      	subs	r3, r2, r3
   20a70:	3307      	adds	r3, #7
   20a72:	2b00      	cmp	r3, #0
   20a74:	da00      	bge.n	20a78 <SDMMC_UNSTUFF_BITS+0x80>
   20a76:	3307      	adds	r3, #7
   20a78:	10db      	asrs	r3, r3, #3
   20a7a:	3b02      	subs	r3, #2
   20a7c:	68fa      	ldr	r2, [r7, #12]
   20a7e:	18d3      	adds	r3, r2, r3
   20a80:	781b      	ldrb	r3, [r3, #0]
   20a82:	0019      	movs	r1, r3
   20a84:	2308      	movs	r3, #8
   20a86:	18fb      	adds	r3, r7, r3
   20a88:	881b      	ldrh	r3, [r3, #0]
   20a8a:	2207      	movs	r2, #7
   20a8c:	4013      	ands	r3, r2
   20a8e:	2208      	movs	r2, #8
   20a90:	1ad3      	subs	r3, r2, r3
   20a92:	4099      	lsls	r1, r3
   20a94:	000b      	movs	r3, r1
   20a96:	697a      	ldr	r2, [r7, #20]
   20a98:	4313      	orrs	r3, r2
   20a9a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   20a9c:	2308      	movs	r3, #8
   20a9e:	18fb      	adds	r3, r7, r3
   20aa0:	881b      	ldrh	r3, [r3, #0]
   20aa2:	2207      	movs	r2, #7
   20aa4:	401a      	ands	r2, r3
   20aa6:	1dfb      	adds	r3, r7, #7
   20aa8:	781b      	ldrb	r3, [r3, #0]
   20aaa:	18d3      	adds	r3, r2, r3
   20aac:	2b10      	cmp	r3, #16
   20aae:	dd1c      	ble.n	20aea <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   20ab0:	230a      	movs	r3, #10
   20ab2:	18fb      	adds	r3, r7, r3
   20ab4:	881a      	ldrh	r2, [r3, #0]
   20ab6:	2308      	movs	r3, #8
   20ab8:	18fb      	adds	r3, r7, r3
   20aba:	881b      	ldrh	r3, [r3, #0]
   20abc:	1ad3      	subs	r3, r2, r3
   20abe:	3307      	adds	r3, #7
   20ac0:	2b00      	cmp	r3, #0
   20ac2:	da00      	bge.n	20ac6 <SDMMC_UNSTUFF_BITS+0xce>
   20ac4:	3307      	adds	r3, #7
   20ac6:	10db      	asrs	r3, r3, #3
   20ac8:	3b03      	subs	r3, #3
   20aca:	68fa      	ldr	r2, [r7, #12]
   20acc:	18d3      	adds	r3, r2, r3
   20ace:	781b      	ldrb	r3, [r3, #0]
   20ad0:	0019      	movs	r1, r3
   20ad2:	2308      	movs	r3, #8
   20ad4:	18fb      	adds	r3, r7, r3
   20ad6:	881b      	ldrh	r3, [r3, #0]
   20ad8:	2207      	movs	r2, #7
   20ada:	4013      	ands	r3, r2
   20adc:	2210      	movs	r2, #16
   20ade:	1ad3      	subs	r3, r2, r3
   20ae0:	4099      	lsls	r1, r3
   20ae2:	000b      	movs	r3, r1
   20ae4:	697a      	ldr	r2, [r7, #20]
   20ae6:	4313      	orrs	r3, r2
   20ae8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   20aea:	2308      	movs	r3, #8
   20aec:	18fb      	adds	r3, r7, r3
   20aee:	881b      	ldrh	r3, [r3, #0]
   20af0:	2207      	movs	r2, #7
   20af2:	401a      	ands	r2, r3
   20af4:	1dfb      	adds	r3, r7, #7
   20af6:	781b      	ldrb	r3, [r3, #0]
   20af8:	18d3      	adds	r3, r2, r3
   20afa:	2b10      	cmp	r3, #16
   20afc:	dd1c      	ble.n	20b38 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   20afe:	230a      	movs	r3, #10
   20b00:	18fb      	adds	r3, r7, r3
   20b02:	881a      	ldrh	r2, [r3, #0]
   20b04:	2308      	movs	r3, #8
   20b06:	18fb      	adds	r3, r7, r3
   20b08:	881b      	ldrh	r3, [r3, #0]
   20b0a:	1ad3      	subs	r3, r2, r3
   20b0c:	3307      	adds	r3, #7
   20b0e:	2b00      	cmp	r3, #0
   20b10:	da00      	bge.n	20b14 <SDMMC_UNSTUFF_BITS+0x11c>
   20b12:	3307      	adds	r3, #7
   20b14:	10db      	asrs	r3, r3, #3
   20b16:	3b03      	subs	r3, #3
   20b18:	68fa      	ldr	r2, [r7, #12]
   20b1a:	18d3      	adds	r3, r2, r3
   20b1c:	781b      	ldrb	r3, [r3, #0]
   20b1e:	0019      	movs	r1, r3
   20b20:	2308      	movs	r3, #8
   20b22:	18fb      	adds	r3, r7, r3
   20b24:	881b      	ldrh	r3, [r3, #0]
   20b26:	2207      	movs	r2, #7
   20b28:	4013      	ands	r3, r2
   20b2a:	2210      	movs	r2, #16
   20b2c:	1ad3      	subs	r3, r2, r3
   20b2e:	4099      	lsls	r1, r3
   20b30:	000b      	movs	r3, r1
   20b32:	697a      	ldr	r2, [r7, #20]
   20b34:	4313      	orrs	r3, r2
   20b36:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   20b38:	1dfb      	adds	r3, r7, #7
   20b3a:	781b      	ldrb	r3, [r3, #0]
   20b3c:	2201      	movs	r2, #1
   20b3e:	409a      	lsls	r2, r3
   20b40:	0013      	movs	r3, r2
   20b42:	1e5a      	subs	r2, r3, #1
   20b44:	697b      	ldr	r3, [r7, #20]
   20b46:	4013      	ands	r3, r2
   20b48:	617b      	str	r3, [r7, #20]
	return value;
   20b4a:	697b      	ldr	r3, [r7, #20]
}
   20b4c:	0018      	movs	r0, r3
   20b4e:	46bd      	mov	sp, r7
   20b50:	b007      	add	sp, #28
   20b52:	bd90      	pop	{r4, r7, pc}

00020b54 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   20b54:	b580      	push	{r7, lr}
   20b56:	b082      	sub	sp, #8
   20b58:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   20b5a:	4b23      	ldr	r3, [pc, #140]	; (20be8 <mmc_spi_op_cond+0x94>)
   20b5c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   20b5e:	4b23      	ldr	r3, [pc, #140]	; (20bec <mmc_spi_op_cond+0x98>)
   20b60:	2100      	movs	r1, #0
   20b62:	0018      	movs	r0, r3
   20b64:	4b22      	ldr	r3, [pc, #136]	; (20bf0 <mmc_spi_op_cond+0x9c>)
   20b66:	4798      	blx	r3
   20b68:	0003      	movs	r3, r0
   20b6a:	001a      	movs	r2, r3
   20b6c:	2301      	movs	r3, #1
   20b6e:	4053      	eors	r3, r2
   20b70:	b2db      	uxtb	r3, r3
   20b72:	2b00      	cmp	r3, #0
   20b74:	d001      	beq.n	20b7a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   20b76:	2300      	movs	r3, #0
   20b78:	e031      	b.n	20bde <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   20b7a:	4b1e      	ldr	r3, [pc, #120]	; (20bf4 <mmc_spi_op_cond+0xa0>)
   20b7c:	4798      	blx	r3
   20b7e:	0003      	movs	r3, r0
   20b80:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   20b82:	683b      	ldr	r3, [r7, #0]
   20b84:	2201      	movs	r2, #1
   20b86:	4013      	ands	r3, r2
   20b88:	d006      	beq.n	20b98 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   20b8a:	687b      	ldr	r3, [r7, #4]
   20b8c:	1e5a      	subs	r2, r3, #1
   20b8e:	607a      	str	r2, [r7, #4]
   20b90:	2b00      	cmp	r3, #0
   20b92:	d1e4      	bne.n	20b5e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   20b94:	2300      	movs	r3, #0
   20b96:	e022      	b.n	20bde <mmc_spi_op_cond+0x8a>
			break;
   20b98:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   20b9a:	4b17      	ldr	r3, [pc, #92]	; (20bf8 <mmc_spi_op_cond+0xa4>)
   20b9c:	2100      	movs	r1, #0
   20b9e:	0018      	movs	r0, r3
   20ba0:	4b13      	ldr	r3, [pc, #76]	; (20bf0 <mmc_spi_op_cond+0x9c>)
   20ba2:	4798      	blx	r3
   20ba4:	0003      	movs	r3, r0
   20ba6:	001a      	movs	r2, r3
   20ba8:	2301      	movs	r3, #1
   20baa:	4053      	eors	r3, r2
   20bac:	b2db      	uxtb	r3, r3
   20bae:	2b00      	cmp	r3, #0
   20bb0:	d001      	beq.n	20bb6 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   20bb2:	2300      	movs	r3, #0
   20bb4:	e013      	b.n	20bde <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   20bb6:	4b0f      	ldr	r3, [pc, #60]	; (20bf4 <mmc_spi_op_cond+0xa0>)
   20bb8:	4798      	blx	r3
   20bba:	0002      	movs	r2, r0
   20bbc:	23c0      	movs	r3, #192	; 0xc0
   20bbe:	05db      	lsls	r3, r3, #23
   20bc0:	401a      	ands	r2, r3
   20bc2:	2380      	movs	r3, #128	; 0x80
   20bc4:	05db      	lsls	r3, r3, #23
   20bc6:	429a      	cmp	r2, r3
   20bc8:	d108      	bne.n	20bdc <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   20bca:	4b0c      	ldr	r3, [pc, #48]	; (20bfc <mmc_spi_op_cond+0xa8>)
   20bcc:	681a      	ldr	r2, [r3, #0]
   20bce:	4b0b      	ldr	r3, [pc, #44]	; (20bfc <mmc_spi_op_cond+0xa8>)
   20bd0:	681b      	ldr	r3, [r3, #0]
   20bd2:	7adb      	ldrb	r3, [r3, #11]
   20bd4:	2108      	movs	r1, #8
   20bd6:	430b      	orrs	r3, r1
   20bd8:	b2db      	uxtb	r3, r3
   20bda:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   20bdc:	2301      	movs	r3, #1
}
   20bde:	0018      	movs	r0, r3
   20be0:	46bd      	mov	sp, r7
   20be2:	b002      	add	sp, #8
   20be4:	bd80      	pop	{r7, pc}
   20be6:	46c0      	nop			; (mov r8, r8)
   20be8:	00001bee 	.word	0x00001bee
   20bec:	00001101 	.word	0x00001101
   20bf0:	000225d1 	.word	0x000225d1
   20bf4:	00022811 	.word	0x00022811
   20bf8:	0000053a 	.word	0x0000053a
   20bfc:	20004170 	.word	0x20004170

00020c00 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   20c00:	b580      	push	{r7, lr}
   20c02:	b086      	sub	sp, #24
   20c04:	af00      	add	r7, sp, #0
   20c06:	0002      	movs	r2, r0
   20c08:	1dfb      	adds	r3, r7, #7
   20c0a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   20c0c:	4b2e      	ldr	r3, [pc, #184]	; (20cc8 <sd_spi_op_cond+0xc8>)
   20c0e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   20c10:	4b2e      	ldr	r3, [pc, #184]	; (20ccc <sd_spi_op_cond+0xcc>)
   20c12:	2100      	movs	r1, #0
   20c14:	0018      	movs	r0, r3
   20c16:	4b2e      	ldr	r3, [pc, #184]	; (20cd0 <sd_spi_op_cond+0xd0>)
   20c18:	4798      	blx	r3
   20c1a:	0003      	movs	r3, r0
   20c1c:	001a      	movs	r2, r3
   20c1e:	2301      	movs	r3, #1
   20c20:	4053      	eors	r3, r2
   20c22:	b2db      	uxtb	r3, r3
   20c24:	2b00      	cmp	r3, #0
   20c26:	d001      	beq.n	20c2c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   20c28:	2300      	movs	r3, #0
   20c2a:	e048      	b.n	20cbe <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   20c2c:	2300      	movs	r3, #0
   20c2e:	617b      	str	r3, [r7, #20]
		if (v2) {
   20c30:	1dfb      	adds	r3, r7, #7
   20c32:	781b      	ldrb	r3, [r3, #0]
   20c34:	2b00      	cmp	r3, #0
   20c36:	d004      	beq.n	20c42 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   20c38:	697b      	ldr	r3, [r7, #20]
   20c3a:	2280      	movs	r2, #128	; 0x80
   20c3c:	05d2      	lsls	r2, r2, #23
   20c3e:	4313      	orrs	r3, r2
   20c40:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   20c42:	697b      	ldr	r3, [r7, #20]
   20c44:	4a23      	ldr	r2, [pc, #140]	; (20cd4 <sd_spi_op_cond+0xd4>)
   20c46:	0019      	movs	r1, r3
   20c48:	0010      	movs	r0, r2
   20c4a:	4b21      	ldr	r3, [pc, #132]	; (20cd0 <sd_spi_op_cond+0xd0>)
   20c4c:	4798      	blx	r3
   20c4e:	0003      	movs	r3, r0
   20c50:	001a      	movs	r2, r3
   20c52:	2301      	movs	r3, #1
   20c54:	4053      	eors	r3, r2
   20c56:	b2db      	uxtb	r3, r3
   20c58:	2b00      	cmp	r3, #0
   20c5a:	d001      	beq.n	20c60 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   20c5c:	2300      	movs	r3, #0
   20c5e:	e02e      	b.n	20cbe <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   20c60:	4b1d      	ldr	r3, [pc, #116]	; (20cd8 <sd_spi_op_cond+0xd8>)
   20c62:	4798      	blx	r3
   20c64:	0003      	movs	r3, r0
   20c66:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   20c68:	68fb      	ldr	r3, [r7, #12]
   20c6a:	2201      	movs	r2, #1
   20c6c:	4013      	ands	r3, r2
   20c6e:	d006      	beq.n	20c7e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   20c70:	693b      	ldr	r3, [r7, #16]
   20c72:	1e5a      	subs	r2, r3, #1
   20c74:	613a      	str	r2, [r7, #16]
   20c76:	2b00      	cmp	r3, #0
   20c78:	d1ca      	bne.n	20c10 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   20c7a:	2300      	movs	r3, #0
   20c7c:	e01f      	b.n	20cbe <sd_spi_op_cond+0xbe>
			break;
   20c7e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   20c80:	4b16      	ldr	r3, [pc, #88]	; (20cdc <sd_spi_op_cond+0xdc>)
   20c82:	2100      	movs	r1, #0
   20c84:	0018      	movs	r0, r3
   20c86:	4b12      	ldr	r3, [pc, #72]	; (20cd0 <sd_spi_op_cond+0xd0>)
   20c88:	4798      	blx	r3
   20c8a:	0003      	movs	r3, r0
   20c8c:	001a      	movs	r2, r3
   20c8e:	2301      	movs	r3, #1
   20c90:	4053      	eors	r3, r2
   20c92:	b2db      	uxtb	r3, r3
   20c94:	2b00      	cmp	r3, #0
   20c96:	d001      	beq.n	20c9c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   20c98:	2300      	movs	r3, #0
   20c9a:	e010      	b.n	20cbe <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   20c9c:	4b0e      	ldr	r3, [pc, #56]	; (20cd8 <sd_spi_op_cond+0xd8>)
   20c9e:	4798      	blx	r3
   20ca0:	0002      	movs	r2, r0
   20ca2:	2380      	movs	r3, #128	; 0x80
   20ca4:	05db      	lsls	r3, r3, #23
   20ca6:	4013      	ands	r3, r2
   20ca8:	d008      	beq.n	20cbc <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   20caa:	4b0d      	ldr	r3, [pc, #52]	; (20ce0 <sd_spi_op_cond+0xe0>)
   20cac:	681a      	ldr	r2, [r3, #0]
   20cae:	4b0c      	ldr	r3, [pc, #48]	; (20ce0 <sd_spi_op_cond+0xe0>)
   20cb0:	681b      	ldr	r3, [r3, #0]
   20cb2:	7adb      	ldrb	r3, [r3, #11]
   20cb4:	2108      	movs	r1, #8
   20cb6:	430b      	orrs	r3, r1
   20cb8:	b2db      	uxtb	r3, r3
   20cba:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   20cbc:	2301      	movs	r3, #1
}
   20cbe:	0018      	movs	r0, r3
   20cc0:	46bd      	mov	sp, r7
   20cc2:	b006      	add	sp, #24
   20cc4:	bd80      	pop	{r7, pc}
   20cc6:	46c0      	nop			; (mov r8, r8)
   20cc8:	00001bee 	.word	0x00001bee
   20ccc:	00001137 	.word	0x00001137
   20cd0:	000225d1 	.word	0x000225d1
   20cd4:	00001129 	.word	0x00001129
   20cd8:	00022811 	.word	0x00022811
   20cdc:	0000053a 	.word	0x0000053a
   20ce0:	20004170 	.word	0x20004170

00020ce4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   20ce4:	b580      	push	{r7, lr}
   20ce6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   20ce8:	2301      	movs	r3, #1
}
   20cea:	0018      	movs	r0, r3
   20cec:	46bd      	mov	sp, r7
   20cee:	bd80      	pop	{r7, pc}

00020cf0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   20cf0:	b580      	push	{r7, lr}
   20cf2:	b084      	sub	sp, #16
   20cf4:	af00      	add	r7, sp, #0
   20cf6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   20cf8:	687b      	ldr	r3, [r7, #4]
   20cfa:	2200      	movs	r2, #0
   20cfc:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   20cfe:	23d5      	movs	r3, #213	; 0xd5
   20d00:	005b      	lsls	r3, r3, #1
   20d02:	4a14      	ldr	r2, [pc, #80]	; (20d54 <sd_cmd8+0x64>)
   20d04:	0019      	movs	r1, r3
   20d06:	0010      	movs	r0, r2
   20d08:	4b13      	ldr	r3, [pc, #76]	; (20d58 <sd_cmd8+0x68>)
   20d0a:	4798      	blx	r3
   20d0c:	0003      	movs	r3, r0
   20d0e:	001a      	movs	r2, r3
   20d10:	2301      	movs	r3, #1
   20d12:	4053      	eors	r3, r2
   20d14:	b2db      	uxtb	r3, r3
   20d16:	2b00      	cmp	r3, #0
   20d18:	d001      	beq.n	20d1e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   20d1a:	2301      	movs	r3, #1
   20d1c:	e015      	b.n	20d4a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   20d1e:	4b0f      	ldr	r3, [pc, #60]	; (20d5c <sd_cmd8+0x6c>)
   20d20:	4798      	blx	r3
   20d22:	0003      	movs	r3, r0
   20d24:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   20d26:	68fb      	ldr	r3, [r7, #12]
   20d28:	3301      	adds	r3, #1
   20d2a:	d101      	bne.n	20d30 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   20d2c:	2301      	movs	r3, #1
   20d2e:	e00c      	b.n	20d4a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   20d30:	68fb      	ldr	r3, [r7, #12]
   20d32:	051b      	lsls	r3, r3, #20
   20d34:	0d1a      	lsrs	r2, r3, #20
   20d36:	23d5      	movs	r3, #213	; 0xd5
   20d38:	005b      	lsls	r3, r3, #1
   20d3a:	429a      	cmp	r2, r3
   20d3c:	d001      	beq.n	20d42 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   20d3e:	2300      	movs	r3, #0
   20d40:	e003      	b.n	20d4a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   20d42:	687b      	ldr	r3, [r7, #4]
   20d44:	2201      	movs	r2, #1
   20d46:	701a      	strb	r2, [r3, #0]
	return true;
   20d48:	2301      	movs	r3, #1
}
   20d4a:	0018      	movs	r0, r3
   20d4c:	46bd      	mov	sp, r7
   20d4e:	b004      	add	sp, #16
   20d50:	bd80      	pop	{r7, pc}
   20d52:	46c0      	nop			; (mov r8, r8)
   20d54:	00005508 	.word	0x00005508
   20d58:	000225d1 	.word	0x000225d1
   20d5c:	00022811 	.word	0x00022811

00020d60 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   20d60:	b590      	push	{r4, r7, lr}
   20d62:	b089      	sub	sp, #36	; 0x24
   20d64:	af02      	add	r7, sp, #8
   20d66:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   20d68:	2380      	movs	r3, #128	; 0x80
   20d6a:	009a      	lsls	r2, r3, #2
   20d6c:	4841      	ldr	r0, [pc, #260]	; (20e74 <mmc_cmd8+0x114>)
   20d6e:	2300      	movs	r3, #0
   20d70:	9300      	str	r3, [sp, #0]
   20d72:	2301      	movs	r3, #1
   20d74:	2100      	movs	r1, #0
   20d76:	4c40      	ldr	r4, [pc, #256]	; (20e78 <mmc_cmd8+0x118>)
   20d78:	47a0      	blx	r4
   20d7a:	0003      	movs	r3, r0
   20d7c:	001a      	movs	r2, r3
   20d7e:	2301      	movs	r3, #1
   20d80:	4053      	eors	r3, r2
   20d82:	b2db      	uxtb	r3, r3
   20d84:	2b00      	cmp	r3, #0
   20d86:	d001      	beq.n	20d8c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   20d88:	2300      	movs	r3, #0
   20d8a:	e06e      	b.n	20e6a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   20d8c:	2316      	movs	r3, #22
   20d8e:	18fb      	adds	r3, r7, r3
   20d90:	2200      	movs	r2, #0
   20d92:	801a      	strh	r2, [r3, #0]
   20d94:	e014      	b.n	20dc0 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   20d96:	2310      	movs	r3, #16
   20d98:	18fb      	adds	r3, r7, r3
   20d9a:	0018      	movs	r0, r3
   20d9c:	4b37      	ldr	r3, [pc, #220]	; (20e7c <mmc_cmd8+0x11c>)
   20d9e:	4798      	blx	r3
   20da0:	0003      	movs	r3, r0
   20da2:	001a      	movs	r2, r3
   20da4:	2301      	movs	r3, #1
   20da6:	4053      	eors	r3, r2
   20da8:	b2db      	uxtb	r3, r3
   20daa:	2b00      	cmp	r3, #0
   20dac:	d001      	beq.n	20db2 <mmc_cmd8+0x52>
			return false;
   20dae:	2300      	movs	r3, #0
   20db0:	e05b      	b.n	20e6a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   20db2:	2316      	movs	r3, #22
   20db4:	18fb      	adds	r3, r7, r3
   20db6:	881a      	ldrh	r2, [r3, #0]
   20db8:	2316      	movs	r3, #22
   20dba:	18fb      	adds	r3, r7, r3
   20dbc:	3201      	adds	r2, #1
   20dbe:	801a      	strh	r2, [r3, #0]
   20dc0:	2316      	movs	r3, #22
   20dc2:	18fb      	adds	r3, r7, r3
   20dc4:	881b      	ldrh	r3, [r3, #0]
   20dc6:	2b31      	cmp	r3, #49	; 0x31
   20dc8:	d9e5      	bls.n	20d96 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   20dca:	693b      	ldr	r3, [r7, #16]
   20dcc:	b2db      	uxtb	r3, r3
   20dce:	2202      	movs	r2, #2
   20dd0:	4013      	ands	r3, r2
   20dd2:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   20dd4:	687b      	ldr	r3, [r7, #4]
   20dd6:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   20dd8:	4b29      	ldr	r3, [pc, #164]	; (20e80 <mmc_cmd8+0x120>)
   20dda:	681b      	ldr	r3, [r3, #0]
   20ddc:	330e      	adds	r3, #14
   20dde:	0018      	movs	r0, r3
   20de0:	230c      	movs	r3, #12
   20de2:	223e      	movs	r2, #62	; 0x3e
   20de4:	2180      	movs	r1, #128	; 0x80
   20de6:	4c27      	ldr	r4, [pc, #156]	; (20e84 <mmc_cmd8+0x124>)
   20de8:	47a0      	blx	r4
   20dea:	0002      	movs	r2, r0
   20dec:	4b26      	ldr	r3, [pc, #152]	; (20e88 <mmc_cmd8+0x128>)
   20dee:	429a      	cmp	r2, r3
   20df0:	d135      	bne.n	20e5e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   20df2:	e014      	b.n	20e1e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   20df4:	230c      	movs	r3, #12
   20df6:	18fb      	adds	r3, r7, r3
   20df8:	0018      	movs	r0, r3
   20dfa:	4b20      	ldr	r3, [pc, #128]	; (20e7c <mmc_cmd8+0x11c>)
   20dfc:	4798      	blx	r3
   20dfe:	0003      	movs	r3, r0
   20e00:	001a      	movs	r2, r3
   20e02:	2301      	movs	r3, #1
   20e04:	4053      	eors	r3, r2
   20e06:	b2db      	uxtb	r3, r3
   20e08:	2b00      	cmp	r3, #0
   20e0a:	d001      	beq.n	20e10 <mmc_cmd8+0xb0>
				return false;
   20e0c:	2300      	movs	r3, #0
   20e0e:	e02c      	b.n	20e6a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   20e10:	2316      	movs	r3, #22
   20e12:	18fb      	adds	r3, r7, r3
   20e14:	881a      	ldrh	r2, [r3, #0]
   20e16:	2316      	movs	r3, #22
   20e18:	18fb      	adds	r3, r7, r3
   20e1a:	3201      	adds	r2, #1
   20e1c:	801a      	strh	r2, [r3, #0]
   20e1e:	2316      	movs	r3, #22
   20e20:	18fb      	adds	r3, r7, r3
   20e22:	881b      	ldrh	r3, [r3, #0]
   20e24:	2b35      	cmp	r3, #53	; 0x35
   20e26:	d9e5      	bls.n	20df4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   20e28:	4b15      	ldr	r3, [pc, #84]	; (20e80 <mmc_cmd8+0x120>)
   20e2a:	681b      	ldr	r3, [r3, #0]
   20e2c:	68fa      	ldr	r2, [r7, #12]
   20e2e:	0852      	lsrs	r2, r2, #1
   20e30:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   20e32:	e014      	b.n	20e5e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   20e34:	230c      	movs	r3, #12
   20e36:	18fb      	adds	r3, r7, r3
   20e38:	0018      	movs	r0, r3
   20e3a:	4b10      	ldr	r3, [pc, #64]	; (20e7c <mmc_cmd8+0x11c>)
   20e3c:	4798      	blx	r3
   20e3e:	0003      	movs	r3, r0
   20e40:	001a      	movs	r2, r3
   20e42:	2301      	movs	r3, #1
   20e44:	4053      	eors	r3, r2
   20e46:	b2db      	uxtb	r3, r3
   20e48:	2b00      	cmp	r3, #0
   20e4a:	d001      	beq.n	20e50 <mmc_cmd8+0xf0>
			return false;
   20e4c:	2300      	movs	r3, #0
   20e4e:	e00c      	b.n	20e6a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   20e50:	2316      	movs	r3, #22
   20e52:	18fb      	adds	r3, r7, r3
   20e54:	881a      	ldrh	r2, [r3, #0]
   20e56:	2316      	movs	r3, #22
   20e58:	18fb      	adds	r3, r7, r3
   20e5a:	3201      	adds	r2, #1
   20e5c:	801a      	strh	r2, [r3, #0]
   20e5e:	2316      	movs	r3, #22
   20e60:	18fb      	adds	r3, r7, r3
   20e62:	881b      	ldrh	r3, [r3, #0]
   20e64:	2b7f      	cmp	r3, #127	; 0x7f
   20e66:	d9e5      	bls.n	20e34 <mmc_cmd8+0xd4>
		}
	}
	return true;
   20e68:	2301      	movs	r3, #1
}
   20e6a:	0018      	movs	r0, r3
   20e6c:	46bd      	mov	sp, r7
   20e6e:	b007      	add	sp, #28
   20e70:	bd90      	pop	{r4, r7, pc}
   20e72:	46c0      	nop			; (mov r8, r8)
   20e74:	00081108 	.word	0x00081108
   20e78:	000225f9 	.word	0x000225f9
   20e7c:	00022825 	.word	0x00022825
   20e80:	20004170 	.word	0x20004170
   20e84:	000209f9 	.word	0x000209f9
   20e88:	00000fff 	.word	0x00000fff

00020e8c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   20e8c:	b590      	push	{r4, r7, lr}
   20e8e:	b083      	sub	sp, #12
   20e90:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   20e92:	4b15      	ldr	r3, [pc, #84]	; (20ee8 <sd_mmc_cmd9_spi+0x5c>)
   20e94:	681b      	ldr	r3, [r3, #0]
   20e96:	891b      	ldrh	r3, [r3, #8]
   20e98:	0419      	lsls	r1, r3, #16
   20e9a:	4814      	ldr	r0, [pc, #80]	; (20eec <sd_mmc_cmd9_spi+0x60>)
   20e9c:	2301      	movs	r3, #1
   20e9e:	9300      	str	r3, [sp, #0]
   20ea0:	2301      	movs	r3, #1
   20ea2:	2210      	movs	r2, #16
   20ea4:	4c12      	ldr	r4, [pc, #72]	; (20ef0 <sd_mmc_cmd9_spi+0x64>)
   20ea6:	47a0      	blx	r4
   20ea8:	0003      	movs	r3, r0
   20eaa:	001a      	movs	r2, r3
   20eac:	2301      	movs	r3, #1
   20eae:	4053      	eors	r3, r2
   20eb0:	b2db      	uxtb	r3, r3
   20eb2:	2b00      	cmp	r3, #0
   20eb4:	d001      	beq.n	20eba <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   20eb6:	2300      	movs	r3, #0
   20eb8:	e012      	b.n	20ee0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   20eba:	4b0b      	ldr	r3, [pc, #44]	; (20ee8 <sd_mmc_cmd9_spi+0x5c>)
   20ebc:	681b      	ldr	r3, [r3, #0]
   20ebe:	330e      	adds	r3, #14
   20ec0:	2101      	movs	r1, #1
   20ec2:	0018      	movs	r0, r3
   20ec4:	4b0b      	ldr	r3, [pc, #44]	; (20ef4 <sd_mmc_cmd9_spi+0x68>)
   20ec6:	4798      	blx	r3
   20ec8:	0003      	movs	r3, r0
   20eca:	001a      	movs	r2, r3
   20ecc:	2301      	movs	r3, #1
   20ece:	4053      	eors	r3, r2
   20ed0:	b2db      	uxtb	r3, r3
   20ed2:	2b00      	cmp	r3, #0
   20ed4:	d001      	beq.n	20eda <sd_mmc_cmd9_spi+0x4e>
		return false;
   20ed6:	2300      	movs	r3, #0
   20ed8:	e002      	b.n	20ee0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   20eda:	4b07      	ldr	r3, [pc, #28]	; (20ef8 <sd_mmc_cmd9_spi+0x6c>)
   20edc:	4798      	blx	r3
   20ede:	0003      	movs	r3, r0
}
   20ee0:	0018      	movs	r0, r3
   20ee2:	46bd      	mov	sp, r7
   20ee4:	b001      	add	sp, #4
   20ee6:	bd90      	pop	{r4, r7, pc}
   20ee8:	20004170 	.word	0x20004170
   20eec:	00081109 	.word	0x00081109
   20ef0:	000225f9 	.word	0x000225f9
   20ef4:	000228c9 	.word	0x000228c9
   20ef8:	0002296d 	.word	0x0002296d

00020efc <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   20efc:	b5b0      	push	{r4, r5, r7, lr}
   20efe:	b084      	sub	sp, #16
   20f00:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   20f02:	4b45      	ldr	r3, [pc, #276]	; (21018 <mmc_decode_csd+0x11c>)
   20f04:	681b      	ldr	r3, [r3, #0]
   20f06:	330e      	adds	r3, #14
   20f08:	0018      	movs	r0, r3
   20f0a:	2304      	movs	r3, #4
   20f0c:	227a      	movs	r2, #122	; 0x7a
   20f0e:	2180      	movs	r1, #128	; 0x80
   20f10:	4c42      	ldr	r4, [pc, #264]	; (2101c <mmc_decode_csd+0x120>)
   20f12:	47a0      	blx	r4
   20f14:	0003      	movs	r3, r0
   20f16:	2b02      	cmp	r3, #2
   20f18:	d011      	beq.n	20f3e <mmc_decode_csd+0x42>
   20f1a:	d802      	bhi.n	20f22 <mmc_decode_csd+0x26>
   20f1c:	2b01      	cmp	r3, #1
   20f1e:	d009      	beq.n	20f34 <mmc_decode_csd+0x38>
   20f20:	e003      	b.n	20f2a <mmc_decode_csd+0x2e>
   20f22:	2b03      	cmp	r3, #3
   20f24:	d010      	beq.n	20f48 <mmc_decode_csd+0x4c>
   20f26:	2b04      	cmp	r3, #4
   20f28:	d013      	beq.n	20f52 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   20f2a:	4b3b      	ldr	r3, [pc, #236]	; (21018 <mmc_decode_csd+0x11c>)
   20f2c:	681b      	ldr	r3, [r3, #0]
   20f2e:	2212      	movs	r2, #18
   20f30:	731a      	strb	r2, [r3, #12]
		break;
   20f32:	e013      	b.n	20f5c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   20f34:	4b38      	ldr	r3, [pc, #224]	; (21018 <mmc_decode_csd+0x11c>)
   20f36:	681b      	ldr	r3, [r3, #0]
   20f38:	2214      	movs	r2, #20
   20f3a:	731a      	strb	r2, [r3, #12]
		break;
   20f3c:	e00e      	b.n	20f5c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   20f3e:	4b36      	ldr	r3, [pc, #216]	; (21018 <mmc_decode_csd+0x11c>)
   20f40:	681b      	ldr	r3, [r3, #0]
   20f42:	2222      	movs	r2, #34	; 0x22
   20f44:	731a      	strb	r2, [r3, #12]
		break;
   20f46:	e009      	b.n	20f5c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   20f48:	4b33      	ldr	r3, [pc, #204]	; (21018 <mmc_decode_csd+0x11c>)
   20f4a:	681b      	ldr	r3, [r3, #0]
   20f4c:	2230      	movs	r2, #48	; 0x30
   20f4e:	731a      	strb	r2, [r3, #12]
		break;
   20f50:	e004      	b.n	20f5c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   20f52:	4b31      	ldr	r3, [pc, #196]	; (21018 <mmc_decode_csd+0x11c>)
   20f54:	681b      	ldr	r3, [r3, #0]
   20f56:	2240      	movs	r2, #64	; 0x40
   20f58:	731a      	strb	r2, [r3, #12]
		break;
   20f5a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   20f5c:	4b2e      	ldr	r3, [pc, #184]	; (21018 <mmc_decode_csd+0x11c>)
   20f5e:	681b      	ldr	r3, [r3, #0]
   20f60:	330e      	adds	r3, #14
   20f62:	0018      	movs	r0, r3
   20f64:	2308      	movs	r3, #8
   20f66:	2260      	movs	r2, #96	; 0x60
   20f68:	2180      	movs	r1, #128	; 0x80
   20f6a:	4c2c      	ldr	r4, [pc, #176]	; (2101c <mmc_decode_csd+0x120>)
   20f6c:	47a0      	blx	r4
   20f6e:	0003      	movs	r3, r0
   20f70:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   20f72:	68fb      	ldr	r3, [r7, #12]
   20f74:	2207      	movs	r2, #7
   20f76:	401a      	ands	r2, r3
   20f78:	4b29      	ldr	r3, [pc, #164]	; (21020 <mmc_decode_csd+0x124>)
   20f7a:	0092      	lsls	r2, r2, #2
   20f7c:	58d3      	ldr	r3, [r2, r3]
   20f7e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   20f80:	68fb      	ldr	r3, [r7, #12]
   20f82:	08db      	lsrs	r3, r3, #3
   20f84:	220f      	movs	r2, #15
   20f86:	401a      	ands	r2, r3
   20f88:	4b26      	ldr	r3, [pc, #152]	; (21024 <mmc_decode_csd+0x128>)
   20f8a:	0092      	lsls	r2, r2, #2
   20f8c:	58d3      	ldr	r3, [r2, r3]
   20f8e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   20f90:	4b21      	ldr	r3, [pc, #132]	; (21018 <mmc_decode_csd+0x11c>)
   20f92:	681b      	ldr	r3, [r3, #0]
   20f94:	68ba      	ldr	r2, [r7, #8]
   20f96:	6879      	ldr	r1, [r7, #4]
   20f98:	434a      	muls	r2, r1
   20f9a:	21fa      	movs	r1, #250	; 0xfa
   20f9c:	0089      	lsls	r1, r1, #2
   20f9e:	434a      	muls	r2, r1
   20fa0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   20fa2:	4b1d      	ldr	r3, [pc, #116]	; (21018 <mmc_decode_csd+0x11c>)
   20fa4:	681b      	ldr	r3, [r3, #0]
   20fa6:	330e      	adds	r3, #14
   20fa8:	0018      	movs	r0, r3
   20faa:	230c      	movs	r3, #12
   20fac:	223e      	movs	r2, #62	; 0x3e
   20fae:	2180      	movs	r1, #128	; 0x80
   20fb0:	4c1a      	ldr	r4, [pc, #104]	; (2101c <mmc_decode_csd+0x120>)
   20fb2:	47a0      	blx	r4
   20fb4:	0002      	movs	r2, r0
   20fb6:	4b1c      	ldr	r3, [pc, #112]	; (21028 <mmc_decode_csd+0x12c>)
   20fb8:	429a      	cmp	r2, r3
   20fba:	d028      	beq.n	2100e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   20fbc:	4b16      	ldr	r3, [pc, #88]	; (21018 <mmc_decode_csd+0x11c>)
   20fbe:	681b      	ldr	r3, [r3, #0]
   20fc0:	330e      	adds	r3, #14
   20fc2:	0018      	movs	r0, r3
   20fc4:	230c      	movs	r3, #12
   20fc6:	223e      	movs	r2, #62	; 0x3e
   20fc8:	2180      	movs	r1, #128	; 0x80
   20fca:	4c14      	ldr	r4, [pc, #80]	; (2101c <mmc_decode_csd+0x120>)
   20fcc:	47a0      	blx	r4
   20fce:	0003      	movs	r3, r0
   20fd0:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   20fd2:	4b11      	ldr	r3, [pc, #68]	; (21018 <mmc_decode_csd+0x11c>)
   20fd4:	681b      	ldr	r3, [r3, #0]
   20fd6:	330e      	adds	r3, #14
   20fd8:	0018      	movs	r0, r3
   20fda:	2303      	movs	r3, #3
   20fdc:	222f      	movs	r2, #47	; 0x2f
   20fde:	2180      	movs	r1, #128	; 0x80
   20fe0:	4d0e      	ldr	r5, [pc, #56]	; (2101c <mmc_decode_csd+0x120>)
   20fe2:	47a8      	blx	r5
   20fe4:	0003      	movs	r3, r0
   20fe6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   20fe8:	409c      	lsls	r4, r3
   20fea:	0023      	movs	r3, r4
   20fec:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   20fee:	4b0a      	ldr	r3, [pc, #40]	; (21018 <mmc_decode_csd+0x11c>)
   20ff0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   20ff2:	4b09      	ldr	r3, [pc, #36]	; (21018 <mmc_decode_csd+0x11c>)
   20ff4:	681b      	ldr	r3, [r3, #0]
   20ff6:	330e      	adds	r3, #14
   20ff8:	0018      	movs	r0, r3
   20ffa:	2304      	movs	r3, #4
   20ffc:	2250      	movs	r2, #80	; 0x50
   20ffe:	2180      	movs	r1, #128	; 0x80
   21000:	4d06      	ldr	r5, [pc, #24]	; (2101c <mmc_decode_csd+0x120>)
   21002:	47a8      	blx	r5
   21004:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   21006:	683b      	ldr	r3, [r7, #0]
   21008:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   2100a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   2100c:	6063      	str	r3, [r4, #4]
	}
}
   2100e:	46c0      	nop			; (mov r8, r8)
   21010:	46bd      	mov	sp, r7
   21012:	b004      	add	sp, #16
   21014:	bdb0      	pop	{r4, r5, r7, pc}
   21016:	46c0      	nop			; (mov r8, r8)
   21018:	20004170 	.word	0x20004170
   2101c:	000209f9 	.word	0x000209f9
   21020:	0003b3cc 	.word	0x0003b3cc
   21024:	0003b428 	.word	0x0003b428
   21028:	00000fff 	.word	0x00000fff

0002102c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   2102c:	b5b0      	push	{r4, r5, r7, lr}
   2102e:	b084      	sub	sp, #16
   21030:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   21032:	4b35      	ldr	r3, [pc, #212]	; (21108 <sd_decode_csd+0xdc>)
   21034:	681b      	ldr	r3, [r3, #0]
   21036:	330e      	adds	r3, #14
   21038:	0018      	movs	r0, r3
   2103a:	2308      	movs	r3, #8
   2103c:	2260      	movs	r2, #96	; 0x60
   2103e:	2180      	movs	r1, #128	; 0x80
   21040:	4c32      	ldr	r4, [pc, #200]	; (2110c <sd_decode_csd+0xe0>)
   21042:	47a0      	blx	r4
   21044:	0003      	movs	r3, r0
   21046:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   21048:	68fb      	ldr	r3, [r7, #12]
   2104a:	2207      	movs	r2, #7
   2104c:	401a      	ands	r2, r3
   2104e:	4b30      	ldr	r3, [pc, #192]	; (21110 <sd_decode_csd+0xe4>)
   21050:	0092      	lsls	r2, r2, #2
   21052:	58d3      	ldr	r3, [r2, r3]
   21054:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   21056:	68fb      	ldr	r3, [r7, #12]
   21058:	08db      	lsrs	r3, r3, #3
   2105a:	220f      	movs	r2, #15
   2105c:	401a      	ands	r2, r3
   2105e:	4b2d      	ldr	r3, [pc, #180]	; (21114 <sd_decode_csd+0xe8>)
   21060:	0092      	lsls	r2, r2, #2
   21062:	58d3      	ldr	r3, [r2, r3]
   21064:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   21066:	4b28      	ldr	r3, [pc, #160]	; (21108 <sd_decode_csd+0xdc>)
   21068:	681b      	ldr	r3, [r3, #0]
   2106a:	68ba      	ldr	r2, [r7, #8]
   2106c:	6879      	ldr	r1, [r7, #4]
   2106e:	434a      	muls	r2, r1
   21070:	21fa      	movs	r1, #250	; 0xfa
   21072:	0089      	lsls	r1, r1, #2
   21074:	434a      	muls	r2, r1
   21076:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   21078:	4b23      	ldr	r3, [pc, #140]	; (21108 <sd_decode_csd+0xdc>)
   2107a:	681b      	ldr	r3, [r3, #0]
   2107c:	330e      	adds	r3, #14
   2107e:	0018      	movs	r0, r3
   21080:	2302      	movs	r3, #2
   21082:	227e      	movs	r2, #126	; 0x7e
   21084:	2180      	movs	r1, #128	; 0x80
   21086:	4c21      	ldr	r4, [pc, #132]	; (2110c <sd_decode_csd+0xe0>)
   21088:	47a0      	blx	r4
   2108a:	1e03      	subs	r3, r0, #0
   2108c:	d00f      	beq.n	210ae <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   2108e:	4b1e      	ldr	r3, [pc, #120]	; (21108 <sd_decode_csd+0xdc>)
   21090:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   21092:	4b1d      	ldr	r3, [pc, #116]	; (21108 <sd_decode_csd+0xdc>)
   21094:	681b      	ldr	r3, [r3, #0]
   21096:	330e      	adds	r3, #14
   21098:	0018      	movs	r0, r3
   2109a:	2316      	movs	r3, #22
   2109c:	2230      	movs	r2, #48	; 0x30
   2109e:	2180      	movs	r1, #128	; 0x80
   210a0:	4d1a      	ldr	r5, [pc, #104]	; (2110c <sd_decode_csd+0xe0>)
   210a2:	47a8      	blx	r5
   210a4:	0003      	movs	r3, r0
				* 512;
   210a6:	3301      	adds	r3, #1
   210a8:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   210aa:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   210ac:	e028      	b.n	21100 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   210ae:	4b16      	ldr	r3, [pc, #88]	; (21108 <sd_decode_csd+0xdc>)
   210b0:	681b      	ldr	r3, [r3, #0]
   210b2:	330e      	adds	r3, #14
   210b4:	0018      	movs	r0, r3
   210b6:	230c      	movs	r3, #12
   210b8:	223e      	movs	r2, #62	; 0x3e
   210ba:	2180      	movs	r1, #128	; 0x80
   210bc:	4c13      	ldr	r4, [pc, #76]	; (2110c <sd_decode_csd+0xe0>)
   210be:	47a0      	blx	r4
   210c0:	0003      	movs	r3, r0
   210c2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   210c4:	4b10      	ldr	r3, [pc, #64]	; (21108 <sd_decode_csd+0xdc>)
   210c6:	681b      	ldr	r3, [r3, #0]
   210c8:	330e      	adds	r3, #14
   210ca:	0018      	movs	r0, r3
   210cc:	2303      	movs	r3, #3
   210ce:	222f      	movs	r2, #47	; 0x2f
   210d0:	2180      	movs	r1, #128	; 0x80
   210d2:	4d0e      	ldr	r5, [pc, #56]	; (2110c <sd_decode_csd+0xe0>)
   210d4:	47a8      	blx	r5
   210d6:	0003      	movs	r3, r0
   210d8:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   210da:	409c      	lsls	r4, r3
   210dc:	0023      	movs	r3, r4
   210de:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   210e0:	4b09      	ldr	r3, [pc, #36]	; (21108 <sd_decode_csd+0xdc>)
   210e2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   210e4:	4b08      	ldr	r3, [pc, #32]	; (21108 <sd_decode_csd+0xdc>)
   210e6:	681b      	ldr	r3, [r3, #0]
   210e8:	330e      	adds	r3, #14
   210ea:	0018      	movs	r0, r3
   210ec:	2304      	movs	r3, #4
   210ee:	2250      	movs	r2, #80	; 0x50
   210f0:	2180      	movs	r1, #128	; 0x80
   210f2:	4d06      	ldr	r5, [pc, #24]	; (2110c <sd_decode_csd+0xe0>)
   210f4:	47a8      	blx	r5
   210f6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   210f8:	683b      	ldr	r3, [r7, #0]
   210fa:	4093      	lsls	r3, r2
				/ 1024;
   210fc:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   210fe:	6063      	str	r3, [r4, #4]
}
   21100:	46c0      	nop			; (mov r8, r8)
   21102:	46bd      	mov	sp, r7
   21104:	b004      	add	sp, #16
   21106:	bdb0      	pop	{r4, r5, r7, pc}
   21108:	20004170 	.word	0x20004170
   2110c:	000209f9 	.word	0x000209f9
   21110:	0003b3cc 	.word	0x0003b3cc
   21114:	0003b3e8 	.word	0x0003b3e8

00021118 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   21118:	b580      	push	{r7, lr}
   2111a:	b082      	sub	sp, #8
   2111c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   2111e:	4b11      	ldr	r3, [pc, #68]	; (21164 <sd_mmc_cmd13+0x4c>)
   21120:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   21122:	4b11      	ldr	r3, [pc, #68]	; (21168 <sd_mmc_cmd13+0x50>)
   21124:	2100      	movs	r1, #0
   21126:	0018      	movs	r0, r3
   21128:	4b10      	ldr	r3, [pc, #64]	; (2116c <sd_mmc_cmd13+0x54>)
   2112a:	4798      	blx	r3
   2112c:	0003      	movs	r3, r0
   2112e:	001a      	movs	r2, r3
   21130:	2301      	movs	r3, #1
   21132:	4053      	eors	r3, r2
   21134:	b2db      	uxtb	r3, r3
   21136:	2b00      	cmp	r3, #0
   21138:	d001      	beq.n	2113e <sd_mmc_cmd13+0x26>
				return false;
   2113a:	2300      	movs	r3, #0
   2113c:	e00e      	b.n	2115c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   2113e:	4b0c      	ldr	r3, [pc, #48]	; (21170 <sd_mmc_cmd13+0x58>)
   21140:	4798      	blx	r3
   21142:	0002      	movs	r2, r0
   21144:	23ff      	movs	r3, #255	; 0xff
   21146:	4013      	ands	r3, r2
   21148:	d006      	beq.n	21158 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   2114a:	687b      	ldr	r3, [r7, #4]
   2114c:	1e5a      	subs	r2, r3, #1
   2114e:	607a      	str	r2, [r7, #4]
   21150:	2b00      	cmp	r3, #0
   21152:	d1e6      	bne.n	21122 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   21154:	2300      	movs	r3, #0
   21156:	e001      	b.n	2115c <sd_mmc_cmd13+0x44>
				break;
   21158:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   2115a:	2301      	movs	r3, #1
}
   2115c:	0018      	movs	r0, r3
   2115e:	46bd      	mov	sp, r7
   21160:	b002      	add	sp, #8
   21162:	bd80      	pop	{r7, pc}
   21164:	00030d40 	.word	0x00030d40
   21168:	00001b0d 	.word	0x00001b0d
   2116c:	000225d1 	.word	0x000225d1
   21170:	00022811 	.word	0x00022811

00021174 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   21174:	b590      	push	{r4, r7, lr}
   21176:	b085      	sub	sp, #20
   21178:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   2117a:	4b38      	ldr	r3, [pc, #224]	; (2125c <sd_acmd51+0xe8>)
   2117c:	681b      	ldr	r3, [r3, #0]
   2117e:	891b      	ldrh	r3, [r3, #8]
   21180:	041b      	lsls	r3, r3, #16
   21182:	4a37      	ldr	r2, [pc, #220]	; (21260 <sd_acmd51+0xec>)
   21184:	0019      	movs	r1, r3
   21186:	0010      	movs	r0, r2
   21188:	4b36      	ldr	r3, [pc, #216]	; (21264 <sd_acmd51+0xf0>)
   2118a:	4798      	blx	r3
   2118c:	0003      	movs	r3, r0
   2118e:	001a      	movs	r2, r3
   21190:	2301      	movs	r3, #1
   21192:	4053      	eors	r3, r2
   21194:	b2db      	uxtb	r3, r3
   21196:	2b00      	cmp	r3, #0
   21198:	d001      	beq.n	2119e <sd_acmd51+0x2a>
		return false;
   2119a:	2300      	movs	r3, #0
   2119c:	e059      	b.n	21252 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   2119e:	4832      	ldr	r0, [pc, #200]	; (21268 <sd_acmd51+0xf4>)
   211a0:	2301      	movs	r3, #1
   211a2:	9300      	str	r3, [sp, #0]
   211a4:	2301      	movs	r3, #1
   211a6:	2208      	movs	r2, #8
   211a8:	2100      	movs	r1, #0
   211aa:	4c30      	ldr	r4, [pc, #192]	; (2126c <sd_acmd51+0xf8>)
   211ac:	47a0      	blx	r4
   211ae:	0003      	movs	r3, r0
   211b0:	001a      	movs	r2, r3
   211b2:	2301      	movs	r3, #1
   211b4:	4053      	eors	r3, r2
   211b6:	b2db      	uxtb	r3, r3
   211b8:	2b00      	cmp	r3, #0
   211ba:	d001      	beq.n	211c0 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   211bc:	2300      	movs	r3, #0
   211be:	e048      	b.n	21252 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   211c0:	003b      	movs	r3, r7
   211c2:	2101      	movs	r1, #1
   211c4:	0018      	movs	r0, r3
   211c6:	4b2a      	ldr	r3, [pc, #168]	; (21270 <sd_acmd51+0xfc>)
   211c8:	4798      	blx	r3
   211ca:	0003      	movs	r3, r0
   211cc:	001a      	movs	r2, r3
   211ce:	2301      	movs	r3, #1
   211d0:	4053      	eors	r3, r2
   211d2:	b2db      	uxtb	r3, r3
   211d4:	2b00      	cmp	r3, #0
   211d6:	d001      	beq.n	211dc <sd_acmd51+0x68>
		return false;
   211d8:	2300      	movs	r3, #0
   211da:	e03a      	b.n	21252 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   211dc:	4b25      	ldr	r3, [pc, #148]	; (21274 <sd_acmd51+0x100>)
   211de:	4798      	blx	r3
   211e0:	0003      	movs	r3, r0
   211e2:	001a      	movs	r2, r3
   211e4:	2301      	movs	r3, #1
   211e6:	4053      	eors	r3, r2
   211e8:	b2db      	uxtb	r3, r3
   211ea:	2b00      	cmp	r3, #0
   211ec:	d001      	beq.n	211f2 <sd_acmd51+0x7e>
		return false;
   211ee:	2300      	movs	r3, #0
   211f0:	e02f      	b.n	21252 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   211f2:	0038      	movs	r0, r7
   211f4:	2304      	movs	r3, #4
   211f6:	2238      	movs	r2, #56	; 0x38
   211f8:	2140      	movs	r1, #64	; 0x40
   211fa:	4c1f      	ldr	r4, [pc, #124]	; (21278 <sd_acmd51+0x104>)
   211fc:	47a0      	blx	r4
   211fe:	0003      	movs	r3, r0
   21200:	2b01      	cmp	r3, #1
   21202:	d008      	beq.n	21216 <sd_acmd51+0xa2>
   21204:	d302      	bcc.n	2120c <sd_acmd51+0x98>
   21206:	2b02      	cmp	r3, #2
   21208:	d00a      	beq.n	21220 <sd_acmd51+0xac>
   2120a:	e01c      	b.n	21246 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   2120c:	4b13      	ldr	r3, [pc, #76]	; (2125c <sd_acmd51+0xe8>)
   2120e:	681b      	ldr	r3, [r3, #0]
   21210:	2210      	movs	r2, #16
   21212:	731a      	strb	r2, [r3, #12]
		break;
   21214:	e01c      	b.n	21250 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   21216:	4b11      	ldr	r3, [pc, #68]	; (2125c <sd_acmd51+0xe8>)
   21218:	681b      	ldr	r3, [r3, #0]
   2121a:	221a      	movs	r2, #26
   2121c:	731a      	strb	r2, [r3, #12]
		break;
   2121e:	e017      	b.n	21250 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   21220:	0038      	movs	r0, r7
   21222:	2301      	movs	r3, #1
   21224:	222f      	movs	r2, #47	; 0x2f
   21226:	2140      	movs	r1, #64	; 0x40
   21228:	4c13      	ldr	r4, [pc, #76]	; (21278 <sd_acmd51+0x104>)
   2122a:	47a0      	blx	r4
   2122c:	0003      	movs	r3, r0
   2122e:	2b01      	cmp	r3, #1
   21230:	d104      	bne.n	2123c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   21232:	4b0a      	ldr	r3, [pc, #40]	; (2125c <sd_acmd51+0xe8>)
   21234:	681b      	ldr	r3, [r3, #0]
   21236:	2230      	movs	r2, #48	; 0x30
   21238:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   2123a:	e009      	b.n	21250 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   2123c:	4b07      	ldr	r3, [pc, #28]	; (2125c <sd_acmd51+0xe8>)
   2123e:	681b      	ldr	r3, [r3, #0]
   21240:	2220      	movs	r2, #32
   21242:	731a      	strb	r2, [r3, #12]
		break;
   21244:	e004      	b.n	21250 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   21246:	4b05      	ldr	r3, [pc, #20]	; (2125c <sd_acmd51+0xe8>)
   21248:	681b      	ldr	r3, [r3, #0]
   2124a:	2210      	movs	r2, #16
   2124c:	731a      	strb	r2, [r3, #12]
		break;
   2124e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   21250:	2301      	movs	r3, #1
}
   21252:	0018      	movs	r0, r3
   21254:	46bd      	mov	sp, r7
   21256:	b003      	add	sp, #12
   21258:	bd90      	pop	{r4, r7, pc}
   2125a:	46c0      	nop			; (mov r8, r8)
   2125c:	20004170 	.word	0x20004170
   21260:	00001137 	.word	0x00001137
   21264:	000225d1 	.word	0x000225d1
   21268:	00081133 	.word	0x00081133
   2126c:	000225f9 	.word	0x000225f9
   21270:	000228c9 	.word	0x000228c9
   21274:	0002296d 	.word	0x0002296d
   21278:	000209f9 	.word	0x000209f9

0002127c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   2127c:	b580      	push	{r7, lr}
   2127e:	b082      	sub	sp, #8
   21280:	af00      	add	r7, sp, #0
   21282:	0002      	movs	r2, r0
   21284:	1dfb      	adds	r3, r7, #7
   21286:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   21288:	1dfb      	adds	r3, r7, #7
   2128a:	781b      	ldrb	r3, [r3, #0]
   2128c:	2b00      	cmp	r3, #0
   2128e:	d001      	beq.n	21294 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   21290:	2304      	movs	r3, #4
   21292:	e047      	b.n	21324 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   21294:	1dfb      	adds	r3, r7, #7
   21296:	781b      	ldrb	r3, [r3, #0]
   21298:	4a24      	ldr	r2, [pc, #144]	; (2132c <sd_mmc_select_slot+0xb0>)
   2129a:	015b      	lsls	r3, r3, #5
   2129c:	18d3      	adds	r3, r2, r3
   2129e:	330a      	adds	r3, #10
   212a0:	781b      	ldrb	r3, [r3, #0]
   212a2:	2b04      	cmp	r3, #4
   212a4:	d008      	beq.n	212b8 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   212a6:	1dfb      	adds	r3, r7, #7
   212a8:	781b      	ldrb	r3, [r3, #0]
   212aa:	4a20      	ldr	r2, [pc, #128]	; (2132c <sd_mmc_select_slot+0xb0>)
   212ac:	015b      	lsls	r3, r3, #5
   212ae:	18d3      	adds	r3, r2, r3
   212b0:	330a      	adds	r3, #10
   212b2:	781b      	ldrb	r3, [r3, #0]
   212b4:	2b03      	cmp	r3, #3
   212b6:	d11d      	bne.n	212f4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   212b8:	1dfb      	adds	r3, r7, #7
   212ba:	781b      	ldrb	r3, [r3, #0]
   212bc:	4a1b      	ldr	r2, [pc, #108]	; (2132c <sd_mmc_select_slot+0xb0>)
   212be:	015b      	lsls	r3, r3, #5
   212c0:	18d3      	adds	r3, r2, r3
   212c2:	330a      	adds	r3, #10
   212c4:	2202      	movs	r2, #2
   212c6:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   212c8:	1dfb      	adds	r3, r7, #7
   212ca:	781a      	ldrb	r2, [r3, #0]
   212cc:	4b17      	ldr	r3, [pc, #92]	; (2132c <sd_mmc_select_slot+0xb0>)
   212ce:	0152      	lsls	r2, r2, #5
   212d0:	4917      	ldr	r1, [pc, #92]	; (21330 <sd_mmc_select_slot+0xb4>)
   212d2:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   212d4:	1dfb      	adds	r3, r7, #7
   212d6:	781b      	ldrb	r3, [r3, #0]
   212d8:	4a14      	ldr	r2, [pc, #80]	; (2132c <sd_mmc_select_slot+0xb0>)
   212da:	015b      	lsls	r3, r3, #5
   212dc:	18d3      	adds	r3, r2, r3
   212de:	330d      	adds	r3, #13
   212e0:	2201      	movs	r2, #1
   212e2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   212e4:	1dfb      	adds	r3, r7, #7
   212e6:	781b      	ldrb	r3, [r3, #0]
   212e8:	4a10      	ldr	r2, [pc, #64]	; (2132c <sd_mmc_select_slot+0xb0>)
   212ea:	015b      	lsls	r3, r3, #5
   212ec:	18d3      	adds	r3, r2, r3
   212ee:	331e      	adds	r3, #30
   212f0:	2200      	movs	r2, #0
   212f2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   212f4:	4b0f      	ldr	r3, [pc, #60]	; (21334 <sd_mmc_select_slot+0xb8>)
   212f6:	1dfa      	adds	r2, r7, #7
   212f8:	7812      	ldrb	r2, [r2, #0]
   212fa:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   212fc:	1dfb      	adds	r3, r7, #7
   212fe:	781b      	ldrb	r3, [r3, #0]
   21300:	015a      	lsls	r2, r3, #5
   21302:	4b0a      	ldr	r3, [pc, #40]	; (2132c <sd_mmc_select_slot+0xb0>)
   21304:	18d2      	adds	r2, r2, r3
   21306:	4b0c      	ldr	r3, [pc, #48]	; (21338 <sd_mmc_select_slot+0xbc>)
   21308:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   2130a:	4b0c      	ldr	r3, [pc, #48]	; (2133c <sd_mmc_select_slot+0xc0>)
   2130c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   2130e:	1dfb      	adds	r3, r7, #7
   21310:	781b      	ldrb	r3, [r3, #0]
   21312:	4a06      	ldr	r2, [pc, #24]	; (2132c <sd_mmc_select_slot+0xb0>)
   21314:	015b      	lsls	r3, r3, #5
   21316:	18d3      	adds	r3, r2, r3
   21318:	330a      	adds	r3, #10
   2131a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   2131c:	3b02      	subs	r3, #2
   2131e:	425a      	negs	r2, r3
   21320:	4153      	adcs	r3, r2
   21322:	b2db      	uxtb	r3, r3
}
   21324:	0018      	movs	r0, r3
   21326:	46bd      	mov	sp, r7
   21328:	b002      	add	sp, #8
   2132a:	bd80      	pop	{r7, pc}
   2132c:	2000414c 	.word	0x2000414c
   21330:	00061a80 	.word	0x00061a80
   21334:	2000416c 	.word	0x2000416c
   21338:	20004170 	.word	0x20004170
   2133c:	00021341 	.word	0x00021341

00021340 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   21340:	b5b0      	push	{r4, r5, r7, lr}
   21342:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   21344:	4b09      	ldr	r3, [pc, #36]	; (2136c <sd_mmc_configure_slot+0x2c>)
   21346:	7818      	ldrb	r0, [r3, #0]
   21348:	4b09      	ldr	r3, [pc, #36]	; (21370 <sd_mmc_configure_slot+0x30>)
   2134a:	681b      	ldr	r3, [r3, #0]
   2134c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   2134e:	4b08      	ldr	r3, [pc, #32]	; (21370 <sd_mmc_configure_slot+0x30>)
   21350:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   21352:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   21354:	4b06      	ldr	r3, [pc, #24]	; (21370 <sd_mmc_configure_slot+0x30>)
   21356:	681b      	ldr	r3, [r3, #0]
   21358:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   2135a:	1e5c      	subs	r4, r3, #1
   2135c:	41a3      	sbcs	r3, r4
   2135e:	b2db      	uxtb	r3, r3
   21360:	4c04      	ldr	r4, [pc, #16]	; (21374 <sd_mmc_configure_slot+0x34>)
   21362:	47a0      	blx	r4
}
   21364:	46c0      	nop			; (mov r8, r8)
   21366:	46bd      	mov	sp, r7
   21368:	bdb0      	pop	{r4, r5, r7, pc}
   2136a:	46c0      	nop			; (mov r8, r8)
   2136c:	2000416c 	.word	0x2000416c
   21370:	20004170 	.word	0x20004170
   21374:	000224b9 	.word	0x000224b9

00021378 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   21378:	b580      	push	{r7, lr}
   2137a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   2137c:	4b05      	ldr	r3, [pc, #20]	; (21394 <sd_mmc_deselect_slot+0x1c>)
   2137e:	781b      	ldrb	r3, [r3, #0]
   21380:	2b00      	cmp	r3, #0
   21382:	d104      	bne.n	2138e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   21384:	4b03      	ldr	r3, [pc, #12]	; (21394 <sd_mmc_deselect_slot+0x1c>)
   21386:	781b      	ldrb	r3, [r3, #0]
   21388:	0018      	movs	r0, r3
   2138a:	4b03      	ldr	r3, [pc, #12]	; (21398 <sd_mmc_deselect_slot+0x20>)
   2138c:	4798      	blx	r3
	}
}
   2138e:	46c0      	nop			; (mov r8, r8)
   21390:	46bd      	mov	sp, r7
   21392:	bd80      	pop	{r7, pc}
   21394:	2000416c 	.word	0x2000416c
   21398:	00022541 	.word	0x00022541

0002139c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   2139c:	b580      	push	{r7, lr}
   2139e:	b082      	sub	sp, #8
   213a0:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   213a2:	1dfb      	adds	r3, r7, #7
   213a4:	2200      	movs	r2, #0
   213a6:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   213a8:	4b59      	ldr	r3, [pc, #356]	; (21510 <sd_mmc_spi_card_init+0x174>)
   213aa:	681b      	ldr	r3, [r3, #0]
   213ac:	2201      	movs	r2, #1
   213ae:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   213b0:	4b57      	ldr	r3, [pc, #348]	; (21510 <sd_mmc_spi_card_init+0x174>)
   213b2:	681b      	ldr	r3, [r3, #0]
   213b4:	2200      	movs	r2, #0
   213b6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   213b8:	4b55      	ldr	r3, [pc, #340]	; (21510 <sd_mmc_spi_card_init+0x174>)
   213ba:	681b      	ldr	r3, [r3, #0]
   213bc:	2200      	movs	r2, #0
   213be:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   213c0:	4b54      	ldr	r3, [pc, #336]	; (21514 <sd_mmc_spi_card_init+0x178>)
   213c2:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   213c4:	2388      	movs	r3, #136	; 0x88
   213c6:	015b      	lsls	r3, r3, #5
   213c8:	2100      	movs	r1, #0
   213ca:	0018      	movs	r0, r3
   213cc:	4b52      	ldr	r3, [pc, #328]	; (21518 <sd_mmc_spi_card_init+0x17c>)
   213ce:	4798      	blx	r3
   213d0:	0003      	movs	r3, r0
   213d2:	001a      	movs	r2, r3
   213d4:	2301      	movs	r3, #1
   213d6:	4053      	eors	r3, r2
   213d8:	b2db      	uxtb	r3, r3
   213da:	2b00      	cmp	r3, #0
   213dc:	d001      	beq.n	213e2 <sd_mmc_spi_card_init+0x46>
		return false;
   213de:	2300      	movs	r3, #0
   213e0:	e092      	b.n	21508 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   213e2:	1dfb      	adds	r3, r7, #7
   213e4:	0018      	movs	r0, r3
   213e6:	4b4d      	ldr	r3, [pc, #308]	; (2151c <sd_mmc_spi_card_init+0x180>)
   213e8:	4798      	blx	r3
   213ea:	0003      	movs	r3, r0
   213ec:	001a      	movs	r2, r3
   213ee:	2301      	movs	r3, #1
   213f0:	4053      	eors	r3, r2
   213f2:	b2db      	uxtb	r3, r3
   213f4:	2b00      	cmp	r3, #0
   213f6:	d001      	beq.n	213fc <sd_mmc_spi_card_init+0x60>
		return false;
   213f8:	2300      	movs	r3, #0
   213fa:	e085      	b.n	21508 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   213fc:	4b48      	ldr	r3, [pc, #288]	; (21520 <sd_mmc_spi_card_init+0x184>)
   213fe:	4798      	blx	r3
   21400:	0003      	movs	r3, r0
   21402:	001a      	movs	r2, r3
   21404:	2301      	movs	r3, #1
   21406:	4053      	eors	r3, r2
   21408:	b2db      	uxtb	r3, r3
   2140a:	2b00      	cmp	r3, #0
   2140c:	d001      	beq.n	21412 <sd_mmc_spi_card_init+0x76>
		return false;
   2140e:	2300      	movs	r3, #0
   21410:	e07a      	b.n	21508 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   21412:	4b3f      	ldr	r3, [pc, #252]	; (21510 <sd_mmc_spi_card_init+0x174>)
   21414:	681b      	ldr	r3, [r3, #0]
   21416:	7adb      	ldrb	r3, [r3, #11]
   21418:	001a      	movs	r2, r3
   2141a:	2301      	movs	r3, #1
   2141c:	4013      	ands	r3, r2
   2141e:	d021      	beq.n	21464 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   21420:	1dfb      	adds	r3, r7, #7
   21422:	781b      	ldrb	r3, [r3, #0]
   21424:	0018      	movs	r0, r3
   21426:	4b3f      	ldr	r3, [pc, #252]	; (21524 <sd_mmc_spi_card_init+0x188>)
   21428:	4798      	blx	r3
   2142a:	0003      	movs	r3, r0
   2142c:	001a      	movs	r2, r3
   2142e:	2301      	movs	r3, #1
   21430:	4053      	eors	r3, r2
   21432:	b2db      	uxtb	r3, r3
   21434:	2b00      	cmp	r3, #0
   21436:	d007      	beq.n	21448 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   21438:	4b35      	ldr	r3, [pc, #212]	; (21510 <sd_mmc_spi_card_init+0x174>)
   2143a:	681b      	ldr	r3, [r3, #0]
   2143c:	2202      	movs	r2, #2
   2143e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   21440:	4b39      	ldr	r3, [pc, #228]	; (21528 <sd_mmc_spi_card_init+0x18c>)
   21442:	4798      	blx	r3
   21444:	0003      	movs	r3, r0
   21446:	e05f      	b.n	21508 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   21448:	4b38      	ldr	r3, [pc, #224]	; (2152c <sd_mmc_spi_card_init+0x190>)
   2144a:	2100      	movs	r1, #0
   2144c:	0018      	movs	r0, r3
   2144e:	4b32      	ldr	r3, [pc, #200]	; (21518 <sd_mmc_spi_card_init+0x17c>)
   21450:	4798      	blx	r3
   21452:	0003      	movs	r3, r0
   21454:	001a      	movs	r2, r3
   21456:	2301      	movs	r3, #1
   21458:	4053      	eors	r3, r2
   2145a:	b2db      	uxtb	r3, r3
   2145c:	2b00      	cmp	r3, #0
   2145e:	d001      	beq.n	21464 <sd_mmc_spi_card_init+0xc8>
			return false;
   21460:	2300      	movs	r3, #0
   21462:	e051      	b.n	21508 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   21464:	4b2a      	ldr	r3, [pc, #168]	; (21510 <sd_mmc_spi_card_init+0x174>)
   21466:	681b      	ldr	r3, [r3, #0]
   21468:	7adb      	ldrb	r3, [r3, #11]
   2146a:	001a      	movs	r2, r3
   2146c:	2301      	movs	r3, #1
   2146e:	4013      	ands	r3, r2
   21470:	d017      	beq.n	214a2 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   21472:	4b2f      	ldr	r3, [pc, #188]	; (21530 <sd_mmc_spi_card_init+0x194>)
   21474:	4798      	blx	r3
   21476:	0003      	movs	r3, r0
   21478:	001a      	movs	r2, r3
   2147a:	2301      	movs	r3, #1
   2147c:	4053      	eors	r3, r2
   2147e:	b2db      	uxtb	r3, r3
   21480:	2b00      	cmp	r3, #0
   21482:	d001      	beq.n	21488 <sd_mmc_spi_card_init+0xec>
			return false;
   21484:	2300      	movs	r3, #0
   21486:	e03f      	b.n	21508 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   21488:	4b2a      	ldr	r3, [pc, #168]	; (21534 <sd_mmc_spi_card_init+0x198>)
   2148a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   2148c:	4b2a      	ldr	r3, [pc, #168]	; (21538 <sd_mmc_spi_card_init+0x19c>)
   2148e:	4798      	blx	r3
   21490:	0003      	movs	r3, r0
   21492:	001a      	movs	r2, r3
   21494:	2301      	movs	r3, #1
   21496:	4053      	eors	r3, r2
   21498:	b2db      	uxtb	r3, r3
   2149a:	2b00      	cmp	r3, #0
   2149c:	d001      	beq.n	214a2 <sd_mmc_spi_card_init+0x106>
			return false;
   2149e:	2300      	movs	r3, #0
   214a0:	e032      	b.n	21508 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   214a2:	4b1b      	ldr	r3, [pc, #108]	; (21510 <sd_mmc_spi_card_init+0x174>)
   214a4:	681b      	ldr	r3, [r3, #0]
   214a6:	7adb      	ldrb	r3, [r3, #11]
   214a8:	001a      	movs	r2, r3
   214aa:	2301      	movs	r3, #1
   214ac:	4013      	ands	r3, r2
   214ae:	d016      	beq.n	214de <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   214b0:	4b17      	ldr	r3, [pc, #92]	; (21510 <sd_mmc_spi_card_init+0x174>)
   214b2:	681b      	ldr	r3, [r3, #0]
   214b4:	7adb      	ldrb	r3, [r3, #11]
   214b6:	001a      	movs	r2, r3
   214b8:	2308      	movs	r3, #8
   214ba:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   214bc:	d10f      	bne.n	214de <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   214be:	2380      	movs	r3, #128	; 0x80
   214c0:	009b      	lsls	r3, r3, #2
   214c2:	4a1e      	ldr	r2, [pc, #120]	; (2153c <sd_mmc_spi_card_init+0x1a0>)
   214c4:	0019      	movs	r1, r3
   214c6:	0010      	movs	r0, r2
   214c8:	4b13      	ldr	r3, [pc, #76]	; (21518 <sd_mmc_spi_card_init+0x17c>)
   214ca:	4798      	blx	r3
   214cc:	0003      	movs	r3, r0
   214ce:	001a      	movs	r2, r3
   214d0:	2301      	movs	r3, #1
   214d2:	4053      	eors	r3, r2
   214d4:	b2db      	uxtb	r3, r3
   214d6:	2b00      	cmp	r3, #0
   214d8:	d001      	beq.n	214de <sd_mmc_spi_card_init+0x142>
			return false;
   214da:	2300      	movs	r3, #0
   214dc:	e014      	b.n	21508 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   214de:	4b0c      	ldr	r3, [pc, #48]	; (21510 <sd_mmc_spi_card_init+0x174>)
   214e0:	681b      	ldr	r3, [r3, #0]
   214e2:	7adb      	ldrb	r3, [r3, #11]
   214e4:	001a      	movs	r2, r3
   214e6:	2301      	movs	r3, #1
   214e8:	4013      	ands	r3, r2
   214ea:	d00a      	beq.n	21502 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   214ec:	4b14      	ldr	r3, [pc, #80]	; (21540 <sd_mmc_spi_card_init+0x1a4>)
   214ee:	4798      	blx	r3
   214f0:	0003      	movs	r3, r0
   214f2:	001a      	movs	r2, r3
   214f4:	2301      	movs	r3, #1
   214f6:	4053      	eors	r3, r2
   214f8:	b2db      	uxtb	r3, r3
   214fa:	2b00      	cmp	r3, #0
   214fc:	d001      	beq.n	21502 <sd_mmc_spi_card_init+0x166>
			return false;
   214fe:	2300      	movs	r3, #0
   21500:	e002      	b.n	21508 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   21502:	4b10      	ldr	r3, [pc, #64]	; (21544 <sd_mmc_spi_card_init+0x1a8>)
   21504:	4798      	blx	r3
	return true;
   21506:	2301      	movs	r3, #1
}
   21508:	0018      	movs	r0, r3
   2150a:	46bd      	mov	sp, r7
   2150c:	b002      	add	sp, #8
   2150e:	bd80      	pop	{r7, pc}
   21510:	20004170 	.word	0x20004170
   21514:	00022585 	.word	0x00022585
   21518:	000225d1 	.word	0x000225d1
   2151c:	00020cf1 	.word	0x00020cf1
   21520:	00020ce5 	.word	0x00020ce5
   21524:	00020c01 	.word	0x00020c01
   21528:	00021549 	.word	0x00021549
   2152c:	0000113b 	.word	0x0000113b
   21530:	00020e8d 	.word	0x00020e8d
   21534:	0002102d 	.word	0x0002102d
   21538:	00021175 	.word	0x00021175
   2153c:	00001110 	.word	0x00001110
   21540:	00021119 	.word	0x00021119
   21544:	00021341 	.word	0x00021341

00021548 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   21548:	b580      	push	{r7, lr}
   2154a:	b082      	sub	sp, #8
   2154c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   2154e:	2388      	movs	r3, #136	; 0x88
   21550:	015b      	lsls	r3, r3, #5
   21552:	2100      	movs	r1, #0
   21554:	0018      	movs	r0, r3
   21556:	4b32      	ldr	r3, [pc, #200]	; (21620 <sd_mmc_spi_install_mmc+0xd8>)
   21558:	4798      	blx	r3
   2155a:	0003      	movs	r3, r0
   2155c:	001a      	movs	r2, r3
   2155e:	2301      	movs	r3, #1
   21560:	4053      	eors	r3, r2
   21562:	b2db      	uxtb	r3, r3
   21564:	2b00      	cmp	r3, #0
   21566:	d001      	beq.n	2156c <sd_mmc_spi_install_mmc+0x24>
		return false;
   21568:	2300      	movs	r3, #0
   2156a:	e055      	b.n	21618 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   2156c:	4b2d      	ldr	r3, [pc, #180]	; (21624 <sd_mmc_spi_install_mmc+0xdc>)
   2156e:	4798      	blx	r3
   21570:	0003      	movs	r3, r0
   21572:	001a      	movs	r2, r3
   21574:	2301      	movs	r3, #1
   21576:	4053      	eors	r3, r2
   21578:	b2db      	uxtb	r3, r3
   2157a:	2b00      	cmp	r3, #0
   2157c:	d001      	beq.n	21582 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   2157e:	2300      	movs	r3, #0
   21580:	e04a      	b.n	21618 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   21582:	4b29      	ldr	r3, [pc, #164]	; (21628 <sd_mmc_spi_install_mmc+0xe0>)
   21584:	2100      	movs	r1, #0
   21586:	0018      	movs	r0, r3
   21588:	4b25      	ldr	r3, [pc, #148]	; (21620 <sd_mmc_spi_install_mmc+0xd8>)
   2158a:	4798      	blx	r3
   2158c:	0003      	movs	r3, r0
   2158e:	001a      	movs	r2, r3
   21590:	2301      	movs	r3, #1
   21592:	4053      	eors	r3, r2
   21594:	b2db      	uxtb	r3, r3
   21596:	2b00      	cmp	r3, #0
   21598:	d001      	beq.n	2159e <sd_mmc_spi_install_mmc+0x56>
		return false;
   2159a:	2300      	movs	r3, #0
   2159c:	e03c      	b.n	21618 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   2159e:	4b23      	ldr	r3, [pc, #140]	; (2162c <sd_mmc_spi_install_mmc+0xe4>)
   215a0:	4798      	blx	r3
   215a2:	0003      	movs	r3, r0
   215a4:	001a      	movs	r2, r3
   215a6:	2301      	movs	r3, #1
   215a8:	4053      	eors	r3, r2
   215aa:	b2db      	uxtb	r3, r3
   215ac:	2b00      	cmp	r3, #0
   215ae:	d001      	beq.n	215b4 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   215b0:	2300      	movs	r3, #0
   215b2:	e031      	b.n	21618 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   215b4:	4b1e      	ldr	r3, [pc, #120]	; (21630 <sd_mmc_spi_install_mmc+0xe8>)
   215b6:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   215b8:	4b1e      	ldr	r3, [pc, #120]	; (21634 <sd_mmc_spi_install_mmc+0xec>)
   215ba:	681b      	ldr	r3, [r3, #0]
   215bc:	7b1b      	ldrb	r3, [r3, #12]
   215be:	2b3f      	cmp	r3, #63	; 0x3f
   215c0:	d90c      	bls.n	215dc <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   215c2:	1dfb      	adds	r3, r7, #7
   215c4:	0018      	movs	r0, r3
   215c6:	4b1c      	ldr	r3, [pc, #112]	; (21638 <sd_mmc_spi_install_mmc+0xf0>)
   215c8:	4798      	blx	r3
   215ca:	0003      	movs	r3, r0
   215cc:	001a      	movs	r2, r3
   215ce:	2301      	movs	r3, #1
   215d0:	4053      	eors	r3, r2
   215d2:	b2db      	uxtb	r3, r3
   215d4:	2b00      	cmp	r3, #0
   215d6:	d001      	beq.n	215dc <sd_mmc_spi_install_mmc+0x94>
			return false;
   215d8:	2300      	movs	r3, #0
   215da:	e01d      	b.n	21618 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   215dc:	2380      	movs	r3, #128	; 0x80
   215de:	009b      	lsls	r3, r3, #2
   215e0:	4a16      	ldr	r2, [pc, #88]	; (2163c <sd_mmc_spi_install_mmc+0xf4>)
   215e2:	0019      	movs	r1, r3
   215e4:	0010      	movs	r0, r2
   215e6:	4b0e      	ldr	r3, [pc, #56]	; (21620 <sd_mmc_spi_install_mmc+0xd8>)
   215e8:	4798      	blx	r3
   215ea:	0003      	movs	r3, r0
   215ec:	001a      	movs	r2, r3
   215ee:	2301      	movs	r3, #1
   215f0:	4053      	eors	r3, r2
   215f2:	b2db      	uxtb	r3, r3
   215f4:	2b00      	cmp	r3, #0
   215f6:	d001      	beq.n	215fc <sd_mmc_spi_install_mmc+0xb4>
		return false;
   215f8:	2300      	movs	r3, #0
   215fa:	e00d      	b.n	21618 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   215fc:	4b10      	ldr	r3, [pc, #64]	; (21640 <sd_mmc_spi_install_mmc+0xf8>)
   215fe:	4798      	blx	r3
   21600:	0003      	movs	r3, r0
   21602:	001a      	movs	r2, r3
   21604:	2301      	movs	r3, #1
   21606:	4053      	eors	r3, r2
   21608:	b2db      	uxtb	r3, r3
   2160a:	2b00      	cmp	r3, #0
   2160c:	d001      	beq.n	21612 <sd_mmc_spi_install_mmc+0xca>
		return false;
   2160e:	2300      	movs	r3, #0
   21610:	e002      	b.n	21618 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   21612:	4b0c      	ldr	r3, [pc, #48]	; (21644 <sd_mmc_spi_install_mmc+0xfc>)
   21614:	4798      	blx	r3
	return true;
   21616:	2301      	movs	r3, #1
}
   21618:	0018      	movs	r0, r3
   2161a:	46bd      	mov	sp, r7
   2161c:	b002      	add	sp, #8
   2161e:	bd80      	pop	{r7, pc}
   21620:	000225d1 	.word	0x000225d1
   21624:	00020b55 	.word	0x00020b55
   21628:	0000113b 	.word	0x0000113b
   2162c:	00020e8d 	.word	0x00020e8d
   21630:	00020efd 	.word	0x00020efd
   21634:	20004170 	.word	0x20004170
   21638:	00020d61 	.word	0x00020d61
   2163c:	00001110 	.word	0x00001110
   21640:	00021119 	.word	0x00021119
   21644:	00021341 	.word	0x00021341

00021648 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   21648:	b580      	push	{r7, lr}
   2164a:	b082      	sub	sp, #8
   2164c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   2164e:	1dfb      	adds	r3, r7, #7
   21650:	2200      	movs	r2, #0
   21652:	701a      	strb	r2, [r3, #0]
   21654:	e00c      	b.n	21670 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   21656:	1dfb      	adds	r3, r7, #7
   21658:	781b      	ldrb	r3, [r3, #0]
   2165a:	4a0c      	ldr	r2, [pc, #48]	; (2168c <sd_mmc_init+0x44>)
   2165c:	015b      	lsls	r3, r3, #5
   2165e:	18d3      	adds	r3, r2, r3
   21660:	330a      	adds	r3, #10
   21662:	2204      	movs	r2, #4
   21664:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   21666:	1dfb      	adds	r3, r7, #7
   21668:	781a      	ldrb	r2, [r3, #0]
   2166a:	1dfb      	adds	r3, r7, #7
   2166c:	3201      	adds	r2, #1
   2166e:	701a      	strb	r2, [r3, #0]
   21670:	1dfb      	adds	r3, r7, #7
   21672:	781b      	ldrb	r3, [r3, #0]
   21674:	2b00      	cmp	r3, #0
   21676:	d0ee      	beq.n	21656 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   21678:	4b05      	ldr	r3, [pc, #20]	; (21690 <sd_mmc_init+0x48>)
   2167a:	22ff      	movs	r2, #255	; 0xff
   2167c:	701a      	strb	r2, [r3, #0]
	driver_init();
   2167e:	4b05      	ldr	r3, [pc, #20]	; (21694 <sd_mmc_init+0x4c>)
   21680:	4798      	blx	r3
}
   21682:	46c0      	nop			; (mov r8, r8)
   21684:	46bd      	mov	sp, r7
   21686:	b002      	add	sp, #8
   21688:	bd80      	pop	{r7, pc}
   2168a:	46c0      	nop			; (mov r8, r8)
   2168c:	2000414c 	.word	0x2000414c
   21690:	2000416c 	.word	0x2000416c
   21694:	000223f1 	.word	0x000223f1

00021698 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   21698:	b590      	push	{r4, r7, lr}
   2169a:	b085      	sub	sp, #20
   2169c:	af00      	add	r7, sp, #0
   2169e:	0002      	movs	r2, r0
   216a0:	1dfb      	adds	r3, r7, #7
   216a2:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   216a4:	230f      	movs	r3, #15
   216a6:	18fc      	adds	r4, r7, r3
   216a8:	1dfb      	adds	r3, r7, #7
   216aa:	781b      	ldrb	r3, [r3, #0]
   216ac:	0018      	movs	r0, r3
   216ae:	4b13      	ldr	r3, [pc, #76]	; (216fc <sd_mmc_check+0x64>)
   216b0:	4798      	blx	r3
   216b2:	0003      	movs	r3, r0
   216b4:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   216b6:	230f      	movs	r3, #15
   216b8:	18fb      	adds	r3, r7, r3
   216ba:	781b      	ldrb	r3, [r3, #0]
   216bc:	2b01      	cmp	r3, #1
   216be:	d005      	beq.n	216cc <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   216c0:	4b0f      	ldr	r3, [pc, #60]	; (21700 <sd_mmc_check+0x68>)
   216c2:	4798      	blx	r3
		return sd_mmc_err;
   216c4:	230f      	movs	r3, #15
   216c6:	18fb      	adds	r3, r7, r3
   216c8:	781b      	ldrb	r3, [r3, #0]
   216ca:	e012      	b.n	216f2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   216cc:	4b0d      	ldr	r3, [pc, #52]	; (21704 <sd_mmc_check+0x6c>)
   216ce:	4798      	blx	r3
   216d0:	1e03      	subs	r3, r0, #0
   216d2:	d007      	beq.n	216e4 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   216d4:	4b0c      	ldr	r3, [pc, #48]	; (21708 <sd_mmc_check+0x70>)
   216d6:	681b      	ldr	r3, [r3, #0]
   216d8:	2200      	movs	r2, #0
   216da:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   216dc:	4b08      	ldr	r3, [pc, #32]	; (21700 <sd_mmc_check+0x68>)
   216de:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   216e0:	2301      	movs	r3, #1
   216e2:	e006      	b.n	216f2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   216e4:	4b08      	ldr	r3, [pc, #32]	; (21708 <sd_mmc_check+0x70>)
   216e6:	681b      	ldr	r3, [r3, #0]
   216e8:	2203      	movs	r2, #3
   216ea:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   216ec:	4b04      	ldr	r3, [pc, #16]	; (21700 <sd_mmc_check+0x68>)
   216ee:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   216f0:	2303      	movs	r3, #3
}
   216f2:	0018      	movs	r0, r3
   216f4:	46bd      	mov	sp, r7
   216f6:	b005      	add	sp, #20
   216f8:	bd90      	pop	{r4, r7, pc}
   216fa:	46c0      	nop			; (mov r8, r8)
   216fc:	0002127d 	.word	0x0002127d
   21700:	00021379 	.word	0x00021379
   21704:	0002139d 	.word	0x0002139d
   21708:	20004170 	.word	0x20004170

0002170c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   2170c:	b580      	push	{r7, lr}
   2170e:	b082      	sub	sp, #8
   21710:	af00      	add	r7, sp, #0
   21712:	0002      	movs	r2, r0
   21714:	1dfb      	adds	r3, r7, #7
   21716:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   21718:	1dfb      	adds	r3, r7, #7
   2171a:	781b      	ldrb	r3, [r3, #0]
   2171c:	0018      	movs	r0, r3
   2171e:	4b07      	ldr	r3, [pc, #28]	; (2173c <sd_mmc_get_type+0x30>)
   21720:	4798      	blx	r3
   21722:	1e03      	subs	r3, r0, #0
   21724:	d001      	beq.n	2172a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   21726:	2300      	movs	r3, #0
   21728:	e004      	b.n	21734 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   2172a:	4b05      	ldr	r3, [pc, #20]	; (21740 <sd_mmc_get_type+0x34>)
   2172c:	4798      	blx	r3
	return sd_mmc_card->type;
   2172e:	4b05      	ldr	r3, [pc, #20]	; (21744 <sd_mmc_get_type+0x38>)
   21730:	681b      	ldr	r3, [r3, #0]
   21732:	7adb      	ldrb	r3, [r3, #11]
}
   21734:	0018      	movs	r0, r3
   21736:	46bd      	mov	sp, r7
   21738:	b002      	add	sp, #8
   2173a:	bd80      	pop	{r7, pc}
   2173c:	0002127d 	.word	0x0002127d
   21740:	00021379 	.word	0x00021379
   21744:	20004170 	.word	0x20004170

00021748 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   21748:	b580      	push	{r7, lr}
   2174a:	b082      	sub	sp, #8
   2174c:	af00      	add	r7, sp, #0
   2174e:	0002      	movs	r2, r0
   21750:	1dfb      	adds	r3, r7, #7
   21752:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   21754:	1dfb      	adds	r3, r7, #7
   21756:	781b      	ldrb	r3, [r3, #0]
   21758:	0018      	movs	r0, r3
   2175a:	4b07      	ldr	r3, [pc, #28]	; (21778 <sd_mmc_get_capacity+0x30>)
   2175c:	4798      	blx	r3
   2175e:	1e03      	subs	r3, r0, #0
   21760:	d001      	beq.n	21766 <sd_mmc_get_capacity+0x1e>
		return 0;
   21762:	2300      	movs	r3, #0
   21764:	e004      	b.n	21770 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   21766:	4b05      	ldr	r3, [pc, #20]	; (2177c <sd_mmc_get_capacity+0x34>)
   21768:	4798      	blx	r3
	return sd_mmc_card->capacity;
   2176a:	4b05      	ldr	r3, [pc, #20]	; (21780 <sd_mmc_get_capacity+0x38>)
   2176c:	681b      	ldr	r3, [r3, #0]
   2176e:	685b      	ldr	r3, [r3, #4]
}
   21770:	0018      	movs	r0, r3
   21772:	46bd      	mov	sp, r7
   21774:	b002      	add	sp, #8
   21776:	bd80      	pop	{r7, pc}
   21778:	0002127d 	.word	0x0002127d
   2177c:	00021379 	.word	0x00021379
   21780:	20004170 	.word	0x20004170

00021784 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   21784:	b580      	push	{r7, lr}
   21786:	b082      	sub	sp, #8
   21788:	af00      	add	r7, sp, #0
   2178a:	0002      	movs	r2, r0
   2178c:	1dfb      	adds	r3, r7, #7
   2178e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   21790:	2300      	movs	r3, #0
}
   21792:	0018      	movs	r0, r3
   21794:	46bd      	mov	sp, r7
   21796:	b002      	add	sp, #8
   21798:	bd80      	pop	{r7, pc}
	...

0002179c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   2179c:	b590      	push	{r4, r7, lr}
   2179e:	b089      	sub	sp, #36	; 0x24
   217a0:	af02      	add	r7, sp, #8
   217a2:	6039      	str	r1, [r7, #0]
   217a4:	0011      	movs	r1, r2
   217a6:	1dfb      	adds	r3, r7, #7
   217a8:	1c02      	adds	r2, r0, #0
   217aa:	701a      	strb	r2, [r3, #0]
   217ac:	1d3b      	adds	r3, r7, #4
   217ae:	1c0a      	adds	r2, r1, #0
   217b0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   217b2:	230f      	movs	r3, #15
   217b4:	18fc      	adds	r4, r7, r3
   217b6:	1dfb      	adds	r3, r7, #7
   217b8:	781b      	ldrb	r3, [r3, #0]
   217ba:	0018      	movs	r0, r3
   217bc:	4b29      	ldr	r3, [pc, #164]	; (21864 <sd_mmc_init_read_blocks+0xc8>)
   217be:	4798      	blx	r3
   217c0:	0003      	movs	r3, r0
   217c2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   217c4:	230f      	movs	r3, #15
   217c6:	18fb      	adds	r3, r7, r3
   217c8:	781b      	ldrb	r3, [r3, #0]
   217ca:	2b00      	cmp	r3, #0
   217cc:	d003      	beq.n	217d6 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   217ce:	230f      	movs	r3, #15
   217d0:	18fb      	adds	r3, r7, r3
   217d2:	781b      	ldrb	r3, [r3, #0]
   217d4:	e041      	b.n	2185a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   217d6:	4b24      	ldr	r3, [pc, #144]	; (21868 <sd_mmc_init_read_blocks+0xcc>)
   217d8:	4798      	blx	r3
   217da:	0003      	movs	r3, r0
   217dc:	001a      	movs	r2, r3
   217de:	2301      	movs	r3, #1
   217e0:	4053      	eors	r3, r2
   217e2:	b2db      	uxtb	r3, r3
   217e4:	2b00      	cmp	r3, #0
   217e6:	d003      	beq.n	217f0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   217e8:	4b20      	ldr	r3, [pc, #128]	; (2186c <sd_mmc_init_read_blocks+0xd0>)
   217ea:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   217ec:	2305      	movs	r3, #5
   217ee:	e034      	b.n	2185a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   217f0:	1d3b      	adds	r3, r7, #4
   217f2:	881b      	ldrh	r3, [r3, #0]
   217f4:	2b01      	cmp	r3, #1
   217f6:	d902      	bls.n	217fe <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   217f8:	4b1d      	ldr	r3, [pc, #116]	; (21870 <sd_mmc_init_read_blocks+0xd4>)
   217fa:	617b      	str	r3, [r7, #20]
   217fc:	e001      	b.n	21802 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   217fe:	4b1d      	ldr	r3, [pc, #116]	; (21874 <sd_mmc_init_read_blocks+0xd8>)
   21800:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   21802:	4b1d      	ldr	r3, [pc, #116]	; (21878 <sd_mmc_init_read_blocks+0xdc>)
   21804:	681b      	ldr	r3, [r3, #0]
   21806:	7adb      	ldrb	r3, [r3, #11]
   21808:	001a      	movs	r2, r3
   2180a:	2308      	movs	r3, #8
   2180c:	4013      	ands	r3, r2
   2180e:	d002      	beq.n	21816 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   21810:	683b      	ldr	r3, [r7, #0]
   21812:	613b      	str	r3, [r7, #16]
   21814:	e002      	b.n	2181c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   21816:	683b      	ldr	r3, [r7, #0]
   21818:	025b      	lsls	r3, r3, #9
   2181a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   2181c:	1d3b      	adds	r3, r7, #4
   2181e:	881c      	ldrh	r4, [r3, #0]
   21820:	2380      	movs	r3, #128	; 0x80
   21822:	009a      	lsls	r2, r3, #2
   21824:	6939      	ldr	r1, [r7, #16]
   21826:	6978      	ldr	r0, [r7, #20]
   21828:	2301      	movs	r3, #1
   2182a:	9300      	str	r3, [sp, #0]
   2182c:	0023      	movs	r3, r4
   2182e:	4c13      	ldr	r4, [pc, #76]	; (2187c <sd_mmc_init_read_blocks+0xe0>)
   21830:	47a0      	blx	r4
   21832:	0003      	movs	r3, r0
   21834:	001a      	movs	r2, r3
   21836:	2301      	movs	r3, #1
   21838:	4053      	eors	r3, r2
   2183a:	b2db      	uxtb	r3, r3
   2183c:	2b00      	cmp	r3, #0
   2183e:	d003      	beq.n	21848 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   21840:	4b0a      	ldr	r3, [pc, #40]	; (2186c <sd_mmc_init_read_blocks+0xd0>)
   21842:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   21844:	2305      	movs	r3, #5
   21846:	e008      	b.n	2185a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   21848:	4b0d      	ldr	r3, [pc, #52]	; (21880 <sd_mmc_init_read_blocks+0xe4>)
   2184a:	1d3a      	adds	r2, r7, #4
   2184c:	8812      	ldrh	r2, [r2, #0]
   2184e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   21850:	4b0c      	ldr	r3, [pc, #48]	; (21884 <sd_mmc_init_read_blocks+0xe8>)
   21852:	1d3a      	adds	r2, r7, #4
   21854:	8812      	ldrh	r2, [r2, #0]
   21856:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   21858:	2300      	movs	r3, #0
}
   2185a:	0018      	movs	r0, r3
   2185c:	46bd      	mov	sp, r7
   2185e:	b007      	add	sp, #28
   21860:	bd90      	pop	{r4, r7, pc}
   21862:	46c0      	nop			; (mov r8, r8)
   21864:	0002127d 	.word	0x0002127d
   21868:	00021119 	.word	0x00021119
   2186c:	00021379 	.word	0x00021379
   21870:	00101112 	.word	0x00101112
   21874:	00081111 	.word	0x00081111
   21878:	20004170 	.word	0x20004170
   2187c:	000225f9 	.word	0x000225f9
   21880:	20004176 	.word	0x20004176
   21884:	20004174 	.word	0x20004174

00021888 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   21888:	b580      	push	{r7, lr}
   2188a:	b082      	sub	sp, #8
   2188c:	af00      	add	r7, sp, #0
   2188e:	6078      	str	r0, [r7, #4]
   21890:	000a      	movs	r2, r1
   21892:	1cbb      	adds	r3, r7, #2
   21894:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   21896:	1cbb      	adds	r3, r7, #2
   21898:	881a      	ldrh	r2, [r3, #0]
   2189a:	687b      	ldr	r3, [r7, #4]
   2189c:	0011      	movs	r1, r2
   2189e:	0018      	movs	r0, r3
   218a0:	4b0d      	ldr	r3, [pc, #52]	; (218d8 <sd_mmc_start_read_blocks+0x50>)
   218a2:	4798      	blx	r3
   218a4:	0003      	movs	r3, r0
   218a6:	001a      	movs	r2, r3
   218a8:	2301      	movs	r3, #1
   218aa:	4053      	eors	r3, r2
   218ac:	b2db      	uxtb	r3, r3
   218ae:	2b00      	cmp	r3, #0
   218b0:	d004      	beq.n	218bc <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   218b2:	4b0a      	ldr	r3, [pc, #40]	; (218dc <sd_mmc_start_read_blocks+0x54>)
   218b4:	2200      	movs	r2, #0
   218b6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   218b8:	2305      	movs	r3, #5
   218ba:	e008      	b.n	218ce <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   218bc:	4b07      	ldr	r3, [pc, #28]	; (218dc <sd_mmc_start_read_blocks+0x54>)
   218be:	881a      	ldrh	r2, [r3, #0]
   218c0:	1cbb      	adds	r3, r7, #2
   218c2:	881b      	ldrh	r3, [r3, #0]
   218c4:	1ad3      	subs	r3, r2, r3
   218c6:	b29a      	uxth	r2, r3
   218c8:	4b04      	ldr	r3, [pc, #16]	; (218dc <sd_mmc_start_read_blocks+0x54>)
   218ca:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   218cc:	2300      	movs	r3, #0
}
   218ce:	0018      	movs	r0, r3
   218d0:	46bd      	mov	sp, r7
   218d2:	b002      	add	sp, #8
   218d4:	bd80      	pop	{r7, pc}
   218d6:	46c0      	nop			; (mov r8, r8)
   218d8:	000228c9 	.word	0x000228c9
   218dc:	20004176 	.word	0x20004176

000218e0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   218e0:	b580      	push	{r7, lr}
   218e2:	b082      	sub	sp, #8
   218e4:	af00      	add	r7, sp, #0
   218e6:	0002      	movs	r2, r0
   218e8:	1dfb      	adds	r3, r7, #7
   218ea:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   218ec:	4b1c      	ldr	r3, [pc, #112]	; (21960 <sd_mmc_wait_end_of_read_blocks+0x80>)
   218ee:	4798      	blx	r3
   218f0:	0003      	movs	r3, r0
   218f2:	001a      	movs	r2, r3
   218f4:	2301      	movs	r3, #1
   218f6:	4053      	eors	r3, r2
   218f8:	b2db      	uxtb	r3, r3
   218fa:	2b00      	cmp	r3, #0
   218fc:	d001      	beq.n	21902 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   218fe:	2305      	movs	r3, #5
   21900:	e029      	b.n	21956 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   21902:	1dfb      	adds	r3, r7, #7
   21904:	781b      	ldrb	r3, [r3, #0]
   21906:	2b00      	cmp	r3, #0
   21908:	d003      	beq.n	21912 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   2190a:	4b16      	ldr	r3, [pc, #88]	; (21964 <sd_mmc_wait_end_of_read_blocks+0x84>)
   2190c:	2200      	movs	r2, #0
   2190e:	801a      	strh	r2, [r3, #0]
   21910:	e005      	b.n	2191e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   21912:	4b14      	ldr	r3, [pc, #80]	; (21964 <sd_mmc_wait_end_of_read_blocks+0x84>)
   21914:	881b      	ldrh	r3, [r3, #0]
   21916:	2b00      	cmp	r3, #0
   21918:	d001      	beq.n	2191e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   2191a:	2300      	movs	r3, #0
   2191c:	e01b      	b.n	21956 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   2191e:	4b12      	ldr	r3, [pc, #72]	; (21968 <sd_mmc_wait_end_of_read_blocks+0x88>)
   21920:	881b      	ldrh	r3, [r3, #0]
   21922:	2b01      	cmp	r3, #1
   21924:	d103      	bne.n	2192e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   21926:	4b11      	ldr	r3, [pc, #68]	; (2196c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   21928:	4798      	blx	r3
		return SD_MMC_OK;
   2192a:	2300      	movs	r3, #0
   2192c:	e013      	b.n	21956 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   2192e:	4b10      	ldr	r3, [pc, #64]	; (21970 <sd_mmc_wait_end_of_read_blocks+0x90>)
   21930:	2100      	movs	r1, #0
   21932:	0018      	movs	r0, r3
   21934:	4b0f      	ldr	r3, [pc, #60]	; (21974 <sd_mmc_wait_end_of_read_blocks+0x94>)
   21936:	4798      	blx	r3
   21938:	0003      	movs	r3, r0
   2193a:	001a      	movs	r2, r3
   2193c:	2301      	movs	r3, #1
   2193e:	4053      	eors	r3, r2
   21940:	b2db      	uxtb	r3, r3
   21942:	2b00      	cmp	r3, #0
   21944:	d004      	beq.n	21950 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   21946:	4b0a      	ldr	r3, [pc, #40]	; (21970 <sd_mmc_wait_end_of_read_blocks+0x90>)
   21948:	2100      	movs	r1, #0
   2194a:	0018      	movs	r0, r3
   2194c:	4b09      	ldr	r3, [pc, #36]	; (21974 <sd_mmc_wait_end_of_read_blocks+0x94>)
   2194e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   21950:	4b06      	ldr	r3, [pc, #24]	; (2196c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   21952:	4798      	blx	r3
	return SD_MMC_OK;
   21954:	2300      	movs	r3, #0
}
   21956:	0018      	movs	r0, r3
   21958:	46bd      	mov	sp, r7
   2195a:	b002      	add	sp, #8
   2195c:	bd80      	pop	{r7, pc}
   2195e:	46c0      	nop			; (mov r8, r8)
   21960:	0002296d 	.word	0x0002296d
   21964:	20004176 	.word	0x20004176
   21968:	20004174 	.word	0x20004174
   2196c:	00021379 	.word	0x00021379
   21970:	0000310c 	.word	0x0000310c
   21974:	000225d1 	.word	0x000225d1

00021978 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   21978:	b590      	push	{r4, r7, lr}
   2197a:	b089      	sub	sp, #36	; 0x24
   2197c:	af02      	add	r7, sp, #8
   2197e:	6039      	str	r1, [r7, #0]
   21980:	0011      	movs	r1, r2
   21982:	1dfb      	adds	r3, r7, #7
   21984:	1c02      	adds	r2, r0, #0
   21986:	701a      	strb	r2, [r3, #0]
   21988:	1d3b      	adds	r3, r7, #4
   2198a:	1c0a      	adds	r2, r1, #0
   2198c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   2198e:	230f      	movs	r3, #15
   21990:	18fc      	adds	r4, r7, r3
   21992:	1dfb      	adds	r3, r7, #7
   21994:	781b      	ldrb	r3, [r3, #0]
   21996:	0018      	movs	r0, r3
   21998:	4b28      	ldr	r3, [pc, #160]	; (21a3c <sd_mmc_init_write_blocks+0xc4>)
   2199a:	4798      	blx	r3
   2199c:	0003      	movs	r3, r0
   2199e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   219a0:	230f      	movs	r3, #15
   219a2:	18fb      	adds	r3, r7, r3
   219a4:	781b      	ldrb	r3, [r3, #0]
   219a6:	2b00      	cmp	r3, #0
   219a8:	d003      	beq.n	219b2 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   219aa:	230f      	movs	r3, #15
   219ac:	18fb      	adds	r3, r7, r3
   219ae:	781b      	ldrb	r3, [r3, #0]
   219b0:	e03f      	b.n	21a32 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   219b2:	1dfb      	adds	r3, r7, #7
   219b4:	781b      	ldrb	r3, [r3, #0]
   219b6:	0018      	movs	r0, r3
   219b8:	4b21      	ldr	r3, [pc, #132]	; (21a40 <sd_mmc_init_write_blocks+0xc8>)
   219ba:	4798      	blx	r3
   219bc:	1e03      	subs	r3, r0, #0
   219be:	d003      	beq.n	219c8 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   219c0:	4b20      	ldr	r3, [pc, #128]	; (21a44 <sd_mmc_init_write_blocks+0xcc>)
   219c2:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   219c4:	2307      	movs	r3, #7
   219c6:	e034      	b.n	21a32 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   219c8:	1d3b      	adds	r3, r7, #4
   219ca:	881b      	ldrh	r3, [r3, #0]
   219cc:	2b01      	cmp	r3, #1
   219ce:	d902      	bls.n	219d6 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   219d0:	4b1d      	ldr	r3, [pc, #116]	; (21a48 <sd_mmc_init_write_blocks+0xd0>)
   219d2:	617b      	str	r3, [r7, #20]
   219d4:	e001      	b.n	219da <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   219d6:	4b1d      	ldr	r3, [pc, #116]	; (21a4c <sd_mmc_init_write_blocks+0xd4>)
   219d8:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   219da:	4b1d      	ldr	r3, [pc, #116]	; (21a50 <sd_mmc_init_write_blocks+0xd8>)
   219dc:	681b      	ldr	r3, [r3, #0]
   219de:	7adb      	ldrb	r3, [r3, #11]
   219e0:	001a      	movs	r2, r3
   219e2:	2308      	movs	r3, #8
   219e4:	4013      	ands	r3, r2
   219e6:	d002      	beq.n	219ee <sd_mmc_init_write_blocks+0x76>
		arg = start;
   219e8:	683b      	ldr	r3, [r7, #0]
   219ea:	613b      	str	r3, [r7, #16]
   219ec:	e002      	b.n	219f4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   219ee:	683b      	ldr	r3, [r7, #0]
   219f0:	025b      	lsls	r3, r3, #9
   219f2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   219f4:	1d3b      	adds	r3, r7, #4
   219f6:	881c      	ldrh	r4, [r3, #0]
   219f8:	2380      	movs	r3, #128	; 0x80
   219fa:	009a      	lsls	r2, r3, #2
   219fc:	6939      	ldr	r1, [r7, #16]
   219fe:	6978      	ldr	r0, [r7, #20]
   21a00:	2301      	movs	r3, #1
   21a02:	9300      	str	r3, [sp, #0]
   21a04:	0023      	movs	r3, r4
   21a06:	4c13      	ldr	r4, [pc, #76]	; (21a54 <sd_mmc_init_write_blocks+0xdc>)
   21a08:	47a0      	blx	r4
   21a0a:	0003      	movs	r3, r0
   21a0c:	001a      	movs	r2, r3
   21a0e:	2301      	movs	r3, #1
   21a10:	4053      	eors	r3, r2
   21a12:	b2db      	uxtb	r3, r3
   21a14:	2b00      	cmp	r3, #0
   21a16:	d003      	beq.n	21a20 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   21a18:	4b0a      	ldr	r3, [pc, #40]	; (21a44 <sd_mmc_init_write_blocks+0xcc>)
   21a1a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   21a1c:	2305      	movs	r3, #5
   21a1e:	e008      	b.n	21a32 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   21a20:	4b0d      	ldr	r3, [pc, #52]	; (21a58 <sd_mmc_init_write_blocks+0xe0>)
   21a22:	1d3a      	adds	r2, r7, #4
   21a24:	8812      	ldrh	r2, [r2, #0]
   21a26:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   21a28:	4b0c      	ldr	r3, [pc, #48]	; (21a5c <sd_mmc_init_write_blocks+0xe4>)
   21a2a:	1d3a      	adds	r2, r7, #4
   21a2c:	8812      	ldrh	r2, [r2, #0]
   21a2e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   21a30:	2300      	movs	r3, #0
}
   21a32:	0018      	movs	r0, r3
   21a34:	46bd      	mov	sp, r7
   21a36:	b007      	add	sp, #28
   21a38:	bd90      	pop	{r4, r7, pc}
   21a3a:	46c0      	nop			; (mov r8, r8)
   21a3c:	0002127d 	.word	0x0002127d
   21a40:	00021785 	.word	0x00021785
   21a44:	00021379 	.word	0x00021379
   21a48:	00109119 	.word	0x00109119
   21a4c:	00089118 	.word	0x00089118
   21a50:	20004170 	.word	0x20004170
   21a54:	000225f9 	.word	0x000225f9
   21a58:	20004176 	.word	0x20004176
   21a5c:	20004174 	.word	0x20004174

00021a60 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   21a60:	b580      	push	{r7, lr}
   21a62:	b082      	sub	sp, #8
   21a64:	af00      	add	r7, sp, #0
   21a66:	6078      	str	r0, [r7, #4]
   21a68:	000a      	movs	r2, r1
   21a6a:	1cbb      	adds	r3, r7, #2
   21a6c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   21a6e:	1cbb      	adds	r3, r7, #2
   21a70:	881a      	ldrh	r2, [r3, #0]
   21a72:	687b      	ldr	r3, [r7, #4]
   21a74:	0011      	movs	r1, r2
   21a76:	0018      	movs	r0, r3
   21a78:	4b0d      	ldr	r3, [pc, #52]	; (21ab0 <sd_mmc_start_write_blocks+0x50>)
   21a7a:	4798      	blx	r3
   21a7c:	0003      	movs	r3, r0
   21a7e:	001a      	movs	r2, r3
   21a80:	2301      	movs	r3, #1
   21a82:	4053      	eors	r3, r2
   21a84:	b2db      	uxtb	r3, r3
   21a86:	2b00      	cmp	r3, #0
   21a88:	d004      	beq.n	21a94 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   21a8a:	4b0a      	ldr	r3, [pc, #40]	; (21ab4 <sd_mmc_start_write_blocks+0x54>)
   21a8c:	2200      	movs	r2, #0
   21a8e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   21a90:	2305      	movs	r3, #5
   21a92:	e008      	b.n	21aa6 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   21a94:	4b07      	ldr	r3, [pc, #28]	; (21ab4 <sd_mmc_start_write_blocks+0x54>)
   21a96:	881a      	ldrh	r2, [r3, #0]
   21a98:	1cbb      	adds	r3, r7, #2
   21a9a:	881b      	ldrh	r3, [r3, #0]
   21a9c:	1ad3      	subs	r3, r2, r3
   21a9e:	b29a      	uxth	r2, r3
   21aa0:	4b04      	ldr	r3, [pc, #16]	; (21ab4 <sd_mmc_start_write_blocks+0x54>)
   21aa2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   21aa4:	2300      	movs	r3, #0
}
   21aa6:	0018      	movs	r0, r3
   21aa8:	46bd      	mov	sp, r7
   21aaa:	b002      	add	sp, #8
   21aac:	bd80      	pop	{r7, pc}
   21aae:	46c0      	nop			; (mov r8, r8)
   21ab0:	00022979 	.word	0x00022979
   21ab4:	20004176 	.word	0x20004176

00021ab8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   21ab8:	b580      	push	{r7, lr}
   21aba:	b082      	sub	sp, #8
   21abc:	af00      	add	r7, sp, #0
   21abe:	0002      	movs	r2, r0
   21ac0:	1dfb      	adds	r3, r7, #7
   21ac2:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   21ac4:	4b13      	ldr	r3, [pc, #76]	; (21b14 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   21ac6:	4798      	blx	r3
   21ac8:	0003      	movs	r3, r0
   21aca:	001a      	movs	r2, r3
   21acc:	2301      	movs	r3, #1
   21ace:	4053      	eors	r3, r2
   21ad0:	b2db      	uxtb	r3, r3
   21ad2:	2b00      	cmp	r3, #0
   21ad4:	d001      	beq.n	21ada <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   21ad6:	2305      	movs	r3, #5
   21ad8:	e018      	b.n	21b0c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   21ada:	1dfb      	adds	r3, r7, #7
   21adc:	781b      	ldrb	r3, [r3, #0]
   21ade:	2b00      	cmp	r3, #0
   21ae0:	d003      	beq.n	21aea <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   21ae2:	4b0d      	ldr	r3, [pc, #52]	; (21b18 <sd_mmc_wait_end_of_write_blocks+0x60>)
   21ae4:	2200      	movs	r2, #0
   21ae6:	801a      	strh	r2, [r3, #0]
   21ae8:	e005      	b.n	21af6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   21aea:	4b0b      	ldr	r3, [pc, #44]	; (21b18 <sd_mmc_wait_end_of_write_blocks+0x60>)
   21aec:	881b      	ldrh	r3, [r3, #0]
   21aee:	2b00      	cmp	r3, #0
   21af0:	d001      	beq.n	21af6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   21af2:	2300      	movs	r3, #0
   21af4:	e00a      	b.n	21b0c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   21af6:	4b09      	ldr	r3, [pc, #36]	; (21b1c <sd_mmc_wait_end_of_write_blocks+0x64>)
   21af8:	881b      	ldrh	r3, [r3, #0]
   21afa:	2b01      	cmp	r3, #1
   21afc:	d103      	bne.n	21b06 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   21afe:	4b08      	ldr	r3, [pc, #32]	; (21b20 <sd_mmc_wait_end_of_write_blocks+0x68>)
   21b00:	4798      	blx	r3
		return SD_MMC_OK;
   21b02:	2300      	movs	r3, #0
   21b04:	e002      	b.n	21b0c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   21b06:	4b06      	ldr	r3, [pc, #24]	; (21b20 <sd_mmc_wait_end_of_write_blocks+0x68>)
   21b08:	4798      	blx	r3
	return SD_MMC_OK;
   21b0a:	2300      	movs	r3, #0
}
   21b0c:	0018      	movs	r0, r3
   21b0e:	46bd      	mov	sp, r7
   21b10:	b002      	add	sp, #8
   21b12:	bd80      	pop	{r7, pc}
   21b14:	00022a39 	.word	0x00022a39
   21b18:	20004176 	.word	0x20004176
   21b1c:	20004174 	.word	0x20004174
   21b20:	00021379 	.word	0x00021379

00021b24 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   21b24:	b580      	push	{r7, lr}
   21b26:	b082      	sub	sp, #8
   21b28:	af00      	add	r7, sp, #0
   21b2a:	0002      	movs	r2, r0
   21b2c:	1dfb      	adds	r3, r7, #7
   21b2e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   21b30:	1dfb      	adds	r3, r7, #7
   21b32:	781b      	ldrb	r3, [r3, #0]
   21b34:	0018      	movs	r0, r3
   21b36:	4b16      	ldr	r3, [pc, #88]	; (21b90 <sd_mmc_test_unit_ready+0x6c>)
   21b38:	4798      	blx	r3
   21b3a:	0003      	movs	r3, r0
   21b3c:	2b01      	cmp	r3, #1
   21b3e:	d019      	beq.n	21b74 <sd_mmc_test_unit_ready+0x50>
   21b40:	2b02      	cmp	r3, #2
   21b42:	d019      	beq.n	21b78 <sd_mmc_test_unit_ready+0x54>
   21b44:	2b00      	cmp	r3, #0
   21b46:	d11e      	bne.n	21b86 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   21b48:	1dfb      	adds	r3, r7, #7
   21b4a:	781b      	ldrb	r3, [r3, #0]
   21b4c:	4a11      	ldr	r2, [pc, #68]	; (21b94 <sd_mmc_test_unit_ready+0x70>)
   21b4e:	5cd3      	ldrb	r3, [r2, r3]
   21b50:	2b00      	cmp	r3, #0
   21b52:	d001      	beq.n	21b58 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   21b54:	2302      	movs	r3, #2
   21b56:	e017      	b.n	21b88 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   21b58:	1dfb      	adds	r3, r7, #7
   21b5a:	781b      	ldrb	r3, [r3, #0]
   21b5c:	0018      	movs	r0, r3
   21b5e:	4b0e      	ldr	r3, [pc, #56]	; (21b98 <sd_mmc_test_unit_ready+0x74>)
   21b60:	4798      	blx	r3
   21b62:	0003      	movs	r3, r0
   21b64:	001a      	movs	r2, r3
   21b66:	2303      	movs	r3, #3
   21b68:	4013      	ands	r3, r2
   21b6a:	d001      	beq.n	21b70 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   21b6c:	2300      	movs	r3, #0
   21b6e:	e00b      	b.n	21b88 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   21b70:	2302      	movs	r3, #2
   21b72:	e009      	b.n	21b88 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   21b74:	2303      	movs	r3, #3
   21b76:	e007      	b.n	21b88 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   21b78:	1dfb      	adds	r3, r7, #7
   21b7a:	781b      	ldrb	r3, [r3, #0]
   21b7c:	4a05      	ldr	r2, [pc, #20]	; (21b94 <sd_mmc_test_unit_ready+0x70>)
   21b7e:	2100      	movs	r1, #0
   21b80:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   21b82:	2302      	movs	r3, #2
   21b84:	e000      	b.n	21b88 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   21b86:	2301      	movs	r3, #1
	}
}
   21b88:	0018      	movs	r0, r3
   21b8a:	46bd      	mov	sp, r7
   21b8c:	b002      	add	sp, #8
   21b8e:	bd80      	pop	{r7, pc}
   21b90:	00021699 	.word	0x00021699
   21b94:	20004178 	.word	0x20004178
   21b98:	0002170d 	.word	0x0002170d

00021b9c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   21b9c:	b580      	push	{r7, lr}
   21b9e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   21ba0:	2000      	movs	r0, #0
   21ba2:	4b03      	ldr	r3, [pc, #12]	; (21bb0 <sd_mmc_test_unit_ready_0+0x14>)
   21ba4:	4798      	blx	r3
   21ba6:	0003      	movs	r3, r0
}
   21ba8:	0018      	movs	r0, r3
   21baa:	46bd      	mov	sp, r7
   21bac:	bd80      	pop	{r7, pc}
   21bae:	46c0      	nop			; (mov r8, r8)
   21bb0:	00021b25 	.word	0x00021b25

00021bb4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   21bb4:	b580      	push	{r7, lr}
   21bb6:	b082      	sub	sp, #8
   21bb8:	af00      	add	r7, sp, #0
   21bba:	0002      	movs	r2, r0
   21bbc:	6039      	str	r1, [r7, #0]
   21bbe:	1dfb      	adds	r3, r7, #7
   21bc0:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   21bc2:	1dfb      	adds	r3, r7, #7
   21bc4:	781b      	ldrb	r3, [r3, #0]
   21bc6:	0018      	movs	r0, r3
   21bc8:	4b08      	ldr	r3, [pc, #32]	; (21bec <sd_mmc_read_capacity+0x38>)
   21bca:	4798      	blx	r3
   21bcc:	0003      	movs	r3, r0
   21bce:	005b      	lsls	r3, r3, #1
   21bd0:	1e5a      	subs	r2, r3, #1
   21bd2:	683b      	ldr	r3, [r7, #0]
   21bd4:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   21bd6:	1dfb      	adds	r3, r7, #7
   21bd8:	781b      	ldrb	r3, [r3, #0]
   21bda:	0018      	movs	r0, r3
   21bdc:	4b04      	ldr	r3, [pc, #16]	; (21bf0 <sd_mmc_read_capacity+0x3c>)
   21bde:	4798      	blx	r3
   21be0:	0003      	movs	r3, r0
}
   21be2:	0018      	movs	r0, r3
   21be4:	46bd      	mov	sp, r7
   21be6:	b002      	add	sp, #8
   21be8:	bd80      	pop	{r7, pc}
   21bea:	46c0      	nop			; (mov r8, r8)
   21bec:	00021749 	.word	0x00021749
   21bf0:	00021b25 	.word	0x00021b25

00021bf4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   21bf4:	b580      	push	{r7, lr}
   21bf6:	b082      	sub	sp, #8
   21bf8:	af00      	add	r7, sp, #0
   21bfa:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   21bfc:	687b      	ldr	r3, [r7, #4]
   21bfe:	0019      	movs	r1, r3
   21c00:	2000      	movs	r0, #0
   21c02:	4b03      	ldr	r3, [pc, #12]	; (21c10 <sd_mmc_read_capacity_0+0x1c>)
   21c04:	4798      	blx	r3
   21c06:	0003      	movs	r3, r0
}
   21c08:	0018      	movs	r0, r3
   21c0a:	46bd      	mov	sp, r7
   21c0c:	b002      	add	sp, #8
   21c0e:	bd80      	pop	{r7, pc}
   21c10:	00021bb5 	.word	0x00021bb5

00021c14 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   21c14:	b580      	push	{r7, lr}
   21c16:	b082      	sub	sp, #8
   21c18:	af00      	add	r7, sp, #0
   21c1a:	0002      	movs	r2, r0
   21c1c:	1dfb      	adds	r3, r7, #7
   21c1e:	701a      	strb	r2, [r3, #0]
   21c20:	1dbb      	adds	r3, r7, #6
   21c22:	1c0a      	adds	r2, r1, #0
   21c24:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   21c26:	1dfb      	adds	r3, r7, #7
   21c28:	781b      	ldrb	r3, [r3, #0]
   21c2a:	4a04      	ldr	r2, [pc, #16]	; (21c3c <sd_mmc_unload+0x28>)
   21c2c:	1db9      	adds	r1, r7, #6
   21c2e:	7809      	ldrb	r1, [r1, #0]
   21c30:	54d1      	strb	r1, [r2, r3]
	return true;
   21c32:	2301      	movs	r3, #1
}
   21c34:	0018      	movs	r0, r3
   21c36:	46bd      	mov	sp, r7
   21c38:	b002      	add	sp, #8
   21c3a:	bd80      	pop	{r7, pc}
   21c3c:	20004178 	.word	0x20004178

00021c40 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   21c40:	b580      	push	{r7, lr}
   21c42:	b082      	sub	sp, #8
   21c44:	af00      	add	r7, sp, #0
   21c46:	0002      	movs	r2, r0
   21c48:	1dfb      	adds	r3, r7, #7
   21c4a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   21c4c:	1dfb      	adds	r3, r7, #7
   21c4e:	781b      	ldrb	r3, [r3, #0]
   21c50:	0019      	movs	r1, r3
   21c52:	2000      	movs	r0, #0
   21c54:	4b03      	ldr	r3, [pc, #12]	; (21c64 <sd_mmc_unload_0+0x24>)
   21c56:	4798      	blx	r3
   21c58:	0003      	movs	r3, r0
}
   21c5a:	0018      	movs	r0, r3
   21c5c:	46bd      	mov	sp, r7
   21c5e:	b002      	add	sp, #8
   21c60:	bd80      	pop	{r7, pc}
   21c62:	46c0      	nop			; (mov r8, r8)
   21c64:	00021c15 	.word	0x00021c15

00021c68 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   21c68:	b580      	push	{r7, lr}
   21c6a:	b082      	sub	sp, #8
   21c6c:	af00      	add	r7, sp, #0
   21c6e:	0002      	movs	r2, r0
   21c70:	1dfb      	adds	r3, r7, #7
   21c72:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   21c74:	1dfb      	adds	r3, r7, #7
   21c76:	781b      	ldrb	r3, [r3, #0]
   21c78:	0018      	movs	r0, r3
   21c7a:	4b03      	ldr	r3, [pc, #12]	; (21c88 <sd_mmc_wr_protect+0x20>)
   21c7c:	4798      	blx	r3
   21c7e:	0003      	movs	r3, r0
}
   21c80:	0018      	movs	r0, r3
   21c82:	46bd      	mov	sp, r7
   21c84:	b002      	add	sp, #8
   21c86:	bd80      	pop	{r7, pc}
   21c88:	00021785 	.word	0x00021785

00021c8c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   21c8c:	b580      	push	{r7, lr}
   21c8e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   21c90:	2000      	movs	r0, #0
   21c92:	4b03      	ldr	r3, [pc, #12]	; (21ca0 <sd_mmc_wr_protect_0+0x14>)
   21c94:	4798      	blx	r3
   21c96:	0003      	movs	r3, r0
}
   21c98:	0018      	movs	r0, r3
   21c9a:	46bd      	mov	sp, r7
   21c9c:	bd80      	pop	{r7, pc}
   21c9e:	46c0      	nop			; (mov r8, r8)
   21ca0:	00021c69 	.word	0x00021c69

00021ca4 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   21ca4:	b580      	push	{r7, lr}
   21ca6:	b082      	sub	sp, #8
   21ca8:	af00      	add	r7, sp, #0
   21caa:	0002      	movs	r2, r0
   21cac:	1dfb      	adds	r3, r7, #7
   21cae:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   21cb0:	2301      	movs	r3, #1
}
   21cb2:	0018      	movs	r0, r3
   21cb4:	46bd      	mov	sp, r7
   21cb6:	b002      	add	sp, #8
   21cb8:	bd80      	pop	{r7, pc}
	...

00021cbc <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   21cbc:	b580      	push	{r7, lr}
   21cbe:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   21cc0:	2000      	movs	r0, #0
   21cc2:	4b03      	ldr	r3, [pc, #12]	; (21cd0 <sd_mmc_removal_0+0x14>)
   21cc4:	4798      	blx	r3
   21cc6:	0003      	movs	r3, r0
}
   21cc8:	0018      	movs	r0, r3
   21cca:	46bd      	mov	sp, r7
   21ccc:	bd80      	pop	{r7, pc}
   21cce:	46c0      	nop			; (mov r8, r8)
   21cd0:	00021ca5 	.word	0x00021ca5

00021cd4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   21cd4:	b580      	push	{r7, lr}
   21cd6:	b084      	sub	sp, #16
   21cd8:	af00      	add	r7, sp, #0
   21cda:	60b9      	str	r1, [r7, #8]
   21cdc:	607a      	str	r2, [r7, #4]
   21cde:	230f      	movs	r3, #15
   21ce0:	18fb      	adds	r3, r7, r3
   21ce2:	1c02      	adds	r2, r0, #0
   21ce4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   21ce6:	68b9      	ldr	r1, [r7, #8]
   21ce8:	230f      	movs	r3, #15
   21cea:	18fb      	adds	r3, r7, r3
   21cec:	781b      	ldrb	r3, [r3, #0]
   21cee:	2201      	movs	r2, #1
   21cf0:	0018      	movs	r0, r3
   21cf2:	4b10      	ldr	r3, [pc, #64]	; (21d34 <sd_mmc_mem_2_ram+0x60>)
   21cf4:	4798      	blx	r3
   21cf6:	1e03      	subs	r3, r0, #0
   21cf8:	d005      	beq.n	21d06 <sd_mmc_mem_2_ram+0x32>
   21cfa:	2b02      	cmp	r3, #2
   21cfc:	d101      	bne.n	21d02 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   21cfe:	2302      	movs	r3, #2
   21d00:	e013      	b.n	21d2a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   21d02:	2301      	movs	r3, #1
   21d04:	e011      	b.n	21d2a <sd_mmc_mem_2_ram+0x56>
		break;
   21d06:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   21d08:	687b      	ldr	r3, [r7, #4]
   21d0a:	2101      	movs	r1, #1
   21d0c:	0018      	movs	r0, r3
   21d0e:	4b0a      	ldr	r3, [pc, #40]	; (21d38 <sd_mmc_mem_2_ram+0x64>)
   21d10:	4798      	blx	r3
   21d12:	1e03      	subs	r3, r0, #0
   21d14:	d001      	beq.n	21d1a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   21d16:	2301      	movs	r3, #1
   21d18:	e007      	b.n	21d2a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   21d1a:	2000      	movs	r0, #0
   21d1c:	4b07      	ldr	r3, [pc, #28]	; (21d3c <sd_mmc_mem_2_ram+0x68>)
   21d1e:	4798      	blx	r3
   21d20:	1e03      	subs	r3, r0, #0
   21d22:	d001      	beq.n	21d28 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   21d24:	2301      	movs	r3, #1
   21d26:	e000      	b.n	21d2a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   21d28:	2300      	movs	r3, #0
}
   21d2a:	0018      	movs	r0, r3
   21d2c:	46bd      	mov	sp, r7
   21d2e:	b004      	add	sp, #16
   21d30:	bd80      	pop	{r7, pc}
   21d32:	46c0      	nop			; (mov r8, r8)
   21d34:	0002179d 	.word	0x0002179d
   21d38:	00021889 	.word	0x00021889
   21d3c:	000218e1 	.word	0x000218e1

00021d40 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   21d40:	b580      	push	{r7, lr}
   21d42:	b082      	sub	sp, #8
   21d44:	af00      	add	r7, sp, #0
   21d46:	6078      	str	r0, [r7, #4]
   21d48:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   21d4a:	683a      	ldr	r2, [r7, #0]
   21d4c:	687b      	ldr	r3, [r7, #4]
   21d4e:	0019      	movs	r1, r3
   21d50:	2000      	movs	r0, #0
   21d52:	4b03      	ldr	r3, [pc, #12]	; (21d60 <sd_mmc_mem_2_ram_0+0x20>)
   21d54:	4798      	blx	r3
   21d56:	0003      	movs	r3, r0
}
   21d58:	0018      	movs	r0, r3
   21d5a:	46bd      	mov	sp, r7
   21d5c:	b002      	add	sp, #8
   21d5e:	bd80      	pop	{r7, pc}
   21d60:	00021cd5 	.word	0x00021cd5

00021d64 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   21d64:	b580      	push	{r7, lr}
   21d66:	b084      	sub	sp, #16
   21d68:	af00      	add	r7, sp, #0
   21d6a:	60b9      	str	r1, [r7, #8]
   21d6c:	607a      	str	r2, [r7, #4]
   21d6e:	230f      	movs	r3, #15
   21d70:	18fb      	adds	r3, r7, r3
   21d72:	1c02      	adds	r2, r0, #0
   21d74:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   21d76:	68b9      	ldr	r1, [r7, #8]
   21d78:	230f      	movs	r3, #15
   21d7a:	18fb      	adds	r3, r7, r3
   21d7c:	781b      	ldrb	r3, [r3, #0]
   21d7e:	2201      	movs	r2, #1
   21d80:	0018      	movs	r0, r3
   21d82:	4b10      	ldr	r3, [pc, #64]	; (21dc4 <sd_mmc_ram_2_mem+0x60>)
   21d84:	4798      	blx	r3
   21d86:	1e03      	subs	r3, r0, #0
   21d88:	d005      	beq.n	21d96 <sd_mmc_ram_2_mem+0x32>
   21d8a:	2b02      	cmp	r3, #2
   21d8c:	d101      	bne.n	21d92 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   21d8e:	2302      	movs	r3, #2
   21d90:	e013      	b.n	21dba <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   21d92:	2301      	movs	r3, #1
   21d94:	e011      	b.n	21dba <sd_mmc_ram_2_mem+0x56>
		break;
   21d96:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   21d98:	687b      	ldr	r3, [r7, #4]
   21d9a:	2101      	movs	r1, #1
   21d9c:	0018      	movs	r0, r3
   21d9e:	4b0a      	ldr	r3, [pc, #40]	; (21dc8 <sd_mmc_ram_2_mem+0x64>)
   21da0:	4798      	blx	r3
   21da2:	1e03      	subs	r3, r0, #0
   21da4:	d001      	beq.n	21daa <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   21da6:	2301      	movs	r3, #1
   21da8:	e007      	b.n	21dba <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   21daa:	2000      	movs	r0, #0
   21dac:	4b07      	ldr	r3, [pc, #28]	; (21dcc <sd_mmc_ram_2_mem+0x68>)
   21dae:	4798      	blx	r3
   21db0:	1e03      	subs	r3, r0, #0
   21db2:	d001      	beq.n	21db8 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   21db4:	2301      	movs	r3, #1
   21db6:	e000      	b.n	21dba <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   21db8:	2300      	movs	r3, #0
}
   21dba:	0018      	movs	r0, r3
   21dbc:	46bd      	mov	sp, r7
   21dbe:	b004      	add	sp, #16
   21dc0:	bd80      	pop	{r7, pc}
   21dc2:	46c0      	nop			; (mov r8, r8)
   21dc4:	00021979 	.word	0x00021979
   21dc8:	00021a61 	.word	0x00021a61
   21dcc:	00021ab9 	.word	0x00021ab9

00021dd0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   21dd0:	b580      	push	{r7, lr}
   21dd2:	b082      	sub	sp, #8
   21dd4:	af00      	add	r7, sp, #0
   21dd6:	6078      	str	r0, [r7, #4]
   21dd8:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   21dda:	683a      	ldr	r2, [r7, #0]
   21ddc:	687b      	ldr	r3, [r7, #4]
   21dde:	0019      	movs	r1, r3
   21de0:	2000      	movs	r0, #0
   21de2:	4b03      	ldr	r3, [pc, #12]	; (21df0 <sd_mmc_ram_2_mem_0+0x20>)
   21de4:	4798      	blx	r3
   21de6:	0003      	movs	r3, r0
}
   21de8:	0018      	movs	r0, r3
   21dea:	46bd      	mov	sp, r7
   21dec:	b002      	add	sp, #8
   21dee:	bd80      	pop	{r7, pc}
   21df0:	00021d65 	.word	0x00021d65

00021df4 <system_pinmux_get_group_from_gpio_pin>:
{
   21df4:	b580      	push	{r7, lr}
   21df6:	b084      	sub	sp, #16
   21df8:	af00      	add	r7, sp, #0
   21dfa:	0002      	movs	r2, r0
   21dfc:	1dfb      	adds	r3, r7, #7
   21dfe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   21e00:	230f      	movs	r3, #15
   21e02:	18fb      	adds	r3, r7, r3
   21e04:	1dfa      	adds	r2, r7, #7
   21e06:	7812      	ldrb	r2, [r2, #0]
   21e08:	09d2      	lsrs	r2, r2, #7
   21e0a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   21e0c:	230e      	movs	r3, #14
   21e0e:	18fb      	adds	r3, r7, r3
   21e10:	1dfa      	adds	r2, r7, #7
   21e12:	7812      	ldrb	r2, [r2, #0]
   21e14:	0952      	lsrs	r2, r2, #5
   21e16:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   21e18:	4b0d      	ldr	r3, [pc, #52]	; (21e50 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   21e1a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   21e1c:	230f      	movs	r3, #15
   21e1e:	18fb      	adds	r3, r7, r3
   21e20:	781b      	ldrb	r3, [r3, #0]
   21e22:	2b00      	cmp	r3, #0
   21e24:	d10f      	bne.n	21e46 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   21e26:	230f      	movs	r3, #15
   21e28:	18fb      	adds	r3, r7, r3
   21e2a:	781b      	ldrb	r3, [r3, #0]
   21e2c:	009b      	lsls	r3, r3, #2
   21e2e:	2210      	movs	r2, #16
   21e30:	4694      	mov	ip, r2
   21e32:	44bc      	add	ip, r7
   21e34:	4463      	add	r3, ip
   21e36:	3b08      	subs	r3, #8
   21e38:	681a      	ldr	r2, [r3, #0]
   21e3a:	230e      	movs	r3, #14
   21e3c:	18fb      	adds	r3, r7, r3
   21e3e:	781b      	ldrb	r3, [r3, #0]
   21e40:	01db      	lsls	r3, r3, #7
   21e42:	18d3      	adds	r3, r2, r3
   21e44:	e000      	b.n	21e48 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   21e46:	2300      	movs	r3, #0
}
   21e48:	0018      	movs	r0, r3
   21e4a:	46bd      	mov	sp, r7
   21e4c:	b004      	add	sp, #16
   21e4e:	bd80      	pop	{r7, pc}
   21e50:	41004400 	.word	0x41004400

00021e54 <system_interrupt_enable>:
{
   21e54:	b580      	push	{r7, lr}
   21e56:	b082      	sub	sp, #8
   21e58:	af00      	add	r7, sp, #0
   21e5a:	0002      	movs	r2, r0
   21e5c:	1dfb      	adds	r3, r7, #7
   21e5e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   21e60:	4b06      	ldr	r3, [pc, #24]	; (21e7c <system_interrupt_enable+0x28>)
   21e62:	1dfa      	adds	r2, r7, #7
   21e64:	7812      	ldrb	r2, [r2, #0]
   21e66:	0011      	movs	r1, r2
   21e68:	221f      	movs	r2, #31
   21e6a:	400a      	ands	r2, r1
   21e6c:	2101      	movs	r1, #1
   21e6e:	4091      	lsls	r1, r2
   21e70:	000a      	movs	r2, r1
   21e72:	601a      	str	r2, [r3, #0]
}
   21e74:	46c0      	nop			; (mov r8, r8)
   21e76:	46bd      	mov	sp, r7
   21e78:	b002      	add	sp, #8
   21e7a:	bd80      	pop	{r7, pc}
   21e7c:	e000e100 	.word	0xe000e100

00021e80 <port_get_group_from_gpio_pin>:
{
   21e80:	b580      	push	{r7, lr}
   21e82:	b082      	sub	sp, #8
   21e84:	af00      	add	r7, sp, #0
   21e86:	0002      	movs	r2, r0
   21e88:	1dfb      	adds	r3, r7, #7
   21e8a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   21e8c:	1dfb      	adds	r3, r7, #7
   21e8e:	781b      	ldrb	r3, [r3, #0]
   21e90:	0018      	movs	r0, r3
   21e92:	4b03      	ldr	r3, [pc, #12]	; (21ea0 <port_get_group_from_gpio_pin+0x20>)
   21e94:	4798      	blx	r3
   21e96:	0003      	movs	r3, r0
}
   21e98:	0018      	movs	r0, r3
   21e9a:	46bd      	mov	sp, r7
   21e9c:	b002      	add	sp, #8
   21e9e:	bd80      	pop	{r7, pc}
   21ea0:	00021df5 	.word	0x00021df5

00021ea4 <port_get_config_defaults>:
{
   21ea4:	b580      	push	{r7, lr}
   21ea6:	b082      	sub	sp, #8
   21ea8:	af00      	add	r7, sp, #0
   21eaa:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   21eac:	687b      	ldr	r3, [r7, #4]
   21eae:	2200      	movs	r2, #0
   21eb0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   21eb2:	687b      	ldr	r3, [r7, #4]
   21eb4:	2201      	movs	r2, #1
   21eb6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   21eb8:	687b      	ldr	r3, [r7, #4]
   21eba:	2200      	movs	r2, #0
   21ebc:	709a      	strb	r2, [r3, #2]
}
   21ebe:	46c0      	nop			; (mov r8, r8)
   21ec0:	46bd      	mov	sp, r7
   21ec2:	b002      	add	sp, #8
   21ec4:	bd80      	pop	{r7, pc}
	...

00021ec8 <port_pin_set_output_level>:
{
   21ec8:	b580      	push	{r7, lr}
   21eca:	b084      	sub	sp, #16
   21ecc:	af00      	add	r7, sp, #0
   21ece:	0002      	movs	r2, r0
   21ed0:	1dfb      	adds	r3, r7, #7
   21ed2:	701a      	strb	r2, [r3, #0]
   21ed4:	1dbb      	adds	r3, r7, #6
   21ed6:	1c0a      	adds	r2, r1, #0
   21ed8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   21eda:	1dfb      	adds	r3, r7, #7
   21edc:	781b      	ldrb	r3, [r3, #0]
   21ede:	0018      	movs	r0, r3
   21ee0:	4b0d      	ldr	r3, [pc, #52]	; (21f18 <port_pin_set_output_level+0x50>)
   21ee2:	4798      	blx	r3
   21ee4:	0003      	movs	r3, r0
   21ee6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   21ee8:	1dfb      	adds	r3, r7, #7
   21eea:	781b      	ldrb	r3, [r3, #0]
   21eec:	221f      	movs	r2, #31
   21eee:	4013      	ands	r3, r2
   21ef0:	2201      	movs	r2, #1
   21ef2:	409a      	lsls	r2, r3
   21ef4:	0013      	movs	r3, r2
   21ef6:	60bb      	str	r3, [r7, #8]
	if (level) {
   21ef8:	1dbb      	adds	r3, r7, #6
   21efa:	781b      	ldrb	r3, [r3, #0]
   21efc:	2b00      	cmp	r3, #0
   21efe:	d003      	beq.n	21f08 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   21f00:	68fb      	ldr	r3, [r7, #12]
   21f02:	68ba      	ldr	r2, [r7, #8]
   21f04:	619a      	str	r2, [r3, #24]
}
   21f06:	e002      	b.n	21f0e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   21f08:	68fb      	ldr	r3, [r7, #12]
   21f0a:	68ba      	ldr	r2, [r7, #8]
   21f0c:	615a      	str	r2, [r3, #20]
}
   21f0e:	46c0      	nop			; (mov r8, r8)
   21f10:	46bd      	mov	sp, r7
   21f12:	b004      	add	sp, #16
   21f14:	bd80      	pop	{r7, pc}
   21f16:	46c0      	nop			; (mov r8, r8)
   21f18:	00021e81 	.word	0x00021e81

00021f1c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   21f1c:	b580      	push	{r7, lr}
   21f1e:	b084      	sub	sp, #16
   21f20:	af00      	add	r7, sp, #0
   21f22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21f24:	687b      	ldr	r3, [r7, #4]
   21f26:	681b      	ldr	r3, [r3, #0]
   21f28:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   21f2a:	68fb      	ldr	r3, [r7, #12]
   21f2c:	69db      	ldr	r3, [r3, #28]
   21f2e:	1e5a      	subs	r2, r3, #1
   21f30:	4193      	sbcs	r3, r2
   21f32:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   21f34:	0018      	movs	r0, r3
   21f36:	46bd      	mov	sp, r7
   21f38:	b004      	add	sp, #16
   21f3a:	bd80      	pop	{r7, pc}

00021f3c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   21f3c:	b580      	push	{r7, lr}
   21f3e:	b082      	sub	sp, #8
   21f40:	af00      	add	r7, sp, #0
   21f42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   21f44:	687b      	ldr	r3, [r7, #4]
   21f46:	2201      	movs	r2, #1
   21f48:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   21f4a:	687b      	ldr	r3, [r7, #4]
   21f4c:	2200      	movs	r2, #0
   21f4e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   21f50:	687b      	ldr	r3, [r7, #4]
   21f52:	2200      	movs	r2, #0
   21f54:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   21f56:	687b      	ldr	r3, [r7, #4]
   21f58:	22c0      	movs	r2, #192	; 0xc0
   21f5a:	0392      	lsls	r2, r2, #14
   21f5c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   21f5e:	687b      	ldr	r3, [r7, #4]
   21f60:	2200      	movs	r2, #0
   21f62:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   21f64:	687b      	ldr	r3, [r7, #4]
   21f66:	2200      	movs	r2, #0
   21f68:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   21f6a:	687b      	ldr	r3, [r7, #4]
   21f6c:	2201      	movs	r2, #1
   21f6e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   21f70:	687b      	ldr	r3, [r7, #4]
   21f72:	2201      	movs	r2, #1
   21f74:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   21f76:	687b      	ldr	r3, [r7, #4]
   21f78:	2200      	movs	r2, #0
   21f7a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   21f7c:	687b      	ldr	r3, [r7, #4]
   21f7e:	2224      	movs	r2, #36	; 0x24
   21f80:	2100      	movs	r1, #0
   21f82:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   21f84:	687b      	ldr	r3, [r7, #4]
   21f86:	3318      	adds	r3, #24
   21f88:	220c      	movs	r2, #12
   21f8a:	2100      	movs	r1, #0
   21f8c:	0018      	movs	r0, r3
   21f8e:	4b0a      	ldr	r3, [pc, #40]	; (21fb8 <spi_get_config_defaults+0x7c>)
   21f90:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   21f92:	687b      	ldr	r3, [r7, #4]
   21f94:	4a09      	ldr	r2, [pc, #36]	; (21fbc <spi_get_config_defaults+0x80>)
   21f96:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   21f98:	687b      	ldr	r3, [r7, #4]
   21f9a:	2200      	movs	r2, #0
   21f9c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   21f9e:	687b      	ldr	r3, [r7, #4]
   21fa0:	2200      	movs	r2, #0
   21fa2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   21fa4:	687b      	ldr	r3, [r7, #4]
   21fa6:	2200      	movs	r2, #0
   21fa8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   21faa:	687b      	ldr	r3, [r7, #4]
   21fac:	2200      	movs	r2, #0
   21fae:	635a      	str	r2, [r3, #52]	; 0x34

};
   21fb0:	46c0      	nop			; (mov r8, r8)
   21fb2:	46bd      	mov	sp, r7
   21fb4:	b002      	add	sp, #8
   21fb6:	bd80      	pop	{r7, pc}
   21fb8:	00037903 	.word	0x00037903
   21fbc:	000186a0 	.word	0x000186a0

00021fc0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   21fc0:	b580      	push	{r7, lr}
   21fc2:	b082      	sub	sp, #8
   21fc4:	af00      	add	r7, sp, #0
   21fc6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   21fc8:	687b      	ldr	r3, [r7, #4]
   21fca:	220a      	movs	r2, #10
   21fcc:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   21fce:	687b      	ldr	r3, [r7, #4]
   21fd0:	2200      	movs	r2, #0
   21fd2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   21fd4:	687b      	ldr	r3, [r7, #4]
   21fd6:	2200      	movs	r2, #0
   21fd8:	709a      	strb	r2, [r3, #2]
}
   21fda:	46c0      	nop			; (mov r8, r8)
   21fdc:	46bd      	mov	sp, r7
   21fde:	b002      	add	sp, #8
   21fe0:	bd80      	pop	{r7, pc}
	...

00021fe4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   21fe4:	b580      	push	{r7, lr}
   21fe6:	b084      	sub	sp, #16
   21fe8:	af00      	add	r7, sp, #0
   21fea:	6078      	str	r0, [r7, #4]
   21fec:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   21fee:	683b      	ldr	r3, [r7, #0]
   21ff0:	781a      	ldrb	r2, [r3, #0]
   21ff2:	687b      	ldr	r3, [r7, #4]
   21ff4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   21ff6:	683b      	ldr	r3, [r7, #0]
   21ff8:	785a      	ldrb	r2, [r3, #1]
   21ffa:	687b      	ldr	r3, [r7, #4]
   21ffc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   21ffe:	683b      	ldr	r3, [r7, #0]
   22000:	789a      	ldrb	r2, [r3, #2]
   22002:	687b      	ldr	r3, [r7, #4]
   22004:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   22006:	230c      	movs	r3, #12
   22008:	18fb      	adds	r3, r7, r3
   2200a:	0018      	movs	r0, r3
   2200c:	4b0b      	ldr	r3, [pc, #44]	; (2203c <spi_attach_slave+0x58>)
   2200e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   22010:	230c      	movs	r3, #12
   22012:	18fb      	adds	r3, r7, r3
   22014:	2201      	movs	r2, #1
   22016:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   22018:	687b      	ldr	r3, [r7, #4]
   2201a:	781b      	ldrb	r3, [r3, #0]
   2201c:	220c      	movs	r2, #12
   2201e:	18ba      	adds	r2, r7, r2
   22020:	0011      	movs	r1, r2
   22022:	0018      	movs	r0, r3
   22024:	4b06      	ldr	r3, [pc, #24]	; (22040 <spi_attach_slave+0x5c>)
   22026:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   22028:	687b      	ldr	r3, [r7, #4]
   2202a:	781b      	ldrb	r3, [r3, #0]
   2202c:	2101      	movs	r1, #1
   2202e:	0018      	movs	r0, r3
   22030:	4b04      	ldr	r3, [pc, #16]	; (22044 <spi_attach_slave+0x60>)
   22032:	4798      	blx	r3
}
   22034:	46c0      	nop			; (mov r8, r8)
   22036:	46bd      	mov	sp, r7
   22038:	b004      	add	sp, #16
   2203a:	bd80      	pop	{r7, pc}
   2203c:	00021ea5 	.word	0x00021ea5
   22040:	0002941d 	.word	0x0002941d
   22044:	00021ec9 	.word	0x00021ec9

00022048 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   22048:	b580      	push	{r7, lr}
   2204a:	b084      	sub	sp, #16
   2204c:	af00      	add	r7, sp, #0
   2204e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22050:	687b      	ldr	r3, [r7, #4]
   22052:	681b      	ldr	r3, [r3, #0]
   22054:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   22056:	687b      	ldr	r3, [r7, #4]
   22058:	681b      	ldr	r3, [r3, #0]
   2205a:	0018      	movs	r0, r3
   2205c:	4b0b      	ldr	r3, [pc, #44]	; (2208c <spi_enable+0x44>)
   2205e:	4798      	blx	r3
   22060:	0003      	movs	r3, r0
   22062:	0018      	movs	r0, r3
   22064:	4b0a      	ldr	r3, [pc, #40]	; (22090 <spi_enable+0x48>)
   22066:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   22068:	46c0      	nop			; (mov r8, r8)
   2206a:	687b      	ldr	r3, [r7, #4]
   2206c:	0018      	movs	r0, r3
   2206e:	4b09      	ldr	r3, [pc, #36]	; (22094 <spi_enable+0x4c>)
   22070:	4798      	blx	r3
   22072:	1e03      	subs	r3, r0, #0
   22074:	d1f9      	bne.n	2206a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   22076:	68fb      	ldr	r3, [r7, #12]
   22078:	681b      	ldr	r3, [r3, #0]
   2207a:	2202      	movs	r2, #2
   2207c:	431a      	orrs	r2, r3
   2207e:	68fb      	ldr	r3, [r7, #12]
   22080:	601a      	str	r2, [r3, #0]
}
   22082:	46c0      	nop			; (mov r8, r8)
   22084:	46bd      	mov	sp, r7
   22086:	b004      	add	sp, #16
   22088:	bd80      	pop	{r7, pc}
   2208a:	46c0      	nop			; (mov r8, r8)
   2208c:	0002a0ed 	.word	0x0002a0ed
   22090:	00021e55 	.word	0x00021e55
   22094:	00021f1d 	.word	0x00021f1d

00022098 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   22098:	b580      	push	{r7, lr}
   2209a:	b084      	sub	sp, #16
   2209c:	af00      	add	r7, sp, #0
   2209e:	6078      	str	r0, [r7, #4]
   220a0:	000a      	movs	r2, r1
   220a2:	1cfb      	adds	r3, r7, #3
   220a4:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   220a6:	230f      	movs	r3, #15
   220a8:	18fb      	adds	r3, r7, r3
   220aa:	2200      	movs	r2, #0
   220ac:	701a      	strb	r2, [r3, #0]
	while (size--) {
   220ae:	e038      	b.n	22122 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   220b0:	687b      	ldr	r3, [r7, #4]
   220b2:	1c5a      	adds	r2, r3, #1
   220b4:	607a      	str	r2, [r7, #4]
   220b6:	220e      	movs	r2, #14
   220b8:	18ba      	adds	r2, r7, r2
   220ba:	781b      	ldrb	r3, [r3, #0]
   220bc:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   220be:	230d      	movs	r3, #13
   220c0:	18fb      	adds	r3, r7, r3
   220c2:	2200      	movs	r2, #0
   220c4:	701a      	strb	r2, [r3, #0]
   220c6:	e027      	b.n	22118 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   220c8:	230f      	movs	r3, #15
   220ca:	18fa      	adds	r2, r7, r3
   220cc:	230f      	movs	r3, #15
   220ce:	18fb      	adds	r3, r7, r3
   220d0:	781b      	ldrb	r3, [r3, #0]
   220d2:	18db      	adds	r3, r3, r3
   220d4:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   220d6:	230e      	movs	r3, #14
   220d8:	18fa      	adds	r2, r7, r3
   220da:	230f      	movs	r3, #15
   220dc:	18fb      	adds	r3, r7, r3
   220de:	7812      	ldrb	r2, [r2, #0]
   220e0:	781b      	ldrb	r3, [r3, #0]
   220e2:	4053      	eors	r3, r2
   220e4:	b2db      	uxtb	r3, r3
   220e6:	b25b      	sxtb	r3, r3
   220e8:	2b00      	cmp	r3, #0
   220ea:	da07      	bge.n	220fc <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   220ec:	230f      	movs	r3, #15
   220ee:	18fb      	adds	r3, r7, r3
   220f0:	220f      	movs	r2, #15
   220f2:	18ba      	adds	r2, r7, r2
   220f4:	7812      	ldrb	r2, [r2, #0]
   220f6:	2109      	movs	r1, #9
   220f8:	404a      	eors	r2, r1
   220fa:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   220fc:	230e      	movs	r3, #14
   220fe:	18fa      	adds	r2, r7, r3
   22100:	230e      	movs	r3, #14
   22102:	18fb      	adds	r3, r7, r3
   22104:	781b      	ldrb	r3, [r3, #0]
   22106:	18db      	adds	r3, r3, r3
   22108:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   2210a:	230d      	movs	r3, #13
   2210c:	18fb      	adds	r3, r7, r3
   2210e:	781a      	ldrb	r2, [r3, #0]
   22110:	230d      	movs	r3, #13
   22112:	18fb      	adds	r3, r7, r3
   22114:	3201      	adds	r2, #1
   22116:	701a      	strb	r2, [r3, #0]
   22118:	230d      	movs	r3, #13
   2211a:	18fb      	adds	r3, r7, r3
   2211c:	781b      	ldrb	r3, [r3, #0]
   2211e:	2b07      	cmp	r3, #7
   22120:	d9d2      	bls.n	220c8 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   22122:	1cfb      	adds	r3, r7, #3
   22124:	781b      	ldrb	r3, [r3, #0]
   22126:	1cfa      	adds	r2, r7, #3
   22128:	1e59      	subs	r1, r3, #1
   2212a:	7011      	strb	r1, [r2, #0]
   2212c:	2b00      	cmp	r3, #0
   2212e:	d1bf      	bne.n	220b0 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   22130:	230f      	movs	r3, #15
   22132:	18fb      	adds	r3, r7, r3
   22134:	781b      	ldrb	r3, [r3, #0]
   22136:	005b      	lsls	r3, r3, #1
   22138:	b25b      	sxtb	r3, r3
   2213a:	2201      	movs	r2, #1
   2213c:	4313      	orrs	r3, r2
   2213e:	b25a      	sxtb	r2, r3
   22140:	230f      	movs	r3, #15
   22142:	18fb      	adds	r3, r7, r3
   22144:	701a      	strb	r2, [r3, #0]
	return crc;
   22146:	230f      	movs	r3, #15
   22148:	18fb      	adds	r3, r7, r3
   2214a:	781b      	ldrb	r3, [r3, #0]
}
   2214c:	0018      	movs	r0, r3
   2214e:	46bd      	mov	sp, r7
   22150:	b004      	add	sp, #16
   22152:	bd80      	pop	{r7, pc}

00022154 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   22154:	b590      	push	{r4, r7, lr}
   22156:	b083      	sub	sp, #12
   22158:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   2215a:	1c7b      	adds	r3, r7, #1
   2215c:	22ff      	movs	r2, #255	; 0xff
   2215e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   22160:	1cbb      	adds	r3, r7, #2
   22162:	22ff      	movs	r2, #255	; 0xff
   22164:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   22166:	1cbb      	adds	r3, r7, #2
   22168:	881b      	ldrh	r3, [r3, #0]
   2216a:	1c79      	adds	r1, r7, #1
   2216c:	4811      	ldr	r0, [pc, #68]	; (221b4 <sd_mmc_spi_wait_busy+0x60>)
   2216e:	2201      	movs	r2, #1
   22170:	4c11      	ldr	r4, [pc, #68]	; (221b8 <sd_mmc_spi_wait_busy+0x64>)
   22172:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   22174:	4b11      	ldr	r3, [pc, #68]	; (221bc <sd_mmc_spi_wait_busy+0x68>)
   22176:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   22178:	1cbb      	adds	r3, r7, #2
   2217a:	881b      	ldrh	r3, [r3, #0]
   2217c:	1c79      	adds	r1, r7, #1
   2217e:	480d      	ldr	r0, [pc, #52]	; (221b4 <sd_mmc_spi_wait_busy+0x60>)
   22180:	2201      	movs	r2, #1
   22182:	4c0d      	ldr	r4, [pc, #52]	; (221b8 <sd_mmc_spi_wait_busy+0x64>)
   22184:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   22186:	1cbb      	adds	r3, r7, #2
   22188:	881b      	ldrh	r3, [r3, #0]
   2218a:	1c79      	adds	r1, r7, #1
   2218c:	4809      	ldr	r0, [pc, #36]	; (221b4 <sd_mmc_spi_wait_busy+0x60>)
   2218e:	2201      	movs	r2, #1
   22190:	4c09      	ldr	r4, [pc, #36]	; (221b8 <sd_mmc_spi_wait_busy+0x64>)
   22192:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   22194:	687b      	ldr	r3, [r7, #4]
   22196:	1e5a      	subs	r2, r3, #1
   22198:	607a      	str	r2, [r7, #4]
   2219a:	2b00      	cmp	r3, #0
   2219c:	d101      	bne.n	221a2 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   2219e:	2300      	movs	r3, #0
   221a0:	e004      	b.n	221ac <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   221a2:	1c7b      	adds	r3, r7, #1
   221a4:	781b      	ldrb	r3, [r3, #0]
   221a6:	2bff      	cmp	r3, #255	; 0xff
   221a8:	d1ed      	bne.n	22186 <sd_mmc_spi_wait_busy+0x32>
	return true;
   221aa:	2301      	movs	r3, #1
}
   221ac:	0018      	movs	r0, r3
   221ae:	46bd      	mov	sp, r7
   221b0:	b003      	add	sp, #12
   221b2:	bd90      	pop	{r4, r7, pc}
   221b4:	2000417c 	.word	0x2000417c
   221b8:	0002aa2d 	.word	0x0002aa2d
   221bc:	00030d40 	.word	0x00030d40

000221c0 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   221c0:	b590      	push	{r4, r7, lr}
   221c2:	b083      	sub	sp, #12
   221c4:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   221c6:	1cbb      	adds	r3, r7, #2
   221c8:	22ff      	movs	r2, #255	; 0xff
   221ca:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   221cc:	1c7b      	adds	r3, r7, #1
   221ce:	2200      	movs	r2, #0
   221d0:	701a      	strb	r2, [r3, #0]
	i = 500000;
   221d2:	4b18      	ldr	r3, [pc, #96]	; (22234 <sd_mmc_spi_start_read_block+0x74>)
   221d4:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   221d6:	687b      	ldr	r3, [r7, #4]
   221d8:	1e5a      	subs	r2, r3, #1
   221da:	607a      	str	r2, [r7, #4]
   221dc:	2b00      	cmp	r3, #0
   221de:	d104      	bne.n	221ea <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   221e0:	4b15      	ldr	r3, [pc, #84]	; (22238 <sd_mmc_spi_start_read_block+0x78>)
   221e2:	2204      	movs	r2, #4
   221e4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   221e6:	2300      	movs	r3, #0
   221e8:	e020      	b.n	2222c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   221ea:	1cbb      	adds	r3, r7, #2
   221ec:	881b      	ldrh	r3, [r3, #0]
   221ee:	1c79      	adds	r1, r7, #1
   221f0:	4812      	ldr	r0, [pc, #72]	; (2223c <sd_mmc_spi_start_read_block+0x7c>)
   221f2:	2201      	movs	r2, #1
   221f4:	4c12      	ldr	r4, [pc, #72]	; (22240 <sd_mmc_spi_start_read_block+0x80>)
   221f6:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   221f8:	1c7b      	adds	r3, r7, #1
   221fa:	781b      	ldrb	r3, [r3, #0]
   221fc:	001a      	movs	r2, r3
   221fe:	23f0      	movs	r3, #240	; 0xf0
   22200:	4013      	ands	r3, r2
   22202:	d10e      	bne.n	22222 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   22204:	1c7b      	adds	r3, r7, #1
   22206:	781b      	ldrb	r3, [r3, #0]
   22208:	001a      	movs	r2, r3
   2220a:	2307      	movs	r3, #7
   2220c:	4013      	ands	r3, r2
   2220e:	d003      	beq.n	22218 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   22210:	4b09      	ldr	r3, [pc, #36]	; (22238 <sd_mmc_spi_start_read_block+0x78>)
   22212:	2207      	movs	r2, #7
   22214:	701a      	strb	r2, [r3, #0]
   22216:	e002      	b.n	2221e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   22218:	4b07      	ldr	r3, [pc, #28]	; (22238 <sd_mmc_spi_start_read_block+0x78>)
   2221a:	220b      	movs	r2, #11
   2221c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   2221e:	2300      	movs	r3, #0
   22220:	e004      	b.n	2222c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   22222:	1c7b      	adds	r3, r7, #1
   22224:	781b      	ldrb	r3, [r3, #0]
   22226:	2bfe      	cmp	r3, #254	; 0xfe
   22228:	d1d5      	bne.n	221d6 <sd_mmc_spi_start_read_block+0x16>

	return true;
   2222a:	2301      	movs	r3, #1
}
   2222c:	0018      	movs	r0, r3
   2222e:	46bd      	mov	sp, r7
   22230:	b003      	add	sp, #12
   22232:	bd90      	pop	{r4, r7, pc}
   22234:	0007a120 	.word	0x0007a120
   22238:	200041bf 	.word	0x200041bf
   2223c:	2000417c 	.word	0x2000417c
   22240:	0002aa2d 	.word	0x0002aa2d

00022244 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   22244:	b590      	push	{r4, r7, lr}
   22246:	b083      	sub	sp, #12
   22248:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   2224a:	1dbb      	adds	r3, r7, #6
   2224c:	22ff      	movs	r2, #255	; 0xff
   2224e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   22250:	1dbb      	adds	r3, r7, #6
   22252:	881b      	ldrh	r3, [r3, #0]
   22254:	1d39      	adds	r1, r7, #4
   22256:	4804      	ldr	r0, [pc, #16]	; (22268 <sd_mmc_spi_stop_read_block+0x24>)
   22258:	2202      	movs	r2, #2
   2225a:	4c04      	ldr	r4, [pc, #16]	; (2226c <sd_mmc_spi_stop_read_block+0x28>)
   2225c:	47a0      	blx	r4
			dummy);
}
   2225e:	46c0      	nop			; (mov r8, r8)
   22260:	46bd      	mov	sp, r7
   22262:	b003      	add	sp, #12
   22264:	bd90      	pop	{r4, r7, pc}
   22266:	46c0      	nop			; (mov r8, r8)
   22268:	2000417c 	.word	0x2000417c
   2226c:	0002aa2d 	.word	0x0002aa2d

00022270 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   22270:	b580      	push	{r7, lr}
   22272:	b082      	sub	sp, #8
   22274:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   22276:	1dfb      	adds	r3, r7, #7
   22278:	22ff      	movs	r2, #255	; 0xff
   2227a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   2227c:	1df9      	adds	r1, r7, #7
   2227e:	4b0d      	ldr	r3, [pc, #52]	; (222b4 <sd_mmc_spi_start_write_block+0x44>)
   22280:	2201      	movs	r2, #1
   22282:	0018      	movs	r0, r3
   22284:	4b0c      	ldr	r3, [pc, #48]	; (222b8 <sd_mmc_spi_start_write_block+0x48>)
   22286:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   22288:	4b0c      	ldr	r3, [pc, #48]	; (222bc <sd_mmc_spi_start_write_block+0x4c>)
   2228a:	881b      	ldrh	r3, [r3, #0]
   2228c:	2b01      	cmp	r3, #1
   2228e:	d103      	bne.n	22298 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   22290:	1dbb      	adds	r3, r7, #6
   22292:	22fe      	movs	r2, #254	; 0xfe
   22294:	701a      	strb	r2, [r3, #0]
   22296:	e002      	b.n	2229e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   22298:	1dbb      	adds	r3, r7, #6
   2229a:	22fc      	movs	r2, #252	; 0xfc
   2229c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   2229e:	1db9      	adds	r1, r7, #6
   222a0:	4b04      	ldr	r3, [pc, #16]	; (222b4 <sd_mmc_spi_start_write_block+0x44>)
   222a2:	2201      	movs	r2, #1
   222a4:	0018      	movs	r0, r3
   222a6:	4b04      	ldr	r3, [pc, #16]	; (222b8 <sd_mmc_spi_start_write_block+0x48>)
   222a8:	4798      	blx	r3
}
   222aa:	46c0      	nop			; (mov r8, r8)
   222ac:	46bd      	mov	sp, r7
   222ae:	b002      	add	sp, #8
   222b0:	bd80      	pop	{r7, pc}
   222b2:	46c0      	nop			; (mov r8, r8)
   222b4:	2000417c 	.word	0x2000417c
   222b8:	0002ac51 	.word	0x0002ac51
   222bc:	200041ca 	.word	0x200041ca

000222c0 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   222c0:	b590      	push	{r4, r7, lr}
   222c2:	b083      	sub	sp, #12
   222c4:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   222c6:	1dbb      	adds	r3, r7, #6
   222c8:	22ff      	movs	r2, #255	; 0xff
   222ca:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   222cc:	1cbb      	adds	r3, r7, #2
   222ce:	2201      	movs	r2, #1
   222d0:	4252      	negs	r2, r2
   222d2:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   222d4:	1cb9      	adds	r1, r7, #2
   222d6:	4b1b      	ldr	r3, [pc, #108]	; (22344 <sd_mmc_spi_stop_write_block+0x84>)
   222d8:	2202      	movs	r2, #2
   222da:	0018      	movs	r0, r3
   222dc:	4b1a      	ldr	r3, [pc, #104]	; (22348 <sd_mmc_spi_stop_write_block+0x88>)
   222de:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   222e0:	1dbb      	adds	r3, r7, #6
   222e2:	881b      	ldrh	r3, [r3, #0]
   222e4:	1d79      	adds	r1, r7, #5
   222e6:	4817      	ldr	r0, [pc, #92]	; (22344 <sd_mmc_spi_stop_write_block+0x84>)
   222e8:	2201      	movs	r2, #1
   222ea:	4c18      	ldr	r4, [pc, #96]	; (2234c <sd_mmc_spi_stop_write_block+0x8c>)
   222ec:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   222ee:	1d7b      	adds	r3, r7, #5
   222f0:	781b      	ldrb	r3, [r3, #0]
   222f2:	001a      	movs	r2, r3
   222f4:	2310      	movs	r3, #16
   222f6:	4013      	ands	r3, r2
   222f8:	d105      	bne.n	22306 <sd_mmc_spi_stop_write_block+0x46>
   222fa:	1d7b      	adds	r3, r7, #5
   222fc:	781b      	ldrb	r3, [r3, #0]
   222fe:	001a      	movs	r2, r3
   22300:	2301      	movs	r3, #1
   22302:	4013      	ands	r3, r2
   22304:	d104      	bne.n	22310 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   22306:	4b12      	ldr	r3, [pc, #72]	; (22350 <sd_mmc_spi_stop_write_block+0x90>)
   22308:	2201      	movs	r2, #1
   2230a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   2230c:	2300      	movs	r3, #0
   2230e:	e014      	b.n	2233a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   22310:	1d7b      	adds	r3, r7, #5
   22312:	781b      	ldrb	r3, [r3, #0]
   22314:	001a      	movs	r2, r3
   22316:	231e      	movs	r3, #30
   22318:	4013      	ands	r3, r2
   2231a:	2b04      	cmp	r3, #4
   2231c:	d00b      	beq.n	22336 <sd_mmc_spi_stop_write_block+0x76>
   2231e:	2b0a      	cmp	r3, #10
   22320:	d104      	bne.n	2232c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   22322:	4b0b      	ldr	r3, [pc, #44]	; (22350 <sd_mmc_spi_stop_write_block+0x90>)
   22324:	2208      	movs	r2, #8
   22326:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   22328:	2300      	movs	r3, #0
   2232a:	e006      	b.n	2233a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   2232c:	4b08      	ldr	r3, [pc, #32]	; (22350 <sd_mmc_spi_stop_write_block+0x90>)
   2232e:	220a      	movs	r2, #10
   22330:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   22332:	2300      	movs	r3, #0
   22334:	e001      	b.n	2233a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   22336:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   22338:	2301      	movs	r3, #1
}
   2233a:	0018      	movs	r0, r3
   2233c:	46bd      	mov	sp, r7
   2233e:	b003      	add	sp, #12
   22340:	bd90      	pop	{r4, r7, pc}
   22342:	46c0      	nop			; (mov r8, r8)
   22344:	2000417c 	.word	0x2000417c
   22348:	0002ac51 	.word	0x0002ac51
   2234c:	0002aa2d 	.word	0x0002aa2d
   22350:	200041bf 	.word	0x200041bf

00022354 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   22354:	b590      	push	{r4, r7, lr}
   22356:	b083      	sub	sp, #12
   22358:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   2235a:	4b1d      	ldr	r3, [pc, #116]	; (223d0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   2235c:	881b      	ldrh	r3, [r3, #0]
   2235e:	2b01      	cmp	r3, #1
   22360:	d101      	bne.n	22366 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   22362:	2301      	movs	r3, #1
   22364:	e030      	b.n	223c8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   22366:	4b1a      	ldr	r3, [pc, #104]	; (223d0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   22368:	881b      	ldrh	r3, [r3, #0]
   2236a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   2236c:	4b19      	ldr	r3, [pc, #100]	; (223d4 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   2236e:	681a      	ldr	r2, [r3, #0]
   22370:	4b19      	ldr	r3, [pc, #100]	; (223d8 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   22372:	881b      	ldrh	r3, [r3, #0]
   22374:	0019      	movs	r1, r3
   22376:	4b19      	ldr	r3, [pc, #100]	; (223dc <sd_mmc_spi_stop_multiwrite_block+0x88>)
   22378:	0010      	movs	r0, r2
   2237a:	4798      	blx	r3
   2237c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   2237e:	429c      	cmp	r4, r3
   22380:	d901      	bls.n	22386 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   22382:	2301      	movs	r3, #1
   22384:	e020      	b.n	223c8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   22386:	1dfb      	adds	r3, r7, #7
   22388:	22ff      	movs	r2, #255	; 0xff
   2238a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2238c:	1df9      	adds	r1, r7, #7
   2238e:	4b14      	ldr	r3, [pc, #80]	; (223e0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   22390:	2201      	movs	r2, #1
   22392:	0018      	movs	r0, r3
   22394:	4b13      	ldr	r3, [pc, #76]	; (223e4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   22396:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   22398:	1dfb      	adds	r3, r7, #7
   2239a:	22fd      	movs	r2, #253	; 0xfd
   2239c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2239e:	1df9      	adds	r1, r7, #7
   223a0:	4b0f      	ldr	r3, [pc, #60]	; (223e0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   223a2:	2201      	movs	r2, #1
   223a4:	0018      	movs	r0, r3
   223a6:	4b0f      	ldr	r3, [pc, #60]	; (223e4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   223a8:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   223aa:	4b0f      	ldr	r3, [pc, #60]	; (223e8 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   223ac:	4798      	blx	r3
   223ae:	0003      	movs	r3, r0
   223b0:	001a      	movs	r2, r3
   223b2:	2301      	movs	r3, #1
   223b4:	4053      	eors	r3, r2
   223b6:	b2db      	uxtb	r3, r3
   223b8:	2b00      	cmp	r3, #0
   223ba:	d004      	beq.n	223c6 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   223bc:	4b0b      	ldr	r3, [pc, #44]	; (223ec <sd_mmc_spi_stop_multiwrite_block+0x98>)
   223be:	2205      	movs	r2, #5
   223c0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   223c2:	2300      	movs	r3, #0
   223c4:	e000      	b.n	223c8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   223c6:	2301      	movs	r3, #1
}
   223c8:	0018      	movs	r0, r3
   223ca:	46bd      	mov	sp, r7
   223cc:	b003      	add	sp, #12
   223ce:	bd90      	pop	{r4, r7, pc}
   223d0:	200041ca 	.word	0x200041ca
   223d4:	200041c4 	.word	0x200041c4
   223d8:	200041c8 	.word	0x200041c8
   223dc:	00035449 	.word	0x00035449
   223e0:	2000417c 	.word	0x2000417c
   223e4:	0002ac51 	.word	0x0002ac51
   223e8:	00022155 	.word	0x00022155
   223ec:	200041bf 	.word	0x200041bf

000223f0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   223f0:	b580      	push	{r7, lr}
   223f2:	b090      	sub	sp, #64	; 0x40
   223f4:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   223f6:	4b1f      	ldr	r3, [pc, #124]	; (22474 <sd_mmc_spi_init+0x84>)
   223f8:	2200      	movs	r2, #0
   223fa:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   223fc:	233c      	movs	r3, #60	; 0x3c
   223fe:	18fb      	adds	r3, r7, r3
   22400:	0018      	movs	r0, r3
   22402:	4b1d      	ldr	r3, [pc, #116]	; (22478 <sd_mmc_spi_init+0x88>)
   22404:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   22406:	1d3b      	adds	r3, r7, #4
   22408:	0018      	movs	r0, r3
   2240a:	4b1c      	ldr	r3, [pc, #112]	; (2247c <sd_mmc_spi_init+0x8c>)
   2240c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   2240e:	1d3b      	adds	r3, r7, #4
   22410:	2280      	movs	r2, #128	; 0x80
   22412:	0252      	lsls	r2, r2, #9
   22414:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   22416:	1d3b      	adds	r3, r7, #4
   22418:	4a19      	ldr	r2, [pc, #100]	; (22480 <sd_mmc_spi_init+0x90>)
   2241a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   2241c:	1d3b      	adds	r3, r7, #4
   2241e:	4a19      	ldr	r2, [pc, #100]	; (22484 <sd_mmc_spi_init+0x94>)
   22420:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   22422:	1d3b      	adds	r3, r7, #4
   22424:	4a18      	ldr	r2, [pc, #96]	; (22488 <sd_mmc_spi_init+0x98>)
   22426:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   22428:	1d3b      	adds	r3, r7, #4
   2242a:	4a18      	ldr	r2, [pc, #96]	; (2248c <sd_mmc_spi_init+0x9c>)
   2242c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   2242e:	1d3b      	adds	r3, r7, #4
   22430:	2224      	movs	r2, #36	; 0x24
   22432:	2100      	movs	r1, #0
   22434:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   22436:	1d3b      	adds	r3, r7, #4
   22438:	4a15      	ldr	r2, [pc, #84]	; (22490 <sd_mmc_spi_init+0xa0>)
   2243a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   2243c:	1d3a      	adds	r2, r7, #4
   2243e:	4915      	ldr	r1, [pc, #84]	; (22494 <sd_mmc_spi_init+0xa4>)
   22440:	4b15      	ldr	r3, [pc, #84]	; (22498 <sd_mmc_spi_init+0xa8>)
   22442:	0018      	movs	r0, r3
   22444:	4b15      	ldr	r3, [pc, #84]	; (2249c <sd_mmc_spi_init+0xac>)
   22446:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   22448:	4b13      	ldr	r3, [pc, #76]	; (22498 <sd_mmc_spi_init+0xa8>)
   2244a:	0018      	movs	r0, r3
   2244c:	4b14      	ldr	r3, [pc, #80]	; (224a0 <sd_mmc_spi_init+0xb0>)
   2244e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   22450:	4b14      	ldr	r3, [pc, #80]	; (224a4 <sd_mmc_spi_init+0xb4>)
   22452:	0018      	movs	r0, r3
   22454:	4b14      	ldr	r3, [pc, #80]	; (224a8 <sd_mmc_spi_init+0xb8>)
   22456:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   22458:	4b14      	ldr	r3, [pc, #80]	; (224ac <sd_mmc_spi_init+0xbc>)
   2245a:	781a      	ldrb	r2, [r3, #0]
   2245c:	4b11      	ldr	r3, [pc, #68]	; (224a4 <sd_mmc_spi_init+0xb4>)
   2245e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   22460:	4a10      	ldr	r2, [pc, #64]	; (224a4 <sd_mmc_spi_init+0xb4>)
   22462:	4b13      	ldr	r3, [pc, #76]	; (224b0 <sd_mmc_spi_init+0xc0>)
   22464:	0011      	movs	r1, r2
   22466:	0018      	movs	r0, r3
   22468:	4b12      	ldr	r3, [pc, #72]	; (224b4 <sd_mmc_spi_init+0xc4>)
   2246a:	4798      	blx	r3
}
   2246c:	46c0      	nop			; (mov r8, r8)
   2246e:	46bd      	mov	sp, r7
   22470:	b010      	add	sp, #64	; 0x40
   22472:	bd80      	pop	{r7, pc}
   22474:	200041bf 	.word	0x200041bf
   22478:	00021ea5 	.word	0x00021ea5
   2247c:	00021f3d 	.word	0x00021f3d
   22480:	00100002 	.word	0x00100002
   22484:	00110002 	.word	0x00110002
   22488:	00120002 	.word	0x00120002
   2248c:	00130002 	.word	0x00130002
   22490:	00061a80 	.word	0x00061a80
   22494:	42000c00 	.word	0x42000c00
   22498:	2000417c 	.word	0x2000417c
   2249c:	0002a89d 	.word	0x0002a89d
   224a0:	00022049 	.word	0x00022049
   224a4:	200041bc 	.word	0x200041bc
   224a8:	00021fc1 	.word	0x00021fc1
   224ac:	2000010c 	.word	0x2000010c
   224b0:	200041b8 	.word	0x200041b8
   224b4:	00021fe5 	.word	0x00021fe5

000224b8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   224b8:	b590      	push	{r4, r7, lr}
   224ba:	b083      	sub	sp, #12
   224bc:	af00      	add	r7, sp, #0
   224be:	0004      	movs	r4, r0
   224c0:	6039      	str	r1, [r7, #0]
   224c2:	0010      	movs	r0, r2
   224c4:	0019      	movs	r1, r3
   224c6:	1dfb      	adds	r3, r7, #7
   224c8:	1c22      	adds	r2, r4, #0
   224ca:	701a      	strb	r2, [r3, #0]
   224cc:	1dbb      	adds	r3, r7, #6
   224ce:	1c02      	adds	r2, r0, #0
   224d0:	701a      	strb	r2, [r3, #0]
   224d2:	1d7b      	adds	r3, r7, #5
   224d4:	1c0a      	adds	r2, r1, #0
   224d6:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   224d8:	4b13      	ldr	r3, [pc, #76]	; (22528 <sd_mmc_spi_select_device+0x70>)
   224da:	2200      	movs	r2, #0
   224dc:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   224de:	683b      	ldr	r3, [r7, #0]
   224e0:	4a12      	ldr	r2, [pc, #72]	; (2252c <sd_mmc_spi_select_device+0x74>)
   224e2:	4293      	cmp	r3, r2
   224e4:	d907      	bls.n	224f6 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   224e6:	4b11      	ldr	r3, [pc, #68]	; (2252c <sd_mmc_spi_select_device+0x74>)
   224e8:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   224ea:	e004      	b.n	224f6 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   224ec:	683b      	ldr	r3, [r7, #0]
   224ee:	08db      	lsrs	r3, r3, #3
   224f0:	683a      	ldr	r2, [r7, #0]
   224f2:	1ad3      	subs	r3, r2, r3
   224f4:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   224f6:	683a      	ldr	r2, [r7, #0]
   224f8:	4b0d      	ldr	r3, [pc, #52]	; (22530 <sd_mmc_spi_select_device+0x78>)
   224fa:	0011      	movs	r1, r2
   224fc:	0018      	movs	r0, r3
   224fe:	4b0d      	ldr	r3, [pc, #52]	; (22534 <sd_mmc_spi_select_device+0x7c>)
   22500:	4798      	blx	r3
   22502:	0003      	movs	r3, r0
   22504:	2b17      	cmp	r3, #23
   22506:	d0f1      	beq.n	224ec <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   22508:	1dfb      	adds	r3, r7, #7
   2250a:	781a      	ldrb	r2, [r3, #0]
   2250c:	0013      	movs	r3, r2
   2250e:	005b      	lsls	r3, r3, #1
   22510:	189b      	adds	r3, r3, r2
   22512:	4a09      	ldr	r2, [pc, #36]	; (22538 <sd_mmc_spi_select_device+0x80>)
   22514:	1899      	adds	r1, r3, r2
   22516:	4b06      	ldr	r3, [pc, #24]	; (22530 <sd_mmc_spi_select_device+0x78>)
   22518:	2201      	movs	r2, #1
   2251a:	0018      	movs	r0, r3
   2251c:	4b07      	ldr	r3, [pc, #28]	; (2253c <sd_mmc_spi_select_device+0x84>)
   2251e:	4798      	blx	r3
}
   22520:	46c0      	nop			; (mov r8, r8)
   22522:	46bd      	mov	sp, r7
   22524:	b003      	add	sp, #12
   22526:	bd90      	pop	{r4, r7, pc}
   22528:	200041bf 	.word	0x200041bf
   2252c:	00989680 	.word	0x00989680
   22530:	2000417c 	.word	0x2000417c
   22534:	0002a5c5 	.word	0x0002a5c5
   22538:	200041b8 	.word	0x200041b8
   2253c:	0002ab61 	.word	0x0002ab61

00022540 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   22540:	b580      	push	{r7, lr}
   22542:	b082      	sub	sp, #8
   22544:	af00      	add	r7, sp, #0
   22546:	0002      	movs	r2, r0
   22548:	1dfb      	adds	r3, r7, #7
   2254a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2254c:	4b09      	ldr	r3, [pc, #36]	; (22574 <sd_mmc_spi_deselect_device+0x34>)
   2254e:	2200      	movs	r2, #0
   22550:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   22552:	1dfb      	adds	r3, r7, #7
   22554:	781a      	ldrb	r2, [r3, #0]
   22556:	0013      	movs	r3, r2
   22558:	005b      	lsls	r3, r3, #1
   2255a:	189b      	adds	r3, r3, r2
   2255c:	4a06      	ldr	r2, [pc, #24]	; (22578 <sd_mmc_spi_deselect_device+0x38>)
   2255e:	1899      	adds	r1, r3, r2
   22560:	4b06      	ldr	r3, [pc, #24]	; (2257c <sd_mmc_spi_deselect_device+0x3c>)
   22562:	2200      	movs	r2, #0
   22564:	0018      	movs	r0, r3
   22566:	4b06      	ldr	r3, [pc, #24]	; (22580 <sd_mmc_spi_deselect_device+0x40>)
   22568:	4798      	blx	r3
}
   2256a:	46c0      	nop			; (mov r8, r8)
   2256c:	46bd      	mov	sp, r7
   2256e:	b002      	add	sp, #8
   22570:	bd80      	pop	{r7, pc}
   22572:	46c0      	nop			; (mov r8, r8)
   22574:	200041bf 	.word	0x200041bf
   22578:	200041b8 	.word	0x200041b8
   2257c:	2000417c 	.word	0x2000417c
   22580:	0002ab61 	.word	0x0002ab61

00022584 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   22584:	b580      	push	{r7, lr}
   22586:	b082      	sub	sp, #8
   22588:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   2258a:	1dbb      	adds	r3, r7, #6
   2258c:	22ff      	movs	r2, #255	; 0xff
   2258e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22590:	4b0c      	ldr	r3, [pc, #48]	; (225c4 <sd_mmc_spi_send_clock+0x40>)
   22592:	2200      	movs	r2, #0
   22594:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   22596:	1dfb      	adds	r3, r7, #7
   22598:	2200      	movs	r2, #0
   2259a:	701a      	strb	r2, [r3, #0]
   2259c:	e00a      	b.n	225b4 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   2259e:	1db9      	adds	r1, r7, #6
   225a0:	4b09      	ldr	r3, [pc, #36]	; (225c8 <sd_mmc_spi_send_clock+0x44>)
   225a2:	2201      	movs	r2, #1
   225a4:	0018      	movs	r0, r3
   225a6:	4b09      	ldr	r3, [pc, #36]	; (225cc <sd_mmc_spi_send_clock+0x48>)
   225a8:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   225aa:	1dfb      	adds	r3, r7, #7
   225ac:	781a      	ldrb	r2, [r3, #0]
   225ae:	1dfb      	adds	r3, r7, #7
   225b0:	3201      	adds	r2, #1
   225b2:	701a      	strb	r2, [r3, #0]
   225b4:	1dfb      	adds	r3, r7, #7
   225b6:	781b      	ldrb	r3, [r3, #0]
   225b8:	2b09      	cmp	r3, #9
   225ba:	d9f0      	bls.n	2259e <sd_mmc_spi_send_clock+0x1a>
	}
}
   225bc:	46c0      	nop			; (mov r8, r8)
   225be:	46bd      	mov	sp, r7
   225c0:	b002      	add	sp, #8
   225c2:	bd80      	pop	{r7, pc}
   225c4:	200041bf 	.word	0x200041bf
   225c8:	2000417c 	.word	0x2000417c
   225cc:	0002ac51 	.word	0x0002ac51

000225d0 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   225d0:	b590      	push	{r4, r7, lr}
   225d2:	b085      	sub	sp, #20
   225d4:	af02      	add	r7, sp, #8
   225d6:	6078      	str	r0, [r7, #4]
   225d8:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   225da:	6839      	ldr	r1, [r7, #0]
   225dc:	6878      	ldr	r0, [r7, #4]
   225de:	2300      	movs	r3, #0
   225e0:	9300      	str	r3, [sp, #0]
   225e2:	2300      	movs	r3, #0
   225e4:	2200      	movs	r2, #0
   225e6:	4c03      	ldr	r4, [pc, #12]	; (225f4 <sd_mmc_spi_send_cmd+0x24>)
   225e8:	47a0      	blx	r4
   225ea:	0003      	movs	r3, r0
}
   225ec:	0018      	movs	r0, r3
   225ee:	46bd      	mov	sp, r7
   225f0:	b003      	add	sp, #12
   225f2:	bd90      	pop	{r4, r7, pc}
   225f4:	000225f9 	.word	0x000225f9

000225f8 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   225f8:	b590      	push	{r4, r7, lr}
   225fa:	b089      	sub	sp, #36	; 0x24
   225fc:	af00      	add	r7, sp, #0
   225fe:	60f8      	str	r0, [r7, #12]
   22600:	60b9      	str	r1, [r7, #8]
   22602:	0019      	movs	r1, r3
   22604:	1dbb      	adds	r3, r7, #6
   22606:	801a      	strh	r2, [r3, #0]
   22608:	1d3b      	adds	r3, r7, #4
   2260a:	1c0a      	adds	r2, r1, #0
   2260c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   2260e:	231b      	movs	r3, #27
   22610:	18fb      	adds	r3, r7, r3
   22612:	22ff      	movs	r2, #255	; 0xff
   22614:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   22616:	231c      	movs	r3, #28
   22618:	18fb      	adds	r3, r7, r3
   2261a:	22ff      	movs	r2, #255	; 0xff
   2261c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2261e:	4b72      	ldr	r3, [pc, #456]	; (227e8 <sd_mmc_spi_adtc_start+0x1f0>)
   22620:	2200      	movs	r2, #0
   22622:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   22624:	68fb      	ldr	r3, [r7, #12]
   22626:	b2db      	uxtb	r3, r3
   22628:	223f      	movs	r2, #63	; 0x3f
   2262a:	4013      	ands	r3, r2
   2262c:	b2db      	uxtb	r3, r3
   2262e:	2240      	movs	r2, #64	; 0x40
   22630:	4313      	orrs	r3, r2
   22632:	b2da      	uxtb	r2, r3
   22634:	2314      	movs	r3, #20
   22636:	18fb      	adds	r3, r7, r3
   22638:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   2263a:	68bb      	ldr	r3, [r7, #8]
   2263c:	0e1b      	lsrs	r3, r3, #24
   2263e:	b2da      	uxtb	r2, r3
   22640:	2314      	movs	r3, #20
   22642:	18fb      	adds	r3, r7, r3
   22644:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   22646:	68bb      	ldr	r3, [r7, #8]
   22648:	0c1b      	lsrs	r3, r3, #16
   2264a:	b2da      	uxtb	r2, r3
   2264c:	2314      	movs	r3, #20
   2264e:	18fb      	adds	r3, r7, r3
   22650:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   22652:	68bb      	ldr	r3, [r7, #8]
   22654:	0a1b      	lsrs	r3, r3, #8
   22656:	b2da      	uxtb	r2, r3
   22658:	2314      	movs	r3, #20
   2265a:	18fb      	adds	r3, r7, r3
   2265c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   2265e:	68bb      	ldr	r3, [r7, #8]
   22660:	b2da      	uxtb	r2, r3
   22662:	2314      	movs	r3, #20
   22664:	18fb      	adds	r3, r7, r3
   22666:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   22668:	2314      	movs	r3, #20
   2266a:	18fb      	adds	r3, r7, r3
   2266c:	2105      	movs	r1, #5
   2266e:	0018      	movs	r0, r3
   22670:	4b5e      	ldr	r3, [pc, #376]	; (227ec <sd_mmc_spi_adtc_start+0x1f4>)
   22672:	4798      	blx	r3
   22674:	0003      	movs	r3, r0
   22676:	001a      	movs	r2, r3
   22678:	2314      	movs	r3, #20
   2267a:	18fb      	adds	r3, r7, r3
   2267c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   2267e:	231b      	movs	r3, #27
   22680:	18f9      	adds	r1, r7, r3
   22682:	4b5b      	ldr	r3, [pc, #364]	; (227f0 <sd_mmc_spi_adtc_start+0x1f8>)
   22684:	2201      	movs	r2, #1
   22686:	0018      	movs	r0, r3
   22688:	4b5a      	ldr	r3, [pc, #360]	; (227f4 <sd_mmc_spi_adtc_start+0x1fc>)
   2268a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   2268c:	2314      	movs	r3, #20
   2268e:	18f9      	adds	r1, r7, r3
   22690:	4b57      	ldr	r3, [pc, #348]	; (227f0 <sd_mmc_spi_adtc_start+0x1f8>)
   22692:	2206      	movs	r2, #6
   22694:	0018      	movs	r0, r3
   22696:	4b57      	ldr	r3, [pc, #348]	; (227f4 <sd_mmc_spi_adtc_start+0x1fc>)
   22698:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   2269a:	2313      	movs	r3, #19
   2269c:	18fb      	adds	r3, r7, r3
   2269e:	22ff      	movs	r2, #255	; 0xff
   226a0:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   226a2:	231c      	movs	r3, #28
   226a4:	18fb      	adds	r3, r7, r3
   226a6:	881b      	ldrh	r3, [r3, #0]
   226a8:	2213      	movs	r2, #19
   226aa:	18b9      	adds	r1, r7, r2
   226ac:	4850      	ldr	r0, [pc, #320]	; (227f0 <sd_mmc_spi_adtc_start+0x1f8>)
   226ae:	2201      	movs	r2, #1
   226b0:	4c51      	ldr	r4, [pc, #324]	; (227f8 <sd_mmc_spi_adtc_start+0x200>)
   226b2:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   226b4:	231f      	movs	r3, #31
   226b6:	18fb      	adds	r3, r7, r3
   226b8:	2207      	movs	r2, #7
   226ba:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   226bc:	231c      	movs	r3, #28
   226be:	18fb      	adds	r3, r7, r3
   226c0:	881b      	ldrh	r3, [r3, #0]
   226c2:	2213      	movs	r2, #19
   226c4:	18b9      	adds	r1, r7, r2
   226c6:	484a      	ldr	r0, [pc, #296]	; (227f0 <sd_mmc_spi_adtc_start+0x1f8>)
   226c8:	2201      	movs	r2, #1
   226ca:	4c4b      	ldr	r4, [pc, #300]	; (227f8 <sd_mmc_spi_adtc_start+0x200>)
   226cc:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   226ce:	2313      	movs	r3, #19
   226d0:	18fb      	adds	r3, r7, r3
   226d2:	781b      	ldrb	r3, [r3, #0]
   226d4:	b25b      	sxtb	r3, r3
   226d6:	2b00      	cmp	r3, #0
   226d8:	da10      	bge.n	226fc <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   226da:	231f      	movs	r3, #31
   226dc:	18fb      	adds	r3, r7, r3
   226de:	221f      	movs	r2, #31
   226e0:	18ba      	adds	r2, r7, r2
   226e2:	7812      	ldrb	r2, [r2, #0]
   226e4:	3a01      	subs	r2, #1
   226e6:	701a      	strb	r2, [r3, #0]
   226e8:	231f      	movs	r3, #31
   226ea:	18fb      	adds	r3, r7, r3
   226ec:	781b      	ldrb	r3, [r3, #0]
   226ee:	2b00      	cmp	r3, #0
   226f0:	d1e4      	bne.n	226bc <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   226f2:	4b3d      	ldr	r3, [pc, #244]	; (227e8 <sd_mmc_spi_adtc_start+0x1f0>)
   226f4:	2202      	movs	r2, #2
   226f6:	701a      	strb	r2, [r3, #0]
			return false;
   226f8:	2300      	movs	r3, #0
   226fa:	e070      	b.n	227de <sd_mmc_spi_adtc_start+0x1e6>
			break;
   226fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   226fe:	2313      	movs	r3, #19
   22700:	18fb      	adds	r3, r7, r3
   22702:	781b      	ldrb	r3, [r3, #0]
   22704:	001a      	movs	r2, r3
   22706:	4b3d      	ldr	r3, [pc, #244]	; (227fc <sd_mmc_spi_adtc_start+0x204>)
   22708:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   2270a:	2313      	movs	r3, #19
   2270c:	18fb      	adds	r3, r7, r3
   2270e:	781b      	ldrb	r3, [r3, #0]
   22710:	001a      	movs	r2, r3
   22712:	2308      	movs	r3, #8
   22714:	4013      	ands	r3, r2
   22716:	d004      	beq.n	22722 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   22718:	4b33      	ldr	r3, [pc, #204]	; (227e8 <sd_mmc_spi_adtc_start+0x1f0>)
   2271a:	2206      	movs	r2, #6
   2271c:	701a      	strb	r2, [r3, #0]
		return false;
   2271e:	2300      	movs	r3, #0
   22720:	e05d      	b.n	227de <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   22722:	2313      	movs	r3, #19
   22724:	18fb      	adds	r3, r7, r3
   22726:	781b      	ldrb	r3, [r3, #0]
   22728:	001a      	movs	r2, r3
   2272a:	2304      	movs	r3, #4
   2272c:	4013      	ands	r3, r2
   2272e:	d004      	beq.n	2273a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   22730:	4b2d      	ldr	r3, [pc, #180]	; (227e8 <sd_mmc_spi_adtc_start+0x1f0>)
   22732:	2209      	movs	r2, #9
   22734:	701a      	strb	r2, [r3, #0]
		return false;
   22736:	2300      	movs	r3, #0
   22738:	e051      	b.n	227de <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   2273a:	2313      	movs	r3, #19
   2273c:	18fb      	adds	r3, r7, r3
   2273e:	781b      	ldrb	r3, [r3, #0]
   22740:	001a      	movs	r2, r3
   22742:	2301      	movs	r3, #1
   22744:	439a      	bics	r2, r3
   22746:	1e13      	subs	r3, r2, #0
   22748:	d004      	beq.n	22754 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   2274a:	4b27      	ldr	r3, [pc, #156]	; (227e8 <sd_mmc_spi_adtc_start+0x1f0>)
   2274c:	2201      	movs	r2, #1
   2274e:	701a      	strb	r2, [r3, #0]
		return false;
   22750:	2300      	movs	r3, #0
   22752:	e044      	b.n	227de <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   22754:	68fa      	ldr	r2, [r7, #12]
   22756:	2380      	movs	r3, #128	; 0x80
   22758:	019b      	lsls	r3, r3, #6
   2275a:	4013      	ands	r3, r2
   2275c:	d00d      	beq.n	2277a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   2275e:	4b28      	ldr	r3, [pc, #160]	; (22800 <sd_mmc_spi_adtc_start+0x208>)
   22760:	4798      	blx	r3
   22762:	0003      	movs	r3, r0
   22764:	001a      	movs	r2, r3
   22766:	2301      	movs	r3, #1
   22768:	4053      	eors	r3, r2
   2276a:	b2db      	uxtb	r3, r3
   2276c:	2b00      	cmp	r3, #0
   2276e:	d004      	beq.n	2277a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   22770:	4b1d      	ldr	r3, [pc, #116]	; (227e8 <sd_mmc_spi_adtc_start+0x1f0>)
   22772:	2203      	movs	r2, #3
   22774:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   22776:	2300      	movs	r3, #0
   22778:	e031      	b.n	227de <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   2277a:	68fa      	ldr	r2, [r7, #12]
   2277c:	2380      	movs	r3, #128	; 0x80
   2277e:	009b      	lsls	r3, r3, #2
   22780:	4013      	ands	r3, r2
   22782:	d00e      	beq.n	227a2 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   22784:	4b1d      	ldr	r3, [pc, #116]	; (227fc <sd_mmc_spi_adtc_start+0x204>)
   22786:	2200      	movs	r2, #0
   22788:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   2278a:	231c      	movs	r3, #28
   2278c:	18fb      	adds	r3, r7, r3
   2278e:	881b      	ldrh	r3, [r3, #0]
   22790:	491a      	ldr	r1, [pc, #104]	; (227fc <sd_mmc_spi_adtc_start+0x204>)
   22792:	4817      	ldr	r0, [pc, #92]	; (227f0 <sd_mmc_spi_adtc_start+0x1f8>)
   22794:	2201      	movs	r2, #1
   22796:	4c18      	ldr	r4, [pc, #96]	; (227f8 <sd_mmc_spi_adtc_start+0x200>)
   22798:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   2279a:	4b18      	ldr	r3, [pc, #96]	; (227fc <sd_mmc_spi_adtc_start+0x204>)
   2279c:	681a      	ldr	r2, [r3, #0]
   2279e:	4b17      	ldr	r3, [pc, #92]	; (227fc <sd_mmc_spi_adtc_start+0x204>)
   227a0:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   227a2:	68fa      	ldr	r2, [r7, #12]
   227a4:	2380      	movs	r3, #128	; 0x80
   227a6:	00db      	lsls	r3, r3, #3
   227a8:	4013      	ands	r3, r2
   227aa:	d00c      	beq.n	227c6 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   227ac:	231c      	movs	r3, #28
   227ae:	18fb      	adds	r3, r7, r3
   227b0:	881b      	ldrh	r3, [r3, #0]
   227b2:	4912      	ldr	r1, [pc, #72]	; (227fc <sd_mmc_spi_adtc_start+0x204>)
   227b4:	480e      	ldr	r0, [pc, #56]	; (227f0 <sd_mmc_spi_adtc_start+0x1f8>)
   227b6:	2204      	movs	r2, #4
   227b8:	4c0f      	ldr	r4, [pc, #60]	; (227f8 <sd_mmc_spi_adtc_start+0x200>)
   227ba:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   227bc:	4b0f      	ldr	r3, [pc, #60]	; (227fc <sd_mmc_spi_adtc_start+0x204>)
   227be:	681b      	ldr	r3, [r3, #0]
   227c0:	ba1a      	rev	r2, r3
   227c2:	4b0e      	ldr	r3, [pc, #56]	; (227fc <sd_mmc_spi_adtc_start+0x204>)
   227c4:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   227c6:	4b0f      	ldr	r3, [pc, #60]	; (22804 <sd_mmc_spi_adtc_start+0x20c>)
   227c8:	1dba      	adds	r2, r7, #6
   227ca:	8812      	ldrh	r2, [r2, #0]
   227cc:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   227ce:	4b0e      	ldr	r3, [pc, #56]	; (22808 <sd_mmc_spi_adtc_start+0x210>)
   227d0:	1d3a      	adds	r2, r7, #4
   227d2:	8812      	ldrh	r2, [r2, #0]
   227d4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   227d6:	4b0d      	ldr	r3, [pc, #52]	; (2280c <sd_mmc_spi_adtc_start+0x214>)
   227d8:	2200      	movs	r2, #0
   227da:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   227dc:	2301      	movs	r3, #1
}
   227de:	0018      	movs	r0, r3
   227e0:	46bd      	mov	sp, r7
   227e2:	b009      	add	sp, #36	; 0x24
   227e4:	bd90      	pop	{r4, r7, pc}
   227e6:	46c0      	nop			; (mov r8, r8)
   227e8:	200041bf 	.word	0x200041bf
   227ec:	00022099 	.word	0x00022099
   227f0:	2000417c 	.word	0x2000417c
   227f4:	0002ac51 	.word	0x0002ac51
   227f8:	0002aa2d 	.word	0x0002aa2d
   227fc:	200041c0 	.word	0x200041c0
   22800:	00022155 	.word	0x00022155
   22804:	200041c8 	.word	0x200041c8
   22808:	200041ca 	.word	0x200041ca
   2280c:	200041c4 	.word	0x200041c4

00022810 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   22810:	b580      	push	{r7, lr}
   22812:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   22814:	4b02      	ldr	r3, [pc, #8]	; (22820 <sd_mmc_spi_get_response+0x10>)
   22816:	681b      	ldr	r3, [r3, #0]
}
   22818:	0018      	movs	r0, r3
   2281a:	46bd      	mov	sp, r7
   2281c:	bd80      	pop	{r7, pc}
   2281e:	46c0      	nop			; (mov r8, r8)
   22820:	200041c0 	.word	0x200041c0

00022824 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   22824:	b590      	push	{r4, r7, lr}
   22826:	b085      	sub	sp, #20
   22828:	af00      	add	r7, sp, #0
   2282a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   2282c:	230e      	movs	r3, #14
   2282e:	18fb      	adds	r3, r7, r3
   22830:	22ff      	movs	r2, #255	; 0xff
   22832:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22834:	4b1c      	ldr	r3, [pc, #112]	; (228a8 <sd_mmc_spi_read_word+0x84>)
   22836:	2200      	movs	r2, #0
   22838:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   2283a:	4b1c      	ldr	r3, [pc, #112]	; (228ac <sd_mmc_spi_read_word+0x88>)
   2283c:	681a      	ldr	r2, [r3, #0]
   2283e:	4b1c      	ldr	r3, [pc, #112]	; (228b0 <sd_mmc_spi_read_word+0x8c>)
   22840:	881b      	ldrh	r3, [r3, #0]
   22842:	0019      	movs	r1, r3
   22844:	4b1b      	ldr	r3, [pc, #108]	; (228b4 <sd_mmc_spi_read_word+0x90>)
   22846:	0010      	movs	r0, r2
   22848:	4798      	blx	r3
   2284a:	1e0b      	subs	r3, r1, #0
   2284c:	d10a      	bne.n	22864 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   2284e:	4b1a      	ldr	r3, [pc, #104]	; (228b8 <sd_mmc_spi_read_word+0x94>)
   22850:	4798      	blx	r3
   22852:	0003      	movs	r3, r0
   22854:	001a      	movs	r2, r3
   22856:	2301      	movs	r3, #1
   22858:	4053      	eors	r3, r2
   2285a:	b2db      	uxtb	r3, r3
   2285c:	2b00      	cmp	r3, #0
   2285e:	d001      	beq.n	22864 <sd_mmc_spi_read_word+0x40>
			return false;
   22860:	2300      	movs	r3, #0
   22862:	e01d      	b.n	228a0 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   22864:	230e      	movs	r3, #14
   22866:	18fb      	adds	r3, r7, r3
   22868:	881b      	ldrh	r3, [r3, #0]
   2286a:	1d39      	adds	r1, r7, #4
   2286c:	4813      	ldr	r0, [pc, #76]	; (228bc <sd_mmc_spi_read_word+0x98>)
   2286e:	2204      	movs	r2, #4
   22870:	4c13      	ldr	r4, [pc, #76]	; (228c0 <sd_mmc_spi_read_word+0x9c>)
   22872:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   22874:	687b      	ldr	r3, [r7, #4]
   22876:	687a      	ldr	r2, [r7, #4]
   22878:	6812      	ldr	r2, [r2, #0]
   2287a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   2287c:	4b0b      	ldr	r3, [pc, #44]	; (228ac <sd_mmc_spi_read_word+0x88>)
   2287e:	681b      	ldr	r3, [r3, #0]
   22880:	1d1a      	adds	r2, r3, #4
   22882:	4b0a      	ldr	r3, [pc, #40]	; (228ac <sd_mmc_spi_read_word+0x88>)
   22884:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   22886:	4b09      	ldr	r3, [pc, #36]	; (228ac <sd_mmc_spi_read_word+0x88>)
   22888:	681a      	ldr	r2, [r3, #0]
   2288a:	4b09      	ldr	r3, [pc, #36]	; (228b0 <sd_mmc_spi_read_word+0x8c>)
   2288c:	881b      	ldrh	r3, [r3, #0]
   2288e:	0019      	movs	r1, r3
   22890:	4b08      	ldr	r3, [pc, #32]	; (228b4 <sd_mmc_spi_read_word+0x90>)
   22892:	0010      	movs	r0, r2
   22894:	4798      	blx	r3
   22896:	1e0b      	subs	r3, r1, #0
   22898:	d101      	bne.n	2289e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   2289a:	4b0a      	ldr	r3, [pc, #40]	; (228c4 <sd_mmc_spi_read_word+0xa0>)
   2289c:	4798      	blx	r3
	}
	return true;
   2289e:	2301      	movs	r3, #1
}
   228a0:	0018      	movs	r0, r3
   228a2:	46bd      	mov	sp, r7
   228a4:	b005      	add	sp, #20
   228a6:	bd90      	pop	{r4, r7, pc}
   228a8:	200041bf 	.word	0x200041bf
   228ac:	200041c4 	.word	0x200041c4
   228b0:	200041c8 	.word	0x200041c8
   228b4:	00035555 	.word	0x00035555
   228b8:	000221c1 	.word	0x000221c1
   228bc:	2000417c 	.word	0x2000417c
   228c0:	0002aa2d 	.word	0x0002aa2d
   228c4:	00022245 	.word	0x00022245

000228c8 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   228c8:	b590      	push	{r4, r7, lr}
   228ca:	b085      	sub	sp, #20
   228cc:	af00      	add	r7, sp, #0
   228ce:	6078      	str	r0, [r7, #4]
   228d0:	000a      	movs	r2, r1
   228d2:	1cbb      	adds	r3, r7, #2
   228d4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   228d6:	230a      	movs	r3, #10
   228d8:	18fb      	adds	r3, r7, r3
   228da:	22ff      	movs	r2, #255	; 0xff
   228dc:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   228de:	4b1c      	ldr	r3, [pc, #112]	; (22950 <sd_mmc_spi_start_read_blocks+0x88>)
   228e0:	2200      	movs	r2, #0
   228e2:	701a      	strb	r2, [r3, #0]
	pos = 0;
   228e4:	2300      	movs	r3, #0
   228e6:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   228e8:	e025      	b.n	22936 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   228ea:	4b1a      	ldr	r3, [pc, #104]	; (22954 <sd_mmc_spi_start_read_blocks+0x8c>)
   228ec:	4798      	blx	r3
   228ee:	0003      	movs	r3, r0
   228f0:	001a      	movs	r2, r3
   228f2:	2301      	movs	r3, #1
   228f4:	4053      	eors	r3, r2
   228f6:	b2db      	uxtb	r3, r3
   228f8:	2b00      	cmp	r3, #0
   228fa:	d001      	beq.n	22900 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   228fc:	2300      	movs	r3, #0
   228fe:	e022      	b.n	22946 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   22900:	687a      	ldr	r2, [r7, #4]
   22902:	68fb      	ldr	r3, [r7, #12]
   22904:	18d1      	adds	r1, r2, r3
   22906:	4b14      	ldr	r3, [pc, #80]	; (22958 <sd_mmc_spi_start_read_blocks+0x90>)
   22908:	881a      	ldrh	r2, [r3, #0]
   2290a:	230a      	movs	r3, #10
   2290c:	18fb      	adds	r3, r7, r3
   2290e:	881b      	ldrh	r3, [r3, #0]
   22910:	4812      	ldr	r0, [pc, #72]	; (2295c <sd_mmc_spi_start_read_blocks+0x94>)
   22912:	4c13      	ldr	r4, [pc, #76]	; (22960 <sd_mmc_spi_start_read_blocks+0x98>)
   22914:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   22916:	4b10      	ldr	r3, [pc, #64]	; (22958 <sd_mmc_spi_start_read_blocks+0x90>)
   22918:	881b      	ldrh	r3, [r3, #0]
   2291a:	001a      	movs	r2, r3
   2291c:	68fb      	ldr	r3, [r7, #12]
   2291e:	189b      	adds	r3, r3, r2
   22920:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   22922:	4b0d      	ldr	r3, [pc, #52]	; (22958 <sd_mmc_spi_start_read_blocks+0x90>)
   22924:	881b      	ldrh	r3, [r3, #0]
   22926:	001a      	movs	r2, r3
   22928:	4b0e      	ldr	r3, [pc, #56]	; (22964 <sd_mmc_spi_start_read_blocks+0x9c>)
   2292a:	681b      	ldr	r3, [r3, #0]
   2292c:	18d2      	adds	r2, r2, r3
   2292e:	4b0d      	ldr	r3, [pc, #52]	; (22964 <sd_mmc_spi_start_read_blocks+0x9c>)
   22930:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   22932:	4b0d      	ldr	r3, [pc, #52]	; (22968 <sd_mmc_spi_start_read_blocks+0xa0>)
   22934:	4798      	blx	r3
	while (nb_block--) {
   22936:	1cbb      	adds	r3, r7, #2
   22938:	881b      	ldrh	r3, [r3, #0]
   2293a:	1cba      	adds	r2, r7, #2
   2293c:	1e59      	subs	r1, r3, #1
   2293e:	8011      	strh	r1, [r2, #0]
   22940:	2b00      	cmp	r3, #0
   22942:	d1d2      	bne.n	228ea <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   22944:	2301      	movs	r3, #1
}
   22946:	0018      	movs	r0, r3
   22948:	46bd      	mov	sp, r7
   2294a:	b005      	add	sp, #20
   2294c:	bd90      	pop	{r4, r7, pc}
   2294e:	46c0      	nop			; (mov r8, r8)
   22950:	200041bf 	.word	0x200041bf
   22954:	000221c1 	.word	0x000221c1
   22958:	200041c8 	.word	0x200041c8
   2295c:	2000417c 	.word	0x2000417c
   22960:	0002aa2d 	.word	0x0002aa2d
   22964:	200041c4 	.word	0x200041c4
   22968:	00022245 	.word	0x00022245

0002296c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   2296c:	b580      	push	{r7, lr}
   2296e:	af00      	add	r7, sp, #0
	return true;
   22970:	2301      	movs	r3, #1
}
   22972:	0018      	movs	r0, r3
   22974:	46bd      	mov	sp, r7
   22976:	bd80      	pop	{r7, pc}

00022978 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   22978:	b580      	push	{r7, lr}
   2297a:	b084      	sub	sp, #16
   2297c:	af00      	add	r7, sp, #0
   2297e:	6078      	str	r0, [r7, #4]
   22980:	000a      	movs	r2, r1
   22982:	1cbb      	adds	r3, r7, #2
   22984:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22986:	4b24      	ldr	r3, [pc, #144]	; (22a18 <sd_mmc_spi_start_write_blocks+0xa0>)
   22988:	2200      	movs	r2, #0
   2298a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   2298c:	2300      	movs	r3, #0
   2298e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   22990:	e035      	b.n	229fe <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   22992:	4b22      	ldr	r3, [pc, #136]	; (22a1c <sd_mmc_spi_start_write_blocks+0xa4>)
   22994:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   22996:	687a      	ldr	r2, [r7, #4]
   22998:	68fb      	ldr	r3, [r7, #12]
   2299a:	18d1      	adds	r1, r2, r3
   2299c:	4b20      	ldr	r3, [pc, #128]	; (22a20 <sd_mmc_spi_start_write_blocks+0xa8>)
   2299e:	881a      	ldrh	r2, [r3, #0]
   229a0:	4b20      	ldr	r3, [pc, #128]	; (22a24 <sd_mmc_spi_start_write_blocks+0xac>)
   229a2:	0018      	movs	r0, r3
   229a4:	4b20      	ldr	r3, [pc, #128]	; (22a28 <sd_mmc_spi_start_write_blocks+0xb0>)
   229a6:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   229a8:	4b1d      	ldr	r3, [pc, #116]	; (22a20 <sd_mmc_spi_start_write_blocks+0xa8>)
   229aa:	881b      	ldrh	r3, [r3, #0]
   229ac:	001a      	movs	r2, r3
   229ae:	68fb      	ldr	r3, [r7, #12]
   229b0:	189b      	adds	r3, r3, r2
   229b2:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   229b4:	4b1a      	ldr	r3, [pc, #104]	; (22a20 <sd_mmc_spi_start_write_blocks+0xa8>)
   229b6:	881b      	ldrh	r3, [r3, #0]
   229b8:	001a      	movs	r2, r3
   229ba:	4b1c      	ldr	r3, [pc, #112]	; (22a2c <sd_mmc_spi_start_write_blocks+0xb4>)
   229bc:	681b      	ldr	r3, [r3, #0]
   229be:	18d2      	adds	r2, r2, r3
   229c0:	4b1a      	ldr	r3, [pc, #104]	; (22a2c <sd_mmc_spi_start_write_blocks+0xb4>)
   229c2:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   229c4:	4b1a      	ldr	r3, [pc, #104]	; (22a30 <sd_mmc_spi_start_write_blocks+0xb8>)
   229c6:	4798      	blx	r3
   229c8:	0003      	movs	r3, r0
   229ca:	001a      	movs	r2, r3
   229cc:	2301      	movs	r3, #1
   229ce:	4053      	eors	r3, r2
   229d0:	b2db      	uxtb	r3, r3
   229d2:	2b00      	cmp	r3, #0
   229d4:	d001      	beq.n	229da <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   229d6:	2300      	movs	r3, #0
   229d8:	e019      	b.n	22a0e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   229da:	1cbb      	adds	r3, r7, #2
   229dc:	881b      	ldrh	r3, [r3, #0]
   229de:	2b00      	cmp	r3, #0
   229e0:	d00d      	beq.n	229fe <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   229e2:	4b14      	ldr	r3, [pc, #80]	; (22a34 <sd_mmc_spi_start_write_blocks+0xbc>)
   229e4:	4798      	blx	r3
   229e6:	0003      	movs	r3, r0
   229e8:	001a      	movs	r2, r3
   229ea:	2301      	movs	r3, #1
   229ec:	4053      	eors	r3, r2
   229ee:	b2db      	uxtb	r3, r3
   229f0:	2b00      	cmp	r3, #0
   229f2:	d004      	beq.n	229fe <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   229f4:	4b08      	ldr	r3, [pc, #32]	; (22a18 <sd_mmc_spi_start_write_blocks+0xa0>)
   229f6:	2205      	movs	r2, #5
   229f8:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   229fa:	2300      	movs	r3, #0
   229fc:	e007      	b.n	22a0e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   229fe:	1cbb      	adds	r3, r7, #2
   22a00:	881b      	ldrh	r3, [r3, #0]
   22a02:	1cba      	adds	r2, r7, #2
   22a04:	1e59      	subs	r1, r3, #1
   22a06:	8011      	strh	r1, [r2, #0]
   22a08:	2b00      	cmp	r3, #0
   22a0a:	d1c2      	bne.n	22992 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   22a0c:	2301      	movs	r3, #1
}
   22a0e:	0018      	movs	r0, r3
   22a10:	46bd      	mov	sp, r7
   22a12:	b004      	add	sp, #16
   22a14:	bd80      	pop	{r7, pc}
   22a16:	46c0      	nop			; (mov r8, r8)
   22a18:	200041bf 	.word	0x200041bf
   22a1c:	00022271 	.word	0x00022271
   22a20:	200041c8 	.word	0x200041c8
   22a24:	2000417c 	.word	0x2000417c
   22a28:	0002ac51 	.word	0x0002ac51
   22a2c:	200041c4 	.word	0x200041c4
   22a30:	000222c1 	.word	0x000222c1
   22a34:	00022155 	.word	0x00022155

00022a38 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   22a38:	b580      	push	{r7, lr}
   22a3a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   22a3c:	4b09      	ldr	r3, [pc, #36]	; (22a64 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   22a3e:	4798      	blx	r3
   22a40:	0003      	movs	r3, r0
   22a42:	001a      	movs	r2, r3
   22a44:	2301      	movs	r3, #1
   22a46:	4053      	eors	r3, r2
   22a48:	b2db      	uxtb	r3, r3
   22a4a:	2b00      	cmp	r3, #0
   22a4c:	d004      	beq.n	22a58 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   22a4e:	4b06      	ldr	r3, [pc, #24]	; (22a68 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   22a50:	2205      	movs	r2, #5
   22a52:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   22a54:	2300      	movs	r3, #0
   22a56:	e002      	b.n	22a5e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   22a58:	4b04      	ldr	r3, [pc, #16]	; (22a6c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   22a5a:	4798      	blx	r3
   22a5c:	0003      	movs	r3, r0
}
   22a5e:	0018      	movs	r0, r3
   22a60:	46bd      	mov	sp, r7
   22a62:	bd80      	pop	{r7, pc}
   22a64:	00022155 	.word	0x00022155
   22a68:	200041bf 	.word	0x200041bf
   22a6c:	00022355 	.word	0x00022355

00022a70 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   22a70:	b580      	push	{r7, lr}
   22a72:	b082      	sub	sp, #8
   22a74:	af00      	add	r7, sp, #0
   22a76:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   22a78:	687b      	ldr	r3, [r7, #4]
   22a7a:	2b00      	cmp	r3, #0
   22a7c:	d00c      	beq.n	22a98 <delay_cycles+0x28>
		SysTick->LOAD = n;
   22a7e:	4b08      	ldr	r3, [pc, #32]	; (22aa0 <delay_cycles+0x30>)
   22a80:	687a      	ldr	r2, [r7, #4]
   22a82:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   22a84:	4b06      	ldr	r3, [pc, #24]	; (22aa0 <delay_cycles+0x30>)
   22a86:	2200      	movs	r2, #0
   22a88:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   22a8a:	46c0      	nop			; (mov r8, r8)
   22a8c:	4b04      	ldr	r3, [pc, #16]	; (22aa0 <delay_cycles+0x30>)
   22a8e:	681a      	ldr	r2, [r3, #0]
   22a90:	2380      	movs	r3, #128	; 0x80
   22a92:	025b      	lsls	r3, r3, #9
   22a94:	4013      	ands	r3, r2
   22a96:	d0f9      	beq.n	22a8c <delay_cycles+0x1c>
		};
	}
}
   22a98:	46c0      	nop			; (mov r8, r8)
   22a9a:	46bd      	mov	sp, r7
   22a9c:	b002      	add	sp, #8
   22a9e:	bd80      	pop	{r7, pc}
   22aa0:	e000e010 	.word	0xe000e010

00022aa4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   22aa4:	b580      	push	{r7, lr}
   22aa6:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   22aa8:	2000      	movs	r0, #0
   22aaa:	4b0f      	ldr	r3, [pc, #60]	; (22ae8 <delay_init+0x44>)
   22aac:	4798      	blx	r3
   22aae:	0002      	movs	r2, r0
   22ab0:	4b0e      	ldr	r3, [pc, #56]	; (22aec <delay_init+0x48>)
   22ab2:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   22ab4:	4b0d      	ldr	r3, [pc, #52]	; (22aec <delay_init+0x48>)
   22ab6:	6818      	ldr	r0, [r3, #0]
   22ab8:	4b0d      	ldr	r3, [pc, #52]	; (22af0 <delay_init+0x4c>)
   22aba:	22fa      	movs	r2, #250	; 0xfa
   22abc:	0091      	lsls	r1, r2, #2
   22abe:	4798      	blx	r3
   22ac0:	0003      	movs	r3, r0
   22ac2:	001a      	movs	r2, r3
   22ac4:	4b09      	ldr	r3, [pc, #36]	; (22aec <delay_init+0x48>)
   22ac6:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   22ac8:	4b08      	ldr	r3, [pc, #32]	; (22aec <delay_init+0x48>)
   22aca:	6818      	ldr	r0, [r3, #0]
   22acc:	4b08      	ldr	r3, [pc, #32]	; (22af0 <delay_init+0x4c>)
   22ace:	22fa      	movs	r2, #250	; 0xfa
   22ad0:	0091      	lsls	r1, r2, #2
   22ad2:	4798      	blx	r3
   22ad4:	0003      	movs	r3, r0
   22ad6:	001a      	movs	r2, r3
   22ad8:	4b06      	ldr	r3, [pc, #24]	; (22af4 <delay_init+0x50>)
   22ada:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   22adc:	4b06      	ldr	r3, [pc, #24]	; (22af8 <delay_init+0x54>)
   22ade:	2205      	movs	r2, #5
   22ae0:	601a      	str	r2, [r3, #0]
}
   22ae2:	46c0      	nop			; (mov r8, r8)
   22ae4:	46bd      	mov	sp, r7
   22ae6:	bd80      	pop	{r7, pc}
   22ae8:	0002c7d5 	.word	0x0002c7d5
   22aec:	20000110 	.word	0x20000110
   22af0:	00035449 	.word	0x00035449
   22af4:	20000114 	.word	0x20000114
   22af8:	e000e010 	.word	0xe000e010

00022afc <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
   22afc:	b580      	push	{r7, lr}
   22afe:	b082      	sub	sp, #8
   22b00:	af00      	add	r7, sp, #0
   22b02:	6078      	str	r0, [r7, #4]
	while (n--) {
   22b04:	e004      	b.n	22b10 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
   22b06:	4b07      	ldr	r3, [pc, #28]	; (22b24 <delay_cycles_us+0x28>)
   22b08:	681b      	ldr	r3, [r3, #0]
   22b0a:	0018      	movs	r0, r3
   22b0c:	4b06      	ldr	r3, [pc, #24]	; (22b28 <delay_cycles_us+0x2c>)
   22b0e:	4798      	blx	r3
	while (n--) {
   22b10:	687b      	ldr	r3, [r7, #4]
   22b12:	1e5a      	subs	r2, r3, #1
   22b14:	607a      	str	r2, [r7, #4]
   22b16:	2b00      	cmp	r3, #0
   22b18:	d1f5      	bne.n	22b06 <delay_cycles_us+0xa>
	}
}
   22b1a:	46c0      	nop			; (mov r8, r8)
   22b1c:	46bd      	mov	sp, r7
   22b1e:	b002      	add	sp, #8
   22b20:	bd80      	pop	{r7, pc}
   22b22:	46c0      	nop			; (mov r8, r8)
   22b24:	20000114 	.word	0x20000114
   22b28:	00022a71 	.word	0x00022a71

00022b2c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   22b2c:	b580      	push	{r7, lr}
   22b2e:	b082      	sub	sp, #8
   22b30:	af00      	add	r7, sp, #0
   22b32:	6078      	str	r0, [r7, #4]
	while (n--) {
   22b34:	e004      	b.n	22b40 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   22b36:	4b07      	ldr	r3, [pc, #28]	; (22b54 <delay_cycles_ms+0x28>)
   22b38:	681b      	ldr	r3, [r3, #0]
   22b3a:	0018      	movs	r0, r3
   22b3c:	4b06      	ldr	r3, [pc, #24]	; (22b58 <delay_cycles_ms+0x2c>)
   22b3e:	4798      	blx	r3
	while (n--) {
   22b40:	687b      	ldr	r3, [r7, #4]
   22b42:	1e5a      	subs	r2, r3, #1
   22b44:	607a      	str	r2, [r7, #4]
   22b46:	2b00      	cmp	r3, #0
   22b48:	d1f5      	bne.n	22b36 <delay_cycles_ms+0xa>
	}
}
   22b4a:	46c0      	nop			; (mov r8, r8)
   22b4c:	46bd      	mov	sp, r7
   22b4e:	b002      	add	sp, #8
   22b50:	bd80      	pop	{r7, pc}
   22b52:	46c0      	nop			; (mov r8, r8)
   22b54:	20000110 	.word	0x20000110
   22b58:	00022a71 	.word	0x00022a71

00022b5c <system_pinmux_get_group_from_gpio_pin>:
{
   22b5c:	b580      	push	{r7, lr}
   22b5e:	b084      	sub	sp, #16
   22b60:	af00      	add	r7, sp, #0
   22b62:	0002      	movs	r2, r0
   22b64:	1dfb      	adds	r3, r7, #7
   22b66:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   22b68:	230f      	movs	r3, #15
   22b6a:	18fb      	adds	r3, r7, r3
   22b6c:	1dfa      	adds	r2, r7, #7
   22b6e:	7812      	ldrb	r2, [r2, #0]
   22b70:	09d2      	lsrs	r2, r2, #7
   22b72:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   22b74:	230e      	movs	r3, #14
   22b76:	18fb      	adds	r3, r7, r3
   22b78:	1dfa      	adds	r2, r7, #7
   22b7a:	7812      	ldrb	r2, [r2, #0]
   22b7c:	0952      	lsrs	r2, r2, #5
   22b7e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   22b80:	4b0d      	ldr	r3, [pc, #52]	; (22bb8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   22b82:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   22b84:	230f      	movs	r3, #15
   22b86:	18fb      	adds	r3, r7, r3
   22b88:	781b      	ldrb	r3, [r3, #0]
   22b8a:	2b00      	cmp	r3, #0
   22b8c:	d10f      	bne.n	22bae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   22b8e:	230f      	movs	r3, #15
   22b90:	18fb      	adds	r3, r7, r3
   22b92:	781b      	ldrb	r3, [r3, #0]
   22b94:	009b      	lsls	r3, r3, #2
   22b96:	2210      	movs	r2, #16
   22b98:	4694      	mov	ip, r2
   22b9a:	44bc      	add	ip, r7
   22b9c:	4463      	add	r3, ip
   22b9e:	3b08      	subs	r3, #8
   22ba0:	681a      	ldr	r2, [r3, #0]
   22ba2:	230e      	movs	r3, #14
   22ba4:	18fb      	adds	r3, r7, r3
   22ba6:	781b      	ldrb	r3, [r3, #0]
   22ba8:	01db      	lsls	r3, r3, #7
   22baa:	18d3      	adds	r3, r2, r3
   22bac:	e000      	b.n	22bb0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   22bae:	2300      	movs	r3, #0
}
   22bb0:	0018      	movs	r0, r3
   22bb2:	46bd      	mov	sp, r7
   22bb4:	b004      	add	sp, #16
   22bb6:	bd80      	pop	{r7, pc}
   22bb8:	41004400 	.word	0x41004400

00022bbc <system_interrupt_enable_global>:
{
   22bbc:	b580      	push	{r7, lr}
   22bbe:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   22bc0:	4b04      	ldr	r3, [pc, #16]	; (22bd4 <system_interrupt_enable_global+0x18>)
   22bc2:	2201      	movs	r2, #1
   22bc4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   22bc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   22bca:	b662      	cpsie	i
}
   22bcc:	46c0      	nop			; (mov r8, r8)
   22bce:	46bd      	mov	sp, r7
   22bd0:	bd80      	pop	{r7, pc}
   22bd2:	46c0      	nop			; (mov r8, r8)
   22bd4:	2000011a 	.word	0x2000011a

00022bd8 <port_get_group_from_gpio_pin>:
{
   22bd8:	b580      	push	{r7, lr}
   22bda:	b082      	sub	sp, #8
   22bdc:	af00      	add	r7, sp, #0
   22bde:	0002      	movs	r2, r0
   22be0:	1dfb      	adds	r3, r7, #7
   22be2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   22be4:	1dfb      	adds	r3, r7, #7
   22be6:	781b      	ldrb	r3, [r3, #0]
   22be8:	0018      	movs	r0, r3
   22bea:	4b03      	ldr	r3, [pc, #12]	; (22bf8 <port_get_group_from_gpio_pin+0x20>)
   22bec:	4798      	blx	r3
   22bee:	0003      	movs	r3, r0
}
   22bf0:	0018      	movs	r0, r3
   22bf2:	46bd      	mov	sp, r7
   22bf4:	b002      	add	sp, #8
   22bf6:	bd80      	pop	{r7, pc}
   22bf8:	00022b5d 	.word	0x00022b5d

00022bfc <port_get_config_defaults>:
{
   22bfc:	b580      	push	{r7, lr}
   22bfe:	b082      	sub	sp, #8
   22c00:	af00      	add	r7, sp, #0
   22c02:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   22c04:	687b      	ldr	r3, [r7, #4]
   22c06:	2200      	movs	r2, #0
   22c08:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   22c0a:	687b      	ldr	r3, [r7, #4]
   22c0c:	2201      	movs	r2, #1
   22c0e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   22c10:	687b      	ldr	r3, [r7, #4]
   22c12:	2200      	movs	r2, #0
   22c14:	709a      	strb	r2, [r3, #2]
}
   22c16:	46c0      	nop			; (mov r8, r8)
   22c18:	46bd      	mov	sp, r7
   22c1a:	b002      	add	sp, #8
   22c1c:	bd80      	pop	{r7, pc}
	...

00022c20 <port_pin_set_output_level>:
{
   22c20:	b580      	push	{r7, lr}
   22c22:	b084      	sub	sp, #16
   22c24:	af00      	add	r7, sp, #0
   22c26:	0002      	movs	r2, r0
   22c28:	1dfb      	adds	r3, r7, #7
   22c2a:	701a      	strb	r2, [r3, #0]
   22c2c:	1dbb      	adds	r3, r7, #6
   22c2e:	1c0a      	adds	r2, r1, #0
   22c30:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   22c32:	1dfb      	adds	r3, r7, #7
   22c34:	781b      	ldrb	r3, [r3, #0]
   22c36:	0018      	movs	r0, r3
   22c38:	4b0d      	ldr	r3, [pc, #52]	; (22c70 <port_pin_set_output_level+0x50>)
   22c3a:	4798      	blx	r3
   22c3c:	0003      	movs	r3, r0
   22c3e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   22c40:	1dfb      	adds	r3, r7, #7
   22c42:	781b      	ldrb	r3, [r3, #0]
   22c44:	221f      	movs	r2, #31
   22c46:	4013      	ands	r3, r2
   22c48:	2201      	movs	r2, #1
   22c4a:	409a      	lsls	r2, r3
   22c4c:	0013      	movs	r3, r2
   22c4e:	60bb      	str	r3, [r7, #8]
	if (level) {
   22c50:	1dbb      	adds	r3, r7, #6
   22c52:	781b      	ldrb	r3, [r3, #0]
   22c54:	2b00      	cmp	r3, #0
   22c56:	d003      	beq.n	22c60 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   22c58:	68fb      	ldr	r3, [r7, #12]
   22c5a:	68ba      	ldr	r2, [r7, #8]
   22c5c:	619a      	str	r2, [r3, #24]
}
   22c5e:	e002      	b.n	22c66 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   22c60:	68fb      	ldr	r3, [r7, #12]
   22c62:	68ba      	ldr	r2, [r7, #8]
   22c64:	615a      	str	r2, [r3, #20]
}
   22c66:	46c0      	nop			; (mov r8, r8)
   22c68:	46bd      	mov	sp, r7
   22c6a:	b004      	add	sp, #16
   22c6c:	bd80      	pop	{r7, pc}
   22c6e:	46c0      	nop			; (mov r8, r8)
   22c70:	00022bd9 	.word	0x00022bd9

00022c74 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   22c74:	b580      	push	{r7, lr}
   22c76:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   22c78:	4b04      	ldr	r3, [pc, #16]	; (22c8c <chip_isr+0x18>)
   22c7a:	681b      	ldr	r3, [r3, #0]
   22c7c:	2b00      	cmp	r3, #0
   22c7e:	d002      	beq.n	22c86 <chip_isr+0x12>
		gpfIsr();
   22c80:	4b02      	ldr	r3, [pc, #8]	; (22c8c <chip_isr+0x18>)
   22c82:	681b      	ldr	r3, [r3, #0]
   22c84:	4798      	blx	r3
	}
}
   22c86:	46c0      	nop			; (mov r8, r8)
   22c88:	46bd      	mov	sp, r7
   22c8a:	bd80      	pop	{r7, pc}
   22c8c:	200041cc 	.word	0x200041cc

00022c90 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   22c90:	b580      	push	{r7, lr}
   22c92:	b082      	sub	sp, #8
   22c94:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   22c96:	1d3b      	adds	r3, r7, #4
   22c98:	0018      	movs	r0, r3
   22c9a:	4b10      	ldr	r3, [pc, #64]	; (22cdc <init_chip_pins+0x4c>)
   22c9c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   22c9e:	1d3b      	adds	r3, r7, #4
   22ca0:	2201      	movs	r2, #1
   22ca2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   22ca4:	1d3b      	adds	r3, r7, #4
   22ca6:	0019      	movs	r1, r3
   22ca8:	201b      	movs	r0, #27
   22caa:	4b0d      	ldr	r3, [pc, #52]	; (22ce0 <init_chip_pins+0x50>)
   22cac:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   22cae:	1d3b      	adds	r3, r7, #4
   22cb0:	0019      	movs	r1, r3
   22cb2:	201c      	movs	r0, #28
   22cb4:	4b0a      	ldr	r3, [pc, #40]	; (22ce0 <init_chip_pins+0x50>)
   22cb6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   22cb8:	1d3b      	adds	r3, r7, #4
   22cba:	0019      	movs	r1, r3
   22cbc:	2028      	movs	r0, #40	; 0x28
   22cbe:	4b08      	ldr	r3, [pc, #32]	; (22ce0 <init_chip_pins+0x50>)
   22cc0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   22cc2:	2100      	movs	r1, #0
   22cc4:	201c      	movs	r0, #28
   22cc6:	4b07      	ldr	r3, [pc, #28]	; (22ce4 <init_chip_pins+0x54>)
   22cc8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   22cca:	2100      	movs	r1, #0
   22ccc:	201b      	movs	r0, #27
   22cce:	4b05      	ldr	r3, [pc, #20]	; (22ce4 <init_chip_pins+0x54>)
   22cd0:	4798      	blx	r3
}
   22cd2:	46c0      	nop			; (mov r8, r8)
   22cd4:	46bd      	mov	sp, r7
   22cd6:	b002      	add	sp, #8
   22cd8:	bd80      	pop	{r7, pc}
   22cda:	46c0      	nop			; (mov r8, r8)
   22cdc:	00022bfd 	.word	0x00022bfd
   22ce0:	0002941d 	.word	0x0002941d
   22ce4:	00022c21 	.word	0x00022c21

00022ce8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   22ce8:	b580      	push	{r7, lr}
   22cea:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   22cec:	4b0b      	ldr	r3, [pc, #44]	; (22d1c <nm_bsp_init+0x34>)
   22cee:	2200      	movs	r2, #0
   22cf0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   22cf2:	4b0b      	ldr	r3, [pc, #44]	; (22d20 <nm_bsp_init+0x38>)
   22cf4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   22cf6:	4b0b      	ldr	r3, [pc, #44]	; (22d24 <nm_bsp_init+0x3c>)
   22cf8:	681b      	ldr	r3, [r3, #0]
   22cfa:	2201      	movs	r2, #1
   22cfc:	4013      	ands	r3, r2
   22cfe:	d004      	beq.n	22d0a <nm_bsp_init+0x22>
   22d00:	4b08      	ldr	r3, [pc, #32]	; (22d24 <nm_bsp_init+0x3c>)
   22d02:	681b      	ldr	r3, [r3, #0]
   22d04:	2202      	movs	r2, #2
   22d06:	4013      	ands	r3, r2
   22d08:	d101      	bne.n	22d0e <nm_bsp_init+0x26>
	    delay_init();
   22d0a:	4b07      	ldr	r3, [pc, #28]	; (22d28 <nm_bsp_init+0x40>)
   22d0c:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   22d0e:	4b07      	ldr	r3, [pc, #28]	; (22d2c <nm_bsp_init+0x44>)
   22d10:	4798      	blx	r3

	return M2M_SUCCESS;
   22d12:	2300      	movs	r3, #0
}
   22d14:	0018      	movs	r0, r3
   22d16:	46bd      	mov	sp, r7
   22d18:	bd80      	pop	{r7, pc}
   22d1a:	46c0      	nop			; (mov r8, r8)
   22d1c:	200041cc 	.word	0x200041cc
   22d20:	00022c91 	.word	0x00022c91
   22d24:	e000e010 	.word	0xe000e010
   22d28:	00022aa5 	.word	0x00022aa5
   22d2c:	00022bbd 	.word	0x00022bbd

00022d30 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   22d30:	b580      	push	{r7, lr}
   22d32:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   22d34:	2100      	movs	r1, #0
   22d36:	201c      	movs	r0, #28
   22d38:	4b0b      	ldr	r3, [pc, #44]	; (22d68 <nm_bsp_reset+0x38>)
   22d3a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   22d3c:	2100      	movs	r1, #0
   22d3e:	201b      	movs	r0, #27
   22d40:	4b09      	ldr	r3, [pc, #36]	; (22d68 <nm_bsp_reset+0x38>)
   22d42:	4798      	blx	r3
	nm_bsp_sleep(1);
   22d44:	2001      	movs	r0, #1
   22d46:	4b09      	ldr	r3, [pc, #36]	; (22d6c <nm_bsp_reset+0x3c>)
   22d48:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   22d4a:	2101      	movs	r1, #1
   22d4c:	201c      	movs	r0, #28
   22d4e:	4b06      	ldr	r3, [pc, #24]	; (22d68 <nm_bsp_reset+0x38>)
   22d50:	4798      	blx	r3
	nm_bsp_sleep(10);
   22d52:	200a      	movs	r0, #10
   22d54:	4b05      	ldr	r3, [pc, #20]	; (22d6c <nm_bsp_reset+0x3c>)
   22d56:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   22d58:	2101      	movs	r1, #1
   22d5a:	201b      	movs	r0, #27
   22d5c:	4b02      	ldr	r3, [pc, #8]	; (22d68 <nm_bsp_reset+0x38>)
   22d5e:	4798      	blx	r3
}
   22d60:	46c0      	nop			; (mov r8, r8)
   22d62:	46bd      	mov	sp, r7
   22d64:	bd80      	pop	{r7, pc}
   22d66:	46c0      	nop			; (mov r8, r8)
   22d68:	00022c21 	.word	0x00022c21
   22d6c:	00022d71 	.word	0x00022d71

00022d70 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   22d70:	b580      	push	{r7, lr}
   22d72:	b082      	sub	sp, #8
   22d74:	af00      	add	r7, sp, #0
   22d76:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   22d78:	687b      	ldr	r3, [r7, #4]
   22d7a:	0018      	movs	r0, r3
   22d7c:	4b02      	ldr	r3, [pc, #8]	; (22d88 <nm_bsp_sleep+0x18>)
   22d7e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   22d80:	46c0      	nop			; (mov r8, r8)
   22d82:	46bd      	mov	sp, r7
   22d84:	b002      	add	sp, #8
   22d86:	bd80      	pop	{r7, pc}
   22d88:	0001eaf1 	.word	0x0001eaf1

00022d8c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   22d8c:	b580      	push	{r7, lr}
   22d8e:	b086      	sub	sp, #24
   22d90:	af00      	add	r7, sp, #0
   22d92:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   22d94:	4b15      	ldr	r3, [pc, #84]	; (22dec <nm_bsp_register_isr+0x60>)
   22d96:	687a      	ldr	r2, [r7, #4]
   22d98:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   22d9a:	230c      	movs	r3, #12
   22d9c:	18fb      	adds	r3, r7, r3
   22d9e:	0018      	movs	r0, r3
   22da0:	4b13      	ldr	r3, [pc, #76]	; (22df0 <nm_bsp_register_isr+0x64>)
   22da2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   22da4:	230c      	movs	r3, #12
   22da6:	18fb      	adds	r3, r7, r3
   22da8:	2229      	movs	r2, #41	; 0x29
   22daa:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   22dac:	230c      	movs	r3, #12
   22dae:	18fb      	adds	r3, r7, r3
   22db0:	2200      	movs	r2, #0
   22db2:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   22db4:	230c      	movs	r3, #12
   22db6:	18fb      	adds	r3, r7, r3
   22db8:	2201      	movs	r2, #1
   22dba:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   22dbc:	230c      	movs	r3, #12
   22dbe:	18fb      	adds	r3, r7, r3
   22dc0:	2202      	movs	r2, #2
   22dc2:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   22dc4:	230c      	movs	r3, #12
   22dc6:	18fb      	adds	r3, r7, r3
   22dc8:	0019      	movs	r1, r3
   22dca:	2009      	movs	r0, #9
   22dcc:	4b09      	ldr	r3, [pc, #36]	; (22df4 <nm_bsp_register_isr+0x68>)
   22dce:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   22dd0:	4b09      	ldr	r3, [pc, #36]	; (22df8 <nm_bsp_register_isr+0x6c>)
   22dd2:	2200      	movs	r2, #0
   22dd4:	2109      	movs	r1, #9
   22dd6:	0018      	movs	r0, r3
   22dd8:	4b08      	ldr	r3, [pc, #32]	; (22dfc <nm_bsp_register_isr+0x70>)
   22dda:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   22ddc:	2100      	movs	r1, #0
   22dde:	2009      	movs	r0, #9
   22de0:	4b07      	ldr	r3, [pc, #28]	; (22e00 <nm_bsp_register_isr+0x74>)
   22de2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   22de4:	46c0      	nop			; (mov r8, r8)
   22de6:	46bd      	mov	sp, r7
   22de8:	b006      	add	sp, #24
   22dea:	bd80      	pop	{r7, pc}
   22dec:	200041cc 	.word	0x200041cc
   22df0:	000292c5 	.word	0x000292c5
   22df4:	000292f9 	.word	0x000292f9
   22df8:	00022c75 	.word	0x00022c75
   22dfc:	00028ec5 	.word	0x00028ec5
   22e00:	00028f29 	.word	0x00028f29

00022e04 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   22e04:	b580      	push	{r7, lr}
   22e06:	b082      	sub	sp, #8
   22e08:	af00      	add	r7, sp, #0
   22e0a:	0002      	movs	r2, r0
   22e0c:	1dfb      	adds	r3, r7, #7
   22e0e:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   22e10:	1dfb      	adds	r3, r7, #7
   22e12:	781b      	ldrb	r3, [r3, #0]
   22e14:	2b00      	cmp	r3, #0
   22e16:	d004      	beq.n	22e22 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   22e18:	2100      	movs	r1, #0
   22e1a:	2009      	movs	r0, #9
   22e1c:	4b05      	ldr	r3, [pc, #20]	; (22e34 <nm_bsp_interrupt_ctrl+0x30>)
   22e1e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   22e20:	e003      	b.n	22e2a <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   22e22:	2100      	movs	r1, #0
   22e24:	2009      	movs	r0, #9
   22e26:	4b04      	ldr	r3, [pc, #16]	; (22e38 <nm_bsp_interrupt_ctrl+0x34>)
   22e28:	4798      	blx	r3
}
   22e2a:	46c0      	nop			; (mov r8, r8)
   22e2c:	46bd      	mov	sp, r7
   22e2e:	b002      	add	sp, #8
   22e30:	bd80      	pop	{r7, pc}
   22e32:	46c0      	nop			; (mov r8, r8)
   22e34:	00028f29 	.word	0x00028f29
   22e38:	00028f71 	.word	0x00028f71

00022e3c <system_pinmux_get_group_from_gpio_pin>:
{
   22e3c:	b580      	push	{r7, lr}
   22e3e:	b084      	sub	sp, #16
   22e40:	af00      	add	r7, sp, #0
   22e42:	0002      	movs	r2, r0
   22e44:	1dfb      	adds	r3, r7, #7
   22e46:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   22e48:	230f      	movs	r3, #15
   22e4a:	18fb      	adds	r3, r7, r3
   22e4c:	1dfa      	adds	r2, r7, #7
   22e4e:	7812      	ldrb	r2, [r2, #0]
   22e50:	09d2      	lsrs	r2, r2, #7
   22e52:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   22e54:	230e      	movs	r3, #14
   22e56:	18fb      	adds	r3, r7, r3
   22e58:	1dfa      	adds	r2, r7, #7
   22e5a:	7812      	ldrb	r2, [r2, #0]
   22e5c:	0952      	lsrs	r2, r2, #5
   22e5e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   22e60:	4b0d      	ldr	r3, [pc, #52]	; (22e98 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   22e62:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   22e64:	230f      	movs	r3, #15
   22e66:	18fb      	adds	r3, r7, r3
   22e68:	781b      	ldrb	r3, [r3, #0]
   22e6a:	2b00      	cmp	r3, #0
   22e6c:	d10f      	bne.n	22e8e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   22e6e:	230f      	movs	r3, #15
   22e70:	18fb      	adds	r3, r7, r3
   22e72:	781b      	ldrb	r3, [r3, #0]
   22e74:	009b      	lsls	r3, r3, #2
   22e76:	2210      	movs	r2, #16
   22e78:	4694      	mov	ip, r2
   22e7a:	44bc      	add	ip, r7
   22e7c:	4463      	add	r3, ip
   22e7e:	3b08      	subs	r3, #8
   22e80:	681a      	ldr	r2, [r3, #0]
   22e82:	230e      	movs	r3, #14
   22e84:	18fb      	adds	r3, r7, r3
   22e86:	781b      	ldrb	r3, [r3, #0]
   22e88:	01db      	lsls	r3, r3, #7
   22e8a:	18d3      	adds	r3, r2, r3
   22e8c:	e000      	b.n	22e90 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   22e8e:	2300      	movs	r3, #0
}
   22e90:	0018      	movs	r0, r3
   22e92:	46bd      	mov	sp, r7
   22e94:	b004      	add	sp, #16
   22e96:	bd80      	pop	{r7, pc}
   22e98:	41004400 	.word	0x41004400

00022e9c <system_interrupt_enable>:
{
   22e9c:	b580      	push	{r7, lr}
   22e9e:	b082      	sub	sp, #8
   22ea0:	af00      	add	r7, sp, #0
   22ea2:	0002      	movs	r2, r0
   22ea4:	1dfb      	adds	r3, r7, #7
   22ea6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   22ea8:	4b06      	ldr	r3, [pc, #24]	; (22ec4 <system_interrupt_enable+0x28>)
   22eaa:	1dfa      	adds	r2, r7, #7
   22eac:	7812      	ldrb	r2, [r2, #0]
   22eae:	0011      	movs	r1, r2
   22eb0:	221f      	movs	r2, #31
   22eb2:	400a      	ands	r2, r1
   22eb4:	2101      	movs	r1, #1
   22eb6:	4091      	lsls	r1, r2
   22eb8:	000a      	movs	r2, r1
   22eba:	601a      	str	r2, [r3, #0]
}
   22ebc:	46c0      	nop			; (mov r8, r8)
   22ebe:	46bd      	mov	sp, r7
   22ec0:	b002      	add	sp, #8
   22ec2:	bd80      	pop	{r7, pc}
   22ec4:	e000e100 	.word	0xe000e100

00022ec8 <system_interrupt_disable>:
{
   22ec8:	b580      	push	{r7, lr}
   22eca:	b082      	sub	sp, #8
   22ecc:	af00      	add	r7, sp, #0
   22ece:	0002      	movs	r2, r0
   22ed0:	1dfb      	adds	r3, r7, #7
   22ed2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   22ed4:	4a07      	ldr	r2, [pc, #28]	; (22ef4 <system_interrupt_disable+0x2c>)
   22ed6:	1dfb      	adds	r3, r7, #7
   22ed8:	781b      	ldrb	r3, [r3, #0]
   22eda:	0019      	movs	r1, r3
   22edc:	231f      	movs	r3, #31
   22ede:	400b      	ands	r3, r1
   22ee0:	2101      	movs	r1, #1
   22ee2:	4099      	lsls	r1, r3
   22ee4:	000b      	movs	r3, r1
   22ee6:	0019      	movs	r1, r3
   22ee8:	2380      	movs	r3, #128	; 0x80
   22eea:	50d1      	str	r1, [r2, r3]
}
   22eec:	46c0      	nop			; (mov r8, r8)
   22eee:	46bd      	mov	sp, r7
   22ef0:	b002      	add	sp, #8
   22ef2:	bd80      	pop	{r7, pc}
   22ef4:	e000e100 	.word	0xe000e100

00022ef8 <port_get_group_from_gpio_pin>:
{
   22ef8:	b580      	push	{r7, lr}
   22efa:	b082      	sub	sp, #8
   22efc:	af00      	add	r7, sp, #0
   22efe:	0002      	movs	r2, r0
   22f00:	1dfb      	adds	r3, r7, #7
   22f02:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   22f04:	1dfb      	adds	r3, r7, #7
   22f06:	781b      	ldrb	r3, [r3, #0]
   22f08:	0018      	movs	r0, r3
   22f0a:	4b03      	ldr	r3, [pc, #12]	; (22f18 <port_get_group_from_gpio_pin+0x20>)
   22f0c:	4798      	blx	r3
   22f0e:	0003      	movs	r3, r0
}
   22f10:	0018      	movs	r0, r3
   22f12:	46bd      	mov	sp, r7
   22f14:	b002      	add	sp, #8
   22f16:	bd80      	pop	{r7, pc}
   22f18:	00022e3d 	.word	0x00022e3d

00022f1c <port_get_config_defaults>:
{
   22f1c:	b580      	push	{r7, lr}
   22f1e:	b082      	sub	sp, #8
   22f20:	af00      	add	r7, sp, #0
   22f22:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   22f24:	687b      	ldr	r3, [r7, #4]
   22f26:	2200      	movs	r2, #0
   22f28:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   22f2a:	687b      	ldr	r3, [r7, #4]
   22f2c:	2201      	movs	r2, #1
   22f2e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   22f30:	687b      	ldr	r3, [r7, #4]
   22f32:	2200      	movs	r2, #0
   22f34:	709a      	strb	r2, [r3, #2]
}
   22f36:	46c0      	nop			; (mov r8, r8)
   22f38:	46bd      	mov	sp, r7
   22f3a:	b002      	add	sp, #8
   22f3c:	bd80      	pop	{r7, pc}
	...

00022f40 <port_pin_set_output_level>:
{
   22f40:	b580      	push	{r7, lr}
   22f42:	b084      	sub	sp, #16
   22f44:	af00      	add	r7, sp, #0
   22f46:	0002      	movs	r2, r0
   22f48:	1dfb      	adds	r3, r7, #7
   22f4a:	701a      	strb	r2, [r3, #0]
   22f4c:	1dbb      	adds	r3, r7, #6
   22f4e:	1c0a      	adds	r2, r1, #0
   22f50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   22f52:	1dfb      	adds	r3, r7, #7
   22f54:	781b      	ldrb	r3, [r3, #0]
   22f56:	0018      	movs	r0, r3
   22f58:	4b0d      	ldr	r3, [pc, #52]	; (22f90 <port_pin_set_output_level+0x50>)
   22f5a:	4798      	blx	r3
   22f5c:	0003      	movs	r3, r0
   22f5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   22f60:	1dfb      	adds	r3, r7, #7
   22f62:	781b      	ldrb	r3, [r3, #0]
   22f64:	221f      	movs	r2, #31
   22f66:	4013      	ands	r3, r2
   22f68:	2201      	movs	r2, #1
   22f6a:	409a      	lsls	r2, r3
   22f6c:	0013      	movs	r3, r2
   22f6e:	60bb      	str	r3, [r7, #8]
	if (level) {
   22f70:	1dbb      	adds	r3, r7, #6
   22f72:	781b      	ldrb	r3, [r3, #0]
   22f74:	2b00      	cmp	r3, #0
   22f76:	d003      	beq.n	22f80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   22f78:	68fb      	ldr	r3, [r7, #12]
   22f7a:	68ba      	ldr	r2, [r7, #8]
   22f7c:	619a      	str	r2, [r3, #24]
}
   22f7e:	e002      	b.n	22f86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   22f80:	68fb      	ldr	r3, [r7, #12]
   22f82:	68ba      	ldr	r2, [r7, #8]
   22f84:	615a      	str	r2, [r3, #20]
}
   22f86:	46c0      	nop			; (mov r8, r8)
   22f88:	46bd      	mov	sp, r7
   22f8a:	b004      	add	sp, #16
   22f8c:	bd80      	pop	{r7, pc}
   22f8e:	46c0      	nop			; (mov r8, r8)
   22f90:	00022ef9 	.word	0x00022ef9

00022f94 <spi_is_syncing>:
{
   22f94:	b580      	push	{r7, lr}
   22f96:	b084      	sub	sp, #16
   22f98:	af00      	add	r7, sp, #0
   22f9a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   22f9c:	687b      	ldr	r3, [r7, #4]
   22f9e:	681b      	ldr	r3, [r3, #0]
   22fa0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   22fa2:	68fb      	ldr	r3, [r7, #12]
   22fa4:	69db      	ldr	r3, [r3, #28]
   22fa6:	1e5a      	subs	r2, r3, #1
   22fa8:	4193      	sbcs	r3, r2
   22faa:	b2db      	uxtb	r3, r3
}
   22fac:	0018      	movs	r0, r3
   22fae:	46bd      	mov	sp, r7
   22fb0:	b004      	add	sp, #16
   22fb2:	bd80      	pop	{r7, pc}

00022fb4 <spi_get_config_defaults>:
{
   22fb4:	b580      	push	{r7, lr}
   22fb6:	b082      	sub	sp, #8
   22fb8:	af00      	add	r7, sp, #0
   22fba:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   22fbc:	687b      	ldr	r3, [r7, #4]
   22fbe:	2201      	movs	r2, #1
   22fc0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   22fc2:	687b      	ldr	r3, [r7, #4]
   22fc4:	2200      	movs	r2, #0
   22fc6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   22fc8:	687b      	ldr	r3, [r7, #4]
   22fca:	2200      	movs	r2, #0
   22fcc:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   22fce:	687b      	ldr	r3, [r7, #4]
   22fd0:	22c0      	movs	r2, #192	; 0xc0
   22fd2:	0392      	lsls	r2, r2, #14
   22fd4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   22fd6:	687b      	ldr	r3, [r7, #4]
   22fd8:	2200      	movs	r2, #0
   22fda:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   22fdc:	687b      	ldr	r3, [r7, #4]
   22fde:	2200      	movs	r2, #0
   22fe0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   22fe2:	687b      	ldr	r3, [r7, #4]
   22fe4:	2201      	movs	r2, #1
   22fe6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   22fe8:	687b      	ldr	r3, [r7, #4]
   22fea:	2201      	movs	r2, #1
   22fec:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   22fee:	687b      	ldr	r3, [r7, #4]
   22ff0:	2200      	movs	r2, #0
   22ff2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   22ff4:	687b      	ldr	r3, [r7, #4]
   22ff6:	2224      	movs	r2, #36	; 0x24
   22ff8:	2100      	movs	r1, #0
   22ffa:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   22ffc:	687b      	ldr	r3, [r7, #4]
   22ffe:	3318      	adds	r3, #24
   23000:	220c      	movs	r2, #12
   23002:	2100      	movs	r1, #0
   23004:	0018      	movs	r0, r3
   23006:	4b0a      	ldr	r3, [pc, #40]	; (23030 <spi_get_config_defaults+0x7c>)
   23008:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   2300a:	687b      	ldr	r3, [r7, #4]
   2300c:	4a09      	ldr	r2, [pc, #36]	; (23034 <spi_get_config_defaults+0x80>)
   2300e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   23010:	687b      	ldr	r3, [r7, #4]
   23012:	2200      	movs	r2, #0
   23014:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   23016:	687b      	ldr	r3, [r7, #4]
   23018:	2200      	movs	r2, #0
   2301a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   2301c:	687b      	ldr	r3, [r7, #4]
   2301e:	2200      	movs	r2, #0
   23020:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   23022:	687b      	ldr	r3, [r7, #4]
   23024:	2200      	movs	r2, #0
   23026:	635a      	str	r2, [r3, #52]	; 0x34
};
   23028:	46c0      	nop			; (mov r8, r8)
   2302a:	46bd      	mov	sp, r7
   2302c:	b002      	add	sp, #8
   2302e:	bd80      	pop	{r7, pc}
   23030:	00037903 	.word	0x00037903
   23034:	000186a0 	.word	0x000186a0

00023038 <spi_slave_inst_get_config_defaults>:
{
   23038:	b580      	push	{r7, lr}
   2303a:	b082      	sub	sp, #8
   2303c:	af00      	add	r7, sp, #0
   2303e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   23040:	687b      	ldr	r3, [r7, #4]
   23042:	220a      	movs	r2, #10
   23044:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   23046:	687b      	ldr	r3, [r7, #4]
   23048:	2200      	movs	r2, #0
   2304a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   2304c:	687b      	ldr	r3, [r7, #4]
   2304e:	2200      	movs	r2, #0
   23050:	709a      	strb	r2, [r3, #2]
}
   23052:	46c0      	nop			; (mov r8, r8)
   23054:	46bd      	mov	sp, r7
   23056:	b002      	add	sp, #8
   23058:	bd80      	pop	{r7, pc}
	...

0002305c <spi_attach_slave>:
{
   2305c:	b580      	push	{r7, lr}
   2305e:	b084      	sub	sp, #16
   23060:	af00      	add	r7, sp, #0
   23062:	6078      	str	r0, [r7, #4]
   23064:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   23066:	683b      	ldr	r3, [r7, #0]
   23068:	781a      	ldrb	r2, [r3, #0]
   2306a:	687b      	ldr	r3, [r7, #4]
   2306c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2306e:	683b      	ldr	r3, [r7, #0]
   23070:	785a      	ldrb	r2, [r3, #1]
   23072:	687b      	ldr	r3, [r7, #4]
   23074:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   23076:	683b      	ldr	r3, [r7, #0]
   23078:	789a      	ldrb	r2, [r3, #2]
   2307a:	687b      	ldr	r3, [r7, #4]
   2307c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   2307e:	230c      	movs	r3, #12
   23080:	18fb      	adds	r3, r7, r3
   23082:	0018      	movs	r0, r3
   23084:	4b0b      	ldr	r3, [pc, #44]	; (230b4 <spi_attach_slave+0x58>)
   23086:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   23088:	230c      	movs	r3, #12
   2308a:	18fb      	adds	r3, r7, r3
   2308c:	2201      	movs	r2, #1
   2308e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   23090:	687b      	ldr	r3, [r7, #4]
   23092:	781b      	ldrb	r3, [r3, #0]
   23094:	220c      	movs	r2, #12
   23096:	18ba      	adds	r2, r7, r2
   23098:	0011      	movs	r1, r2
   2309a:	0018      	movs	r0, r3
   2309c:	4b06      	ldr	r3, [pc, #24]	; (230b8 <spi_attach_slave+0x5c>)
   2309e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   230a0:	687b      	ldr	r3, [r7, #4]
   230a2:	781b      	ldrb	r3, [r3, #0]
   230a4:	2101      	movs	r1, #1
   230a6:	0018      	movs	r0, r3
   230a8:	4b04      	ldr	r3, [pc, #16]	; (230bc <spi_attach_slave+0x60>)
   230aa:	4798      	blx	r3
}
   230ac:	46c0      	nop			; (mov r8, r8)
   230ae:	46bd      	mov	sp, r7
   230b0:	b004      	add	sp, #16
   230b2:	bd80      	pop	{r7, pc}
   230b4:	00022f1d 	.word	0x00022f1d
   230b8:	0002941d 	.word	0x0002941d
   230bc:	00022f41 	.word	0x00022f41

000230c0 <spi_enable>:
{
   230c0:	b580      	push	{r7, lr}
   230c2:	b084      	sub	sp, #16
   230c4:	af00      	add	r7, sp, #0
   230c6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   230c8:	687b      	ldr	r3, [r7, #4]
   230ca:	681b      	ldr	r3, [r3, #0]
   230cc:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   230ce:	687b      	ldr	r3, [r7, #4]
   230d0:	681b      	ldr	r3, [r3, #0]
   230d2:	0018      	movs	r0, r3
   230d4:	4b0b      	ldr	r3, [pc, #44]	; (23104 <spi_enable+0x44>)
   230d6:	4798      	blx	r3
   230d8:	0003      	movs	r3, r0
   230da:	0018      	movs	r0, r3
   230dc:	4b0a      	ldr	r3, [pc, #40]	; (23108 <spi_enable+0x48>)
   230de:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   230e0:	46c0      	nop			; (mov r8, r8)
   230e2:	687b      	ldr	r3, [r7, #4]
   230e4:	0018      	movs	r0, r3
   230e6:	4b09      	ldr	r3, [pc, #36]	; (2310c <spi_enable+0x4c>)
   230e8:	4798      	blx	r3
   230ea:	1e03      	subs	r3, r0, #0
   230ec:	d1f9      	bne.n	230e2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   230ee:	68fb      	ldr	r3, [r7, #12]
   230f0:	681b      	ldr	r3, [r3, #0]
   230f2:	2202      	movs	r2, #2
   230f4:	431a      	orrs	r2, r3
   230f6:	68fb      	ldr	r3, [r7, #12]
   230f8:	601a      	str	r2, [r3, #0]
}
   230fa:	46c0      	nop			; (mov r8, r8)
   230fc:	46bd      	mov	sp, r7
   230fe:	b004      	add	sp, #16
   23100:	bd80      	pop	{r7, pc}
   23102:	46c0      	nop			; (mov r8, r8)
   23104:	0002a0ed 	.word	0x0002a0ed
   23108:	00022e9d 	.word	0x00022e9d
   2310c:	00022f95 	.word	0x00022f95

00023110 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   23110:	b580      	push	{r7, lr}
   23112:	b084      	sub	sp, #16
   23114:	af00      	add	r7, sp, #0
   23116:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   23118:	687b      	ldr	r3, [r7, #4]
   2311a:	681b      	ldr	r3, [r3, #0]
   2311c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2311e:	687b      	ldr	r3, [r7, #4]
   23120:	681b      	ldr	r3, [r3, #0]
   23122:	0018      	movs	r0, r3
   23124:	4b0e      	ldr	r3, [pc, #56]	; (23160 <spi_disable+0x50>)
   23126:	4798      	blx	r3
   23128:	0003      	movs	r3, r0
   2312a:	0018      	movs	r0, r3
   2312c:	4b0d      	ldr	r3, [pc, #52]	; (23164 <spi_disable+0x54>)
   2312e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   23130:	46c0      	nop			; (mov r8, r8)
   23132:	687b      	ldr	r3, [r7, #4]
   23134:	0018      	movs	r0, r3
   23136:	4b0c      	ldr	r3, [pc, #48]	; (23168 <spi_disable+0x58>)
   23138:	4798      	blx	r3
   2313a:	1e03      	subs	r3, r0, #0
   2313c:	d1f9      	bne.n	23132 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2313e:	68fb      	ldr	r3, [r7, #12]
   23140:	228f      	movs	r2, #143	; 0x8f
   23142:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   23144:	68fb      	ldr	r3, [r7, #12]
   23146:	228f      	movs	r2, #143	; 0x8f
   23148:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2314a:	68fb      	ldr	r3, [r7, #12]
   2314c:	681b      	ldr	r3, [r3, #0]
   2314e:	2202      	movs	r2, #2
   23150:	4393      	bics	r3, r2
   23152:	001a      	movs	r2, r3
   23154:	68fb      	ldr	r3, [r7, #12]
   23156:	601a      	str	r2, [r3, #0]
}
   23158:	46c0      	nop			; (mov r8, r8)
   2315a:	46bd      	mov	sp, r7
   2315c:	b004      	add	sp, #16
   2315e:	bd80      	pop	{r7, pc}
   23160:	0002a0ed 	.word	0x0002a0ed
   23164:	00022ec9 	.word	0x00022ec9
   23168:	00022f95 	.word	0x00022f95

0002316c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   2316c:	b580      	push	{r7, lr}
   2316e:	b084      	sub	sp, #16
   23170:	af00      	add	r7, sp, #0
   23172:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   23174:	687b      	ldr	r3, [r7, #4]
   23176:	681b      	ldr	r3, [r3, #0]
   23178:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2317a:	68fb      	ldr	r3, [r7, #12]
   2317c:	7e1b      	ldrb	r3, [r3, #24]
   2317e:	b2db      	uxtb	r3, r3
   23180:	001a      	movs	r2, r3
   23182:	2302      	movs	r3, #2
   23184:	4013      	ands	r3, r2
   23186:	1e5a      	subs	r2, r3, #1
   23188:	4193      	sbcs	r3, r2
   2318a:	b2db      	uxtb	r3, r3
}
   2318c:	0018      	movs	r0, r3
   2318e:	46bd      	mov	sp, r7
   23190:	b004      	add	sp, #16
   23192:	bd80      	pop	{r7, pc}

00023194 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   23194:	b580      	push	{r7, lr}
   23196:	b084      	sub	sp, #16
   23198:	af00      	add	r7, sp, #0
   2319a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2319c:	687b      	ldr	r3, [r7, #4]
   2319e:	681b      	ldr	r3, [r3, #0]
   231a0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   231a2:	68fb      	ldr	r3, [r7, #12]
   231a4:	7e1b      	ldrb	r3, [r3, #24]
   231a6:	b2db      	uxtb	r3, r3
   231a8:	001a      	movs	r2, r3
   231aa:	2301      	movs	r3, #1
   231ac:	4013      	ands	r3, r2
   231ae:	1e5a      	subs	r2, r3, #1
   231b0:	4193      	sbcs	r3, r2
   231b2:	b2db      	uxtb	r3, r3
}
   231b4:	0018      	movs	r0, r3
   231b6:	46bd      	mov	sp, r7
   231b8:	b004      	add	sp, #16
   231ba:	bd80      	pop	{r7, pc}

000231bc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   231bc:	b580      	push	{r7, lr}
   231be:	b084      	sub	sp, #16
   231c0:	af00      	add	r7, sp, #0
   231c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   231c4:	687b      	ldr	r3, [r7, #4]
   231c6:	681b      	ldr	r3, [r3, #0]
   231c8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   231ca:	68fb      	ldr	r3, [r7, #12]
   231cc:	7e1b      	ldrb	r3, [r3, #24]
   231ce:	b2db      	uxtb	r3, r3
   231d0:	001a      	movs	r2, r3
   231d2:	2304      	movs	r3, #4
   231d4:	4013      	ands	r3, r2
   231d6:	1e5a      	subs	r2, r3, #1
   231d8:	4193      	sbcs	r3, r2
   231da:	b2db      	uxtb	r3, r3
}
   231dc:	0018      	movs	r0, r3
   231de:	46bd      	mov	sp, r7
   231e0:	b004      	add	sp, #16
   231e2:	bd80      	pop	{r7, pc}

000231e4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   231e4:	b580      	push	{r7, lr}
   231e6:	b084      	sub	sp, #16
   231e8:	af00      	add	r7, sp, #0
   231ea:	6078      	str	r0, [r7, #4]
   231ec:	000a      	movs	r2, r1
   231ee:	1cbb      	adds	r3, r7, #2
   231f0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   231f2:	687b      	ldr	r3, [r7, #4]
   231f4:	681b      	ldr	r3, [r3, #0]
   231f6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   231f8:	687b      	ldr	r3, [r7, #4]
   231fa:	0018      	movs	r0, r3
   231fc:	4b0a      	ldr	r3, [pc, #40]	; (23228 <spi_write+0x44>)
   231fe:	4798      	blx	r3
   23200:	0003      	movs	r3, r0
   23202:	001a      	movs	r2, r3
   23204:	2301      	movs	r3, #1
   23206:	4053      	eors	r3, r2
   23208:	b2db      	uxtb	r3, r3
   2320a:	2b00      	cmp	r3, #0
   2320c:	d001      	beq.n	23212 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   2320e:	2305      	movs	r3, #5
   23210:	e006      	b.n	23220 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   23212:	1cbb      	adds	r3, r7, #2
   23214:	881b      	ldrh	r3, [r3, #0]
   23216:	05db      	lsls	r3, r3, #23
   23218:	0dda      	lsrs	r2, r3, #23
   2321a:	68fb      	ldr	r3, [r7, #12]
   2321c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   2321e:	2300      	movs	r3, #0
}
   23220:	0018      	movs	r0, r3
   23222:	46bd      	mov	sp, r7
   23224:	b004      	add	sp, #16
   23226:	bd80      	pop	{r7, pc}
   23228:	00023195 	.word	0x00023195

0002322c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   2322c:	b580      	push	{r7, lr}
   2322e:	b084      	sub	sp, #16
   23230:	af00      	add	r7, sp, #0
   23232:	6078      	str	r0, [r7, #4]
   23234:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   23236:	687b      	ldr	r3, [r7, #4]
   23238:	681b      	ldr	r3, [r3, #0]
   2323a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   2323c:	687b      	ldr	r3, [r7, #4]
   2323e:	0018      	movs	r0, r3
   23240:	4b1b      	ldr	r3, [pc, #108]	; (232b0 <spi_read+0x84>)
   23242:	4798      	blx	r3
   23244:	0003      	movs	r3, r0
   23246:	001a      	movs	r2, r3
   23248:	2301      	movs	r3, #1
   2324a:	4053      	eors	r3, r2
   2324c:	b2db      	uxtb	r3, r3
   2324e:	2b00      	cmp	r3, #0
   23250:	d001      	beq.n	23256 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   23252:	2310      	movs	r3, #16
   23254:	e027      	b.n	232a6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   23256:	230f      	movs	r3, #15
   23258:	18fb      	adds	r3, r7, r3
   2325a:	2200      	movs	r2, #0
   2325c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2325e:	68bb      	ldr	r3, [r7, #8]
   23260:	8b5b      	ldrh	r3, [r3, #26]
   23262:	b29b      	uxth	r3, r3
   23264:	001a      	movs	r2, r3
   23266:	2304      	movs	r3, #4
   23268:	4013      	ands	r3, r2
   2326a:	d006      	beq.n	2327a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2326c:	230f      	movs	r3, #15
   2326e:	18fb      	adds	r3, r7, r3
   23270:	221e      	movs	r2, #30
   23272:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   23274:	68bb      	ldr	r3, [r7, #8]
   23276:	2204      	movs	r2, #4
   23278:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2327a:	687b      	ldr	r3, [r7, #4]
   2327c:	799b      	ldrb	r3, [r3, #6]
   2327e:	2b01      	cmp	r3, #1
   23280:	d108      	bne.n	23294 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   23282:	68bb      	ldr	r3, [r7, #8]
   23284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23286:	b29b      	uxth	r3, r3
   23288:	05db      	lsls	r3, r3, #23
   2328a:	0ddb      	lsrs	r3, r3, #23
   2328c:	b29a      	uxth	r2, r3
   2328e:	683b      	ldr	r3, [r7, #0]
   23290:	801a      	strh	r2, [r3, #0]
   23292:	e005      	b.n	232a0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   23294:	68bb      	ldr	r3, [r7, #8]
   23296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23298:	b2db      	uxtb	r3, r3
   2329a:	b29a      	uxth	r2, r3
   2329c:	683b      	ldr	r3, [r7, #0]
   2329e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   232a0:	230f      	movs	r3, #15
   232a2:	18fb      	adds	r3, r7, r3
   232a4:	781b      	ldrb	r3, [r3, #0]
}
   232a6:	0018      	movs	r0, r3
   232a8:	46bd      	mov	sp, r7
   232aa:	b004      	add	sp, #16
   232ac:	bd80      	pop	{r7, pc}
   232ae:	46c0      	nop			; (mov r8, r8)
   232b0:	000231bd 	.word	0x000231bd

000232b4 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   232b4:	b580      	push	{r7, lr}
   232b6:	b086      	sub	sp, #24
   232b8:	af00      	add	r7, sp, #0
   232ba:	60f8      	str	r0, [r7, #12]
   232bc:	60b9      	str	r1, [r7, #8]
   232be:	1dbb      	adds	r3, r7, #6
   232c0:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   232c2:	2313      	movs	r3, #19
   232c4:	18fb      	adds	r3, r7, r3
   232c6:	22ff      	movs	r2, #255	; 0xff
   232c8:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   232ca:	2317      	movs	r3, #23
   232cc:	18fb      	adds	r3, r7, r3
   232ce:	2200      	movs	r2, #0
   232d0:	701a      	strb	r2, [r3, #0]
   232d2:	2316      	movs	r3, #22
   232d4:	18fb      	adds	r3, r7, r3
   232d6:	2200      	movs	r2, #0
   232d8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   232da:	2314      	movs	r3, #20
   232dc:	18fb      	adds	r3, r7, r3
   232de:	2200      	movs	r2, #0
   232e0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   232e2:	2310      	movs	r3, #16
   232e4:	18fb      	adds	r3, r7, r3
   232e6:	2200      	movs	r2, #0
   232e8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   232ea:	68bb      	ldr	r3, [r7, #8]
   232ec:	2b00      	cmp	r3, #0
   232ee:	d102      	bne.n	232f6 <spi_rw+0x42>
   232f0:	68fb      	ldr	r3, [r7, #12]
   232f2:	2b00      	cmp	r3, #0
   232f4:	d003      	beq.n	232fe <spi_rw+0x4a>
   232f6:	1dbb      	adds	r3, r7, #6
   232f8:	881b      	ldrh	r3, [r3, #0]
   232fa:	2b00      	cmp	r3, #0
   232fc:	d102      	bne.n	23304 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   232fe:	230f      	movs	r3, #15
   23300:	425b      	negs	r3, r3
   23302:	e07e      	b.n	23402 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   23304:	68fb      	ldr	r3, [r7, #12]
   23306:	2b00      	cmp	r3, #0
   23308:	d106      	bne.n	23318 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   2330a:	2313      	movs	r3, #19
   2330c:	18fb      	adds	r3, r7, r3
   2330e:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   23310:	2317      	movs	r3, #23
   23312:	18fb      	adds	r3, r7, r3
   23314:	2201      	movs	r2, #1
   23316:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   23318:	68bb      	ldr	r3, [r7, #8]
   2331a:	2b00      	cmp	r3, #0
   2331c:	d106      	bne.n	2332c <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   2331e:	2313      	movs	r3, #19
   23320:	18fb      	adds	r3, r7, r3
   23322:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   23324:	2316      	movs	r3, #22
   23326:	18fb      	adds	r3, r7, r3
   23328:	2201      	movs	r2, #1
   2332a:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   2332c:	4937      	ldr	r1, [pc, #220]	; (2340c <spi_rw+0x158>)
   2332e:	4b38      	ldr	r3, [pc, #224]	; (23410 <spi_rw+0x15c>)
   23330:	2201      	movs	r2, #1
   23332:	0018      	movs	r0, r3
   23334:	4b37      	ldr	r3, [pc, #220]	; (23414 <spi_rw+0x160>)
   23336:	4798      	blx	r3

	while (u16Sz) {
   23338:	e04c      	b.n	233d4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   2333a:	68fb      	ldr	r3, [r7, #12]
   2333c:	781a      	ldrb	r2, [r3, #0]
   2333e:	2314      	movs	r3, #20
   23340:	18fb      	adds	r3, r7, r3
   23342:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   23344:	46c0      	nop			; (mov r8, r8)
   23346:	4b32      	ldr	r3, [pc, #200]	; (23410 <spi_rw+0x15c>)
   23348:	0018      	movs	r0, r3
   2334a:	4b33      	ldr	r3, [pc, #204]	; (23418 <spi_rw+0x164>)
   2334c:	4798      	blx	r3
   2334e:	0003      	movs	r3, r0
   23350:	001a      	movs	r2, r3
   23352:	2301      	movs	r3, #1
   23354:	4053      	eors	r3, r2
   23356:	b2db      	uxtb	r3, r3
   23358:	2b00      	cmp	r3, #0
   2335a:	d1f4      	bne.n	23346 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   2335c:	46c0      	nop			; (mov r8, r8)
   2335e:	2314      	movs	r3, #20
   23360:	18fb      	adds	r3, r7, r3
   23362:	881a      	ldrh	r2, [r3, #0]
   23364:	4b2a      	ldr	r3, [pc, #168]	; (23410 <spi_rw+0x15c>)
   23366:	0011      	movs	r1, r2
   23368:	0018      	movs	r0, r3
   2336a:	4b2c      	ldr	r3, [pc, #176]	; (2341c <spi_rw+0x168>)
   2336c:	4798      	blx	r3
   2336e:	1e03      	subs	r3, r0, #0
   23370:	d1f5      	bne.n	2335e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   23372:	46c0      	nop			; (mov r8, r8)
   23374:	4b26      	ldr	r3, [pc, #152]	; (23410 <spi_rw+0x15c>)
   23376:	0018      	movs	r0, r3
   23378:	4b29      	ldr	r3, [pc, #164]	; (23420 <spi_rw+0x16c>)
   2337a:	4798      	blx	r3
   2337c:	0003      	movs	r3, r0
   2337e:	001a      	movs	r2, r3
   23380:	2301      	movs	r3, #1
   23382:	4053      	eors	r3, r2
   23384:	b2db      	uxtb	r3, r3
   23386:	2b00      	cmp	r3, #0
   23388:	d1f4      	bne.n	23374 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   2338a:	46c0      	nop			; (mov r8, r8)
   2338c:	2310      	movs	r3, #16
   2338e:	18fa      	adds	r2, r7, r3
   23390:	4b1f      	ldr	r3, [pc, #124]	; (23410 <spi_rw+0x15c>)
   23392:	0011      	movs	r1, r2
   23394:	0018      	movs	r0, r3
   23396:	4b23      	ldr	r3, [pc, #140]	; (23424 <spi_rw+0x170>)
   23398:	4798      	blx	r3
   2339a:	1e03      	subs	r3, r0, #0
   2339c:	d1f6      	bne.n	2338c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   2339e:	2310      	movs	r3, #16
   233a0:	18fb      	adds	r3, r7, r3
   233a2:	881b      	ldrh	r3, [r3, #0]
   233a4:	b2da      	uxtb	r2, r3
   233a6:	68bb      	ldr	r3, [r7, #8]
   233a8:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   233aa:	1dbb      	adds	r3, r7, #6
   233ac:	881a      	ldrh	r2, [r3, #0]
   233ae:	1dbb      	adds	r3, r7, #6
   233b0:	3a01      	subs	r2, #1
   233b2:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   233b4:	2316      	movs	r3, #22
   233b6:	18fb      	adds	r3, r7, r3
   233b8:	781b      	ldrb	r3, [r3, #0]
   233ba:	2b00      	cmp	r3, #0
   233bc:	d102      	bne.n	233c4 <spi_rw+0x110>
			pu8Miso++;
   233be:	68bb      	ldr	r3, [r7, #8]
   233c0:	3301      	adds	r3, #1
   233c2:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   233c4:	2317      	movs	r3, #23
   233c6:	18fb      	adds	r3, r7, r3
   233c8:	781b      	ldrb	r3, [r3, #0]
   233ca:	2b00      	cmp	r3, #0
   233cc:	d102      	bne.n	233d4 <spi_rw+0x120>
			pu8Mosi++;
   233ce:	68fb      	ldr	r3, [r7, #12]
   233d0:	3301      	adds	r3, #1
   233d2:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   233d4:	1dbb      	adds	r3, r7, #6
   233d6:	881b      	ldrh	r3, [r3, #0]
   233d8:	2b00      	cmp	r3, #0
   233da:	d1ae      	bne.n	2333a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   233dc:	46c0      	nop			; (mov r8, r8)
   233de:	4b0c      	ldr	r3, [pc, #48]	; (23410 <spi_rw+0x15c>)
   233e0:	0018      	movs	r0, r3
   233e2:	4b11      	ldr	r3, [pc, #68]	; (23428 <spi_rw+0x174>)
   233e4:	4798      	blx	r3
   233e6:	0003      	movs	r3, r0
   233e8:	001a      	movs	r2, r3
   233ea:	2301      	movs	r3, #1
   233ec:	4053      	eors	r3, r2
   233ee:	b2db      	uxtb	r3, r3
   233f0:	2b00      	cmp	r3, #0
   233f2:	d1f4      	bne.n	233de <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   233f4:	4905      	ldr	r1, [pc, #20]	; (2340c <spi_rw+0x158>)
   233f6:	4b06      	ldr	r3, [pc, #24]	; (23410 <spi_rw+0x15c>)
   233f8:	2200      	movs	r2, #0
   233fa:	0018      	movs	r0, r3
   233fc:	4b05      	ldr	r3, [pc, #20]	; (23414 <spi_rw+0x160>)
   233fe:	4798      	blx	r3

	return M2M_SUCCESS;
   23400:	2300      	movs	r3, #0
}
   23402:	0018      	movs	r0, r3
   23404:	46bd      	mov	sp, r7
   23406:	b006      	add	sp, #24
   23408:	bd80      	pop	{r7, pc}
   2340a:	46c0      	nop			; (mov r8, r8)
   2340c:	20005a1c 	.word	0x20005a1c
   23410:	20005a20 	.word	0x20005a20
   23414:	0002ab61 	.word	0x0002ab61
   23418:	00023195 	.word	0x00023195
   2341c:	000231e5 	.word	0x000231e5
   23420:	000231bd 	.word	0x000231bd
   23424:	0002322d 	.word	0x0002322d
   23428:	0002316d 	.word	0x0002316d

0002342c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   2342c:	b580      	push	{r7, lr}
   2342e:	b092      	sub	sp, #72	; 0x48
   23430:	af00      	add	r7, sp, #0
   23432:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   23434:	2347      	movs	r3, #71	; 0x47
   23436:	18fb      	adds	r3, r7, r3
   23438:	2200      	movs	r2, #0
   2343a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   2343c:	2308      	movs	r3, #8
   2343e:	18fb      	adds	r3, r7, r3
   23440:	0018      	movs	r0, r3
   23442:	4b26      	ldr	r3, [pc, #152]	; (234dc <nm_bus_init+0xb0>)
   23444:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   23446:	2308      	movs	r3, #8
   23448:	18fb      	adds	r3, r7, r3
   2344a:	220e      	movs	r2, #14
   2344c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   2344e:	2308      	movs	r3, #8
   23450:	18fa      	adds	r2, r7, r3
   23452:	4b23      	ldr	r3, [pc, #140]	; (234e0 <nm_bus_init+0xb4>)
   23454:	0011      	movs	r1, r2
   23456:	0018      	movs	r0, r3
   23458:	4b22      	ldr	r3, [pc, #136]	; (234e4 <nm_bus_init+0xb8>)
   2345a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   2345c:	230c      	movs	r3, #12
   2345e:	18fb      	adds	r3, r7, r3
   23460:	0018      	movs	r0, r3
   23462:	4b21      	ldr	r3, [pc, #132]	; (234e8 <nm_bus_init+0xbc>)
   23464:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   23466:	230c      	movs	r3, #12
   23468:	18fb      	adds	r3, r7, r3
   2346a:	22c0      	movs	r2, #192	; 0xc0
   2346c:	0392      	lsls	r2, r2, #14
   2346e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   23470:	230c      	movs	r3, #12
   23472:	18fb      	adds	r3, r7, r3
   23474:	4a1d      	ldr	r2, [pc, #116]	; (234ec <nm_bus_init+0xc0>)
   23476:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   23478:	230c      	movs	r3, #12
   2347a:	18fb      	adds	r3, r7, r3
   2347c:	4a1c      	ldr	r2, [pc, #112]	; (234f0 <nm_bus_init+0xc4>)
   2347e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   23480:	230c      	movs	r3, #12
   23482:	18fb      	adds	r3, r7, r3
   23484:	2201      	movs	r2, #1
   23486:	4252      	negs	r2, r2
   23488:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   2348a:	230c      	movs	r3, #12
   2348c:	18fb      	adds	r3, r7, r3
   2348e:	4a19      	ldr	r2, [pc, #100]	; (234f4 <nm_bus_init+0xc8>)
   23490:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   23492:	230c      	movs	r3, #12
   23494:	18fb      	adds	r3, r7, r3
   23496:	2200      	movs	r2, #0
   23498:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   2349a:	230c      	movs	r3, #12
   2349c:	18fb      	adds	r3, r7, r3
   2349e:	4a16      	ldr	r2, [pc, #88]	; (234f8 <nm_bus_init+0xcc>)
   234a0:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   234a2:	230c      	movs	r3, #12
   234a4:	18fa      	adds	r2, r7, r3
   234a6:	4915      	ldr	r1, [pc, #84]	; (234fc <nm_bus_init+0xd0>)
   234a8:	4b15      	ldr	r3, [pc, #84]	; (23500 <nm_bus_init+0xd4>)
   234aa:	0018      	movs	r0, r3
   234ac:	4b15      	ldr	r3, [pc, #84]	; (23504 <nm_bus_init+0xd8>)
   234ae:	4798      	blx	r3
   234b0:	1e03      	subs	r3, r0, #0
   234b2:	d002      	beq.n	234ba <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   234b4:	2306      	movs	r3, #6
   234b6:	425b      	negs	r3, r3
   234b8:	e00c      	b.n	234d4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   234ba:	4b11      	ldr	r3, [pc, #68]	; (23500 <nm_bus_init+0xd4>)
   234bc:	0018      	movs	r0, r3
   234be:	4b12      	ldr	r3, [pc, #72]	; (23508 <nm_bus_init+0xdc>)
   234c0:	4798      	blx	r3

	nm_bsp_reset();
   234c2:	4b12      	ldr	r3, [pc, #72]	; (2350c <nm_bus_init+0xe0>)
   234c4:	4798      	blx	r3
	nm_bsp_sleep(1);
   234c6:	2001      	movs	r0, #1
   234c8:	4b11      	ldr	r3, [pc, #68]	; (23510 <nm_bus_init+0xe4>)
   234ca:	4798      	blx	r3
#endif
	return result;
   234cc:	2347      	movs	r3, #71	; 0x47
   234ce:	18fb      	adds	r3, r7, r3
   234d0:	781b      	ldrb	r3, [r3, #0]
   234d2:	b25b      	sxtb	r3, r3
}
   234d4:	0018      	movs	r0, r3
   234d6:	46bd      	mov	sp, r7
   234d8:	b012      	add	sp, #72	; 0x48
   234da:	bd80      	pop	{r7, pc}
   234dc:	00023039 	.word	0x00023039
   234e0:	20005a1c 	.word	0x20005a1c
   234e4:	0002305d 	.word	0x0002305d
   234e8:	00022fb5 	.word	0x00022fb5
   234ec:	000c0002 	.word	0x000c0002
   234f0:	000d0002 	.word	0x000d0002
   234f4:	000f0002 	.word	0x000f0002
   234f8:	00124f80 	.word	0x00124f80
   234fc:	42001000 	.word	0x42001000
   23500:	20005a20 	.word	0x20005a20
   23504:	0002a89d 	.word	0x0002a89d
   23508:	000230c1 	.word	0x000230c1
   2350c:	00022d31 	.word	0x00022d31
   23510:	00022d71 	.word	0x00022d71

00023514 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   23514:	b590      	push	{r4, r7, lr}
   23516:	b085      	sub	sp, #20
   23518:	af00      	add	r7, sp, #0
   2351a:	0002      	movs	r2, r0
   2351c:	6039      	str	r1, [r7, #0]
   2351e:	1dfb      	adds	r3, r7, #7
   23520:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   23522:	230f      	movs	r3, #15
   23524:	18fb      	adds	r3, r7, r3
   23526:	2200      	movs	r2, #0
   23528:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   2352a:	1dfb      	adds	r3, r7, #7
   2352c:	781b      	ldrb	r3, [r3, #0]
   2352e:	2b03      	cmp	r3, #3
   23530:	d10f      	bne.n	23552 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   23532:	683b      	ldr	r3, [r7, #0]
   23534:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   23536:	68bb      	ldr	r3, [r7, #8]
   23538:	6818      	ldr	r0, [r3, #0]
   2353a:	68bb      	ldr	r3, [r7, #8]
   2353c:	6859      	ldr	r1, [r3, #4]
   2353e:	68bb      	ldr	r3, [r7, #8]
   23540:	891b      	ldrh	r3, [r3, #8]
   23542:	220f      	movs	r2, #15
   23544:	18bc      	adds	r4, r7, r2
   23546:	001a      	movs	r2, r3
   23548:	4b10      	ldr	r3, [pc, #64]	; (2358c <nm_bus_ioctl+0x78>)
   2354a:	4798      	blx	r3
   2354c:	0003      	movs	r3, r0
   2354e:	7023      	strb	r3, [r4, #0]
		}
		break;
   23550:	e013      	b.n	2357a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   23552:	230f      	movs	r3, #15
   23554:	18fb      	adds	r3, r7, r3
   23556:	22ff      	movs	r2, #255	; 0xff
   23558:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   2355a:	2383      	movs	r3, #131	; 0x83
   2355c:	005a      	lsls	r2, r3, #1
   2355e:	490c      	ldr	r1, [pc, #48]	; (23590 <nm_bus_ioctl+0x7c>)
   23560:	4b0c      	ldr	r3, [pc, #48]	; (23594 <nm_bus_ioctl+0x80>)
   23562:	0018      	movs	r0, r3
   23564:	4b0c      	ldr	r3, [pc, #48]	; (23598 <nm_bus_ioctl+0x84>)
   23566:	4798      	blx	r3
   23568:	4b0c      	ldr	r3, [pc, #48]	; (2359c <nm_bus_ioctl+0x88>)
   2356a:	0018      	movs	r0, r3
   2356c:	4b0a      	ldr	r3, [pc, #40]	; (23598 <nm_bus_ioctl+0x84>)
   2356e:	4798      	blx	r3
   23570:	4b0b      	ldr	r3, [pc, #44]	; (235a0 <nm_bus_ioctl+0x8c>)
   23572:	0018      	movs	r0, r3
   23574:	4b08      	ldr	r3, [pc, #32]	; (23598 <nm_bus_ioctl+0x84>)
   23576:	4798      	blx	r3
			break;
   23578:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   2357a:	230f      	movs	r3, #15
   2357c:	18fb      	adds	r3, r7, r3
   2357e:	781b      	ldrb	r3, [r3, #0]
   23580:	b25b      	sxtb	r3, r3
}
   23582:	0018      	movs	r0, r3
   23584:	46bd      	mov	sp, r7
   23586:	b005      	add	sp, #20
   23588:	bd90      	pop	{r4, r7, pc}
   2358a:	46c0      	nop			; (mov r8, r8)
   2358c:	000232b5 	.word	0x000232b5
   23590:	0003b494 	.word	0x0003b494
   23594:	0003b468 	.word	0x0003b468
   23598:	00020889 	.word	0x00020889
   2359c:	0003b47c 	.word	0x0003b47c
   235a0:	0003b490 	.word	0x0003b490

000235a4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   235a4:	b580      	push	{r7, lr}
   235a6:	b082      	sub	sp, #8
   235a8:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   235aa:	1dfb      	adds	r3, r7, #7
   235ac:	2200      	movs	r2, #0
   235ae:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   235b0:	1d3b      	adds	r3, r7, #4
   235b2:	0018      	movs	r0, r3
   235b4:	4b13      	ldr	r3, [pc, #76]	; (23604 <nm_bus_deinit+0x60>)
   235b6:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   235b8:	1d3b      	adds	r3, r7, #4
   235ba:	2200      	movs	r2, #0
   235bc:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   235be:	1d3b      	adds	r3, r7, #4
   235c0:	2200      	movs	r2, #0
   235c2:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   235c4:	4b10      	ldr	r3, [pc, #64]	; (23608 <nm_bus_deinit+0x64>)
   235c6:	0018      	movs	r0, r3
   235c8:	4b10      	ldr	r3, [pc, #64]	; (2360c <nm_bus_deinit+0x68>)
   235ca:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   235cc:	1d3b      	adds	r3, r7, #4
   235ce:	0019      	movs	r1, r3
   235d0:	200c      	movs	r0, #12
   235d2:	4b0f      	ldr	r3, [pc, #60]	; (23610 <nm_bus_deinit+0x6c>)
   235d4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   235d6:	1d3b      	adds	r3, r7, #4
   235d8:	0019      	movs	r1, r3
   235da:	200f      	movs	r0, #15
   235dc:	4b0c      	ldr	r3, [pc, #48]	; (23610 <nm_bus_deinit+0x6c>)
   235de:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   235e0:	1d3b      	adds	r3, r7, #4
   235e2:	0019      	movs	r1, r3
   235e4:	200d      	movs	r0, #13
   235e6:	4b0a      	ldr	r3, [pc, #40]	; (23610 <nm_bus_deinit+0x6c>)
   235e8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   235ea:	1d3b      	adds	r3, r7, #4
   235ec:	0019      	movs	r1, r3
   235ee:	200e      	movs	r0, #14
   235f0:	4b07      	ldr	r3, [pc, #28]	; (23610 <nm_bus_deinit+0x6c>)
   235f2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   235f4:	1dfb      	adds	r3, r7, #7
   235f6:	781b      	ldrb	r3, [r3, #0]
   235f8:	b25b      	sxtb	r3, r3
}
   235fa:	0018      	movs	r0, r3
   235fc:	46bd      	mov	sp, r7
   235fe:	b002      	add	sp, #8
   23600:	bd80      	pop	{r7, pc}
   23602:	46c0      	nop			; (mov r8, r8)
   23604:	00022f1d 	.word	0x00022f1d
   23608:	20005a20 	.word	0x20005a20
   2360c:	00023111 	.word	0x00023111
   23610:	0002941d 	.word	0x0002941d

00023614 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   23614:	b580      	push	{r7, lr}
   23616:	b084      	sub	sp, #16
   23618:	af00      	add	r7, sp, #0
   2361a:	60f8      	str	r0, [r7, #12]
   2361c:	60b9      	str	r1, [r7, #8]
   2361e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   23620:	687b      	ldr	r3, [r7, #4]
   23622:	2b00      	cmp	r3, #0
   23624:	d010      	beq.n	23648 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   23626:	68bb      	ldr	r3, [r7, #8]
   23628:	781a      	ldrb	r2, [r3, #0]
   2362a:	68fb      	ldr	r3, [r7, #12]
   2362c:	701a      	strb	r2, [r3, #0]
		pDst++;
   2362e:	68fb      	ldr	r3, [r7, #12]
   23630:	3301      	adds	r3, #1
   23632:	60fb      	str	r3, [r7, #12]
		pSrc++;
   23634:	68bb      	ldr	r3, [r7, #8]
   23636:	3301      	adds	r3, #1
   23638:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   2363a:	687b      	ldr	r3, [r7, #4]
   2363c:	3b01      	subs	r3, #1
   2363e:	607b      	str	r3, [r7, #4]
   23640:	687b      	ldr	r3, [r7, #4]
   23642:	2b00      	cmp	r3, #0
   23644:	d1ef      	bne.n	23626 <m2m_memcpy+0x12>
   23646:	e000      	b.n	2364a <m2m_memcpy+0x36>
	if(sz == 0) return;
   23648:	46c0      	nop			; (mov r8, r8)
}
   2364a:	46bd      	mov	sp, r7
   2364c:	b004      	add	sp, #16
   2364e:	bd80      	pop	{r7, pc}

00023650 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   23650:	b580      	push	{r7, lr}
   23652:	b084      	sub	sp, #16
   23654:	af00      	add	r7, sp, #0
   23656:	60f8      	str	r0, [r7, #12]
   23658:	607a      	str	r2, [r7, #4]
   2365a:	230b      	movs	r3, #11
   2365c:	18fb      	adds	r3, r7, r3
   2365e:	1c0a      	adds	r2, r1, #0
   23660:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   23662:	687b      	ldr	r3, [r7, #4]
   23664:	2b00      	cmp	r3, #0
   23666:	d00e      	beq.n	23686 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   23668:	68fb      	ldr	r3, [r7, #12]
   2366a:	220b      	movs	r2, #11
   2366c:	18ba      	adds	r2, r7, r2
   2366e:	7812      	ldrb	r2, [r2, #0]
   23670:	701a      	strb	r2, [r3, #0]
		pBuf++;
   23672:	68fb      	ldr	r3, [r7, #12]
   23674:	3301      	adds	r3, #1
   23676:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   23678:	687b      	ldr	r3, [r7, #4]
   2367a:	3b01      	subs	r3, #1
   2367c:	607b      	str	r3, [r7, #4]
   2367e:	687b      	ldr	r3, [r7, #4]
   23680:	2b00      	cmp	r3, #0
   23682:	d1f1      	bne.n	23668 <m2m_memset+0x18>
   23684:	e000      	b.n	23688 <m2m_memset+0x38>
	if(sz == 0) return;
   23686:	46c0      	nop			; (mov r8, r8)
}
   23688:	46bd      	mov	sp, r7
   2368a:	b004      	add	sp, #16
   2368c:	bd80      	pop	{r7, pc}

0002368e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2368e:	b580      	push	{r7, lr}
   23690:	b084      	sub	sp, #16
   23692:	af00      	add	r7, sp, #0
   23694:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   23696:	230e      	movs	r3, #14
   23698:	18fb      	adds	r3, r7, r3
   2369a:	2200      	movs	r2, #0
   2369c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   2369e:	e009      	b.n	236b4 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   236a0:	230e      	movs	r3, #14
   236a2:	18fb      	adds	r3, r7, r3
   236a4:	881a      	ldrh	r2, [r3, #0]
   236a6:	230e      	movs	r3, #14
   236a8:	18fb      	adds	r3, r7, r3
   236aa:	3201      	adds	r2, #1
   236ac:	801a      	strh	r2, [r3, #0]
		pcStr++;
   236ae:	687b      	ldr	r3, [r7, #4]
   236b0:	3301      	adds	r3, #1
   236b2:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   236b4:	687b      	ldr	r3, [r7, #4]
   236b6:	781b      	ldrb	r3, [r3, #0]
   236b8:	2b00      	cmp	r3, #0
   236ba:	d1f1      	bne.n	236a0 <m2m_strlen+0x12>
	}
	return u16StrLen;
   236bc:	230e      	movs	r3, #14
   236be:	18fb      	adds	r3, r7, r3
   236c0:	881b      	ldrh	r3, [r3, #0]
}
   236c2:	0018      	movs	r0, r3
   236c4:	46bd      	mov	sp, r7
   236c6:	b004      	add	sp, #16
   236c8:	bd80      	pop	{r7, pc}
	...

000236cc <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   236cc:	b580      	push	{r7, lr}
   236ce:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   236d0:	4b04      	ldr	r3, [pc, #16]	; (236e4 <isr+0x18>)
   236d2:	78db      	ldrb	r3, [r3, #3]
   236d4:	b2db      	uxtb	r3, r3
   236d6:	3301      	adds	r3, #1
   236d8:	b2da      	uxtb	r2, r3
   236da:	4b02      	ldr	r3, [pc, #8]	; (236e4 <isr+0x18>)
   236dc:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   236de:	46c0      	nop			; (mov r8, r8)
   236e0:	46bd      	mov	sp, r7
   236e2:	bd80      	pop	{r7, pc}
   236e4:	20005a5c 	.word	0x20005a5c

000236e8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   236e8:	b590      	push	{r4, r7, lr}
   236ea:	b083      	sub	sp, #12
   236ec:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   236ee:	1dfb      	adds	r3, r7, #7
   236f0:	2200      	movs	r2, #0
   236f2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   236f4:	4b14      	ldr	r3, [pc, #80]	; (23748 <hif_set_rx_done+0x60>)
   236f6:	2200      	movs	r2, #0
   236f8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   236fa:	2001      	movs	r0, #1
   236fc:	4b13      	ldr	r3, [pc, #76]	; (2374c <hif_set_rx_done+0x64>)
   236fe:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   23700:	1dfc      	adds	r4, r7, #7
   23702:	003b      	movs	r3, r7
   23704:	4a12      	ldr	r2, [pc, #72]	; (23750 <hif_set_rx_done+0x68>)
   23706:	0019      	movs	r1, r3
   23708:	0010      	movs	r0, r2
   2370a:	4b12      	ldr	r3, [pc, #72]	; (23754 <hif_set_rx_done+0x6c>)
   2370c:	4798      	blx	r3
   2370e:	0003      	movs	r3, r0
   23710:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   23712:	1dfb      	adds	r3, r7, #7
   23714:	781b      	ldrb	r3, [r3, #0]
   23716:	b25b      	sxtb	r3, r3
   23718:	2b00      	cmp	r3, #0
   2371a:	d10d      	bne.n	23738 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   2371c:	683b      	ldr	r3, [r7, #0]
   2371e:	2202      	movs	r2, #2
   23720:	4313      	orrs	r3, r2
   23722:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   23724:	683b      	ldr	r3, [r7, #0]
   23726:	1dfc      	adds	r4, r7, #7
   23728:	4a09      	ldr	r2, [pc, #36]	; (23750 <hif_set_rx_done+0x68>)
   2372a:	0019      	movs	r1, r3
   2372c:	0010      	movs	r0, r2
   2372e:	4b0a      	ldr	r3, [pc, #40]	; (23758 <hif_set_rx_done+0x70>)
   23730:	4798      	blx	r3
   23732:	0003      	movs	r3, r0
   23734:	7023      	strb	r3, [r4, #0]
   23736:	e000      	b.n	2373a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   23738:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   2373a:	1dfb      	adds	r3, r7, #7
   2373c:	781b      	ldrb	r3, [r3, #0]
   2373e:	b25b      	sxtb	r3, r3

}
   23740:	0018      	movs	r0, r3
   23742:	46bd      	mov	sp, r7
   23744:	b003      	add	sp, #12
   23746:	bd90      	pop	{r4, r7, pc}
   23748:	20005a5c 	.word	0x20005a5c
   2374c:	00022e05 	.word	0x00022e05
   23750:	00001070 	.word	0x00001070
   23754:	000256e1 	.word	0x000256e1
   23758:	00025705 	.word	0x00025705

0002375c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   2375c:	b580      	push	{r7, lr}
   2375e:	b082      	sub	sp, #8
   23760:	af00      	add	r7, sp, #0
   23762:	603a      	str	r2, [r7, #0]
   23764:	1dfb      	adds	r3, r7, #7
   23766:	1c02      	adds	r2, r0, #0
   23768:	701a      	strb	r2, [r3, #0]
   2376a:	1d3b      	adds	r3, r7, #4
   2376c:	1c0a      	adds	r2, r1, #0
   2376e:	801a      	strh	r2, [r3, #0]


}
   23770:	46c0      	nop			; (mov r8, r8)
   23772:	46bd      	mov	sp, r7
   23774:	b002      	add	sp, #8
   23776:	bd80      	pop	{r7, pc}

00023778 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   23778:	b590      	push	{r4, r7, lr}
   2377a:	b083      	sub	sp, #12
   2377c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2377e:	1dfb      	adds	r3, r7, #7
   23780:	2200      	movs	r2, #0
   23782:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   23784:	4b16      	ldr	r3, [pc, #88]	; (237e0 <hif_chip_wake+0x68>)
   23786:	789b      	ldrb	r3, [r3, #2]
   23788:	b2db      	uxtb	r3, r3
   2378a:	2b00      	cmp	r3, #0
   2378c:	d003      	beq.n	23796 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   2378e:	1dfb      	adds	r3, r7, #7
   23790:	781b      	ldrb	r3, [r3, #0]
   23792:	b25b      	sxtb	r3, r3
   23794:	e01f      	b.n	237d6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   23796:	4b12      	ldr	r3, [pc, #72]	; (237e0 <hif_chip_wake+0x68>)
   23798:	785b      	ldrb	r3, [r3, #1]
   2379a:	b2db      	uxtb	r3, r3
   2379c:	2b00      	cmp	r3, #0
   2379e:	d10e      	bne.n	237be <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   237a0:	4b0f      	ldr	r3, [pc, #60]	; (237e0 <hif_chip_wake+0x68>)
   237a2:	781b      	ldrb	r3, [r3, #0]
   237a4:	b2db      	uxtb	r3, r3
   237a6:	2b00      	cmp	r3, #0
   237a8:	d009      	beq.n	237be <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   237aa:	1dfc      	adds	r4, r7, #7
   237ac:	4b0d      	ldr	r3, [pc, #52]	; (237e4 <hif_chip_wake+0x6c>)
   237ae:	4798      	blx	r3
   237b0:	0003      	movs	r3, r0
   237b2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   237b4:	1dfb      	adds	r3, r7, #7
   237b6:	781b      	ldrb	r3, [r3, #0]
   237b8:	b25b      	sxtb	r3, r3
   237ba:	2b00      	cmp	r3, #0
   237bc:	d107      	bne.n	237ce <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   237be:	4b08      	ldr	r3, [pc, #32]	; (237e0 <hif_chip_wake+0x68>)
   237c0:	785b      	ldrb	r3, [r3, #1]
   237c2:	b2db      	uxtb	r3, r3
   237c4:	3301      	adds	r3, #1
   237c6:	b2da      	uxtb	r2, r3
   237c8:	4b05      	ldr	r3, [pc, #20]	; (237e0 <hif_chip_wake+0x68>)
   237ca:	705a      	strb	r2, [r3, #1]
   237cc:	e000      	b.n	237d0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   237ce:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   237d0:	1dfb      	adds	r3, r7, #7
   237d2:	781b      	ldrb	r3, [r3, #0]
   237d4:	b25b      	sxtb	r3, r3
}
   237d6:	0018      	movs	r0, r3
   237d8:	46bd      	mov	sp, r7
   237da:	b003      	add	sp, #12
   237dc:	bd90      	pop	{r4, r7, pc}
   237de:	46c0      	nop			; (mov r8, r8)
   237e0:	20005a5c 	.word	0x20005a5c
   237e4:	000251b1 	.word	0x000251b1

000237e8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   237e8:	b580      	push	{r7, lr}
   237ea:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   237ec:	4b07      	ldr	r3, [pc, #28]	; (2380c <hif_chip_sleep_sc+0x24>)
   237ee:	785b      	ldrb	r3, [r3, #1]
   237f0:	b2db      	uxtb	r3, r3
   237f2:	2b00      	cmp	r3, #0
   237f4:	d006      	beq.n	23804 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   237f6:	4b05      	ldr	r3, [pc, #20]	; (2380c <hif_chip_sleep_sc+0x24>)
   237f8:	785b      	ldrb	r3, [r3, #1]
   237fa:	b2db      	uxtb	r3, r3
   237fc:	3b01      	subs	r3, #1
   237fe:	b2da      	uxtb	r2, r3
   23800:	4b02      	ldr	r3, [pc, #8]	; (2380c <hif_chip_sleep_sc+0x24>)
   23802:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   23804:	2300      	movs	r3, #0
}
   23806:	0018      	movs	r0, r3
   23808:	46bd      	mov	sp, r7
   2380a:	bd80      	pop	{r7, pc}
   2380c:	20005a5c 	.word	0x20005a5c

00023810 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   23810:	b590      	push	{r4, r7, lr}
   23812:	b083      	sub	sp, #12
   23814:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23816:	1dfb      	adds	r3, r7, #7
   23818:	2200      	movs	r2, #0
   2381a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   2381c:	4b10      	ldr	r3, [pc, #64]	; (23860 <hif_chip_sleep+0x50>)
   2381e:	785b      	ldrb	r3, [r3, #1]
   23820:	b2db      	uxtb	r3, r3
   23822:	2b00      	cmp	r3, #0
   23824:	d006      	beq.n	23834 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   23826:	4b0e      	ldr	r3, [pc, #56]	; (23860 <hif_chip_sleep+0x50>)
   23828:	785b      	ldrb	r3, [r3, #1]
   2382a:	b2db      	uxtb	r3, r3
   2382c:	3b01      	subs	r3, #1
   2382e:	b2da      	uxtb	r2, r3
   23830:	4b0b      	ldr	r3, [pc, #44]	; (23860 <hif_chip_sleep+0x50>)
   23832:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   23834:	4b0a      	ldr	r3, [pc, #40]	; (23860 <hif_chip_sleep+0x50>)
   23836:	785b      	ldrb	r3, [r3, #1]
   23838:	b2db      	uxtb	r3, r3
   2383a:	2b00      	cmp	r3, #0
   2383c:	d109      	bne.n	23852 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   2383e:	4b08      	ldr	r3, [pc, #32]	; (23860 <hif_chip_sleep+0x50>)
   23840:	781b      	ldrb	r3, [r3, #0]
   23842:	b2db      	uxtb	r3, r3
   23844:	2b00      	cmp	r3, #0
   23846:	d004      	beq.n	23852 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   23848:	1dfc      	adds	r4, r7, #7
   2384a:	4b06      	ldr	r3, [pc, #24]	; (23864 <hif_chip_sleep+0x54>)
   2384c:	4798      	blx	r3
   2384e:	0003      	movs	r3, r0
   23850:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   23852:	1dfb      	adds	r3, r7, #7
   23854:	781b      	ldrb	r3, [r3, #0]
   23856:	b25b      	sxtb	r3, r3
}
   23858:	0018      	movs	r0, r3
   2385a:	46bd      	mov	sp, r7
   2385c:	b003      	add	sp, #12
   2385e:	bd90      	pop	{r4, r7, pc}
   23860:	20005a5c 	.word	0x20005a5c
   23864:	000250d9 	.word	0x000250d9

00023868 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   23868:	b580      	push	{r7, lr}
   2386a:	b082      	sub	sp, #8
   2386c:	af00      	add	r7, sp, #0
   2386e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   23870:	4b09      	ldr	r3, [pc, #36]	; (23898 <hif_init+0x30>)
   23872:	222c      	movs	r2, #44	; 0x2c
   23874:	2100      	movs	r1, #0
   23876:	0018      	movs	r0, r3
   23878:	4b08      	ldr	r3, [pc, #32]	; (2389c <hif_init+0x34>)
   2387a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   2387c:	4b08      	ldr	r3, [pc, #32]	; (238a0 <hif_init+0x38>)
   2387e:	0018      	movs	r0, r3
   23880:	4b08      	ldr	r3, [pc, #32]	; (238a4 <hif_init+0x3c>)
   23882:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   23884:	4b08      	ldr	r3, [pc, #32]	; (238a8 <hif_init+0x40>)
   23886:	0019      	movs	r1, r3
   23888:	2003      	movs	r0, #3
   2388a:	4b08      	ldr	r3, [pc, #32]	; (238ac <hif_init+0x44>)
   2388c:	4798      	blx	r3
	return M2M_SUCCESS;
   2388e:	2300      	movs	r3, #0
}
   23890:	0018      	movs	r0, r3
   23892:	46bd      	mov	sp, r7
   23894:	b002      	add	sp, #8
   23896:	bd80      	pop	{r7, pc}
   23898:	20005a5c 	.word	0x20005a5c
   2389c:	00023651 	.word	0x00023651
   238a0:	000236cd 	.word	0x000236cd
   238a4:	00022d8d 	.word	0x00022d8d
   238a8:	0002375d 	.word	0x0002375d
   238ac:	0002434d 	.word	0x0002434d

000238b0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   238b0:	b590      	push	{r4, r7, lr}
   238b2:	b089      	sub	sp, #36	; 0x24
   238b4:	af00      	add	r7, sp, #0
   238b6:	0004      	movs	r4, r0
   238b8:	0008      	movs	r0, r1
   238ba:	603a      	str	r2, [r7, #0]
   238bc:	0019      	movs	r1, r3
   238be:	1dfb      	adds	r3, r7, #7
   238c0:	1c22      	adds	r2, r4, #0
   238c2:	701a      	strb	r2, [r3, #0]
   238c4:	1dbb      	adds	r3, r7, #6
   238c6:	1c02      	adds	r2, r0, #0
   238c8:	701a      	strb	r2, [r3, #0]
   238ca:	1d3b      	adds	r3, r7, #4
   238cc:	1c0a      	adds	r2, r1, #0
   238ce:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   238d0:	231f      	movs	r3, #31
   238d2:	18fb      	adds	r3, r7, r3
   238d4:	22ff      	movs	r2, #255	; 0xff
   238d6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   238d8:	1dbb      	adds	r3, r7, #6
   238da:	781b      	ldrb	r3, [r3, #0]
   238dc:	227f      	movs	r2, #127	; 0x7f
   238de:	4013      	ands	r3, r2
   238e0:	b2da      	uxtb	r2, r3
   238e2:	2318      	movs	r3, #24
   238e4:	18fb      	adds	r3, r7, r3
   238e6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   238e8:	2318      	movs	r3, #24
   238ea:	18fb      	adds	r3, r7, r3
   238ec:	1dfa      	adds	r2, r7, #7
   238ee:	7812      	ldrb	r2, [r2, #0]
   238f0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   238f2:	2318      	movs	r3, #24
   238f4:	18fb      	adds	r3, r7, r3
   238f6:	2208      	movs	r2, #8
   238f8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   238fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   238fc:	2b00      	cmp	r3, #0
   238fe:	d011      	beq.n	23924 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   23900:	2318      	movs	r3, #24
   23902:	18fb      	adds	r3, r7, r3
   23904:	885b      	ldrh	r3, [r3, #2]
   23906:	b29a      	uxth	r2, r3
   23908:	2338      	movs	r3, #56	; 0x38
   2390a:	18f9      	adds	r1, r7, r3
   2390c:	2334      	movs	r3, #52	; 0x34
   2390e:	18fb      	adds	r3, r7, r3
   23910:	8809      	ldrh	r1, [r1, #0]
   23912:	881b      	ldrh	r3, [r3, #0]
   23914:	18cb      	adds	r3, r1, r3
   23916:	b29b      	uxth	r3, r3
   23918:	18d3      	adds	r3, r2, r3
   2391a:	b29a      	uxth	r2, r3
   2391c:	2318      	movs	r3, #24
   2391e:	18fb      	adds	r3, r7, r3
   23920:	805a      	strh	r2, [r3, #2]
   23922:	e00a      	b.n	2393a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   23924:	2318      	movs	r3, #24
   23926:	18fb      	adds	r3, r7, r3
   23928:	885b      	ldrh	r3, [r3, #2]
   2392a:	b29a      	uxth	r2, r3
   2392c:	1d3b      	adds	r3, r7, #4
   2392e:	881b      	ldrh	r3, [r3, #0]
   23930:	18d3      	adds	r3, r2, r3
   23932:	b29a      	uxth	r2, r3
   23934:	2318      	movs	r3, #24
   23936:	18fb      	adds	r3, r7, r3
   23938:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   2393a:	231f      	movs	r3, #31
   2393c:	18fc      	adds	r4, r7, r3
   2393e:	4bb2      	ldr	r3, [pc, #712]	; (23c08 <hif_send+0x358>)
   23940:	4798      	blx	r3
   23942:	0003      	movs	r3, r0
   23944:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   23946:	231f      	movs	r3, #31
   23948:	18fb      	adds	r3, r7, r3
   2394a:	781b      	ldrb	r3, [r3, #0]
   2394c:	b25b      	sxtb	r3, r3
   2394e:	2b00      	cmp	r3, #0
   23950:	d000      	beq.n	23954 <hif_send+0xa4>
   23952:	e129      	b.n	23ba8 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   23954:	2300      	movs	r3, #0
   23956:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   23958:	230e      	movs	r3, #14
   2395a:	18fb      	adds	r3, r7, r3
   2395c:	2200      	movs	r2, #0
   2395e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   23960:	2300      	movs	r3, #0
   23962:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   23964:	1dfb      	adds	r3, r7, #7
   23966:	781a      	ldrb	r2, [r3, #0]
   23968:	697b      	ldr	r3, [r7, #20]
   2396a:	4313      	orrs	r3, r2
   2396c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   2396e:	1dbb      	adds	r3, r7, #6
   23970:	781b      	ldrb	r3, [r3, #0]
   23972:	021a      	lsls	r2, r3, #8
   23974:	697b      	ldr	r3, [r7, #20]
   23976:	4313      	orrs	r3, r2
   23978:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   2397a:	2318      	movs	r3, #24
   2397c:	18fb      	adds	r3, r7, r3
   2397e:	885b      	ldrh	r3, [r3, #2]
   23980:	b29b      	uxth	r3, r3
   23982:	041a      	lsls	r2, r3, #16
   23984:	697b      	ldr	r3, [r7, #20]
   23986:	4313      	orrs	r3, r2
   23988:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   2398a:	697b      	ldr	r3, [r7, #20]
   2398c:	221f      	movs	r2, #31
   2398e:	18bc      	adds	r4, r7, r2
   23990:	4a9e      	ldr	r2, [pc, #632]	; (23c0c <hif_send+0x35c>)
   23992:	0019      	movs	r1, r3
   23994:	0010      	movs	r0, r2
   23996:	4b9e      	ldr	r3, [pc, #632]	; (23c10 <hif_send+0x360>)
   23998:	4798      	blx	r3
   2399a:	0003      	movs	r3, r0
   2399c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2399e:	231f      	movs	r3, #31
   239a0:	18fb      	adds	r3, r7, r3
   239a2:	781b      	ldrb	r3, [r3, #0]
   239a4:	b25b      	sxtb	r3, r3
   239a6:	2b00      	cmp	r3, #0
   239a8:	d000      	beq.n	239ac <hif_send+0xfc>
   239aa:	e119      	b.n	23be0 <hif_send+0x330>

		reg = 0UL;
   239ac:	2300      	movs	r3, #0
   239ae:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   239b0:	697b      	ldr	r3, [r7, #20]
   239b2:	2202      	movs	r2, #2
   239b4:	4313      	orrs	r3, r2
   239b6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   239b8:	697b      	ldr	r3, [r7, #20]
   239ba:	221f      	movs	r2, #31
   239bc:	18bc      	adds	r4, r7, r2
   239be:	4a95      	ldr	r2, [pc, #596]	; (23c14 <hif_send+0x364>)
   239c0:	0019      	movs	r1, r3
   239c2:	0010      	movs	r0, r2
   239c4:	4b92      	ldr	r3, [pc, #584]	; (23c10 <hif_send+0x360>)
   239c6:	4798      	blx	r3
   239c8:	0003      	movs	r3, r0
   239ca:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   239cc:	231f      	movs	r3, #31
   239ce:	18fb      	adds	r3, r7, r3
   239d0:	781b      	ldrb	r3, [r3, #0]
   239d2:	b25b      	sxtb	r3, r3
   239d4:	2b00      	cmp	r3, #0
   239d6:	d000      	beq.n	239da <hif_send+0x12a>
   239d8:	e104      	b.n	23be4 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   239da:	2300      	movs	r3, #0
   239dc:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   239de:	230e      	movs	r3, #14
   239e0:	18fb      	adds	r3, r7, r3
   239e2:	2200      	movs	r2, #0
   239e4:	801a      	strh	r2, [r3, #0]
   239e6:	e050      	b.n	23a8a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   239e8:	231f      	movs	r3, #31
   239ea:	18fc      	adds	r4, r7, r3
   239ec:	2314      	movs	r3, #20
   239ee:	18fb      	adds	r3, r7, r3
   239f0:	4a88      	ldr	r2, [pc, #544]	; (23c14 <hif_send+0x364>)
   239f2:	0019      	movs	r1, r3
   239f4:	0010      	movs	r0, r2
   239f6:	4b88      	ldr	r3, [pc, #544]	; (23c18 <hif_send+0x368>)
   239f8:	4798      	blx	r3
   239fa:	0003      	movs	r3, r0
   239fc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   239fe:	231f      	movs	r3, #31
   23a00:	18fb      	adds	r3, r7, r3
   23a02:	781b      	ldrb	r3, [r3, #0]
   23a04:	b25b      	sxtb	r3, r3
   23a06:	2b00      	cmp	r3, #0
   23a08:	d147      	bne.n	23a9a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   23a0a:	230e      	movs	r3, #14
   23a0c:	18fb      	adds	r3, r7, r3
   23a0e:	881b      	ldrh	r3, [r3, #0]
   23a10:	b29a      	uxth	r2, r3
   23a12:	23f4      	movs	r3, #244	; 0xf4
   23a14:	33ff      	adds	r3, #255	; 0xff
   23a16:	429a      	cmp	r2, r3
   23a18:	d916      	bls.n	23a48 <hif_send+0x198>
				if(cnt < 501) {
   23a1a:	230e      	movs	r3, #14
   23a1c:	18fb      	adds	r3, r7, r3
   23a1e:	881b      	ldrh	r3, [r3, #0]
   23a20:	b29a      	uxth	r2, r3
   23a22:	23fa      	movs	r3, #250	; 0xfa
   23a24:	005b      	lsls	r3, r3, #1
   23a26:	429a      	cmp	r2, r3
   23a28:	d80b      	bhi.n	23a42 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   23a2a:	4b7c      	ldr	r3, [pc, #496]	; (23c1c <hif_send+0x36c>)
   23a2c:	0018      	movs	r0, r3
   23a2e:	4b7c      	ldr	r3, [pc, #496]	; (23c20 <hif_send+0x370>)
   23a30:	4798      	blx	r3
   23a32:	4b7c      	ldr	r3, [pc, #496]	; (23c24 <hif_send+0x374>)
   23a34:	0018      	movs	r0, r3
   23a36:	4b7a      	ldr	r3, [pc, #488]	; (23c20 <hif_send+0x370>)
   23a38:	4798      	blx	r3
   23a3a:	4b7b      	ldr	r3, [pc, #492]	; (23c28 <hif_send+0x378>)
   23a3c:	0018      	movs	r0, r3
   23a3e:	4b78      	ldr	r3, [pc, #480]	; (23c20 <hif_send+0x370>)
   23a40:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   23a42:	2001      	movs	r0, #1
   23a44:	4b79      	ldr	r3, [pc, #484]	; (23c2c <hif_send+0x37c>)
   23a46:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   23a48:	697b      	ldr	r3, [r7, #20]
   23a4a:	2202      	movs	r2, #2
   23a4c:	4013      	ands	r3, r2
   23a4e:	d113      	bne.n	23a78 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   23a50:	231f      	movs	r3, #31
   23a52:	18fc      	adds	r4, r7, r3
   23a54:	2310      	movs	r3, #16
   23a56:	18fb      	adds	r3, r7, r3
   23a58:	4a75      	ldr	r2, [pc, #468]	; (23c30 <hif_send+0x380>)
   23a5a:	0019      	movs	r1, r3
   23a5c:	0010      	movs	r0, r2
   23a5e:	4b6e      	ldr	r3, [pc, #440]	; (23c18 <hif_send+0x368>)
   23a60:	4798      	blx	r3
   23a62:	0003      	movs	r3, r0
   23a64:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   23a66:	231f      	movs	r3, #31
   23a68:	18fb      	adds	r3, r7, r3
   23a6a:	781b      	ldrb	r3, [r3, #0]
   23a6c:	b25b      	sxtb	r3, r3
   23a6e:	2b00      	cmp	r3, #0
   23a70:	d015      	beq.n	23a9e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   23a72:	2300      	movs	r3, #0
   23a74:	613b      	str	r3, [r7, #16]
					goto ERR1;
   23a76:	e0bc      	b.n	23bf2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   23a78:	230e      	movs	r3, #14
   23a7a:	18fb      	adds	r3, r7, r3
   23a7c:	881b      	ldrh	r3, [r3, #0]
   23a7e:	b29b      	uxth	r3, r3
   23a80:	3301      	adds	r3, #1
   23a82:	b29a      	uxth	r2, r3
   23a84:	230e      	movs	r3, #14
   23a86:	18fb      	adds	r3, r7, r3
   23a88:	801a      	strh	r2, [r3, #0]
   23a8a:	230e      	movs	r3, #14
   23a8c:	18fb      	adds	r3, r7, r3
   23a8e:	881b      	ldrh	r3, [r3, #0]
   23a90:	b29b      	uxth	r3, r3
   23a92:	4a68      	ldr	r2, [pc, #416]	; (23c34 <hif_send+0x384>)
   23a94:	4293      	cmp	r3, r2
   23a96:	d9a7      	bls.n	239e8 <hif_send+0x138>
   23a98:	e002      	b.n	23aa0 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   23a9a:	46c0      	nop			; (mov r8, r8)
   23a9c:	e000      	b.n	23aa0 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   23a9e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   23aa0:	693b      	ldr	r3, [r7, #16]
   23aa2:	2b00      	cmp	r3, #0
   23aa4:	d100      	bne.n	23aa8 <hif_send+0x1f8>
   23aa6:	e074      	b.n	23b92 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   23aa8:	693b      	ldr	r3, [r7, #16]
   23aaa:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   23aac:	2318      	movs	r3, #24
   23aae:	18fb      	adds	r3, r7, r3
   23ab0:	885b      	ldrh	r3, [r3, #2]
   23ab2:	b29a      	uxth	r2, r3
   23ab4:	2318      	movs	r3, #24
   23ab6:	18fb      	adds	r3, r7, r3
   23ab8:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   23aba:	68bb      	ldr	r3, [r7, #8]
   23abc:	221f      	movs	r2, #31
   23abe:	18bc      	adds	r4, r7, r2
   23ac0:	2218      	movs	r2, #24
   23ac2:	18b9      	adds	r1, r7, r2
   23ac4:	2208      	movs	r2, #8
   23ac6:	0018      	movs	r0, r3
   23ac8:	4b5b      	ldr	r3, [pc, #364]	; (23c38 <hif_send+0x388>)
   23aca:	4798      	blx	r3
   23acc:	0003      	movs	r3, r0
   23ace:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   23ad0:	231f      	movs	r3, #31
   23ad2:	18fb      	adds	r3, r7, r3
   23ad4:	781b      	ldrb	r3, [r3, #0]
   23ad6:	b25b      	sxtb	r3, r3
   23ad8:	2b00      	cmp	r3, #0
   23ada:	d000      	beq.n	23ade <hif_send+0x22e>
   23adc:	e084      	b.n	23be8 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   23ade:	68bb      	ldr	r3, [r7, #8]
   23ae0:	3308      	adds	r3, #8
   23ae2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   23ae4:	683b      	ldr	r3, [r7, #0]
   23ae6:	2b00      	cmp	r3, #0
   23ae8:	d016      	beq.n	23b18 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   23aea:	68b8      	ldr	r0, [r7, #8]
   23aec:	1d3b      	adds	r3, r7, #4
   23aee:	881a      	ldrh	r2, [r3, #0]
   23af0:	231f      	movs	r3, #31
   23af2:	18fc      	adds	r4, r7, r3
   23af4:	683b      	ldr	r3, [r7, #0]
   23af6:	0019      	movs	r1, r3
   23af8:	4b4f      	ldr	r3, [pc, #316]	; (23c38 <hif_send+0x388>)
   23afa:	4798      	blx	r3
   23afc:	0003      	movs	r3, r0
   23afe:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   23b00:	231f      	movs	r3, #31
   23b02:	18fb      	adds	r3, r7, r3
   23b04:	781b      	ldrb	r3, [r3, #0]
   23b06:	b25b      	sxtb	r3, r3
   23b08:	2b00      	cmp	r3, #0
   23b0a:	d000      	beq.n	23b0e <hif_send+0x25e>
   23b0c:	e06e      	b.n	23bec <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   23b0e:	1d3b      	adds	r3, r7, #4
   23b10:	881a      	ldrh	r2, [r3, #0]
   23b12:	68bb      	ldr	r3, [r7, #8]
   23b14:	18d3      	adds	r3, r2, r3
   23b16:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   23b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23b1a:	2b00      	cmp	r3, #0
   23b1c:	d021      	beq.n	23b62 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   23b1e:	2338      	movs	r3, #56	; 0x38
   23b20:	18fb      	adds	r3, r7, r3
   23b22:	881a      	ldrh	r2, [r3, #0]
   23b24:	1d3b      	adds	r3, r7, #4
   23b26:	881b      	ldrh	r3, [r3, #0]
   23b28:	1ad3      	subs	r3, r2, r3
   23b2a:	001a      	movs	r2, r3
   23b2c:	68bb      	ldr	r3, [r7, #8]
   23b2e:	18d3      	adds	r3, r2, r3
   23b30:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   23b32:	68b8      	ldr	r0, [r7, #8]
   23b34:	2334      	movs	r3, #52	; 0x34
   23b36:	18fb      	adds	r3, r7, r3
   23b38:	881a      	ldrh	r2, [r3, #0]
   23b3a:	231f      	movs	r3, #31
   23b3c:	18fc      	adds	r4, r7, r3
   23b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23b40:	0019      	movs	r1, r3
   23b42:	4b3d      	ldr	r3, [pc, #244]	; (23c38 <hif_send+0x388>)
   23b44:	4798      	blx	r3
   23b46:	0003      	movs	r3, r0
   23b48:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   23b4a:	231f      	movs	r3, #31
   23b4c:	18fb      	adds	r3, r7, r3
   23b4e:	781b      	ldrb	r3, [r3, #0]
   23b50:	b25b      	sxtb	r3, r3
   23b52:	2b00      	cmp	r3, #0
   23b54:	d14c      	bne.n	23bf0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   23b56:	2334      	movs	r3, #52	; 0x34
   23b58:	18fb      	adds	r3, r7, r3
   23b5a:	881a      	ldrh	r2, [r3, #0]
   23b5c:	68bb      	ldr	r3, [r7, #8]
   23b5e:	18d3      	adds	r3, r2, r3
   23b60:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   23b62:	693b      	ldr	r3, [r7, #16]
   23b64:	009b      	lsls	r3, r3, #2
   23b66:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   23b68:	697b      	ldr	r3, [r7, #20]
   23b6a:	2202      	movs	r2, #2
   23b6c:	4313      	orrs	r3, r2
   23b6e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   23b70:	697b      	ldr	r3, [r7, #20]
   23b72:	221f      	movs	r2, #31
   23b74:	18bc      	adds	r4, r7, r2
   23b76:	4a31      	ldr	r2, [pc, #196]	; (23c3c <hif_send+0x38c>)
   23b78:	0019      	movs	r1, r3
   23b7a:	0010      	movs	r0, r2
   23b7c:	4b24      	ldr	r3, [pc, #144]	; (23c10 <hif_send+0x360>)
   23b7e:	4798      	blx	r3
   23b80:	0003      	movs	r3, r0
   23b82:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   23b84:	231f      	movs	r3, #31
   23b86:	18fb      	adds	r3, r7, r3
   23b88:	781b      	ldrb	r3, [r3, #0]
   23b8a:	b25b      	sxtb	r3, r3
   23b8c:	2b00      	cmp	r3, #0
   23b8e:	d01c      	beq.n	23bca <hif_send+0x31a>
   23b90:	e02f      	b.n	23bf2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   23b92:	231f      	movs	r3, #31
   23b94:	18fc      	adds	r4, r7, r3
   23b96:	4b2a      	ldr	r3, [pc, #168]	; (23c40 <hif_send+0x390>)
   23b98:	4798      	blx	r3
   23b9a:	0003      	movs	r3, r0
   23b9c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   23b9e:	231f      	movs	r3, #31
   23ba0:	18fb      	adds	r3, r7, r3
   23ba2:	22fd      	movs	r2, #253	; 0xfd
   23ba4:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   23ba6:	e026      	b.n	23bf6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   23ba8:	2398      	movs	r3, #152	; 0x98
   23baa:	33ff      	adds	r3, #255	; 0xff
   23bac:	001a      	movs	r2, r3
   23bae:	4925      	ldr	r1, [pc, #148]	; (23c44 <hif_send+0x394>)
   23bb0:	4b25      	ldr	r3, [pc, #148]	; (23c48 <hif_send+0x398>)
   23bb2:	0018      	movs	r0, r3
   23bb4:	4b1a      	ldr	r3, [pc, #104]	; (23c20 <hif_send+0x370>)
   23bb6:	4798      	blx	r3
   23bb8:	4b24      	ldr	r3, [pc, #144]	; (23c4c <hif_send+0x39c>)
   23bba:	0018      	movs	r0, r3
   23bbc:	4b18      	ldr	r3, [pc, #96]	; (23c20 <hif_send+0x370>)
   23bbe:	4798      	blx	r3
   23bc0:	4b19      	ldr	r3, [pc, #100]	; (23c28 <hif_send+0x378>)
   23bc2:	0018      	movs	r0, r3
   23bc4:	4b16      	ldr	r3, [pc, #88]	; (23c20 <hif_send+0x370>)
   23bc6:	4798      	blx	r3
		goto ERR2;
   23bc8:	e015      	b.n	23bf6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   23bca:	231f      	movs	r3, #31
   23bcc:	18fc      	adds	r4, r7, r3
   23bce:	4b1c      	ldr	r3, [pc, #112]	; (23c40 <hif_send+0x390>)
   23bd0:	4798      	blx	r3
   23bd2:	0003      	movs	r3, r0
   23bd4:	7023      	strb	r3, [r4, #0]
	return ret;
   23bd6:	231f      	movs	r3, #31
   23bd8:	18fb      	adds	r3, r7, r3
   23bda:	781b      	ldrb	r3, [r3, #0]
   23bdc:	b25b      	sxtb	r3, r3
   23bde:	e00e      	b.n	23bfe <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   23be0:	46c0      	nop			; (mov r8, r8)
   23be2:	e006      	b.n	23bf2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   23be4:	46c0      	nop			; (mov r8, r8)
   23be6:	e004      	b.n	23bf2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   23be8:	46c0      	nop			; (mov r8, r8)
   23bea:	e002      	b.n	23bf2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   23bec:	46c0      	nop			; (mov r8, r8)
   23bee:	e000      	b.n	23bf2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   23bf0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   23bf2:	4b17      	ldr	r3, [pc, #92]	; (23c50 <hif_send+0x3a0>)
   23bf4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   23bf6:	231f      	movs	r3, #31
   23bf8:	18fb      	adds	r3, r7, r3
   23bfa:	781b      	ldrb	r3, [r3, #0]
   23bfc:	b25b      	sxtb	r3, r3
}
   23bfe:	0018      	movs	r0, r3
   23c00:	46bd      	mov	sp, r7
   23c02:	b009      	add	sp, #36	; 0x24
   23c04:	bd90      	pop	{r4, r7, pc}
   23c06:	46c0      	nop			; (mov r8, r8)
   23c08:	00023779 	.word	0x00023779
   23c0c:	0000108c 	.word	0x0000108c
   23c10:	00025705 	.word	0x00025705
   23c14:	00001078 	.word	0x00001078
   23c18:	000256e1 	.word	0x000256e1
   23c1c:	0003b4a4 	.word	0x0003b4a4
   23c20:	00020889 	.word	0x00020889
   23c24:	0003b4b0 	.word	0x0003b4b0
   23c28:	0003b4c4 	.word	0x0003b4c4
   23c2c:	00022d71 	.word	0x00022d71
   23c30:	00150400 	.word	0x00150400
   23c34:	000003e7 	.word	0x000003e7
   23c38:	0002584d 	.word	0x0002584d
   23c3c:	0000106c 	.word	0x0000106c
   23c40:	00023811 	.word	0x00023811
   23c44:	0003b7cc 	.word	0x0003b7cc
   23c48:	0003b4c8 	.word	0x0003b4c8
   23c4c:	0003b4dc 	.word	0x0003b4dc
   23c50:	000237e9 	.word	0x000237e9

00023c54 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   23c54:	b590      	push	{r4, r7, lr}
   23c56:	b087      	sub	sp, #28
   23c58:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   23c5a:	230f      	movs	r3, #15
   23c5c:	18fb      	adds	r3, r7, r3
   23c5e:	2200      	movs	r2, #0
   23c60:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   23c62:	230f      	movs	r3, #15
   23c64:	18fc      	adds	r4, r7, r3
   23c66:	2308      	movs	r3, #8
   23c68:	18fb      	adds	r3, r7, r3
   23c6a:	4adc      	ldr	r2, [pc, #880]	; (23fdc <hif_isr+0x388>)
   23c6c:	0019      	movs	r1, r3
   23c6e:	0010      	movs	r0, r2
   23c70:	4bdb      	ldr	r3, [pc, #876]	; (23fe0 <hif_isr+0x38c>)
   23c72:	4798      	blx	r3
   23c74:	0003      	movs	r3, r0
   23c76:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   23c78:	230f      	movs	r3, #15
   23c7a:	18fb      	adds	r3, r7, r3
   23c7c:	781b      	ldrb	r3, [r3, #0]
   23c7e:	b25b      	sxtb	r3, r3
   23c80:	2b00      	cmp	r3, #0
   23c82:	d000      	beq.n	23c86 <hif_isr+0x32>
   23c84:	e21e      	b.n	240c4 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   23c86:	68bb      	ldr	r3, [r7, #8]
   23c88:	2201      	movs	r2, #1
   23c8a:	4013      	ands	r3, r2
   23c8c:	d100      	bne.n	23c90 <hif_isr+0x3c>
   23c8e:	e204      	b.n	2409a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   23c90:	2000      	movs	r0, #0
   23c92:	4bd4      	ldr	r3, [pc, #848]	; (23fe4 <hif_isr+0x390>)
   23c94:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   23c96:	68bb      	ldr	r3, [r7, #8]
   23c98:	2201      	movs	r2, #1
   23c9a:	4393      	bics	r3, r2
   23c9c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   23c9e:	68bb      	ldr	r3, [r7, #8]
   23ca0:	220f      	movs	r2, #15
   23ca2:	18bc      	adds	r4, r7, r2
   23ca4:	4acd      	ldr	r2, [pc, #820]	; (23fdc <hif_isr+0x388>)
   23ca6:	0019      	movs	r1, r3
   23ca8:	0010      	movs	r0, r2
   23caa:	4bcf      	ldr	r3, [pc, #828]	; (23fe8 <hif_isr+0x394>)
   23cac:	4798      	blx	r3
   23cae:	0003      	movs	r3, r0
   23cb0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   23cb2:	230f      	movs	r3, #15
   23cb4:	18fb      	adds	r3, r7, r3
   23cb6:	781b      	ldrb	r3, [r3, #0]
   23cb8:	b25b      	sxtb	r3, r3
   23cba:	2b00      	cmp	r3, #0
   23cbc:	d000      	beq.n	23cc0 <hif_isr+0x6c>
   23cbe:	e210      	b.n	240e2 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   23cc0:	4bca      	ldr	r3, [pc, #808]	; (23fec <hif_isr+0x398>)
   23cc2:	2201      	movs	r2, #1
   23cc4:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   23cc6:	68bb      	ldr	r3, [r7, #8]
   23cc8:	089b      	lsrs	r3, r3, #2
   23cca:	b29a      	uxth	r2, r3
   23ccc:	230c      	movs	r3, #12
   23cce:	18fb      	adds	r3, r7, r3
   23cd0:	0512      	lsls	r2, r2, #20
   23cd2:	0d12      	lsrs	r2, r2, #20
   23cd4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   23cd6:	230c      	movs	r3, #12
   23cd8:	18fb      	adds	r3, r7, r3
   23cda:	881b      	ldrh	r3, [r3, #0]
   23cdc:	2b00      	cmp	r3, #0
   23cde:	d100      	bne.n	23ce2 <hif_isr+0x8e>
   23ce0:	e1c8      	b.n	24074 <hif_isr+0x420>
				uint32 address = 0;
   23ce2:	2300      	movs	r3, #0
   23ce4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   23ce6:	230f      	movs	r3, #15
   23ce8:	18fc      	adds	r4, r7, r3
   23cea:	003b      	movs	r3, r7
   23cec:	4ac0      	ldr	r2, [pc, #768]	; (23ff0 <hif_isr+0x39c>)
   23cee:	0019      	movs	r1, r3
   23cf0:	0010      	movs	r0, r2
   23cf2:	4bbb      	ldr	r3, [pc, #748]	; (23fe0 <hif_isr+0x38c>)
   23cf4:	4798      	blx	r3
   23cf6:	0003      	movs	r3, r0
   23cf8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   23cfa:	230f      	movs	r3, #15
   23cfc:	18fb      	adds	r3, r7, r3
   23cfe:	781b      	ldrb	r3, [r3, #0]
   23d00:	b25b      	sxtb	r3, r3
   23d02:	2b00      	cmp	r3, #0
   23d04:	d012      	beq.n	23d2c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   23d06:	23e4      	movs	r3, #228	; 0xe4
   23d08:	005a      	lsls	r2, r3, #1
   23d0a:	49ba      	ldr	r1, [pc, #744]	; (23ff4 <hif_isr+0x3a0>)
   23d0c:	4bba      	ldr	r3, [pc, #744]	; (23ff8 <hif_isr+0x3a4>)
   23d0e:	0018      	movs	r0, r3
   23d10:	4bba      	ldr	r3, [pc, #744]	; (23ffc <hif_isr+0x3a8>)
   23d12:	4798      	blx	r3
   23d14:	4bba      	ldr	r3, [pc, #744]	; (24000 <hif_isr+0x3ac>)
   23d16:	0018      	movs	r0, r3
   23d18:	4bb8      	ldr	r3, [pc, #736]	; (23ffc <hif_isr+0x3a8>)
   23d1a:	4798      	blx	r3
   23d1c:	4bb9      	ldr	r3, [pc, #740]	; (24004 <hif_isr+0x3b0>)
   23d1e:	0018      	movs	r0, r3
   23d20:	4bb6      	ldr	r3, [pc, #728]	; (23ffc <hif_isr+0x3a8>)
   23d22:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   23d24:	2001      	movs	r0, #1
   23d26:	4baf      	ldr	r3, [pc, #700]	; (23fe4 <hif_isr+0x390>)
   23d28:	4798      	blx	r3
					goto ERR1;
   23d2a:	e1db      	b.n	240e4 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   23d2c:	683a      	ldr	r2, [r7, #0]
   23d2e:	4baf      	ldr	r3, [pc, #700]	; (23fec <hif_isr+0x398>)
   23d30:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   23d32:	230c      	movs	r3, #12
   23d34:	18fb      	adds	r3, r7, r3
   23d36:	881a      	ldrh	r2, [r3, #0]
   23d38:	4bac      	ldr	r3, [pc, #688]	; (23fec <hif_isr+0x398>)
   23d3a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   23d3c:	683b      	ldr	r3, [r7, #0]
   23d3e:	220f      	movs	r2, #15
   23d40:	18bc      	adds	r4, r7, r2
   23d42:	1d39      	adds	r1, r7, #4
   23d44:	2204      	movs	r2, #4
   23d46:	0018      	movs	r0, r3
   23d48:	4baf      	ldr	r3, [pc, #700]	; (24008 <hif_isr+0x3b4>)
   23d4a:	4798      	blx	r3
   23d4c:	0003      	movs	r3, r0
   23d4e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   23d50:	1d3b      	adds	r3, r7, #4
   23d52:	885b      	ldrh	r3, [r3, #2]
   23d54:	b29a      	uxth	r2, r3
   23d56:	1d3b      	adds	r3, r7, #4
   23d58:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   23d5a:	230f      	movs	r3, #15
   23d5c:	18fb      	adds	r3, r7, r3
   23d5e:	781b      	ldrb	r3, [r3, #0]
   23d60:	b25b      	sxtb	r3, r3
   23d62:	2b00      	cmp	r3, #0
   23d64:	d012      	beq.n	23d8c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   23d66:	23e9      	movs	r3, #233	; 0xe9
   23d68:	005a      	lsls	r2, r3, #1
   23d6a:	49a2      	ldr	r1, [pc, #648]	; (23ff4 <hif_isr+0x3a0>)
   23d6c:	4ba2      	ldr	r3, [pc, #648]	; (23ff8 <hif_isr+0x3a4>)
   23d6e:	0018      	movs	r0, r3
   23d70:	4ba2      	ldr	r3, [pc, #648]	; (23ffc <hif_isr+0x3a8>)
   23d72:	4798      	blx	r3
   23d74:	4ba5      	ldr	r3, [pc, #660]	; (2400c <hif_isr+0x3b8>)
   23d76:	0018      	movs	r0, r3
   23d78:	4ba0      	ldr	r3, [pc, #640]	; (23ffc <hif_isr+0x3a8>)
   23d7a:	4798      	blx	r3
   23d7c:	4ba1      	ldr	r3, [pc, #644]	; (24004 <hif_isr+0x3b0>)
   23d7e:	0018      	movs	r0, r3
   23d80:	4b9e      	ldr	r3, [pc, #632]	; (23ffc <hif_isr+0x3a8>)
   23d82:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   23d84:	2001      	movs	r0, #1
   23d86:	4b97      	ldr	r3, [pc, #604]	; (23fe4 <hif_isr+0x390>)
   23d88:	4798      	blx	r3
					goto ERR1;
   23d8a:	e1ab      	b.n	240e4 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   23d8c:	1d3b      	adds	r3, r7, #4
   23d8e:	885b      	ldrh	r3, [r3, #2]
   23d90:	b29b      	uxth	r3, r3
   23d92:	220c      	movs	r2, #12
   23d94:	18ba      	adds	r2, r7, r2
   23d96:	8812      	ldrh	r2, [r2, #0]
   23d98:	429a      	cmp	r2, r3
   23d9a:	d02f      	beq.n	23dfc <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   23d9c:	230c      	movs	r3, #12
   23d9e:	18fb      	adds	r3, r7, r3
   23da0:	881b      	ldrh	r3, [r3, #0]
   23da2:	1d3a      	adds	r2, r7, #4
   23da4:	8852      	ldrh	r2, [r2, #2]
   23da6:	b292      	uxth	r2, r2
   23da8:	1a9b      	subs	r3, r3, r2
   23daa:	2b04      	cmp	r3, #4
   23dac:	dd26      	ble.n	23dfc <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   23dae:	23dc      	movs	r3, #220	; 0xdc
   23db0:	33ff      	adds	r3, #255	; 0xff
   23db2:	001a      	movs	r2, r3
   23db4:	498f      	ldr	r1, [pc, #572]	; (23ff4 <hif_isr+0x3a0>)
   23db6:	4b90      	ldr	r3, [pc, #576]	; (23ff8 <hif_isr+0x3a4>)
   23db8:	0018      	movs	r0, r3
   23dba:	4b90      	ldr	r3, [pc, #576]	; (23ffc <hif_isr+0x3a8>)
   23dbc:	4798      	blx	r3
   23dbe:	230c      	movs	r3, #12
   23dc0:	18fb      	adds	r3, r7, r3
   23dc2:	8819      	ldrh	r1, [r3, #0]
   23dc4:	1d3b      	adds	r3, r7, #4
   23dc6:	885b      	ldrh	r3, [r3, #2]
   23dc8:	b29b      	uxth	r3, r3
   23dca:	001a      	movs	r2, r3
   23dcc:	1d3b      	adds	r3, r7, #4
   23dce:	781b      	ldrb	r3, [r3, #0]
   23dd0:	b2db      	uxtb	r3, r3
   23dd2:	001c      	movs	r4, r3
   23dd4:	1d3b      	adds	r3, r7, #4
   23dd6:	785b      	ldrb	r3, [r3, #1]
   23dd8:	b2db      	uxtb	r3, r3
   23dda:	488d      	ldr	r0, [pc, #564]	; (24010 <hif_isr+0x3bc>)
   23ddc:	9300      	str	r3, [sp, #0]
   23dde:	0023      	movs	r3, r4
   23de0:	4c86      	ldr	r4, [pc, #536]	; (23ffc <hif_isr+0x3a8>)
   23de2:	47a0      	blx	r4
   23de4:	4b87      	ldr	r3, [pc, #540]	; (24004 <hif_isr+0x3b0>)
   23de6:	0018      	movs	r0, r3
   23de8:	4b84      	ldr	r3, [pc, #528]	; (23ffc <hif_isr+0x3a8>)
   23dea:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   23dec:	2001      	movs	r0, #1
   23dee:	4b7d      	ldr	r3, [pc, #500]	; (23fe4 <hif_isr+0x390>)
   23df0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   23df2:	230f      	movs	r3, #15
   23df4:	18fb      	adds	r3, r7, r3
   23df6:	22fa      	movs	r2, #250	; 0xfa
   23df8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   23dfa:	e173      	b.n	240e4 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   23dfc:	1d3b      	adds	r3, r7, #4
   23dfe:	781b      	ldrb	r3, [r3, #0]
   23e00:	b2db      	uxtb	r3, r3
   23e02:	2b01      	cmp	r3, #1
   23e04:	d122      	bne.n	23e4c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   23e06:	4b79      	ldr	r3, [pc, #484]	; (23fec <hif_isr+0x398>)
   23e08:	691b      	ldr	r3, [r3, #16]
   23e0a:	2b00      	cmp	r3, #0
   23e0c:	d00d      	beq.n	23e2a <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23e0e:	4b77      	ldr	r3, [pc, #476]	; (23fec <hif_isr+0x398>)
   23e10:	691b      	ldr	r3, [r3, #16]
   23e12:	1d3a      	adds	r2, r7, #4
   23e14:	7852      	ldrb	r2, [r2, #1]
   23e16:	b2d0      	uxtb	r0, r2
   23e18:	1d3a      	adds	r2, r7, #4
   23e1a:	8852      	ldrh	r2, [r2, #2]
   23e1c:	b292      	uxth	r2, r2
   23e1e:	3a08      	subs	r2, #8
   23e20:	b291      	uxth	r1, r2
   23e22:	683a      	ldr	r2, [r7, #0]
   23e24:	3208      	adds	r2, #8
   23e26:	4798      	blx	r3
   23e28:	e102      	b.n	24030 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   23e2a:	23e8      	movs	r3, #232	; 0xe8
   23e2c:	33ff      	adds	r3, #255	; 0xff
   23e2e:	001a      	movs	r2, r3
   23e30:	4970      	ldr	r1, [pc, #448]	; (23ff4 <hif_isr+0x3a0>)
   23e32:	4b71      	ldr	r3, [pc, #452]	; (23ff8 <hif_isr+0x3a4>)
   23e34:	0018      	movs	r0, r3
   23e36:	4b71      	ldr	r3, [pc, #452]	; (23ffc <hif_isr+0x3a8>)
   23e38:	4798      	blx	r3
   23e3a:	4b76      	ldr	r3, [pc, #472]	; (24014 <hif_isr+0x3c0>)
   23e3c:	0018      	movs	r0, r3
   23e3e:	4b6f      	ldr	r3, [pc, #444]	; (23ffc <hif_isr+0x3a8>)
   23e40:	4798      	blx	r3
   23e42:	4b70      	ldr	r3, [pc, #448]	; (24004 <hif_isr+0x3b0>)
   23e44:	0018      	movs	r0, r3
   23e46:	4b6d      	ldr	r3, [pc, #436]	; (23ffc <hif_isr+0x3a8>)
   23e48:	4798      	blx	r3
   23e4a:	e0f1      	b.n	24030 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   23e4c:	1d3b      	adds	r3, r7, #4
   23e4e:	781b      	ldrb	r3, [r3, #0]
   23e50:	b2db      	uxtb	r3, r3
   23e52:	2b02      	cmp	r3, #2
   23e54:	d122      	bne.n	23e9c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   23e56:	4b65      	ldr	r3, [pc, #404]	; (23fec <hif_isr+0x398>)
   23e58:	695b      	ldr	r3, [r3, #20]
   23e5a:	2b00      	cmp	r3, #0
   23e5c:	d00d      	beq.n	23e7a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23e5e:	4b63      	ldr	r3, [pc, #396]	; (23fec <hif_isr+0x398>)
   23e60:	695b      	ldr	r3, [r3, #20]
   23e62:	1d3a      	adds	r2, r7, #4
   23e64:	7852      	ldrb	r2, [r2, #1]
   23e66:	b2d0      	uxtb	r0, r2
   23e68:	1d3a      	adds	r2, r7, #4
   23e6a:	8852      	ldrh	r2, [r2, #2]
   23e6c:	b292      	uxth	r2, r2
   23e6e:	3a08      	subs	r2, #8
   23e70:	b291      	uxth	r1, r2
   23e72:	683a      	ldr	r2, [r7, #0]
   23e74:	3208      	adds	r2, #8
   23e76:	4798      	blx	r3
   23e78:	e0da      	b.n	24030 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   23e7a:	23f0      	movs	r3, #240	; 0xf0
   23e7c:	33ff      	adds	r3, #255	; 0xff
   23e7e:	001a      	movs	r2, r3
   23e80:	495c      	ldr	r1, [pc, #368]	; (23ff4 <hif_isr+0x3a0>)
   23e82:	4b5d      	ldr	r3, [pc, #372]	; (23ff8 <hif_isr+0x3a4>)
   23e84:	0018      	movs	r0, r3
   23e86:	4b5d      	ldr	r3, [pc, #372]	; (23ffc <hif_isr+0x3a8>)
   23e88:	4798      	blx	r3
   23e8a:	4b63      	ldr	r3, [pc, #396]	; (24018 <hif_isr+0x3c4>)
   23e8c:	0018      	movs	r0, r3
   23e8e:	4b5b      	ldr	r3, [pc, #364]	; (23ffc <hif_isr+0x3a8>)
   23e90:	4798      	blx	r3
   23e92:	4b5c      	ldr	r3, [pc, #368]	; (24004 <hif_isr+0x3b0>)
   23e94:	0018      	movs	r0, r3
   23e96:	4b59      	ldr	r3, [pc, #356]	; (23ffc <hif_isr+0x3a8>)
   23e98:	4798      	blx	r3
   23e9a:	e0c9      	b.n	24030 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   23e9c:	1d3b      	adds	r3, r7, #4
   23e9e:	781b      	ldrb	r3, [r3, #0]
   23ea0:	b2db      	uxtb	r3, r3
   23ea2:	2b04      	cmp	r3, #4
   23ea4:	d122      	bne.n	23eec <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   23ea6:	4b51      	ldr	r3, [pc, #324]	; (23fec <hif_isr+0x398>)
   23ea8:	699b      	ldr	r3, [r3, #24]
   23eaa:	2b00      	cmp	r3, #0
   23eac:	d00d      	beq.n	23eca <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23eae:	4b4f      	ldr	r3, [pc, #316]	; (23fec <hif_isr+0x398>)
   23eb0:	699b      	ldr	r3, [r3, #24]
   23eb2:	1d3a      	adds	r2, r7, #4
   23eb4:	7852      	ldrb	r2, [r2, #1]
   23eb6:	b2d0      	uxtb	r0, r2
   23eb8:	1d3a      	adds	r2, r7, #4
   23eba:	8852      	ldrh	r2, [r2, #2]
   23ebc:	b292      	uxth	r2, r2
   23ebe:	3a08      	subs	r2, #8
   23ec0:	b291      	uxth	r1, r2
   23ec2:	683a      	ldr	r2, [r7, #0]
   23ec4:	3208      	adds	r2, #8
   23ec6:	4798      	blx	r3
   23ec8:	e0b2      	b.n	24030 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   23eca:	23f8      	movs	r3, #248	; 0xf8
   23ecc:	33ff      	adds	r3, #255	; 0xff
   23ece:	001a      	movs	r2, r3
   23ed0:	4948      	ldr	r1, [pc, #288]	; (23ff4 <hif_isr+0x3a0>)
   23ed2:	4b49      	ldr	r3, [pc, #292]	; (23ff8 <hif_isr+0x3a4>)
   23ed4:	0018      	movs	r0, r3
   23ed6:	4b49      	ldr	r3, [pc, #292]	; (23ffc <hif_isr+0x3a8>)
   23ed8:	4798      	blx	r3
   23eda:	4b50      	ldr	r3, [pc, #320]	; (2401c <hif_isr+0x3c8>)
   23edc:	0018      	movs	r0, r3
   23ede:	4b47      	ldr	r3, [pc, #284]	; (23ffc <hif_isr+0x3a8>)
   23ee0:	4798      	blx	r3
   23ee2:	4b48      	ldr	r3, [pc, #288]	; (24004 <hif_isr+0x3b0>)
   23ee4:	0018      	movs	r0, r3
   23ee6:	4b45      	ldr	r3, [pc, #276]	; (23ffc <hif_isr+0x3a8>)
   23ee8:	4798      	blx	r3
   23eea:	e0a1      	b.n	24030 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   23eec:	1d3b      	adds	r3, r7, #4
   23eee:	781b      	ldrb	r3, [r3, #0]
   23ef0:	b2db      	uxtb	r3, r3
   23ef2:	2b06      	cmp	r3, #6
   23ef4:	d121      	bne.n	23f3a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   23ef6:	4b3d      	ldr	r3, [pc, #244]	; (23fec <hif_isr+0x398>)
   23ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23efa:	2b00      	cmp	r3, #0
   23efc:	d00d      	beq.n	23f1a <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23efe:	4b3b      	ldr	r3, [pc, #236]	; (23fec <hif_isr+0x398>)
   23f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23f02:	1d3a      	adds	r2, r7, #4
   23f04:	7852      	ldrb	r2, [r2, #1]
   23f06:	b2d0      	uxtb	r0, r2
   23f08:	1d3a      	adds	r2, r7, #4
   23f0a:	8852      	ldrh	r2, [r2, #2]
   23f0c:	b292      	uxth	r2, r2
   23f0e:	3a08      	subs	r2, #8
   23f10:	b291      	uxth	r1, r2
   23f12:	683a      	ldr	r2, [r7, #0]
   23f14:	3208      	adds	r2, #8
   23f16:	4798      	blx	r3
   23f18:	e08a      	b.n	24030 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   23f1a:	2380      	movs	r3, #128	; 0x80
   23f1c:	009a      	lsls	r2, r3, #2
   23f1e:	4935      	ldr	r1, [pc, #212]	; (23ff4 <hif_isr+0x3a0>)
   23f20:	4b35      	ldr	r3, [pc, #212]	; (23ff8 <hif_isr+0x3a4>)
   23f22:	0018      	movs	r0, r3
   23f24:	4b35      	ldr	r3, [pc, #212]	; (23ffc <hif_isr+0x3a8>)
   23f26:	4798      	blx	r3
   23f28:	4b3d      	ldr	r3, [pc, #244]	; (24020 <hif_isr+0x3cc>)
   23f2a:	0018      	movs	r0, r3
   23f2c:	4b33      	ldr	r3, [pc, #204]	; (23ffc <hif_isr+0x3a8>)
   23f2e:	4798      	blx	r3
   23f30:	4b34      	ldr	r3, [pc, #208]	; (24004 <hif_isr+0x3b0>)
   23f32:	0018      	movs	r0, r3
   23f34:	4b31      	ldr	r3, [pc, #196]	; (23ffc <hif_isr+0x3a8>)
   23f36:	4798      	blx	r3
   23f38:	e07a      	b.n	24030 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   23f3a:	1d3b      	adds	r3, r7, #4
   23f3c:	781b      	ldrb	r3, [r3, #0]
   23f3e:	b2db      	uxtb	r3, r3
   23f40:	2b07      	cmp	r3, #7
   23f42:	d120      	bne.n	23f86 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   23f44:	4b29      	ldr	r3, [pc, #164]	; (23fec <hif_isr+0x398>)
   23f46:	69db      	ldr	r3, [r3, #28]
   23f48:	2b00      	cmp	r3, #0
   23f4a:	d00d      	beq.n	23f68 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23f4c:	4b27      	ldr	r3, [pc, #156]	; (23fec <hif_isr+0x398>)
   23f4e:	69db      	ldr	r3, [r3, #28]
   23f50:	1d3a      	adds	r2, r7, #4
   23f52:	7852      	ldrb	r2, [r2, #1]
   23f54:	b2d0      	uxtb	r0, r2
   23f56:	1d3a      	adds	r2, r7, #4
   23f58:	8852      	ldrh	r2, [r2, #2]
   23f5a:	b292      	uxth	r2, r2
   23f5c:	3a08      	subs	r2, #8
   23f5e:	b291      	uxth	r1, r2
   23f60:	683a      	ldr	r2, [r7, #0]
   23f62:	3208      	adds	r2, #8
   23f64:	4798      	blx	r3
   23f66:	e063      	b.n	24030 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   23f68:	4a2e      	ldr	r2, [pc, #184]	; (24024 <hif_isr+0x3d0>)
   23f6a:	4922      	ldr	r1, [pc, #136]	; (23ff4 <hif_isr+0x3a0>)
   23f6c:	4b22      	ldr	r3, [pc, #136]	; (23ff8 <hif_isr+0x3a4>)
   23f6e:	0018      	movs	r0, r3
   23f70:	4b22      	ldr	r3, [pc, #136]	; (23ffc <hif_isr+0x3a8>)
   23f72:	4798      	blx	r3
   23f74:	4b2c      	ldr	r3, [pc, #176]	; (24028 <hif_isr+0x3d4>)
   23f76:	0018      	movs	r0, r3
   23f78:	4b20      	ldr	r3, [pc, #128]	; (23ffc <hif_isr+0x3a8>)
   23f7a:	4798      	blx	r3
   23f7c:	4b21      	ldr	r3, [pc, #132]	; (24004 <hif_isr+0x3b0>)
   23f7e:	0018      	movs	r0, r3
   23f80:	4b1e      	ldr	r3, [pc, #120]	; (23ffc <hif_isr+0x3a8>)
   23f82:	4798      	blx	r3
   23f84:	e054      	b.n	24030 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   23f86:	1d3b      	adds	r3, r7, #4
   23f88:	781b      	ldrb	r3, [r3, #0]
   23f8a:	b2db      	uxtb	r3, r3
   23f8c:	2b05      	cmp	r3, #5
   23f8e:	d111      	bne.n	23fb4 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   23f90:	4b16      	ldr	r3, [pc, #88]	; (23fec <hif_isr+0x398>)
   23f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23f94:	2b00      	cmp	r3, #0
   23f96:	d04b      	beq.n	24030 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23f98:	4b14      	ldr	r3, [pc, #80]	; (23fec <hif_isr+0x398>)
   23f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23f9c:	1d3a      	adds	r2, r7, #4
   23f9e:	7852      	ldrb	r2, [r2, #1]
   23fa0:	b2d0      	uxtb	r0, r2
   23fa2:	1d3a      	adds	r2, r7, #4
   23fa4:	8852      	ldrh	r2, [r2, #2]
   23fa6:	b292      	uxth	r2, r2
   23fa8:	3a08      	subs	r2, #8
   23faa:	b291      	uxth	r1, r2
   23fac:	683a      	ldr	r2, [r7, #0]
   23fae:	3208      	adds	r2, #8
   23fb0:	4798      	blx	r3
   23fb2:	e03d      	b.n	24030 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   23fb4:	2384      	movs	r3, #132	; 0x84
   23fb6:	009a      	lsls	r2, r3, #2
   23fb8:	490e      	ldr	r1, [pc, #56]	; (23ff4 <hif_isr+0x3a0>)
   23fba:	4b0f      	ldr	r3, [pc, #60]	; (23ff8 <hif_isr+0x3a4>)
   23fbc:	0018      	movs	r0, r3
   23fbe:	4b0f      	ldr	r3, [pc, #60]	; (23ffc <hif_isr+0x3a8>)
   23fc0:	4798      	blx	r3
   23fc2:	4b1a      	ldr	r3, [pc, #104]	; (2402c <hif_isr+0x3d8>)
   23fc4:	0018      	movs	r0, r3
   23fc6:	4b0d      	ldr	r3, [pc, #52]	; (23ffc <hif_isr+0x3a8>)
   23fc8:	4798      	blx	r3
   23fca:	4b0e      	ldr	r3, [pc, #56]	; (24004 <hif_isr+0x3b0>)
   23fcc:	0018      	movs	r0, r3
   23fce:	4b0b      	ldr	r3, [pc, #44]	; (23ffc <hif_isr+0x3a8>)
   23fd0:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   23fd2:	230f      	movs	r3, #15
   23fd4:	18fb      	adds	r3, r7, r3
   23fd6:	22fa      	movs	r2, #250	; 0xfa
   23fd8:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   23fda:	e083      	b.n	240e4 <hif_isr+0x490>
   23fdc:	00001070 	.word	0x00001070
   23fe0:	000256e1 	.word	0x000256e1
   23fe4:	00022e05 	.word	0x00022e05
   23fe8:	00025705 	.word	0x00025705
   23fec:	20005a5c 	.word	0x20005a5c
   23ff0:	00001084 	.word	0x00001084
   23ff4:	0003b7d8 	.word	0x0003b7d8
   23ff8:	0003b4c8 	.word	0x0003b4c8
   23ffc:	00020889 	.word	0x00020889
   24000:	0003b4fc 	.word	0x0003b4fc
   24004:	0003b4c4 	.word	0x0003b4c4
   24008:	00025755 	.word	0x00025755
   2400c:	0003b524 	.word	0x0003b524
   24010:	0003b53c 	.word	0x0003b53c
   24014:	0003b57c 	.word	0x0003b57c
   24018:	0003b5a0 	.word	0x0003b5a0
   2401c:	0003b5c4 	.word	0x0003b5c4
   24020:	0003b5e4 	.word	0x0003b5e4
   24024:	00000207 	.word	0x00000207
   24028:	0003b608 	.word	0x0003b608
   2402c:	0003b62c 	.word	0x0003b62c
				}
				if(gstrHifCxt.u8HifRXDone)
   24030:	4b30      	ldr	r3, [pc, #192]	; (240f4 <hif_isr+0x4a0>)
   24032:	789b      	ldrb	r3, [r3, #2]
   24034:	b2db      	uxtb	r3, r3
   24036:	2b00      	cmp	r3, #0
   24038:	d054      	beq.n	240e4 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   2403a:	4a2f      	ldr	r2, [pc, #188]	; (240f8 <hif_isr+0x4a4>)
   2403c:	492f      	ldr	r1, [pc, #188]	; (240fc <hif_isr+0x4a8>)
   2403e:	4b30      	ldr	r3, [pc, #192]	; (24100 <hif_isr+0x4ac>)
   24040:	0018      	movs	r0, r3
   24042:	4b30      	ldr	r3, [pc, #192]	; (24104 <hif_isr+0x4b0>)
   24044:	4798      	blx	r3
   24046:	1d3b      	adds	r3, r7, #4
   24048:	781b      	ldrb	r3, [r3, #0]
   2404a:	b2db      	uxtb	r3, r3
   2404c:	0019      	movs	r1, r3
   2404e:	1d3b      	adds	r3, r7, #4
   24050:	785b      	ldrb	r3, [r3, #1]
   24052:	b2db      	uxtb	r3, r3
   24054:	001a      	movs	r2, r3
   24056:	4b2c      	ldr	r3, [pc, #176]	; (24108 <hif_isr+0x4b4>)
   24058:	0018      	movs	r0, r3
   2405a:	4b2a      	ldr	r3, [pc, #168]	; (24104 <hif_isr+0x4b0>)
   2405c:	4798      	blx	r3
   2405e:	4b2b      	ldr	r3, [pc, #172]	; (2410c <hif_isr+0x4b8>)
   24060:	0018      	movs	r0, r3
   24062:	4b28      	ldr	r3, [pc, #160]	; (24104 <hif_isr+0x4b0>)
   24064:	4798      	blx	r3
					ret = hif_set_rx_done();
   24066:	230f      	movs	r3, #15
   24068:	18fc      	adds	r4, r7, r3
   2406a:	4b29      	ldr	r3, [pc, #164]	; (24110 <hif_isr+0x4bc>)
   2406c:	4798      	blx	r3
   2406e:	0003      	movs	r3, r0
   24070:	7023      	strb	r3, [r4, #0]
   24072:	e037      	b.n	240e4 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   24074:	4a27      	ldr	r2, [pc, #156]	; (24114 <hif_isr+0x4c0>)
   24076:	4921      	ldr	r1, [pc, #132]	; (240fc <hif_isr+0x4a8>)
   24078:	4b21      	ldr	r3, [pc, #132]	; (24100 <hif_isr+0x4ac>)
   2407a:	0018      	movs	r0, r3
   2407c:	4b21      	ldr	r3, [pc, #132]	; (24104 <hif_isr+0x4b0>)
   2407e:	4798      	blx	r3
   24080:	4b25      	ldr	r3, [pc, #148]	; (24118 <hif_isr+0x4c4>)
   24082:	0018      	movs	r0, r3
   24084:	4b1f      	ldr	r3, [pc, #124]	; (24104 <hif_isr+0x4b0>)
   24086:	4798      	blx	r3
   24088:	4b20      	ldr	r3, [pc, #128]	; (2410c <hif_isr+0x4b8>)
   2408a:	0018      	movs	r0, r3
   2408c:	4b1d      	ldr	r3, [pc, #116]	; (24104 <hif_isr+0x4b0>)
   2408e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   24090:	230f      	movs	r3, #15
   24092:	18fb      	adds	r3, r7, r3
   24094:	22fe      	movs	r2, #254	; 0xfe
   24096:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   24098:	e024      	b.n	240e4 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   2409a:	4a20      	ldr	r2, [pc, #128]	; (2411c <hif_isr+0x4c8>)
   2409c:	4917      	ldr	r1, [pc, #92]	; (240fc <hif_isr+0x4a8>)
   2409e:	4b18      	ldr	r3, [pc, #96]	; (24100 <hif_isr+0x4ac>)
   240a0:	0018      	movs	r0, r3
   240a2:	4b18      	ldr	r3, [pc, #96]	; (24104 <hif_isr+0x4b0>)
   240a4:	4798      	blx	r3
   240a6:	68ba      	ldr	r2, [r7, #8]
   240a8:	4b1d      	ldr	r3, [pc, #116]	; (24120 <hif_isr+0x4cc>)
   240aa:	0011      	movs	r1, r2
   240ac:	0018      	movs	r0, r3
   240ae:	4b15      	ldr	r3, [pc, #84]	; (24104 <hif_isr+0x4b0>)
   240b0:	4798      	blx	r3
   240b2:	4b16      	ldr	r3, [pc, #88]	; (2410c <hif_isr+0x4b8>)
   240b4:	0018      	movs	r0, r3
   240b6:	4b13      	ldr	r3, [pc, #76]	; (24104 <hif_isr+0x4b0>)
   240b8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   240ba:	230f      	movs	r3, #15
   240bc:	18fb      	adds	r3, r7, r3
   240be:	22f4      	movs	r2, #244	; 0xf4
   240c0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   240c2:	e00f      	b.n	240e4 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   240c4:	4a17      	ldr	r2, [pc, #92]	; (24124 <hif_isr+0x4d0>)
   240c6:	490d      	ldr	r1, [pc, #52]	; (240fc <hif_isr+0x4a8>)
   240c8:	4b0d      	ldr	r3, [pc, #52]	; (24100 <hif_isr+0x4ac>)
   240ca:	0018      	movs	r0, r3
   240cc:	4b0d      	ldr	r3, [pc, #52]	; (24104 <hif_isr+0x4b0>)
   240ce:	4798      	blx	r3
   240d0:	4b15      	ldr	r3, [pc, #84]	; (24128 <hif_isr+0x4d4>)
   240d2:	0018      	movs	r0, r3
   240d4:	4b0b      	ldr	r3, [pc, #44]	; (24104 <hif_isr+0x4b0>)
   240d6:	4798      	blx	r3
   240d8:	4b0c      	ldr	r3, [pc, #48]	; (2410c <hif_isr+0x4b8>)
   240da:	0018      	movs	r0, r3
   240dc:	4b09      	ldr	r3, [pc, #36]	; (24104 <hif_isr+0x4b0>)
   240de:	4798      	blx	r3
		goto ERR1;
   240e0:	e000      	b.n	240e4 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   240e2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   240e4:	230f      	movs	r3, #15
   240e6:	18fb      	adds	r3, r7, r3
   240e8:	781b      	ldrb	r3, [r3, #0]
   240ea:	b25b      	sxtb	r3, r3
}
   240ec:	0018      	movs	r0, r3
   240ee:	46bd      	mov	sp, r7
   240f0:	b005      	add	sp, #20
   240f2:	bd90      	pop	{r4, r7, pc}
   240f4:	20005a5c 	.word	0x20005a5c
   240f8:	00000216 	.word	0x00000216
   240fc:	0003b7d8 	.word	0x0003b7d8
   24100:	0003b4c8 	.word	0x0003b4c8
   24104:	00020889 	.word	0x00020889
   24108:	0003b644 	.word	0x0003b644
   2410c:	0003b4c4 	.word	0x0003b4c4
   24110:	000236e9 	.word	0x000236e9
   24114:	0000021d 	.word	0x0000021d
   24118:	0003b670 	.word	0x0003b670
   2411c:	00000225 	.word	0x00000225
   24120:	0003b684 	.word	0x0003b684
   24124:	0000022e 	.word	0x0000022e
   24128:	0003b6a0 	.word	0x0003b6a0

0002412c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   2412c:	b590      	push	{r4, r7, lr}
   2412e:	b083      	sub	sp, #12
   24130:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   24132:	1dfb      	adds	r3, r7, #7
   24134:	2200      	movs	r2, #0
   24136:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   24138:	4b1c      	ldr	r3, [pc, #112]	; (241ac <hif_handle_isr+0x80>)
   2413a:	2200      	movs	r2, #0
   2413c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2413e:	e024      	b.n	2418a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   24140:	4b1a      	ldr	r3, [pc, #104]	; (241ac <hif_handle_isr+0x80>)
   24142:	78db      	ldrb	r3, [r3, #3]
   24144:	b2db      	uxtb	r3, r3
   24146:	3b01      	subs	r3, #1
   24148:	b2da      	uxtb	r2, r3
   2414a:	4b18      	ldr	r3, [pc, #96]	; (241ac <hif_handle_isr+0x80>)
   2414c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2414e:	1dfc      	adds	r4, r7, #7
   24150:	4b17      	ldr	r3, [pc, #92]	; (241b0 <hif_handle_isr+0x84>)
   24152:	4798      	blx	r3
   24154:	0003      	movs	r3, r0
   24156:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   24158:	1dfb      	adds	r3, r7, #7
   2415a:	781b      	ldrb	r3, [r3, #0]
   2415c:	b25b      	sxtb	r3, r3
   2415e:	2b00      	cmp	r3, #0
   24160:	d100      	bne.n	24164 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   24162:	e012      	b.n	2418a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   24164:	4a13      	ldr	r2, [pc, #76]	; (241b4 <hif_handle_isr+0x88>)
   24166:	4914      	ldr	r1, [pc, #80]	; (241b8 <hif_handle_isr+0x8c>)
   24168:	4b14      	ldr	r3, [pc, #80]	; (241bc <hif_handle_isr+0x90>)
   2416a:	0018      	movs	r0, r3
   2416c:	4b14      	ldr	r3, [pc, #80]	; (241c0 <hif_handle_isr+0x94>)
   2416e:	4798      	blx	r3
   24170:	1dfb      	adds	r3, r7, #7
   24172:	2200      	movs	r2, #0
   24174:	569a      	ldrsb	r2, [r3, r2]
   24176:	4b13      	ldr	r3, [pc, #76]	; (241c4 <hif_handle_isr+0x98>)
   24178:	0011      	movs	r1, r2
   2417a:	0018      	movs	r0, r3
   2417c:	4b10      	ldr	r3, [pc, #64]	; (241c0 <hif_handle_isr+0x94>)
   2417e:	4798      	blx	r3
   24180:	4b11      	ldr	r3, [pc, #68]	; (241c8 <hif_handle_isr+0x9c>)
   24182:	0018      	movs	r0, r3
   24184:	4b0e      	ldr	r3, [pc, #56]	; (241c0 <hif_handle_isr+0x94>)
   24186:	4798      	blx	r3
			ret = hif_isr();
   24188:	e7e1      	b.n	2414e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2418a:	4b08      	ldr	r3, [pc, #32]	; (241ac <hif_handle_isr+0x80>)
   2418c:	78db      	ldrb	r3, [r3, #3]
   2418e:	b2db      	uxtb	r3, r3
   24190:	2b00      	cmp	r3, #0
   24192:	d004      	beq.n	2419e <hif_handle_isr+0x72>
   24194:	4b05      	ldr	r3, [pc, #20]	; (241ac <hif_handle_isr+0x80>)
   24196:	791b      	ldrb	r3, [r3, #4]
   24198:	b2db      	uxtb	r3, r3
   2419a:	2b00      	cmp	r3, #0
   2419c:	d0d0      	beq.n	24140 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2419e:	1dfb      	adds	r3, r7, #7
   241a0:	781b      	ldrb	r3, [r3, #0]
   241a2:	b25b      	sxtb	r3, r3
}
   241a4:	0018      	movs	r0, r3
   241a6:	46bd      	mov	sp, r7
   241a8:	b003      	add	sp, #12
   241aa:	bd90      	pop	{r4, r7, pc}
   241ac:	20005a5c 	.word	0x20005a5c
   241b0:	00023c55 	.word	0x00023c55
   241b4:	00000257 	.word	0x00000257
   241b8:	0003b7e0 	.word	0x0003b7e0
   241bc:	0003b4c8 	.word	0x0003b4c8
   241c0:	00020889 	.word	0x00020889
   241c4:	0003b6c4 	.word	0x0003b6c4
   241c8:	0003b4c4 	.word	0x0003b4c4

000241cc <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   241cc:	b590      	push	{r4, r7, lr}
   241ce:	b087      	sub	sp, #28
   241d0:	af00      	add	r7, sp, #0
   241d2:	60f8      	str	r0, [r7, #12]
   241d4:	60b9      	str	r1, [r7, #8]
   241d6:	0019      	movs	r1, r3
   241d8:	1dbb      	adds	r3, r7, #6
   241da:	801a      	strh	r2, [r3, #0]
   241dc:	1d7b      	adds	r3, r7, #5
   241de:	1c0a      	adds	r2, r1, #0
   241e0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   241e2:	2317      	movs	r3, #23
   241e4:	18fb      	adds	r3, r7, r3
   241e6:	2200      	movs	r2, #0
   241e8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   241ea:	68fb      	ldr	r3, [r7, #12]
   241ec:	2b00      	cmp	r3, #0
   241ee:	d006      	beq.n	241fe <hif_receive+0x32>
   241f0:	68bb      	ldr	r3, [r7, #8]
   241f2:	2b00      	cmp	r3, #0
   241f4:	d003      	beq.n	241fe <hif_receive+0x32>
   241f6:	1dbb      	adds	r3, r7, #6
   241f8:	881b      	ldrh	r3, [r3, #0]
   241fa:	2b00      	cmp	r3, #0
   241fc:	d11e      	bne.n	2423c <hif_receive+0x70>
	{
		if(isDone)
   241fe:	1d7b      	adds	r3, r7, #5
   24200:	781b      	ldrb	r3, [r3, #0]
   24202:	2b00      	cmp	r3, #0
   24204:	d006      	beq.n	24214 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   24206:	2317      	movs	r3, #23
   24208:	18fc      	adds	r4, r7, r3
   2420a:	4b45      	ldr	r3, [pc, #276]	; (24320 <hif_receive+0x154>)
   2420c:	4798      	blx	r3
   2420e:	0003      	movs	r3, r0
   24210:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   24212:	e07c      	b.n	2430e <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   24214:	2317      	movs	r3, #23
   24216:	18fb      	adds	r3, r7, r3
   24218:	22f4      	movs	r2, #244	; 0xf4
   2421a:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   2421c:	239e      	movs	r3, #158	; 0x9e
   2421e:	009a      	lsls	r2, r3, #2
   24220:	4940      	ldr	r1, [pc, #256]	; (24324 <hif_receive+0x158>)
   24222:	4b41      	ldr	r3, [pc, #260]	; (24328 <hif_receive+0x15c>)
   24224:	0018      	movs	r0, r3
   24226:	4b41      	ldr	r3, [pc, #260]	; (2432c <hif_receive+0x160>)
   24228:	4798      	blx	r3
   2422a:	4b41      	ldr	r3, [pc, #260]	; (24330 <hif_receive+0x164>)
   2422c:	0018      	movs	r0, r3
   2422e:	4b3f      	ldr	r3, [pc, #252]	; (2432c <hif_receive+0x160>)
   24230:	4798      	blx	r3
   24232:	4b40      	ldr	r3, [pc, #256]	; (24334 <hif_receive+0x168>)
   24234:	0018      	movs	r0, r3
   24236:	4b3d      	ldr	r3, [pc, #244]	; (2432c <hif_receive+0x160>)
   24238:	4798      	blx	r3
		goto ERR1;
   2423a:	e068      	b.n	2430e <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   2423c:	1dbb      	adds	r3, r7, #6
   2423e:	881a      	ldrh	r2, [r3, #0]
   24240:	4b3d      	ldr	r3, [pc, #244]	; (24338 <hif_receive+0x16c>)
   24242:	68db      	ldr	r3, [r3, #12]
   24244:	429a      	cmp	r2, r3
   24246:	d917      	bls.n	24278 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   24248:	2317      	movs	r3, #23
   2424a:	18fb      	adds	r3, r7, r3
   2424c:	22f4      	movs	r2, #244	; 0xf4
   2424e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   24250:	23a0      	movs	r3, #160	; 0xa0
   24252:	009a      	lsls	r2, r3, #2
   24254:	4933      	ldr	r1, [pc, #204]	; (24324 <hif_receive+0x158>)
   24256:	4b34      	ldr	r3, [pc, #208]	; (24328 <hif_receive+0x15c>)
   24258:	0018      	movs	r0, r3
   2425a:	4b34      	ldr	r3, [pc, #208]	; (2432c <hif_receive+0x160>)
   2425c:	4798      	blx	r3
   2425e:	1dbb      	adds	r3, r7, #6
   24260:	8819      	ldrh	r1, [r3, #0]
   24262:	4b35      	ldr	r3, [pc, #212]	; (24338 <hif_receive+0x16c>)
   24264:	68da      	ldr	r2, [r3, #12]
   24266:	4b35      	ldr	r3, [pc, #212]	; (2433c <hif_receive+0x170>)
   24268:	0018      	movs	r0, r3
   2426a:	4b30      	ldr	r3, [pc, #192]	; (2432c <hif_receive+0x160>)
   2426c:	4798      	blx	r3
   2426e:	4b31      	ldr	r3, [pc, #196]	; (24334 <hif_receive+0x168>)
   24270:	0018      	movs	r0, r3
   24272:	4b2e      	ldr	r3, [pc, #184]	; (2432c <hif_receive+0x160>)
   24274:	4798      	blx	r3
		goto ERR1;
   24276:	e04a      	b.n	2430e <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   24278:	4b2f      	ldr	r3, [pc, #188]	; (24338 <hif_receive+0x16c>)
   2427a:	689a      	ldr	r2, [r3, #8]
   2427c:	68fb      	ldr	r3, [r7, #12]
   2427e:	429a      	cmp	r2, r3
   24280:	d80a      	bhi.n	24298 <hif_receive+0xcc>
   24282:	1dbb      	adds	r3, r7, #6
   24284:	881a      	ldrh	r2, [r3, #0]
   24286:	68fb      	ldr	r3, [r7, #12]
   24288:	18d2      	adds	r2, r2, r3
   2428a:	4b2b      	ldr	r3, [pc, #172]	; (24338 <hif_receive+0x16c>)
   2428c:	6899      	ldr	r1, [r3, #8]
   2428e:	4b2a      	ldr	r3, [pc, #168]	; (24338 <hif_receive+0x16c>)
   24290:	68db      	ldr	r3, [r3, #12]
   24292:	18cb      	adds	r3, r1, r3
   24294:	429a      	cmp	r2, r3
   24296:	d912      	bls.n	242be <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   24298:	2317      	movs	r3, #23
   2429a:	18fb      	adds	r3, r7, r3
   2429c:	22f4      	movs	r2, #244	; 0xf4
   2429e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   242a0:	4a27      	ldr	r2, [pc, #156]	; (24340 <hif_receive+0x174>)
   242a2:	4920      	ldr	r1, [pc, #128]	; (24324 <hif_receive+0x158>)
   242a4:	4b20      	ldr	r3, [pc, #128]	; (24328 <hif_receive+0x15c>)
   242a6:	0018      	movs	r0, r3
   242a8:	4b20      	ldr	r3, [pc, #128]	; (2432c <hif_receive+0x160>)
   242aa:	4798      	blx	r3
   242ac:	4b25      	ldr	r3, [pc, #148]	; (24344 <hif_receive+0x178>)
   242ae:	0018      	movs	r0, r3
   242b0:	4b1e      	ldr	r3, [pc, #120]	; (2432c <hif_receive+0x160>)
   242b2:	4798      	blx	r3
   242b4:	4b1f      	ldr	r3, [pc, #124]	; (24334 <hif_receive+0x168>)
   242b6:	0018      	movs	r0, r3
   242b8:	4b1c      	ldr	r3, [pc, #112]	; (2432c <hif_receive+0x160>)
   242ba:	4798      	blx	r3
		goto ERR1;
   242bc:	e027      	b.n	2430e <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   242be:	1dbb      	adds	r3, r7, #6
   242c0:	881a      	ldrh	r2, [r3, #0]
   242c2:	2317      	movs	r3, #23
   242c4:	18fc      	adds	r4, r7, r3
   242c6:	68b9      	ldr	r1, [r7, #8]
   242c8:	68fb      	ldr	r3, [r7, #12]
   242ca:	0018      	movs	r0, r3
   242cc:	4b1e      	ldr	r3, [pc, #120]	; (24348 <hif_receive+0x17c>)
   242ce:	4798      	blx	r3
   242d0:	0003      	movs	r3, r0
   242d2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   242d4:	2317      	movs	r3, #23
   242d6:	18fb      	adds	r3, r7, r3
   242d8:	781b      	ldrb	r3, [r3, #0]
   242da:	b25b      	sxtb	r3, r3
   242dc:	2b00      	cmp	r3, #0
   242de:	d115      	bne.n	2430c <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   242e0:	4b15      	ldr	r3, [pc, #84]	; (24338 <hif_receive+0x16c>)
   242e2:	689a      	ldr	r2, [r3, #8]
   242e4:	4b14      	ldr	r3, [pc, #80]	; (24338 <hif_receive+0x16c>)
   242e6:	68db      	ldr	r3, [r3, #12]
   242e8:	18d2      	adds	r2, r2, r3
   242ea:	1dbb      	adds	r3, r7, #6
   242ec:	8819      	ldrh	r1, [r3, #0]
   242ee:	68fb      	ldr	r3, [r7, #12]
   242f0:	18cb      	adds	r3, r1, r3
   242f2:	429a      	cmp	r2, r3
   242f4:	d003      	beq.n	242fe <hif_receive+0x132>
   242f6:	1d7b      	adds	r3, r7, #5
   242f8:	781b      	ldrb	r3, [r3, #0]
   242fa:	2b00      	cmp	r3, #0
   242fc:	d007      	beq.n	2430e <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   242fe:	2317      	movs	r3, #23
   24300:	18fc      	adds	r4, r7, r3
   24302:	4b07      	ldr	r3, [pc, #28]	; (24320 <hif_receive+0x154>)
   24304:	4798      	blx	r3
   24306:	0003      	movs	r3, r0
   24308:	7023      	strb	r3, [r4, #0]
   2430a:	e000      	b.n	2430e <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   2430c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2430e:	2317      	movs	r3, #23
   24310:	18fb      	adds	r3, r7, r3
   24312:	781b      	ldrb	r3, [r3, #0]
   24314:	b25b      	sxtb	r3, r3
}
   24316:	0018      	movs	r0, r3
   24318:	46bd      	mov	sp, r7
   2431a:	b007      	add	sp, #28
   2431c:	bd90      	pop	{r4, r7, pc}
   2431e:	46c0      	nop			; (mov r8, r8)
   24320:	000236e9 	.word	0x000236e9
   24324:	0003b7f0 	.word	0x0003b7f0
   24328:	0003b4c8 	.word	0x0003b4c8
   2432c:	00020889 	.word	0x00020889
   24330:	0003b6f4 	.word	0x0003b6f4
   24334:	0003b4c4 	.word	0x0003b4c4
   24338:	20005a5c 	.word	0x20005a5c
   2433c:	0003b714 	.word	0x0003b714
   24340:	00000286 	.word	0x00000286
   24344:	0003b75c 	.word	0x0003b75c
   24348:	00025755 	.word	0x00025755

0002434c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   2434c:	b580      	push	{r7, lr}
   2434e:	b084      	sub	sp, #16
   24350:	af00      	add	r7, sp, #0
   24352:	0002      	movs	r2, r0
   24354:	6039      	str	r1, [r7, #0]
   24356:	1dfb      	adds	r3, r7, #7
   24358:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2435a:	230f      	movs	r3, #15
   2435c:	18fb      	adds	r3, r7, r3
   2435e:	2200      	movs	r2, #0
   24360:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   24362:	1dfb      	adds	r3, r7, #7
   24364:	781b      	ldrb	r3, [r3, #0]
   24366:	2b07      	cmp	r3, #7
   24368:	d820      	bhi.n	243ac <hif_register_cb+0x60>
   2436a:	009a      	lsls	r2, r3, #2
   2436c:	4b1e      	ldr	r3, [pc, #120]	; (243e8 <hif_register_cb+0x9c>)
   2436e:	18d3      	adds	r3, r2, r3
   24370:	681b      	ldr	r3, [r3, #0]
   24372:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   24374:	4b1d      	ldr	r3, [pc, #116]	; (243ec <hif_register_cb+0xa0>)
   24376:	683a      	ldr	r2, [r7, #0]
   24378:	615a      	str	r2, [r3, #20]
			break;
   2437a:	e02d      	b.n	243d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   2437c:	4b1b      	ldr	r3, [pc, #108]	; (243ec <hif_register_cb+0xa0>)
   2437e:	683a      	ldr	r2, [r7, #0]
   24380:	611a      	str	r2, [r3, #16]
			break;
   24382:	e029      	b.n	243d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   24384:	4b19      	ldr	r3, [pc, #100]	; (243ec <hif_register_cb+0xa0>)
   24386:	683a      	ldr	r2, [r7, #0]
   24388:	619a      	str	r2, [r3, #24]
			break;
   2438a:	e025      	b.n	243d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   2438c:	4b17      	ldr	r3, [pc, #92]	; (243ec <hif_register_cb+0xa0>)
   2438e:	683a      	ldr	r2, [r7, #0]
   24390:	621a      	str	r2, [r3, #32]
			break;
   24392:	e021      	b.n	243d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   24394:	4b15      	ldr	r3, [pc, #84]	; (243ec <hif_register_cb+0xa0>)
   24396:	683a      	ldr	r2, [r7, #0]
   24398:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   2439a:	e01d      	b.n	243d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   2439c:	4b13      	ldr	r3, [pc, #76]	; (243ec <hif_register_cb+0xa0>)
   2439e:	683a      	ldr	r2, [r7, #0]
   243a0:	61da      	str	r2, [r3, #28]
			break;
   243a2:	e019      	b.n	243d8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   243a4:	4b11      	ldr	r3, [pc, #68]	; (243ec <hif_register_cb+0xa0>)
   243a6:	683a      	ldr	r2, [r7, #0]
   243a8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   243aa:	e015      	b.n	243d8 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   243ac:	4a10      	ldr	r2, [pc, #64]	; (243f0 <hif_register_cb+0xa4>)
   243ae:	4911      	ldr	r1, [pc, #68]	; (243f4 <hif_register_cb+0xa8>)
   243b0:	4b11      	ldr	r3, [pc, #68]	; (243f8 <hif_register_cb+0xac>)
   243b2:	0018      	movs	r0, r3
   243b4:	4b11      	ldr	r3, [pc, #68]	; (243fc <hif_register_cb+0xb0>)
   243b6:	4798      	blx	r3
   243b8:	1dfb      	adds	r3, r7, #7
   243ba:	781a      	ldrb	r2, [r3, #0]
   243bc:	4b10      	ldr	r3, [pc, #64]	; (24400 <hif_register_cb+0xb4>)
   243be:	0011      	movs	r1, r2
   243c0:	0018      	movs	r0, r3
   243c2:	4b0e      	ldr	r3, [pc, #56]	; (243fc <hif_register_cb+0xb0>)
   243c4:	4798      	blx	r3
   243c6:	4b0f      	ldr	r3, [pc, #60]	; (24404 <hif_register_cb+0xb8>)
   243c8:	0018      	movs	r0, r3
   243ca:	4b0c      	ldr	r3, [pc, #48]	; (243fc <hif_register_cb+0xb0>)
   243cc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   243ce:	230f      	movs	r3, #15
   243d0:	18fb      	adds	r3, r7, r3
   243d2:	22f4      	movs	r2, #244	; 0xf4
   243d4:	701a      	strb	r2, [r3, #0]
			break;
   243d6:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   243d8:	230f      	movs	r3, #15
   243da:	18fb      	adds	r3, r7, r3
   243dc:	781b      	ldrb	r3, [r3, #0]
   243de:	b25b      	sxtb	r3, r3
}
   243e0:	0018      	movs	r0, r3
   243e2:	46bd      	mov	sp, r7
   243e4:	b004      	add	sp, #16
   243e6:	bd80      	pop	{r7, pc}
   243e8:	0003b7ac 	.word	0x0003b7ac
   243ec:	20005a5c 	.word	0x20005a5c
   243f0:	000002be 	.word	0x000002be
   243f4:	0003b7fc 	.word	0x0003b7fc
   243f8:	0003b4c8 	.word	0x0003b4c8
   243fc:	00020889 	.word	0x00020889
   24400:	0003b7a0 	.word	0x0003b7a0
   24404:	0003b4c4 	.word	0x0003b4c4

00024408 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   24408:	b590      	push	{r4, r7, lr}
   2440a:	b0af      	sub	sp, #188	; 0xbc
   2440c:	af02      	add	r7, sp, #8
   2440e:	603a      	str	r2, [r7, #0]
   24410:	1dfb      	adds	r3, r7, #7
   24412:	1c02      	adds	r2, r0, #0
   24414:	701a      	strb	r2, [r3, #0]
   24416:	1d3b      	adds	r3, r7, #4
   24418:	1c0a      	adds	r2, r1, #0
   2441a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   2441c:	1dfb      	adds	r3, r7, #7
   2441e:	781b      	ldrb	r3, [r3, #0]
   24420:	2b2c      	cmp	r3, #44	; 0x2c
   24422:	d116      	bne.n	24452 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   24424:	23a4      	movs	r3, #164	; 0xa4
   24426:	18f9      	adds	r1, r7, r3
   24428:	6838      	ldr	r0, [r7, #0]
   2442a:	2300      	movs	r3, #0
   2442c:	2204      	movs	r2, #4
   2442e:	4cca      	ldr	r4, [pc, #808]	; (24758 <m2m_wifi_cb+0x350>)
   24430:	47a0      	blx	r4
   24432:	1e03      	subs	r3, r0, #0
   24434:	d000      	beq.n	24438 <m2m_wifi_cb+0x30>
   24436:	e1b4      	b.n	247a2 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   24438:	4bc8      	ldr	r3, [pc, #800]	; (2475c <m2m_wifi_cb+0x354>)
   2443a:	681b      	ldr	r3, [r3, #0]
   2443c:	2b00      	cmp	r3, #0
   2443e:	d100      	bne.n	24442 <m2m_wifi_cb+0x3a>
   24440:	e1af      	b.n	247a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   24442:	4bc6      	ldr	r3, [pc, #792]	; (2475c <m2m_wifi_cb+0x354>)
   24444:	681b      	ldr	r3, [r3, #0]
   24446:	22a4      	movs	r2, #164	; 0xa4
   24448:	18ba      	adds	r2, r7, r2
   2444a:	0011      	movs	r1, r2
   2444c:	202c      	movs	r0, #44	; 0x2c
   2444e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   24450:	e1a7      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   24452:	1dfb      	adds	r3, r7, #7
   24454:	781b      	ldrb	r3, [r3, #0]
   24456:	2b1b      	cmp	r3, #27
   24458:	d116      	bne.n	24488 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   2445a:	239c      	movs	r3, #156	; 0x9c
   2445c:	18f9      	adds	r1, r7, r3
   2445e:	6838      	ldr	r0, [r7, #0]
   24460:	2300      	movs	r3, #0
   24462:	2208      	movs	r2, #8
   24464:	4cbc      	ldr	r4, [pc, #752]	; (24758 <m2m_wifi_cb+0x350>)
   24466:	47a0      	blx	r4
   24468:	1e03      	subs	r3, r0, #0
   2446a:	d000      	beq.n	2446e <m2m_wifi_cb+0x66>
   2446c:	e199      	b.n	247a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2446e:	4bbb      	ldr	r3, [pc, #748]	; (2475c <m2m_wifi_cb+0x354>)
   24470:	681b      	ldr	r3, [r3, #0]
   24472:	2b00      	cmp	r3, #0
   24474:	d100      	bne.n	24478 <m2m_wifi_cb+0x70>
   24476:	e194      	b.n	247a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   24478:	4bb8      	ldr	r3, [pc, #736]	; (2475c <m2m_wifi_cb+0x354>)
   2447a:	681b      	ldr	r3, [r3, #0]
   2447c:	229c      	movs	r2, #156	; 0x9c
   2447e:	18ba      	adds	r2, r7, r2
   24480:	0011      	movs	r1, r2
   24482:	201b      	movs	r0, #27
   24484:	4798      	blx	r3
}
   24486:	e18c      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   24488:	1dfb      	adds	r3, r7, #7
   2448a:	781b      	ldrb	r3, [r3, #0]
   2448c:	2b06      	cmp	r3, #6
   2448e:	d116      	bne.n	244be <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   24490:	230c      	movs	r3, #12
   24492:	18f9      	adds	r1, r7, r3
   24494:	6838      	ldr	r0, [r7, #0]
   24496:	2301      	movs	r3, #1
   24498:	2230      	movs	r2, #48	; 0x30
   2449a:	4caf      	ldr	r4, [pc, #700]	; (24758 <m2m_wifi_cb+0x350>)
   2449c:	47a0      	blx	r4
   2449e:	1e03      	subs	r3, r0, #0
   244a0:	d000      	beq.n	244a4 <m2m_wifi_cb+0x9c>
   244a2:	e17e      	b.n	247a2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   244a4:	4bad      	ldr	r3, [pc, #692]	; (2475c <m2m_wifi_cb+0x354>)
   244a6:	681b      	ldr	r3, [r3, #0]
   244a8:	2b00      	cmp	r3, #0
   244aa:	d100      	bne.n	244ae <m2m_wifi_cb+0xa6>
   244ac:	e179      	b.n	247a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   244ae:	4bab      	ldr	r3, [pc, #684]	; (2475c <m2m_wifi_cb+0x354>)
   244b0:	681b      	ldr	r3, [r3, #0]
   244b2:	220c      	movs	r2, #12
   244b4:	18ba      	adds	r2, r7, r2
   244b6:	0011      	movs	r1, r2
   244b8:	2006      	movs	r0, #6
   244ba:	4798      	blx	r3
}
   244bc:	e171      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   244be:	1dfb      	adds	r3, r7, #7
   244c0:	781b      	ldrb	r3, [r3, #0]
   244c2:	2b0e      	cmp	r3, #14
   244c4:	d100      	bne.n	244c8 <m2m_wifi_cb+0xc0>
   244c6:	e16c      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   244c8:	1dfb      	adds	r3, r7, #7
   244ca:	781b      	ldrb	r3, [r3, #0]
   244cc:	2b32      	cmp	r3, #50	; 0x32
   244ce:	d116      	bne.n	244fe <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   244d0:	2384      	movs	r3, #132	; 0x84
   244d2:	18f9      	adds	r1, r7, r3
   244d4:	6838      	ldr	r0, [r7, #0]
   244d6:	2300      	movs	r3, #0
   244d8:	2218      	movs	r2, #24
   244da:	4c9f      	ldr	r4, [pc, #636]	; (24758 <m2m_wifi_cb+0x350>)
   244dc:	47a0      	blx	r4
   244de:	1e03      	subs	r3, r0, #0
   244e0:	d000      	beq.n	244e4 <m2m_wifi_cb+0xdc>
   244e2:	e15e      	b.n	247a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   244e4:	4b9d      	ldr	r3, [pc, #628]	; (2475c <m2m_wifi_cb+0x354>)
   244e6:	681b      	ldr	r3, [r3, #0]
   244e8:	2b00      	cmp	r3, #0
   244ea:	d100      	bne.n	244ee <m2m_wifi_cb+0xe6>
   244ec:	e159      	b.n	247a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   244ee:	4b9b      	ldr	r3, [pc, #620]	; (2475c <m2m_wifi_cb+0x354>)
   244f0:	681b      	ldr	r3, [r3, #0]
   244f2:	2284      	movs	r2, #132	; 0x84
   244f4:	18ba      	adds	r2, r7, r2
   244f6:	0011      	movs	r1, r2
   244f8:	2032      	movs	r0, #50	; 0x32
   244fa:	4798      	blx	r3
}
   244fc:	e151      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   244fe:	1dfb      	adds	r3, r7, #7
   24500:	781b      	ldrb	r3, [r3, #0]
   24502:	2b2f      	cmp	r3, #47	; 0x2f
   24504:	d11d      	bne.n	24542 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   24506:	230c      	movs	r3, #12
   24508:	18fb      	adds	r3, r7, r3
   2450a:	2264      	movs	r2, #100	; 0x64
   2450c:	2100      	movs	r1, #0
   2450e:	0018      	movs	r0, r3
   24510:	4b93      	ldr	r3, [pc, #588]	; (24760 <m2m_wifi_cb+0x358>)
   24512:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   24514:	230c      	movs	r3, #12
   24516:	18f9      	adds	r1, r7, r3
   24518:	6838      	ldr	r0, [r7, #0]
   2451a:	2300      	movs	r3, #0
   2451c:	2264      	movs	r2, #100	; 0x64
   2451e:	4c8e      	ldr	r4, [pc, #568]	; (24758 <m2m_wifi_cb+0x350>)
   24520:	47a0      	blx	r4
   24522:	1e03      	subs	r3, r0, #0
   24524:	d000      	beq.n	24528 <m2m_wifi_cb+0x120>
   24526:	e13c      	b.n	247a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   24528:	4b8c      	ldr	r3, [pc, #560]	; (2475c <m2m_wifi_cb+0x354>)
   2452a:	681b      	ldr	r3, [r3, #0]
   2452c:	2b00      	cmp	r3, #0
   2452e:	d100      	bne.n	24532 <m2m_wifi_cb+0x12a>
   24530:	e137      	b.n	247a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   24532:	4b8a      	ldr	r3, [pc, #552]	; (2475c <m2m_wifi_cb+0x354>)
   24534:	681b      	ldr	r3, [r3, #0]
   24536:	220c      	movs	r2, #12
   24538:	18ba      	adds	r2, r7, r2
   2453a:	0011      	movs	r1, r2
   2453c:	202f      	movs	r0, #47	; 0x2f
   2453e:	4798      	blx	r3
}
   24540:	e12f      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   24542:	1dfb      	adds	r3, r7, #7
   24544:	781b      	ldrb	r3, [r3, #0]
   24546:	2b34      	cmp	r3, #52	; 0x34
   24548:	d137      	bne.n	245ba <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   2454a:	2380      	movs	r3, #128	; 0x80
   2454c:	18f9      	adds	r1, r7, r3
   2454e:	6838      	ldr	r0, [r7, #0]
   24550:	2300      	movs	r3, #0
   24552:	2204      	movs	r2, #4
   24554:	4c80      	ldr	r4, [pc, #512]	; (24758 <m2m_wifi_cb+0x350>)
   24556:	47a0      	blx	r4
   24558:	1e03      	subs	r3, r0, #0
   2455a:	d000      	beq.n	2455e <m2m_wifi_cb+0x156>
   2455c:	e121      	b.n	247a2 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2455e:	4b81      	ldr	r3, [pc, #516]	; (24764 <m2m_wifi_cb+0x35c>)
   24560:	0018      	movs	r0, r3
   24562:	4b81      	ldr	r3, [pc, #516]	; (24768 <m2m_wifi_cb+0x360>)
   24564:	4798      	blx	r3
   24566:	2380      	movs	r3, #128	; 0x80
   24568:	18fb      	adds	r3, r7, r3
   2456a:	681b      	ldr	r3, [r3, #0]
   2456c:	0e1b      	lsrs	r3, r3, #24
   2456e:	b2db      	uxtb	r3, r3
   24570:	0019      	movs	r1, r3
   24572:	2380      	movs	r3, #128	; 0x80
   24574:	18fb      	adds	r3, r7, r3
   24576:	681b      	ldr	r3, [r3, #0]
   24578:	0c1b      	lsrs	r3, r3, #16
   2457a:	b2db      	uxtb	r3, r3
   2457c:	001a      	movs	r2, r3
   2457e:	2380      	movs	r3, #128	; 0x80
   24580:	18fb      	adds	r3, r7, r3
   24582:	681b      	ldr	r3, [r3, #0]
   24584:	0a1b      	lsrs	r3, r3, #8
   24586:	b2db      	uxtb	r3, r3
   24588:	001c      	movs	r4, r3
   2458a:	2380      	movs	r3, #128	; 0x80
   2458c:	18fb      	adds	r3, r7, r3
   2458e:	681b      	ldr	r3, [r3, #0]
   24590:	b2db      	uxtb	r3, r3
   24592:	4876      	ldr	r0, [pc, #472]	; (2476c <m2m_wifi_cb+0x364>)
   24594:	9300      	str	r3, [sp, #0]
   24596:	0023      	movs	r3, r4
   24598:	4c73      	ldr	r4, [pc, #460]	; (24768 <m2m_wifi_cb+0x360>)
   2459a:	47a0      	blx	r4
   2459c:	4b74      	ldr	r3, [pc, #464]	; (24770 <m2m_wifi_cb+0x368>)
   2459e:	0018      	movs	r0, r3
   245a0:	4b71      	ldr	r3, [pc, #452]	; (24768 <m2m_wifi_cb+0x360>)
   245a2:	4798      	blx	r3
			if (gpfAppWifiCb)
   245a4:	4b6d      	ldr	r3, [pc, #436]	; (2475c <m2m_wifi_cb+0x354>)
   245a6:	681b      	ldr	r3, [r3, #0]
   245a8:	2b00      	cmp	r3, #0
   245aa:	d100      	bne.n	245ae <m2m_wifi_cb+0x1a6>
   245ac:	e0f9      	b.n	247a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   245ae:	4b6b      	ldr	r3, [pc, #428]	; (2475c <m2m_wifi_cb+0x354>)
   245b0:	681b      	ldr	r3, [r3, #0]
   245b2:	2100      	movs	r1, #0
   245b4:	2034      	movs	r0, #52	; 0x34
   245b6:	4798      	blx	r3
}
   245b8:	e0f3      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   245ba:	1dfb      	adds	r3, r7, #7
   245bc:	781b      	ldrb	r3, [r3, #0]
   245be:	2b11      	cmp	r3, #17
   245c0:	d11e      	bne.n	24600 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   245c2:	4b6c      	ldr	r3, [pc, #432]	; (24774 <m2m_wifi_cb+0x36c>)
   245c4:	2200      	movs	r2, #0
   245c6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   245c8:	237c      	movs	r3, #124	; 0x7c
   245ca:	18f9      	adds	r1, r7, r3
   245cc:	6838      	ldr	r0, [r7, #0]
   245ce:	2300      	movs	r3, #0
   245d0:	2204      	movs	r2, #4
   245d2:	4c61      	ldr	r4, [pc, #388]	; (24758 <m2m_wifi_cb+0x350>)
   245d4:	47a0      	blx	r4
   245d6:	1e03      	subs	r3, r0, #0
   245d8:	d000      	beq.n	245dc <m2m_wifi_cb+0x1d4>
   245da:	e0e2      	b.n	247a2 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   245dc:	237c      	movs	r3, #124	; 0x7c
   245de:	18fb      	adds	r3, r7, r3
   245e0:	781a      	ldrb	r2, [r3, #0]
   245e2:	4b65      	ldr	r3, [pc, #404]	; (24778 <m2m_wifi_cb+0x370>)
   245e4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   245e6:	4b5d      	ldr	r3, [pc, #372]	; (2475c <m2m_wifi_cb+0x354>)
   245e8:	681b      	ldr	r3, [r3, #0]
   245ea:	2b00      	cmp	r3, #0
   245ec:	d100      	bne.n	245f0 <m2m_wifi_cb+0x1e8>
   245ee:	e0d8      	b.n	247a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   245f0:	4b5a      	ldr	r3, [pc, #360]	; (2475c <m2m_wifi_cb+0x354>)
   245f2:	681b      	ldr	r3, [r3, #0]
   245f4:	227c      	movs	r2, #124	; 0x7c
   245f6:	18ba      	adds	r2, r7, r2
   245f8:	0011      	movs	r1, r2
   245fa:	2011      	movs	r0, #17
   245fc:	4798      	blx	r3
}
   245fe:	e0d0      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   24600:	1dfb      	adds	r3, r7, #7
   24602:	781b      	ldrb	r3, [r3, #0]
   24604:	2b13      	cmp	r3, #19
   24606:	d116      	bne.n	24636 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   24608:	230c      	movs	r3, #12
   2460a:	18f9      	adds	r1, r7, r3
   2460c:	6838      	ldr	r0, [r7, #0]
   2460e:	2300      	movs	r3, #0
   24610:	222c      	movs	r2, #44	; 0x2c
   24612:	4c51      	ldr	r4, [pc, #324]	; (24758 <m2m_wifi_cb+0x350>)
   24614:	47a0      	blx	r4
   24616:	1e03      	subs	r3, r0, #0
   24618:	d000      	beq.n	2461c <m2m_wifi_cb+0x214>
   2461a:	e0c2      	b.n	247a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2461c:	4b4f      	ldr	r3, [pc, #316]	; (2475c <m2m_wifi_cb+0x354>)
   2461e:	681b      	ldr	r3, [r3, #0]
   24620:	2b00      	cmp	r3, #0
   24622:	d100      	bne.n	24626 <m2m_wifi_cb+0x21e>
   24624:	e0bd      	b.n	247a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   24626:	4b4d      	ldr	r3, [pc, #308]	; (2475c <m2m_wifi_cb+0x354>)
   24628:	681b      	ldr	r3, [r3, #0]
   2462a:	220c      	movs	r2, #12
   2462c:	18ba      	adds	r2, r7, r2
   2462e:	0011      	movs	r1, r2
   24630:	2013      	movs	r0, #19
   24632:	4798      	blx	r3
}
   24634:	e0b5      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   24636:	1dfb      	adds	r3, r7, #7
   24638:	781b      	ldrb	r3, [r3, #0]
   2463a:	2b04      	cmp	r3, #4
   2463c:	d116      	bne.n	2466c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   2463e:	23a8      	movs	r3, #168	; 0xa8
   24640:	18f9      	adds	r1, r7, r3
   24642:	6838      	ldr	r0, [r7, #0]
   24644:	2300      	movs	r3, #0
   24646:	2204      	movs	r2, #4
   24648:	4c43      	ldr	r4, [pc, #268]	; (24758 <m2m_wifi_cb+0x350>)
   2464a:	47a0      	blx	r4
   2464c:	1e03      	subs	r3, r0, #0
   2464e:	d000      	beq.n	24652 <m2m_wifi_cb+0x24a>
   24650:	e0a7      	b.n	247a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   24652:	4b42      	ldr	r3, [pc, #264]	; (2475c <m2m_wifi_cb+0x354>)
   24654:	681b      	ldr	r3, [r3, #0]
   24656:	2b00      	cmp	r3, #0
   24658:	d100      	bne.n	2465c <m2m_wifi_cb+0x254>
   2465a:	e0a2      	b.n	247a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   2465c:	4b3f      	ldr	r3, [pc, #252]	; (2475c <m2m_wifi_cb+0x354>)
   2465e:	681b      	ldr	r3, [r3, #0]
   24660:	22a8      	movs	r2, #168	; 0xa8
   24662:	18ba      	adds	r2, r7, r2
   24664:	0011      	movs	r1, r2
   24666:	2004      	movs	r0, #4
   24668:	4798      	blx	r3
}
   2466a:	e09a      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   2466c:	1dfb      	adds	r3, r7, #7
   2466e:	781b      	ldrb	r3, [r3, #0]
   24670:	2b65      	cmp	r3, #101	; 0x65
   24672:	d116      	bne.n	246a2 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   24674:	23a8      	movs	r3, #168	; 0xa8
   24676:	18f9      	adds	r1, r7, r3
   24678:	6838      	ldr	r0, [r7, #0]
   2467a:	2300      	movs	r3, #0
   2467c:	2204      	movs	r2, #4
   2467e:	4c36      	ldr	r4, [pc, #216]	; (24758 <m2m_wifi_cb+0x350>)
   24680:	47a0      	blx	r4
   24682:	1e03      	subs	r3, r0, #0
   24684:	d000      	beq.n	24688 <m2m_wifi_cb+0x280>
   24686:	e08c      	b.n	247a2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   24688:	4b34      	ldr	r3, [pc, #208]	; (2475c <m2m_wifi_cb+0x354>)
   2468a:	681b      	ldr	r3, [r3, #0]
   2468c:	2b00      	cmp	r3, #0
   2468e:	d100      	bne.n	24692 <m2m_wifi_cb+0x28a>
   24690:	e087      	b.n	247a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   24692:	4b32      	ldr	r3, [pc, #200]	; (2475c <m2m_wifi_cb+0x354>)
   24694:	681b      	ldr	r3, [r3, #0]
   24696:	22a8      	movs	r2, #168	; 0xa8
   24698:	18ba      	adds	r2, r7, r2
   2469a:	0011      	movs	r1, r2
   2469c:	2065      	movs	r0, #101	; 0x65
   2469e:	4798      	blx	r3
}
   246a0:	e07f      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   246a2:	1dfb      	adds	r3, r7, #7
   246a4:	781b      	ldrb	r3, [r3, #0]
   246a6:	2b09      	cmp	r3, #9
   246a8:	d116      	bne.n	246d8 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   246aa:	230c      	movs	r3, #12
   246ac:	18f9      	adds	r1, r7, r3
   246ae:	6838      	ldr	r0, [r7, #0]
   246b0:	2301      	movs	r3, #1
   246b2:	2264      	movs	r2, #100	; 0x64
   246b4:	4c28      	ldr	r4, [pc, #160]	; (24758 <m2m_wifi_cb+0x350>)
   246b6:	47a0      	blx	r4
   246b8:	1e03      	subs	r3, r0, #0
   246ba:	d000      	beq.n	246be <m2m_wifi_cb+0x2b6>
   246bc:	e071      	b.n	247a2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   246be:	4b27      	ldr	r3, [pc, #156]	; (2475c <m2m_wifi_cb+0x354>)
   246c0:	681b      	ldr	r3, [r3, #0]
   246c2:	2b00      	cmp	r3, #0
   246c4:	d100      	bne.n	246c8 <m2m_wifi_cb+0x2c0>
   246c6:	e06c      	b.n	247a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   246c8:	4b24      	ldr	r3, [pc, #144]	; (2475c <m2m_wifi_cb+0x354>)
   246ca:	681b      	ldr	r3, [r3, #0]
   246cc:	220c      	movs	r2, #12
   246ce:	18ba      	adds	r2, r7, r2
   246d0:	0011      	movs	r1, r2
   246d2:	2009      	movs	r0, #9
   246d4:	4798      	blx	r3
}
   246d6:	e064      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   246d8:	1dfb      	adds	r3, r7, #7
   246da:	781b      	ldrb	r3, [r3, #0]
   246dc:	2b2a      	cmp	r3, #42	; 0x2a
   246de:	d114      	bne.n	2470a <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   246e0:	2378      	movs	r3, #120	; 0x78
   246e2:	18f9      	adds	r1, r7, r3
   246e4:	6838      	ldr	r0, [r7, #0]
   246e6:	2301      	movs	r3, #1
   246e8:	2204      	movs	r2, #4
   246ea:	4c1b      	ldr	r4, [pc, #108]	; (24758 <m2m_wifi_cb+0x350>)
   246ec:	47a0      	blx	r4
   246ee:	1e03      	subs	r3, r0, #0
   246f0:	d157      	bne.n	247a2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   246f2:	4b1a      	ldr	r3, [pc, #104]	; (2475c <m2m_wifi_cb+0x354>)
   246f4:	681b      	ldr	r3, [r3, #0]
   246f6:	2b00      	cmp	r3, #0
   246f8:	d053      	beq.n	247a2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   246fa:	4b18      	ldr	r3, [pc, #96]	; (2475c <m2m_wifi_cb+0x354>)
   246fc:	681b      	ldr	r3, [r3, #0]
   246fe:	2278      	movs	r2, #120	; 0x78
   24700:	18ba      	adds	r2, r7, r2
   24702:	0011      	movs	r1, r2
   24704:	202a      	movs	r0, #42	; 0x2a
   24706:	4798      	blx	r3
}
   24708:	e04b      	b.n	247a2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   2470a:	1dfb      	adds	r3, r7, #7
   2470c:	781b      	ldrb	r3, [r3, #0]
   2470e:	2b20      	cmp	r3, #32
   24710:	d134      	bne.n	2477c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   24712:	2370      	movs	r3, #112	; 0x70
   24714:	18f9      	adds	r1, r7, r3
   24716:	6838      	ldr	r0, [r7, #0]
   24718:	2300      	movs	r3, #0
   2471a:	2208      	movs	r2, #8
   2471c:	4c0e      	ldr	r4, [pc, #56]	; (24758 <m2m_wifi_cb+0x350>)
   2471e:	47a0      	blx	r4
   24720:	1e03      	subs	r3, r0, #0
   24722:	d13e      	bne.n	247a2 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   24724:	683b      	ldr	r3, [r7, #0]
   24726:	3308      	adds	r3, #8
   24728:	0018      	movs	r0, r3
   2472a:	2370      	movs	r3, #112	; 0x70
   2472c:	18fb      	adds	r3, r7, r3
   2472e:	6819      	ldr	r1, [r3, #0]
   24730:	2370      	movs	r3, #112	; 0x70
   24732:	18fb      	adds	r3, r7, r3
   24734:	889a      	ldrh	r2, [r3, #4]
   24736:	2301      	movs	r3, #1
   24738:	4c07      	ldr	r4, [pc, #28]	; (24758 <m2m_wifi_cb+0x350>)
   2473a:	47a0      	blx	r4
   2473c:	1e03      	subs	r3, r0, #0
   2473e:	d130      	bne.n	247a2 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   24740:	4b06      	ldr	r3, [pc, #24]	; (2475c <m2m_wifi_cb+0x354>)
   24742:	681b      	ldr	r3, [r3, #0]
   24744:	2b00      	cmp	r3, #0
   24746:	d02c      	beq.n	247a2 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   24748:	4b04      	ldr	r3, [pc, #16]	; (2475c <m2m_wifi_cb+0x354>)
   2474a:	681b      	ldr	r3, [r3, #0]
   2474c:	2270      	movs	r2, #112	; 0x70
   2474e:	18ba      	adds	r2, r7, r2
   24750:	0011      	movs	r1, r2
   24752:	2020      	movs	r0, #32
   24754:	4798      	blx	r3
}
   24756:	e024      	b.n	247a2 <m2m_wifi_cb+0x39a>
   24758:	000241cd 	.word	0x000241cd
   2475c:	200041d4 	.word	0x200041d4
   24760:	00023651 	.word	0x00023651
   24764:	0003b80c 	.word	0x0003b80c
   24768:	00020889 	.word	0x00020889
   2476c:	0003b818 	.word	0x0003b818
   24770:	0003b838 	.word	0x0003b838
   24774:	200041d1 	.word	0x200041d1
   24778:	200041d0 	.word	0x200041d0
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   2477c:	2324      	movs	r3, #36	; 0x24
   2477e:	33ff      	adds	r3, #255	; 0xff
   24780:	001a      	movs	r2, r3
   24782:	490a      	ldr	r1, [pc, #40]	; (247ac <m2m_wifi_cb+0x3a4>)
   24784:	4b0a      	ldr	r3, [pc, #40]	; (247b0 <m2m_wifi_cb+0x3a8>)
   24786:	0018      	movs	r0, r3
   24788:	4b0a      	ldr	r3, [pc, #40]	; (247b4 <m2m_wifi_cb+0x3ac>)
   2478a:	4798      	blx	r3
   2478c:	1dfb      	adds	r3, r7, #7
   2478e:	781a      	ldrb	r2, [r3, #0]
   24790:	4b09      	ldr	r3, [pc, #36]	; (247b8 <m2m_wifi_cb+0x3b0>)
   24792:	0011      	movs	r1, r2
   24794:	0018      	movs	r0, r3
   24796:	4b07      	ldr	r3, [pc, #28]	; (247b4 <m2m_wifi_cb+0x3ac>)
   24798:	4798      	blx	r3
   2479a:	4b08      	ldr	r3, [pc, #32]	; (247bc <m2m_wifi_cb+0x3b4>)
   2479c:	0018      	movs	r0, r3
   2479e:	4b05      	ldr	r3, [pc, #20]	; (247b4 <m2m_wifi_cb+0x3ac>)
   247a0:	4798      	blx	r3
}
   247a2:	46c0      	nop			; (mov r8, r8)
   247a4:	46bd      	mov	sp, r7
   247a6:	b02d      	add	sp, #180	; 0xb4
   247a8:	bd90      	pop	{r4, r7, pc}
   247aa:	46c0      	nop			; (mov r8, r8)
   247ac:	0003bbd8 	.word	0x0003bbd8
   247b0:	0003b83c 	.word	0x0003b83c
   247b4:	00020889 	.word	0x00020889
   247b8:	0003b850 	.word	0x0003b850
   247bc:	0003b838 	.word	0x0003b838

000247c0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   247c0:	b590      	push	{r4, r7, lr}
   247c2:	b091      	sub	sp, #68	; 0x44
   247c4:	af02      	add	r7, sp, #8
   247c6:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   247c8:	2337      	movs	r3, #55	; 0x37
   247ca:	18fb      	adds	r3, r7, r3
   247cc:	2200      	movs	r2, #0
   247ce:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   247d0:	230b      	movs	r3, #11
   247d2:	18fb      	adds	r3, r7, r3
   247d4:	2201      	movs	r2, #1
   247d6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   247d8:	687b      	ldr	r3, [r7, #4]
   247da:	2b00      	cmp	r3, #0
   247dc:	d104      	bne.n	247e8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   247de:	2337      	movs	r3, #55	; 0x37
   247e0:	18fb      	adds	r3, r7, r3
   247e2:	22f4      	movs	r2, #244	; 0xf4
   247e4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   247e6:	e0b3      	b.n	24950 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   247e8:	687b      	ldr	r3, [r7, #4]
   247ea:	681a      	ldr	r2, [r3, #0]
   247ec:	4b5c      	ldr	r3, [pc, #368]	; (24960 <m2m_wifi_init+0x1a0>)
   247ee:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   247f0:	4b5c      	ldr	r3, [pc, #368]	; (24964 <m2m_wifi_init+0x1a4>)
   247f2:	2200      	movs	r2, #0
   247f4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   247f6:	2337      	movs	r3, #55	; 0x37
   247f8:	18fc      	adds	r4, r7, r3
   247fa:	230b      	movs	r3, #11
   247fc:	18fb      	adds	r3, r7, r3
   247fe:	0018      	movs	r0, r3
   24800:	4b59      	ldr	r3, [pc, #356]	; (24968 <m2m_wifi_init+0x1a8>)
   24802:	4798      	blx	r3
   24804:	0003      	movs	r3, r0
   24806:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   24808:	2337      	movs	r3, #55	; 0x37
   2480a:	18fb      	adds	r3, r7, r3
   2480c:	781b      	ldrb	r3, [r3, #0]
   2480e:	b25b      	sxtb	r3, r3
   24810:	2b00      	cmp	r3, #0
   24812:	d000      	beq.n	24816 <m2m_wifi_init+0x56>
   24814:	e099      	b.n	2494a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   24816:	2337      	movs	r3, #55	; 0x37
   24818:	18fc      	adds	r4, r7, r3
   2481a:	2000      	movs	r0, #0
   2481c:	4b53      	ldr	r3, [pc, #332]	; (2496c <m2m_wifi_init+0x1ac>)
   2481e:	4798      	blx	r3
   24820:	0003      	movs	r3, r0
   24822:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   24824:	2337      	movs	r3, #55	; 0x37
   24826:	18fb      	adds	r3, r7, r3
   24828:	781b      	ldrb	r3, [r3, #0]
   2482a:	b25b      	sxtb	r3, r3
   2482c:	2b00      	cmp	r3, #0
   2482e:	d000      	beq.n	24832 <m2m_wifi_init+0x72>
   24830:	e086      	b.n	24940 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   24832:	4b4f      	ldr	r3, [pc, #316]	; (24970 <m2m_wifi_init+0x1b0>)
   24834:	0019      	movs	r1, r3
   24836:	2001      	movs	r0, #1
   24838:	4b4e      	ldr	r3, [pc, #312]	; (24974 <m2m_wifi_init+0x1b4>)
   2483a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   2483c:	2337      	movs	r3, #55	; 0x37
   2483e:	18fc      	adds	r4, r7, r3
   24840:	230c      	movs	r3, #12
   24842:	18fb      	adds	r3, r7, r3
   24844:	0018      	movs	r0, r3
   24846:	4b4c      	ldr	r3, [pc, #304]	; (24978 <m2m_wifi_init+0x1b8>)
   24848:	4798      	blx	r3
   2484a:	0003      	movs	r3, r0
   2484c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   2484e:	4b4b      	ldr	r3, [pc, #300]	; (2497c <m2m_wifi_init+0x1bc>)
   24850:	0018      	movs	r0, r3
   24852:	4b4b      	ldr	r3, [pc, #300]	; (24980 <m2m_wifi_init+0x1c0>)
   24854:	4798      	blx	r3
   24856:	230c      	movs	r3, #12
   24858:	18fb      	adds	r3, r7, r3
   2485a:	791b      	ldrb	r3, [r3, #4]
   2485c:	0019      	movs	r1, r3
   2485e:	230c      	movs	r3, #12
   24860:	18fb      	adds	r3, r7, r3
   24862:	795b      	ldrb	r3, [r3, #5]
   24864:	001a      	movs	r2, r3
   24866:	230c      	movs	r3, #12
   24868:	18fb      	adds	r3, r7, r3
   2486a:	799b      	ldrb	r3, [r3, #6]
   2486c:	001c      	movs	r4, r3
   2486e:	230c      	movs	r3, #12
   24870:	18fb      	adds	r3, r7, r3
   24872:	8c1b      	ldrh	r3, [r3, #32]
   24874:	4843      	ldr	r0, [pc, #268]	; (24984 <m2m_wifi_init+0x1c4>)
   24876:	9300      	str	r3, [sp, #0]
   24878:	0023      	movs	r3, r4
   2487a:	4c41      	ldr	r4, [pc, #260]	; (24980 <m2m_wifi_init+0x1c0>)
   2487c:	47a0      	blx	r4
   2487e:	4b42      	ldr	r3, [pc, #264]	; (24988 <m2m_wifi_init+0x1c8>)
   24880:	0018      	movs	r0, r3
   24882:	4b3f      	ldr	r3, [pc, #252]	; (24980 <m2m_wifi_init+0x1c0>)
   24884:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   24886:	4b3d      	ldr	r3, [pc, #244]	; (2497c <m2m_wifi_init+0x1bc>)
   24888:	0018      	movs	r0, r3
   2488a:	4b3d      	ldr	r3, [pc, #244]	; (24980 <m2m_wifi_init+0x1c0>)
   2488c:	4798      	blx	r3
   2488e:	230c      	movs	r3, #12
   24890:	18fb      	adds	r3, r7, r3
   24892:	3316      	adds	r3, #22
   24894:	001a      	movs	r2, r3
   24896:	230c      	movs	r3, #12
   24898:	18fb      	adds	r3, r7, r3
   2489a:	330a      	adds	r3, #10
   2489c:	0019      	movs	r1, r3
   2489e:	4b3b      	ldr	r3, [pc, #236]	; (2498c <m2m_wifi_init+0x1cc>)
   248a0:	0018      	movs	r0, r3
   248a2:	4b37      	ldr	r3, [pc, #220]	; (24980 <m2m_wifi_init+0x1c0>)
   248a4:	4798      	blx	r3
   248a6:	4b38      	ldr	r3, [pc, #224]	; (24988 <m2m_wifi_init+0x1c8>)
   248a8:	0018      	movs	r0, r3
   248aa:	4b35      	ldr	r3, [pc, #212]	; (24980 <m2m_wifi_init+0x1c0>)
   248ac:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   248ae:	4b33      	ldr	r3, [pc, #204]	; (2497c <m2m_wifi_init+0x1bc>)
   248b0:	0018      	movs	r0, r3
   248b2:	4b33      	ldr	r3, [pc, #204]	; (24980 <m2m_wifi_init+0x1c0>)
   248b4:	4798      	blx	r3
   248b6:	230c      	movs	r3, #12
   248b8:	18fb      	adds	r3, r7, r3
   248ba:	79db      	ldrb	r3, [r3, #7]
   248bc:	0019      	movs	r1, r3
   248be:	230c      	movs	r3, #12
   248c0:	18fb      	adds	r3, r7, r3
   248c2:	7a1b      	ldrb	r3, [r3, #8]
   248c4:	001a      	movs	r2, r3
   248c6:	230c      	movs	r3, #12
   248c8:	18fb      	adds	r3, r7, r3
   248ca:	7a5b      	ldrb	r3, [r3, #9]
   248cc:	4830      	ldr	r0, [pc, #192]	; (24990 <m2m_wifi_init+0x1d0>)
   248ce:	4c2c      	ldr	r4, [pc, #176]	; (24980 <m2m_wifi_init+0x1c0>)
   248d0:	47a0      	blx	r4
   248d2:	4b2d      	ldr	r3, [pc, #180]	; (24988 <m2m_wifi_init+0x1c8>)
   248d4:	0018      	movs	r0, r3
   248d6:	4b2a      	ldr	r3, [pc, #168]	; (24980 <m2m_wifi_init+0x1c0>)
   248d8:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   248da:	4b28      	ldr	r3, [pc, #160]	; (2497c <m2m_wifi_init+0x1bc>)
   248dc:	0018      	movs	r0, r3
   248de:	4b28      	ldr	r3, [pc, #160]	; (24980 <m2m_wifi_init+0x1c0>)
   248e0:	4798      	blx	r3
   248e2:	482c      	ldr	r0, [pc, #176]	; (24994 <m2m_wifi_init+0x1d4>)
   248e4:	2304      	movs	r3, #4
   248e6:	2205      	movs	r2, #5
   248e8:	2113      	movs	r1, #19
   248ea:	4c25      	ldr	r4, [pc, #148]	; (24980 <m2m_wifi_init+0x1c0>)
   248ec:	47a0      	blx	r4
   248ee:	4b26      	ldr	r3, [pc, #152]	; (24988 <m2m_wifi_init+0x1c8>)
   248f0:	0018      	movs	r0, r3
   248f2:	4b23      	ldr	r3, [pc, #140]	; (24980 <m2m_wifi_init+0x1c0>)
   248f4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   248f6:	4b21      	ldr	r3, [pc, #132]	; (2497c <m2m_wifi_init+0x1bc>)
   248f8:	0018      	movs	r0, r3
   248fa:	4b21      	ldr	r3, [pc, #132]	; (24980 <m2m_wifi_init+0x1c0>)
   248fc:	4798      	blx	r3
   248fe:	4a26      	ldr	r2, [pc, #152]	; (24998 <m2m_wifi_init+0x1d8>)
   24900:	4926      	ldr	r1, [pc, #152]	; (2499c <m2m_wifi_init+0x1dc>)
   24902:	4b27      	ldr	r3, [pc, #156]	; (249a0 <m2m_wifi_init+0x1e0>)
   24904:	0018      	movs	r0, r3
   24906:	4b1e      	ldr	r3, [pc, #120]	; (24980 <m2m_wifi_init+0x1c0>)
   24908:	4798      	blx	r3
   2490a:	4b1f      	ldr	r3, [pc, #124]	; (24988 <m2m_wifi_init+0x1c8>)
   2490c:	0018      	movs	r0, r3
   2490e:	4b1c      	ldr	r3, [pc, #112]	; (24980 <m2m_wifi_init+0x1c0>)
   24910:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   24912:	2337      	movs	r3, #55	; 0x37
   24914:	18fb      	adds	r3, r7, r3
   24916:	781b      	ldrb	r3, [r3, #0]
   24918:	b25b      	sxtb	r3, r3
   2491a:	330d      	adds	r3, #13
   2491c:	d117      	bne.n	2494e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   2491e:	23e8      	movs	r3, #232	; 0xe8
   24920:	33ff      	adds	r3, #255	; 0xff
   24922:	001a      	movs	r2, r3
   24924:	491f      	ldr	r1, [pc, #124]	; (249a4 <m2m_wifi_init+0x1e4>)
   24926:	4b20      	ldr	r3, [pc, #128]	; (249a8 <m2m_wifi_init+0x1e8>)
   24928:	0018      	movs	r0, r3
   2492a:	4b15      	ldr	r3, [pc, #84]	; (24980 <m2m_wifi_init+0x1c0>)
   2492c:	4798      	blx	r3
   2492e:	4b1f      	ldr	r3, [pc, #124]	; (249ac <m2m_wifi_init+0x1ec>)
   24930:	0018      	movs	r0, r3
   24932:	4b13      	ldr	r3, [pc, #76]	; (24980 <m2m_wifi_init+0x1c0>)
   24934:	4798      	blx	r3
   24936:	4b14      	ldr	r3, [pc, #80]	; (24988 <m2m_wifi_init+0x1c8>)
   24938:	0018      	movs	r0, r3
   2493a:	4b11      	ldr	r3, [pc, #68]	; (24980 <m2m_wifi_init+0x1c0>)
   2493c:	4798      	blx	r3
	}

	goto _EXIT0;
   2493e:	e006      	b.n	2494e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   24940:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   24942:	2000      	movs	r0, #0
   24944:	4b1a      	ldr	r3, [pc, #104]	; (249b0 <m2m_wifi_init+0x1f0>)
   24946:	4798      	blx	r3
   24948:	e002      	b.n	24950 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   2494a:	46c0      	nop			; (mov r8, r8)
   2494c:	e000      	b.n	24950 <m2m_wifi_init+0x190>
	goto _EXIT0;
   2494e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   24950:	2337      	movs	r3, #55	; 0x37
   24952:	18fb      	adds	r3, r7, r3
   24954:	781b      	ldrb	r3, [r3, #0]
   24956:	b25b      	sxtb	r3, r3
}
   24958:	0018      	movs	r0, r3
   2495a:	46bd      	mov	sp, r7
   2495c:	b00f      	add	sp, #60	; 0x3c
   2495e:	bd90      	pop	{r4, r7, pc}
   24960:	200041d4 	.word	0x200041d4
   24964:	200041d1 	.word	0x200041d1
   24968:	00025ae5 	.word	0x00025ae5
   2496c:	00023869 	.word	0x00023869
   24970:	00024409 	.word	0x00024409
   24974:	0002434d 	.word	0x0002434d
   24978:	00025919 	.word	0x00025919
   2497c:	0003b80c 	.word	0x0003b80c
   24980:	00020889 	.word	0x00020889
   24984:	0003b9b0 	.word	0x0003b9b0
   24988:	0003b838 	.word	0x0003b838
   2498c:	0003b9d8 	.word	0x0003b9d8
   24990:	0003b9f4 	.word	0x0003b9f4
   24994:	0003ba18 	.word	0x0003ba18
   24998:	0003ba30 	.word	0x0003ba30
   2499c:	0003ba3c 	.word	0x0003ba3c
   249a0:	0003ba48 	.word	0x0003ba48
   249a4:	0003bbe4 	.word	0x0003bbe4
   249a8:	0003b83c 	.word	0x0003b83c
   249ac:	0003ba60 	.word	0x0003ba60
   249b0:	00025c75 	.word	0x00025c75

000249b4 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   249b4:	b580      	push	{r7, lr}
   249b6:	b082      	sub	sp, #8
   249b8:	af00      	add	r7, sp, #0
   249ba:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   249bc:	4b03      	ldr	r3, [pc, #12]	; (249cc <m2m_wifi_handle_events+0x18>)
   249be:	4798      	blx	r3
   249c0:	0003      	movs	r3, r0
}
   249c2:	0018      	movs	r0, r3
   249c4:	46bd      	mov	sp, r7
   249c6:	b002      	add	sp, #8
   249c8:	bd80      	pop	{r7, pc}
   249ca:	46c0      	nop			; (mov r8, r8)
   249cc:	0002412d 	.word	0x0002412d

000249d0 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   249d0:	b590      	push	{r4, r7, lr}
   249d2:	b087      	sub	sp, #28
   249d4:	af02      	add	r7, sp, #8
   249d6:	60f8      	str	r0, [r7, #12]
   249d8:	0008      	movs	r0, r1
   249da:	0011      	movs	r1, r2
   249dc:	607b      	str	r3, [r7, #4]
   249de:	230b      	movs	r3, #11
   249e0:	18fb      	adds	r3, r7, r3
   249e2:	1c02      	adds	r2, r0, #0
   249e4:	701a      	strb	r2, [r3, #0]
   249e6:	230a      	movs	r3, #10
   249e8:	18fb      	adds	r3, r7, r3
   249ea:	1c0a      	adds	r2, r1, #0
   249ec:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   249ee:	687c      	ldr	r4, [r7, #4]
   249f0:	230a      	movs	r3, #10
   249f2:	18fb      	adds	r3, r7, r3
   249f4:	781a      	ldrb	r2, [r3, #0]
   249f6:	230b      	movs	r3, #11
   249f8:	18fb      	adds	r3, r7, r3
   249fa:	7819      	ldrb	r1, [r3, #0]
   249fc:	68f8      	ldr	r0, [r7, #12]
   249fe:	2300      	movs	r3, #0
   24a00:	9301      	str	r3, [sp, #4]
   24a02:	2320      	movs	r3, #32
   24a04:	18fb      	adds	r3, r7, r3
   24a06:	881b      	ldrh	r3, [r3, #0]
   24a08:	9300      	str	r3, [sp, #0]
   24a0a:	0023      	movs	r3, r4
   24a0c:	4c03      	ldr	r4, [pc, #12]	; (24a1c <m2m_wifi_connect+0x4c>)
   24a0e:	47a0      	blx	r4
   24a10:	0003      	movs	r3, r0
}
   24a12:	0018      	movs	r0, r3
   24a14:	46bd      	mov	sp, r7
   24a16:	b005      	add	sp, #20
   24a18:	bd90      	pop	{r4, r7, pc}
   24a1a:	46c0      	nop			; (mov r8, r8)
   24a1c:	00024a21 	.word	0x00024a21

00024a20 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   24a20:	b5b0      	push	{r4, r5, r7, lr}
   24a22:	b0aa      	sub	sp, #168	; 0xa8
   24a24:	af04      	add	r7, sp, #16
   24a26:	60f8      	str	r0, [r7, #12]
   24a28:	0008      	movs	r0, r1
   24a2a:	0011      	movs	r1, r2
   24a2c:	607b      	str	r3, [r7, #4]
   24a2e:	230b      	movs	r3, #11
   24a30:	18fb      	adds	r3, r7, r3
   24a32:	1c02      	adds	r2, r0, #0
   24a34:	701a      	strb	r2, [r3, #0]
   24a36:	230a      	movs	r3, #10
   24a38:	18fb      	adds	r3, r7, r3
   24a3a:	1c0a      	adds	r2, r1, #0
   24a3c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   24a3e:	2397      	movs	r3, #151	; 0x97
   24a40:	18fb      	adds	r3, r7, r3
   24a42:	2200      	movs	r2, #0
   24a44:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   24a46:	230a      	movs	r3, #10
   24a48:	18fb      	adds	r3, r7, r3
   24a4a:	781b      	ldrb	r3, [r3, #0]
   24a4c:	2b01      	cmp	r3, #1
   24a4e:	d100      	bne.n	24a52 <m2m_wifi_connect_sc+0x32>
   24a50:	e085      	b.n	24b5e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   24a52:	687b      	ldr	r3, [r7, #4]
   24a54:	2b00      	cmp	r3, #0
   24a56:	d112      	bne.n	24a7e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   24a58:	4ad8      	ldr	r2, [pc, #864]	; (24dbc <m2m_wifi_connect_sc+0x39c>)
   24a5a:	49d9      	ldr	r1, [pc, #868]	; (24dc0 <m2m_wifi_connect_sc+0x3a0>)
   24a5c:	4bd9      	ldr	r3, [pc, #868]	; (24dc4 <m2m_wifi_connect_sc+0x3a4>)
   24a5e:	0018      	movs	r0, r3
   24a60:	4bd9      	ldr	r3, [pc, #868]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24a62:	4798      	blx	r3
   24a64:	4bd9      	ldr	r3, [pc, #868]	; (24dcc <m2m_wifi_connect_sc+0x3ac>)
   24a66:	0018      	movs	r0, r3
   24a68:	4bd7      	ldr	r3, [pc, #860]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24a6a:	4798      	blx	r3
   24a6c:	4bd8      	ldr	r3, [pc, #864]	; (24dd0 <m2m_wifi_connect_sc+0x3b0>)
   24a6e:	0018      	movs	r0, r3
   24a70:	4bd5      	ldr	r3, [pc, #852]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24a72:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   24a74:	2397      	movs	r3, #151	; 0x97
   24a76:	18fb      	adds	r3, r7, r3
   24a78:	22f4      	movs	r2, #244	; 0xf4
   24a7a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24a7c:	e1f9      	b.n	24e72 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   24a7e:	230a      	movs	r3, #10
   24a80:	18fb      	adds	r3, r7, r3
   24a82:	781b      	ldrb	r3, [r3, #0]
   24a84:	2b02      	cmp	r3, #2
   24a86:	d16a      	bne.n	24b5e <m2m_wifi_connect_sc+0x13e>
   24a88:	687b      	ldr	r3, [r7, #4]
   24a8a:	0018      	movs	r0, r3
   24a8c:	4bd1      	ldr	r3, [pc, #836]	; (24dd4 <m2m_wifi_connect_sc+0x3b4>)
   24a8e:	4798      	blx	r3
   24a90:	0003      	movs	r3, r0
   24a92:	2b40      	cmp	r3, #64	; 0x40
   24a94:	d163      	bne.n	24b5e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   24a96:	2396      	movs	r3, #150	; 0x96
   24a98:	18fb      	adds	r3, r7, r3
   24a9a:	2200      	movs	r2, #0
   24a9c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   24a9e:	687b      	ldr	r3, [r7, #4]
   24aa0:	2290      	movs	r2, #144	; 0x90
   24aa2:	18ba      	adds	r2, r7, r2
   24aa4:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   24aa6:	e055      	b.n	24b54 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   24aa8:	2396      	movs	r3, #150	; 0x96
   24aaa:	18fb      	adds	r3, r7, r3
   24aac:	781b      	ldrb	r3, [r3, #0]
   24aae:	2290      	movs	r2, #144	; 0x90
   24ab0:	18ba      	adds	r2, r7, r2
   24ab2:	6812      	ldr	r2, [r2, #0]
   24ab4:	18d3      	adds	r3, r2, r3
   24ab6:	781b      	ldrb	r3, [r3, #0]
   24ab8:	2b2f      	cmp	r3, #47	; 0x2f
   24aba:	d931      	bls.n	24b20 <m2m_wifi_connect_sc+0x100>
   24abc:	2396      	movs	r3, #150	; 0x96
   24abe:	18fb      	adds	r3, r7, r3
   24ac0:	781b      	ldrb	r3, [r3, #0]
   24ac2:	2290      	movs	r2, #144	; 0x90
   24ac4:	18ba      	adds	r2, r7, r2
   24ac6:	6812      	ldr	r2, [r2, #0]
   24ac8:	18d3      	adds	r3, r2, r3
   24aca:	781b      	ldrb	r3, [r3, #0]
   24acc:	2b39      	cmp	r3, #57	; 0x39
   24ace:	d909      	bls.n	24ae4 <m2m_wifi_connect_sc+0xc4>
   24ad0:	2396      	movs	r3, #150	; 0x96
   24ad2:	18fb      	adds	r3, r7, r3
   24ad4:	781b      	ldrb	r3, [r3, #0]
   24ad6:	2290      	movs	r2, #144	; 0x90
   24ad8:	18ba      	adds	r2, r7, r2
   24ada:	6812      	ldr	r2, [r2, #0]
   24adc:	18d3      	adds	r3, r2, r3
   24ade:	781b      	ldrb	r3, [r3, #0]
   24ae0:	2b40      	cmp	r3, #64	; 0x40
   24ae2:	d91d      	bls.n	24b20 <m2m_wifi_connect_sc+0x100>
   24ae4:	2396      	movs	r3, #150	; 0x96
   24ae6:	18fb      	adds	r3, r7, r3
   24ae8:	781b      	ldrb	r3, [r3, #0]
   24aea:	2290      	movs	r2, #144	; 0x90
   24aec:	18ba      	adds	r2, r7, r2
   24aee:	6812      	ldr	r2, [r2, #0]
   24af0:	18d3      	adds	r3, r2, r3
   24af2:	781b      	ldrb	r3, [r3, #0]
   24af4:	2b46      	cmp	r3, #70	; 0x46
   24af6:	d909      	bls.n	24b0c <m2m_wifi_connect_sc+0xec>
   24af8:	2396      	movs	r3, #150	; 0x96
   24afa:	18fb      	adds	r3, r7, r3
   24afc:	781b      	ldrb	r3, [r3, #0]
   24afe:	2290      	movs	r2, #144	; 0x90
   24b00:	18ba      	adds	r2, r7, r2
   24b02:	6812      	ldr	r2, [r2, #0]
   24b04:	18d3      	adds	r3, r2, r3
   24b06:	781b      	ldrb	r3, [r3, #0]
   24b08:	2b60      	cmp	r3, #96	; 0x60
   24b0a:	d909      	bls.n	24b20 <m2m_wifi_connect_sc+0x100>
   24b0c:	2396      	movs	r3, #150	; 0x96
   24b0e:	18fb      	adds	r3, r7, r3
   24b10:	781b      	ldrb	r3, [r3, #0]
   24b12:	2290      	movs	r2, #144	; 0x90
   24b14:	18ba      	adds	r2, r7, r2
   24b16:	6812      	ldr	r2, [r2, #0]
   24b18:	18d3      	adds	r3, r2, r3
   24b1a:	781b      	ldrb	r3, [r3, #0]
   24b1c:	2b66      	cmp	r3, #102	; 0x66
   24b1e:	d912      	bls.n	24b46 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   24b20:	4aad      	ldr	r2, [pc, #692]	; (24dd8 <m2m_wifi_connect_sc+0x3b8>)
   24b22:	49a7      	ldr	r1, [pc, #668]	; (24dc0 <m2m_wifi_connect_sc+0x3a0>)
   24b24:	4ba7      	ldr	r3, [pc, #668]	; (24dc4 <m2m_wifi_connect_sc+0x3a4>)
   24b26:	0018      	movs	r0, r3
   24b28:	4ba7      	ldr	r3, [pc, #668]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24b2a:	4798      	blx	r3
   24b2c:	4bab      	ldr	r3, [pc, #684]	; (24ddc <m2m_wifi_connect_sc+0x3bc>)
   24b2e:	0018      	movs	r0, r3
   24b30:	4ba5      	ldr	r3, [pc, #660]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24b32:	4798      	blx	r3
   24b34:	4ba6      	ldr	r3, [pc, #664]	; (24dd0 <m2m_wifi_connect_sc+0x3b0>)
   24b36:	0018      	movs	r0, r3
   24b38:	4ba3      	ldr	r3, [pc, #652]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24b3a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   24b3c:	2397      	movs	r3, #151	; 0x97
   24b3e:	18fb      	adds	r3, r7, r3
   24b40:	22f4      	movs	r2, #244	; 0xf4
   24b42:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   24b44:	e195      	b.n	24e72 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   24b46:	2396      	movs	r3, #150	; 0x96
   24b48:	18fb      	adds	r3, r7, r3
   24b4a:	781a      	ldrb	r2, [r3, #0]
   24b4c:	2396      	movs	r3, #150	; 0x96
   24b4e:	18fb      	adds	r3, r7, r3
   24b50:	3201      	adds	r2, #1
   24b52:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   24b54:	2396      	movs	r3, #150	; 0x96
   24b56:	18fb      	adds	r3, r7, r3
   24b58:	781b      	ldrb	r3, [r3, #0]
   24b5a:	2b3f      	cmp	r3, #63	; 0x3f
   24b5c:	d9a4      	bls.n	24aa8 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   24b5e:	230b      	movs	r3, #11
   24b60:	18fb      	adds	r3, r7, r3
   24b62:	781b      	ldrb	r3, [r3, #0]
   24b64:	2b00      	cmp	r3, #0
   24b66:	d004      	beq.n	24b72 <m2m_wifi_connect_sc+0x152>
   24b68:	230b      	movs	r3, #11
   24b6a:	18fb      	adds	r3, r7, r3
   24b6c:	781b      	ldrb	r3, [r3, #0]
   24b6e:	2b20      	cmp	r3, #32
   24b70:	d913      	bls.n	24b9a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   24b72:	238c      	movs	r3, #140	; 0x8c
   24b74:	009a      	lsls	r2, r3, #2
   24b76:	4992      	ldr	r1, [pc, #584]	; (24dc0 <m2m_wifi_connect_sc+0x3a0>)
   24b78:	4b92      	ldr	r3, [pc, #584]	; (24dc4 <m2m_wifi_connect_sc+0x3a4>)
   24b7a:	0018      	movs	r0, r3
   24b7c:	4b92      	ldr	r3, [pc, #584]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24b7e:	4798      	blx	r3
   24b80:	4b97      	ldr	r3, [pc, #604]	; (24de0 <m2m_wifi_connect_sc+0x3c0>)
   24b82:	0018      	movs	r0, r3
   24b84:	4b90      	ldr	r3, [pc, #576]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24b86:	4798      	blx	r3
   24b88:	4b91      	ldr	r3, [pc, #580]	; (24dd0 <m2m_wifi_connect_sc+0x3b0>)
   24b8a:	0018      	movs	r0, r3
   24b8c:	4b8e      	ldr	r3, [pc, #568]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24b8e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   24b90:	2397      	movs	r3, #151	; 0x97
   24b92:	18fb      	adds	r3, r7, r3
   24b94:	22f4      	movs	r2, #244	; 0xf4
   24b96:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   24b98:	e16b      	b.n	24e72 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   24b9a:	23a8      	movs	r3, #168	; 0xa8
   24b9c:	18fb      	adds	r3, r7, r3
   24b9e:	881b      	ldrh	r3, [r3, #0]
   24ba0:	2b00      	cmp	r3, #0
   24ba2:	d004      	beq.n	24bae <m2m_wifi_connect_sc+0x18e>
   24ba4:	23a8      	movs	r3, #168	; 0xa8
   24ba6:	18fb      	adds	r3, r7, r3
   24ba8:	881b      	ldrh	r3, [r3, #0]
   24baa:	2b0e      	cmp	r3, #14
   24bac:	d917      	bls.n	24bde <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   24bae:	23a8      	movs	r3, #168	; 0xa8
   24bb0:	18fb      	adds	r3, r7, r3
   24bb2:	881b      	ldrh	r3, [r3, #0]
   24bb4:	2bff      	cmp	r3, #255	; 0xff
   24bb6:	d012      	beq.n	24bde <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   24bb8:	4a8a      	ldr	r2, [pc, #552]	; (24de4 <m2m_wifi_connect_sc+0x3c4>)
   24bba:	4981      	ldr	r1, [pc, #516]	; (24dc0 <m2m_wifi_connect_sc+0x3a0>)
   24bbc:	4b81      	ldr	r3, [pc, #516]	; (24dc4 <m2m_wifi_connect_sc+0x3a4>)
   24bbe:	0018      	movs	r0, r3
   24bc0:	4b81      	ldr	r3, [pc, #516]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24bc2:	4798      	blx	r3
   24bc4:	4b88      	ldr	r3, [pc, #544]	; (24de8 <m2m_wifi_connect_sc+0x3c8>)
   24bc6:	0018      	movs	r0, r3
   24bc8:	4b7f      	ldr	r3, [pc, #508]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24bca:	4798      	blx	r3
   24bcc:	4b80      	ldr	r3, [pc, #512]	; (24dd0 <m2m_wifi_connect_sc+0x3b0>)
   24bce:	0018      	movs	r0, r3
   24bd0:	4b7d      	ldr	r3, [pc, #500]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24bd2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   24bd4:	2397      	movs	r3, #151	; 0x97
   24bd6:	18fb      	adds	r3, r7, r3
   24bd8:	22f4      	movs	r2, #244	; 0xf4
   24bda:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24bdc:	e149      	b.n	24e72 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   24bde:	230b      	movs	r3, #11
   24be0:	18fb      	adds	r3, r7, r3
   24be2:	781a      	ldrb	r2, [r3, #0]
   24be4:	68f9      	ldr	r1, [r7, #12]
   24be6:	2314      	movs	r3, #20
   24be8:	18fb      	adds	r3, r7, r3
   24bea:	3346      	adds	r3, #70	; 0x46
   24bec:	0018      	movs	r0, r3
   24bee:	4b7f      	ldr	r3, [pc, #508]	; (24dec <m2m_wifi_connect_sc+0x3cc>)
   24bf0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   24bf2:	230b      	movs	r3, #11
   24bf4:	18fb      	adds	r3, r7, r3
   24bf6:	781b      	ldrb	r3, [r3, #0]
   24bf8:	2214      	movs	r2, #20
   24bfa:	18ba      	adds	r2, r7, r2
   24bfc:	2146      	movs	r1, #70	; 0x46
   24bfe:	18d3      	adds	r3, r2, r3
   24c00:	185b      	adds	r3, r3, r1
   24c02:	2200      	movs	r2, #0
   24c04:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   24c06:	2314      	movs	r3, #20
   24c08:	18fb      	adds	r3, r7, r3
   24c0a:	22a8      	movs	r2, #168	; 0xa8
   24c0c:	18ba      	adds	r2, r7, r2
   24c0e:	2144      	movs	r1, #68	; 0x44
   24c10:	8812      	ldrh	r2, [r2, #0]
   24c12:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   24c14:	23ac      	movs	r3, #172	; 0xac
   24c16:	18fb      	adds	r3, r7, r3
   24c18:	781b      	ldrb	r3, [r3, #0]
   24c1a:	1e5a      	subs	r2, r3, #1
   24c1c:	4193      	sbcs	r3, r2
   24c1e:	b2db      	uxtb	r3, r3
   24c20:	0019      	movs	r1, r3
   24c22:	2314      	movs	r3, #20
   24c24:	18fb      	adds	r3, r7, r3
   24c26:	2267      	movs	r2, #103	; 0x67
   24c28:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   24c2a:	2314      	movs	r3, #20
   24c2c:	18fb      	adds	r3, r7, r3
   24c2e:	228c      	movs	r2, #140	; 0x8c
   24c30:	18ba      	adds	r2, r7, r2
   24c32:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   24c34:	238c      	movs	r3, #140	; 0x8c
   24c36:	18fb      	adds	r3, r7, r3
   24c38:	681b      	ldr	r3, [r3, #0]
   24c3a:	220a      	movs	r2, #10
   24c3c:	18ba      	adds	r2, r7, r2
   24c3e:	2141      	movs	r1, #65	; 0x41
   24c40:	7812      	ldrb	r2, [r2, #0]
   24c42:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   24c44:	230a      	movs	r3, #10
   24c46:	18fb      	adds	r3, r7, r3
   24c48:	781b      	ldrb	r3, [r3, #0]
   24c4a:	2b03      	cmp	r3, #3
   24c4c:	d000      	beq.n	24c50 <m2m_wifi_connect_sc+0x230>
   24c4e:	e07d      	b.n	24d4c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   24c50:	687b      	ldr	r3, [r7, #4]
   24c52:	2288      	movs	r2, #136	; 0x88
   24c54:	18ba      	adds	r2, r7, r2
   24c56:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   24c58:	238c      	movs	r3, #140	; 0x8c
   24c5a:	18fb      	adds	r3, r7, r3
   24c5c:	681b      	ldr	r3, [r3, #0]
   24c5e:	2284      	movs	r2, #132	; 0x84
   24c60:	18ba      	adds	r2, r7, r2
   24c62:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   24c64:	2388      	movs	r3, #136	; 0x88
   24c66:	18fb      	adds	r3, r7, r3
   24c68:	681b      	ldr	r3, [r3, #0]
   24c6a:	781b      	ldrb	r3, [r3, #0]
   24c6c:	3b01      	subs	r3, #1
   24c6e:	b2da      	uxtb	r2, r3
   24c70:	2384      	movs	r3, #132	; 0x84
   24c72:	18fb      	adds	r3, r7, r3
   24c74:	681b      	ldr	r3, [r3, #0]
   24c76:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   24c78:	2384      	movs	r3, #132	; 0x84
   24c7a:	18fb      	adds	r3, r7, r3
   24c7c:	681b      	ldr	r3, [r3, #0]
   24c7e:	781b      	ldrb	r3, [r3, #0]
   24c80:	2b03      	cmp	r3, #3
   24c82:	d919      	bls.n	24cb8 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   24c84:	2394      	movs	r3, #148	; 0x94
   24c86:	009a      	lsls	r2, r3, #2
   24c88:	494d      	ldr	r1, [pc, #308]	; (24dc0 <m2m_wifi_connect_sc+0x3a0>)
   24c8a:	4b4e      	ldr	r3, [pc, #312]	; (24dc4 <m2m_wifi_connect_sc+0x3a4>)
   24c8c:	0018      	movs	r0, r3
   24c8e:	4b4e      	ldr	r3, [pc, #312]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24c90:	4798      	blx	r3
   24c92:	2384      	movs	r3, #132	; 0x84
   24c94:	18fb      	adds	r3, r7, r3
   24c96:	681b      	ldr	r3, [r3, #0]
   24c98:	781b      	ldrb	r3, [r3, #0]
   24c9a:	001a      	movs	r2, r3
   24c9c:	4b54      	ldr	r3, [pc, #336]	; (24df0 <m2m_wifi_connect_sc+0x3d0>)
   24c9e:	0011      	movs	r1, r2
   24ca0:	0018      	movs	r0, r3
   24ca2:	4b49      	ldr	r3, [pc, #292]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24ca4:	4798      	blx	r3
   24ca6:	4b4a      	ldr	r3, [pc, #296]	; (24dd0 <m2m_wifi_connect_sc+0x3b0>)
   24ca8:	0018      	movs	r0, r3
   24caa:	4b47      	ldr	r3, [pc, #284]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24cac:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   24cae:	2397      	movs	r3, #151	; 0x97
   24cb0:	18fb      	adds	r3, r7, r3
   24cb2:	22f4      	movs	r2, #244	; 0xf4
   24cb4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24cb6:	e0dc      	b.n	24e72 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   24cb8:	2388      	movs	r3, #136	; 0x88
   24cba:	18fb      	adds	r3, r7, r3
   24cbc:	681b      	ldr	r3, [r3, #0]
   24cbe:	785b      	ldrb	r3, [r3, #1]
   24cc0:	3b01      	subs	r3, #1
   24cc2:	b2da      	uxtb	r2, r3
   24cc4:	2384      	movs	r3, #132	; 0x84
   24cc6:	18fb      	adds	r3, r7, r3
   24cc8:	681b      	ldr	r3, [r3, #0]
   24cca:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   24ccc:	2384      	movs	r3, #132	; 0x84
   24cce:	18fb      	adds	r3, r7, r3
   24cd0:	681b      	ldr	r3, [r3, #0]
   24cd2:	785b      	ldrb	r3, [r3, #1]
   24cd4:	2b0a      	cmp	r3, #10
   24cd6:	d01e      	beq.n	24d16 <m2m_wifi_connect_sc+0x2f6>
   24cd8:	2384      	movs	r3, #132	; 0x84
   24cda:	18fb      	adds	r3, r7, r3
   24cdc:	681b      	ldr	r3, [r3, #0]
   24cde:	785b      	ldrb	r3, [r3, #1]
   24ce0:	2b1a      	cmp	r3, #26
   24ce2:	d018      	beq.n	24d16 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   24ce4:	4a43      	ldr	r2, [pc, #268]	; (24df4 <m2m_wifi_connect_sc+0x3d4>)
   24ce6:	4936      	ldr	r1, [pc, #216]	; (24dc0 <m2m_wifi_connect_sc+0x3a0>)
   24ce8:	4b36      	ldr	r3, [pc, #216]	; (24dc4 <m2m_wifi_connect_sc+0x3a4>)
   24cea:	0018      	movs	r0, r3
   24cec:	4b36      	ldr	r3, [pc, #216]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24cee:	4798      	blx	r3
   24cf0:	2384      	movs	r3, #132	; 0x84
   24cf2:	18fb      	adds	r3, r7, r3
   24cf4:	681b      	ldr	r3, [r3, #0]
   24cf6:	785b      	ldrb	r3, [r3, #1]
   24cf8:	001a      	movs	r2, r3
   24cfa:	4b3f      	ldr	r3, [pc, #252]	; (24df8 <m2m_wifi_connect_sc+0x3d8>)
   24cfc:	0011      	movs	r1, r2
   24cfe:	0018      	movs	r0, r3
   24d00:	4b31      	ldr	r3, [pc, #196]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24d02:	4798      	blx	r3
   24d04:	4b32      	ldr	r3, [pc, #200]	; (24dd0 <m2m_wifi_connect_sc+0x3b0>)
   24d06:	0018      	movs	r0, r3
   24d08:	4b2f      	ldr	r3, [pc, #188]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24d0a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   24d0c:	2397      	movs	r3, #151	; 0x97
   24d0e:	18fb      	adds	r3, r7, r3
   24d10:	22f4      	movs	r2, #244	; 0xf4
   24d12:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24d14:	e0ad      	b.n	24e72 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   24d16:	2384      	movs	r3, #132	; 0x84
   24d18:	18fb      	adds	r3, r7, r3
   24d1a:	681b      	ldr	r3, [r3, #0]
   24d1c:	1c98      	adds	r0, r3, #2
   24d1e:	2388      	movs	r3, #136	; 0x88
   24d20:	18fb      	adds	r3, r7, r3
   24d22:	681b      	ldr	r3, [r3, #0]
   24d24:	1c99      	adds	r1, r3, #2
   24d26:	2388      	movs	r3, #136	; 0x88
   24d28:	18fb      	adds	r3, r7, r3
   24d2a:	681b      	ldr	r3, [r3, #0]
   24d2c:	785b      	ldrb	r3, [r3, #1]
   24d2e:	001a      	movs	r2, r3
   24d30:	4b2e      	ldr	r3, [pc, #184]	; (24dec <m2m_wifi_connect_sc+0x3cc>)
   24d32:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   24d34:	2388      	movs	r3, #136	; 0x88
   24d36:	18fb      	adds	r3, r7, r3
   24d38:	681b      	ldr	r3, [r3, #0]
   24d3a:	785b      	ldrb	r3, [r3, #1]
   24d3c:	001a      	movs	r2, r3
   24d3e:	2384      	movs	r3, #132	; 0x84
   24d40:	18fb      	adds	r3, r7, r3
   24d42:	681b      	ldr	r3, [r3, #0]
   24d44:	189b      	adds	r3, r3, r2
   24d46:	2200      	movs	r2, #0
   24d48:	709a      	strb	r2, [r3, #2]
   24d4a:	e081      	b.n	24e50 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   24d4c:	230a      	movs	r3, #10
   24d4e:	18fb      	adds	r3, r7, r3
   24d50:	781b      	ldrb	r3, [r3, #0]
   24d52:	2b02      	cmp	r3, #2
   24d54:	d156      	bne.n	24e04 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   24d56:	2382      	movs	r3, #130	; 0x82
   24d58:	18fc      	adds	r4, r7, r3
   24d5a:	687b      	ldr	r3, [r7, #4]
   24d5c:	0018      	movs	r0, r3
   24d5e:	4b1d      	ldr	r3, [pc, #116]	; (24dd4 <m2m_wifi_connect_sc+0x3b4>)
   24d60:	4798      	blx	r3
   24d62:	0003      	movs	r3, r0
   24d64:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   24d66:	2382      	movs	r3, #130	; 0x82
   24d68:	18fb      	adds	r3, r7, r3
   24d6a:	881b      	ldrh	r3, [r3, #0]
   24d6c:	2b00      	cmp	r3, #0
   24d6e:	d004      	beq.n	24d7a <m2m_wifi_connect_sc+0x35a>
   24d70:	2382      	movs	r3, #130	; 0x82
   24d72:	18fb      	adds	r3, r7, r3
   24d74:	881b      	ldrh	r3, [r3, #0]
   24d76:	2b40      	cmp	r3, #64	; 0x40
   24d78:	d912      	bls.n	24da0 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   24d7a:	4a20      	ldr	r2, [pc, #128]	; (24dfc <m2m_wifi_connect_sc+0x3dc>)
   24d7c:	4910      	ldr	r1, [pc, #64]	; (24dc0 <m2m_wifi_connect_sc+0x3a0>)
   24d7e:	4b11      	ldr	r3, [pc, #68]	; (24dc4 <m2m_wifi_connect_sc+0x3a4>)
   24d80:	0018      	movs	r0, r3
   24d82:	4b11      	ldr	r3, [pc, #68]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24d84:	4798      	blx	r3
   24d86:	4b1e      	ldr	r3, [pc, #120]	; (24e00 <m2m_wifi_connect_sc+0x3e0>)
   24d88:	0018      	movs	r0, r3
   24d8a:	4b0f      	ldr	r3, [pc, #60]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24d8c:	4798      	blx	r3
   24d8e:	4b10      	ldr	r3, [pc, #64]	; (24dd0 <m2m_wifi_connect_sc+0x3b0>)
   24d90:	0018      	movs	r0, r3
   24d92:	4b0d      	ldr	r3, [pc, #52]	; (24dc8 <m2m_wifi_connect_sc+0x3a8>)
   24d94:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   24d96:	2397      	movs	r3, #151	; 0x97
   24d98:	18fb      	adds	r3, r7, r3
   24d9a:	22f4      	movs	r2, #244	; 0xf4
   24d9c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24d9e:	e068      	b.n	24e72 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   24da0:	238c      	movs	r3, #140	; 0x8c
   24da2:	18fb      	adds	r3, r7, r3
   24da4:	6818      	ldr	r0, [r3, #0]
   24da6:	2382      	movs	r3, #130	; 0x82
   24da8:	18fb      	adds	r3, r7, r3
   24daa:	881b      	ldrh	r3, [r3, #0]
   24dac:	3301      	adds	r3, #1
   24dae:	001a      	movs	r2, r3
   24db0:	687b      	ldr	r3, [r7, #4]
   24db2:	0019      	movs	r1, r3
   24db4:	4b0d      	ldr	r3, [pc, #52]	; (24dec <m2m_wifi_connect_sc+0x3cc>)
   24db6:	4798      	blx	r3
   24db8:	e04a      	b.n	24e50 <m2m_wifi_connect_sc+0x430>
   24dba:	46c0      	nop			; (mov r8, r8)
   24dbc:	0000021a 	.word	0x0000021a
   24dc0:	0003bbf4 	.word	0x0003bbf4
   24dc4:	0003b83c 	.word	0x0003b83c
   24dc8:	00020889 	.word	0x00020889
   24dcc:	0003ba7c 	.word	0x0003ba7c
   24dd0:	0003b838 	.word	0x0003b838
   24dd4:	0002368f 	.word	0x0002368f
   24dd8:	00000226 	.word	0x00000226
   24ddc:	0003ba90 	.word	0x0003ba90
   24de0:	0003baa0 	.word	0x0003baa0
   24de4:	00000239 	.word	0x00000239
   24de8:	0003bab4 	.word	0x0003bab4
   24dec:	00023615 	.word	0x00023615
   24df0:	0003bac0 	.word	0x0003bac0
   24df4:	00000257 	.word	0x00000257
   24df8:	0003badc 	.word	0x0003badc
   24dfc:	00000266 	.word	0x00000266
   24e00:	0003baf8 	.word	0x0003baf8
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   24e04:	230a      	movs	r3, #10
   24e06:	18fb      	adds	r3, r7, r3
   24e08:	781b      	ldrb	r3, [r3, #0]
   24e0a:	2b04      	cmp	r3, #4
   24e0c:	d108      	bne.n	24e20 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   24e0e:	238c      	movs	r3, #140	; 0x8c
   24e10:	18fb      	adds	r3, r7, r3
   24e12:	681b      	ldr	r3, [r3, #0]
   24e14:	6879      	ldr	r1, [r7, #4]
   24e16:	223e      	movs	r2, #62	; 0x3e
   24e18:	0018      	movs	r0, r3
   24e1a:	4b1a      	ldr	r3, [pc, #104]	; (24e84 <m2m_wifi_connect_sc+0x464>)
   24e1c:	4798      	blx	r3
   24e1e:	e017      	b.n	24e50 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   24e20:	230a      	movs	r3, #10
   24e22:	18fb      	adds	r3, r7, r3
   24e24:	781b      	ldrb	r3, [r3, #0]
   24e26:	2b01      	cmp	r3, #1
   24e28:	d012      	beq.n	24e50 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   24e2a:	4a17      	ldr	r2, [pc, #92]	; (24e88 <m2m_wifi_connect_sc+0x468>)
   24e2c:	4917      	ldr	r1, [pc, #92]	; (24e8c <m2m_wifi_connect_sc+0x46c>)
   24e2e:	4b18      	ldr	r3, [pc, #96]	; (24e90 <m2m_wifi_connect_sc+0x470>)
   24e30:	0018      	movs	r0, r3
   24e32:	4b18      	ldr	r3, [pc, #96]	; (24e94 <m2m_wifi_connect_sc+0x474>)
   24e34:	4798      	blx	r3
   24e36:	4b18      	ldr	r3, [pc, #96]	; (24e98 <m2m_wifi_connect_sc+0x478>)
   24e38:	0018      	movs	r0, r3
   24e3a:	4b16      	ldr	r3, [pc, #88]	; (24e94 <m2m_wifi_connect_sc+0x474>)
   24e3c:	4798      	blx	r3
   24e3e:	4b17      	ldr	r3, [pc, #92]	; (24e9c <m2m_wifi_connect_sc+0x47c>)
   24e40:	0018      	movs	r0, r3
   24e42:	4b14      	ldr	r3, [pc, #80]	; (24e94 <m2m_wifi_connect_sc+0x474>)
   24e44:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   24e46:	2397      	movs	r3, #151	; 0x97
   24e48:	18fb      	adds	r3, r7, r3
   24e4a:	22f4      	movs	r2, #244	; 0xf4
   24e4c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   24e4e:	e010      	b.n	24e72 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   24e50:	2397      	movs	r3, #151	; 0x97
   24e52:	18fc      	adds	r4, r7, r3
   24e54:	2314      	movs	r3, #20
   24e56:	18fa      	adds	r2, r7, r3
   24e58:	2300      	movs	r3, #0
   24e5a:	9302      	str	r3, [sp, #8]
   24e5c:	2300      	movs	r3, #0
   24e5e:	9301      	str	r3, [sp, #4]
   24e60:	2300      	movs	r3, #0
   24e62:	9300      	str	r3, [sp, #0]
   24e64:	236c      	movs	r3, #108	; 0x6c
   24e66:	2128      	movs	r1, #40	; 0x28
   24e68:	2001      	movs	r0, #1
   24e6a:	4d0d      	ldr	r5, [pc, #52]	; (24ea0 <m2m_wifi_connect_sc+0x480>)
   24e6c:	47a8      	blx	r5
   24e6e:	0003      	movs	r3, r0
   24e70:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   24e72:	2397      	movs	r3, #151	; 0x97
   24e74:	18fb      	adds	r3, r7, r3
   24e76:	781b      	ldrb	r3, [r3, #0]
   24e78:	b25b      	sxtb	r3, r3
}
   24e7a:	0018      	movs	r0, r3
   24e7c:	46bd      	mov	sp, r7
   24e7e:	b026      	add	sp, #152	; 0x98
   24e80:	bdb0      	pop	{r4, r5, r7, pc}
   24e82:	46c0      	nop			; (mov r8, r8)
   24e84:	00023615 	.word	0x00023615
   24e88:	00000276 	.word	0x00000276
   24e8c:	0003bbf4 	.word	0x0003bbf4
   24e90:	0003b83c 	.word	0x0003b83c
   24e94:	00020889 	.word	0x00020889
   24e98:	0003bb14 	.word	0x0003bb14
   24e9c:	0003b838 	.word	0x0003b838
   24ea0:	000238b1 	.word	0x000238b1

00024ea4 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   24ea4:	b580      	push	{r7, lr}
   24ea6:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   24ea8:	2300      	movs	r3, #0
}
   24eaa:	0018      	movs	r0, r3
   24eac:	46bd      	mov	sp, r7
   24eae:	bd80      	pop	{r7, pc}

00024eb0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   24eb0:	b590      	push	{r4, r7, lr}
   24eb2:	b087      	sub	sp, #28
   24eb4:	af00      	add	r7, sp, #0
   24eb6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   24eb8:	2317      	movs	r3, #23
   24eba:	18fb      	adds	r3, r7, r3
   24ebc:	2200      	movs	r2, #0
   24ebe:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   24ec0:	687b      	ldr	r3, [r7, #4]
   24ec2:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   24ec4:	693b      	ldr	r3, [r7, #16]
   24ec6:	2280      	movs	r2, #128	; 0x80
   24ec8:	0052      	lsls	r2, r2, #1
   24eca:	4313      	orrs	r3, r2
   24ecc:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   24ece:	693a      	ldr	r2, [r7, #16]
   24ed0:	23a5      	movs	r3, #165	; 0xa5
   24ed2:	015b      	lsls	r3, r3, #5
   24ed4:	0011      	movs	r1, r2
   24ed6:	0018      	movs	r0, r3
   24ed8:	4b12      	ldr	r3, [pc, #72]	; (24f24 <chip_apply_conf+0x74>)
   24eda:	4798      	blx	r3
		if(val32 != 0) {		
   24edc:	693b      	ldr	r3, [r7, #16]
   24ede:	2b00      	cmp	r3, #0
   24ee0:	d018      	beq.n	24f14 <chip_apply_conf+0x64>
			uint32 reg = 0;
   24ee2:	2300      	movs	r3, #0
   24ee4:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   24ee6:	2317      	movs	r3, #23
   24ee8:	18fc      	adds	r4, r7, r3
   24eea:	230c      	movs	r3, #12
   24eec:	18fa      	adds	r2, r7, r3
   24eee:	23a5      	movs	r3, #165	; 0xa5
   24ef0:	015b      	lsls	r3, r3, #5
   24ef2:	0011      	movs	r1, r2
   24ef4:	0018      	movs	r0, r3
   24ef6:	4b0c      	ldr	r3, [pc, #48]	; (24f28 <chip_apply_conf+0x78>)
   24ef8:	4798      	blx	r3
   24efa:	0003      	movs	r3, r0
   24efc:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   24efe:	2317      	movs	r3, #23
   24f00:	18fb      	adds	r3, r7, r3
   24f02:	781b      	ldrb	r3, [r3, #0]
   24f04:	b25b      	sxtb	r3, r3
   24f06:	2b00      	cmp	r3, #0
   24f08:	d1e1      	bne.n	24ece <chip_apply_conf+0x1e>
				if(reg == val32)
   24f0a:	68fa      	ldr	r2, [r7, #12]
   24f0c:	693b      	ldr	r3, [r7, #16]
   24f0e:	429a      	cmp	r2, r3
   24f10:	d002      	beq.n	24f18 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   24f12:	e7dc      	b.n	24ece <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   24f14:	46c0      	nop			; (mov r8, r8)
   24f16:	e000      	b.n	24f1a <chip_apply_conf+0x6a>
					break;
   24f18:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   24f1a:	2300      	movs	r3, #0
}
   24f1c:	0018      	movs	r0, r3
   24f1e:	46bd      	mov	sp, r7
   24f20:	b007      	add	sp, #28
   24f22:	bd90      	pop	{r4, r7, pc}
   24f24:	00025705 	.word	0x00025705
   24f28:	000256e1 	.word	0x000256e1

00024f2c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   24f2c:	b590      	push	{r4, r7, lr}
   24f2e:	b083      	sub	sp, #12
   24f30:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   24f32:	2300      	movs	r3, #0
   24f34:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   24f36:	1dfb      	adds	r3, r7, #7
   24f38:	2200      	movs	r2, #0
   24f3a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   24f3c:	1dfc      	adds	r4, r7, #7
   24f3e:	003b      	movs	r3, r7
   24f40:	4a24      	ldr	r2, [pc, #144]	; (24fd4 <enable_interrupts+0xa8>)
   24f42:	0019      	movs	r1, r3
   24f44:	0010      	movs	r0, r2
   24f46:	4b24      	ldr	r3, [pc, #144]	; (24fd8 <enable_interrupts+0xac>)
   24f48:	4798      	blx	r3
   24f4a:	0003      	movs	r3, r0
   24f4c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   24f4e:	1dfb      	adds	r3, r7, #7
   24f50:	781b      	ldrb	r3, [r3, #0]
   24f52:	b25b      	sxtb	r3, r3
   24f54:	2b00      	cmp	r3, #0
   24f56:	d131      	bne.n	24fbc <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   24f58:	683b      	ldr	r3, [r7, #0]
   24f5a:	2280      	movs	r2, #128	; 0x80
   24f5c:	0052      	lsls	r2, r2, #1
   24f5e:	4313      	orrs	r3, r2
   24f60:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   24f62:	683b      	ldr	r3, [r7, #0]
   24f64:	1dfc      	adds	r4, r7, #7
   24f66:	4a1b      	ldr	r2, [pc, #108]	; (24fd4 <enable_interrupts+0xa8>)
   24f68:	0019      	movs	r1, r3
   24f6a:	0010      	movs	r0, r2
   24f6c:	4b1b      	ldr	r3, [pc, #108]	; (24fdc <enable_interrupts+0xb0>)
   24f6e:	4798      	blx	r3
   24f70:	0003      	movs	r3, r0
   24f72:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   24f74:	1dfb      	adds	r3, r7, #7
   24f76:	781b      	ldrb	r3, [r3, #0]
   24f78:	b25b      	sxtb	r3, r3
   24f7a:	2b00      	cmp	r3, #0
   24f7c:	d120      	bne.n	24fc0 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   24f7e:	1dfc      	adds	r4, r7, #7
   24f80:	003a      	movs	r2, r7
   24f82:	23d0      	movs	r3, #208	; 0xd0
   24f84:	015b      	lsls	r3, r3, #5
   24f86:	0011      	movs	r1, r2
   24f88:	0018      	movs	r0, r3
   24f8a:	4b13      	ldr	r3, [pc, #76]	; (24fd8 <enable_interrupts+0xac>)
   24f8c:	4798      	blx	r3
   24f8e:	0003      	movs	r3, r0
   24f90:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   24f92:	1dfb      	adds	r3, r7, #7
   24f94:	781b      	ldrb	r3, [r3, #0]
   24f96:	b25b      	sxtb	r3, r3
   24f98:	2b00      	cmp	r3, #0
   24f9a:	d113      	bne.n	24fc4 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   24f9c:	683b      	ldr	r3, [r7, #0]
   24f9e:	2280      	movs	r2, #128	; 0x80
   24fa0:	0252      	lsls	r2, r2, #9
   24fa2:	4313      	orrs	r3, r2
   24fa4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   24fa6:	683a      	ldr	r2, [r7, #0]
   24fa8:	1dfc      	adds	r4, r7, #7
   24faa:	23d0      	movs	r3, #208	; 0xd0
   24fac:	015b      	lsls	r3, r3, #5
   24fae:	0011      	movs	r1, r2
   24fb0:	0018      	movs	r0, r3
   24fb2:	4b0a      	ldr	r3, [pc, #40]	; (24fdc <enable_interrupts+0xb0>)
   24fb4:	4798      	blx	r3
   24fb6:	0003      	movs	r3, r0
   24fb8:	7023      	strb	r3, [r4, #0]
   24fba:	e004      	b.n	24fc6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   24fbc:	46c0      	nop			; (mov r8, r8)
   24fbe:	e002      	b.n	24fc6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   24fc0:	46c0      	nop			; (mov r8, r8)
   24fc2:	e000      	b.n	24fc6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   24fc4:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   24fc6:	1dfb      	adds	r3, r7, #7
   24fc8:	781b      	ldrb	r3, [r3, #0]
   24fca:	b25b      	sxtb	r3, r3
}
   24fcc:	0018      	movs	r0, r3
   24fce:	46bd      	mov	sp, r7
   24fd0:	b003      	add	sp, #12
   24fd2:	bd90      	pop	{r4, r7, pc}
   24fd4:	00001408 	.word	0x00001408
   24fd8:	000256e1 	.word	0x000256e1
   24fdc:	00025705 	.word	0x00025705

00024fe0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   24fe0:	b580      	push	{r7, lr}
   24fe2:	b082      	sub	sp, #8
   24fe4:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   24fe6:	4b32      	ldr	r3, [pc, #200]	; (250b0 <nmi_get_chipid+0xd0>)
   24fe8:	681b      	ldr	r3, [r3, #0]
   24fea:	2b00      	cmp	r3, #0
   24fec:	d159      	bne.n	250a2 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   24fee:	4a30      	ldr	r2, [pc, #192]	; (250b0 <nmi_get_chipid+0xd0>)
   24ff0:	2380      	movs	r3, #128	; 0x80
   24ff2:	015b      	lsls	r3, r3, #5
   24ff4:	0011      	movs	r1, r2
   24ff6:	0018      	movs	r0, r3
   24ff8:	4b2e      	ldr	r3, [pc, #184]	; (250b4 <nmi_get_chipid+0xd4>)
   24ffa:	4798      	blx	r3
   24ffc:	1e03      	subs	r3, r0, #0
   24ffe:	d004      	beq.n	2500a <nmi_get_chipid+0x2a>
			chipid = 0;
   25000:	4b2b      	ldr	r3, [pc, #172]	; (250b0 <nmi_get_chipid+0xd0>)
   25002:	2200      	movs	r2, #0
   25004:	601a      	str	r2, [r3, #0]
			return 0;
   25006:	2300      	movs	r3, #0
   25008:	e04d      	b.n	250a6 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   2500a:	1d3b      	adds	r3, r7, #4
   2500c:	4a2a      	ldr	r2, [pc, #168]	; (250b8 <nmi_get_chipid+0xd8>)
   2500e:	0019      	movs	r1, r3
   25010:	0010      	movs	r0, r2
   25012:	4b28      	ldr	r3, [pc, #160]	; (250b4 <nmi_get_chipid+0xd4>)
   25014:	4798      	blx	r3
   25016:	1e03      	subs	r3, r0, #0
   25018:	d004      	beq.n	25024 <nmi_get_chipid+0x44>
			chipid = 0;
   2501a:	4b25      	ldr	r3, [pc, #148]	; (250b0 <nmi_get_chipid+0xd0>)
   2501c:	2200      	movs	r2, #0
   2501e:	601a      	str	r2, [r3, #0]
			return 0;
   25020:	2300      	movs	r3, #0
   25022:	e040      	b.n	250a6 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   25024:	4b22      	ldr	r3, [pc, #136]	; (250b0 <nmi_get_chipid+0xd0>)
   25026:	681b      	ldr	r3, [r3, #0]
   25028:	4a24      	ldr	r2, [pc, #144]	; (250bc <nmi_get_chipid+0xdc>)
   2502a:	4293      	cmp	r3, r2
   2502c:	d106      	bne.n	2503c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   2502e:	687b      	ldr	r3, [r7, #4]
   25030:	2b01      	cmp	r3, #1
   25032:	d029      	beq.n	25088 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   25034:	4b1e      	ldr	r3, [pc, #120]	; (250b0 <nmi_get_chipid+0xd0>)
   25036:	4a22      	ldr	r2, [pc, #136]	; (250c0 <nmi_get_chipid+0xe0>)
   25038:	601a      	str	r2, [r3, #0]
   2503a:	e025      	b.n	25088 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   2503c:	4b1c      	ldr	r3, [pc, #112]	; (250b0 <nmi_get_chipid+0xd0>)
   2503e:	681b      	ldr	r3, [r3, #0]
   25040:	4a20      	ldr	r2, [pc, #128]	; (250c4 <nmi_get_chipid+0xe4>)
   25042:	4293      	cmp	r3, r2
   25044:	d10d      	bne.n	25062 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   25046:	687b      	ldr	r3, [r7, #4]
   25048:	2b03      	cmp	r3, #3
   2504a:	d01d      	beq.n	25088 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   2504c:	687b      	ldr	r3, [r7, #4]
   2504e:	2b04      	cmp	r3, #4
   25050:	d103      	bne.n	2505a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   25052:	4b17      	ldr	r3, [pc, #92]	; (250b0 <nmi_get_chipid+0xd0>)
   25054:	4a1c      	ldr	r2, [pc, #112]	; (250c8 <nmi_get_chipid+0xe8>)
   25056:	601a      	str	r2, [r3, #0]
   25058:	e016      	b.n	25088 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2505a:	4b15      	ldr	r3, [pc, #84]	; (250b0 <nmi_get_chipid+0xd0>)
   2505c:	4a1b      	ldr	r2, [pc, #108]	; (250cc <nmi_get_chipid+0xec>)
   2505e:	601a      	str	r2, [r3, #0]
   25060:	e012      	b.n	25088 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   25062:	4b13      	ldr	r3, [pc, #76]	; (250b0 <nmi_get_chipid+0xd0>)
   25064:	681b      	ldr	r3, [r3, #0]
   25066:	4a1a      	ldr	r2, [pc, #104]	; (250d0 <nmi_get_chipid+0xf0>)
   25068:	4293      	cmp	r3, r2
   2506a:	d10d      	bne.n	25088 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   2506c:	4a10      	ldr	r2, [pc, #64]	; (250b0 <nmi_get_chipid+0xd0>)
   2506e:	23ec      	movs	r3, #236	; 0xec
   25070:	039b      	lsls	r3, r3, #14
   25072:	0011      	movs	r1, r2
   25074:	0018      	movs	r0, r3
   25076:	4b0f      	ldr	r3, [pc, #60]	; (250b4 <nmi_get_chipid+0xd4>)
   25078:	4798      	blx	r3
   2507a:	1e03      	subs	r3, r0, #0
   2507c:	d004      	beq.n	25088 <nmi_get_chipid+0xa8>
			chipid = 0;
   2507e:	4b0c      	ldr	r3, [pc, #48]	; (250b0 <nmi_get_chipid+0xd0>)
   25080:	2200      	movs	r2, #0
   25082:	601a      	str	r2, [r3, #0]
			return 0;
   25084:	2300      	movs	r3, #0
   25086:	e00e      	b.n	250a6 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   25088:	4b09      	ldr	r3, [pc, #36]	; (250b0 <nmi_get_chipid+0xd0>)
   2508a:	681b      	ldr	r3, [r3, #0]
   2508c:	4a11      	ldr	r2, [pc, #68]	; (250d4 <nmi_get_chipid+0xf4>)
   2508e:	401a      	ands	r2, r3
   25090:	4b07      	ldr	r3, [pc, #28]	; (250b0 <nmi_get_chipid+0xd0>)
   25092:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   25094:	4b06      	ldr	r3, [pc, #24]	; (250b0 <nmi_get_chipid+0xd0>)
   25096:	681b      	ldr	r3, [r3, #0]
   25098:	22a0      	movs	r2, #160	; 0xa0
   2509a:	02d2      	lsls	r2, r2, #11
   2509c:	431a      	orrs	r2, r3
   2509e:	4b04      	ldr	r3, [pc, #16]	; (250b0 <nmi_get_chipid+0xd0>)
   250a0:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   250a2:	4b03      	ldr	r3, [pc, #12]	; (250b0 <nmi_get_chipid+0xd0>)
   250a4:	681b      	ldr	r3, [r3, #0]
}
   250a6:	0018      	movs	r0, r3
   250a8:	46bd      	mov	sp, r7
   250aa:	b002      	add	sp, #8
   250ac:	bd80      	pop	{r7, pc}
   250ae:	46c0      	nop			; (mov r8, r8)
   250b0:	200041d8 	.word	0x200041d8
   250b4:	000256e1 	.word	0x000256e1
   250b8:	000013f4 	.word	0x000013f4
   250bc:	001002a0 	.word	0x001002a0
   250c0:	001002a1 	.word	0x001002a1
   250c4:	001002b0 	.word	0x001002b0
   250c8:	001002b1 	.word	0x001002b1
   250cc:	001002b2 	.word	0x001002b2
   250d0:	001000f0 	.word	0x001000f0
   250d4:	fff0ffff 	.word	0xfff0ffff

000250d8 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   250d8:	b590      	push	{r4, r7, lr}
   250da:	b083      	sub	sp, #12
   250dc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   250de:	1dfb      	adds	r3, r7, #7
   250e0:	2200      	movs	r2, #0
   250e2:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   250e4:	1dfc      	adds	r4, r7, #7
   250e6:	003b      	movs	r3, r7
   250e8:	0019      	movs	r1, r3
   250ea:	2010      	movs	r0, #16
   250ec:	4b2e      	ldr	r3, [pc, #184]	; (251a8 <chip_sleep+0xd0>)
   250ee:	4798      	blx	r3
   250f0:	0003      	movs	r3, r0
   250f2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   250f4:	1dfb      	adds	r3, r7, #7
   250f6:	781b      	ldrb	r3, [r3, #0]
   250f8:	b25b      	sxtb	r3, r3
   250fa:	2b00      	cmp	r3, #0
   250fc:	d145      	bne.n	2518a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   250fe:	683b      	ldr	r3, [r7, #0]
   25100:	2201      	movs	r2, #1
   25102:	4013      	ands	r3, r2
   25104:	d000      	beq.n	25108 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   25106:	e7ed      	b.n	250e4 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   25108:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2510a:	1dfc      	adds	r4, r7, #7
   2510c:	003b      	movs	r3, r7
   2510e:	0019      	movs	r1, r3
   25110:	2001      	movs	r0, #1
   25112:	4b25      	ldr	r3, [pc, #148]	; (251a8 <chip_sleep+0xd0>)
   25114:	4798      	blx	r3
   25116:	0003      	movs	r3, r0
   25118:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2511a:	1dfb      	adds	r3, r7, #7
   2511c:	781b      	ldrb	r3, [r3, #0]
   2511e:	b25b      	sxtb	r3, r3
   25120:	2b00      	cmp	r3, #0
   25122:	d134      	bne.n	2518e <chip_sleep+0xb6>
	if(reg & NBIT1)
   25124:	683b      	ldr	r3, [r7, #0]
   25126:	2202      	movs	r2, #2
   25128:	4013      	ands	r3, r2
   2512a:	d010      	beq.n	2514e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   2512c:	683b      	ldr	r3, [r7, #0]
   2512e:	2202      	movs	r2, #2
   25130:	4393      	bics	r3, r2
   25132:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   25134:	683b      	ldr	r3, [r7, #0]
   25136:	1dfc      	adds	r4, r7, #7
   25138:	0019      	movs	r1, r3
   2513a:	2001      	movs	r0, #1
   2513c:	4b1b      	ldr	r3, [pc, #108]	; (251ac <chip_sleep+0xd4>)
   2513e:	4798      	blx	r3
   25140:	0003      	movs	r3, r0
   25142:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   25144:	1dfb      	adds	r3, r7, #7
   25146:	781b      	ldrb	r3, [r3, #0]
   25148:	b25b      	sxtb	r3, r3
   2514a:	2b00      	cmp	r3, #0
   2514c:	d121      	bne.n	25192 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2514e:	1dfc      	adds	r4, r7, #7
   25150:	003b      	movs	r3, r7
   25152:	0019      	movs	r1, r3
   25154:	200b      	movs	r0, #11
   25156:	4b14      	ldr	r3, [pc, #80]	; (251a8 <chip_sleep+0xd0>)
   25158:	4798      	blx	r3
   2515a:	0003      	movs	r3, r0
   2515c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2515e:	1dfb      	adds	r3, r7, #7
   25160:	781b      	ldrb	r3, [r3, #0]
   25162:	b25b      	sxtb	r3, r3
   25164:	2b00      	cmp	r3, #0
   25166:	d116      	bne.n	25196 <chip_sleep+0xbe>
	if(reg & NBIT0)
   25168:	683b      	ldr	r3, [r7, #0]
   2516a:	2201      	movs	r2, #1
   2516c:	4013      	ands	r3, r2
   2516e:	d013      	beq.n	25198 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   25170:	683b      	ldr	r3, [r7, #0]
   25172:	2201      	movs	r2, #1
   25174:	4393      	bics	r3, r2
   25176:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   25178:	683b      	ldr	r3, [r7, #0]
   2517a:	1dfc      	adds	r4, r7, #7
   2517c:	0019      	movs	r1, r3
   2517e:	200b      	movs	r0, #11
   25180:	4b0a      	ldr	r3, [pc, #40]	; (251ac <chip_sleep+0xd4>)
   25182:	4798      	blx	r3
   25184:	0003      	movs	r3, r0
   25186:	7023      	strb	r3, [r4, #0]
   25188:	e006      	b.n	25198 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2518a:	46c0      	nop			; (mov r8, r8)
   2518c:	e004      	b.n	25198 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2518e:	46c0      	nop			; (mov r8, r8)
   25190:	e002      	b.n	25198 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   25192:	46c0      	nop			; (mov r8, r8)
   25194:	e000      	b.n	25198 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   25196:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   25198:	1dfb      	adds	r3, r7, #7
   2519a:	781b      	ldrb	r3, [r3, #0]
   2519c:	b25b      	sxtb	r3, r3
}
   2519e:	0018      	movs	r0, r3
   251a0:	46bd      	mov	sp, r7
   251a2:	b003      	add	sp, #12
   251a4:	bd90      	pop	{r4, r7, pc}
   251a6:	46c0      	nop			; (mov r8, r8)
   251a8:	000256e1 	.word	0x000256e1
   251ac:	00025705 	.word	0x00025705

000251b0 <chip_wake>:
sint8 chip_wake(void)
{
   251b0:	b590      	push	{r4, r7, lr}
   251b2:	b085      	sub	sp, #20
   251b4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   251b6:	230f      	movs	r3, #15
   251b8:	18fb      	adds	r3, r7, r3
   251ba:	2200      	movs	r2, #0
   251bc:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   251be:	2300      	movs	r3, #0
   251c0:	607b      	str	r3, [r7, #4]
   251c2:	2300      	movs	r3, #0
   251c4:	603b      	str	r3, [r7, #0]
   251c6:	2300      	movs	r3, #0
   251c8:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   251ca:	230f      	movs	r3, #15
   251cc:	18fc      	adds	r4, r7, r3
   251ce:	1d3b      	adds	r3, r7, #4
   251d0:	0019      	movs	r1, r3
   251d2:	200b      	movs	r0, #11
   251d4:	4b4e      	ldr	r3, [pc, #312]	; (25310 <chip_wake+0x160>)
   251d6:	4798      	blx	r3
   251d8:	0003      	movs	r3, r0
   251da:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   251dc:	230f      	movs	r3, #15
   251de:	18fb      	adds	r3, r7, r3
   251e0:	781b      	ldrb	r3, [r3, #0]
   251e2:	b25b      	sxtb	r3, r3
   251e4:	2b00      	cmp	r3, #0
   251e6:	d000      	beq.n	251ea <chip_wake+0x3a>
   251e8:	e082      	b.n	252f0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   251ea:	687b      	ldr	r3, [r7, #4]
   251ec:	2201      	movs	r2, #1
   251ee:	4013      	ands	r3, r2
   251f0:	d111      	bne.n	25216 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   251f2:	687b      	ldr	r3, [r7, #4]
   251f4:	2201      	movs	r2, #1
   251f6:	4313      	orrs	r3, r2
   251f8:	220f      	movs	r2, #15
   251fa:	18bc      	adds	r4, r7, r2
   251fc:	0019      	movs	r1, r3
   251fe:	200b      	movs	r0, #11
   25200:	4b44      	ldr	r3, [pc, #272]	; (25314 <chip_wake+0x164>)
   25202:	4798      	blx	r3
   25204:	0003      	movs	r3, r0
   25206:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   25208:	230f      	movs	r3, #15
   2520a:	18fb      	adds	r3, r7, r3
   2520c:	781b      	ldrb	r3, [r3, #0]
   2520e:	b25b      	sxtb	r3, r3
   25210:	2b00      	cmp	r3, #0
   25212:	d000      	beq.n	25216 <chip_wake+0x66>
   25214:	e06e      	b.n	252f4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   25216:	230f      	movs	r3, #15
   25218:	18fc      	adds	r4, r7, r3
   2521a:	1d3b      	adds	r3, r7, #4
   2521c:	0019      	movs	r1, r3
   2521e:	2001      	movs	r0, #1
   25220:	4b3b      	ldr	r3, [pc, #236]	; (25310 <chip_wake+0x160>)
   25222:	4798      	blx	r3
   25224:	0003      	movs	r3, r0
   25226:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   25228:	230f      	movs	r3, #15
   2522a:	18fb      	adds	r3, r7, r3
   2522c:	781b      	ldrb	r3, [r3, #0]
   2522e:	b25b      	sxtb	r3, r3
   25230:	2b00      	cmp	r3, #0
   25232:	d161      	bne.n	252f8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   25234:	687b      	ldr	r3, [r7, #4]
   25236:	2202      	movs	r2, #2
   25238:	4013      	ands	r3, r2
   2523a:	d110      	bne.n	2525e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   2523c:	687b      	ldr	r3, [r7, #4]
   2523e:	2202      	movs	r2, #2
   25240:	4313      	orrs	r3, r2
   25242:	220f      	movs	r2, #15
   25244:	18bc      	adds	r4, r7, r2
   25246:	0019      	movs	r1, r3
   25248:	2001      	movs	r0, #1
   2524a:	4b32      	ldr	r3, [pc, #200]	; (25314 <chip_wake+0x164>)
   2524c:	4798      	blx	r3
   2524e:	0003      	movs	r3, r0
   25250:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   25252:	230f      	movs	r3, #15
   25254:	18fb      	adds	r3, r7, r3
   25256:	781b      	ldrb	r3, [r3, #0]
   25258:	b25b      	sxtb	r3, r3
   2525a:	2b00      	cmp	r3, #0
   2525c:	d14e      	bne.n	252fc <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2525e:	230f      	movs	r3, #15
   25260:	18fc      	adds	r4, r7, r3
   25262:	003b      	movs	r3, r7
   25264:	0019      	movs	r1, r3
   25266:	200f      	movs	r0, #15
   25268:	4b29      	ldr	r3, [pc, #164]	; (25310 <chip_wake+0x160>)
   2526a:	4798      	blx	r3
   2526c:	0003      	movs	r3, r0
   2526e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   25270:	230f      	movs	r3, #15
   25272:	18fb      	adds	r3, r7, r3
   25274:	781b      	ldrb	r3, [r3, #0]
   25276:	b25b      	sxtb	r3, r3
   25278:	2b00      	cmp	r3, #0
   2527a:	d014      	beq.n	252a6 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   2527c:	23a8      	movs	r3, #168	; 0xa8
   2527e:	005a      	lsls	r2, r3, #1
   25280:	4925      	ldr	r1, [pc, #148]	; (25318 <chip_wake+0x168>)
   25282:	4b26      	ldr	r3, [pc, #152]	; (2531c <chip_wake+0x16c>)
   25284:	0018      	movs	r0, r3
   25286:	4b26      	ldr	r3, [pc, #152]	; (25320 <chip_wake+0x170>)
   25288:	4798      	blx	r3
   2528a:	230f      	movs	r3, #15
   2528c:	18fb      	adds	r3, r7, r3
   2528e:	2100      	movs	r1, #0
   25290:	5659      	ldrsb	r1, [r3, r1]
   25292:	683a      	ldr	r2, [r7, #0]
   25294:	4b23      	ldr	r3, [pc, #140]	; (25324 <chip_wake+0x174>)
   25296:	0018      	movs	r0, r3
   25298:	4b21      	ldr	r3, [pc, #132]	; (25320 <chip_wake+0x170>)
   2529a:	4798      	blx	r3
   2529c:	4b22      	ldr	r3, [pc, #136]	; (25328 <chip_wake+0x178>)
   2529e:	0018      	movs	r0, r3
   252a0:	4b1f      	ldr	r3, [pc, #124]	; (25320 <chip_wake+0x170>)
   252a2:	4798      	blx	r3
			goto _WAKE_EXIT;
   252a4:	e02b      	b.n	252fe <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   252a6:	683b      	ldr	r3, [r7, #0]
   252a8:	2204      	movs	r2, #4
   252aa:	4013      	ands	r3, r2
   252ac:	d11c      	bne.n	252e8 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   252ae:	2002      	movs	r0, #2
   252b0:	4b1e      	ldr	r3, [pc, #120]	; (2532c <chip_wake+0x17c>)
   252b2:	4798      	blx	r3
		trials++;
   252b4:	68bb      	ldr	r3, [r7, #8]
   252b6:	3301      	adds	r3, #1
   252b8:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   252ba:	68bb      	ldr	r3, [r7, #8]
   252bc:	2b04      	cmp	r3, #4
   252be:	d9ce      	bls.n	2525e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   252c0:	23ad      	movs	r3, #173	; 0xad
   252c2:	005a      	lsls	r2, r3, #1
   252c4:	4914      	ldr	r1, [pc, #80]	; (25318 <chip_wake+0x168>)
   252c6:	4b15      	ldr	r3, [pc, #84]	; (2531c <chip_wake+0x16c>)
   252c8:	0018      	movs	r0, r3
   252ca:	4b15      	ldr	r3, [pc, #84]	; (25320 <chip_wake+0x170>)
   252cc:	4798      	blx	r3
   252ce:	4b18      	ldr	r3, [pc, #96]	; (25330 <chip_wake+0x180>)
   252d0:	0018      	movs	r0, r3
   252d2:	4b13      	ldr	r3, [pc, #76]	; (25320 <chip_wake+0x170>)
   252d4:	4798      	blx	r3
   252d6:	4b14      	ldr	r3, [pc, #80]	; (25328 <chip_wake+0x178>)
   252d8:	0018      	movs	r0, r3
   252da:	4b11      	ldr	r3, [pc, #68]	; (25320 <chip_wake+0x170>)
   252dc:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   252de:	230f      	movs	r3, #15
   252e0:	18fb      	adds	r3, r7, r3
   252e2:	22fc      	movs	r2, #252	; 0xfc
   252e4:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   252e6:	e00a      	b.n	252fe <chip_wake+0x14e>
			break;
   252e8:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   252ea:	4b12      	ldr	r3, [pc, #72]	; (25334 <chip_wake+0x184>)
   252ec:	4798      	blx	r3
   252ee:	e006      	b.n	252fe <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   252f0:	46c0      	nop			; (mov r8, r8)
   252f2:	e004      	b.n	252fe <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   252f4:	46c0      	nop			; (mov r8, r8)
   252f6:	e002      	b.n	252fe <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   252f8:	46c0      	nop			; (mov r8, r8)
   252fa:	e000      	b.n	252fe <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   252fc:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   252fe:	230f      	movs	r3, #15
   25300:	18fb      	adds	r3, r7, r3
   25302:	781b      	ldrb	r3, [r3, #0]
   25304:	b25b      	sxtb	r3, r3
}
   25306:	0018      	movs	r0, r3
   25308:	46bd      	mov	sp, r7
   2530a:	b005      	add	sp, #20
   2530c:	bd90      	pop	{r4, r7, pc}
   2530e:	46c0      	nop			; (mov r8, r8)
   25310:	000256e1 	.word	0x000256e1
   25314:	00025705 	.word	0x00025705
   25318:	0003bc94 	.word	0x0003bc94
   2531c:	0003bc08 	.word	0x0003bc08
   25320:	00020889 	.word	0x00020889
   25324:	0003bc1c 	.word	0x0003bc1c
   25328:	0003bc34 	.word	0x0003bc34
   2532c:	00022d71 	.word	0x00022d71
   25330:	0003bc38 	.word	0x0003bc38
   25334:	000256a1 	.word	0x000256a1

00025338 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   25338:	b580      	push	{r7, lr}
   2533a:	b088      	sub	sp, #32
   2533c:	af00      	add	r7, sp, #0
   2533e:	0002      	movs	r2, r0
   25340:	1dfb      	adds	r3, r7, #7
   25342:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   25344:	2313      	movs	r3, #19
   25346:	18fb      	adds	r3, r7, r3
   25348:	2200      	movs	r2, #0
   2534a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   2534c:	2300      	movs	r3, #0
   2534e:	61fb      	str	r3, [r7, #28]
   25350:	2300      	movs	r3, #0
   25352:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   25354:	2300      	movs	r3, #0
   25356:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   25358:	4b4a      	ldr	r3, [pc, #296]	; (25484 <wait_for_bootrom+0x14c>)
   2535a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   2535c:	2300      	movs	r3, #0
   2535e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   25360:	4b49      	ldr	r3, [pc, #292]	; (25488 <wait_for_bootrom+0x150>)
   25362:	0018      	movs	r0, r3
   25364:	4b49      	ldr	r3, [pc, #292]	; (2548c <wait_for_bootrom+0x154>)
   25366:	4798      	blx	r3
   25368:	0003      	movs	r3, r0
   2536a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   2536c:	69fb      	ldr	r3, [r7, #28]
   2536e:	2b00      	cmp	r3, #0
   25370:	db03      	blt.n	2537a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   25372:	2001      	movs	r0, #1
   25374:	4b46      	ldr	r3, [pc, #280]	; (25490 <wait_for_bootrom+0x158>)
   25376:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   25378:	e7f2      	b.n	25360 <wait_for_bootrom+0x28>
			break;
   2537a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   2537c:	4b45      	ldr	r3, [pc, #276]	; (25494 <wait_for_bootrom+0x15c>)
   2537e:	0018      	movs	r0, r3
   25380:	4b42      	ldr	r3, [pc, #264]	; (2548c <wait_for_bootrom+0x154>)
   25382:	4798      	blx	r3
   25384:	0003      	movs	r3, r0
   25386:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   25388:	69fb      	ldr	r3, [r7, #28]
   2538a:	2201      	movs	r2, #1
   2538c:	4013      	ands	r3, r2
   2538e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   25390:	69fb      	ldr	r3, [r7, #28]
   25392:	2b00      	cmp	r3, #0
   25394:	d112      	bne.n	253bc <wait_for_bootrom+0x84>
	{
		reg = 0;
   25396:	2300      	movs	r3, #0
   25398:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2539a:	e00b      	b.n	253b4 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   2539c:	2001      	movs	r0, #1
   2539e:	4b3c      	ldr	r3, [pc, #240]	; (25490 <wait_for_bootrom+0x158>)
   253a0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   253a2:	4b3d      	ldr	r3, [pc, #244]	; (25498 <wait_for_bootrom+0x160>)
   253a4:	0018      	movs	r0, r3
   253a6:	4b39      	ldr	r3, [pc, #228]	; (2548c <wait_for_bootrom+0x154>)
   253a8:	4798      	blx	r3
   253aa:	0003      	movs	r3, r0
   253ac:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   253ae:	69bb      	ldr	r3, [r7, #24]
   253b0:	3301      	adds	r3, #1
   253b2:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   253b4:	69fb      	ldr	r3, [r7, #28]
   253b6:	4a39      	ldr	r2, [pc, #228]	; (2549c <wait_for_bootrom+0x164>)
   253b8:	4293      	cmp	r3, r2
   253ba:	d1ef      	bne.n	2539c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   253bc:	1dfb      	adds	r3, r7, #7
   253be:	781b      	ldrb	r3, [r3, #0]
   253c0:	2b02      	cmp	r3, #2
   253c2:	d10d      	bne.n	253e0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   253c4:	4a36      	ldr	r2, [pc, #216]	; (254a0 <wait_for_bootrom+0x168>)
   253c6:	4b37      	ldr	r3, [pc, #220]	; (254a4 <wait_for_bootrom+0x16c>)
   253c8:	0011      	movs	r1, r2
   253ca:	0018      	movs	r0, r3
   253cc:	4b36      	ldr	r3, [pc, #216]	; (254a8 <wait_for_bootrom+0x170>)
   253ce:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   253d0:	2380      	movs	r3, #128	; 0x80
   253d2:	035b      	lsls	r3, r3, #13
   253d4:	4a35      	ldr	r2, [pc, #212]	; (254ac <wait_for_bootrom+0x174>)
   253d6:	0019      	movs	r1, r3
   253d8:	0010      	movs	r0, r2
   253da:	4b33      	ldr	r3, [pc, #204]	; (254a8 <wait_for_bootrom+0x170>)
   253dc:	4798      	blx	r3
   253de:	e022      	b.n	25426 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   253e0:	1dfb      	adds	r3, r7, #7
   253e2:	781b      	ldrb	r3, [r3, #0]
   253e4:	2b03      	cmp	r3, #3
   253e6:	d10b      	bne.n	25400 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   253e8:	4a2d      	ldr	r2, [pc, #180]	; (254a0 <wait_for_bootrom+0x168>)
   253ea:	4b2e      	ldr	r3, [pc, #184]	; (254a4 <wait_for_bootrom+0x16c>)
   253ec:	0011      	movs	r1, r2
   253ee:	0018      	movs	r0, r3
   253f0:	4b2d      	ldr	r3, [pc, #180]	; (254a8 <wait_for_bootrom+0x170>)
   253f2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   253f4:	4b2d      	ldr	r3, [pc, #180]	; (254ac <wait_for_bootrom+0x174>)
   253f6:	2100      	movs	r1, #0
   253f8:	0018      	movs	r0, r3
   253fa:	4b2b      	ldr	r3, [pc, #172]	; (254a8 <wait_for_bootrom+0x170>)
   253fc:	4798      	blx	r3
   253fe:	e012      	b.n	25426 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   25400:	1dfb      	adds	r3, r7, #7
   25402:	781b      	ldrb	r3, [r3, #0]
   25404:	2b04      	cmp	r3, #4
   25406:	d108      	bne.n	2541a <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   25408:	2380      	movs	r3, #128	; 0x80
   2540a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2540c:	68fb      	ldr	r3, [r7, #12]
   2540e:	4a27      	ldr	r2, [pc, #156]	; (254ac <wait_for_bootrom+0x174>)
   25410:	0019      	movs	r1, r3
   25412:	0010      	movs	r0, r2
   25414:	4b24      	ldr	r3, [pc, #144]	; (254a8 <wait_for_bootrom+0x170>)
   25416:	4798      	blx	r3
   25418:	e005      	b.n	25426 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2541a:	68fb      	ldr	r3, [r7, #12]
   2541c:	4a23      	ldr	r2, [pc, #140]	; (254ac <wait_for_bootrom+0x174>)
   2541e:	0019      	movs	r1, r3
   25420:	0010      	movs	r0, r2
   25422:	4b21      	ldr	r3, [pc, #132]	; (254a8 <wait_for_bootrom+0x170>)
   25424:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   25426:	4b22      	ldr	r3, [pc, #136]	; (254b0 <wait_for_bootrom+0x178>)
   25428:	4798      	blx	r3
   2542a:	0003      	movs	r3, r0
   2542c:	051b      	lsls	r3, r3, #20
   2542e:	0d1b      	lsrs	r3, r3, #20
   25430:	4a20      	ldr	r2, [pc, #128]	; (254b4 <wait_for_bootrom+0x17c>)
   25432:	4293      	cmp	r3, r2
   25434:	d906      	bls.n	25444 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   25436:	697b      	ldr	r3, [r7, #20]
   25438:	2202      	movs	r2, #2
   2543a:	4313      	orrs	r3, r2
   2543c:	0018      	movs	r0, r3
   2543e:	4b1e      	ldr	r3, [pc, #120]	; (254b8 <wait_for_bootrom+0x180>)
   25440:	4798      	blx	r3
   25442:	e003      	b.n	2544c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   25444:	697b      	ldr	r3, [r7, #20]
   25446:	0018      	movs	r0, r3
   25448:	4b1b      	ldr	r3, [pc, #108]	; (254b8 <wait_for_bootrom+0x180>)
   2544a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   2544c:	4b1b      	ldr	r3, [pc, #108]	; (254bc <wait_for_bootrom+0x184>)
   2544e:	0018      	movs	r0, r3
   25450:	4b1b      	ldr	r3, [pc, #108]	; (254c0 <wait_for_bootrom+0x188>)
   25452:	4798      	blx	r3
   25454:	68fa      	ldr	r2, [r7, #12]
   25456:	4b1b      	ldr	r3, [pc, #108]	; (254c4 <wait_for_bootrom+0x18c>)
   25458:	0011      	movs	r1, r2
   2545a:	0018      	movs	r0, r3
   2545c:	4b18      	ldr	r3, [pc, #96]	; (254c0 <wait_for_bootrom+0x188>)
   2545e:	4798      	blx	r3
   25460:	4b19      	ldr	r3, [pc, #100]	; (254c8 <wait_for_bootrom+0x190>)
   25462:	0018      	movs	r0, r3
   25464:	4b16      	ldr	r3, [pc, #88]	; (254c0 <wait_for_bootrom+0x188>)
   25466:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   25468:	4a18      	ldr	r2, [pc, #96]	; (254cc <wait_for_bootrom+0x194>)
   2546a:	4b0b      	ldr	r3, [pc, #44]	; (25498 <wait_for_bootrom+0x160>)
   2546c:	0011      	movs	r1, r2
   2546e:	0018      	movs	r0, r3
   25470:	4b0d      	ldr	r3, [pc, #52]	; (254a8 <wait_for_bootrom+0x170>)
   25472:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   25474:	2313      	movs	r3, #19
   25476:	18fb      	adds	r3, r7, r3
   25478:	781b      	ldrb	r3, [r3, #0]
   2547a:	b25b      	sxtb	r3, r3
}
   2547c:	0018      	movs	r0, r3
   2547e:	46bd      	mov	sp, r7
   25480:	b008      	add	sp, #32
   25482:	bd80      	pop	{r7, pc}
   25484:	13301354 	.word	0x13301354
   25488:	00001014 	.word	0x00001014
   2548c:	000256c1 	.word	0x000256c1
   25490:	00022d71 	.word	0x00022d71
   25494:	000207bc 	.word	0x000207bc
   25498:	000c000c 	.word	0x000c000c
   2549c:	10add09e 	.word	0x10add09e
   254a0:	3c1cd57d 	.word	0x3c1cd57d
   254a4:	000207ac 	.word	0x000207ac
   254a8:	00025705 	.word	0x00025705
   254ac:	0000108c 	.word	0x0000108c
   254b0:	00024fe1 	.word	0x00024fe1
   254b4:	0000039f 	.word	0x0000039f
   254b8:	00024eb1 	.word	0x00024eb1
   254bc:	0003bc54 	.word	0x0003bc54
   254c0:	00020889 	.word	0x00020889
   254c4:	0003bc60 	.word	0x0003bc60
   254c8:	0003bc34 	.word	0x0003bc34
   254cc:	ef522f61 	.word	0xef522f61

000254d0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   254d0:	b580      	push	{r7, lr}
   254d2:	b088      	sub	sp, #32
   254d4:	af00      	add	r7, sp, #0
   254d6:	0002      	movs	r2, r0
   254d8:	1dfb      	adds	r3, r7, #7
   254da:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   254dc:	231f      	movs	r3, #31
   254de:	18fb      	adds	r3, r7, r3
   254e0:	2200      	movs	r2, #0
   254e2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   254e4:	2300      	movs	r3, #0
   254e6:	61bb      	str	r3, [r7, #24]
   254e8:	2300      	movs	r3, #0
   254ea:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   254ec:	2301      	movs	r3, #1
   254ee:	425b      	negs	r3, r3
   254f0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   254f2:	4b1d      	ldr	r3, [pc, #116]	; (25568 <wait_for_firmware_start+0x98>)
   254f4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   254f6:	4b1d      	ldr	r3, [pc, #116]	; (2556c <wait_for_firmware_start+0x9c>)
   254f8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   254fa:	1dfb      	adds	r3, r7, #7
   254fc:	781b      	ldrb	r3, [r3, #0]
   254fe:	2b02      	cmp	r3, #2
   25500:	d003      	beq.n	2550a <wait_for_firmware_start+0x3a>
   25502:	1dfb      	adds	r3, r7, #7
   25504:	781b      	ldrb	r3, [r3, #0]
   25506:	2b03      	cmp	r3, #3
   25508:	d119      	bne.n	2553e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   2550a:	4b19      	ldr	r3, [pc, #100]	; (25570 <wait_for_firmware_start+0xa0>)
   2550c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   2550e:	4b19      	ldr	r3, [pc, #100]	; (25574 <wait_for_firmware_start+0xa4>)
   25510:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   25512:	e014      	b.n	2553e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   25514:	2002      	movs	r0, #2
   25516:	4b18      	ldr	r3, [pc, #96]	; (25578 <wait_for_firmware_start+0xa8>)
   25518:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   2551a:	68fb      	ldr	r3, [r7, #12]
   2551c:	0018      	movs	r0, r3
   2551e:	4b17      	ldr	r3, [pc, #92]	; (2557c <wait_for_firmware_start+0xac>)
   25520:	4798      	blx	r3
   25522:	0003      	movs	r3, r0
   25524:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   25526:	697b      	ldr	r3, [r7, #20]
   25528:	3301      	adds	r3, #1
   2552a:	617b      	str	r3, [r7, #20]
   2552c:	697a      	ldr	r2, [r7, #20]
   2552e:	693b      	ldr	r3, [r7, #16]
   25530:	429a      	cmp	r2, r3
   25532:	d304      	bcc.n	2553e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   25534:	231f      	movs	r3, #31
   25536:	18fb      	adds	r3, r7, r3
   25538:	22fb      	movs	r2, #251	; 0xfb
   2553a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   2553c:	e00c      	b.n	25558 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   2553e:	68ba      	ldr	r2, [r7, #8]
   25540:	69bb      	ldr	r3, [r7, #24]
   25542:	429a      	cmp	r2, r3
   25544:	d1e6      	bne.n	25514 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   25546:	68bb      	ldr	r3, [r7, #8]
   25548:	4a08      	ldr	r2, [pc, #32]	; (2556c <wait_for_firmware_start+0x9c>)
   2554a:	4293      	cmp	r3, r2
   2554c:	d104      	bne.n	25558 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2554e:	4b06      	ldr	r3, [pc, #24]	; (25568 <wait_for_firmware_start+0x98>)
   25550:	2100      	movs	r1, #0
   25552:	0018      	movs	r0, r3
   25554:	4b0a      	ldr	r3, [pc, #40]	; (25580 <wait_for_firmware_start+0xb0>)
   25556:	4798      	blx	r3
	}
ERR:
	return ret;
   25558:	231f      	movs	r3, #31
   2555a:	18fb      	adds	r3, r7, r3
   2555c:	781b      	ldrb	r3, [r3, #0]
   2555e:	b25b      	sxtb	r3, r3
}
   25560:	0018      	movs	r0, r3
   25562:	46bd      	mov	sp, r7
   25564:	b008      	add	sp, #32
   25566:	bd80      	pop	{r7, pc}
   25568:	0000108c 	.word	0x0000108c
   2556c:	02532636 	.word	0x02532636
   25570:	000207ac 	.word	0x000207ac
   25574:	d75dc1c3 	.word	0xd75dc1c3
   25578:	00022d71 	.word	0x00022d71
   2557c:	000256c1 	.word	0x000256c1
   25580:	00025705 	.word	0x00025705

00025584 <chip_deinit>:

sint8 chip_deinit(void)
{
   25584:	b590      	push	{r4, r7, lr}
   25586:	b083      	sub	sp, #12
   25588:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2558a:	2300      	movs	r3, #0
   2558c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2558e:	1dfc      	adds	r4, r7, #7
   25590:	003a      	movs	r2, r7
   25592:	23a0      	movs	r3, #160	; 0xa0
   25594:	015b      	lsls	r3, r3, #5
   25596:	0011      	movs	r1, r2
   25598:	0018      	movs	r0, r3
   2559a:	4b20      	ldr	r3, [pc, #128]	; (2561c <chip_deinit+0x98>)
   2559c:	4798      	blx	r3
   2559e:	0003      	movs	r3, r0
   255a0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   255a2:	1dfb      	adds	r3, r7, #7
   255a4:	781b      	ldrb	r3, [r3, #0]
   255a6:	b25b      	sxtb	r3, r3
   255a8:	2b00      	cmp	r3, #0
   255aa:	d00e      	beq.n	255ca <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   255ac:	4a1c      	ldr	r2, [pc, #112]	; (25620 <chip_deinit+0x9c>)
   255ae:	491d      	ldr	r1, [pc, #116]	; (25624 <chip_deinit+0xa0>)
   255b0:	4b1d      	ldr	r3, [pc, #116]	; (25628 <chip_deinit+0xa4>)
   255b2:	0018      	movs	r0, r3
   255b4:	4b1d      	ldr	r3, [pc, #116]	; (2562c <chip_deinit+0xa8>)
   255b6:	4798      	blx	r3
   255b8:	4b1d      	ldr	r3, [pc, #116]	; (25630 <chip_deinit+0xac>)
   255ba:	0018      	movs	r0, r3
   255bc:	4b1b      	ldr	r3, [pc, #108]	; (2562c <chip_deinit+0xa8>)
   255be:	4798      	blx	r3
   255c0:	4b1c      	ldr	r3, [pc, #112]	; (25634 <chip_deinit+0xb0>)
   255c2:	0018      	movs	r0, r3
   255c4:	4b19      	ldr	r3, [pc, #100]	; (2562c <chip_deinit+0xa8>)
   255c6:	4798      	blx	r3
		goto ERR1;
   255c8:	e021      	b.n	2560e <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   255ca:	683b      	ldr	r3, [r7, #0]
   255cc:	4a1a      	ldr	r2, [pc, #104]	; (25638 <chip_deinit+0xb4>)
   255ce:	4013      	ands	r3, r2
   255d0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   255d2:	683a      	ldr	r2, [r7, #0]
   255d4:	1dfc      	adds	r4, r7, #7
   255d6:	23a0      	movs	r3, #160	; 0xa0
   255d8:	015b      	lsls	r3, r3, #5
   255da:	0011      	movs	r1, r2
   255dc:	0018      	movs	r0, r3
   255de:	4b17      	ldr	r3, [pc, #92]	; (2563c <chip_deinit+0xb8>)
   255e0:	4798      	blx	r3
   255e2:	0003      	movs	r3, r0
   255e4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   255e6:	1dfb      	adds	r3, r7, #7
   255e8:	781b      	ldrb	r3, [r3, #0]
   255ea:	b25b      	sxtb	r3, r3
   255ec:	2b00      	cmp	r3, #0
   255ee:	d00e      	beq.n	2560e <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   255f0:	4a13      	ldr	r2, [pc, #76]	; (25640 <chip_deinit+0xbc>)
   255f2:	490c      	ldr	r1, [pc, #48]	; (25624 <chip_deinit+0xa0>)
   255f4:	4b0c      	ldr	r3, [pc, #48]	; (25628 <chip_deinit+0xa4>)
   255f6:	0018      	movs	r0, r3
   255f8:	4b0c      	ldr	r3, [pc, #48]	; (2562c <chip_deinit+0xa8>)
   255fa:	4798      	blx	r3
   255fc:	4b0c      	ldr	r3, [pc, #48]	; (25630 <chip_deinit+0xac>)
   255fe:	0018      	movs	r0, r3
   25600:	4b0a      	ldr	r3, [pc, #40]	; (2562c <chip_deinit+0xa8>)
   25602:	4798      	blx	r3
   25604:	4b0b      	ldr	r3, [pc, #44]	; (25634 <chip_deinit+0xb0>)
   25606:	0018      	movs	r0, r3
   25608:	4b08      	ldr	r3, [pc, #32]	; (2562c <chip_deinit+0xa8>)
   2560a:	4798      	blx	r3
		goto ERR1;
   2560c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2560e:	1dfb      	adds	r3, r7, #7
   25610:	781b      	ldrb	r3, [r3, #0]
   25612:	b25b      	sxtb	r3, r3
}
   25614:	0018      	movs	r0, r3
   25616:	46bd      	mov	sp, r7
   25618:	b003      	add	sp, #12
   2561a:	bd90      	pop	{r4, r7, pc}
   2561c:	000256e1 	.word	0x000256e1
   25620:	00000201 	.word	0x00000201
   25624:	0003bca0 	.word	0x0003bca0
   25628:	0003bc08 	.word	0x0003bc08
   2562c:	00020889 	.word	0x00020889
   25630:	0003bc78 	.word	0x0003bc78
   25634:	0003bc34 	.word	0x0003bc34
   25638:	fffffbff 	.word	0xfffffbff
   2563c:	00025705 	.word	0x00025705
   25640:	00000207 	.word	0x00000207

00025644 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   25644:	b590      	push	{r4, r7, lr}
   25646:	b085      	sub	sp, #20
   25648:	af00      	add	r7, sp, #0
   2564a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2564c:	230f      	movs	r3, #15
   2564e:	18fb      	adds	r3, r7, r3
   25650:	2200      	movs	r2, #0
   25652:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   25654:	230f      	movs	r3, #15
   25656:	18fc      	adds	r4, r7, r3
   25658:	687b      	ldr	r3, [r7, #4]
   2565a:	0018      	movs	r0, r3
   2565c:	4b05      	ldr	r3, [pc, #20]	; (25674 <nm_bus_iface_init+0x30>)
   2565e:	4798      	blx	r3
   25660:	0003      	movs	r3, r0
   25662:	7023      	strb	r3, [r4, #0]
	return ret;
   25664:	230f      	movs	r3, #15
   25666:	18fb      	adds	r3, r7, r3
   25668:	781b      	ldrb	r3, [r3, #0]
   2566a:	b25b      	sxtb	r3, r3
}
   2566c:	0018      	movs	r0, r3
   2566e:	46bd      	mov	sp, r7
   25670:	b005      	add	sp, #20
   25672:	bd90      	pop	{r4, r7, pc}
   25674:	0002342d 	.word	0x0002342d

00025678 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   25678:	b590      	push	{r4, r7, lr}
   2567a:	b083      	sub	sp, #12
   2567c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2567e:	1dfb      	adds	r3, r7, #7
   25680:	2200      	movs	r2, #0
   25682:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   25684:	1dfc      	adds	r4, r7, #7
   25686:	4b05      	ldr	r3, [pc, #20]	; (2569c <nm_bus_iface_deinit+0x24>)
   25688:	4798      	blx	r3
   2568a:	0003      	movs	r3, r0
   2568c:	7023      	strb	r3, [r4, #0]

	return ret;
   2568e:	1dfb      	adds	r3, r7, #7
   25690:	781b      	ldrb	r3, [r3, #0]
   25692:	b25b      	sxtb	r3, r3
}
   25694:	0018      	movs	r0, r3
   25696:	46bd      	mov	sp, r7
   25698:	b003      	add	sp, #12
   2569a:	bd90      	pop	{r4, r7, pc}
   2569c:	000235a5 	.word	0x000235a5

000256a0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   256a0:	b580      	push	{r7, lr}
   256a2:	b082      	sub	sp, #8
   256a4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   256a6:	1dfb      	adds	r3, r7, #7
   256a8:	2200      	movs	r2, #0
   256aa:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   256ac:	4b03      	ldr	r3, [pc, #12]	; (256bc <nm_bus_reset+0x1c>)
   256ae:	4798      	blx	r3
   256b0:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   256b2:	0018      	movs	r0, r3
   256b4:	46bd      	mov	sp, r7
   256b6:	b002      	add	sp, #8
   256b8:	bd80      	pop	{r7, pc}
   256ba:	46c0      	nop			; (mov r8, r8)
   256bc:	000274cd 	.word	0x000274cd

000256c0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   256c0:	b580      	push	{r7, lr}
   256c2:	b082      	sub	sp, #8
   256c4:	af00      	add	r7, sp, #0
   256c6:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   256c8:	687b      	ldr	r3, [r7, #4]
   256ca:	0018      	movs	r0, r3
   256cc:	4b03      	ldr	r3, [pc, #12]	; (256dc <nm_read_reg+0x1c>)
   256ce:	4798      	blx	r3
   256d0:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   256d2:	0018      	movs	r0, r3
   256d4:	46bd      	mov	sp, r7
   256d6:	b002      	add	sp, #8
   256d8:	bd80      	pop	{r7, pc}
   256da:	46c0      	nop			; (mov r8, r8)
   256dc:	00027661 	.word	0x00027661

000256e0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   256e0:	b580      	push	{r7, lr}
   256e2:	b082      	sub	sp, #8
   256e4:	af00      	add	r7, sp, #0
   256e6:	6078      	str	r0, [r7, #4]
   256e8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   256ea:	683a      	ldr	r2, [r7, #0]
   256ec:	687b      	ldr	r3, [r7, #4]
   256ee:	0011      	movs	r1, r2
   256f0:	0018      	movs	r0, r3
   256f2:	4b03      	ldr	r3, [pc, #12]	; (25700 <nm_read_reg_with_ret+0x20>)
   256f4:	4798      	blx	r3
   256f6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   256f8:	0018      	movs	r0, r3
   256fa:	46bd      	mov	sp, r7
   256fc:	b002      	add	sp, #8
   256fe:	bd80      	pop	{r7, pc}
   25700:	00027685 	.word	0x00027685

00025704 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   25704:	b580      	push	{r7, lr}
   25706:	b082      	sub	sp, #8
   25708:	af00      	add	r7, sp, #0
   2570a:	6078      	str	r0, [r7, #4]
   2570c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   2570e:	683a      	ldr	r2, [r7, #0]
   25710:	687b      	ldr	r3, [r7, #4]
   25712:	0011      	movs	r1, r2
   25714:	0018      	movs	r0, r3
   25716:	4b03      	ldr	r3, [pc, #12]	; (25724 <nm_write_reg+0x20>)
   25718:	4798      	blx	r3
   2571a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   2571c:	0018      	movs	r0, r3
   2571e:	46bd      	mov	sp, r7
   25720:	b002      	add	sp, #8
   25722:	bd80      	pop	{r7, pc}
   25724:	000276d5 	.word	0x000276d5

00025728 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25728:	b580      	push	{r7, lr}
   2572a:	b084      	sub	sp, #16
   2572c:	af00      	add	r7, sp, #0
   2572e:	60f8      	str	r0, [r7, #12]
   25730:	60b9      	str	r1, [r7, #8]
   25732:	1dbb      	adds	r3, r7, #6
   25734:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   25736:	1dbb      	adds	r3, r7, #6
   25738:	881a      	ldrh	r2, [r3, #0]
   2573a:	68b9      	ldr	r1, [r7, #8]
   2573c:	68fb      	ldr	r3, [r7, #12]
   2573e:	0018      	movs	r0, r3
   25740:	4b03      	ldr	r3, [pc, #12]	; (25750 <p_nm_read_block+0x28>)
   25742:	4798      	blx	r3
   25744:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   25746:	0018      	movs	r0, r3
   25748:	46bd      	mov	sp, r7
   2574a:	b004      	add	sp, #16
   2574c:	bd80      	pop	{r7, pc}
   2574e:	46c0      	nop			; (mov r8, r8)
   25750:	00027725 	.word	0x00027725

00025754 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   25754:	b580      	push	{r7, lr}
   25756:	b086      	sub	sp, #24
   25758:	af00      	add	r7, sp, #0
   2575a:	60f8      	str	r0, [r7, #12]
   2575c:	60b9      	str	r1, [r7, #8]
   2575e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   25760:	4b2d      	ldr	r3, [pc, #180]	; (25818 <nm_read_block+0xc4>)
   25762:	881a      	ldrh	r2, [r3, #0]
   25764:	2310      	movs	r3, #16
   25766:	18fb      	adds	r3, r7, r3
   25768:	3a08      	subs	r2, #8
   2576a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   2576c:	2300      	movs	r3, #0
   2576e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   25770:	2313      	movs	r3, #19
   25772:	18fb      	adds	r3, r7, r3
   25774:	2200      	movs	r2, #0
   25776:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   25778:	2310      	movs	r3, #16
   2577a:	18fb      	adds	r3, r7, r3
   2577c:	881a      	ldrh	r2, [r3, #0]
   2577e:	687b      	ldr	r3, [r7, #4]
   25780:	429a      	cmp	r2, r3
   25782:	d313      	bcc.n	257ac <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   25784:	68ba      	ldr	r2, [r7, #8]
   25786:	697b      	ldr	r3, [r7, #20]
   25788:	18d1      	adds	r1, r2, r3
   2578a:	687b      	ldr	r3, [r7, #4]
   2578c:	b29a      	uxth	r2, r3
   2578e:	68fb      	ldr	r3, [r7, #12]
   25790:	0018      	movs	r0, r3
   25792:	4b22      	ldr	r3, [pc, #136]	; (2581c <nm_read_block+0xc8>)
   25794:	4798      	blx	r3
   25796:	0003      	movs	r3, r0
   25798:	b2da      	uxtb	r2, r3
   2579a:	2313      	movs	r3, #19
   2579c:	18fb      	adds	r3, r7, r3
   2579e:	781b      	ldrb	r3, [r3, #0]
   257a0:	18d3      	adds	r3, r2, r3
   257a2:	b2da      	uxtb	r2, r3
   257a4:	2313      	movs	r3, #19
   257a6:	18fb      	adds	r3, r7, r3
   257a8:	701a      	strb	r2, [r3, #0]
			break;
   257aa:	e02d      	b.n	25808 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   257ac:	68ba      	ldr	r2, [r7, #8]
   257ae:	697b      	ldr	r3, [r7, #20]
   257b0:	18d1      	adds	r1, r2, r3
   257b2:	2310      	movs	r3, #16
   257b4:	18fb      	adds	r3, r7, r3
   257b6:	881a      	ldrh	r2, [r3, #0]
   257b8:	68fb      	ldr	r3, [r7, #12]
   257ba:	0018      	movs	r0, r3
   257bc:	4b17      	ldr	r3, [pc, #92]	; (2581c <nm_read_block+0xc8>)
   257be:	4798      	blx	r3
   257c0:	0003      	movs	r3, r0
   257c2:	b2da      	uxtb	r2, r3
   257c4:	2313      	movs	r3, #19
   257c6:	18fb      	adds	r3, r7, r3
   257c8:	781b      	ldrb	r3, [r3, #0]
   257ca:	18d3      	adds	r3, r2, r3
   257cc:	b2da      	uxtb	r2, r3
   257ce:	2313      	movs	r3, #19
   257d0:	18fb      	adds	r3, r7, r3
   257d2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   257d4:	2313      	movs	r3, #19
   257d6:	18fb      	adds	r3, r7, r3
   257d8:	781b      	ldrb	r3, [r3, #0]
   257da:	b25b      	sxtb	r3, r3
   257dc:	2b00      	cmp	r3, #0
   257de:	d112      	bne.n	25806 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   257e0:	2310      	movs	r3, #16
   257e2:	18fb      	adds	r3, r7, r3
   257e4:	881b      	ldrh	r3, [r3, #0]
   257e6:	687a      	ldr	r2, [r7, #4]
   257e8:	1ad3      	subs	r3, r2, r3
   257ea:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   257ec:	2310      	movs	r3, #16
   257ee:	18fb      	adds	r3, r7, r3
   257f0:	881b      	ldrh	r3, [r3, #0]
   257f2:	697a      	ldr	r2, [r7, #20]
   257f4:	18d3      	adds	r3, r2, r3
   257f6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   257f8:	2310      	movs	r3, #16
   257fa:	18fb      	adds	r3, r7, r3
   257fc:	881b      	ldrh	r3, [r3, #0]
   257fe:	68fa      	ldr	r2, [r7, #12]
   25800:	18d3      	adds	r3, r2, r3
   25802:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   25804:	e7b8      	b.n	25778 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   25806:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   25808:	2313      	movs	r3, #19
   2580a:	18fb      	adds	r3, r7, r3
   2580c:	781b      	ldrb	r3, [r3, #0]
   2580e:	b25b      	sxtb	r3, r3
}
   25810:	0018      	movs	r0, r3
   25812:	46bd      	mov	sp, r7
   25814:	b006      	add	sp, #24
   25816:	bd80      	pop	{r7, pc}
   25818:	20000118 	.word	0x20000118
   2581c:	00025729 	.word	0x00025729

00025820 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25820:	b580      	push	{r7, lr}
   25822:	b084      	sub	sp, #16
   25824:	af00      	add	r7, sp, #0
   25826:	60f8      	str	r0, [r7, #12]
   25828:	60b9      	str	r1, [r7, #8]
   2582a:	1dbb      	adds	r3, r7, #6
   2582c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   2582e:	1dbb      	adds	r3, r7, #6
   25830:	881a      	ldrh	r2, [r3, #0]
   25832:	68b9      	ldr	r1, [r7, #8]
   25834:	68fb      	ldr	r3, [r7, #12]
   25836:	0018      	movs	r0, r3
   25838:	4b03      	ldr	r3, [pc, #12]	; (25848 <p_nm_write_block+0x28>)
   2583a:	4798      	blx	r3
   2583c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   2583e:	0018      	movs	r0, r3
   25840:	46bd      	mov	sp, r7
   25842:	b004      	add	sp, #16
   25844:	bd80      	pop	{r7, pc}
   25846:	46c0      	nop			; (mov r8, r8)
   25848:	0002777d 	.word	0x0002777d

0002584c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   2584c:	b580      	push	{r7, lr}
   2584e:	b086      	sub	sp, #24
   25850:	af00      	add	r7, sp, #0
   25852:	60f8      	str	r0, [r7, #12]
   25854:	60b9      	str	r1, [r7, #8]
   25856:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   25858:	4b2d      	ldr	r3, [pc, #180]	; (25910 <nm_write_block+0xc4>)
   2585a:	881a      	ldrh	r2, [r3, #0]
   2585c:	2310      	movs	r3, #16
   2585e:	18fb      	adds	r3, r7, r3
   25860:	3a08      	subs	r2, #8
   25862:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   25864:	2300      	movs	r3, #0
   25866:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   25868:	2313      	movs	r3, #19
   2586a:	18fb      	adds	r3, r7, r3
   2586c:	2200      	movs	r2, #0
   2586e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   25870:	2310      	movs	r3, #16
   25872:	18fb      	adds	r3, r7, r3
   25874:	881a      	ldrh	r2, [r3, #0]
   25876:	687b      	ldr	r3, [r7, #4]
   25878:	429a      	cmp	r2, r3
   2587a:	d313      	bcc.n	258a4 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   2587c:	68ba      	ldr	r2, [r7, #8]
   2587e:	697b      	ldr	r3, [r7, #20]
   25880:	18d1      	adds	r1, r2, r3
   25882:	687b      	ldr	r3, [r7, #4]
   25884:	b29a      	uxth	r2, r3
   25886:	68fb      	ldr	r3, [r7, #12]
   25888:	0018      	movs	r0, r3
   2588a:	4b22      	ldr	r3, [pc, #136]	; (25914 <nm_write_block+0xc8>)
   2588c:	4798      	blx	r3
   2588e:	0003      	movs	r3, r0
   25890:	b2da      	uxtb	r2, r3
   25892:	2313      	movs	r3, #19
   25894:	18fb      	adds	r3, r7, r3
   25896:	781b      	ldrb	r3, [r3, #0]
   25898:	18d3      	adds	r3, r2, r3
   2589a:	b2da      	uxtb	r2, r3
   2589c:	2313      	movs	r3, #19
   2589e:	18fb      	adds	r3, r7, r3
   258a0:	701a      	strb	r2, [r3, #0]
			break;
   258a2:	e02d      	b.n	25900 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   258a4:	68ba      	ldr	r2, [r7, #8]
   258a6:	697b      	ldr	r3, [r7, #20]
   258a8:	18d1      	adds	r1, r2, r3
   258aa:	2310      	movs	r3, #16
   258ac:	18fb      	adds	r3, r7, r3
   258ae:	881a      	ldrh	r2, [r3, #0]
   258b0:	68fb      	ldr	r3, [r7, #12]
   258b2:	0018      	movs	r0, r3
   258b4:	4b17      	ldr	r3, [pc, #92]	; (25914 <nm_write_block+0xc8>)
   258b6:	4798      	blx	r3
   258b8:	0003      	movs	r3, r0
   258ba:	b2da      	uxtb	r2, r3
   258bc:	2313      	movs	r3, #19
   258be:	18fb      	adds	r3, r7, r3
   258c0:	781b      	ldrb	r3, [r3, #0]
   258c2:	18d3      	adds	r3, r2, r3
   258c4:	b2da      	uxtb	r2, r3
   258c6:	2313      	movs	r3, #19
   258c8:	18fb      	adds	r3, r7, r3
   258ca:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   258cc:	2313      	movs	r3, #19
   258ce:	18fb      	adds	r3, r7, r3
   258d0:	781b      	ldrb	r3, [r3, #0]
   258d2:	b25b      	sxtb	r3, r3
   258d4:	2b00      	cmp	r3, #0
   258d6:	d112      	bne.n	258fe <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   258d8:	2310      	movs	r3, #16
   258da:	18fb      	adds	r3, r7, r3
   258dc:	881b      	ldrh	r3, [r3, #0]
   258de:	687a      	ldr	r2, [r7, #4]
   258e0:	1ad3      	subs	r3, r2, r3
   258e2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   258e4:	2310      	movs	r3, #16
   258e6:	18fb      	adds	r3, r7, r3
   258e8:	881b      	ldrh	r3, [r3, #0]
   258ea:	697a      	ldr	r2, [r7, #20]
   258ec:	18d3      	adds	r3, r2, r3
   258ee:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   258f0:	2310      	movs	r3, #16
   258f2:	18fb      	adds	r3, r7, r3
   258f4:	881b      	ldrh	r3, [r3, #0]
   258f6:	68fa      	ldr	r2, [r7, #12]
   258f8:	18d3      	adds	r3, r2, r3
   258fa:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   258fc:	e7b8      	b.n	25870 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   258fe:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   25900:	2313      	movs	r3, #19
   25902:	18fb      	adds	r3, r7, r3
   25904:	781b      	ldrb	r3, [r3, #0]
   25906:	b25b      	sxtb	r3, r3
}
   25908:	0018      	movs	r0, r3
   2590a:	46bd      	mov	sp, r7
   2590c:	b006      	add	sp, #24
   2590e:	bd80      	pop	{r7, pc}
   25910:	20000118 	.word	0x20000118
   25914:	00025821 	.word	0x00025821

00025918 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   25918:	b590      	push	{r4, r7, lr}
   2591a:	b089      	sub	sp, #36	; 0x24
   2591c:	af00      	add	r7, sp, #0
   2591e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   25920:	2300      	movs	r3, #0
   25922:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   25924:	231f      	movs	r3, #31
   25926:	18fb      	adds	r3, r7, r3
   25928:	2200      	movs	r2, #0
   2592a:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   2592c:	230c      	movs	r3, #12
   2592e:	18fb      	adds	r3, r7, r3
   25930:	0018      	movs	r0, r3
   25932:	2308      	movs	r3, #8
   25934:	001a      	movs	r2, r3
   25936:	2100      	movs	r1, #0
   25938:	4b64      	ldr	r3, [pc, #400]	; (25acc <nm_get_firmware_full_info+0x1b4>)
   2593a:	4798      	blx	r3
	if (pstrRev != NULL)
   2593c:	687b      	ldr	r3, [r7, #4]
   2593e:	2b00      	cmp	r3, #0
   25940:	d100      	bne.n	25944 <nm_get_firmware_full_info+0x2c>
   25942:	e0ba      	b.n	25aba <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   25944:	687b      	ldr	r3, [r7, #4]
   25946:	2228      	movs	r2, #40	; 0x28
   25948:	2100      	movs	r1, #0
   2594a:	0018      	movs	r0, r3
   2594c:	4b60      	ldr	r3, [pc, #384]	; (25ad0 <nm_get_firmware_full_info+0x1b8>)
   2594e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   25950:	231f      	movs	r3, #31
   25952:	18fc      	adds	r4, r7, r3
   25954:	2314      	movs	r3, #20
   25956:	18fb      	adds	r3, r7, r3
   25958:	4a5e      	ldr	r2, [pc, #376]	; (25ad4 <nm_get_firmware_full_info+0x1bc>)
   2595a:	0019      	movs	r1, r3
   2595c:	0010      	movs	r0, r2
   2595e:	4b5e      	ldr	r3, [pc, #376]	; (25ad8 <nm_get_firmware_full_info+0x1c0>)
   25960:	4798      	blx	r3
   25962:	0003      	movs	r3, r0
   25964:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   25966:	231f      	movs	r3, #31
   25968:	18fb      	adds	r3, r7, r3
   2596a:	781b      	ldrb	r3, [r3, #0]
   2596c:	b25b      	sxtb	r3, r3
   2596e:	2b00      	cmp	r3, #0
   25970:	d000      	beq.n	25974 <nm_get_firmware_full_info+0x5c>
   25972:	e0a2      	b.n	25aba <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   25974:	697b      	ldr	r3, [r7, #20]
   25976:	2b00      	cmp	r3, #0
   25978:	d100      	bne.n	2597c <nm_get_firmware_full_info+0x64>
   2597a:	e09a      	b.n	25ab2 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   2597c:	697b      	ldr	r3, [r7, #20]
   2597e:	22c0      	movs	r2, #192	; 0xc0
   25980:	0292      	lsls	r2, r2, #10
   25982:	4313      	orrs	r3, r2
   25984:	221f      	movs	r2, #31
   25986:	18bc      	adds	r4, r7, r2
   25988:	220c      	movs	r2, #12
   2598a:	18b9      	adds	r1, r7, r2
   2598c:	2208      	movs	r2, #8
   2598e:	0018      	movs	r0, r3
   25990:	4b52      	ldr	r3, [pc, #328]	; (25adc <nm_get_firmware_full_info+0x1c4>)
   25992:	4798      	blx	r3
   25994:	0003      	movs	r3, r0
   25996:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   25998:	231f      	movs	r3, #31
   2599a:	18fb      	adds	r3, r7, r3
   2599c:	781b      	ldrb	r3, [r3, #0]
   2599e:	b25b      	sxtb	r3, r3
   259a0:	2b00      	cmp	r3, #0
   259a2:	d000      	beq.n	259a6 <nm_get_firmware_full_info+0x8e>
   259a4:	e089      	b.n	25aba <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   259a6:	230c      	movs	r3, #12
   259a8:	18fb      	adds	r3, r7, r3
   259aa:	685b      	ldr	r3, [r3, #4]
   259ac:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   259ae:	697b      	ldr	r3, [r7, #20]
   259b0:	041b      	lsls	r3, r3, #16
   259b2:	0c1b      	lsrs	r3, r3, #16
   259b4:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   259b6:	697b      	ldr	r3, [r7, #20]
   259b8:	2b00      	cmp	r3, #0
   259ba:	d100      	bne.n	259be <nm_get_firmware_full_info+0xa6>
   259bc:	e074      	b.n	25aa8 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   259be:	697b      	ldr	r3, [r7, #20]
   259c0:	22c0      	movs	r2, #192	; 0xc0
   259c2:	0292      	lsls	r2, r2, #10
   259c4:	4313      	orrs	r3, r2
   259c6:	221f      	movs	r2, #31
   259c8:	18bc      	adds	r4, r7, r2
   259ca:	6879      	ldr	r1, [r7, #4]
   259cc:	2228      	movs	r2, #40	; 0x28
   259ce:	0018      	movs	r0, r3
   259d0:	4b42      	ldr	r3, [pc, #264]	; (25adc <nm_get_firmware_full_info+0x1c4>)
   259d2:	4798      	blx	r3
   259d4:	0003      	movs	r3, r0
   259d6:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   259d8:	231f      	movs	r3, #31
   259da:	18fb      	adds	r3, r7, r3
   259dc:	781b      	ldrb	r3, [r3, #0]
   259de:	b25b      	sxtb	r3, r3
   259e0:	2b00      	cmp	r3, #0
   259e2:	d16a      	bne.n	25aba <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   259e4:	687b      	ldr	r3, [r7, #4]
   259e6:	791b      	ldrb	r3, [r3, #4]
   259e8:	021b      	lsls	r3, r3, #8
   259ea:	b21a      	sxth	r2, r3
   259ec:	687b      	ldr	r3, [r7, #4]
   259ee:	795b      	ldrb	r3, [r3, #5]
   259f0:	011b      	lsls	r3, r3, #4
   259f2:	b21b      	sxth	r3, r3
   259f4:	21ff      	movs	r1, #255	; 0xff
   259f6:	400b      	ands	r3, r1
   259f8:	b21b      	sxth	r3, r3
   259fa:	4313      	orrs	r3, r2
   259fc:	b21a      	sxth	r2, r3
   259fe:	687b      	ldr	r3, [r7, #4]
   25a00:	799b      	ldrb	r3, [r3, #6]
   25a02:	b21b      	sxth	r3, r3
   25a04:	210f      	movs	r1, #15
   25a06:	400b      	ands	r3, r1
   25a08:	b21b      	sxth	r3, r3
   25a0a:	4313      	orrs	r3, r2
   25a0c:	b21a      	sxth	r2, r3
   25a0e:	231c      	movs	r3, #28
   25a10:	18fb      	adds	r3, r7, r3
   25a12:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   25a14:	231a      	movs	r3, #26
   25a16:	18fb      	adds	r3, r7, r3
   25a18:	4a31      	ldr	r2, [pc, #196]	; (25ae0 <nm_get_firmware_full_info+0x1c8>)
   25a1a:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   25a1c:	687b      	ldr	r3, [r7, #4]
   25a1e:	79db      	ldrb	r3, [r3, #7]
   25a20:	021b      	lsls	r3, r3, #8
   25a22:	b21a      	sxth	r2, r3
   25a24:	687b      	ldr	r3, [r7, #4]
   25a26:	7a1b      	ldrb	r3, [r3, #8]
   25a28:	011b      	lsls	r3, r3, #4
   25a2a:	b21b      	sxth	r3, r3
   25a2c:	21ff      	movs	r1, #255	; 0xff
   25a2e:	400b      	ands	r3, r1
   25a30:	b21b      	sxth	r3, r3
   25a32:	4313      	orrs	r3, r2
   25a34:	b21a      	sxth	r2, r3
   25a36:	687b      	ldr	r3, [r7, #4]
   25a38:	7a5b      	ldrb	r3, [r3, #9]
   25a3a:	b21b      	sxth	r3, r3
   25a3c:	210f      	movs	r1, #15
   25a3e:	400b      	ands	r3, r1
   25a40:	b21b      	sxth	r3, r3
   25a42:	4313      	orrs	r3, r2
   25a44:	b21a      	sxth	r2, r3
   25a46:	2318      	movs	r3, #24
   25a48:	18fb      	adds	r3, r7, r3
   25a4a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   25a4c:	231c      	movs	r3, #28
   25a4e:	18fb      	adds	r3, r7, r3
   25a50:	881b      	ldrh	r3, [r3, #0]
   25a52:	2b00      	cmp	r3, #0
   25a54:	d009      	beq.n	25a6a <nm_get_firmware_full_info+0x152>
   25a56:	2318      	movs	r3, #24
   25a58:	18fb      	adds	r3, r7, r3
   25a5a:	881b      	ldrh	r3, [r3, #0]
   25a5c:	2b00      	cmp	r3, #0
   25a5e:	d004      	beq.n	25a6a <nm_get_firmware_full_info+0x152>
   25a60:	2318      	movs	r3, #24
   25a62:	18fb      	adds	r3, r7, r3
   25a64:	881b      	ldrh	r3, [r3, #0]
   25a66:	2b00      	cmp	r3, #0
   25a68:	d104      	bne.n	25a74 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   25a6a:	231f      	movs	r3, #31
   25a6c:	18fb      	adds	r3, r7, r3
   25a6e:	22f4      	movs	r2, #244	; 0xf4
   25a70:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   25a72:	e022      	b.n	25aba <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   25a74:	231a      	movs	r3, #26
   25a76:	18fa      	adds	r2, r7, r3
   25a78:	2318      	movs	r3, #24
   25a7a:	18fb      	adds	r3, r7, r3
   25a7c:	8812      	ldrh	r2, [r2, #0]
   25a7e:	881b      	ldrh	r3, [r3, #0]
   25a80:	429a      	cmp	r2, r3
   25a82:	d204      	bcs.n	25a8e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   25a84:	231f      	movs	r3, #31
   25a86:	18fb      	adds	r3, r7, r3
   25a88:	22f3      	movs	r2, #243	; 0xf3
   25a8a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   25a8c:	e015      	b.n	25aba <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   25a8e:	231a      	movs	r3, #26
   25a90:	18fa      	adds	r2, r7, r3
   25a92:	231c      	movs	r3, #28
   25a94:	18fb      	adds	r3, r7, r3
   25a96:	8812      	ldrh	r2, [r2, #0]
   25a98:	881b      	ldrh	r3, [r3, #0]
   25a9a:	429a      	cmp	r2, r3
   25a9c:	d90d      	bls.n	25aba <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   25a9e:	231f      	movs	r3, #31
   25aa0:	18fb      	adds	r3, r7, r3
   25aa2:	22f3      	movs	r2, #243	; 0xf3
   25aa4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   25aa6:	e008      	b.n	25aba <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   25aa8:	231f      	movs	r3, #31
   25aaa:	18fb      	adds	r3, r7, r3
   25aac:	22f4      	movs	r2, #244	; 0xf4
   25aae:	701a      	strb	r2, [r3, #0]
   25ab0:	e003      	b.n	25aba <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   25ab2:	231f      	movs	r3, #31
   25ab4:	18fb      	adds	r3, r7, r3
   25ab6:	22f4      	movs	r2, #244	; 0xf4
   25ab8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   25aba:	231f      	movs	r3, #31
   25abc:	18fb      	adds	r3, r7, r3
   25abe:	781b      	ldrb	r3, [r3, #0]
   25ac0:	b25b      	sxtb	r3, r3
}
   25ac2:	0018      	movs	r0, r3
   25ac4:	46bd      	mov	sp, r7
   25ac6:	b009      	add	sp, #36	; 0x24
   25ac8:	bd90      	pop	{r4, r7, pc}
   25aca:	46c0      	nop			; (mov r8, r8)
   25acc:	00037903 	.word	0x00037903
   25ad0:	00023651 	.word	0x00023651
   25ad4:	000c0008 	.word	0x000c0008
   25ad8:	000256e1 	.word	0x000256e1
   25adc:	00025755 	.word	0x00025755
   25ae0:	00001354 	.word	0x00001354

00025ae4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   25ae4:	b590      	push	{r4, r7, lr}
   25ae6:	b085      	sub	sp, #20
   25ae8:	af00      	add	r7, sp, #0
   25aea:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   25aec:	230f      	movs	r3, #15
   25aee:	18fb      	adds	r3, r7, r3
   25af0:	2200      	movs	r2, #0
   25af2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   25af4:	687b      	ldr	r3, [r7, #4]
   25af6:	2b00      	cmp	r3, #0
   25af8:	d013      	beq.n	25b22 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   25afa:	230e      	movs	r3, #14
   25afc:	18fb      	adds	r3, r7, r3
   25afe:	687a      	ldr	r2, [r7, #4]
   25b00:	7812      	ldrb	r2, [r2, #0]
   25b02:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   25b04:	230e      	movs	r3, #14
   25b06:	18fb      	adds	r3, r7, r3
   25b08:	781b      	ldrb	r3, [r3, #0]
   25b0a:	2b00      	cmp	r3, #0
   25b0c:	d004      	beq.n	25b18 <nm_drv_init+0x34>
   25b0e:	230e      	movs	r3, #14
   25b10:	18fb      	adds	r3, r7, r3
   25b12:	781b      	ldrb	r3, [r3, #0]
   25b14:	2b04      	cmp	r3, #4
   25b16:	d908      	bls.n	25b2a <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   25b18:	230e      	movs	r3, #14
   25b1a:	18fb      	adds	r3, r7, r3
   25b1c:	2201      	movs	r2, #1
   25b1e:	701a      	strb	r2, [r3, #0]
   25b20:	e003      	b.n	25b2a <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   25b22:	230e      	movs	r3, #14
   25b24:	18fb      	adds	r3, r7, r3
   25b26:	2201      	movs	r2, #1
   25b28:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   25b2a:	230f      	movs	r3, #15
   25b2c:	18fc      	adds	r4, r7, r3
   25b2e:	2000      	movs	r0, #0
   25b30:	4b41      	ldr	r3, [pc, #260]	; (25c38 <nm_drv_init+0x154>)
   25b32:	4798      	blx	r3
   25b34:	0003      	movs	r3, r0
   25b36:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25b38:	230f      	movs	r3, #15
   25b3a:	18fb      	adds	r3, r7, r3
   25b3c:	781b      	ldrb	r3, [r3, #0]
   25b3e:	b25b      	sxtb	r3, r3
   25b40:	2b00      	cmp	r3, #0
   25b42:	d00f      	beq.n	25b64 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   25b44:	2390      	movs	r3, #144	; 0x90
   25b46:	005a      	lsls	r2, r3, #1
   25b48:	493c      	ldr	r1, [pc, #240]	; (25c3c <nm_drv_init+0x158>)
   25b4a:	4b3d      	ldr	r3, [pc, #244]	; (25c40 <nm_drv_init+0x15c>)
   25b4c:	0018      	movs	r0, r3
   25b4e:	4b3d      	ldr	r3, [pc, #244]	; (25c44 <nm_drv_init+0x160>)
   25b50:	4798      	blx	r3
   25b52:	4b3d      	ldr	r3, [pc, #244]	; (25c48 <nm_drv_init+0x164>)
   25b54:	0018      	movs	r0, r3
   25b56:	4b3b      	ldr	r3, [pc, #236]	; (25c44 <nm_drv_init+0x160>)
   25b58:	4798      	blx	r3
   25b5a:	4b3c      	ldr	r3, [pc, #240]	; (25c4c <nm_drv_init+0x168>)
   25b5c:	0018      	movs	r0, r3
   25b5e:	4b39      	ldr	r3, [pc, #228]	; (25c44 <nm_drv_init+0x160>)
   25b60:	4798      	blx	r3
		goto ERR1;
   25b62:	e061      	b.n	25c28 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   25b64:	4b3a      	ldr	r3, [pc, #232]	; (25c50 <nm_drv_init+0x16c>)
   25b66:	0018      	movs	r0, r3
   25b68:	4b36      	ldr	r3, [pc, #216]	; (25c44 <nm_drv_init+0x160>)
   25b6a:	4798      	blx	r3
   25b6c:	4b39      	ldr	r3, [pc, #228]	; (25c54 <nm_drv_init+0x170>)
   25b6e:	4798      	blx	r3
   25b70:	0002      	movs	r2, r0
   25b72:	4b39      	ldr	r3, [pc, #228]	; (25c58 <nm_drv_init+0x174>)
   25b74:	0011      	movs	r1, r2
   25b76:	0018      	movs	r0, r3
   25b78:	4b32      	ldr	r3, [pc, #200]	; (25c44 <nm_drv_init+0x160>)
   25b7a:	4798      	blx	r3
   25b7c:	4b33      	ldr	r3, [pc, #204]	; (25c4c <nm_drv_init+0x168>)
   25b7e:	0018      	movs	r0, r3
   25b80:	4b30      	ldr	r3, [pc, #192]	; (25c44 <nm_drv_init+0x160>)
   25b82:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   25b84:	4b35      	ldr	r3, [pc, #212]	; (25c5c <nm_drv_init+0x178>)
   25b86:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   25b88:	230f      	movs	r3, #15
   25b8a:	18fc      	adds	r4, r7, r3
   25b8c:	230e      	movs	r3, #14
   25b8e:	18fb      	adds	r3, r7, r3
   25b90:	781b      	ldrb	r3, [r3, #0]
   25b92:	0018      	movs	r0, r3
   25b94:	4b32      	ldr	r3, [pc, #200]	; (25c60 <nm_drv_init+0x17c>)
   25b96:	4798      	blx	r3
   25b98:	0003      	movs	r3, r0
   25b9a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25b9c:	230f      	movs	r3, #15
   25b9e:	18fb      	adds	r3, r7, r3
   25ba0:	781b      	ldrb	r3, [r3, #0]
   25ba2:	b25b      	sxtb	r3, r3
   25ba4:	2b00      	cmp	r3, #0
   25ba6:	d13a      	bne.n	25c1e <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   25ba8:	230f      	movs	r3, #15
   25baa:	18fc      	adds	r4, r7, r3
   25bac:	230e      	movs	r3, #14
   25bae:	18fb      	adds	r3, r7, r3
   25bb0:	781b      	ldrb	r3, [r3, #0]
   25bb2:	0018      	movs	r0, r3
   25bb4:	4b2b      	ldr	r3, [pc, #172]	; (25c64 <nm_drv_init+0x180>)
   25bb6:	4798      	blx	r3
   25bb8:	0003      	movs	r3, r0
   25bba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25bbc:	230f      	movs	r3, #15
   25bbe:	18fb      	adds	r3, r7, r3
   25bc0:	781b      	ldrb	r3, [r3, #0]
   25bc2:	b25b      	sxtb	r3, r3
   25bc4:	2b00      	cmp	r3, #0
   25bc6:	d12c      	bne.n	25c22 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   25bc8:	230e      	movs	r3, #14
   25bca:	18fb      	adds	r3, r7, r3
   25bcc:	781b      	ldrb	r3, [r3, #0]
   25bce:	2b02      	cmp	r3, #2
   25bd0:	d02a      	beq.n	25c28 <nm_drv_init+0x144>
   25bd2:	230e      	movs	r3, #14
   25bd4:	18fb      	adds	r3, r7, r3
   25bd6:	781b      	ldrb	r3, [r3, #0]
   25bd8:	2b03      	cmp	r3, #3
   25bda:	d025      	beq.n	25c28 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   25bdc:	230f      	movs	r3, #15
   25bde:	18fc      	adds	r4, r7, r3
   25be0:	4b21      	ldr	r3, [pc, #132]	; (25c68 <nm_drv_init+0x184>)
   25be2:	4798      	blx	r3
   25be4:	0003      	movs	r3, r0
   25be6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25be8:	230f      	movs	r3, #15
   25bea:	18fb      	adds	r3, r7, r3
   25bec:	781b      	ldrb	r3, [r3, #0]
   25bee:	b25b      	sxtb	r3, r3
   25bf0:	2b00      	cmp	r3, #0
   25bf2:	d00f      	beq.n	25c14 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   25bf4:	23a7      	movs	r3, #167	; 0xa7
   25bf6:	005a      	lsls	r2, r3, #1
   25bf8:	4910      	ldr	r1, [pc, #64]	; (25c3c <nm_drv_init+0x158>)
   25bfa:	4b11      	ldr	r3, [pc, #68]	; (25c40 <nm_drv_init+0x15c>)
   25bfc:	0018      	movs	r0, r3
   25bfe:	4b11      	ldr	r3, [pc, #68]	; (25c44 <nm_drv_init+0x160>)
   25c00:	4798      	blx	r3
   25c02:	4b1a      	ldr	r3, [pc, #104]	; (25c6c <nm_drv_init+0x188>)
   25c04:	0018      	movs	r0, r3
   25c06:	4b0f      	ldr	r3, [pc, #60]	; (25c44 <nm_drv_init+0x160>)
   25c08:	4798      	blx	r3
   25c0a:	4b10      	ldr	r3, [pc, #64]	; (25c4c <nm_drv_init+0x168>)
   25c0c:	0018      	movs	r0, r3
   25c0e:	4b0d      	ldr	r3, [pc, #52]	; (25c44 <nm_drv_init+0x160>)
   25c10:	4798      	blx	r3
		goto ERR2;
   25c12:	e007      	b.n	25c24 <nm_drv_init+0x140>
	}
	return ret;
   25c14:	230f      	movs	r3, #15
   25c16:	18fb      	adds	r3, r7, r3
   25c18:	781b      	ldrb	r3, [r3, #0]
   25c1a:	b25b      	sxtb	r3, r3
   25c1c:	e008      	b.n	25c30 <nm_drv_init+0x14c>
		goto ERR2;
   25c1e:	46c0      	nop			; (mov r8, r8)
   25c20:	e000      	b.n	25c24 <nm_drv_init+0x140>
		goto ERR2;
   25c22:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   25c24:	4b12      	ldr	r3, [pc, #72]	; (25c70 <nm_drv_init+0x18c>)
   25c26:	4798      	blx	r3
ERR1:
	return ret;
   25c28:	230f      	movs	r3, #15
   25c2a:	18fb      	adds	r3, r7, r3
   25c2c:	781b      	ldrb	r3, [r3, #0]
   25c2e:	b25b      	sxtb	r3, r3
}
   25c30:	0018      	movs	r0, r3
   25c32:	46bd      	mov	sp, r7
   25c34:	b005      	add	sp, #20
   25c36:	bd90      	pop	{r4, r7, pc}
   25c38:	00025645 	.word	0x00025645
   25c3c:	0003bd7c 	.word	0x0003bd7c
   25c40:	0003bcac 	.word	0x0003bcac
   25c44:	00020889 	.word	0x00020889
   25c48:	0003bcc0 	.word	0x0003bcc0
   25c4c:	0003bcdc 	.word	0x0003bcdc
   25c50:	0003bce0 	.word	0x0003bce0
   25c54:	00024fe1 	.word	0x00024fe1
   25c58:	0003bcec 	.word	0x0003bcec
   25c5c:	000274fd 	.word	0x000274fd
   25c60:	00025339 	.word	0x00025339
   25c64:	000254d1 	.word	0x000254d1
   25c68:	00024f2d 	.word	0x00024f2d
   25c6c:	0003bcfc 	.word	0x0003bcfc
   25c70:	00025679 	.word	0x00025679

00025c74 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   25c74:	b590      	push	{r4, r7, lr}
   25c76:	b085      	sub	sp, #20
   25c78:	af00      	add	r7, sp, #0
   25c7a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   25c7c:	230f      	movs	r3, #15
   25c7e:	18fc      	adds	r4, r7, r3
   25c80:	4b2e      	ldr	r3, [pc, #184]	; (25d3c <nm_drv_deinit+0xc8>)
   25c82:	4798      	blx	r3
   25c84:	0003      	movs	r3, r0
   25c86:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25c88:	230f      	movs	r3, #15
   25c8a:	18fb      	adds	r3, r7, r3
   25c8c:	781b      	ldrb	r3, [r3, #0]
   25c8e:	b25b      	sxtb	r3, r3
   25c90:	2b00      	cmp	r3, #0
   25c92:	d010      	beq.n	25cb6 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   25c94:	2366      	movs	r3, #102	; 0x66
   25c96:	33ff      	adds	r3, #255	; 0xff
   25c98:	001a      	movs	r2, r3
   25c9a:	4929      	ldr	r1, [pc, #164]	; (25d40 <nm_drv_deinit+0xcc>)
   25c9c:	4b29      	ldr	r3, [pc, #164]	; (25d44 <nm_drv_deinit+0xd0>)
   25c9e:	0018      	movs	r0, r3
   25ca0:	4b29      	ldr	r3, [pc, #164]	; (25d48 <nm_drv_deinit+0xd4>)
   25ca2:	4798      	blx	r3
   25ca4:	4b29      	ldr	r3, [pc, #164]	; (25d4c <nm_drv_deinit+0xd8>)
   25ca6:	0018      	movs	r0, r3
   25ca8:	4b27      	ldr	r3, [pc, #156]	; (25d48 <nm_drv_deinit+0xd4>)
   25caa:	4798      	blx	r3
   25cac:	4b28      	ldr	r3, [pc, #160]	; (25d50 <nm_drv_deinit+0xdc>)
   25cae:	0018      	movs	r0, r3
   25cb0:	4b25      	ldr	r3, [pc, #148]	; (25d48 <nm_drv_deinit+0xd4>)
   25cb2:	4798      	blx	r3
		goto ERR1;
   25cb4:	e03a      	b.n	25d2c <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   25cb6:	230f      	movs	r3, #15
   25cb8:	18fc      	adds	r4, r7, r3
   25cba:	2000      	movs	r0, #0
   25cbc:	4b25      	ldr	r3, [pc, #148]	; (25d54 <nm_drv_deinit+0xe0>)
   25cbe:	4798      	blx	r3
   25cc0:	0003      	movs	r3, r0
   25cc2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25cc4:	230f      	movs	r3, #15
   25cc6:	18fb      	adds	r3, r7, r3
   25cc8:	781b      	ldrb	r3, [r3, #0]
   25cca:	b25b      	sxtb	r3, r3
   25ccc:	2b00      	cmp	r3, #0
   25cce:	d00f      	beq.n	25cf0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   25cd0:	23b6      	movs	r3, #182	; 0xb6
   25cd2:	005a      	lsls	r2, r3, #1
   25cd4:	491a      	ldr	r1, [pc, #104]	; (25d40 <nm_drv_deinit+0xcc>)
   25cd6:	4b1b      	ldr	r3, [pc, #108]	; (25d44 <nm_drv_deinit+0xd0>)
   25cd8:	0018      	movs	r0, r3
   25cda:	4b1b      	ldr	r3, [pc, #108]	; (25d48 <nm_drv_deinit+0xd4>)
   25cdc:	4798      	blx	r3
   25cde:	4b1e      	ldr	r3, [pc, #120]	; (25d58 <nm_drv_deinit+0xe4>)
   25ce0:	0018      	movs	r0, r3
   25ce2:	4b19      	ldr	r3, [pc, #100]	; (25d48 <nm_drv_deinit+0xd4>)
   25ce4:	4798      	blx	r3
   25ce6:	4b1a      	ldr	r3, [pc, #104]	; (25d50 <nm_drv_deinit+0xdc>)
   25ce8:	0018      	movs	r0, r3
   25cea:	4b17      	ldr	r3, [pc, #92]	; (25d48 <nm_drv_deinit+0xd4>)
   25cec:	4798      	blx	r3
		goto ERR1;
   25cee:	e01d      	b.n	25d2c <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   25cf0:	230f      	movs	r3, #15
   25cf2:	18fc      	adds	r4, r7, r3
   25cf4:	4b19      	ldr	r3, [pc, #100]	; (25d5c <nm_drv_deinit+0xe8>)
   25cf6:	4798      	blx	r3
   25cf8:	0003      	movs	r3, r0
   25cfa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25cfc:	230f      	movs	r3, #15
   25cfe:	18fb      	adds	r3, r7, r3
   25d00:	781b      	ldrb	r3, [r3, #0]
   25d02:	b25b      	sxtb	r3, r3
   25d04:	2b00      	cmp	r3, #0
   25d06:	d00f      	beq.n	25d28 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   25d08:	23b9      	movs	r3, #185	; 0xb9
   25d0a:	005a      	lsls	r2, r3, #1
   25d0c:	490c      	ldr	r1, [pc, #48]	; (25d40 <nm_drv_deinit+0xcc>)
   25d0e:	4b0d      	ldr	r3, [pc, #52]	; (25d44 <nm_drv_deinit+0xd0>)
   25d10:	0018      	movs	r0, r3
   25d12:	4b0d      	ldr	r3, [pc, #52]	; (25d48 <nm_drv_deinit+0xd4>)
   25d14:	4798      	blx	r3
   25d16:	4b12      	ldr	r3, [pc, #72]	; (25d60 <nm_drv_deinit+0xec>)
   25d18:	0018      	movs	r0, r3
   25d1a:	4b0b      	ldr	r3, [pc, #44]	; (25d48 <nm_drv_deinit+0xd4>)
   25d1c:	4798      	blx	r3
   25d1e:	4b0c      	ldr	r3, [pc, #48]	; (25d50 <nm_drv_deinit+0xdc>)
   25d20:	0018      	movs	r0, r3
   25d22:	4b09      	ldr	r3, [pc, #36]	; (25d48 <nm_drv_deinit+0xd4>)
   25d24:	4798      	blx	r3
		goto ERR1;
   25d26:	e001      	b.n	25d2c <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   25d28:	4b0e      	ldr	r3, [pc, #56]	; (25d64 <nm_drv_deinit+0xf0>)
   25d2a:	4798      	blx	r3
#endif

ERR1:
	return ret;
   25d2c:	230f      	movs	r3, #15
   25d2e:	18fb      	adds	r3, r7, r3
   25d30:	781b      	ldrb	r3, [r3, #0]
   25d32:	b25b      	sxtb	r3, r3
}
   25d34:	0018      	movs	r0, r3
   25d36:	46bd      	mov	sp, r7
   25d38:	b005      	add	sp, #20
   25d3a:	bd90      	pop	{r4, r7, pc}
   25d3c:	00025585 	.word	0x00025585
   25d40:	0003bd88 	.word	0x0003bd88
   25d44:	0003bcac 	.word	0x0003bcac
   25d48:	00020889 	.word	0x00020889
   25d4c:	0003bd1c 	.word	0x0003bd1c
   25d50:	0003bcdc 	.word	0x0003bcdc
   25d54:	000289a5 	.word	0x000289a5
   25d58:	0003bd3c 	.word	0x0003bd3c
   25d5c:	00025679 	.word	0x00025679
   25d60:	0003bd60 	.word	0x0003bd60
   25d64:	00027649 	.word	0x00027649

00025d68 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   25d68:	b580      	push	{r7, lr}
   25d6a:	b086      	sub	sp, #24
   25d6c:	af00      	add	r7, sp, #0
   25d6e:	6078      	str	r0, [r7, #4]
   25d70:	000a      	movs	r2, r1
   25d72:	1cbb      	adds	r3, r7, #2
   25d74:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   25d76:	230c      	movs	r3, #12
   25d78:	18fb      	adds	r3, r7, r3
   25d7a:	2200      	movs	r2, #0
   25d7c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   25d7e:	230c      	movs	r3, #12
   25d80:	18fb      	adds	r3, r7, r3
   25d82:	687a      	ldr	r2, [r7, #4]
   25d84:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   25d86:	230c      	movs	r3, #12
   25d88:	18fb      	adds	r3, r7, r3
   25d8a:	1cba      	adds	r2, r7, #2
   25d8c:	8812      	ldrh	r2, [r2, #0]
   25d8e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   25d90:	230c      	movs	r3, #12
   25d92:	18fb      	adds	r3, r7, r3
   25d94:	0019      	movs	r1, r3
   25d96:	2003      	movs	r0, #3
   25d98:	4b03      	ldr	r3, [pc, #12]	; (25da8 <nmi_spi_read+0x40>)
   25d9a:	4798      	blx	r3
   25d9c:	0003      	movs	r3, r0
}
   25d9e:	0018      	movs	r0, r3
   25da0:	46bd      	mov	sp, r7
   25da2:	b006      	add	sp, #24
   25da4:	bd80      	pop	{r7, pc}
   25da6:	46c0      	nop			; (mov r8, r8)
   25da8:	00023515 	.word	0x00023515

00025dac <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   25dac:	b580      	push	{r7, lr}
   25dae:	b086      	sub	sp, #24
   25db0:	af00      	add	r7, sp, #0
   25db2:	6078      	str	r0, [r7, #4]
   25db4:	000a      	movs	r2, r1
   25db6:	1cbb      	adds	r3, r7, #2
   25db8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   25dba:	230c      	movs	r3, #12
   25dbc:	18fb      	adds	r3, r7, r3
   25dbe:	687a      	ldr	r2, [r7, #4]
   25dc0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   25dc2:	230c      	movs	r3, #12
   25dc4:	18fb      	adds	r3, r7, r3
   25dc6:	2200      	movs	r2, #0
   25dc8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   25dca:	230c      	movs	r3, #12
   25dcc:	18fb      	adds	r3, r7, r3
   25dce:	1cba      	adds	r2, r7, #2
   25dd0:	8812      	ldrh	r2, [r2, #0]
   25dd2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   25dd4:	230c      	movs	r3, #12
   25dd6:	18fb      	adds	r3, r7, r3
   25dd8:	0019      	movs	r1, r3
   25dda:	2003      	movs	r0, #3
   25ddc:	4b03      	ldr	r3, [pc, #12]	; (25dec <nmi_spi_write+0x40>)
   25dde:	4798      	blx	r3
   25de0:	0003      	movs	r3, r0
}
   25de2:	0018      	movs	r0, r3
   25de4:	46bd      	mov	sp, r7
   25de6:	b006      	add	sp, #24
   25de8:	bd80      	pop	{r7, pc}
   25dea:	46c0      	nop			; (mov r8, r8)
   25dec:	00023515 	.word	0x00023515

00025df0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   25df0:	b580      	push	{r7, lr}
   25df2:	b088      	sub	sp, #32
   25df4:	af00      	add	r7, sp, #0
   25df6:	60f8      	str	r0, [r7, #12]
   25df8:	60b9      	str	r1, [r7, #8]
   25dfa:	1dbb      	adds	r3, r7, #6
   25dfc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   25dfe:	2314      	movs	r3, #20
   25e00:	18fb      	adds	r3, r7, r3
   25e02:	68fa      	ldr	r2, [r7, #12]
   25e04:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   25e06:	2314      	movs	r3, #20
   25e08:	18fb      	adds	r3, r7, r3
   25e0a:	68ba      	ldr	r2, [r7, #8]
   25e0c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   25e0e:	2314      	movs	r3, #20
   25e10:	18fb      	adds	r3, r7, r3
   25e12:	1dba      	adds	r2, r7, #6
   25e14:	8812      	ldrh	r2, [r2, #0]
   25e16:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   25e18:	2314      	movs	r3, #20
   25e1a:	18fb      	adds	r3, r7, r3
   25e1c:	0019      	movs	r1, r3
   25e1e:	2003      	movs	r0, #3
   25e20:	4b03      	ldr	r3, [pc, #12]	; (25e30 <nmi_spi_rw+0x40>)
   25e22:	4798      	blx	r3
   25e24:	0003      	movs	r3, r0
}
   25e26:	0018      	movs	r0, r3
   25e28:	46bd      	mov	sp, r7
   25e2a:	b008      	add	sp, #32
   25e2c:	bd80      	pop	{r7, pc}
   25e2e:	46c0      	nop			; (mov r8, r8)
   25e30:	00023515 	.word	0x00023515

00025e34 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   25e34:	b580      	push	{r7, lr}
   25e36:	b082      	sub	sp, #8
   25e38:	af00      	add	r7, sp, #0
   25e3a:	0002      	movs	r2, r0
   25e3c:	1dfb      	adds	r3, r7, #7
   25e3e:	701a      	strb	r2, [r3, #0]
   25e40:	1dbb      	adds	r3, r7, #6
   25e42:	1c0a      	adds	r2, r1, #0
   25e44:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   25e46:	1dfb      	adds	r3, r7, #7
   25e48:	781b      	ldrb	r3, [r3, #0]
   25e4a:	005a      	lsls	r2, r3, #1
   25e4c:	1dbb      	adds	r3, r7, #6
   25e4e:	781b      	ldrb	r3, [r3, #0]
   25e50:	4053      	eors	r3, r2
   25e52:	4a03      	ldr	r2, [pc, #12]	; (25e60 <crc7_byte+0x2c>)
   25e54:	5cd3      	ldrb	r3, [r2, r3]
}
   25e56:	0018      	movs	r0, r3
   25e58:	46bd      	mov	sp, r7
   25e5a:	b002      	add	sp, #8
   25e5c:	bd80      	pop	{r7, pc}
   25e5e:	46c0      	nop			; (mov r8, r8)
   25e60:	0003bd98 	.word	0x0003bd98

00025e64 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   25e64:	b590      	push	{r4, r7, lr}
   25e66:	b085      	sub	sp, #20
   25e68:	af00      	add	r7, sp, #0
   25e6a:	60b9      	str	r1, [r7, #8]
   25e6c:	607a      	str	r2, [r7, #4]
   25e6e:	230f      	movs	r3, #15
   25e70:	18fb      	adds	r3, r7, r3
   25e72:	1c02      	adds	r2, r0, #0
   25e74:	701a      	strb	r2, [r3, #0]
	while (len--)
   25e76:	e00e      	b.n	25e96 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   25e78:	68bb      	ldr	r3, [r7, #8]
   25e7a:	1c5a      	adds	r2, r3, #1
   25e7c:	60ba      	str	r2, [r7, #8]
   25e7e:	781a      	ldrb	r2, [r3, #0]
   25e80:	230f      	movs	r3, #15
   25e82:	18fc      	adds	r4, r7, r3
   25e84:	230f      	movs	r3, #15
   25e86:	18fb      	adds	r3, r7, r3
   25e88:	781b      	ldrb	r3, [r3, #0]
   25e8a:	0011      	movs	r1, r2
   25e8c:	0018      	movs	r0, r3
   25e8e:	4b08      	ldr	r3, [pc, #32]	; (25eb0 <crc7+0x4c>)
   25e90:	4798      	blx	r3
   25e92:	0003      	movs	r3, r0
   25e94:	7023      	strb	r3, [r4, #0]
	while (len--)
   25e96:	687b      	ldr	r3, [r7, #4]
   25e98:	1e5a      	subs	r2, r3, #1
   25e9a:	607a      	str	r2, [r7, #4]
   25e9c:	2b00      	cmp	r3, #0
   25e9e:	d1eb      	bne.n	25e78 <crc7+0x14>
	return crc;
   25ea0:	230f      	movs	r3, #15
   25ea2:	18fb      	adds	r3, r7, r3
   25ea4:	781b      	ldrb	r3, [r3, #0]
}
   25ea6:	0018      	movs	r0, r3
   25ea8:	46bd      	mov	sp, r7
   25eaa:	b005      	add	sp, #20
   25eac:	bd90      	pop	{r4, r7, pc}
   25eae:	46c0      	nop			; (mov r8, r8)
   25eb0:	00025e35 	.word	0x00025e35

00025eb4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   25eb4:	b590      	push	{r4, r7, lr}
   25eb6:	b089      	sub	sp, #36	; 0x24
   25eb8:	af00      	add	r7, sp, #0
   25eba:	60b9      	str	r1, [r7, #8]
   25ebc:	607a      	str	r2, [r7, #4]
   25ebe:	603b      	str	r3, [r7, #0]
   25ec0:	230f      	movs	r3, #15
   25ec2:	18fb      	adds	r3, r7, r3
   25ec4:	1c02      	adds	r2, r0, #0
   25ec6:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   25ec8:	231f      	movs	r3, #31
   25eca:	18fb      	adds	r3, r7, r3
   25ecc:	2205      	movs	r2, #5
   25ece:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   25ed0:	231e      	movs	r3, #30
   25ed2:	18fb      	adds	r3, r7, r3
   25ed4:	2201      	movs	r2, #1
   25ed6:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   25ed8:	2314      	movs	r3, #20
   25eda:	18fb      	adds	r3, r7, r3
   25edc:	220f      	movs	r2, #15
   25ede:	18ba      	adds	r2, r7, r2
   25ee0:	7812      	ldrb	r2, [r2, #0]
   25ee2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   25ee4:	230f      	movs	r3, #15
   25ee6:	18fb      	adds	r3, r7, r3
   25ee8:	781b      	ldrb	r3, [r3, #0]
   25eea:	3bc1      	subs	r3, #193	; 0xc1
   25eec:	2b0e      	cmp	r3, #14
   25eee:	d900      	bls.n	25ef2 <spi_cmd+0x3e>
   25ef0:	e11b      	b.n	2612a <spi_cmd+0x276>
   25ef2:	009a      	lsls	r2, r3, #2
   25ef4:	4bb6      	ldr	r3, [pc, #728]	; (261d0 <spi_cmd+0x31c>)
   25ef6:	18d3      	adds	r3, r2, r3
   25ef8:	681b      	ldr	r3, [r3, #0]
   25efa:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   25efc:	68bb      	ldr	r3, [r7, #8]
   25efe:	0c1b      	lsrs	r3, r3, #16
   25f00:	b2da      	uxtb	r2, r3
   25f02:	2314      	movs	r3, #20
   25f04:	18fb      	adds	r3, r7, r3
   25f06:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   25f08:	68bb      	ldr	r3, [r7, #8]
   25f0a:	0a1b      	lsrs	r3, r3, #8
   25f0c:	b2da      	uxtb	r2, r3
   25f0e:	2314      	movs	r3, #20
   25f10:	18fb      	adds	r3, r7, r3
   25f12:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   25f14:	68bb      	ldr	r3, [r7, #8]
   25f16:	b2da      	uxtb	r2, r3
   25f18:	2314      	movs	r3, #20
   25f1a:	18fb      	adds	r3, r7, r3
   25f1c:	70da      	strb	r2, [r3, #3]
		len = 5;
   25f1e:	231f      	movs	r3, #31
   25f20:	18fb      	adds	r3, r7, r3
   25f22:	2205      	movs	r2, #5
   25f24:	701a      	strb	r2, [r3, #0]
		break;
   25f26:	e105      	b.n	26134 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   25f28:	68bb      	ldr	r3, [r7, #8]
   25f2a:	0a1b      	lsrs	r3, r3, #8
   25f2c:	b2da      	uxtb	r2, r3
   25f2e:	2314      	movs	r3, #20
   25f30:	18fb      	adds	r3, r7, r3
   25f32:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   25f34:	2330      	movs	r3, #48	; 0x30
   25f36:	18fb      	adds	r3, r7, r3
   25f38:	781b      	ldrb	r3, [r3, #0]
   25f3a:	2b00      	cmp	r3, #0
   25f3c:	d009      	beq.n	25f52 <spi_cmd+0x9e>
   25f3e:	2314      	movs	r3, #20
   25f40:	18fb      	adds	r3, r7, r3
   25f42:	785b      	ldrb	r3, [r3, #1]
   25f44:	2280      	movs	r2, #128	; 0x80
   25f46:	4252      	negs	r2, r2
   25f48:	4313      	orrs	r3, r2
   25f4a:	b2da      	uxtb	r2, r3
   25f4c:	2314      	movs	r3, #20
   25f4e:	18fb      	adds	r3, r7, r3
   25f50:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   25f52:	68bb      	ldr	r3, [r7, #8]
   25f54:	b2da      	uxtb	r2, r3
   25f56:	2314      	movs	r3, #20
   25f58:	18fb      	adds	r3, r7, r3
   25f5a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   25f5c:	2314      	movs	r3, #20
   25f5e:	18fb      	adds	r3, r7, r3
   25f60:	2200      	movs	r2, #0
   25f62:	70da      	strb	r2, [r3, #3]
		len = 5;
   25f64:	231f      	movs	r3, #31
   25f66:	18fb      	adds	r3, r7, r3
   25f68:	2205      	movs	r2, #5
   25f6a:	701a      	strb	r2, [r3, #0]
		break;
   25f6c:	e0e2      	b.n	26134 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   25f6e:	2314      	movs	r3, #20
   25f70:	18fb      	adds	r3, r7, r3
   25f72:	2200      	movs	r2, #0
   25f74:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   25f76:	2314      	movs	r3, #20
   25f78:	18fb      	adds	r3, r7, r3
   25f7a:	2200      	movs	r2, #0
   25f7c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   25f7e:	2314      	movs	r3, #20
   25f80:	18fb      	adds	r3, r7, r3
   25f82:	2200      	movs	r2, #0
   25f84:	70da      	strb	r2, [r3, #3]
		len = 5;
   25f86:	231f      	movs	r3, #31
   25f88:	18fb      	adds	r3, r7, r3
   25f8a:	2205      	movs	r2, #5
   25f8c:	701a      	strb	r2, [r3, #0]
		break;
   25f8e:	e0d1      	b.n	26134 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   25f90:	2314      	movs	r3, #20
   25f92:	18fb      	adds	r3, r7, r3
   25f94:	2200      	movs	r2, #0
   25f96:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   25f98:	2314      	movs	r3, #20
   25f9a:	18fb      	adds	r3, r7, r3
   25f9c:	2200      	movs	r2, #0
   25f9e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   25fa0:	2314      	movs	r3, #20
   25fa2:	18fb      	adds	r3, r7, r3
   25fa4:	2200      	movs	r2, #0
   25fa6:	70da      	strb	r2, [r3, #3]
		len = 5;
   25fa8:	231f      	movs	r3, #31
   25faa:	18fb      	adds	r3, r7, r3
   25fac:	2205      	movs	r2, #5
   25fae:	701a      	strb	r2, [r3, #0]
		break;
   25fb0:	e0c0      	b.n	26134 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   25fb2:	2314      	movs	r3, #20
   25fb4:	18fb      	adds	r3, r7, r3
   25fb6:	22ff      	movs	r2, #255	; 0xff
   25fb8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   25fba:	2314      	movs	r3, #20
   25fbc:	18fb      	adds	r3, r7, r3
   25fbe:	22ff      	movs	r2, #255	; 0xff
   25fc0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   25fc2:	2314      	movs	r3, #20
   25fc4:	18fb      	adds	r3, r7, r3
   25fc6:	22ff      	movs	r2, #255	; 0xff
   25fc8:	70da      	strb	r2, [r3, #3]
		len = 5;
   25fca:	231f      	movs	r3, #31
   25fcc:	18fb      	adds	r3, r7, r3
   25fce:	2205      	movs	r2, #5
   25fd0:	701a      	strb	r2, [r3, #0]
		break;
   25fd2:	e0af      	b.n	26134 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   25fd4:	68bb      	ldr	r3, [r7, #8]
   25fd6:	0c1b      	lsrs	r3, r3, #16
   25fd8:	b2da      	uxtb	r2, r3
   25fda:	2314      	movs	r3, #20
   25fdc:	18fb      	adds	r3, r7, r3
   25fde:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   25fe0:	68bb      	ldr	r3, [r7, #8]
   25fe2:	0a1b      	lsrs	r3, r3, #8
   25fe4:	b2da      	uxtb	r2, r3
   25fe6:	2314      	movs	r3, #20
   25fe8:	18fb      	adds	r3, r7, r3
   25fea:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   25fec:	68bb      	ldr	r3, [r7, #8]
   25fee:	b2da      	uxtb	r2, r3
   25ff0:	2314      	movs	r3, #20
   25ff2:	18fb      	adds	r3, r7, r3
   25ff4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   25ff6:	683b      	ldr	r3, [r7, #0]
   25ff8:	0a1b      	lsrs	r3, r3, #8
   25ffa:	b2da      	uxtb	r2, r3
   25ffc:	2314      	movs	r3, #20
   25ffe:	18fb      	adds	r3, r7, r3
   26000:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   26002:	683b      	ldr	r3, [r7, #0]
   26004:	b2da      	uxtb	r2, r3
   26006:	2314      	movs	r3, #20
   26008:	18fb      	adds	r3, r7, r3
   2600a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2600c:	231f      	movs	r3, #31
   2600e:	18fb      	adds	r3, r7, r3
   26010:	2207      	movs	r2, #7
   26012:	701a      	strb	r2, [r3, #0]
		break;
   26014:	e08e      	b.n	26134 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   26016:	68bb      	ldr	r3, [r7, #8]
   26018:	0c1b      	lsrs	r3, r3, #16
   2601a:	b2da      	uxtb	r2, r3
   2601c:	2314      	movs	r3, #20
   2601e:	18fb      	adds	r3, r7, r3
   26020:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   26022:	68bb      	ldr	r3, [r7, #8]
   26024:	0a1b      	lsrs	r3, r3, #8
   26026:	b2da      	uxtb	r2, r3
   26028:	2314      	movs	r3, #20
   2602a:	18fb      	adds	r3, r7, r3
   2602c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2602e:	68bb      	ldr	r3, [r7, #8]
   26030:	b2da      	uxtb	r2, r3
   26032:	2314      	movs	r3, #20
   26034:	18fb      	adds	r3, r7, r3
   26036:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   26038:	683b      	ldr	r3, [r7, #0]
   2603a:	0c1b      	lsrs	r3, r3, #16
   2603c:	b2da      	uxtb	r2, r3
   2603e:	2314      	movs	r3, #20
   26040:	18fb      	adds	r3, r7, r3
   26042:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   26044:	683b      	ldr	r3, [r7, #0]
   26046:	0a1b      	lsrs	r3, r3, #8
   26048:	b2da      	uxtb	r2, r3
   2604a:	2314      	movs	r3, #20
   2604c:	18fb      	adds	r3, r7, r3
   2604e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   26050:	683b      	ldr	r3, [r7, #0]
   26052:	b2da      	uxtb	r2, r3
   26054:	2314      	movs	r3, #20
   26056:	18fb      	adds	r3, r7, r3
   26058:	719a      	strb	r2, [r3, #6]
		len = 8;
   2605a:	231f      	movs	r3, #31
   2605c:	18fb      	adds	r3, r7, r3
   2605e:	2208      	movs	r2, #8
   26060:	701a      	strb	r2, [r3, #0]
		break;
   26062:	e067      	b.n	26134 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   26064:	68bb      	ldr	r3, [r7, #8]
   26066:	0a1b      	lsrs	r3, r3, #8
   26068:	b2da      	uxtb	r2, r3
   2606a:	2314      	movs	r3, #20
   2606c:	18fb      	adds	r3, r7, r3
   2606e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   26070:	2330      	movs	r3, #48	; 0x30
   26072:	18fb      	adds	r3, r7, r3
   26074:	781b      	ldrb	r3, [r3, #0]
   26076:	2b00      	cmp	r3, #0
   26078:	d009      	beq.n	2608e <spi_cmd+0x1da>
   2607a:	2314      	movs	r3, #20
   2607c:	18fb      	adds	r3, r7, r3
   2607e:	785b      	ldrb	r3, [r3, #1]
   26080:	2280      	movs	r2, #128	; 0x80
   26082:	4252      	negs	r2, r2
   26084:	4313      	orrs	r3, r2
   26086:	b2da      	uxtb	r2, r3
   26088:	2314      	movs	r3, #20
   2608a:	18fb      	adds	r3, r7, r3
   2608c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2608e:	68bb      	ldr	r3, [r7, #8]
   26090:	b2da      	uxtb	r2, r3
   26092:	2314      	movs	r3, #20
   26094:	18fb      	adds	r3, r7, r3
   26096:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   26098:	687b      	ldr	r3, [r7, #4]
   2609a:	0e1b      	lsrs	r3, r3, #24
   2609c:	b2da      	uxtb	r2, r3
   2609e:	2314      	movs	r3, #20
   260a0:	18fb      	adds	r3, r7, r3
   260a2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   260a4:	687b      	ldr	r3, [r7, #4]
   260a6:	0c1b      	lsrs	r3, r3, #16
   260a8:	b2da      	uxtb	r2, r3
   260aa:	2314      	movs	r3, #20
   260ac:	18fb      	adds	r3, r7, r3
   260ae:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   260b0:	687b      	ldr	r3, [r7, #4]
   260b2:	0a1b      	lsrs	r3, r3, #8
   260b4:	b2da      	uxtb	r2, r3
   260b6:	2314      	movs	r3, #20
   260b8:	18fb      	adds	r3, r7, r3
   260ba:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   260bc:	687b      	ldr	r3, [r7, #4]
   260be:	b2da      	uxtb	r2, r3
   260c0:	2314      	movs	r3, #20
   260c2:	18fb      	adds	r3, r7, r3
   260c4:	719a      	strb	r2, [r3, #6]
		len = 8;
   260c6:	231f      	movs	r3, #31
   260c8:	18fb      	adds	r3, r7, r3
   260ca:	2208      	movs	r2, #8
   260cc:	701a      	strb	r2, [r3, #0]
		break;
   260ce:	e031      	b.n	26134 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   260d0:	68bb      	ldr	r3, [r7, #8]
   260d2:	0c1b      	lsrs	r3, r3, #16
   260d4:	b2da      	uxtb	r2, r3
   260d6:	2314      	movs	r3, #20
   260d8:	18fb      	adds	r3, r7, r3
   260da:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   260dc:	68bb      	ldr	r3, [r7, #8]
   260de:	0a1b      	lsrs	r3, r3, #8
   260e0:	b2da      	uxtb	r2, r3
   260e2:	2314      	movs	r3, #20
   260e4:	18fb      	adds	r3, r7, r3
   260e6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   260e8:	68bb      	ldr	r3, [r7, #8]
   260ea:	b2da      	uxtb	r2, r3
   260ec:	2314      	movs	r3, #20
   260ee:	18fb      	adds	r3, r7, r3
   260f0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   260f2:	687b      	ldr	r3, [r7, #4]
   260f4:	0e1b      	lsrs	r3, r3, #24
   260f6:	b2da      	uxtb	r2, r3
   260f8:	2314      	movs	r3, #20
   260fa:	18fb      	adds	r3, r7, r3
   260fc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   260fe:	687b      	ldr	r3, [r7, #4]
   26100:	0c1b      	lsrs	r3, r3, #16
   26102:	b2da      	uxtb	r2, r3
   26104:	2314      	movs	r3, #20
   26106:	18fb      	adds	r3, r7, r3
   26108:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   2610a:	687b      	ldr	r3, [r7, #4]
   2610c:	0a1b      	lsrs	r3, r3, #8
   2610e:	b2da      	uxtb	r2, r3
   26110:	2314      	movs	r3, #20
   26112:	18fb      	adds	r3, r7, r3
   26114:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   26116:	687b      	ldr	r3, [r7, #4]
   26118:	b2da      	uxtb	r2, r3
   2611a:	2314      	movs	r3, #20
   2611c:	18fb      	adds	r3, r7, r3
   2611e:	71da      	strb	r2, [r3, #7]
		len = 9;
   26120:	231f      	movs	r3, #31
   26122:	18fb      	adds	r3, r7, r3
   26124:	2209      	movs	r2, #9
   26126:	701a      	strb	r2, [r3, #0]
		break;
   26128:	e004      	b.n	26134 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   2612a:	231e      	movs	r3, #30
   2612c:	18fb      	adds	r3, r7, r3
   2612e:	2200      	movs	r2, #0
   26130:	701a      	strb	r2, [r3, #0]
		break;
   26132:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   26134:	231e      	movs	r3, #30
   26136:	18fb      	adds	r3, r7, r3
   26138:	781b      	ldrb	r3, [r3, #0]
   2613a:	b25b      	sxtb	r3, r3
   2613c:	2b00      	cmp	r3, #0
   2613e:	d03f      	beq.n	261c0 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   26140:	4b24      	ldr	r3, [pc, #144]	; (261d4 <spi_cmd+0x320>)
   26142:	781b      	ldrb	r3, [r3, #0]
   26144:	2b00      	cmp	r3, #0
   26146:	d115      	bne.n	26174 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   26148:	231f      	movs	r3, #31
   2614a:	18fb      	adds	r3, r7, r3
   2614c:	781b      	ldrb	r3, [r3, #0]
   2614e:	1e5c      	subs	r4, r3, #1
   26150:	231f      	movs	r3, #31
   26152:	18fb      	adds	r3, r7, r3
   26154:	781b      	ldrb	r3, [r3, #0]
   26156:	3b01      	subs	r3, #1
   26158:	001a      	movs	r2, r3
   2615a:	2314      	movs	r3, #20
   2615c:	18fb      	adds	r3, r7, r3
   2615e:	0019      	movs	r1, r3
   26160:	207f      	movs	r0, #127	; 0x7f
   26162:	4b1d      	ldr	r3, [pc, #116]	; (261d8 <spi_cmd+0x324>)
   26164:	4798      	blx	r3
   26166:	0003      	movs	r3, r0
   26168:	18db      	adds	r3, r3, r3
   2616a:	b2da      	uxtb	r2, r3
   2616c:	2314      	movs	r3, #20
   2616e:	18fb      	adds	r3, r7, r3
   26170:	551a      	strb	r2, [r3, r4]
   26172:	e006      	b.n	26182 <spi_cmd+0x2ce>
		else
			len-=1;
   26174:	231f      	movs	r3, #31
   26176:	18fb      	adds	r3, r7, r3
   26178:	221f      	movs	r2, #31
   2617a:	18ba      	adds	r2, r7, r2
   2617c:	7812      	ldrb	r2, [r2, #0]
   2617e:	3a01      	subs	r2, #1
   26180:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   26182:	231f      	movs	r3, #31
   26184:	18fb      	adds	r3, r7, r3
   26186:	781b      	ldrb	r3, [r3, #0]
   26188:	b29a      	uxth	r2, r3
   2618a:	2314      	movs	r3, #20
   2618c:	18fb      	adds	r3, r7, r3
   2618e:	0011      	movs	r1, r2
   26190:	0018      	movs	r0, r3
   26192:	4b12      	ldr	r3, [pc, #72]	; (261dc <spi_cmd+0x328>)
   26194:	4798      	blx	r3
   26196:	1e03      	subs	r3, r0, #0
   26198:	d012      	beq.n	261c0 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2619a:	2390      	movs	r3, #144	; 0x90
   2619c:	005a      	lsls	r2, r3, #1
   2619e:	4910      	ldr	r1, [pc, #64]	; (261e0 <spi_cmd+0x32c>)
   261a0:	4b10      	ldr	r3, [pc, #64]	; (261e4 <spi_cmd+0x330>)
   261a2:	0018      	movs	r0, r3
   261a4:	4b10      	ldr	r3, [pc, #64]	; (261e8 <spi_cmd+0x334>)
   261a6:	4798      	blx	r3
   261a8:	4b10      	ldr	r3, [pc, #64]	; (261ec <spi_cmd+0x338>)
   261aa:	0018      	movs	r0, r3
   261ac:	4b0e      	ldr	r3, [pc, #56]	; (261e8 <spi_cmd+0x334>)
   261ae:	4798      	blx	r3
   261b0:	4b0f      	ldr	r3, [pc, #60]	; (261f0 <spi_cmd+0x33c>)
   261b2:	0018      	movs	r0, r3
   261b4:	4b0c      	ldr	r3, [pc, #48]	; (261e8 <spi_cmd+0x334>)
   261b6:	4798      	blx	r3
			result = N_FAIL;
   261b8:	231e      	movs	r3, #30
   261ba:	18fb      	adds	r3, r7, r3
   261bc:	2200      	movs	r2, #0
   261be:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   261c0:	231e      	movs	r3, #30
   261c2:	18fb      	adds	r3, r7, r3
   261c4:	781b      	ldrb	r3, [r3, #0]
   261c6:	b25b      	sxtb	r3, r3
}
   261c8:	0018      	movs	r0, r3
   261ca:	46bd      	mov	sp, r7
   261cc:	b009      	add	sp, #36	; 0x24
   261ce:	bd90      	pop	{r4, r7, pc}
   261d0:	0003c410 	.word	0x0003c410
   261d4:	200041dc 	.word	0x200041dc
   261d8:	00025e65 	.word	0x00025e65
   261dc:	00025dad 	.word	0x00025dad
   261e0:	0003c488 	.word	0x0003c488
   261e4:	0003be98 	.word	0x0003be98
   261e8:	00020889 	.word	0x00020889
   261ec:	0003beac 	.word	0x0003beac
   261f0:	0003bed8 	.word	0x0003bed8

000261f4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   261f4:	b590      	push	{r4, r7, lr}
   261f6:	b085      	sub	sp, #20
   261f8:	af00      	add	r7, sp, #0
   261fa:	0002      	movs	r2, r0
   261fc:	1dfb      	adds	r3, r7, #7
   261fe:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   26200:	230e      	movs	r3, #14
   26202:	18fb      	adds	r3, r7, r3
   26204:	2201      	movs	r2, #1
   26206:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   26208:	4b32      	ldr	r3, [pc, #200]	; (262d4 <spi_data_rsp+0xe0>)
   2620a:	781b      	ldrb	r3, [r3, #0]
   2620c:	2b00      	cmp	r3, #0
   2620e:	d104      	bne.n	2621a <spi_data_rsp+0x26>
		len = 2;
   26210:	230f      	movs	r3, #15
   26212:	18fb      	adds	r3, r7, r3
   26214:	2202      	movs	r2, #2
   26216:	701a      	strb	r2, [r3, #0]
   26218:	e003      	b.n	26222 <spi_data_rsp+0x2e>
	else
		len = 3;
   2621a:	230f      	movs	r3, #15
   2621c:	18fb      	adds	r3, r7, r3
   2621e:	2203      	movs	r2, #3
   26220:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   26222:	230f      	movs	r3, #15
   26224:	18fb      	adds	r3, r7, r3
   26226:	781b      	ldrb	r3, [r3, #0]
   26228:	b29a      	uxth	r2, r3
   2622a:	2308      	movs	r3, #8
   2622c:	18fb      	adds	r3, r7, r3
   2622e:	0011      	movs	r1, r2
   26230:	0018      	movs	r0, r3
   26232:	4b29      	ldr	r3, [pc, #164]	; (262d8 <spi_data_rsp+0xe4>)
   26234:	4798      	blx	r3
   26236:	1e03      	subs	r3, r0, #0
   26238:	d013      	beq.n	26262 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2623a:	239a      	movs	r3, #154	; 0x9a
   2623c:	005a      	lsls	r2, r3, #1
   2623e:	4927      	ldr	r1, [pc, #156]	; (262dc <spi_data_rsp+0xe8>)
   26240:	4b27      	ldr	r3, [pc, #156]	; (262e0 <spi_data_rsp+0xec>)
   26242:	0018      	movs	r0, r3
   26244:	4b27      	ldr	r3, [pc, #156]	; (262e4 <spi_data_rsp+0xf0>)
   26246:	4798      	blx	r3
   26248:	4b27      	ldr	r3, [pc, #156]	; (262e8 <spi_data_rsp+0xf4>)
   2624a:	0018      	movs	r0, r3
   2624c:	4b25      	ldr	r3, [pc, #148]	; (262e4 <spi_data_rsp+0xf0>)
   2624e:	4798      	blx	r3
   26250:	4b26      	ldr	r3, [pc, #152]	; (262ec <spi_data_rsp+0xf8>)
   26252:	0018      	movs	r0, r3
   26254:	4b23      	ldr	r3, [pc, #140]	; (262e4 <spi_data_rsp+0xf0>)
   26256:	4798      	blx	r3
		result = N_FAIL;
   26258:	230e      	movs	r3, #14
   2625a:	18fb      	adds	r3, r7, r3
   2625c:	2200      	movs	r2, #0
   2625e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   26260:	e030      	b.n	262c4 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   26262:	230f      	movs	r3, #15
   26264:	18fb      	adds	r3, r7, r3
   26266:	781b      	ldrb	r3, [r3, #0]
   26268:	3b01      	subs	r3, #1
   2626a:	2208      	movs	r2, #8
   2626c:	18ba      	adds	r2, r7, r2
   2626e:	5cd3      	ldrb	r3, [r2, r3]
   26270:	2b00      	cmp	r3, #0
   26272:	d108      	bne.n	26286 <spi_data_rsp+0x92>
   26274:	230f      	movs	r3, #15
   26276:	18fb      	adds	r3, r7, r3
   26278:	781b      	ldrb	r3, [r3, #0]
   2627a:	3b02      	subs	r3, #2
   2627c:	2208      	movs	r2, #8
   2627e:	18ba      	adds	r2, r7, r2
   26280:	5cd3      	ldrb	r3, [r2, r3]
   26282:	2bc3      	cmp	r3, #195	; 0xc3
   26284:	d01e      	beq.n	262c4 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   26286:	233c      	movs	r3, #60	; 0x3c
   26288:	33ff      	adds	r3, #255	; 0xff
   2628a:	001a      	movs	r2, r3
   2628c:	4913      	ldr	r1, [pc, #76]	; (262dc <spi_data_rsp+0xe8>)
   2628e:	4b14      	ldr	r3, [pc, #80]	; (262e0 <spi_data_rsp+0xec>)
   26290:	0018      	movs	r0, r3
   26292:	4b14      	ldr	r3, [pc, #80]	; (262e4 <spi_data_rsp+0xf0>)
   26294:	4798      	blx	r3
   26296:	2308      	movs	r3, #8
   26298:	18fb      	adds	r3, r7, r3
   2629a:	781b      	ldrb	r3, [r3, #0]
   2629c:	0019      	movs	r1, r3
   2629e:	2308      	movs	r3, #8
   262a0:	18fb      	adds	r3, r7, r3
   262a2:	785b      	ldrb	r3, [r3, #1]
   262a4:	001a      	movs	r2, r3
   262a6:	2308      	movs	r3, #8
   262a8:	18fb      	adds	r3, r7, r3
   262aa:	789b      	ldrb	r3, [r3, #2]
   262ac:	4810      	ldr	r0, [pc, #64]	; (262f0 <spi_data_rsp+0xfc>)
   262ae:	4c0d      	ldr	r4, [pc, #52]	; (262e4 <spi_data_rsp+0xf0>)
   262b0:	47a0      	blx	r4
   262b2:	4b0e      	ldr	r3, [pc, #56]	; (262ec <spi_data_rsp+0xf8>)
   262b4:	0018      	movs	r0, r3
   262b6:	4b0b      	ldr	r3, [pc, #44]	; (262e4 <spi_data_rsp+0xf0>)
   262b8:	4798      	blx	r3
		result = N_FAIL;
   262ba:	230e      	movs	r3, #14
   262bc:	18fb      	adds	r3, r7, r3
   262be:	2200      	movs	r2, #0
   262c0:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   262c2:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   262c4:	230e      	movs	r3, #14
   262c6:	18fb      	adds	r3, r7, r3
   262c8:	781b      	ldrb	r3, [r3, #0]
   262ca:	b25b      	sxtb	r3, r3
}
   262cc:	0018      	movs	r0, r3
   262ce:	46bd      	mov	sp, r7
   262d0:	b005      	add	sp, #20
   262d2:	bd90      	pop	{r4, r7, pc}
   262d4:	200041dc 	.word	0x200041dc
   262d8:	00025d69 	.word	0x00025d69
   262dc:	0003c490 	.word	0x0003c490
   262e0:	0003be98 	.word	0x0003be98
   262e4:	00020889 	.word	0x00020889
   262e8:	0003bedc 	.word	0x0003bedc
   262ec:	0003bed8 	.word	0x0003bed8
   262f0:	0003befc 	.word	0x0003befc

000262f4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   262f4:	b580      	push	{r7, lr}
   262f6:	b084      	sub	sp, #16
   262f8:	af00      	add	r7, sp, #0
   262fa:	0002      	movs	r2, r0
   262fc:	1dfb      	adds	r3, r7, #7
   262fe:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   26300:	230f      	movs	r3, #15
   26302:	18fb      	adds	r3, r7, r3
   26304:	2201      	movs	r2, #1
   26306:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   26308:	1dfb      	adds	r3, r7, #7
   2630a:	781b      	ldrb	r3, [r3, #0]
   2630c:	2bcf      	cmp	r3, #207	; 0xcf
   2630e:	d007      	beq.n	26320 <spi_cmd_rsp+0x2c>
   26310:	1dfb      	adds	r3, r7, #7
   26312:	781b      	ldrb	r3, [r3, #0]
   26314:	2bc5      	cmp	r3, #197	; 0xc5
   26316:	d003      	beq.n	26320 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   26318:	1dfb      	adds	r3, r7, #7
   2631a:	781b      	ldrb	r3, [r3, #0]
   2631c:	2bc6      	cmp	r3, #198	; 0xc6
   2631e:	d10c      	bne.n	2633a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   26320:	230d      	movs	r3, #13
   26322:	18fb      	adds	r3, r7, r3
   26324:	2101      	movs	r1, #1
   26326:	0018      	movs	r0, r3
   26328:	4b3b      	ldr	r3, [pc, #236]	; (26418 <spi_cmd_rsp+0x124>)
   2632a:	4798      	blx	r3
   2632c:	1e03      	subs	r3, r0, #0
   2632e:	d004      	beq.n	2633a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   26330:	230f      	movs	r3, #15
   26332:	18fb      	adds	r3, r7, r3
   26334:	2200      	movs	r2, #0
   26336:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   26338:	e065      	b.n	26406 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2633a:	230e      	movs	r3, #14
   2633c:	18fb      	adds	r3, r7, r3
   2633e:	220a      	movs	r2, #10
   26340:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   26342:	230d      	movs	r3, #13
   26344:	18fb      	adds	r3, r7, r3
   26346:	2101      	movs	r1, #1
   26348:	0018      	movs	r0, r3
   2634a:	4b33      	ldr	r3, [pc, #204]	; (26418 <spi_cmd_rsp+0x124>)
   2634c:	4798      	blx	r3
   2634e:	1e03      	subs	r3, r0, #0
   26350:	d014      	beq.n	2637c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   26352:	235c      	movs	r3, #92	; 0x5c
   26354:	33ff      	adds	r3, #255	; 0xff
   26356:	001a      	movs	r2, r3
   26358:	4930      	ldr	r1, [pc, #192]	; (2641c <spi_cmd_rsp+0x128>)
   2635a:	4b31      	ldr	r3, [pc, #196]	; (26420 <spi_cmd_rsp+0x12c>)
   2635c:	0018      	movs	r0, r3
   2635e:	4b31      	ldr	r3, [pc, #196]	; (26424 <spi_cmd_rsp+0x130>)
   26360:	4798      	blx	r3
   26362:	4b31      	ldr	r3, [pc, #196]	; (26428 <spi_cmd_rsp+0x134>)
   26364:	0018      	movs	r0, r3
   26366:	4b2f      	ldr	r3, [pc, #188]	; (26424 <spi_cmd_rsp+0x130>)
   26368:	4798      	blx	r3
   2636a:	4b30      	ldr	r3, [pc, #192]	; (2642c <spi_cmd_rsp+0x138>)
   2636c:	0018      	movs	r0, r3
   2636e:	4b2d      	ldr	r3, [pc, #180]	; (26424 <spi_cmd_rsp+0x130>)
   26370:	4798      	blx	r3
			result = N_FAIL;
   26372:	230f      	movs	r3, #15
   26374:	18fb      	adds	r3, r7, r3
   26376:	2200      	movs	r2, #0
   26378:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2637a:	e044      	b.n	26406 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   2637c:	230d      	movs	r3, #13
   2637e:	18fb      	adds	r3, r7, r3
   26380:	781b      	ldrb	r3, [r3, #0]
   26382:	1dfa      	adds	r2, r7, #7
   26384:	7812      	ldrb	r2, [r2, #0]
   26386:	429a      	cmp	r2, r3
   26388:	d00b      	beq.n	263a2 <spi_cmd_rsp+0xae>
   2638a:	230e      	movs	r3, #14
   2638c:	18fb      	adds	r3, r7, r3
   2638e:	781b      	ldrb	r3, [r3, #0]
   26390:	b25b      	sxtb	r3, r3
   26392:	b2da      	uxtb	r2, r3
   26394:	3a01      	subs	r2, #1
   26396:	b2d1      	uxtb	r1, r2
   26398:	220e      	movs	r2, #14
   2639a:	18ba      	adds	r2, r7, r2
   2639c:	7011      	strb	r1, [r2, #0]
   2639e:	2b00      	cmp	r3, #0
   263a0:	dccf      	bgt.n	26342 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   263a2:	230e      	movs	r3, #14
   263a4:	18fb      	adds	r3, r7, r3
   263a6:	220a      	movs	r2, #10
   263a8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   263aa:	230d      	movs	r3, #13
   263ac:	18fb      	adds	r3, r7, r3
   263ae:	2101      	movs	r1, #1
   263b0:	0018      	movs	r0, r3
   263b2:	4b19      	ldr	r3, [pc, #100]	; (26418 <spi_cmd_rsp+0x124>)
   263b4:	4798      	blx	r3
   263b6:	1e03      	subs	r3, r0, #0
   263b8:	d014      	beq.n	263e4 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   263ba:	236a      	movs	r3, #106	; 0x6a
   263bc:	33ff      	adds	r3, #255	; 0xff
   263be:	001a      	movs	r2, r3
   263c0:	4916      	ldr	r1, [pc, #88]	; (2641c <spi_cmd_rsp+0x128>)
   263c2:	4b17      	ldr	r3, [pc, #92]	; (26420 <spi_cmd_rsp+0x12c>)
   263c4:	0018      	movs	r0, r3
   263c6:	4b17      	ldr	r3, [pc, #92]	; (26424 <spi_cmd_rsp+0x130>)
   263c8:	4798      	blx	r3
   263ca:	4b17      	ldr	r3, [pc, #92]	; (26428 <spi_cmd_rsp+0x134>)
   263cc:	0018      	movs	r0, r3
   263ce:	4b15      	ldr	r3, [pc, #84]	; (26424 <spi_cmd_rsp+0x130>)
   263d0:	4798      	blx	r3
   263d2:	4b16      	ldr	r3, [pc, #88]	; (2642c <spi_cmd_rsp+0x138>)
   263d4:	0018      	movs	r0, r3
   263d6:	4b13      	ldr	r3, [pc, #76]	; (26424 <spi_cmd_rsp+0x130>)
   263d8:	4798      	blx	r3
			result = N_FAIL;
   263da:	230f      	movs	r3, #15
   263dc:	18fb      	adds	r3, r7, r3
   263de:	2200      	movs	r2, #0
   263e0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   263e2:	e010      	b.n	26406 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   263e4:	230d      	movs	r3, #13
   263e6:	18fb      	adds	r3, r7, r3
   263e8:	781b      	ldrb	r3, [r3, #0]
   263ea:	2b00      	cmp	r3, #0
   263ec:	d00b      	beq.n	26406 <spi_cmd_rsp+0x112>
   263ee:	230e      	movs	r3, #14
   263f0:	18fb      	adds	r3, r7, r3
   263f2:	781b      	ldrb	r3, [r3, #0]
   263f4:	b25b      	sxtb	r3, r3
   263f6:	b2da      	uxtb	r2, r3
   263f8:	3a01      	subs	r2, #1
   263fa:	b2d1      	uxtb	r1, r2
   263fc:	220e      	movs	r2, #14
   263fe:	18ba      	adds	r2, r7, r2
   26400:	7011      	strb	r1, [r2, #0]
   26402:	2b00      	cmp	r3, #0
   26404:	dcd1      	bgt.n	263aa <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   26406:	230f      	movs	r3, #15
   26408:	18fb      	adds	r3, r7, r3
   2640a:	781b      	ldrb	r3, [r3, #0]
   2640c:	b25b      	sxtb	r3, r3
}
   2640e:	0018      	movs	r0, r3
   26410:	46bd      	mov	sp, r7
   26412:	b004      	add	sp, #16
   26414:	bd80      	pop	{r7, pc}
   26416:	46c0      	nop			; (mov r8, r8)
   26418:	00025d69 	.word	0x00025d69
   2641c:	0003c4a0 	.word	0x0003c4a0
   26420:	0003be98 	.word	0x0003be98
   26424:	00020889 	.word	0x00020889
   26428:	0003bf2c 	.word	0x0003bf2c
   2642c:	0003bed8 	.word	0x0003bed8

00026430 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   26430:	b590      	push	{r4, r7, lr}
   26432:	b09f      	sub	sp, #124	; 0x7c
   26434:	af00      	add	r7, sp, #0
   26436:	60b9      	str	r1, [r7, #8]
   26438:	607a      	str	r2, [r7, #4]
   2643a:	603b      	str	r3, [r7, #0]
   2643c:	230f      	movs	r3, #15
   2643e:	18fb      	adds	r3, r7, r3
   26440:	1c02      	adds	r2, r0, #0
   26442:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   26444:	2300      	movs	r3, #0
   26446:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   26448:	2301      	movs	r3, #1
   2644a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   2644c:	2338      	movs	r3, #56	; 0x38
   2644e:	18fb      	adds	r3, r7, r3
   26450:	220f      	movs	r2, #15
   26452:	18ba      	adds	r2, r7, r2
   26454:	7812      	ldrb	r2, [r2, #0]
   26456:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   26458:	230f      	movs	r3, #15
   2645a:	18fb      	adds	r3, r7, r3
   2645c:	781b      	ldrb	r3, [r3, #0]
   2645e:	3bc1      	subs	r3, #193	; 0xc1
   26460:	2b0e      	cmp	r3, #14
   26462:	d900      	bls.n	26466 <spi_cmd_complete+0x36>
   26464:	e103      	b.n	2666e <spi_cmd_complete+0x23e>
   26466:	009a      	lsls	r2, r3, #2
   26468:	4bd1      	ldr	r3, [pc, #836]	; (267b0 <spi_cmd_complete+0x380>)
   2646a:	18d3      	adds	r3, r2, r3
   2646c:	681b      	ldr	r3, [r3, #0]
   2646e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   26470:	68bb      	ldr	r3, [r7, #8]
   26472:	0c1b      	lsrs	r3, r3, #16
   26474:	b2da      	uxtb	r2, r3
   26476:	2338      	movs	r3, #56	; 0x38
   26478:	18fb      	adds	r3, r7, r3
   2647a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2647c:	68bb      	ldr	r3, [r7, #8]
   2647e:	0a1b      	lsrs	r3, r3, #8
   26480:	b2da      	uxtb	r2, r3
   26482:	2338      	movs	r3, #56	; 0x38
   26484:	18fb      	adds	r3, r7, r3
   26486:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   26488:	68bb      	ldr	r3, [r7, #8]
   2648a:	b2da      	uxtb	r2, r3
   2648c:	2338      	movs	r3, #56	; 0x38
   2648e:	18fb      	adds	r3, r7, r3
   26490:	70da      	strb	r2, [r3, #3]
		len = 5;
   26492:	2305      	movs	r3, #5
   26494:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   26496:	e0ed      	b.n	26674 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   26498:	68bb      	ldr	r3, [r7, #8]
   2649a:	0a1b      	lsrs	r3, r3, #8
   2649c:	b2da      	uxtb	r2, r3
   2649e:	2338      	movs	r3, #56	; 0x38
   264a0:	18fb      	adds	r3, r7, r3
   264a2:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   264a4:	2388      	movs	r3, #136	; 0x88
   264a6:	18fb      	adds	r3, r7, r3
   264a8:	781b      	ldrb	r3, [r3, #0]
   264aa:	2b01      	cmp	r3, #1
   264ac:	d109      	bne.n	264c2 <spi_cmd_complete+0x92>
   264ae:	2338      	movs	r3, #56	; 0x38
   264b0:	18fb      	adds	r3, r7, r3
   264b2:	785b      	ldrb	r3, [r3, #1]
   264b4:	2280      	movs	r2, #128	; 0x80
   264b6:	4252      	negs	r2, r2
   264b8:	4313      	orrs	r3, r2
   264ba:	b2da      	uxtb	r2, r3
   264bc:	2338      	movs	r3, #56	; 0x38
   264be:	18fb      	adds	r3, r7, r3
   264c0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   264c2:	68bb      	ldr	r3, [r7, #8]
   264c4:	b2da      	uxtb	r2, r3
   264c6:	2338      	movs	r3, #56	; 0x38
   264c8:	18fb      	adds	r3, r7, r3
   264ca:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   264cc:	2338      	movs	r3, #56	; 0x38
   264ce:	18fb      	adds	r3, r7, r3
   264d0:	2200      	movs	r2, #0
   264d2:	70da      	strb	r2, [r3, #3]
		len = 5;
   264d4:	2305      	movs	r3, #5
   264d6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   264d8:	e0cc      	b.n	26674 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   264da:	2338      	movs	r3, #56	; 0x38
   264dc:	18fb      	adds	r3, r7, r3
   264de:	2200      	movs	r2, #0
   264e0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   264e2:	2338      	movs	r3, #56	; 0x38
   264e4:	18fb      	adds	r3, r7, r3
   264e6:	2200      	movs	r2, #0
   264e8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   264ea:	2338      	movs	r3, #56	; 0x38
   264ec:	18fb      	adds	r3, r7, r3
   264ee:	2200      	movs	r2, #0
   264f0:	70da      	strb	r2, [r3, #3]
		len = 5;
   264f2:	2305      	movs	r3, #5
   264f4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   264f6:	e0bd      	b.n	26674 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   264f8:	2338      	movs	r3, #56	; 0x38
   264fa:	18fb      	adds	r3, r7, r3
   264fc:	2200      	movs	r2, #0
   264fe:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   26500:	2338      	movs	r3, #56	; 0x38
   26502:	18fb      	adds	r3, r7, r3
   26504:	2200      	movs	r2, #0
   26506:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   26508:	2338      	movs	r3, #56	; 0x38
   2650a:	18fb      	adds	r3, r7, r3
   2650c:	2200      	movs	r2, #0
   2650e:	70da      	strb	r2, [r3, #3]
		len = 5;
   26510:	2305      	movs	r3, #5
   26512:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26514:	e0ae      	b.n	26674 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   26516:	2338      	movs	r3, #56	; 0x38
   26518:	18fb      	adds	r3, r7, r3
   2651a:	22ff      	movs	r2, #255	; 0xff
   2651c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   2651e:	2338      	movs	r3, #56	; 0x38
   26520:	18fb      	adds	r3, r7, r3
   26522:	22ff      	movs	r2, #255	; 0xff
   26524:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   26526:	2338      	movs	r3, #56	; 0x38
   26528:	18fb      	adds	r3, r7, r3
   2652a:	22ff      	movs	r2, #255	; 0xff
   2652c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2652e:	2305      	movs	r3, #5
   26530:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26532:	e09f      	b.n	26674 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   26534:	68bb      	ldr	r3, [r7, #8]
   26536:	0c1b      	lsrs	r3, r3, #16
   26538:	b2da      	uxtb	r2, r3
   2653a:	2338      	movs	r3, #56	; 0x38
   2653c:	18fb      	adds	r3, r7, r3
   2653e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   26540:	68bb      	ldr	r3, [r7, #8]
   26542:	0a1b      	lsrs	r3, r3, #8
   26544:	b2da      	uxtb	r2, r3
   26546:	2338      	movs	r3, #56	; 0x38
   26548:	18fb      	adds	r3, r7, r3
   2654a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2654c:	68bb      	ldr	r3, [r7, #8]
   2654e:	b2da      	uxtb	r2, r3
   26550:	2338      	movs	r3, #56	; 0x38
   26552:	18fb      	adds	r3, r7, r3
   26554:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   26556:	683b      	ldr	r3, [r7, #0]
   26558:	0a1b      	lsrs	r3, r3, #8
   2655a:	b2da      	uxtb	r2, r3
   2655c:	2338      	movs	r3, #56	; 0x38
   2655e:	18fb      	adds	r3, r7, r3
   26560:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   26562:	683b      	ldr	r3, [r7, #0]
   26564:	b2da      	uxtb	r2, r3
   26566:	2338      	movs	r3, #56	; 0x38
   26568:	18fb      	adds	r3, r7, r3
   2656a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2656c:	2307      	movs	r3, #7
   2656e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26570:	e080      	b.n	26674 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   26572:	68bb      	ldr	r3, [r7, #8]
   26574:	0c1b      	lsrs	r3, r3, #16
   26576:	b2da      	uxtb	r2, r3
   26578:	2338      	movs	r3, #56	; 0x38
   2657a:	18fb      	adds	r3, r7, r3
   2657c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2657e:	68bb      	ldr	r3, [r7, #8]
   26580:	0a1b      	lsrs	r3, r3, #8
   26582:	b2da      	uxtb	r2, r3
   26584:	2338      	movs	r3, #56	; 0x38
   26586:	18fb      	adds	r3, r7, r3
   26588:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2658a:	68bb      	ldr	r3, [r7, #8]
   2658c:	b2da      	uxtb	r2, r3
   2658e:	2338      	movs	r3, #56	; 0x38
   26590:	18fb      	adds	r3, r7, r3
   26592:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   26594:	683b      	ldr	r3, [r7, #0]
   26596:	0c1b      	lsrs	r3, r3, #16
   26598:	b2da      	uxtb	r2, r3
   2659a:	2338      	movs	r3, #56	; 0x38
   2659c:	18fb      	adds	r3, r7, r3
   2659e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   265a0:	683b      	ldr	r3, [r7, #0]
   265a2:	0a1b      	lsrs	r3, r3, #8
   265a4:	b2da      	uxtb	r2, r3
   265a6:	2338      	movs	r3, #56	; 0x38
   265a8:	18fb      	adds	r3, r7, r3
   265aa:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   265ac:	683b      	ldr	r3, [r7, #0]
   265ae:	b2da      	uxtb	r2, r3
   265b0:	2338      	movs	r3, #56	; 0x38
   265b2:	18fb      	adds	r3, r7, r3
   265b4:	719a      	strb	r2, [r3, #6]
		len = 8;
   265b6:	2308      	movs	r3, #8
   265b8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   265ba:	e05b      	b.n	26674 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   265bc:	68bb      	ldr	r3, [r7, #8]
   265be:	0a1b      	lsrs	r3, r3, #8
   265c0:	b2da      	uxtb	r2, r3
   265c2:	2338      	movs	r3, #56	; 0x38
   265c4:	18fb      	adds	r3, r7, r3
   265c6:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   265c8:	2388      	movs	r3, #136	; 0x88
   265ca:	18fb      	adds	r3, r7, r3
   265cc:	781b      	ldrb	r3, [r3, #0]
   265ce:	2b01      	cmp	r3, #1
   265d0:	d109      	bne.n	265e6 <spi_cmd_complete+0x1b6>
   265d2:	2338      	movs	r3, #56	; 0x38
   265d4:	18fb      	adds	r3, r7, r3
   265d6:	785b      	ldrb	r3, [r3, #1]
   265d8:	2280      	movs	r2, #128	; 0x80
   265da:	4252      	negs	r2, r2
   265dc:	4313      	orrs	r3, r2
   265de:	b2da      	uxtb	r2, r3
   265e0:	2338      	movs	r3, #56	; 0x38
   265e2:	18fb      	adds	r3, r7, r3
   265e4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   265e6:	68bb      	ldr	r3, [r7, #8]
   265e8:	b2da      	uxtb	r2, r3
   265ea:	2338      	movs	r3, #56	; 0x38
   265ec:	18fb      	adds	r3, r7, r3
   265ee:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   265f0:	687b      	ldr	r3, [r7, #4]
   265f2:	78da      	ldrb	r2, [r3, #3]
   265f4:	2338      	movs	r3, #56	; 0x38
   265f6:	18fb      	adds	r3, r7, r3
   265f8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   265fa:	687b      	ldr	r3, [r7, #4]
   265fc:	789a      	ldrb	r2, [r3, #2]
   265fe:	2338      	movs	r3, #56	; 0x38
   26600:	18fb      	adds	r3, r7, r3
   26602:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   26604:	687b      	ldr	r3, [r7, #4]
   26606:	785a      	ldrb	r2, [r3, #1]
   26608:	2338      	movs	r3, #56	; 0x38
   2660a:	18fb      	adds	r3, r7, r3
   2660c:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   2660e:	687b      	ldr	r3, [r7, #4]
   26610:	781a      	ldrb	r2, [r3, #0]
   26612:	2338      	movs	r3, #56	; 0x38
   26614:	18fb      	adds	r3, r7, r3
   26616:	719a      	strb	r2, [r3, #6]
		len = 8;
   26618:	2308      	movs	r3, #8
   2661a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2661c:	e02a      	b.n	26674 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   2661e:	68bb      	ldr	r3, [r7, #8]
   26620:	0c1b      	lsrs	r3, r3, #16
   26622:	b2da      	uxtb	r2, r3
   26624:	2338      	movs	r3, #56	; 0x38
   26626:	18fb      	adds	r3, r7, r3
   26628:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2662a:	68bb      	ldr	r3, [r7, #8]
   2662c:	0a1b      	lsrs	r3, r3, #8
   2662e:	b2da      	uxtb	r2, r3
   26630:	2338      	movs	r3, #56	; 0x38
   26632:	18fb      	adds	r3, r7, r3
   26634:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   26636:	68bb      	ldr	r3, [r7, #8]
   26638:	b2da      	uxtb	r2, r3
   2663a:	2338      	movs	r3, #56	; 0x38
   2663c:	18fb      	adds	r3, r7, r3
   2663e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   26640:	687b      	ldr	r3, [r7, #4]
   26642:	78da      	ldrb	r2, [r3, #3]
   26644:	2338      	movs	r3, #56	; 0x38
   26646:	18fb      	adds	r3, r7, r3
   26648:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2664a:	687b      	ldr	r3, [r7, #4]
   2664c:	789a      	ldrb	r2, [r3, #2]
   2664e:	2338      	movs	r3, #56	; 0x38
   26650:	18fb      	adds	r3, r7, r3
   26652:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   26654:	687b      	ldr	r3, [r7, #4]
   26656:	785a      	ldrb	r2, [r3, #1]
   26658:	2338      	movs	r3, #56	; 0x38
   2665a:	18fb      	adds	r3, r7, r3
   2665c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2665e:	687b      	ldr	r3, [r7, #4]
   26660:	781a      	ldrb	r2, [r3, #0]
   26662:	2338      	movs	r3, #56	; 0x38
   26664:	18fb      	adds	r3, r7, r3
   26666:	71da      	strb	r2, [r3, #7]
		len = 9;
   26668:	2309      	movs	r3, #9
   2666a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2666c:	e002      	b.n	26674 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2666e:	2300      	movs	r3, #0
   26670:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   26672:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   26674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26676:	2b01      	cmp	r3, #1
   26678:	d001      	beq.n	2667e <spi_cmd_complete+0x24e>
		return result;
   2667a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2667c:	e33a      	b.n	26cf4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2667e:	4b4d      	ldr	r3, [pc, #308]	; (267b4 <spi_cmd_complete+0x384>)
   26680:	781b      	ldrb	r3, [r3, #0]
   26682:	2b00      	cmp	r3, #0
   26684:	d111      	bne.n	266aa <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   26686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26688:	1e5c      	subs	r4, r3, #1
   2668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2668c:	3b01      	subs	r3, #1
   2668e:	001a      	movs	r2, r3
   26690:	2338      	movs	r3, #56	; 0x38
   26692:	18fb      	adds	r3, r7, r3
   26694:	0019      	movs	r1, r3
   26696:	207f      	movs	r0, #127	; 0x7f
   26698:	4b47      	ldr	r3, [pc, #284]	; (267b8 <spi_cmd_complete+0x388>)
   2669a:	4798      	blx	r3
   2669c:	0003      	movs	r3, r0
   2669e:	18db      	adds	r3, r3, r3
   266a0:	b2da      	uxtb	r2, r3
   266a2:	2338      	movs	r3, #56	; 0x38
   266a4:	18fb      	adds	r3, r7, r3
   266a6:	551a      	strb	r2, [r3, r4]
   266a8:	e002      	b.n	266b0 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   266aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   266ac:	3b01      	subs	r3, #1
   266ae:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   266b0:	230f      	movs	r3, #15
   266b2:	18fb      	adds	r3, r7, r3
   266b4:	781b      	ldrb	r3, [r3, #0]
   266b6:	2bcf      	cmp	r3, #207	; 0xcf
   266b8:	d009      	beq.n	266ce <spi_cmd_complete+0x29e>
   266ba:	230f      	movs	r3, #15
   266bc:	18fb      	adds	r3, r7, r3
   266be:	781b      	ldrb	r3, [r3, #0]
   266c0:	2bc5      	cmp	r3, #197	; 0xc5
   266c2:	d004      	beq.n	266ce <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   266c4:	230f      	movs	r3, #15
   266c6:	18fb      	adds	r3, r7, r3
   266c8:	781b      	ldrb	r3, [r3, #0]
   266ca:	2bc6      	cmp	r3, #198	; 0xc6
   266cc:	d103      	bne.n	266d6 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   266ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   266d0:	3306      	adds	r3, #6
   266d2:	673b      	str	r3, [r7, #112]	; 0x70
   266d4:	e018      	b.n	26708 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   266d6:	230f      	movs	r3, #15
   266d8:	18fb      	adds	r3, r7, r3
   266da:	781b      	ldrb	r3, [r3, #0]
   266dc:	2bc4      	cmp	r3, #196	; 0xc4
   266de:	d004      	beq.n	266ea <spi_cmd_complete+0x2ba>
   266e0:	230f      	movs	r3, #15
   266e2:	18fb      	adds	r3, r7, r3
   266e4:	781b      	ldrb	r3, [r3, #0]
   266e6:	2bca      	cmp	r3, #202	; 0xca
   266e8:	d10b      	bne.n	26702 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   266ea:	4b32      	ldr	r3, [pc, #200]	; (267b4 <spi_cmd_complete+0x384>)
   266ec:	781b      	ldrb	r3, [r3, #0]
   266ee:	2b00      	cmp	r3, #0
   266f0:	d103      	bne.n	266fa <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   266f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   266f4:	330c      	adds	r3, #12
   266f6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   266f8:	e006      	b.n	26708 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   266fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   266fc:	330a      	adds	r3, #10
   266fe:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   26700:	e002      	b.n	26708 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   26702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26704:	3305      	adds	r3, #5
   26706:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   26708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2670a:	2b20      	cmp	r3, #32
   2670c:	d914      	bls.n	26738 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   2670e:	23f7      	movs	r3, #247	; 0xf7
   26710:	005a      	lsls	r2, r3, #1
   26712:	492a      	ldr	r1, [pc, #168]	; (267bc <spi_cmd_complete+0x38c>)
   26714:	4b2a      	ldr	r3, [pc, #168]	; (267c0 <spi_cmd_complete+0x390>)
   26716:	0018      	movs	r0, r3
   26718:	4b2a      	ldr	r3, [pc, #168]	; (267c4 <spi_cmd_complete+0x394>)
   2671a:	4798      	blx	r3
   2671c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2671e:	4b2a      	ldr	r3, [pc, #168]	; (267c8 <spi_cmd_complete+0x398>)
   26720:	2220      	movs	r2, #32
   26722:	0018      	movs	r0, r3
   26724:	4b27      	ldr	r3, [pc, #156]	; (267c4 <spi_cmd_complete+0x394>)
   26726:	4798      	blx	r3
   26728:	4b28      	ldr	r3, [pc, #160]	; (267cc <spi_cmd_complete+0x39c>)
   2672a:	0018      	movs	r0, r3
   2672c:	4b25      	ldr	r3, [pc, #148]	; (267c4 <spi_cmd_complete+0x394>)
   2672e:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   26730:	2300      	movs	r3, #0
   26732:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   26734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26736:	e2dd      	b.n	26cf4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   26738:	2377      	movs	r3, #119	; 0x77
   2673a:	18fb      	adds	r3, r7, r3
   2673c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2673e:	701a      	strb	r2, [r3, #0]
   26740:	e00d      	b.n	2675e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   26742:	2377      	movs	r3, #119	; 0x77
   26744:	18fb      	adds	r3, r7, r3
   26746:	781b      	ldrb	r3, [r3, #0]
   26748:	2238      	movs	r2, #56	; 0x38
   2674a:	18ba      	adds	r2, r7, r2
   2674c:	2100      	movs	r1, #0
   2674e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   26750:	2377      	movs	r3, #119	; 0x77
   26752:	18fb      	adds	r3, r7, r3
   26754:	781a      	ldrb	r2, [r3, #0]
   26756:	2377      	movs	r3, #119	; 0x77
   26758:	18fb      	adds	r3, r7, r3
   2675a:	3201      	adds	r2, #1
   2675c:	701a      	strb	r2, [r3, #0]
   2675e:	2377      	movs	r3, #119	; 0x77
   26760:	18fb      	adds	r3, r7, r3
   26762:	781a      	ldrb	r2, [r3, #0]
   26764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26766:	429a      	cmp	r2, r3
   26768:	d3eb      	bcc.n	26742 <spi_cmd_complete+0x312>
	}
	rix = len;
   2676a:	2376      	movs	r3, #118	; 0x76
   2676c:	18fb      	adds	r3, r7, r3
   2676e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26770:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   26772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26774:	b29a      	uxth	r2, r3
   26776:	2318      	movs	r3, #24
   26778:	18f9      	adds	r1, r7, r3
   2677a:	2338      	movs	r3, #56	; 0x38
   2677c:	18fb      	adds	r3, r7, r3
   2677e:	0018      	movs	r0, r3
   26780:	4b13      	ldr	r3, [pc, #76]	; (267d0 <spi_cmd_complete+0x3a0>)
   26782:	4798      	blx	r3
   26784:	1e03      	subs	r3, r0, #0
   26786:	d027      	beq.n	267d8 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   26788:	23fa      	movs	r3, #250	; 0xfa
   2678a:	33ff      	adds	r3, #255	; 0xff
   2678c:	001a      	movs	r2, r3
   2678e:	490b      	ldr	r1, [pc, #44]	; (267bc <spi_cmd_complete+0x38c>)
   26790:	4b0b      	ldr	r3, [pc, #44]	; (267c0 <spi_cmd_complete+0x390>)
   26792:	0018      	movs	r0, r3
   26794:	4b0b      	ldr	r3, [pc, #44]	; (267c4 <spi_cmd_complete+0x394>)
   26796:	4798      	blx	r3
   26798:	4b0e      	ldr	r3, [pc, #56]	; (267d4 <spi_cmd_complete+0x3a4>)
   2679a:	0018      	movs	r0, r3
   2679c:	4b09      	ldr	r3, [pc, #36]	; (267c4 <spi_cmd_complete+0x394>)
   2679e:	4798      	blx	r3
   267a0:	4b0a      	ldr	r3, [pc, #40]	; (267cc <spi_cmd_complete+0x39c>)
   267a2:	0018      	movs	r0, r3
   267a4:	4b07      	ldr	r3, [pc, #28]	; (267c4 <spi_cmd_complete+0x394>)
   267a6:	4798      	blx	r3
		result = N_FAIL;
   267a8:	2300      	movs	r3, #0
   267aa:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   267ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   267ae:	e2a1      	b.n	26cf4 <spi_cmd_complete+0x8c4>
   267b0:	0003c44c 	.word	0x0003c44c
   267b4:	200041dc 	.word	0x200041dc
   267b8:	00025e65 	.word	0x00025e65
   267bc:	0003c4ac 	.word	0x0003c4ac
   267c0:	0003be98 	.word	0x0003be98
   267c4:	00020889 	.word	0x00020889
   267c8:	0003bf60 	.word	0x0003bf60
   267cc:	0003bed8 	.word	0x0003bed8
   267d0:	00025df1 	.word	0x00025df1
   267d4:	0003beac 	.word	0x0003beac
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   267d8:	230f      	movs	r3, #15
   267da:	18fb      	adds	r3, r7, r3
   267dc:	781b      	ldrb	r3, [r3, #0]
   267de:	2bcf      	cmp	r3, #207	; 0xcf
   267e0:	d009      	beq.n	267f6 <spi_cmd_complete+0x3c6>
   267e2:	230f      	movs	r3, #15
   267e4:	18fb      	adds	r3, r7, r3
   267e6:	781b      	ldrb	r3, [r3, #0]
   267e8:	2bc5      	cmp	r3, #197	; 0xc5
   267ea:	d004      	beq.n	267f6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   267ec:	230f      	movs	r3, #15
   267ee:	18fb      	adds	r3, r7, r3
   267f0:	781b      	ldrb	r3, [r3, #0]
   267f2:	2bc6      	cmp	r3, #198	; 0xc6
   267f4:	d106      	bne.n	26804 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   267f6:	2376      	movs	r3, #118	; 0x76
   267f8:	18fb      	adds	r3, r7, r3
   267fa:	781a      	ldrb	r2, [r3, #0]
   267fc:	2376      	movs	r3, #118	; 0x76
   267fe:	18fb      	adds	r3, r7, r3
   26800:	3201      	adds	r2, #1
   26802:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   26804:	2376      	movs	r3, #118	; 0x76
   26806:	18fb      	adds	r3, r7, r3
   26808:	781b      	ldrb	r3, [r3, #0]
   2680a:	2276      	movs	r2, #118	; 0x76
   2680c:	18ba      	adds	r2, r7, r2
   2680e:	1c59      	adds	r1, r3, #1
   26810:	7011      	strb	r1, [r2, #0]
   26812:	001a      	movs	r2, r3
   26814:	2318      	movs	r3, #24
   26816:	18fb      	adds	r3, r7, r3
   26818:	5c9a      	ldrb	r2, [r3, r2]
   2681a:	2317      	movs	r3, #23
   2681c:	18fb      	adds	r3, r7, r3
   2681e:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   26820:	2317      	movs	r3, #23
   26822:	18fb      	adds	r3, r7, r3
   26824:	781b      	ldrb	r3, [r3, #0]
   26826:	220f      	movs	r2, #15
   26828:	18ba      	adds	r2, r7, r2
   2682a:	7812      	ldrb	r2, [r2, #0]
   2682c:	429a      	cmp	r2, r3
   2682e:	d018      	beq.n	26862 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   26830:	4add      	ldr	r2, [pc, #884]	; (26ba8 <spi_cmd_complete+0x778>)
   26832:	49de      	ldr	r1, [pc, #888]	; (26bac <spi_cmd_complete+0x77c>)
   26834:	4bde      	ldr	r3, [pc, #888]	; (26bb0 <spi_cmd_complete+0x780>)
   26836:	0018      	movs	r0, r3
   26838:	4bde      	ldr	r3, [pc, #888]	; (26bb4 <spi_cmd_complete+0x784>)
   2683a:	4798      	blx	r3
   2683c:	230f      	movs	r3, #15
   2683e:	18fb      	adds	r3, r7, r3
   26840:	7819      	ldrb	r1, [r3, #0]
   26842:	2317      	movs	r3, #23
   26844:	18fb      	adds	r3, r7, r3
   26846:	781b      	ldrb	r3, [r3, #0]
   26848:	001a      	movs	r2, r3
   2684a:	4bdb      	ldr	r3, [pc, #876]	; (26bb8 <spi_cmd_complete+0x788>)
   2684c:	0018      	movs	r0, r3
   2684e:	4bd9      	ldr	r3, [pc, #868]	; (26bb4 <spi_cmd_complete+0x784>)
   26850:	4798      	blx	r3
   26852:	4bda      	ldr	r3, [pc, #872]	; (26bbc <spi_cmd_complete+0x78c>)
   26854:	0018      	movs	r0, r3
   26856:	4bd7      	ldr	r3, [pc, #860]	; (26bb4 <spi_cmd_complete+0x784>)
   26858:	4798      	blx	r3
		result = N_FAIL;
   2685a:	2300      	movs	r3, #0
   2685c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2685e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26860:	e248      	b.n	26cf4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   26862:	2376      	movs	r3, #118	; 0x76
   26864:	18fb      	adds	r3, r7, r3
   26866:	781b      	ldrb	r3, [r3, #0]
   26868:	2276      	movs	r2, #118	; 0x76
   2686a:	18ba      	adds	r2, r7, r2
   2686c:	1c59      	adds	r1, r3, #1
   2686e:	7011      	strb	r1, [r2, #0]
   26870:	001a      	movs	r2, r3
   26872:	2318      	movs	r3, #24
   26874:	18fb      	adds	r3, r7, r3
   26876:	5c9a      	ldrb	r2, [r3, r2]
   26878:	2317      	movs	r3, #23
   2687a:	18fb      	adds	r3, r7, r3
   2687c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   2687e:	2317      	movs	r3, #23
   26880:	18fb      	adds	r3, r7, r3
   26882:	781b      	ldrb	r3, [r3, #0]
   26884:	2b00      	cmp	r3, #0
   26886:	d016      	beq.n	268b6 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   26888:	4acd      	ldr	r2, [pc, #820]	; (26bc0 <spi_cmd_complete+0x790>)
   2688a:	49c8      	ldr	r1, [pc, #800]	; (26bac <spi_cmd_complete+0x77c>)
   2688c:	4bc8      	ldr	r3, [pc, #800]	; (26bb0 <spi_cmd_complete+0x780>)
   2688e:	0018      	movs	r0, r3
   26890:	4bc8      	ldr	r3, [pc, #800]	; (26bb4 <spi_cmd_complete+0x784>)
   26892:	4798      	blx	r3
   26894:	2317      	movs	r3, #23
   26896:	18fb      	adds	r3, r7, r3
   26898:	781b      	ldrb	r3, [r3, #0]
   2689a:	001a      	movs	r2, r3
   2689c:	4bc9      	ldr	r3, [pc, #804]	; (26bc4 <spi_cmd_complete+0x794>)
   2689e:	0011      	movs	r1, r2
   268a0:	0018      	movs	r0, r3
   268a2:	4bc4      	ldr	r3, [pc, #784]	; (26bb4 <spi_cmd_complete+0x784>)
   268a4:	4798      	blx	r3
   268a6:	4bc5      	ldr	r3, [pc, #788]	; (26bbc <spi_cmd_complete+0x78c>)
   268a8:	0018      	movs	r0, r3
   268aa:	4bc2      	ldr	r3, [pc, #776]	; (26bb4 <spi_cmd_complete+0x784>)
   268ac:	4798      	blx	r3
		result = N_FAIL;
   268ae:	2300      	movs	r3, #0
   268b0:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   268b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   268b4:	e21e      	b.n	26cf4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   268b6:	230f      	movs	r3, #15
   268b8:	18fb      	adds	r3, r7, r3
   268ba:	781b      	ldrb	r3, [r3, #0]
   268bc:	2bc4      	cmp	r3, #196	; 0xc4
   268be:	d00f      	beq.n	268e0 <spi_cmd_complete+0x4b0>
   268c0:	230f      	movs	r3, #15
   268c2:	18fb      	adds	r3, r7, r3
   268c4:	781b      	ldrb	r3, [r3, #0]
   268c6:	2bca      	cmp	r3, #202	; 0xca
   268c8:	d00a      	beq.n	268e0 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   268ca:	230f      	movs	r3, #15
   268cc:	18fb      	adds	r3, r7, r3
   268ce:	781b      	ldrb	r3, [r3, #0]
   268d0:	2bc2      	cmp	r3, #194	; 0xc2
   268d2:	d005      	beq.n	268e0 <spi_cmd_complete+0x4b0>
   268d4:	230f      	movs	r3, #15
   268d6:	18fb      	adds	r3, r7, r3
   268d8:	781b      	ldrb	r3, [r3, #0]
   268da:	2bc8      	cmp	r3, #200	; 0xc8
   268dc:	d000      	beq.n	268e0 <spi_cmd_complete+0x4b0>
   268de:	e208      	b.n	26cf2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   268e0:	230a      	movs	r3, #10
   268e2:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   268e4:	2376      	movs	r3, #118	; 0x76
   268e6:	18fb      	adds	r3, r7, r3
   268e8:	781a      	ldrb	r2, [r3, #0]
   268ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   268ec:	429a      	cmp	r2, r3
   268ee:	d218      	bcs.n	26922 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   268f0:	2376      	movs	r3, #118	; 0x76
   268f2:	18fb      	adds	r3, r7, r3
   268f4:	781b      	ldrb	r3, [r3, #0]
   268f6:	2276      	movs	r2, #118	; 0x76
   268f8:	18ba      	adds	r2, r7, r2
   268fa:	1c59      	adds	r1, r3, #1
   268fc:	7011      	strb	r1, [r2, #0]
   268fe:	001a      	movs	r2, r3
   26900:	2318      	movs	r3, #24
   26902:	18fb      	adds	r3, r7, r3
   26904:	5c9a      	ldrb	r2, [r3, r2]
   26906:	2317      	movs	r3, #23
   26908:	18fb      	adds	r3, r7, r3
   2690a:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   2690c:	2317      	movs	r3, #23
   2690e:	18fb      	adds	r3, r7, r3
   26910:	781b      	ldrb	r3, [r3, #0]
   26912:	091b      	lsrs	r3, r3, #4
   26914:	b2db      	uxtb	r3, r3
   26916:	001a      	movs	r2, r3
   26918:	230f      	movs	r3, #15
   2691a:	4013      	ands	r3, r2
   2691c:	2b0f      	cmp	r3, #15
   2691e:	d103      	bne.n	26928 <spi_cmd_complete+0x4f8>
					break;
   26920:	e007      	b.n	26932 <spi_cmd_complete+0x502>
					retry = 0;
   26922:	2300      	movs	r3, #0
   26924:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   26926:	e004      	b.n	26932 <spi_cmd_complete+0x502>
			} while (retry--);
   26928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2692a:	1e5a      	subs	r2, r3, #1
   2692c:	667a      	str	r2, [r7, #100]	; 0x64
   2692e:	2b00      	cmp	r3, #0
   26930:	d1d8      	bne.n	268e4 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   26932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26934:	2b00      	cmp	r3, #0
   26936:	dc18      	bgt.n	2696a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   26938:	2395      	movs	r3, #149	; 0x95
   2693a:	009a      	lsls	r2, r3, #2
   2693c:	499b      	ldr	r1, [pc, #620]	; (26bac <spi_cmd_complete+0x77c>)
   2693e:	4b9c      	ldr	r3, [pc, #624]	; (26bb0 <spi_cmd_complete+0x780>)
   26940:	0018      	movs	r0, r3
   26942:	4b9c      	ldr	r3, [pc, #624]	; (26bb4 <spi_cmd_complete+0x784>)
   26944:	4798      	blx	r3
   26946:	2317      	movs	r3, #23
   26948:	18fb      	adds	r3, r7, r3
   2694a:	781b      	ldrb	r3, [r3, #0]
   2694c:	001a      	movs	r2, r3
   2694e:	4b9e      	ldr	r3, [pc, #632]	; (26bc8 <spi_cmd_complete+0x798>)
   26950:	0011      	movs	r1, r2
   26952:	0018      	movs	r0, r3
   26954:	4b97      	ldr	r3, [pc, #604]	; (26bb4 <spi_cmd_complete+0x784>)
   26956:	4798      	blx	r3
   26958:	4b98      	ldr	r3, [pc, #608]	; (26bbc <spi_cmd_complete+0x78c>)
   2695a:	0018      	movs	r0, r3
   2695c:	4b95      	ldr	r3, [pc, #596]	; (26bb4 <spi_cmd_complete+0x784>)
   2695e:	4798      	blx	r3
				result = N_RESET;
   26960:	2301      	movs	r3, #1
   26962:	425b      	negs	r3, r3
   26964:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   26966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26968:	e1c4      	b.n	26cf4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2696a:	230f      	movs	r3, #15
   2696c:	18fb      	adds	r3, r7, r3
   2696e:	781b      	ldrb	r3, [r3, #0]
   26970:	2bc4      	cmp	r3, #196	; 0xc4
   26972:	d005      	beq.n	26980 <spi_cmd_complete+0x550>
   26974:	230f      	movs	r3, #15
   26976:	18fb      	adds	r3, r7, r3
   26978:	781b      	ldrb	r3, [r3, #0]
   2697a:	2bca      	cmp	r3, #202	; 0xca
   2697c:	d000      	beq.n	26980 <spi_cmd_complete+0x550>
   2697e:	e08e      	b.n	26a9e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   26980:	2376      	movs	r3, #118	; 0x76
   26982:	18fb      	adds	r3, r7, r3
   26984:	781b      	ldrb	r3, [r3, #0]
   26986:	3303      	adds	r3, #3
   26988:	001a      	movs	r2, r3
   2698a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2698c:	429a      	cmp	r2, r3
   2698e:	d23c      	bcs.n	26a0a <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   26990:	2376      	movs	r3, #118	; 0x76
   26992:	18fb      	adds	r3, r7, r3
   26994:	781b      	ldrb	r3, [r3, #0]
   26996:	2276      	movs	r2, #118	; 0x76
   26998:	18ba      	adds	r2, r7, r2
   2699a:	1c59      	adds	r1, r3, #1
   2699c:	7011      	strb	r1, [r2, #0]
   2699e:	001a      	movs	r2, r3
   269a0:	2318      	movs	r3, #24
   269a2:	18fb      	adds	r3, r7, r3
   269a4:	5c9a      	ldrb	r2, [r3, r2]
   269a6:	687b      	ldr	r3, [r7, #4]
   269a8:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   269aa:	687b      	ldr	r3, [r7, #4]
   269ac:	1c5a      	adds	r2, r3, #1
   269ae:	2376      	movs	r3, #118	; 0x76
   269b0:	18fb      	adds	r3, r7, r3
   269b2:	781b      	ldrb	r3, [r3, #0]
   269b4:	2176      	movs	r1, #118	; 0x76
   269b6:	1879      	adds	r1, r7, r1
   269b8:	1c58      	adds	r0, r3, #1
   269ba:	7008      	strb	r0, [r1, #0]
   269bc:	0019      	movs	r1, r3
   269be:	2318      	movs	r3, #24
   269c0:	18fb      	adds	r3, r7, r3
   269c2:	5c5b      	ldrb	r3, [r3, r1]
   269c4:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   269c6:	687b      	ldr	r3, [r7, #4]
   269c8:	1c9a      	adds	r2, r3, #2
   269ca:	2376      	movs	r3, #118	; 0x76
   269cc:	18fb      	adds	r3, r7, r3
   269ce:	781b      	ldrb	r3, [r3, #0]
   269d0:	2176      	movs	r1, #118	; 0x76
   269d2:	1879      	adds	r1, r7, r1
   269d4:	1c58      	adds	r0, r3, #1
   269d6:	7008      	strb	r0, [r1, #0]
   269d8:	0019      	movs	r1, r3
   269da:	2318      	movs	r3, #24
   269dc:	18fb      	adds	r3, r7, r3
   269de:	5c5b      	ldrb	r3, [r3, r1]
   269e0:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   269e2:	687b      	ldr	r3, [r7, #4]
   269e4:	1cda      	adds	r2, r3, #3
   269e6:	2376      	movs	r3, #118	; 0x76
   269e8:	18fb      	adds	r3, r7, r3
   269ea:	781b      	ldrb	r3, [r3, #0]
   269ec:	2176      	movs	r1, #118	; 0x76
   269ee:	1879      	adds	r1, r7, r1
   269f0:	1c58      	adds	r0, r3, #1
   269f2:	7008      	strb	r0, [r1, #0]
   269f4:	0019      	movs	r1, r3
   269f6:	2318      	movs	r3, #24
   269f8:	18fb      	adds	r3, r7, r3
   269fa:	5c5b      	ldrb	r3, [r3, r1]
   269fc:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   269fe:	4b73      	ldr	r3, [pc, #460]	; (26bcc <spi_cmd_complete+0x79c>)
   26a00:	781b      	ldrb	r3, [r3, #0]
   26a02:	2b00      	cmp	r3, #0
   26a04:	d000      	beq.n	26a08 <spi_cmd_complete+0x5d8>
   26a06:	e174      	b.n	26cf2 <spi_cmd_complete+0x8c2>
   26a08:	e011      	b.n	26a2e <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   26a0a:	4a71      	ldr	r2, [pc, #452]	; (26bd0 <spi_cmd_complete+0x7a0>)
   26a0c:	4967      	ldr	r1, [pc, #412]	; (26bac <spi_cmd_complete+0x77c>)
   26a0e:	4b68      	ldr	r3, [pc, #416]	; (26bb0 <spi_cmd_complete+0x780>)
   26a10:	0018      	movs	r0, r3
   26a12:	4b68      	ldr	r3, [pc, #416]	; (26bb4 <spi_cmd_complete+0x784>)
   26a14:	4798      	blx	r3
   26a16:	4b6f      	ldr	r3, [pc, #444]	; (26bd4 <spi_cmd_complete+0x7a4>)
   26a18:	0018      	movs	r0, r3
   26a1a:	4b66      	ldr	r3, [pc, #408]	; (26bb4 <spi_cmd_complete+0x784>)
   26a1c:	4798      	blx	r3
   26a1e:	4b67      	ldr	r3, [pc, #412]	; (26bbc <spi_cmd_complete+0x78c>)
   26a20:	0018      	movs	r0, r3
   26a22:	4b64      	ldr	r3, [pc, #400]	; (26bb4 <spi_cmd_complete+0x784>)
   26a24:	4798      	blx	r3
					result = N_FAIL;
   26a26:	2300      	movs	r3, #0
   26a28:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   26a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26a2c:	e162      	b.n	26cf4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   26a2e:	2376      	movs	r3, #118	; 0x76
   26a30:	18fb      	adds	r3, r7, r3
   26a32:	781b      	ldrb	r3, [r3, #0]
   26a34:	3301      	adds	r3, #1
   26a36:	001a      	movs	r2, r3
   26a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26a3a:	429a      	cmp	r2, r3
   26a3c:	d21c      	bcs.n	26a78 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   26a3e:	2376      	movs	r3, #118	; 0x76
   26a40:	18fb      	adds	r3, r7, r3
   26a42:	781b      	ldrb	r3, [r3, #0]
   26a44:	2276      	movs	r2, #118	; 0x76
   26a46:	18ba      	adds	r2, r7, r2
   26a48:	1c59      	adds	r1, r3, #1
   26a4a:	7011      	strb	r1, [r2, #0]
   26a4c:	001a      	movs	r2, r3
   26a4e:	2318      	movs	r3, #24
   26a50:	18fb      	adds	r3, r7, r3
   26a52:	5c9a      	ldrb	r2, [r3, r2]
   26a54:	2314      	movs	r3, #20
   26a56:	18fb      	adds	r3, r7, r3
   26a58:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   26a5a:	2376      	movs	r3, #118	; 0x76
   26a5c:	18fb      	adds	r3, r7, r3
   26a5e:	781b      	ldrb	r3, [r3, #0]
   26a60:	2276      	movs	r2, #118	; 0x76
   26a62:	18ba      	adds	r2, r7, r2
   26a64:	1c59      	adds	r1, r3, #1
   26a66:	7011      	strb	r1, [r2, #0]
   26a68:	001a      	movs	r2, r3
   26a6a:	2318      	movs	r3, #24
   26a6c:	18fb      	adds	r3, r7, r3
   26a6e:	5c9a      	ldrb	r2, [r3, r2]
   26a70:	2314      	movs	r3, #20
   26a72:	18fb      	adds	r3, r7, r3
   26a74:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   26a76:	e13c      	b.n	26cf2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   26a78:	239c      	movs	r3, #156	; 0x9c
   26a7a:	009a      	lsls	r2, r3, #2
   26a7c:	494b      	ldr	r1, [pc, #300]	; (26bac <spi_cmd_complete+0x77c>)
   26a7e:	4b4c      	ldr	r3, [pc, #304]	; (26bb0 <spi_cmd_complete+0x780>)
   26a80:	0018      	movs	r0, r3
   26a82:	4b4c      	ldr	r3, [pc, #304]	; (26bb4 <spi_cmd_complete+0x784>)
   26a84:	4798      	blx	r3
   26a86:	4b54      	ldr	r3, [pc, #336]	; (26bd8 <spi_cmd_complete+0x7a8>)
   26a88:	0018      	movs	r0, r3
   26a8a:	4b4a      	ldr	r3, [pc, #296]	; (26bb4 <spi_cmd_complete+0x784>)
   26a8c:	4798      	blx	r3
   26a8e:	4b4b      	ldr	r3, [pc, #300]	; (26bbc <spi_cmd_complete+0x78c>)
   26a90:	0018      	movs	r0, r3
   26a92:	4b48      	ldr	r3, [pc, #288]	; (26bb4 <spi_cmd_complete+0x784>)
   26a94:	4798      	blx	r3
						result = N_FAIL;
   26a96:	2300      	movs	r3, #0
   26a98:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   26a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26a9c:	e12a      	b.n	26cf4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   26a9e:	230f      	movs	r3, #15
   26aa0:	18fb      	adds	r3, r7, r3
   26aa2:	781b      	ldrb	r3, [r3, #0]
   26aa4:	2bc2      	cmp	r3, #194	; 0xc2
   26aa6:	d005      	beq.n	26ab4 <spi_cmd_complete+0x684>
   26aa8:	230f      	movs	r3, #15
   26aaa:	18fb      	adds	r3, r7, r3
   26aac:	781b      	ldrb	r3, [r3, #0]
   26aae:	2bc8      	cmp	r3, #200	; 0xc8
   26ab0:	d000      	beq.n	26ab4 <spi_cmd_complete+0x684>
   26ab2:	e11e      	b.n	26cf2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   26ab4:	2300      	movs	r3, #0
   26ab6:	663b      	str	r3, [r7, #96]	; 0x60
   26ab8:	e011      	b.n	26ade <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   26aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   26abc:	1c5a      	adds	r2, r3, #1
   26abe:	663a      	str	r2, [r7, #96]	; 0x60
   26ac0:	001a      	movs	r2, r3
   26ac2:	687b      	ldr	r3, [r7, #4]
   26ac4:	189a      	adds	r2, r3, r2
   26ac6:	2376      	movs	r3, #118	; 0x76
   26ac8:	18fb      	adds	r3, r7, r3
   26aca:	781b      	ldrb	r3, [r3, #0]
   26acc:	2176      	movs	r1, #118	; 0x76
   26ace:	1879      	adds	r1, r7, r1
   26ad0:	1c58      	adds	r0, r3, #1
   26ad2:	7008      	strb	r0, [r1, #0]
   26ad4:	0019      	movs	r1, r3
   26ad6:	2318      	movs	r3, #24
   26ad8:	18fb      	adds	r3, r7, r3
   26ada:	5c5b      	ldrb	r3, [r3, r1]
   26adc:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   26ade:	2376      	movs	r3, #118	; 0x76
   26ae0:	18fb      	adds	r3, r7, r3
   26ae2:	781a      	ldrb	r2, [r3, #0]
   26ae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26ae6:	429a      	cmp	r2, r3
   26ae8:	d203      	bcs.n	26af2 <spi_cmd_complete+0x6c2>
   26aea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   26aec:	683b      	ldr	r3, [r7, #0]
   26aee:	429a      	cmp	r2, r3
   26af0:	d3e3      	bcc.n	26aba <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   26af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   26af4:	683a      	ldr	r2, [r7, #0]
   26af6:	1ad3      	subs	r3, r2, r3
   26af8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   26afa:	683b      	ldr	r3, [r7, #0]
   26afc:	2b00      	cmp	r3, #0
   26afe:	d100      	bne.n	26b02 <spi_cmd_complete+0x6d2>
   26b00:	e0f1      	b.n	26ce6 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   26b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   26b04:	2280      	movs	r2, #128	; 0x80
   26b06:	0192      	lsls	r2, r2, #6
   26b08:	1ad3      	subs	r3, r2, r3
   26b0a:	001a      	movs	r2, r3
   26b0c:	683b      	ldr	r3, [r7, #0]
   26b0e:	429a      	cmp	r2, r3
   26b10:	d302      	bcc.n	26b18 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   26b12:	683b      	ldr	r3, [r7, #0]
   26b14:	65fb      	str	r3, [r7, #92]	; 0x5c
   26b16:	e004      	b.n	26b22 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   26b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   26b1a:	2280      	movs	r2, #128	; 0x80
   26b1c:	0192      	lsls	r2, r2, #6
   26b1e:	1ad3      	subs	r3, r2, r3
   26b20:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   26b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   26b24:	687a      	ldr	r2, [r7, #4]
   26b26:	18d3      	adds	r3, r2, r3
   26b28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   26b2a:	b292      	uxth	r2, r2
   26b2c:	0011      	movs	r1, r2
   26b2e:	0018      	movs	r0, r3
   26b30:	4b2a      	ldr	r3, [pc, #168]	; (26bdc <spi_cmd_complete+0x7ac>)
   26b32:	4798      	blx	r3
   26b34:	1e03      	subs	r3, r0, #0
   26b36:	d010      	beq.n	26b5a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   26b38:	4a29      	ldr	r2, [pc, #164]	; (26be0 <spi_cmd_complete+0x7b0>)
   26b3a:	491c      	ldr	r1, [pc, #112]	; (26bac <spi_cmd_complete+0x77c>)
   26b3c:	4b1c      	ldr	r3, [pc, #112]	; (26bb0 <spi_cmd_complete+0x780>)
   26b3e:	0018      	movs	r0, r3
   26b40:	4b1c      	ldr	r3, [pc, #112]	; (26bb4 <spi_cmd_complete+0x784>)
   26b42:	4798      	blx	r3
   26b44:	4b27      	ldr	r3, [pc, #156]	; (26be4 <spi_cmd_complete+0x7b4>)
   26b46:	0018      	movs	r0, r3
   26b48:	4b1a      	ldr	r3, [pc, #104]	; (26bb4 <spi_cmd_complete+0x784>)
   26b4a:	4798      	blx	r3
   26b4c:	4b1b      	ldr	r3, [pc, #108]	; (26bbc <spi_cmd_complete+0x78c>)
   26b4e:	0018      	movs	r0, r3
   26b50:	4b18      	ldr	r3, [pc, #96]	; (26bb4 <spi_cmd_complete+0x784>)
   26b52:	4798      	blx	r3
						result = N_FAIL;
   26b54:	2300      	movs	r3, #0
   26b56:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   26b58:	e0cb      	b.n	26cf2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   26b5a:	4b1c      	ldr	r3, [pc, #112]	; (26bcc <spi_cmd_complete+0x79c>)
   26b5c:	781b      	ldrb	r3, [r3, #0]
   26b5e:	2b00      	cmp	r3, #0
   26b60:	d119      	bne.n	26b96 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   26b62:	2314      	movs	r3, #20
   26b64:	18fb      	adds	r3, r7, r3
   26b66:	2102      	movs	r1, #2
   26b68:	0018      	movs	r0, r3
   26b6a:	4b1c      	ldr	r3, [pc, #112]	; (26bdc <spi_cmd_complete+0x7ac>)
   26b6c:	4798      	blx	r3
   26b6e:	1e03      	subs	r3, r0, #0
   26b70:	d011      	beq.n	26b96 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   26b72:	23a6      	movs	r3, #166	; 0xa6
   26b74:	009a      	lsls	r2, r3, #2
   26b76:	490d      	ldr	r1, [pc, #52]	; (26bac <spi_cmd_complete+0x77c>)
   26b78:	4b0d      	ldr	r3, [pc, #52]	; (26bb0 <spi_cmd_complete+0x780>)
   26b7a:	0018      	movs	r0, r3
   26b7c:	4b0d      	ldr	r3, [pc, #52]	; (26bb4 <spi_cmd_complete+0x784>)
   26b7e:	4798      	blx	r3
   26b80:	4b19      	ldr	r3, [pc, #100]	; (26be8 <spi_cmd_complete+0x7b8>)
   26b82:	0018      	movs	r0, r3
   26b84:	4b0b      	ldr	r3, [pc, #44]	; (26bb4 <spi_cmd_complete+0x784>)
   26b86:	4798      	blx	r3
   26b88:	4b0c      	ldr	r3, [pc, #48]	; (26bbc <spi_cmd_complete+0x78c>)
   26b8a:	0018      	movs	r0, r3
   26b8c:	4b09      	ldr	r3, [pc, #36]	; (26bb4 <spi_cmd_complete+0x784>)
   26b8e:	4798      	blx	r3
							result = N_FAIL;
   26b90:	2300      	movs	r3, #0
   26b92:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   26b94:	e0ad      	b.n	26cf2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   26b96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   26b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   26b9a:	18d3      	adds	r3, r2, r3
   26b9c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   26b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   26ba0:	683a      	ldr	r2, [r7, #0]
   26ba2:	1ad3      	subs	r3, r2, r3
   26ba4:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   26ba6:	e09e      	b.n	26ce6 <spi_cmd_complete+0x8b6>
   26ba8:	0000022f 	.word	0x0000022f
   26bac:	0003c4ac 	.word	0x0003c4ac
   26bb0:	0003be98 	.word	0x0003be98
   26bb4:	00020889 	.word	0x00020889
   26bb8:	0003bf90 	.word	0x0003bf90
   26bbc:	0003bed8 	.word	0x0003bed8
   26bc0:	00000239 	.word	0x00000239
   26bc4:	0003bfcc 	.word	0x0003bfcc
   26bc8:	0003c000 	.word	0x0003c000
   26bcc:	200041dc 	.word	0x200041dc
   26bd0:	00000263 	.word	0x00000263
   26bd4:	0003c030 	.word	0x0003c030
   26bd8:	0003c060 	.word	0x0003c060
   26bdc:	00025d69 	.word	0x00025d69
   26be0:	0000028e 	.word	0x0000028e
   26be4:	0003c090 	.word	0x0003c090
   26be8:	0003c0c4 	.word	0x0003c0c4
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   26bec:	683a      	ldr	r2, [r7, #0]
   26bee:	2380      	movs	r3, #128	; 0x80
   26bf0:	019b      	lsls	r3, r3, #6
   26bf2:	429a      	cmp	r2, r3
   26bf4:	d802      	bhi.n	26bfc <spi_cmd_complete+0x7cc>
						nbytes = sz;
   26bf6:	683b      	ldr	r3, [r7, #0]
   26bf8:	65bb      	str	r3, [r7, #88]	; 0x58
   26bfa:	e002      	b.n	26c02 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   26bfc:	2380      	movs	r3, #128	; 0x80
   26bfe:	019b      	lsls	r3, r3, #6
   26c00:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   26c02:	230a      	movs	r3, #10
   26c04:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   26c06:	2317      	movs	r3, #23
   26c08:	18fb      	adds	r3, r7, r3
   26c0a:	2101      	movs	r1, #1
   26c0c:	0018      	movs	r0, r3
   26c0e:	4b3b      	ldr	r3, [pc, #236]	; (26cfc <spi_cmd_complete+0x8cc>)
   26c10:	4798      	blx	r3
   26c12:	1e03      	subs	r3, r0, #0
   26c14:	d011      	beq.n	26c3a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   26c16:	23ae      	movs	r3, #174	; 0xae
   26c18:	009a      	lsls	r2, r3, #2
   26c1a:	4939      	ldr	r1, [pc, #228]	; (26d00 <spi_cmd_complete+0x8d0>)
   26c1c:	4b39      	ldr	r3, [pc, #228]	; (26d04 <spi_cmd_complete+0x8d4>)
   26c1e:	0018      	movs	r0, r3
   26c20:	4b39      	ldr	r3, [pc, #228]	; (26d08 <spi_cmd_complete+0x8d8>)
   26c22:	4798      	blx	r3
   26c24:	4b39      	ldr	r3, [pc, #228]	; (26d0c <spi_cmd_complete+0x8dc>)
   26c26:	0018      	movs	r0, r3
   26c28:	4b37      	ldr	r3, [pc, #220]	; (26d08 <spi_cmd_complete+0x8d8>)
   26c2a:	4798      	blx	r3
   26c2c:	4b38      	ldr	r3, [pc, #224]	; (26d10 <spi_cmd_complete+0x8e0>)
   26c2e:	0018      	movs	r0, r3
   26c30:	4b35      	ldr	r3, [pc, #212]	; (26d08 <spi_cmd_complete+0x8d8>)
   26c32:	4798      	blx	r3
							result = N_FAIL;
   26c34:	2300      	movs	r3, #0
   26c36:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   26c38:	e010      	b.n	26c5c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   26c3a:	2317      	movs	r3, #23
   26c3c:	18fb      	adds	r3, r7, r3
   26c3e:	781b      	ldrb	r3, [r3, #0]
   26c40:	091b      	lsrs	r3, r3, #4
   26c42:	b2db      	uxtb	r3, r3
   26c44:	001a      	movs	r2, r3
   26c46:	230f      	movs	r3, #15
   26c48:	4013      	ands	r3, r2
   26c4a:	2b0f      	cmp	r3, #15
   26c4c:	d005      	beq.n	26c5a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   26c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26c50:	1e5a      	subs	r2, r3, #1
   26c52:	667a      	str	r2, [r7, #100]	; 0x64
   26c54:	2b00      	cmp	r3, #0
   26c56:	d1d6      	bne.n	26c06 <spi_cmd_complete+0x7d6>
   26c58:	e000      	b.n	26c5c <spi_cmd_complete+0x82c>
							break;
   26c5a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   26c5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26c5e:	2b00      	cmp	r3, #0
   26c60:	d046      	beq.n	26cf0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   26c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   26c64:	687a      	ldr	r2, [r7, #4]
   26c66:	18d3      	adds	r3, r2, r3
   26c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
   26c6a:	b292      	uxth	r2, r2
   26c6c:	0011      	movs	r1, r2
   26c6e:	0018      	movs	r0, r3
   26c70:	4b22      	ldr	r3, [pc, #136]	; (26cfc <spi_cmd_complete+0x8cc>)
   26c72:	4798      	blx	r3
   26c74:	1e03      	subs	r3, r0, #0
   26c76:	d011      	beq.n	26c9c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   26c78:	23b2      	movs	r3, #178	; 0xb2
   26c7a:	009a      	lsls	r2, r3, #2
   26c7c:	4920      	ldr	r1, [pc, #128]	; (26d00 <spi_cmd_complete+0x8d0>)
   26c7e:	4b21      	ldr	r3, [pc, #132]	; (26d04 <spi_cmd_complete+0x8d4>)
   26c80:	0018      	movs	r0, r3
   26c82:	4b21      	ldr	r3, [pc, #132]	; (26d08 <spi_cmd_complete+0x8d8>)
   26c84:	4798      	blx	r3
   26c86:	4b23      	ldr	r3, [pc, #140]	; (26d14 <spi_cmd_complete+0x8e4>)
   26c88:	0018      	movs	r0, r3
   26c8a:	4b1f      	ldr	r3, [pc, #124]	; (26d08 <spi_cmd_complete+0x8d8>)
   26c8c:	4798      	blx	r3
   26c8e:	4b20      	ldr	r3, [pc, #128]	; (26d10 <spi_cmd_complete+0x8e0>)
   26c90:	0018      	movs	r0, r3
   26c92:	4b1d      	ldr	r3, [pc, #116]	; (26d08 <spi_cmd_complete+0x8d8>)
   26c94:	4798      	blx	r3
						result = N_FAIL;
   26c96:	2300      	movs	r3, #0
   26c98:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   26c9a:	e02a      	b.n	26cf2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   26c9c:	4b1e      	ldr	r3, [pc, #120]	; (26d18 <spi_cmd_complete+0x8e8>)
   26c9e:	781b      	ldrb	r3, [r3, #0]
   26ca0:	2b00      	cmp	r3, #0
   26ca2:	d118      	bne.n	26cd6 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   26ca4:	2314      	movs	r3, #20
   26ca6:	18fb      	adds	r3, r7, r3
   26ca8:	2102      	movs	r1, #2
   26caa:	0018      	movs	r0, r3
   26cac:	4b13      	ldr	r3, [pc, #76]	; (26cfc <spi_cmd_complete+0x8cc>)
   26cae:	4798      	blx	r3
   26cb0:	1e03      	subs	r3, r0, #0
   26cb2:	d010      	beq.n	26cd6 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   26cb4:	4a19      	ldr	r2, [pc, #100]	; (26d1c <spi_cmd_complete+0x8ec>)
   26cb6:	4912      	ldr	r1, [pc, #72]	; (26d00 <spi_cmd_complete+0x8d0>)
   26cb8:	4b12      	ldr	r3, [pc, #72]	; (26d04 <spi_cmd_complete+0x8d4>)
   26cba:	0018      	movs	r0, r3
   26cbc:	4b12      	ldr	r3, [pc, #72]	; (26d08 <spi_cmd_complete+0x8d8>)
   26cbe:	4798      	blx	r3
   26cc0:	4b17      	ldr	r3, [pc, #92]	; (26d20 <spi_cmd_complete+0x8f0>)
   26cc2:	0018      	movs	r0, r3
   26cc4:	4b10      	ldr	r3, [pc, #64]	; (26d08 <spi_cmd_complete+0x8d8>)
   26cc6:	4798      	blx	r3
   26cc8:	4b11      	ldr	r3, [pc, #68]	; (26d10 <spi_cmd_complete+0x8e0>)
   26cca:	0018      	movs	r0, r3
   26ccc:	4b0e      	ldr	r3, [pc, #56]	; (26d08 <spi_cmd_complete+0x8d8>)
   26cce:	4798      	blx	r3
							result = N_FAIL;
   26cd0:	2300      	movs	r3, #0
   26cd2:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   26cd4:	e00d      	b.n	26cf2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   26cd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   26cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26cda:	18d3      	adds	r3, r2, r3
   26cdc:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   26cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26ce0:	683a      	ldr	r2, [r7, #0]
   26ce2:	1ad3      	subs	r3, r2, r3
   26ce4:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   26ce6:	683b      	ldr	r3, [r7, #0]
   26ce8:	2b00      	cmp	r3, #0
   26cea:	d000      	beq.n	26cee <spi_cmd_complete+0x8be>
   26cec:	e77e      	b.n	26bec <spi_cmd_complete+0x7bc>
   26cee:	e000      	b.n	26cf2 <spi_cmd_complete+0x8c2>
						break;
   26cf0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   26cf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   26cf4:	0018      	movs	r0, r3
   26cf6:	46bd      	mov	sp, r7
   26cf8:	b01f      	add	sp, #124	; 0x7c
   26cfa:	bd90      	pop	{r4, r7, pc}
   26cfc:	00025d69 	.word	0x00025d69
   26d00:	0003c4ac 	.word	0x0003c4ac
   26d04:	0003be98 	.word	0x0003be98
   26d08:	00020889 	.word	0x00020889
   26d0c:	0003c0fc 	.word	0x0003c0fc
   26d10:	0003bed8 	.word	0x0003bed8
   26d14:	0003c090 	.word	0x0003c090
   26d18:	200041dc 	.word	0x200041dc
   26d1c:	000002d2 	.word	0x000002d2
   26d20:	0003c0c4 	.word	0x0003c0c4

00026d24 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   26d24:	b580      	push	{r7, lr}
   26d26:	b086      	sub	sp, #24
   26d28:	af00      	add	r7, sp, #0
   26d2a:	6078      	str	r0, [r7, #4]
   26d2c:	000a      	movs	r2, r1
   26d2e:	1cbb      	adds	r3, r7, #2
   26d30:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   26d32:	2313      	movs	r3, #19
   26d34:	18fb      	adds	r3, r7, r3
   26d36:	2201      	movs	r2, #1
   26d38:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   26d3a:	230c      	movs	r3, #12
   26d3c:	18fb      	adds	r3, r7, r3
   26d3e:	2200      	movs	r2, #0
   26d40:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   26d42:	2316      	movs	r3, #22
   26d44:	18fb      	adds	r3, r7, r3
   26d46:	2200      	movs	r2, #0
   26d48:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   26d4a:	1cbb      	adds	r3, r7, #2
   26d4c:	881a      	ldrh	r2, [r3, #0]
   26d4e:	2380      	movs	r3, #128	; 0x80
   26d50:	019b      	lsls	r3, r3, #6
   26d52:	429a      	cmp	r2, r3
   26d54:	d805      	bhi.n	26d62 <spi_data_write+0x3e>
			nbytes = sz;
   26d56:	2314      	movs	r3, #20
   26d58:	18fb      	adds	r3, r7, r3
   26d5a:	1cba      	adds	r2, r7, #2
   26d5c:	8812      	ldrh	r2, [r2, #0]
   26d5e:	801a      	strh	r2, [r3, #0]
   26d60:	e004      	b.n	26d6c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   26d62:	2314      	movs	r3, #20
   26d64:	18fb      	adds	r3, r7, r3
   26d66:	2280      	movs	r2, #128	; 0x80
   26d68:	0192      	lsls	r2, r2, #6
   26d6a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   26d6c:	2311      	movs	r3, #17
   26d6e:	18fb      	adds	r3, r7, r3
   26d70:	22f0      	movs	r2, #240	; 0xf0
   26d72:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   26d74:	2316      	movs	r3, #22
   26d76:	18fb      	adds	r3, r7, r3
   26d78:	2200      	movs	r2, #0
   26d7a:	5e9b      	ldrsh	r3, [r3, r2]
   26d7c:	2b00      	cmp	r3, #0
   26d7e:	d10f      	bne.n	26da0 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   26d80:	1cbb      	adds	r3, r7, #2
   26d82:	881a      	ldrh	r2, [r3, #0]
   26d84:	2380      	movs	r3, #128	; 0x80
   26d86:	019b      	lsls	r3, r3, #6
   26d88:	429a      	cmp	r2, r3
   26d8a:	d804      	bhi.n	26d96 <spi_data_write+0x72>
				order = 0x3;
   26d8c:	2312      	movs	r3, #18
   26d8e:	18fb      	adds	r3, r7, r3
   26d90:	2203      	movs	r2, #3
   26d92:	701a      	strb	r2, [r3, #0]
   26d94:	e013      	b.n	26dbe <spi_data_write+0x9a>
			else
				order = 0x1;
   26d96:	2312      	movs	r3, #18
   26d98:	18fb      	adds	r3, r7, r3
   26d9a:	2201      	movs	r2, #1
   26d9c:	701a      	strb	r2, [r3, #0]
   26d9e:	e00e      	b.n	26dbe <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   26da0:	1cbb      	adds	r3, r7, #2
   26da2:	881a      	ldrh	r2, [r3, #0]
   26da4:	2380      	movs	r3, #128	; 0x80
   26da6:	019b      	lsls	r3, r3, #6
   26da8:	429a      	cmp	r2, r3
   26daa:	d804      	bhi.n	26db6 <spi_data_write+0x92>
				order = 0x3;
   26dac:	2312      	movs	r3, #18
   26dae:	18fb      	adds	r3, r7, r3
   26db0:	2203      	movs	r2, #3
   26db2:	701a      	strb	r2, [r3, #0]
   26db4:	e003      	b.n	26dbe <spi_data_write+0x9a>
			else
				order = 0x2;
   26db6:	2312      	movs	r3, #18
   26db8:	18fb      	adds	r3, r7, r3
   26dba:	2202      	movs	r2, #2
   26dbc:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   26dbe:	2311      	movs	r3, #17
   26dc0:	18fb      	adds	r3, r7, r3
   26dc2:	781a      	ldrb	r2, [r3, #0]
   26dc4:	2312      	movs	r3, #18
   26dc6:	18fb      	adds	r3, r7, r3
   26dc8:	781b      	ldrb	r3, [r3, #0]
   26dca:	4313      	orrs	r3, r2
   26dcc:	b2da      	uxtb	r2, r3
   26dce:	2311      	movs	r3, #17
   26dd0:	18fb      	adds	r3, r7, r3
   26dd2:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   26dd4:	2311      	movs	r3, #17
   26dd6:	18fb      	adds	r3, r7, r3
   26dd8:	2101      	movs	r1, #1
   26dda:	0018      	movs	r0, r3
   26ddc:	4b3c      	ldr	r3, [pc, #240]	; (26ed0 <spi_data_write+0x1ac>)
   26dde:	4798      	blx	r3
   26de0:	1e03      	subs	r3, r0, #0
   26de2:	d012      	beq.n	26e0a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   26de4:	4a3b      	ldr	r2, [pc, #236]	; (26ed4 <spi_data_write+0x1b0>)
   26de6:	493c      	ldr	r1, [pc, #240]	; (26ed8 <spi_data_write+0x1b4>)
   26de8:	4b3c      	ldr	r3, [pc, #240]	; (26edc <spi_data_write+0x1b8>)
   26dea:	0018      	movs	r0, r3
   26dec:	4b3c      	ldr	r3, [pc, #240]	; (26ee0 <spi_data_write+0x1bc>)
   26dee:	4798      	blx	r3
   26df0:	4b3c      	ldr	r3, [pc, #240]	; (26ee4 <spi_data_write+0x1c0>)
   26df2:	0018      	movs	r0, r3
   26df4:	4b3a      	ldr	r3, [pc, #232]	; (26ee0 <spi_data_write+0x1bc>)
   26df6:	4798      	blx	r3
   26df8:	4b3b      	ldr	r3, [pc, #236]	; (26ee8 <spi_data_write+0x1c4>)
   26dfa:	0018      	movs	r0, r3
   26dfc:	4b38      	ldr	r3, [pc, #224]	; (26ee0 <spi_data_write+0x1bc>)
   26dfe:	4798      	blx	r3
			result = N_FAIL;
   26e00:	2313      	movs	r3, #19
   26e02:	18fb      	adds	r3, r7, r3
   26e04:	2200      	movs	r2, #0
   26e06:	701a      	strb	r2, [r3, #0]
			break;
   26e08:	e059      	b.n	26ebe <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   26e0a:	2316      	movs	r3, #22
   26e0c:	18fb      	adds	r3, r7, r3
   26e0e:	2200      	movs	r2, #0
   26e10:	5e9b      	ldrsh	r3, [r3, r2]
   26e12:	687a      	ldr	r2, [r7, #4]
   26e14:	18d2      	adds	r2, r2, r3
   26e16:	2314      	movs	r3, #20
   26e18:	18fb      	adds	r3, r7, r3
   26e1a:	881b      	ldrh	r3, [r3, #0]
   26e1c:	0019      	movs	r1, r3
   26e1e:	0010      	movs	r0, r2
   26e20:	4b2b      	ldr	r3, [pc, #172]	; (26ed0 <spi_data_write+0x1ac>)
   26e22:	4798      	blx	r3
   26e24:	1e03      	subs	r3, r0, #0
   26e26:	d012      	beq.n	26e4e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   26e28:	4a30      	ldr	r2, [pc, #192]	; (26eec <spi_data_write+0x1c8>)
   26e2a:	492b      	ldr	r1, [pc, #172]	; (26ed8 <spi_data_write+0x1b4>)
   26e2c:	4b2b      	ldr	r3, [pc, #172]	; (26edc <spi_data_write+0x1b8>)
   26e2e:	0018      	movs	r0, r3
   26e30:	4b2b      	ldr	r3, [pc, #172]	; (26ee0 <spi_data_write+0x1bc>)
   26e32:	4798      	blx	r3
   26e34:	4b2e      	ldr	r3, [pc, #184]	; (26ef0 <spi_data_write+0x1cc>)
   26e36:	0018      	movs	r0, r3
   26e38:	4b29      	ldr	r3, [pc, #164]	; (26ee0 <spi_data_write+0x1bc>)
   26e3a:	4798      	blx	r3
   26e3c:	4b2a      	ldr	r3, [pc, #168]	; (26ee8 <spi_data_write+0x1c4>)
   26e3e:	0018      	movs	r0, r3
   26e40:	4b27      	ldr	r3, [pc, #156]	; (26ee0 <spi_data_write+0x1bc>)
   26e42:	4798      	blx	r3
			result = N_FAIL;
   26e44:	2313      	movs	r3, #19
   26e46:	18fb      	adds	r3, r7, r3
   26e48:	2200      	movs	r2, #0
   26e4a:	701a      	strb	r2, [r3, #0]
			break;
   26e4c:	e037      	b.n	26ebe <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   26e4e:	4b29      	ldr	r3, [pc, #164]	; (26ef4 <spi_data_write+0x1d0>)
   26e50:	781b      	ldrb	r3, [r3, #0]
   26e52:	2b00      	cmp	r3, #0
   26e54:	d11b      	bne.n	26e8e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   26e56:	230c      	movs	r3, #12
   26e58:	18fb      	adds	r3, r7, r3
   26e5a:	2102      	movs	r1, #2
   26e5c:	0018      	movs	r0, r3
   26e5e:	4b1c      	ldr	r3, [pc, #112]	; (26ed0 <spi_data_write+0x1ac>)
   26e60:	4798      	blx	r3
   26e62:	1e03      	subs	r3, r0, #0
   26e64:	d013      	beq.n	26e8e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   26e66:	23d7      	movs	r3, #215	; 0xd7
   26e68:	009a      	lsls	r2, r3, #2
   26e6a:	491b      	ldr	r1, [pc, #108]	; (26ed8 <spi_data_write+0x1b4>)
   26e6c:	4b1b      	ldr	r3, [pc, #108]	; (26edc <spi_data_write+0x1b8>)
   26e6e:	0018      	movs	r0, r3
   26e70:	4b1b      	ldr	r3, [pc, #108]	; (26ee0 <spi_data_write+0x1bc>)
   26e72:	4798      	blx	r3
   26e74:	4b20      	ldr	r3, [pc, #128]	; (26ef8 <spi_data_write+0x1d4>)
   26e76:	0018      	movs	r0, r3
   26e78:	4b19      	ldr	r3, [pc, #100]	; (26ee0 <spi_data_write+0x1bc>)
   26e7a:	4798      	blx	r3
   26e7c:	4b1a      	ldr	r3, [pc, #104]	; (26ee8 <spi_data_write+0x1c4>)
   26e7e:	0018      	movs	r0, r3
   26e80:	4b17      	ldr	r3, [pc, #92]	; (26ee0 <spi_data_write+0x1bc>)
   26e82:	4798      	blx	r3
				result = N_FAIL;
   26e84:	2313      	movs	r3, #19
   26e86:	18fb      	adds	r3, r7, r3
   26e88:	2200      	movs	r2, #0
   26e8a:	701a      	strb	r2, [r3, #0]
				break;
   26e8c:	e017      	b.n	26ebe <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   26e8e:	2316      	movs	r3, #22
   26e90:	18fb      	adds	r3, r7, r3
   26e92:	881a      	ldrh	r2, [r3, #0]
   26e94:	2314      	movs	r3, #20
   26e96:	18fb      	adds	r3, r7, r3
   26e98:	881b      	ldrh	r3, [r3, #0]
   26e9a:	18d3      	adds	r3, r2, r3
   26e9c:	b29a      	uxth	r2, r3
   26e9e:	2316      	movs	r3, #22
   26ea0:	18fb      	adds	r3, r7, r3
   26ea2:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   26ea4:	1cbb      	adds	r3, r7, #2
   26ea6:	1cb9      	adds	r1, r7, #2
   26ea8:	2214      	movs	r2, #20
   26eaa:	18ba      	adds	r2, r7, r2
   26eac:	8809      	ldrh	r1, [r1, #0]
   26eae:	8812      	ldrh	r2, [r2, #0]
   26eb0:	1a8a      	subs	r2, r1, r2
   26eb2:	801a      	strh	r2, [r3, #0]
	} while (sz);
   26eb4:	1cbb      	adds	r3, r7, #2
   26eb6:	881b      	ldrh	r3, [r3, #0]
   26eb8:	2b00      	cmp	r3, #0
   26eba:	d000      	beq.n	26ebe <spi_data_write+0x19a>
   26ebc:	e745      	b.n	26d4a <spi_data_write+0x26>


	return result;
   26ebe:	2313      	movs	r3, #19
   26ec0:	18fb      	adds	r3, r7, r3
   26ec2:	781b      	ldrb	r3, [r3, #0]
   26ec4:	b25b      	sxtb	r3, r3
}
   26ec6:	0018      	movs	r0, r3
   26ec8:	46bd      	mov	sp, r7
   26eca:	b006      	add	sp, #24
   26ecc:	bd80      	pop	{r7, pc}
   26ece:	46c0      	nop			; (mov r8, r8)
   26ed0:	00025dad 	.word	0x00025dad
   26ed4:	00000349 	.word	0x00000349
   26ed8:	0003c4c0 	.word	0x0003c4c0
   26edc:	0003be98 	.word	0x0003be98
   26ee0:	00020889 	.word	0x00020889
   26ee4:	0003c160 	.word	0x0003c160
   26ee8:	0003bed8 	.word	0x0003bed8
   26eec:	00000352 	.word	0x00000352
   26ef0:	0003c198 	.word	0x0003c198
   26ef4:	200041dc 	.word	0x200041dc
   26ef8:	0003c1cc 	.word	0x0003c1cc

00026efc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   26efc:	b590      	push	{r4, r7, lr}
   26efe:	b087      	sub	sp, #28
   26f00:	af02      	add	r7, sp, #8
   26f02:	6078      	str	r0, [r7, #4]
   26f04:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   26f06:	230f      	movs	r3, #15
   26f08:	18fb      	adds	r3, r7, r3
   26f0a:	220a      	movs	r2, #10
   26f0c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   26f0e:	230c      	movs	r3, #12
   26f10:	18fb      	adds	r3, r7, r3
   26f12:	2201      	movs	r2, #1
   26f14:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   26f16:	230e      	movs	r3, #14
   26f18:	18fb      	adds	r3, r7, r3
   26f1a:	22c9      	movs	r2, #201	; 0xc9
   26f1c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   26f1e:	230d      	movs	r3, #13
   26f20:	18fb      	adds	r3, r7, r3
   26f22:	2200      	movs	r2, #0
   26f24:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   26f26:	687b      	ldr	r3, [r7, #4]
   26f28:	2b30      	cmp	r3, #48	; 0x30
   26f2a:	d808      	bhi.n	26f3e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   26f2c:	230e      	movs	r3, #14
   26f2e:	18fb      	adds	r3, r7, r3
   26f30:	22c3      	movs	r2, #195	; 0xc3
   26f32:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   26f34:	230d      	movs	r3, #13
   26f36:	18fb      	adds	r3, r7, r3
   26f38:	2201      	movs	r2, #1
   26f3a:	701a      	strb	r2, [r3, #0]
   26f3c:	e007      	b.n	26f4e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   26f3e:	230e      	movs	r3, #14
   26f40:	18fb      	adds	r3, r7, r3
   26f42:	22c9      	movs	r2, #201	; 0xc9
   26f44:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   26f46:	230d      	movs	r3, #13
   26f48:	18fb      	adds	r3, r7, r3
   26f4a:	2200      	movs	r2, #0
   26f4c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   26f4e:	003a      	movs	r2, r7
   26f50:	6879      	ldr	r1, [r7, #4]
   26f52:	230e      	movs	r3, #14
   26f54:	18fb      	adds	r3, r7, r3
   26f56:	7818      	ldrb	r0, [r3, #0]
   26f58:	230d      	movs	r3, #13
   26f5a:	18fb      	adds	r3, r7, r3
   26f5c:	781b      	ldrb	r3, [r3, #0]
   26f5e:	9300      	str	r3, [sp, #0]
   26f60:	2304      	movs	r3, #4
   26f62:	4c2e      	ldr	r4, [pc, #184]	; (2701c <spi_write_reg+0x120>)
   26f64:	47a0      	blx	r4
   26f66:	0002      	movs	r2, r0
   26f68:	230c      	movs	r3, #12
   26f6a:	18fb      	adds	r3, r7, r3
   26f6c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   26f6e:	230c      	movs	r3, #12
   26f70:	18fb      	adds	r3, r7, r3
   26f72:	781b      	ldrb	r3, [r3, #0]
   26f74:	b25b      	sxtb	r3, r3
   26f76:	2b01      	cmp	r3, #1
   26f78:	d010      	beq.n	26f9c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   26f7a:	4a29      	ldr	r2, [pc, #164]	; (27020 <spi_write_reg+0x124>)
   26f7c:	4929      	ldr	r1, [pc, #164]	; (27024 <spi_write_reg+0x128>)
   26f7e:	4b2a      	ldr	r3, [pc, #168]	; (27028 <spi_write_reg+0x12c>)
   26f80:	0018      	movs	r0, r3
   26f82:	4b2a      	ldr	r3, [pc, #168]	; (2702c <spi_write_reg+0x130>)
   26f84:	4798      	blx	r3
   26f86:	687a      	ldr	r2, [r7, #4]
   26f88:	4b29      	ldr	r3, [pc, #164]	; (27030 <spi_write_reg+0x134>)
   26f8a:	0011      	movs	r1, r2
   26f8c:	0018      	movs	r0, r3
   26f8e:	4b27      	ldr	r3, [pc, #156]	; (2702c <spi_write_reg+0x130>)
   26f90:	4798      	blx	r3
   26f92:	4b28      	ldr	r3, [pc, #160]	; (27034 <spi_write_reg+0x138>)
   26f94:	0018      	movs	r0, r3
   26f96:	4b25      	ldr	r3, [pc, #148]	; (2702c <spi_write_reg+0x130>)
   26f98:	4798      	blx	r3
		goto _FAIL_;
   26f9a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   26f9c:	230c      	movs	r3, #12
   26f9e:	18fb      	adds	r3, r7, r3
   26fa0:	781b      	ldrb	r3, [r3, #0]
   26fa2:	b25b      	sxtb	r3, r3
   26fa4:	2b01      	cmp	r3, #1
   26fa6:	d030      	beq.n	2700a <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   26fa8:	2001      	movs	r0, #1
   26faa:	4b23      	ldr	r3, [pc, #140]	; (27038 <spi_write_reg+0x13c>)
   26fac:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26fae:	2300      	movs	r3, #0
   26fb0:	9300      	str	r3, [sp, #0]
   26fb2:	2300      	movs	r3, #0
   26fb4:	2200      	movs	r2, #0
   26fb6:	2100      	movs	r1, #0
   26fb8:	20cf      	movs	r0, #207	; 0xcf
   26fba:	4c20      	ldr	r4, [pc, #128]	; (2703c <spi_write_reg+0x140>)
   26fbc:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26fbe:	20cf      	movs	r0, #207	; 0xcf
   26fc0:	4b1f      	ldr	r3, [pc, #124]	; (27040 <spi_write_reg+0x144>)
   26fc2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   26fc4:	23ea      	movs	r3, #234	; 0xea
   26fc6:	009a      	lsls	r2, r3, #2
   26fc8:	4916      	ldr	r1, [pc, #88]	; (27024 <spi_write_reg+0x128>)
   26fca:	4b17      	ldr	r3, [pc, #92]	; (27028 <spi_write_reg+0x12c>)
   26fcc:	0018      	movs	r0, r3
   26fce:	4b17      	ldr	r3, [pc, #92]	; (2702c <spi_write_reg+0x130>)
   26fd0:	4798      	blx	r3
   26fd2:	230f      	movs	r3, #15
   26fd4:	18fb      	adds	r3, r7, r3
   26fd6:	7819      	ldrb	r1, [r3, #0]
   26fd8:	683b      	ldr	r3, [r7, #0]
   26fda:	687a      	ldr	r2, [r7, #4]
   26fdc:	4819      	ldr	r0, [pc, #100]	; (27044 <spi_write_reg+0x148>)
   26fde:	4c13      	ldr	r4, [pc, #76]	; (2702c <spi_write_reg+0x130>)
   26fe0:	47a0      	blx	r4
   26fe2:	4b14      	ldr	r3, [pc, #80]	; (27034 <spi_write_reg+0x138>)
   26fe4:	0018      	movs	r0, r3
   26fe6:	4b11      	ldr	r3, [pc, #68]	; (2702c <spi_write_reg+0x130>)
   26fe8:	4798      	blx	r3
		nm_bsp_sleep(1);
   26fea:	2001      	movs	r0, #1
   26fec:	4b12      	ldr	r3, [pc, #72]	; (27038 <spi_write_reg+0x13c>)
   26fee:	4798      	blx	r3
		retry--;
   26ff0:	230f      	movs	r3, #15
   26ff2:	18fb      	adds	r3, r7, r3
   26ff4:	781a      	ldrb	r2, [r3, #0]
   26ff6:	230f      	movs	r3, #15
   26ff8:	18fb      	adds	r3, r7, r3
   26ffa:	3a01      	subs	r2, #1
   26ffc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26ffe:	230f      	movs	r3, #15
   27000:	18fb      	adds	r3, r7, r3
   27002:	781b      	ldrb	r3, [r3, #0]
   27004:	2b00      	cmp	r3, #0
   27006:	d000      	beq.n	2700a <spi_write_reg+0x10e>
   27008:	e78d      	b.n	26f26 <spi_write_reg+0x2a>
	}

	return result;
   2700a:	230c      	movs	r3, #12
   2700c:	18fb      	adds	r3, r7, r3
   2700e:	781b      	ldrb	r3, [r3, #0]
   27010:	b25b      	sxtb	r3, r3
}
   27012:	0018      	movs	r0, r3
   27014:	46bd      	mov	sp, r7
   27016:	b005      	add	sp, #20
   27018:	bd90      	pop	{r4, r7, pc}
   2701a:	46c0      	nop			; (mov r8, r8)
   2701c:	00026431 	.word	0x00026431
   27020:	0000039d 	.word	0x0000039d
   27024:	0003c4d0 	.word	0x0003c4d0
   27028:	0003be98 	.word	0x0003be98
   2702c:	00020889 	.word	0x00020889
   27030:	0003c204 	.word	0x0003c204
   27034:	0003bed8 	.word	0x0003bed8
   27038:	00022d71 	.word	0x00022d71
   2703c:	00025eb5 	.word	0x00025eb5
   27040:	000262f5 	.word	0x000262f5
   27044:	0003c230 	.word	0x0003c230

00027048 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   27048:	b590      	push	{r4, r7, lr}
   2704a:	b089      	sub	sp, #36	; 0x24
   2704c:	af02      	add	r7, sp, #8
   2704e:	60f8      	str	r0, [r7, #12]
   27050:	60b9      	str	r1, [r7, #8]
   27052:	1dbb      	adds	r3, r7, #6
   27054:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   27056:	2316      	movs	r3, #22
   27058:	18fb      	adds	r3, r7, r3
   2705a:	220a      	movs	r2, #10
   2705c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2705e:	2315      	movs	r3, #21
   27060:	18fb      	adds	r3, r7, r3
   27062:	22c7      	movs	r2, #199	; 0xc7
   27064:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   27066:	1dbb      	adds	r3, r7, #6
   27068:	881a      	ldrh	r2, [r3, #0]
   2706a:	68f9      	ldr	r1, [r7, #12]
   2706c:	2315      	movs	r3, #21
   2706e:	18fb      	adds	r3, r7, r3
   27070:	7818      	ldrb	r0, [r3, #0]
   27072:	2300      	movs	r3, #0
   27074:	9300      	str	r3, [sp, #0]
   27076:	0013      	movs	r3, r2
   27078:	2200      	movs	r2, #0
   2707a:	4c4d      	ldr	r4, [pc, #308]	; (271b0 <nm_spi_write+0x168>)
   2707c:	47a0      	blx	r4
   2707e:	0002      	movs	r2, r0
   27080:	2317      	movs	r3, #23
   27082:	18fb      	adds	r3, r7, r3
   27084:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   27086:	2317      	movs	r3, #23
   27088:	18fb      	adds	r3, r7, r3
   2708a:	781b      	ldrb	r3, [r3, #0]
   2708c:	b25b      	sxtb	r3, r3
   2708e:	2b01      	cmp	r3, #1
   27090:	d010      	beq.n	270b4 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   27092:	4a48      	ldr	r2, [pc, #288]	; (271b4 <nm_spi_write+0x16c>)
   27094:	4948      	ldr	r1, [pc, #288]	; (271b8 <nm_spi_write+0x170>)
   27096:	4b49      	ldr	r3, [pc, #292]	; (271bc <nm_spi_write+0x174>)
   27098:	0018      	movs	r0, r3
   2709a:	4b49      	ldr	r3, [pc, #292]	; (271c0 <nm_spi_write+0x178>)
   2709c:	4798      	blx	r3
   2709e:	68fa      	ldr	r2, [r7, #12]
   270a0:	4b48      	ldr	r3, [pc, #288]	; (271c4 <nm_spi_write+0x17c>)
   270a2:	0011      	movs	r1, r2
   270a4:	0018      	movs	r0, r3
   270a6:	4b46      	ldr	r3, [pc, #280]	; (271c0 <nm_spi_write+0x178>)
   270a8:	4798      	blx	r3
   270aa:	4b47      	ldr	r3, [pc, #284]	; (271c8 <nm_spi_write+0x180>)
   270ac:	0018      	movs	r0, r3
   270ae:	4b44      	ldr	r3, [pc, #272]	; (271c0 <nm_spi_write+0x178>)
   270b0:	4798      	blx	r3
		goto _FAIL_;
   270b2:	e03e      	b.n	27132 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   270b4:	2317      	movs	r3, #23
   270b6:	18fc      	adds	r4, r7, r3
   270b8:	1dbb      	adds	r3, r7, #6
   270ba:	881a      	ldrh	r2, [r3, #0]
   270bc:	68bb      	ldr	r3, [r7, #8]
   270be:	0011      	movs	r1, r2
   270c0:	0018      	movs	r0, r3
   270c2:	4b42      	ldr	r3, [pc, #264]	; (271cc <nm_spi_write+0x184>)
   270c4:	4798      	blx	r3
   270c6:	0003      	movs	r3, r0
   270c8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   270ca:	2317      	movs	r3, #23
   270cc:	18fb      	adds	r3, r7, r3
   270ce:	781b      	ldrb	r3, [r3, #0]
   270d0:	b25b      	sxtb	r3, r3
   270d2:	2b01      	cmp	r3, #1
   270d4:	d00e      	beq.n	270f4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   270d6:	4a3e      	ldr	r2, [pc, #248]	; (271d0 <nm_spi_write+0x188>)
   270d8:	4937      	ldr	r1, [pc, #220]	; (271b8 <nm_spi_write+0x170>)
   270da:	4b38      	ldr	r3, [pc, #224]	; (271bc <nm_spi_write+0x174>)
   270dc:	0018      	movs	r0, r3
   270de:	4b38      	ldr	r3, [pc, #224]	; (271c0 <nm_spi_write+0x178>)
   270e0:	4798      	blx	r3
   270e2:	4b3c      	ldr	r3, [pc, #240]	; (271d4 <nm_spi_write+0x18c>)
   270e4:	0018      	movs	r0, r3
   270e6:	4b36      	ldr	r3, [pc, #216]	; (271c0 <nm_spi_write+0x178>)
   270e8:	4798      	blx	r3
   270ea:	4b37      	ldr	r3, [pc, #220]	; (271c8 <nm_spi_write+0x180>)
   270ec:	0018      	movs	r0, r3
   270ee:	4b34      	ldr	r3, [pc, #208]	; (271c0 <nm_spi_write+0x178>)
   270f0:	4798      	blx	r3
		goto _FAIL_;
   270f2:	e01e      	b.n	27132 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   270f4:	2317      	movs	r3, #23
   270f6:	18fc      	adds	r4, r7, r3
   270f8:	2315      	movs	r3, #21
   270fa:	18fb      	adds	r3, r7, r3
   270fc:	781b      	ldrb	r3, [r3, #0]
   270fe:	0018      	movs	r0, r3
   27100:	4b35      	ldr	r3, [pc, #212]	; (271d8 <nm_spi_write+0x190>)
   27102:	4798      	blx	r3
   27104:	0003      	movs	r3, r0
   27106:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   27108:	2317      	movs	r3, #23
   2710a:	18fb      	adds	r3, r7, r3
   2710c:	781b      	ldrb	r3, [r3, #0]
   2710e:	b25b      	sxtb	r3, r3
   27110:	2b01      	cmp	r3, #1
   27112:	d00e      	beq.n	27132 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   27114:	4a31      	ldr	r2, [pc, #196]	; (271dc <nm_spi_write+0x194>)
   27116:	4928      	ldr	r1, [pc, #160]	; (271b8 <nm_spi_write+0x170>)
   27118:	4b28      	ldr	r3, [pc, #160]	; (271bc <nm_spi_write+0x174>)
   2711a:	0018      	movs	r0, r3
   2711c:	4b28      	ldr	r3, [pc, #160]	; (271c0 <nm_spi_write+0x178>)
   2711e:	4798      	blx	r3
   27120:	4b2c      	ldr	r3, [pc, #176]	; (271d4 <nm_spi_write+0x18c>)
   27122:	0018      	movs	r0, r3
   27124:	4b26      	ldr	r3, [pc, #152]	; (271c0 <nm_spi_write+0x178>)
   27126:	4798      	blx	r3
   27128:	4b27      	ldr	r3, [pc, #156]	; (271c8 <nm_spi_write+0x180>)
   2712a:	0018      	movs	r0, r3
   2712c:	4b24      	ldr	r3, [pc, #144]	; (271c0 <nm_spi_write+0x178>)
   2712e:	4798      	blx	r3
		goto _FAIL_;
   27130:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   27132:	2317      	movs	r3, #23
   27134:	18fb      	adds	r3, r7, r3
   27136:	781b      	ldrb	r3, [r3, #0]
   27138:	b25b      	sxtb	r3, r3
   2713a:	2b01      	cmp	r3, #1
   2713c:	d030      	beq.n	271a0 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2713e:	2001      	movs	r0, #1
   27140:	4b27      	ldr	r3, [pc, #156]	; (271e0 <nm_spi_write+0x198>)
   27142:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   27144:	2300      	movs	r3, #0
   27146:	9300      	str	r3, [sp, #0]
   27148:	2300      	movs	r3, #0
   2714a:	2200      	movs	r2, #0
   2714c:	2100      	movs	r1, #0
   2714e:	20cf      	movs	r0, #207	; 0xcf
   27150:	4c24      	ldr	r4, [pc, #144]	; (271e4 <nm_spi_write+0x19c>)
   27152:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   27154:	20cf      	movs	r0, #207	; 0xcf
   27156:	4b24      	ldr	r3, [pc, #144]	; (271e8 <nm_spi_write+0x1a0>)
   27158:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2715a:	4a24      	ldr	r2, [pc, #144]	; (271ec <nm_spi_write+0x1a4>)
   2715c:	4916      	ldr	r1, [pc, #88]	; (271b8 <nm_spi_write+0x170>)
   2715e:	4b17      	ldr	r3, [pc, #92]	; (271bc <nm_spi_write+0x174>)
   27160:	0018      	movs	r0, r3
   27162:	4b17      	ldr	r3, [pc, #92]	; (271c0 <nm_spi_write+0x178>)
   27164:	4798      	blx	r3
   27166:	2316      	movs	r3, #22
   27168:	18fb      	adds	r3, r7, r3
   2716a:	7819      	ldrb	r1, [r3, #0]
   2716c:	1dbb      	adds	r3, r7, #6
   2716e:	881b      	ldrh	r3, [r3, #0]
   27170:	68fa      	ldr	r2, [r7, #12]
   27172:	481f      	ldr	r0, [pc, #124]	; (271f0 <nm_spi_write+0x1a8>)
   27174:	4c12      	ldr	r4, [pc, #72]	; (271c0 <nm_spi_write+0x178>)
   27176:	47a0      	blx	r4
   27178:	4b13      	ldr	r3, [pc, #76]	; (271c8 <nm_spi_write+0x180>)
   2717a:	0018      	movs	r0, r3
   2717c:	4b10      	ldr	r3, [pc, #64]	; (271c0 <nm_spi_write+0x178>)
   2717e:	4798      	blx	r3
		nm_bsp_sleep(1);
   27180:	2001      	movs	r0, #1
   27182:	4b17      	ldr	r3, [pc, #92]	; (271e0 <nm_spi_write+0x198>)
   27184:	4798      	blx	r3
		retry--;
   27186:	2316      	movs	r3, #22
   27188:	18fb      	adds	r3, r7, r3
   2718a:	781a      	ldrb	r2, [r3, #0]
   2718c:	2316      	movs	r3, #22
   2718e:	18fb      	adds	r3, r7, r3
   27190:	3a01      	subs	r2, #1
   27192:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   27194:	2316      	movs	r3, #22
   27196:	18fb      	adds	r3, r7, r3
   27198:	781b      	ldrb	r3, [r3, #0]
   2719a:	2b00      	cmp	r3, #0
   2719c:	d000      	beq.n	271a0 <nm_spi_write+0x158>
   2719e:	e762      	b.n	27066 <nm_spi_write+0x1e>
	}


	return result;
   271a0:	2317      	movs	r3, #23
   271a2:	18fb      	adds	r3, r7, r3
   271a4:	781b      	ldrb	r3, [r3, #0]
   271a6:	b25b      	sxtb	r3, r3
}
   271a8:	0018      	movs	r0, r3
   271aa:	46bd      	mov	sp, r7
   271ac:	b007      	add	sp, #28
   271ae:	bd90      	pop	{r4, r7, pc}
   271b0:	00026431 	.word	0x00026431
   271b4:	000003cf 	.word	0x000003cf
   271b8:	0003c4e0 	.word	0x0003c4e0
   271bc:	0003be98 	.word	0x0003be98
   271c0:	00020889 	.word	0x00020889
   271c4:	0003c24c 	.word	0x0003c24c
   271c8:	0003bed8 	.word	0x0003bed8
   271cc:	00026d25 	.word	0x00026d25
   271d0:	000003d9 	.word	0x000003d9
   271d4:	0003c27c 	.word	0x0003c27c
   271d8:	000261f5 	.word	0x000261f5
   271dc:	000003e1 	.word	0x000003e1
   271e0:	00022d71 	.word	0x00022d71
   271e4:	00025eb5 	.word	0x00025eb5
   271e8:	000262f5 	.word	0x000262f5
   271ec:	000003eb 	.word	0x000003eb
   271f0:	0003c2a4 	.word	0x0003c2a4

000271f4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   271f4:	b590      	push	{r4, r7, lr}
   271f6:	b087      	sub	sp, #28
   271f8:	af02      	add	r7, sp, #8
   271fa:	6078      	str	r0, [r7, #4]
   271fc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   271fe:	230f      	movs	r3, #15
   27200:	18fb      	adds	r3, r7, r3
   27202:	220a      	movs	r2, #10
   27204:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   27206:	230c      	movs	r3, #12
   27208:	18fb      	adds	r3, r7, r3
   2720a:	2201      	movs	r2, #1
   2720c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   2720e:	230e      	movs	r3, #14
   27210:	18fb      	adds	r3, r7, r3
   27212:	22ca      	movs	r2, #202	; 0xca
   27214:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   27216:	230d      	movs	r3, #13
   27218:	18fb      	adds	r3, r7, r3
   2721a:	2200      	movs	r2, #0
   2721c:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   2721e:	687b      	ldr	r3, [r7, #4]
   27220:	2bff      	cmp	r3, #255	; 0xff
   27222:	d808      	bhi.n	27236 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   27224:	230e      	movs	r3, #14
   27226:	18fb      	adds	r3, r7, r3
   27228:	22c4      	movs	r2, #196	; 0xc4
   2722a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   2722c:	230d      	movs	r3, #13
   2722e:	18fb      	adds	r3, r7, r3
   27230:	2201      	movs	r2, #1
   27232:	701a      	strb	r2, [r3, #0]
   27234:	e007      	b.n	27246 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   27236:	230e      	movs	r3, #14
   27238:	18fb      	adds	r3, r7, r3
   2723a:	22ca      	movs	r2, #202	; 0xca
   2723c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2723e:	230d      	movs	r3, #13
   27240:	18fb      	adds	r3, r7, r3
   27242:	2200      	movs	r2, #0
   27244:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   27246:	2308      	movs	r3, #8
   27248:	18fa      	adds	r2, r7, r3
   2724a:	6879      	ldr	r1, [r7, #4]
   2724c:	230e      	movs	r3, #14
   2724e:	18fb      	adds	r3, r7, r3
   27250:	7818      	ldrb	r0, [r3, #0]
   27252:	230d      	movs	r3, #13
   27254:	18fb      	adds	r3, r7, r3
   27256:	781b      	ldrb	r3, [r3, #0]
   27258:	9300      	str	r3, [sp, #0]
   2725a:	2304      	movs	r3, #4
   2725c:	4c37      	ldr	r4, [pc, #220]	; (2733c <spi_read_reg+0x148>)
   2725e:	47a0      	blx	r4
   27260:	0002      	movs	r2, r0
   27262:	230c      	movs	r3, #12
   27264:	18fb      	adds	r3, r7, r3
   27266:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   27268:	230c      	movs	r3, #12
   2726a:	18fb      	adds	r3, r7, r3
   2726c:	781b      	ldrb	r3, [r3, #0]
   2726e:	b25b      	sxtb	r3, r3
   27270:	2b01      	cmp	r3, #1
   27272:	d010      	beq.n	27296 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   27274:	4a32      	ldr	r2, [pc, #200]	; (27340 <spi_read_reg+0x14c>)
   27276:	4933      	ldr	r1, [pc, #204]	; (27344 <spi_read_reg+0x150>)
   27278:	4b33      	ldr	r3, [pc, #204]	; (27348 <spi_read_reg+0x154>)
   2727a:	0018      	movs	r0, r3
   2727c:	4b33      	ldr	r3, [pc, #204]	; (2734c <spi_read_reg+0x158>)
   2727e:	4798      	blx	r3
   27280:	687a      	ldr	r2, [r7, #4]
   27282:	4b33      	ldr	r3, [pc, #204]	; (27350 <spi_read_reg+0x15c>)
   27284:	0011      	movs	r1, r2
   27286:	0018      	movs	r0, r3
   27288:	4b30      	ldr	r3, [pc, #192]	; (2734c <spi_read_reg+0x158>)
   2728a:	4798      	blx	r3
   2728c:	4b31      	ldr	r3, [pc, #196]	; (27354 <spi_read_reg+0x160>)
   2728e:	0018      	movs	r0, r3
   27290:	4b2e      	ldr	r3, [pc, #184]	; (2734c <spi_read_reg+0x158>)
   27292:	4798      	blx	r3
		goto _FAIL_;
   27294:	e014      	b.n	272c0 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   27296:	2308      	movs	r3, #8
   27298:	18fb      	adds	r3, r7, r3
   2729a:	781b      	ldrb	r3, [r3, #0]
   2729c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2729e:	2308      	movs	r3, #8
   272a0:	18fb      	adds	r3, r7, r3
   272a2:	785b      	ldrb	r3, [r3, #1]
   272a4:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   272a6:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   272a8:	2308      	movs	r3, #8
   272aa:	18fb      	adds	r3, r7, r3
   272ac:	789b      	ldrb	r3, [r3, #2]
   272ae:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   272b0:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   272b2:	2308      	movs	r3, #8
   272b4:	18fb      	adds	r3, r7, r3
   272b6:	78db      	ldrb	r3, [r3, #3]
   272b8:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   272ba:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   272bc:	683b      	ldr	r3, [r7, #0]
   272be:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   272c0:	230c      	movs	r3, #12
   272c2:	18fb      	adds	r3, r7, r3
   272c4:	781b      	ldrb	r3, [r3, #0]
   272c6:	b25b      	sxtb	r3, r3
   272c8:	2b01      	cmp	r3, #1
   272ca:	d02f      	beq.n	2732c <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   272cc:	2001      	movs	r0, #1
   272ce:	4b22      	ldr	r3, [pc, #136]	; (27358 <spi_read_reg+0x164>)
   272d0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   272d2:	2300      	movs	r3, #0
   272d4:	9300      	str	r3, [sp, #0]
   272d6:	2300      	movs	r3, #0
   272d8:	2200      	movs	r2, #0
   272da:	2100      	movs	r1, #0
   272dc:	20cf      	movs	r0, #207	; 0xcf
   272de:	4c1f      	ldr	r4, [pc, #124]	; (2735c <spi_read_reg+0x168>)
   272e0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   272e2:	20cf      	movs	r0, #207	; 0xcf
   272e4:	4b1e      	ldr	r3, [pc, #120]	; (27360 <spi_read_reg+0x16c>)
   272e6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   272e8:	4a1e      	ldr	r2, [pc, #120]	; (27364 <spi_read_reg+0x170>)
   272ea:	4916      	ldr	r1, [pc, #88]	; (27344 <spi_read_reg+0x150>)
   272ec:	4b16      	ldr	r3, [pc, #88]	; (27348 <spi_read_reg+0x154>)
   272ee:	0018      	movs	r0, r3
   272f0:	4b16      	ldr	r3, [pc, #88]	; (2734c <spi_read_reg+0x158>)
   272f2:	4798      	blx	r3
   272f4:	230f      	movs	r3, #15
   272f6:	18fb      	adds	r3, r7, r3
   272f8:	7819      	ldrb	r1, [r3, #0]
   272fa:	687a      	ldr	r2, [r7, #4]
   272fc:	4b1a      	ldr	r3, [pc, #104]	; (27368 <spi_read_reg+0x174>)
   272fe:	0018      	movs	r0, r3
   27300:	4b12      	ldr	r3, [pc, #72]	; (2734c <spi_read_reg+0x158>)
   27302:	4798      	blx	r3
   27304:	4b13      	ldr	r3, [pc, #76]	; (27354 <spi_read_reg+0x160>)
   27306:	0018      	movs	r0, r3
   27308:	4b10      	ldr	r3, [pc, #64]	; (2734c <spi_read_reg+0x158>)
   2730a:	4798      	blx	r3
		nm_bsp_sleep(1);
   2730c:	2001      	movs	r0, #1
   2730e:	4b12      	ldr	r3, [pc, #72]	; (27358 <spi_read_reg+0x164>)
   27310:	4798      	blx	r3
		retry--;
   27312:	230f      	movs	r3, #15
   27314:	18fb      	adds	r3, r7, r3
   27316:	781a      	ldrb	r2, [r3, #0]
   27318:	230f      	movs	r3, #15
   2731a:	18fb      	adds	r3, r7, r3
   2731c:	3a01      	subs	r2, #1
   2731e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   27320:	230f      	movs	r3, #15
   27322:	18fb      	adds	r3, r7, r3
   27324:	781b      	ldrb	r3, [r3, #0]
   27326:	2b00      	cmp	r3, #0
   27328:	d000      	beq.n	2732c <spi_read_reg+0x138>
   2732a:	e778      	b.n	2721e <spi_read_reg+0x2a>
	}
		
	return result;
   2732c:	230c      	movs	r3, #12
   2732e:	18fb      	adds	r3, r7, r3
   27330:	781b      	ldrb	r3, [r3, #0]
   27332:	b25b      	sxtb	r3, r3
}
   27334:	0018      	movs	r0, r3
   27336:	46bd      	mov	sp, r7
   27338:	b005      	add	sp, #20
   2733a:	bd90      	pop	{r4, r7, pc}
   2733c:	00026431 	.word	0x00026431
   27340:	00000423 	.word	0x00000423
   27344:	0003c4f0 	.word	0x0003c4f0
   27348:	0003be98 	.word	0x0003be98
   2734c:	00020889 	.word	0x00020889
   27350:	0003c2c0 	.word	0x0003c2c0
   27354:	0003bed8 	.word	0x0003bed8
   27358:	00022d71 	.word	0x00022d71
   2735c:	00025eb5 	.word	0x00025eb5
   27360:	000262f5 	.word	0x000262f5
   27364:	00000435 	.word	0x00000435
   27368:	0003c2ec 	.word	0x0003c2ec

0002736c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2736c:	b590      	push	{r4, r7, lr}
   2736e:	b089      	sub	sp, #36	; 0x24
   27370:	af02      	add	r7, sp, #8
   27372:	60f8      	str	r0, [r7, #12]
   27374:	60b9      	str	r1, [r7, #8]
   27376:	1dbb      	adds	r3, r7, #6
   27378:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2737a:	2316      	movs	r3, #22
   2737c:	18fb      	adds	r3, r7, r3
   2737e:	22c8      	movs	r2, #200	; 0xc8
   27380:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   27382:	2317      	movs	r3, #23
   27384:	18fb      	adds	r3, r7, r3
   27386:	220a      	movs	r2, #10
   27388:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2738a:	1dbb      	adds	r3, r7, #6
   2738c:	881c      	ldrh	r4, [r3, #0]
   2738e:	68ba      	ldr	r2, [r7, #8]
   27390:	68f9      	ldr	r1, [r7, #12]
   27392:	2316      	movs	r3, #22
   27394:	18fb      	adds	r3, r7, r3
   27396:	7818      	ldrb	r0, [r3, #0]
   27398:	2300      	movs	r3, #0
   2739a:	9300      	str	r3, [sp, #0]
   2739c:	0023      	movs	r3, r4
   2739e:	4c2e      	ldr	r4, [pc, #184]	; (27458 <nm_spi_read+0xec>)
   273a0:	47a0      	blx	r4
   273a2:	0002      	movs	r2, r0
   273a4:	2315      	movs	r3, #21
   273a6:	18fb      	adds	r3, r7, r3
   273a8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   273aa:	2315      	movs	r3, #21
   273ac:	18fb      	adds	r3, r7, r3
   273ae:	781b      	ldrb	r3, [r3, #0]
   273b0:	b25b      	sxtb	r3, r3
   273b2:	2b01      	cmp	r3, #1
   273b4:	d010      	beq.n	273d8 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   273b6:	4a29      	ldr	r2, [pc, #164]	; (2745c <nm_spi_read+0xf0>)
   273b8:	4929      	ldr	r1, [pc, #164]	; (27460 <nm_spi_read+0xf4>)
   273ba:	4b2a      	ldr	r3, [pc, #168]	; (27464 <nm_spi_read+0xf8>)
   273bc:	0018      	movs	r0, r3
   273be:	4b2a      	ldr	r3, [pc, #168]	; (27468 <nm_spi_read+0xfc>)
   273c0:	4798      	blx	r3
   273c2:	68fa      	ldr	r2, [r7, #12]
   273c4:	4b29      	ldr	r3, [pc, #164]	; (2746c <nm_spi_read+0x100>)
   273c6:	0011      	movs	r1, r2
   273c8:	0018      	movs	r0, r3
   273ca:	4b27      	ldr	r3, [pc, #156]	; (27468 <nm_spi_read+0xfc>)
   273cc:	4798      	blx	r3
   273ce:	4b28      	ldr	r3, [pc, #160]	; (27470 <nm_spi_read+0x104>)
   273d0:	0018      	movs	r0, r3
   273d2:	4b25      	ldr	r3, [pc, #148]	; (27468 <nm_spi_read+0xfc>)
   273d4:	4798      	blx	r3
		goto _FAIL_;
   273d6:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   273d8:	2315      	movs	r3, #21
   273da:	18fb      	adds	r3, r7, r3
   273dc:	781b      	ldrb	r3, [r3, #0]
   273de:	b25b      	sxtb	r3, r3
   273e0:	2b01      	cmp	r3, #1
   273e2:	d030      	beq.n	27446 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   273e4:	2001      	movs	r0, #1
   273e6:	4b23      	ldr	r3, [pc, #140]	; (27474 <nm_spi_read+0x108>)
   273e8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   273ea:	2300      	movs	r3, #0
   273ec:	9300      	str	r3, [sp, #0]
   273ee:	2300      	movs	r3, #0
   273f0:	2200      	movs	r2, #0
   273f2:	2100      	movs	r1, #0
   273f4:	20cf      	movs	r0, #207	; 0xcf
   273f6:	4c20      	ldr	r4, [pc, #128]	; (27478 <nm_spi_read+0x10c>)
   273f8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   273fa:	20cf      	movs	r0, #207	; 0xcf
   273fc:	4b1f      	ldr	r3, [pc, #124]	; (2747c <nm_spi_read+0x110>)
   273fe:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   27400:	4a1f      	ldr	r2, [pc, #124]	; (27480 <nm_spi_read+0x114>)
   27402:	4917      	ldr	r1, [pc, #92]	; (27460 <nm_spi_read+0xf4>)
   27404:	4b17      	ldr	r3, [pc, #92]	; (27464 <nm_spi_read+0xf8>)
   27406:	0018      	movs	r0, r3
   27408:	4b17      	ldr	r3, [pc, #92]	; (27468 <nm_spi_read+0xfc>)
   2740a:	4798      	blx	r3
   2740c:	2317      	movs	r3, #23
   2740e:	18fb      	adds	r3, r7, r3
   27410:	7819      	ldrb	r1, [r3, #0]
   27412:	1dbb      	adds	r3, r7, #6
   27414:	881b      	ldrh	r3, [r3, #0]
   27416:	68fa      	ldr	r2, [r7, #12]
   27418:	481a      	ldr	r0, [pc, #104]	; (27484 <nm_spi_read+0x118>)
   2741a:	4c13      	ldr	r4, [pc, #76]	; (27468 <nm_spi_read+0xfc>)
   2741c:	47a0      	blx	r4
   2741e:	4b14      	ldr	r3, [pc, #80]	; (27470 <nm_spi_read+0x104>)
   27420:	0018      	movs	r0, r3
   27422:	4b11      	ldr	r3, [pc, #68]	; (27468 <nm_spi_read+0xfc>)
   27424:	4798      	blx	r3
		nm_bsp_sleep(1);
   27426:	2001      	movs	r0, #1
   27428:	4b12      	ldr	r3, [pc, #72]	; (27474 <nm_spi_read+0x108>)
   2742a:	4798      	blx	r3
		retry--;
   2742c:	2317      	movs	r3, #23
   2742e:	18fb      	adds	r3, r7, r3
   27430:	781a      	ldrb	r2, [r3, #0]
   27432:	2317      	movs	r3, #23
   27434:	18fb      	adds	r3, r7, r3
   27436:	3a01      	subs	r2, #1
   27438:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2743a:	2317      	movs	r3, #23
   2743c:	18fb      	adds	r3, r7, r3
   2743e:	781b      	ldrb	r3, [r3, #0]
   27440:	2b00      	cmp	r3, #0
   27442:	d000      	beq.n	27446 <nm_spi_read+0xda>
   27444:	e7a1      	b.n	2738a <nm_spi_read+0x1e>
	}

	return result;
   27446:	2315      	movs	r3, #21
   27448:	18fb      	adds	r3, r7, r3
   2744a:	781b      	ldrb	r3, [r3, #0]
   2744c:	b25b      	sxtb	r3, r3
}
   2744e:	0018      	movs	r0, r3
   27450:	46bd      	mov	sp, r7
   27452:	b007      	add	sp, #28
   27454:	bd90      	pop	{r4, r7, pc}
   27456:	46c0      	nop			; (mov r8, r8)
   27458:	00026431 	.word	0x00026431
   2745c:	00000472 	.word	0x00000472
   27460:	0003c500 	.word	0x0003c500
   27464:	0003be98 	.word	0x0003be98
   27468:	00020889 	.word	0x00020889
   2746c:	0003c304 	.word	0x0003c304
   27470:	0003bed8 	.word	0x0003bed8
   27474:	00022d71 	.word	0x00022d71
   27478:	00025eb5 	.word	0x00025eb5
   2747c:	000262f5 	.word	0x000262f5
   27480:	0000047d 	.word	0x0000047d
   27484:	0003c2a4 	.word	0x0003c2a4

00027488 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   27488:	b580      	push	{r7, lr}
   2748a:	b082      	sub	sp, #8
   2748c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2748e:	4b0c      	ldr	r3, [pc, #48]	; (274c0 <spi_init_pkt_sz+0x38>)
   27490:	0018      	movs	r0, r3
   27492:	4b0c      	ldr	r3, [pc, #48]	; (274c4 <spi_init_pkt_sz+0x3c>)
   27494:	4798      	blx	r3
   27496:	0003      	movs	r3, r0
   27498:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2749a:	687b      	ldr	r3, [r7, #4]
   2749c:	2270      	movs	r2, #112	; 0x70
   2749e:	4393      	bics	r3, r2
   274a0:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   274a2:	687b      	ldr	r3, [r7, #4]
   274a4:	2250      	movs	r2, #80	; 0x50
   274a6:	4313      	orrs	r3, r2
   274a8:	607b      	str	r3, [r7, #4]
   274aa:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   274ac:	687b      	ldr	r3, [r7, #4]
   274ae:	4a04      	ldr	r2, [pc, #16]	; (274c0 <spi_init_pkt_sz+0x38>)
   274b0:	0019      	movs	r1, r3
   274b2:	0010      	movs	r0, r2
   274b4:	4b04      	ldr	r3, [pc, #16]	; (274c8 <spi_init_pkt_sz+0x40>)
   274b6:	4798      	blx	r3
}
   274b8:	46c0      	nop			; (mov r8, r8)
   274ba:	46bd      	mov	sp, r7
   274bc:	b002      	add	sp, #8
   274be:	bd80      	pop	{r7, pc}
   274c0:	0000e824 	.word	0x0000e824
   274c4:	00027661 	.word	0x00027661
   274c8:	000276d5 	.word	0x000276d5

000274cc <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   274cc:	b590      	push	{r4, r7, lr}
   274ce:	b083      	sub	sp, #12
   274d0:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   274d2:	2300      	movs	r3, #0
   274d4:	9300      	str	r3, [sp, #0]
   274d6:	2300      	movs	r3, #0
   274d8:	2200      	movs	r2, #0
   274da:	2100      	movs	r1, #0
   274dc:	20cf      	movs	r0, #207	; 0xcf
   274de:	4c05      	ldr	r4, [pc, #20]	; (274f4 <nm_spi_reset+0x28>)
   274e0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   274e2:	20cf      	movs	r0, #207	; 0xcf
   274e4:	4b04      	ldr	r3, [pc, #16]	; (274f8 <nm_spi_reset+0x2c>)
   274e6:	4798      	blx	r3
	return M2M_SUCCESS;
   274e8:	2300      	movs	r3, #0
}
   274ea:	0018      	movs	r0, r3
   274ec:	46bd      	mov	sp, r7
   274ee:	b001      	add	sp, #4
   274f0:	bd90      	pop	{r4, r7, pc}
   274f2:	46c0      	nop			; (mov r8, r8)
   274f4:	00025eb5 	.word	0x00025eb5
   274f8:	000262f5 	.word	0x000262f5

000274fc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   274fc:	b580      	push	{r7, lr}
   274fe:	b082      	sub	sp, #8
   27500:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   27502:	2300      	movs	r3, #0
   27504:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   27506:	4b40      	ldr	r3, [pc, #256]	; (27608 <nm_spi_init+0x10c>)
   27508:	2200      	movs	r2, #0
   2750a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   2750c:	003b      	movs	r3, r7
   2750e:	4a3f      	ldr	r2, [pc, #252]	; (2760c <nm_spi_init+0x110>)
   27510:	0019      	movs	r1, r3
   27512:	0010      	movs	r0, r2
   27514:	4b3e      	ldr	r3, [pc, #248]	; (27610 <nm_spi_init+0x114>)
   27516:	4798      	blx	r3
   27518:	1e03      	subs	r3, r0, #0
   2751a:	d129      	bne.n	27570 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   2751c:	4b3a      	ldr	r3, [pc, #232]	; (27608 <nm_spi_init+0x10c>)
   2751e:	2201      	movs	r2, #1
   27520:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   27522:	2398      	movs	r3, #152	; 0x98
   27524:	00da      	lsls	r2, r3, #3
   27526:	493b      	ldr	r1, [pc, #236]	; (27614 <nm_spi_init+0x118>)
   27528:	4b3b      	ldr	r3, [pc, #236]	; (27618 <nm_spi_init+0x11c>)
   2752a:	0018      	movs	r0, r3
   2752c:	4b3b      	ldr	r3, [pc, #236]	; (2761c <nm_spi_init+0x120>)
   2752e:	4798      	blx	r3
   27530:	4b3b      	ldr	r3, [pc, #236]	; (27620 <nm_spi_init+0x124>)
   27532:	0018      	movs	r0, r3
   27534:	4b39      	ldr	r3, [pc, #228]	; (2761c <nm_spi_init+0x120>)
   27536:	4798      	blx	r3
   27538:	4b3a      	ldr	r3, [pc, #232]	; (27624 <nm_spi_init+0x128>)
   2753a:	0018      	movs	r0, r3
   2753c:	4b37      	ldr	r3, [pc, #220]	; (2761c <nm_spi_init+0x120>)
   2753e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   27540:	003b      	movs	r3, r7
   27542:	4a32      	ldr	r2, [pc, #200]	; (2760c <nm_spi_init+0x110>)
   27544:	0019      	movs	r1, r3
   27546:	0010      	movs	r0, r2
   27548:	4b31      	ldr	r3, [pc, #196]	; (27610 <nm_spi_init+0x114>)
   2754a:	4798      	blx	r3
   2754c:	1e03      	subs	r3, r0, #0
   2754e:	d10f      	bne.n	27570 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   27550:	4a35      	ldr	r2, [pc, #212]	; (27628 <nm_spi_init+0x12c>)
   27552:	4930      	ldr	r1, [pc, #192]	; (27614 <nm_spi_init+0x118>)
   27554:	4b30      	ldr	r3, [pc, #192]	; (27618 <nm_spi_init+0x11c>)
   27556:	0018      	movs	r0, r3
   27558:	4b30      	ldr	r3, [pc, #192]	; (2761c <nm_spi_init+0x120>)
   2755a:	4798      	blx	r3
   2755c:	4b33      	ldr	r3, [pc, #204]	; (2762c <nm_spi_init+0x130>)
   2755e:	0018      	movs	r0, r3
   27560:	4b2e      	ldr	r3, [pc, #184]	; (2761c <nm_spi_init+0x120>)
   27562:	4798      	blx	r3
   27564:	4b2f      	ldr	r3, [pc, #188]	; (27624 <nm_spi_init+0x128>)
   27566:	0018      	movs	r0, r3
   27568:	4b2c      	ldr	r3, [pc, #176]	; (2761c <nm_spi_init+0x120>)
   2756a:	4798      	blx	r3
			return 0;
   2756c:	2300      	movs	r3, #0
   2756e:	e047      	b.n	27600 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   27570:	4b25      	ldr	r3, [pc, #148]	; (27608 <nm_spi_init+0x10c>)
   27572:	781b      	ldrb	r3, [r3, #0]
   27574:	2b00      	cmp	r3, #0
   27576:	d126      	bne.n	275c6 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   27578:	683b      	ldr	r3, [r7, #0]
   2757a:	220c      	movs	r2, #12
   2757c:	4393      	bics	r3, r2
   2757e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   27580:	683b      	ldr	r3, [r7, #0]
   27582:	2270      	movs	r2, #112	; 0x70
   27584:	4393      	bics	r3, r2
   27586:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   27588:	683b      	ldr	r3, [r7, #0]
   2758a:	2250      	movs	r2, #80	; 0x50
   2758c:	4313      	orrs	r3, r2
   2758e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   27590:	683b      	ldr	r3, [r7, #0]
   27592:	4a1e      	ldr	r2, [pc, #120]	; (2760c <nm_spi_init+0x110>)
   27594:	0019      	movs	r1, r3
   27596:	0010      	movs	r0, r2
   27598:	4b25      	ldr	r3, [pc, #148]	; (27630 <nm_spi_init+0x134>)
   2759a:	4798      	blx	r3
   2759c:	1e03      	subs	r3, r0, #0
   2759e:	d10f      	bne.n	275c0 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   275a0:	4a24      	ldr	r2, [pc, #144]	; (27634 <nm_spi_init+0x138>)
   275a2:	491c      	ldr	r1, [pc, #112]	; (27614 <nm_spi_init+0x118>)
   275a4:	4b1c      	ldr	r3, [pc, #112]	; (27618 <nm_spi_init+0x11c>)
   275a6:	0018      	movs	r0, r3
   275a8:	4b1c      	ldr	r3, [pc, #112]	; (2761c <nm_spi_init+0x120>)
   275aa:	4798      	blx	r3
   275ac:	4b22      	ldr	r3, [pc, #136]	; (27638 <nm_spi_init+0x13c>)
   275ae:	0018      	movs	r0, r3
   275b0:	4b1a      	ldr	r3, [pc, #104]	; (2761c <nm_spi_init+0x120>)
   275b2:	4798      	blx	r3
   275b4:	4b1b      	ldr	r3, [pc, #108]	; (27624 <nm_spi_init+0x128>)
   275b6:	0018      	movs	r0, r3
   275b8:	4b18      	ldr	r3, [pc, #96]	; (2761c <nm_spi_init+0x120>)
   275ba:	4798      	blx	r3
			return 0;
   275bc:	2300      	movs	r3, #0
   275be:	e01f      	b.n	27600 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   275c0:	4b11      	ldr	r3, [pc, #68]	; (27608 <nm_spi_init+0x10c>)
   275c2:	2201      	movs	r2, #1
   275c4:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   275c6:	1d3a      	adds	r2, r7, #4
   275c8:	2380      	movs	r3, #128	; 0x80
   275ca:	015b      	lsls	r3, r3, #5
   275cc:	0011      	movs	r1, r2
   275ce:	0018      	movs	r0, r3
   275d0:	4b0f      	ldr	r3, [pc, #60]	; (27610 <nm_spi_init+0x114>)
   275d2:	4798      	blx	r3
   275d4:	1e03      	subs	r3, r0, #0
   275d6:	d110      	bne.n	275fa <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   275d8:	4a18      	ldr	r2, [pc, #96]	; (2763c <nm_spi_init+0x140>)
   275da:	490e      	ldr	r1, [pc, #56]	; (27614 <nm_spi_init+0x118>)
   275dc:	4b0e      	ldr	r3, [pc, #56]	; (27618 <nm_spi_init+0x11c>)
   275de:	0018      	movs	r0, r3
   275e0:	4b0e      	ldr	r3, [pc, #56]	; (2761c <nm_spi_init+0x120>)
   275e2:	4798      	blx	r3
   275e4:	4b16      	ldr	r3, [pc, #88]	; (27640 <nm_spi_init+0x144>)
   275e6:	0018      	movs	r0, r3
   275e8:	4b0c      	ldr	r3, [pc, #48]	; (2761c <nm_spi_init+0x120>)
   275ea:	4798      	blx	r3
   275ec:	4b0d      	ldr	r3, [pc, #52]	; (27624 <nm_spi_init+0x128>)
   275ee:	0018      	movs	r0, r3
   275f0:	4b0a      	ldr	r3, [pc, #40]	; (2761c <nm_spi_init+0x120>)
   275f2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   275f4:	2306      	movs	r3, #6
   275f6:	425b      	negs	r3, r3
   275f8:	e002      	b.n	27600 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   275fa:	4b12      	ldr	r3, [pc, #72]	; (27644 <nm_spi_init+0x148>)
   275fc:	4798      	blx	r3


	return M2M_SUCCESS;
   275fe:	2300      	movs	r3, #0
}
   27600:	0018      	movs	r0, r3
   27602:	46bd      	mov	sp, r7
   27604:	b002      	add	sp, #8
   27606:	bd80      	pop	{r7, pc}
   27608:	200041dc 	.word	0x200041dc
   2760c:	0000e824 	.word	0x0000e824
   27610:	000271f5 	.word	0x000271f5
   27614:	0003c50c 	.word	0x0003c50c
   27618:	0003be98 	.word	0x0003be98
   2761c:	00020889 	.word	0x00020889
   27620:	0003c334 	.word	0x0003c334
   27624:	0003bed8 	.word	0x0003bed8
   27628:	000004c3 	.word	0x000004c3
   2762c:	0003c384 	.word	0x0003c384
   27630:	00026efd 	.word	0x00026efd
   27634:	000004cd 	.word	0x000004cd
   27638:	0003c3b4 	.word	0x0003c3b4
   2763c:	000004d7 	.word	0x000004d7
   27640:	0003c3e8 	.word	0x0003c3e8
   27644:	00027489 	.word	0x00027489

00027648 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   27648:	b580      	push	{r7, lr}
   2764a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   2764c:	4b03      	ldr	r3, [pc, #12]	; (2765c <nm_spi_deinit+0x14>)
   2764e:	2200      	movs	r2, #0
   27650:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   27652:	2300      	movs	r3, #0
}
   27654:	0018      	movs	r0, r3
   27656:	46bd      	mov	sp, r7
   27658:	bd80      	pop	{r7, pc}
   2765a:	46c0      	nop			; (mov r8, r8)
   2765c:	200041dc 	.word	0x200041dc

00027660 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   27660:	b580      	push	{r7, lr}
   27662:	b084      	sub	sp, #16
   27664:	af00      	add	r7, sp, #0
   27666:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   27668:	230c      	movs	r3, #12
   2766a:	18fa      	adds	r2, r7, r3
   2766c:	687b      	ldr	r3, [r7, #4]
   2766e:	0011      	movs	r1, r2
   27670:	0018      	movs	r0, r3
   27672:	4b03      	ldr	r3, [pc, #12]	; (27680 <nm_spi_read_reg+0x20>)
   27674:	4798      	blx	r3

	return u32Val;
   27676:	68fb      	ldr	r3, [r7, #12]
}
   27678:	0018      	movs	r0, r3
   2767a:	46bd      	mov	sp, r7
   2767c:	b004      	add	sp, #16
   2767e:	bd80      	pop	{r7, pc}
   27680:	000271f5 	.word	0x000271f5

00027684 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   27684:	b590      	push	{r4, r7, lr}
   27686:	b085      	sub	sp, #20
   27688:	af00      	add	r7, sp, #0
   2768a:	6078      	str	r0, [r7, #4]
   2768c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2768e:	230f      	movs	r3, #15
   27690:	18fc      	adds	r4, r7, r3
   27692:	683a      	ldr	r2, [r7, #0]
   27694:	687b      	ldr	r3, [r7, #4]
   27696:	0011      	movs	r1, r2
   27698:	0018      	movs	r0, r3
   2769a:	4b0d      	ldr	r3, [pc, #52]	; (276d0 <nm_spi_read_reg_with_ret+0x4c>)
   2769c:	4798      	blx	r3
   2769e:	0003      	movs	r3, r0
   276a0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   276a2:	230f      	movs	r3, #15
   276a4:	18fb      	adds	r3, r7, r3
   276a6:	781b      	ldrb	r3, [r3, #0]
   276a8:	b25b      	sxtb	r3, r3
   276aa:	2b01      	cmp	r3, #1
   276ac:	d104      	bne.n	276b8 <nm_spi_read_reg_with_ret+0x34>
   276ae:	230f      	movs	r3, #15
   276b0:	18fb      	adds	r3, r7, r3
   276b2:	2200      	movs	r2, #0
   276b4:	701a      	strb	r2, [r3, #0]
   276b6:	e003      	b.n	276c0 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   276b8:	230f      	movs	r3, #15
   276ba:	18fb      	adds	r3, r7, r3
   276bc:	22fa      	movs	r2, #250	; 0xfa
   276be:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   276c0:	230f      	movs	r3, #15
   276c2:	18fb      	adds	r3, r7, r3
   276c4:	781b      	ldrb	r3, [r3, #0]
   276c6:	b25b      	sxtb	r3, r3
}
   276c8:	0018      	movs	r0, r3
   276ca:	46bd      	mov	sp, r7
   276cc:	b005      	add	sp, #20
   276ce:	bd90      	pop	{r4, r7, pc}
   276d0:	000271f5 	.word	0x000271f5

000276d4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   276d4:	b590      	push	{r4, r7, lr}
   276d6:	b085      	sub	sp, #20
   276d8:	af00      	add	r7, sp, #0
   276da:	6078      	str	r0, [r7, #4]
   276dc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   276de:	230f      	movs	r3, #15
   276e0:	18fc      	adds	r4, r7, r3
   276e2:	683a      	ldr	r2, [r7, #0]
   276e4:	687b      	ldr	r3, [r7, #4]
   276e6:	0011      	movs	r1, r2
   276e8:	0018      	movs	r0, r3
   276ea:	4b0d      	ldr	r3, [pc, #52]	; (27720 <nm_spi_write_reg+0x4c>)
   276ec:	4798      	blx	r3
   276ee:	0003      	movs	r3, r0
   276f0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   276f2:	230f      	movs	r3, #15
   276f4:	18fb      	adds	r3, r7, r3
   276f6:	781b      	ldrb	r3, [r3, #0]
   276f8:	b25b      	sxtb	r3, r3
   276fa:	2b01      	cmp	r3, #1
   276fc:	d104      	bne.n	27708 <nm_spi_write_reg+0x34>
   276fe:	230f      	movs	r3, #15
   27700:	18fb      	adds	r3, r7, r3
   27702:	2200      	movs	r2, #0
   27704:	701a      	strb	r2, [r3, #0]
   27706:	e003      	b.n	27710 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   27708:	230f      	movs	r3, #15
   2770a:	18fb      	adds	r3, r7, r3
   2770c:	22fa      	movs	r2, #250	; 0xfa
   2770e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   27710:	230f      	movs	r3, #15
   27712:	18fb      	adds	r3, r7, r3
   27714:	781b      	ldrb	r3, [r3, #0]
   27716:	b25b      	sxtb	r3, r3
}
   27718:	0018      	movs	r0, r3
   2771a:	46bd      	mov	sp, r7
   2771c:	b005      	add	sp, #20
   2771e:	bd90      	pop	{r4, r7, pc}
   27720:	00026efd 	.word	0x00026efd

00027724 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   27724:	b590      	push	{r4, r7, lr}
   27726:	b087      	sub	sp, #28
   27728:	af00      	add	r7, sp, #0
   2772a:	60f8      	str	r0, [r7, #12]
   2772c:	60b9      	str	r1, [r7, #8]
   2772e:	1dbb      	adds	r3, r7, #6
   27730:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   27732:	2317      	movs	r3, #23
   27734:	18fc      	adds	r4, r7, r3
   27736:	1dbb      	adds	r3, r7, #6
   27738:	881a      	ldrh	r2, [r3, #0]
   2773a:	68b9      	ldr	r1, [r7, #8]
   2773c:	68fb      	ldr	r3, [r7, #12]
   2773e:	0018      	movs	r0, r3
   27740:	4b0d      	ldr	r3, [pc, #52]	; (27778 <nm_spi_read_block+0x54>)
   27742:	4798      	blx	r3
   27744:	0003      	movs	r3, r0
   27746:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   27748:	2317      	movs	r3, #23
   2774a:	18fb      	adds	r3, r7, r3
   2774c:	781b      	ldrb	r3, [r3, #0]
   2774e:	b25b      	sxtb	r3, r3
   27750:	2b01      	cmp	r3, #1
   27752:	d104      	bne.n	2775e <nm_spi_read_block+0x3a>
   27754:	2317      	movs	r3, #23
   27756:	18fb      	adds	r3, r7, r3
   27758:	2200      	movs	r2, #0
   2775a:	701a      	strb	r2, [r3, #0]
   2775c:	e003      	b.n	27766 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2775e:	2317      	movs	r3, #23
   27760:	18fb      	adds	r3, r7, r3
   27762:	22fa      	movs	r2, #250	; 0xfa
   27764:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   27766:	2317      	movs	r3, #23
   27768:	18fb      	adds	r3, r7, r3
   2776a:	781b      	ldrb	r3, [r3, #0]
   2776c:	b25b      	sxtb	r3, r3
}
   2776e:	0018      	movs	r0, r3
   27770:	46bd      	mov	sp, r7
   27772:	b007      	add	sp, #28
   27774:	bd90      	pop	{r4, r7, pc}
   27776:	46c0      	nop			; (mov r8, r8)
   27778:	0002736d 	.word	0x0002736d

0002777c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   2777c:	b590      	push	{r4, r7, lr}
   2777e:	b087      	sub	sp, #28
   27780:	af00      	add	r7, sp, #0
   27782:	60f8      	str	r0, [r7, #12]
   27784:	60b9      	str	r1, [r7, #8]
   27786:	1dbb      	adds	r3, r7, #6
   27788:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   2778a:	2317      	movs	r3, #23
   2778c:	18fc      	adds	r4, r7, r3
   2778e:	1dbb      	adds	r3, r7, #6
   27790:	881a      	ldrh	r2, [r3, #0]
   27792:	68b9      	ldr	r1, [r7, #8]
   27794:	68fb      	ldr	r3, [r7, #12]
   27796:	0018      	movs	r0, r3
   27798:	4b0d      	ldr	r3, [pc, #52]	; (277d0 <nm_spi_write_block+0x54>)
   2779a:	4798      	blx	r3
   2779c:	0003      	movs	r3, r0
   2779e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   277a0:	2317      	movs	r3, #23
   277a2:	18fb      	adds	r3, r7, r3
   277a4:	781b      	ldrb	r3, [r3, #0]
   277a6:	b25b      	sxtb	r3, r3
   277a8:	2b01      	cmp	r3, #1
   277aa:	d104      	bne.n	277b6 <nm_spi_write_block+0x3a>
   277ac:	2317      	movs	r3, #23
   277ae:	18fb      	adds	r3, r7, r3
   277b0:	2200      	movs	r2, #0
   277b2:	701a      	strb	r2, [r3, #0]
   277b4:	e003      	b.n	277be <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   277b6:	2317      	movs	r3, #23
   277b8:	18fb      	adds	r3, r7, r3
   277ba:	22fa      	movs	r2, #250	; 0xfa
   277bc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   277be:	2317      	movs	r3, #23
   277c0:	18fb      	adds	r3, r7, r3
   277c2:	781b      	ldrb	r3, [r3, #0]
   277c4:	b25b      	sxtb	r3, r3
}
   277c6:	0018      	movs	r0, r3
   277c8:	46bd      	mov	sp, r7
   277ca:	b007      	add	sp, #28
   277cc:	bd90      	pop	{r4, r7, pc}
   277ce:	46c0      	nop			; (mov r8, r8)
   277d0:	00027049 	.word	0x00027049

000277d4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   277d4:	b590      	push	{r4, r7, lr}
   277d6:	b089      	sub	sp, #36	; 0x24
   277d8:	af00      	add	r7, sp, #0
   277da:	60b9      	str	r1, [r7, #8]
   277dc:	0011      	movs	r1, r2
   277de:	607b      	str	r3, [r7, #4]
   277e0:	230f      	movs	r3, #15
   277e2:	18fb      	adds	r3, r7, r3
   277e4:	1c02      	adds	r2, r0, #0
   277e6:	701a      	strb	r2, [r3, #0]
   277e8:	230e      	movs	r3, #14
   277ea:	18fb      	adds	r3, r7, r3
   277ec:	1c0a      	adds	r2, r1, #0
   277ee:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   277f0:	2330      	movs	r3, #48	; 0x30
   277f2:	18fb      	adds	r3, r7, r3
   277f4:	881b      	ldrh	r3, [r3, #0]
   277f6:	2b00      	cmp	r3, #0
   277f8:	d100      	bne.n	277fc <Socket_ReadSocketData+0x28>
   277fa:	e0d7      	b.n	279ac <Socket_ReadSocketData+0x1d8>
   277fc:	230f      	movs	r3, #15
   277fe:	18fb      	adds	r3, r7, r3
   27800:	2200      	movs	r2, #0
   27802:	569a      	ldrsb	r2, [r3, r2]
   27804:	4b6b      	ldr	r3, [pc, #428]	; (279b4 <Socket_ReadSocketData+0x1e0>)
   27806:	0112      	lsls	r2, r2, #4
   27808:	58d3      	ldr	r3, [r2, r3]
   2780a:	2b00      	cmp	r3, #0
   2780c:	d100      	bne.n	27810 <Socket_ReadSocketData+0x3c>
   2780e:	e0cd      	b.n	279ac <Socket_ReadSocketData+0x1d8>
   27810:	230f      	movs	r3, #15
   27812:	18fb      	adds	r3, r7, r3
   27814:	781b      	ldrb	r3, [r3, #0]
   27816:	b25b      	sxtb	r3, r3
   27818:	4a66      	ldr	r2, [pc, #408]	; (279b4 <Socket_ReadSocketData+0x1e0>)
   2781a:	011b      	lsls	r3, r3, #4
   2781c:	18d3      	adds	r3, r2, r3
   2781e:	3304      	adds	r3, #4
   27820:	881b      	ldrh	r3, [r3, #0]
   27822:	b29b      	uxth	r3, r3
   27824:	2b00      	cmp	r3, #0
   27826:	d100      	bne.n	2782a <Socket_ReadSocketData+0x56>
   27828:	e0c0      	b.n	279ac <Socket_ReadSocketData+0x1d8>
   2782a:	230f      	movs	r3, #15
   2782c:	18fb      	adds	r3, r7, r3
   2782e:	781b      	ldrb	r3, [r3, #0]
   27830:	b25b      	sxtb	r3, r3
   27832:	4a60      	ldr	r2, [pc, #384]	; (279b4 <Socket_ReadSocketData+0x1e0>)
   27834:	011b      	lsls	r3, r3, #4
   27836:	18d3      	adds	r3, r2, r3
   27838:	330a      	adds	r3, #10
   2783a:	781b      	ldrb	r3, [r3, #0]
   2783c:	b2db      	uxtb	r3, r3
   2783e:	2b01      	cmp	r3, #1
   27840:	d000      	beq.n	27844 <Socket_ReadSocketData+0x70>
   27842:	e0b3      	b.n	279ac <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   27844:	687b      	ldr	r3, [r7, #4]
   27846:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   27848:	68bb      	ldr	r3, [r7, #8]
   2784a:	2230      	movs	r2, #48	; 0x30
   2784c:	18ba      	adds	r2, r7, r2
   2784e:	8812      	ldrh	r2, [r2, #0]
   27850:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   27852:	2319      	movs	r3, #25
   27854:	18fb      	adds	r3, r7, r3
   27856:	2201      	movs	r2, #1
   27858:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   2785a:	231a      	movs	r3, #26
   2785c:	18fb      	adds	r3, r7, r3
   2785e:	2230      	movs	r2, #48	; 0x30
   27860:	18ba      	adds	r2, r7, r2
   27862:	8812      	ldrh	r2, [r2, #0]
   27864:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   27866:	230f      	movs	r3, #15
   27868:	18fb      	adds	r3, r7, r3
   2786a:	781b      	ldrb	r3, [r3, #0]
   2786c:	b25b      	sxtb	r3, r3
   2786e:	4a51      	ldr	r2, [pc, #324]	; (279b4 <Socket_ReadSocketData+0x1e0>)
   27870:	011b      	lsls	r3, r3, #4
   27872:	18d3      	adds	r3, r2, r3
   27874:	3304      	adds	r3, #4
   27876:	881b      	ldrh	r3, [r3, #0]
   27878:	b29b      	uxth	r3, r3
   2787a:	221a      	movs	r2, #26
   2787c:	18ba      	adds	r2, r7, r2
   2787e:	8812      	ldrh	r2, [r2, #0]
   27880:	1ad3      	subs	r3, r2, r3
   27882:	b29a      	uxth	r2, r3
   27884:	2316      	movs	r3, #22
   27886:	18fb      	adds	r3, r7, r3
   27888:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   2788a:	2316      	movs	r3, #22
   2788c:	18fb      	adds	r3, r7, r3
   2788e:	2200      	movs	r2, #0
   27890:	5e9b      	ldrsh	r3, [r3, r2]
   27892:	2b00      	cmp	r3, #0
   27894:	dd0f      	ble.n	278b6 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   27896:	2319      	movs	r3, #25
   27898:	18fb      	adds	r3, r7, r3
   2789a:	2200      	movs	r2, #0
   2789c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   2789e:	230f      	movs	r3, #15
   278a0:	18fb      	adds	r3, r7, r3
   278a2:	2200      	movs	r2, #0
   278a4:	569a      	ldrsb	r2, [r3, r2]
   278a6:	231a      	movs	r3, #26
   278a8:	18fb      	adds	r3, r7, r3
   278aa:	4942      	ldr	r1, [pc, #264]	; (279b4 <Socket_ReadSocketData+0x1e0>)
   278ac:	0112      	lsls	r2, r2, #4
   278ae:	188a      	adds	r2, r1, r2
   278b0:	3204      	adds	r2, #4
   278b2:	8812      	ldrh	r2, [r2, #0]
   278b4:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   278b6:	230f      	movs	r3, #15
   278b8:	18fb      	adds	r3, r7, r3
   278ba:	2200      	movs	r2, #0
   278bc:	569a      	ldrsb	r2, [r3, r2]
   278be:	4b3d      	ldr	r3, [pc, #244]	; (279b4 <Socket_ReadSocketData+0x1e0>)
   278c0:	0112      	lsls	r2, r2, #4
   278c2:	58d1      	ldr	r1, [r2, r3]
   278c4:	2319      	movs	r3, #25
   278c6:	18fb      	adds	r3, r7, r3
   278c8:	781c      	ldrb	r4, [r3, #0]
   278ca:	231a      	movs	r3, #26
   278cc:	18fb      	adds	r3, r7, r3
   278ce:	881a      	ldrh	r2, [r3, #0]
   278d0:	69f8      	ldr	r0, [r7, #28]
   278d2:	0023      	movs	r3, r4
   278d4:	4c38      	ldr	r4, [pc, #224]	; (279b8 <Socket_ReadSocketData+0x1e4>)
   278d6:	47a0      	blx	r4
   278d8:	1e03      	subs	r3, r0, #0
   278da:	d14f      	bne.n	2797c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   278dc:	230f      	movs	r3, #15
   278de:	18fb      	adds	r3, r7, r3
   278e0:	2200      	movs	r2, #0
   278e2:	569a      	ldrsb	r2, [r3, r2]
   278e4:	4b33      	ldr	r3, [pc, #204]	; (279b4 <Socket_ReadSocketData+0x1e0>)
   278e6:	0112      	lsls	r2, r2, #4
   278e8:	58d2      	ldr	r2, [r2, r3]
   278ea:	68bb      	ldr	r3, [r7, #8]
   278ec:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   278ee:	231a      	movs	r3, #26
   278f0:	18fb      	adds	r3, r7, r3
   278f2:	2200      	movs	r2, #0
   278f4:	5e9a      	ldrsh	r2, [r3, r2]
   278f6:	68bb      	ldr	r3, [r7, #8]
   278f8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   278fa:	68bb      	ldr	r3, [r7, #8]
   278fc:	88da      	ldrh	r2, [r3, #6]
   278fe:	231a      	movs	r3, #26
   27900:	18fb      	adds	r3, r7, r3
   27902:	881b      	ldrh	r3, [r3, #0]
   27904:	1ad3      	subs	r3, r2, r3
   27906:	b29a      	uxth	r2, r3
   27908:	68bb      	ldr	r3, [r7, #8]
   2790a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   2790c:	4b2b      	ldr	r3, [pc, #172]	; (279bc <Socket_ReadSocketData+0x1e8>)
   2790e:	681b      	ldr	r3, [r3, #0]
   27910:	2b00      	cmp	r3, #0
   27912:	d00b      	beq.n	2792c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   27914:	4b29      	ldr	r3, [pc, #164]	; (279bc <Socket_ReadSocketData+0x1e8>)
   27916:	681b      	ldr	r3, [r3, #0]
   27918:	68bc      	ldr	r4, [r7, #8]
   2791a:	220e      	movs	r2, #14
   2791c:	18ba      	adds	r2, r7, r2
   2791e:	7811      	ldrb	r1, [r2, #0]
   27920:	220f      	movs	r2, #15
   27922:	18ba      	adds	r2, r7, r2
   27924:	2000      	movs	r0, #0
   27926:	5610      	ldrsb	r0, [r2, r0]
   27928:	0022      	movs	r2, r4
   2792a:	4798      	blx	r3

				u16ReadCount -= u16Read;
   2792c:	2330      	movs	r3, #48	; 0x30
   2792e:	18f9      	adds	r1, r7, r3
   27930:	2330      	movs	r3, #48	; 0x30
   27932:	18fa      	adds	r2, r7, r3
   27934:	231a      	movs	r3, #26
   27936:	18fb      	adds	r3, r7, r3
   27938:	8812      	ldrh	r2, [r2, #0]
   2793a:	881b      	ldrh	r3, [r3, #0]
   2793c:	1ad3      	subs	r3, r2, r3
   2793e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   27940:	231a      	movs	r3, #26
   27942:	18fb      	adds	r3, r7, r3
   27944:	881b      	ldrh	r3, [r3, #0]
   27946:	69fa      	ldr	r2, [r7, #28]
   27948:	18d3      	adds	r3, r2, r3
   2794a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   2794c:	230f      	movs	r3, #15
   2794e:	18fb      	adds	r3, r7, r3
   27950:	781b      	ldrb	r3, [r3, #0]
   27952:	b25b      	sxtb	r3, r3
   27954:	4a17      	ldr	r2, [pc, #92]	; (279b4 <Socket_ReadSocketData+0x1e0>)
   27956:	011b      	lsls	r3, r3, #4
   27958:	18d3      	adds	r3, r2, r3
   2795a:	330a      	adds	r3, #10
   2795c:	781b      	ldrb	r3, [r3, #0]
   2795e:	b2db      	uxtb	r3, r3
   27960:	2b00      	cmp	r3, #0
   27962:	d11c      	bne.n	2799e <Socket_ReadSocketData+0x1ca>
   27964:	2330      	movs	r3, #48	; 0x30
   27966:	18fb      	adds	r3, r7, r3
   27968:	881b      	ldrh	r3, [r3, #0]
   2796a:	2b00      	cmp	r3, #0
   2796c:	d017      	beq.n	2799e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2796e:	2301      	movs	r3, #1
   27970:	2200      	movs	r2, #0
   27972:	2100      	movs	r1, #0
   27974:	2000      	movs	r0, #0
   27976:	4c10      	ldr	r4, [pc, #64]	; (279b8 <Socket_ReadSocketData+0x1e4>)
   27978:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   2797a:	e017      	b.n	279ac <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   2797c:	4b10      	ldr	r3, [pc, #64]	; (279c0 <Socket_ReadSocketData+0x1ec>)
   2797e:	0018      	movs	r0, r3
   27980:	4b10      	ldr	r3, [pc, #64]	; (279c4 <Socket_ReadSocketData+0x1f0>)
   27982:	4798      	blx	r3
   27984:	2330      	movs	r3, #48	; 0x30
   27986:	18fb      	adds	r3, r7, r3
   27988:	881a      	ldrh	r2, [r3, #0]
   2798a:	4b0f      	ldr	r3, [pc, #60]	; (279c8 <Socket_ReadSocketData+0x1f4>)
   2798c:	0011      	movs	r1, r2
   2798e:	0018      	movs	r0, r3
   27990:	4b0c      	ldr	r3, [pc, #48]	; (279c4 <Socket_ReadSocketData+0x1f0>)
   27992:	4798      	blx	r3
   27994:	4b0d      	ldr	r3, [pc, #52]	; (279cc <Socket_ReadSocketData+0x1f8>)
   27996:	0018      	movs	r0, r3
   27998:	4b0a      	ldr	r3, [pc, #40]	; (279c4 <Socket_ReadSocketData+0x1f0>)
   2799a:	4798      	blx	r3
				break;
   2799c:	e006      	b.n	279ac <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   2799e:	2330      	movs	r3, #48	; 0x30
   279a0:	18fb      	adds	r3, r7, r3
   279a2:	881b      	ldrh	r3, [r3, #0]
   279a4:	2b00      	cmp	r3, #0
   279a6:	d000      	beq.n	279aa <Socket_ReadSocketData+0x1d6>
   279a8:	e753      	b.n	27852 <Socket_ReadSocketData+0x7e>
	}
}
   279aa:	e7ff      	b.n	279ac <Socket_ReadSocketData+0x1d8>
   279ac:	46c0      	nop			; (mov r8, r8)
   279ae:	46bd      	mov	sp, r7
   279b0:	b009      	add	sp, #36	; 0x24
   279b2:	bd90      	pop	{r4, r7, pc}
   279b4:	20005a8c 	.word	0x20005a8c
   279b8:	000241cd 	.word	0x000241cd
   279bc:	20005b3c 	.word	0x20005b3c
   279c0:	0003c518 	.word	0x0003c518
   279c4:	00020889 	.word	0x00020889
   279c8:	0003c524 	.word	0x0003c524
   279cc:	0003c538 	.word	0x0003c538

000279d0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   279d0:	b590      	push	{r4, r7, lr}
   279d2:	b0bb      	sub	sp, #236	; 0xec
   279d4:	af02      	add	r7, sp, #8
   279d6:	603a      	str	r2, [r7, #0]
   279d8:	1dfb      	adds	r3, r7, #7
   279da:	1c02      	adds	r2, r0, #0
   279dc:	701a      	strb	r2, [r3, #0]
   279de:	1d3b      	adds	r3, r7, #4
   279e0:	1c0a      	adds	r2, r1, #0
   279e2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   279e4:	1dfb      	adds	r3, r7, #7
   279e6:	781b      	ldrb	r3, [r3, #0]
   279e8:	2b41      	cmp	r3, #65	; 0x41
   279ea:	d003      	beq.n	279f4 <m2m_ip_cb+0x24>
   279ec:	1dfb      	adds	r3, r7, #7
   279ee:	781b      	ldrb	r3, [r3, #0]
   279f0:	2b54      	cmp	r3, #84	; 0x54
   279f2:	d120      	bne.n	27a36 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   279f4:	23cc      	movs	r3, #204	; 0xcc
   279f6:	18f9      	adds	r1, r7, r3
   279f8:	6838      	ldr	r0, [r7, #0]
   279fa:	2300      	movs	r3, #0
   279fc:	2204      	movs	r2, #4
   279fe:	4c98      	ldr	r4, [pc, #608]	; (27c60 <m2m_ip_cb+0x290>)
   27a00:	47a0      	blx	r4
   27a02:	1e03      	subs	r3, r0, #0
   27a04:	d000      	beq.n	27a08 <m2m_ip_cb+0x38>
   27a06:	e275      	b.n	27ef4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   27a08:	23cc      	movs	r3, #204	; 0xcc
   27a0a:	18fb      	adds	r3, r7, r3
   27a0c:	2201      	movs	r2, #1
   27a0e:	569a      	ldrsb	r2, [r3, r2]
   27a10:	23c8      	movs	r3, #200	; 0xc8
   27a12:	18fb      	adds	r3, r7, r3
   27a14:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   27a16:	4b93      	ldr	r3, [pc, #588]	; (27c64 <m2m_ip_cb+0x294>)
   27a18:	681b      	ldr	r3, [r3, #0]
   27a1a:	2b00      	cmp	r3, #0
   27a1c:	d100      	bne.n	27a20 <m2m_ip_cb+0x50>
   27a1e:	e269      	b.n	27ef4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   27a20:	4b90      	ldr	r3, [pc, #576]	; (27c64 <m2m_ip_cb+0x294>)
   27a22:	681b      	ldr	r3, [r3, #0]
   27a24:	22cc      	movs	r2, #204	; 0xcc
   27a26:	18ba      	adds	r2, r7, r2
   27a28:	2000      	movs	r0, #0
   27a2a:	5610      	ldrsb	r0, [r2, r0]
   27a2c:	22c8      	movs	r2, #200	; 0xc8
   27a2e:	18ba      	adds	r2, r7, r2
   27a30:	2101      	movs	r1, #1
   27a32:	4798      	blx	r3
	{
   27a34:	e25e      	b.n	27ef4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   27a36:	1dfb      	adds	r3, r7, #7
   27a38:	781b      	ldrb	r3, [r3, #0]
   27a3a:	2b42      	cmp	r3, #66	; 0x42
   27a3c:	d120      	bne.n	27a80 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   27a3e:	23c4      	movs	r3, #196	; 0xc4
   27a40:	18f9      	adds	r1, r7, r3
   27a42:	6838      	ldr	r0, [r7, #0]
   27a44:	2300      	movs	r3, #0
   27a46:	2204      	movs	r2, #4
   27a48:	4c85      	ldr	r4, [pc, #532]	; (27c60 <m2m_ip_cb+0x290>)
   27a4a:	47a0      	blx	r4
   27a4c:	1e03      	subs	r3, r0, #0
   27a4e:	d000      	beq.n	27a52 <m2m_ip_cb+0x82>
   27a50:	e257      	b.n	27f02 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   27a52:	23c4      	movs	r3, #196	; 0xc4
   27a54:	18fb      	adds	r3, r7, r3
   27a56:	2201      	movs	r2, #1
   27a58:	569a      	ldrsb	r2, [r3, r2]
   27a5a:	23c0      	movs	r3, #192	; 0xc0
   27a5c:	18fb      	adds	r3, r7, r3
   27a5e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   27a60:	4b80      	ldr	r3, [pc, #512]	; (27c64 <m2m_ip_cb+0x294>)
   27a62:	681b      	ldr	r3, [r3, #0]
   27a64:	2b00      	cmp	r3, #0
   27a66:	d100      	bne.n	27a6a <m2m_ip_cb+0x9a>
   27a68:	e24b      	b.n	27f02 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   27a6a:	4b7e      	ldr	r3, [pc, #504]	; (27c64 <m2m_ip_cb+0x294>)
   27a6c:	681b      	ldr	r3, [r3, #0]
   27a6e:	22c4      	movs	r2, #196	; 0xc4
   27a70:	18ba      	adds	r2, r7, r2
   27a72:	2000      	movs	r0, #0
   27a74:	5610      	ldrsb	r0, [r2, r0]
   27a76:	22c0      	movs	r2, #192	; 0xc0
   27a78:	18ba      	adds	r2, r7, r2
   27a7a:	2102      	movs	r1, #2
   27a7c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   27a7e:	e240      	b.n	27f02 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   27a80:	1dfb      	adds	r3, r7, #7
   27a82:	781b      	ldrb	r3, [r3, #0]
   27a84:	2b43      	cmp	r3, #67	; 0x43
   27a86:	d000      	beq.n	27a8a <m2m_ip_cb+0xba>
   27a88:	e086      	b.n	27b98 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   27a8a:	23b4      	movs	r3, #180	; 0xb4
   27a8c:	18f9      	adds	r1, r7, r3
   27a8e:	6838      	ldr	r0, [r7, #0]
   27a90:	2300      	movs	r3, #0
   27a92:	220c      	movs	r2, #12
   27a94:	4c72      	ldr	r4, [pc, #456]	; (27c60 <m2m_ip_cb+0x290>)
   27a96:	47a0      	blx	r4
   27a98:	1e03      	subs	r3, r0, #0
   27a9a:	d000      	beq.n	27a9e <m2m_ip_cb+0xce>
   27a9c:	e231      	b.n	27f02 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   27a9e:	23b4      	movs	r3, #180	; 0xb4
   27aa0:	18fb      	adds	r3, r7, r3
   27aa2:	7a5b      	ldrb	r3, [r3, #9]
   27aa4:	b25b      	sxtb	r3, r3
   27aa6:	2b00      	cmp	r3, #0
   27aa8:	db4f      	blt.n	27b4a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   27aaa:	23b4      	movs	r3, #180	; 0xb4
   27aac:	18fb      	adds	r3, r7, r3
   27aae:	7a5b      	ldrb	r3, [r3, #9]
   27ab0:	b25b      	sxtb	r3, r3
   27ab2:	0018      	movs	r0, r3
   27ab4:	23b4      	movs	r3, #180	; 0xb4
   27ab6:	18fb      	adds	r3, r7, r3
   27ab8:	7a1b      	ldrb	r3, [r3, #8]
   27aba:	b25b      	sxtb	r3, r3
   27abc:	4a6a      	ldr	r2, [pc, #424]	; (27c68 <m2m_ip_cb+0x298>)
   27abe:	011b      	lsls	r3, r3, #4
   27ac0:	18d3      	adds	r3, r2, r3
   27ac2:	330b      	adds	r3, #11
   27ac4:	781b      	ldrb	r3, [r3, #0]
   27ac6:	b2d9      	uxtb	r1, r3
   27ac8:	4a67      	ldr	r2, [pc, #412]	; (27c68 <m2m_ip_cb+0x298>)
   27aca:	0103      	lsls	r3, r0, #4
   27acc:	18d3      	adds	r3, r2, r3
   27ace:	330b      	adds	r3, #11
   27ad0:	1c0a      	adds	r2, r1, #0
   27ad2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   27ad4:	23b4      	movs	r3, #180	; 0xb4
   27ad6:	18fb      	adds	r3, r7, r3
   27ad8:	7a5b      	ldrb	r3, [r3, #9]
   27ada:	b25b      	sxtb	r3, r3
   27adc:	4a62      	ldr	r2, [pc, #392]	; (27c68 <m2m_ip_cb+0x298>)
   27ade:	011b      	lsls	r3, r3, #4
   27ae0:	18d3      	adds	r3, r2, r3
   27ae2:	330a      	adds	r3, #10
   27ae4:	2201      	movs	r2, #1
   27ae6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   27ae8:	23b4      	movs	r3, #180	; 0xb4
   27aea:	18fb      	adds	r3, r7, r3
   27aec:	7a5b      	ldrb	r3, [r3, #9]
   27aee:	b25b      	sxtb	r3, r3
   27af0:	0018      	movs	r0, r3
   27af2:	23b4      	movs	r3, #180	; 0xb4
   27af4:	18fb      	adds	r3, r7, r3
   27af6:	895b      	ldrh	r3, [r3, #10]
   27af8:	3b08      	subs	r3, #8
   27afa:	b299      	uxth	r1, r3
   27afc:	4a5a      	ldr	r2, [pc, #360]	; (27c68 <m2m_ip_cb+0x298>)
   27afe:	0103      	lsls	r3, r0, #4
   27b00:	18d3      	adds	r3, r2, r3
   27b02:	3308      	adds	r3, #8
   27b04:	1c0a      	adds	r2, r1, #0
   27b06:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   27b08:	4b58      	ldr	r3, [pc, #352]	; (27c6c <m2m_ip_cb+0x29c>)
   27b0a:	881b      	ldrh	r3, [r3, #0]
   27b0c:	b29b      	uxth	r3, r3
   27b0e:	3301      	adds	r3, #1
   27b10:	b29a      	uxth	r2, r3
   27b12:	4b56      	ldr	r3, [pc, #344]	; (27c6c <m2m_ip_cb+0x29c>)
   27b14:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   27b16:	4b55      	ldr	r3, [pc, #340]	; (27c6c <m2m_ip_cb+0x29c>)
   27b18:	881b      	ldrh	r3, [r3, #0]
   27b1a:	b29b      	uxth	r3, r3
   27b1c:	2b00      	cmp	r3, #0
   27b1e:	d106      	bne.n	27b2e <m2m_ip_cb+0x15e>
					++gu16SessionID;
   27b20:	4b52      	ldr	r3, [pc, #328]	; (27c6c <m2m_ip_cb+0x29c>)
   27b22:	881b      	ldrh	r3, [r3, #0]
   27b24:	b29b      	uxth	r3, r3
   27b26:	3301      	adds	r3, #1
   27b28:	b29a      	uxth	r2, r3
   27b2a:	4b50      	ldr	r3, [pc, #320]	; (27c6c <m2m_ip_cb+0x29c>)
   27b2c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   27b2e:	23b4      	movs	r3, #180	; 0xb4
   27b30:	18fb      	adds	r3, r7, r3
   27b32:	7a5b      	ldrb	r3, [r3, #9]
   27b34:	b25b      	sxtb	r3, r3
   27b36:	0018      	movs	r0, r3
   27b38:	4b4c      	ldr	r3, [pc, #304]	; (27c6c <m2m_ip_cb+0x29c>)
   27b3a:	881b      	ldrh	r3, [r3, #0]
   27b3c:	b299      	uxth	r1, r3
   27b3e:	4a4a      	ldr	r2, [pc, #296]	; (27c68 <m2m_ip_cb+0x298>)
   27b40:	0103      	lsls	r3, r0, #4
   27b42:	18d3      	adds	r3, r2, r3
   27b44:	3306      	adds	r3, #6
   27b46:	1c0a      	adds	r2, r1, #0
   27b48:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   27b4a:	23b4      	movs	r3, #180	; 0xb4
   27b4c:	18fb      	adds	r3, r7, r3
   27b4e:	2209      	movs	r2, #9
   27b50:	569a      	ldrsb	r2, [r3, r2]
   27b52:	23a0      	movs	r3, #160	; 0xa0
   27b54:	18fb      	adds	r3, r7, r3
   27b56:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   27b58:	23a0      	movs	r3, #160	; 0xa0
   27b5a:	18fb      	adds	r3, r7, r3
   27b5c:	2202      	movs	r2, #2
   27b5e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   27b60:	23b4      	movs	r3, #180	; 0xb4
   27b62:	18fb      	adds	r3, r7, r3
   27b64:	885a      	ldrh	r2, [r3, #2]
   27b66:	23a0      	movs	r3, #160	; 0xa0
   27b68:	18fb      	adds	r3, r7, r3
   27b6a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   27b6c:	23b4      	movs	r3, #180	; 0xb4
   27b6e:	18fb      	adds	r3, r7, r3
   27b70:	685a      	ldr	r2, [r3, #4]
   27b72:	23a0      	movs	r3, #160	; 0xa0
   27b74:	18fb      	adds	r3, r7, r3
   27b76:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   27b78:	4b3a      	ldr	r3, [pc, #232]	; (27c64 <m2m_ip_cb+0x294>)
   27b7a:	681b      	ldr	r3, [r3, #0]
   27b7c:	2b00      	cmp	r3, #0
   27b7e:	d100      	bne.n	27b82 <m2m_ip_cb+0x1b2>
   27b80:	e1bf      	b.n	27f02 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   27b82:	4b38      	ldr	r3, [pc, #224]	; (27c64 <m2m_ip_cb+0x294>)
   27b84:	681b      	ldr	r3, [r3, #0]
   27b86:	22b4      	movs	r2, #180	; 0xb4
   27b88:	18ba      	adds	r2, r7, r2
   27b8a:	2008      	movs	r0, #8
   27b8c:	5610      	ldrsb	r0, [r2, r0]
   27b8e:	22a0      	movs	r2, #160	; 0xa0
   27b90:	18ba      	adds	r2, r7, r2
   27b92:	2104      	movs	r1, #4
   27b94:	4798      	blx	r3
}
   27b96:	e1b4      	b.n	27f02 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   27b98:	1dfb      	adds	r3, r7, #7
   27b9a:	781b      	ldrb	r3, [r3, #0]
   27b9c:	2b44      	cmp	r3, #68	; 0x44
   27b9e:	d003      	beq.n	27ba8 <m2m_ip_cb+0x1d8>
   27ba0:	1dfb      	adds	r3, r7, #7
   27ba2:	781b      	ldrb	r3, [r3, #0]
   27ba4:	2b4b      	cmp	r3, #75	; 0x4b
   27ba6:	d13d      	bne.n	27c24 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   27ba8:	239c      	movs	r3, #156	; 0x9c
   27baa:	18f9      	adds	r1, r7, r3
   27bac:	6838      	ldr	r0, [r7, #0]
   27bae:	2300      	movs	r3, #0
   27bb0:	2204      	movs	r2, #4
   27bb2:	4c2b      	ldr	r4, [pc, #172]	; (27c60 <m2m_ip_cb+0x290>)
   27bb4:	47a0      	blx	r4
   27bb6:	1e03      	subs	r3, r0, #0
   27bb8:	d000      	beq.n	27bbc <m2m_ip_cb+0x1ec>
   27bba:	e19d      	b.n	27ef8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   27bbc:	239c      	movs	r3, #156	; 0x9c
   27bbe:	18fb      	adds	r3, r7, r3
   27bc0:	2200      	movs	r2, #0
   27bc2:	569a      	ldrsb	r2, [r3, r2]
   27bc4:	2398      	movs	r3, #152	; 0x98
   27bc6:	18fb      	adds	r3, r7, r3
   27bc8:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   27bca:	239c      	movs	r3, #156	; 0x9c
   27bcc:	18fb      	adds	r3, r7, r3
   27bce:	2201      	movs	r2, #1
   27bd0:	569a      	ldrsb	r2, [r3, r2]
   27bd2:	2398      	movs	r3, #152	; 0x98
   27bd4:	18fb      	adds	r3, r7, r3
   27bd6:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   27bd8:	239c      	movs	r3, #156	; 0x9c
   27bda:	18fb      	adds	r3, r7, r3
   27bdc:	785b      	ldrb	r3, [r3, #1]
   27bde:	b25b      	sxtb	r3, r3
   27be0:	2b00      	cmp	r3, #0
   27be2:	d10f      	bne.n	27c04 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   27be4:	239c      	movs	r3, #156	; 0x9c
   27be6:	18fb      	adds	r3, r7, r3
   27be8:	781b      	ldrb	r3, [r3, #0]
   27bea:	b25b      	sxtb	r3, r3
   27bec:	0018      	movs	r0, r3
   27bee:	239c      	movs	r3, #156	; 0x9c
   27bf0:	18fb      	adds	r3, r7, r3
   27bf2:	885b      	ldrh	r3, [r3, #2]
   27bf4:	3b08      	subs	r3, #8
   27bf6:	b299      	uxth	r1, r3
   27bf8:	4a1b      	ldr	r2, [pc, #108]	; (27c68 <m2m_ip_cb+0x298>)
   27bfa:	0103      	lsls	r3, r0, #4
   27bfc:	18d3      	adds	r3, r2, r3
   27bfe:	3308      	adds	r3, #8
   27c00:	1c0a      	adds	r2, r1, #0
   27c02:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   27c04:	4b17      	ldr	r3, [pc, #92]	; (27c64 <m2m_ip_cb+0x294>)
   27c06:	681b      	ldr	r3, [r3, #0]
   27c08:	2b00      	cmp	r3, #0
   27c0a:	d100      	bne.n	27c0e <m2m_ip_cb+0x23e>
   27c0c:	e174      	b.n	27ef8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   27c0e:	4b15      	ldr	r3, [pc, #84]	; (27c64 <m2m_ip_cb+0x294>)
   27c10:	681b      	ldr	r3, [r3, #0]
   27c12:	229c      	movs	r2, #156	; 0x9c
   27c14:	18ba      	adds	r2, r7, r2
   27c16:	2000      	movs	r0, #0
   27c18:	5610      	ldrsb	r0, [r2, r0]
   27c1a:	2298      	movs	r2, #152	; 0x98
   27c1c:	18ba      	adds	r2, r7, r2
   27c1e:	2105      	movs	r1, #5
   27c20:	4798      	blx	r3
	{
   27c22:	e169      	b.n	27ef8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   27c24:	1dfb      	adds	r3, r7, #7
   27c26:	781b      	ldrb	r3, [r3, #0]
   27c28:	2b4a      	cmp	r3, #74	; 0x4a
   27c2a:	d123      	bne.n	27c74 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   27c2c:	230c      	movs	r3, #12
   27c2e:	18f9      	adds	r1, r7, r3
   27c30:	6838      	ldr	r0, [r7, #0]
   27c32:	2300      	movs	r3, #0
   27c34:	2244      	movs	r2, #68	; 0x44
   27c36:	4c0a      	ldr	r4, [pc, #40]	; (27c60 <m2m_ip_cb+0x290>)
   27c38:	47a0      	blx	r4
   27c3a:	1e03      	subs	r3, r0, #0
   27c3c:	d000      	beq.n	27c40 <m2m_ip_cb+0x270>
   27c3e:	e160      	b.n	27f02 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   27c40:	4b0b      	ldr	r3, [pc, #44]	; (27c70 <m2m_ip_cb+0x2a0>)
   27c42:	681b      	ldr	r3, [r3, #0]
   27c44:	2b00      	cmp	r3, #0
   27c46:	d100      	bne.n	27c4a <m2m_ip_cb+0x27a>
   27c48:	e15b      	b.n	27f02 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   27c4a:	4b09      	ldr	r3, [pc, #36]	; (27c70 <m2m_ip_cb+0x2a0>)
   27c4c:	681a      	ldr	r2, [r3, #0]
   27c4e:	230c      	movs	r3, #12
   27c50:	18fb      	adds	r3, r7, r3
   27c52:	6c19      	ldr	r1, [r3, #64]	; 0x40
   27c54:	230c      	movs	r3, #12
   27c56:	18fb      	adds	r3, r7, r3
   27c58:	0018      	movs	r0, r3
   27c5a:	4790      	blx	r2
}
   27c5c:	e151      	b.n	27f02 <m2m_ip_cb+0x532>
   27c5e:	46c0      	nop			; (mov r8, r8)
   27c60:	000241cd 	.word	0x000241cd
   27c64:	20005b3c 	.word	0x20005b3c
   27c68:	20005a8c 	.word	0x20005a8c
   27c6c:	200041de 	.word	0x200041de
   27c70:	20005b44 	.word	0x20005b44
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   27c74:	1dfb      	adds	r3, r7, #7
   27c76:	781b      	ldrb	r3, [r3, #0]
   27c78:	2b46      	cmp	r3, #70	; 0x46
   27c7a:	d008      	beq.n	27c8e <m2m_ip_cb+0x2be>
   27c7c:	1dfb      	adds	r3, r7, #7
   27c7e:	781b      	ldrb	r3, [r3, #0]
   27c80:	2b48      	cmp	r3, #72	; 0x48
   27c82:	d004      	beq.n	27c8e <m2m_ip_cb+0x2be>
   27c84:	1dfb      	adds	r3, r7, #7
   27c86:	781b      	ldrb	r3, [r3, #0]
   27c88:	2b4d      	cmp	r3, #77	; 0x4d
   27c8a:	d000      	beq.n	27c8e <m2m_ip_cb+0x2be>
   27c8c:	e0b4      	b.n	27df8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   27c8e:	23df      	movs	r3, #223	; 0xdf
   27c90:	18fb      	adds	r3, r7, r3
   27c92:	2206      	movs	r2, #6
   27c94:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   27c96:	1dfb      	adds	r3, r7, #7
   27c98:	781b      	ldrb	r3, [r3, #0]
   27c9a:	2b48      	cmp	r3, #72	; 0x48
   27c9c:	d103      	bne.n	27ca6 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   27c9e:	23df      	movs	r3, #223	; 0xdf
   27ca0:	18fb      	adds	r3, r7, r3
   27ca2:	2209      	movs	r2, #9
   27ca4:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   27ca6:	23d8      	movs	r3, #216	; 0xd8
   27ca8:	18fb      	adds	r3, r7, r3
   27caa:	2210      	movs	r2, #16
   27cac:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   27cae:	23d8      	movs	r3, #216	; 0xd8
   27cb0:	18fb      	adds	r3, r7, r3
   27cb2:	881a      	ldrh	r2, [r3, #0]
   27cb4:	2388      	movs	r3, #136	; 0x88
   27cb6:	18f9      	adds	r1, r7, r3
   27cb8:	6838      	ldr	r0, [r7, #0]
   27cba:	2300      	movs	r3, #0
   27cbc:	4c93      	ldr	r4, [pc, #588]	; (27f0c <m2m_ip_cb+0x53c>)
   27cbe:	47a0      	blx	r4
   27cc0:	1e03      	subs	r3, r0, #0
   27cc2:	d000      	beq.n	27cc6 <m2m_ip_cb+0x2f6>
   27cc4:	e11a      	b.n	27efc <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   27cc6:	23d6      	movs	r3, #214	; 0xd6
   27cc8:	18fb      	adds	r3, r7, r3
   27cca:	2200      	movs	r2, #0
   27ccc:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   27cce:	23d5      	movs	r3, #213	; 0xd5
   27cd0:	18fb      	adds	r3, r7, r3
   27cd2:	2288      	movs	r2, #136	; 0x88
   27cd4:	18ba      	adds	r2, r7, r2
   27cd6:	7b12      	ldrb	r2, [r2, #12]
   27cd8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   27cda:	23d6      	movs	r3, #214	; 0xd6
   27cdc:	18fb      	adds	r3, r7, r3
   27cde:	2288      	movs	r2, #136	; 0x88
   27ce0:	18ba      	adds	r2, r7, r2
   27ce2:	89d2      	ldrh	r2, [r2, #14]
   27ce4:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   27ce6:	23d5      	movs	r3, #213	; 0xd5
   27ce8:	18fb      	adds	r3, r7, r3
   27cea:	781b      	ldrb	r3, [r3, #0]
   27cec:	b25b      	sxtb	r3, r3
   27cee:	4a88      	ldr	r2, [pc, #544]	; (27f10 <m2m_ip_cb+0x540>)
   27cf0:	011b      	lsls	r3, r3, #4
   27cf2:	18d3      	adds	r3, r2, r3
   27cf4:	330c      	adds	r3, #12
   27cf6:	2200      	movs	r2, #0
   27cf8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   27cfa:	23d2      	movs	r3, #210	; 0xd2
   27cfc:	18fb      	adds	r3, r7, r3
   27cfe:	2288      	movs	r2, #136	; 0x88
   27d00:	18ba      	adds	r2, r7, r2
   27d02:	8912      	ldrh	r2, [r2, #8]
   27d04:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   27d06:	23d0      	movs	r3, #208	; 0xd0
   27d08:	18fb      	adds	r3, r7, r3
   27d0a:	2288      	movs	r2, #136	; 0x88
   27d0c:	18ba      	adds	r2, r7, r2
   27d0e:	8952      	ldrh	r2, [r2, #10]
   27d10:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   27d12:	2388      	movs	r3, #136	; 0x88
   27d14:	18fb      	adds	r3, r7, r3
   27d16:	885a      	ldrh	r2, [r3, #2]
   27d18:	2370      	movs	r3, #112	; 0x70
   27d1a:	18fb      	adds	r3, r7, r3
   27d1c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   27d1e:	2388      	movs	r3, #136	; 0x88
   27d20:	18fb      	adds	r3, r7, r3
   27d22:	685a      	ldr	r2, [r3, #4]
   27d24:	2370      	movs	r3, #112	; 0x70
   27d26:	18fb      	adds	r3, r7, r3
   27d28:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   27d2a:	23d5      	movs	r3, #213	; 0xd5
   27d2c:	18fb      	adds	r3, r7, r3
   27d2e:	781b      	ldrb	r3, [r3, #0]
   27d30:	b25b      	sxtb	r3, r3
   27d32:	4a77      	ldr	r2, [pc, #476]	; (27f10 <m2m_ip_cb+0x540>)
   27d34:	011b      	lsls	r3, r3, #4
   27d36:	18d3      	adds	r3, r2, r3
   27d38:	3306      	adds	r3, #6
   27d3a:	881b      	ldrh	r3, [r3, #0]
   27d3c:	b29b      	uxth	r3, r3
   27d3e:	22d6      	movs	r2, #214	; 0xd6
   27d40:	18ba      	adds	r2, r7, r2
   27d42:	8812      	ldrh	r2, [r2, #0]
   27d44:	429a      	cmp	r2, r3
   27d46:	d148      	bne.n	27dda <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   27d48:	23d2      	movs	r3, #210	; 0xd2
   27d4a:	18fb      	adds	r3, r7, r3
   27d4c:	2200      	movs	r2, #0
   27d4e:	5e9b      	ldrsh	r3, [r3, r2]
   27d50:	2b00      	cmp	r3, #0
   27d52:	dd25      	ble.n	27da0 <m2m_ip_cb+0x3d0>
   27d54:	23d2      	movs	r3, #210	; 0xd2
   27d56:	18fb      	adds	r3, r7, r3
   27d58:	2200      	movs	r2, #0
   27d5a:	5e9a      	ldrsh	r2, [r3, r2]
   27d5c:	1d3b      	adds	r3, r7, #4
   27d5e:	881b      	ldrh	r3, [r3, #0]
   27d60:	429a      	cmp	r2, r3
   27d62:	da1d      	bge.n	27da0 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   27d64:	23d0      	movs	r3, #208	; 0xd0
   27d66:	18fb      	adds	r3, r7, r3
   27d68:	881b      	ldrh	r3, [r3, #0]
   27d6a:	683a      	ldr	r2, [r7, #0]
   27d6c:	18d3      	adds	r3, r2, r3
   27d6e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   27d70:	23d8      	movs	r3, #216	; 0xd8
   27d72:	18fb      	adds	r3, r7, r3
   27d74:	22d2      	movs	r2, #210	; 0xd2
   27d76:	18ba      	adds	r2, r7, r2
   27d78:	8812      	ldrh	r2, [r2, #0]
   27d7a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   27d7c:	683c      	ldr	r4, [r7, #0]
   27d7e:	23df      	movs	r3, #223	; 0xdf
   27d80:	18fb      	adds	r3, r7, r3
   27d82:	781a      	ldrb	r2, [r3, #0]
   27d84:	2370      	movs	r3, #112	; 0x70
   27d86:	18f9      	adds	r1, r7, r3
   27d88:	23d5      	movs	r3, #213	; 0xd5
   27d8a:	18fb      	adds	r3, r7, r3
   27d8c:	2000      	movs	r0, #0
   27d8e:	5618      	ldrsb	r0, [r3, r0]
   27d90:	23d8      	movs	r3, #216	; 0xd8
   27d92:	18fb      	adds	r3, r7, r3
   27d94:	881b      	ldrh	r3, [r3, #0]
   27d96:	9300      	str	r3, [sp, #0]
   27d98:	0023      	movs	r3, r4
   27d9a:	4c5e      	ldr	r4, [pc, #376]	; (27f14 <m2m_ip_cb+0x544>)
   27d9c:	47a0      	blx	r4
	{
   27d9e:	e0ad      	b.n	27efc <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   27da0:	2370      	movs	r3, #112	; 0x70
   27da2:	18fb      	adds	r3, r7, r3
   27da4:	22d2      	movs	r2, #210	; 0xd2
   27da6:	18ba      	adds	r2, r7, r2
   27da8:	8812      	ldrh	r2, [r2, #0]
   27daa:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   27dac:	2370      	movs	r3, #112	; 0x70
   27dae:	18fb      	adds	r3, r7, r3
   27db0:	2200      	movs	r2, #0
   27db2:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   27db4:	4b58      	ldr	r3, [pc, #352]	; (27f18 <m2m_ip_cb+0x548>)
   27db6:	681b      	ldr	r3, [r3, #0]
   27db8:	2b00      	cmp	r3, #0
   27dba:	d100      	bne.n	27dbe <m2m_ip_cb+0x3ee>
   27dbc:	e09e      	b.n	27efc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   27dbe:	4b56      	ldr	r3, [pc, #344]	; (27f18 <m2m_ip_cb+0x548>)
   27dc0:	681b      	ldr	r3, [r3, #0]
   27dc2:	2270      	movs	r2, #112	; 0x70
   27dc4:	18bc      	adds	r4, r7, r2
   27dc6:	22df      	movs	r2, #223	; 0xdf
   27dc8:	18ba      	adds	r2, r7, r2
   27dca:	7811      	ldrb	r1, [r2, #0]
   27dcc:	22d5      	movs	r2, #213	; 0xd5
   27dce:	18ba      	adds	r2, r7, r2
   27dd0:	2000      	movs	r0, #0
   27dd2:	5610      	ldrsb	r0, [r2, r0]
   27dd4:	0022      	movs	r2, r4
   27dd6:	4798      	blx	r3
	{
   27dd8:	e090      	b.n	27efc <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   27dda:	23d8      	movs	r3, #216	; 0xd8
   27ddc:	18fa      	adds	r2, r7, r3
   27dde:	1d3b      	adds	r3, r7, #4
   27de0:	8812      	ldrh	r2, [r2, #0]
   27de2:	881b      	ldrh	r3, [r3, #0]
   27de4:	429a      	cmp	r2, r3
   27de6:	d300      	bcc.n	27dea <m2m_ip_cb+0x41a>
   27de8:	e088      	b.n	27efc <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   27dea:	2301      	movs	r3, #1
   27dec:	2200      	movs	r2, #0
   27dee:	2100      	movs	r1, #0
   27df0:	2000      	movs	r0, #0
   27df2:	4c46      	ldr	r4, [pc, #280]	; (27f0c <m2m_ip_cb+0x53c>)
   27df4:	47a0      	blx	r4
	{
   27df6:	e081      	b.n	27efc <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   27df8:	1dfb      	adds	r3, r7, #7
   27dfa:	781b      	ldrb	r3, [r3, #0]
   27dfc:	2b45      	cmp	r3, #69	; 0x45
   27dfe:	d007      	beq.n	27e10 <m2m_ip_cb+0x440>
   27e00:	1dfb      	adds	r3, r7, #7
   27e02:	781b      	ldrb	r3, [r3, #0]
   27e04:	2b47      	cmp	r3, #71	; 0x47
   27e06:	d003      	beq.n	27e10 <m2m_ip_cb+0x440>
   27e08:	1dfb      	adds	r3, r7, #7
   27e0a:	781b      	ldrb	r3, [r3, #0]
   27e0c:	2b4c      	cmp	r3, #76	; 0x4c
   27e0e:	d14c      	bne.n	27eaa <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   27e10:	23de      	movs	r3, #222	; 0xde
   27e12:	18fb      	adds	r3, r7, r3
   27e14:	2207      	movs	r2, #7
   27e16:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   27e18:	1dfb      	adds	r3, r7, #7
   27e1a:	781b      	ldrb	r3, [r3, #0]
   27e1c:	2b47      	cmp	r3, #71	; 0x47
   27e1e:	d103      	bne.n	27e28 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   27e20:	23de      	movs	r3, #222	; 0xde
   27e22:	18fb      	adds	r3, r7, r3
   27e24:	2208      	movs	r2, #8
   27e26:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   27e28:	2364      	movs	r3, #100	; 0x64
   27e2a:	18f9      	adds	r1, r7, r3
   27e2c:	6838      	ldr	r0, [r7, #0]
   27e2e:	2300      	movs	r3, #0
   27e30:	2208      	movs	r2, #8
   27e32:	4c36      	ldr	r4, [pc, #216]	; (27f0c <m2m_ip_cb+0x53c>)
   27e34:	47a0      	blx	r4
   27e36:	1e03      	subs	r3, r0, #0
   27e38:	d162      	bne.n	27f00 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   27e3a:	23dc      	movs	r3, #220	; 0xdc
   27e3c:	18fb      	adds	r3, r7, r3
   27e3e:	2200      	movs	r2, #0
   27e40:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   27e42:	23db      	movs	r3, #219	; 0xdb
   27e44:	18fb      	adds	r3, r7, r3
   27e46:	2264      	movs	r2, #100	; 0x64
   27e48:	18ba      	adds	r2, r7, r2
   27e4a:	7812      	ldrb	r2, [r2, #0]
   27e4c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   27e4e:	23dc      	movs	r3, #220	; 0xdc
   27e50:	18fb      	adds	r3, r7, r3
   27e52:	2264      	movs	r2, #100	; 0x64
   27e54:	18ba      	adds	r2, r7, r2
   27e56:	8892      	ldrh	r2, [r2, #4]
   27e58:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   27e5a:	2364      	movs	r3, #100	; 0x64
   27e5c:	18fb      	adds	r3, r7, r3
   27e5e:	2202      	movs	r2, #2
   27e60:	5e9a      	ldrsh	r2, [r3, r2]
   27e62:	236e      	movs	r3, #110	; 0x6e
   27e64:	18fb      	adds	r3, r7, r3
   27e66:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   27e68:	23db      	movs	r3, #219	; 0xdb
   27e6a:	18fb      	adds	r3, r7, r3
   27e6c:	781b      	ldrb	r3, [r3, #0]
   27e6e:	b25b      	sxtb	r3, r3
   27e70:	4a27      	ldr	r2, [pc, #156]	; (27f10 <m2m_ip_cb+0x540>)
   27e72:	011b      	lsls	r3, r3, #4
   27e74:	18d3      	adds	r3, r2, r3
   27e76:	3306      	adds	r3, #6
   27e78:	881b      	ldrh	r3, [r3, #0]
   27e7a:	b29b      	uxth	r3, r3
   27e7c:	22dc      	movs	r2, #220	; 0xdc
   27e7e:	18ba      	adds	r2, r7, r2
   27e80:	8812      	ldrh	r2, [r2, #0]
   27e82:	429a      	cmp	r2, r3
   27e84:	d13c      	bne.n	27f00 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   27e86:	4b24      	ldr	r3, [pc, #144]	; (27f18 <m2m_ip_cb+0x548>)
   27e88:	681b      	ldr	r3, [r3, #0]
   27e8a:	2b00      	cmp	r3, #0
   27e8c:	d038      	beq.n	27f00 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   27e8e:	4b22      	ldr	r3, [pc, #136]	; (27f18 <m2m_ip_cb+0x548>)
   27e90:	681b      	ldr	r3, [r3, #0]
   27e92:	226e      	movs	r2, #110	; 0x6e
   27e94:	18bc      	adds	r4, r7, r2
   27e96:	22de      	movs	r2, #222	; 0xde
   27e98:	18ba      	adds	r2, r7, r2
   27e9a:	7811      	ldrb	r1, [r2, #0]
   27e9c:	22db      	movs	r2, #219	; 0xdb
   27e9e:	18ba      	adds	r2, r7, r2
   27ea0:	2000      	movs	r0, #0
   27ea2:	5610      	ldrsb	r0, [r2, r0]
   27ea4:	0022      	movs	r2, r4
   27ea6:	4798      	blx	r3
	{
   27ea8:	e02a      	b.n	27f00 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   27eaa:	1dfb      	adds	r3, r7, #7
   27eac:	781b      	ldrb	r3, [r3, #0]
   27eae:	2b52      	cmp	r3, #82	; 0x52
   27eb0:	d127      	bne.n	27f02 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   27eb2:	2350      	movs	r3, #80	; 0x50
   27eb4:	18f9      	adds	r1, r7, r3
   27eb6:	6838      	ldr	r0, [r7, #0]
   27eb8:	2301      	movs	r3, #1
   27eba:	2214      	movs	r2, #20
   27ebc:	4c13      	ldr	r4, [pc, #76]	; (27f0c <m2m_ip_cb+0x53c>)
   27ebe:	47a0      	blx	r4
   27ec0:	1e03      	subs	r3, r0, #0
   27ec2:	d11e      	bne.n	27f02 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   27ec4:	2350      	movs	r3, #80	; 0x50
   27ec6:	18fb      	adds	r3, r7, r3
   27ec8:	685b      	ldr	r3, [r3, #4]
   27eca:	001a      	movs	r2, r3
   27ecc:	4b13      	ldr	r3, [pc, #76]	; (27f1c <m2m_ip_cb+0x54c>)
   27ece:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   27ed0:	4b12      	ldr	r3, [pc, #72]	; (27f1c <m2m_ip_cb+0x54c>)
   27ed2:	681b      	ldr	r3, [r3, #0]
   27ed4:	2b00      	cmp	r3, #0
   27ed6:	d014      	beq.n	27f02 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   27ed8:	4b10      	ldr	r3, [pc, #64]	; (27f1c <m2m_ip_cb+0x54c>)
   27eda:	681c      	ldr	r4, [r3, #0]
   27edc:	2350      	movs	r3, #80	; 0x50
   27ede:	18fb      	adds	r3, r7, r3
   27ee0:	6818      	ldr	r0, [r3, #0]
   27ee2:	2350      	movs	r3, #80	; 0x50
   27ee4:	18fb      	adds	r3, r7, r3
   27ee6:	6899      	ldr	r1, [r3, #8]
   27ee8:	2350      	movs	r3, #80	; 0x50
   27eea:	18fb      	adds	r3, r7, r3
   27eec:	7c1b      	ldrb	r3, [r3, #16]
   27eee:	001a      	movs	r2, r3
   27ef0:	47a0      	blx	r4
}
   27ef2:	e006      	b.n	27f02 <m2m_ip_cb+0x532>
	{
   27ef4:	46c0      	nop			; (mov r8, r8)
   27ef6:	e004      	b.n	27f02 <m2m_ip_cb+0x532>
	{
   27ef8:	46c0      	nop			; (mov r8, r8)
   27efa:	e002      	b.n	27f02 <m2m_ip_cb+0x532>
	{
   27efc:	46c0      	nop			; (mov r8, r8)
   27efe:	e000      	b.n	27f02 <m2m_ip_cb+0x532>
	{
   27f00:	46c0      	nop			; (mov r8, r8)
}
   27f02:	46c0      	nop			; (mov r8, r8)
   27f04:	46bd      	mov	sp, r7
   27f06:	b039      	add	sp, #228	; 0xe4
   27f08:	bd90      	pop	{r4, r7, pc}
   27f0a:	46c0      	nop			; (mov r8, r8)
   27f0c:	000241cd 	.word	0x000241cd
   27f10:	20005a8c 	.word	0x20005a8c
   27f14:	000277d5 	.word	0x000277d5
   27f18:	20005b3c 	.word	0x20005b3c
   27f1c:	20005b40 	.word	0x20005b40

00027f20 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   27f20:	b580      	push	{r7, lr}
   27f22:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   27f24:	4b0c      	ldr	r3, [pc, #48]	; (27f58 <socketInit+0x38>)
   27f26:	781b      	ldrb	r3, [r3, #0]
   27f28:	b2db      	uxtb	r3, r3
   27f2a:	2b00      	cmp	r3, #0
   27f2c:	d110      	bne.n	27f50 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   27f2e:	4b0b      	ldr	r3, [pc, #44]	; (27f5c <socketInit+0x3c>)
   27f30:	22b0      	movs	r2, #176	; 0xb0
   27f32:	2100      	movs	r1, #0
   27f34:	0018      	movs	r0, r3
   27f36:	4b0a      	ldr	r3, [pc, #40]	; (27f60 <socketInit+0x40>)
   27f38:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   27f3a:	4b0a      	ldr	r3, [pc, #40]	; (27f64 <socketInit+0x44>)
   27f3c:	0019      	movs	r1, r3
   27f3e:	2002      	movs	r0, #2
   27f40:	4b09      	ldr	r3, [pc, #36]	; (27f68 <socketInit+0x48>)
   27f42:	4798      	blx	r3
		gbSocketInit	= 1;
   27f44:	4b04      	ldr	r3, [pc, #16]	; (27f58 <socketInit+0x38>)
   27f46:	2201      	movs	r2, #1
   27f48:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   27f4a:	4b08      	ldr	r3, [pc, #32]	; (27f6c <socketInit+0x4c>)
   27f4c:	2200      	movs	r2, #0
   27f4e:	801a      	strh	r2, [r3, #0]
	}
}
   27f50:	46c0      	nop			; (mov r8, r8)
   27f52:	46bd      	mov	sp, r7
   27f54:	bd80      	pop	{r7, pc}
   27f56:	46c0      	nop			; (mov r8, r8)
   27f58:	200041e0 	.word	0x200041e0
   27f5c:	20005a8c 	.word	0x20005a8c
   27f60:	00023651 	.word	0x00023651
   27f64:	000279d1 	.word	0x000279d1
   27f68:	0002434d 	.word	0x0002434d
   27f6c:	200041de 	.word	0x200041de

00027f70 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   27f70:	b580      	push	{r7, lr}
   27f72:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   27f74:	4b0a      	ldr	r3, [pc, #40]	; (27fa0 <socketDeinit+0x30>)
   27f76:	22b0      	movs	r2, #176	; 0xb0
   27f78:	2100      	movs	r1, #0
   27f7a:	0018      	movs	r0, r3
   27f7c:	4b09      	ldr	r3, [pc, #36]	; (27fa4 <socketDeinit+0x34>)
   27f7e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   27f80:	2100      	movs	r1, #0
   27f82:	2002      	movs	r0, #2
   27f84:	4b08      	ldr	r3, [pc, #32]	; (27fa8 <socketDeinit+0x38>)
   27f86:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   27f88:	4b08      	ldr	r3, [pc, #32]	; (27fac <socketDeinit+0x3c>)
   27f8a:	2200      	movs	r2, #0
   27f8c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   27f8e:	4b08      	ldr	r3, [pc, #32]	; (27fb0 <socketDeinit+0x40>)
   27f90:	2200      	movs	r2, #0
   27f92:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   27f94:	4b07      	ldr	r3, [pc, #28]	; (27fb4 <socketDeinit+0x44>)
   27f96:	2200      	movs	r2, #0
   27f98:	701a      	strb	r2, [r3, #0]
}
   27f9a:	46c0      	nop			; (mov r8, r8)
   27f9c:	46bd      	mov	sp, r7
   27f9e:	bd80      	pop	{r7, pc}
   27fa0:	20005a8c 	.word	0x20005a8c
   27fa4:	00023651 	.word	0x00023651
   27fa8:	0002434d 	.word	0x0002434d
   27fac:	20005b3c 	.word	0x20005b3c
   27fb0:	20005b44 	.word	0x20005b44
   27fb4:	200041e0 	.word	0x200041e0

00027fb8 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   27fb8:	b580      	push	{r7, lr}
   27fba:	b082      	sub	sp, #8
   27fbc:	af00      	add	r7, sp, #0
   27fbe:	6078      	str	r0, [r7, #4]
   27fc0:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   27fc2:	4b05      	ldr	r3, [pc, #20]	; (27fd8 <registerSocketCallback+0x20>)
   27fc4:	687a      	ldr	r2, [r7, #4]
   27fc6:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   27fc8:	4b04      	ldr	r3, [pc, #16]	; (27fdc <registerSocketCallback+0x24>)
   27fca:	683a      	ldr	r2, [r7, #0]
   27fcc:	601a      	str	r2, [r3, #0]
}
   27fce:	46c0      	nop			; (mov r8, r8)
   27fd0:	46bd      	mov	sp, r7
   27fd2:	b002      	add	sp, #8
   27fd4:	bd80      	pop	{r7, pc}
   27fd6:	46c0      	nop			; (mov r8, r8)
   27fd8:	20005b3c 	.word	0x20005b3c
   27fdc:	20005b44 	.word	0x20005b44

00027fe0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   27fe0:	b590      	push	{r4, r7, lr}
   27fe2:	b08d      	sub	sp, #52	; 0x34
   27fe4:	af04      	add	r7, sp, #16
   27fe6:	0004      	movs	r4, r0
   27fe8:	0008      	movs	r0, r1
   27fea:	0011      	movs	r1, r2
   27fec:	1dbb      	adds	r3, r7, #6
   27fee:	1c22      	adds	r2, r4, #0
   27ff0:	801a      	strh	r2, [r3, #0]
   27ff2:	1d7b      	adds	r3, r7, #5
   27ff4:	1c02      	adds	r2, r0, #0
   27ff6:	701a      	strb	r2, [r3, #0]
   27ff8:	1d3b      	adds	r3, r7, #4
   27ffa:	1c0a      	adds	r2, r1, #0
   27ffc:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   27ffe:	231f      	movs	r3, #31
   28000:	18fb      	adds	r3, r7, r3
   28002:	22ff      	movs	r2, #255	; 0xff
   28004:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   28006:	1dbb      	adds	r3, r7, #6
   28008:	881b      	ldrh	r3, [r3, #0]
   2800a:	2b02      	cmp	r3, #2
   2800c:	d000      	beq.n	28010 <socket+0x30>
   2800e:	e0ce      	b.n	281ae <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   28010:	1d7b      	adds	r3, r7, #5
   28012:	781b      	ldrb	r3, [r3, #0]
   28014:	2b01      	cmp	r3, #1
   28016:	d135      	bne.n	28084 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   28018:	231e      	movs	r3, #30
   2801a:	18fb      	adds	r3, r7, r3
   2801c:	2200      	movs	r2, #0
   2801e:	701a      	strb	r2, [r3, #0]
   28020:	e02a      	b.n	28078 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   28022:	2317      	movs	r3, #23
   28024:	18fb      	adds	r3, r7, r3
   28026:	4a66      	ldr	r2, [pc, #408]	; (281c0 <socket+0x1e0>)
   28028:	7812      	ldrb	r2, [r2, #0]
   2802a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   2802c:	4b64      	ldr	r3, [pc, #400]	; (281c0 <socket+0x1e0>)
   2802e:	781b      	ldrb	r3, [r3, #0]
   28030:	b2db      	uxtb	r3, r3
   28032:	011a      	lsls	r2, r3, #4
   28034:	4b63      	ldr	r3, [pc, #396]	; (281c4 <socket+0x1e4>)
   28036:	18d3      	adds	r3, r2, r3
   28038:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2803a:	4b61      	ldr	r3, [pc, #388]	; (281c0 <socket+0x1e0>)
   2803c:	781b      	ldrb	r3, [r3, #0]
   2803e:	b2db      	uxtb	r3, r3
   28040:	1c5a      	adds	r2, r3, #1
   28042:	4b61      	ldr	r3, [pc, #388]	; (281c8 <socket+0x1e8>)
   28044:	2107      	movs	r1, #7
   28046:	0010      	movs	r0, r2
   28048:	4798      	blx	r3
   2804a:	000b      	movs	r3, r1
   2804c:	b2da      	uxtb	r2, r3
   2804e:	4b5c      	ldr	r3, [pc, #368]	; (281c0 <socket+0x1e0>)
   28050:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   28052:	69bb      	ldr	r3, [r7, #24]
   28054:	7a9b      	ldrb	r3, [r3, #10]
   28056:	b2db      	uxtb	r3, r3
   28058:	2b00      	cmp	r3, #0
   2805a:	d106      	bne.n	2806a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   2805c:	231f      	movs	r3, #31
   2805e:	18fb      	adds	r3, r7, r3
   28060:	2217      	movs	r2, #23
   28062:	18ba      	adds	r2, r7, r2
   28064:	7812      	ldrb	r2, [r2, #0]
   28066:	701a      	strb	r2, [r3, #0]
					break;
   28068:	e04c      	b.n	28104 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2806a:	231e      	movs	r3, #30
   2806c:	18fb      	adds	r3, r7, r3
   2806e:	781a      	ldrb	r2, [r3, #0]
   28070:	231e      	movs	r3, #30
   28072:	18fb      	adds	r3, r7, r3
   28074:	3201      	adds	r2, #1
   28076:	701a      	strb	r2, [r3, #0]
   28078:	231e      	movs	r3, #30
   2807a:	18fb      	adds	r3, r7, r3
   2807c:	781b      	ldrb	r3, [r3, #0]
   2807e:	2b06      	cmp	r3, #6
   28080:	d9cf      	bls.n	28022 <socket+0x42>
   28082:	e03f      	b.n	28104 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   28084:	1d7b      	adds	r3, r7, #5
   28086:	781b      	ldrb	r3, [r3, #0]
   28088:	2b02      	cmp	r3, #2
   2808a:	d13b      	bne.n	28104 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   2808c:	4b4f      	ldr	r3, [pc, #316]	; (281cc <socket+0x1ec>)
   2808e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   28090:	231e      	movs	r3, #30
   28092:	18fb      	adds	r3, r7, r3
   28094:	2200      	movs	r2, #0
   28096:	701a      	strb	r2, [r3, #0]
   28098:	e02f      	b.n	280fa <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2809a:	2317      	movs	r3, #23
   2809c:	18fb      	adds	r3, r7, r3
   2809e:	4a4c      	ldr	r2, [pc, #304]	; (281d0 <socket+0x1f0>)
   280a0:	7812      	ldrb	r2, [r2, #0]
   280a2:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   280a4:	4b4a      	ldr	r3, [pc, #296]	; (281d0 <socket+0x1f0>)
   280a6:	781b      	ldrb	r3, [r3, #0]
   280a8:	b2db      	uxtb	r3, r3
   280aa:	011b      	lsls	r3, r3, #4
   280ac:	693a      	ldr	r2, [r7, #16]
   280ae:	18d3      	adds	r3, r2, r3
   280b0:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   280b2:	4b47      	ldr	r3, [pc, #284]	; (281d0 <socket+0x1f0>)
   280b4:	781b      	ldrb	r3, [r3, #0]
   280b6:	b2db      	uxtb	r3, r3
   280b8:	3301      	adds	r3, #1
   280ba:	4a46      	ldr	r2, [pc, #280]	; (281d4 <socket+0x1f4>)
   280bc:	4013      	ands	r3, r2
   280be:	d504      	bpl.n	280ca <socket+0xea>
   280c0:	3b01      	subs	r3, #1
   280c2:	2204      	movs	r2, #4
   280c4:	4252      	negs	r2, r2
   280c6:	4313      	orrs	r3, r2
   280c8:	3301      	adds	r3, #1
   280ca:	b2da      	uxtb	r2, r3
   280cc:	4b40      	ldr	r3, [pc, #256]	; (281d0 <socket+0x1f0>)
   280ce:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   280d0:	69bb      	ldr	r3, [r7, #24]
   280d2:	7a9b      	ldrb	r3, [r3, #10]
   280d4:	b2db      	uxtb	r3, r3
   280d6:	2b00      	cmp	r3, #0
   280d8:	d108      	bne.n	280ec <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   280da:	2317      	movs	r3, #23
   280dc:	18fb      	adds	r3, r7, r3
   280de:	781b      	ldrb	r3, [r3, #0]
   280e0:	3307      	adds	r3, #7
   280e2:	b2da      	uxtb	r2, r3
   280e4:	231f      	movs	r3, #31
   280e6:	18fb      	adds	r3, r7, r3
   280e8:	701a      	strb	r2, [r3, #0]
					break;
   280ea:	e00b      	b.n	28104 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   280ec:	231e      	movs	r3, #30
   280ee:	18fb      	adds	r3, r7, r3
   280f0:	781a      	ldrb	r2, [r3, #0]
   280f2:	231e      	movs	r3, #30
   280f4:	18fb      	adds	r3, r7, r3
   280f6:	3201      	adds	r2, #1
   280f8:	701a      	strb	r2, [r3, #0]
   280fa:	231e      	movs	r3, #30
   280fc:	18fb      	adds	r3, r7, r3
   280fe:	781b      	ldrb	r3, [r3, #0]
   28100:	2b03      	cmp	r3, #3
   28102:	d9ca      	bls.n	2809a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   28104:	231f      	movs	r3, #31
   28106:	18fb      	adds	r3, r7, r3
   28108:	781b      	ldrb	r3, [r3, #0]
   2810a:	2b7f      	cmp	r3, #127	; 0x7f
   2810c:	d84f      	bhi.n	281ae <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   2810e:	69bb      	ldr	r3, [r7, #24]
   28110:	2210      	movs	r2, #16
   28112:	2100      	movs	r1, #0
   28114:	0018      	movs	r0, r3
   28116:	4b30      	ldr	r3, [pc, #192]	; (281d8 <socket+0x1f8>)
   28118:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   2811a:	69bb      	ldr	r3, [r7, #24]
   2811c:	2201      	movs	r2, #1
   2811e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   28120:	4b2e      	ldr	r3, [pc, #184]	; (281dc <socket+0x1fc>)
   28122:	881b      	ldrh	r3, [r3, #0]
   28124:	b29b      	uxth	r3, r3
   28126:	3301      	adds	r3, #1
   28128:	b29a      	uxth	r2, r3
   2812a:	4b2c      	ldr	r3, [pc, #176]	; (281dc <socket+0x1fc>)
   2812c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   2812e:	4b2b      	ldr	r3, [pc, #172]	; (281dc <socket+0x1fc>)
   28130:	881b      	ldrh	r3, [r3, #0]
   28132:	b29b      	uxth	r3, r3
   28134:	2b00      	cmp	r3, #0
   28136:	d106      	bne.n	28146 <socket+0x166>
				++gu16SessionID;
   28138:	4b28      	ldr	r3, [pc, #160]	; (281dc <socket+0x1fc>)
   2813a:	881b      	ldrh	r3, [r3, #0]
   2813c:	b29b      	uxth	r3, r3
   2813e:	3301      	adds	r3, #1
   28140:	b29a      	uxth	r2, r3
   28142:	4b26      	ldr	r3, [pc, #152]	; (281dc <socket+0x1fc>)
   28144:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   28146:	4b25      	ldr	r3, [pc, #148]	; (281dc <socket+0x1fc>)
   28148:	881b      	ldrh	r3, [r3, #0]
   2814a:	b29a      	uxth	r2, r3
   2814c:	69bb      	ldr	r3, [r7, #24]
   2814e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   28150:	4b23      	ldr	r3, [pc, #140]	; (281e0 <socket+0x200>)
   28152:	0018      	movs	r0, r3
   28154:	4b23      	ldr	r3, [pc, #140]	; (281e4 <socket+0x204>)
   28156:	4798      	blx	r3
   28158:	231f      	movs	r3, #31
   2815a:	18fb      	adds	r3, r7, r3
   2815c:	2100      	movs	r1, #0
   2815e:	5659      	ldrsb	r1, [r3, r1]
   28160:	4b1e      	ldr	r3, [pc, #120]	; (281dc <socket+0x1fc>)
   28162:	881b      	ldrh	r3, [r3, #0]
   28164:	b29b      	uxth	r3, r3
   28166:	001a      	movs	r2, r3
   28168:	4b1f      	ldr	r3, [pc, #124]	; (281e8 <socket+0x208>)
   2816a:	0018      	movs	r0, r3
   2816c:	4b1d      	ldr	r3, [pc, #116]	; (281e4 <socket+0x204>)
   2816e:	4798      	blx	r3
   28170:	4b1e      	ldr	r3, [pc, #120]	; (281ec <socket+0x20c>)
   28172:	0018      	movs	r0, r3
   28174:	4b1b      	ldr	r3, [pc, #108]	; (281e4 <socket+0x204>)
   28176:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   28178:	1d3b      	adds	r3, r7, #4
   2817a:	781b      	ldrb	r3, [r3, #0]
   2817c:	2201      	movs	r2, #1
   2817e:	4013      	ands	r3, r2
   28180:	d015      	beq.n	281ae <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   28182:	230c      	movs	r3, #12
   28184:	18fb      	adds	r3, r7, r3
   28186:	221f      	movs	r2, #31
   28188:	18ba      	adds	r2, r7, r2
   2818a:	7812      	ldrb	r2, [r2, #0]
   2818c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2818e:	69bb      	ldr	r3, [r7, #24]
   28190:	2221      	movs	r2, #33	; 0x21
   28192:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   28194:	230c      	movs	r3, #12
   28196:	18fa      	adds	r2, r7, r3
   28198:	2300      	movs	r3, #0
   2819a:	9302      	str	r3, [sp, #8]
   2819c:	2300      	movs	r3, #0
   2819e:	9301      	str	r3, [sp, #4]
   281a0:	2300      	movs	r3, #0
   281a2:	9300      	str	r3, [sp, #0]
   281a4:	2304      	movs	r3, #4
   281a6:	2150      	movs	r1, #80	; 0x50
   281a8:	2002      	movs	r0, #2
   281aa:	4c11      	ldr	r4, [pc, #68]	; (281f0 <socket+0x210>)
   281ac:	47a0      	blx	r4
			}
		}
	}
	return sock;
   281ae:	231f      	movs	r3, #31
   281b0:	18fb      	adds	r3, r7, r3
   281b2:	781b      	ldrb	r3, [r3, #0]
   281b4:	b25b      	sxtb	r3, r3
}
   281b6:	0018      	movs	r0, r3
   281b8:	46bd      	mov	sp, r7
   281ba:	b009      	add	sp, #36	; 0x24
   281bc:	bd90      	pop	{r4, r7, pc}
   281be:	46c0      	nop			; (mov r8, r8)
   281c0:	200041e1 	.word	0x200041e1
   281c4:	20005a8c 	.word	0x20005a8c
   281c8:	00035729 	.word	0x00035729
   281cc:	20005afc 	.word	0x20005afc
   281d0:	200041e2 	.word	0x200041e2
   281d4:	80000003 	.word	0x80000003
   281d8:	00023651 	.word	0x00023651
   281dc:	200041de 	.word	0x200041de
   281e0:	0003c518 	.word	0x0003c518
   281e4:	00020889 	.word	0x00020889
   281e8:	0003c53c 	.word	0x0003c53c
   281ec:	0003c538 	.word	0x0003c538
   281f0:	000238b1 	.word	0x000238b1

000281f4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   281f4:	b5b0      	push	{r4, r5, r7, lr}
   281f6:	b08a      	sub	sp, #40	; 0x28
   281f8:	af04      	add	r7, sp, #16
   281fa:	6039      	str	r1, [r7, #0]
   281fc:	0011      	movs	r1, r2
   281fe:	1dfb      	adds	r3, r7, #7
   28200:	1c02      	adds	r2, r0, #0
   28202:	701a      	strb	r2, [r3, #0]
   28204:	1dbb      	adds	r3, r7, #6
   28206:	1c0a      	adds	r2, r1, #0
   28208:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2820a:	2317      	movs	r3, #23
   2820c:	18fb      	adds	r3, r7, r3
   2820e:	22fa      	movs	r2, #250	; 0xfa
   28210:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   28212:	1dfb      	adds	r3, r7, #7
   28214:	781b      	ldrb	r3, [r3, #0]
   28216:	2b7f      	cmp	r3, #127	; 0x7f
   28218:	d867      	bhi.n	282ea <connect+0xf6>
   2821a:	683b      	ldr	r3, [r7, #0]
   2821c:	2b00      	cmp	r3, #0
   2821e:	d064      	beq.n	282ea <connect+0xf6>
   28220:	1dfb      	adds	r3, r7, #7
   28222:	781b      	ldrb	r3, [r3, #0]
   28224:	b25b      	sxtb	r3, r3
   28226:	4a35      	ldr	r2, [pc, #212]	; (282fc <connect+0x108>)
   28228:	011b      	lsls	r3, r3, #4
   2822a:	18d3      	adds	r3, r2, r3
   2822c:	330a      	adds	r3, #10
   2822e:	781b      	ldrb	r3, [r3, #0]
   28230:	b2db      	uxtb	r3, r3
   28232:	2b01      	cmp	r3, #1
   28234:	d159      	bne.n	282ea <connect+0xf6>
   28236:	1dbb      	adds	r3, r7, #6
   28238:	781b      	ldrb	r3, [r3, #0]
   2823a:	2b00      	cmp	r3, #0
   2823c:	d055      	beq.n	282ea <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2823e:	2316      	movs	r3, #22
   28240:	18fb      	adds	r3, r7, r3
   28242:	2244      	movs	r2, #68	; 0x44
   28244:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   28246:	1dfb      	adds	r3, r7, #7
   28248:	781b      	ldrb	r3, [r3, #0]
   2824a:	b25b      	sxtb	r3, r3
   2824c:	4a2b      	ldr	r2, [pc, #172]	; (282fc <connect+0x108>)
   2824e:	011b      	lsls	r3, r3, #4
   28250:	18d3      	adds	r3, r2, r3
   28252:	330b      	adds	r3, #11
   28254:	781b      	ldrb	r3, [r3, #0]
   28256:	b2db      	uxtb	r3, r3
   28258:	001a      	movs	r2, r3
   2825a:	2301      	movs	r3, #1
   2825c:	4013      	ands	r3, r2
   2825e:	d00f      	beq.n	28280 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   28260:	2316      	movs	r3, #22
   28262:	18fb      	adds	r3, r7, r3
   28264:	224b      	movs	r2, #75	; 0x4b
   28266:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   28268:	1dfb      	adds	r3, r7, #7
   2826a:	781b      	ldrb	r3, [r3, #0]
   2826c:	b25b      	sxtb	r3, r3
   2826e:	4a23      	ldr	r2, [pc, #140]	; (282fc <connect+0x108>)
   28270:	011b      	lsls	r3, r3, #4
   28272:	18d3      	adds	r3, r2, r3
   28274:	330b      	adds	r3, #11
   28276:	781b      	ldrb	r3, [r3, #0]
   28278:	b2da      	uxtb	r2, r3
   2827a:	2308      	movs	r3, #8
   2827c:	18fb      	adds	r3, r7, r3
   2827e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   28280:	2308      	movs	r3, #8
   28282:	18fb      	adds	r3, r7, r3
   28284:	1dfa      	adds	r2, r7, #7
   28286:	7812      	ldrb	r2, [r2, #0]
   28288:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2828a:	6839      	ldr	r1, [r7, #0]
   2828c:	2308      	movs	r3, #8
   2828e:	18fb      	adds	r3, r7, r3
   28290:	2208      	movs	r2, #8
   28292:	0018      	movs	r0, r3
   28294:	4b1a      	ldr	r3, [pc, #104]	; (28300 <connect+0x10c>)
   28296:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   28298:	1dfb      	adds	r3, r7, #7
   2829a:	781b      	ldrb	r3, [r3, #0]
   2829c:	b25b      	sxtb	r3, r3
   2829e:	4a17      	ldr	r2, [pc, #92]	; (282fc <connect+0x108>)
   282a0:	011b      	lsls	r3, r3, #4
   282a2:	18d3      	adds	r3, r2, r3
   282a4:	3306      	adds	r3, #6
   282a6:	881b      	ldrh	r3, [r3, #0]
   282a8:	b29a      	uxth	r2, r3
   282aa:	2308      	movs	r3, #8
   282ac:	18fb      	adds	r3, r7, r3
   282ae:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   282b0:	2317      	movs	r3, #23
   282b2:	18fc      	adds	r4, r7, r3
   282b4:	2308      	movs	r3, #8
   282b6:	18fa      	adds	r2, r7, r3
   282b8:	2316      	movs	r3, #22
   282ba:	18fb      	adds	r3, r7, r3
   282bc:	7819      	ldrb	r1, [r3, #0]
   282be:	2300      	movs	r3, #0
   282c0:	9302      	str	r3, [sp, #8]
   282c2:	2300      	movs	r3, #0
   282c4:	9301      	str	r3, [sp, #4]
   282c6:	2300      	movs	r3, #0
   282c8:	9300      	str	r3, [sp, #0]
   282ca:	230c      	movs	r3, #12
   282cc:	2002      	movs	r0, #2
   282ce:	4d0d      	ldr	r5, [pc, #52]	; (28304 <connect+0x110>)
   282d0:	47a8      	blx	r5
   282d2:	0003      	movs	r3, r0
   282d4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   282d6:	2317      	movs	r3, #23
   282d8:	18fb      	adds	r3, r7, r3
   282da:	781b      	ldrb	r3, [r3, #0]
   282dc:	b25b      	sxtb	r3, r3
   282de:	2b00      	cmp	r3, #0
   282e0:	d003      	beq.n	282ea <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   282e2:	2317      	movs	r3, #23
   282e4:	18fb      	adds	r3, r7, r3
   282e6:	22f7      	movs	r2, #247	; 0xf7
   282e8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   282ea:	2317      	movs	r3, #23
   282ec:	18fb      	adds	r3, r7, r3
   282ee:	781b      	ldrb	r3, [r3, #0]
   282f0:	b25b      	sxtb	r3, r3
}
   282f2:	0018      	movs	r0, r3
   282f4:	46bd      	mov	sp, r7
   282f6:	b006      	add	sp, #24
   282f8:	bdb0      	pop	{r4, r5, r7, pc}
   282fa:	46c0      	nop			; (mov r8, r8)
   282fc:	20005a8c 	.word	0x20005a8c
   28300:	00023615 	.word	0x00023615
   28304:	000238b1 	.word	0x000238b1

00028308 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   28308:	b590      	push	{r4, r7, lr}
   2830a:	b08f      	sub	sp, #60	; 0x3c
   2830c:	af04      	add	r7, sp, #16
   2830e:	0004      	movs	r4, r0
   28310:	60b9      	str	r1, [r7, #8]
   28312:	0010      	movs	r0, r2
   28314:	0019      	movs	r1, r3
   28316:	230f      	movs	r3, #15
   28318:	18fb      	adds	r3, r7, r3
   2831a:	1c22      	adds	r2, r4, #0
   2831c:	701a      	strb	r2, [r3, #0]
   2831e:	230c      	movs	r3, #12
   28320:	18fb      	adds	r3, r7, r3
   28322:	1c02      	adds	r2, r0, #0
   28324:	801a      	strh	r2, [r3, #0]
   28326:	1dbb      	adds	r3, r7, #6
   28328:	1c0a      	adds	r2, r1, #0
   2832a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   2832c:	2326      	movs	r3, #38	; 0x26
   2832e:	18fb      	adds	r3, r7, r3
   28330:	2206      	movs	r2, #6
   28332:	4252      	negs	r2, r2
   28334:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   28336:	230f      	movs	r3, #15
   28338:	18fb      	adds	r3, r7, r3
   2833a:	781b      	ldrb	r3, [r3, #0]
   2833c:	2b7f      	cmp	r3, #127	; 0x7f
   2833e:	d900      	bls.n	28342 <send+0x3a>
   28340:	e087      	b.n	28452 <send+0x14a>
   28342:	68bb      	ldr	r3, [r7, #8]
   28344:	2b00      	cmp	r3, #0
   28346:	d100      	bne.n	2834a <send+0x42>
   28348:	e083      	b.n	28452 <send+0x14a>
   2834a:	230c      	movs	r3, #12
   2834c:	18fb      	adds	r3, r7, r3
   2834e:	881a      	ldrh	r2, [r3, #0]
   28350:	23af      	movs	r3, #175	; 0xaf
   28352:	00db      	lsls	r3, r3, #3
   28354:	429a      	cmp	r2, r3
   28356:	d900      	bls.n	2835a <send+0x52>
   28358:	e07b      	b.n	28452 <send+0x14a>
   2835a:	230f      	movs	r3, #15
   2835c:	18fb      	adds	r3, r7, r3
   2835e:	781b      	ldrb	r3, [r3, #0]
   28360:	b25b      	sxtb	r3, r3
   28362:	4a40      	ldr	r2, [pc, #256]	; (28464 <send+0x15c>)
   28364:	011b      	lsls	r3, r3, #4
   28366:	18d3      	adds	r3, r2, r3
   28368:	330a      	adds	r3, #10
   2836a:	781b      	ldrb	r3, [r3, #0]
   2836c:	b2db      	uxtb	r3, r3
   2836e:	2b01      	cmp	r3, #1
   28370:	d16f      	bne.n	28452 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   28372:	2323      	movs	r3, #35	; 0x23
   28374:	18fb      	adds	r3, r7, r3
   28376:	2245      	movs	r2, #69	; 0x45
   28378:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2837a:	2324      	movs	r3, #36	; 0x24
   2837c:	18fb      	adds	r3, r7, r3
   2837e:	2250      	movs	r2, #80	; 0x50
   28380:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   28382:	2310      	movs	r3, #16
   28384:	18fb      	adds	r3, r7, r3
   28386:	220f      	movs	r2, #15
   28388:	18ba      	adds	r2, r7, r2
   2838a:	7812      	ldrb	r2, [r2, #0]
   2838c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2838e:	2310      	movs	r3, #16
   28390:	18fb      	adds	r3, r7, r3
   28392:	220c      	movs	r2, #12
   28394:	18ba      	adds	r2, r7, r2
   28396:	8812      	ldrh	r2, [r2, #0]
   28398:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2839a:	230f      	movs	r3, #15
   2839c:	18fb      	adds	r3, r7, r3
   2839e:	781b      	ldrb	r3, [r3, #0]
   283a0:	b25b      	sxtb	r3, r3
   283a2:	4a30      	ldr	r2, [pc, #192]	; (28464 <send+0x15c>)
   283a4:	011b      	lsls	r3, r3, #4
   283a6:	18d3      	adds	r3, r2, r3
   283a8:	3306      	adds	r3, #6
   283aa:	881b      	ldrh	r3, [r3, #0]
   283ac:	b29a      	uxth	r2, r3
   283ae:	2310      	movs	r3, #16
   283b0:	18fb      	adds	r3, r7, r3
   283b2:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   283b4:	230f      	movs	r3, #15
   283b6:	18fb      	adds	r3, r7, r3
   283b8:	781b      	ldrb	r3, [r3, #0]
   283ba:	b25b      	sxtb	r3, r3
   283bc:	2b06      	cmp	r3, #6
   283be:	dd03      	ble.n	283c8 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   283c0:	2324      	movs	r3, #36	; 0x24
   283c2:	18fb      	adds	r3, r7, r3
   283c4:	2244      	movs	r2, #68	; 0x44
   283c6:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   283c8:	230f      	movs	r3, #15
   283ca:	18fb      	adds	r3, r7, r3
   283cc:	781b      	ldrb	r3, [r3, #0]
   283ce:	b25b      	sxtb	r3, r3
   283d0:	4a24      	ldr	r2, [pc, #144]	; (28464 <send+0x15c>)
   283d2:	011b      	lsls	r3, r3, #4
   283d4:	18d3      	adds	r3, r2, r3
   283d6:	330b      	adds	r3, #11
   283d8:	781b      	ldrb	r3, [r3, #0]
   283da:	b2db      	uxtb	r3, r3
   283dc:	001a      	movs	r2, r3
   283de:	2301      	movs	r3, #1
   283e0:	4013      	ands	r3, r2
   283e2:	d00f      	beq.n	28404 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   283e4:	2323      	movs	r3, #35	; 0x23
   283e6:	18fb      	adds	r3, r7, r3
   283e8:	224c      	movs	r2, #76	; 0x4c
   283ea:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   283ec:	230f      	movs	r3, #15
   283ee:	18fb      	adds	r3, r7, r3
   283f0:	2200      	movs	r2, #0
   283f2:	569a      	ldrsb	r2, [r3, r2]
   283f4:	2324      	movs	r3, #36	; 0x24
   283f6:	18fb      	adds	r3, r7, r3
   283f8:	491a      	ldr	r1, [pc, #104]	; (28464 <send+0x15c>)
   283fa:	0112      	lsls	r2, r2, #4
   283fc:	188a      	adds	r2, r1, r2
   283fe:	3208      	adds	r2, #8
   28400:	8812      	ldrh	r2, [r2, #0]
   28402:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   28404:	2323      	movs	r3, #35	; 0x23
   28406:	18fb      	adds	r3, r7, r3
   28408:	781b      	ldrb	r3, [r3, #0]
   2840a:	2280      	movs	r2, #128	; 0x80
   2840c:	4252      	negs	r2, r2
   2840e:	4313      	orrs	r3, r2
   28410:	b2d9      	uxtb	r1, r3
   28412:	2310      	movs	r3, #16
   28414:	18fa      	adds	r2, r7, r3
   28416:	2324      	movs	r3, #36	; 0x24
   28418:	18fb      	adds	r3, r7, r3
   2841a:	881b      	ldrh	r3, [r3, #0]
   2841c:	9302      	str	r3, [sp, #8]
   2841e:	230c      	movs	r3, #12
   28420:	18fb      	adds	r3, r7, r3
   28422:	881b      	ldrh	r3, [r3, #0]
   28424:	9301      	str	r3, [sp, #4]
   28426:	68bb      	ldr	r3, [r7, #8]
   28428:	9300      	str	r3, [sp, #0]
   2842a:	2310      	movs	r3, #16
   2842c:	2002      	movs	r0, #2
   2842e:	4c0e      	ldr	r4, [pc, #56]	; (28468 <send+0x160>)
   28430:	47a0      	blx	r4
   28432:	0003      	movs	r3, r0
   28434:	001a      	movs	r2, r3
   28436:	2326      	movs	r3, #38	; 0x26
   28438:	18fb      	adds	r3, r7, r3
   2843a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   2843c:	2326      	movs	r3, #38	; 0x26
   2843e:	18fb      	adds	r3, r7, r3
   28440:	2200      	movs	r2, #0
   28442:	5e9b      	ldrsh	r3, [r3, r2]
   28444:	2b00      	cmp	r3, #0
   28446:	d004      	beq.n	28452 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   28448:	2326      	movs	r3, #38	; 0x26
   2844a:	18fb      	adds	r3, r7, r3
   2844c:	220e      	movs	r2, #14
   2844e:	4252      	negs	r2, r2
   28450:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   28452:	2326      	movs	r3, #38	; 0x26
   28454:	18fb      	adds	r3, r7, r3
   28456:	2200      	movs	r2, #0
   28458:	5e9b      	ldrsh	r3, [r3, r2]
}
   2845a:	0018      	movs	r0, r3
   2845c:	46bd      	mov	sp, r7
   2845e:	b00b      	add	sp, #44	; 0x2c
   28460:	bd90      	pop	{r4, r7, pc}
   28462:	46c0      	nop			; (mov r8, r8)
   28464:	20005a8c 	.word	0x20005a8c
   28468:	000238b1 	.word	0x000238b1

0002846c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   2846c:	b590      	push	{r4, r7, lr}
   2846e:	b08d      	sub	sp, #52	; 0x34
   28470:	af04      	add	r7, sp, #16
   28472:	60b9      	str	r1, [r7, #8]
   28474:	0011      	movs	r1, r2
   28476:	607b      	str	r3, [r7, #4]
   28478:	230f      	movs	r3, #15
   2847a:	18fb      	adds	r3, r7, r3
   2847c:	1c02      	adds	r2, r0, #0
   2847e:	701a      	strb	r2, [r3, #0]
   28480:	230c      	movs	r3, #12
   28482:	18fb      	adds	r3, r7, r3
   28484:	1c0a      	adds	r2, r1, #0
   28486:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   28488:	231e      	movs	r3, #30
   2848a:	18fb      	adds	r3, r7, r3
   2848c:	2206      	movs	r2, #6
   2848e:	4252      	negs	r2, r2
   28490:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   28492:	230f      	movs	r3, #15
   28494:	18fb      	adds	r3, r7, r3
   28496:	781b      	ldrb	r3, [r3, #0]
   28498:	2b7f      	cmp	r3, #127	; 0x7f
   2849a:	d900      	bls.n	2849e <recv+0x32>
   2849c:	e099      	b.n	285d2 <recv+0x166>
   2849e:	68bb      	ldr	r3, [r7, #8]
   284a0:	2b00      	cmp	r3, #0
   284a2:	d100      	bne.n	284a6 <recv+0x3a>
   284a4:	e095      	b.n	285d2 <recv+0x166>
   284a6:	230c      	movs	r3, #12
   284a8:	18fb      	adds	r3, r7, r3
   284aa:	881b      	ldrh	r3, [r3, #0]
   284ac:	2b00      	cmp	r3, #0
   284ae:	d100      	bne.n	284b2 <recv+0x46>
   284b0:	e08f      	b.n	285d2 <recv+0x166>
   284b2:	230f      	movs	r3, #15
   284b4:	18fb      	adds	r3, r7, r3
   284b6:	781b      	ldrb	r3, [r3, #0]
   284b8:	b25b      	sxtb	r3, r3
   284ba:	4a4a      	ldr	r2, [pc, #296]	; (285e4 <recv+0x178>)
   284bc:	011b      	lsls	r3, r3, #4
   284be:	18d3      	adds	r3, r2, r3
   284c0:	330a      	adds	r3, #10
   284c2:	781b      	ldrb	r3, [r3, #0]
   284c4:	b2db      	uxtb	r3, r3
   284c6:	2b01      	cmp	r3, #1
   284c8:	d000      	beq.n	284cc <recv+0x60>
   284ca:	e082      	b.n	285d2 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   284cc:	231e      	movs	r3, #30
   284ce:	18fb      	adds	r3, r7, r3
   284d0:	2200      	movs	r2, #0
   284d2:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   284d4:	230f      	movs	r3, #15
   284d6:	18fb      	adds	r3, r7, r3
   284d8:	2200      	movs	r2, #0
   284da:	569a      	ldrsb	r2, [r3, r2]
   284dc:	4b41      	ldr	r3, [pc, #260]	; (285e4 <recv+0x178>)
   284de:	0112      	lsls	r2, r2, #4
   284e0:	68b9      	ldr	r1, [r7, #8]
   284e2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   284e4:	230f      	movs	r3, #15
   284e6:	18fb      	adds	r3, r7, r3
   284e8:	781b      	ldrb	r3, [r3, #0]
   284ea:	b25b      	sxtb	r3, r3
   284ec:	4a3d      	ldr	r2, [pc, #244]	; (285e4 <recv+0x178>)
   284ee:	011b      	lsls	r3, r3, #4
   284f0:	18d3      	adds	r3, r2, r3
   284f2:	3304      	adds	r3, #4
   284f4:	220c      	movs	r2, #12
   284f6:	18ba      	adds	r2, r7, r2
   284f8:	8812      	ldrh	r2, [r2, #0]
   284fa:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   284fc:	230f      	movs	r3, #15
   284fe:	18fb      	adds	r3, r7, r3
   28500:	781b      	ldrb	r3, [r3, #0]
   28502:	b25b      	sxtb	r3, r3
   28504:	4a37      	ldr	r2, [pc, #220]	; (285e4 <recv+0x178>)
   28506:	011b      	lsls	r3, r3, #4
   28508:	18d3      	adds	r3, r2, r3
   2850a:	330c      	adds	r3, #12
   2850c:	781b      	ldrb	r3, [r3, #0]
   2850e:	b2db      	uxtb	r3, r3
   28510:	2b00      	cmp	r3, #0
   28512:	d15e      	bne.n	285d2 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   28514:	231d      	movs	r3, #29
   28516:	18fb      	adds	r3, r7, r3
   28518:	2246      	movs	r2, #70	; 0x46
   2851a:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   2851c:	230f      	movs	r3, #15
   2851e:	18fb      	adds	r3, r7, r3
   28520:	781b      	ldrb	r3, [r3, #0]
   28522:	b25b      	sxtb	r3, r3
   28524:	4a2f      	ldr	r2, [pc, #188]	; (285e4 <recv+0x178>)
   28526:	011b      	lsls	r3, r3, #4
   28528:	18d3      	adds	r3, r2, r3
   2852a:	330c      	adds	r3, #12
   2852c:	2201      	movs	r2, #1
   2852e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   28530:	230f      	movs	r3, #15
   28532:	18fb      	adds	r3, r7, r3
   28534:	781b      	ldrb	r3, [r3, #0]
   28536:	b25b      	sxtb	r3, r3
   28538:	4a2a      	ldr	r2, [pc, #168]	; (285e4 <recv+0x178>)
   2853a:	011b      	lsls	r3, r3, #4
   2853c:	18d3      	adds	r3, r2, r3
   2853e:	330b      	adds	r3, #11
   28540:	781b      	ldrb	r3, [r3, #0]
   28542:	b2db      	uxtb	r3, r3
   28544:	001a      	movs	r2, r3
   28546:	2301      	movs	r3, #1
   28548:	4013      	ands	r3, r2
   2854a:	d003      	beq.n	28554 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   2854c:	231d      	movs	r3, #29
   2854e:	18fb      	adds	r3, r7, r3
   28550:	224d      	movs	r2, #77	; 0x4d
   28552:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   28554:	687b      	ldr	r3, [r7, #4]
   28556:	2b00      	cmp	r3, #0
   28558:	d105      	bne.n	28566 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2855a:	2314      	movs	r3, #20
   2855c:	18fb      	adds	r3, r7, r3
   2855e:	2201      	movs	r2, #1
   28560:	4252      	negs	r2, r2
   28562:	601a      	str	r2, [r3, #0]
   28564:	e003      	b.n	2856e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   28566:	2314      	movs	r3, #20
   28568:	18fb      	adds	r3, r7, r3
   2856a:	687a      	ldr	r2, [r7, #4]
   2856c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2856e:	2314      	movs	r3, #20
   28570:	18fb      	adds	r3, r7, r3
   28572:	220f      	movs	r2, #15
   28574:	18ba      	adds	r2, r7, r2
   28576:	7812      	ldrb	r2, [r2, #0]
   28578:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2857a:	230f      	movs	r3, #15
   2857c:	18fb      	adds	r3, r7, r3
   2857e:	781b      	ldrb	r3, [r3, #0]
   28580:	b25b      	sxtb	r3, r3
   28582:	4a18      	ldr	r2, [pc, #96]	; (285e4 <recv+0x178>)
   28584:	011b      	lsls	r3, r3, #4
   28586:	18d3      	adds	r3, r2, r3
   28588:	3306      	adds	r3, #6
   2858a:	881b      	ldrh	r3, [r3, #0]
   2858c:	b29a      	uxth	r2, r3
   2858e:	2314      	movs	r3, #20
   28590:	18fb      	adds	r3, r7, r3
   28592:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   28594:	2314      	movs	r3, #20
   28596:	18fa      	adds	r2, r7, r3
   28598:	231d      	movs	r3, #29
   2859a:	18fb      	adds	r3, r7, r3
   2859c:	7819      	ldrb	r1, [r3, #0]
   2859e:	2300      	movs	r3, #0
   285a0:	9302      	str	r3, [sp, #8]
   285a2:	2300      	movs	r3, #0
   285a4:	9301      	str	r3, [sp, #4]
   285a6:	2300      	movs	r3, #0
   285a8:	9300      	str	r3, [sp, #0]
   285aa:	2308      	movs	r3, #8
   285ac:	2002      	movs	r0, #2
   285ae:	4c0e      	ldr	r4, [pc, #56]	; (285e8 <recv+0x17c>)
   285b0:	47a0      	blx	r4
   285b2:	0003      	movs	r3, r0
   285b4:	001a      	movs	r2, r3
   285b6:	231e      	movs	r3, #30
   285b8:	18fb      	adds	r3, r7, r3
   285ba:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   285bc:	231e      	movs	r3, #30
   285be:	18fb      	adds	r3, r7, r3
   285c0:	2200      	movs	r2, #0
   285c2:	5e9b      	ldrsh	r3, [r3, r2]
   285c4:	2b00      	cmp	r3, #0
   285c6:	d004      	beq.n	285d2 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   285c8:	231e      	movs	r3, #30
   285ca:	18fb      	adds	r3, r7, r3
   285cc:	220e      	movs	r2, #14
   285ce:	4252      	negs	r2, r2
   285d0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   285d2:	231e      	movs	r3, #30
   285d4:	18fb      	adds	r3, r7, r3
   285d6:	2200      	movs	r2, #0
   285d8:	5e9b      	ldrsh	r3, [r3, r2]
}
   285da:	0018      	movs	r0, r3
   285dc:	46bd      	mov	sp, r7
   285de:	b009      	add	sp, #36	; 0x24
   285e0:	bd90      	pop	{r4, r7, pc}
   285e2:	46c0      	nop			; (mov r8, r8)
   285e4:	20005a8c 	.word	0x20005a8c
   285e8:	000238b1 	.word	0x000238b1

000285ec <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   285ec:	b5b0      	push	{r4, r5, r7, lr}
   285ee:	b088      	sub	sp, #32
   285f0:	af04      	add	r7, sp, #16
   285f2:	0002      	movs	r2, r0
   285f4:	1dfb      	adds	r3, r7, #7
   285f6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   285f8:	230f      	movs	r3, #15
   285fa:	18fb      	adds	r3, r7, r3
   285fc:	22fa      	movs	r2, #250	; 0xfa
   285fe:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   28600:	4b43      	ldr	r3, [pc, #268]	; (28710 <close+0x124>)
   28602:	0018      	movs	r0, r3
   28604:	4b43      	ldr	r3, [pc, #268]	; (28714 <close+0x128>)
   28606:	4798      	blx	r3
   28608:	1dfb      	adds	r3, r7, #7
   2860a:	2200      	movs	r2, #0
   2860c:	569a      	ldrsb	r2, [r3, r2]
   2860e:	4b42      	ldr	r3, [pc, #264]	; (28718 <close+0x12c>)
   28610:	0011      	movs	r1, r2
   28612:	0018      	movs	r0, r3
   28614:	4b3f      	ldr	r3, [pc, #252]	; (28714 <close+0x128>)
   28616:	4798      	blx	r3
   28618:	4b40      	ldr	r3, [pc, #256]	; (2871c <close+0x130>)
   2861a:	0018      	movs	r0, r3
   2861c:	4b3d      	ldr	r3, [pc, #244]	; (28714 <close+0x128>)
   2861e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   28620:	1dfb      	adds	r3, r7, #7
   28622:	781b      	ldrb	r3, [r3, #0]
   28624:	2b7f      	cmp	r3, #127	; 0x7f
   28626:	d86a      	bhi.n	286fe <close+0x112>
   28628:	1dfb      	adds	r3, r7, #7
   2862a:	781b      	ldrb	r3, [r3, #0]
   2862c:	b25b      	sxtb	r3, r3
   2862e:	4a3c      	ldr	r2, [pc, #240]	; (28720 <close+0x134>)
   28630:	011b      	lsls	r3, r3, #4
   28632:	18d3      	adds	r3, r2, r3
   28634:	330a      	adds	r3, #10
   28636:	781b      	ldrb	r3, [r3, #0]
   28638:	b2db      	uxtb	r3, r3
   2863a:	2b01      	cmp	r3, #1
   2863c:	d15f      	bne.n	286fe <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   2863e:	230e      	movs	r3, #14
   28640:	18fb      	adds	r3, r7, r3
   28642:	2249      	movs	r2, #73	; 0x49
   28644:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   28646:	2308      	movs	r3, #8
   28648:	18fb      	adds	r3, r7, r3
   2864a:	1dfa      	adds	r2, r7, #7
   2864c:	7812      	ldrb	r2, [r2, #0]
   2864e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   28650:	1dfb      	adds	r3, r7, #7
   28652:	781b      	ldrb	r3, [r3, #0]
   28654:	b25b      	sxtb	r3, r3
   28656:	4a32      	ldr	r2, [pc, #200]	; (28720 <close+0x134>)
   28658:	011b      	lsls	r3, r3, #4
   2865a:	18d3      	adds	r3, r2, r3
   2865c:	3306      	adds	r3, #6
   2865e:	881b      	ldrh	r3, [r3, #0]
   28660:	b29a      	uxth	r2, r3
   28662:	2308      	movs	r3, #8
   28664:	18fb      	adds	r3, r7, r3
   28666:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   28668:	1dfb      	adds	r3, r7, #7
   2866a:	781b      	ldrb	r3, [r3, #0]
   2866c:	b25b      	sxtb	r3, r3
   2866e:	4a2c      	ldr	r2, [pc, #176]	; (28720 <close+0x134>)
   28670:	011b      	lsls	r3, r3, #4
   28672:	18d3      	adds	r3, r2, r3
   28674:	330a      	adds	r3, #10
   28676:	2200      	movs	r2, #0
   28678:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2867a:	1dfb      	adds	r3, r7, #7
   2867c:	781b      	ldrb	r3, [r3, #0]
   2867e:	b25b      	sxtb	r3, r3
   28680:	4a27      	ldr	r2, [pc, #156]	; (28720 <close+0x134>)
   28682:	011b      	lsls	r3, r3, #4
   28684:	18d3      	adds	r3, r2, r3
   28686:	3306      	adds	r3, #6
   28688:	2200      	movs	r2, #0
   2868a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2868c:	1dfb      	adds	r3, r7, #7
   2868e:	781b      	ldrb	r3, [r3, #0]
   28690:	b25b      	sxtb	r3, r3
   28692:	4a23      	ldr	r2, [pc, #140]	; (28720 <close+0x134>)
   28694:	011b      	lsls	r3, r3, #4
   28696:	18d3      	adds	r3, r2, r3
   28698:	330b      	adds	r3, #11
   2869a:	781b      	ldrb	r3, [r3, #0]
   2869c:	b2db      	uxtb	r3, r3
   2869e:	001a      	movs	r2, r3
   286a0:	2301      	movs	r3, #1
   286a2:	4013      	ands	r3, r2
   286a4:	d003      	beq.n	286ae <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   286a6:	230e      	movs	r3, #14
   286a8:	18fb      	adds	r3, r7, r3
   286aa:	224e      	movs	r2, #78	; 0x4e
   286ac:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   286ae:	230f      	movs	r3, #15
   286b0:	18fc      	adds	r4, r7, r3
   286b2:	2308      	movs	r3, #8
   286b4:	18fa      	adds	r2, r7, r3
   286b6:	230e      	movs	r3, #14
   286b8:	18fb      	adds	r3, r7, r3
   286ba:	7819      	ldrb	r1, [r3, #0]
   286bc:	2300      	movs	r3, #0
   286be:	9302      	str	r3, [sp, #8]
   286c0:	2300      	movs	r3, #0
   286c2:	9301      	str	r3, [sp, #4]
   286c4:	2300      	movs	r3, #0
   286c6:	9300      	str	r3, [sp, #0]
   286c8:	2304      	movs	r3, #4
   286ca:	2002      	movs	r0, #2
   286cc:	4d15      	ldr	r5, [pc, #84]	; (28724 <close+0x138>)
   286ce:	47a8      	blx	r5
   286d0:	0003      	movs	r3, r0
   286d2:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   286d4:	230f      	movs	r3, #15
   286d6:	18fb      	adds	r3, r7, r3
   286d8:	781b      	ldrb	r3, [r3, #0]
   286da:	b25b      	sxtb	r3, r3
   286dc:	2b00      	cmp	r3, #0
   286de:	d003      	beq.n	286e8 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   286e0:	230f      	movs	r3, #15
   286e2:	18fb      	adds	r3, r7, r3
   286e4:	22f7      	movs	r2, #247	; 0xf7
   286e6:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   286e8:	1dfb      	adds	r3, r7, #7
   286ea:	781b      	ldrb	r3, [r3, #0]
   286ec:	b25b      	sxtb	r3, r3
   286ee:	011a      	lsls	r2, r3, #4
   286f0:	4b0b      	ldr	r3, [pc, #44]	; (28720 <close+0x134>)
   286f2:	18d3      	adds	r3, r2, r3
   286f4:	2210      	movs	r2, #16
   286f6:	2100      	movs	r1, #0
   286f8:	0018      	movs	r0, r3
   286fa:	4b0b      	ldr	r3, [pc, #44]	; (28728 <close+0x13c>)
   286fc:	4798      	blx	r3
	}
	return s8Ret;
   286fe:	230f      	movs	r3, #15
   28700:	18fb      	adds	r3, r7, r3
   28702:	781b      	ldrb	r3, [r3, #0]
   28704:	b25b      	sxtb	r3, r3
}
   28706:	0018      	movs	r0, r3
   28708:	46bd      	mov	sp, r7
   2870a:	b004      	add	sp, #16
   2870c:	bdb0      	pop	{r4, r5, r7, pc}
   2870e:	46c0      	nop			; (mov r8, r8)
   28710:	0003c518 	.word	0x0003c518
   28714:	00020889 	.word	0x00020889
   28718:	0003c558 	.word	0x0003c558
   2871c:	0003c538 	.word	0x0003c538
   28720:	20005a8c 	.word	0x20005a8c
   28724:	000238b1 	.word	0x000238b1
   28728:	00023651 	.word	0x00023651

0002872c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   2872c:	b580      	push	{r7, lr}
   2872e:	b086      	sub	sp, #24
   28730:	af00      	add	r7, sp, #0
   28732:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   28734:	2300      	movs	r3, #0
   28736:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   28738:	2317      	movs	r3, #23
   2873a:	18fb      	adds	r3, r7, r3
   2873c:	2200      	movs	r2, #0
   2873e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   28740:	2316      	movs	r3, #22
   28742:	18fb      	adds	r3, r7, r3
   28744:	2200      	movs	r2, #0
   28746:	701a      	strb	r2, [r3, #0]
   28748:	e060      	b.n	2880c <nmi_inet_addr+0xe0>
	{
		j = 0;
   2874a:	2315      	movs	r3, #21
   2874c:	18fb      	adds	r3, r7, r3
   2874e:	2200      	movs	r2, #0
   28750:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   28752:	2314      	movs	r3, #20
   28754:	18fb      	adds	r3, r7, r3
   28756:	687a      	ldr	r2, [r7, #4]
   28758:	7812      	ldrb	r2, [r2, #0]
   2875a:	701a      	strb	r2, [r3, #0]
			++j;
   2875c:	2315      	movs	r3, #21
   2875e:	18fb      	adds	r3, r7, r3
   28760:	2215      	movs	r2, #21
   28762:	18ba      	adds	r2, r7, r2
   28764:	7812      	ldrb	r2, [r2, #0]
   28766:	3201      	adds	r2, #1
   28768:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2876a:	2315      	movs	r3, #21
   2876c:	18fb      	adds	r3, r7, r3
   2876e:	781b      	ldrb	r3, [r3, #0]
   28770:	2b04      	cmp	r3, #4
   28772:	d901      	bls.n	28778 <nmi_inet_addr+0x4c>
			{
				return 0;
   28774:	2300      	movs	r3, #0
   28776:	e057      	b.n	28828 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   28778:	2314      	movs	r3, #20
   2877a:	18fb      	adds	r3, r7, r3
   2877c:	781b      	ldrb	r3, [r3, #0]
   2877e:	2b2e      	cmp	r3, #46	; 0x2e
   28780:	d004      	beq.n	2878c <nmi_inet_addr+0x60>
   28782:	2314      	movs	r3, #20
   28784:	18fb      	adds	r3, r7, r3
   28786:	781b      	ldrb	r3, [r3, #0]
   28788:	2b00      	cmp	r3, #0
   2878a:	d10d      	bne.n	287a8 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   2878c:	2316      	movs	r3, #22
   2878e:	18fb      	adds	r3, r7, r3
   28790:	781b      	ldrb	r3, [r3, #0]
   28792:	220c      	movs	r2, #12
   28794:	18ba      	adds	r2, r7, r2
   28796:	2117      	movs	r1, #23
   28798:	1879      	adds	r1, r7, r1
   2879a:	7809      	ldrb	r1, [r1, #0]
   2879c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   2879e:	2317      	movs	r3, #23
   287a0:	18fb      	adds	r3, r7, r3
   287a2:	2200      	movs	r2, #0
   287a4:	701a      	strb	r2, [r3, #0]
   287a6:	e01d      	b.n	287e4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   287a8:	2314      	movs	r3, #20
   287aa:	18fb      	adds	r3, r7, r3
   287ac:	781b      	ldrb	r3, [r3, #0]
   287ae:	2b2f      	cmp	r3, #47	; 0x2f
   287b0:	d916      	bls.n	287e0 <nmi_inet_addr+0xb4>
   287b2:	2314      	movs	r3, #20
   287b4:	18fb      	adds	r3, r7, r3
   287b6:	781b      	ldrb	r3, [r3, #0]
   287b8:	2b39      	cmp	r3, #57	; 0x39
   287ba:	d811      	bhi.n	287e0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   287bc:	2317      	movs	r3, #23
   287be:	18fb      	adds	r3, r7, r3
   287c0:	781b      	ldrb	r3, [r3, #0]
   287c2:	1c1a      	adds	r2, r3, #0
   287c4:	0092      	lsls	r2, r2, #2
   287c6:	18d3      	adds	r3, r2, r3
   287c8:	18db      	adds	r3, r3, r3
   287ca:	b2da      	uxtb	r2, r3
   287cc:	2314      	movs	r3, #20
   287ce:	18fb      	adds	r3, r7, r3
   287d0:	781b      	ldrb	r3, [r3, #0]
   287d2:	18d3      	adds	r3, r2, r3
   287d4:	b2da      	uxtb	r2, r3
   287d6:	2317      	movs	r3, #23
   287d8:	18fb      	adds	r3, r7, r3
   287da:	3a30      	subs	r2, #48	; 0x30
   287dc:	701a      	strb	r2, [r3, #0]
   287de:	e001      	b.n	287e4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   287e0:	2300      	movs	r3, #0
   287e2:	e021      	b.n	28828 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   287e4:	687b      	ldr	r3, [r7, #4]
   287e6:	3301      	adds	r3, #1
   287e8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   287ea:	2314      	movs	r3, #20
   287ec:	18fb      	adds	r3, r7, r3
   287ee:	781b      	ldrb	r3, [r3, #0]
   287f0:	2b2e      	cmp	r3, #46	; 0x2e
   287f2:	d004      	beq.n	287fe <nmi_inet_addr+0xd2>
   287f4:	2314      	movs	r3, #20
   287f6:	18fb      	adds	r3, r7, r3
   287f8:	781b      	ldrb	r3, [r3, #0]
   287fa:	2b00      	cmp	r3, #0
   287fc:	d1a9      	bne.n	28752 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   287fe:	2316      	movs	r3, #22
   28800:	18fb      	adds	r3, r7, r3
   28802:	2216      	movs	r2, #22
   28804:	18ba      	adds	r2, r7, r2
   28806:	7812      	ldrb	r2, [r2, #0]
   28808:	3201      	adds	r2, #1
   2880a:	701a      	strb	r2, [r3, #0]
   2880c:	2316      	movs	r3, #22
   2880e:	18fb      	adds	r3, r7, r3
   28810:	781b      	ldrb	r3, [r3, #0]
   28812:	2b03      	cmp	r3, #3
   28814:	d999      	bls.n	2874a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   28816:	230c      	movs	r3, #12
   28818:	18f9      	adds	r1, r7, r3
   2881a:	2310      	movs	r3, #16
   2881c:	18fb      	adds	r3, r7, r3
   2881e:	2204      	movs	r2, #4
   28820:	0018      	movs	r0, r3
   28822:	4b03      	ldr	r3, [pc, #12]	; (28830 <nmi_inet_addr+0x104>)
   28824:	4798      	blx	r3
	return u32IP;
   28826:	693b      	ldr	r3, [r7, #16]
}
   28828:	0018      	movs	r0, r3
   2882a:	46bd      	mov	sp, r7
   2882c:	b006      	add	sp, #24
   2882e:	bd80      	pop	{r7, pc}
   28830:	00023615 	.word	0x00023615

00028834 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   28834:	b5b0      	push	{r4, r5, r7, lr}
   28836:	b088      	sub	sp, #32
   28838:	af04      	add	r7, sp, #16
   2883a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   2883c:	230f      	movs	r3, #15
   2883e:	18fb      	adds	r3, r7, r3
   28840:	22fa      	movs	r2, #250	; 0xfa
   28842:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   28844:	687b      	ldr	r3, [r7, #4]
   28846:	0018      	movs	r0, r3
   28848:	4b14      	ldr	r3, [pc, #80]	; (2889c <gethostbyname+0x68>)
   2884a:	4798      	blx	r3
   2884c:	0003      	movs	r3, r0
   2884e:	001a      	movs	r2, r3
   28850:	230e      	movs	r3, #14
   28852:	18fb      	adds	r3, r7, r3
   28854:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   28856:	230e      	movs	r3, #14
   28858:	18fb      	adds	r3, r7, r3
   2885a:	781b      	ldrb	r3, [r3, #0]
   2885c:	2b40      	cmp	r3, #64	; 0x40
   2885e:	d815      	bhi.n	2888c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   28860:	230e      	movs	r3, #14
   28862:	18fb      	adds	r3, r7, r3
   28864:	781b      	ldrb	r3, [r3, #0]
   28866:	b29b      	uxth	r3, r3
   28868:	3301      	adds	r3, #1
   2886a:	b299      	uxth	r1, r3
   2886c:	230f      	movs	r3, #15
   2886e:	18fc      	adds	r4, r7, r3
   28870:	687a      	ldr	r2, [r7, #4]
   28872:	2300      	movs	r3, #0
   28874:	9302      	str	r3, [sp, #8]
   28876:	2300      	movs	r3, #0
   28878:	9301      	str	r3, [sp, #4]
   2887a:	2300      	movs	r3, #0
   2887c:	9300      	str	r3, [sp, #0]
   2887e:	000b      	movs	r3, r1
   28880:	214a      	movs	r1, #74	; 0x4a
   28882:	2002      	movs	r0, #2
   28884:	4d06      	ldr	r5, [pc, #24]	; (288a0 <gethostbyname+0x6c>)
   28886:	47a8      	blx	r5
   28888:	0003      	movs	r3, r0
   2888a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   2888c:	230f      	movs	r3, #15
   2888e:	18fb      	adds	r3, r7, r3
   28890:	781b      	ldrb	r3, [r3, #0]
   28892:	b25b      	sxtb	r3, r3
}
   28894:	0018      	movs	r0, r3
   28896:	46bd      	mov	sp, r7
   28898:	b004      	add	sp, #16
   2889a:	bdb0      	pop	{r4, r5, r7, pc}
   2889c:	0002368f 	.word	0x0002368f
   288a0:	000238b1 	.word	0x000238b1

000288a4 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   288a4:	b580      	push	{r7, lr}
   288a6:	b082      	sub	sp, #8
   288a8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   288aa:	003b      	movs	r3, r7
   288ac:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   288ae:	687b      	ldr	r3, [r7, #4]
   288b0:	22b9      	movs	r2, #185	; 0xb9
   288b2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   288b4:	4b13      	ldr	r3, [pc, #76]	; (28904 <spi_flash_enter_low_power_mode+0x60>)
   288b6:	2100      	movs	r1, #0
   288b8:	0018      	movs	r0, r3
   288ba:	4b13      	ldr	r3, [pc, #76]	; (28908 <spi_flash_enter_low_power_mode+0x64>)
   288bc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   288be:	687b      	ldr	r3, [r7, #4]
   288c0:	781b      	ldrb	r3, [r3, #0]
   288c2:	001a      	movs	r2, r3
   288c4:	4b11      	ldr	r3, [pc, #68]	; (2890c <spi_flash_enter_low_power_mode+0x68>)
   288c6:	0011      	movs	r1, r2
   288c8:	0018      	movs	r0, r3
   288ca:	4b0f      	ldr	r3, [pc, #60]	; (28908 <spi_flash_enter_low_power_mode+0x64>)
   288cc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   288ce:	4b10      	ldr	r3, [pc, #64]	; (28910 <spi_flash_enter_low_power_mode+0x6c>)
   288d0:	2101      	movs	r1, #1
   288d2:	0018      	movs	r0, r3
   288d4:	4b0c      	ldr	r3, [pc, #48]	; (28908 <spi_flash_enter_low_power_mode+0x64>)
   288d6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   288d8:	4b0e      	ldr	r3, [pc, #56]	; (28914 <spi_flash_enter_low_power_mode+0x70>)
   288da:	2100      	movs	r1, #0
   288dc:	0018      	movs	r0, r3
   288de:	4b0a      	ldr	r3, [pc, #40]	; (28908 <spi_flash_enter_low_power_mode+0x64>)
   288e0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   288e2:	4b0d      	ldr	r3, [pc, #52]	; (28918 <spi_flash_enter_low_power_mode+0x74>)
   288e4:	2181      	movs	r1, #129	; 0x81
   288e6:	0018      	movs	r0, r3
   288e8:	4b07      	ldr	r3, [pc, #28]	; (28908 <spi_flash_enter_low_power_mode+0x64>)
   288ea:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   288ec:	46c0      	nop			; (mov r8, r8)
   288ee:	4b0b      	ldr	r3, [pc, #44]	; (2891c <spi_flash_enter_low_power_mode+0x78>)
   288f0:	0018      	movs	r0, r3
   288f2:	4b0b      	ldr	r3, [pc, #44]	; (28920 <spi_flash_enter_low_power_mode+0x7c>)
   288f4:	4798      	blx	r3
   288f6:	0003      	movs	r3, r0
   288f8:	2b01      	cmp	r3, #1
   288fa:	d1f8      	bne.n	288ee <spi_flash_enter_low_power_mode+0x4a>
}
   288fc:	46c0      	nop			; (mov r8, r8)
   288fe:	46bd      	mov	sp, r7
   28900:	b002      	add	sp, #8
   28902:	bd80      	pop	{r7, pc}
   28904:	00010208 	.word	0x00010208
   28908:	00025705 	.word	0x00025705
   2890c:	0001020c 	.word	0x0001020c
   28910:	00010214 	.word	0x00010214
   28914:	0001021c 	.word	0x0001021c
   28918:	00010204 	.word	0x00010204
   2891c:	00010218 	.word	0x00010218
   28920:	000256c1 	.word	0x000256c1

00028924 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   28924:	b580      	push	{r7, lr}
   28926:	b082      	sub	sp, #8
   28928:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   2892a:	003b      	movs	r3, r7
   2892c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   2892e:	687b      	ldr	r3, [r7, #4]
   28930:	22ab      	movs	r2, #171	; 0xab
   28932:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   28934:	4b13      	ldr	r3, [pc, #76]	; (28984 <spi_flash_leave_low_power_mode+0x60>)
   28936:	2100      	movs	r1, #0
   28938:	0018      	movs	r0, r3
   2893a:	4b13      	ldr	r3, [pc, #76]	; (28988 <spi_flash_leave_low_power_mode+0x64>)
   2893c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2893e:	687b      	ldr	r3, [r7, #4]
   28940:	781b      	ldrb	r3, [r3, #0]
   28942:	001a      	movs	r2, r3
   28944:	4b11      	ldr	r3, [pc, #68]	; (2898c <spi_flash_leave_low_power_mode+0x68>)
   28946:	0011      	movs	r1, r2
   28948:	0018      	movs	r0, r3
   2894a:	4b0f      	ldr	r3, [pc, #60]	; (28988 <spi_flash_leave_low_power_mode+0x64>)
   2894c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2894e:	4b10      	ldr	r3, [pc, #64]	; (28990 <spi_flash_leave_low_power_mode+0x6c>)
   28950:	2101      	movs	r1, #1
   28952:	0018      	movs	r0, r3
   28954:	4b0c      	ldr	r3, [pc, #48]	; (28988 <spi_flash_leave_low_power_mode+0x64>)
   28956:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   28958:	4b0e      	ldr	r3, [pc, #56]	; (28994 <spi_flash_leave_low_power_mode+0x70>)
   2895a:	2100      	movs	r1, #0
   2895c:	0018      	movs	r0, r3
   2895e:	4b0a      	ldr	r3, [pc, #40]	; (28988 <spi_flash_leave_low_power_mode+0x64>)
   28960:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   28962:	4b0d      	ldr	r3, [pc, #52]	; (28998 <spi_flash_leave_low_power_mode+0x74>)
   28964:	2181      	movs	r1, #129	; 0x81
   28966:	0018      	movs	r0, r3
   28968:	4b07      	ldr	r3, [pc, #28]	; (28988 <spi_flash_leave_low_power_mode+0x64>)
   2896a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   2896c:	46c0      	nop			; (mov r8, r8)
   2896e:	4b0b      	ldr	r3, [pc, #44]	; (2899c <spi_flash_leave_low_power_mode+0x78>)
   28970:	0018      	movs	r0, r3
   28972:	4b0b      	ldr	r3, [pc, #44]	; (289a0 <spi_flash_leave_low_power_mode+0x7c>)
   28974:	4798      	blx	r3
   28976:	0003      	movs	r3, r0
   28978:	2b01      	cmp	r3, #1
   2897a:	d1f8      	bne.n	2896e <spi_flash_leave_low_power_mode+0x4a>
}
   2897c:	46c0      	nop			; (mov r8, r8)
   2897e:	46bd      	mov	sp, r7
   28980:	b002      	add	sp, #8
   28982:	bd80      	pop	{r7, pc}
   28984:	00010208 	.word	0x00010208
   28988:	00025705 	.word	0x00025705
   2898c:	0001020c 	.word	0x0001020c
   28990:	00010214 	.word	0x00010214
   28994:	0001021c 	.word	0x0001021c
   28998:	00010204 	.word	0x00010204
   2899c:	00010218 	.word	0x00010218
   289a0:	000256c1 	.word	0x000256c1

000289a4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   289a4:	b590      	push	{r4, r7, lr}
   289a6:	b085      	sub	sp, #20
   289a8:	af00      	add	r7, sp, #0
   289aa:	0002      	movs	r2, r0
   289ac:	1dfb      	adds	r3, r7, #7
   289ae:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   289b0:	230f      	movs	r3, #15
   289b2:	18fb      	adds	r3, r7, r3
   289b4:	2200      	movs	r2, #0
   289b6:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   289b8:	4b24      	ldr	r3, [pc, #144]	; (28a4c <spi_flash_enable+0xa8>)
   289ba:	4798      	blx	r3
   289bc:	0003      	movs	r3, r0
   289be:	051b      	lsls	r3, r3, #20
   289c0:	0d1b      	lsrs	r3, r3, #20
   289c2:	4a23      	ldr	r2, [pc, #140]	; (28a50 <spi_flash_enable+0xac>)
   289c4:	4293      	cmp	r3, r2
   289c6:	d938      	bls.n	28a3a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   289c8:	230f      	movs	r3, #15
   289ca:	18fc      	adds	r4, r7, r3
   289cc:	2308      	movs	r3, #8
   289ce:	18fb      	adds	r3, r7, r3
   289d0:	4a20      	ldr	r2, [pc, #128]	; (28a54 <spi_flash_enable+0xb0>)
   289d2:	0019      	movs	r1, r3
   289d4:	0010      	movs	r0, r2
   289d6:	4b20      	ldr	r3, [pc, #128]	; (28a58 <spi_flash_enable+0xb4>)
   289d8:	4798      	blx	r3
   289da:	0003      	movs	r3, r0
   289dc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   289de:	230f      	movs	r3, #15
   289e0:	18fb      	adds	r3, r7, r3
   289e2:	781b      	ldrb	r3, [r3, #0]
   289e4:	b25b      	sxtb	r3, r3
   289e6:	2b00      	cmp	r3, #0
   289e8:	d126      	bne.n	28a38 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   289ea:	68bb      	ldr	r3, [r7, #8]
   289ec:	4a1b      	ldr	r2, [pc, #108]	; (28a5c <spi_flash_enable+0xb8>)
   289ee:	4013      	ands	r3, r2
   289f0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   289f2:	68bb      	ldr	r3, [r7, #8]
   289f4:	4a1a      	ldr	r2, [pc, #104]	; (28a60 <spi_flash_enable+0xbc>)
   289f6:	4313      	orrs	r3, r2
   289f8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   289fa:	68bb      	ldr	r3, [r7, #8]
   289fc:	4a15      	ldr	r2, [pc, #84]	; (28a54 <spi_flash_enable+0xb0>)
   289fe:	0019      	movs	r1, r3
   28a00:	0010      	movs	r0, r2
   28a02:	4b18      	ldr	r3, [pc, #96]	; (28a64 <spi_flash_enable+0xc0>)
   28a04:	4798      	blx	r3
		if(enable) {
   28a06:	1dfb      	adds	r3, r7, #7
   28a08:	781b      	ldrb	r3, [r3, #0]
   28a0a:	2b00      	cmp	r3, #0
   28a0c:	d002      	beq.n	28a14 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   28a0e:	4b16      	ldr	r3, [pc, #88]	; (28a68 <spi_flash_enable+0xc4>)
   28a10:	4798      	blx	r3
   28a12:	e001      	b.n	28a18 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   28a14:	4b15      	ldr	r3, [pc, #84]	; (28a6c <spi_flash_enable+0xc8>)
   28a16:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   28a18:	68bb      	ldr	r3, [r7, #8]
   28a1a:	4a10      	ldr	r2, [pc, #64]	; (28a5c <spi_flash_enable+0xb8>)
   28a1c:	4013      	ands	r3, r2
   28a1e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   28a20:	68bb      	ldr	r3, [r7, #8]
   28a22:	2280      	movs	r2, #128	; 0x80
   28a24:	0252      	lsls	r2, r2, #9
   28a26:	4313      	orrs	r3, r2
   28a28:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   28a2a:	68bb      	ldr	r3, [r7, #8]
   28a2c:	4a09      	ldr	r2, [pc, #36]	; (28a54 <spi_flash_enable+0xb0>)
   28a2e:	0019      	movs	r1, r3
   28a30:	0010      	movs	r0, r2
   28a32:	4b0c      	ldr	r3, [pc, #48]	; (28a64 <spi_flash_enable+0xc0>)
   28a34:	4798      	blx	r3
   28a36:	e000      	b.n	28a3a <spi_flash_enable+0x96>
			goto ERR1;
   28a38:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   28a3a:	230f      	movs	r3, #15
   28a3c:	18fb      	adds	r3, r7, r3
   28a3e:	781b      	ldrb	r3, [r3, #0]
   28a40:	b25b      	sxtb	r3, r3
}
   28a42:	0018      	movs	r0, r3
   28a44:	46bd      	mov	sp, r7
   28a46:	b005      	add	sp, #20
   28a48:	bd90      	pop	{r4, r7, pc}
   28a4a:	46c0      	nop			; (mov r8, r8)
   28a4c:	00024fe1 	.word	0x00024fe1
   28a50:	0000039f 	.word	0x0000039f
   28a54:	00001410 	.word	0x00001410
   28a58:	000256e1 	.word	0x000256e1
   28a5c:	f8888fff 	.word	0xf8888fff
   28a60:	01111000 	.word	0x01111000
   28a64:	00025705 	.word	0x00025705
   28a68:	00028925 	.word	0x00028925
   28a6c:	000288a5 	.word	0x000288a5

00028a70 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   28a70:	b580      	push	{r7, lr}
   28a72:	b084      	sub	sp, #16
   28a74:	af00      	add	r7, sp, #0
   28a76:	0002      	movs	r2, r0
   28a78:	1dfb      	adds	r3, r7, #7
   28a7a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   28a7c:	1dfb      	adds	r3, r7, #7
   28a7e:	781b      	ldrb	r3, [r3, #0]
   28a80:	2b00      	cmp	r3, #0
   28a82:	d108      	bne.n	28a96 <mem_test_unit_ready+0x26>
   28a84:	1dfb      	adds	r3, r7, #7
   28a86:	781a      	ldrb	r2, [r3, #0]
   28a88:	4b08      	ldr	r3, [pc, #32]	; (28aac <mem_test_unit_ready+0x3c>)
   28a8a:	0152      	lsls	r2, r2, #5
   28a8c:	58d3      	ldr	r3, [r2, r3]
   28a8e:	4798      	blx	r3
   28a90:	0003      	movs	r3, r0
   28a92:	001a      	movs	r2, r3
   28a94:	e000      	b.n	28a98 <mem_test_unit_ready+0x28>
   28a96:	2201      	movs	r2, #1
  status =
   28a98:	230f      	movs	r3, #15
   28a9a:	18fb      	adds	r3, r7, r3
   28a9c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   28a9e:	230f      	movs	r3, #15
   28aa0:	18fb      	adds	r3, r7, r3
   28aa2:	781b      	ldrb	r3, [r3, #0]
}
   28aa4:	0018      	movs	r0, r3
   28aa6:	46bd      	mov	sp, r7
   28aa8:	b004      	add	sp, #16
   28aaa:	bd80      	pop	{r7, pc}
   28aac:	0003c5e4 	.word	0x0003c5e4

00028ab0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   28ab0:	b580      	push	{r7, lr}
   28ab2:	b084      	sub	sp, #16
   28ab4:	af00      	add	r7, sp, #0
   28ab6:	0002      	movs	r2, r0
   28ab8:	6039      	str	r1, [r7, #0]
   28aba:	1dfb      	adds	r3, r7, #7
   28abc:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   28abe:	1dfb      	adds	r3, r7, #7
   28ac0:	781b      	ldrb	r3, [r3, #0]
   28ac2:	2b00      	cmp	r3, #0
   28ac4:	d10c      	bne.n	28ae0 <mem_read_capacity+0x30>
   28ac6:	1dfb      	adds	r3, r7, #7
   28ac8:	781b      	ldrb	r3, [r3, #0]
   28aca:	4a0b      	ldr	r2, [pc, #44]	; (28af8 <mem_read_capacity+0x48>)
   28acc:	015b      	lsls	r3, r3, #5
   28ace:	18d3      	adds	r3, r2, r3
   28ad0:	3304      	adds	r3, #4
   28ad2:	681b      	ldr	r3, [r3, #0]
   28ad4:	683a      	ldr	r2, [r7, #0]
   28ad6:	0010      	movs	r0, r2
   28ad8:	4798      	blx	r3
   28ada:	0003      	movs	r3, r0
   28adc:	001a      	movs	r2, r3
   28ade:	e000      	b.n	28ae2 <mem_read_capacity+0x32>
   28ae0:	2201      	movs	r2, #1
  status =
   28ae2:	230f      	movs	r3, #15
   28ae4:	18fb      	adds	r3, r7, r3
   28ae6:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   28ae8:	230f      	movs	r3, #15
   28aea:	18fb      	adds	r3, r7, r3
   28aec:	781b      	ldrb	r3, [r3, #0]
}
   28aee:	0018      	movs	r0, r3
   28af0:	46bd      	mov	sp, r7
   28af2:	b004      	add	sp, #16
   28af4:	bd80      	pop	{r7, pc}
   28af6:	46c0      	nop			; (mov r8, r8)
   28af8:	0003c5e4 	.word	0x0003c5e4

00028afc <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   28afc:	b580      	push	{r7, lr}
   28afe:	b084      	sub	sp, #16
   28b00:	af00      	add	r7, sp, #0
   28b02:	0002      	movs	r2, r0
   28b04:	1dfb      	adds	r3, r7, #7
   28b06:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   28b08:	1dfb      	adds	r3, r7, #7
   28b0a:	781b      	ldrb	r3, [r3, #0]
   28b0c:	425a      	negs	r2, r3
   28b0e:	4153      	adcs	r3, r2
   28b10:	b2da      	uxtb	r2, r3
  sector_size =
   28b12:	230f      	movs	r3, #15
   28b14:	18fb      	adds	r3, r7, r3
   28b16:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   28b18:	230f      	movs	r3, #15
   28b1a:	18fb      	adds	r3, r7, r3
   28b1c:	781b      	ldrb	r3, [r3, #0]
}
   28b1e:	0018      	movs	r0, r3
   28b20:	46bd      	mov	sp, r7
   28b22:	b004      	add	sp, #16
   28b24:	bd80      	pop	{r7, pc}
	...

00028b28 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   28b28:	b580      	push	{r7, lr}
   28b2a:	b084      	sub	sp, #16
   28b2c:	af00      	add	r7, sp, #0
   28b2e:	0002      	movs	r2, r0
   28b30:	1dfb      	adds	r3, r7, #7
   28b32:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   28b34:	1dfb      	adds	r3, r7, #7
   28b36:	781b      	ldrb	r3, [r3, #0]
   28b38:	2b00      	cmp	r3, #0
   28b3a:	d109      	bne.n	28b50 <mem_wr_protect+0x28>
   28b3c:	1dfb      	adds	r3, r7, #7
   28b3e:	781b      	ldrb	r3, [r3, #0]
   28b40:	4a0a      	ldr	r2, [pc, #40]	; (28b6c <mem_wr_protect+0x44>)
   28b42:	015b      	lsls	r3, r3, #5
   28b44:	18d3      	adds	r3, r2, r3
   28b46:	330c      	adds	r3, #12
   28b48:	681b      	ldr	r3, [r3, #0]
   28b4a:	4798      	blx	r3
   28b4c:	1e03      	subs	r3, r0, #0
   28b4e:	d001      	beq.n	28b54 <mem_wr_protect+0x2c>
   28b50:	2201      	movs	r2, #1
   28b52:	e000      	b.n	28b56 <mem_wr_protect+0x2e>
   28b54:	2200      	movs	r2, #0
  wr_protect =
   28b56:	230f      	movs	r3, #15
   28b58:	18fb      	adds	r3, r7, r3
   28b5a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   28b5c:	230f      	movs	r3, #15
   28b5e:	18fb      	adds	r3, r7, r3
   28b60:	781b      	ldrb	r3, [r3, #0]
}
   28b62:	0018      	movs	r0, r3
   28b64:	46bd      	mov	sp, r7
   28b66:	b004      	add	sp, #16
   28b68:	bd80      	pop	{r7, pc}
   28b6a:	46c0      	nop			; (mov r8, r8)
   28b6c:	0003c5e4 	.word	0x0003c5e4

00028b70 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   28b70:	b580      	push	{r7, lr}
   28b72:	b086      	sub	sp, #24
   28b74:	af00      	add	r7, sp, #0
   28b76:	60b9      	str	r1, [r7, #8]
   28b78:	607a      	str	r2, [r7, #4]
   28b7a:	230f      	movs	r3, #15
   28b7c:	18fb      	adds	r3, r7, r3
   28b7e:	1c02      	adds	r2, r0, #0
   28b80:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   28b82:	230f      	movs	r3, #15
   28b84:	18fb      	adds	r3, r7, r3
   28b86:	781b      	ldrb	r3, [r3, #0]
   28b88:	2b00      	cmp	r3, #0
   28b8a:	d10e      	bne.n	28baa <memory_2_ram+0x3a>
   28b8c:	230f      	movs	r3, #15
   28b8e:	18fb      	adds	r3, r7, r3
   28b90:	781b      	ldrb	r3, [r3, #0]
   28b92:	4a0b      	ldr	r2, [pc, #44]	; (28bc0 <memory_2_ram+0x50>)
   28b94:	015b      	lsls	r3, r3, #5
   28b96:	18d3      	adds	r3, r2, r3
   28b98:	3314      	adds	r3, #20
   28b9a:	681b      	ldr	r3, [r3, #0]
   28b9c:	6879      	ldr	r1, [r7, #4]
   28b9e:	68ba      	ldr	r2, [r7, #8]
   28ba0:	0010      	movs	r0, r2
   28ba2:	4798      	blx	r3
   28ba4:	0003      	movs	r3, r0
   28ba6:	001a      	movs	r2, r3
   28ba8:	e000      	b.n	28bac <memory_2_ram+0x3c>
   28baa:	2201      	movs	r2, #1
  status =
   28bac:	2317      	movs	r3, #23
   28bae:	18fb      	adds	r3, r7, r3
   28bb0:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   28bb2:	2317      	movs	r3, #23
   28bb4:	18fb      	adds	r3, r7, r3
   28bb6:	781b      	ldrb	r3, [r3, #0]
}
   28bb8:	0018      	movs	r0, r3
   28bba:	46bd      	mov	sp, r7
   28bbc:	b006      	add	sp, #24
   28bbe:	bd80      	pop	{r7, pc}
   28bc0:	0003c5e4 	.word	0x0003c5e4

00028bc4 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   28bc4:	b580      	push	{r7, lr}
   28bc6:	b086      	sub	sp, #24
   28bc8:	af00      	add	r7, sp, #0
   28bca:	60b9      	str	r1, [r7, #8]
   28bcc:	607a      	str	r2, [r7, #4]
   28bce:	230f      	movs	r3, #15
   28bd0:	18fb      	adds	r3, r7, r3
   28bd2:	1c02      	adds	r2, r0, #0
   28bd4:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   28bd6:	230f      	movs	r3, #15
   28bd8:	18fb      	adds	r3, r7, r3
   28bda:	781b      	ldrb	r3, [r3, #0]
   28bdc:	2b00      	cmp	r3, #0
   28bde:	d10e      	bne.n	28bfe <ram_2_memory+0x3a>
   28be0:	230f      	movs	r3, #15
   28be2:	18fb      	adds	r3, r7, r3
   28be4:	781b      	ldrb	r3, [r3, #0]
   28be6:	4a0b      	ldr	r2, [pc, #44]	; (28c14 <ram_2_memory+0x50>)
   28be8:	015b      	lsls	r3, r3, #5
   28bea:	18d3      	adds	r3, r2, r3
   28bec:	3318      	adds	r3, #24
   28bee:	681b      	ldr	r3, [r3, #0]
   28bf0:	6879      	ldr	r1, [r7, #4]
   28bf2:	68ba      	ldr	r2, [r7, #8]
   28bf4:	0010      	movs	r0, r2
   28bf6:	4798      	blx	r3
   28bf8:	0003      	movs	r3, r0
   28bfa:	001a      	movs	r2, r3
   28bfc:	e000      	b.n	28c00 <ram_2_memory+0x3c>
   28bfe:	2201      	movs	r2, #1
  status =
   28c00:	2317      	movs	r3, #23
   28c02:	18fb      	adds	r3, r7, r3
   28c04:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   28c06:	2317      	movs	r3, #23
   28c08:	18fb      	adds	r3, r7, r3
   28c0a:	781b      	ldrb	r3, [r3, #0]
}
   28c0c:	0018      	movs	r0, r3
   28c0e:	46bd      	mov	sp, r7
   28c10:	b006      	add	sp, #24
   28c12:	bd80      	pop	{r7, pc}
   28c14:	0003c5e4 	.word	0x0003c5e4

00028c18 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   28c18:	b580      	push	{r7, lr}
   28c1a:	b082      	sub	sp, #8
   28c1c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   28c1e:	4b10      	ldr	r3, [pc, #64]	; (28c60 <cpu_irq_enter_critical+0x48>)
   28c20:	681b      	ldr	r3, [r3, #0]
   28c22:	2b00      	cmp	r3, #0
   28c24:	d112      	bne.n	28c4c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   28c26:	f3ef 8310 	mrs	r3, PRIMASK
   28c2a:	607b      	str	r3, [r7, #4]
  return(result);
   28c2c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   28c2e:	2b00      	cmp	r3, #0
   28c30:	d109      	bne.n	28c46 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   28c32:	b672      	cpsid	i
   28c34:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   28c38:	4b0a      	ldr	r3, [pc, #40]	; (28c64 <cpu_irq_enter_critical+0x4c>)
   28c3a:	2200      	movs	r2, #0
   28c3c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   28c3e:	4b0a      	ldr	r3, [pc, #40]	; (28c68 <cpu_irq_enter_critical+0x50>)
   28c40:	2201      	movs	r2, #1
   28c42:	701a      	strb	r2, [r3, #0]
   28c44:	e002      	b.n	28c4c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   28c46:	4b08      	ldr	r3, [pc, #32]	; (28c68 <cpu_irq_enter_critical+0x50>)
   28c48:	2200      	movs	r2, #0
   28c4a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   28c4c:	4b04      	ldr	r3, [pc, #16]	; (28c60 <cpu_irq_enter_critical+0x48>)
   28c4e:	681b      	ldr	r3, [r3, #0]
   28c50:	1c5a      	adds	r2, r3, #1
   28c52:	4b03      	ldr	r3, [pc, #12]	; (28c60 <cpu_irq_enter_critical+0x48>)
   28c54:	601a      	str	r2, [r3, #0]
}
   28c56:	46c0      	nop			; (mov r8, r8)
   28c58:	46bd      	mov	sp, r7
   28c5a:	b002      	add	sp, #8
   28c5c:	bd80      	pop	{r7, pc}
   28c5e:	46c0      	nop			; (mov r8, r8)
   28c60:	200041e4 	.word	0x200041e4
   28c64:	2000011a 	.word	0x2000011a
   28c68:	200041e8 	.word	0x200041e8

00028c6c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   28c6c:	b580      	push	{r7, lr}
   28c6e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   28c70:	4b0b      	ldr	r3, [pc, #44]	; (28ca0 <cpu_irq_leave_critical+0x34>)
   28c72:	681b      	ldr	r3, [r3, #0]
   28c74:	1e5a      	subs	r2, r3, #1
   28c76:	4b0a      	ldr	r3, [pc, #40]	; (28ca0 <cpu_irq_leave_critical+0x34>)
   28c78:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   28c7a:	4b09      	ldr	r3, [pc, #36]	; (28ca0 <cpu_irq_leave_critical+0x34>)
   28c7c:	681b      	ldr	r3, [r3, #0]
   28c7e:	2b00      	cmp	r3, #0
   28c80:	d10a      	bne.n	28c98 <cpu_irq_leave_critical+0x2c>
   28c82:	4b08      	ldr	r3, [pc, #32]	; (28ca4 <cpu_irq_leave_critical+0x38>)
   28c84:	781b      	ldrb	r3, [r3, #0]
   28c86:	b2db      	uxtb	r3, r3
   28c88:	2b00      	cmp	r3, #0
   28c8a:	d005      	beq.n	28c98 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   28c8c:	4b06      	ldr	r3, [pc, #24]	; (28ca8 <cpu_irq_leave_critical+0x3c>)
   28c8e:	2201      	movs	r2, #1
   28c90:	701a      	strb	r2, [r3, #0]
   28c92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   28c96:	b662      	cpsie	i
	}
}
   28c98:	46c0      	nop			; (mov r8, r8)
   28c9a:	46bd      	mov	sp, r7
   28c9c:	bd80      	pop	{r7, pc}
   28c9e:	46c0      	nop			; (mov r8, r8)
   28ca0:	200041e4 	.word	0x200041e4
   28ca4:	200041e8 	.word	0x200041e8
   28ca8:	2000011a 	.word	0x2000011a

00028cac <system_pinmux_get_group_from_gpio_pin>:
{
   28cac:	b580      	push	{r7, lr}
   28cae:	b084      	sub	sp, #16
   28cb0:	af00      	add	r7, sp, #0
   28cb2:	0002      	movs	r2, r0
   28cb4:	1dfb      	adds	r3, r7, #7
   28cb6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   28cb8:	230f      	movs	r3, #15
   28cba:	18fb      	adds	r3, r7, r3
   28cbc:	1dfa      	adds	r2, r7, #7
   28cbe:	7812      	ldrb	r2, [r2, #0]
   28cc0:	09d2      	lsrs	r2, r2, #7
   28cc2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   28cc4:	230e      	movs	r3, #14
   28cc6:	18fb      	adds	r3, r7, r3
   28cc8:	1dfa      	adds	r2, r7, #7
   28cca:	7812      	ldrb	r2, [r2, #0]
   28ccc:	0952      	lsrs	r2, r2, #5
   28cce:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   28cd0:	4b0d      	ldr	r3, [pc, #52]	; (28d08 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   28cd2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   28cd4:	230f      	movs	r3, #15
   28cd6:	18fb      	adds	r3, r7, r3
   28cd8:	781b      	ldrb	r3, [r3, #0]
   28cda:	2b00      	cmp	r3, #0
   28cdc:	d10f      	bne.n	28cfe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   28cde:	230f      	movs	r3, #15
   28ce0:	18fb      	adds	r3, r7, r3
   28ce2:	781b      	ldrb	r3, [r3, #0]
   28ce4:	009b      	lsls	r3, r3, #2
   28ce6:	2210      	movs	r2, #16
   28ce8:	4694      	mov	ip, r2
   28cea:	44bc      	add	ip, r7
   28cec:	4463      	add	r3, ip
   28cee:	3b08      	subs	r3, #8
   28cf0:	681a      	ldr	r2, [r3, #0]
   28cf2:	230e      	movs	r3, #14
   28cf4:	18fb      	adds	r3, r7, r3
   28cf6:	781b      	ldrb	r3, [r3, #0]
   28cf8:	01db      	lsls	r3, r3, #7
   28cfa:	18d3      	adds	r3, r2, r3
   28cfc:	e000      	b.n	28d00 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   28cfe:	2300      	movs	r3, #0
}
   28d00:	0018      	movs	r0, r3
   28d02:	46bd      	mov	sp, r7
   28d04:	b004      	add	sp, #16
   28d06:	bd80      	pop	{r7, pc}
   28d08:	41004400 	.word	0x41004400

00028d0c <port_get_group_from_gpio_pin>:
{
   28d0c:	b580      	push	{r7, lr}
   28d0e:	b082      	sub	sp, #8
   28d10:	af00      	add	r7, sp, #0
   28d12:	0002      	movs	r2, r0
   28d14:	1dfb      	adds	r3, r7, #7
   28d16:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   28d18:	1dfb      	adds	r3, r7, #7
   28d1a:	781b      	ldrb	r3, [r3, #0]
   28d1c:	0018      	movs	r0, r3
   28d1e:	4b03      	ldr	r3, [pc, #12]	; (28d2c <port_get_group_from_gpio_pin+0x20>)
   28d20:	4798      	blx	r3
   28d22:	0003      	movs	r3, r0
}
   28d24:	0018      	movs	r0, r3
   28d26:	46bd      	mov	sp, r7
   28d28:	b002      	add	sp, #8
   28d2a:	bd80      	pop	{r7, pc}
   28d2c:	00028cad 	.word	0x00028cad

00028d30 <port_get_config_defaults>:
{
   28d30:	b580      	push	{r7, lr}
   28d32:	b082      	sub	sp, #8
   28d34:	af00      	add	r7, sp, #0
   28d36:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   28d38:	687b      	ldr	r3, [r7, #4]
   28d3a:	2200      	movs	r2, #0
   28d3c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   28d3e:	687b      	ldr	r3, [r7, #4]
   28d40:	2201      	movs	r2, #1
   28d42:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   28d44:	687b      	ldr	r3, [r7, #4]
   28d46:	2200      	movs	r2, #0
   28d48:	709a      	strb	r2, [r3, #2]
}
   28d4a:	46c0      	nop			; (mov r8, r8)
   28d4c:	46bd      	mov	sp, r7
   28d4e:	b002      	add	sp, #8
   28d50:	bd80      	pop	{r7, pc}
	...

00028d54 <port_pin_set_output_level>:
{
   28d54:	b580      	push	{r7, lr}
   28d56:	b084      	sub	sp, #16
   28d58:	af00      	add	r7, sp, #0
   28d5a:	0002      	movs	r2, r0
   28d5c:	1dfb      	adds	r3, r7, #7
   28d5e:	701a      	strb	r2, [r3, #0]
   28d60:	1dbb      	adds	r3, r7, #6
   28d62:	1c0a      	adds	r2, r1, #0
   28d64:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   28d66:	1dfb      	adds	r3, r7, #7
   28d68:	781b      	ldrb	r3, [r3, #0]
   28d6a:	0018      	movs	r0, r3
   28d6c:	4b0d      	ldr	r3, [pc, #52]	; (28da4 <port_pin_set_output_level+0x50>)
   28d6e:	4798      	blx	r3
   28d70:	0003      	movs	r3, r0
   28d72:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   28d74:	1dfb      	adds	r3, r7, #7
   28d76:	781b      	ldrb	r3, [r3, #0]
   28d78:	221f      	movs	r2, #31
   28d7a:	4013      	ands	r3, r2
   28d7c:	2201      	movs	r2, #1
   28d7e:	409a      	lsls	r2, r3
   28d80:	0013      	movs	r3, r2
   28d82:	60bb      	str	r3, [r7, #8]
	if (level) {
   28d84:	1dbb      	adds	r3, r7, #6
   28d86:	781b      	ldrb	r3, [r3, #0]
   28d88:	2b00      	cmp	r3, #0
   28d8a:	d003      	beq.n	28d94 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   28d8c:	68fb      	ldr	r3, [r7, #12]
   28d8e:	68ba      	ldr	r2, [r7, #8]
   28d90:	619a      	str	r2, [r3, #24]
}
   28d92:	e002      	b.n	28d9a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   28d94:	68fb      	ldr	r3, [r7, #12]
   28d96:	68ba      	ldr	r2, [r7, #8]
   28d98:	615a      	str	r2, [r3, #20]
}
   28d9a:	46c0      	nop			; (mov r8, r8)
   28d9c:	46bd      	mov	sp, r7
   28d9e:	b004      	add	sp, #16
   28da0:	bd80      	pop	{r7, pc}
   28da2:	46c0      	nop			; (mov r8, r8)
   28da4:	00028d0d 	.word	0x00028d0d

00028da8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   28da8:	b580      	push	{r7, lr}
   28daa:	b082      	sub	sp, #8
   28dac:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   28dae:	1d3b      	adds	r3, r7, #4
   28db0:	0018      	movs	r0, r3
   28db2:	4b0e      	ldr	r3, [pc, #56]	; (28dec <system_board_init+0x44>)
   28db4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   28db6:	1d3b      	adds	r3, r7, #4
   28db8:	2201      	movs	r2, #1
   28dba:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   28dbc:	1d3b      	adds	r3, r7, #4
   28dbe:	0019      	movs	r1, r3
   28dc0:	2017      	movs	r0, #23
   28dc2:	4b0b      	ldr	r3, [pc, #44]	; (28df0 <system_board_init+0x48>)
   28dc4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   28dc6:	2101      	movs	r1, #1
   28dc8:	2017      	movs	r0, #23
   28dca:	4b0a      	ldr	r3, [pc, #40]	; (28df4 <system_board_init+0x4c>)
   28dcc:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   28dce:	1d3b      	adds	r3, r7, #4
   28dd0:	2200      	movs	r2, #0
   28dd2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   28dd4:	1d3b      	adds	r3, r7, #4
   28dd6:	2201      	movs	r2, #1
   28dd8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   28dda:	1d3b      	adds	r3, r7, #4
   28ddc:	0019      	movs	r1, r3
   28dde:	2037      	movs	r0, #55	; 0x37
   28de0:	4b03      	ldr	r3, [pc, #12]	; (28df0 <system_board_init+0x48>)
   28de2:	4798      	blx	r3
}
   28de4:	46c0      	nop			; (mov r8, r8)
   28de6:	46bd      	mov	sp, r7
   28de8:	b002      	add	sp, #8
   28dea:	bd80      	pop	{r7, pc}
   28dec:	00028d31 	.word	0x00028d31
   28df0:	0002941d 	.word	0x0002941d
   28df4:	00028d55 	.word	0x00028d55

00028df8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   28df8:	b580      	push	{r7, lr}
   28dfa:	b084      	sub	sp, #16
   28dfc:	af00      	add	r7, sp, #0
   28dfe:	0002      	movs	r2, r0
   28e00:	1dfb      	adds	r3, r7, #7
   28e02:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   28e04:	230f      	movs	r3, #15
   28e06:	18fb      	adds	r3, r7, r3
   28e08:	1dfa      	adds	r2, r7, #7
   28e0a:	7812      	ldrb	r2, [r2, #0]
   28e0c:	0952      	lsrs	r2, r2, #5
   28e0e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   28e10:	230f      	movs	r3, #15
   28e12:	18fb      	adds	r3, r7, r3
   28e14:	781b      	ldrb	r3, [r3, #0]
   28e16:	2b00      	cmp	r3, #0
   28e18:	d10c      	bne.n	28e34 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28e1a:	4b09      	ldr	r3, [pc, #36]	; (28e40 <_extint_get_eic_from_channel+0x48>)
   28e1c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   28e1e:	230f      	movs	r3, #15
   28e20:	18fb      	adds	r3, r7, r3
   28e22:	781b      	ldrb	r3, [r3, #0]
   28e24:	009b      	lsls	r3, r3, #2
   28e26:	2210      	movs	r2, #16
   28e28:	4694      	mov	ip, r2
   28e2a:	44bc      	add	ip, r7
   28e2c:	4463      	add	r3, ip
   28e2e:	3b08      	subs	r3, #8
   28e30:	681b      	ldr	r3, [r3, #0]
   28e32:	e000      	b.n	28e36 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   28e34:	2300      	movs	r3, #0
	}
}
   28e36:	0018      	movs	r0, r3
   28e38:	46bd      	mov	sp, r7
   28e3a:	b004      	add	sp, #16
   28e3c:	bd80      	pop	{r7, pc}
   28e3e:	46c0      	nop			; (mov r8, r8)
   28e40:	40001800 	.word	0x40001800

00028e44 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   28e44:	b580      	push	{r7, lr}
   28e46:	b084      	sub	sp, #16
   28e48:	af00      	add	r7, sp, #0
   28e4a:	0002      	movs	r2, r0
   28e4c:	1dfb      	adds	r3, r7, #7
   28e4e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   28e50:	1dfb      	adds	r3, r7, #7
   28e52:	781b      	ldrb	r3, [r3, #0]
   28e54:	0018      	movs	r0, r3
   28e56:	4b0b      	ldr	r3, [pc, #44]	; (28e84 <extint_chan_is_detected+0x40>)
   28e58:	4798      	blx	r3
   28e5a:	0003      	movs	r3, r0
   28e5c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   28e5e:	1dfb      	adds	r3, r7, #7
   28e60:	781b      	ldrb	r3, [r3, #0]
   28e62:	221f      	movs	r2, #31
   28e64:	4013      	ands	r3, r2
   28e66:	2201      	movs	r2, #1
   28e68:	409a      	lsls	r2, r3
   28e6a:	0013      	movs	r3, r2
   28e6c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   28e6e:	68fb      	ldr	r3, [r7, #12]
   28e70:	691b      	ldr	r3, [r3, #16]
   28e72:	68ba      	ldr	r2, [r7, #8]
   28e74:	4013      	ands	r3, r2
   28e76:	1e5a      	subs	r2, r3, #1
   28e78:	4193      	sbcs	r3, r2
   28e7a:	b2db      	uxtb	r3, r3
}
   28e7c:	0018      	movs	r0, r3
   28e7e:	46bd      	mov	sp, r7
   28e80:	b004      	add	sp, #16
   28e82:	bd80      	pop	{r7, pc}
   28e84:	00028df9 	.word	0x00028df9

00028e88 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   28e88:	b580      	push	{r7, lr}
   28e8a:	b084      	sub	sp, #16
   28e8c:	af00      	add	r7, sp, #0
   28e8e:	0002      	movs	r2, r0
   28e90:	1dfb      	adds	r3, r7, #7
   28e92:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   28e94:	1dfb      	adds	r3, r7, #7
   28e96:	781b      	ldrb	r3, [r3, #0]
   28e98:	0018      	movs	r0, r3
   28e9a:	4b09      	ldr	r3, [pc, #36]	; (28ec0 <extint_chan_clear_detected+0x38>)
   28e9c:	4798      	blx	r3
   28e9e:	0003      	movs	r3, r0
   28ea0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   28ea2:	1dfb      	adds	r3, r7, #7
   28ea4:	781b      	ldrb	r3, [r3, #0]
   28ea6:	221f      	movs	r2, #31
   28ea8:	4013      	ands	r3, r2
   28eaa:	2201      	movs	r2, #1
   28eac:	409a      	lsls	r2, r3
   28eae:	0013      	movs	r3, r2
   28eb0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   28eb2:	68fb      	ldr	r3, [r7, #12]
   28eb4:	68ba      	ldr	r2, [r7, #8]
   28eb6:	611a      	str	r2, [r3, #16]
}
   28eb8:	46c0      	nop			; (mov r8, r8)
   28eba:	46bd      	mov	sp, r7
   28ebc:	b004      	add	sp, #16
   28ebe:	bd80      	pop	{r7, pc}
   28ec0:	00028df9 	.word	0x00028df9

00028ec4 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   28ec4:	b580      	push	{r7, lr}
   28ec6:	b082      	sub	sp, #8
   28ec8:	af00      	add	r7, sp, #0
   28eca:	6078      	str	r0, [r7, #4]
   28ecc:	0008      	movs	r0, r1
   28ece:	0011      	movs	r1, r2
   28ed0:	1cfb      	adds	r3, r7, #3
   28ed2:	1c02      	adds	r2, r0, #0
   28ed4:	701a      	strb	r2, [r3, #0]
   28ed6:	1cbb      	adds	r3, r7, #2
   28ed8:	1c0a      	adds	r2, r1, #0
   28eda:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   28edc:	1cbb      	adds	r3, r7, #2
   28ede:	781b      	ldrb	r3, [r3, #0]
   28ee0:	2b00      	cmp	r3, #0
   28ee2:	d001      	beq.n	28ee8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   28ee4:	2317      	movs	r3, #23
   28ee6:	e019      	b.n	28f1c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   28ee8:	1cfb      	adds	r3, r7, #3
   28eea:	781a      	ldrb	r2, [r3, #0]
   28eec:	4b0d      	ldr	r3, [pc, #52]	; (28f24 <extint_register_callback+0x60>)
   28eee:	0092      	lsls	r2, r2, #2
   28ef0:	58d3      	ldr	r3, [r2, r3]
   28ef2:	2b00      	cmp	r3, #0
   28ef4:	d107      	bne.n	28f06 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   28ef6:	1cfb      	adds	r3, r7, #3
   28ef8:	781a      	ldrb	r2, [r3, #0]
   28efa:	4b0a      	ldr	r3, [pc, #40]	; (28f24 <extint_register_callback+0x60>)
   28efc:	0092      	lsls	r2, r2, #2
   28efe:	6879      	ldr	r1, [r7, #4]
   28f00:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   28f02:	2300      	movs	r3, #0
   28f04:	e00a      	b.n	28f1c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   28f06:	1cfb      	adds	r3, r7, #3
   28f08:	781a      	ldrb	r2, [r3, #0]
   28f0a:	4b06      	ldr	r3, [pc, #24]	; (28f24 <extint_register_callback+0x60>)
   28f0c:	0092      	lsls	r2, r2, #2
   28f0e:	58d2      	ldr	r2, [r2, r3]
   28f10:	687b      	ldr	r3, [r7, #4]
   28f12:	429a      	cmp	r2, r3
   28f14:	d101      	bne.n	28f1a <extint_register_callback+0x56>
		return STATUS_OK;
   28f16:	2300      	movs	r3, #0
   28f18:	e000      	b.n	28f1c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   28f1a:	231d      	movs	r3, #29
}
   28f1c:	0018      	movs	r0, r3
   28f1e:	46bd      	mov	sp, r7
   28f20:	b002      	add	sp, #8
   28f22:	bd80      	pop	{r7, pc}
   28f24:	20005b4c 	.word	0x20005b4c

00028f28 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   28f28:	b580      	push	{r7, lr}
   28f2a:	b084      	sub	sp, #16
   28f2c:	af00      	add	r7, sp, #0
   28f2e:	0002      	movs	r2, r0
   28f30:	1dfb      	adds	r3, r7, #7
   28f32:	701a      	strb	r2, [r3, #0]
   28f34:	1dbb      	adds	r3, r7, #6
   28f36:	1c0a      	adds	r2, r1, #0
   28f38:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   28f3a:	1dbb      	adds	r3, r7, #6
   28f3c:	781b      	ldrb	r3, [r3, #0]
   28f3e:	2b00      	cmp	r3, #0
   28f40:	d10e      	bne.n	28f60 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   28f42:	1dfb      	adds	r3, r7, #7
   28f44:	781b      	ldrb	r3, [r3, #0]
   28f46:	0018      	movs	r0, r3
   28f48:	4b08      	ldr	r3, [pc, #32]	; (28f6c <extint_chan_enable_callback+0x44>)
   28f4a:	4798      	blx	r3
   28f4c:	0003      	movs	r3, r0
   28f4e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   28f50:	1dfb      	adds	r3, r7, #7
   28f52:	781b      	ldrb	r3, [r3, #0]
   28f54:	2201      	movs	r2, #1
   28f56:	409a      	lsls	r2, r3
   28f58:	68fb      	ldr	r3, [r7, #12]
   28f5a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   28f5c:	2300      	movs	r3, #0
   28f5e:	e000      	b.n	28f62 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   28f60:	2317      	movs	r3, #23
}
   28f62:	0018      	movs	r0, r3
   28f64:	46bd      	mov	sp, r7
   28f66:	b004      	add	sp, #16
   28f68:	bd80      	pop	{r7, pc}
   28f6a:	46c0      	nop			; (mov r8, r8)
   28f6c:	00028df9 	.word	0x00028df9

00028f70 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   28f70:	b580      	push	{r7, lr}
   28f72:	b084      	sub	sp, #16
   28f74:	af00      	add	r7, sp, #0
   28f76:	0002      	movs	r2, r0
   28f78:	1dfb      	adds	r3, r7, #7
   28f7a:	701a      	strb	r2, [r3, #0]
   28f7c:	1dbb      	adds	r3, r7, #6
   28f7e:	1c0a      	adds	r2, r1, #0
   28f80:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   28f82:	1dbb      	adds	r3, r7, #6
   28f84:	781b      	ldrb	r3, [r3, #0]
   28f86:	2b00      	cmp	r3, #0
   28f88:	d10e      	bne.n	28fa8 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   28f8a:	1dfb      	adds	r3, r7, #7
   28f8c:	781b      	ldrb	r3, [r3, #0]
   28f8e:	0018      	movs	r0, r3
   28f90:	4b08      	ldr	r3, [pc, #32]	; (28fb4 <extint_chan_disable_callback+0x44>)
   28f92:	4798      	blx	r3
   28f94:	0003      	movs	r3, r0
   28f96:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   28f98:	1dfb      	adds	r3, r7, #7
   28f9a:	781b      	ldrb	r3, [r3, #0]
   28f9c:	2201      	movs	r2, #1
   28f9e:	409a      	lsls	r2, r3
   28fa0:	68fb      	ldr	r3, [r7, #12]
   28fa2:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   28fa4:	2300      	movs	r3, #0
   28fa6:	e000      	b.n	28faa <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   28fa8:	2317      	movs	r3, #23
}
   28faa:	0018      	movs	r0, r3
   28fac:	46bd      	mov	sp, r7
   28fae:	b004      	add	sp, #16
   28fb0:	bd80      	pop	{r7, pc}
   28fb2:	46c0      	nop			; (mov r8, r8)
   28fb4:	00028df9 	.word	0x00028df9

00028fb8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   28fb8:	b580      	push	{r7, lr}
   28fba:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   28fbc:	4b15      	ldr	r3, [pc, #84]	; (29014 <EIC_Handler+0x5c>)
   28fbe:	2200      	movs	r2, #0
   28fc0:	701a      	strb	r2, [r3, #0]
   28fc2:	e020      	b.n	29006 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   28fc4:	4b13      	ldr	r3, [pc, #76]	; (29014 <EIC_Handler+0x5c>)
   28fc6:	781b      	ldrb	r3, [r3, #0]
   28fc8:	0018      	movs	r0, r3
   28fca:	4b13      	ldr	r3, [pc, #76]	; (29018 <EIC_Handler+0x60>)
   28fcc:	4798      	blx	r3
   28fce:	1e03      	subs	r3, r0, #0
   28fd0:	d013      	beq.n	28ffa <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   28fd2:	4b10      	ldr	r3, [pc, #64]	; (29014 <EIC_Handler+0x5c>)
   28fd4:	781b      	ldrb	r3, [r3, #0]
   28fd6:	0018      	movs	r0, r3
   28fd8:	4b10      	ldr	r3, [pc, #64]	; (2901c <EIC_Handler+0x64>)
   28fda:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   28fdc:	4b0d      	ldr	r3, [pc, #52]	; (29014 <EIC_Handler+0x5c>)
   28fde:	781b      	ldrb	r3, [r3, #0]
   28fe0:	001a      	movs	r2, r3
   28fe2:	4b0f      	ldr	r3, [pc, #60]	; (29020 <EIC_Handler+0x68>)
   28fe4:	0092      	lsls	r2, r2, #2
   28fe6:	58d3      	ldr	r3, [r2, r3]
   28fe8:	2b00      	cmp	r3, #0
   28fea:	d006      	beq.n	28ffa <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   28fec:	4b09      	ldr	r3, [pc, #36]	; (29014 <EIC_Handler+0x5c>)
   28fee:	781b      	ldrb	r3, [r3, #0]
   28ff0:	001a      	movs	r2, r3
   28ff2:	4b0b      	ldr	r3, [pc, #44]	; (29020 <EIC_Handler+0x68>)
   28ff4:	0092      	lsls	r2, r2, #2
   28ff6:	58d3      	ldr	r3, [r2, r3]
   28ff8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   28ffa:	4b06      	ldr	r3, [pc, #24]	; (29014 <EIC_Handler+0x5c>)
   28ffc:	781b      	ldrb	r3, [r3, #0]
   28ffe:	3301      	adds	r3, #1
   29000:	b2da      	uxtb	r2, r3
   29002:	4b04      	ldr	r3, [pc, #16]	; (29014 <EIC_Handler+0x5c>)
   29004:	701a      	strb	r2, [r3, #0]
   29006:	4b03      	ldr	r3, [pc, #12]	; (29014 <EIC_Handler+0x5c>)
   29008:	781b      	ldrb	r3, [r3, #0]
   2900a:	2b0f      	cmp	r3, #15
   2900c:	d9da      	bls.n	28fc4 <EIC_Handler+0xc>
			}
		}
	}
}
   2900e:	46c0      	nop			; (mov r8, r8)
   29010:	46bd      	mov	sp, r7
   29012:	bd80      	pop	{r7, pc}
   29014:	20005b48 	.word	0x20005b48
   29018:	00028e45 	.word	0x00028e45
   2901c:	00028e89 	.word	0x00028e89
   29020:	20005b4c 	.word	0x20005b4c

00029024 <system_gclk_chan_get_config_defaults>:
{
   29024:	b580      	push	{r7, lr}
   29026:	b082      	sub	sp, #8
   29028:	af00      	add	r7, sp, #0
   2902a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2902c:	687b      	ldr	r3, [r7, #4]
   2902e:	2200      	movs	r2, #0
   29030:	701a      	strb	r2, [r3, #0]
}
   29032:	46c0      	nop			; (mov r8, r8)
   29034:	46bd      	mov	sp, r7
   29036:	b002      	add	sp, #8
   29038:	bd80      	pop	{r7, pc}
	...

0002903c <system_apb_clock_set_mask>:
{
   2903c:	b580      	push	{r7, lr}
   2903e:	b082      	sub	sp, #8
   29040:	af00      	add	r7, sp, #0
   29042:	0002      	movs	r2, r0
   29044:	6039      	str	r1, [r7, #0]
   29046:	1dfb      	adds	r3, r7, #7
   29048:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2904a:	1dfb      	adds	r3, r7, #7
   2904c:	781b      	ldrb	r3, [r3, #0]
   2904e:	2b01      	cmp	r3, #1
   29050:	d00a      	beq.n	29068 <system_apb_clock_set_mask+0x2c>
   29052:	2b02      	cmp	r3, #2
   29054:	d00f      	beq.n	29076 <system_apb_clock_set_mask+0x3a>
   29056:	2b00      	cmp	r3, #0
   29058:	d114      	bne.n	29084 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2905a:	4b0e      	ldr	r3, [pc, #56]	; (29094 <system_apb_clock_set_mask+0x58>)
   2905c:	4a0d      	ldr	r2, [pc, #52]	; (29094 <system_apb_clock_set_mask+0x58>)
   2905e:	6991      	ldr	r1, [r2, #24]
   29060:	683a      	ldr	r2, [r7, #0]
   29062:	430a      	orrs	r2, r1
   29064:	619a      	str	r2, [r3, #24]
			break;
   29066:	e00f      	b.n	29088 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29068:	4b0a      	ldr	r3, [pc, #40]	; (29094 <system_apb_clock_set_mask+0x58>)
   2906a:	4a0a      	ldr	r2, [pc, #40]	; (29094 <system_apb_clock_set_mask+0x58>)
   2906c:	69d1      	ldr	r1, [r2, #28]
   2906e:	683a      	ldr	r2, [r7, #0]
   29070:	430a      	orrs	r2, r1
   29072:	61da      	str	r2, [r3, #28]
			break;
   29074:	e008      	b.n	29088 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29076:	4b07      	ldr	r3, [pc, #28]	; (29094 <system_apb_clock_set_mask+0x58>)
   29078:	4a06      	ldr	r2, [pc, #24]	; (29094 <system_apb_clock_set_mask+0x58>)
   2907a:	6a11      	ldr	r1, [r2, #32]
   2907c:	683a      	ldr	r2, [r7, #0]
   2907e:	430a      	orrs	r2, r1
   29080:	621a      	str	r2, [r3, #32]
			break;
   29082:	e001      	b.n	29088 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29084:	2317      	movs	r3, #23
   29086:	e000      	b.n	2908a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29088:	2300      	movs	r3, #0
}
   2908a:	0018      	movs	r0, r3
   2908c:	46bd      	mov	sp, r7
   2908e:	b002      	add	sp, #8
   29090:	bd80      	pop	{r7, pc}
   29092:	46c0      	nop			; (mov r8, r8)
   29094:	40000400 	.word	0x40000400

00029098 <system_pinmux_get_config_defaults>:
{
   29098:	b580      	push	{r7, lr}
   2909a:	b082      	sub	sp, #8
   2909c:	af00      	add	r7, sp, #0
   2909e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   290a0:	687b      	ldr	r3, [r7, #4]
   290a2:	2280      	movs	r2, #128	; 0x80
   290a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   290a6:	687b      	ldr	r3, [r7, #4]
   290a8:	2200      	movs	r2, #0
   290aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   290ac:	687b      	ldr	r3, [r7, #4]
   290ae:	2201      	movs	r2, #1
   290b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   290b2:	687b      	ldr	r3, [r7, #4]
   290b4:	2200      	movs	r2, #0
   290b6:	70da      	strb	r2, [r3, #3]
}
   290b8:	46c0      	nop			; (mov r8, r8)
   290ba:	46bd      	mov	sp, r7
   290bc:	b002      	add	sp, #8
   290be:	bd80      	pop	{r7, pc}

000290c0 <system_interrupt_enable>:
{
   290c0:	b580      	push	{r7, lr}
   290c2:	b082      	sub	sp, #8
   290c4:	af00      	add	r7, sp, #0
   290c6:	0002      	movs	r2, r0
   290c8:	1dfb      	adds	r3, r7, #7
   290ca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   290cc:	4b06      	ldr	r3, [pc, #24]	; (290e8 <system_interrupt_enable+0x28>)
   290ce:	1dfa      	adds	r2, r7, #7
   290d0:	7812      	ldrb	r2, [r2, #0]
   290d2:	0011      	movs	r1, r2
   290d4:	221f      	movs	r2, #31
   290d6:	400a      	ands	r2, r1
   290d8:	2101      	movs	r1, #1
   290da:	4091      	lsls	r1, r2
   290dc:	000a      	movs	r2, r1
   290de:	601a      	str	r2, [r3, #0]
}
   290e0:	46c0      	nop			; (mov r8, r8)
   290e2:	46bd      	mov	sp, r7
   290e4:	b002      	add	sp, #8
   290e6:	bd80      	pop	{r7, pc}
   290e8:	e000e100 	.word	0xe000e100

000290ec <_extint_get_eic_from_channel>:
{
   290ec:	b580      	push	{r7, lr}
   290ee:	b084      	sub	sp, #16
   290f0:	af00      	add	r7, sp, #0
   290f2:	0002      	movs	r2, r0
   290f4:	1dfb      	adds	r3, r7, #7
   290f6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   290f8:	230f      	movs	r3, #15
   290fa:	18fb      	adds	r3, r7, r3
   290fc:	1dfa      	adds	r2, r7, #7
   290fe:	7812      	ldrb	r2, [r2, #0]
   29100:	0952      	lsrs	r2, r2, #5
   29102:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   29104:	230f      	movs	r3, #15
   29106:	18fb      	adds	r3, r7, r3
   29108:	781b      	ldrb	r3, [r3, #0]
   2910a:	2b00      	cmp	r3, #0
   2910c:	d10c      	bne.n	29128 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2910e:	4b09      	ldr	r3, [pc, #36]	; (29134 <_extint_get_eic_from_channel+0x48>)
   29110:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   29112:	230f      	movs	r3, #15
   29114:	18fb      	adds	r3, r7, r3
   29116:	781b      	ldrb	r3, [r3, #0]
   29118:	009b      	lsls	r3, r3, #2
   2911a:	2210      	movs	r2, #16
   2911c:	4694      	mov	ip, r2
   2911e:	44bc      	add	ip, r7
   29120:	4463      	add	r3, ip
   29122:	3b08      	subs	r3, #8
   29124:	681b      	ldr	r3, [r3, #0]
   29126:	e000      	b.n	2912a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   29128:	2300      	movs	r3, #0
}
   2912a:	0018      	movs	r0, r3
   2912c:	46bd      	mov	sp, r7
   2912e:	b004      	add	sp, #16
   29130:	bd80      	pop	{r7, pc}
   29132:	46c0      	nop			; (mov r8, r8)
   29134:	40001800 	.word	0x40001800

00029138 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   29138:	b580      	push	{r7, lr}
   2913a:	b082      	sub	sp, #8
   2913c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2913e:	4b0f      	ldr	r3, [pc, #60]	; (2917c <extint_is_syncing+0x44>)
   29140:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   29142:	2300      	movs	r3, #0
   29144:	607b      	str	r3, [r7, #4]
   29146:	e011      	b.n	2916c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   29148:	687b      	ldr	r3, [r7, #4]
   2914a:	009b      	lsls	r3, r3, #2
   2914c:	2208      	movs	r2, #8
   2914e:	4694      	mov	ip, r2
   29150:	44bc      	add	ip, r7
   29152:	4463      	add	r3, ip
   29154:	3b08      	subs	r3, #8
   29156:	681b      	ldr	r3, [r3, #0]
   29158:	785b      	ldrb	r3, [r3, #1]
   2915a:	b2db      	uxtb	r3, r3
   2915c:	b25b      	sxtb	r3, r3
   2915e:	2b00      	cmp	r3, #0
   29160:	da01      	bge.n	29166 <extint_is_syncing+0x2e>
			return true;
   29162:	2301      	movs	r3, #1
   29164:	e006      	b.n	29174 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   29166:	687b      	ldr	r3, [r7, #4]
   29168:	3301      	adds	r3, #1
   2916a:	607b      	str	r3, [r7, #4]
   2916c:	687b      	ldr	r3, [r7, #4]
   2916e:	2b00      	cmp	r3, #0
   29170:	d0ea      	beq.n	29148 <extint_is_syncing+0x10>
		}
	}
	return false;
   29172:	2300      	movs	r3, #0
}
   29174:	0018      	movs	r0, r3
   29176:	46bd      	mov	sp, r7
   29178:	b002      	add	sp, #8
   2917a:	bd80      	pop	{r7, pc}
   2917c:	40001800 	.word	0x40001800

00029180 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   29180:	b580      	push	{r7, lr}
   29182:	b084      	sub	sp, #16
   29184:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   29186:	4b2d      	ldr	r3, [pc, #180]	; (2923c <_system_extint_init+0xbc>)
   29188:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   2918a:	2140      	movs	r1, #64	; 0x40
   2918c:	2000      	movs	r0, #0
   2918e:	4b2c      	ldr	r3, [pc, #176]	; (29240 <_system_extint_init+0xc0>)
   29190:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   29192:	003b      	movs	r3, r7
   29194:	0018      	movs	r0, r3
   29196:	4b2b      	ldr	r3, [pc, #172]	; (29244 <_system_extint_init+0xc4>)
   29198:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   2919a:	003b      	movs	r3, r7
   2919c:	2200      	movs	r2, #0
   2919e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   291a0:	003b      	movs	r3, r7
   291a2:	0019      	movs	r1, r3
   291a4:	2005      	movs	r0, #5
   291a6:	4b28      	ldr	r3, [pc, #160]	; (29248 <_system_extint_init+0xc8>)
   291a8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   291aa:	2005      	movs	r0, #5
   291ac:	4b27      	ldr	r3, [pc, #156]	; (2924c <_system_extint_init+0xcc>)
   291ae:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   291b0:	2300      	movs	r3, #0
   291b2:	60fb      	str	r3, [r7, #12]
   291b4:	e018      	b.n	291e8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   291b6:	68fb      	ldr	r3, [r7, #12]
   291b8:	009b      	lsls	r3, r3, #2
   291ba:	2210      	movs	r2, #16
   291bc:	4694      	mov	ip, r2
   291be:	44bc      	add	ip, r7
   291c0:	4463      	add	r3, ip
   291c2:	3b0c      	subs	r3, #12
   291c4:	681a      	ldr	r2, [r3, #0]
   291c6:	68fb      	ldr	r3, [r7, #12]
   291c8:	009b      	lsls	r3, r3, #2
   291ca:	2110      	movs	r1, #16
   291cc:	468c      	mov	ip, r1
   291ce:	44bc      	add	ip, r7
   291d0:	4463      	add	r3, ip
   291d2:	3b0c      	subs	r3, #12
   291d4:	681b      	ldr	r3, [r3, #0]
   291d6:	781b      	ldrb	r3, [r3, #0]
   291d8:	b2db      	uxtb	r3, r3
   291da:	2101      	movs	r1, #1
   291dc:	430b      	orrs	r3, r1
   291de:	b2db      	uxtb	r3, r3
   291e0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   291e2:	68fb      	ldr	r3, [r7, #12]
   291e4:	3301      	adds	r3, #1
   291e6:	60fb      	str	r3, [r7, #12]
   291e8:	68fb      	ldr	r3, [r7, #12]
   291ea:	2b00      	cmp	r3, #0
   291ec:	d0e3      	beq.n	291b6 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   291ee:	46c0      	nop			; (mov r8, r8)
   291f0:	4b17      	ldr	r3, [pc, #92]	; (29250 <_system_extint_init+0xd0>)
   291f2:	4798      	blx	r3
   291f4:	1e03      	subs	r3, r0, #0
   291f6:	d1fb      	bne.n	291f0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   291f8:	230b      	movs	r3, #11
   291fa:	18fb      	adds	r3, r7, r3
   291fc:	2200      	movs	r2, #0
   291fe:	701a      	strb	r2, [r3, #0]
   29200:	e00d      	b.n	2921e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   29202:	230b      	movs	r3, #11
   29204:	18fb      	adds	r3, r7, r3
   29206:	781a      	ldrb	r2, [r3, #0]
   29208:	4b12      	ldr	r3, [pc, #72]	; (29254 <_system_extint_init+0xd4>)
   2920a:	0092      	lsls	r2, r2, #2
   2920c:	2100      	movs	r1, #0
   2920e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   29210:	230b      	movs	r3, #11
   29212:	18fb      	adds	r3, r7, r3
   29214:	781a      	ldrb	r2, [r3, #0]
   29216:	230b      	movs	r3, #11
   29218:	18fb      	adds	r3, r7, r3
   2921a:	3201      	adds	r2, #1
   2921c:	701a      	strb	r2, [r3, #0]
   2921e:	230b      	movs	r3, #11
   29220:	18fb      	adds	r3, r7, r3
   29222:	781b      	ldrb	r3, [r3, #0]
   29224:	2b0f      	cmp	r3, #15
   29226:	d9ec      	bls.n	29202 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   29228:	2004      	movs	r0, #4
   2922a:	4b0b      	ldr	r3, [pc, #44]	; (29258 <_system_extint_init+0xd8>)
   2922c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   2922e:	4b0b      	ldr	r3, [pc, #44]	; (2925c <_system_extint_init+0xdc>)
   29230:	4798      	blx	r3
}
   29232:	46c0      	nop			; (mov r8, r8)
   29234:	46bd      	mov	sp, r7
   29236:	b004      	add	sp, #16
   29238:	bd80      	pop	{r7, pc}
   2923a:	46c0      	nop			; (mov r8, r8)
   2923c:	40001800 	.word	0x40001800
   29240:	0002903d 	.word	0x0002903d
   29244:	00029025 	.word	0x00029025
   29248:	0002c8ad 	.word	0x0002c8ad
   2924c:	0002c8f1 	.word	0x0002c8f1
   29250:	00029139 	.word	0x00029139
   29254:	20005b4c 	.word	0x20005b4c
   29258:	000290c1 	.word	0x000290c1
   2925c:	00029261 	.word	0x00029261

00029260 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   29260:	b580      	push	{r7, lr}
   29262:	b082      	sub	sp, #8
   29264:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   29266:	4b15      	ldr	r3, [pc, #84]	; (292bc <_extint_enable+0x5c>)
   29268:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2926a:	2300      	movs	r3, #0
   2926c:	607b      	str	r3, [r7, #4]
   2926e:	e018      	b.n	292a2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   29270:	687b      	ldr	r3, [r7, #4]
   29272:	009b      	lsls	r3, r3, #2
   29274:	2208      	movs	r2, #8
   29276:	4694      	mov	ip, r2
   29278:	44bc      	add	ip, r7
   2927a:	4463      	add	r3, ip
   2927c:	3b08      	subs	r3, #8
   2927e:	681a      	ldr	r2, [r3, #0]
   29280:	687b      	ldr	r3, [r7, #4]
   29282:	009b      	lsls	r3, r3, #2
   29284:	2108      	movs	r1, #8
   29286:	468c      	mov	ip, r1
   29288:	44bc      	add	ip, r7
   2928a:	4463      	add	r3, ip
   2928c:	3b08      	subs	r3, #8
   2928e:	681b      	ldr	r3, [r3, #0]
   29290:	781b      	ldrb	r3, [r3, #0]
   29292:	b2db      	uxtb	r3, r3
   29294:	2102      	movs	r1, #2
   29296:	430b      	orrs	r3, r1
   29298:	b2db      	uxtb	r3, r3
   2929a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2929c:	687b      	ldr	r3, [r7, #4]
   2929e:	3301      	adds	r3, #1
   292a0:	607b      	str	r3, [r7, #4]
   292a2:	687b      	ldr	r3, [r7, #4]
   292a4:	2b00      	cmp	r3, #0
   292a6:	d0e3      	beq.n	29270 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   292a8:	46c0      	nop			; (mov r8, r8)
   292aa:	4b05      	ldr	r3, [pc, #20]	; (292c0 <_extint_enable+0x60>)
   292ac:	4798      	blx	r3
   292ae:	1e03      	subs	r3, r0, #0
   292b0:	d1fb      	bne.n	292aa <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   292b2:	46c0      	nop			; (mov r8, r8)
   292b4:	46bd      	mov	sp, r7
   292b6:	b002      	add	sp, #8
   292b8:	bd80      	pop	{r7, pc}
   292ba:	46c0      	nop			; (mov r8, r8)
   292bc:	40001800 	.word	0x40001800
   292c0:	00029139 	.word	0x00029139

000292c4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   292c4:	b580      	push	{r7, lr}
   292c6:	b082      	sub	sp, #8
   292c8:	af00      	add	r7, sp, #0
   292ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   292cc:	687b      	ldr	r3, [r7, #4]
   292ce:	2200      	movs	r2, #0
   292d0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   292d2:	687b      	ldr	r3, [r7, #4]
   292d4:	2200      	movs	r2, #0
   292d6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   292d8:	687b      	ldr	r3, [r7, #4]
   292da:	2201      	movs	r2, #1
   292dc:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   292de:	687b      	ldr	r3, [r7, #4]
   292e0:	2201      	movs	r2, #1
   292e2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   292e4:	687b      	ldr	r3, [r7, #4]
   292e6:	2200      	movs	r2, #0
   292e8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   292ea:	687b      	ldr	r3, [r7, #4]
   292ec:	2202      	movs	r2, #2
   292ee:	72da      	strb	r2, [r3, #11]
}
   292f0:	46c0      	nop			; (mov r8, r8)
   292f2:	46bd      	mov	sp, r7
   292f4:	b002      	add	sp, #8
   292f6:	bd80      	pop	{r7, pc}

000292f8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   292f8:	b580      	push	{r7, lr}
   292fa:	b086      	sub	sp, #24
   292fc:	af00      	add	r7, sp, #0
   292fe:	0002      	movs	r2, r0
   29300:	6039      	str	r1, [r7, #0]
   29302:	1dfb      	adds	r3, r7, #7
   29304:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   29306:	2308      	movs	r3, #8
   29308:	18fb      	adds	r3, r7, r3
   2930a:	0018      	movs	r0, r3
   2930c:	4b36      	ldr	r3, [pc, #216]	; (293e8 <extint_chan_set_config+0xf0>)
   2930e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   29310:	683b      	ldr	r3, [r7, #0]
   29312:	685b      	ldr	r3, [r3, #4]
   29314:	b2da      	uxtb	r2, r3
   29316:	2308      	movs	r3, #8
   29318:	18fb      	adds	r3, r7, r3
   2931a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2931c:	2308      	movs	r3, #8
   2931e:	18fb      	adds	r3, r7, r3
   29320:	2200      	movs	r2, #0
   29322:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   29324:	683b      	ldr	r3, [r7, #0]
   29326:	7a1a      	ldrb	r2, [r3, #8]
   29328:	2308      	movs	r3, #8
   2932a:	18fb      	adds	r3, r7, r3
   2932c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   2932e:	683b      	ldr	r3, [r7, #0]
   29330:	681b      	ldr	r3, [r3, #0]
   29332:	b2db      	uxtb	r3, r3
   29334:	2208      	movs	r2, #8
   29336:	18ba      	adds	r2, r7, r2
   29338:	0011      	movs	r1, r2
   2933a:	0018      	movs	r0, r3
   2933c:	4b2b      	ldr	r3, [pc, #172]	; (293ec <extint_chan_set_config+0xf4>)
   2933e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   29340:	1dfb      	adds	r3, r7, #7
   29342:	781b      	ldrb	r3, [r3, #0]
   29344:	0018      	movs	r0, r3
   29346:	4b2a      	ldr	r3, [pc, #168]	; (293f0 <extint_chan_set_config+0xf8>)
   29348:	4798      	blx	r3
   2934a:	0003      	movs	r3, r0
   2934c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2934e:	1dfb      	adds	r3, r7, #7
   29350:	781b      	ldrb	r3, [r3, #0]
   29352:	2207      	movs	r2, #7
   29354:	4013      	ands	r3, r2
   29356:	009b      	lsls	r3, r3, #2
   29358:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2935a:	683b      	ldr	r3, [r7, #0]
   2935c:	7adb      	ldrb	r3, [r3, #11]
   2935e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   29360:	683b      	ldr	r3, [r7, #0]
   29362:	7a9b      	ldrb	r3, [r3, #10]
   29364:	2b00      	cmp	r3, #0
   29366:	d003      	beq.n	29370 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   29368:	697b      	ldr	r3, [r7, #20]
   2936a:	2208      	movs	r2, #8
   2936c:	4313      	orrs	r3, r2
   2936e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   29370:	1dfb      	adds	r3, r7, #7
   29372:	781b      	ldrb	r3, [r3, #0]
   29374:	08db      	lsrs	r3, r3, #3
   29376:	b2db      	uxtb	r3, r3
   29378:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   2937a:	1dfb      	adds	r3, r7, #7
   2937c:	781b      	ldrb	r3, [r3, #0]
   2937e:	08db      	lsrs	r3, r3, #3
   29380:	b2db      	uxtb	r3, r3
   29382:	001a      	movs	r2, r3
   29384:	693b      	ldr	r3, [r7, #16]
   29386:	3206      	adds	r2, #6
   29388:	0092      	lsls	r2, r2, #2
   2938a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   2938c:	210f      	movs	r1, #15
   2938e:	68fa      	ldr	r2, [r7, #12]
   29390:	4091      	lsls	r1, r2
   29392:	000a      	movs	r2, r1
   29394:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   29396:	401a      	ands	r2, r3
			(new_config << config_pos);
   29398:	6979      	ldr	r1, [r7, #20]
   2939a:	68fb      	ldr	r3, [r7, #12]
   2939c:	4099      	lsls	r1, r3
   2939e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   293a0:	431a      	orrs	r2, r3
   293a2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   293a4:	693b      	ldr	r3, [r7, #16]
   293a6:	1d82      	adds	r2, r0, #6
   293a8:	0092      	lsls	r2, r2, #2
   293aa:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   293ac:	683b      	ldr	r3, [r7, #0]
   293ae:	7a5b      	ldrb	r3, [r3, #9]
   293b0:	2b00      	cmp	r3, #0
   293b2:	d00a      	beq.n	293ca <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   293b4:	693b      	ldr	r3, [r7, #16]
   293b6:	695a      	ldr	r2, [r3, #20]
   293b8:	1dfb      	adds	r3, r7, #7
   293ba:	781b      	ldrb	r3, [r3, #0]
   293bc:	2101      	movs	r1, #1
   293be:	4099      	lsls	r1, r3
   293c0:	000b      	movs	r3, r1
   293c2:	431a      	orrs	r2, r3
   293c4:	693b      	ldr	r3, [r7, #16]
   293c6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   293c8:	e00a      	b.n	293e0 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   293ca:	693b      	ldr	r3, [r7, #16]
   293cc:	695b      	ldr	r3, [r3, #20]
   293ce:	1dfa      	adds	r2, r7, #7
   293d0:	7812      	ldrb	r2, [r2, #0]
   293d2:	2101      	movs	r1, #1
   293d4:	4091      	lsls	r1, r2
   293d6:	000a      	movs	r2, r1
   293d8:	43d2      	mvns	r2, r2
   293da:	401a      	ands	r2, r3
   293dc:	693b      	ldr	r3, [r7, #16]
   293de:	615a      	str	r2, [r3, #20]
}
   293e0:	46c0      	nop			; (mov r8, r8)
   293e2:	46bd      	mov	sp, r7
   293e4:	b006      	add	sp, #24
   293e6:	bd80      	pop	{r7, pc}
   293e8:	00029099 	.word	0x00029099
   293ec:	0002cc0d 	.word	0x0002cc0d
   293f0:	000290ed 	.word	0x000290ed

000293f4 <system_pinmux_get_config_defaults>:
{
   293f4:	b580      	push	{r7, lr}
   293f6:	b082      	sub	sp, #8
   293f8:	af00      	add	r7, sp, #0
   293fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   293fc:	687b      	ldr	r3, [r7, #4]
   293fe:	2280      	movs	r2, #128	; 0x80
   29400:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29402:	687b      	ldr	r3, [r7, #4]
   29404:	2200      	movs	r2, #0
   29406:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29408:	687b      	ldr	r3, [r7, #4]
   2940a:	2201      	movs	r2, #1
   2940c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2940e:	687b      	ldr	r3, [r7, #4]
   29410:	2200      	movs	r2, #0
   29412:	70da      	strb	r2, [r3, #3]
}
   29414:	46c0      	nop			; (mov r8, r8)
   29416:	46bd      	mov	sp, r7
   29418:	b002      	add	sp, #8
   2941a:	bd80      	pop	{r7, pc}

0002941c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   2941c:	b580      	push	{r7, lr}
   2941e:	b084      	sub	sp, #16
   29420:	af00      	add	r7, sp, #0
   29422:	0002      	movs	r2, r0
   29424:	6039      	str	r1, [r7, #0]
   29426:	1dfb      	adds	r3, r7, #7
   29428:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2942a:	230c      	movs	r3, #12
   2942c:	18fb      	adds	r3, r7, r3
   2942e:	0018      	movs	r0, r3
   29430:	4b10      	ldr	r3, [pc, #64]	; (29474 <port_pin_set_config+0x58>)
   29432:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   29434:	230c      	movs	r3, #12
   29436:	18fb      	adds	r3, r7, r3
   29438:	2280      	movs	r2, #128	; 0x80
   2943a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   2943c:	683b      	ldr	r3, [r7, #0]
   2943e:	781a      	ldrb	r2, [r3, #0]
   29440:	230c      	movs	r3, #12
   29442:	18fb      	adds	r3, r7, r3
   29444:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   29446:	683b      	ldr	r3, [r7, #0]
   29448:	785a      	ldrb	r2, [r3, #1]
   2944a:	230c      	movs	r3, #12
   2944c:	18fb      	adds	r3, r7, r3
   2944e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   29450:	683b      	ldr	r3, [r7, #0]
   29452:	789a      	ldrb	r2, [r3, #2]
   29454:	230c      	movs	r3, #12
   29456:	18fb      	adds	r3, r7, r3
   29458:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2945a:	230c      	movs	r3, #12
   2945c:	18fa      	adds	r2, r7, r3
   2945e:	1dfb      	adds	r3, r7, #7
   29460:	781b      	ldrb	r3, [r3, #0]
   29462:	0011      	movs	r1, r2
   29464:	0018      	movs	r0, r3
   29466:	4b04      	ldr	r3, [pc, #16]	; (29478 <port_pin_set_config+0x5c>)
   29468:	4798      	blx	r3
}
   2946a:	46c0      	nop			; (mov r8, r8)
   2946c:	46bd      	mov	sp, r7
   2946e:	b004      	add	sp, #16
   29470:	bd80      	pop	{r7, pc}
   29472:	46c0      	nop			; (mov r8, r8)
   29474:	000293f5 	.word	0x000293f5
   29478:	0002cc0d 	.word	0x0002cc0d

0002947c <system_gclk_chan_get_config_defaults>:
{
   2947c:	b580      	push	{r7, lr}
   2947e:	b082      	sub	sp, #8
   29480:	af00      	add	r7, sp, #0
   29482:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29484:	687b      	ldr	r3, [r7, #4]
   29486:	2200      	movs	r2, #0
   29488:	701a      	strb	r2, [r3, #0]
}
   2948a:	46c0      	nop			; (mov r8, r8)
   2948c:	46bd      	mov	sp, r7
   2948e:	b002      	add	sp, #8
   29490:	bd80      	pop	{r7, pc}
	...

00029494 <system_apb_clock_set_mask>:
{
   29494:	b580      	push	{r7, lr}
   29496:	b082      	sub	sp, #8
   29498:	af00      	add	r7, sp, #0
   2949a:	0002      	movs	r2, r0
   2949c:	6039      	str	r1, [r7, #0]
   2949e:	1dfb      	adds	r3, r7, #7
   294a0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   294a2:	1dfb      	adds	r3, r7, #7
   294a4:	781b      	ldrb	r3, [r3, #0]
   294a6:	2b01      	cmp	r3, #1
   294a8:	d00a      	beq.n	294c0 <system_apb_clock_set_mask+0x2c>
   294aa:	2b02      	cmp	r3, #2
   294ac:	d00f      	beq.n	294ce <system_apb_clock_set_mask+0x3a>
   294ae:	2b00      	cmp	r3, #0
   294b0:	d114      	bne.n	294dc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   294b2:	4b0e      	ldr	r3, [pc, #56]	; (294ec <system_apb_clock_set_mask+0x58>)
   294b4:	4a0d      	ldr	r2, [pc, #52]	; (294ec <system_apb_clock_set_mask+0x58>)
   294b6:	6991      	ldr	r1, [r2, #24]
   294b8:	683a      	ldr	r2, [r7, #0]
   294ba:	430a      	orrs	r2, r1
   294bc:	619a      	str	r2, [r3, #24]
			break;
   294be:	e00f      	b.n	294e0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   294c0:	4b0a      	ldr	r3, [pc, #40]	; (294ec <system_apb_clock_set_mask+0x58>)
   294c2:	4a0a      	ldr	r2, [pc, #40]	; (294ec <system_apb_clock_set_mask+0x58>)
   294c4:	69d1      	ldr	r1, [r2, #28]
   294c6:	683a      	ldr	r2, [r7, #0]
   294c8:	430a      	orrs	r2, r1
   294ca:	61da      	str	r2, [r3, #28]
			break;
   294cc:	e008      	b.n	294e0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   294ce:	4b07      	ldr	r3, [pc, #28]	; (294ec <system_apb_clock_set_mask+0x58>)
   294d0:	4a06      	ldr	r2, [pc, #24]	; (294ec <system_apb_clock_set_mask+0x58>)
   294d2:	6a11      	ldr	r1, [r2, #32]
   294d4:	683a      	ldr	r2, [r7, #0]
   294d6:	430a      	orrs	r2, r1
   294d8:	621a      	str	r2, [r3, #32]
			break;
   294da:	e001      	b.n	294e0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   294dc:	2317      	movs	r3, #23
   294de:	e000      	b.n	294e2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   294e0:	2300      	movs	r3, #0
}
   294e2:	0018      	movs	r0, r3
   294e4:	46bd      	mov	sp, r7
   294e6:	b002      	add	sp, #8
   294e8:	bd80      	pop	{r7, pc}
   294ea:	46c0      	nop			; (mov r8, r8)
   294ec:	40000400 	.word	0x40000400

000294f0 <system_interrupt_enable>:
{
   294f0:	b580      	push	{r7, lr}
   294f2:	b082      	sub	sp, #8
   294f4:	af00      	add	r7, sp, #0
   294f6:	0002      	movs	r2, r0
   294f8:	1dfb      	adds	r3, r7, #7
   294fa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   294fc:	4b06      	ldr	r3, [pc, #24]	; (29518 <system_interrupt_enable+0x28>)
   294fe:	1dfa      	adds	r2, r7, #7
   29500:	7812      	ldrb	r2, [r2, #0]
   29502:	0011      	movs	r1, r2
   29504:	221f      	movs	r2, #31
   29506:	400a      	ands	r2, r1
   29508:	2101      	movs	r1, #1
   2950a:	4091      	lsls	r1, r2
   2950c:	000a      	movs	r2, r1
   2950e:	601a      	str	r2, [r3, #0]
}
   29510:	46c0      	nop			; (mov r8, r8)
   29512:	46bd      	mov	sp, r7
   29514:	b002      	add	sp, #8
   29516:	bd80      	pop	{r7, pc}
   29518:	e000e100 	.word	0xe000e100

0002951c <system_interrupt_disable>:
{
   2951c:	b580      	push	{r7, lr}
   2951e:	b082      	sub	sp, #8
   29520:	af00      	add	r7, sp, #0
   29522:	0002      	movs	r2, r0
   29524:	1dfb      	adds	r3, r7, #7
   29526:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   29528:	4a07      	ldr	r2, [pc, #28]	; (29548 <system_interrupt_disable+0x2c>)
   2952a:	1dfb      	adds	r3, r7, #7
   2952c:	781b      	ldrb	r3, [r3, #0]
   2952e:	0019      	movs	r1, r3
   29530:	231f      	movs	r3, #31
   29532:	400b      	ands	r3, r1
   29534:	2101      	movs	r1, #1
   29536:	4099      	lsls	r1, r3
   29538:	000b      	movs	r3, r1
   2953a:	0019      	movs	r1, r3
   2953c:	2380      	movs	r3, #128	; 0x80
   2953e:	50d1      	str	r1, [r2, r3]
}
   29540:	46c0      	nop			; (mov r8, r8)
   29542:	46bd      	mov	sp, r7
   29544:	b002      	add	sp, #8
   29546:	bd80      	pop	{r7, pc}
   29548:	e000e100 	.word	0xe000e100

0002954c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   2954c:	b580      	push	{r7, lr}
   2954e:	b084      	sub	sp, #16
   29550:	af00      	add	r7, sp, #0
   29552:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   29554:	687b      	ldr	r3, [r7, #4]
   29556:	681b      	ldr	r3, [r3, #0]
   29558:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2955a:	68fb      	ldr	r3, [r7, #12]
   2955c:	7a9b      	ldrb	r3, [r3, #10]
   2955e:	b2db      	uxtb	r3, r3
   29560:	b25b      	sxtb	r3, r3
   29562:	2b00      	cmp	r3, #0
   29564:	da01      	bge.n	2956a <rtc_calendar_is_syncing+0x1e>
                return true;
   29566:	2301      	movs	r3, #1
   29568:	e000      	b.n	2956c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2956a:	2300      	movs	r3, #0
}
   2956c:	0018      	movs	r0, r3
   2956e:	46bd      	mov	sp, r7
   29570:	b004      	add	sp, #16
   29572:	bd80      	pop	{r7, pc}

00029574 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   29574:	b580      	push	{r7, lr}
   29576:	b084      	sub	sp, #16
   29578:	af00      	add	r7, sp, #0
   2957a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2957c:	687b      	ldr	r3, [r7, #4]
   2957e:	681b      	ldr	r3, [r3, #0]
   29580:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   29582:	2003      	movs	r0, #3
   29584:	4b0a      	ldr	r3, [pc, #40]	; (295b0 <rtc_calendar_enable+0x3c>)
   29586:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   29588:	46c0      	nop			; (mov r8, r8)
   2958a:	687b      	ldr	r3, [r7, #4]
   2958c:	0018      	movs	r0, r3
   2958e:	4b09      	ldr	r3, [pc, #36]	; (295b4 <rtc_calendar_enable+0x40>)
   29590:	4798      	blx	r3
   29592:	1e03      	subs	r3, r0, #0
   29594:	d1f9      	bne.n	2958a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   29596:	68fb      	ldr	r3, [r7, #12]
   29598:	881b      	ldrh	r3, [r3, #0]
   2959a:	b29b      	uxth	r3, r3
   2959c:	2202      	movs	r2, #2
   2959e:	4313      	orrs	r3, r2
   295a0:	b29a      	uxth	r2, r3
   295a2:	68fb      	ldr	r3, [r7, #12]
   295a4:	801a      	strh	r2, [r3, #0]
}
   295a6:	46c0      	nop			; (mov r8, r8)
   295a8:	46bd      	mov	sp, r7
   295aa:	b004      	add	sp, #16
   295ac:	bd80      	pop	{r7, pc}
   295ae:	46c0      	nop			; (mov r8, r8)
   295b0:	000294f1 	.word	0x000294f1
   295b4:	0002954d 	.word	0x0002954d

000295b8 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   295b8:	b580      	push	{r7, lr}
   295ba:	b084      	sub	sp, #16
   295bc:	af00      	add	r7, sp, #0
   295be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   295c0:	687b      	ldr	r3, [r7, #4]
   295c2:	681b      	ldr	r3, [r3, #0]
   295c4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   295c6:	2003      	movs	r0, #3
   295c8:	4b0d      	ldr	r3, [pc, #52]	; (29600 <rtc_calendar_disable+0x48>)
   295ca:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   295cc:	46c0      	nop			; (mov r8, r8)
   295ce:	687b      	ldr	r3, [r7, #4]
   295d0:	0018      	movs	r0, r3
   295d2:	4b0c      	ldr	r3, [pc, #48]	; (29604 <rtc_calendar_disable+0x4c>)
   295d4:	4798      	blx	r3
   295d6:	1e03      	subs	r3, r0, #0
   295d8:	d1f9      	bne.n	295ce <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   295da:	68fb      	ldr	r3, [r7, #12]
   295dc:	22c1      	movs	r2, #193	; 0xc1
   295de:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   295e0:	68fb      	ldr	r3, [r7, #12]
   295e2:	22c1      	movs	r2, #193	; 0xc1
   295e4:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   295e6:	68fb      	ldr	r3, [r7, #12]
   295e8:	881b      	ldrh	r3, [r3, #0]
   295ea:	b29b      	uxth	r3, r3
   295ec:	2202      	movs	r2, #2
   295ee:	4393      	bics	r3, r2
   295f0:	b29a      	uxth	r2, r3
   295f2:	68fb      	ldr	r3, [r7, #12]
   295f4:	801a      	strh	r2, [r3, #0]
}
   295f6:	46c0      	nop			; (mov r8, r8)
   295f8:	46bd      	mov	sp, r7
   295fa:	b004      	add	sp, #16
   295fc:	bd80      	pop	{r7, pc}
   295fe:	46c0      	nop			; (mov r8, r8)
   29600:	0002951d 	.word	0x0002951d
   29604:	0002954d 	.word	0x0002954d

00029608 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   29608:	b580      	push	{r7, lr}
   2960a:	b084      	sub	sp, #16
   2960c:	af00      	add	r7, sp, #0
   2960e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   29610:	687b      	ldr	r3, [r7, #4]
   29612:	681b      	ldr	r3, [r3, #0]
   29614:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   29616:	687b      	ldr	r3, [r7, #4]
   29618:	0018      	movs	r0, r3
   2961a:	4b0d      	ldr	r3, [pc, #52]	; (29650 <rtc_calendar_reset+0x48>)
   2961c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   2961e:	687b      	ldr	r3, [r7, #4]
   29620:	2200      	movs	r2, #0
   29622:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   29624:	687b      	ldr	r3, [r7, #4]
   29626:	2200      	movs	r2, #0
   29628:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   2962a:	46c0      	nop			; (mov r8, r8)
   2962c:	687b      	ldr	r3, [r7, #4]
   2962e:	0018      	movs	r0, r3
   29630:	4b08      	ldr	r3, [pc, #32]	; (29654 <rtc_calendar_reset+0x4c>)
   29632:	4798      	blx	r3
   29634:	1e03      	subs	r3, r0, #0
   29636:	d1f9      	bne.n	2962c <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   29638:	68fb      	ldr	r3, [r7, #12]
   2963a:	881b      	ldrh	r3, [r3, #0]
   2963c:	b29b      	uxth	r3, r3
   2963e:	2201      	movs	r2, #1
   29640:	4313      	orrs	r3, r2
   29642:	b29a      	uxth	r2, r3
   29644:	68fb      	ldr	r3, [r7, #12]
   29646:	801a      	strh	r2, [r3, #0]
}
   29648:	46c0      	nop			; (mov r8, r8)
   2964a:	46bd      	mov	sp, r7
   2964c:	b004      	add	sp, #16
   2964e:	bd80      	pop	{r7, pc}
   29650:	000295b9 	.word	0x000295b9
   29654:	0002954d 	.word	0x0002954d

00029658 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   29658:	b580      	push	{r7, lr}
   2965a:	b084      	sub	sp, #16
   2965c:	af00      	add	r7, sp, #0
   2965e:	6078      	str	r0, [r7, #4]
   29660:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   29662:	683b      	ldr	r3, [r7, #0]
   29664:	88db      	ldrh	r3, [r3, #6]
   29666:	001a      	movs	r2, r3
   29668:	687b      	ldr	r3, [r7, #4]
   2966a:	88db      	ldrh	r3, [r3, #6]
   2966c:	1ad3      	subs	r3, r2, r3
   2966e:	069b      	lsls	r3, r3, #26
   29670:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   29672:	683b      	ldr	r3, [r7, #0]
   29674:	795b      	ldrb	r3, [r3, #5]
   29676:	059b      	lsls	r3, r3, #22
   29678:	001a      	movs	r2, r3
   2967a:	68fb      	ldr	r3, [r7, #12]
   2967c:	4313      	orrs	r3, r2
   2967e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   29680:	683b      	ldr	r3, [r7, #0]
   29682:	791b      	ldrb	r3, [r3, #4]
   29684:	045b      	lsls	r3, r3, #17
   29686:	001a      	movs	r2, r3
   29688:	68fb      	ldr	r3, [r7, #12]
   2968a:	4313      	orrs	r3, r2
   2968c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   2968e:	683b      	ldr	r3, [r7, #0]
   29690:	789b      	ldrb	r3, [r3, #2]
   29692:	031b      	lsls	r3, r3, #12
   29694:	001a      	movs	r2, r3
   29696:	68fb      	ldr	r3, [r7, #12]
   29698:	4313      	orrs	r3, r2
   2969a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   2969c:	687b      	ldr	r3, [r7, #4]
   2969e:	791b      	ldrb	r3, [r3, #4]
   296a0:	2201      	movs	r2, #1
   296a2:	4053      	eors	r3, r2
   296a4:	b2db      	uxtb	r3, r3
   296a6:	2b00      	cmp	r3, #0
   296a8:	d008      	beq.n	296bc <rtc_calendar_time_to_register_value+0x64>
   296aa:	683b      	ldr	r3, [r7, #0]
   296ac:	78db      	ldrb	r3, [r3, #3]
   296ae:	2b00      	cmp	r3, #0
   296b0:	d004      	beq.n	296bc <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   296b2:	68fb      	ldr	r3, [r7, #12]
   296b4:	2280      	movs	r2, #128	; 0x80
   296b6:	0252      	lsls	r2, r2, #9
   296b8:	4313      	orrs	r3, r2
   296ba:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   296bc:	683b      	ldr	r3, [r7, #0]
   296be:	785b      	ldrb	r3, [r3, #1]
   296c0:	019b      	lsls	r3, r3, #6
   296c2:	001a      	movs	r2, r3
   296c4:	68fb      	ldr	r3, [r7, #12]
   296c6:	4313      	orrs	r3, r2
   296c8:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   296ca:	683b      	ldr	r3, [r7, #0]
   296cc:	781b      	ldrb	r3, [r3, #0]
   296ce:	001a      	movs	r2, r3
   296d0:	68fb      	ldr	r3, [r7, #12]
   296d2:	4313      	orrs	r3, r2
   296d4:	60fb      	str	r3, [r7, #12]

	return register_value;
   296d6:	68fb      	ldr	r3, [r7, #12]
}
   296d8:	0018      	movs	r0, r3
   296da:	46bd      	mov	sp, r7
   296dc:	b004      	add	sp, #16
   296de:	bd80      	pop	{r7, pc}

000296e0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   296e0:	b580      	push	{r7, lr}
   296e2:	b084      	sub	sp, #16
   296e4:	af00      	add	r7, sp, #0
   296e6:	60f8      	str	r0, [r7, #12]
   296e8:	60b9      	str	r1, [r7, #8]
   296ea:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   296ec:	68bb      	ldr	r3, [r7, #8]
   296ee:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   296f0:	b29a      	uxth	r2, r3
   296f2:	68fb      	ldr	r3, [r7, #12]
   296f4:	88db      	ldrh	r3, [r3, #6]
   296f6:	18d3      	adds	r3, r2, r3
   296f8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   296fa:	687b      	ldr	r3, [r7, #4]
   296fc:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   296fe:	68bb      	ldr	r3, [r7, #8]
   29700:	0d9b      	lsrs	r3, r3, #22
   29702:	b2db      	uxtb	r3, r3
   29704:	220f      	movs	r2, #15
   29706:	4013      	ands	r3, r2
   29708:	b2da      	uxtb	r2, r3
   2970a:	687b      	ldr	r3, [r7, #4]
   2970c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   2970e:	68bb      	ldr	r3, [r7, #8]
   29710:	0c5b      	lsrs	r3, r3, #17
   29712:	b2db      	uxtb	r3, r3
   29714:	221f      	movs	r2, #31
   29716:	4013      	ands	r3, r2
   29718:	b2da      	uxtb	r2, r3
   2971a:	687b      	ldr	r3, [r7, #4]
   2971c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   2971e:	68fb      	ldr	r3, [r7, #12]
   29720:	791b      	ldrb	r3, [r3, #4]
   29722:	2b00      	cmp	r3, #0
   29724:	d008      	beq.n	29738 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   29726:	68bb      	ldr	r3, [r7, #8]
   29728:	0b1b      	lsrs	r3, r3, #12
   2972a:	b2db      	uxtb	r3, r3
   2972c:	221f      	movs	r2, #31
   2972e:	4013      	ands	r3, r2
   29730:	b2da      	uxtb	r2, r3
   29732:	687b      	ldr	r3, [r7, #4]
   29734:	709a      	strb	r2, [r3, #2]
   29736:	e010      	b.n	2975a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   29738:	68bb      	ldr	r3, [r7, #8]
   2973a:	0b1b      	lsrs	r3, r3, #12
   2973c:	b2db      	uxtb	r3, r3
   2973e:	220f      	movs	r2, #15
   29740:	4013      	ands	r3, r2
   29742:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   29744:	687b      	ldr	r3, [r7, #4]
   29746:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   29748:	68ba      	ldr	r2, [r7, #8]
   2974a:	2380      	movs	r3, #128	; 0x80
   2974c:	025b      	lsls	r3, r3, #9
   2974e:	4013      	ands	r3, r2
   29750:	1e5a      	subs	r2, r3, #1
   29752:	4193      	sbcs	r3, r2
   29754:	b2da      	uxtb	r2, r3
   29756:	687b      	ldr	r3, [r7, #4]
   29758:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   2975a:	68bb      	ldr	r3, [r7, #8]
   2975c:	099b      	lsrs	r3, r3, #6
   2975e:	b2db      	uxtb	r3, r3
   29760:	223f      	movs	r2, #63	; 0x3f
   29762:	4013      	ands	r3, r2
   29764:	b2da      	uxtb	r2, r3
   29766:	687b      	ldr	r3, [r7, #4]
   29768:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   2976a:	68bb      	ldr	r3, [r7, #8]
   2976c:	b2db      	uxtb	r3, r3
   2976e:	223f      	movs	r2, #63	; 0x3f
   29770:	4013      	ands	r3, r2
   29772:	b2da      	uxtb	r2, r3
   29774:	687b      	ldr	r3, [r7, #4]
   29776:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   29778:	46c0      	nop			; (mov r8, r8)
   2977a:	46bd      	mov	sp, r7
   2977c:	b004      	add	sp, #16
   2977e:	bd80      	pop	{r7, pc}

00029780 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   29780:	b580      	push	{r7, lr}
   29782:	b084      	sub	sp, #16
   29784:	af00      	add	r7, sp, #0
   29786:	6078      	str	r0, [r7, #4]
   29788:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2978a:	687b      	ldr	r3, [r7, #4]
   2978c:	681b      	ldr	r3, [r3, #0]
   2978e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   29790:	683b      	ldr	r3, [r7, #0]
   29792:	881a      	ldrh	r2, [r3, #0]
   29794:	230e      	movs	r3, #14
   29796:	18fb      	adds	r3, r7, r3
   29798:	2108      	movs	r1, #8
   2979a:	430a      	orrs	r2, r1
   2979c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   2979e:	683b      	ldr	r3, [r7, #0]
   297a0:	791b      	ldrb	r3, [r3, #4]
   297a2:	2201      	movs	r2, #1
   297a4:	4053      	eors	r3, r2
   297a6:	b2db      	uxtb	r3, r3
   297a8:	2b00      	cmp	r3, #0
   297aa:	d007      	beq.n	297bc <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   297ac:	230e      	movs	r3, #14
   297ae:	18fb      	adds	r3, r7, r3
   297b0:	220e      	movs	r2, #14
   297b2:	18ba      	adds	r2, r7, r2
   297b4:	8812      	ldrh	r2, [r2, #0]
   297b6:	2140      	movs	r1, #64	; 0x40
   297b8:	430a      	orrs	r2, r1
   297ba:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   297bc:	683b      	ldr	r3, [r7, #0]
   297be:	789b      	ldrb	r3, [r3, #2]
   297c0:	2b00      	cmp	r3, #0
   297c2:	d007      	beq.n	297d4 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   297c4:	230e      	movs	r3, #14
   297c6:	18fb      	adds	r3, r7, r3
   297c8:	220e      	movs	r2, #14
   297ca:	18ba      	adds	r2, r7, r2
   297cc:	8812      	ldrh	r2, [r2, #0]
   297ce:	2180      	movs	r1, #128	; 0x80
   297d0:	430a      	orrs	r2, r1
   297d2:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   297d4:	68bb      	ldr	r3, [r7, #8]
   297d6:	220e      	movs	r2, #14
   297d8:	18ba      	adds	r2, r7, r2
   297da:	8812      	ldrh	r2, [r2, #0]
   297dc:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   297de:	683b      	ldr	r3, [r7, #0]
   297e0:	78db      	ldrb	r3, [r3, #3]
   297e2:	2b00      	cmp	r3, #0
   297e4:	d008      	beq.n	297f8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   297e6:	68bb      	ldr	r3, [r7, #8]
   297e8:	885b      	ldrh	r3, [r3, #2]
   297ea:	b29b      	uxth	r3, r3
   297ec:	2280      	movs	r2, #128	; 0x80
   297ee:	01d2      	lsls	r2, r2, #7
   297f0:	4313      	orrs	r3, r2
   297f2:	b29a      	uxth	r2, r3
   297f4:	68bb      	ldr	r3, [r7, #8]
   297f6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   297f8:	230d      	movs	r3, #13
   297fa:	18fb      	adds	r3, r7, r3
   297fc:	2200      	movs	r2, #0
   297fe:	701a      	strb	r2, [r3, #0]
   29800:	e017      	b.n	29832 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   29802:	230d      	movs	r3, #13
   29804:	18fb      	adds	r3, r7, r3
   29806:	781a      	ldrb	r2, [r3, #0]
   29808:	0013      	movs	r3, r2
   2980a:	009b      	lsls	r3, r3, #2
   2980c:	189b      	adds	r3, r3, r2
   2980e:	005b      	lsls	r3, r3, #1
   29810:	3308      	adds	r3, #8
   29812:	683a      	ldr	r2, [r7, #0]
   29814:	18d1      	adds	r1, r2, r3
   29816:	230d      	movs	r3, #13
   29818:	18fb      	adds	r3, r7, r3
   2981a:	781a      	ldrb	r2, [r3, #0]
   2981c:	687b      	ldr	r3, [r7, #4]
   2981e:	0018      	movs	r0, r3
   29820:	4b08      	ldr	r3, [pc, #32]	; (29844 <_rtc_calendar_set_config+0xc4>)
   29822:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   29824:	230d      	movs	r3, #13
   29826:	18fb      	adds	r3, r7, r3
   29828:	781a      	ldrb	r2, [r3, #0]
   2982a:	230d      	movs	r3, #13
   2982c:	18fb      	adds	r3, r7, r3
   2982e:	3201      	adds	r2, #1
   29830:	701a      	strb	r2, [r3, #0]
   29832:	230d      	movs	r3, #13
   29834:	18fb      	adds	r3, r7, r3
   29836:	781b      	ldrb	r3, [r3, #0]
   29838:	2b00      	cmp	r3, #0
   2983a:	d0e2      	beq.n	29802 <_rtc_calendar_set_config+0x82>
	}
}
   2983c:	46c0      	nop			; (mov r8, r8)
   2983e:	46bd      	mov	sp, r7
   29840:	b004      	add	sp, #16
   29842:	bd80      	pop	{r7, pc}
   29844:	00029969 	.word	0x00029969

00029848 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   29848:	b580      	push	{r7, lr}
   2984a:	b086      	sub	sp, #24
   2984c:	af00      	add	r7, sp, #0
   2984e:	60f8      	str	r0, [r7, #12]
   29850:	60b9      	str	r1, [r7, #8]
   29852:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   29854:	68fb      	ldr	r3, [r7, #12]
   29856:	68ba      	ldr	r2, [r7, #8]
   29858:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   2985a:	2120      	movs	r1, #32
   2985c:	2000      	movs	r0, #0
   2985e:	4b18      	ldr	r3, [pc, #96]	; (298c0 <rtc_calendar_init+0x78>)
   29860:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   29862:	2314      	movs	r3, #20
   29864:	18fb      	adds	r3, r7, r3
   29866:	0018      	movs	r0, r3
   29868:	4b16      	ldr	r3, [pc, #88]	; (298c4 <rtc_calendar_init+0x7c>)
   2986a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   2986c:	2314      	movs	r3, #20
   2986e:	18fb      	adds	r3, r7, r3
   29870:	2202      	movs	r2, #2
   29872:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   29874:	2314      	movs	r3, #20
   29876:	18fb      	adds	r3, r7, r3
   29878:	0019      	movs	r1, r3
   2987a:	2004      	movs	r0, #4
   2987c:	4b12      	ldr	r3, [pc, #72]	; (298c8 <rtc_calendar_init+0x80>)
   2987e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   29880:	2004      	movs	r0, #4
   29882:	4b12      	ldr	r3, [pc, #72]	; (298cc <rtc_calendar_init+0x84>)
   29884:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   29886:	68fb      	ldr	r3, [r7, #12]
   29888:	0018      	movs	r0, r3
   2988a:	4b11      	ldr	r3, [pc, #68]	; (298d0 <rtc_calendar_init+0x88>)
   2988c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   2988e:	687b      	ldr	r3, [r7, #4]
   29890:	791a      	ldrb	r2, [r3, #4]
   29892:	68fb      	ldr	r3, [r7, #12]
   29894:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   29896:	687b      	ldr	r3, [r7, #4]
   29898:	78da      	ldrb	r2, [r3, #3]
   2989a:	68fb      	ldr	r3, [r7, #12]
   2989c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   2989e:	687b      	ldr	r3, [r7, #4]
   298a0:	88da      	ldrh	r2, [r3, #6]
   298a2:	68fb      	ldr	r3, [r7, #12]
   298a4:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   298a6:	4b0b      	ldr	r3, [pc, #44]	; (298d4 <rtc_calendar_init+0x8c>)
   298a8:	68fa      	ldr	r2, [r7, #12]
   298aa:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   298ac:	687a      	ldr	r2, [r7, #4]
   298ae:	68fb      	ldr	r3, [r7, #12]
   298b0:	0011      	movs	r1, r2
   298b2:	0018      	movs	r0, r3
   298b4:	4b08      	ldr	r3, [pc, #32]	; (298d8 <rtc_calendar_init+0x90>)
   298b6:	4798      	blx	r3
}
   298b8:	46c0      	nop			; (mov r8, r8)
   298ba:	46bd      	mov	sp, r7
   298bc:	b006      	add	sp, #24
   298be:	bd80      	pop	{r7, pc}
   298c0:	00029495 	.word	0x00029495
   298c4:	0002947d 	.word	0x0002947d
   298c8:	0002c8ad 	.word	0x0002c8ad
   298cc:	0002c8f1 	.word	0x0002c8f1
   298d0:	00029609 	.word	0x00029609
   298d4:	20005b8c 	.word	0x20005b8c
   298d8:	00029781 	.word	0x00029781

000298dc <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   298dc:	b580      	push	{r7, lr}
   298de:	b084      	sub	sp, #16
   298e0:	af00      	add	r7, sp, #0
   298e2:	6078      	str	r0, [r7, #4]
   298e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   298e6:	687b      	ldr	r3, [r7, #4]
   298e8:	681b      	ldr	r3, [r3, #0]
   298ea:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   298ec:	687b      	ldr	r3, [r7, #4]
   298ee:	795b      	ldrb	r3, [r3, #5]
   298f0:	2201      	movs	r2, #1
   298f2:	4053      	eors	r3, r2
   298f4:	b2db      	uxtb	r3, r3
   298f6:	2b00      	cmp	r3, #0
   298f8:	d00a      	beq.n	29910 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   298fa:	68fb      	ldr	r3, [r7, #12]
   298fc:	4a16      	ldr	r2, [pc, #88]	; (29958 <rtc_calendar_get_time+0x7c>)
   298fe:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   29900:	46c0      	nop			; (mov r8, r8)
   29902:	687b      	ldr	r3, [r7, #4]
   29904:	0018      	movs	r0, r3
   29906:	4b15      	ldr	r3, [pc, #84]	; (2995c <rtc_calendar_get_time+0x80>)
   29908:	4798      	blx	r3
   2990a:	1e03      	subs	r3, r0, #0
   2990c:	d1f9      	bne.n	29902 <rtc_calendar_get_time+0x26>
   2990e:	e016      	b.n	2993e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   29910:	68fb      	ldr	r3, [r7, #12]
   29912:	885b      	ldrh	r3, [r3, #2]
   29914:	b29b      	uxth	r3, r3
   29916:	001a      	movs	r2, r3
   29918:	2380      	movs	r3, #128	; 0x80
   2991a:	01db      	lsls	r3, r3, #7
   2991c:	4013      	ands	r3, r2
   2991e:	d10e      	bne.n	2993e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   29920:	68fb      	ldr	r3, [r7, #12]
   29922:	885b      	ldrh	r3, [r3, #2]
   29924:	b29b      	uxth	r3, r3
   29926:	4a0e      	ldr	r2, [pc, #56]	; (29960 <rtc_calendar_get_time+0x84>)
   29928:	4313      	orrs	r3, r2
   2992a:	b29a      	uxth	r2, r3
   2992c:	68fb      	ldr	r3, [r7, #12]
   2992e:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   29930:	46c0      	nop			; (mov r8, r8)
   29932:	687b      	ldr	r3, [r7, #4]
   29934:	0018      	movs	r0, r3
   29936:	4b09      	ldr	r3, [pc, #36]	; (2995c <rtc_calendar_get_time+0x80>)
   29938:	4798      	blx	r3
   2993a:	1e03      	subs	r3, r0, #0
   2993c:	d1f9      	bne.n	29932 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   2993e:	68fb      	ldr	r3, [r7, #12]
   29940:	691b      	ldr	r3, [r3, #16]
   29942:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   29944:	683a      	ldr	r2, [r7, #0]
   29946:	68b9      	ldr	r1, [r7, #8]
   29948:	687b      	ldr	r3, [r7, #4]
   2994a:	0018      	movs	r0, r3
   2994c:	4b05      	ldr	r3, [pc, #20]	; (29964 <rtc_calendar_get_time+0x88>)
   2994e:	4798      	blx	r3
}
   29950:	46c0      	nop			; (mov r8, r8)
   29952:	46bd      	mov	sp, r7
   29954:	b004      	add	sp, #16
   29956:	bd80      	pop	{r7, pc}
   29958:	ffff8000 	.word	0xffff8000
   2995c:	0002954d 	.word	0x0002954d
   29960:	ffffc000 	.word	0xffffc000
   29964:	000296e1 	.word	0x000296e1

00029968 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   29968:	b580      	push	{r7, lr}
   2996a:	b086      	sub	sp, #24
   2996c:	af00      	add	r7, sp, #0
   2996e:	60f8      	str	r0, [r7, #12]
   29970:	60b9      	str	r1, [r7, #8]
   29972:	1dfb      	adds	r3, r7, #7
   29974:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   29976:	68fb      	ldr	r3, [r7, #12]
   29978:	681b      	ldr	r3, [r3, #0]
   2997a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   2997c:	1dfb      	adds	r3, r7, #7
   2997e:	781b      	ldrb	r3, [r3, #0]
   29980:	2b01      	cmp	r3, #1
   29982:	d901      	bls.n	29988 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   29984:	2317      	movs	r3, #23
   29986:	e021      	b.n	299cc <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   29988:	68ba      	ldr	r2, [r7, #8]
   2998a:	68fb      	ldr	r3, [r7, #12]
   2998c:	0011      	movs	r1, r2
   2998e:	0018      	movs	r0, r3
   29990:	4b10      	ldr	r3, [pc, #64]	; (299d4 <rtc_calendar_set_alarm+0x6c>)
   29992:	4798      	blx	r3
   29994:	0003      	movs	r3, r0
   29996:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   29998:	46c0      	nop			; (mov r8, r8)
   2999a:	68fb      	ldr	r3, [r7, #12]
   2999c:	0018      	movs	r0, r3
   2999e:	4b0e      	ldr	r3, [pc, #56]	; (299d8 <rtc_calendar_set_alarm+0x70>)
   299a0:	4798      	blx	r3
   299a2:	1e03      	subs	r3, r0, #0
   299a4:	d1f9      	bne.n	2999a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   299a6:	1dfb      	adds	r3, r7, #7
   299a8:	781a      	ldrb	r2, [r3, #0]
   299aa:	697b      	ldr	r3, [r7, #20]
   299ac:	3203      	adds	r2, #3
   299ae:	00d2      	lsls	r2, r2, #3
   299b0:	6939      	ldr	r1, [r7, #16]
   299b2:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   299b4:	1dfb      	adds	r3, r7, #7
   299b6:	781b      	ldrb	r3, [r3, #0]
   299b8:	68ba      	ldr	r2, [r7, #8]
   299ba:	7a11      	ldrb	r1, [r2, #8]
   299bc:	697a      	ldr	r2, [r7, #20]
   299be:	3303      	adds	r3, #3
   299c0:	00db      	lsls	r3, r3, #3
   299c2:	18d3      	adds	r3, r2, r3
   299c4:	3304      	adds	r3, #4
   299c6:	1c0a      	adds	r2, r1, #0
   299c8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   299ca:	2300      	movs	r3, #0
}
   299cc:	0018      	movs	r0, r3
   299ce:	46bd      	mov	sp, r7
   299d0:	b006      	add	sp, #24
   299d2:	bd80      	pop	{r7, pc}
   299d4:	00029659 	.word	0x00029659
   299d8:	0002954d 	.word	0x0002954d

000299dc <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   299dc:	b580      	push	{r7, lr}
   299de:	b086      	sub	sp, #24
   299e0:	af00      	add	r7, sp, #0
   299e2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   299e4:	4b28      	ldr	r3, [pc, #160]	; (29a88 <_rtc_interrupt_handler+0xac>)
   299e6:	687a      	ldr	r2, [r7, #4]
   299e8:	0092      	lsls	r2, r2, #2
   299ea:	58d3      	ldr	r3, [r2, r3]
   299ec:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   299ee:	697b      	ldr	r3, [r7, #20]
   299f0:	681b      	ldr	r3, [r3, #0]
   299f2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   299f4:	230e      	movs	r3, #14
   299f6:	18fb      	adds	r3, r7, r3
   299f8:	697a      	ldr	r2, [r7, #20]
   299fa:	8a52      	ldrh	r2, [r2, #18]
   299fc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   299fe:	697b      	ldr	r3, [r7, #20]
   29a00:	8a1b      	ldrh	r3, [r3, #16]
   29a02:	b29a      	uxth	r2, r3
   29a04:	230e      	movs	r3, #14
   29a06:	18fb      	adds	r3, r7, r3
   29a08:	210e      	movs	r1, #14
   29a0a:	1879      	adds	r1, r7, r1
   29a0c:	8809      	ldrh	r1, [r1, #0]
   29a0e:	400a      	ands	r2, r1
   29a10:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   29a12:	693b      	ldr	r3, [r7, #16]
   29a14:	7a1b      	ldrb	r3, [r3, #8]
   29a16:	b2da      	uxtb	r2, r3
   29a18:	230c      	movs	r3, #12
   29a1a:	18fb      	adds	r3, r7, r3
   29a1c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   29a1e:	693b      	ldr	r3, [r7, #16]
   29a20:	79db      	ldrb	r3, [r3, #7]
   29a22:	b2db      	uxtb	r3, r3
   29a24:	b29a      	uxth	r2, r3
   29a26:	230c      	movs	r3, #12
   29a28:	18fb      	adds	r3, r7, r3
   29a2a:	210c      	movs	r1, #12
   29a2c:	1879      	adds	r1, r7, r1
   29a2e:	8809      	ldrh	r1, [r1, #0]
   29a30:	400a      	ands	r2, r1
   29a32:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   29a34:	230c      	movs	r3, #12
   29a36:	18fb      	adds	r3, r7, r3
   29a38:	881b      	ldrh	r3, [r3, #0]
   29a3a:	2280      	movs	r2, #128	; 0x80
   29a3c:	4013      	ands	r3, r2
   29a3e:	d00c      	beq.n	29a5a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   29a40:	230e      	movs	r3, #14
   29a42:	18fb      	adds	r3, r7, r3
   29a44:	881b      	ldrh	r3, [r3, #0]
   29a46:	2202      	movs	r2, #2
   29a48:	4013      	ands	r3, r2
   29a4a:	d002      	beq.n	29a52 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   29a4c:	697b      	ldr	r3, [r7, #20]
   29a4e:	68db      	ldr	r3, [r3, #12]
   29a50:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   29a52:	693b      	ldr	r3, [r7, #16]
   29a54:	2280      	movs	r2, #128	; 0x80
   29a56:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   29a58:	e011      	b.n	29a7e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   29a5a:	230c      	movs	r3, #12
   29a5c:	18fb      	adds	r3, r7, r3
   29a5e:	881b      	ldrh	r3, [r3, #0]
   29a60:	2201      	movs	r2, #1
   29a62:	4013      	ands	r3, r2
   29a64:	d00b      	beq.n	29a7e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   29a66:	230e      	movs	r3, #14
   29a68:	18fb      	adds	r3, r7, r3
   29a6a:	881b      	ldrh	r3, [r3, #0]
   29a6c:	2201      	movs	r2, #1
   29a6e:	4013      	ands	r3, r2
   29a70:	d002      	beq.n	29a78 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   29a72:	697b      	ldr	r3, [r7, #20]
   29a74:	689b      	ldr	r3, [r3, #8]
   29a76:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   29a78:	693b      	ldr	r3, [r7, #16]
   29a7a:	2201      	movs	r2, #1
   29a7c:	721a      	strb	r2, [r3, #8]
}
   29a7e:	46c0      	nop			; (mov r8, r8)
   29a80:	46bd      	mov	sp, r7
   29a82:	b006      	add	sp, #24
   29a84:	bd80      	pop	{r7, pc}
   29a86:	46c0      	nop			; (mov r8, r8)
   29a88:	20005b8c 	.word	0x20005b8c

00029a8c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   29a8c:	b580      	push	{r7, lr}
   29a8e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   29a90:	2000      	movs	r0, #0
   29a92:	4b02      	ldr	r3, [pc, #8]	; (29a9c <RTC_Handler+0x10>)
   29a94:	4798      	blx	r3
}
   29a96:	46c0      	nop			; (mov r8, r8)
   29a98:	46bd      	mov	sp, r7
   29a9a:	bd80      	pop	{r7, pc}
   29a9c:	000299dd 	.word	0x000299dd

00029aa0 <system_gclk_chan_get_config_defaults>:
{
   29aa0:	b580      	push	{r7, lr}
   29aa2:	b082      	sub	sp, #8
   29aa4:	af00      	add	r7, sp, #0
   29aa6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29aa8:	687b      	ldr	r3, [r7, #4]
   29aaa:	2200      	movs	r2, #0
   29aac:	701a      	strb	r2, [r3, #0]
}
   29aae:	46c0      	nop			; (mov r8, r8)
   29ab0:	46bd      	mov	sp, r7
   29ab2:	b002      	add	sp, #8
   29ab4:	bd80      	pop	{r7, pc}

00029ab6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   29ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
   29ab8:	b08d      	sub	sp, #52	; 0x34
   29aba:	af00      	add	r7, sp, #0
   29abc:	60b8      	str	r0, [r7, #8]
   29abe:	60f9      	str	r1, [r7, #12]
   29ac0:	603a      	str	r2, [r7, #0]
   29ac2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   29ac4:	2300      	movs	r3, #0
   29ac6:	2400      	movs	r4, #0
   29ac8:	623b      	str	r3, [r7, #32]
   29aca:	627c      	str	r4, [r7, #36]	; 0x24
   29acc:	2300      	movs	r3, #0
   29ace:	2400      	movs	r4, #0
   29ad0:	61bb      	str	r3, [r7, #24]
   29ad2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   29ad4:	233f      	movs	r3, #63	; 0x3f
   29ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
   29ad8:	e053      	b.n	29b82 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   29ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29adc:	3b20      	subs	r3, #32
   29ade:	2b00      	cmp	r3, #0
   29ae0:	db04      	blt.n	29aec <long_division+0x36>
   29ae2:	2201      	movs	r2, #1
   29ae4:	409a      	lsls	r2, r3
   29ae6:	0013      	movs	r3, r2
   29ae8:	617b      	str	r3, [r7, #20]
   29aea:	e00b      	b.n	29b04 <long_division+0x4e>
   29aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29aee:	2220      	movs	r2, #32
   29af0:	1ad3      	subs	r3, r2, r3
   29af2:	2201      	movs	r2, #1
   29af4:	40da      	lsrs	r2, r3
   29af6:	0013      	movs	r3, r2
   29af8:	2100      	movs	r1, #0
   29afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   29afc:	4091      	lsls	r1, r2
   29afe:	000a      	movs	r2, r1
   29b00:	4313      	orrs	r3, r2
   29b02:	617b      	str	r3, [r7, #20]
   29b04:	2201      	movs	r2, #1
   29b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29b08:	409a      	lsls	r2, r3
   29b0a:	0013      	movs	r3, r2
   29b0c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   29b0e:	69bb      	ldr	r3, [r7, #24]
   29b10:	69fc      	ldr	r4, [r7, #28]
   29b12:	18db      	adds	r3, r3, r3
   29b14:	4164      	adcs	r4, r4
   29b16:	61bb      	str	r3, [r7, #24]
   29b18:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   29b1a:	68bb      	ldr	r3, [r7, #8]
   29b1c:	693a      	ldr	r2, [r7, #16]
   29b1e:	401a      	ands	r2, r3
   29b20:	0015      	movs	r5, r2
   29b22:	68fb      	ldr	r3, [r7, #12]
   29b24:	697a      	ldr	r2, [r7, #20]
   29b26:	401a      	ands	r2, r3
   29b28:	0016      	movs	r6, r2
   29b2a:	002b      	movs	r3, r5
   29b2c:	4333      	orrs	r3, r6
   29b2e:	d007      	beq.n	29b40 <long_division+0x8a>
			r |= 0x01;
   29b30:	69bb      	ldr	r3, [r7, #24]
   29b32:	2201      	movs	r2, #1
   29b34:	4313      	orrs	r3, r2
   29b36:	61bb      	str	r3, [r7, #24]
   29b38:	69fb      	ldr	r3, [r7, #28]
   29b3a:	2200      	movs	r2, #0
   29b3c:	4313      	orrs	r3, r2
   29b3e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   29b40:	687a      	ldr	r2, [r7, #4]
   29b42:	69fb      	ldr	r3, [r7, #28]
   29b44:	429a      	cmp	r2, r3
   29b46:	d819      	bhi.n	29b7c <long_division+0xc6>
   29b48:	687a      	ldr	r2, [r7, #4]
   29b4a:	69fb      	ldr	r3, [r7, #28]
   29b4c:	429a      	cmp	r2, r3
   29b4e:	d103      	bne.n	29b58 <long_division+0xa2>
   29b50:	683a      	ldr	r2, [r7, #0]
   29b52:	69bb      	ldr	r3, [r7, #24]
   29b54:	429a      	cmp	r2, r3
   29b56:	d811      	bhi.n	29b7c <long_division+0xc6>
			r = r - d;
   29b58:	69b9      	ldr	r1, [r7, #24]
   29b5a:	69fa      	ldr	r2, [r7, #28]
   29b5c:	683b      	ldr	r3, [r7, #0]
   29b5e:	687c      	ldr	r4, [r7, #4]
   29b60:	1ac9      	subs	r1, r1, r3
   29b62:	41a2      	sbcs	r2, r4
   29b64:	000b      	movs	r3, r1
   29b66:	0014      	movs	r4, r2
   29b68:	61bb      	str	r3, [r7, #24]
   29b6a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   29b6c:	6a3a      	ldr	r2, [r7, #32]
   29b6e:	693b      	ldr	r3, [r7, #16]
   29b70:	4313      	orrs	r3, r2
   29b72:	623b      	str	r3, [r7, #32]
   29b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   29b76:	697b      	ldr	r3, [r7, #20]
   29b78:	4313      	orrs	r3, r2
   29b7a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   29b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29b7e:	3b01      	subs	r3, #1
   29b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   29b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29b84:	2b00      	cmp	r3, #0
   29b86:	daa8      	bge.n	29ada <long_division+0x24>
		}
	}

	return q;
   29b88:	6a3b      	ldr	r3, [r7, #32]
   29b8a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   29b8c:	0018      	movs	r0, r3
   29b8e:	0021      	movs	r1, r4
   29b90:	46bd      	mov	sp, r7
   29b92:	b00d      	add	sp, #52	; 0x34
   29b94:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029b96 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   29b96:	b580      	push	{r7, lr}
   29b98:	b086      	sub	sp, #24
   29b9a:	af00      	add	r7, sp, #0
   29b9c:	60f8      	str	r0, [r7, #12]
   29b9e:	60b9      	str	r1, [r7, #8]
   29ba0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   29ba2:	2316      	movs	r3, #22
   29ba4:	18fb      	adds	r3, r7, r3
   29ba6:	2200      	movs	r2, #0
   29ba8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   29baa:	68bb      	ldr	r3, [r7, #8]
   29bac:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   29bae:	68bb      	ldr	r3, [r7, #8]
   29bb0:	085a      	lsrs	r2, r3, #1
   29bb2:	68fb      	ldr	r3, [r7, #12]
   29bb4:	429a      	cmp	r2, r3
   29bb6:	d201      	bcs.n	29bbc <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   29bb8:	2340      	movs	r3, #64	; 0x40
   29bba:	e026      	b.n	29c0a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   29bbc:	68bb      	ldr	r3, [r7, #8]
   29bbe:	085b      	lsrs	r3, r3, #1
   29bc0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   29bc2:	e00a      	b.n	29bda <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   29bc4:	693a      	ldr	r2, [r7, #16]
   29bc6:	68fb      	ldr	r3, [r7, #12]
   29bc8:	1ad3      	subs	r3, r2, r3
   29bca:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   29bcc:	2316      	movs	r3, #22
   29bce:	18fb      	adds	r3, r7, r3
   29bd0:	881a      	ldrh	r2, [r3, #0]
   29bd2:	2316      	movs	r3, #22
   29bd4:	18fb      	adds	r3, r7, r3
   29bd6:	3201      	adds	r2, #1
   29bd8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   29bda:	693a      	ldr	r2, [r7, #16]
   29bdc:	68fb      	ldr	r3, [r7, #12]
   29bde:	429a      	cmp	r2, r3
   29be0:	d2f0      	bcs.n	29bc4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   29be2:	2316      	movs	r3, #22
   29be4:	18fb      	adds	r3, r7, r3
   29be6:	2216      	movs	r2, #22
   29be8:	18ba      	adds	r2, r7, r2
   29bea:	8812      	ldrh	r2, [r2, #0]
   29bec:	3a01      	subs	r2, #1
   29bee:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   29bf0:	2316      	movs	r3, #22
   29bf2:	18fb      	adds	r3, r7, r3
   29bf4:	881b      	ldrh	r3, [r3, #0]
   29bf6:	2bff      	cmp	r3, #255	; 0xff
   29bf8:	d901      	bls.n	29bfe <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   29bfa:	2340      	movs	r3, #64	; 0x40
   29bfc:	e005      	b.n	29c0a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   29bfe:	687b      	ldr	r3, [r7, #4]
   29c00:	2216      	movs	r2, #22
   29c02:	18ba      	adds	r2, r7, r2
   29c04:	8812      	ldrh	r2, [r2, #0]
   29c06:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   29c08:	2300      	movs	r3, #0
	}
}
   29c0a:	0018      	movs	r0, r3
   29c0c:	46bd      	mov	sp, r7
   29c0e:	b006      	add	sp, #24
   29c10:	bd80      	pop	{r7, pc}
	...

00029c14 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   29c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   29c16:	b0a1      	sub	sp, #132	; 0x84
   29c18:	af00      	add	r7, sp, #0
   29c1a:	64f8      	str	r0, [r7, #76]	; 0x4c
   29c1c:	64b9      	str	r1, [r7, #72]	; 0x48
   29c1e:	647a      	str	r2, [r7, #68]	; 0x44
   29c20:	2243      	movs	r2, #67	; 0x43
   29c22:	18ba      	adds	r2, r7, r2
   29c24:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   29c26:	2300      	movs	r3, #0
   29c28:	2400      	movs	r4, #0
   29c2a:	673b      	str	r3, [r7, #112]	; 0x70
   29c2c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   29c2e:	2300      	movs	r3, #0
   29c30:	2400      	movs	r4, #0
   29c32:	66bb      	str	r3, [r7, #104]	; 0x68
   29c34:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   29c36:	2300      	movs	r3, #0
   29c38:	2400      	movs	r4, #0
   29c3a:	67bb      	str	r3, [r7, #120]	; 0x78
   29c3c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   29c3e:	2300      	movs	r3, #0
   29c40:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   29c42:	2358      	movs	r3, #88	; 0x58
   29c44:	2240      	movs	r2, #64	; 0x40
   29c46:	4694      	mov	ip, r2
   29c48:	44bc      	add	ip, r7
   29c4a:	4463      	add	r3, ip
   29c4c:	781a      	ldrb	r2, [r3, #0]
   29c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   29c50:	435a      	muls	r2, r3
   29c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   29c54:	429a      	cmp	r2, r3
   29c56:	d901      	bls.n	29c5c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   29c58:	2340      	movs	r3, #64	; 0x40
   29c5a:	e0b3      	b.n	29dc4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   29c5c:	2343      	movs	r3, #67	; 0x43
   29c5e:	18fb      	adds	r3, r7, r3
   29c60:	781b      	ldrb	r3, [r3, #0]
   29c62:	2b00      	cmp	r3, #0
   29c64:	d13d      	bne.n	29ce2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   29c66:	2358      	movs	r3, #88	; 0x58
   29c68:	2240      	movs	r2, #64	; 0x40
   29c6a:	4694      	mov	ip, r2
   29c6c:	44bc      	add	ip, r7
   29c6e:	4463      	add	r3, ip
   29c70:	781b      	ldrb	r3, [r3, #0]
   29c72:	b2db      	uxtb	r3, r3
   29c74:	613b      	str	r3, [r7, #16]
   29c76:	2300      	movs	r3, #0
   29c78:	617b      	str	r3, [r7, #20]
   29c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   29c7c:	60bb      	str	r3, [r7, #8]
   29c7e:	2300      	movs	r3, #0
   29c80:	60fb      	str	r3, [r7, #12]
   29c82:	4c52      	ldr	r4, [pc, #328]	; (29dcc <_sercom_get_async_baud_val+0x1b8>)
   29c84:	68ba      	ldr	r2, [r7, #8]
   29c86:	68fb      	ldr	r3, [r7, #12]
   29c88:	6938      	ldr	r0, [r7, #16]
   29c8a:	6979      	ldr	r1, [r7, #20]
   29c8c:	47a0      	blx	r4
   29c8e:	0003      	movs	r3, r0
   29c90:	000c      	movs	r4, r1
   29c92:	001b      	movs	r3, r3
   29c94:	65fb      	str	r3, [r7, #92]	; 0x5c
   29c96:	2300      	movs	r3, #0
   29c98:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   29c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   29c9c:	603b      	str	r3, [r7, #0]
   29c9e:	2300      	movs	r3, #0
   29ca0:	607b      	str	r3, [r7, #4]
   29ca2:	6db8      	ldr	r0, [r7, #88]	; 0x58
   29ca4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   29ca6:	683a      	ldr	r2, [r7, #0]
   29ca8:	687b      	ldr	r3, [r7, #4]
   29caa:	4c49      	ldr	r4, [pc, #292]	; (29dd0 <_sercom_get_async_baud_val+0x1bc>)
   29cac:	47a0      	blx	r4
   29cae:	0003      	movs	r3, r0
   29cb0:	000c      	movs	r4, r1
   29cb2:	673b      	str	r3, [r7, #112]	; 0x70
   29cb4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   29cb6:	2100      	movs	r1, #0
   29cb8:	2201      	movs	r2, #1
   29cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   29cbc:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   29cbe:	1ac9      	subs	r1, r1, r3
   29cc0:	41a2      	sbcs	r2, r4
   29cc2:	000b      	movs	r3, r1
   29cc4:	0014      	movs	r4, r2
   29cc6:	66bb      	str	r3, [r7, #104]	; 0x68
   29cc8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   29cca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   29ccc:	0c1b      	lsrs	r3, r3, #16
   29cce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   29cd0:	0416      	lsls	r6, r2, #16
   29cd2:	431e      	orrs	r6, r3
   29cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   29cd6:	041d      	lsls	r5, r3, #16
   29cd8:	0033      	movs	r3, r6
   29cda:	67bb      	str	r3, [r7, #120]	; 0x78
   29cdc:	2300      	movs	r3, #0
   29cde:	67fb      	str	r3, [r7, #124]	; 0x7c
   29ce0:	e06a      	b.n	29db8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   29ce2:	2343      	movs	r3, #67	; 0x43
   29ce4:	18fb      	adds	r3, r7, r3
   29ce6:	781b      	ldrb	r3, [r3, #0]
   29ce8:	2b01      	cmp	r3, #1
   29cea:	d165      	bne.n	29db8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   29cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   29cee:	633b      	str	r3, [r7, #48]	; 0x30
   29cf0:	2300      	movs	r3, #0
   29cf2:	637b      	str	r3, [r7, #52]	; 0x34
   29cf4:	2358      	movs	r3, #88	; 0x58
   29cf6:	2240      	movs	r2, #64	; 0x40
   29cf8:	4694      	mov	ip, r2
   29cfa:	44bc      	add	ip, r7
   29cfc:	4463      	add	r3, ip
   29cfe:	781b      	ldrb	r3, [r3, #0]
   29d00:	b2db      	uxtb	r3, r3
   29d02:	62bb      	str	r3, [r7, #40]	; 0x28
   29d04:	2300      	movs	r3, #0
   29d06:	62fb      	str	r3, [r7, #44]	; 0x2c
   29d08:	4c30      	ldr	r4, [pc, #192]	; (29dcc <_sercom_get_async_baud_val+0x1b8>)
   29d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   29d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29d0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   29d10:	6b79      	ldr	r1, [r7, #52]	; 0x34
   29d12:	47a0      	blx	r4
   29d14:	0003      	movs	r3, r0
   29d16:	000c      	movs	r4, r1
   29d18:	65bb      	str	r3, [r7, #88]	; 0x58
   29d1a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   29d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   29d1e:	623b      	str	r3, [r7, #32]
   29d20:	2300      	movs	r3, #0
   29d22:	627b      	str	r3, [r7, #36]	; 0x24
   29d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   29d26:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   29d28:	001a      	movs	r2, r3
   29d2a:	0023      	movs	r3, r4
   29d2c:	6a38      	ldr	r0, [r7, #32]
   29d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   29d30:	4c27      	ldr	r4, [pc, #156]	; (29dd0 <_sercom_get_async_baud_val+0x1bc>)
   29d32:	47a0      	blx	r4
   29d34:	0003      	movs	r3, r0
   29d36:	000c      	movs	r4, r1
   29d38:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   29d3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   29d3c:	2380      	movs	r3, #128	; 0x80
   29d3e:	019b      	lsls	r3, r3, #6
   29d40:	429a      	cmp	r2, r3
   29d42:	d901      	bls.n	29d48 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   29d44:	2340      	movs	r3, #64	; 0x40
   29d46:	e03d      	b.n	29dc4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   29d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   29d4a:	61bb      	str	r3, [r7, #24]
   29d4c:	2300      	movs	r3, #0
   29d4e:	61fb      	str	r3, [r7, #28]
   29d50:	69b9      	ldr	r1, [r7, #24]
   29d52:	69fa      	ldr	r2, [r7, #28]
   29d54:	000b      	movs	r3, r1
   29d56:	0f5b      	lsrs	r3, r3, #29
   29d58:	0010      	movs	r0, r2
   29d5a:	00c0      	lsls	r0, r0, #3
   29d5c:	63f8      	str	r0, [r7, #60]	; 0x3c
   29d5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   29d60:	4318      	orrs	r0, r3
   29d62:	63f8      	str	r0, [r7, #60]	; 0x3c
   29d64:	000b      	movs	r3, r1
   29d66:	00db      	lsls	r3, r3, #3
   29d68:	63bb      	str	r3, [r7, #56]	; 0x38
   29d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   29d6c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   29d6e:	001a      	movs	r2, r3
   29d70:	0023      	movs	r3, r4
   29d72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   29d74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   29d76:	4c16      	ldr	r4, [pc, #88]	; (29dd0 <_sercom_get_async_baud_val+0x1bc>)
   29d78:	47a0      	blx	r4
   29d7a:	0003      	movs	r3, r0
   29d7c:	000c      	movs	r4, r1
   29d7e:	65bb      	str	r3, [r7, #88]	; 0x58
   29d80:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   29d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   29d84:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   29d86:	b2d9      	uxtb	r1, r3
   29d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   29d8a:	b2db      	uxtb	r3, r3
   29d8c:	00db      	lsls	r3, r3, #3
   29d8e:	b2da      	uxtb	r2, r3
   29d90:	2317      	movs	r3, #23
   29d92:	2040      	movs	r0, #64	; 0x40
   29d94:	4684      	mov	ip, r0
   29d96:	44bc      	add	ip, r7
   29d98:	4463      	add	r3, ip
   29d9a:	1a8a      	subs	r2, r1, r2
   29d9c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   29d9e:	2317      	movs	r3, #23
   29da0:	2240      	movs	r2, #64	; 0x40
   29da2:	4694      	mov	ip, r2
   29da4:	44bc      	add	ip, r7
   29da6:	4463      	add	r3, ip
   29da8:	781b      	ldrb	r3, [r3, #0]
   29daa:	035b      	lsls	r3, r3, #13
   29dac:	001a      	movs	r2, r3
   29dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   29db0:	4313      	orrs	r3, r2
   29db2:	67bb      	str	r3, [r7, #120]	; 0x78
   29db4:	2300      	movs	r3, #0
   29db6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   29db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   29dba:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   29dbc:	b29a      	uxth	r2, r3
   29dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   29dc0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   29dc2:	2300      	movs	r3, #0
}
   29dc4:	0018      	movs	r0, r3
   29dc6:	46bd      	mov	sp, r7
   29dc8:	b021      	add	sp, #132	; 0x84
   29dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29dcc:	0003577d 	.word	0x0003577d
   29dd0:	00029ab7 	.word	0x00029ab7

00029dd4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   29dd4:	b580      	push	{r7, lr}
   29dd6:	b084      	sub	sp, #16
   29dd8:	af00      	add	r7, sp, #0
   29dda:	0002      	movs	r2, r0
   29ddc:	1dfb      	adds	r3, r7, #7
   29dde:	701a      	strb	r2, [r3, #0]
   29de0:	1dbb      	adds	r3, r7, #6
   29de2:	1c0a      	adds	r2, r1, #0
   29de4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   29de6:	4b1a      	ldr	r3, [pc, #104]	; (29e50 <sercom_set_gclk_generator+0x7c>)
   29de8:	781b      	ldrb	r3, [r3, #0]
   29dea:	2201      	movs	r2, #1
   29dec:	4053      	eors	r3, r2
   29dee:	b2db      	uxtb	r3, r3
   29df0:	2b00      	cmp	r3, #0
   29df2:	d103      	bne.n	29dfc <sercom_set_gclk_generator+0x28>
   29df4:	1dbb      	adds	r3, r7, #6
   29df6:	781b      	ldrb	r3, [r3, #0]
   29df8:	2b00      	cmp	r3, #0
   29dfa:	d01b      	beq.n	29e34 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   29dfc:	230c      	movs	r3, #12
   29dfe:	18fb      	adds	r3, r7, r3
   29e00:	0018      	movs	r0, r3
   29e02:	4b14      	ldr	r3, [pc, #80]	; (29e54 <sercom_set_gclk_generator+0x80>)
   29e04:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   29e06:	230c      	movs	r3, #12
   29e08:	18fb      	adds	r3, r7, r3
   29e0a:	1dfa      	adds	r2, r7, #7
   29e0c:	7812      	ldrb	r2, [r2, #0]
   29e0e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   29e10:	230c      	movs	r3, #12
   29e12:	18fb      	adds	r3, r7, r3
   29e14:	0019      	movs	r1, r3
   29e16:	2013      	movs	r0, #19
   29e18:	4b0f      	ldr	r3, [pc, #60]	; (29e58 <sercom_set_gclk_generator+0x84>)
   29e1a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   29e1c:	2013      	movs	r0, #19
   29e1e:	4b0f      	ldr	r3, [pc, #60]	; (29e5c <sercom_set_gclk_generator+0x88>)
   29e20:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   29e22:	4b0b      	ldr	r3, [pc, #44]	; (29e50 <sercom_set_gclk_generator+0x7c>)
   29e24:	1dfa      	adds	r2, r7, #7
   29e26:	7812      	ldrb	r2, [r2, #0]
   29e28:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   29e2a:	4b09      	ldr	r3, [pc, #36]	; (29e50 <sercom_set_gclk_generator+0x7c>)
   29e2c:	2201      	movs	r2, #1
   29e2e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   29e30:	2300      	movs	r3, #0
   29e32:	e008      	b.n	29e46 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   29e34:	4b06      	ldr	r3, [pc, #24]	; (29e50 <sercom_set_gclk_generator+0x7c>)
   29e36:	785b      	ldrb	r3, [r3, #1]
   29e38:	1dfa      	adds	r2, r7, #7
   29e3a:	7812      	ldrb	r2, [r2, #0]
   29e3c:	429a      	cmp	r2, r3
   29e3e:	d101      	bne.n	29e44 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   29e40:	2300      	movs	r3, #0
   29e42:	e000      	b.n	29e46 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   29e44:	231d      	movs	r3, #29
}
   29e46:	0018      	movs	r0, r3
   29e48:	46bd      	mov	sp, r7
   29e4a:	b004      	add	sp, #16
   29e4c:	bd80      	pop	{r7, pc}
   29e4e:	46c0      	nop			; (mov r8, r8)
   29e50:	200041ec 	.word	0x200041ec
   29e54:	00029aa1 	.word	0x00029aa1
   29e58:	0002c8ad 	.word	0x0002c8ad
   29e5c:	0002c8f1 	.word	0x0002c8f1

00029e60 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   29e60:	b580      	push	{r7, lr}
   29e62:	b082      	sub	sp, #8
   29e64:	af00      	add	r7, sp, #0
   29e66:	6078      	str	r0, [r7, #4]
   29e68:	000a      	movs	r2, r1
   29e6a:	1cfb      	adds	r3, r7, #3
   29e6c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   29e6e:	687b      	ldr	r3, [r7, #4]
   29e70:	4a4d      	ldr	r2, [pc, #308]	; (29fa8 <_sercom_get_default_pad+0x148>)
   29e72:	4293      	cmp	r3, r2
   29e74:	d03f      	beq.n	29ef6 <_sercom_get_default_pad+0x96>
   29e76:	4a4c      	ldr	r2, [pc, #304]	; (29fa8 <_sercom_get_default_pad+0x148>)
   29e78:	4293      	cmp	r3, r2
   29e7a:	d806      	bhi.n	29e8a <_sercom_get_default_pad+0x2a>
   29e7c:	4a4b      	ldr	r2, [pc, #300]	; (29fac <_sercom_get_default_pad+0x14c>)
   29e7e:	4293      	cmp	r3, r2
   29e80:	d00f      	beq.n	29ea2 <_sercom_get_default_pad+0x42>
   29e82:	4a4b      	ldr	r2, [pc, #300]	; (29fb0 <_sercom_get_default_pad+0x150>)
   29e84:	4293      	cmp	r3, r2
   29e86:	d021      	beq.n	29ecc <_sercom_get_default_pad+0x6c>
   29e88:	e089      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29e8a:	4a4a      	ldr	r2, [pc, #296]	; (29fb4 <_sercom_get_default_pad+0x154>)
   29e8c:	4293      	cmp	r3, r2
   29e8e:	d100      	bne.n	29e92 <_sercom_get_default_pad+0x32>
   29e90:	e05b      	b.n	29f4a <_sercom_get_default_pad+0xea>
   29e92:	4a49      	ldr	r2, [pc, #292]	; (29fb8 <_sercom_get_default_pad+0x158>)
   29e94:	4293      	cmp	r3, r2
   29e96:	d100      	bne.n	29e9a <_sercom_get_default_pad+0x3a>
   29e98:	e06c      	b.n	29f74 <_sercom_get_default_pad+0x114>
   29e9a:	4a48      	ldr	r2, [pc, #288]	; (29fbc <_sercom_get_default_pad+0x15c>)
   29e9c:	4293      	cmp	r3, r2
   29e9e:	d03f      	beq.n	29f20 <_sercom_get_default_pad+0xc0>
   29ea0:	e07d      	b.n	29f9e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   29ea2:	1cfb      	adds	r3, r7, #3
   29ea4:	781b      	ldrb	r3, [r3, #0]
   29ea6:	2b01      	cmp	r3, #1
   29ea8:	d00a      	beq.n	29ec0 <_sercom_get_default_pad+0x60>
   29eaa:	dc02      	bgt.n	29eb2 <_sercom_get_default_pad+0x52>
   29eac:	2b00      	cmp	r3, #0
   29eae:	d005      	beq.n	29ebc <_sercom_get_default_pad+0x5c>
   29eb0:	e075      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29eb2:	2b02      	cmp	r3, #2
   29eb4:	d006      	beq.n	29ec4 <_sercom_get_default_pad+0x64>
   29eb6:	2b03      	cmp	r3, #3
   29eb8:	d006      	beq.n	29ec8 <_sercom_get_default_pad+0x68>
   29eba:	e070      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29ebc:	4b40      	ldr	r3, [pc, #256]	; (29fc0 <_sercom_get_default_pad+0x160>)
   29ebe:	e06f      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29ec0:	4b40      	ldr	r3, [pc, #256]	; (29fc4 <_sercom_get_default_pad+0x164>)
   29ec2:	e06d      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29ec4:	4b40      	ldr	r3, [pc, #256]	; (29fc8 <_sercom_get_default_pad+0x168>)
   29ec6:	e06b      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29ec8:	4b40      	ldr	r3, [pc, #256]	; (29fcc <_sercom_get_default_pad+0x16c>)
   29eca:	e069      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29ecc:	1cfb      	adds	r3, r7, #3
   29ece:	781b      	ldrb	r3, [r3, #0]
   29ed0:	2b01      	cmp	r3, #1
   29ed2:	d00a      	beq.n	29eea <_sercom_get_default_pad+0x8a>
   29ed4:	dc02      	bgt.n	29edc <_sercom_get_default_pad+0x7c>
   29ed6:	2b00      	cmp	r3, #0
   29ed8:	d005      	beq.n	29ee6 <_sercom_get_default_pad+0x86>
   29eda:	e060      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29edc:	2b02      	cmp	r3, #2
   29ede:	d006      	beq.n	29eee <_sercom_get_default_pad+0x8e>
   29ee0:	2b03      	cmp	r3, #3
   29ee2:	d006      	beq.n	29ef2 <_sercom_get_default_pad+0x92>
   29ee4:	e05b      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29ee6:	2303      	movs	r3, #3
   29ee8:	e05a      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29eea:	4b39      	ldr	r3, [pc, #228]	; (29fd0 <_sercom_get_default_pad+0x170>)
   29eec:	e058      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29eee:	4b39      	ldr	r3, [pc, #228]	; (29fd4 <_sercom_get_default_pad+0x174>)
   29ef0:	e056      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29ef2:	4b39      	ldr	r3, [pc, #228]	; (29fd8 <_sercom_get_default_pad+0x178>)
   29ef4:	e054      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29ef6:	1cfb      	adds	r3, r7, #3
   29ef8:	781b      	ldrb	r3, [r3, #0]
   29efa:	2b01      	cmp	r3, #1
   29efc:	d00a      	beq.n	29f14 <_sercom_get_default_pad+0xb4>
   29efe:	dc02      	bgt.n	29f06 <_sercom_get_default_pad+0xa6>
   29f00:	2b00      	cmp	r3, #0
   29f02:	d005      	beq.n	29f10 <_sercom_get_default_pad+0xb0>
   29f04:	e04b      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29f06:	2b02      	cmp	r3, #2
   29f08:	d006      	beq.n	29f18 <_sercom_get_default_pad+0xb8>
   29f0a:	2b03      	cmp	r3, #3
   29f0c:	d006      	beq.n	29f1c <_sercom_get_default_pad+0xbc>
   29f0e:	e046      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29f10:	4b32      	ldr	r3, [pc, #200]	; (29fdc <_sercom_get_default_pad+0x17c>)
   29f12:	e045      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f14:	4b32      	ldr	r3, [pc, #200]	; (29fe0 <_sercom_get_default_pad+0x180>)
   29f16:	e043      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f18:	4b32      	ldr	r3, [pc, #200]	; (29fe4 <_sercom_get_default_pad+0x184>)
   29f1a:	e041      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f1c:	4b32      	ldr	r3, [pc, #200]	; (29fe8 <_sercom_get_default_pad+0x188>)
   29f1e:	e03f      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f20:	1cfb      	adds	r3, r7, #3
   29f22:	781b      	ldrb	r3, [r3, #0]
   29f24:	2b01      	cmp	r3, #1
   29f26:	d00a      	beq.n	29f3e <_sercom_get_default_pad+0xde>
   29f28:	dc02      	bgt.n	29f30 <_sercom_get_default_pad+0xd0>
   29f2a:	2b00      	cmp	r3, #0
   29f2c:	d005      	beq.n	29f3a <_sercom_get_default_pad+0xda>
   29f2e:	e036      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29f30:	2b02      	cmp	r3, #2
   29f32:	d006      	beq.n	29f42 <_sercom_get_default_pad+0xe2>
   29f34:	2b03      	cmp	r3, #3
   29f36:	d006      	beq.n	29f46 <_sercom_get_default_pad+0xe6>
   29f38:	e031      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29f3a:	4b2c      	ldr	r3, [pc, #176]	; (29fec <_sercom_get_default_pad+0x18c>)
   29f3c:	e030      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f3e:	4b2c      	ldr	r3, [pc, #176]	; (29ff0 <_sercom_get_default_pad+0x190>)
   29f40:	e02e      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f42:	4b2c      	ldr	r3, [pc, #176]	; (29ff4 <_sercom_get_default_pad+0x194>)
   29f44:	e02c      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f46:	4b2c      	ldr	r3, [pc, #176]	; (29ff8 <_sercom_get_default_pad+0x198>)
   29f48:	e02a      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f4a:	1cfb      	adds	r3, r7, #3
   29f4c:	781b      	ldrb	r3, [r3, #0]
   29f4e:	2b01      	cmp	r3, #1
   29f50:	d00a      	beq.n	29f68 <_sercom_get_default_pad+0x108>
   29f52:	dc02      	bgt.n	29f5a <_sercom_get_default_pad+0xfa>
   29f54:	2b00      	cmp	r3, #0
   29f56:	d005      	beq.n	29f64 <_sercom_get_default_pad+0x104>
   29f58:	e021      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29f5a:	2b02      	cmp	r3, #2
   29f5c:	d006      	beq.n	29f6c <_sercom_get_default_pad+0x10c>
   29f5e:	2b03      	cmp	r3, #3
   29f60:	d006      	beq.n	29f70 <_sercom_get_default_pad+0x110>
   29f62:	e01c      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29f64:	4b25      	ldr	r3, [pc, #148]	; (29ffc <_sercom_get_default_pad+0x19c>)
   29f66:	e01b      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f68:	4b25      	ldr	r3, [pc, #148]	; (2a000 <_sercom_get_default_pad+0x1a0>)
   29f6a:	e019      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f6c:	4b25      	ldr	r3, [pc, #148]	; (2a004 <_sercom_get_default_pad+0x1a4>)
   29f6e:	e017      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f70:	4b25      	ldr	r3, [pc, #148]	; (2a008 <_sercom_get_default_pad+0x1a8>)
   29f72:	e015      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f74:	1cfb      	adds	r3, r7, #3
   29f76:	781b      	ldrb	r3, [r3, #0]
   29f78:	2b01      	cmp	r3, #1
   29f7a:	d00a      	beq.n	29f92 <_sercom_get_default_pad+0x132>
   29f7c:	dc02      	bgt.n	29f84 <_sercom_get_default_pad+0x124>
   29f7e:	2b00      	cmp	r3, #0
   29f80:	d005      	beq.n	29f8e <_sercom_get_default_pad+0x12e>
   29f82:	e00c      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29f84:	2b02      	cmp	r3, #2
   29f86:	d006      	beq.n	29f96 <_sercom_get_default_pad+0x136>
   29f88:	2b03      	cmp	r3, #3
   29f8a:	d006      	beq.n	29f9a <_sercom_get_default_pad+0x13a>
   29f8c:	e007      	b.n	29f9e <_sercom_get_default_pad+0x13e>
   29f8e:	4b1f      	ldr	r3, [pc, #124]	; (2a00c <_sercom_get_default_pad+0x1ac>)
   29f90:	e006      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f92:	4b1f      	ldr	r3, [pc, #124]	; (2a010 <_sercom_get_default_pad+0x1b0>)
   29f94:	e004      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f96:	4b1f      	ldr	r3, [pc, #124]	; (2a014 <_sercom_get_default_pad+0x1b4>)
   29f98:	e002      	b.n	29fa0 <_sercom_get_default_pad+0x140>
   29f9a:	4b1f      	ldr	r3, [pc, #124]	; (2a018 <_sercom_get_default_pad+0x1b8>)
   29f9c:	e000      	b.n	29fa0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   29f9e:	2300      	movs	r3, #0
}
   29fa0:	0018      	movs	r0, r3
   29fa2:	46bd      	mov	sp, r7
   29fa4:	b002      	add	sp, #8
   29fa6:	bd80      	pop	{r7, pc}
   29fa8:	42001000 	.word	0x42001000
   29fac:	42000800 	.word	0x42000800
   29fb0:	42000c00 	.word	0x42000c00
   29fb4:	42001800 	.word	0x42001800
   29fb8:	42001c00 	.word	0x42001c00
   29fbc:	42001400 	.word	0x42001400
   29fc0:	00040003 	.word	0x00040003
   29fc4:	00050003 	.word	0x00050003
   29fc8:	00060003 	.word	0x00060003
   29fcc:	00070003 	.word	0x00070003
   29fd0:	00010003 	.word	0x00010003
   29fd4:	001e0003 	.word	0x001e0003
   29fd8:	001f0003 	.word	0x001f0003
   29fdc:	00080003 	.word	0x00080003
   29fe0:	00090003 	.word	0x00090003
   29fe4:	000a0003 	.word	0x000a0003
   29fe8:	000b0003 	.word	0x000b0003
   29fec:	00100003 	.word	0x00100003
   29ff0:	00110003 	.word	0x00110003
   29ff4:	00120003 	.word	0x00120003
   29ff8:	00130003 	.word	0x00130003
   29ffc:	000c0003 	.word	0x000c0003
   2a000:	000d0003 	.word	0x000d0003
   2a004:	000e0003 	.word	0x000e0003
   2a008:	000f0003 	.word	0x000f0003
   2a00c:	00160003 	.word	0x00160003
   2a010:	00170003 	.word	0x00170003
   2a014:	00180003 	.word	0x00180003
   2a018:	00190003 	.word	0x00190003

0002a01c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   2a01c:	b590      	push	{r4, r7, lr}
   2a01e:	b08b      	sub	sp, #44	; 0x2c
   2a020:	af00      	add	r7, sp, #0
   2a022:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   2a024:	230c      	movs	r3, #12
   2a026:	18fb      	adds	r3, r7, r3
   2a028:	4a0f      	ldr	r2, [pc, #60]	; (2a068 <_sercom_get_sercom_inst_index+0x4c>)
   2a02a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2a02c:	c313      	stmia	r3!, {r0, r1, r4}
   2a02e:	ca13      	ldmia	r2!, {r0, r1, r4}
   2a030:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2a032:	2300      	movs	r3, #0
   2a034:	627b      	str	r3, [r7, #36]	; 0x24
   2a036:	e00e      	b.n	2a056 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   2a038:	230c      	movs	r3, #12
   2a03a:	18fb      	adds	r3, r7, r3
   2a03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2a03e:	0092      	lsls	r2, r2, #2
   2a040:	58d3      	ldr	r3, [r2, r3]
   2a042:	001a      	movs	r2, r3
   2a044:	687b      	ldr	r3, [r7, #4]
   2a046:	429a      	cmp	r2, r3
   2a048:	d102      	bne.n	2a050 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a04c:	b2db      	uxtb	r3, r3
   2a04e:	e006      	b.n	2a05e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a052:	3301      	adds	r3, #1
   2a054:	627b      	str	r3, [r7, #36]	; 0x24
   2a056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a058:	2b05      	cmp	r3, #5
   2a05a:	d9ed      	bls.n	2a038 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   2a05c:	2300      	movs	r3, #0
}
   2a05e:	0018      	movs	r0, r3
   2a060:	46bd      	mov	sp, r7
   2a062:	b00b      	add	sp, #44	; 0x2c
   2a064:	bd90      	pop	{r4, r7, pc}
   2a066:	46c0      	nop			; (mov r8, r8)
   2a068:	0003c604 	.word	0x0003c604

0002a06c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2a06c:	b580      	push	{r7, lr}
   2a06e:	b082      	sub	sp, #8
   2a070:	af00      	add	r7, sp, #0
   2a072:	0002      	movs	r2, r0
   2a074:	1dfb      	adds	r3, r7, #7
   2a076:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   2a078:	46c0      	nop			; (mov r8, r8)
   2a07a:	46bd      	mov	sp, r7
   2a07c:	b002      	add	sp, #8
   2a07e:	bd80      	pop	{r7, pc}

0002a080 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   2a080:	b580      	push	{r7, lr}
   2a082:	b084      	sub	sp, #16
   2a084:	af00      	add	r7, sp, #0
   2a086:	0002      	movs	r2, r0
   2a088:	6039      	str	r1, [r7, #0]
   2a08a:	1dfb      	adds	r3, r7, #7
   2a08c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2a08e:	4b13      	ldr	r3, [pc, #76]	; (2a0dc <_sercom_set_handler+0x5c>)
   2a090:	781b      	ldrb	r3, [r3, #0]
   2a092:	2201      	movs	r2, #1
   2a094:	4053      	eors	r3, r2
   2a096:	b2db      	uxtb	r3, r3
   2a098:	2b00      	cmp	r3, #0
   2a09a:	d015      	beq.n	2a0c8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2a09c:	2300      	movs	r3, #0
   2a09e:	60fb      	str	r3, [r7, #12]
   2a0a0:	e00c      	b.n	2a0bc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   2a0a2:	4b0f      	ldr	r3, [pc, #60]	; (2a0e0 <_sercom_set_handler+0x60>)
   2a0a4:	68fa      	ldr	r2, [r7, #12]
   2a0a6:	0092      	lsls	r2, r2, #2
   2a0a8:	490e      	ldr	r1, [pc, #56]	; (2a0e4 <_sercom_set_handler+0x64>)
   2a0aa:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2a0ac:	4b0e      	ldr	r3, [pc, #56]	; (2a0e8 <_sercom_set_handler+0x68>)
   2a0ae:	68fa      	ldr	r2, [r7, #12]
   2a0b0:	0092      	lsls	r2, r2, #2
   2a0b2:	2100      	movs	r1, #0
   2a0b4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2a0b6:	68fb      	ldr	r3, [r7, #12]
   2a0b8:	3301      	adds	r3, #1
   2a0ba:	60fb      	str	r3, [r7, #12]
   2a0bc:	68fb      	ldr	r3, [r7, #12]
   2a0be:	2b05      	cmp	r3, #5
   2a0c0:	d9ef      	bls.n	2a0a2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   2a0c2:	4b06      	ldr	r3, [pc, #24]	; (2a0dc <_sercom_set_handler+0x5c>)
   2a0c4:	2201      	movs	r2, #1
   2a0c6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   2a0c8:	1dfb      	adds	r3, r7, #7
   2a0ca:	781a      	ldrb	r2, [r3, #0]
   2a0cc:	4b04      	ldr	r3, [pc, #16]	; (2a0e0 <_sercom_set_handler+0x60>)
   2a0ce:	0092      	lsls	r2, r2, #2
   2a0d0:	6839      	ldr	r1, [r7, #0]
   2a0d2:	50d1      	str	r1, [r2, r3]
}
   2a0d4:	46c0      	nop			; (mov r8, r8)
   2a0d6:	46bd      	mov	sp, r7
   2a0d8:	b004      	add	sp, #16
   2a0da:	bd80      	pop	{r7, pc}
   2a0dc:	200041ee 	.word	0x200041ee
   2a0e0:	200041f0 	.word	0x200041f0
   2a0e4:	0002a06d 	.word	0x0002a06d
   2a0e8:	20005b90 	.word	0x20005b90

0002a0ec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   2a0ec:	b590      	push	{r4, r7, lr}
   2a0ee:	b085      	sub	sp, #20
   2a0f0:	af00      	add	r7, sp, #0
   2a0f2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   2a0f4:	2308      	movs	r3, #8
   2a0f6:	18fb      	adds	r3, r7, r3
   2a0f8:	4a0b      	ldr	r2, [pc, #44]	; (2a128 <_sercom_get_interrupt_vector+0x3c>)
   2a0fa:	6811      	ldr	r1, [r2, #0]
   2a0fc:	6019      	str	r1, [r3, #0]
   2a0fe:	8892      	ldrh	r2, [r2, #4]
   2a100:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   2a102:	230f      	movs	r3, #15
   2a104:	18fc      	adds	r4, r7, r3
   2a106:	687b      	ldr	r3, [r7, #4]
   2a108:	0018      	movs	r0, r3
   2a10a:	4b08      	ldr	r3, [pc, #32]	; (2a12c <_sercom_get_interrupt_vector+0x40>)
   2a10c:	4798      	blx	r3
   2a10e:	0003      	movs	r3, r0
   2a110:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   2a112:	230f      	movs	r3, #15
   2a114:	18fb      	adds	r3, r7, r3
   2a116:	781b      	ldrb	r3, [r3, #0]
   2a118:	2208      	movs	r2, #8
   2a11a:	18ba      	adds	r2, r7, r2
   2a11c:	5cd3      	ldrb	r3, [r2, r3]
   2a11e:	b25b      	sxtb	r3, r3
}
   2a120:	0018      	movs	r0, r3
   2a122:	46bd      	mov	sp, r7
   2a124:	b005      	add	sp, #20
   2a126:	bd90      	pop	{r4, r7, pc}
   2a128:	0003c61c 	.word	0x0003c61c
   2a12c:	0002a01d 	.word	0x0002a01d

0002a130 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   2a130:	b580      	push	{r7, lr}
   2a132:	af00      	add	r7, sp, #0
   2a134:	4b03      	ldr	r3, [pc, #12]	; (2a144 <SERCOM0_Handler+0x14>)
   2a136:	681b      	ldr	r3, [r3, #0]
   2a138:	2000      	movs	r0, #0
   2a13a:	4798      	blx	r3
   2a13c:	46c0      	nop			; (mov r8, r8)
   2a13e:	46bd      	mov	sp, r7
   2a140:	bd80      	pop	{r7, pc}
   2a142:	46c0      	nop			; (mov r8, r8)
   2a144:	200041f0 	.word	0x200041f0

0002a148 <SERCOM1_Handler>:
   2a148:	b580      	push	{r7, lr}
   2a14a:	af00      	add	r7, sp, #0
   2a14c:	4b03      	ldr	r3, [pc, #12]	; (2a15c <SERCOM1_Handler+0x14>)
   2a14e:	685b      	ldr	r3, [r3, #4]
   2a150:	2001      	movs	r0, #1
   2a152:	4798      	blx	r3
   2a154:	46c0      	nop			; (mov r8, r8)
   2a156:	46bd      	mov	sp, r7
   2a158:	bd80      	pop	{r7, pc}
   2a15a:	46c0      	nop			; (mov r8, r8)
   2a15c:	200041f0 	.word	0x200041f0

0002a160 <SERCOM2_Handler>:
   2a160:	b580      	push	{r7, lr}
   2a162:	af00      	add	r7, sp, #0
   2a164:	4b03      	ldr	r3, [pc, #12]	; (2a174 <SERCOM2_Handler+0x14>)
   2a166:	689b      	ldr	r3, [r3, #8]
   2a168:	2002      	movs	r0, #2
   2a16a:	4798      	blx	r3
   2a16c:	46c0      	nop			; (mov r8, r8)
   2a16e:	46bd      	mov	sp, r7
   2a170:	bd80      	pop	{r7, pc}
   2a172:	46c0      	nop			; (mov r8, r8)
   2a174:	200041f0 	.word	0x200041f0

0002a178 <SERCOM3_Handler>:
   2a178:	b580      	push	{r7, lr}
   2a17a:	af00      	add	r7, sp, #0
   2a17c:	4b03      	ldr	r3, [pc, #12]	; (2a18c <SERCOM3_Handler+0x14>)
   2a17e:	68db      	ldr	r3, [r3, #12]
   2a180:	2003      	movs	r0, #3
   2a182:	4798      	blx	r3
   2a184:	46c0      	nop			; (mov r8, r8)
   2a186:	46bd      	mov	sp, r7
   2a188:	bd80      	pop	{r7, pc}
   2a18a:	46c0      	nop			; (mov r8, r8)
   2a18c:	200041f0 	.word	0x200041f0

0002a190 <SERCOM4_Handler>:
   2a190:	b580      	push	{r7, lr}
   2a192:	af00      	add	r7, sp, #0
   2a194:	4b03      	ldr	r3, [pc, #12]	; (2a1a4 <SERCOM4_Handler+0x14>)
   2a196:	691b      	ldr	r3, [r3, #16]
   2a198:	2004      	movs	r0, #4
   2a19a:	4798      	blx	r3
   2a19c:	46c0      	nop			; (mov r8, r8)
   2a19e:	46bd      	mov	sp, r7
   2a1a0:	bd80      	pop	{r7, pc}
   2a1a2:	46c0      	nop			; (mov r8, r8)
   2a1a4:	200041f0 	.word	0x200041f0

0002a1a8 <SERCOM5_Handler>:
   2a1a8:	b580      	push	{r7, lr}
   2a1aa:	af00      	add	r7, sp, #0
   2a1ac:	4b03      	ldr	r3, [pc, #12]	; (2a1bc <SERCOM5_Handler+0x14>)
   2a1ae:	695b      	ldr	r3, [r3, #20]
   2a1b0:	2005      	movs	r0, #5
   2a1b2:	4798      	blx	r3
   2a1b4:	46c0      	nop			; (mov r8, r8)
   2a1b6:	46bd      	mov	sp, r7
   2a1b8:	bd80      	pop	{r7, pc}
   2a1ba:	46c0      	nop			; (mov r8, r8)
   2a1bc:	200041f0 	.word	0x200041f0

0002a1c0 <system_pinmux_get_config_defaults>:
{
   2a1c0:	b580      	push	{r7, lr}
   2a1c2:	b082      	sub	sp, #8
   2a1c4:	af00      	add	r7, sp, #0
   2a1c6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2a1c8:	687b      	ldr	r3, [r7, #4]
   2a1ca:	2280      	movs	r2, #128	; 0x80
   2a1cc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a1ce:	687b      	ldr	r3, [r7, #4]
   2a1d0:	2200      	movs	r2, #0
   2a1d2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2a1d4:	687b      	ldr	r3, [r7, #4]
   2a1d6:	2201      	movs	r2, #1
   2a1d8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2a1da:	687b      	ldr	r3, [r7, #4]
   2a1dc:	2200      	movs	r2, #0
   2a1de:	70da      	strb	r2, [r3, #3]
}
   2a1e0:	46c0      	nop			; (mov r8, r8)
   2a1e2:	46bd      	mov	sp, r7
   2a1e4:	b002      	add	sp, #8
   2a1e6:	bd80      	pop	{r7, pc}

0002a1e8 <system_pinmux_get_group_from_gpio_pin>:
{
   2a1e8:	b580      	push	{r7, lr}
   2a1ea:	b084      	sub	sp, #16
   2a1ec:	af00      	add	r7, sp, #0
   2a1ee:	0002      	movs	r2, r0
   2a1f0:	1dfb      	adds	r3, r7, #7
   2a1f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2a1f4:	230f      	movs	r3, #15
   2a1f6:	18fb      	adds	r3, r7, r3
   2a1f8:	1dfa      	adds	r2, r7, #7
   2a1fa:	7812      	ldrb	r2, [r2, #0]
   2a1fc:	09d2      	lsrs	r2, r2, #7
   2a1fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2a200:	230e      	movs	r3, #14
   2a202:	18fb      	adds	r3, r7, r3
   2a204:	1dfa      	adds	r2, r7, #7
   2a206:	7812      	ldrb	r2, [r2, #0]
   2a208:	0952      	lsrs	r2, r2, #5
   2a20a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2a20c:	4b0d      	ldr	r3, [pc, #52]	; (2a244 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2a20e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2a210:	230f      	movs	r3, #15
   2a212:	18fb      	adds	r3, r7, r3
   2a214:	781b      	ldrb	r3, [r3, #0]
   2a216:	2b00      	cmp	r3, #0
   2a218:	d10f      	bne.n	2a23a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2a21a:	230f      	movs	r3, #15
   2a21c:	18fb      	adds	r3, r7, r3
   2a21e:	781b      	ldrb	r3, [r3, #0]
   2a220:	009b      	lsls	r3, r3, #2
   2a222:	2210      	movs	r2, #16
   2a224:	4694      	mov	ip, r2
   2a226:	44bc      	add	ip, r7
   2a228:	4463      	add	r3, ip
   2a22a:	3b08      	subs	r3, #8
   2a22c:	681a      	ldr	r2, [r3, #0]
   2a22e:	230e      	movs	r3, #14
   2a230:	18fb      	adds	r3, r7, r3
   2a232:	781b      	ldrb	r3, [r3, #0]
   2a234:	01db      	lsls	r3, r3, #7
   2a236:	18d3      	adds	r3, r2, r3
   2a238:	e000      	b.n	2a23c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2a23a:	2300      	movs	r3, #0
}
   2a23c:	0018      	movs	r0, r3
   2a23e:	46bd      	mov	sp, r7
   2a240:	b004      	add	sp, #16
   2a242:	bd80      	pop	{r7, pc}
   2a244:	41004400 	.word	0x41004400

0002a248 <port_get_group_from_gpio_pin>:
{
   2a248:	b580      	push	{r7, lr}
   2a24a:	b082      	sub	sp, #8
   2a24c:	af00      	add	r7, sp, #0
   2a24e:	0002      	movs	r2, r0
   2a250:	1dfb      	adds	r3, r7, #7
   2a252:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2a254:	1dfb      	adds	r3, r7, #7
   2a256:	781b      	ldrb	r3, [r3, #0]
   2a258:	0018      	movs	r0, r3
   2a25a:	4b03      	ldr	r3, [pc, #12]	; (2a268 <port_get_group_from_gpio_pin+0x20>)
   2a25c:	4798      	blx	r3
   2a25e:	0003      	movs	r3, r0
}
   2a260:	0018      	movs	r0, r3
   2a262:	46bd      	mov	sp, r7
   2a264:	b002      	add	sp, #8
   2a266:	bd80      	pop	{r7, pc}
   2a268:	0002a1e9 	.word	0x0002a1e9

0002a26c <port_pin_set_output_level>:
{
   2a26c:	b580      	push	{r7, lr}
   2a26e:	b084      	sub	sp, #16
   2a270:	af00      	add	r7, sp, #0
   2a272:	0002      	movs	r2, r0
   2a274:	1dfb      	adds	r3, r7, #7
   2a276:	701a      	strb	r2, [r3, #0]
   2a278:	1dbb      	adds	r3, r7, #6
   2a27a:	1c0a      	adds	r2, r1, #0
   2a27c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2a27e:	1dfb      	adds	r3, r7, #7
   2a280:	781b      	ldrb	r3, [r3, #0]
   2a282:	0018      	movs	r0, r3
   2a284:	4b0d      	ldr	r3, [pc, #52]	; (2a2bc <port_pin_set_output_level+0x50>)
   2a286:	4798      	blx	r3
   2a288:	0003      	movs	r3, r0
   2a28a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2a28c:	1dfb      	adds	r3, r7, #7
   2a28e:	781b      	ldrb	r3, [r3, #0]
   2a290:	221f      	movs	r2, #31
   2a292:	4013      	ands	r3, r2
   2a294:	2201      	movs	r2, #1
   2a296:	409a      	lsls	r2, r3
   2a298:	0013      	movs	r3, r2
   2a29a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2a29c:	1dbb      	adds	r3, r7, #6
   2a29e:	781b      	ldrb	r3, [r3, #0]
   2a2a0:	2b00      	cmp	r3, #0
   2a2a2:	d003      	beq.n	2a2ac <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   2a2a4:	68fb      	ldr	r3, [r7, #12]
   2a2a6:	68ba      	ldr	r2, [r7, #8]
   2a2a8:	619a      	str	r2, [r3, #24]
}
   2a2aa:	e002      	b.n	2a2b2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2a2ac:	68fb      	ldr	r3, [r7, #12]
   2a2ae:	68ba      	ldr	r2, [r7, #8]
   2a2b0:	615a      	str	r2, [r3, #20]
}
   2a2b2:	46c0      	nop			; (mov r8, r8)
   2a2b4:	46bd      	mov	sp, r7
   2a2b6:	b004      	add	sp, #16
   2a2b8:	bd80      	pop	{r7, pc}
   2a2ba:	46c0      	nop			; (mov r8, r8)
   2a2bc:	0002a249 	.word	0x0002a249

0002a2c0 <system_gclk_chan_get_config_defaults>:
{
   2a2c0:	b580      	push	{r7, lr}
   2a2c2:	b082      	sub	sp, #8
   2a2c4:	af00      	add	r7, sp, #0
   2a2c6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a2c8:	687b      	ldr	r3, [r7, #4]
   2a2ca:	2200      	movs	r2, #0
   2a2cc:	701a      	strb	r2, [r3, #0]
}
   2a2ce:	46c0      	nop			; (mov r8, r8)
   2a2d0:	46bd      	mov	sp, r7
   2a2d2:	b002      	add	sp, #8
   2a2d4:	bd80      	pop	{r7, pc}
	...

0002a2d8 <system_apb_clock_set_mask>:
{
   2a2d8:	b580      	push	{r7, lr}
   2a2da:	b082      	sub	sp, #8
   2a2dc:	af00      	add	r7, sp, #0
   2a2de:	0002      	movs	r2, r0
   2a2e0:	6039      	str	r1, [r7, #0]
   2a2e2:	1dfb      	adds	r3, r7, #7
   2a2e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a2e6:	1dfb      	adds	r3, r7, #7
   2a2e8:	781b      	ldrb	r3, [r3, #0]
   2a2ea:	2b01      	cmp	r3, #1
   2a2ec:	d00a      	beq.n	2a304 <system_apb_clock_set_mask+0x2c>
   2a2ee:	2b02      	cmp	r3, #2
   2a2f0:	d00f      	beq.n	2a312 <system_apb_clock_set_mask+0x3a>
   2a2f2:	2b00      	cmp	r3, #0
   2a2f4:	d114      	bne.n	2a320 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a2f6:	4b0e      	ldr	r3, [pc, #56]	; (2a330 <system_apb_clock_set_mask+0x58>)
   2a2f8:	4a0d      	ldr	r2, [pc, #52]	; (2a330 <system_apb_clock_set_mask+0x58>)
   2a2fa:	6991      	ldr	r1, [r2, #24]
   2a2fc:	683a      	ldr	r2, [r7, #0]
   2a2fe:	430a      	orrs	r2, r1
   2a300:	619a      	str	r2, [r3, #24]
			break;
   2a302:	e00f      	b.n	2a324 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a304:	4b0a      	ldr	r3, [pc, #40]	; (2a330 <system_apb_clock_set_mask+0x58>)
   2a306:	4a0a      	ldr	r2, [pc, #40]	; (2a330 <system_apb_clock_set_mask+0x58>)
   2a308:	69d1      	ldr	r1, [r2, #28]
   2a30a:	683a      	ldr	r2, [r7, #0]
   2a30c:	430a      	orrs	r2, r1
   2a30e:	61da      	str	r2, [r3, #28]
			break;
   2a310:	e008      	b.n	2a324 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a312:	4b07      	ldr	r3, [pc, #28]	; (2a330 <system_apb_clock_set_mask+0x58>)
   2a314:	4a06      	ldr	r2, [pc, #24]	; (2a330 <system_apb_clock_set_mask+0x58>)
   2a316:	6a11      	ldr	r1, [r2, #32]
   2a318:	683a      	ldr	r2, [r7, #0]
   2a31a:	430a      	orrs	r2, r1
   2a31c:	621a      	str	r2, [r3, #32]
			break;
   2a31e:	e001      	b.n	2a324 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a320:	2317      	movs	r3, #23
   2a322:	e000      	b.n	2a326 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a324:	2300      	movs	r3, #0
}
   2a326:	0018      	movs	r0, r3
   2a328:	46bd      	mov	sp, r7
   2a32a:	b002      	add	sp, #8
   2a32c:	bd80      	pop	{r7, pc}
   2a32e:	46c0      	nop			; (mov r8, r8)
   2a330:	40000400 	.word	0x40000400

0002a334 <system_is_debugger_present>:
{
   2a334:	b580      	push	{r7, lr}
   2a336:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   2a338:	4b05      	ldr	r3, [pc, #20]	; (2a350 <system_is_debugger_present+0x1c>)
   2a33a:	789b      	ldrb	r3, [r3, #2]
   2a33c:	b2db      	uxtb	r3, r3
   2a33e:	001a      	movs	r2, r3
   2a340:	2302      	movs	r3, #2
   2a342:	4013      	ands	r3, r2
   2a344:	1e5a      	subs	r2, r3, #1
   2a346:	4193      	sbcs	r3, r2
   2a348:	b2db      	uxtb	r3, r3
}
   2a34a:	0018      	movs	r0, r3
   2a34c:	46bd      	mov	sp, r7
   2a34e:	bd80      	pop	{r7, pc}
   2a350:	41002000 	.word	0x41002000

0002a354 <system_interrupt_enable>:
{
   2a354:	b580      	push	{r7, lr}
   2a356:	b082      	sub	sp, #8
   2a358:	af00      	add	r7, sp, #0
   2a35a:	0002      	movs	r2, r0
   2a35c:	1dfb      	adds	r3, r7, #7
   2a35e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2a360:	4b06      	ldr	r3, [pc, #24]	; (2a37c <system_interrupt_enable+0x28>)
   2a362:	1dfa      	adds	r2, r7, #7
   2a364:	7812      	ldrb	r2, [r2, #0]
   2a366:	0011      	movs	r1, r2
   2a368:	221f      	movs	r2, #31
   2a36a:	400a      	ands	r2, r1
   2a36c:	2101      	movs	r1, #1
   2a36e:	4091      	lsls	r1, r2
   2a370:	000a      	movs	r2, r1
   2a372:	601a      	str	r2, [r3, #0]
}
   2a374:	46c0      	nop			; (mov r8, r8)
   2a376:	46bd      	mov	sp, r7
   2a378:	b002      	add	sp, #8
   2a37a:	bd80      	pop	{r7, pc}
   2a37c:	e000e100 	.word	0xe000e100

0002a380 <system_interrupt_disable>:
{
   2a380:	b580      	push	{r7, lr}
   2a382:	b082      	sub	sp, #8
   2a384:	af00      	add	r7, sp, #0
   2a386:	0002      	movs	r2, r0
   2a388:	1dfb      	adds	r3, r7, #7
   2a38a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2a38c:	4a07      	ldr	r2, [pc, #28]	; (2a3ac <system_interrupt_disable+0x2c>)
   2a38e:	1dfb      	adds	r3, r7, #7
   2a390:	781b      	ldrb	r3, [r3, #0]
   2a392:	0019      	movs	r1, r3
   2a394:	231f      	movs	r3, #31
   2a396:	400b      	ands	r3, r1
   2a398:	2101      	movs	r1, #1
   2a39a:	4099      	lsls	r1, r3
   2a39c:	000b      	movs	r3, r1
   2a39e:	0019      	movs	r1, r3
   2a3a0:	2380      	movs	r3, #128	; 0x80
   2a3a2:	50d1      	str	r1, [r2, r3]
}
   2a3a4:	46c0      	nop			; (mov r8, r8)
   2a3a6:	46bd      	mov	sp, r7
   2a3a8:	b002      	add	sp, #8
   2a3aa:	bd80      	pop	{r7, pc}
   2a3ac:	e000e100 	.word	0xe000e100

0002a3b0 <spi_is_syncing>:
{
   2a3b0:	b580      	push	{r7, lr}
   2a3b2:	b084      	sub	sp, #16
   2a3b4:	af00      	add	r7, sp, #0
   2a3b6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2a3b8:	687b      	ldr	r3, [r7, #4]
   2a3ba:	681b      	ldr	r3, [r3, #0]
   2a3bc:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2a3be:	68fb      	ldr	r3, [r7, #12]
   2a3c0:	69db      	ldr	r3, [r3, #28]
   2a3c2:	1e5a      	subs	r2, r3, #1
   2a3c4:	4193      	sbcs	r3, r2
   2a3c6:	b2db      	uxtb	r3, r3
}
   2a3c8:	0018      	movs	r0, r3
   2a3ca:	46bd      	mov	sp, r7
   2a3cc:	b004      	add	sp, #16
   2a3ce:	bd80      	pop	{r7, pc}

0002a3d0 <spi_enable>:
{
   2a3d0:	b580      	push	{r7, lr}
   2a3d2:	b084      	sub	sp, #16
   2a3d4:	af00      	add	r7, sp, #0
   2a3d6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2a3d8:	687b      	ldr	r3, [r7, #4]
   2a3da:	681b      	ldr	r3, [r3, #0]
   2a3dc:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2a3de:	687b      	ldr	r3, [r7, #4]
   2a3e0:	681b      	ldr	r3, [r3, #0]
   2a3e2:	0018      	movs	r0, r3
   2a3e4:	4b0b      	ldr	r3, [pc, #44]	; (2a414 <spi_enable+0x44>)
   2a3e6:	4798      	blx	r3
   2a3e8:	0003      	movs	r3, r0
   2a3ea:	0018      	movs	r0, r3
   2a3ec:	4b0a      	ldr	r3, [pc, #40]	; (2a418 <spi_enable+0x48>)
   2a3ee:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2a3f0:	46c0      	nop			; (mov r8, r8)
   2a3f2:	687b      	ldr	r3, [r7, #4]
   2a3f4:	0018      	movs	r0, r3
   2a3f6:	4b09      	ldr	r3, [pc, #36]	; (2a41c <spi_enable+0x4c>)
   2a3f8:	4798      	blx	r3
   2a3fa:	1e03      	subs	r3, r0, #0
   2a3fc:	d1f9      	bne.n	2a3f2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2a3fe:	68fb      	ldr	r3, [r7, #12]
   2a400:	681b      	ldr	r3, [r3, #0]
   2a402:	2202      	movs	r2, #2
   2a404:	431a      	orrs	r2, r3
   2a406:	68fb      	ldr	r3, [r7, #12]
   2a408:	601a      	str	r2, [r3, #0]
}
   2a40a:	46c0      	nop			; (mov r8, r8)
   2a40c:	46bd      	mov	sp, r7
   2a40e:	b004      	add	sp, #16
   2a410:	bd80      	pop	{r7, pc}
   2a412:	46c0      	nop			; (mov r8, r8)
   2a414:	0002a0ed 	.word	0x0002a0ed
   2a418:	0002a355 	.word	0x0002a355
   2a41c:	0002a3b1 	.word	0x0002a3b1

0002a420 <spi_disable>:
{
   2a420:	b580      	push	{r7, lr}
   2a422:	b084      	sub	sp, #16
   2a424:	af00      	add	r7, sp, #0
   2a426:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2a428:	687b      	ldr	r3, [r7, #4]
   2a42a:	681b      	ldr	r3, [r3, #0]
   2a42c:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2a42e:	687b      	ldr	r3, [r7, #4]
   2a430:	681b      	ldr	r3, [r3, #0]
   2a432:	0018      	movs	r0, r3
   2a434:	4b0e      	ldr	r3, [pc, #56]	; (2a470 <spi_disable+0x50>)
   2a436:	4798      	blx	r3
   2a438:	0003      	movs	r3, r0
   2a43a:	0018      	movs	r0, r3
   2a43c:	4b0d      	ldr	r3, [pc, #52]	; (2a474 <spi_disable+0x54>)
   2a43e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2a440:	46c0      	nop			; (mov r8, r8)
   2a442:	687b      	ldr	r3, [r7, #4]
   2a444:	0018      	movs	r0, r3
   2a446:	4b0c      	ldr	r3, [pc, #48]	; (2a478 <spi_disable+0x58>)
   2a448:	4798      	blx	r3
   2a44a:	1e03      	subs	r3, r0, #0
   2a44c:	d1f9      	bne.n	2a442 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2a44e:	68fb      	ldr	r3, [r7, #12]
   2a450:	228f      	movs	r2, #143	; 0x8f
   2a452:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   2a454:	68fb      	ldr	r3, [r7, #12]
   2a456:	228f      	movs	r2, #143	; 0x8f
   2a458:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2a45a:	68fb      	ldr	r3, [r7, #12]
   2a45c:	681b      	ldr	r3, [r3, #0]
   2a45e:	2202      	movs	r2, #2
   2a460:	4393      	bics	r3, r2
   2a462:	001a      	movs	r2, r3
   2a464:	68fb      	ldr	r3, [r7, #12]
   2a466:	601a      	str	r2, [r3, #0]
}
   2a468:	46c0      	nop			; (mov r8, r8)
   2a46a:	46bd      	mov	sp, r7
   2a46c:	b004      	add	sp, #16
   2a46e:	bd80      	pop	{r7, pc}
   2a470:	0002a0ed 	.word	0x0002a0ed
   2a474:	0002a381 	.word	0x0002a381
   2a478:	0002a3b1 	.word	0x0002a3b1

0002a47c <spi_is_write_complete>:
{
   2a47c:	b580      	push	{r7, lr}
   2a47e:	b084      	sub	sp, #16
   2a480:	af00      	add	r7, sp, #0
   2a482:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2a484:	687b      	ldr	r3, [r7, #4]
   2a486:	681b      	ldr	r3, [r3, #0]
   2a488:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2a48a:	68fb      	ldr	r3, [r7, #12]
   2a48c:	7e1b      	ldrb	r3, [r3, #24]
   2a48e:	b2db      	uxtb	r3, r3
   2a490:	001a      	movs	r2, r3
   2a492:	2302      	movs	r3, #2
   2a494:	4013      	ands	r3, r2
   2a496:	1e5a      	subs	r2, r3, #1
   2a498:	4193      	sbcs	r3, r2
   2a49a:	b2db      	uxtb	r3, r3
}
   2a49c:	0018      	movs	r0, r3
   2a49e:	46bd      	mov	sp, r7
   2a4a0:	b004      	add	sp, #16
   2a4a2:	bd80      	pop	{r7, pc}

0002a4a4 <spi_is_ready_to_write>:
{
   2a4a4:	b580      	push	{r7, lr}
   2a4a6:	b084      	sub	sp, #16
   2a4a8:	af00      	add	r7, sp, #0
   2a4aa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2a4ac:	687b      	ldr	r3, [r7, #4]
   2a4ae:	681b      	ldr	r3, [r3, #0]
   2a4b0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   2a4b2:	68fb      	ldr	r3, [r7, #12]
   2a4b4:	7e1b      	ldrb	r3, [r3, #24]
   2a4b6:	b2db      	uxtb	r3, r3
   2a4b8:	001a      	movs	r2, r3
   2a4ba:	2301      	movs	r3, #1
   2a4bc:	4013      	ands	r3, r2
   2a4be:	1e5a      	subs	r2, r3, #1
   2a4c0:	4193      	sbcs	r3, r2
   2a4c2:	b2db      	uxtb	r3, r3
}
   2a4c4:	0018      	movs	r0, r3
   2a4c6:	46bd      	mov	sp, r7
   2a4c8:	b004      	add	sp, #16
   2a4ca:	bd80      	pop	{r7, pc}

0002a4cc <spi_is_ready_to_read>:
{
   2a4cc:	b580      	push	{r7, lr}
   2a4ce:	b084      	sub	sp, #16
   2a4d0:	af00      	add	r7, sp, #0
   2a4d2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2a4d4:	687b      	ldr	r3, [r7, #4]
   2a4d6:	681b      	ldr	r3, [r3, #0]
   2a4d8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2a4da:	68fb      	ldr	r3, [r7, #12]
   2a4dc:	7e1b      	ldrb	r3, [r3, #24]
   2a4de:	b2db      	uxtb	r3, r3
   2a4e0:	001a      	movs	r2, r3
   2a4e2:	2304      	movs	r3, #4
   2a4e4:	4013      	ands	r3, r2
   2a4e6:	1e5a      	subs	r2, r3, #1
   2a4e8:	4193      	sbcs	r3, r2
   2a4ea:	b2db      	uxtb	r3, r3
}
   2a4ec:	0018      	movs	r0, r3
   2a4ee:	46bd      	mov	sp, r7
   2a4f0:	b004      	add	sp, #16
   2a4f2:	bd80      	pop	{r7, pc}

0002a4f4 <spi_write>:
{
   2a4f4:	b580      	push	{r7, lr}
   2a4f6:	b084      	sub	sp, #16
   2a4f8:	af00      	add	r7, sp, #0
   2a4fa:	6078      	str	r0, [r7, #4]
   2a4fc:	000a      	movs	r2, r1
   2a4fe:	1cbb      	adds	r3, r7, #2
   2a500:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2a502:	687b      	ldr	r3, [r7, #4]
   2a504:	681b      	ldr	r3, [r3, #0]
   2a506:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   2a508:	687b      	ldr	r3, [r7, #4]
   2a50a:	0018      	movs	r0, r3
   2a50c:	4b0a      	ldr	r3, [pc, #40]	; (2a538 <spi_write+0x44>)
   2a50e:	4798      	blx	r3
   2a510:	0003      	movs	r3, r0
   2a512:	001a      	movs	r2, r3
   2a514:	2301      	movs	r3, #1
   2a516:	4053      	eors	r3, r2
   2a518:	b2db      	uxtb	r3, r3
   2a51a:	2b00      	cmp	r3, #0
   2a51c:	d001      	beq.n	2a522 <spi_write+0x2e>
		return STATUS_BUSY;
   2a51e:	2305      	movs	r3, #5
   2a520:	e006      	b.n	2a530 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   2a522:	1cbb      	adds	r3, r7, #2
   2a524:	881b      	ldrh	r3, [r3, #0]
   2a526:	05db      	lsls	r3, r3, #23
   2a528:	0dda      	lsrs	r2, r3, #23
   2a52a:	68fb      	ldr	r3, [r7, #12]
   2a52c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   2a52e:	2300      	movs	r3, #0
}
   2a530:	0018      	movs	r0, r3
   2a532:	46bd      	mov	sp, r7
   2a534:	b004      	add	sp, #16
   2a536:	bd80      	pop	{r7, pc}
   2a538:	0002a4a5 	.word	0x0002a4a5

0002a53c <spi_read>:
{
   2a53c:	b580      	push	{r7, lr}
   2a53e:	b084      	sub	sp, #16
   2a540:	af00      	add	r7, sp, #0
   2a542:	6078      	str	r0, [r7, #4]
   2a544:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2a546:	687b      	ldr	r3, [r7, #4]
   2a548:	681b      	ldr	r3, [r3, #0]
   2a54a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   2a54c:	687b      	ldr	r3, [r7, #4]
   2a54e:	0018      	movs	r0, r3
   2a550:	4b1b      	ldr	r3, [pc, #108]	; (2a5c0 <spi_read+0x84>)
   2a552:	4798      	blx	r3
   2a554:	0003      	movs	r3, r0
   2a556:	001a      	movs	r2, r3
   2a558:	2301      	movs	r3, #1
   2a55a:	4053      	eors	r3, r2
   2a55c:	b2db      	uxtb	r3, r3
   2a55e:	2b00      	cmp	r3, #0
   2a560:	d001      	beq.n	2a566 <spi_read+0x2a>
		return STATUS_ERR_IO;
   2a562:	2310      	movs	r3, #16
   2a564:	e027      	b.n	2a5b6 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   2a566:	230f      	movs	r3, #15
   2a568:	18fb      	adds	r3, r7, r3
   2a56a:	2200      	movs	r2, #0
   2a56c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2a56e:	68bb      	ldr	r3, [r7, #8]
   2a570:	8b5b      	ldrh	r3, [r3, #26]
   2a572:	b29b      	uxth	r3, r3
   2a574:	001a      	movs	r2, r3
   2a576:	2304      	movs	r3, #4
   2a578:	4013      	ands	r3, r2
   2a57a:	d006      	beq.n	2a58a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2a57c:	230f      	movs	r3, #15
   2a57e:	18fb      	adds	r3, r7, r3
   2a580:	221e      	movs	r2, #30
   2a582:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   2a584:	68bb      	ldr	r3, [r7, #8]
   2a586:	2204      	movs	r2, #4
   2a588:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a58a:	687b      	ldr	r3, [r7, #4]
   2a58c:	799b      	ldrb	r3, [r3, #6]
   2a58e:	2b01      	cmp	r3, #1
   2a590:	d108      	bne.n	2a5a4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2a592:	68bb      	ldr	r3, [r7, #8]
   2a594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2a596:	b29b      	uxth	r3, r3
   2a598:	05db      	lsls	r3, r3, #23
   2a59a:	0ddb      	lsrs	r3, r3, #23
   2a59c:	b29a      	uxth	r2, r3
   2a59e:	683b      	ldr	r3, [r7, #0]
   2a5a0:	801a      	strh	r2, [r3, #0]
   2a5a2:	e005      	b.n	2a5b0 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   2a5a4:	68bb      	ldr	r3, [r7, #8]
   2a5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2a5a8:	b2db      	uxtb	r3, r3
   2a5aa:	b29a      	uxth	r2, r3
   2a5ac:	683b      	ldr	r3, [r7, #0]
   2a5ae:	801a      	strh	r2, [r3, #0]
	return retval;
   2a5b0:	230f      	movs	r3, #15
   2a5b2:	18fb      	adds	r3, r7, r3
   2a5b4:	781b      	ldrb	r3, [r3, #0]
}
   2a5b6:	0018      	movs	r0, r3
   2a5b8:	46bd      	mov	sp, r7
   2a5ba:	b004      	add	sp, #16
   2a5bc:	bd80      	pop	{r7, pc}
   2a5be:	46c0      	nop			; (mov r8, r8)
   2a5c0:	0002a4cd 	.word	0x0002a4cd

0002a5c4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   2a5c4:	b590      	push	{r4, r7, lr}
   2a5c6:	b089      	sub	sp, #36	; 0x24
   2a5c8:	af00      	add	r7, sp, #0
   2a5ca:	6078      	str	r0, [r7, #4]
   2a5cc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2a5ce:	230c      	movs	r3, #12
   2a5d0:	18fb      	adds	r3, r7, r3
   2a5d2:	2200      	movs	r2, #0
   2a5d4:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a5d6:	687b      	ldr	r3, [r7, #4]
   2a5d8:	681b      	ldr	r3, [r3, #0]
   2a5da:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   2a5dc:	687b      	ldr	r3, [r7, #4]
   2a5de:	0018      	movs	r0, r3
   2a5e0:	4b24      	ldr	r3, [pc, #144]	; (2a674 <spi_set_baudrate+0xb0>)
   2a5e2:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2a5e4:	46c0      	nop			; (mov r8, r8)
   2a5e6:	687b      	ldr	r3, [r7, #4]
   2a5e8:	0018      	movs	r0, r3
   2a5ea:	4b23      	ldr	r3, [pc, #140]	; (2a678 <spi_set_baudrate+0xb4>)
   2a5ec:	4798      	blx	r3
   2a5ee:	1e03      	subs	r3, r0, #0
   2a5f0:	d1f9      	bne.n	2a5e6 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2a5f2:	687b      	ldr	r3, [r7, #4]
   2a5f4:	681b      	ldr	r3, [r3, #0]
   2a5f6:	0018      	movs	r0, r3
   2a5f8:	4b20      	ldr	r3, [pc, #128]	; (2a67c <spi_set_baudrate+0xb8>)
   2a5fa:	4798      	blx	r3
   2a5fc:	0003      	movs	r3, r0
   2a5fe:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2a600:	69bb      	ldr	r3, [r7, #24]
   2a602:	3314      	adds	r3, #20
   2a604:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   2a606:	697b      	ldr	r3, [r7, #20]
   2a608:	b2db      	uxtb	r3, r3
   2a60a:	0018      	movs	r0, r3
   2a60c:	4b1c      	ldr	r3, [pc, #112]	; (2a680 <spi_set_baudrate+0xbc>)
   2a60e:	4798      	blx	r3
   2a610:	0003      	movs	r3, r0
   2a612:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   2a614:	230f      	movs	r3, #15
   2a616:	18fc      	adds	r4, r7, r3
   2a618:	230c      	movs	r3, #12
   2a61a:	18fa      	adds	r2, r7, r3
   2a61c:	6939      	ldr	r1, [r7, #16]
   2a61e:	683b      	ldr	r3, [r7, #0]
   2a620:	0018      	movs	r0, r3
   2a622:	4b18      	ldr	r3, [pc, #96]	; (2a684 <spi_set_baudrate+0xc0>)
   2a624:	4798      	blx	r3
   2a626:	0003      	movs	r3, r0
   2a628:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   2a62a:	230f      	movs	r3, #15
   2a62c:	18fb      	adds	r3, r7, r3
   2a62e:	781b      	ldrb	r3, [r3, #0]
   2a630:	2b00      	cmp	r3, #0
   2a632:	d001      	beq.n	2a638 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   2a634:	2317      	movs	r3, #23
   2a636:	e018      	b.n	2a66a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   2a638:	230c      	movs	r3, #12
   2a63a:	18fb      	adds	r3, r7, r3
   2a63c:	881b      	ldrh	r3, [r3, #0]
   2a63e:	b2da      	uxtb	r2, r3
   2a640:	69fb      	ldr	r3, [r7, #28]
   2a642:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   2a644:	46c0      	nop			; (mov r8, r8)
   2a646:	687b      	ldr	r3, [r7, #4]
   2a648:	0018      	movs	r0, r3
   2a64a:	4b0b      	ldr	r3, [pc, #44]	; (2a678 <spi_set_baudrate+0xb4>)
   2a64c:	4798      	blx	r3
   2a64e:	1e03      	subs	r3, r0, #0
   2a650:	d1f9      	bne.n	2a646 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   2a652:	687b      	ldr	r3, [r7, #4]
   2a654:	0018      	movs	r0, r3
   2a656:	4b0c      	ldr	r3, [pc, #48]	; (2a688 <spi_set_baudrate+0xc4>)
   2a658:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2a65a:	46c0      	nop			; (mov r8, r8)
   2a65c:	687b      	ldr	r3, [r7, #4]
   2a65e:	0018      	movs	r0, r3
   2a660:	4b05      	ldr	r3, [pc, #20]	; (2a678 <spi_set_baudrate+0xb4>)
   2a662:	4798      	blx	r3
   2a664:	1e03      	subs	r3, r0, #0
   2a666:	d1f9      	bne.n	2a65c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   2a668:	2300      	movs	r3, #0
}
   2a66a:	0018      	movs	r0, r3
   2a66c:	46bd      	mov	sp, r7
   2a66e:	b009      	add	sp, #36	; 0x24
   2a670:	bd90      	pop	{r4, r7, pc}
   2a672:	46c0      	nop			; (mov r8, r8)
   2a674:	0002a421 	.word	0x0002a421
   2a678:	0002a3b1 	.word	0x0002a3b1
   2a67c:	0002a01d 	.word	0x0002a01d
   2a680:	0002c9d1 	.word	0x0002c9d1
   2a684:	00029b97 	.word	0x00029b97
   2a688:	0002a3d1 	.word	0x0002a3d1

0002a68c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   2a68c:	b590      	push	{r4, r7, lr}
   2a68e:	b093      	sub	sp, #76	; 0x4c
   2a690:	af00      	add	r7, sp, #0
   2a692:	6078      	str	r0, [r7, #4]
   2a694:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a696:	687b      	ldr	r3, [r7, #4]
   2a698:	681b      	ldr	r3, [r3, #0]
   2a69a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   2a69c:	687b      	ldr	r3, [r7, #4]
   2a69e:	681b      	ldr	r3, [r3, #0]
   2a6a0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2a6a2:	231c      	movs	r3, #28
   2a6a4:	18fb      	adds	r3, r7, r3
   2a6a6:	0018      	movs	r0, r3
   2a6a8:	4b75      	ldr	r3, [pc, #468]	; (2a880 <_spi_set_config+0x1f4>)
   2a6aa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a6ac:	231c      	movs	r3, #28
   2a6ae:	18fb      	adds	r3, r7, r3
   2a6b0:	2200      	movs	r2, #0
   2a6b2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   2a6b4:	683b      	ldr	r3, [r7, #0]
   2a6b6:	781b      	ldrb	r3, [r3, #0]
   2a6b8:	2b00      	cmp	r3, #0
   2a6ba:	d103      	bne.n	2a6c4 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2a6bc:	231c      	movs	r3, #28
   2a6be:	18fb      	adds	r3, r7, r3
   2a6c0:	2200      	movs	r2, #0
   2a6c2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2a6c4:	683b      	ldr	r3, [r7, #0]
   2a6c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   2a6c8:	230c      	movs	r3, #12
   2a6ca:	18fb      	adds	r3, r7, r3
   2a6cc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2a6ce:	683b      	ldr	r3, [r7, #0]
   2a6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   2a6d2:	230c      	movs	r3, #12
   2a6d4:	18fb      	adds	r3, r7, r3
   2a6d6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   2a6d8:	683b      	ldr	r3, [r7, #0]
   2a6da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2a6dc:	230c      	movs	r3, #12
   2a6de:	18fb      	adds	r3, r7, r3
   2a6e0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2a6e2:	683b      	ldr	r3, [r7, #0]
   2a6e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2a6e6:	230c      	movs	r3, #12
   2a6e8:	18fb      	adds	r3, r7, r3
   2a6ea:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2a6ec:	2347      	movs	r3, #71	; 0x47
   2a6ee:	18fb      	adds	r3, r7, r3
   2a6f0:	2200      	movs	r2, #0
   2a6f2:	701a      	strb	r2, [r3, #0]
   2a6f4:	e02c      	b.n	2a750 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2a6f6:	2347      	movs	r3, #71	; 0x47
   2a6f8:	18fb      	adds	r3, r7, r3
   2a6fa:	781a      	ldrb	r2, [r3, #0]
   2a6fc:	230c      	movs	r3, #12
   2a6fe:	18fb      	adds	r3, r7, r3
   2a700:	0092      	lsls	r2, r2, #2
   2a702:	58d3      	ldr	r3, [r2, r3]
   2a704:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2a706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a708:	2b00      	cmp	r3, #0
   2a70a:	d109      	bne.n	2a720 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2a70c:	2347      	movs	r3, #71	; 0x47
   2a70e:	18fb      	adds	r3, r7, r3
   2a710:	781a      	ldrb	r2, [r3, #0]
   2a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a714:	0011      	movs	r1, r2
   2a716:	0018      	movs	r0, r3
   2a718:	4b5a      	ldr	r3, [pc, #360]	; (2a884 <_spi_set_config+0x1f8>)
   2a71a:	4798      	blx	r3
   2a71c:	0003      	movs	r3, r0
   2a71e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2a720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a722:	3301      	adds	r3, #1
   2a724:	d00d      	beq.n	2a742 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2a726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a728:	b2da      	uxtb	r2, r3
   2a72a:	231c      	movs	r3, #28
   2a72c:	18fb      	adds	r3, r7, r3
   2a72e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2a730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a732:	0c1b      	lsrs	r3, r3, #16
   2a734:	b2db      	uxtb	r3, r3
   2a736:	221c      	movs	r2, #28
   2a738:	18ba      	adds	r2, r7, r2
   2a73a:	0011      	movs	r1, r2
   2a73c:	0018      	movs	r0, r3
   2a73e:	4b52      	ldr	r3, [pc, #328]	; (2a888 <_spi_set_config+0x1fc>)
   2a740:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2a742:	2347      	movs	r3, #71	; 0x47
   2a744:	18fb      	adds	r3, r7, r3
   2a746:	781a      	ldrb	r2, [r3, #0]
   2a748:	2347      	movs	r3, #71	; 0x47
   2a74a:	18fb      	adds	r3, r7, r3
   2a74c:	3201      	adds	r2, #1
   2a74e:	701a      	strb	r2, [r3, #0]
   2a750:	2347      	movs	r3, #71	; 0x47
   2a752:	18fb      	adds	r3, r7, r3
   2a754:	781b      	ldrb	r3, [r3, #0]
   2a756:	2b03      	cmp	r3, #3
   2a758:	d9cd      	bls.n	2a6f6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2a75a:	683b      	ldr	r3, [r7, #0]
   2a75c:	781a      	ldrb	r2, [r3, #0]
   2a75e:	687b      	ldr	r3, [r7, #4]
   2a760:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   2a762:	683b      	ldr	r3, [r7, #0]
   2a764:	7c1a      	ldrb	r2, [r3, #16]
   2a766:	687b      	ldr	r3, [r7, #4]
   2a768:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2a76a:	683b      	ldr	r3, [r7, #0]
   2a76c:	7c9a      	ldrb	r2, [r3, #18]
   2a76e:	687b      	ldr	r3, [r7, #4]
   2a770:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   2a772:	683b      	ldr	r3, [r7, #0]
   2a774:	7d1a      	ldrb	r2, [r3, #20]
   2a776:	687b      	ldr	r3, [r7, #4]
   2a778:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2a77a:	230a      	movs	r3, #10
   2a77c:	18fb      	adds	r3, r7, r3
   2a77e:	2200      	movs	r2, #0
   2a780:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   2a782:	2300      	movs	r3, #0
   2a784:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   2a786:	2300      	movs	r3, #0
   2a788:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   2a78a:	683b      	ldr	r3, [r7, #0]
   2a78c:	781b      	ldrb	r3, [r3, #0]
   2a78e:	2b01      	cmp	r3, #1
   2a790:	d129      	bne.n	2a7e6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2a792:	687b      	ldr	r3, [r7, #4]
   2a794:	681b      	ldr	r3, [r3, #0]
   2a796:	0018      	movs	r0, r3
   2a798:	4b3c      	ldr	r3, [pc, #240]	; (2a88c <_spi_set_config+0x200>)
   2a79a:	4798      	blx	r3
   2a79c:	0003      	movs	r3, r0
   2a79e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2a7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a7a2:	3314      	adds	r3, #20
   2a7a4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   2a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a7a8:	b2db      	uxtb	r3, r3
   2a7aa:	0018      	movs	r0, r3
   2a7ac:	4b38      	ldr	r3, [pc, #224]	; (2a890 <_spi_set_config+0x204>)
   2a7ae:	4798      	blx	r3
   2a7b0:	0003      	movs	r3, r0
   2a7b2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   2a7b4:	683b      	ldr	r3, [r7, #0]
   2a7b6:	699b      	ldr	r3, [r3, #24]
   2a7b8:	2223      	movs	r2, #35	; 0x23
   2a7ba:	18bc      	adds	r4, r7, r2
   2a7bc:	220a      	movs	r2, #10
   2a7be:	18ba      	adds	r2, r7, r2
   2a7c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2a7c2:	0018      	movs	r0, r3
   2a7c4:	4b33      	ldr	r3, [pc, #204]	; (2a894 <_spi_set_config+0x208>)
   2a7c6:	4798      	blx	r3
   2a7c8:	0003      	movs	r3, r0
   2a7ca:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   2a7cc:	2323      	movs	r3, #35	; 0x23
   2a7ce:	18fb      	adds	r3, r7, r3
   2a7d0:	781b      	ldrb	r3, [r3, #0]
   2a7d2:	2b00      	cmp	r3, #0
   2a7d4:	d001      	beq.n	2a7da <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   2a7d6:	2317      	movs	r3, #23
   2a7d8:	e04e      	b.n	2a878 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   2a7da:	230a      	movs	r3, #10
   2a7dc:	18fb      	adds	r3, r7, r3
   2a7de:	881b      	ldrh	r3, [r3, #0]
   2a7e0:	b2da      	uxtb	r2, r3
   2a7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a7e4:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   2a7e6:	683b      	ldr	r3, [r7, #0]
   2a7e8:	685b      	ldr	r3, [r3, #4]
   2a7ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a7ec:	4313      	orrs	r3, r2
   2a7ee:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   2a7f0:	683b      	ldr	r3, [r7, #0]
   2a7f2:	689b      	ldr	r3, [r3, #8]
   2a7f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a7f6:	4313      	orrs	r3, r2
   2a7f8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2a7fa:	683b      	ldr	r3, [r7, #0]
   2a7fc:	68db      	ldr	r3, [r3, #12]
   2a7fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a800:	4313      	orrs	r3, r2
   2a802:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   2a804:	683b      	ldr	r3, [r7, #0]
   2a806:	7c1b      	ldrb	r3, [r3, #16]
   2a808:	001a      	movs	r2, r3
   2a80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a80c:	4313      	orrs	r3, r2
   2a80e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2a810:	683b      	ldr	r3, [r7, #0]
   2a812:	7c5b      	ldrb	r3, [r3, #17]
   2a814:	2b00      	cmp	r3, #0
   2a816:	d103      	bne.n	2a820 <_spi_set_config+0x194>
   2a818:	4b1f      	ldr	r3, [pc, #124]	; (2a898 <_spi_set_config+0x20c>)
   2a81a:	4798      	blx	r3
   2a81c:	1e03      	subs	r3, r0, #0
   2a81e:	d003      	beq.n	2a828 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   2a820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a822:	2280      	movs	r2, #128	; 0x80
   2a824:	4313      	orrs	r3, r2
   2a826:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   2a828:	683b      	ldr	r3, [r7, #0]
   2a82a:	7c9b      	ldrb	r3, [r3, #18]
   2a82c:	2b00      	cmp	r3, #0
   2a82e:	d004      	beq.n	2a83a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   2a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a832:	2280      	movs	r2, #128	; 0x80
   2a834:	0292      	lsls	r2, r2, #10
   2a836:	4313      	orrs	r3, r2
   2a838:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2a83a:	683b      	ldr	r3, [r7, #0]
   2a83c:	7cdb      	ldrb	r3, [r3, #19]
   2a83e:	2b00      	cmp	r3, #0
   2a840:	d004      	beq.n	2a84c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   2a842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a844:	2280      	movs	r2, #128	; 0x80
   2a846:	0092      	lsls	r2, r2, #2
   2a848:	4313      	orrs	r3, r2
   2a84a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2a84c:	683b      	ldr	r3, [r7, #0]
   2a84e:	7d1b      	ldrb	r3, [r3, #20]
   2a850:	2b00      	cmp	r3, #0
   2a852:	d004      	beq.n	2a85e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   2a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a856:	2280      	movs	r2, #128	; 0x80
   2a858:	0192      	lsls	r2, r2, #6
   2a85a:	4313      	orrs	r3, r2
   2a85c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2a85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a860:	681a      	ldr	r2, [r3, #0]
   2a862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a864:	431a      	orrs	r2, r3
   2a866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a868:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2a86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a86c:	685a      	ldr	r2, [r3, #4]
   2a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a870:	431a      	orrs	r2, r3
   2a872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a874:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   2a876:	2300      	movs	r3, #0
}
   2a878:	0018      	movs	r0, r3
   2a87a:	46bd      	mov	sp, r7
   2a87c:	b013      	add	sp, #76	; 0x4c
   2a87e:	bd90      	pop	{r4, r7, pc}
   2a880:	0002a1c1 	.word	0x0002a1c1
   2a884:	00029e61 	.word	0x00029e61
   2a888:	0002cc0d 	.word	0x0002cc0d
   2a88c:	0002a01d 	.word	0x0002a01d
   2a890:	0002c9d1 	.word	0x0002c9d1
   2a894:	00029b97 	.word	0x00029b97
   2a898:	0002a335 	.word	0x0002a335

0002a89c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   2a89c:	b590      	push	{r4, r7, lr}
   2a89e:	b08b      	sub	sp, #44	; 0x2c
   2a8a0:	af00      	add	r7, sp, #0
   2a8a2:	60f8      	str	r0, [r7, #12]
   2a8a4:	60b9      	str	r1, [r7, #8]
   2a8a6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   2a8a8:	68fb      	ldr	r3, [r7, #12]
   2a8aa:	68ba      	ldr	r2, [r7, #8]
   2a8ac:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a8ae:	68fb      	ldr	r3, [r7, #12]
   2a8b0:	681b      	ldr	r3, [r3, #0]
   2a8b2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   2a8b4:	6a3b      	ldr	r3, [r7, #32]
   2a8b6:	681b      	ldr	r3, [r3, #0]
   2a8b8:	2202      	movs	r2, #2
   2a8ba:	4013      	ands	r3, r2
   2a8bc:	d001      	beq.n	2a8c2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   2a8be:	231c      	movs	r3, #28
   2a8c0:	e09c      	b.n	2a9fc <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   2a8c2:	6a3b      	ldr	r3, [r7, #32]
   2a8c4:	681b      	ldr	r3, [r3, #0]
   2a8c6:	2201      	movs	r2, #1
   2a8c8:	4013      	ands	r3, r2
   2a8ca:	d001      	beq.n	2a8d0 <spi_init+0x34>
		return STATUS_BUSY;
   2a8cc:	2305      	movs	r3, #5
   2a8ce:	e095      	b.n	2a9fc <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2a8d0:	68fb      	ldr	r3, [r7, #12]
   2a8d2:	681b      	ldr	r3, [r3, #0]
   2a8d4:	0018      	movs	r0, r3
   2a8d6:	4b4b      	ldr	r3, [pc, #300]	; (2aa04 <spi_init+0x168>)
   2a8d8:	4798      	blx	r3
   2a8da:	0003      	movs	r3, r0
   2a8dc:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2a8de:	69fb      	ldr	r3, [r7, #28]
   2a8e0:	3302      	adds	r3, #2
   2a8e2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2a8e4:	69fb      	ldr	r3, [r7, #28]
   2a8e6:	3314      	adds	r3, #20
   2a8e8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2a8ea:	2201      	movs	r2, #1
   2a8ec:	69bb      	ldr	r3, [r7, #24]
   2a8ee:	409a      	lsls	r2, r3
   2a8f0:	0013      	movs	r3, r2
   2a8f2:	0019      	movs	r1, r3
   2a8f4:	2002      	movs	r0, #2
   2a8f6:	4b44      	ldr	r3, [pc, #272]	; (2aa08 <spi_init+0x16c>)
   2a8f8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2a8fa:	2310      	movs	r3, #16
   2a8fc:	18fb      	adds	r3, r7, r3
   2a8fe:	0018      	movs	r0, r3
   2a900:	4b42      	ldr	r3, [pc, #264]	; (2aa0c <spi_init+0x170>)
   2a902:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2a904:	687b      	ldr	r3, [r7, #4]
   2a906:	2224      	movs	r2, #36	; 0x24
   2a908:	5c9a      	ldrb	r2, [r3, r2]
   2a90a:	2310      	movs	r3, #16
   2a90c:	18fb      	adds	r3, r7, r3
   2a90e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2a910:	697b      	ldr	r3, [r7, #20]
   2a912:	b2db      	uxtb	r3, r3
   2a914:	2210      	movs	r2, #16
   2a916:	18ba      	adds	r2, r7, r2
   2a918:	0011      	movs	r1, r2
   2a91a:	0018      	movs	r0, r3
   2a91c:	4b3c      	ldr	r3, [pc, #240]	; (2aa10 <spi_init+0x174>)
   2a91e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2a920:	697b      	ldr	r3, [r7, #20]
   2a922:	b2db      	uxtb	r3, r3
   2a924:	0018      	movs	r0, r3
   2a926:	4b3b      	ldr	r3, [pc, #236]	; (2aa14 <spi_init+0x178>)
   2a928:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2a92a:	687b      	ldr	r3, [r7, #4]
   2a92c:	2224      	movs	r2, #36	; 0x24
   2a92e:	5c9b      	ldrb	r3, [r3, r2]
   2a930:	2100      	movs	r1, #0
   2a932:	0018      	movs	r0, r3
   2a934:	4b38      	ldr	r3, [pc, #224]	; (2aa18 <spi_init+0x17c>)
   2a936:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   2a938:	687b      	ldr	r3, [r7, #4]
   2a93a:	781b      	ldrb	r3, [r3, #0]
   2a93c:	2b01      	cmp	r3, #1
   2a93e:	d105      	bne.n	2a94c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   2a940:	6a3b      	ldr	r3, [r7, #32]
   2a942:	681b      	ldr	r3, [r3, #0]
   2a944:	220c      	movs	r2, #12
   2a946:	431a      	orrs	r2, r3
   2a948:	6a3b      	ldr	r3, [r7, #32]
   2a94a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2a94c:	2327      	movs	r3, #39	; 0x27
   2a94e:	18fb      	adds	r3, r7, r3
   2a950:	2200      	movs	r2, #0
   2a952:	701a      	strb	r2, [r3, #0]
   2a954:	e010      	b.n	2a978 <spi_init+0xdc>
		module->callback[i]        = NULL;
   2a956:	2327      	movs	r3, #39	; 0x27
   2a958:	18fb      	adds	r3, r7, r3
   2a95a:	781b      	ldrb	r3, [r3, #0]
   2a95c:	68fa      	ldr	r2, [r7, #12]
   2a95e:	3302      	adds	r3, #2
   2a960:	009b      	lsls	r3, r3, #2
   2a962:	18d3      	adds	r3, r2, r3
   2a964:	3304      	adds	r3, #4
   2a966:	2200      	movs	r2, #0
   2a968:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2a96a:	2327      	movs	r3, #39	; 0x27
   2a96c:	18fb      	adds	r3, r7, r3
   2a96e:	781a      	ldrb	r2, [r3, #0]
   2a970:	2327      	movs	r3, #39	; 0x27
   2a972:	18fb      	adds	r3, r7, r3
   2a974:	3201      	adds	r2, #1
   2a976:	701a      	strb	r2, [r3, #0]
   2a978:	2327      	movs	r3, #39	; 0x27
   2a97a:	18fb      	adds	r3, r7, r3
   2a97c:	781b      	ldrb	r3, [r3, #0]
   2a97e:	2b06      	cmp	r3, #6
   2a980:	d9e9      	bls.n	2a956 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   2a982:	68fb      	ldr	r3, [r7, #12]
   2a984:	2200      	movs	r2, #0
   2a986:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   2a988:	68fb      	ldr	r3, [r7, #12]
   2a98a:	2200      	movs	r2, #0
   2a98c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   2a98e:	68fb      	ldr	r3, [r7, #12]
   2a990:	2200      	movs	r2, #0
   2a992:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   2a994:	68fb      	ldr	r3, [r7, #12]
   2a996:	2200      	movs	r2, #0
   2a998:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   2a99a:	68fb      	ldr	r3, [r7, #12]
   2a99c:	2236      	movs	r2, #54	; 0x36
   2a99e:	2100      	movs	r1, #0
   2a9a0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   2a9a2:	68fb      	ldr	r3, [r7, #12]
   2a9a4:	2237      	movs	r2, #55	; 0x37
   2a9a6:	2100      	movs	r1, #0
   2a9a8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   2a9aa:	68fb      	ldr	r3, [r7, #12]
   2a9ac:	2238      	movs	r2, #56	; 0x38
   2a9ae:	2100      	movs	r1, #0
   2a9b0:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   2a9b2:	68fb      	ldr	r3, [r7, #12]
   2a9b4:	2203      	movs	r2, #3
   2a9b6:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   2a9b8:	68fb      	ldr	r3, [r7, #12]
   2a9ba:	2200      	movs	r2, #0
   2a9bc:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   2a9be:	68fb      	ldr	r3, [r7, #12]
   2a9c0:	681b      	ldr	r3, [r3, #0]
   2a9c2:	2213      	movs	r2, #19
   2a9c4:	18bc      	adds	r4, r7, r2
   2a9c6:	0018      	movs	r0, r3
   2a9c8:	4b0e      	ldr	r3, [pc, #56]	; (2aa04 <spi_init+0x168>)
   2a9ca:	4798      	blx	r3
   2a9cc:	0003      	movs	r3, r0
   2a9ce:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   2a9d0:	4a12      	ldr	r2, [pc, #72]	; (2aa1c <spi_init+0x180>)
   2a9d2:	2313      	movs	r3, #19
   2a9d4:	18fb      	adds	r3, r7, r3
   2a9d6:	781b      	ldrb	r3, [r3, #0]
   2a9d8:	0011      	movs	r1, r2
   2a9da:	0018      	movs	r0, r3
   2a9dc:	4b10      	ldr	r3, [pc, #64]	; (2aa20 <spi_init+0x184>)
   2a9de:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2a9e0:	2313      	movs	r3, #19
   2a9e2:	18fb      	adds	r3, r7, r3
   2a9e4:	781a      	ldrb	r2, [r3, #0]
   2a9e6:	4b0f      	ldr	r3, [pc, #60]	; (2aa24 <spi_init+0x188>)
   2a9e8:	0092      	lsls	r2, r2, #2
   2a9ea:	68f9      	ldr	r1, [r7, #12]
   2a9ec:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2a9ee:	687a      	ldr	r2, [r7, #4]
   2a9f0:	68fb      	ldr	r3, [r7, #12]
   2a9f2:	0011      	movs	r1, r2
   2a9f4:	0018      	movs	r0, r3
   2a9f6:	4b0c      	ldr	r3, [pc, #48]	; (2aa28 <spi_init+0x18c>)
   2a9f8:	4798      	blx	r3
   2a9fa:	0003      	movs	r3, r0
}
   2a9fc:	0018      	movs	r0, r3
   2a9fe:	46bd      	mov	sp, r7
   2aa00:	b00b      	add	sp, #44	; 0x2c
   2aa02:	bd90      	pop	{r4, r7, pc}
   2aa04:	0002a01d 	.word	0x0002a01d
   2aa08:	0002a2d9 	.word	0x0002a2d9
   2aa0c:	0002a2c1 	.word	0x0002a2c1
   2aa10:	0002c8ad 	.word	0x0002c8ad
   2aa14:	0002c8f1 	.word	0x0002c8f1
   2aa18:	00029dd5 	.word	0x00029dd5
   2aa1c:	0002aef5 	.word	0x0002aef5
   2aa20:	0002a081 	.word	0x0002a081
   2aa24:	20005b90 	.word	0x20005b90
   2aa28:	0002a68d 	.word	0x0002a68d

0002aa2c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   2aa2c:	b590      	push	{r4, r7, lr}
   2aa2e:	b087      	sub	sp, #28
   2aa30:	af00      	add	r7, sp, #0
   2aa32:	60f8      	str	r0, [r7, #12]
   2aa34:	60b9      	str	r1, [r7, #8]
   2aa36:	0019      	movs	r1, r3
   2aa38:	1dbb      	adds	r3, r7, #6
   2aa3a:	801a      	strh	r2, [r3, #0]
   2aa3c:	1d3b      	adds	r3, r7, #4
   2aa3e:	1c0a      	adds	r2, r1, #0
   2aa40:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2aa42:	68fb      	ldr	r3, [r7, #12]
   2aa44:	2238      	movs	r2, #56	; 0x38
   2aa46:	5c9b      	ldrb	r3, [r3, r2]
   2aa48:	b2db      	uxtb	r3, r3
   2aa4a:	2b05      	cmp	r3, #5
   2aa4c:	d101      	bne.n	2aa52 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2aa4e:	2305      	movs	r3, #5
   2aa50:	e07a      	b.n	2ab48 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   2aa52:	1dbb      	adds	r3, r7, #6
   2aa54:	881b      	ldrh	r3, [r3, #0]
   2aa56:	2b00      	cmp	r3, #0
   2aa58:	d101      	bne.n	2aa5e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   2aa5a:	2317      	movs	r3, #23
   2aa5c:	e074      	b.n	2ab48 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   2aa5e:	68fb      	ldr	r3, [r7, #12]
   2aa60:	79db      	ldrb	r3, [r3, #7]
   2aa62:	2201      	movs	r2, #1
   2aa64:	4053      	eors	r3, r2
   2aa66:	b2db      	uxtb	r3, r3
   2aa68:	2b00      	cmp	r3, #0
   2aa6a:	d001      	beq.n	2aa70 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   2aa6c:	231c      	movs	r3, #28
   2aa6e:	e06b      	b.n	2ab48 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   2aa70:	2316      	movs	r3, #22
   2aa72:	18fb      	adds	r3, r7, r3
   2aa74:	2200      	movs	r2, #0
   2aa76:	801a      	strh	r2, [r3, #0]

	while (length--) {
   2aa78:	e05e      	b.n	2ab38 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   2aa7a:	68fb      	ldr	r3, [r7, #12]
   2aa7c:	795b      	ldrb	r3, [r3, #5]
   2aa7e:	2b01      	cmp	r3, #1
   2aa80:	d112      	bne.n	2aaa8 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   2aa82:	46c0      	nop			; (mov r8, r8)
   2aa84:	68fb      	ldr	r3, [r7, #12]
   2aa86:	0018      	movs	r0, r3
   2aa88:	4b31      	ldr	r3, [pc, #196]	; (2ab50 <spi_read_buffer_wait+0x124>)
   2aa8a:	4798      	blx	r3
   2aa8c:	0003      	movs	r3, r0
   2aa8e:	001a      	movs	r2, r3
   2aa90:	2301      	movs	r3, #1
   2aa92:	4053      	eors	r3, r2
   2aa94:	b2db      	uxtb	r3, r3
   2aa96:	2b00      	cmp	r3, #0
   2aa98:	d1f4      	bne.n	2aa84 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   2aa9a:	1d3b      	adds	r3, r7, #4
   2aa9c:	881a      	ldrh	r2, [r3, #0]
   2aa9e:	68fb      	ldr	r3, [r7, #12]
   2aaa0:	0011      	movs	r1, r2
   2aaa2:	0018      	movs	r0, r3
   2aaa4:	4b2b      	ldr	r3, [pc, #172]	; (2ab54 <spi_read_buffer_wait+0x128>)
   2aaa6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   2aaa8:	46c0      	nop			; (mov r8, r8)
   2aaaa:	68fb      	ldr	r3, [r7, #12]
   2aaac:	0018      	movs	r0, r3
   2aaae:	4b2a      	ldr	r3, [pc, #168]	; (2ab58 <spi_read_buffer_wait+0x12c>)
   2aab0:	4798      	blx	r3
   2aab2:	0003      	movs	r3, r0
   2aab4:	001a      	movs	r2, r3
   2aab6:	2301      	movs	r3, #1
   2aab8:	4053      	eors	r3, r2
   2aaba:	b2db      	uxtb	r3, r3
   2aabc:	2b00      	cmp	r3, #0
   2aabe:	d1f4      	bne.n	2aaaa <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   2aac0:	2312      	movs	r3, #18
   2aac2:	18fb      	adds	r3, r7, r3
   2aac4:	2200      	movs	r2, #0
   2aac6:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   2aac8:	2315      	movs	r3, #21
   2aaca:	18fc      	adds	r4, r7, r3
   2aacc:	2312      	movs	r3, #18
   2aace:	18fa      	adds	r2, r7, r3
   2aad0:	68fb      	ldr	r3, [r7, #12]
   2aad2:	0011      	movs	r1, r2
   2aad4:	0018      	movs	r0, r3
   2aad6:	4b21      	ldr	r3, [pc, #132]	; (2ab5c <spi_read_buffer_wait+0x130>)
   2aad8:	4798      	blx	r3
   2aada:	0003      	movs	r3, r0
   2aadc:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2aade:	2315      	movs	r3, #21
   2aae0:	18fb      	adds	r3, r7, r3
   2aae2:	781b      	ldrb	r3, [r3, #0]
   2aae4:	2b00      	cmp	r3, #0
   2aae6:	d003      	beq.n	2aaf0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   2aae8:	2315      	movs	r3, #21
   2aaea:	18fb      	adds	r3, r7, r3
   2aaec:	781b      	ldrb	r3, [r3, #0]
   2aaee:	e02b      	b.n	2ab48 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   2aaf0:	2316      	movs	r3, #22
   2aaf2:	18fb      	adds	r3, r7, r3
   2aaf4:	881b      	ldrh	r3, [r3, #0]
   2aaf6:	2216      	movs	r2, #22
   2aaf8:	18ba      	adds	r2, r7, r2
   2aafa:	1c59      	adds	r1, r3, #1
   2aafc:	8011      	strh	r1, [r2, #0]
   2aafe:	001a      	movs	r2, r3
   2ab00:	68bb      	ldr	r3, [r7, #8]
   2ab02:	189b      	adds	r3, r3, r2
   2ab04:	2212      	movs	r2, #18
   2ab06:	18ba      	adds	r2, r7, r2
   2ab08:	8812      	ldrh	r2, [r2, #0]
   2ab0a:	b2d2      	uxtb	r2, r2
   2ab0c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2ab0e:	68fb      	ldr	r3, [r7, #12]
   2ab10:	799b      	ldrb	r3, [r3, #6]
   2ab12:	2b01      	cmp	r3, #1
   2ab14:	d110      	bne.n	2ab38 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   2ab16:	2316      	movs	r3, #22
   2ab18:	18fb      	adds	r3, r7, r3
   2ab1a:	881b      	ldrh	r3, [r3, #0]
   2ab1c:	2216      	movs	r2, #22
   2ab1e:	18ba      	adds	r2, r7, r2
   2ab20:	1c59      	adds	r1, r3, #1
   2ab22:	8011      	strh	r1, [r2, #0]
   2ab24:	001a      	movs	r2, r3
   2ab26:	68bb      	ldr	r3, [r7, #8]
   2ab28:	189b      	adds	r3, r3, r2
   2ab2a:	2212      	movs	r2, #18
   2ab2c:	18ba      	adds	r2, r7, r2
   2ab2e:	8812      	ldrh	r2, [r2, #0]
   2ab30:	0a12      	lsrs	r2, r2, #8
   2ab32:	b292      	uxth	r2, r2
   2ab34:	b2d2      	uxtb	r2, r2
   2ab36:	701a      	strb	r2, [r3, #0]
	while (length--) {
   2ab38:	1dbb      	adds	r3, r7, #6
   2ab3a:	881b      	ldrh	r3, [r3, #0]
   2ab3c:	1dba      	adds	r2, r7, #6
   2ab3e:	1e59      	subs	r1, r3, #1
   2ab40:	8011      	strh	r1, [r2, #0]
   2ab42:	2b00      	cmp	r3, #0
   2ab44:	d199      	bne.n	2aa7a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   2ab46:	2300      	movs	r3, #0
}
   2ab48:	0018      	movs	r0, r3
   2ab4a:	46bd      	mov	sp, r7
   2ab4c:	b007      	add	sp, #28
   2ab4e:	bd90      	pop	{r4, r7, pc}
   2ab50:	0002a4a5 	.word	0x0002a4a5
   2ab54:	0002a4f5 	.word	0x0002a4f5
   2ab58:	0002a4cd 	.word	0x0002a4cd
   2ab5c:	0002a53d 	.word	0x0002a53d

0002ab60 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   2ab60:	b580      	push	{r7, lr}
   2ab62:	b086      	sub	sp, #24
   2ab64:	af00      	add	r7, sp, #0
   2ab66:	60f8      	str	r0, [r7, #12]
   2ab68:	60b9      	str	r1, [r7, #8]
   2ab6a:	1dfb      	adds	r3, r7, #7
   2ab6c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   2ab6e:	68fb      	ldr	r3, [r7, #12]
   2ab70:	795b      	ldrb	r3, [r3, #5]
   2ab72:	2b01      	cmp	r3, #1
   2ab74:	d001      	beq.n	2ab7a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   2ab76:	2315      	movs	r3, #21
   2ab78:	e05c      	b.n	2ac34 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   2ab7a:	68fb      	ldr	r3, [r7, #12]
   2ab7c:	7a1b      	ldrb	r3, [r3, #8]
   2ab7e:	2201      	movs	r2, #1
   2ab80:	4053      	eors	r3, r2
   2ab82:	b2db      	uxtb	r3, r3
   2ab84:	2b00      	cmp	r3, #0
   2ab86:	d054      	beq.n	2ac32 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   2ab88:	1dfb      	adds	r3, r7, #7
   2ab8a:	781b      	ldrb	r3, [r3, #0]
   2ab8c:	2b00      	cmp	r3, #0
   2ab8e:	d04a      	beq.n	2ac26 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   2ab90:	68bb      	ldr	r3, [r7, #8]
   2ab92:	785b      	ldrb	r3, [r3, #1]
   2ab94:	2b00      	cmp	r3, #0
   2ab96:	d03f      	beq.n	2ac18 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   2ab98:	68fb      	ldr	r3, [r7, #12]
   2ab9a:	0018      	movs	r0, r3
   2ab9c:	4b27      	ldr	r3, [pc, #156]	; (2ac3c <spi_select_slave+0xdc>)
   2ab9e:	4798      	blx	r3
   2aba0:	0003      	movs	r3, r0
   2aba2:	001a      	movs	r2, r3
   2aba4:	2301      	movs	r3, #1
   2aba6:	4053      	eors	r3, r2
   2aba8:	b2db      	uxtb	r3, r3
   2abaa:	2b00      	cmp	r3, #0
   2abac:	d007      	beq.n	2abbe <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   2abae:	68bb      	ldr	r3, [r7, #8]
   2abb0:	781b      	ldrb	r3, [r3, #0]
   2abb2:	2101      	movs	r1, #1
   2abb4:	0018      	movs	r0, r3
   2abb6:	4b22      	ldr	r3, [pc, #136]	; (2ac40 <spi_select_slave+0xe0>)
   2abb8:	4798      	blx	r3
					return STATUS_BUSY;
   2abba:	2305      	movs	r3, #5
   2abbc:	e03a      	b.n	2ac34 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2abbe:	68bb      	ldr	r3, [r7, #8]
   2abc0:	781b      	ldrb	r3, [r3, #0]
   2abc2:	2100      	movs	r1, #0
   2abc4:	0018      	movs	r0, r3
   2abc6:	4b1e      	ldr	r3, [pc, #120]	; (2ac40 <spi_select_slave+0xe0>)
   2abc8:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2abca:	68bb      	ldr	r3, [r7, #8]
   2abcc:	789b      	ldrb	r3, [r3, #2]
   2abce:	b29a      	uxth	r2, r3
   2abd0:	68fb      	ldr	r3, [r7, #12]
   2abd2:	0011      	movs	r1, r2
   2abd4:	0018      	movs	r0, r3
   2abd6:	4b1b      	ldr	r3, [pc, #108]	; (2ac44 <spi_select_slave+0xe4>)
   2abd8:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2abda:	68fb      	ldr	r3, [r7, #12]
   2abdc:	79db      	ldrb	r3, [r3, #7]
   2abde:	2201      	movs	r2, #1
   2abe0:	4053      	eors	r3, r2
   2abe2:	b2db      	uxtb	r3, r3
   2abe4:	2b00      	cmp	r3, #0
   2abe6:	d024      	beq.n	2ac32 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   2abe8:	46c0      	nop			; (mov r8, r8)
   2abea:	68fb      	ldr	r3, [r7, #12]
   2abec:	0018      	movs	r0, r3
   2abee:	4b16      	ldr	r3, [pc, #88]	; (2ac48 <spi_select_slave+0xe8>)
   2abf0:	4798      	blx	r3
   2abf2:	0003      	movs	r3, r0
   2abf4:	001a      	movs	r2, r3
   2abf6:	2301      	movs	r3, #1
   2abf8:	4053      	eors	r3, r2
   2abfa:	b2db      	uxtb	r3, r3
   2abfc:	2b00      	cmp	r3, #0
   2abfe:	d1f4      	bne.n	2abea <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   2ac00:	2316      	movs	r3, #22
   2ac02:	18fb      	adds	r3, r7, r3
   2ac04:	2200      	movs	r2, #0
   2ac06:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   2ac08:	2316      	movs	r3, #22
   2ac0a:	18fa      	adds	r2, r7, r3
   2ac0c:	68fb      	ldr	r3, [r7, #12]
   2ac0e:	0011      	movs	r1, r2
   2ac10:	0018      	movs	r0, r3
   2ac12:	4b0e      	ldr	r3, [pc, #56]	; (2ac4c <spi_select_slave+0xec>)
   2ac14:	4798      	blx	r3
   2ac16:	e00c      	b.n	2ac32 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2ac18:	68bb      	ldr	r3, [r7, #8]
   2ac1a:	781b      	ldrb	r3, [r3, #0]
   2ac1c:	2100      	movs	r1, #0
   2ac1e:	0018      	movs	r0, r3
   2ac20:	4b07      	ldr	r3, [pc, #28]	; (2ac40 <spi_select_slave+0xe0>)
   2ac22:	4798      	blx	r3
   2ac24:	e005      	b.n	2ac32 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   2ac26:	68bb      	ldr	r3, [r7, #8]
   2ac28:	781b      	ldrb	r3, [r3, #0]
   2ac2a:	2101      	movs	r1, #1
   2ac2c:	0018      	movs	r0, r3
   2ac2e:	4b04      	ldr	r3, [pc, #16]	; (2ac40 <spi_select_slave+0xe0>)
   2ac30:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   2ac32:	2300      	movs	r3, #0
}
   2ac34:	0018      	movs	r0, r3
   2ac36:	46bd      	mov	sp, r7
   2ac38:	b006      	add	sp, #24
   2ac3a:	bd80      	pop	{r7, pc}
   2ac3c:	0002a4a5 	.word	0x0002a4a5
   2ac40:	0002a26d 	.word	0x0002a26d
   2ac44:	0002a4f5 	.word	0x0002a4f5
   2ac48:	0002a4cd 	.word	0x0002a4cd
   2ac4c:	0002a53d 	.word	0x0002a53d

0002ac50 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   2ac50:	b580      	push	{r7, lr}
   2ac52:	b086      	sub	sp, #24
   2ac54:	af00      	add	r7, sp, #0
   2ac56:	60f8      	str	r0, [r7, #12]
   2ac58:	60b9      	str	r1, [r7, #8]
   2ac5a:	1dbb      	adds	r3, r7, #6
   2ac5c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2ac5e:	68fb      	ldr	r3, [r7, #12]
   2ac60:	2238      	movs	r2, #56	; 0x38
   2ac62:	5c9b      	ldrb	r3, [r3, r2]
   2ac64:	b2db      	uxtb	r3, r3
   2ac66:	2b05      	cmp	r3, #5
   2ac68:	d101      	bne.n	2ac6e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2ac6a:	2305      	movs	r3, #5
   2ac6c:	e087      	b.n	2ad7e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   2ac6e:	1dbb      	adds	r3, r7, #6
   2ac70:	881b      	ldrh	r3, [r3, #0]
   2ac72:	2b00      	cmp	r3, #0
   2ac74:	d101      	bne.n	2ac7a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   2ac76:	2317      	movs	r3, #23
   2ac78:	e081      	b.n	2ad7e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   2ac7a:	2316      	movs	r3, #22
   2ac7c:	18fb      	adds	r3, r7, r3
   2ac7e:	2200      	movs	r2, #0
   2ac80:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   2ac82:	2314      	movs	r3, #20
   2ac84:	18fb      	adds	r3, r7, r3
   2ac86:	1dba      	adds	r2, r7, #6
   2ac88:	8812      	ldrh	r2, [r2, #0]
   2ac8a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   2ac8c:	e05f      	b.n	2ad4e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   2ac8e:	46c0      	nop			; (mov r8, r8)
   2ac90:	68fb      	ldr	r3, [r7, #12]
   2ac92:	0018      	movs	r0, r3
   2ac94:	4b3c      	ldr	r3, [pc, #240]	; (2ad88 <spi_write_buffer_wait+0x138>)
   2ac96:	4798      	blx	r3
   2ac98:	0003      	movs	r3, r0
   2ac9a:	001a      	movs	r2, r3
   2ac9c:	2301      	movs	r3, #1
   2ac9e:	4053      	eors	r3, r2
   2aca0:	b2db      	uxtb	r3, r3
   2aca2:	2b00      	cmp	r3, #0
   2aca4:	d1f4      	bne.n	2ac90 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   2aca6:	2316      	movs	r3, #22
   2aca8:	18fb      	adds	r3, r7, r3
   2acaa:	881b      	ldrh	r3, [r3, #0]
   2acac:	2216      	movs	r2, #22
   2acae:	18ba      	adds	r2, r7, r2
   2acb0:	1c59      	adds	r1, r3, #1
   2acb2:	8011      	strh	r1, [r2, #0]
   2acb4:	001a      	movs	r2, r3
   2acb6:	68bb      	ldr	r3, [r7, #8]
   2acb8:	189b      	adds	r3, r3, r2
   2acba:	781a      	ldrb	r2, [r3, #0]
   2acbc:	2312      	movs	r3, #18
   2acbe:	18fb      	adds	r3, r7, r3
   2acc0:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2acc2:	68fb      	ldr	r3, [r7, #12]
   2acc4:	799b      	ldrb	r3, [r3, #6]
   2acc6:	2b01      	cmp	r3, #1
   2acc8:	d115      	bne.n	2acf6 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2acca:	2316      	movs	r3, #22
   2accc:	18fb      	adds	r3, r7, r3
   2acce:	881b      	ldrh	r3, [r3, #0]
   2acd0:	2216      	movs	r2, #22
   2acd2:	18ba      	adds	r2, r7, r2
   2acd4:	1c59      	adds	r1, r3, #1
   2acd6:	8011      	strh	r1, [r2, #0]
   2acd8:	001a      	movs	r2, r3
   2acda:	68bb      	ldr	r3, [r7, #8]
   2acdc:	189b      	adds	r3, r3, r2
   2acde:	781b      	ldrb	r3, [r3, #0]
   2ace0:	021b      	lsls	r3, r3, #8
   2ace2:	b21a      	sxth	r2, r3
   2ace4:	2312      	movs	r3, #18
   2ace6:	18fb      	adds	r3, r7, r3
   2ace8:	2100      	movs	r1, #0
   2acea:	5e5b      	ldrsh	r3, [r3, r1]
   2acec:	4313      	orrs	r3, r2
   2acee:	b21a      	sxth	r2, r3
   2acf0:	2312      	movs	r3, #18
   2acf2:	18fb      	adds	r3, r7, r3
   2acf4:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   2acf6:	2312      	movs	r3, #18
   2acf8:	18fb      	adds	r3, r7, r3
   2acfa:	881a      	ldrh	r2, [r3, #0]
   2acfc:	68fb      	ldr	r3, [r7, #12]
   2acfe:	0011      	movs	r1, r2
   2ad00:	0018      	movs	r0, r3
   2ad02:	4b22      	ldr	r3, [pc, #136]	; (2ad8c <spi_write_buffer_wait+0x13c>)
   2ad04:	4798      	blx	r3

		if (module->receiver_enabled) {
   2ad06:	68fb      	ldr	r3, [r7, #12]
   2ad08:	79db      	ldrb	r3, [r3, #7]
   2ad0a:	2214      	movs	r2, #20
   2ad0c:	18ba      	adds	r2, r7, r2
   2ad0e:	2114      	movs	r1, #20
   2ad10:	1879      	adds	r1, r7, r1
   2ad12:	8809      	ldrh	r1, [r1, #0]
   2ad14:	8011      	strh	r1, [r2, #0]
   2ad16:	2b00      	cmp	r3, #0
   2ad18:	d019      	beq.n	2ad4e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2ad1a:	46c0      	nop			; (mov r8, r8)
   2ad1c:	68fb      	ldr	r3, [r7, #12]
   2ad1e:	0018      	movs	r0, r3
   2ad20:	4b1b      	ldr	r3, [pc, #108]	; (2ad90 <spi_write_buffer_wait+0x140>)
   2ad22:	4798      	blx	r3
   2ad24:	0003      	movs	r3, r0
   2ad26:	001a      	movs	r2, r3
   2ad28:	2301      	movs	r3, #1
   2ad2a:	4053      	eors	r3, r2
   2ad2c:	b2db      	uxtb	r3, r3
   2ad2e:	2b00      	cmp	r3, #0
   2ad30:	d1f4      	bne.n	2ad1c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   2ad32:	2310      	movs	r3, #16
   2ad34:	18fa      	adds	r2, r7, r3
   2ad36:	68fb      	ldr	r3, [r7, #12]
   2ad38:	0011      	movs	r1, r2
   2ad3a:	0018      	movs	r0, r3
   2ad3c:	4b15      	ldr	r3, [pc, #84]	; (2ad94 <spi_write_buffer_wait+0x144>)
   2ad3e:	4798      	blx	r3
			flush_length--;
   2ad40:	2314      	movs	r3, #20
   2ad42:	18fb      	adds	r3, r7, r3
   2ad44:	881a      	ldrh	r2, [r3, #0]
   2ad46:	2314      	movs	r3, #20
   2ad48:	18fb      	adds	r3, r7, r3
   2ad4a:	3a01      	subs	r2, #1
   2ad4c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2ad4e:	1dbb      	adds	r3, r7, #6
   2ad50:	881b      	ldrh	r3, [r3, #0]
   2ad52:	1dba      	adds	r2, r7, #6
   2ad54:	1e59      	subs	r1, r3, #1
   2ad56:	8011      	strh	r1, [r2, #0]
   2ad58:	2b00      	cmp	r3, #0
   2ad5a:	d198      	bne.n	2ac8e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   2ad5c:	68fb      	ldr	r3, [r7, #12]
   2ad5e:	795b      	ldrb	r3, [r3, #5]
   2ad60:	2b01      	cmp	r3, #1
   2ad62:	d10b      	bne.n	2ad7c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   2ad64:	46c0      	nop			; (mov r8, r8)
   2ad66:	68fb      	ldr	r3, [r7, #12]
   2ad68:	0018      	movs	r0, r3
   2ad6a:	4b0b      	ldr	r3, [pc, #44]	; (2ad98 <spi_write_buffer_wait+0x148>)
   2ad6c:	4798      	blx	r3
   2ad6e:	0003      	movs	r3, r0
   2ad70:	001a      	movs	r2, r3
   2ad72:	2301      	movs	r3, #1
   2ad74:	4053      	eors	r3, r2
   2ad76:	b2db      	uxtb	r3, r3
   2ad78:	2b00      	cmp	r3, #0
   2ad7a:	d1f4      	bne.n	2ad66 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   2ad7c:	2300      	movs	r3, #0
}
   2ad7e:	0018      	movs	r0, r3
   2ad80:	46bd      	mov	sp, r7
   2ad82:	b006      	add	sp, #24
   2ad84:	bd80      	pop	{r7, pc}
   2ad86:	46c0      	nop			; (mov r8, r8)
   2ad88:	0002a4a5 	.word	0x0002a4a5
   2ad8c:	0002a4f5 	.word	0x0002a4f5
   2ad90:	0002a4cd 	.word	0x0002a4cd
   2ad94:	0002a53d 	.word	0x0002a53d
   2ad98:	0002a47d 	.word	0x0002a47d

0002ad9c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   2ad9c:	b580      	push	{r7, lr}
   2ad9e:	b084      	sub	sp, #16
   2ada0:	af00      	add	r7, sp, #0
   2ada2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2ada4:	687b      	ldr	r3, [r7, #4]
   2ada6:	681b      	ldr	r3, [r3, #0]
   2ada8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   2adaa:	687b      	ldr	r3, [r7, #4]
   2adac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2adae:	781b      	ldrb	r3, [r3, #0]
   2adb0:	b2da      	uxtb	r2, r3
   2adb2:	230e      	movs	r3, #14
   2adb4:	18fb      	adds	r3, r7, r3
   2adb6:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   2adb8:	687b      	ldr	r3, [r7, #4]
   2adba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2adbc:	1c5a      	adds	r2, r3, #1
   2adbe:	687b      	ldr	r3, [r7, #4]
   2adc0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2adc2:	687b      	ldr	r3, [r7, #4]
   2adc4:	799b      	ldrb	r3, [r3, #6]
   2adc6:	2b01      	cmp	r3, #1
   2adc8:	d113      	bne.n	2adf2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   2adca:	687b      	ldr	r3, [r7, #4]
   2adcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2adce:	781b      	ldrb	r3, [r3, #0]
   2add0:	b2db      	uxtb	r3, r3
   2add2:	021b      	lsls	r3, r3, #8
   2add4:	b21a      	sxth	r2, r3
   2add6:	230e      	movs	r3, #14
   2add8:	18fb      	adds	r3, r7, r3
   2adda:	2100      	movs	r1, #0
   2addc:	5e5b      	ldrsh	r3, [r3, r1]
   2adde:	4313      	orrs	r3, r2
   2ade0:	b21a      	sxth	r2, r3
   2ade2:	230e      	movs	r3, #14
   2ade4:	18fb      	adds	r3, r7, r3
   2ade6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   2ade8:	687b      	ldr	r3, [r7, #4]
   2adea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2adec:	1c5a      	adds	r2, r3, #1
   2adee:	687b      	ldr	r3, [r7, #4]
   2adf0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   2adf2:	230e      	movs	r3, #14
   2adf4:	18fb      	adds	r3, r7, r3
   2adf6:	881b      	ldrh	r3, [r3, #0]
   2adf8:	05db      	lsls	r3, r3, #23
   2adfa:	0dda      	lsrs	r2, r3, #23
   2adfc:	68bb      	ldr	r3, [r7, #8]
   2adfe:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   2ae00:	687b      	ldr	r3, [r7, #4]
   2ae02:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2ae04:	b29b      	uxth	r3, r3
   2ae06:	3b01      	subs	r3, #1
   2ae08:	b29a      	uxth	r2, r3
   2ae0a:	687b      	ldr	r3, [r7, #4]
   2ae0c:	869a      	strh	r2, [r3, #52]	; 0x34
}
   2ae0e:	46c0      	nop			; (mov r8, r8)
   2ae10:	46bd      	mov	sp, r7
   2ae12:	b004      	add	sp, #16
   2ae14:	bd80      	pop	{r7, pc}
	...

0002ae18 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   2ae18:	b580      	push	{r7, lr}
   2ae1a:	b084      	sub	sp, #16
   2ae1c:	af00      	add	r7, sp, #0
   2ae1e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2ae20:	687b      	ldr	r3, [r7, #4]
   2ae22:	681b      	ldr	r3, [r3, #0]
   2ae24:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   2ae26:	4b08      	ldr	r3, [pc, #32]	; (2ae48 <_spi_write_dummy+0x30>)
   2ae28:	881b      	ldrh	r3, [r3, #0]
   2ae2a:	001a      	movs	r2, r3
   2ae2c:	68fb      	ldr	r3, [r7, #12]
   2ae2e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   2ae30:	687b      	ldr	r3, [r7, #4]
   2ae32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2ae34:	b29b      	uxth	r3, r3
   2ae36:	3b01      	subs	r3, #1
   2ae38:	b29a      	uxth	r2, r3
   2ae3a:	687b      	ldr	r3, [r7, #4]
   2ae3c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2ae3e:	46c0      	nop			; (mov r8, r8)
   2ae40:	46bd      	mov	sp, r7
   2ae42:	b004      	add	sp, #16
   2ae44:	bd80      	pop	{r7, pc}
   2ae46:	46c0      	nop			; (mov r8, r8)
   2ae48:	20005ba8 	.word	0x20005ba8

0002ae4c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   2ae4c:	b580      	push	{r7, lr}
   2ae4e:	b084      	sub	sp, #16
   2ae50:	af00      	add	r7, sp, #0
   2ae52:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2ae54:	687b      	ldr	r3, [r7, #4]
   2ae56:	681b      	ldr	r3, [r3, #0]
   2ae58:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   2ae5a:	230a      	movs	r3, #10
   2ae5c:	18fb      	adds	r3, r7, r3
   2ae5e:	2200      	movs	r2, #0
   2ae60:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   2ae62:	68fb      	ldr	r3, [r7, #12]
   2ae64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ae66:	230a      	movs	r3, #10
   2ae68:	18fb      	adds	r3, r7, r3
   2ae6a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   2ae6c:	687b      	ldr	r3, [r7, #4]
   2ae6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2ae70:	b29b      	uxth	r3, r3
   2ae72:	3b01      	subs	r3, #1
   2ae74:	b29a      	uxth	r2, r3
   2ae76:	687b      	ldr	r3, [r7, #4]
   2ae78:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2ae7a:	46c0      	nop			; (mov r8, r8)
   2ae7c:	46bd      	mov	sp, r7
   2ae7e:	b004      	add	sp, #16
   2ae80:	bd80      	pop	{r7, pc}

0002ae82 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   2ae82:	b580      	push	{r7, lr}
   2ae84:	b084      	sub	sp, #16
   2ae86:	af00      	add	r7, sp, #0
   2ae88:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2ae8a:	687b      	ldr	r3, [r7, #4]
   2ae8c:	681b      	ldr	r3, [r3, #0]
   2ae8e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   2ae90:	68fb      	ldr	r3, [r7, #12]
   2ae92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ae94:	b29a      	uxth	r2, r3
   2ae96:	230a      	movs	r3, #10
   2ae98:	18fb      	adds	r3, r7, r3
   2ae9a:	05d2      	lsls	r2, r2, #23
   2ae9c:	0dd2      	lsrs	r2, r2, #23
   2ae9e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   2aea0:	687b      	ldr	r3, [r7, #4]
   2aea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2aea4:	220a      	movs	r2, #10
   2aea6:	18ba      	adds	r2, r7, r2
   2aea8:	8812      	ldrh	r2, [r2, #0]
   2aeaa:	b2d2      	uxtb	r2, r2
   2aeac:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   2aeae:	687b      	ldr	r3, [r7, #4]
   2aeb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2aeb2:	1c5a      	adds	r2, r3, #1
   2aeb4:	687b      	ldr	r3, [r7, #4]
   2aeb6:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2aeb8:	687b      	ldr	r3, [r7, #4]
   2aeba:	799b      	ldrb	r3, [r3, #6]
   2aebc:	2b01      	cmp	r3, #1
   2aebe:	d10d      	bne.n	2aedc <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   2aec0:	687b      	ldr	r3, [r7, #4]
   2aec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2aec4:	220a      	movs	r2, #10
   2aec6:	18ba      	adds	r2, r7, r2
   2aec8:	8812      	ldrh	r2, [r2, #0]
   2aeca:	0a12      	lsrs	r2, r2, #8
   2aecc:	b292      	uxth	r2, r2
   2aece:	b2d2      	uxtb	r2, r2
   2aed0:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   2aed2:	687b      	ldr	r3, [r7, #4]
   2aed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2aed6:	1c5a      	adds	r2, r3, #1
   2aed8:	687b      	ldr	r3, [r7, #4]
   2aeda:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   2aedc:	687b      	ldr	r3, [r7, #4]
   2aede:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2aee0:	b29b      	uxth	r3, r3
   2aee2:	3b01      	subs	r3, #1
   2aee4:	b29a      	uxth	r2, r3
   2aee6:	687b      	ldr	r3, [r7, #4]
   2aee8:	861a      	strh	r2, [r3, #48]	; 0x30
}
   2aeea:	46c0      	nop			; (mov r8, r8)
   2aeec:	46bd      	mov	sp, r7
   2aeee:	b004      	add	sp, #16
   2aef0:	bd80      	pop	{r7, pc}
	...

0002aef4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   2aef4:	b580      	push	{r7, lr}
   2aef6:	b086      	sub	sp, #24
   2aef8:	af00      	add	r7, sp, #0
   2aefa:	0002      	movs	r2, r0
   2aefc:	1dfb      	adds	r3, r7, #7
   2aefe:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   2af00:	1dfb      	adds	r3, r7, #7
   2af02:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   2af04:	4b96      	ldr	r3, [pc, #600]	; (2b160 <_spi_interrupt_handler+0x26c>)
   2af06:	0092      	lsls	r2, r2, #2
   2af08:	58d3      	ldr	r3, [r2, r3]
   2af0a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2af0c:	697b      	ldr	r3, [r7, #20]
   2af0e:	681b      	ldr	r3, [r3, #0]
   2af10:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   2af12:	697b      	ldr	r3, [r7, #20]
   2af14:	2237      	movs	r2, #55	; 0x37
   2af16:	5c9a      	ldrb	r2, [r3, r2]
   2af18:	697b      	ldr	r3, [r7, #20]
   2af1a:	2136      	movs	r1, #54	; 0x36
   2af1c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   2af1e:	230f      	movs	r3, #15
   2af20:	18fb      	adds	r3, r7, r3
   2af22:	400a      	ands	r2, r1
   2af24:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   2af26:	693b      	ldr	r3, [r7, #16]
   2af28:	7e1b      	ldrb	r3, [r3, #24]
   2af2a:	b2da      	uxtb	r2, r3
   2af2c:	230c      	movs	r3, #12
   2af2e:	18fb      	adds	r3, r7, r3
   2af30:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   2af32:	693b      	ldr	r3, [r7, #16]
   2af34:	7d9b      	ldrb	r3, [r3, #22]
   2af36:	b2db      	uxtb	r3, r3
   2af38:	b29a      	uxth	r2, r3
   2af3a:	230c      	movs	r3, #12
   2af3c:	18fb      	adds	r3, r7, r3
   2af3e:	210c      	movs	r1, #12
   2af40:	1879      	adds	r1, r7, r1
   2af42:	8809      	ldrh	r1, [r1, #0]
   2af44:	400a      	ands	r2, r1
   2af46:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   2af48:	230c      	movs	r3, #12
   2af4a:	18fb      	adds	r3, r7, r3
   2af4c:	881b      	ldrh	r3, [r3, #0]
   2af4e:	2201      	movs	r2, #1
   2af50:	4013      	ands	r3, r2
   2af52:	d038      	beq.n	2afc6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2af54:	697b      	ldr	r3, [r7, #20]
   2af56:	795b      	ldrb	r3, [r3, #5]
   2af58:	2b01      	cmp	r3, #1
   2af5a:	d110      	bne.n	2af7e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   2af5c:	697b      	ldr	r3, [r7, #20]
   2af5e:	7a5b      	ldrb	r3, [r3, #9]
   2af60:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2af62:	2b00      	cmp	r3, #0
   2af64:	d10b      	bne.n	2af7e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   2af66:	697b      	ldr	r3, [r7, #20]
   2af68:	0018      	movs	r0, r3
   2af6a:	4b7e      	ldr	r3, [pc, #504]	; (2b164 <_spi_interrupt_handler+0x270>)
   2af6c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2af6e:	697b      	ldr	r3, [r7, #20]
   2af70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2af72:	b29b      	uxth	r3, r3
   2af74:	2b00      	cmp	r3, #0
   2af76:	d102      	bne.n	2af7e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   2af78:	693b      	ldr	r3, [r7, #16]
   2af7a:	2201      	movs	r2, #1
   2af7c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2af7e:	697b      	ldr	r3, [r7, #20]
   2af80:	795b      	ldrb	r3, [r3, #5]
		if (0
   2af82:	2b01      	cmp	r3, #1
   2af84:	d11f      	bne.n	2afc6 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   2af86:	697b      	ldr	r3, [r7, #20]
   2af88:	7a5b      	ldrb	r3, [r3, #9]
   2af8a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   2af8c:	2b00      	cmp	r3, #0
   2af8e:	d01a      	beq.n	2afc6 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   2af90:	697b      	ldr	r3, [r7, #20]
   2af92:	0018      	movs	r0, r3
   2af94:	4b74      	ldr	r3, [pc, #464]	; (2b168 <_spi_interrupt_handler+0x274>)
   2af96:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   2af98:	697b      	ldr	r3, [r7, #20]
   2af9a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2af9c:	b29b      	uxth	r3, r3
   2af9e:	2b00      	cmp	r3, #0
   2afa0:	d111      	bne.n	2afc6 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   2afa2:	693b      	ldr	r3, [r7, #16]
   2afa4:	2201      	movs	r2, #1
   2afa6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   2afa8:	697b      	ldr	r3, [r7, #20]
   2afaa:	7a5b      	ldrb	r3, [r3, #9]
   2afac:	b2db      	uxtb	r3, r3
   2afae:	2b01      	cmp	r3, #1
   2afb0:	d109      	bne.n	2afc6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   2afb2:	697b      	ldr	r3, [r7, #20]
   2afb4:	79db      	ldrb	r3, [r3, #7]
   2afb6:	2201      	movs	r2, #1
   2afb8:	4053      	eors	r3, r2
   2afba:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   2afbc:	2b00      	cmp	r3, #0
   2afbe:	d002      	beq.n	2afc6 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2afc0:	693b      	ldr	r3, [r7, #16]
   2afc2:	2202      	movs	r2, #2
   2afc4:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   2afc6:	230c      	movs	r3, #12
   2afc8:	18fb      	adds	r3, r7, r3
   2afca:	881b      	ldrh	r3, [r3, #0]
   2afcc:	2204      	movs	r2, #4
   2afce:	4013      	ands	r3, r2
   2afd0:	d100      	bne.n	2afd4 <_spi_interrupt_handler+0xe0>
   2afd2:	e07e      	b.n	2b0d2 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2afd4:	693b      	ldr	r3, [r7, #16]
   2afd6:	8b5b      	ldrh	r3, [r3, #26]
   2afd8:	b29b      	uxth	r3, r3
   2afda:	001a      	movs	r2, r3
   2afdc:	2304      	movs	r3, #4
   2afde:	4013      	ands	r3, r2
   2afe0:	d022      	beq.n	2b028 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   2afe2:	697b      	ldr	r3, [r7, #20]
   2afe4:	7a5b      	ldrb	r3, [r3, #9]
   2afe6:	b2db      	uxtb	r3, r3
   2afe8:	2b01      	cmp	r3, #1
   2afea:	d014      	beq.n	2b016 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   2afec:	697b      	ldr	r3, [r7, #20]
   2afee:	2238      	movs	r2, #56	; 0x38
   2aff0:	211e      	movs	r1, #30
   2aff2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   2aff4:	697b      	ldr	r3, [r7, #20]
   2aff6:	2203      	movs	r2, #3
   2aff8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   2affa:	693b      	ldr	r3, [r7, #16]
   2affc:	2205      	movs	r2, #5
   2affe:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   2b000:	230f      	movs	r3, #15
   2b002:	18fb      	adds	r3, r7, r3
   2b004:	781b      	ldrb	r3, [r3, #0]
   2b006:	2208      	movs	r2, #8
   2b008:	4013      	ands	r3, r2
   2b00a:	d004      	beq.n	2b016 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   2b00c:	697b      	ldr	r3, [r7, #20]
   2b00e:	699b      	ldr	r3, [r3, #24]
   2b010:	697a      	ldr	r2, [r7, #20]
   2b012:	0010      	movs	r0, r2
   2b014:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   2b016:	693b      	ldr	r3, [r7, #16]
   2b018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2b01a:	230a      	movs	r3, #10
   2b01c:	18fb      	adds	r3, r7, r3
   2b01e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   2b020:	693b      	ldr	r3, [r7, #16]
   2b022:	2204      	movs	r2, #4
   2b024:	835a      	strh	r2, [r3, #26]
   2b026:	e054      	b.n	2b0d2 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   2b028:	697b      	ldr	r3, [r7, #20]
   2b02a:	7a5b      	ldrb	r3, [r3, #9]
   2b02c:	b2db      	uxtb	r3, r3
   2b02e:	2b01      	cmp	r3, #1
   2b030:	d11e      	bne.n	2b070 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   2b032:	697b      	ldr	r3, [r7, #20]
   2b034:	0018      	movs	r0, r3
   2b036:	4b4d      	ldr	r3, [pc, #308]	; (2b16c <_spi_interrupt_handler+0x278>)
   2b038:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   2b03a:	697b      	ldr	r3, [r7, #20]
   2b03c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2b03e:	b29b      	uxth	r3, r3
   2b040:	2b00      	cmp	r3, #0
   2b042:	d146      	bne.n	2b0d2 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2b044:	693b      	ldr	r3, [r7, #16]
   2b046:	2204      	movs	r2, #4
   2b048:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2b04a:	697b      	ldr	r3, [r7, #20]
   2b04c:	2238      	movs	r2, #56	; 0x38
   2b04e:	2100      	movs	r1, #0
   2b050:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   2b052:	697b      	ldr	r3, [r7, #20]
   2b054:	2203      	movs	r2, #3
   2b056:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   2b058:	230f      	movs	r3, #15
   2b05a:	18fb      	adds	r3, r7, r3
   2b05c:	781b      	ldrb	r3, [r3, #0]
   2b05e:	2201      	movs	r2, #1
   2b060:	4013      	ands	r3, r2
   2b062:	d036      	beq.n	2b0d2 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   2b064:	697b      	ldr	r3, [r7, #20]
   2b066:	68db      	ldr	r3, [r3, #12]
   2b068:	697a      	ldr	r2, [r7, #20]
   2b06a:	0010      	movs	r0, r2
   2b06c:	4798      	blx	r3
   2b06e:	e030      	b.n	2b0d2 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   2b070:	697b      	ldr	r3, [r7, #20]
   2b072:	0018      	movs	r0, r3
   2b074:	4b3e      	ldr	r3, [pc, #248]	; (2b170 <_spi_interrupt_handler+0x27c>)
   2b076:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   2b078:	697b      	ldr	r3, [r7, #20]
   2b07a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2b07c:	b29b      	uxth	r3, r3
   2b07e:	2b00      	cmp	r3, #0
   2b080:	d127      	bne.n	2b0d2 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   2b082:	697b      	ldr	r3, [r7, #20]
   2b084:	2238      	movs	r2, #56	; 0x38
   2b086:	2100      	movs	r1, #0
   2b088:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2b08a:	693b      	ldr	r3, [r7, #16]
   2b08c:	2204      	movs	r2, #4
   2b08e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   2b090:	697b      	ldr	r3, [r7, #20]
   2b092:	7a5b      	ldrb	r3, [r3, #9]
   2b094:	b2db      	uxtb	r3, r3
   2b096:	2b02      	cmp	r3, #2
   2b098:	d10b      	bne.n	2b0b2 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   2b09a:	230f      	movs	r3, #15
   2b09c:	18fb      	adds	r3, r7, r3
   2b09e:	781b      	ldrb	r3, [r3, #0]
   2b0a0:	2204      	movs	r2, #4
   2b0a2:	4013      	ands	r3, r2
   2b0a4:	d015      	beq.n	2b0d2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   2b0a6:	697b      	ldr	r3, [r7, #20]
   2b0a8:	695b      	ldr	r3, [r3, #20]
   2b0aa:	697a      	ldr	r2, [r7, #20]
   2b0ac:	0010      	movs	r0, r2
   2b0ae:	4798      	blx	r3
   2b0b0:	e00f      	b.n	2b0d2 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   2b0b2:	697b      	ldr	r3, [r7, #20]
   2b0b4:	7a5b      	ldrb	r3, [r3, #9]
   2b0b6:	b2db      	uxtb	r3, r3
   2b0b8:	2b00      	cmp	r3, #0
   2b0ba:	d10a      	bne.n	2b0d2 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   2b0bc:	230f      	movs	r3, #15
   2b0be:	18fb      	adds	r3, r7, r3
   2b0c0:	781b      	ldrb	r3, [r3, #0]
   2b0c2:	2202      	movs	r2, #2
   2b0c4:	4013      	ands	r3, r2
   2b0c6:	d004      	beq.n	2b0d2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   2b0c8:	697b      	ldr	r3, [r7, #20]
   2b0ca:	691b      	ldr	r3, [r3, #16]
   2b0cc:	697a      	ldr	r2, [r7, #20]
   2b0ce:	0010      	movs	r0, r2
   2b0d0:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   2b0d2:	230c      	movs	r3, #12
   2b0d4:	18fb      	adds	r3, r7, r3
   2b0d6:	881b      	ldrh	r3, [r3, #0]
   2b0d8:	2202      	movs	r2, #2
   2b0da:	4013      	ands	r3, r2
   2b0dc:	d024      	beq.n	2b128 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2b0de:	697b      	ldr	r3, [r7, #20]
   2b0e0:	795b      	ldrb	r3, [r3, #5]
   2b0e2:	2b01      	cmp	r3, #1
   2b0e4:	d120      	bne.n	2b128 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   2b0e6:	697b      	ldr	r3, [r7, #20]
   2b0e8:	7a5b      	ldrb	r3, [r3, #9]
   2b0ea:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2b0ec:	2b01      	cmp	r3, #1
   2b0ee:	d11b      	bne.n	2b128 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   2b0f0:	697b      	ldr	r3, [r7, #20]
   2b0f2:	79db      	ldrb	r3, [r3, #7]
   2b0f4:	2201      	movs	r2, #1
   2b0f6:	4053      	eors	r3, r2
   2b0f8:	b2db      	uxtb	r3, r3
   2b0fa:	2b00      	cmp	r3, #0
   2b0fc:	d014      	beq.n	2b128 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2b0fe:	693b      	ldr	r3, [r7, #16]
   2b100:	2202      	movs	r2, #2
   2b102:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   2b104:	697b      	ldr	r3, [r7, #20]
   2b106:	2203      	movs	r2, #3
   2b108:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   2b10a:	697b      	ldr	r3, [r7, #20]
   2b10c:	2238      	movs	r2, #56	; 0x38
   2b10e:	2100      	movs	r1, #0
   2b110:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   2b112:	230f      	movs	r3, #15
   2b114:	18fb      	adds	r3, r7, r3
   2b116:	781b      	ldrb	r3, [r3, #0]
   2b118:	2201      	movs	r2, #1
   2b11a:	4013      	ands	r3, r2
   2b11c:	d004      	beq.n	2b128 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   2b11e:	697b      	ldr	r3, [r7, #20]
   2b120:	68db      	ldr	r3, [r3, #12]
   2b122:	697a      	ldr	r2, [r7, #20]
   2b124:	0010      	movs	r0, r2
   2b126:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   2b128:	230c      	movs	r3, #12
   2b12a:	18fb      	adds	r3, r7, r3
   2b12c:	881b      	ldrh	r3, [r3, #0]
   2b12e:	2280      	movs	r2, #128	; 0x80
   2b130:	4013      	ands	r3, r2
   2b132:	d010      	beq.n	2b156 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2b134:	693b      	ldr	r3, [r7, #16]
   2b136:	2280      	movs	r2, #128	; 0x80
   2b138:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2b13a:	693b      	ldr	r3, [r7, #16]
   2b13c:	2280      	movs	r2, #128	; 0x80
   2b13e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   2b140:	230f      	movs	r3, #15
   2b142:	18fb      	adds	r3, r7, r3
   2b144:	781b      	ldrb	r3, [r3, #0]
   2b146:	2240      	movs	r2, #64	; 0x40
   2b148:	4013      	ands	r3, r2
   2b14a:	d004      	beq.n	2b156 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   2b14c:	697b      	ldr	r3, [r7, #20]
   2b14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b150:	697a      	ldr	r2, [r7, #20]
   2b152:	0010      	movs	r0, r2
   2b154:	4798      	blx	r3
		}
	}
#  endif
}
   2b156:	46c0      	nop			; (mov r8, r8)
   2b158:	46bd      	mov	sp, r7
   2b15a:	b006      	add	sp, #24
   2b15c:	bd80      	pop	{r7, pc}
   2b15e:	46c0      	nop			; (mov r8, r8)
   2b160:	20005b90 	.word	0x20005b90
   2b164:	0002ae19 	.word	0x0002ae19
   2b168:	0002ad9d 	.word	0x0002ad9d
   2b16c:	0002ae4d 	.word	0x0002ae4d
   2b170:	0002ae83 	.word	0x0002ae83

0002b174 <system_gclk_chan_get_config_defaults>:
{
   2b174:	b580      	push	{r7, lr}
   2b176:	b082      	sub	sp, #8
   2b178:	af00      	add	r7, sp, #0
   2b17a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2b17c:	687b      	ldr	r3, [r7, #4]
   2b17e:	2200      	movs	r2, #0
   2b180:	701a      	strb	r2, [r3, #0]
}
   2b182:	46c0      	nop			; (mov r8, r8)
   2b184:	46bd      	mov	sp, r7
   2b186:	b002      	add	sp, #8
   2b188:	bd80      	pop	{r7, pc}
	...

0002b18c <system_apb_clock_set_mask>:
{
   2b18c:	b580      	push	{r7, lr}
   2b18e:	b082      	sub	sp, #8
   2b190:	af00      	add	r7, sp, #0
   2b192:	0002      	movs	r2, r0
   2b194:	6039      	str	r1, [r7, #0]
   2b196:	1dfb      	adds	r3, r7, #7
   2b198:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2b19a:	1dfb      	adds	r3, r7, #7
   2b19c:	781b      	ldrb	r3, [r3, #0]
   2b19e:	2b01      	cmp	r3, #1
   2b1a0:	d00a      	beq.n	2b1b8 <system_apb_clock_set_mask+0x2c>
   2b1a2:	2b02      	cmp	r3, #2
   2b1a4:	d00f      	beq.n	2b1c6 <system_apb_clock_set_mask+0x3a>
   2b1a6:	2b00      	cmp	r3, #0
   2b1a8:	d114      	bne.n	2b1d4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2b1aa:	4b0e      	ldr	r3, [pc, #56]	; (2b1e4 <system_apb_clock_set_mask+0x58>)
   2b1ac:	4a0d      	ldr	r2, [pc, #52]	; (2b1e4 <system_apb_clock_set_mask+0x58>)
   2b1ae:	6991      	ldr	r1, [r2, #24]
   2b1b0:	683a      	ldr	r2, [r7, #0]
   2b1b2:	430a      	orrs	r2, r1
   2b1b4:	619a      	str	r2, [r3, #24]
			break;
   2b1b6:	e00f      	b.n	2b1d8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2b1b8:	4b0a      	ldr	r3, [pc, #40]	; (2b1e4 <system_apb_clock_set_mask+0x58>)
   2b1ba:	4a0a      	ldr	r2, [pc, #40]	; (2b1e4 <system_apb_clock_set_mask+0x58>)
   2b1bc:	69d1      	ldr	r1, [r2, #28]
   2b1be:	683a      	ldr	r2, [r7, #0]
   2b1c0:	430a      	orrs	r2, r1
   2b1c2:	61da      	str	r2, [r3, #28]
			break;
   2b1c4:	e008      	b.n	2b1d8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2b1c6:	4b07      	ldr	r3, [pc, #28]	; (2b1e4 <system_apb_clock_set_mask+0x58>)
   2b1c8:	4a06      	ldr	r2, [pc, #24]	; (2b1e4 <system_apb_clock_set_mask+0x58>)
   2b1ca:	6a11      	ldr	r1, [r2, #32]
   2b1cc:	683a      	ldr	r2, [r7, #0]
   2b1ce:	430a      	orrs	r2, r1
   2b1d0:	621a      	str	r2, [r3, #32]
			break;
   2b1d2:	e001      	b.n	2b1d8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2b1d4:	2317      	movs	r3, #23
   2b1d6:	e000      	b.n	2b1da <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2b1d8:	2300      	movs	r3, #0
}
   2b1da:	0018      	movs	r0, r3
   2b1dc:	46bd      	mov	sp, r7
   2b1de:	b002      	add	sp, #8
   2b1e0:	bd80      	pop	{r7, pc}
   2b1e2:	46c0      	nop			; (mov r8, r8)
   2b1e4:	40000400 	.word	0x40000400

0002b1e8 <system_pinmux_get_config_defaults>:
{
   2b1e8:	b580      	push	{r7, lr}
   2b1ea:	b082      	sub	sp, #8
   2b1ec:	af00      	add	r7, sp, #0
   2b1ee:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2b1f0:	687b      	ldr	r3, [r7, #4]
   2b1f2:	2280      	movs	r2, #128	; 0x80
   2b1f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2b1f6:	687b      	ldr	r3, [r7, #4]
   2b1f8:	2200      	movs	r2, #0
   2b1fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2b1fc:	687b      	ldr	r3, [r7, #4]
   2b1fe:	2201      	movs	r2, #1
   2b200:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2b202:	687b      	ldr	r3, [r7, #4]
   2b204:	2200      	movs	r2, #0
   2b206:	70da      	strb	r2, [r3, #3]
}
   2b208:	46c0      	nop			; (mov r8, r8)
   2b20a:	46bd      	mov	sp, r7
   2b20c:	b002      	add	sp, #8
   2b20e:	bd80      	pop	{r7, pc}

0002b210 <system_is_debugger_present>:
{
   2b210:	b580      	push	{r7, lr}
   2b212:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   2b214:	4b05      	ldr	r3, [pc, #20]	; (2b22c <system_is_debugger_present+0x1c>)
   2b216:	789b      	ldrb	r3, [r3, #2]
   2b218:	b2db      	uxtb	r3, r3
   2b21a:	001a      	movs	r2, r3
   2b21c:	2302      	movs	r3, #2
   2b21e:	4013      	ands	r3, r2
   2b220:	1e5a      	subs	r2, r3, #1
   2b222:	4193      	sbcs	r3, r2
   2b224:	b2db      	uxtb	r3, r3
}
   2b226:	0018      	movs	r0, r3
   2b228:	46bd      	mov	sp, r7
   2b22a:	bd80      	pop	{r7, pc}
   2b22c:	41002000 	.word	0x41002000

0002b230 <usart_is_syncing>:
{
   2b230:	b580      	push	{r7, lr}
   2b232:	b084      	sub	sp, #16
   2b234:	af00      	add	r7, sp, #0
   2b236:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b238:	687b      	ldr	r3, [r7, #4]
   2b23a:	681b      	ldr	r3, [r3, #0]
   2b23c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2b23e:	68fb      	ldr	r3, [r7, #12]
   2b240:	69db      	ldr	r3, [r3, #28]
   2b242:	1e5a      	subs	r2, r3, #1
   2b244:	4193      	sbcs	r3, r2
   2b246:	b2db      	uxtb	r3, r3
}
   2b248:	0018      	movs	r0, r3
   2b24a:	46bd      	mov	sp, r7
   2b24c:	b004      	add	sp, #16
   2b24e:	bd80      	pop	{r7, pc}

0002b250 <_usart_wait_for_sync>:
{
   2b250:	b580      	push	{r7, lr}
   2b252:	b082      	sub	sp, #8
   2b254:	af00      	add	r7, sp, #0
   2b256:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2b258:	46c0      	nop			; (mov r8, r8)
   2b25a:	687b      	ldr	r3, [r7, #4]
   2b25c:	0018      	movs	r0, r3
   2b25e:	4b04      	ldr	r3, [pc, #16]	; (2b270 <_usart_wait_for_sync+0x20>)
   2b260:	4798      	blx	r3
   2b262:	1e03      	subs	r3, r0, #0
   2b264:	d1f9      	bne.n	2b25a <_usart_wait_for_sync+0xa>
}
   2b266:	46c0      	nop			; (mov r8, r8)
   2b268:	46bd      	mov	sp, r7
   2b26a:	b002      	add	sp, #8
   2b26c:	bd80      	pop	{r7, pc}
   2b26e:	46c0      	nop			; (mov r8, r8)
   2b270:	0002b231 	.word	0x0002b231

0002b274 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   2b274:	b5b0      	push	{r4, r5, r7, lr}
   2b276:	b08c      	sub	sp, #48	; 0x30
   2b278:	af02      	add	r7, sp, #8
   2b27a:	6078      	str	r0, [r7, #4]
   2b27c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b27e:	687b      	ldr	r3, [r7, #4]
   2b280:	681b      	ldr	r3, [r3, #0]
   2b282:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2b284:	687b      	ldr	r3, [r7, #4]
   2b286:	681b      	ldr	r3, [r3, #0]
   2b288:	0018      	movs	r0, r3
   2b28a:	4bab      	ldr	r3, [pc, #684]	; (2b538 <_usart_set_config+0x2c4>)
   2b28c:	4798      	blx	r3
   2b28e:	0003      	movs	r3, r0
   2b290:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2b292:	697b      	ldr	r3, [r7, #20]
   2b294:	3314      	adds	r3, #20
   2b296:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2b298:	2300      	movs	r3, #0
   2b29a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2b29c:	2300      	movs	r3, #0
   2b29e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   2b2a0:	230a      	movs	r3, #10
   2b2a2:	18fb      	adds	r3, r7, r3
   2b2a4:	2200      	movs	r2, #0
   2b2a6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2b2a8:	231f      	movs	r3, #31
   2b2aa:	18fb      	adds	r3, r7, r3
   2b2ac:	2200      	movs	r2, #0
   2b2ae:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2b2b0:	231e      	movs	r3, #30
   2b2b2:	18fb      	adds	r3, r7, r3
   2b2b4:	2210      	movs	r2, #16
   2b2b6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2b2b8:	683b      	ldr	r3, [r7, #0]
   2b2ba:	8a1b      	ldrh	r3, [r3, #16]
   2b2bc:	2280      	movs	r2, #128	; 0x80
   2b2be:	01d2      	lsls	r2, r2, #7
   2b2c0:	4293      	cmp	r3, r2
   2b2c2:	d01c      	beq.n	2b2fe <_usart_set_config+0x8a>
   2b2c4:	2280      	movs	r2, #128	; 0x80
   2b2c6:	01d2      	lsls	r2, r2, #7
   2b2c8:	4293      	cmp	r3, r2
   2b2ca:	dc06      	bgt.n	2b2da <_usart_set_config+0x66>
   2b2cc:	2b00      	cmp	r3, #0
   2b2ce:	d00d      	beq.n	2b2ec <_usart_set_config+0x78>
   2b2d0:	2280      	movs	r2, #128	; 0x80
   2b2d2:	0192      	lsls	r2, r2, #6
   2b2d4:	4293      	cmp	r3, r2
   2b2d6:	d024      	beq.n	2b322 <_usart_set_config+0xae>
   2b2d8:	e035      	b.n	2b346 <_usart_set_config+0xd2>
   2b2da:	22c0      	movs	r2, #192	; 0xc0
   2b2dc:	01d2      	lsls	r2, r2, #7
   2b2de:	4293      	cmp	r3, r2
   2b2e0:	d028      	beq.n	2b334 <_usart_set_config+0xc0>
   2b2e2:	2280      	movs	r2, #128	; 0x80
   2b2e4:	0212      	lsls	r2, r2, #8
   2b2e6:	4293      	cmp	r3, r2
   2b2e8:	d012      	beq.n	2b310 <_usart_set_config+0x9c>
   2b2ea:	e02c      	b.n	2b346 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2b2ec:	231f      	movs	r3, #31
   2b2ee:	18fb      	adds	r3, r7, r3
   2b2f0:	2200      	movs	r2, #0
   2b2f2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2b2f4:	231e      	movs	r3, #30
   2b2f6:	18fb      	adds	r3, r7, r3
   2b2f8:	2210      	movs	r2, #16
   2b2fa:	701a      	strb	r2, [r3, #0]
			break;
   2b2fc:	e023      	b.n	2b346 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2b2fe:	231f      	movs	r3, #31
   2b300:	18fb      	adds	r3, r7, r3
   2b302:	2200      	movs	r2, #0
   2b304:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2b306:	231e      	movs	r3, #30
   2b308:	18fb      	adds	r3, r7, r3
   2b30a:	2208      	movs	r2, #8
   2b30c:	701a      	strb	r2, [r3, #0]
			break;
   2b30e:	e01a      	b.n	2b346 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2b310:	231f      	movs	r3, #31
   2b312:	18fb      	adds	r3, r7, r3
   2b314:	2200      	movs	r2, #0
   2b316:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2b318:	231e      	movs	r3, #30
   2b31a:	18fb      	adds	r3, r7, r3
   2b31c:	2203      	movs	r2, #3
   2b31e:	701a      	strb	r2, [r3, #0]
			break;
   2b320:	e011      	b.n	2b346 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2b322:	231f      	movs	r3, #31
   2b324:	18fb      	adds	r3, r7, r3
   2b326:	2201      	movs	r2, #1
   2b328:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2b32a:	231e      	movs	r3, #30
   2b32c:	18fb      	adds	r3, r7, r3
   2b32e:	2210      	movs	r2, #16
   2b330:	701a      	strb	r2, [r3, #0]
			break;
   2b332:	e008      	b.n	2b346 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2b334:	231f      	movs	r3, #31
   2b336:	18fb      	adds	r3, r7, r3
   2b338:	2201      	movs	r2, #1
   2b33a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2b33c:	231e      	movs	r3, #30
   2b33e:	18fb      	adds	r3, r7, r3
   2b340:	2208      	movs	r2, #8
   2b342:	701a      	strb	r2, [r3, #0]
			break;
   2b344:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   2b346:	683b      	ldr	r3, [r7, #0]
   2b348:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2b34a:	683b      	ldr	r3, [r7, #0]
   2b34c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2b34e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   2b350:	683b      	ldr	r3, [r7, #0]
   2b352:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   2b354:	4313      	orrs	r3, r2
		config->sample_rate |
   2b356:	683a      	ldr	r2, [r7, #0]
   2b358:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2b35a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2b35c:	683a      	ldr	r2, [r7, #0]
   2b35e:	7e12      	ldrb	r2, [r2, #24]
   2b360:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   2b362:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   2b364:	683a      	ldr	r2, [r7, #0]
   2b366:	2126      	movs	r1, #38	; 0x26
   2b368:	5c52      	ldrb	r2, [r2, r1]
   2b36a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2b36c:	4313      	orrs	r3, r2
   2b36e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   2b370:	231d      	movs	r3, #29
   2b372:	18fb      	adds	r3, r7, r3
   2b374:	2200      	movs	r2, #0
   2b376:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   2b378:	683b      	ldr	r3, [r7, #0]
   2b37a:	685b      	ldr	r3, [r3, #4]
   2b37c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2b37e:	68fb      	ldr	r3, [r7, #12]
   2b380:	2b00      	cmp	r3, #0
   2b382:	d01e      	beq.n	2b3c2 <_usart_set_config+0x14e>
   2b384:	2280      	movs	r2, #128	; 0x80
   2b386:	0552      	lsls	r2, r2, #21
   2b388:	4293      	cmp	r3, r2
   2b38a:	d14f      	bne.n	2b42c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2b38c:	683b      	ldr	r3, [r7, #0]
   2b38e:	2227      	movs	r2, #39	; 0x27
   2b390:	5c9b      	ldrb	r3, [r3, r2]
   2b392:	2201      	movs	r2, #1
   2b394:	4053      	eors	r3, r2
   2b396:	b2db      	uxtb	r3, r3
   2b398:	2b00      	cmp	r3, #0
   2b39a:	d046      	beq.n	2b42a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2b39c:	683b      	ldr	r3, [r7, #0]
   2b39e:	6a1d      	ldr	r5, [r3, #32]
   2b3a0:	693b      	ldr	r3, [r7, #16]
   2b3a2:	b2db      	uxtb	r3, r3
   2b3a4:	0018      	movs	r0, r3
   2b3a6:	4b65      	ldr	r3, [pc, #404]	; (2b53c <_usart_set_config+0x2c8>)
   2b3a8:	4798      	blx	r3
   2b3aa:	0001      	movs	r1, r0
   2b3ac:	231d      	movs	r3, #29
   2b3ae:	18fc      	adds	r4, r7, r3
   2b3b0:	230a      	movs	r3, #10
   2b3b2:	18fb      	adds	r3, r7, r3
   2b3b4:	001a      	movs	r2, r3
   2b3b6:	0028      	movs	r0, r5
   2b3b8:	4b61      	ldr	r3, [pc, #388]	; (2b540 <_usart_set_config+0x2cc>)
   2b3ba:	4798      	blx	r3
   2b3bc:	0003      	movs	r3, r0
   2b3be:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   2b3c0:	e033      	b.n	2b42a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   2b3c2:	683b      	ldr	r3, [r7, #0]
   2b3c4:	2227      	movs	r2, #39	; 0x27
   2b3c6:	5c9b      	ldrb	r3, [r3, r2]
   2b3c8:	2b00      	cmp	r3, #0
   2b3ca:	d014      	beq.n	2b3f6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   2b3cc:	683b      	ldr	r3, [r7, #0]
   2b3ce:	6a18      	ldr	r0, [r3, #32]
   2b3d0:	683b      	ldr	r3, [r7, #0]
   2b3d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   2b3d4:	231d      	movs	r3, #29
   2b3d6:	18fc      	adds	r4, r7, r3
   2b3d8:	231f      	movs	r3, #31
   2b3da:	18fb      	adds	r3, r7, r3
   2b3dc:	781d      	ldrb	r5, [r3, #0]
   2b3de:	230a      	movs	r3, #10
   2b3e0:	18fa      	adds	r2, r7, r3
   2b3e2:	231e      	movs	r3, #30
   2b3e4:	18fb      	adds	r3, r7, r3
   2b3e6:	781b      	ldrb	r3, [r3, #0]
   2b3e8:	9300      	str	r3, [sp, #0]
   2b3ea:	002b      	movs	r3, r5
   2b3ec:	4d55      	ldr	r5, [pc, #340]	; (2b544 <_usart_set_config+0x2d0>)
   2b3ee:	47a8      	blx	r5
   2b3f0:	0003      	movs	r3, r0
   2b3f2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   2b3f4:	e01a      	b.n	2b42c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2b3f6:	683b      	ldr	r3, [r7, #0]
   2b3f8:	6a1d      	ldr	r5, [r3, #32]
   2b3fa:	693b      	ldr	r3, [r7, #16]
   2b3fc:	b2db      	uxtb	r3, r3
   2b3fe:	0018      	movs	r0, r3
   2b400:	4b4e      	ldr	r3, [pc, #312]	; (2b53c <_usart_set_config+0x2c8>)
   2b402:	4798      	blx	r3
				status_code =
   2b404:	231d      	movs	r3, #29
   2b406:	18fc      	adds	r4, r7, r3
   2b408:	231f      	movs	r3, #31
   2b40a:	18fb      	adds	r3, r7, r3
   2b40c:	7819      	ldrb	r1, [r3, #0]
   2b40e:	230a      	movs	r3, #10
   2b410:	18fa      	adds	r2, r7, r3
   2b412:	231e      	movs	r3, #30
   2b414:	18fb      	adds	r3, r7, r3
   2b416:	781b      	ldrb	r3, [r3, #0]
   2b418:	9300      	str	r3, [sp, #0]
   2b41a:	000b      	movs	r3, r1
   2b41c:	0001      	movs	r1, r0
   2b41e:	0028      	movs	r0, r5
   2b420:	4d48      	ldr	r5, [pc, #288]	; (2b544 <_usart_set_config+0x2d0>)
   2b422:	47a8      	blx	r5
   2b424:	0003      	movs	r3, r0
   2b426:	7023      	strb	r3, [r4, #0]
			break;
   2b428:	e000      	b.n	2b42c <_usart_set_config+0x1b8>
			break;
   2b42a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   2b42c:	231d      	movs	r3, #29
   2b42e:	18fb      	adds	r3, r7, r3
   2b430:	781b      	ldrb	r3, [r3, #0]
   2b432:	2b00      	cmp	r3, #0
   2b434:	d003      	beq.n	2b43e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2b436:	231d      	movs	r3, #29
   2b438:	18fb      	adds	r3, r7, r3
   2b43a:	781b      	ldrb	r3, [r3, #0]
   2b43c:	e077      	b.n	2b52e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2b43e:	683b      	ldr	r3, [r7, #0]
   2b440:	7e5b      	ldrb	r3, [r3, #25]
   2b442:	2b00      	cmp	r3, #0
   2b444:	d003      	beq.n	2b44e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   2b446:	683b      	ldr	r3, [r7, #0]
   2b448:	7e9a      	ldrb	r2, [r3, #26]
   2b44a:	69bb      	ldr	r3, [r7, #24]
   2b44c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2b44e:	687b      	ldr	r3, [r7, #4]
   2b450:	0018      	movs	r0, r3
   2b452:	4b3d      	ldr	r3, [pc, #244]	; (2b548 <_usart_set_config+0x2d4>)
   2b454:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   2b456:	230a      	movs	r3, #10
   2b458:	18fb      	adds	r3, r7, r3
   2b45a:	881a      	ldrh	r2, [r3, #0]
   2b45c:	69bb      	ldr	r3, [r7, #24]
   2b45e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   2b460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2b462:	68fb      	ldr	r3, [r7, #12]
   2b464:	4313      	orrs	r3, r2
   2b466:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   2b468:	683b      	ldr	r3, [r7, #0]
   2b46a:	2227      	movs	r2, #39	; 0x27
   2b46c:	5c9b      	ldrb	r3, [r3, r2]
   2b46e:	2201      	movs	r2, #1
   2b470:	4053      	eors	r3, r2
   2b472:	b2db      	uxtb	r3, r3
   2b474:	2b00      	cmp	r3, #0
   2b476:	d003      	beq.n	2b480 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   2b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b47a:	2204      	movs	r2, #4
   2b47c:	4313      	orrs	r3, r2
   2b47e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2b480:	683b      	ldr	r3, [r7, #0]
   2b482:	7e5b      	ldrb	r3, [r3, #25]
   2b484:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2b486:	683b      	ldr	r3, [r7, #0]
   2b488:	7f1b      	ldrb	r3, [r3, #28]
   2b48a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2b48c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2b48e:	683b      	ldr	r3, [r7, #0]
   2b490:	7f5b      	ldrb	r3, [r3, #29]
   2b492:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2b494:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2b496:	683b      	ldr	r3, [r7, #0]
   2b498:	2124      	movs	r1, #36	; 0x24
   2b49a:	5c5b      	ldrb	r3, [r3, r1]
   2b49c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2b49e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   2b4a0:	683b      	ldr	r3, [r7, #0]
   2b4a2:	2125      	movs	r1, #37	; 0x25
   2b4a4:	5c5b      	ldrb	r3, [r3, r1]
   2b4a6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2b4a8:	4313      	orrs	r3, r2
	ctrlb =  
   2b4aa:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   2b4ac:	683b      	ldr	r3, [r7, #0]
   2b4ae:	7a9b      	ldrb	r3, [r3, #10]
   2b4b0:	001a      	movs	r2, r3
   2b4b2:	6a3b      	ldr	r3, [r7, #32]
   2b4b4:	4313      	orrs	r3, r2
   2b4b6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2b4b8:	683b      	ldr	r3, [r7, #0]
   2b4ba:	7adb      	ldrb	r3, [r3, #11]
   2b4bc:	001a      	movs	r2, r3
   2b4be:	6a3b      	ldr	r3, [r7, #32]
   2b4c0:	4313      	orrs	r3, r2
   2b4c2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   2b4c4:	683b      	ldr	r3, [r7, #0]
   2b4c6:	891b      	ldrh	r3, [r3, #8]
   2b4c8:	2bff      	cmp	r3, #255	; 0xff
   2b4ca:	d00b      	beq.n	2b4e4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   2b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b4ce:	2280      	movs	r2, #128	; 0x80
   2b4d0:	0452      	lsls	r2, r2, #17
   2b4d2:	4313      	orrs	r3, r2
   2b4d4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2b4d6:	683b      	ldr	r3, [r7, #0]
   2b4d8:	891b      	ldrh	r3, [r3, #8]
   2b4da:	001a      	movs	r2, r3
   2b4dc:	6a3b      	ldr	r3, [r7, #32]
   2b4de:	4313      	orrs	r3, r2
   2b4e0:	623b      	str	r3, [r7, #32]
   2b4e2:	e008      	b.n	2b4f6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   2b4e4:	683b      	ldr	r3, [r7, #0]
   2b4e6:	7edb      	ldrb	r3, [r3, #27]
   2b4e8:	2b00      	cmp	r3, #0
   2b4ea:	d004      	beq.n	2b4f6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   2b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b4ee:	2280      	movs	r2, #128	; 0x80
   2b4f0:	04d2      	lsls	r2, r2, #19
   2b4f2:	4313      	orrs	r3, r2
   2b4f4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2b4f6:	683b      	ldr	r3, [r7, #0]
   2b4f8:	222c      	movs	r2, #44	; 0x2c
   2b4fa:	5c9b      	ldrb	r3, [r3, r2]
   2b4fc:	2b00      	cmp	r3, #0
   2b4fe:	d103      	bne.n	2b508 <_usart_set_config+0x294>
   2b500:	4b12      	ldr	r3, [pc, #72]	; (2b54c <_usart_set_config+0x2d8>)
   2b502:	4798      	blx	r3
   2b504:	1e03      	subs	r3, r0, #0
   2b506:	d003      	beq.n	2b510 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b50a:	2280      	movs	r2, #128	; 0x80
   2b50c:	4313      	orrs	r3, r2
   2b50e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2b510:	687b      	ldr	r3, [r7, #4]
   2b512:	0018      	movs	r0, r3
   2b514:	4b0c      	ldr	r3, [pc, #48]	; (2b548 <_usart_set_config+0x2d4>)
   2b516:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2b518:	69bb      	ldr	r3, [r7, #24]
   2b51a:	6a3a      	ldr	r2, [r7, #32]
   2b51c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2b51e:	687b      	ldr	r3, [r7, #4]
   2b520:	0018      	movs	r0, r3
   2b522:	4b09      	ldr	r3, [pc, #36]	; (2b548 <_usart_set_config+0x2d4>)
   2b524:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   2b526:	69bb      	ldr	r3, [r7, #24]
   2b528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2b52a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   2b52c:	2300      	movs	r3, #0
}
   2b52e:	0018      	movs	r0, r3
   2b530:	46bd      	mov	sp, r7
   2b532:	b00a      	add	sp, #40	; 0x28
   2b534:	bdb0      	pop	{r4, r5, r7, pc}
   2b536:	46c0      	nop			; (mov r8, r8)
   2b538:	0002a01d 	.word	0x0002a01d
   2b53c:	0002c9d1 	.word	0x0002c9d1
   2b540:	00029b97 	.word	0x00029b97
   2b544:	00029c15 	.word	0x00029c15
   2b548:	0002b251 	.word	0x0002b251
   2b54c:	0002b211 	.word	0x0002b211

0002b550 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   2b550:	b590      	push	{r4, r7, lr}
   2b552:	b093      	sub	sp, #76	; 0x4c
   2b554:	af00      	add	r7, sp, #0
   2b556:	60f8      	str	r0, [r7, #12]
   2b558:	60b9      	str	r1, [r7, #8]
   2b55a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2b55c:	233b      	movs	r3, #59	; 0x3b
   2b55e:	18fb      	adds	r3, r7, r3
   2b560:	2200      	movs	r2, #0
   2b562:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   2b564:	68fb      	ldr	r3, [r7, #12]
   2b566:	68ba      	ldr	r2, [r7, #8]
   2b568:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b56a:	68fb      	ldr	r3, [r7, #12]
   2b56c:	681b      	ldr	r3, [r3, #0]
   2b56e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2b570:	68fb      	ldr	r3, [r7, #12]
   2b572:	681b      	ldr	r3, [r3, #0]
   2b574:	0018      	movs	r0, r3
   2b576:	4b86      	ldr	r3, [pc, #536]	; (2b790 <usart_init+0x240>)
   2b578:	4798      	blx	r3
   2b57a:	0003      	movs	r3, r0
   2b57c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2b57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2b580:	3302      	adds	r3, #2
   2b582:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2b586:	3314      	adds	r3, #20
   2b588:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2b58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b58c:	681b      	ldr	r3, [r3, #0]
   2b58e:	2201      	movs	r2, #1
   2b590:	4013      	ands	r3, r2
   2b592:	d001      	beq.n	2b598 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   2b594:	2305      	movs	r3, #5
   2b596:	e0f6      	b.n	2b786 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   2b598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b59a:	681b      	ldr	r3, [r3, #0]
   2b59c:	2202      	movs	r2, #2
   2b59e:	4013      	ands	r3, r2
   2b5a0:	d001      	beq.n	2b5a6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   2b5a2:	231c      	movs	r3, #28
   2b5a4:	e0ef      	b.n	2b786 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2b5a6:	2201      	movs	r2, #1
   2b5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2b5aa:	409a      	lsls	r2, r3
   2b5ac:	0013      	movs	r3, r2
   2b5ae:	0019      	movs	r1, r3
   2b5b0:	2002      	movs	r0, #2
   2b5b2:	4b78      	ldr	r3, [pc, #480]	; (2b794 <usart_init+0x244>)
   2b5b4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2b5b6:	2324      	movs	r3, #36	; 0x24
   2b5b8:	18fb      	adds	r3, r7, r3
   2b5ba:	0018      	movs	r0, r3
   2b5bc:	4b76      	ldr	r3, [pc, #472]	; (2b798 <usart_init+0x248>)
   2b5be:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2b5c0:	687b      	ldr	r3, [r7, #4]
   2b5c2:	222d      	movs	r2, #45	; 0x2d
   2b5c4:	5c9a      	ldrb	r2, [r3, r2]
   2b5c6:	2324      	movs	r3, #36	; 0x24
   2b5c8:	18fb      	adds	r3, r7, r3
   2b5ca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2b5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b5ce:	b2db      	uxtb	r3, r3
   2b5d0:	2224      	movs	r2, #36	; 0x24
   2b5d2:	18ba      	adds	r2, r7, r2
   2b5d4:	0011      	movs	r1, r2
   2b5d6:	0018      	movs	r0, r3
   2b5d8:	4b70      	ldr	r3, [pc, #448]	; (2b79c <usart_init+0x24c>)
   2b5da:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b5de:	b2db      	uxtb	r3, r3
   2b5e0:	0018      	movs	r0, r3
   2b5e2:	4b6f      	ldr	r3, [pc, #444]	; (2b7a0 <usart_init+0x250>)
   2b5e4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2b5e6:	687b      	ldr	r3, [r7, #4]
   2b5e8:	222d      	movs	r2, #45	; 0x2d
   2b5ea:	5c9b      	ldrb	r3, [r3, r2]
   2b5ec:	2100      	movs	r1, #0
   2b5ee:	0018      	movs	r0, r3
   2b5f0:	4b6c      	ldr	r3, [pc, #432]	; (2b7a4 <usart_init+0x254>)
   2b5f2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   2b5f4:	687b      	ldr	r3, [r7, #4]
   2b5f6:	7ada      	ldrb	r2, [r3, #11]
   2b5f8:	68fb      	ldr	r3, [r7, #12]
   2b5fa:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   2b5fc:	687b      	ldr	r3, [r7, #4]
   2b5fe:	2224      	movs	r2, #36	; 0x24
   2b600:	5c9a      	ldrb	r2, [r3, r2]
   2b602:	68fb      	ldr	r3, [r7, #12]
   2b604:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   2b606:	687b      	ldr	r3, [r7, #4]
   2b608:	2225      	movs	r2, #37	; 0x25
   2b60a:	5c9a      	ldrb	r2, [r3, r2]
   2b60c:	68fb      	ldr	r3, [r7, #12]
   2b60e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   2b610:	687b      	ldr	r3, [r7, #4]
   2b612:	7eda      	ldrb	r2, [r3, #27]
   2b614:	68fb      	ldr	r3, [r7, #12]
   2b616:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   2b618:	687b      	ldr	r3, [r7, #4]
   2b61a:	7f1a      	ldrb	r2, [r3, #28]
   2b61c:	68fb      	ldr	r3, [r7, #12]
   2b61e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   2b620:	233b      	movs	r3, #59	; 0x3b
   2b622:	18fc      	adds	r4, r7, r3
   2b624:	687a      	ldr	r2, [r7, #4]
   2b626:	68fb      	ldr	r3, [r7, #12]
   2b628:	0011      	movs	r1, r2
   2b62a:	0018      	movs	r0, r3
   2b62c:	4b5e      	ldr	r3, [pc, #376]	; (2b7a8 <usart_init+0x258>)
   2b62e:	4798      	blx	r3
   2b630:	0003      	movs	r3, r0
   2b632:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   2b634:	233b      	movs	r3, #59	; 0x3b
   2b636:	18fb      	adds	r3, r7, r3
   2b638:	781b      	ldrb	r3, [r3, #0]
   2b63a:	2b00      	cmp	r3, #0
   2b63c:	d003      	beq.n	2b646 <usart_init+0xf6>
		return status_code;
   2b63e:	233b      	movs	r3, #59	; 0x3b
   2b640:	18fb      	adds	r3, r7, r3
   2b642:	781b      	ldrb	r3, [r3, #0]
   2b644:	e09f      	b.n	2b786 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2b646:	2320      	movs	r3, #32
   2b648:	18fb      	adds	r3, r7, r3
   2b64a:	0018      	movs	r0, r3
   2b64c:	4b57      	ldr	r3, [pc, #348]	; (2b7ac <usart_init+0x25c>)
   2b64e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2b650:	2320      	movs	r3, #32
   2b652:	18fb      	adds	r3, r7, r3
   2b654:	2200      	movs	r2, #0
   2b656:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2b658:	2320      	movs	r3, #32
   2b65a:	18fb      	adds	r3, r7, r3
   2b65c:	2200      	movs	r2, #0
   2b65e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2b660:	687b      	ldr	r3, [r7, #4]
   2b662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2b664:	2310      	movs	r3, #16
   2b666:	18fb      	adds	r3, r7, r3
   2b668:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2b66a:	687b      	ldr	r3, [r7, #4]
   2b66c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2b66e:	2310      	movs	r3, #16
   2b670:	18fb      	adds	r3, r7, r3
   2b672:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   2b674:	687b      	ldr	r3, [r7, #4]
   2b676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   2b678:	2310      	movs	r3, #16
   2b67a:	18fb      	adds	r3, r7, r3
   2b67c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2b67e:	687b      	ldr	r3, [r7, #4]
   2b680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   2b682:	2310      	movs	r3, #16
   2b684:	18fb      	adds	r3, r7, r3
   2b686:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2b688:	2347      	movs	r3, #71	; 0x47
   2b68a:	18fb      	adds	r3, r7, r3
   2b68c:	2200      	movs	r2, #0
   2b68e:	701a      	strb	r2, [r3, #0]
   2b690:	e02c      	b.n	2b6ec <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2b692:	2347      	movs	r3, #71	; 0x47
   2b694:	18fb      	adds	r3, r7, r3
   2b696:	781a      	ldrb	r2, [r3, #0]
   2b698:	2310      	movs	r3, #16
   2b69a:	18fb      	adds	r3, r7, r3
   2b69c:	0092      	lsls	r2, r2, #2
   2b69e:	58d3      	ldr	r3, [r2, r3]
   2b6a0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2b6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2b6a4:	2b00      	cmp	r3, #0
   2b6a6:	d109      	bne.n	2b6bc <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2b6a8:	2347      	movs	r3, #71	; 0x47
   2b6aa:	18fb      	adds	r3, r7, r3
   2b6ac:	781a      	ldrb	r2, [r3, #0]
   2b6ae:	68bb      	ldr	r3, [r7, #8]
   2b6b0:	0011      	movs	r1, r2
   2b6b2:	0018      	movs	r0, r3
   2b6b4:	4b3e      	ldr	r3, [pc, #248]	; (2b7b0 <usart_init+0x260>)
   2b6b6:	4798      	blx	r3
   2b6b8:	0003      	movs	r3, r0
   2b6ba:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2b6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2b6be:	3301      	adds	r3, #1
   2b6c0:	d00d      	beq.n	2b6de <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2b6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2b6c4:	b2da      	uxtb	r2, r3
   2b6c6:	2320      	movs	r3, #32
   2b6c8:	18fb      	adds	r3, r7, r3
   2b6ca:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2b6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2b6ce:	0c1b      	lsrs	r3, r3, #16
   2b6d0:	b2db      	uxtb	r3, r3
   2b6d2:	2220      	movs	r2, #32
   2b6d4:	18ba      	adds	r2, r7, r2
   2b6d6:	0011      	movs	r1, r2
   2b6d8:	0018      	movs	r0, r3
   2b6da:	4b36      	ldr	r3, [pc, #216]	; (2b7b4 <usart_init+0x264>)
   2b6dc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2b6de:	2347      	movs	r3, #71	; 0x47
   2b6e0:	18fb      	adds	r3, r7, r3
   2b6e2:	781a      	ldrb	r2, [r3, #0]
   2b6e4:	2347      	movs	r3, #71	; 0x47
   2b6e6:	18fb      	adds	r3, r7, r3
   2b6e8:	3201      	adds	r2, #1
   2b6ea:	701a      	strb	r2, [r3, #0]
   2b6ec:	2347      	movs	r3, #71	; 0x47
   2b6ee:	18fb      	adds	r3, r7, r3
   2b6f0:	781b      	ldrb	r3, [r3, #0]
   2b6f2:	2b03      	cmp	r3, #3
   2b6f4:	d9cd      	bls.n	2b692 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2b6f6:	2300      	movs	r3, #0
   2b6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b6fa:	e00a      	b.n	2b712 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   2b6fc:	68fa      	ldr	r2, [r7, #12]
   2b6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b700:	3302      	adds	r3, #2
   2b702:	009b      	lsls	r3, r3, #2
   2b704:	18d3      	adds	r3, r2, r3
   2b706:	3304      	adds	r3, #4
   2b708:	2200      	movs	r2, #0
   2b70a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2b70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b70e:	3301      	adds	r3, #1
   2b710:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b714:	2b05      	cmp	r3, #5
   2b716:	d9f1      	bls.n	2b6fc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   2b718:	68fb      	ldr	r3, [r7, #12]
   2b71a:	2200      	movs	r2, #0
   2b71c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   2b71e:	68fb      	ldr	r3, [r7, #12]
   2b720:	2200      	movs	r2, #0
   2b722:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   2b724:	68fb      	ldr	r3, [r7, #12]
   2b726:	2200      	movs	r2, #0
   2b728:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2b72a:	68fb      	ldr	r3, [r7, #12]
   2b72c:	2200      	movs	r2, #0
   2b72e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   2b730:	68fb      	ldr	r3, [r7, #12]
   2b732:	2230      	movs	r2, #48	; 0x30
   2b734:	2100      	movs	r1, #0
   2b736:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   2b738:	68fb      	ldr	r3, [r7, #12]
   2b73a:	2231      	movs	r2, #49	; 0x31
   2b73c:	2100      	movs	r1, #0
   2b73e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   2b740:	68fb      	ldr	r3, [r7, #12]
   2b742:	2232      	movs	r2, #50	; 0x32
   2b744:	2100      	movs	r1, #0
   2b746:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   2b748:	68fb      	ldr	r3, [r7, #12]
   2b74a:	2233      	movs	r2, #51	; 0x33
   2b74c:	2100      	movs	r1, #0
   2b74e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   2b750:	68fb      	ldr	r3, [r7, #12]
   2b752:	681b      	ldr	r3, [r3, #0]
   2b754:	2227      	movs	r2, #39	; 0x27
   2b756:	18bc      	adds	r4, r7, r2
   2b758:	0018      	movs	r0, r3
   2b75a:	4b0d      	ldr	r3, [pc, #52]	; (2b790 <usart_init+0x240>)
   2b75c:	4798      	blx	r3
   2b75e:	0003      	movs	r3, r0
   2b760:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   2b762:	4a15      	ldr	r2, [pc, #84]	; (2b7b8 <usart_init+0x268>)
   2b764:	2327      	movs	r3, #39	; 0x27
   2b766:	18fb      	adds	r3, r7, r3
   2b768:	781b      	ldrb	r3, [r3, #0]
   2b76a:	0011      	movs	r1, r2
   2b76c:	0018      	movs	r0, r3
   2b76e:	4b13      	ldr	r3, [pc, #76]	; (2b7bc <usart_init+0x26c>)
   2b770:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2b772:	2327      	movs	r3, #39	; 0x27
   2b774:	18fb      	adds	r3, r7, r3
   2b776:	781a      	ldrb	r2, [r3, #0]
   2b778:	4b11      	ldr	r3, [pc, #68]	; (2b7c0 <usart_init+0x270>)
   2b77a:	0092      	lsls	r2, r2, #2
   2b77c:	68f9      	ldr	r1, [r7, #12]
   2b77e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   2b780:	233b      	movs	r3, #59	; 0x3b
   2b782:	18fb      	adds	r3, r7, r3
   2b784:	781b      	ldrb	r3, [r3, #0]
}
   2b786:	0018      	movs	r0, r3
   2b788:	46bd      	mov	sp, r7
   2b78a:	b013      	add	sp, #76	; 0x4c
   2b78c:	bd90      	pop	{r4, r7, pc}
   2b78e:	46c0      	nop			; (mov r8, r8)
   2b790:	0002a01d 	.word	0x0002a01d
   2b794:	0002b18d 	.word	0x0002b18d
   2b798:	0002b175 	.word	0x0002b175
   2b79c:	0002c8ad 	.word	0x0002c8ad
   2b7a0:	0002c8f1 	.word	0x0002c8f1
   2b7a4:	00029dd5 	.word	0x00029dd5
   2b7a8:	0002b275 	.word	0x0002b275
   2b7ac:	0002b1e9 	.word	0x0002b1e9
   2b7b0:	00029e61 	.word	0x00029e61
   2b7b4:	0002cc0d 	.word	0x0002cc0d
   2b7b8:	0002ba2d 	.word	0x0002ba2d
   2b7bc:	0002a081 	.word	0x0002a081
   2b7c0:	20005b90 	.word	0x20005b90

0002b7c4 <system_interrupt_enter_critical_section>:
{
   2b7c4:	b580      	push	{r7, lr}
   2b7c6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2b7c8:	4b02      	ldr	r3, [pc, #8]	; (2b7d4 <system_interrupt_enter_critical_section+0x10>)
   2b7ca:	4798      	blx	r3
}
   2b7cc:	46c0      	nop			; (mov r8, r8)
   2b7ce:	46bd      	mov	sp, r7
   2b7d0:	bd80      	pop	{r7, pc}
   2b7d2:	46c0      	nop			; (mov r8, r8)
   2b7d4:	00028c19 	.word	0x00028c19

0002b7d8 <system_interrupt_leave_critical_section>:
{
   2b7d8:	b580      	push	{r7, lr}
   2b7da:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2b7dc:	4b02      	ldr	r3, [pc, #8]	; (2b7e8 <system_interrupt_leave_critical_section+0x10>)
   2b7de:	4798      	blx	r3
}
   2b7e0:	46c0      	nop			; (mov r8, r8)
   2b7e2:	46bd      	mov	sp, r7
   2b7e4:	bd80      	pop	{r7, pc}
   2b7e6:	46c0      	nop			; (mov r8, r8)
   2b7e8:	00028c6d 	.word	0x00028c6d

0002b7ec <usart_is_syncing>:
{
   2b7ec:	b580      	push	{r7, lr}
   2b7ee:	b084      	sub	sp, #16
   2b7f0:	af00      	add	r7, sp, #0
   2b7f2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b7f4:	687b      	ldr	r3, [r7, #4]
   2b7f6:	681b      	ldr	r3, [r3, #0]
   2b7f8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2b7fa:	68fb      	ldr	r3, [r7, #12]
   2b7fc:	69db      	ldr	r3, [r3, #28]
   2b7fe:	1e5a      	subs	r2, r3, #1
   2b800:	4193      	sbcs	r3, r2
   2b802:	b2db      	uxtb	r3, r3
}
   2b804:	0018      	movs	r0, r3
   2b806:	46bd      	mov	sp, r7
   2b808:	b004      	add	sp, #16
   2b80a:	bd80      	pop	{r7, pc}

0002b80c <_usart_wait_for_sync>:
{
   2b80c:	b580      	push	{r7, lr}
   2b80e:	b082      	sub	sp, #8
   2b810:	af00      	add	r7, sp, #0
   2b812:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2b814:	46c0      	nop			; (mov r8, r8)
   2b816:	687b      	ldr	r3, [r7, #4]
   2b818:	0018      	movs	r0, r3
   2b81a:	4b04      	ldr	r3, [pc, #16]	; (2b82c <_usart_wait_for_sync+0x20>)
   2b81c:	4798      	blx	r3
   2b81e:	1e03      	subs	r3, r0, #0
   2b820:	d1f9      	bne.n	2b816 <_usart_wait_for_sync+0xa>
}
   2b822:	46c0      	nop			; (mov r8, r8)
   2b824:	46bd      	mov	sp, r7
   2b826:	b002      	add	sp, #8
   2b828:	bd80      	pop	{r7, pc}
   2b82a:	46c0      	nop			; (mov r8, r8)
   2b82c:	0002b7ed 	.word	0x0002b7ed

0002b830 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2b830:	b580      	push	{r7, lr}
   2b832:	b086      	sub	sp, #24
   2b834:	af00      	add	r7, sp, #0
   2b836:	60f8      	str	r0, [r7, #12]
   2b838:	60b9      	str	r1, [r7, #8]
   2b83a:	1dbb      	adds	r3, r7, #6
   2b83c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b83e:	68fb      	ldr	r3, [r7, #12]
   2b840:	681b      	ldr	r3, [r3, #0]
   2b842:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2b844:	4b0f      	ldr	r3, [pc, #60]	; (2b884 <_usart_write_buffer+0x54>)
   2b846:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   2b848:	68fb      	ldr	r3, [r7, #12]
   2b84a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2b84c:	b29b      	uxth	r3, r3
   2b84e:	2b00      	cmp	r3, #0
   2b850:	d003      	beq.n	2b85a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2b852:	4b0d      	ldr	r3, [pc, #52]	; (2b888 <_usart_write_buffer+0x58>)
   2b854:	4798      	blx	r3
		return STATUS_BUSY;
   2b856:	2305      	movs	r3, #5
   2b858:	e010      	b.n	2b87c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2b85a:	68fb      	ldr	r3, [r7, #12]
   2b85c:	1dba      	adds	r2, r7, #6
   2b85e:	8812      	ldrh	r2, [r2, #0]
   2b860:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   2b862:	4b09      	ldr	r3, [pc, #36]	; (2b888 <_usart_write_buffer+0x58>)
   2b864:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   2b866:	68fb      	ldr	r3, [r7, #12]
   2b868:	68ba      	ldr	r2, [r7, #8]
   2b86a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2b86c:	68fb      	ldr	r3, [r7, #12]
   2b86e:	2233      	movs	r2, #51	; 0x33
   2b870:	2105      	movs	r1, #5
   2b872:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   2b874:	697b      	ldr	r3, [r7, #20]
   2b876:	2201      	movs	r2, #1
   2b878:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2b87a:	2300      	movs	r3, #0
}
   2b87c:	0018      	movs	r0, r3
   2b87e:	46bd      	mov	sp, r7
   2b880:	b006      	add	sp, #24
   2b882:	bd80      	pop	{r7, pc}
   2b884:	0002b7c5 	.word	0x0002b7c5
   2b888:	0002b7d9 	.word	0x0002b7d9

0002b88c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2b88c:	b580      	push	{r7, lr}
   2b88e:	b086      	sub	sp, #24
   2b890:	af00      	add	r7, sp, #0
   2b892:	60f8      	str	r0, [r7, #12]
   2b894:	60b9      	str	r1, [r7, #8]
   2b896:	1dbb      	adds	r3, r7, #6
   2b898:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b89a:	68fb      	ldr	r3, [r7, #12]
   2b89c:	681b      	ldr	r3, [r3, #0]
   2b89e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2b8a0:	4b16      	ldr	r3, [pc, #88]	; (2b8fc <_usart_read_buffer+0x70>)
   2b8a2:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   2b8a4:	68fb      	ldr	r3, [r7, #12]
   2b8a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2b8a8:	b29b      	uxth	r3, r3
   2b8aa:	2b00      	cmp	r3, #0
   2b8ac:	d003      	beq.n	2b8b6 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2b8ae:	4b14      	ldr	r3, [pc, #80]	; (2b900 <_usart_read_buffer+0x74>)
   2b8b0:	4798      	blx	r3
		return STATUS_BUSY;
   2b8b2:	2305      	movs	r3, #5
   2b8b4:	e01e      	b.n	2b8f4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   2b8b6:	68fb      	ldr	r3, [r7, #12]
   2b8b8:	1dba      	adds	r2, r7, #6
   2b8ba:	8812      	ldrh	r2, [r2, #0]
   2b8bc:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2b8be:	4b10      	ldr	r3, [pc, #64]	; (2b900 <_usart_read_buffer+0x74>)
   2b8c0:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   2b8c2:	68fb      	ldr	r3, [r7, #12]
   2b8c4:	68ba      	ldr	r2, [r7, #8]
   2b8c6:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   2b8c8:	68fb      	ldr	r3, [r7, #12]
   2b8ca:	2232      	movs	r2, #50	; 0x32
   2b8cc:	2105      	movs	r1, #5
   2b8ce:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   2b8d0:	697b      	ldr	r3, [r7, #20]
   2b8d2:	2204      	movs	r2, #4
   2b8d4:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   2b8d6:	68fb      	ldr	r3, [r7, #12]
   2b8d8:	7a1b      	ldrb	r3, [r3, #8]
   2b8da:	2b00      	cmp	r3, #0
   2b8dc:	d002      	beq.n	2b8e4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   2b8de:	697b      	ldr	r3, [r7, #20]
   2b8e0:	2220      	movs	r2, #32
   2b8e2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   2b8e4:	68fb      	ldr	r3, [r7, #12]
   2b8e6:	7a5b      	ldrb	r3, [r3, #9]
   2b8e8:	2b00      	cmp	r3, #0
   2b8ea:	d002      	beq.n	2b8f2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   2b8ec:	697b      	ldr	r3, [r7, #20]
   2b8ee:	2208      	movs	r2, #8
   2b8f0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   2b8f2:	2300      	movs	r3, #0
}
   2b8f4:	0018      	movs	r0, r3
   2b8f6:	46bd      	mov	sp, r7
   2b8f8:	b006      	add	sp, #24
   2b8fa:	bd80      	pop	{r7, pc}
   2b8fc:	0002b7c5 	.word	0x0002b7c5
   2b900:	0002b7d9 	.word	0x0002b7d9

0002b904 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   2b904:	b580      	push	{r7, lr}
   2b906:	b084      	sub	sp, #16
   2b908:	af00      	add	r7, sp, #0
   2b90a:	60f8      	str	r0, [r7, #12]
   2b90c:	60b9      	str	r1, [r7, #8]
   2b90e:	1dfb      	adds	r3, r7, #7
   2b910:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2b912:	1dfb      	adds	r3, r7, #7
   2b914:	781b      	ldrb	r3, [r3, #0]
   2b916:	68fa      	ldr	r2, [r7, #12]
   2b918:	3302      	adds	r3, #2
   2b91a:	009b      	lsls	r3, r3, #2
   2b91c:	18d3      	adds	r3, r2, r3
   2b91e:	3304      	adds	r3, #4
   2b920:	68ba      	ldr	r2, [r7, #8]
   2b922:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   2b924:	68fb      	ldr	r3, [r7, #12]
   2b926:	2230      	movs	r2, #48	; 0x30
   2b928:	5c9b      	ldrb	r3, [r3, r2]
   2b92a:	b25a      	sxtb	r2, r3
   2b92c:	1dfb      	adds	r3, r7, #7
   2b92e:	781b      	ldrb	r3, [r3, #0]
   2b930:	2101      	movs	r1, #1
   2b932:	4099      	lsls	r1, r3
   2b934:	000b      	movs	r3, r1
   2b936:	b25b      	sxtb	r3, r3
   2b938:	4313      	orrs	r3, r2
   2b93a:	b25b      	sxtb	r3, r3
   2b93c:	b2d9      	uxtb	r1, r3
   2b93e:	68fb      	ldr	r3, [r7, #12]
   2b940:	2230      	movs	r2, #48	; 0x30
   2b942:	5499      	strb	r1, [r3, r2]
}
   2b944:	46c0      	nop			; (mov r8, r8)
   2b946:	46bd      	mov	sp, r7
   2b948:	b004      	add	sp, #16
   2b94a:	bd80      	pop	{r7, pc}

0002b94c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2b94c:	b580      	push	{r7, lr}
   2b94e:	b084      	sub	sp, #16
   2b950:	af00      	add	r7, sp, #0
   2b952:	60f8      	str	r0, [r7, #12]
   2b954:	60b9      	str	r1, [r7, #8]
   2b956:	1dbb      	adds	r3, r7, #6
   2b958:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2b95a:	1dbb      	adds	r3, r7, #6
   2b95c:	881b      	ldrh	r3, [r3, #0]
   2b95e:	2b00      	cmp	r3, #0
   2b960:	d101      	bne.n	2b966 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2b962:	2317      	movs	r3, #23
   2b964:	e010      	b.n	2b988 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   2b966:	68fb      	ldr	r3, [r7, #12]
   2b968:	79db      	ldrb	r3, [r3, #7]
   2b96a:	2201      	movs	r2, #1
   2b96c:	4053      	eors	r3, r2
   2b96e:	b2db      	uxtb	r3, r3
   2b970:	2b00      	cmp	r3, #0
   2b972:	d001      	beq.n	2b978 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2b974:	231c      	movs	r3, #28
   2b976:	e007      	b.n	2b988 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   2b978:	1dbb      	adds	r3, r7, #6
   2b97a:	881a      	ldrh	r2, [r3, #0]
   2b97c:	68b9      	ldr	r1, [r7, #8]
   2b97e:	68fb      	ldr	r3, [r7, #12]
   2b980:	0018      	movs	r0, r3
   2b982:	4b03      	ldr	r3, [pc, #12]	; (2b990 <usart_write_buffer_job+0x44>)
   2b984:	4798      	blx	r3
   2b986:	0003      	movs	r3, r0
}
   2b988:	0018      	movs	r0, r3
   2b98a:	46bd      	mov	sp, r7
   2b98c:	b004      	add	sp, #16
   2b98e:	bd80      	pop	{r7, pc}
   2b990:	0002b831 	.word	0x0002b831

0002b994 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2b994:	b580      	push	{r7, lr}
   2b996:	b084      	sub	sp, #16
   2b998:	af00      	add	r7, sp, #0
   2b99a:	60f8      	str	r0, [r7, #12]
   2b99c:	60b9      	str	r1, [r7, #8]
   2b99e:	1dbb      	adds	r3, r7, #6
   2b9a0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   2b9a2:	1dbb      	adds	r3, r7, #6
   2b9a4:	881b      	ldrh	r3, [r3, #0]
   2b9a6:	2b00      	cmp	r3, #0
   2b9a8:	d101      	bne.n	2b9ae <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2b9aa:	2317      	movs	r3, #23
   2b9ac:	e010      	b.n	2b9d0 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2b9ae:	68fb      	ldr	r3, [r7, #12]
   2b9b0:	799b      	ldrb	r3, [r3, #6]
   2b9b2:	2201      	movs	r2, #1
   2b9b4:	4053      	eors	r3, r2
   2b9b6:	b2db      	uxtb	r3, r3
   2b9b8:	2b00      	cmp	r3, #0
   2b9ba:	d001      	beq.n	2b9c0 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2b9bc:	231c      	movs	r3, #28
   2b9be:	e007      	b.n	2b9d0 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   2b9c0:	1dbb      	adds	r3, r7, #6
   2b9c2:	881a      	ldrh	r2, [r3, #0]
   2b9c4:	68b9      	ldr	r1, [r7, #8]
   2b9c6:	68fb      	ldr	r3, [r7, #12]
   2b9c8:	0018      	movs	r0, r3
   2b9ca:	4b03      	ldr	r3, [pc, #12]	; (2b9d8 <usart_read_buffer_job+0x44>)
   2b9cc:	4798      	blx	r3
   2b9ce:	0003      	movs	r3, r0
}
   2b9d0:	0018      	movs	r0, r3
   2b9d2:	46bd      	mov	sp, r7
   2b9d4:	b004      	add	sp, #16
   2b9d6:	bd80      	pop	{r7, pc}
   2b9d8:	0002b88d 	.word	0x0002b88d

0002b9dc <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   2b9dc:	b580      	push	{r7, lr}
   2b9de:	b084      	sub	sp, #16
   2b9e0:	af00      	add	r7, sp, #0
   2b9e2:	6078      	str	r0, [r7, #4]
   2b9e4:	000a      	movs	r2, r1
   2b9e6:	1cfb      	adds	r3, r7, #3
   2b9e8:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2b9ea:	1cfb      	adds	r3, r7, #3
   2b9ec:	781b      	ldrb	r3, [r3, #0]
   2b9ee:	2b00      	cmp	r3, #0
   2b9f0:	d002      	beq.n	2b9f8 <usart_get_job_status+0x1c>
   2b9f2:	2b01      	cmp	r3, #1
   2b9f4:	d007      	beq.n	2ba06 <usart_get_job_status+0x2a>
   2b9f6:	e00d      	b.n	2ba14 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   2b9f8:	230f      	movs	r3, #15
   2b9fa:	18fb      	adds	r3, r7, r3
   2b9fc:	687a      	ldr	r2, [r7, #4]
   2b9fe:	2132      	movs	r1, #50	; 0x32
   2ba00:	5c52      	ldrb	r2, [r2, r1]
   2ba02:	701a      	strb	r2, [r3, #0]
			break;
   2ba04:	e00b      	b.n	2ba1e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   2ba06:	230f      	movs	r3, #15
   2ba08:	18fb      	adds	r3, r7, r3
   2ba0a:	687a      	ldr	r2, [r7, #4]
   2ba0c:	2133      	movs	r1, #51	; 0x33
   2ba0e:	5c52      	ldrb	r2, [r2, r1]
   2ba10:	701a      	strb	r2, [r3, #0]
			break;
   2ba12:	e004      	b.n	2ba1e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   2ba14:	230f      	movs	r3, #15
   2ba16:	18fb      	adds	r3, r7, r3
   2ba18:	2217      	movs	r2, #23
   2ba1a:	701a      	strb	r2, [r3, #0]
			break;
   2ba1c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   2ba1e:	230f      	movs	r3, #15
   2ba20:	18fb      	adds	r3, r7, r3
   2ba22:	781b      	ldrb	r3, [r3, #0]
}
   2ba24:	0018      	movs	r0, r3
   2ba26:	46bd      	mov	sp, r7
   2ba28:	b004      	add	sp, #16
   2ba2a:	bd80      	pop	{r7, pc}

0002ba2c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   2ba2c:	b580      	push	{r7, lr}
   2ba2e:	b088      	sub	sp, #32
   2ba30:	af00      	add	r7, sp, #0
   2ba32:	0002      	movs	r2, r0
   2ba34:	1dfb      	adds	r3, r7, #7
   2ba36:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   2ba38:	1dfb      	adds	r3, r7, #7
   2ba3a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   2ba3c:	4ba3      	ldr	r3, [pc, #652]	; (2bccc <_usart_interrupt_handler+0x2a0>)
   2ba3e:	0092      	lsls	r2, r2, #2
   2ba40:	58d3      	ldr	r3, [r2, r3]
   2ba42:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   2ba44:	69bb      	ldr	r3, [r7, #24]
   2ba46:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   2ba48:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2ba4a:	69bb      	ldr	r3, [r7, #24]
   2ba4c:	0018      	movs	r0, r3
   2ba4e:	4ba0      	ldr	r3, [pc, #640]	; (2bcd0 <_usart_interrupt_handler+0x2a4>)
   2ba50:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   2ba52:	697b      	ldr	r3, [r7, #20]
   2ba54:	7e1b      	ldrb	r3, [r3, #24]
   2ba56:	b2da      	uxtb	r2, r3
   2ba58:	2312      	movs	r3, #18
   2ba5a:	18fb      	adds	r3, r7, r3
   2ba5c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2ba5e:	697b      	ldr	r3, [r7, #20]
   2ba60:	7d9b      	ldrb	r3, [r3, #22]
   2ba62:	b2db      	uxtb	r3, r3
   2ba64:	b29a      	uxth	r2, r3
   2ba66:	2312      	movs	r3, #18
   2ba68:	18fb      	adds	r3, r7, r3
   2ba6a:	2112      	movs	r1, #18
   2ba6c:	1879      	adds	r1, r7, r1
   2ba6e:	8809      	ldrh	r1, [r1, #0]
   2ba70:	400a      	ands	r2, r1
   2ba72:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   2ba74:	69bb      	ldr	r3, [r7, #24]
   2ba76:	2230      	movs	r2, #48	; 0x30
   2ba78:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2ba7a:	69ba      	ldr	r2, [r7, #24]
   2ba7c:	2131      	movs	r1, #49	; 0x31
   2ba7e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   2ba80:	4013      	ands	r3, r2
   2ba82:	b2da      	uxtb	r2, r3
   2ba84:	2310      	movs	r3, #16
   2ba86:	18fb      	adds	r3, r7, r3
   2ba88:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   2ba8a:	2312      	movs	r3, #18
   2ba8c:	18fb      	adds	r3, r7, r3
   2ba8e:	881b      	ldrh	r3, [r3, #0]
   2ba90:	2201      	movs	r2, #1
   2ba92:	4013      	ands	r3, r2
   2ba94:	d044      	beq.n	2bb20 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   2ba96:	69bb      	ldr	r3, [r7, #24]
   2ba98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2ba9a:	b29b      	uxth	r3, r3
   2ba9c:	2b00      	cmp	r3, #0
   2ba9e:	d03c      	beq.n	2bb1a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   2baa0:	69bb      	ldr	r3, [r7, #24]
   2baa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2baa4:	781b      	ldrb	r3, [r3, #0]
   2baa6:	b2da      	uxtb	r2, r3
   2baa8:	231c      	movs	r3, #28
   2baaa:	18fb      	adds	r3, r7, r3
   2baac:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2baae:	69bb      	ldr	r3, [r7, #24]
   2bab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2bab2:	1c5a      	adds	r2, r3, #1
   2bab4:	69bb      	ldr	r3, [r7, #24]
   2bab6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2bab8:	69bb      	ldr	r3, [r7, #24]
   2baba:	795b      	ldrb	r3, [r3, #5]
   2babc:	2b01      	cmp	r3, #1
   2babe:	d113      	bne.n	2bae8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   2bac0:	69bb      	ldr	r3, [r7, #24]
   2bac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2bac4:	781b      	ldrb	r3, [r3, #0]
   2bac6:	b2db      	uxtb	r3, r3
   2bac8:	021b      	lsls	r3, r3, #8
   2baca:	b21a      	sxth	r2, r3
   2bacc:	231c      	movs	r3, #28
   2bace:	18fb      	adds	r3, r7, r3
   2bad0:	2100      	movs	r1, #0
   2bad2:	5e5b      	ldrsh	r3, [r3, r1]
   2bad4:	4313      	orrs	r3, r2
   2bad6:	b21a      	sxth	r2, r3
   2bad8:	231c      	movs	r3, #28
   2bada:	18fb      	adds	r3, r7, r3
   2badc:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2bade:	69bb      	ldr	r3, [r7, #24]
   2bae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2bae2:	1c5a      	adds	r2, r3, #1
   2bae4:	69bb      	ldr	r3, [r7, #24]
   2bae6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   2bae8:	231c      	movs	r3, #28
   2baea:	18fb      	adds	r3, r7, r3
   2baec:	881b      	ldrh	r3, [r3, #0]
   2baee:	05db      	lsls	r3, r3, #23
   2baf0:	0ddb      	lsrs	r3, r3, #23
   2baf2:	b29a      	uxth	r2, r3
   2baf4:	697b      	ldr	r3, [r7, #20]
   2baf6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   2baf8:	69bb      	ldr	r3, [r7, #24]
   2bafa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2bafc:	b29b      	uxth	r3, r3
   2bafe:	3b01      	subs	r3, #1
   2bb00:	b29b      	uxth	r3, r3
   2bb02:	69ba      	ldr	r2, [r7, #24]
   2bb04:	1c19      	adds	r1, r3, #0
   2bb06:	85d1      	strh	r1, [r2, #46]	; 0x2e
   2bb08:	2b00      	cmp	r3, #0
   2bb0a:	d109      	bne.n	2bb20 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2bb0c:	697b      	ldr	r3, [r7, #20]
   2bb0e:	2201      	movs	r2, #1
   2bb10:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   2bb12:	697b      	ldr	r3, [r7, #20]
   2bb14:	2202      	movs	r2, #2
   2bb16:	759a      	strb	r2, [r3, #22]
   2bb18:	e002      	b.n	2bb20 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2bb1a:	697b      	ldr	r3, [r7, #20]
   2bb1c:	2201      	movs	r2, #1
   2bb1e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   2bb20:	2312      	movs	r3, #18
   2bb22:	18fb      	adds	r3, r7, r3
   2bb24:	881b      	ldrh	r3, [r3, #0]
   2bb26:	2202      	movs	r2, #2
   2bb28:	4013      	ands	r3, r2
   2bb2a:	d011      	beq.n	2bb50 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2bb2c:	697b      	ldr	r3, [r7, #20]
   2bb2e:	2202      	movs	r2, #2
   2bb30:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   2bb32:	69bb      	ldr	r3, [r7, #24]
   2bb34:	2233      	movs	r2, #51	; 0x33
   2bb36:	2100      	movs	r1, #0
   2bb38:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2bb3a:	2310      	movs	r3, #16
   2bb3c:	18fb      	adds	r3, r7, r3
   2bb3e:	881b      	ldrh	r3, [r3, #0]
   2bb40:	2201      	movs	r2, #1
   2bb42:	4013      	ands	r3, r2
   2bb44:	d004      	beq.n	2bb50 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   2bb46:	69bb      	ldr	r3, [r7, #24]
   2bb48:	68db      	ldr	r3, [r3, #12]
   2bb4a:	69ba      	ldr	r2, [r7, #24]
   2bb4c:	0010      	movs	r0, r2
   2bb4e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   2bb50:	2312      	movs	r3, #18
   2bb52:	18fb      	adds	r3, r7, r3
   2bb54:	881b      	ldrh	r3, [r3, #0]
   2bb56:	2204      	movs	r2, #4
   2bb58:	4013      	ands	r3, r2
   2bb5a:	d100      	bne.n	2bb5e <_usart_interrupt_handler+0x132>
   2bb5c:	e0bd      	b.n	2bcda <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2bb5e:	69bb      	ldr	r3, [r7, #24]
   2bb60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2bb62:	b29b      	uxth	r3, r3
   2bb64:	2b00      	cmp	r3, #0
   2bb66:	d100      	bne.n	2bb6a <_usart_interrupt_handler+0x13e>
   2bb68:	e0b4      	b.n	2bcd4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2bb6a:	697b      	ldr	r3, [r7, #20]
   2bb6c:	8b5b      	ldrh	r3, [r3, #26]
   2bb6e:	b29b      	uxth	r3, r3
   2bb70:	b2da      	uxtb	r2, r3
   2bb72:	231f      	movs	r3, #31
   2bb74:	18fb      	adds	r3, r7, r3
   2bb76:	213f      	movs	r1, #63	; 0x3f
   2bb78:	400a      	ands	r2, r1
   2bb7a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   2bb7c:	231f      	movs	r3, #31
   2bb7e:	18fb      	adds	r3, r7, r3
   2bb80:	781b      	ldrb	r3, [r3, #0]
   2bb82:	2208      	movs	r2, #8
   2bb84:	4013      	ands	r3, r2
   2bb86:	d007      	beq.n	2bb98 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   2bb88:	231f      	movs	r3, #31
   2bb8a:	18fb      	adds	r3, r7, r3
   2bb8c:	221f      	movs	r2, #31
   2bb8e:	18ba      	adds	r2, r7, r2
   2bb90:	7812      	ldrb	r2, [r2, #0]
   2bb92:	2108      	movs	r1, #8
   2bb94:	438a      	bics	r2, r1
   2bb96:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   2bb98:	231f      	movs	r3, #31
   2bb9a:	18fb      	adds	r3, r7, r3
   2bb9c:	781b      	ldrb	r3, [r3, #0]
   2bb9e:	2b00      	cmp	r3, #0
   2bba0:	d050      	beq.n	2bc44 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   2bba2:	231f      	movs	r3, #31
   2bba4:	18fb      	adds	r3, r7, r3
   2bba6:	781b      	ldrb	r3, [r3, #0]
   2bba8:	2202      	movs	r2, #2
   2bbaa:	4013      	ands	r3, r2
   2bbac:	d007      	beq.n	2bbbe <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2bbae:	69bb      	ldr	r3, [r7, #24]
   2bbb0:	2232      	movs	r2, #50	; 0x32
   2bbb2:	211a      	movs	r1, #26
   2bbb4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   2bbb6:	697b      	ldr	r3, [r7, #20]
   2bbb8:	2202      	movs	r2, #2
   2bbba:	835a      	strh	r2, [r3, #26]
   2bbbc:	e036      	b.n	2bc2c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2bbbe:	231f      	movs	r3, #31
   2bbc0:	18fb      	adds	r3, r7, r3
   2bbc2:	781b      	ldrb	r3, [r3, #0]
   2bbc4:	2204      	movs	r2, #4
   2bbc6:	4013      	ands	r3, r2
   2bbc8:	d007      	beq.n	2bbda <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2bbca:	69bb      	ldr	r3, [r7, #24]
   2bbcc:	2232      	movs	r2, #50	; 0x32
   2bbce:	211e      	movs	r1, #30
   2bbd0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   2bbd2:	697b      	ldr	r3, [r7, #20]
   2bbd4:	2204      	movs	r2, #4
   2bbd6:	835a      	strh	r2, [r3, #26]
   2bbd8:	e028      	b.n	2bc2c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2bbda:	231f      	movs	r3, #31
   2bbdc:	18fb      	adds	r3, r7, r3
   2bbde:	781b      	ldrb	r3, [r3, #0]
   2bbe0:	2201      	movs	r2, #1
   2bbe2:	4013      	ands	r3, r2
   2bbe4:	d007      	beq.n	2bbf6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   2bbe6:	69bb      	ldr	r3, [r7, #24]
   2bbe8:	2232      	movs	r2, #50	; 0x32
   2bbea:	2113      	movs	r1, #19
   2bbec:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2bbee:	697b      	ldr	r3, [r7, #20]
   2bbf0:	2201      	movs	r2, #1
   2bbf2:	835a      	strh	r2, [r3, #26]
   2bbf4:	e01a      	b.n	2bc2c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   2bbf6:	231f      	movs	r3, #31
   2bbf8:	18fb      	adds	r3, r7, r3
   2bbfa:	781b      	ldrb	r3, [r3, #0]
   2bbfc:	2210      	movs	r2, #16
   2bbfe:	4013      	ands	r3, r2
   2bc00:	d007      	beq.n	2bc12 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   2bc02:	69bb      	ldr	r3, [r7, #24]
   2bc04:	2232      	movs	r2, #50	; 0x32
   2bc06:	2142      	movs	r1, #66	; 0x42
   2bc08:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2bc0a:	697b      	ldr	r3, [r7, #20]
   2bc0c:	2210      	movs	r2, #16
   2bc0e:	835a      	strh	r2, [r3, #26]
   2bc10:	e00c      	b.n	2bc2c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   2bc12:	231f      	movs	r3, #31
   2bc14:	18fb      	adds	r3, r7, r3
   2bc16:	781b      	ldrb	r3, [r3, #0]
   2bc18:	2220      	movs	r2, #32
   2bc1a:	4013      	ands	r3, r2
   2bc1c:	d006      	beq.n	2bc2c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2bc1e:	69bb      	ldr	r3, [r7, #24]
   2bc20:	2232      	movs	r2, #50	; 0x32
   2bc22:	2141      	movs	r1, #65	; 0x41
   2bc24:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   2bc26:	697b      	ldr	r3, [r7, #20]
   2bc28:	2220      	movs	r2, #32
   2bc2a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2bc2c:	2310      	movs	r3, #16
   2bc2e:	18fb      	adds	r3, r7, r3
   2bc30:	881b      	ldrh	r3, [r3, #0]
   2bc32:	2204      	movs	r2, #4
   2bc34:	4013      	ands	r3, r2
				if (callback_status
   2bc36:	d050      	beq.n	2bcda <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   2bc38:	69bb      	ldr	r3, [r7, #24]
   2bc3a:	695b      	ldr	r3, [r3, #20]
   2bc3c:	69ba      	ldr	r2, [r7, #24]
   2bc3e:	0010      	movs	r0, r2
   2bc40:	4798      	blx	r3
   2bc42:	e04a      	b.n	2bcda <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   2bc44:	697b      	ldr	r3, [r7, #20]
   2bc46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   2bc48:	b29a      	uxth	r2, r3
   2bc4a:	230e      	movs	r3, #14
   2bc4c:	18fb      	adds	r3, r7, r3
   2bc4e:	05d2      	lsls	r2, r2, #23
   2bc50:	0dd2      	lsrs	r2, r2, #23
   2bc52:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   2bc54:	69bb      	ldr	r3, [r7, #24]
   2bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bc58:	220e      	movs	r2, #14
   2bc5a:	18ba      	adds	r2, r7, r2
   2bc5c:	8812      	ldrh	r2, [r2, #0]
   2bc5e:	b2d2      	uxtb	r2, r2
   2bc60:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   2bc62:	69bb      	ldr	r3, [r7, #24]
   2bc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bc66:	1c5a      	adds	r2, r3, #1
   2bc68:	69bb      	ldr	r3, [r7, #24]
   2bc6a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2bc6c:	69bb      	ldr	r3, [r7, #24]
   2bc6e:	795b      	ldrb	r3, [r3, #5]
   2bc70:	2b01      	cmp	r3, #1
   2bc72:	d10d      	bne.n	2bc90 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   2bc74:	69bb      	ldr	r3, [r7, #24]
   2bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bc78:	220e      	movs	r2, #14
   2bc7a:	18ba      	adds	r2, r7, r2
   2bc7c:	8812      	ldrh	r2, [r2, #0]
   2bc7e:	0a12      	lsrs	r2, r2, #8
   2bc80:	b292      	uxth	r2, r2
   2bc82:	b2d2      	uxtb	r2, r2
   2bc84:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   2bc86:	69bb      	ldr	r3, [r7, #24]
   2bc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bc8a:	1c5a      	adds	r2, r3, #1
   2bc8c:	69bb      	ldr	r3, [r7, #24]
   2bc8e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   2bc90:	69bb      	ldr	r3, [r7, #24]
   2bc92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2bc94:	b29b      	uxth	r3, r3
   2bc96:	3b01      	subs	r3, #1
   2bc98:	b29b      	uxth	r3, r3
   2bc9a:	69ba      	ldr	r2, [r7, #24]
   2bc9c:	1c19      	adds	r1, r3, #0
   2bc9e:	8591      	strh	r1, [r2, #44]	; 0x2c
   2bca0:	2b00      	cmp	r3, #0
   2bca2:	d11a      	bne.n	2bcda <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2bca4:	697b      	ldr	r3, [r7, #20]
   2bca6:	2204      	movs	r2, #4
   2bca8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2bcaa:	69bb      	ldr	r3, [r7, #24]
   2bcac:	2232      	movs	r2, #50	; 0x32
   2bcae:	2100      	movs	r1, #0
   2bcb0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   2bcb2:	2310      	movs	r3, #16
   2bcb4:	18fb      	adds	r3, r7, r3
   2bcb6:	881b      	ldrh	r3, [r3, #0]
   2bcb8:	2202      	movs	r2, #2
   2bcba:	4013      	ands	r3, r2
					if (callback_status
   2bcbc:	d00d      	beq.n	2bcda <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2bcbe:	69bb      	ldr	r3, [r7, #24]
   2bcc0:	691b      	ldr	r3, [r3, #16]
   2bcc2:	69ba      	ldr	r2, [r7, #24]
   2bcc4:	0010      	movs	r0, r2
   2bcc6:	4798      	blx	r3
   2bcc8:	e007      	b.n	2bcda <_usart_interrupt_handler+0x2ae>
   2bcca:	46c0      	nop			; (mov r8, r8)
   2bccc:	20005b90 	.word	0x20005b90
   2bcd0:	0002b80d 	.word	0x0002b80d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2bcd4:	697b      	ldr	r3, [r7, #20]
   2bcd6:	2204      	movs	r2, #4
   2bcd8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2bcda:	2312      	movs	r3, #18
   2bcdc:	18fb      	adds	r3, r7, r3
   2bcde:	881b      	ldrh	r3, [r3, #0]
   2bce0:	2210      	movs	r2, #16
   2bce2:	4013      	ands	r3, r2
   2bce4:	d010      	beq.n	2bd08 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2bce6:	697b      	ldr	r3, [r7, #20]
   2bce8:	2210      	movs	r2, #16
   2bcea:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2bcec:	697b      	ldr	r3, [r7, #20]
   2bcee:	2210      	movs	r2, #16
   2bcf0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   2bcf2:	2310      	movs	r3, #16
   2bcf4:	18fb      	adds	r3, r7, r3
   2bcf6:	881b      	ldrh	r3, [r3, #0]
   2bcf8:	2210      	movs	r2, #16
   2bcfa:	4013      	ands	r3, r2
   2bcfc:	d004      	beq.n	2bd08 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2bcfe:	69bb      	ldr	r3, [r7, #24]
   2bd00:	69db      	ldr	r3, [r3, #28]
   2bd02:	69ba      	ldr	r2, [r7, #24]
   2bd04:	0010      	movs	r0, r2
   2bd06:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   2bd08:	2312      	movs	r3, #18
   2bd0a:	18fb      	adds	r3, r7, r3
   2bd0c:	881b      	ldrh	r3, [r3, #0]
   2bd0e:	2220      	movs	r2, #32
   2bd10:	4013      	ands	r3, r2
   2bd12:	d010      	beq.n	2bd36 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   2bd14:	697b      	ldr	r3, [r7, #20]
   2bd16:	2220      	movs	r2, #32
   2bd18:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2bd1a:	697b      	ldr	r3, [r7, #20]
   2bd1c:	2220      	movs	r2, #32
   2bd1e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   2bd20:	2310      	movs	r3, #16
   2bd22:	18fb      	adds	r3, r7, r3
   2bd24:	881b      	ldrh	r3, [r3, #0]
   2bd26:	2208      	movs	r2, #8
   2bd28:	4013      	ands	r3, r2
   2bd2a:	d004      	beq.n	2bd36 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2bd2c:	69bb      	ldr	r3, [r7, #24]
   2bd2e:	699b      	ldr	r3, [r3, #24]
   2bd30:	69ba      	ldr	r2, [r7, #24]
   2bd32:	0010      	movs	r0, r2
   2bd34:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   2bd36:	2312      	movs	r3, #18
   2bd38:	18fb      	adds	r3, r7, r3
   2bd3a:	881b      	ldrh	r3, [r3, #0]
   2bd3c:	2208      	movs	r2, #8
   2bd3e:	4013      	ands	r3, r2
   2bd40:	d010      	beq.n	2bd64 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   2bd42:	697b      	ldr	r3, [r7, #20]
   2bd44:	2208      	movs	r2, #8
   2bd46:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   2bd48:	697b      	ldr	r3, [r7, #20]
   2bd4a:	2208      	movs	r2, #8
   2bd4c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2bd4e:	2310      	movs	r3, #16
   2bd50:	18fb      	adds	r3, r7, r3
   2bd52:	881b      	ldrh	r3, [r3, #0]
   2bd54:	2220      	movs	r2, #32
   2bd56:	4013      	ands	r3, r2
   2bd58:	d004      	beq.n	2bd64 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2bd5a:	69bb      	ldr	r3, [r7, #24]
   2bd5c:	6a1b      	ldr	r3, [r3, #32]
   2bd5e:	69ba      	ldr	r2, [r7, #24]
   2bd60:	0010      	movs	r0, r2
   2bd62:	4798      	blx	r3
		}
	}
#endif
}
   2bd64:	46c0      	nop			; (mov r8, r8)
   2bd66:	46bd      	mov	sp, r7
   2bd68:	b008      	add	sp, #32
   2bd6a:	bd80      	pop	{r7, pc}

0002bd6c <system_gclk_gen_get_config_defaults>:
{
   2bd6c:	b580      	push	{r7, lr}
   2bd6e:	b082      	sub	sp, #8
   2bd70:	af00      	add	r7, sp, #0
   2bd72:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   2bd74:	687b      	ldr	r3, [r7, #4]
   2bd76:	2201      	movs	r2, #1
   2bd78:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2bd7a:	687b      	ldr	r3, [r7, #4]
   2bd7c:	2200      	movs	r2, #0
   2bd7e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   2bd80:	687b      	ldr	r3, [r7, #4]
   2bd82:	2206      	movs	r2, #6
   2bd84:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2bd86:	687b      	ldr	r3, [r7, #4]
   2bd88:	2200      	movs	r2, #0
   2bd8a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   2bd8c:	687b      	ldr	r3, [r7, #4]
   2bd8e:	2200      	movs	r2, #0
   2bd90:	725a      	strb	r2, [r3, #9]
}
   2bd92:	46c0      	nop			; (mov r8, r8)
   2bd94:	46bd      	mov	sp, r7
   2bd96:	b002      	add	sp, #8
   2bd98:	bd80      	pop	{r7, pc}

0002bd9a <system_gclk_chan_get_config_defaults>:
{
   2bd9a:	b580      	push	{r7, lr}
   2bd9c:	b082      	sub	sp, #8
   2bd9e:	af00      	add	r7, sp, #0
   2bda0:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2bda2:	687b      	ldr	r3, [r7, #4]
   2bda4:	2200      	movs	r2, #0
   2bda6:	701a      	strb	r2, [r3, #0]
}
   2bda8:	46c0      	nop			; (mov r8, r8)
   2bdaa:	46bd      	mov	sp, r7
   2bdac:	b002      	add	sp, #8
   2bdae:	bd80      	pop	{r7, pc}

0002bdb0 <system_clock_source_osc8m_get_config_defaults>:
{
   2bdb0:	b580      	push	{r7, lr}
   2bdb2:	b082      	sub	sp, #8
   2bdb4:	af00      	add	r7, sp, #0
   2bdb6:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   2bdb8:	687b      	ldr	r3, [r7, #4]
   2bdba:	2203      	movs	r2, #3
   2bdbc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2bdbe:	687b      	ldr	r3, [r7, #4]
   2bdc0:	2200      	movs	r2, #0
   2bdc2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   2bdc4:	687b      	ldr	r3, [r7, #4]
   2bdc6:	2201      	movs	r2, #1
   2bdc8:	709a      	strb	r2, [r3, #2]
}
   2bdca:	46c0      	nop			; (mov r8, r8)
   2bdcc:	46bd      	mov	sp, r7
   2bdce:	b002      	add	sp, #8
   2bdd0:	bd80      	pop	{r7, pc}
	...

0002bdd4 <system_cpu_clock_set_divider>:
{
   2bdd4:	b580      	push	{r7, lr}
   2bdd6:	b082      	sub	sp, #8
   2bdd8:	af00      	add	r7, sp, #0
   2bdda:	0002      	movs	r2, r0
   2bddc:	1dfb      	adds	r3, r7, #7
   2bdde:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2bde0:	4a03      	ldr	r2, [pc, #12]	; (2bdf0 <system_cpu_clock_set_divider+0x1c>)
   2bde2:	1dfb      	adds	r3, r7, #7
   2bde4:	781b      	ldrb	r3, [r3, #0]
   2bde6:	7213      	strb	r3, [r2, #8]
}
   2bde8:	46c0      	nop			; (mov r8, r8)
   2bdea:	46bd      	mov	sp, r7
   2bdec:	b002      	add	sp, #8
   2bdee:	bd80      	pop	{r7, pc}
   2bdf0:	40000400 	.word	0x40000400

0002bdf4 <system_apb_clock_set_divider>:
{
   2bdf4:	b580      	push	{r7, lr}
   2bdf6:	b082      	sub	sp, #8
   2bdf8:	af00      	add	r7, sp, #0
   2bdfa:	0002      	movs	r2, r0
   2bdfc:	1dfb      	adds	r3, r7, #7
   2bdfe:	701a      	strb	r2, [r3, #0]
   2be00:	1dbb      	adds	r3, r7, #6
   2be02:	1c0a      	adds	r2, r1, #0
   2be04:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2be06:	1dfb      	adds	r3, r7, #7
   2be08:	781b      	ldrb	r3, [r3, #0]
   2be0a:	2b01      	cmp	r3, #1
   2be0c:	d008      	beq.n	2be20 <system_apb_clock_set_divider+0x2c>
   2be0e:	2b02      	cmp	r3, #2
   2be10:	d00b      	beq.n	2be2a <system_apb_clock_set_divider+0x36>
   2be12:	2b00      	cmp	r3, #0
   2be14:	d10e      	bne.n	2be34 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   2be16:	4a0b      	ldr	r2, [pc, #44]	; (2be44 <system_apb_clock_set_divider+0x50>)
   2be18:	1dbb      	adds	r3, r7, #6
   2be1a:	781b      	ldrb	r3, [r3, #0]
   2be1c:	7253      	strb	r3, [r2, #9]
			break;
   2be1e:	e00b      	b.n	2be38 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2be20:	4a08      	ldr	r2, [pc, #32]	; (2be44 <system_apb_clock_set_divider+0x50>)
   2be22:	1dbb      	adds	r3, r7, #6
   2be24:	781b      	ldrb	r3, [r3, #0]
   2be26:	7293      	strb	r3, [r2, #10]
			break;
   2be28:	e006      	b.n	2be38 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2be2a:	4a06      	ldr	r2, [pc, #24]	; (2be44 <system_apb_clock_set_divider+0x50>)
   2be2c:	1dbb      	adds	r3, r7, #6
   2be2e:	781b      	ldrb	r3, [r3, #0]
   2be30:	72d3      	strb	r3, [r2, #11]
			break;
   2be32:	e001      	b.n	2be38 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   2be34:	2317      	movs	r3, #23
   2be36:	e000      	b.n	2be3a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   2be38:	2300      	movs	r3, #0
}
   2be3a:	0018      	movs	r0, r3
   2be3c:	46bd      	mov	sp, r7
   2be3e:	b002      	add	sp, #8
   2be40:	bd80      	pop	{r7, pc}
   2be42:	46c0      	nop			; (mov r8, r8)
   2be44:	40000400 	.word	0x40000400

0002be48 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   2be48:	b580      	push	{r7, lr}
   2be4a:	b082      	sub	sp, #8
   2be4c:	af00      	add	r7, sp, #0
   2be4e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2be50:	687b      	ldr	r3, [r7, #4]
   2be52:	2201      	movs	r2, #1
   2be54:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   2be56:	687b      	ldr	r3, [r7, #4]
   2be58:	2200      	movs	r2, #0
   2be5a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2be5c:	687b      	ldr	r3, [r7, #4]
   2be5e:	2200      	movs	r2, #0
   2be60:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2be62:	687b      	ldr	r3, [r7, #4]
   2be64:	2200      	movs	r2, #0
   2be66:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2be68:	687b      	ldr	r3, [r7, #4]
   2be6a:	2200      	movs	r2, #0
   2be6c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2be6e:	687b      	ldr	r3, [r7, #4]
   2be70:	4a0a      	ldr	r2, [pc, #40]	; (2be9c <system_clock_source_dpll_get_config_defaults+0x54>)
   2be72:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   2be74:	687b      	ldr	r3, [r7, #4]
   2be76:	2280      	movs	r2, #128	; 0x80
   2be78:	0212      	lsls	r2, r2, #8
   2be7a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2be7c:	687b      	ldr	r3, [r7, #4]
   2be7e:	2201      	movs	r2, #1
   2be80:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2be82:	687b      	ldr	r3, [r7, #4]
   2be84:	2200      	movs	r2, #0
   2be86:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   2be88:	687b      	ldr	r3, [r7, #4]
   2be8a:	2200      	movs	r2, #0
   2be8c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2be8e:	687b      	ldr	r3, [r7, #4]
   2be90:	2200      	movs	r2, #0
   2be92:	749a      	strb	r2, [r3, #18]
};
   2be94:	46c0      	nop			; (mov r8, r8)
   2be96:	46bd      	mov	sp, r7
   2be98:	b002      	add	sp, #8
   2be9a:	bd80      	pop	{r7, pc}
   2be9c:	02dc6c00 	.word	0x02dc6c00

0002bea0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2bea0:	b580      	push	{r7, lr}
   2bea2:	b082      	sub	sp, #8
   2bea4:	af00      	add	r7, sp, #0
   2bea6:	0002      	movs	r2, r0
   2bea8:	1dfb      	adds	r3, r7, #7
   2beaa:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2beac:	4a08      	ldr	r2, [pc, #32]	; (2bed0 <system_flash_set_waitstates+0x30>)
   2beae:	1dfb      	adds	r3, r7, #7
   2beb0:	781b      	ldrb	r3, [r3, #0]
   2beb2:	210f      	movs	r1, #15
   2beb4:	400b      	ands	r3, r1
   2beb6:	b2d9      	uxtb	r1, r3
   2beb8:	6853      	ldr	r3, [r2, #4]
   2beba:	200f      	movs	r0, #15
   2bebc:	4001      	ands	r1, r0
   2bebe:	0049      	lsls	r1, r1, #1
   2bec0:	201e      	movs	r0, #30
   2bec2:	4383      	bics	r3, r0
   2bec4:	430b      	orrs	r3, r1
   2bec6:	6053      	str	r3, [r2, #4]
}
   2bec8:	46c0      	nop			; (mov r8, r8)
   2beca:	46bd      	mov	sp, r7
   2becc:	b002      	add	sp, #8
   2bece:	bd80      	pop	{r7, pc}
   2bed0:	41004000 	.word	0x41004000

0002bed4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2bed4:	b580      	push	{r7, lr}
   2bed6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2bed8:	46c0      	nop			; (mov r8, r8)
   2beda:	4b04      	ldr	r3, [pc, #16]	; (2beec <_system_dfll_wait_for_sync+0x18>)
   2bedc:	68db      	ldr	r3, [r3, #12]
   2bede:	2210      	movs	r2, #16
   2bee0:	4013      	ands	r3, r2
   2bee2:	d0fa      	beq.n	2beda <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2bee4:	46c0      	nop			; (mov r8, r8)
   2bee6:	46bd      	mov	sp, r7
   2bee8:	bd80      	pop	{r7, pc}
   2beea:	46c0      	nop			; (mov r8, r8)
   2beec:	40000800 	.word	0x40000800

0002bef0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2bef0:	b580      	push	{r7, lr}
   2bef2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2bef4:	4b0c      	ldr	r3, [pc, #48]	; (2bf28 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2bef6:	2202      	movs	r2, #2
   2bef8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2befa:	4b0c      	ldr	r3, [pc, #48]	; (2bf2c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2befc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2befe:	4a0a      	ldr	r2, [pc, #40]	; (2bf28 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2bf00:	4b0b      	ldr	r3, [pc, #44]	; (2bf30 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2bf02:	689b      	ldr	r3, [r3, #8]
   2bf04:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2bf06:	4a08      	ldr	r2, [pc, #32]	; (2bf28 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2bf08:	4b09      	ldr	r3, [pc, #36]	; (2bf30 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2bf0a:	685b      	ldr	r3, [r3, #4]
   2bf0c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2bf0e:	4b06      	ldr	r3, [pc, #24]	; (2bf28 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2bf10:	2200      	movs	r2, #0
   2bf12:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2bf14:	4b05      	ldr	r3, [pc, #20]	; (2bf2c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2bf16:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2bf18:	4a03      	ldr	r2, [pc, #12]	; (2bf28 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2bf1a:	4b05      	ldr	r3, [pc, #20]	; (2bf30 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2bf1c:	681b      	ldr	r3, [r3, #0]
   2bf1e:	b29b      	uxth	r3, r3
   2bf20:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2bf22:	46c0      	nop			; (mov r8, r8)
   2bf24:	46bd      	mov	sp, r7
   2bf26:	bd80      	pop	{r7, pc}
   2bf28:	40000800 	.word	0x40000800
   2bf2c:	0002bed5 	.word	0x0002bed5
   2bf30:	20004208 	.word	0x20004208

0002bf34 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2bf34:	b580      	push	{r7, lr}
   2bf36:	b082      	sub	sp, #8
   2bf38:	af00      	add	r7, sp, #0
   2bf3a:	0002      	movs	r2, r0
   2bf3c:	1dfb      	adds	r3, r7, #7
   2bf3e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2bf40:	1dfb      	adds	r3, r7, #7
   2bf42:	781b      	ldrb	r3, [r3, #0]
   2bf44:	2b08      	cmp	r3, #8
   2bf46:	d841      	bhi.n	2bfcc <system_clock_source_get_hz+0x98>
   2bf48:	009a      	lsls	r2, r3, #2
   2bf4a:	4b23      	ldr	r3, [pc, #140]	; (2bfd8 <system_clock_source_get_hz+0xa4>)
   2bf4c:	18d3      	adds	r3, r2, r3
   2bf4e:	681b      	ldr	r3, [r3, #0]
   2bf50:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2bf52:	4b22      	ldr	r3, [pc, #136]	; (2bfdc <system_clock_source_get_hz+0xa8>)
   2bf54:	691b      	ldr	r3, [r3, #16]
   2bf56:	e03a      	b.n	2bfce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2bf58:	4b21      	ldr	r3, [pc, #132]	; (2bfe0 <system_clock_source_get_hz+0xac>)
   2bf5a:	6a1b      	ldr	r3, [r3, #32]
   2bf5c:	059b      	lsls	r3, r3, #22
   2bf5e:	0f9b      	lsrs	r3, r3, #30
   2bf60:	b2db      	uxtb	r3, r3
   2bf62:	001a      	movs	r2, r3
   2bf64:	4b1f      	ldr	r3, [pc, #124]	; (2bfe4 <system_clock_source_get_hz+0xb0>)
   2bf66:	40d3      	lsrs	r3, r2
   2bf68:	e031      	b.n	2bfce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2bf6a:	2380      	movs	r3, #128	; 0x80
   2bf6c:	021b      	lsls	r3, r3, #8
   2bf6e:	e02e      	b.n	2bfce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2bf70:	2380      	movs	r3, #128	; 0x80
   2bf72:	021b      	lsls	r3, r3, #8
   2bf74:	e02b      	b.n	2bfce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2bf76:	4b19      	ldr	r3, [pc, #100]	; (2bfdc <system_clock_source_get_hz+0xa8>)
   2bf78:	695b      	ldr	r3, [r3, #20]
   2bf7a:	e028      	b.n	2bfce <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2bf7c:	4b17      	ldr	r3, [pc, #92]	; (2bfdc <system_clock_source_get_hz+0xa8>)
   2bf7e:	681b      	ldr	r3, [r3, #0]
   2bf80:	2202      	movs	r2, #2
   2bf82:	4013      	ands	r3, r2
   2bf84:	d101      	bne.n	2bf8a <system_clock_source_get_hz+0x56>
			return 0;
   2bf86:	2300      	movs	r3, #0
   2bf88:	e021      	b.n	2bfce <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2bf8a:	4b17      	ldr	r3, [pc, #92]	; (2bfe8 <system_clock_source_get_hz+0xb4>)
   2bf8c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2bf8e:	4b13      	ldr	r3, [pc, #76]	; (2bfdc <system_clock_source_get_hz+0xa8>)
   2bf90:	681b      	ldr	r3, [r3, #0]
   2bf92:	2224      	movs	r2, #36	; 0x24
   2bf94:	4013      	ands	r3, r2
   2bf96:	2b04      	cmp	r3, #4
   2bf98:	d109      	bne.n	2bfae <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2bf9a:	2000      	movs	r0, #0
   2bf9c:	4b13      	ldr	r3, [pc, #76]	; (2bfec <system_clock_source_get_hz+0xb8>)
   2bf9e:	4798      	blx	r3
   2bfa0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2bfa2:	4b0e      	ldr	r3, [pc, #56]	; (2bfdc <system_clock_source_get_hz+0xa8>)
   2bfa4:	689b      	ldr	r3, [r3, #8]
   2bfa6:	041b      	lsls	r3, r3, #16
   2bfa8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2bfaa:	4353      	muls	r3, r2
   2bfac:	e00f      	b.n	2bfce <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2bfae:	4b10      	ldr	r3, [pc, #64]	; (2bff0 <system_clock_source_get_hz+0xbc>)
   2bfb0:	e00d      	b.n	2bfce <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2bfb2:	4a0b      	ldr	r2, [pc, #44]	; (2bfe0 <system_clock_source_get_hz+0xac>)
   2bfb4:	2350      	movs	r3, #80	; 0x50
   2bfb6:	5cd3      	ldrb	r3, [r2, r3]
   2bfb8:	b2db      	uxtb	r3, r3
   2bfba:	001a      	movs	r2, r3
   2bfbc:	2304      	movs	r3, #4
   2bfbe:	4013      	ands	r3, r2
   2bfc0:	d101      	bne.n	2bfc6 <system_clock_source_get_hz+0x92>
			return 0;
   2bfc2:	2300      	movs	r3, #0
   2bfc4:	e003      	b.n	2bfce <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2bfc6:	4b05      	ldr	r3, [pc, #20]	; (2bfdc <system_clock_source_get_hz+0xa8>)
   2bfc8:	68db      	ldr	r3, [r3, #12]
   2bfca:	e000      	b.n	2bfce <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2bfcc:	2300      	movs	r3, #0
	}
}
   2bfce:	0018      	movs	r0, r3
   2bfd0:	46bd      	mov	sp, r7
   2bfd2:	b002      	add	sp, #8
   2bfd4:	bd80      	pop	{r7, pc}
   2bfd6:	46c0      	nop			; (mov r8, r8)
   2bfd8:	0003c624 	.word	0x0003c624
   2bfdc:	20004208 	.word	0x20004208
   2bfe0:	40000800 	.word	0x40000800
   2bfe4:	007a1200 	.word	0x007a1200
   2bfe8:	0002bed5 	.word	0x0002bed5
   2bfec:	0002c9d1 	.word	0x0002c9d1
   2bff0:	02dc6c00 	.word	0x02dc6c00

0002bff4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2bff4:	b580      	push	{r7, lr}
   2bff6:	b084      	sub	sp, #16
   2bff8:	af00      	add	r7, sp, #0
   2bffa:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2bffc:	4b1a      	ldr	r3, [pc, #104]	; (2c068 <system_clock_source_osc8m_set_config+0x74>)
   2bffe:	6a1b      	ldr	r3, [r3, #32]
   2c000:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2c002:	687b      	ldr	r3, [r7, #4]
   2c004:	781b      	ldrb	r3, [r3, #0]
   2c006:	1c1a      	adds	r2, r3, #0
   2c008:	2303      	movs	r3, #3
   2c00a:	4013      	ands	r3, r2
   2c00c:	b2da      	uxtb	r2, r3
   2c00e:	230d      	movs	r3, #13
   2c010:	18fb      	adds	r3, r7, r3
   2c012:	2103      	movs	r1, #3
   2c014:	400a      	ands	r2, r1
   2c016:	0010      	movs	r0, r2
   2c018:	781a      	ldrb	r2, [r3, #0]
   2c01a:	2103      	movs	r1, #3
   2c01c:	438a      	bics	r2, r1
   2c01e:	1c11      	adds	r1, r2, #0
   2c020:	1c02      	adds	r2, r0, #0
   2c022:	430a      	orrs	r2, r1
   2c024:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2c026:	687b      	ldr	r3, [r7, #4]
   2c028:	789a      	ldrb	r2, [r3, #2]
   2c02a:	230c      	movs	r3, #12
   2c02c:	18fb      	adds	r3, r7, r3
   2c02e:	01d0      	lsls	r0, r2, #7
   2c030:	781a      	ldrb	r2, [r3, #0]
   2c032:	217f      	movs	r1, #127	; 0x7f
   2c034:	400a      	ands	r2, r1
   2c036:	1c11      	adds	r1, r2, #0
   2c038:	1c02      	adds	r2, r0, #0
   2c03a:	430a      	orrs	r2, r1
   2c03c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2c03e:	687b      	ldr	r3, [r7, #4]
   2c040:	785a      	ldrb	r2, [r3, #1]
   2c042:	230c      	movs	r3, #12
   2c044:	18fb      	adds	r3, r7, r3
   2c046:	2101      	movs	r1, #1
   2c048:	400a      	ands	r2, r1
   2c04a:	0190      	lsls	r0, r2, #6
   2c04c:	781a      	ldrb	r2, [r3, #0]
   2c04e:	2140      	movs	r1, #64	; 0x40
   2c050:	438a      	bics	r2, r1
   2c052:	1c11      	adds	r1, r2, #0
   2c054:	1c02      	adds	r2, r0, #0
   2c056:	430a      	orrs	r2, r1
   2c058:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2c05a:	4b03      	ldr	r3, [pc, #12]	; (2c068 <system_clock_source_osc8m_set_config+0x74>)
   2c05c:	68fa      	ldr	r2, [r7, #12]
   2c05e:	621a      	str	r2, [r3, #32]
}
   2c060:	46c0      	nop			; (mov r8, r8)
   2c062:	46bd      	mov	sp, r7
   2c064:	b004      	add	sp, #16
   2c066:	bd80      	pop	{r7, pc}
   2c068:	40000800 	.word	0x40000800

0002c06c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2c06c:	b580      	push	{r7, lr}
   2c06e:	b086      	sub	sp, #24
   2c070:	af00      	add	r7, sp, #0
   2c072:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2c074:	687b      	ldr	r3, [r7, #4]
   2c076:	68db      	ldr	r3, [r3, #12]
   2c078:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2c07a:	687b      	ldr	r3, [r7, #4]
   2c07c:	7d1b      	ldrb	r3, [r3, #20]
   2c07e:	2b01      	cmp	r3, #1
   2c080:	d10a      	bne.n	2c098 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2c082:	687b      	ldr	r3, [r7, #4]
   2c084:	8a1b      	ldrh	r3, [r3, #16]
   2c086:	3301      	adds	r3, #1
   2c088:	005b      	lsls	r3, r3, #1
   2c08a:	001a      	movs	r2, r3
   2c08c:	4b36      	ldr	r3, [pc, #216]	; (2c168 <system_clock_source_dpll_set_config+0xfc>)
   2c08e:	0011      	movs	r1, r2
   2c090:	6978      	ldr	r0, [r7, #20]
   2c092:	4798      	blx	r3
   2c094:	0003      	movs	r3, r0
   2c096:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2c098:	687b      	ldr	r3, [r7, #4]
   2c09a:	689b      	ldr	r3, [r3, #8]
   2c09c:	011a      	lsls	r2, r3, #4
   2c09e:	4b32      	ldr	r3, [pc, #200]	; (2c168 <system_clock_source_dpll_set_config+0xfc>)
   2c0a0:	6979      	ldr	r1, [r7, #20]
   2c0a2:	0010      	movs	r0, r2
   2c0a4:	4798      	blx	r3
   2c0a6:	0003      	movs	r3, r0
   2c0a8:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2c0aa:	693b      	ldr	r3, [r7, #16]
   2c0ac:	b2da      	uxtb	r2, r3
   2c0ae:	230f      	movs	r3, #15
   2c0b0:	18fb      	adds	r3, r7, r3
   2c0b2:	210f      	movs	r1, #15
   2c0b4:	400a      	ands	r2, r1
   2c0b6:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2c0b8:	693b      	ldr	r3, [r7, #16]
   2c0ba:	091b      	lsrs	r3, r3, #4
   2c0bc:	3b01      	subs	r3, #1
   2c0be:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2c0c0:	492a      	ldr	r1, [pc, #168]	; (2c16c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2c0c2:	687b      	ldr	r3, [r7, #4]
   2c0c4:	781b      	ldrb	r3, [r3, #0]
   2c0c6:	01db      	lsls	r3, r3, #7
   2c0c8:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2c0ca:	687b      	ldr	r3, [r7, #4]
   2c0cc:	785b      	ldrb	r3, [r3, #1]
   2c0ce:	019b      	lsls	r3, r3, #6
   2c0d0:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2c0d2:	4313      	orrs	r3, r2
   2c0d4:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2c0d6:	2344      	movs	r3, #68	; 0x44
   2c0d8:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2c0da:	4b24      	ldr	r3, [pc, #144]	; (2c16c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2c0dc:	220f      	movs	r2, #15
   2c0de:	18ba      	adds	r2, r7, r2
   2c0e0:	7812      	ldrb	r2, [r2, #0]
   2c0e2:	0412      	lsls	r2, r2, #16
   2c0e4:	0011      	movs	r1, r2
   2c0e6:	22f0      	movs	r2, #240	; 0xf0
   2c0e8:	0312      	lsls	r2, r2, #12
   2c0ea:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2c0ec:	693a      	ldr	r2, [r7, #16]
   2c0ee:	0512      	lsls	r2, r2, #20
   2c0f0:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2c0f2:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2c0f4:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2c0f6:	4b1d      	ldr	r3, [pc, #116]	; (2c16c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2c0f8:	687a      	ldr	r2, [r7, #4]
   2c0fa:	8a12      	ldrh	r2, [r2, #16]
   2c0fc:	0412      	lsls	r2, r2, #16
   2c0fe:	0011      	movs	r1, r2
   2c100:	4a1b      	ldr	r2, [pc, #108]	; (2c170 <system_clock_source_dpll_set_config+0x104>)
   2c102:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2c104:	687a      	ldr	r2, [r7, #4]
   2c106:	7892      	ldrb	r2, [r2, #2]
   2c108:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2c10a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2c10c:	687a      	ldr	r2, [r7, #4]
   2c10e:	7cd2      	ldrb	r2, [r2, #19]
   2c110:	0212      	lsls	r2, r2, #8
   2c112:	0010      	movs	r0, r2
   2c114:	22e0      	movs	r2, #224	; 0xe0
   2c116:	00d2      	lsls	r2, r2, #3
   2c118:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2c11a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2c11c:	687a      	ldr	r2, [r7, #4]
   2c11e:	7d12      	ldrb	r2, [r2, #20]
   2c120:	0112      	lsls	r2, r2, #4
   2c122:	0010      	movs	r0, r2
   2c124:	2230      	movs	r2, #48	; 0x30
   2c126:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2c128:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2c12a:	687a      	ldr	r2, [r7, #4]
   2c12c:	78d2      	ldrb	r2, [r2, #3]
   2c12e:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2c130:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2c132:	687a      	ldr	r2, [r7, #4]
   2c134:	7912      	ldrb	r2, [r2, #4]
   2c136:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2c138:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2c13a:	687a      	ldr	r2, [r7, #4]
   2c13c:	7c92      	ldrb	r2, [r2, #18]
   2c13e:	0010      	movs	r0, r2
   2c140:	2203      	movs	r2, #3
   2c142:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2c144:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2c146:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2c148:	693b      	ldr	r3, [r7, #16]
   2c14a:	3301      	adds	r3, #1
   2c14c:	011a      	lsls	r2, r3, #4
   2c14e:	230f      	movs	r3, #15
   2c150:	18fb      	adds	r3, r7, r3
   2c152:	781b      	ldrb	r3, [r3, #0]
   2c154:	18d3      	adds	r3, r2, r3
   2c156:	697a      	ldr	r2, [r7, #20]
   2c158:	4353      	muls	r3, r2
   2c15a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2c15c:	4b05      	ldr	r3, [pc, #20]	; (2c174 <system_clock_source_dpll_set_config+0x108>)
   2c15e:	60da      	str	r2, [r3, #12]
}
   2c160:	46c0      	nop			; (mov r8, r8)
   2c162:	46bd      	mov	sp, r7
   2c164:	b006      	add	sp, #24
   2c166:	bd80      	pop	{r7, pc}
   2c168:	00035449 	.word	0x00035449
   2c16c:	40000800 	.word	0x40000800
   2c170:	07ff0000 	.word	0x07ff0000
   2c174:	20004208 	.word	0x20004208

0002c178 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2c178:	b580      	push	{r7, lr}
   2c17a:	b082      	sub	sp, #8
   2c17c:	af00      	add	r7, sp, #0
   2c17e:	0002      	movs	r2, r0
   2c180:	1dfb      	adds	r3, r7, #7
   2c182:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2c184:	1dfb      	adds	r3, r7, #7
   2c186:	781b      	ldrb	r3, [r3, #0]
   2c188:	2b08      	cmp	r3, #8
   2c18a:	d83b      	bhi.n	2c204 <system_clock_source_enable+0x8c>
   2c18c:	009a      	lsls	r2, r3, #2
   2c18e:	4b21      	ldr	r3, [pc, #132]	; (2c214 <system_clock_source_enable+0x9c>)
   2c190:	18d3      	adds	r3, r2, r3
   2c192:	681b      	ldr	r3, [r3, #0]
   2c194:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2c196:	4b20      	ldr	r3, [pc, #128]	; (2c218 <system_clock_source_enable+0xa0>)
   2c198:	4a1f      	ldr	r2, [pc, #124]	; (2c218 <system_clock_source_enable+0xa0>)
   2c19a:	6a12      	ldr	r2, [r2, #32]
   2c19c:	2102      	movs	r1, #2
   2c19e:	430a      	orrs	r2, r1
   2c1a0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2c1a2:	2300      	movs	r3, #0
   2c1a4:	e031      	b.n	2c20a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2c1a6:	4b1c      	ldr	r3, [pc, #112]	; (2c218 <system_clock_source_enable+0xa0>)
   2c1a8:	4a1b      	ldr	r2, [pc, #108]	; (2c218 <system_clock_source_enable+0xa0>)
   2c1aa:	6992      	ldr	r2, [r2, #24]
   2c1ac:	2102      	movs	r1, #2
   2c1ae:	430a      	orrs	r2, r1
   2c1b0:	619a      	str	r2, [r3, #24]
		break;
   2c1b2:	e029      	b.n	2c208 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2c1b4:	4a18      	ldr	r2, [pc, #96]	; (2c218 <system_clock_source_enable+0xa0>)
   2c1b6:	4b18      	ldr	r3, [pc, #96]	; (2c218 <system_clock_source_enable+0xa0>)
   2c1b8:	8a1b      	ldrh	r3, [r3, #16]
   2c1ba:	b29b      	uxth	r3, r3
   2c1bc:	2102      	movs	r1, #2
   2c1be:	430b      	orrs	r3, r1
   2c1c0:	b29b      	uxth	r3, r3
   2c1c2:	8213      	strh	r3, [r2, #16]
		break;
   2c1c4:	e020      	b.n	2c208 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2c1c6:	4a14      	ldr	r2, [pc, #80]	; (2c218 <system_clock_source_enable+0xa0>)
   2c1c8:	4b13      	ldr	r3, [pc, #76]	; (2c218 <system_clock_source_enable+0xa0>)
   2c1ca:	8a9b      	ldrh	r3, [r3, #20]
   2c1cc:	b29b      	uxth	r3, r3
   2c1ce:	2102      	movs	r1, #2
   2c1d0:	430b      	orrs	r3, r1
   2c1d2:	b29b      	uxth	r3, r3
   2c1d4:	8293      	strh	r3, [r2, #20]
		break;
   2c1d6:	e017      	b.n	2c208 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2c1d8:	4b10      	ldr	r3, [pc, #64]	; (2c21c <system_clock_source_enable+0xa4>)
   2c1da:	681b      	ldr	r3, [r3, #0]
   2c1dc:	2202      	movs	r2, #2
   2c1de:	431a      	orrs	r2, r3
   2c1e0:	4b0e      	ldr	r3, [pc, #56]	; (2c21c <system_clock_source_enable+0xa4>)
   2c1e2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2c1e4:	4b0e      	ldr	r3, [pc, #56]	; (2c220 <system_clock_source_enable+0xa8>)
   2c1e6:	4798      	blx	r3
		break;
   2c1e8:	e00e      	b.n	2c208 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2c1ea:	4a0b      	ldr	r2, [pc, #44]	; (2c218 <system_clock_source_enable+0xa0>)
   2c1ec:	490a      	ldr	r1, [pc, #40]	; (2c218 <system_clock_source_enable+0xa0>)
   2c1ee:	2344      	movs	r3, #68	; 0x44
   2c1f0:	5ccb      	ldrb	r3, [r1, r3]
   2c1f2:	b2db      	uxtb	r3, r3
   2c1f4:	2102      	movs	r1, #2
   2c1f6:	430b      	orrs	r3, r1
   2c1f8:	b2d9      	uxtb	r1, r3
   2c1fa:	2344      	movs	r3, #68	; 0x44
   2c1fc:	54d1      	strb	r1, [r2, r3]
		break;
   2c1fe:	e003      	b.n	2c208 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2c200:	2300      	movs	r3, #0
   2c202:	e002      	b.n	2c20a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2c204:	2317      	movs	r3, #23
   2c206:	e000      	b.n	2c20a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2c208:	2300      	movs	r3, #0
}
   2c20a:	0018      	movs	r0, r3
   2c20c:	46bd      	mov	sp, r7
   2c20e:	b002      	add	sp, #8
   2c210:	bd80      	pop	{r7, pc}
   2c212:	46c0      	nop			; (mov r8, r8)
   2c214:	0003c648 	.word	0x0003c648
   2c218:	40000800 	.word	0x40000800
   2c21c:	20004208 	.word	0x20004208
   2c220:	0002bef1 	.word	0x0002bef1

0002c224 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2c224:	b580      	push	{r7, lr}
   2c226:	b084      	sub	sp, #16
   2c228:	af00      	add	r7, sp, #0
   2c22a:	0002      	movs	r2, r0
   2c22c:	1dfb      	adds	r3, r7, #7
   2c22e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2c230:	2300      	movs	r3, #0
   2c232:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2c234:	1dfb      	adds	r3, r7, #7
   2c236:	781b      	ldrb	r3, [r3, #0]
   2c238:	2b08      	cmp	r3, #8
   2c23a:	d821      	bhi.n	2c280 <system_clock_source_is_ready+0x5c>
   2c23c:	009a      	lsls	r2, r3, #2
   2c23e:	4b18      	ldr	r3, [pc, #96]	; (2c2a0 <system_clock_source_is_ready+0x7c>)
   2c240:	18d3      	adds	r3, r2, r3
   2c242:	681b      	ldr	r3, [r3, #0]
   2c244:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2c246:	2308      	movs	r3, #8
   2c248:	60fb      	str	r3, [r7, #12]
		break;
   2c24a:	e01b      	b.n	2c284 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2c24c:	2304      	movs	r3, #4
   2c24e:	60fb      	str	r3, [r7, #12]
		break;
   2c250:	e018      	b.n	2c284 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2c252:	2301      	movs	r3, #1
   2c254:	60fb      	str	r3, [r7, #12]
		break;
   2c256:	e015      	b.n	2c284 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2c258:	2302      	movs	r3, #2
   2c25a:	60fb      	str	r3, [r7, #12]
		break;
   2c25c:	e012      	b.n	2c284 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2c25e:	2310      	movs	r3, #16
   2c260:	60fb      	str	r3, [r7, #12]
		}
		break;
   2c262:	e00f      	b.n	2c284 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2c264:	4a0f      	ldr	r2, [pc, #60]	; (2c2a4 <system_clock_source_is_ready+0x80>)
   2c266:	2350      	movs	r3, #80	; 0x50
   2c268:	5cd3      	ldrb	r3, [r2, r3]
   2c26a:	b2db      	uxtb	r3, r3
   2c26c:	001a      	movs	r2, r3
   2c26e:	2303      	movs	r3, #3
   2c270:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2c272:	3b03      	subs	r3, #3
   2c274:	425a      	negs	r2, r3
   2c276:	4153      	adcs	r3, r2
   2c278:	b2db      	uxtb	r3, r3
   2c27a:	e00c      	b.n	2c296 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2c27c:	2301      	movs	r3, #1
   2c27e:	e00a      	b.n	2c296 <system_clock_source_is_ready+0x72>

	default:
		return false;
   2c280:	2300      	movs	r3, #0
   2c282:	e008      	b.n	2c296 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2c284:	4b07      	ldr	r3, [pc, #28]	; (2c2a4 <system_clock_source_is_ready+0x80>)
   2c286:	68db      	ldr	r3, [r3, #12]
   2c288:	68fa      	ldr	r2, [r7, #12]
   2c28a:	401a      	ands	r2, r3
   2c28c:	68fb      	ldr	r3, [r7, #12]
   2c28e:	1ad3      	subs	r3, r2, r3
   2c290:	425a      	negs	r2, r3
   2c292:	4153      	adcs	r3, r2
   2c294:	b2db      	uxtb	r3, r3
}
   2c296:	0018      	movs	r0, r3
   2c298:	46bd      	mov	sp, r7
   2c29a:	b004      	add	sp, #16
   2c29c:	bd80      	pop	{r7, pc}
   2c29e:	46c0      	nop			; (mov r8, r8)
   2c2a0:	0003c66c 	.word	0x0003c66c
   2c2a4:	40000800 	.word	0x40000800

0002c2a8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2c2a8:	b580      	push	{r7, lr}
   2c2aa:	b082      	sub	sp, #8
   2c2ac:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2c2ae:	003b      	movs	r3, r7
   2c2b0:	2203      	movs	r2, #3
   2c2b2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2c2b4:	2300      	movs	r3, #0
   2c2b6:	607b      	str	r3, [r7, #4]
   2c2b8:	e009      	b.n	2c2ce <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2c2ba:	687b      	ldr	r3, [r7, #4]
   2c2bc:	b2db      	uxtb	r3, r3
   2c2be:	003a      	movs	r2, r7
   2c2c0:	0011      	movs	r1, r2
   2c2c2:	0018      	movs	r0, r3
   2c2c4:	4b05      	ldr	r3, [pc, #20]	; (2c2dc <_switch_peripheral_gclk+0x34>)
   2c2c6:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2c2c8:	687b      	ldr	r3, [r7, #4]
   2c2ca:	3301      	adds	r3, #1
   2c2cc:	607b      	str	r3, [r7, #4]
   2c2ce:	687b      	ldr	r3, [r7, #4]
   2c2d0:	2b24      	cmp	r3, #36	; 0x24
   2c2d2:	d9f2      	bls.n	2c2ba <_switch_peripheral_gclk+0x12>
	}
}
   2c2d4:	46c0      	nop			; (mov r8, r8)
   2c2d6:	46bd      	mov	sp, r7
   2c2d8:	b002      	add	sp, #8
   2c2da:	bd80      	pop	{r7, pc}
   2c2dc:	0002c8ad 	.word	0x0002c8ad

0002c2e0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2c2e0:	b580      	push	{r7, lr}
   2c2e2:	b0a6      	sub	sp, #152	; 0x98
   2c2e4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2c2e6:	4b92      	ldr	r3, [pc, #584]	; (2c530 <system_clock_init+0x250>)
   2c2e8:	22c2      	movs	r2, #194	; 0xc2
   2c2ea:	00d2      	lsls	r2, r2, #3
   2c2ec:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2c2ee:	2003      	movs	r0, #3
   2c2f0:	4b90      	ldr	r3, [pc, #576]	; (2c534 <system_clock_init+0x254>)
   2c2f2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2c2f4:	4b90      	ldr	r3, [pc, #576]	; (2c538 <system_clock_init+0x258>)
   2c2f6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2c2f8:	2394      	movs	r3, #148	; 0x94
   2c2fa:	18fb      	adds	r3, r7, r3
   2c2fc:	0018      	movs	r0, r3
   2c2fe:	4b8f      	ldr	r3, [pc, #572]	; (2c53c <system_clock_init+0x25c>)
   2c300:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2c302:	2394      	movs	r3, #148	; 0x94
   2c304:	18fb      	adds	r3, r7, r3
   2c306:	2200      	movs	r2, #0
   2c308:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2c30a:	2394      	movs	r3, #148	; 0x94
   2c30c:	18fb      	adds	r3, r7, r3
   2c30e:	2201      	movs	r2, #1
   2c310:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2c312:	2394      	movs	r3, #148	; 0x94
   2c314:	18fb      	adds	r3, r7, r3
   2c316:	2200      	movs	r2, #0
   2c318:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2c31a:	2394      	movs	r3, #148	; 0x94
   2c31c:	18fb      	adds	r3, r7, r3
   2c31e:	0018      	movs	r0, r3
   2c320:	4b87      	ldr	r3, [pc, #540]	; (2c540 <system_clock_init+0x260>)
   2c322:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2c324:	2006      	movs	r0, #6
   2c326:	4b87      	ldr	r3, [pc, #540]	; (2c544 <system_clock_init+0x264>)
   2c328:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2c32a:	4b87      	ldr	r3, [pc, #540]	; (2c548 <system_clock_init+0x268>)
   2c32c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2c32e:	2360      	movs	r3, #96	; 0x60
   2c330:	18fb      	adds	r3, r7, r3
   2c332:	0018      	movs	r0, r3
   2c334:	4b85      	ldr	r3, [pc, #532]	; (2c54c <system_clock_init+0x26c>)
   2c336:	4798      	blx	r3
   2c338:	2360      	movs	r3, #96	; 0x60
   2c33a:	18fb      	adds	r3, r7, r3
   2c33c:	2206      	movs	r2, #6
   2c33e:	701a      	strb	r2, [r3, #0]
   2c340:	2360      	movs	r3, #96	; 0x60
   2c342:	18fb      	adds	r3, r7, r3
   2c344:	2208      	movs	r2, #8
   2c346:	605a      	str	r2, [r3, #4]
   2c348:	2360      	movs	r3, #96	; 0x60
   2c34a:	18fb      	adds	r3, r7, r3
   2c34c:	2200      	movs	r2, #0
   2c34e:	721a      	strb	r2, [r3, #8]
   2c350:	2360      	movs	r3, #96	; 0x60
   2c352:	18fb      	adds	r3, r7, r3
   2c354:	2200      	movs	r2, #0
   2c356:	725a      	strb	r2, [r3, #9]
   2c358:	2360      	movs	r3, #96	; 0x60
   2c35a:	18fb      	adds	r3, r7, r3
   2c35c:	0019      	movs	r1, r3
   2c35e:	2001      	movs	r0, #1
   2c360:	4b7b      	ldr	r3, [pc, #492]	; (2c550 <system_clock_init+0x270>)
   2c362:	4798      	blx	r3
   2c364:	2001      	movs	r0, #1
   2c366:	4b7b      	ldr	r3, [pc, #492]	; (2c554 <system_clock_init+0x274>)
   2c368:	4798      	blx	r3
   2c36a:	2354      	movs	r3, #84	; 0x54
   2c36c:	18fb      	adds	r3, r7, r3
   2c36e:	0018      	movs	r0, r3
   2c370:	4b76      	ldr	r3, [pc, #472]	; (2c54c <system_clock_init+0x26c>)
   2c372:	4798      	blx	r3
   2c374:	2354      	movs	r3, #84	; 0x54
   2c376:	18fb      	adds	r3, r7, r3
   2c378:	2203      	movs	r2, #3
   2c37a:	701a      	strb	r2, [r3, #0]
   2c37c:	2354      	movs	r3, #84	; 0x54
   2c37e:	18fb      	adds	r3, r7, r3
   2c380:	2201      	movs	r2, #1
   2c382:	605a      	str	r2, [r3, #4]
   2c384:	2354      	movs	r3, #84	; 0x54
   2c386:	18fb      	adds	r3, r7, r3
   2c388:	2201      	movs	r2, #1
   2c38a:	721a      	strb	r2, [r3, #8]
   2c38c:	2354      	movs	r3, #84	; 0x54
   2c38e:	18fb      	adds	r3, r7, r3
   2c390:	2200      	movs	r2, #0
   2c392:	725a      	strb	r2, [r3, #9]
   2c394:	2354      	movs	r3, #84	; 0x54
   2c396:	18fb      	adds	r3, r7, r3
   2c398:	0019      	movs	r1, r3
   2c39a:	2002      	movs	r0, #2
   2c39c:	4b6c      	ldr	r3, [pc, #432]	; (2c550 <system_clock_init+0x270>)
   2c39e:	4798      	blx	r3
   2c3a0:	2002      	movs	r0, #2
   2c3a2:	4b6c      	ldr	r3, [pc, #432]	; (2c554 <system_clock_init+0x274>)
   2c3a4:	4798      	blx	r3
   2c3a6:	233c      	movs	r3, #60	; 0x3c
   2c3a8:	18fb      	adds	r3, r7, r3
   2c3aa:	0018      	movs	r0, r3
   2c3ac:	4b67      	ldr	r3, [pc, #412]	; (2c54c <system_clock_init+0x26c>)
   2c3ae:	4798      	blx	r3
   2c3b0:	233c      	movs	r3, #60	; 0x3c
   2c3b2:	18fb      	adds	r3, r7, r3
   2c3b4:	2203      	movs	r2, #3
   2c3b6:	701a      	strb	r2, [r3, #0]
   2c3b8:	233c      	movs	r3, #60	; 0x3c
   2c3ba:	18fb      	adds	r3, r7, r3
   2c3bc:	2220      	movs	r2, #32
   2c3be:	605a      	str	r2, [r3, #4]
   2c3c0:	233c      	movs	r3, #60	; 0x3c
   2c3c2:	18fb      	adds	r3, r7, r3
   2c3c4:	2200      	movs	r2, #0
   2c3c6:	721a      	strb	r2, [r3, #8]
   2c3c8:	233c      	movs	r3, #60	; 0x3c
   2c3ca:	18fb      	adds	r3, r7, r3
   2c3cc:	2200      	movs	r2, #0
   2c3ce:	725a      	strb	r2, [r3, #9]
   2c3d0:	233c      	movs	r3, #60	; 0x3c
   2c3d2:	18fb      	adds	r3, r7, r3
   2c3d4:	0019      	movs	r1, r3
   2c3d6:	2004      	movs	r0, #4
   2c3d8:	4b5d      	ldr	r3, [pc, #372]	; (2c550 <system_clock_init+0x270>)
   2c3da:	4798      	blx	r3
   2c3dc:	2004      	movs	r0, #4
   2c3de:	4b5d      	ldr	r3, [pc, #372]	; (2c554 <system_clock_init+0x274>)
   2c3e0:	4798      	blx	r3
   2c3e2:	2330      	movs	r3, #48	; 0x30
   2c3e4:	18fb      	adds	r3, r7, r3
   2c3e6:	0018      	movs	r0, r3
   2c3e8:	4b58      	ldr	r3, [pc, #352]	; (2c54c <system_clock_init+0x26c>)
   2c3ea:	4798      	blx	r3
   2c3ec:	2330      	movs	r3, #48	; 0x30
   2c3ee:	18fb      	adds	r3, r7, r3
   2c3f0:	2206      	movs	r2, #6
   2c3f2:	701a      	strb	r2, [r3, #0]
   2c3f4:	2330      	movs	r3, #48	; 0x30
   2c3f6:	18fb      	adds	r3, r7, r3
   2c3f8:	2201      	movs	r2, #1
   2c3fa:	605a      	str	r2, [r3, #4]
   2c3fc:	2330      	movs	r3, #48	; 0x30
   2c3fe:	18fb      	adds	r3, r7, r3
   2c400:	2200      	movs	r2, #0
   2c402:	721a      	strb	r2, [r3, #8]
   2c404:	2330      	movs	r3, #48	; 0x30
   2c406:	18fb      	adds	r3, r7, r3
   2c408:	2200      	movs	r2, #0
   2c40a:	725a      	strb	r2, [r3, #9]
   2c40c:	2330      	movs	r3, #48	; 0x30
   2c40e:	18fb      	adds	r3, r7, r3
   2c410:	0019      	movs	r1, r3
   2c412:	2005      	movs	r0, #5
   2c414:	4b4e      	ldr	r3, [pc, #312]	; (2c550 <system_clock_init+0x270>)
   2c416:	4798      	blx	r3
   2c418:	2005      	movs	r0, #5
   2c41a:	4b4e      	ldr	r3, [pc, #312]	; (2c554 <system_clock_init+0x274>)
   2c41c:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2c41e:	2390      	movs	r3, #144	; 0x90
   2c420:	18fb      	adds	r3, r7, r3
   2c422:	0018      	movs	r0, r3
   2c424:	4b4c      	ldr	r3, [pc, #304]	; (2c558 <system_clock_init+0x278>)
   2c426:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2c428:	2390      	movs	r3, #144	; 0x90
   2c42a:	18fb      	adds	r3, r7, r3
   2c42c:	2201      	movs	r2, #1
   2c42e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2c430:	2390      	movs	r3, #144	; 0x90
   2c432:	18fb      	adds	r3, r7, r3
   2c434:	0019      	movs	r1, r3
   2c436:	2001      	movs	r0, #1
   2c438:	4b48      	ldr	r3, [pc, #288]	; (2c55c <system_clock_init+0x27c>)
   2c43a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2c43c:	2001      	movs	r0, #1
   2c43e:	4b48      	ldr	r3, [pc, #288]	; (2c560 <system_clock_init+0x280>)
   2c440:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2c442:	2378      	movs	r3, #120	; 0x78
   2c444:	18fb      	adds	r3, r7, r3
   2c446:	0018      	movs	r0, r3
   2c448:	4b46      	ldr	r3, [pc, #280]	; (2c564 <system_clock_init+0x284>)
   2c44a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2c44c:	2378      	movs	r3, #120	; 0x78
   2c44e:	18fb      	adds	r3, r7, r3
   2c450:	2200      	movs	r2, #0
   2c452:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2c454:	2378      	movs	r3, #120	; 0x78
   2c456:	18fb      	adds	r3, r7, r3
   2c458:	2200      	movs	r2, #0
   2c45a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2c45c:	2378      	movs	r3, #120	; 0x78
   2c45e:	18fb      	adds	r3, r7, r3
   2c460:	2200      	movs	r2, #0
   2c462:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2c464:	2378      	movs	r3, #120	; 0x78
   2c466:	18fb      	adds	r3, r7, r3
   2c468:	2200      	movs	r2, #0
   2c46a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2c46c:	2378      	movs	r3, #120	; 0x78
   2c46e:	18fb      	adds	r3, r7, r3
   2c470:	2200      	movs	r2, #0
   2c472:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2c474:	2378      	movs	r3, #120	; 0x78
   2c476:	18fb      	adds	r3, r7, r3
   2c478:	2200      	movs	r2, #0
   2c47a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2c47c:	2378      	movs	r3, #120	; 0x78
   2c47e:	18fb      	adds	r3, r7, r3
   2c480:	2200      	movs	r2, #0
   2c482:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2c484:	2378      	movs	r3, #120	; 0x78
   2c486:	18fb      	adds	r3, r7, r3
   2c488:	2202      	movs	r2, #2
   2c48a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2c48c:	2378      	movs	r3, #120	; 0x78
   2c48e:	18fb      	adds	r3, r7, r3
   2c490:	4a35      	ldr	r2, [pc, #212]	; (2c568 <system_clock_init+0x288>)
   2c492:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2c494:	2378      	movs	r3, #120	; 0x78
   2c496:	18fb      	adds	r3, r7, r3
   2c498:	2201      	movs	r2, #1
   2c49a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2c49c:	2378      	movs	r3, #120	; 0x78
   2c49e:	18fb      	adds	r3, r7, r3
   2c4a0:	4a32      	ldr	r2, [pc, #200]	; (2c56c <system_clock_init+0x28c>)
   2c4a2:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2c4a4:	2378      	movs	r3, #120	; 0x78
   2c4a6:	18fb      	adds	r3, r7, r3
   2c4a8:	0018      	movs	r0, r3
   2c4aa:	4b31      	ldr	r3, [pc, #196]	; (2c570 <system_clock_init+0x290>)
   2c4ac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2c4ae:	2008      	movs	r0, #8
   2c4b0:	4b24      	ldr	r3, [pc, #144]	; (2c544 <system_clock_init+0x264>)
   2c4b2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2c4b4:	46c0      	nop			; (mov r8, r8)
   2c4b6:	2008      	movs	r0, #8
   2c4b8:	4b2e      	ldr	r3, [pc, #184]	; (2c574 <system_clock_init+0x294>)
   2c4ba:	4798      	blx	r3
   2c4bc:	0003      	movs	r3, r0
   2c4be:	001a      	movs	r2, r3
   2c4c0:	2301      	movs	r3, #1
   2c4c2:	4053      	eors	r3, r2
   2c4c4:	b2db      	uxtb	r3, r3
   2c4c6:	2b00      	cmp	r3, #0
   2c4c8:	d1f5      	bne.n	2c4b6 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2c4ca:	4919      	ldr	r1, [pc, #100]	; (2c530 <system_clock_init+0x250>)
   2c4cc:	2244      	movs	r2, #68	; 0x44
   2c4ce:	5c8b      	ldrb	r3, [r1, r2]
   2c4d0:	2080      	movs	r0, #128	; 0x80
   2c4d2:	4240      	negs	r0, r0
   2c4d4:	4303      	orrs	r3, r0
   2c4d6:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2c4d8:	2000      	movs	r0, #0
   2c4da:	4b27      	ldr	r3, [pc, #156]	; (2c578 <system_clock_init+0x298>)
   2c4dc:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2c4de:	2100      	movs	r1, #0
   2c4e0:	2000      	movs	r0, #0
   2c4e2:	4b26      	ldr	r3, [pc, #152]	; (2c57c <system_clock_init+0x29c>)
   2c4e4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2c4e6:	2100      	movs	r1, #0
   2c4e8:	2001      	movs	r0, #1
   2c4ea:	4b24      	ldr	r3, [pc, #144]	; (2c57c <system_clock_init+0x29c>)
   2c4ec:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2c4ee:	2100      	movs	r1, #0
   2c4f0:	2002      	movs	r0, #2
   2c4f2:	4b22      	ldr	r3, [pc, #136]	; (2c57c <system_clock_init+0x29c>)
   2c4f4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2c4f6:	003b      	movs	r3, r7
   2c4f8:	0018      	movs	r0, r3
   2c4fa:	4b14      	ldr	r3, [pc, #80]	; (2c54c <system_clock_init+0x26c>)
   2c4fc:	4798      	blx	r3
   2c4fe:	003b      	movs	r3, r7
   2c500:	2208      	movs	r2, #8
   2c502:	701a      	strb	r2, [r3, #0]
   2c504:	003b      	movs	r3, r7
   2c506:	2201      	movs	r2, #1
   2c508:	605a      	str	r2, [r3, #4]
   2c50a:	003b      	movs	r3, r7
   2c50c:	2200      	movs	r2, #0
   2c50e:	721a      	strb	r2, [r3, #8]
   2c510:	003b      	movs	r3, r7
   2c512:	2201      	movs	r2, #1
   2c514:	725a      	strb	r2, [r3, #9]
   2c516:	003b      	movs	r3, r7
   2c518:	0019      	movs	r1, r3
   2c51a:	2000      	movs	r0, #0
   2c51c:	4b0c      	ldr	r3, [pc, #48]	; (2c550 <system_clock_init+0x270>)
   2c51e:	4798      	blx	r3
   2c520:	2000      	movs	r0, #0
   2c522:	4b0c      	ldr	r3, [pc, #48]	; (2c554 <system_clock_init+0x274>)
   2c524:	4798      	blx	r3
#endif
}
   2c526:	46c0      	nop			; (mov r8, r8)
   2c528:	46bd      	mov	sp, r7
   2c52a:	b026      	add	sp, #152	; 0x98
   2c52c:	bd80      	pop	{r7, pc}
   2c52e:	46c0      	nop			; (mov r8, r8)
   2c530:	40000800 	.word	0x40000800
   2c534:	0002bea1 	.word	0x0002bea1
   2c538:	0002c2a9 	.word	0x0002c2a9
   2c53c:	0002bdb1 	.word	0x0002bdb1
   2c540:	0002bff5 	.word	0x0002bff5
   2c544:	0002c179 	.word	0x0002c179
   2c548:	0002c625 	.word	0x0002c625
   2c54c:	0002bd6d 	.word	0x0002bd6d
   2c550:	0002c655 	.word	0x0002c655
   2c554:	0002c779 	.word	0x0002c779
   2c558:	0002bd9b 	.word	0x0002bd9b
   2c55c:	0002c8ad 	.word	0x0002c8ad
   2c560:	0002c8f1 	.word	0x0002c8f1
   2c564:	0002be49 	.word	0x0002be49
   2c568:	000f4240 	.word	0x000f4240
   2c56c:	02dc6c00 	.word	0x02dc6c00
   2c570:	0002c06d 	.word	0x0002c06d
   2c574:	0002c225 	.word	0x0002c225
   2c578:	0002bdd5 	.word	0x0002bdd5
   2c57c:	0002bdf5 	.word	0x0002bdf5

0002c580 <system_apb_clock_set_mask>:
{
   2c580:	b580      	push	{r7, lr}
   2c582:	b082      	sub	sp, #8
   2c584:	af00      	add	r7, sp, #0
   2c586:	0002      	movs	r2, r0
   2c588:	6039      	str	r1, [r7, #0]
   2c58a:	1dfb      	adds	r3, r7, #7
   2c58c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2c58e:	1dfb      	adds	r3, r7, #7
   2c590:	781b      	ldrb	r3, [r3, #0]
   2c592:	2b01      	cmp	r3, #1
   2c594:	d00a      	beq.n	2c5ac <system_apb_clock_set_mask+0x2c>
   2c596:	2b02      	cmp	r3, #2
   2c598:	d00f      	beq.n	2c5ba <system_apb_clock_set_mask+0x3a>
   2c59a:	2b00      	cmp	r3, #0
   2c59c:	d114      	bne.n	2c5c8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2c59e:	4b0e      	ldr	r3, [pc, #56]	; (2c5d8 <system_apb_clock_set_mask+0x58>)
   2c5a0:	4a0d      	ldr	r2, [pc, #52]	; (2c5d8 <system_apb_clock_set_mask+0x58>)
   2c5a2:	6991      	ldr	r1, [r2, #24]
   2c5a4:	683a      	ldr	r2, [r7, #0]
   2c5a6:	430a      	orrs	r2, r1
   2c5a8:	619a      	str	r2, [r3, #24]
			break;
   2c5aa:	e00f      	b.n	2c5cc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2c5ac:	4b0a      	ldr	r3, [pc, #40]	; (2c5d8 <system_apb_clock_set_mask+0x58>)
   2c5ae:	4a0a      	ldr	r2, [pc, #40]	; (2c5d8 <system_apb_clock_set_mask+0x58>)
   2c5b0:	69d1      	ldr	r1, [r2, #28]
   2c5b2:	683a      	ldr	r2, [r7, #0]
   2c5b4:	430a      	orrs	r2, r1
   2c5b6:	61da      	str	r2, [r3, #28]
			break;
   2c5b8:	e008      	b.n	2c5cc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2c5ba:	4b07      	ldr	r3, [pc, #28]	; (2c5d8 <system_apb_clock_set_mask+0x58>)
   2c5bc:	4a06      	ldr	r2, [pc, #24]	; (2c5d8 <system_apb_clock_set_mask+0x58>)
   2c5be:	6a11      	ldr	r1, [r2, #32]
   2c5c0:	683a      	ldr	r2, [r7, #0]
   2c5c2:	430a      	orrs	r2, r1
   2c5c4:	621a      	str	r2, [r3, #32]
			break;
   2c5c6:	e001      	b.n	2c5cc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2c5c8:	2317      	movs	r3, #23
   2c5ca:	e000      	b.n	2c5ce <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2c5cc:	2300      	movs	r3, #0
}
   2c5ce:	0018      	movs	r0, r3
   2c5d0:	46bd      	mov	sp, r7
   2c5d2:	b002      	add	sp, #8
   2c5d4:	bd80      	pop	{r7, pc}
   2c5d6:	46c0      	nop			; (mov r8, r8)
   2c5d8:	40000400 	.word	0x40000400

0002c5dc <system_interrupt_enter_critical_section>:
{
   2c5dc:	b580      	push	{r7, lr}
   2c5de:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2c5e0:	4b02      	ldr	r3, [pc, #8]	; (2c5ec <system_interrupt_enter_critical_section+0x10>)
   2c5e2:	4798      	blx	r3
}
   2c5e4:	46c0      	nop			; (mov r8, r8)
   2c5e6:	46bd      	mov	sp, r7
   2c5e8:	bd80      	pop	{r7, pc}
   2c5ea:	46c0      	nop			; (mov r8, r8)
   2c5ec:	00028c19 	.word	0x00028c19

0002c5f0 <system_interrupt_leave_critical_section>:
{
   2c5f0:	b580      	push	{r7, lr}
   2c5f2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2c5f4:	4b02      	ldr	r3, [pc, #8]	; (2c600 <system_interrupt_leave_critical_section+0x10>)
   2c5f6:	4798      	blx	r3
}
   2c5f8:	46c0      	nop			; (mov r8, r8)
   2c5fa:	46bd      	mov	sp, r7
   2c5fc:	bd80      	pop	{r7, pc}
   2c5fe:	46c0      	nop			; (mov r8, r8)
   2c600:	00028c6d 	.word	0x00028c6d

0002c604 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2c604:	b580      	push	{r7, lr}
   2c606:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2c608:	4b05      	ldr	r3, [pc, #20]	; (2c620 <system_gclk_is_syncing+0x1c>)
   2c60a:	785b      	ldrb	r3, [r3, #1]
   2c60c:	b2db      	uxtb	r3, r3
   2c60e:	b25b      	sxtb	r3, r3
   2c610:	2b00      	cmp	r3, #0
   2c612:	da01      	bge.n	2c618 <system_gclk_is_syncing+0x14>
		return true;
   2c614:	2301      	movs	r3, #1
   2c616:	e000      	b.n	2c61a <system_gclk_is_syncing+0x16>
	}

	return false;
   2c618:	2300      	movs	r3, #0
}
   2c61a:	0018      	movs	r0, r3
   2c61c:	46bd      	mov	sp, r7
   2c61e:	bd80      	pop	{r7, pc}
   2c620:	40000c00 	.word	0x40000c00

0002c624 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2c624:	b580      	push	{r7, lr}
   2c626:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2c628:	2108      	movs	r1, #8
   2c62a:	2000      	movs	r0, #0
   2c62c:	4b07      	ldr	r3, [pc, #28]	; (2c64c <system_gclk_init+0x28>)
   2c62e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2c630:	4b07      	ldr	r3, [pc, #28]	; (2c650 <system_gclk_init+0x2c>)
   2c632:	2201      	movs	r2, #1
   2c634:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2c636:	46c0      	nop			; (mov r8, r8)
   2c638:	4b05      	ldr	r3, [pc, #20]	; (2c650 <system_gclk_init+0x2c>)
   2c63a:	781b      	ldrb	r3, [r3, #0]
   2c63c:	b2db      	uxtb	r3, r3
   2c63e:	001a      	movs	r2, r3
   2c640:	2301      	movs	r3, #1
   2c642:	4013      	ands	r3, r2
   2c644:	d1f8      	bne.n	2c638 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2c646:	46c0      	nop			; (mov r8, r8)
   2c648:	46bd      	mov	sp, r7
   2c64a:	bd80      	pop	{r7, pc}
   2c64c:	0002c581 	.word	0x0002c581
   2c650:	40000c00 	.word	0x40000c00

0002c654 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2c654:	b580      	push	{r7, lr}
   2c656:	b086      	sub	sp, #24
   2c658:	af00      	add	r7, sp, #0
   2c65a:	0002      	movs	r2, r0
   2c65c:	6039      	str	r1, [r7, #0]
   2c65e:	1dfb      	adds	r3, r7, #7
   2c660:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2c662:	1dfb      	adds	r3, r7, #7
   2c664:	781b      	ldrb	r3, [r3, #0]
   2c666:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2c668:	1dfb      	adds	r3, r7, #7
   2c66a:	781b      	ldrb	r3, [r3, #0]
   2c66c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2c66e:	683b      	ldr	r3, [r7, #0]
   2c670:	781b      	ldrb	r3, [r3, #0]
   2c672:	021b      	lsls	r3, r3, #8
   2c674:	001a      	movs	r2, r3
   2c676:	697b      	ldr	r3, [r7, #20]
   2c678:	4313      	orrs	r3, r2
   2c67a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2c67c:	683b      	ldr	r3, [r7, #0]
   2c67e:	785b      	ldrb	r3, [r3, #1]
   2c680:	2b00      	cmp	r3, #0
   2c682:	d004      	beq.n	2c68e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2c684:	697b      	ldr	r3, [r7, #20]
   2c686:	2280      	movs	r2, #128	; 0x80
   2c688:	02d2      	lsls	r2, r2, #11
   2c68a:	4313      	orrs	r3, r2
   2c68c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2c68e:	683b      	ldr	r3, [r7, #0]
   2c690:	7a5b      	ldrb	r3, [r3, #9]
   2c692:	2b00      	cmp	r3, #0
   2c694:	d004      	beq.n	2c6a0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2c696:	697b      	ldr	r3, [r7, #20]
   2c698:	2280      	movs	r2, #128	; 0x80
   2c69a:	0312      	lsls	r2, r2, #12
   2c69c:	4313      	orrs	r3, r2
   2c69e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2c6a0:	683b      	ldr	r3, [r7, #0]
   2c6a2:	685b      	ldr	r3, [r3, #4]
   2c6a4:	2b01      	cmp	r3, #1
   2c6a6:	d92c      	bls.n	2c702 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2c6a8:	683b      	ldr	r3, [r7, #0]
   2c6aa:	685a      	ldr	r2, [r3, #4]
   2c6ac:	683b      	ldr	r3, [r7, #0]
   2c6ae:	685b      	ldr	r3, [r3, #4]
   2c6b0:	3b01      	subs	r3, #1
   2c6b2:	4013      	ands	r3, r2
   2c6b4:	d11a      	bne.n	2c6ec <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2c6b6:	2300      	movs	r3, #0
   2c6b8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2c6ba:	2302      	movs	r3, #2
   2c6bc:	60bb      	str	r3, [r7, #8]
   2c6be:	e005      	b.n	2c6cc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2c6c0:	68fb      	ldr	r3, [r7, #12]
   2c6c2:	3301      	adds	r3, #1
   2c6c4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2c6c6:	68bb      	ldr	r3, [r7, #8]
   2c6c8:	005b      	lsls	r3, r3, #1
   2c6ca:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2c6cc:	683b      	ldr	r3, [r7, #0]
   2c6ce:	685a      	ldr	r2, [r3, #4]
   2c6d0:	68bb      	ldr	r3, [r7, #8]
   2c6d2:	429a      	cmp	r2, r3
   2c6d4:	d8f4      	bhi.n	2c6c0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2c6d6:	68fb      	ldr	r3, [r7, #12]
   2c6d8:	021b      	lsls	r3, r3, #8
   2c6da:	693a      	ldr	r2, [r7, #16]
   2c6dc:	4313      	orrs	r3, r2
   2c6de:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2c6e0:	697b      	ldr	r3, [r7, #20]
   2c6e2:	2280      	movs	r2, #128	; 0x80
   2c6e4:	0352      	lsls	r2, r2, #13
   2c6e6:	4313      	orrs	r3, r2
   2c6e8:	617b      	str	r3, [r7, #20]
   2c6ea:	e00a      	b.n	2c702 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2c6ec:	683b      	ldr	r3, [r7, #0]
   2c6ee:	685b      	ldr	r3, [r3, #4]
   2c6f0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2c6f2:	693a      	ldr	r2, [r7, #16]
   2c6f4:	4313      	orrs	r3, r2
   2c6f6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2c6f8:	697b      	ldr	r3, [r7, #20]
   2c6fa:	2280      	movs	r2, #128	; 0x80
   2c6fc:	0292      	lsls	r2, r2, #10
   2c6fe:	4313      	orrs	r3, r2
   2c700:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2c702:	683b      	ldr	r3, [r7, #0]
   2c704:	7a1b      	ldrb	r3, [r3, #8]
   2c706:	2b00      	cmp	r3, #0
   2c708:	d004      	beq.n	2c714 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2c70a:	697b      	ldr	r3, [r7, #20]
   2c70c:	2280      	movs	r2, #128	; 0x80
   2c70e:	0392      	lsls	r2, r2, #14
   2c710:	4313      	orrs	r3, r2
   2c712:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2c714:	46c0      	nop			; (mov r8, r8)
   2c716:	4b13      	ldr	r3, [pc, #76]	; (2c764 <system_gclk_gen_set_config+0x110>)
   2c718:	4798      	blx	r3
   2c71a:	1e03      	subs	r3, r0, #0
   2c71c:	d1fb      	bne.n	2c716 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2c71e:	4b12      	ldr	r3, [pc, #72]	; (2c768 <system_gclk_gen_set_config+0x114>)
   2c720:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2c722:	4a12      	ldr	r2, [pc, #72]	; (2c76c <system_gclk_gen_set_config+0x118>)
   2c724:	1dfb      	adds	r3, r7, #7
   2c726:	781b      	ldrb	r3, [r3, #0]
   2c728:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2c72a:	46c0      	nop			; (mov r8, r8)
   2c72c:	4b0d      	ldr	r3, [pc, #52]	; (2c764 <system_gclk_gen_set_config+0x110>)
   2c72e:	4798      	blx	r3
   2c730:	1e03      	subs	r3, r0, #0
   2c732:	d1fb      	bne.n	2c72c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2c734:	4b0e      	ldr	r3, [pc, #56]	; (2c770 <system_gclk_gen_set_config+0x11c>)
   2c736:	693a      	ldr	r2, [r7, #16]
   2c738:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2c73a:	46c0      	nop			; (mov r8, r8)
   2c73c:	4b09      	ldr	r3, [pc, #36]	; (2c764 <system_gclk_gen_set_config+0x110>)
   2c73e:	4798      	blx	r3
   2c740:	1e03      	subs	r3, r0, #0
   2c742:	d1fb      	bne.n	2c73c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2c744:	4b0a      	ldr	r3, [pc, #40]	; (2c770 <system_gclk_gen_set_config+0x11c>)
   2c746:	4a0a      	ldr	r2, [pc, #40]	; (2c770 <system_gclk_gen_set_config+0x11c>)
   2c748:	6851      	ldr	r1, [r2, #4]
   2c74a:	2280      	movs	r2, #128	; 0x80
   2c74c:	0252      	lsls	r2, r2, #9
   2c74e:	4011      	ands	r1, r2
   2c750:	697a      	ldr	r2, [r7, #20]
   2c752:	430a      	orrs	r2, r1
   2c754:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2c756:	4b07      	ldr	r3, [pc, #28]	; (2c774 <system_gclk_gen_set_config+0x120>)
   2c758:	4798      	blx	r3
}
   2c75a:	46c0      	nop			; (mov r8, r8)
   2c75c:	46bd      	mov	sp, r7
   2c75e:	b006      	add	sp, #24
   2c760:	bd80      	pop	{r7, pc}
   2c762:	46c0      	nop			; (mov r8, r8)
   2c764:	0002c605 	.word	0x0002c605
   2c768:	0002c5dd 	.word	0x0002c5dd
   2c76c:	40000c08 	.word	0x40000c08
   2c770:	40000c00 	.word	0x40000c00
   2c774:	0002c5f1 	.word	0x0002c5f1

0002c778 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2c778:	b580      	push	{r7, lr}
   2c77a:	b082      	sub	sp, #8
   2c77c:	af00      	add	r7, sp, #0
   2c77e:	0002      	movs	r2, r0
   2c780:	1dfb      	adds	r3, r7, #7
   2c782:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2c784:	46c0      	nop			; (mov r8, r8)
   2c786:	4b0e      	ldr	r3, [pc, #56]	; (2c7c0 <system_gclk_gen_enable+0x48>)
   2c788:	4798      	blx	r3
   2c78a:	1e03      	subs	r3, r0, #0
   2c78c:	d1fb      	bne.n	2c786 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2c78e:	4b0d      	ldr	r3, [pc, #52]	; (2c7c4 <system_gclk_gen_enable+0x4c>)
   2c790:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2c792:	4a0d      	ldr	r2, [pc, #52]	; (2c7c8 <system_gclk_gen_enable+0x50>)
   2c794:	1dfb      	adds	r3, r7, #7
   2c796:	781b      	ldrb	r3, [r3, #0]
   2c798:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2c79a:	46c0      	nop			; (mov r8, r8)
   2c79c:	4b08      	ldr	r3, [pc, #32]	; (2c7c0 <system_gclk_gen_enable+0x48>)
   2c79e:	4798      	blx	r3
   2c7a0:	1e03      	subs	r3, r0, #0
   2c7a2:	d1fb      	bne.n	2c79c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2c7a4:	4b09      	ldr	r3, [pc, #36]	; (2c7cc <system_gclk_gen_enable+0x54>)
   2c7a6:	4a09      	ldr	r2, [pc, #36]	; (2c7cc <system_gclk_gen_enable+0x54>)
   2c7a8:	6852      	ldr	r2, [r2, #4]
   2c7aa:	2180      	movs	r1, #128	; 0x80
   2c7ac:	0249      	lsls	r1, r1, #9
   2c7ae:	430a      	orrs	r2, r1
   2c7b0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2c7b2:	4b07      	ldr	r3, [pc, #28]	; (2c7d0 <system_gclk_gen_enable+0x58>)
   2c7b4:	4798      	blx	r3
}
   2c7b6:	46c0      	nop			; (mov r8, r8)
   2c7b8:	46bd      	mov	sp, r7
   2c7ba:	b002      	add	sp, #8
   2c7bc:	bd80      	pop	{r7, pc}
   2c7be:	46c0      	nop			; (mov r8, r8)
   2c7c0:	0002c605 	.word	0x0002c605
   2c7c4:	0002c5dd 	.word	0x0002c5dd
   2c7c8:	40000c04 	.word	0x40000c04
   2c7cc:	40000c00 	.word	0x40000c00
   2c7d0:	0002c5f1 	.word	0x0002c5f1

0002c7d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2c7d4:	b580      	push	{r7, lr}
   2c7d6:	b086      	sub	sp, #24
   2c7d8:	af00      	add	r7, sp, #0
   2c7da:	0002      	movs	r2, r0
   2c7dc:	1dfb      	adds	r3, r7, #7
   2c7de:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2c7e0:	46c0      	nop			; (mov r8, r8)
   2c7e2:	4b2a      	ldr	r3, [pc, #168]	; (2c88c <system_gclk_gen_get_hz+0xb8>)
   2c7e4:	4798      	blx	r3
   2c7e6:	1e03      	subs	r3, r0, #0
   2c7e8:	d1fb      	bne.n	2c7e2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2c7ea:	4b29      	ldr	r3, [pc, #164]	; (2c890 <system_gclk_gen_get_hz+0xbc>)
   2c7ec:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2c7ee:	4a29      	ldr	r2, [pc, #164]	; (2c894 <system_gclk_gen_get_hz+0xc0>)
   2c7f0:	1dfb      	adds	r3, r7, #7
   2c7f2:	781b      	ldrb	r3, [r3, #0]
   2c7f4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2c7f6:	46c0      	nop			; (mov r8, r8)
   2c7f8:	4b24      	ldr	r3, [pc, #144]	; (2c88c <system_gclk_gen_get_hz+0xb8>)
   2c7fa:	4798      	blx	r3
   2c7fc:	1e03      	subs	r3, r0, #0
   2c7fe:	d1fb      	bne.n	2c7f8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2c800:	4b25      	ldr	r3, [pc, #148]	; (2c898 <system_gclk_gen_get_hz+0xc4>)
   2c802:	685b      	ldr	r3, [r3, #4]
   2c804:	04db      	lsls	r3, r3, #19
   2c806:	0edb      	lsrs	r3, r3, #27
   2c808:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2c80a:	0018      	movs	r0, r3
   2c80c:	4b23      	ldr	r3, [pc, #140]	; (2c89c <system_gclk_gen_get_hz+0xc8>)
   2c80e:	4798      	blx	r3
   2c810:	0003      	movs	r3, r0
   2c812:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2c814:	4a1f      	ldr	r2, [pc, #124]	; (2c894 <system_gclk_gen_get_hz+0xc0>)
   2c816:	1dfb      	adds	r3, r7, #7
   2c818:	781b      	ldrb	r3, [r3, #0]
   2c81a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2c81c:	4b1e      	ldr	r3, [pc, #120]	; (2c898 <system_gclk_gen_get_hz+0xc4>)
   2c81e:	685b      	ldr	r3, [r3, #4]
   2c820:	02db      	lsls	r3, r3, #11
   2c822:	0fdb      	lsrs	r3, r3, #31
   2c824:	b2da      	uxtb	r2, r3
   2c826:	2313      	movs	r3, #19
   2c828:	18fb      	adds	r3, r7, r3
   2c82a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2c82c:	4a1c      	ldr	r2, [pc, #112]	; (2c8a0 <system_gclk_gen_get_hz+0xcc>)
   2c82e:	1dfb      	adds	r3, r7, #7
   2c830:	781b      	ldrb	r3, [r3, #0]
   2c832:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2c834:	46c0      	nop			; (mov r8, r8)
   2c836:	4b15      	ldr	r3, [pc, #84]	; (2c88c <system_gclk_gen_get_hz+0xb8>)
   2c838:	4798      	blx	r3
   2c83a:	1e03      	subs	r3, r0, #0
   2c83c:	d1fb      	bne.n	2c836 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2c83e:	4b16      	ldr	r3, [pc, #88]	; (2c898 <system_gclk_gen_get_hz+0xc4>)
   2c840:	689b      	ldr	r3, [r3, #8]
   2c842:	021b      	lsls	r3, r3, #8
   2c844:	0c1b      	lsrs	r3, r3, #16
   2c846:	b29b      	uxth	r3, r3
   2c848:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2c84a:	4b16      	ldr	r3, [pc, #88]	; (2c8a4 <system_gclk_gen_get_hz+0xd0>)
   2c84c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2c84e:	2313      	movs	r3, #19
   2c850:	18fb      	adds	r3, r7, r3
   2c852:	781b      	ldrb	r3, [r3, #0]
   2c854:	2b00      	cmp	r3, #0
   2c856:	d109      	bne.n	2c86c <system_gclk_gen_get_hz+0x98>
   2c858:	68fb      	ldr	r3, [r7, #12]
   2c85a:	2b01      	cmp	r3, #1
   2c85c:	d906      	bls.n	2c86c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2c85e:	4b12      	ldr	r3, [pc, #72]	; (2c8a8 <system_gclk_gen_get_hz+0xd4>)
   2c860:	68f9      	ldr	r1, [r7, #12]
   2c862:	6978      	ldr	r0, [r7, #20]
   2c864:	4798      	blx	r3
   2c866:	0003      	movs	r3, r0
   2c868:	617b      	str	r3, [r7, #20]
   2c86a:	e00a      	b.n	2c882 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2c86c:	2313      	movs	r3, #19
   2c86e:	18fb      	adds	r3, r7, r3
   2c870:	781b      	ldrb	r3, [r3, #0]
   2c872:	2b00      	cmp	r3, #0
   2c874:	d005      	beq.n	2c882 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2c876:	68fb      	ldr	r3, [r7, #12]
   2c878:	3301      	adds	r3, #1
   2c87a:	697a      	ldr	r2, [r7, #20]
   2c87c:	40da      	lsrs	r2, r3
   2c87e:	0013      	movs	r3, r2
   2c880:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2c882:	697b      	ldr	r3, [r7, #20]
}
   2c884:	0018      	movs	r0, r3
   2c886:	46bd      	mov	sp, r7
   2c888:	b006      	add	sp, #24
   2c88a:	bd80      	pop	{r7, pc}
   2c88c:	0002c605 	.word	0x0002c605
   2c890:	0002c5dd 	.word	0x0002c5dd
   2c894:	40000c04 	.word	0x40000c04
   2c898:	40000c00 	.word	0x40000c00
   2c89c:	0002bf35 	.word	0x0002bf35
   2c8a0:	40000c08 	.word	0x40000c08
   2c8a4:	0002c5f1 	.word	0x0002c5f1
   2c8a8:	00035449 	.word	0x00035449

0002c8ac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2c8ac:	b580      	push	{r7, lr}
   2c8ae:	b084      	sub	sp, #16
   2c8b0:	af00      	add	r7, sp, #0
   2c8b2:	0002      	movs	r2, r0
   2c8b4:	6039      	str	r1, [r7, #0]
   2c8b6:	1dfb      	adds	r3, r7, #7
   2c8b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2c8ba:	1dfb      	adds	r3, r7, #7
   2c8bc:	781b      	ldrb	r3, [r3, #0]
   2c8be:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2c8c0:	683b      	ldr	r3, [r7, #0]
   2c8c2:	781b      	ldrb	r3, [r3, #0]
   2c8c4:	021b      	lsls	r3, r3, #8
   2c8c6:	001a      	movs	r2, r3
   2c8c8:	68fb      	ldr	r3, [r7, #12]
   2c8ca:	4313      	orrs	r3, r2
   2c8cc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2c8ce:	1dfb      	adds	r3, r7, #7
   2c8d0:	781b      	ldrb	r3, [r3, #0]
   2c8d2:	0018      	movs	r0, r3
   2c8d4:	4b04      	ldr	r3, [pc, #16]	; (2c8e8 <system_gclk_chan_set_config+0x3c>)
   2c8d6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2c8d8:	4b04      	ldr	r3, [pc, #16]	; (2c8ec <system_gclk_chan_set_config+0x40>)
   2c8da:	68fa      	ldr	r2, [r7, #12]
   2c8dc:	b292      	uxth	r2, r2
   2c8de:	805a      	strh	r2, [r3, #2]
}
   2c8e0:	46c0      	nop			; (mov r8, r8)
   2c8e2:	46bd      	mov	sp, r7
   2c8e4:	b004      	add	sp, #16
   2c8e6:	bd80      	pop	{r7, pc}
   2c8e8:	0002c939 	.word	0x0002c939
   2c8ec:	40000c00 	.word	0x40000c00

0002c8f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2c8f0:	b580      	push	{r7, lr}
   2c8f2:	b082      	sub	sp, #8
   2c8f4:	af00      	add	r7, sp, #0
   2c8f6:	0002      	movs	r2, r0
   2c8f8:	1dfb      	adds	r3, r7, #7
   2c8fa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2c8fc:	4b0a      	ldr	r3, [pc, #40]	; (2c928 <system_gclk_chan_enable+0x38>)
   2c8fe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2c900:	4a0a      	ldr	r2, [pc, #40]	; (2c92c <system_gclk_chan_enable+0x3c>)
   2c902:	1dfb      	adds	r3, r7, #7
   2c904:	781b      	ldrb	r3, [r3, #0]
   2c906:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2c908:	4909      	ldr	r1, [pc, #36]	; (2c930 <system_gclk_chan_enable+0x40>)
   2c90a:	4b09      	ldr	r3, [pc, #36]	; (2c930 <system_gclk_chan_enable+0x40>)
   2c90c:	885b      	ldrh	r3, [r3, #2]
   2c90e:	b29b      	uxth	r3, r3
   2c910:	2280      	movs	r2, #128	; 0x80
   2c912:	01d2      	lsls	r2, r2, #7
   2c914:	4313      	orrs	r3, r2
   2c916:	b29b      	uxth	r3, r3
   2c918:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2c91a:	4b06      	ldr	r3, [pc, #24]	; (2c934 <system_gclk_chan_enable+0x44>)
   2c91c:	4798      	blx	r3
}
   2c91e:	46c0      	nop			; (mov r8, r8)
   2c920:	46bd      	mov	sp, r7
   2c922:	b002      	add	sp, #8
   2c924:	bd80      	pop	{r7, pc}
   2c926:	46c0      	nop			; (mov r8, r8)
   2c928:	0002c5dd 	.word	0x0002c5dd
   2c92c:	40000c02 	.word	0x40000c02
   2c930:	40000c00 	.word	0x40000c00
   2c934:	0002c5f1 	.word	0x0002c5f1

0002c938 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2c938:	b580      	push	{r7, lr}
   2c93a:	b084      	sub	sp, #16
   2c93c:	af00      	add	r7, sp, #0
   2c93e:	0002      	movs	r2, r0
   2c940:	1dfb      	adds	r3, r7, #7
   2c942:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2c944:	4b1c      	ldr	r3, [pc, #112]	; (2c9b8 <system_gclk_chan_disable+0x80>)
   2c946:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2c948:	4a1c      	ldr	r2, [pc, #112]	; (2c9bc <system_gclk_chan_disable+0x84>)
   2c94a:	1dfb      	adds	r3, r7, #7
   2c94c:	781b      	ldrb	r3, [r3, #0]
   2c94e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2c950:	4b1b      	ldr	r3, [pc, #108]	; (2c9c0 <system_gclk_chan_disable+0x88>)
   2c952:	885b      	ldrh	r3, [r3, #2]
   2c954:	051b      	lsls	r3, r3, #20
   2c956:	0f1b      	lsrs	r3, r3, #28
   2c958:	b2db      	uxtb	r3, r3
   2c95a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2c95c:	4a18      	ldr	r2, [pc, #96]	; (2c9c0 <system_gclk_chan_disable+0x88>)
   2c95e:	8853      	ldrh	r3, [r2, #2]
   2c960:	4918      	ldr	r1, [pc, #96]	; (2c9c4 <system_gclk_chan_disable+0x8c>)
   2c962:	400b      	ands	r3, r1
   2c964:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2c966:	4a16      	ldr	r2, [pc, #88]	; (2c9c0 <system_gclk_chan_disable+0x88>)
   2c968:	4b15      	ldr	r3, [pc, #84]	; (2c9c0 <system_gclk_chan_disable+0x88>)
   2c96a:	885b      	ldrh	r3, [r3, #2]
   2c96c:	b29b      	uxth	r3, r3
   2c96e:	4916      	ldr	r1, [pc, #88]	; (2c9c8 <system_gclk_chan_disable+0x90>)
   2c970:	400b      	ands	r3, r1
   2c972:	b29b      	uxth	r3, r3
   2c974:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2c976:	46c0      	nop			; (mov r8, r8)
   2c978:	4b11      	ldr	r3, [pc, #68]	; (2c9c0 <system_gclk_chan_disable+0x88>)
   2c97a:	885b      	ldrh	r3, [r3, #2]
   2c97c:	b29b      	uxth	r3, r3
   2c97e:	001a      	movs	r2, r3
   2c980:	2380      	movs	r3, #128	; 0x80
   2c982:	01db      	lsls	r3, r3, #7
   2c984:	4013      	ands	r3, r2
   2c986:	d1f7      	bne.n	2c978 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2c988:	4a0d      	ldr	r2, [pc, #52]	; (2c9c0 <system_gclk_chan_disable+0x88>)
   2c98a:	68fb      	ldr	r3, [r7, #12]
   2c98c:	b2db      	uxtb	r3, r3
   2c98e:	1c19      	adds	r1, r3, #0
   2c990:	230f      	movs	r3, #15
   2c992:	400b      	ands	r3, r1
   2c994:	b2d9      	uxtb	r1, r3
   2c996:	8853      	ldrh	r3, [r2, #2]
   2c998:	1c08      	adds	r0, r1, #0
   2c99a:	210f      	movs	r1, #15
   2c99c:	4001      	ands	r1, r0
   2c99e:	0208      	lsls	r0, r1, #8
   2c9a0:	4908      	ldr	r1, [pc, #32]	; (2c9c4 <system_gclk_chan_disable+0x8c>)
   2c9a2:	400b      	ands	r3, r1
   2c9a4:	1c19      	adds	r1, r3, #0
   2c9a6:	1c03      	adds	r3, r0, #0
   2c9a8:	430b      	orrs	r3, r1
   2c9aa:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2c9ac:	4b07      	ldr	r3, [pc, #28]	; (2c9cc <system_gclk_chan_disable+0x94>)
   2c9ae:	4798      	blx	r3
}
   2c9b0:	46c0      	nop			; (mov r8, r8)
   2c9b2:	46bd      	mov	sp, r7
   2c9b4:	b004      	add	sp, #16
   2c9b6:	bd80      	pop	{r7, pc}
   2c9b8:	0002c5dd 	.word	0x0002c5dd
   2c9bc:	40000c02 	.word	0x40000c02
   2c9c0:	40000c00 	.word	0x40000c00
   2c9c4:	fffff0ff 	.word	0xfffff0ff
   2c9c8:	ffffbfff 	.word	0xffffbfff
   2c9cc:	0002c5f1 	.word	0x0002c5f1

0002c9d0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2c9d0:	b580      	push	{r7, lr}
   2c9d2:	b084      	sub	sp, #16
   2c9d4:	af00      	add	r7, sp, #0
   2c9d6:	0002      	movs	r2, r0
   2c9d8:	1dfb      	adds	r3, r7, #7
   2c9da:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2c9dc:	4b0d      	ldr	r3, [pc, #52]	; (2ca14 <system_gclk_chan_get_hz+0x44>)
   2c9de:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2c9e0:	4a0d      	ldr	r2, [pc, #52]	; (2ca18 <system_gclk_chan_get_hz+0x48>)
   2c9e2:	1dfb      	adds	r3, r7, #7
   2c9e4:	781b      	ldrb	r3, [r3, #0]
   2c9e6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2c9e8:	4b0c      	ldr	r3, [pc, #48]	; (2ca1c <system_gclk_chan_get_hz+0x4c>)
   2c9ea:	885b      	ldrh	r3, [r3, #2]
   2c9ec:	051b      	lsls	r3, r3, #20
   2c9ee:	0f1b      	lsrs	r3, r3, #28
   2c9f0:	b2da      	uxtb	r2, r3
   2c9f2:	230f      	movs	r3, #15
   2c9f4:	18fb      	adds	r3, r7, r3
   2c9f6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2c9f8:	4b09      	ldr	r3, [pc, #36]	; (2ca20 <system_gclk_chan_get_hz+0x50>)
   2c9fa:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2c9fc:	230f      	movs	r3, #15
   2c9fe:	18fb      	adds	r3, r7, r3
   2ca00:	781b      	ldrb	r3, [r3, #0]
   2ca02:	0018      	movs	r0, r3
   2ca04:	4b07      	ldr	r3, [pc, #28]	; (2ca24 <system_gclk_chan_get_hz+0x54>)
   2ca06:	4798      	blx	r3
   2ca08:	0003      	movs	r3, r0
}
   2ca0a:	0018      	movs	r0, r3
   2ca0c:	46bd      	mov	sp, r7
   2ca0e:	b004      	add	sp, #16
   2ca10:	bd80      	pop	{r7, pc}
   2ca12:	46c0      	nop			; (mov r8, r8)
   2ca14:	0002c5dd 	.word	0x0002c5dd
   2ca18:	40000c02 	.word	0x40000c02
   2ca1c:	40000c00 	.word	0x40000c00
   2ca20:	0002c5f1 	.word	0x0002c5f1
   2ca24:	0002c7d5 	.word	0x0002c7d5

0002ca28 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2ca28:	b580      	push	{r7, lr}
   2ca2a:	b084      	sub	sp, #16
   2ca2c:	af00      	add	r7, sp, #0
   2ca2e:	0002      	movs	r2, r0
   2ca30:	1dfb      	adds	r3, r7, #7
   2ca32:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2ca34:	230f      	movs	r3, #15
   2ca36:	18fb      	adds	r3, r7, r3
   2ca38:	2200      	movs	r2, #0
   2ca3a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2ca3c:	1dfb      	adds	r3, r7, #7
   2ca3e:	781b      	ldrb	r3, [r3, #0]
   2ca40:	2b7f      	cmp	r3, #127	; 0x7f
   2ca42:	d80b      	bhi.n	2ca5c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2ca44:	4a13      	ldr	r2, [pc, #76]	; (2ca94 <system_interrupt_clear_pending+0x6c>)
   2ca46:	1dfb      	adds	r3, r7, #7
   2ca48:	781b      	ldrb	r3, [r3, #0]
   2ca4a:	b25b      	sxtb	r3, r3
   2ca4c:	2101      	movs	r1, #1
   2ca4e:	4099      	lsls	r1, r3
   2ca50:	000b      	movs	r3, r1
   2ca52:	0019      	movs	r1, r3
   2ca54:	23c0      	movs	r3, #192	; 0xc0
   2ca56:	005b      	lsls	r3, r3, #1
   2ca58:	50d1      	str	r1, [r2, r3]
   2ca5a:	e014      	b.n	2ca86 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2ca5c:	1dfb      	adds	r3, r7, #7
   2ca5e:	781b      	ldrb	r3, [r3, #0]
   2ca60:	b25b      	sxtb	r3, r3
   2ca62:	330e      	adds	r3, #14
   2ca64:	d101      	bne.n	2ca6a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2ca66:	2317      	movs	r3, #23
   2ca68:	e010      	b.n	2ca8c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2ca6a:	1dfb      	adds	r3, r7, #7
   2ca6c:	781b      	ldrb	r3, [r3, #0]
   2ca6e:	b25b      	sxtb	r3, r3
   2ca70:	3301      	adds	r3, #1
   2ca72:	d104      	bne.n	2ca7e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2ca74:	4b08      	ldr	r3, [pc, #32]	; (2ca98 <system_interrupt_clear_pending+0x70>)
   2ca76:	2280      	movs	r2, #128	; 0x80
   2ca78:	0492      	lsls	r2, r2, #18
   2ca7a:	605a      	str	r2, [r3, #4]
   2ca7c:	e003      	b.n	2ca86 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2ca7e:	230f      	movs	r3, #15
   2ca80:	18fb      	adds	r3, r7, r3
   2ca82:	2217      	movs	r2, #23
   2ca84:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2ca86:	230f      	movs	r3, #15
   2ca88:	18fb      	adds	r3, r7, r3
   2ca8a:	781b      	ldrb	r3, [r3, #0]
}
   2ca8c:	0018      	movs	r0, r3
   2ca8e:	46bd      	mov	sp, r7
   2ca90:	b004      	add	sp, #16
   2ca92:	bd80      	pop	{r7, pc}
   2ca94:	e000e100 	.word	0xe000e100
   2ca98:	e000ed00 	.word	0xe000ed00

0002ca9c <system_pinmux_get_group_from_gpio_pin>:
{
   2ca9c:	b580      	push	{r7, lr}
   2ca9e:	b084      	sub	sp, #16
   2caa0:	af00      	add	r7, sp, #0
   2caa2:	0002      	movs	r2, r0
   2caa4:	1dfb      	adds	r3, r7, #7
   2caa6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2caa8:	230f      	movs	r3, #15
   2caaa:	18fb      	adds	r3, r7, r3
   2caac:	1dfa      	adds	r2, r7, #7
   2caae:	7812      	ldrb	r2, [r2, #0]
   2cab0:	09d2      	lsrs	r2, r2, #7
   2cab2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2cab4:	230e      	movs	r3, #14
   2cab6:	18fb      	adds	r3, r7, r3
   2cab8:	1dfa      	adds	r2, r7, #7
   2caba:	7812      	ldrb	r2, [r2, #0]
   2cabc:	0952      	lsrs	r2, r2, #5
   2cabe:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2cac0:	4b0d      	ldr	r3, [pc, #52]	; (2caf8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2cac2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2cac4:	230f      	movs	r3, #15
   2cac6:	18fb      	adds	r3, r7, r3
   2cac8:	781b      	ldrb	r3, [r3, #0]
   2caca:	2b00      	cmp	r3, #0
   2cacc:	d10f      	bne.n	2caee <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2cace:	230f      	movs	r3, #15
   2cad0:	18fb      	adds	r3, r7, r3
   2cad2:	781b      	ldrb	r3, [r3, #0]
   2cad4:	009b      	lsls	r3, r3, #2
   2cad6:	2210      	movs	r2, #16
   2cad8:	4694      	mov	ip, r2
   2cada:	44bc      	add	ip, r7
   2cadc:	4463      	add	r3, ip
   2cade:	3b08      	subs	r3, #8
   2cae0:	681a      	ldr	r2, [r3, #0]
   2cae2:	230e      	movs	r3, #14
   2cae4:	18fb      	adds	r3, r7, r3
   2cae6:	781b      	ldrb	r3, [r3, #0]
   2cae8:	01db      	lsls	r3, r3, #7
   2caea:	18d3      	adds	r3, r2, r3
   2caec:	e000      	b.n	2caf0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2caee:	2300      	movs	r3, #0
}
   2caf0:	0018      	movs	r0, r3
   2caf2:	46bd      	mov	sp, r7
   2caf4:	b004      	add	sp, #16
   2caf6:	bd80      	pop	{r7, pc}
   2caf8:	41004400 	.word	0x41004400

0002cafc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2cafc:	b580      	push	{r7, lr}
   2cafe:	b088      	sub	sp, #32
   2cb00:	af00      	add	r7, sp, #0
   2cb02:	60f8      	str	r0, [r7, #12]
   2cb04:	60b9      	str	r1, [r7, #8]
   2cb06:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2cb08:	2300      	movs	r3, #0
   2cb0a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2cb0c:	687b      	ldr	r3, [r7, #4]
   2cb0e:	78db      	ldrb	r3, [r3, #3]
   2cb10:	2201      	movs	r2, #1
   2cb12:	4053      	eors	r3, r2
   2cb14:	b2db      	uxtb	r3, r3
   2cb16:	2b00      	cmp	r3, #0
   2cb18:	d035      	beq.n	2cb86 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2cb1a:	687b      	ldr	r3, [r7, #4]
   2cb1c:	781b      	ldrb	r3, [r3, #0]
   2cb1e:	2b80      	cmp	r3, #128	; 0x80
   2cb20:	d00b      	beq.n	2cb3a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2cb22:	69fb      	ldr	r3, [r7, #28]
   2cb24:	2280      	movs	r2, #128	; 0x80
   2cb26:	0252      	lsls	r2, r2, #9
   2cb28:	4313      	orrs	r3, r2
   2cb2a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2cb2c:	687b      	ldr	r3, [r7, #4]
   2cb2e:	781b      	ldrb	r3, [r3, #0]
   2cb30:	061b      	lsls	r3, r3, #24
   2cb32:	001a      	movs	r2, r3
   2cb34:	69fb      	ldr	r3, [r7, #28]
   2cb36:	4313      	orrs	r3, r2
   2cb38:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2cb3a:	687b      	ldr	r3, [r7, #4]
   2cb3c:	785b      	ldrb	r3, [r3, #1]
   2cb3e:	2b00      	cmp	r3, #0
   2cb40:	d003      	beq.n	2cb4a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2cb42:	687b      	ldr	r3, [r7, #4]
   2cb44:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2cb46:	2b02      	cmp	r3, #2
   2cb48:	d110      	bne.n	2cb6c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2cb4a:	69fb      	ldr	r3, [r7, #28]
   2cb4c:	2280      	movs	r2, #128	; 0x80
   2cb4e:	0292      	lsls	r2, r2, #10
   2cb50:	4313      	orrs	r3, r2
   2cb52:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2cb54:	687b      	ldr	r3, [r7, #4]
   2cb56:	789b      	ldrb	r3, [r3, #2]
   2cb58:	2b00      	cmp	r3, #0
   2cb5a:	d004      	beq.n	2cb66 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2cb5c:	69fb      	ldr	r3, [r7, #28]
   2cb5e:	2280      	movs	r2, #128	; 0x80
   2cb60:	02d2      	lsls	r2, r2, #11
   2cb62:	4313      	orrs	r3, r2
   2cb64:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2cb66:	68fb      	ldr	r3, [r7, #12]
   2cb68:	68ba      	ldr	r2, [r7, #8]
   2cb6a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2cb6c:	687b      	ldr	r3, [r7, #4]
   2cb6e:	785b      	ldrb	r3, [r3, #1]
   2cb70:	2b01      	cmp	r3, #1
   2cb72:	d003      	beq.n	2cb7c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2cb74:	687b      	ldr	r3, [r7, #4]
   2cb76:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2cb78:	2b02      	cmp	r3, #2
   2cb7a:	d107      	bne.n	2cb8c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2cb7c:	69fb      	ldr	r3, [r7, #28]
   2cb7e:	4a22      	ldr	r2, [pc, #136]	; (2cc08 <_system_pinmux_config+0x10c>)
   2cb80:	4013      	ands	r3, r2
   2cb82:	61fb      	str	r3, [r7, #28]
   2cb84:	e002      	b.n	2cb8c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2cb86:	68fb      	ldr	r3, [r7, #12]
   2cb88:	68ba      	ldr	r2, [r7, #8]
   2cb8a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2cb8c:	68bb      	ldr	r3, [r7, #8]
   2cb8e:	041b      	lsls	r3, r3, #16
   2cb90:	0c1b      	lsrs	r3, r3, #16
   2cb92:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2cb94:	68bb      	ldr	r3, [r7, #8]
   2cb96:	0c1b      	lsrs	r3, r3, #16
   2cb98:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2cb9a:	69ba      	ldr	r2, [r7, #24]
   2cb9c:	69fb      	ldr	r3, [r7, #28]
   2cb9e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2cba0:	22a0      	movs	r2, #160	; 0xa0
   2cba2:	05d2      	lsls	r2, r2, #23
   2cba4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2cba6:	68fb      	ldr	r3, [r7, #12]
   2cba8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2cbaa:	697a      	ldr	r2, [r7, #20]
   2cbac:	69fb      	ldr	r3, [r7, #28]
   2cbae:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2cbb0:	22d0      	movs	r2, #208	; 0xd0
   2cbb2:	0612      	lsls	r2, r2, #24
   2cbb4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2cbb6:	68fb      	ldr	r3, [r7, #12]
   2cbb8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2cbba:	687b      	ldr	r3, [r7, #4]
   2cbbc:	78db      	ldrb	r3, [r3, #3]
   2cbbe:	2201      	movs	r2, #1
   2cbc0:	4053      	eors	r3, r2
   2cbc2:	b2db      	uxtb	r3, r3
   2cbc4:	2b00      	cmp	r3, #0
   2cbc6:	d01a      	beq.n	2cbfe <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2cbc8:	69fa      	ldr	r2, [r7, #28]
   2cbca:	2380      	movs	r3, #128	; 0x80
   2cbcc:	02db      	lsls	r3, r3, #11
   2cbce:	4013      	ands	r3, r2
   2cbd0:	d00a      	beq.n	2cbe8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2cbd2:	687b      	ldr	r3, [r7, #4]
   2cbd4:	789b      	ldrb	r3, [r3, #2]
   2cbd6:	2b01      	cmp	r3, #1
   2cbd8:	d103      	bne.n	2cbe2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2cbda:	68fb      	ldr	r3, [r7, #12]
   2cbdc:	68ba      	ldr	r2, [r7, #8]
   2cbde:	619a      	str	r2, [r3, #24]
   2cbe0:	e002      	b.n	2cbe8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2cbe2:	68fb      	ldr	r3, [r7, #12]
   2cbe4:	68ba      	ldr	r2, [r7, #8]
   2cbe6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2cbe8:	687b      	ldr	r3, [r7, #4]
   2cbea:	785b      	ldrb	r3, [r3, #1]
   2cbec:	2b01      	cmp	r3, #1
   2cbee:	d003      	beq.n	2cbf8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2cbf0:	687b      	ldr	r3, [r7, #4]
   2cbf2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2cbf4:	2b02      	cmp	r3, #2
   2cbf6:	d102      	bne.n	2cbfe <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2cbf8:	68fb      	ldr	r3, [r7, #12]
   2cbfa:	68ba      	ldr	r2, [r7, #8]
   2cbfc:	609a      	str	r2, [r3, #8]
		}
	}
}
   2cbfe:	46c0      	nop			; (mov r8, r8)
   2cc00:	46bd      	mov	sp, r7
   2cc02:	b008      	add	sp, #32
   2cc04:	bd80      	pop	{r7, pc}
   2cc06:	46c0      	nop			; (mov r8, r8)
   2cc08:	fffbffff 	.word	0xfffbffff

0002cc0c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2cc0c:	b580      	push	{r7, lr}
   2cc0e:	b084      	sub	sp, #16
   2cc10:	af00      	add	r7, sp, #0
   2cc12:	0002      	movs	r2, r0
   2cc14:	6039      	str	r1, [r7, #0]
   2cc16:	1dfb      	adds	r3, r7, #7
   2cc18:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2cc1a:	1dfb      	adds	r3, r7, #7
   2cc1c:	781b      	ldrb	r3, [r3, #0]
   2cc1e:	0018      	movs	r0, r3
   2cc20:	4b0a      	ldr	r3, [pc, #40]	; (2cc4c <system_pinmux_pin_set_config+0x40>)
   2cc22:	4798      	blx	r3
   2cc24:	0003      	movs	r3, r0
   2cc26:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2cc28:	1dfb      	adds	r3, r7, #7
   2cc2a:	781b      	ldrb	r3, [r3, #0]
   2cc2c:	221f      	movs	r2, #31
   2cc2e:	4013      	ands	r3, r2
   2cc30:	2201      	movs	r2, #1
   2cc32:	409a      	lsls	r2, r3
   2cc34:	0013      	movs	r3, r2
   2cc36:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2cc38:	683a      	ldr	r2, [r7, #0]
   2cc3a:	68b9      	ldr	r1, [r7, #8]
   2cc3c:	68fb      	ldr	r3, [r7, #12]
   2cc3e:	0018      	movs	r0, r3
   2cc40:	4b03      	ldr	r3, [pc, #12]	; (2cc50 <system_pinmux_pin_set_config+0x44>)
   2cc42:	4798      	blx	r3
}
   2cc44:	46c0      	nop			; (mov r8, r8)
   2cc46:	46bd      	mov	sp, r7
   2cc48:	b004      	add	sp, #16
   2cc4a:	bd80      	pop	{r7, pc}
   2cc4c:	0002ca9d 	.word	0x0002ca9d
   2cc50:	0002cafd 	.word	0x0002cafd

0002cc54 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2cc54:	b580      	push	{r7, lr}
   2cc56:	af00      	add	r7, sp, #0
	return;
   2cc58:	46c0      	nop			; (mov r8, r8)
}
   2cc5a:	46bd      	mov	sp, r7
   2cc5c:	bd80      	pop	{r7, pc}
	...

0002cc60 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2cc60:	b580      	push	{r7, lr}
   2cc62:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2cc64:	4b06      	ldr	r3, [pc, #24]	; (2cc80 <system_init+0x20>)
   2cc66:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2cc68:	4b06      	ldr	r3, [pc, #24]	; (2cc84 <system_init+0x24>)
   2cc6a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2cc6c:	4b06      	ldr	r3, [pc, #24]	; (2cc88 <system_init+0x28>)
   2cc6e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2cc70:	4b06      	ldr	r3, [pc, #24]	; (2cc8c <system_init+0x2c>)
   2cc72:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2cc74:	4b06      	ldr	r3, [pc, #24]	; (2cc90 <system_init+0x30>)
   2cc76:	4798      	blx	r3
}
   2cc78:	46c0      	nop			; (mov r8, r8)
   2cc7a:	46bd      	mov	sp, r7
   2cc7c:	bd80      	pop	{r7, pc}
   2cc7e:	46c0      	nop			; (mov r8, r8)
   2cc80:	0002c2e1 	.word	0x0002c2e1
   2cc84:	00028da9 	.word	0x00028da9
   2cc88:	00012669 	.word	0x00012669
   2cc8c:	00029181 	.word	0x00029181
   2cc90:	0002cc55 	.word	0x0002cc55

0002cc94 <system_gclk_chan_get_config_defaults>:
{
   2cc94:	b580      	push	{r7, lr}
   2cc96:	b082      	sub	sp, #8
   2cc98:	af00      	add	r7, sp, #0
   2cc9a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2cc9c:	687b      	ldr	r3, [r7, #4]
   2cc9e:	2200      	movs	r2, #0
   2cca0:	701a      	strb	r2, [r3, #0]
}
   2cca2:	46c0      	nop			; (mov r8, r8)
   2cca4:	46bd      	mov	sp, r7
   2cca6:	b002      	add	sp, #8
   2cca8:	bd80      	pop	{r7, pc}
	...

0002ccac <system_apb_clock_set_mask>:
{
   2ccac:	b580      	push	{r7, lr}
   2ccae:	b082      	sub	sp, #8
   2ccb0:	af00      	add	r7, sp, #0
   2ccb2:	0002      	movs	r2, r0
   2ccb4:	6039      	str	r1, [r7, #0]
   2ccb6:	1dfb      	adds	r3, r7, #7
   2ccb8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2ccba:	1dfb      	adds	r3, r7, #7
   2ccbc:	781b      	ldrb	r3, [r3, #0]
   2ccbe:	2b01      	cmp	r3, #1
   2ccc0:	d00a      	beq.n	2ccd8 <system_apb_clock_set_mask+0x2c>
   2ccc2:	2b02      	cmp	r3, #2
   2ccc4:	d00f      	beq.n	2cce6 <system_apb_clock_set_mask+0x3a>
   2ccc6:	2b00      	cmp	r3, #0
   2ccc8:	d114      	bne.n	2ccf4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2ccca:	4b0e      	ldr	r3, [pc, #56]	; (2cd04 <system_apb_clock_set_mask+0x58>)
   2cccc:	4a0d      	ldr	r2, [pc, #52]	; (2cd04 <system_apb_clock_set_mask+0x58>)
   2ccce:	6991      	ldr	r1, [r2, #24]
   2ccd0:	683a      	ldr	r2, [r7, #0]
   2ccd2:	430a      	orrs	r2, r1
   2ccd4:	619a      	str	r2, [r3, #24]
			break;
   2ccd6:	e00f      	b.n	2ccf8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2ccd8:	4b0a      	ldr	r3, [pc, #40]	; (2cd04 <system_apb_clock_set_mask+0x58>)
   2ccda:	4a0a      	ldr	r2, [pc, #40]	; (2cd04 <system_apb_clock_set_mask+0x58>)
   2ccdc:	69d1      	ldr	r1, [r2, #28]
   2ccde:	683a      	ldr	r2, [r7, #0]
   2cce0:	430a      	orrs	r2, r1
   2cce2:	61da      	str	r2, [r3, #28]
			break;
   2cce4:	e008      	b.n	2ccf8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2cce6:	4b07      	ldr	r3, [pc, #28]	; (2cd04 <system_apb_clock_set_mask+0x58>)
   2cce8:	4a06      	ldr	r2, [pc, #24]	; (2cd04 <system_apb_clock_set_mask+0x58>)
   2ccea:	6a11      	ldr	r1, [r2, #32]
   2ccec:	683a      	ldr	r2, [r7, #0]
   2ccee:	430a      	orrs	r2, r1
   2ccf0:	621a      	str	r2, [r3, #32]
			break;
   2ccf2:	e001      	b.n	2ccf8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2ccf4:	2317      	movs	r3, #23
   2ccf6:	e000      	b.n	2ccfa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2ccf8:	2300      	movs	r3, #0
}
   2ccfa:	0018      	movs	r0, r3
   2ccfc:	46bd      	mov	sp, r7
   2ccfe:	b002      	add	sp, #8
   2cd00:	bd80      	pop	{r7, pc}
   2cd02:	46c0      	nop			; (mov r8, r8)
   2cd04:	40000400 	.word	0x40000400

0002cd08 <system_pinmux_get_config_defaults>:
{
   2cd08:	b580      	push	{r7, lr}
   2cd0a:	b082      	sub	sp, #8
   2cd0c:	af00      	add	r7, sp, #0
   2cd0e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2cd10:	687b      	ldr	r3, [r7, #4]
   2cd12:	2280      	movs	r2, #128	; 0x80
   2cd14:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2cd16:	687b      	ldr	r3, [r7, #4]
   2cd18:	2200      	movs	r2, #0
   2cd1a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2cd1c:	687b      	ldr	r3, [r7, #4]
   2cd1e:	2201      	movs	r2, #1
   2cd20:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2cd22:	687b      	ldr	r3, [r7, #4]
   2cd24:	2200      	movs	r2, #0
   2cd26:	70da      	strb	r2, [r3, #3]
}
   2cd28:	46c0      	nop			; (mov r8, r8)
   2cd2a:	46bd      	mov	sp, r7
   2cd2c:	b002      	add	sp, #8
   2cd2e:	bd80      	pop	{r7, pc}

0002cd30 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2cd30:	b580      	push	{r7, lr}
   2cd32:	b084      	sub	sp, #16
   2cd34:	af00      	add	r7, sp, #0
   2cd36:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2cd38:	2300      	movs	r3, #0
   2cd3a:	60fb      	str	r3, [r7, #12]
   2cd3c:	e00c      	b.n	2cd58 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2cd3e:	4b0a      	ldr	r3, [pc, #40]	; (2cd68 <_tcc_get_inst_index+0x38>)
   2cd40:	68fa      	ldr	r2, [r7, #12]
   2cd42:	0092      	lsls	r2, r2, #2
   2cd44:	58d2      	ldr	r2, [r2, r3]
   2cd46:	687b      	ldr	r3, [r7, #4]
   2cd48:	429a      	cmp	r2, r3
   2cd4a:	d102      	bne.n	2cd52 <_tcc_get_inst_index+0x22>
			return i;
   2cd4c:	68fb      	ldr	r3, [r7, #12]
   2cd4e:	b2db      	uxtb	r3, r3
   2cd50:	e006      	b.n	2cd60 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2cd52:	68fb      	ldr	r3, [r7, #12]
   2cd54:	3301      	adds	r3, #1
   2cd56:	60fb      	str	r3, [r7, #12]
   2cd58:	68fb      	ldr	r3, [r7, #12]
   2cd5a:	2b02      	cmp	r3, #2
   2cd5c:	d9ef      	bls.n	2cd3e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2cd5e:	2300      	movs	r3, #0
}
   2cd60:	0018      	movs	r0, r3
   2cd62:	46bd      	mov	sp, r7
   2cd64:	b004      	add	sp, #16
   2cd66:	bd80      	pop	{r7, pc}
   2cd68:	0003c690 	.word	0x0003c690

0002cd6c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2cd6c:	b590      	push	{r4, r7, lr}
   2cd6e:	b085      	sub	sp, #20
   2cd70:	af00      	add	r7, sp, #0
   2cd72:	6078      	str	r0, [r7, #4]
   2cd74:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2cd76:	230f      	movs	r3, #15
   2cd78:	18fc      	adds	r4, r7, r3
   2cd7a:	683b      	ldr	r3, [r7, #0]
   2cd7c:	0018      	movs	r0, r3
   2cd7e:	4bad      	ldr	r3, [pc, #692]	; (2d034 <tcc_get_config_defaults+0x2c8>)
   2cd80:	4798      	blx	r3
   2cd82:	0003      	movs	r3, r0
   2cd84:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2cd86:	687b      	ldr	r3, [r7, #4]
   2cd88:	2200      	movs	r2, #0
   2cd8a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2cd8c:	230f      	movs	r3, #15
   2cd8e:	18fb      	adds	r3, r7, r3
   2cd90:	781a      	ldrb	r2, [r3, #0]
   2cd92:	4ba9      	ldr	r3, [pc, #676]	; (2d038 <tcc_get_config_defaults+0x2cc>)
   2cd94:	0092      	lsls	r2, r2, #2
   2cd96:	58d2      	ldr	r2, [r2, r3]
   2cd98:	687b      	ldr	r3, [r7, #4]
   2cd9a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2cd9c:	687b      	ldr	r3, [r7, #4]
   2cd9e:	2200      	movs	r2, #0
   2cda0:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2cda2:	687b      	ldr	r3, [r7, #4]
   2cda4:	2200      	movs	r2, #0
   2cda6:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2cda8:	687b      	ldr	r3, [r7, #4]
   2cdaa:	2200      	movs	r2, #0
   2cdac:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2cdae:	687b      	ldr	r3, [r7, #4]
   2cdb0:	2200      	movs	r2, #0
   2cdb2:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2cdb4:	687b      	ldr	r3, [r7, #4]
   2cdb6:	2200      	movs	r2, #0
   2cdb8:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2cdba:	687b      	ldr	r3, [r7, #4]
   2cdbc:	2200      	movs	r2, #0
   2cdbe:	61da      	str	r2, [r3, #28]
   2cdc0:	687b      	ldr	r3, [r7, #4]
   2cdc2:	2200      	movs	r2, #0
   2cdc4:	621a      	str	r2, [r3, #32]
   2cdc6:	687b      	ldr	r3, [r7, #4]
   2cdc8:	2200      	movs	r2, #0
   2cdca:	625a      	str	r2, [r3, #36]	; 0x24
   2cdcc:	687b      	ldr	r3, [r7, #4]
   2cdce:	2200      	movs	r2, #0
   2cdd0:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2cdd2:	687b      	ldr	r3, [r7, #4]
   2cdd4:	2200      	movs	r2, #0
   2cdd6:	751a      	strb	r2, [r3, #20]
   2cdd8:	687b      	ldr	r3, [r7, #4]
   2cdda:	2200      	movs	r2, #0
   2cddc:	755a      	strb	r2, [r3, #21]
   2cdde:	687b      	ldr	r3, [r7, #4]
   2cde0:	2200      	movs	r2, #0
   2cde2:	759a      	strb	r2, [r3, #22]
   2cde4:	687b      	ldr	r3, [r7, #4]
   2cde6:	2200      	movs	r2, #0
   2cde8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2cdea:	687b      	ldr	r3, [r7, #4]
   2cdec:	2200      	movs	r2, #0
   2cdee:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2cdf0:	687b      	ldr	r3, [r7, #4]
   2cdf2:	2200      	movs	r2, #0
   2cdf4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2cdf6:	687b      	ldr	r3, [r7, #4]
   2cdf8:	2200      	movs	r2, #0
   2cdfa:	741a      	strb	r2, [r3, #16]
   2cdfc:	687b      	ldr	r3, [r7, #4]
   2cdfe:	2200      	movs	r2, #0
   2ce00:	745a      	strb	r2, [r3, #17]
   2ce02:	687b      	ldr	r3, [r7, #4]
   2ce04:	2200      	movs	r2, #0
   2ce06:	749a      	strb	r2, [r3, #18]
   2ce08:	687b      	ldr	r3, [r7, #4]
   2ce0a:	2200      	movs	r2, #0
   2ce0c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2ce0e:	687b      	ldr	r3, [r7, #4]
   2ce10:	222c      	movs	r2, #44	; 0x2c
   2ce12:	2100      	movs	r1, #0
   2ce14:	5499      	strb	r1, [r3, r2]
   2ce16:	687b      	ldr	r3, [r7, #4]
   2ce18:	222d      	movs	r2, #45	; 0x2d
   2ce1a:	2100      	movs	r1, #0
   2ce1c:	5499      	strb	r1, [r3, r2]
   2ce1e:	687b      	ldr	r3, [r7, #4]
   2ce20:	222e      	movs	r2, #46	; 0x2e
   2ce22:	2100      	movs	r1, #0
   2ce24:	5499      	strb	r1, [r3, r2]
   2ce26:	687b      	ldr	r3, [r7, #4]
   2ce28:	222f      	movs	r2, #47	; 0x2f
   2ce2a:	2100      	movs	r1, #0
   2ce2c:	5499      	strb	r1, [r3, r2]
   2ce2e:	687b      	ldr	r3, [r7, #4]
   2ce30:	2230      	movs	r2, #48	; 0x30
   2ce32:	2100      	movs	r1, #0
   2ce34:	5499      	strb	r1, [r3, r2]
   2ce36:	687b      	ldr	r3, [r7, #4]
   2ce38:	2231      	movs	r2, #49	; 0x31
   2ce3a:	2100      	movs	r1, #0
   2ce3c:	5499      	strb	r1, [r3, r2]
   2ce3e:	687b      	ldr	r3, [r7, #4]
   2ce40:	2232      	movs	r2, #50	; 0x32
   2ce42:	2100      	movs	r1, #0
   2ce44:	5499      	strb	r1, [r3, r2]
   2ce46:	687b      	ldr	r3, [r7, #4]
   2ce48:	2233      	movs	r2, #51	; 0x33
   2ce4a:	2100      	movs	r1, #0
   2ce4c:	5499      	strb	r1, [r3, r2]
   2ce4e:	687b      	ldr	r3, [r7, #4]
   2ce50:	2234      	movs	r2, #52	; 0x34
   2ce52:	2100      	movs	r1, #0
   2ce54:	5499      	strb	r1, [r3, r2]
   2ce56:	687b      	ldr	r3, [r7, #4]
   2ce58:	2235      	movs	r2, #53	; 0x35
   2ce5a:	2100      	movs	r1, #0
   2ce5c:	5499      	strb	r1, [r3, r2]
   2ce5e:	687b      	ldr	r3, [r7, #4]
   2ce60:	2236      	movs	r2, #54	; 0x36
   2ce62:	2100      	movs	r1, #0
   2ce64:	5499      	strb	r1, [r3, r2]
   2ce66:	687b      	ldr	r3, [r7, #4]
   2ce68:	2237      	movs	r2, #55	; 0x37
   2ce6a:	2100      	movs	r1, #0
   2ce6c:	5499      	strb	r1, [r3, r2]
   2ce6e:	687b      	ldr	r3, [r7, #4]
   2ce70:	2238      	movs	r2, #56	; 0x38
   2ce72:	2100      	movs	r1, #0
   2ce74:	5499      	strb	r1, [r3, r2]
   2ce76:	687b      	ldr	r3, [r7, #4]
   2ce78:	2239      	movs	r2, #57	; 0x39
   2ce7a:	2100      	movs	r1, #0
   2ce7c:	5499      	strb	r1, [r3, r2]
   2ce7e:	687b      	ldr	r3, [r7, #4]
   2ce80:	223a      	movs	r2, #58	; 0x3a
   2ce82:	2100      	movs	r1, #0
   2ce84:	5499      	strb	r1, [r3, r2]
   2ce86:	687b      	ldr	r3, [r7, #4]
   2ce88:	223b      	movs	r2, #59	; 0x3b
   2ce8a:	2100      	movs	r1, #0
   2ce8c:	5499      	strb	r1, [r3, r2]
   2ce8e:	687b      	ldr	r3, [r7, #4]
   2ce90:	223c      	movs	r2, #60	; 0x3c
   2ce92:	2100      	movs	r1, #0
   2ce94:	5499      	strb	r1, [r3, r2]
   2ce96:	687b      	ldr	r3, [r7, #4]
   2ce98:	223d      	movs	r2, #61	; 0x3d
   2ce9a:	2100      	movs	r1, #0
   2ce9c:	5499      	strb	r1, [r3, r2]
   2ce9e:	687b      	ldr	r3, [r7, #4]
   2cea0:	223e      	movs	r2, #62	; 0x3e
   2cea2:	2100      	movs	r1, #0
   2cea4:	5499      	strb	r1, [r3, r2]
   2cea6:	687b      	ldr	r3, [r7, #4]
   2cea8:	223f      	movs	r2, #63	; 0x3f
   2ceaa:	2100      	movs	r1, #0
   2ceac:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2ceae:	687b      	ldr	r3, [r7, #4]
   2ceb0:	2240      	movs	r2, #64	; 0x40
   2ceb2:	2100      	movs	r1, #0
   2ceb4:	5499      	strb	r1, [r3, r2]
   2ceb6:	687b      	ldr	r3, [r7, #4]
   2ceb8:	2241      	movs	r2, #65	; 0x41
   2ceba:	2100      	movs	r1, #0
   2cebc:	5499      	strb	r1, [r3, r2]
   2cebe:	687b      	ldr	r3, [r7, #4]
   2cec0:	2242      	movs	r2, #66	; 0x42
   2cec2:	2100      	movs	r1, #0
   2cec4:	5499      	strb	r1, [r3, r2]
   2cec6:	687b      	ldr	r3, [r7, #4]
   2cec8:	2243      	movs	r2, #67	; 0x43
   2ceca:	2100      	movs	r1, #0
   2cecc:	5499      	strb	r1, [r3, r2]
   2cece:	687b      	ldr	r3, [r7, #4]
   2ced0:	2244      	movs	r2, #68	; 0x44
   2ced2:	2100      	movs	r1, #0
   2ced4:	5499      	strb	r1, [r3, r2]
   2ced6:	687b      	ldr	r3, [r7, #4]
   2ced8:	2245      	movs	r2, #69	; 0x45
   2ceda:	2100      	movs	r1, #0
   2cedc:	5499      	strb	r1, [r3, r2]
   2cede:	687b      	ldr	r3, [r7, #4]
   2cee0:	2246      	movs	r2, #70	; 0x46
   2cee2:	2100      	movs	r1, #0
   2cee4:	5499      	strb	r1, [r3, r2]
   2cee6:	687b      	ldr	r3, [r7, #4]
   2cee8:	2247      	movs	r2, #71	; 0x47
   2ceea:	2100      	movs	r1, #0
   2ceec:	5499      	strb	r1, [r3, r2]
   2ceee:	687b      	ldr	r3, [r7, #4]
   2cef0:	2248      	movs	r2, #72	; 0x48
   2cef2:	2100      	movs	r1, #0
   2cef4:	5499      	strb	r1, [r3, r2]
   2cef6:	687b      	ldr	r3, [r7, #4]
   2cef8:	2249      	movs	r2, #73	; 0x49
   2cefa:	2100      	movs	r1, #0
   2cefc:	5499      	strb	r1, [r3, r2]
   2cefe:	687b      	ldr	r3, [r7, #4]
   2cf00:	224a      	movs	r2, #74	; 0x4a
   2cf02:	2100      	movs	r1, #0
   2cf04:	5499      	strb	r1, [r3, r2]
   2cf06:	687b      	ldr	r3, [r7, #4]
   2cf08:	224b      	movs	r2, #75	; 0x4b
   2cf0a:	2100      	movs	r1, #0
   2cf0c:	5499      	strb	r1, [r3, r2]
   2cf0e:	687b      	ldr	r3, [r7, #4]
   2cf10:	224c      	movs	r2, #76	; 0x4c
   2cf12:	2100      	movs	r1, #0
   2cf14:	5499      	strb	r1, [r3, r2]
   2cf16:	687b      	ldr	r3, [r7, #4]
   2cf18:	224d      	movs	r2, #77	; 0x4d
   2cf1a:	2100      	movs	r1, #0
   2cf1c:	5499      	strb	r1, [r3, r2]
   2cf1e:	687b      	ldr	r3, [r7, #4]
   2cf20:	224e      	movs	r2, #78	; 0x4e
   2cf22:	2100      	movs	r1, #0
   2cf24:	5499      	strb	r1, [r3, r2]
   2cf26:	687b      	ldr	r3, [r7, #4]
   2cf28:	224f      	movs	r2, #79	; 0x4f
   2cf2a:	2100      	movs	r1, #0
   2cf2c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2cf2e:	687b      	ldr	r3, [r7, #4]
   2cf30:	2250      	movs	r2, #80	; 0x50
   2cf32:	2100      	movs	r1, #0
   2cf34:	5499      	strb	r1, [r3, r2]
   2cf36:	687b      	ldr	r3, [r7, #4]
   2cf38:	2251      	movs	r2, #81	; 0x51
   2cf3a:	2100      	movs	r1, #0
   2cf3c:	5499      	strb	r1, [r3, r2]
   2cf3e:	687b      	ldr	r3, [r7, #4]
   2cf40:	2252      	movs	r2, #82	; 0x52
   2cf42:	2100      	movs	r1, #0
   2cf44:	5499      	strb	r1, [r3, r2]
   2cf46:	687b      	ldr	r3, [r7, #4]
   2cf48:	2253      	movs	r2, #83	; 0x53
   2cf4a:	2100      	movs	r1, #0
   2cf4c:	5499      	strb	r1, [r3, r2]
   2cf4e:	687b      	ldr	r3, [r7, #4]
   2cf50:	2254      	movs	r2, #84	; 0x54
   2cf52:	2100      	movs	r1, #0
   2cf54:	5499      	strb	r1, [r3, r2]
   2cf56:	687b      	ldr	r3, [r7, #4]
   2cf58:	2255      	movs	r2, #85	; 0x55
   2cf5a:	2100      	movs	r1, #0
   2cf5c:	5499      	strb	r1, [r3, r2]
   2cf5e:	687b      	ldr	r3, [r7, #4]
   2cf60:	2256      	movs	r2, #86	; 0x56
   2cf62:	2100      	movs	r1, #0
   2cf64:	5499      	strb	r1, [r3, r2]
   2cf66:	687b      	ldr	r3, [r7, #4]
   2cf68:	2257      	movs	r2, #87	; 0x57
   2cf6a:	2100      	movs	r1, #0
   2cf6c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2cf6e:	687b      	ldr	r3, [r7, #4]
   2cf70:	2298      	movs	r2, #152	; 0x98
   2cf72:	2100      	movs	r1, #0
   2cf74:	5499      	strb	r1, [r3, r2]
   2cf76:	687b      	ldr	r3, [r7, #4]
   2cf78:	2200      	movs	r2, #0
   2cf7a:	659a      	str	r2, [r3, #88]	; 0x58
   2cf7c:	687b      	ldr	r3, [r7, #4]
   2cf7e:	2200      	movs	r2, #0
   2cf80:	679a      	str	r2, [r3, #120]	; 0x78
   2cf82:	687b      	ldr	r3, [r7, #4]
   2cf84:	2299      	movs	r2, #153	; 0x99
   2cf86:	2100      	movs	r1, #0
   2cf88:	5499      	strb	r1, [r3, r2]
   2cf8a:	687b      	ldr	r3, [r7, #4]
   2cf8c:	2200      	movs	r2, #0
   2cf8e:	65da      	str	r2, [r3, #92]	; 0x5c
   2cf90:	687b      	ldr	r3, [r7, #4]
   2cf92:	2200      	movs	r2, #0
   2cf94:	67da      	str	r2, [r3, #124]	; 0x7c
   2cf96:	687b      	ldr	r3, [r7, #4]
   2cf98:	229a      	movs	r2, #154	; 0x9a
   2cf9a:	2100      	movs	r1, #0
   2cf9c:	5499      	strb	r1, [r3, r2]
   2cf9e:	687b      	ldr	r3, [r7, #4]
   2cfa0:	2200      	movs	r2, #0
   2cfa2:	661a      	str	r2, [r3, #96]	; 0x60
   2cfa4:	687b      	ldr	r3, [r7, #4]
   2cfa6:	2280      	movs	r2, #128	; 0x80
   2cfa8:	2100      	movs	r1, #0
   2cfaa:	5099      	str	r1, [r3, r2]
   2cfac:	687b      	ldr	r3, [r7, #4]
   2cfae:	229b      	movs	r2, #155	; 0x9b
   2cfb0:	2100      	movs	r1, #0
   2cfb2:	5499      	strb	r1, [r3, r2]
   2cfb4:	687b      	ldr	r3, [r7, #4]
   2cfb6:	2200      	movs	r2, #0
   2cfb8:	665a      	str	r2, [r3, #100]	; 0x64
   2cfba:	687b      	ldr	r3, [r7, #4]
   2cfbc:	2284      	movs	r2, #132	; 0x84
   2cfbe:	2100      	movs	r1, #0
   2cfc0:	5099      	str	r1, [r3, r2]
   2cfc2:	687b      	ldr	r3, [r7, #4]
   2cfc4:	229c      	movs	r2, #156	; 0x9c
   2cfc6:	2100      	movs	r1, #0
   2cfc8:	5499      	strb	r1, [r3, r2]
   2cfca:	687b      	ldr	r3, [r7, #4]
   2cfcc:	2200      	movs	r2, #0
   2cfce:	669a      	str	r2, [r3, #104]	; 0x68
   2cfd0:	687b      	ldr	r3, [r7, #4]
   2cfd2:	2288      	movs	r2, #136	; 0x88
   2cfd4:	2100      	movs	r1, #0
   2cfd6:	5099      	str	r1, [r3, r2]
   2cfd8:	687b      	ldr	r3, [r7, #4]
   2cfda:	229d      	movs	r2, #157	; 0x9d
   2cfdc:	2100      	movs	r1, #0
   2cfde:	5499      	strb	r1, [r3, r2]
   2cfe0:	687b      	ldr	r3, [r7, #4]
   2cfe2:	2200      	movs	r2, #0
   2cfe4:	66da      	str	r2, [r3, #108]	; 0x6c
   2cfe6:	687b      	ldr	r3, [r7, #4]
   2cfe8:	228c      	movs	r2, #140	; 0x8c
   2cfea:	2100      	movs	r1, #0
   2cfec:	5099      	str	r1, [r3, r2]
   2cfee:	687b      	ldr	r3, [r7, #4]
   2cff0:	229e      	movs	r2, #158	; 0x9e
   2cff2:	2100      	movs	r1, #0
   2cff4:	5499      	strb	r1, [r3, r2]
   2cff6:	687b      	ldr	r3, [r7, #4]
   2cff8:	2200      	movs	r2, #0
   2cffa:	671a      	str	r2, [r3, #112]	; 0x70
   2cffc:	687b      	ldr	r3, [r7, #4]
   2cffe:	2290      	movs	r2, #144	; 0x90
   2d000:	2100      	movs	r1, #0
   2d002:	5099      	str	r1, [r3, r2]
   2d004:	687b      	ldr	r3, [r7, #4]
   2d006:	229f      	movs	r2, #159	; 0x9f
   2d008:	2100      	movs	r1, #0
   2d00a:	5499      	strb	r1, [r3, r2]
   2d00c:	687b      	ldr	r3, [r7, #4]
   2d00e:	2200      	movs	r2, #0
   2d010:	675a      	str	r2, [r3, #116]	; 0x74
   2d012:	687b      	ldr	r3, [r7, #4]
   2d014:	2294      	movs	r2, #148	; 0x94
   2d016:	2100      	movs	r1, #0
   2d018:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2d01a:	687b      	ldr	r3, [r7, #4]
   2d01c:	22a0      	movs	r2, #160	; 0xa0
   2d01e:	2101      	movs	r1, #1
   2d020:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2d022:	687b      	ldr	r3, [r7, #4]
   2d024:	22a1      	movs	r2, #161	; 0xa1
   2d026:	2100      	movs	r1, #0
   2d028:	5499      	strb	r1, [r3, r2]
}
   2d02a:	46c0      	nop			; (mov r8, r8)
   2d02c:	46bd      	mov	sp, r7
   2d02e:	b005      	add	sp, #20
   2d030:	bd90      	pop	{r4, r7, pc}
   2d032:	46c0      	nop			; (mov r8, r8)
   2d034:	0002cd31 	.word	0x0002cd31
   2d038:	0003c6ac 	.word	0x0003c6ac

0002d03c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2d03c:	b580      	push	{r7, lr}
   2d03e:	b086      	sub	sp, #24
   2d040:	af00      	add	r7, sp, #0
   2d042:	60b9      	str	r1, [r7, #8]
   2d044:	607a      	str	r2, [r7, #4]
   2d046:	230f      	movs	r3, #15
   2d048:	18fb      	adds	r3, r7, r3
   2d04a:	1c02      	adds	r2, r0, #0
   2d04c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2d04e:	2300      	movs	r3, #0
   2d050:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2d052:	2300      	movs	r3, #0
   2d054:	613b      	str	r3, [r7, #16]
   2d056:	e01d      	b.n	2d094 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2d058:	68ba      	ldr	r2, [r7, #8]
   2d05a:	693b      	ldr	r3, [r7, #16]
   2d05c:	18d3      	adds	r3, r2, r3
   2d05e:	3310      	adds	r3, #16
   2d060:	781b      	ldrb	r3, [r3, #0]
   2d062:	2b01      	cmp	r3, #1
   2d064:	d113      	bne.n	2d08e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2d066:	230f      	movs	r3, #15
   2d068:	18fb      	adds	r3, r7, r3
   2d06a:	781b      	ldrb	r3, [r3, #0]
   2d06c:	4a1b      	ldr	r2, [pc, #108]	; (2d0dc <_tcc_build_ctrla+0xa0>)
   2d06e:	5cd3      	ldrb	r3, [r2, r3]
   2d070:	001a      	movs	r2, r3
   2d072:	693b      	ldr	r3, [r7, #16]
   2d074:	429a      	cmp	r2, r3
   2d076:	da01      	bge.n	2d07c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2d078:	2317      	movs	r3, #23
   2d07a:	e02a      	b.n	2d0d2 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2d07c:	2380      	movs	r3, #128	; 0x80
   2d07e:	045a      	lsls	r2, r3, #17
   2d080:	693b      	ldr	r3, [r7, #16]
   2d082:	409a      	lsls	r2, r3
   2d084:	0013      	movs	r3, r2
   2d086:	001a      	movs	r2, r3
   2d088:	697b      	ldr	r3, [r7, #20]
   2d08a:	4313      	orrs	r3, r2
   2d08c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2d08e:	693b      	ldr	r3, [r7, #16]
   2d090:	3301      	adds	r3, #1
   2d092:	613b      	str	r3, [r7, #16]
   2d094:	693b      	ldr	r3, [r7, #16]
   2d096:	2b03      	cmp	r3, #3
   2d098:	ddde      	ble.n	2d058 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2d09a:	68bb      	ldr	r3, [r7, #8]
   2d09c:	22a1      	movs	r2, #161	; 0xa1
   2d09e:	5c9b      	ldrb	r3, [r3, r2]
   2d0a0:	2b00      	cmp	r3, #0
   2d0a2:	d004      	beq.n	2d0ae <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2d0a4:	697b      	ldr	r3, [r7, #20]
   2d0a6:	2280      	movs	r2, #128	; 0x80
   2d0a8:	0112      	lsls	r2, r2, #4
   2d0aa:	4313      	orrs	r3, r2
   2d0ac:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2d0ae:	68bb      	ldr	r3, [r7, #8]
   2d0b0:	7b1b      	ldrb	r3, [r3, #12]
   2d0b2:	031b      	lsls	r3, r3, #12
   2d0b4:	001a      	movs	r2, r3
   2d0b6:	697b      	ldr	r3, [r7, #20]
   2d0b8:	4313      	orrs	r3, r2
   2d0ba:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2d0bc:	68bb      	ldr	r3, [r7, #8]
   2d0be:	7adb      	ldrb	r3, [r3, #11]
   2d0c0:	021b      	lsls	r3, r3, #8
   2d0c2:	001a      	movs	r2, r3
   2d0c4:	697b      	ldr	r3, [r7, #20]
   2d0c6:	4313      	orrs	r3, r2
   2d0c8:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2d0ca:	687b      	ldr	r3, [r7, #4]
   2d0cc:	697a      	ldr	r2, [r7, #20]
   2d0ce:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2d0d0:	2300      	movs	r3, #0
}
   2d0d2:	0018      	movs	r0, r3
   2d0d4:	46bd      	mov	sp, r7
   2d0d6:	b006      	add	sp, #24
   2d0d8:	bd80      	pop	{r7, pc}
   2d0da:	46c0      	nop			; (mov r8, r8)
   2d0dc:	0003c6b8 	.word	0x0003c6b8

0002d0e0 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2d0e0:	b580      	push	{r7, lr}
   2d0e2:	b086      	sub	sp, #24
   2d0e4:	af00      	add	r7, sp, #0
   2d0e6:	60b9      	str	r1, [r7, #8]
   2d0e8:	607a      	str	r2, [r7, #4]
   2d0ea:	230f      	movs	r3, #15
   2d0ec:	18fb      	adds	r3, r7, r3
   2d0ee:	1c02      	adds	r2, r0, #0
   2d0f0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2d0f2:	2317      	movs	r3, #23
   2d0f4:	18fb      	adds	r3, r7, r3
   2d0f6:	2200      	movs	r2, #0
   2d0f8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2d0fa:	68bb      	ldr	r3, [r7, #8]
   2d0fc:	7a1b      	ldrb	r3, [r3, #8]
   2d0fe:	2b00      	cmp	r3, #0
   2d100:	d007      	beq.n	2d112 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2d102:	2317      	movs	r3, #23
   2d104:	18fb      	adds	r3, r7, r3
   2d106:	2217      	movs	r2, #23
   2d108:	18ba      	adds	r2, r7, r2
   2d10a:	7812      	ldrb	r2, [r2, #0]
   2d10c:	2104      	movs	r1, #4
   2d10e:	430a      	orrs	r2, r1
   2d110:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2d112:	68bb      	ldr	r3, [r7, #8]
   2d114:	7a5b      	ldrb	r3, [r3, #9]
   2d116:	2b01      	cmp	r3, #1
   2d118:	d107      	bne.n	2d12a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2d11a:	2317      	movs	r3, #23
   2d11c:	18fb      	adds	r3, r7, r3
   2d11e:	2217      	movs	r2, #23
   2d120:	18ba      	adds	r2, r7, r2
   2d122:	7812      	ldrb	r2, [r2, #0]
   2d124:	2101      	movs	r1, #1
   2d126:	430a      	orrs	r2, r1
   2d128:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2d12a:	687b      	ldr	r3, [r7, #4]
   2d12c:	2217      	movs	r2, #23
   2d12e:	18ba      	adds	r2, r7, r2
   2d130:	7812      	ldrb	r2, [r2, #0]
   2d132:	701a      	strb	r2, [r3, #0]
}
   2d134:	46c0      	nop			; (mov r8, r8)
   2d136:	46bd      	mov	sp, r7
   2d138:	b006      	add	sp, #24
   2d13a:	bd80      	pop	{r7, pc}

0002d13c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2d13c:	b580      	push	{r7, lr}
   2d13e:	b088      	sub	sp, #32
   2d140:	af00      	add	r7, sp, #0
   2d142:	60b9      	str	r1, [r7, #8]
   2d144:	607a      	str	r2, [r7, #4]
   2d146:	230f      	movs	r3, #15
   2d148:	18fb      	adds	r3, r7, r3
   2d14a:	1c02      	adds	r2, r0, #0
   2d14c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2d14e:	230f      	movs	r3, #15
   2d150:	18fb      	adds	r3, r7, r3
   2d152:	781a      	ldrb	r2, [r3, #0]
   2d154:	231b      	movs	r3, #27
   2d156:	18fb      	adds	r3, r7, r3
   2d158:	493e      	ldr	r1, [pc, #248]	; (2d254 <_tcc_build_faults+0x118>)
   2d15a:	5c8a      	ldrb	r2, [r1, r2]
   2d15c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2d15e:	2300      	movs	r3, #0
   2d160:	61fb      	str	r3, [r7, #28]
   2d162:	e06e      	b.n	2d242 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2d164:	69fa      	ldr	r2, [r7, #28]
   2d166:	0013      	movs	r3, r2
   2d168:	009b      	lsls	r3, r3, #2
   2d16a:	189b      	adds	r3, r3, r2
   2d16c:	005b      	lsls	r3, r3, #1
   2d16e:	3328      	adds	r3, #40	; 0x28
   2d170:	68ba      	ldr	r2, [r7, #8]
   2d172:	18d3      	adds	r3, r2, r3
   2d174:	3304      	adds	r3, #4
   2d176:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2d178:	697b      	ldr	r3, [r7, #20]
   2d17a:	7a5b      	ldrb	r3, [r3, #9]
   2d17c:	221b      	movs	r2, #27
   2d17e:	18ba      	adds	r2, r7, r2
   2d180:	7812      	ldrb	r2, [r2, #0]
   2d182:	429a      	cmp	r2, r3
   2d184:	d801      	bhi.n	2d18a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2d186:	2317      	movs	r3, #23
   2d188:	e05f      	b.n	2d24a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2d18a:	697b      	ldr	r3, [r7, #20]
   2d18c:	781b      	ldrb	r3, [r3, #0]
   2d18e:	2b0f      	cmp	r3, #15
   2d190:	d901      	bls.n	2d196 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2d192:	2317      	movs	r3, #23
   2d194:	e059      	b.n	2d24a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2d196:	697b      	ldr	r3, [r7, #20]
   2d198:	781b      	ldrb	r3, [r3, #0]
   2d19a:	061b      	lsls	r3, r3, #24
   2d19c:	001a      	movs	r2, r3
   2d19e:	23f0      	movs	r3, #240	; 0xf0
   2d1a0:	051b      	lsls	r3, r3, #20
   2d1a2:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2d1a4:	697b      	ldr	r3, [r7, #20]
   2d1a6:	785b      	ldrb	r3, [r3, #1]
   2d1a8:	041b      	lsls	r3, r3, #16
   2d1aa:	0019      	movs	r1, r3
   2d1ac:	23ff      	movs	r3, #255	; 0xff
   2d1ae:	041b      	lsls	r3, r3, #16
   2d1b0:	400b      	ands	r3, r1
   2d1b2:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2d1b4:	697b      	ldr	r3, [r7, #20]
   2d1b6:	789b      	ldrb	r3, [r3, #2]
   2d1b8:	2b00      	cmp	r3, #0
   2d1ba:	d001      	beq.n	2d1c0 <_tcc_build_faults+0x84>
   2d1bc:	2380      	movs	r3, #128	; 0x80
   2d1be:	e000      	b.n	2d1c2 <_tcc_build_faults+0x86>
   2d1c0:	2300      	movs	r3, #0
   2d1c2:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2d1c4:	697b      	ldr	r3, [r7, #20]
   2d1c6:	78db      	ldrb	r3, [r3, #3]
   2d1c8:	2b00      	cmp	r3, #0
   2d1ca:	d001      	beq.n	2d1d0 <_tcc_build_faults+0x94>
   2d1cc:	2308      	movs	r3, #8
   2d1ce:	e000      	b.n	2d1d2 <_tcc_build_faults+0x96>
   2d1d0:	2300      	movs	r3, #0
   2d1d2:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2d1d4:	697b      	ldr	r3, [r7, #20]
   2d1d6:	791b      	ldrb	r3, [r3, #4]
   2d1d8:	2b00      	cmp	r3, #0
   2d1da:	d001      	beq.n	2d1e0 <_tcc_build_faults+0xa4>
   2d1dc:	2310      	movs	r3, #16
   2d1de:	e000      	b.n	2d1e2 <_tcc_build_faults+0xa6>
   2d1e0:	2300      	movs	r3, #0
   2d1e2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2d1e4:	697b      	ldr	r3, [r7, #20]
   2d1e6:	795b      	ldrb	r3, [r3, #5]
   2d1e8:	0019      	movs	r1, r3
   2d1ea:	2303      	movs	r3, #3
   2d1ec:	400b      	ands	r3, r1
   2d1ee:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2d1f0:	697b      	ldr	r3, [r7, #20]
   2d1f2:	799b      	ldrb	r3, [r3, #6]
   2d1f4:	015b      	lsls	r3, r3, #5
   2d1f6:	0019      	movs	r1, r3
   2d1f8:	2360      	movs	r3, #96	; 0x60
   2d1fa:	400b      	ands	r3, r1
   2d1fc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2d1fe:	697b      	ldr	r3, [r7, #20]
   2d200:	79db      	ldrb	r3, [r3, #7]
   2d202:	021b      	lsls	r3, r3, #8
   2d204:	0019      	movs	r1, r3
   2d206:	23c0      	movs	r3, #192	; 0xc0
   2d208:	009b      	lsls	r3, r3, #2
   2d20a:	400b      	ands	r3, r1
   2d20c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2d20e:	697b      	ldr	r3, [r7, #20]
   2d210:	7a1b      	ldrb	r3, [r3, #8]
   2d212:	031b      	lsls	r3, r3, #12
   2d214:	0019      	movs	r1, r3
   2d216:	23e0      	movs	r3, #224	; 0xe0
   2d218:	01db      	lsls	r3, r3, #7
   2d21a:	400b      	ands	r3, r1
   2d21c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2d21e:	697b      	ldr	r3, [r7, #20]
   2d220:	7a5b      	ldrb	r3, [r3, #9]
   2d222:	029b      	lsls	r3, r3, #10
   2d224:	0019      	movs	r1, r3
   2d226:	23c0      	movs	r3, #192	; 0xc0
   2d228:	011b      	lsls	r3, r3, #4
   2d22a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2d22c:	4313      	orrs	r3, r2
   2d22e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2d230:	69fb      	ldr	r3, [r7, #28]
   2d232:	009b      	lsls	r3, r3, #2
   2d234:	687a      	ldr	r2, [r7, #4]
   2d236:	18d3      	adds	r3, r2, r3
   2d238:	693a      	ldr	r2, [r7, #16]
   2d23a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2d23c:	69fb      	ldr	r3, [r7, #28]
   2d23e:	3301      	adds	r3, #1
   2d240:	61fb      	str	r3, [r7, #28]
   2d242:	69fb      	ldr	r3, [r7, #28]
   2d244:	2b01      	cmp	r3, #1
   2d246:	dd8d      	ble.n	2d164 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2d248:	2300      	movs	r3, #0
}
   2d24a:	0018      	movs	r0, r3
   2d24c:	46bd      	mov	sp, r7
   2d24e:	b008      	add	sp, #32
   2d250:	bd80      	pop	{r7, pc}
   2d252:	46c0      	nop			; (mov r8, r8)
   2d254:	0003c6b8 	.word	0x0003c6b8

0002d258 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2d258:	b580      	push	{r7, lr}
   2d25a:	b088      	sub	sp, #32
   2d25c:	af00      	add	r7, sp, #0
   2d25e:	60b9      	str	r1, [r7, #8]
   2d260:	607a      	str	r2, [r7, #4]
   2d262:	230f      	movs	r3, #15
   2d264:	18fb      	adds	r3, r7, r3
   2d266:	1c02      	adds	r2, r0, #0
   2d268:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2d26a:	230f      	movs	r3, #15
   2d26c:	18fb      	adds	r3, r7, r3
   2d26e:	781a      	ldrb	r2, [r3, #0]
   2d270:	2317      	movs	r3, #23
   2d272:	18fb      	adds	r3, r7, r3
   2d274:	492d      	ldr	r1, [pc, #180]	; (2d32c <_tcc_build_drvctrl+0xd4>)
   2d276:	5c8a      	ldrb	r2, [r1, r2]
   2d278:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2d27a:	2300      	movs	r3, #0
   2d27c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2d27e:	2300      	movs	r3, #0
   2d280:	61fb      	str	r3, [r7, #28]
   2d282:	e048      	b.n	2d316 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2d284:	68ba      	ldr	r2, [r7, #8]
   2d286:	2150      	movs	r1, #80	; 0x50
   2d288:	69fb      	ldr	r3, [r7, #28]
   2d28a:	18d3      	adds	r3, r2, r3
   2d28c:	185b      	adds	r3, r3, r1
   2d28e:	781b      	ldrb	r3, [r3, #0]
   2d290:	2b00      	cmp	r3, #0
   2d292:	d010      	beq.n	2d2b6 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2d294:	2317      	movs	r3, #23
   2d296:	18fb      	adds	r3, r7, r3
   2d298:	781a      	ldrb	r2, [r3, #0]
   2d29a:	69fb      	ldr	r3, [r7, #28]
   2d29c:	429a      	cmp	r2, r3
   2d29e:	d801      	bhi.n	2d2a4 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2d2a0:	2317      	movs	r3, #23
   2d2a2:	e03f      	b.n	2d324 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2d2a4:	2380      	movs	r3, #128	; 0x80
   2d2a6:	025a      	lsls	r2, r3, #9
   2d2a8:	69fb      	ldr	r3, [r7, #28]
   2d2aa:	409a      	lsls	r2, r3
   2d2ac:	0013      	movs	r3, r2
   2d2ae:	001a      	movs	r2, r3
   2d2b0:	69bb      	ldr	r3, [r7, #24]
   2d2b2:	4313      	orrs	r3, r2
   2d2b4:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2d2b6:	68ba      	ldr	r2, [r7, #8]
   2d2b8:	69fb      	ldr	r3, [r7, #28]
   2d2ba:	331c      	adds	r3, #28
   2d2bc:	005b      	lsls	r3, r3, #1
   2d2be:	18d3      	adds	r3, r2, r3
   2d2c0:	3309      	adds	r3, #9
   2d2c2:	781b      	ldrb	r3, [r3, #0]
   2d2c4:	2b00      	cmp	r3, #0
   2d2c6:	d023      	beq.n	2d310 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2d2c8:	2317      	movs	r3, #23
   2d2ca:	18fb      	adds	r3, r7, r3
   2d2cc:	781a      	ldrb	r2, [r3, #0]
   2d2ce:	69fb      	ldr	r3, [r7, #28]
   2d2d0:	429a      	cmp	r2, r3
   2d2d2:	d801      	bhi.n	2d2d8 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2d2d4:	2317      	movs	r3, #23
   2d2d6:	e025      	b.n	2d324 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2d2d8:	68ba      	ldr	r2, [r7, #8]
   2d2da:	69fb      	ldr	r3, [r7, #28]
   2d2dc:	331c      	adds	r3, #28
   2d2de:	005b      	lsls	r3, r3, #1
   2d2e0:	18d3      	adds	r3, r2, r3
   2d2e2:	3309      	adds	r3, #9
   2d2e4:	781b      	ldrb	r3, [r3, #0]
   2d2e6:	2b02      	cmp	r3, #2
   2d2e8:	d10a      	bne.n	2d300 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2d2ea:	2302      	movs	r3, #2
   2d2ec:	33ff      	adds	r3, #255	; 0xff
   2d2ee:	001a      	movs	r2, r3
   2d2f0:	69fb      	ldr	r3, [r7, #28]
   2d2f2:	409a      	lsls	r2, r3
   2d2f4:	0013      	movs	r3, r2
   2d2f6:	001a      	movs	r2, r3
   2d2f8:	69bb      	ldr	r3, [r7, #24]
   2d2fa:	4313      	orrs	r3, r2
   2d2fc:	61bb      	str	r3, [r7, #24]
   2d2fe:	e007      	b.n	2d310 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2d300:	2201      	movs	r2, #1
   2d302:	69fb      	ldr	r3, [r7, #28]
   2d304:	409a      	lsls	r2, r3
   2d306:	0013      	movs	r3, r2
   2d308:	001a      	movs	r2, r3
   2d30a:	69bb      	ldr	r3, [r7, #24]
   2d30c:	4313      	orrs	r3, r2
   2d30e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2d310:	69fb      	ldr	r3, [r7, #28]
   2d312:	3301      	adds	r3, #1
   2d314:	61fb      	str	r3, [r7, #28]
   2d316:	69fb      	ldr	r3, [r7, #28]
   2d318:	2b07      	cmp	r3, #7
   2d31a:	d9b3      	bls.n	2d284 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2d31c:	687b      	ldr	r3, [r7, #4]
   2d31e:	69ba      	ldr	r2, [r7, #24]
   2d320:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2d322:	2300      	movs	r3, #0
}
   2d324:	0018      	movs	r0, r3
   2d326:	46bd      	mov	sp, r7
   2d328:	b008      	add	sp, #32
   2d32a:	bd80      	pop	{r7, pc}
   2d32c:	0003c6bc 	.word	0x0003c6bc

0002d330 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2d330:	b580      	push	{r7, lr}
   2d332:	b088      	sub	sp, #32
   2d334:	af00      	add	r7, sp, #0
   2d336:	60b9      	str	r1, [r7, #8]
   2d338:	607a      	str	r2, [r7, #4]
   2d33a:	230f      	movs	r3, #15
   2d33c:	18fb      	adds	r3, r7, r3
   2d33e:	1c02      	adds	r2, r0, #0
   2d340:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2d342:	230f      	movs	r3, #15
   2d344:	18fb      	adds	r3, r7, r3
   2d346:	781a      	ldrb	r2, [r3, #0]
   2d348:	2317      	movs	r3, #23
   2d34a:	18fb      	adds	r3, r7, r3
   2d34c:	491d      	ldr	r1, [pc, #116]	; (2d3c4 <_tcc_build_waves+0x94>)
   2d34e:	5c8a      	ldrb	r2, [r1, r2]
   2d350:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2d352:	68bb      	ldr	r3, [r7, #8]
   2d354:	3310      	adds	r3, #16
   2d356:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2d358:	693b      	ldr	r3, [r7, #16]
   2d35a:	7a5b      	ldrb	r3, [r3, #9]
   2d35c:	011b      	lsls	r3, r3, #4
   2d35e:	001a      	movs	r2, r3
   2d360:	2330      	movs	r3, #48	; 0x30
   2d362:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2d364:	693b      	ldr	r3, [r7, #16]
   2d366:	7a1b      	ldrb	r3, [r3, #8]
   2d368:	0019      	movs	r1, r3
   2d36a:	2307      	movs	r3, #7
   2d36c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2d36e:	4313      	orrs	r3, r2
   2d370:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2d372:	2300      	movs	r3, #0
   2d374:	61fb      	str	r3, [r7, #28]
   2d376:	e01a      	b.n	2d3ae <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2d378:	693a      	ldr	r2, [r7, #16]
   2d37a:	69fb      	ldr	r3, [r7, #28]
   2d37c:	18d3      	adds	r3, r2, r3
   2d37e:	3304      	adds	r3, #4
   2d380:	781b      	ldrb	r3, [r3, #0]
   2d382:	2b00      	cmp	r3, #0
   2d384:	d010      	beq.n	2d3a8 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2d386:	2317      	movs	r3, #23
   2d388:	18fb      	adds	r3, r7, r3
   2d38a:	781a      	ldrb	r2, [r3, #0]
   2d38c:	69fb      	ldr	r3, [r7, #28]
   2d38e:	429a      	cmp	r2, r3
   2d390:	dc01      	bgt.n	2d396 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2d392:	2317      	movs	r3, #23
   2d394:	e012      	b.n	2d3bc <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2d396:	2380      	movs	r3, #128	; 0x80
   2d398:	025a      	lsls	r2, r3, #9
   2d39a:	69fb      	ldr	r3, [r7, #28]
   2d39c:	409a      	lsls	r2, r3
   2d39e:	0013      	movs	r3, r2
   2d3a0:	001a      	movs	r2, r3
   2d3a2:	69bb      	ldr	r3, [r7, #24]
   2d3a4:	4313      	orrs	r3, r2
   2d3a6:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2d3a8:	69fb      	ldr	r3, [r7, #28]
   2d3aa:	3301      	adds	r3, #1
   2d3ac:	61fb      	str	r3, [r7, #28]
   2d3ae:	69fb      	ldr	r3, [r7, #28]
   2d3b0:	2b03      	cmp	r3, #3
   2d3b2:	dde1      	ble.n	2d378 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2d3b4:	687b      	ldr	r3, [r7, #4]
   2d3b6:	69ba      	ldr	r2, [r7, #24]
   2d3b8:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2d3ba:	2300      	movs	r3, #0
}
   2d3bc:	0018      	movs	r0, r3
   2d3be:	46bd      	mov	sp, r7
   2d3c0:	b008      	add	sp, #32
   2d3c2:	bd80      	pop	{r7, pc}
   2d3c4:	0003c6b8 	.word	0x0003c6b8

0002d3c8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2d3c8:	b590      	push	{r4, r7, lr}
   2d3ca:	b091      	sub	sp, #68	; 0x44
   2d3cc:	af00      	add	r7, sp, #0
   2d3ce:	60f8      	str	r0, [r7, #12]
   2d3d0:	60b9      	str	r1, [r7, #8]
   2d3d2:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2d3d4:	233b      	movs	r3, #59	; 0x3b
   2d3d6:	18fc      	adds	r4, r7, r3
   2d3d8:	68bb      	ldr	r3, [r7, #8]
   2d3da:	0018      	movs	r0, r3
   2d3dc:	4bc4      	ldr	r3, [pc, #784]	; (2d6f0 <tcc_init+0x328>)
   2d3de:	4798      	blx	r3
   2d3e0:	0003      	movs	r3, r0
   2d3e2:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2d3e4:	233b      	movs	r3, #59	; 0x3b
   2d3e6:	18fb      	adds	r3, r7, r3
   2d3e8:	781a      	ldrb	r2, [r3, #0]
   2d3ea:	4bc2      	ldr	r3, [pc, #776]	; (2d6f4 <tcc_init+0x32c>)
   2d3ec:	0092      	lsls	r2, r2, #2
   2d3ee:	58d3      	ldr	r3, [r2, r3]
   2d3f0:	0019      	movs	r1, r3
   2d3f2:	2002      	movs	r0, #2
   2d3f4:	4bc0      	ldr	r3, [pc, #768]	; (2d6f8 <tcc_init+0x330>)
   2d3f6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2d3f8:	68bb      	ldr	r3, [r7, #8]
   2d3fa:	681b      	ldr	r3, [r3, #0]
   2d3fc:	2202      	movs	r2, #2
   2d3fe:	4013      	ands	r3, r2
   2d400:	d001      	beq.n	2d406 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2d402:	231c      	movs	r3, #28
   2d404:	e1be      	b.n	2d784 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2d406:	68bb      	ldr	r3, [r7, #8]
   2d408:	681b      	ldr	r3, [r3, #0]
   2d40a:	2201      	movs	r2, #1
   2d40c:	4013      	ands	r3, r2
   2d40e:	d001      	beq.n	2d414 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2d410:	231c      	movs	r3, #28
   2d412:	e1b7      	b.n	2d784 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2d414:	233b      	movs	r3, #59	; 0x3b
   2d416:	18fb      	adds	r3, r7, r3
   2d418:	781a      	ldrb	r2, [r3, #0]
   2d41a:	4bb8      	ldr	r3, [pc, #736]	; (2d6fc <tcc_init+0x334>)
   2d41c:	0092      	lsls	r2, r2, #2
   2d41e:	58d3      	ldr	r3, [r2, r3]
   2d420:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2d422:	687b      	ldr	r3, [r7, #4]
   2d424:	681a      	ldr	r2, [r3, #0]
   2d426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d428:	429a      	cmp	r2, r3
   2d42a:	d804      	bhi.n	2d436 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2d42c:	687b      	ldr	r3, [r7, #4]
   2d42e:	685a      	ldr	r2, [r3, #4]
   2d430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d432:	429a      	cmp	r2, r3
   2d434:	d901      	bls.n	2d43a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2d436:	2317      	movs	r3, #23
   2d438:	e1a4      	b.n	2d784 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2d43a:	2300      	movs	r3, #0
   2d43c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d43e:	e00e      	b.n	2d45e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2d440:	687a      	ldr	r2, [r7, #4]
   2d442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d444:	3306      	adds	r3, #6
   2d446:	009b      	lsls	r3, r3, #2
   2d448:	18d3      	adds	r3, r2, r3
   2d44a:	3304      	adds	r3, #4
   2d44c:	681a      	ldr	r2, [r3, #0]
   2d44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d450:	429a      	cmp	r2, r3
   2d452:	d901      	bls.n	2d458 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2d454:	2317      	movs	r3, #23
   2d456:	e195      	b.n	2d784 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2d458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d45a:	3301      	adds	r3, #1
   2d45c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d460:	2b03      	cmp	r3, #3
   2d462:	dded      	ble.n	2d440 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2d464:	2300      	movs	r3, #0
   2d466:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d468:	e019      	b.n	2d49e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2d46a:	687a      	ldr	r2, [r7, #4]
   2d46c:	2198      	movs	r1, #152	; 0x98
   2d46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d470:	18d3      	adds	r3, r2, r3
   2d472:	185b      	adds	r3, r3, r1
   2d474:	781b      	ldrb	r3, [r3, #0]
   2d476:	2201      	movs	r2, #1
   2d478:	4053      	eors	r3, r2
   2d47a:	b2db      	uxtb	r3, r3
   2d47c:	2b00      	cmp	r3, #0
   2d47e:	d10a      	bne.n	2d496 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2d480:	233b      	movs	r3, #59	; 0x3b
   2d482:	18fb      	adds	r3, r7, r3
   2d484:	781b      	ldrb	r3, [r3, #0]
   2d486:	4a9e      	ldr	r2, [pc, #632]	; (2d700 <tcc_init+0x338>)
   2d488:	5cd3      	ldrb	r3, [r2, r3]
   2d48a:	001a      	movs	r2, r3
   2d48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d48e:	429a      	cmp	r2, r3
   2d490:	dc02      	bgt.n	2d498 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2d492:	2317      	movs	r3, #23
   2d494:	e176      	b.n	2d784 <tcc_init+0x3bc>
			continue;
   2d496:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2d498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d49a:	3301      	adds	r3, #1
   2d49c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d4a0:	2b07      	cmp	r3, #7
   2d4a2:	dde2      	ble.n	2d46a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2d4a4:	2300      	movs	r3, #0
   2d4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2d4a8:	2333      	movs	r3, #51	; 0x33
   2d4aa:	18fc      	adds	r4, r7, r3
   2d4ac:	232c      	movs	r3, #44	; 0x2c
   2d4ae:	18fa      	adds	r2, r7, r3
   2d4b0:	6879      	ldr	r1, [r7, #4]
   2d4b2:	233b      	movs	r3, #59	; 0x3b
   2d4b4:	18fb      	adds	r3, r7, r3
   2d4b6:	781b      	ldrb	r3, [r3, #0]
   2d4b8:	0018      	movs	r0, r3
   2d4ba:	4b92      	ldr	r3, [pc, #584]	; (2d704 <tcc_init+0x33c>)
   2d4bc:	4798      	blx	r3
   2d4be:	0003      	movs	r3, r0
   2d4c0:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2d4c2:	2333      	movs	r3, #51	; 0x33
   2d4c4:	18fb      	adds	r3, r7, r3
   2d4c6:	781b      	ldrb	r3, [r3, #0]
   2d4c8:	2b00      	cmp	r3, #0
   2d4ca:	d003      	beq.n	2d4d4 <tcc_init+0x10c>
		return status;
   2d4cc:	2333      	movs	r3, #51	; 0x33
   2d4ce:	18fb      	adds	r3, r7, r3
   2d4d0:	781b      	ldrb	r3, [r3, #0]
   2d4d2:	e157      	b.n	2d784 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2d4d4:	232b      	movs	r3, #43	; 0x2b
   2d4d6:	18fa      	adds	r2, r7, r3
   2d4d8:	6879      	ldr	r1, [r7, #4]
   2d4da:	233b      	movs	r3, #59	; 0x3b
   2d4dc:	18fb      	adds	r3, r7, r3
   2d4de:	781b      	ldrb	r3, [r3, #0]
   2d4e0:	0018      	movs	r0, r3
   2d4e2:	4b89      	ldr	r3, [pc, #548]	; (2d708 <tcc_init+0x340>)
   2d4e4:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2d4e6:	2333      	movs	r3, #51	; 0x33
   2d4e8:	18fc      	adds	r4, r7, r3
   2d4ea:	2320      	movs	r3, #32
   2d4ec:	18fa      	adds	r2, r7, r3
   2d4ee:	6879      	ldr	r1, [r7, #4]
   2d4f0:	233b      	movs	r3, #59	; 0x3b
   2d4f2:	18fb      	adds	r3, r7, r3
   2d4f4:	781b      	ldrb	r3, [r3, #0]
   2d4f6:	0018      	movs	r0, r3
   2d4f8:	4b84      	ldr	r3, [pc, #528]	; (2d70c <tcc_init+0x344>)
   2d4fa:	4798      	blx	r3
   2d4fc:	0003      	movs	r3, r0
   2d4fe:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2d500:	2333      	movs	r3, #51	; 0x33
   2d502:	18fb      	adds	r3, r7, r3
   2d504:	781b      	ldrb	r3, [r3, #0]
   2d506:	2b00      	cmp	r3, #0
   2d508:	d003      	beq.n	2d512 <tcc_init+0x14a>
		return status;
   2d50a:	2333      	movs	r3, #51	; 0x33
   2d50c:	18fb      	adds	r3, r7, r3
   2d50e:	781b      	ldrb	r3, [r3, #0]
   2d510:	e138      	b.n	2d784 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2d512:	2300      	movs	r3, #0
   2d514:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2d516:	2333      	movs	r3, #51	; 0x33
   2d518:	18fc      	adds	r4, r7, r3
   2d51a:	231c      	movs	r3, #28
   2d51c:	18fa      	adds	r2, r7, r3
   2d51e:	6879      	ldr	r1, [r7, #4]
   2d520:	233b      	movs	r3, #59	; 0x3b
   2d522:	18fb      	adds	r3, r7, r3
   2d524:	781b      	ldrb	r3, [r3, #0]
   2d526:	0018      	movs	r0, r3
   2d528:	4b79      	ldr	r3, [pc, #484]	; (2d710 <tcc_init+0x348>)
   2d52a:	4798      	blx	r3
   2d52c:	0003      	movs	r3, r0
   2d52e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2d530:	2333      	movs	r3, #51	; 0x33
   2d532:	18fb      	adds	r3, r7, r3
   2d534:	781b      	ldrb	r3, [r3, #0]
   2d536:	2b00      	cmp	r3, #0
   2d538:	d003      	beq.n	2d542 <tcc_init+0x17a>
		return status;
   2d53a:	2333      	movs	r3, #51	; 0x33
   2d53c:	18fb      	adds	r3, r7, r3
   2d53e:	781b      	ldrb	r3, [r3, #0]
   2d540:	e120      	b.n	2d784 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2d542:	2333      	movs	r3, #51	; 0x33
   2d544:	18fc      	adds	r4, r7, r3
   2d546:	2318      	movs	r3, #24
   2d548:	18fa      	adds	r2, r7, r3
   2d54a:	6879      	ldr	r1, [r7, #4]
   2d54c:	233b      	movs	r3, #59	; 0x3b
   2d54e:	18fb      	adds	r3, r7, r3
   2d550:	781b      	ldrb	r3, [r3, #0]
   2d552:	0018      	movs	r0, r3
   2d554:	4b6f      	ldr	r3, [pc, #444]	; (2d714 <tcc_init+0x34c>)
   2d556:	4798      	blx	r3
   2d558:	0003      	movs	r3, r0
   2d55a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2d55c:	2333      	movs	r3, #51	; 0x33
   2d55e:	18fb      	adds	r3, r7, r3
   2d560:	781b      	ldrb	r3, [r3, #0]
   2d562:	2b00      	cmp	r3, #0
   2d564:	d003      	beq.n	2d56e <tcc_init+0x1a6>
		return status;
   2d566:	2333      	movs	r3, #51	; 0x33
   2d568:	18fb      	adds	r3, r7, r3
   2d56a:	781b      	ldrb	r3, [r3, #0]
   2d56c:	e10a      	b.n	2d784 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2d56e:	2300      	movs	r3, #0
   2d570:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d572:	e009      	b.n	2d588 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2d574:	68fa      	ldr	r2, [r7, #12]
   2d576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d578:	009b      	lsls	r3, r3, #2
   2d57a:	18d3      	adds	r3, r2, r3
   2d57c:	3304      	adds	r3, #4
   2d57e:	2200      	movs	r2, #0
   2d580:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2d582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d584:	3301      	adds	r3, #1
   2d586:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d58a:	2b0b      	cmp	r3, #11
   2d58c:	ddf2      	ble.n	2d574 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2d58e:	68fb      	ldr	r3, [r7, #12]
   2d590:	2200      	movs	r2, #0
   2d592:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2d594:	68fb      	ldr	r3, [r7, #12]
   2d596:	2200      	movs	r2, #0
   2d598:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2d59a:	233b      	movs	r3, #59	; 0x3b
   2d59c:	18fb      	adds	r3, r7, r3
   2d59e:	781a      	ldrb	r2, [r3, #0]
   2d5a0:	4b5d      	ldr	r3, [pc, #372]	; (2d718 <tcc_init+0x350>)
   2d5a2:	0092      	lsls	r2, r2, #2
   2d5a4:	68f9      	ldr	r1, [r7, #12]
   2d5a6:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2d5a8:	68fb      	ldr	r3, [r7, #12]
   2d5aa:	68ba      	ldr	r2, [r7, #8]
   2d5ac:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2d5ae:	687b      	ldr	r3, [r7, #4]
   2d5b0:	22a0      	movs	r2, #160	; 0xa0
   2d5b2:	5c99      	ldrb	r1, [r3, r2]
   2d5b4:	68fb      	ldr	r3, [r7, #12]
   2d5b6:	223c      	movs	r2, #60	; 0x3c
   2d5b8:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2d5ba:	2314      	movs	r3, #20
   2d5bc:	18fb      	adds	r3, r7, r3
   2d5be:	0018      	movs	r0, r3
   2d5c0:	4b56      	ldr	r3, [pc, #344]	; (2d71c <tcc_init+0x354>)
   2d5c2:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2d5c4:	687b      	ldr	r3, [r7, #4]
   2d5c6:	7a9a      	ldrb	r2, [r3, #10]
   2d5c8:	2314      	movs	r3, #20
   2d5ca:	18fb      	adds	r3, r7, r3
   2d5cc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2d5ce:	233b      	movs	r3, #59	; 0x3b
   2d5d0:	18fb      	adds	r3, r7, r3
   2d5d2:	781b      	ldrb	r3, [r3, #0]
   2d5d4:	4a52      	ldr	r2, [pc, #328]	; (2d720 <tcc_init+0x358>)
   2d5d6:	5cd3      	ldrb	r3, [r2, r3]
   2d5d8:	2214      	movs	r2, #20
   2d5da:	18ba      	adds	r2, r7, r2
   2d5dc:	0011      	movs	r1, r2
   2d5de:	0018      	movs	r0, r3
   2d5e0:	4b50      	ldr	r3, [pc, #320]	; (2d724 <tcc_init+0x35c>)
   2d5e2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2d5e4:	233b      	movs	r3, #59	; 0x3b
   2d5e6:	18fb      	adds	r3, r7, r3
   2d5e8:	781b      	ldrb	r3, [r3, #0]
   2d5ea:	4a4d      	ldr	r2, [pc, #308]	; (2d720 <tcc_init+0x358>)
   2d5ec:	5cd3      	ldrb	r3, [r2, r3]
   2d5ee:	0018      	movs	r0, r3
   2d5f0:	4b4d      	ldr	r3, [pc, #308]	; (2d728 <tcc_init+0x360>)
   2d5f2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2d5f4:	2300      	movs	r3, #0
   2d5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d5f8:	e02d      	b.n	2d656 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2d5fa:	687a      	ldr	r2, [r7, #4]
   2d5fc:	2198      	movs	r1, #152	; 0x98
   2d5fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d600:	18d3      	adds	r3, r2, r3
   2d602:	185b      	adds	r3, r3, r1
   2d604:	781b      	ldrb	r3, [r3, #0]
   2d606:	2201      	movs	r2, #1
   2d608:	4053      	eors	r3, r2
   2d60a:	b2db      	uxtb	r3, r3
   2d60c:	2b00      	cmp	r3, #0
   2d60e:	d11e      	bne.n	2d64e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2d610:	2310      	movs	r3, #16
   2d612:	18fb      	adds	r3, r7, r3
   2d614:	0018      	movs	r0, r3
   2d616:	4b45      	ldr	r3, [pc, #276]	; (2d72c <tcc_init+0x364>)
   2d618:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2d61a:	687b      	ldr	r3, [r7, #4]
   2d61c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d61e:	321e      	adds	r2, #30
   2d620:	0092      	lsls	r2, r2, #2
   2d622:	58d3      	ldr	r3, [r2, r3]
   2d624:	b2da      	uxtb	r2, r3
   2d626:	2310      	movs	r3, #16
   2d628:	18fb      	adds	r3, r7, r3
   2d62a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2d62c:	2310      	movs	r3, #16
   2d62e:	18fb      	adds	r3, r7, r3
   2d630:	2201      	movs	r2, #1
   2d632:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2d634:	687b      	ldr	r3, [r7, #4]
   2d636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d638:	3216      	adds	r2, #22
   2d63a:	0092      	lsls	r2, r2, #2
   2d63c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2d63e:	b2db      	uxtb	r3, r3
   2d640:	2210      	movs	r2, #16
   2d642:	18ba      	adds	r2, r7, r2
   2d644:	0011      	movs	r1, r2
   2d646:	0018      	movs	r0, r3
   2d648:	4b39      	ldr	r3, [pc, #228]	; (2d730 <tcc_init+0x368>)
   2d64a:	4798      	blx	r3
   2d64c:	e000      	b.n	2d650 <tcc_init+0x288>
			continue;
   2d64e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2d650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d652:	3301      	adds	r3, #1
   2d654:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d656:	233b      	movs	r3, #59	; 0x3b
   2d658:	18fb      	adds	r3, r7, r3
   2d65a:	781b      	ldrb	r3, [r3, #0]
   2d65c:	4a28      	ldr	r2, [pc, #160]	; (2d700 <tcc_init+0x338>)
   2d65e:	5cd3      	ldrb	r3, [r2, r3]
   2d660:	001a      	movs	r2, r3
   2d662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d664:	429a      	cmp	r2, r3
   2d666:	dcc8      	bgt.n	2d5fa <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2d668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2d66a:	68bb      	ldr	r3, [r7, #8]
   2d66c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2d66e:	46c0      	nop			; (mov r8, r8)
   2d670:	68bb      	ldr	r3, [r7, #8]
   2d672:	689b      	ldr	r3, [r3, #8]
   2d674:	2204      	movs	r2, #4
   2d676:	4013      	ands	r3, r2
   2d678:	d1fa      	bne.n	2d670 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2d67a:	68bb      	ldr	r3, [r7, #8]
   2d67c:	22ff      	movs	r2, #255	; 0xff
   2d67e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2d680:	46c0      	nop			; (mov r8, r8)
   2d682:	68bb      	ldr	r3, [r7, #8]
   2d684:	689b      	ldr	r3, [r3, #8]
   2d686:	2204      	movs	r2, #4
   2d688:	4013      	ands	r3, r2
   2d68a:	d1fa      	bne.n	2d682 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2d68c:	232b      	movs	r3, #43	; 0x2b
   2d68e:	18fb      	adds	r3, r7, r3
   2d690:	781a      	ldrb	r2, [r3, #0]
   2d692:	68bb      	ldr	r3, [r7, #8]
   2d694:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2d696:	2320      	movs	r3, #32
   2d698:	18fb      	adds	r3, r7, r3
   2d69a:	681a      	ldr	r2, [r3, #0]
   2d69c:	68bb      	ldr	r3, [r7, #8]
   2d69e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2d6a0:	2320      	movs	r3, #32
   2d6a2:	18fb      	adds	r3, r7, r3
   2d6a4:	685a      	ldr	r2, [r3, #4]
   2d6a6:	68bb      	ldr	r3, [r7, #8]
   2d6a8:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2d6aa:	69fa      	ldr	r2, [r7, #28]
   2d6ac:	68bb      	ldr	r3, [r7, #8]
   2d6ae:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2d6b0:	46c0      	nop			; (mov r8, r8)
   2d6b2:	68bb      	ldr	r3, [r7, #8]
   2d6b4:	689b      	ldr	r3, [r3, #8]
   2d6b6:	4a1f      	ldr	r2, [pc, #124]	; (2d734 <tcc_init+0x36c>)
   2d6b8:	4013      	ands	r3, r2
   2d6ba:	d1fa      	bne.n	2d6b2 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2d6bc:	69ba      	ldr	r2, [r7, #24]
   2d6be:	68bb      	ldr	r3, [r7, #8]
   2d6c0:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2d6c2:	46c0      	nop			; (mov r8, r8)
   2d6c4:	68bb      	ldr	r3, [r7, #8]
   2d6c6:	689b      	ldr	r3, [r3, #8]
   2d6c8:	2210      	movs	r2, #16
   2d6ca:	4013      	ands	r3, r2
   2d6cc:	d1fa      	bne.n	2d6c4 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2d6ce:	687b      	ldr	r3, [r7, #4]
   2d6d0:	681a      	ldr	r2, [r3, #0]
   2d6d2:	68bb      	ldr	r3, [r7, #8]
   2d6d4:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2d6d6:	46c0      	nop			; (mov r8, r8)
   2d6d8:	68bb      	ldr	r3, [r7, #8]
   2d6da:	689b      	ldr	r3, [r3, #8]
   2d6dc:	4a16      	ldr	r2, [pc, #88]	; (2d738 <tcc_init+0x370>)
   2d6de:	4013      	ands	r3, r2
   2d6e0:	d1fa      	bne.n	2d6d8 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2d6e2:	687b      	ldr	r3, [r7, #4]
   2d6e4:	685a      	ldr	r2, [r3, #4]
   2d6e6:	68bb      	ldr	r3, [r7, #8]
   2d6e8:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2d6ea:	2300      	movs	r3, #0
   2d6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d6ee:	e03f      	b.n	2d770 <tcc_init+0x3a8>
   2d6f0:	0002cd31 	.word	0x0002cd31
   2d6f4:	0003c6a0 	.word	0x0003c6a0
   2d6f8:	0002ccad 	.word	0x0002ccad
   2d6fc:	0003c6ac 	.word	0x0003c6ac
   2d700:	0003c6bc 	.word	0x0003c6bc
   2d704:	0002d03d 	.word	0x0002d03d
   2d708:	0002d0e1 	.word	0x0002d0e1
   2d70c:	0002d13d 	.word	0x0002d13d
   2d710:	0002d259 	.word	0x0002d259
   2d714:	0002d331 	.word	0x0002d331
   2d718:	20005bac 	.word	0x20005bac
   2d71c:	0002cc95 	.word	0x0002cc95
   2d720:	0003c69c 	.word	0x0003c69c
   2d724:	0002c8ad 	.word	0x0002c8ad
   2d728:	0002c8f1 	.word	0x0002c8f1
   2d72c:	0002cd09 	.word	0x0002cd09
   2d730:	0002cc0d 	.word	0x0002cc0d
   2d734:	00020040 	.word	0x00020040
   2d738:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2d73c:	46c0      	nop			; (mov r8, r8)
   2d73e:	68bb      	ldr	r3, [r7, #8]
   2d740:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2d742:	4912      	ldr	r1, [pc, #72]	; (2d78c <tcc_init+0x3c4>)
   2d744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d746:	4091      	lsls	r1, r2
   2d748:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2d74a:	4013      	ands	r3, r2
   2d74c:	d1f7      	bne.n	2d73e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2d74e:	687a      	ldr	r2, [r7, #4]
   2d750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d752:	3306      	adds	r3, #6
   2d754:	009b      	lsls	r3, r3, #2
   2d756:	18d3      	adds	r3, r2, r3
   2d758:	3304      	adds	r3, #4
   2d75a:	681a      	ldr	r2, [r3, #0]
   2d75c:	68b9      	ldr	r1, [r7, #8]
   2d75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d760:	3310      	adds	r3, #16
   2d762:	009b      	lsls	r3, r3, #2
   2d764:	18cb      	adds	r3, r1, r3
   2d766:	3304      	adds	r3, #4
   2d768:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2d76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d76c:	3301      	adds	r3, #1
   2d76e:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d770:	233b      	movs	r3, #59	; 0x3b
   2d772:	18fb      	adds	r3, r7, r3
   2d774:	781b      	ldrb	r3, [r3, #0]
   2d776:	4a06      	ldr	r2, [pc, #24]	; (2d790 <tcc_init+0x3c8>)
   2d778:	5cd3      	ldrb	r3, [r2, r3]
   2d77a:	001a      	movs	r2, r3
   2d77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d77e:	429a      	cmp	r2, r3
   2d780:	dcdc      	bgt.n	2d73c <tcc_init+0x374>
	}

	return STATUS_OK;
   2d782:	2300      	movs	r3, #0
}
   2d784:	0018      	movs	r0, r3
   2d786:	46bd      	mov	sp, r7
   2d788:	b011      	add	sp, #68	; 0x44
   2d78a:	bd90      	pop	{r4, r7, pc}
   2d78c:	00080100 	.word	0x00080100
   2d790:	0003c6b8 	.word	0x0003c6b8

0002d794 <system_interrupt_enable>:
{
   2d794:	b580      	push	{r7, lr}
   2d796:	b082      	sub	sp, #8
   2d798:	af00      	add	r7, sp, #0
   2d79a:	0002      	movs	r2, r0
   2d79c:	1dfb      	adds	r3, r7, #7
   2d79e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2d7a0:	4b06      	ldr	r3, [pc, #24]	; (2d7bc <system_interrupt_enable+0x28>)
   2d7a2:	1dfa      	adds	r2, r7, #7
   2d7a4:	7812      	ldrb	r2, [r2, #0]
   2d7a6:	0011      	movs	r1, r2
   2d7a8:	221f      	movs	r2, #31
   2d7aa:	400a      	ands	r2, r1
   2d7ac:	2101      	movs	r1, #1
   2d7ae:	4091      	lsls	r1, r2
   2d7b0:	000a      	movs	r2, r1
   2d7b2:	601a      	str	r2, [r3, #0]
}
   2d7b4:	46c0      	nop			; (mov r8, r8)
   2d7b6:	46bd      	mov	sp, r7
   2d7b8:	b002      	add	sp, #8
   2d7ba:	bd80      	pop	{r7, pc}
   2d7bc:	e000e100 	.word	0xe000e100

0002d7c0 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2d7c0:	b580      	push	{r7, lr}
   2d7c2:	b082      	sub	sp, #8
   2d7c4:	af00      	add	r7, sp, #0
   2d7c6:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2d7c8:	4a04      	ldr	r2, [pc, #16]	; (2d7dc <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2d7ca:	687b      	ldr	r3, [r7, #4]
   2d7cc:	18d3      	adds	r3, r2, r3
   2d7ce:	781b      	ldrb	r3, [r3, #0]
   2d7d0:	b25b      	sxtb	r3, r3
}
   2d7d2:	0018      	movs	r0, r3
   2d7d4:	46bd      	mov	sp, r7
   2d7d6:	b002      	add	sp, #8
   2d7d8:	bd80      	pop	{r7, pc}
   2d7da:	46c0      	nop			; (mov r8, r8)
   2d7dc:	2000011c 	.word	0x2000011c

0002d7e0 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2d7e0:	b580      	push	{r7, lr}
   2d7e2:	b084      	sub	sp, #16
   2d7e4:	af00      	add	r7, sp, #0
   2d7e6:	60f8      	str	r0, [r7, #12]
   2d7e8:	60b9      	str	r1, [r7, #8]
   2d7ea:	1dfb      	adds	r3, r7, #7
   2d7ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2d7ee:	1dfb      	adds	r3, r7, #7
   2d7f0:	781b      	ldrb	r3, [r3, #0]
   2d7f2:	68fa      	ldr	r2, [r7, #12]
   2d7f4:	009b      	lsls	r3, r3, #2
   2d7f6:	18d3      	adds	r3, r2, r3
   2d7f8:	3304      	adds	r3, #4
   2d7fa:	68ba      	ldr	r2, [r7, #8]
   2d7fc:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2d7fe:	68fb      	ldr	r3, [r7, #12]
   2d800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2d802:	1dfb      	adds	r3, r7, #7
   2d804:	7819      	ldrb	r1, [r3, #0]
   2d806:	4b05      	ldr	r3, [pc, #20]	; (2d81c <tcc_register_callback+0x3c>)
   2d808:	0089      	lsls	r1, r1, #2
   2d80a:	58cb      	ldr	r3, [r1, r3]
   2d80c:	431a      	orrs	r2, r3
   2d80e:	68fb      	ldr	r3, [r7, #12]
   2d810:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2d812:	2300      	movs	r3, #0
}
   2d814:	0018      	movs	r0, r3
   2d816:	46bd      	mov	sp, r7
   2d818:	b004      	add	sp, #16
   2d81a:	bd80      	pop	{r7, pc}
   2d81c:	0003c6c0 	.word	0x0003c6c0

0002d820 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2d820:	b580      	push	{r7, lr}
   2d822:	b082      	sub	sp, #8
   2d824:	af00      	add	r7, sp, #0
   2d826:	6078      	str	r0, [r7, #4]
   2d828:	000a      	movs	r2, r1
   2d82a:	1cfb      	adds	r3, r7, #3
   2d82c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2d82e:	687b      	ldr	r3, [r7, #4]
   2d830:	681b      	ldr	r3, [r3, #0]
   2d832:	0018      	movs	r0, r3
   2d834:	4b0f      	ldr	r3, [pc, #60]	; (2d874 <tcc_enable_callback+0x54>)
   2d836:	4798      	blx	r3
   2d838:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2d83a:	0018      	movs	r0, r3
   2d83c:	4b0e      	ldr	r3, [pc, #56]	; (2d878 <tcc_enable_callback+0x58>)
   2d83e:	4798      	blx	r3
   2d840:	0003      	movs	r3, r0
   2d842:	0018      	movs	r0, r3
   2d844:	4b0d      	ldr	r3, [pc, #52]	; (2d87c <tcc_enable_callback+0x5c>)
   2d846:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2d848:	687b      	ldr	r3, [r7, #4]
   2d84a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2d84c:	1cfb      	adds	r3, r7, #3
   2d84e:	7819      	ldrb	r1, [r3, #0]
   2d850:	4b0b      	ldr	r3, [pc, #44]	; (2d880 <tcc_enable_callback+0x60>)
   2d852:	0089      	lsls	r1, r1, #2
   2d854:	58cb      	ldr	r3, [r1, r3]
   2d856:	431a      	orrs	r2, r3
   2d858:	687b      	ldr	r3, [r7, #4]
   2d85a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2d85c:	687b      	ldr	r3, [r7, #4]
   2d85e:	681b      	ldr	r3, [r3, #0]
   2d860:	1cfa      	adds	r2, r7, #3
   2d862:	7811      	ldrb	r1, [r2, #0]
   2d864:	4a06      	ldr	r2, [pc, #24]	; (2d880 <tcc_enable_callback+0x60>)
   2d866:	0089      	lsls	r1, r1, #2
   2d868:	588a      	ldr	r2, [r1, r2]
   2d86a:	629a      	str	r2, [r3, #40]	; 0x28
}
   2d86c:	46c0      	nop			; (mov r8, r8)
   2d86e:	46bd      	mov	sp, r7
   2d870:	b002      	add	sp, #8
   2d872:	bd80      	pop	{r7, pc}
   2d874:	0002cd31 	.word	0x0002cd31
   2d878:	0002d7c1 	.word	0x0002d7c1
   2d87c:	0002d795 	.word	0x0002d795
   2d880:	0003c6c0 	.word	0x0003c6c0

0002d884 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2d884:	b580      	push	{r7, lr}
   2d886:	af00      	add	r7, sp, #0
   2d888:	2000      	movs	r0, #0
   2d88a:	4b02      	ldr	r3, [pc, #8]	; (2d894 <TCC0_Handler+0x10>)
   2d88c:	4798      	blx	r3
   2d88e:	46c0      	nop			; (mov r8, r8)
   2d890:	46bd      	mov	sp, r7
   2d892:	bd80      	pop	{r7, pc}
   2d894:	0002d8c1 	.word	0x0002d8c1

0002d898 <TCC1_Handler>:
   2d898:	b580      	push	{r7, lr}
   2d89a:	af00      	add	r7, sp, #0
   2d89c:	2001      	movs	r0, #1
   2d89e:	4b02      	ldr	r3, [pc, #8]	; (2d8a8 <TCC1_Handler+0x10>)
   2d8a0:	4798      	blx	r3
   2d8a2:	46c0      	nop			; (mov r8, r8)
   2d8a4:	46bd      	mov	sp, r7
   2d8a6:	bd80      	pop	{r7, pc}
   2d8a8:	0002d8c1 	.word	0x0002d8c1

0002d8ac <TCC2_Handler>:
   2d8ac:	b580      	push	{r7, lr}
   2d8ae:	af00      	add	r7, sp, #0
   2d8b0:	2002      	movs	r0, #2
   2d8b2:	4b02      	ldr	r3, [pc, #8]	; (2d8bc <TCC2_Handler+0x10>)
   2d8b4:	4798      	blx	r3
   2d8b6:	46c0      	nop			; (mov r8, r8)
   2d8b8:	46bd      	mov	sp, r7
   2d8ba:	bd80      	pop	{r7, pc}
   2d8bc:	0002d8c1 	.word	0x0002d8c1

0002d8c0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2d8c0:	b580      	push	{r7, lr}
   2d8c2:	b086      	sub	sp, #24
   2d8c4:	af00      	add	r7, sp, #0
   2d8c6:	0002      	movs	r2, r0
   2d8c8:	1dfb      	adds	r3, r7, #7
   2d8ca:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2d8cc:	1dfb      	adds	r3, r7, #7
   2d8ce:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2d8d0:	4b18      	ldr	r3, [pc, #96]	; (2d934 <_tcc_interrupt_handler+0x74>)
   2d8d2:	0092      	lsls	r2, r2, #2
   2d8d4:	58d3      	ldr	r3, [r2, r3]
   2d8d6:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2d8d8:	693b      	ldr	r3, [r7, #16]
   2d8da:	681b      	ldr	r3, [r3, #0]
   2d8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2d8de:	693b      	ldr	r3, [r7, #16]
   2d8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2d8e2:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2d8e4:	693b      	ldr	r3, [r7, #16]
   2d8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2d8e8:	4013      	ands	r3, r2
   2d8ea:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2d8ec:	2300      	movs	r3, #0
   2d8ee:	617b      	str	r3, [r7, #20]
   2d8f0:	e019      	b.n	2d926 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2d8f2:	4b11      	ldr	r3, [pc, #68]	; (2d938 <_tcc_interrupt_handler+0x78>)
   2d8f4:	697a      	ldr	r2, [r7, #20]
   2d8f6:	0092      	lsls	r2, r2, #2
   2d8f8:	58d3      	ldr	r3, [r2, r3]
   2d8fa:	68fa      	ldr	r2, [r7, #12]
   2d8fc:	4013      	ands	r3, r2
   2d8fe:	d00f      	beq.n	2d920 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2d900:	693a      	ldr	r2, [r7, #16]
   2d902:	697b      	ldr	r3, [r7, #20]
   2d904:	009b      	lsls	r3, r3, #2
   2d906:	18d3      	adds	r3, r2, r3
   2d908:	3304      	adds	r3, #4
   2d90a:	681b      	ldr	r3, [r3, #0]
   2d90c:	693a      	ldr	r2, [r7, #16]
   2d90e:	0010      	movs	r0, r2
   2d910:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2d912:	693b      	ldr	r3, [r7, #16]
   2d914:	681b      	ldr	r3, [r3, #0]
   2d916:	4a08      	ldr	r2, [pc, #32]	; (2d938 <_tcc_interrupt_handler+0x78>)
   2d918:	6979      	ldr	r1, [r7, #20]
   2d91a:	0089      	lsls	r1, r1, #2
   2d91c:	588a      	ldr	r2, [r1, r2]
   2d91e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2d920:	697b      	ldr	r3, [r7, #20]
   2d922:	3301      	adds	r3, #1
   2d924:	617b      	str	r3, [r7, #20]
   2d926:	697b      	ldr	r3, [r7, #20]
   2d928:	2b0b      	cmp	r3, #11
   2d92a:	dde2      	ble.n	2d8f2 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2d92c:	46c0      	nop			; (mov r8, r8)
   2d92e:	46bd      	mov	sp, r7
   2d930:	b006      	add	sp, #24
   2d932:	bd80      	pop	{r7, pc}
   2d934:	20005bac 	.word	0x20005bac
   2d938:	0003c6c0 	.word	0x0003c6c0

0002d93c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2d93c:	b580      	push	{r7, lr}
   2d93e:	b082      	sub	sp, #8
   2d940:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2d942:	4b2f      	ldr	r3, [pc, #188]	; (2da00 <Reset_Handler+0xc4>)
   2d944:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2d946:	4b2f      	ldr	r3, [pc, #188]	; (2da04 <Reset_Handler+0xc8>)
   2d948:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2d94a:	687a      	ldr	r2, [r7, #4]
   2d94c:	683b      	ldr	r3, [r7, #0]
   2d94e:	429a      	cmp	r2, r3
   2d950:	d00c      	beq.n	2d96c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2d952:	e007      	b.n	2d964 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2d954:	683b      	ldr	r3, [r7, #0]
   2d956:	1d1a      	adds	r2, r3, #4
   2d958:	603a      	str	r2, [r7, #0]
   2d95a:	687a      	ldr	r2, [r7, #4]
   2d95c:	1d11      	adds	r1, r2, #4
   2d95e:	6079      	str	r1, [r7, #4]
   2d960:	6812      	ldr	r2, [r2, #0]
   2d962:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2d964:	683a      	ldr	r2, [r7, #0]
   2d966:	4b28      	ldr	r3, [pc, #160]	; (2da08 <Reset_Handler+0xcc>)
   2d968:	429a      	cmp	r2, r3
   2d96a:	d3f3      	bcc.n	2d954 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2d96c:	4b27      	ldr	r3, [pc, #156]	; (2da0c <Reset_Handler+0xd0>)
   2d96e:	603b      	str	r3, [r7, #0]
   2d970:	e004      	b.n	2d97c <Reset_Handler+0x40>
                *pDest++ = 0;
   2d972:	683b      	ldr	r3, [r7, #0]
   2d974:	1d1a      	adds	r2, r3, #4
   2d976:	603a      	str	r2, [r7, #0]
   2d978:	2200      	movs	r2, #0
   2d97a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2d97c:	683a      	ldr	r2, [r7, #0]
   2d97e:	4b24      	ldr	r3, [pc, #144]	; (2da10 <Reset_Handler+0xd4>)
   2d980:	429a      	cmp	r2, r3
   2d982:	d3f6      	bcc.n	2d972 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2d984:	4b23      	ldr	r3, [pc, #140]	; (2da14 <Reset_Handler+0xd8>)
   2d986:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2d988:	4b23      	ldr	r3, [pc, #140]	; (2da18 <Reset_Handler+0xdc>)
   2d98a:	687a      	ldr	r2, [r7, #4]
   2d98c:	21ff      	movs	r1, #255	; 0xff
   2d98e:	438a      	bics	r2, r1
   2d990:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2d992:	4a22      	ldr	r2, [pc, #136]	; (2da1c <Reset_Handler+0xe0>)
   2d994:	2390      	movs	r3, #144	; 0x90
   2d996:	005b      	lsls	r3, r3, #1
   2d998:	2102      	movs	r1, #2
   2d99a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2d99c:	4a20      	ldr	r2, [pc, #128]	; (2da20 <Reset_Handler+0xe4>)
   2d99e:	78d3      	ldrb	r3, [r2, #3]
   2d9a0:	2103      	movs	r1, #3
   2d9a2:	438b      	bics	r3, r1
   2d9a4:	1c19      	adds	r1, r3, #0
   2d9a6:	2302      	movs	r3, #2
   2d9a8:	430b      	orrs	r3, r1
   2d9aa:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2d9ac:	4a1c      	ldr	r2, [pc, #112]	; (2da20 <Reset_Handler+0xe4>)
   2d9ae:	78d3      	ldrb	r3, [r2, #3]
   2d9b0:	210c      	movs	r1, #12
   2d9b2:	438b      	bics	r3, r1
   2d9b4:	1c19      	adds	r1, r3, #0
   2d9b6:	2308      	movs	r3, #8
   2d9b8:	430b      	orrs	r3, r1
   2d9ba:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2d9bc:	4a19      	ldr	r2, [pc, #100]	; (2da24 <Reset_Handler+0xe8>)
   2d9be:	7b93      	ldrb	r3, [r2, #14]
   2d9c0:	2130      	movs	r1, #48	; 0x30
   2d9c2:	438b      	bics	r3, r1
   2d9c4:	1c19      	adds	r1, r3, #0
   2d9c6:	2320      	movs	r3, #32
   2d9c8:	430b      	orrs	r3, r1
   2d9ca:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2d9cc:	4a15      	ldr	r2, [pc, #84]	; (2da24 <Reset_Handler+0xe8>)
   2d9ce:	7b93      	ldrb	r3, [r2, #14]
   2d9d0:	210c      	movs	r1, #12
   2d9d2:	438b      	bics	r3, r1
   2d9d4:	1c19      	adds	r1, r3, #0
   2d9d6:	2308      	movs	r3, #8
   2d9d8:	430b      	orrs	r3, r1
   2d9da:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2d9dc:	4a11      	ldr	r2, [pc, #68]	; (2da24 <Reset_Handler+0xe8>)
   2d9de:	7b93      	ldrb	r3, [r2, #14]
   2d9e0:	2103      	movs	r1, #3
   2d9e2:	438b      	bics	r3, r1
   2d9e4:	1c19      	adds	r1, r3, #0
   2d9e6:	2302      	movs	r3, #2
   2d9e8:	430b      	orrs	r3, r1
   2d9ea:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2d9ec:	4a0e      	ldr	r2, [pc, #56]	; (2da28 <Reset_Handler+0xec>)
   2d9ee:	6853      	ldr	r3, [r2, #4]
   2d9f0:	2180      	movs	r1, #128	; 0x80
   2d9f2:	430b      	orrs	r3, r1
   2d9f4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2d9f6:	4b0d      	ldr	r3, [pc, #52]	; (2da2c <Reset_Handler+0xf0>)
   2d9f8:	4798      	blx	r3

        /* Branch to main function */
        main();
   2d9fa:	4b0d      	ldr	r3, [pc, #52]	; (2da30 <Reset_Handler+0xf4>)
   2d9fc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2d9fe:	e7fe      	b.n	2d9fe <Reset_Handler+0xc2>
   2da00:	0003d500 	.word	0x0003d500
   2da04:	20000000 	.word	0x20000000
   2da08:	200002f4 	.word	0x200002f4
   2da0c:	20000300 	.word	0x20000300
   2da10:	20005c1c 	.word	0x20005c1c
   2da14:	00012000 	.word	0x00012000
   2da18:	e000ed00 	.word	0xe000ed00
   2da1c:	41007000 	.word	0x41007000
   2da20:	41005000 	.word	0x41005000
   2da24:	41004800 	.word	0x41004800
   2da28:	41004000 	.word	0x41004000
   2da2c:	0003785d 	.word	0x0003785d
   2da30:	00035171 	.word	0x00035171

0002da34 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2da34:	b580      	push	{r7, lr}
   2da36:	af00      	add	r7, sp, #0
  __asm volatile (
   2da38:	2004      	movs	r0, #4
   2da3a:	4671      	mov	r1, lr
   2da3c:	4208      	tst	r0, r1
   2da3e:	d002      	beq.n	2da46 <_MSP>
   2da40:	f3ef 8009 	mrs	r0, PSP
   2da44:	e001      	b.n	2da4a <_HALT>

0002da46 <_MSP>:
   2da46:	f3ef 8008 	mrs	r0, MSP

0002da4a <_HALT>:
   2da4a:	6941      	ldr	r1, [r0, #20]
   2da4c:	e004      	b.n	2da58 <HardFault_HandlerC>
   2da4e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2da50:	46c0      	nop			; (mov r8, r8)
   2da52:	46bd      	mov	sp, r7
   2da54:	bd80      	pop	{r7, pc}
	...

0002da58 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2da58:	b580      	push	{r7, lr}
   2da5a:	b090      	sub	sp, #64	; 0x40
   2da5c:	af00      	add	r7, sp, #0
   2da5e:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2da60:	687b      	ldr	r3, [r7, #4]
   2da62:	681b      	ldr	r3, [r3, #0]
   2da64:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2da66:	687b      	ldr	r3, [r7, #4]
   2da68:	685b      	ldr	r3, [r3, #4]
   2da6a:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2da6c:	687b      	ldr	r3, [r7, #4]
   2da6e:	689b      	ldr	r3, [r3, #8]
   2da70:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2da72:	687b      	ldr	r3, [r7, #4]
   2da74:	68db      	ldr	r3, [r3, #12]
   2da76:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2da78:	687b      	ldr	r3, [r7, #4]
   2da7a:	691b      	ldr	r3, [r3, #16]
   2da7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2da7e:	687b      	ldr	r3, [r7, #4]
   2da80:	695b      	ldr	r3, [r3, #20]
   2da82:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2da84:	687b      	ldr	r3, [r7, #4]
   2da86:	699b      	ldr	r3, [r3, #24]
   2da88:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2da8a:	687b      	ldr	r3, [r7, #4]
   2da8c:	69db      	ldr	r3, [r3, #28]
   2da8e:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2da90:	4b0b      	ldr	r3, [pc, #44]	; (2dac0 <HardFault_HandlerC+0x68>)
   2da92:	681b      	ldr	r3, [r3, #0]
   2da94:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2da96:	4b0b      	ldr	r3, [pc, #44]	; (2dac4 <HardFault_HandlerC+0x6c>)
   2da98:	681b      	ldr	r3, [r3, #0]
   2da9a:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2da9c:	4b0a      	ldr	r3, [pc, #40]	; (2dac8 <HardFault_HandlerC+0x70>)
   2da9e:	681b      	ldr	r3, [r3, #0]
   2daa0:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2daa2:	4b0a      	ldr	r3, [pc, #40]	; (2dacc <HardFault_HandlerC+0x74>)
   2daa4:	681b      	ldr	r3, [r3, #0]
   2daa6:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2daa8:	4b09      	ldr	r3, [pc, #36]	; (2dad0 <HardFault_HandlerC+0x78>)
   2daaa:	681b      	ldr	r3, [r3, #0]
   2daac:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2daae:	4b09      	ldr	r3, [pc, #36]	; (2dad4 <HardFault_HandlerC+0x7c>)
   2dab0:	681b      	ldr	r3, [r3, #0]
   2dab2:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2dab4:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2dab6:	46c0      	nop			; (mov r8, r8)
   2dab8:	46bd      	mov	sp, r7
   2daba:	b010      	add	sp, #64	; 0x40
   2dabc:	bd80      	pop	{r7, pc}
   2dabe:	46c0      	nop			; (mov r8, r8)
   2dac0:	e000ed28 	.word	0xe000ed28
   2dac4:	e000ed2c 	.word	0xe000ed2c
   2dac8:	e000ed30 	.word	0xe000ed30
   2dacc:	e000ed3c 	.word	0xe000ed3c
   2dad0:	e000ed34 	.word	0xe000ed34
   2dad4:	e000ed38 	.word	0xe000ed38

0002dad8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2dad8:	b580      	push	{r7, lr}
   2dada:	b086      	sub	sp, #24
   2dadc:	af00      	add	r7, sp, #0
   2dade:	60f8      	str	r0, [r7, #12]
   2dae0:	60b9      	str	r1, [r7, #8]
   2dae2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2dae4:	2300      	movs	r3, #0
   2dae6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2dae8:	68fb      	ldr	r3, [r7, #12]
   2daea:	2b00      	cmp	r3, #0
   2daec:	d012      	beq.n	2db14 <_read+0x3c>
		return -1;
   2daee:	2301      	movs	r3, #1
   2daf0:	425b      	negs	r3, r3
   2daf2:	e013      	b.n	2db1c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2daf4:	4b0b      	ldr	r3, [pc, #44]	; (2db24 <_read+0x4c>)
   2daf6:	681a      	ldr	r2, [r3, #0]
   2daf8:	4b0b      	ldr	r3, [pc, #44]	; (2db28 <_read+0x50>)
   2dafa:	681b      	ldr	r3, [r3, #0]
   2dafc:	68b9      	ldr	r1, [r7, #8]
   2dafe:	0018      	movs	r0, r3
   2db00:	4790      	blx	r2
		ptr++;
   2db02:	68bb      	ldr	r3, [r7, #8]
   2db04:	3301      	adds	r3, #1
   2db06:	60bb      	str	r3, [r7, #8]
		nChars++;
   2db08:	697b      	ldr	r3, [r7, #20]
   2db0a:	3301      	adds	r3, #1
   2db0c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2db0e:	687b      	ldr	r3, [r7, #4]
   2db10:	3b01      	subs	r3, #1
   2db12:	607b      	str	r3, [r7, #4]
   2db14:	687b      	ldr	r3, [r7, #4]
   2db16:	2b00      	cmp	r3, #0
   2db18:	dcec      	bgt.n	2daf4 <_read+0x1c>
	}
	return nChars;
   2db1a:	697b      	ldr	r3, [r7, #20]
}
   2db1c:	0018      	movs	r0, r3
   2db1e:	46bd      	mov	sp, r7
   2db20:	b006      	add	sp, #24
   2db22:	bd80      	pop	{r7, pc}
   2db24:	20005bb8 	.word	0x20005bb8
   2db28:	20005bc0 	.word	0x20005bc0

0002db2c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2db2c:	b580      	push	{r7, lr}
   2db2e:	b086      	sub	sp, #24
   2db30:	af00      	add	r7, sp, #0
   2db32:	60f8      	str	r0, [r7, #12]
   2db34:	60b9      	str	r1, [r7, #8]
   2db36:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2db38:	2300      	movs	r3, #0
   2db3a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2db3c:	68fb      	ldr	r3, [r7, #12]
   2db3e:	2b01      	cmp	r3, #1
   2db40:	d01d      	beq.n	2db7e <_write+0x52>
   2db42:	68fb      	ldr	r3, [r7, #12]
   2db44:	2b02      	cmp	r3, #2
   2db46:	d01a      	beq.n	2db7e <_write+0x52>
   2db48:	68fb      	ldr	r3, [r7, #12]
   2db4a:	2b03      	cmp	r3, #3
   2db4c:	d017      	beq.n	2db7e <_write+0x52>
		return -1;
   2db4e:	2301      	movs	r3, #1
   2db50:	425b      	negs	r3, r3
   2db52:	e018      	b.n	2db86 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2db54:	4b0e      	ldr	r3, [pc, #56]	; (2db90 <_write+0x64>)
   2db56:	681a      	ldr	r2, [r3, #0]
   2db58:	4b0e      	ldr	r3, [pc, #56]	; (2db94 <_write+0x68>)
   2db5a:	6818      	ldr	r0, [r3, #0]
   2db5c:	68bb      	ldr	r3, [r7, #8]
   2db5e:	1c59      	adds	r1, r3, #1
   2db60:	60b9      	str	r1, [r7, #8]
   2db62:	781b      	ldrb	r3, [r3, #0]
   2db64:	0019      	movs	r1, r3
   2db66:	4790      	blx	r2
   2db68:	1e03      	subs	r3, r0, #0
   2db6a:	da02      	bge.n	2db72 <_write+0x46>
			return -1;
   2db6c:	2301      	movs	r3, #1
   2db6e:	425b      	negs	r3, r3
   2db70:	e009      	b.n	2db86 <_write+0x5a>
		}
		++nChars;
   2db72:	697b      	ldr	r3, [r7, #20]
   2db74:	3301      	adds	r3, #1
   2db76:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2db78:	687b      	ldr	r3, [r7, #4]
   2db7a:	3b01      	subs	r3, #1
   2db7c:	607b      	str	r3, [r7, #4]
   2db7e:	687b      	ldr	r3, [r7, #4]
   2db80:	2b00      	cmp	r3, #0
   2db82:	d1e7      	bne.n	2db54 <_write+0x28>
	}
	return nChars;
   2db84:	697b      	ldr	r3, [r7, #20]
}
   2db86:	0018      	movs	r0, r3
   2db88:	46bd      	mov	sp, r7
   2db8a:	b006      	add	sp, #24
   2db8c:	bd80      	pop	{r7, pc}
   2db8e:	46c0      	nop			; (mov r8, r8)
   2db90:	20005bbc 	.word	0x20005bbc
   2db94:	20005bc0 	.word	0x20005bc0

0002db98 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2db98:	b580      	push	{r7, lr}
   2db9a:	b084      	sub	sp, #16
   2db9c:	af00      	add	r7, sp, #0
   2db9e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2dba0:	4b0a      	ldr	r3, [pc, #40]	; (2dbcc <_sbrk+0x34>)
   2dba2:	681b      	ldr	r3, [r3, #0]
   2dba4:	2b00      	cmp	r3, #0
   2dba6:	d102      	bne.n	2dbae <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2dba8:	4b08      	ldr	r3, [pc, #32]	; (2dbcc <_sbrk+0x34>)
   2dbaa:	4a09      	ldr	r2, [pc, #36]	; (2dbd0 <_sbrk+0x38>)
   2dbac:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2dbae:	4b07      	ldr	r3, [pc, #28]	; (2dbcc <_sbrk+0x34>)
   2dbb0:	681b      	ldr	r3, [r3, #0]
   2dbb2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2dbb4:	4b05      	ldr	r3, [pc, #20]	; (2dbcc <_sbrk+0x34>)
   2dbb6:	681a      	ldr	r2, [r3, #0]
   2dbb8:	687b      	ldr	r3, [r7, #4]
   2dbba:	18d2      	adds	r2, r2, r3
   2dbbc:	4b03      	ldr	r3, [pc, #12]	; (2dbcc <_sbrk+0x34>)
   2dbbe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2dbc0:	68fb      	ldr	r3, [r7, #12]
}
   2dbc2:	0018      	movs	r0, r3
   2dbc4:	46bd      	mov	sp, r7
   2dbc6:	b004      	add	sp, #16
   2dbc8:	bd80      	pop	{r7, pc}
   2dbca:	46c0      	nop			; (mov r8, r8)
   2dbcc:	20004220 	.word	0x20004220
   2dbd0:	20007c20 	.word	0x20007c20

0002dbd4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2dbd4:	b580      	push	{r7, lr}
   2dbd6:	b082      	sub	sp, #8
   2dbd8:	af00      	add	r7, sp, #0
   2dbda:	6078      	str	r0, [r7, #4]
	return -1;
   2dbdc:	2301      	movs	r3, #1
   2dbde:	425b      	negs	r3, r3
}
   2dbe0:	0018      	movs	r0, r3
   2dbe2:	46bd      	mov	sp, r7
   2dbe4:	b002      	add	sp, #8
   2dbe6:	bd80      	pop	{r7, pc}

0002dbe8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2dbe8:	b580      	push	{r7, lr}
   2dbea:	b082      	sub	sp, #8
   2dbec:	af00      	add	r7, sp, #0
   2dbee:	6078      	str	r0, [r7, #4]
   2dbf0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2dbf2:	683b      	ldr	r3, [r7, #0]
   2dbf4:	2280      	movs	r2, #128	; 0x80
   2dbf6:	0192      	lsls	r2, r2, #6
   2dbf8:	605a      	str	r2, [r3, #4]

	return 0;
   2dbfa:	2300      	movs	r3, #0
}
   2dbfc:	0018      	movs	r0, r3
   2dbfe:	46bd      	mov	sp, r7
   2dc00:	b002      	add	sp, #8
   2dc02:	bd80      	pop	{r7, pc}

0002dc04 <_isatty>:

extern int _isatty(int file)
{
   2dc04:	b580      	push	{r7, lr}
   2dc06:	b082      	sub	sp, #8
   2dc08:	af00      	add	r7, sp, #0
   2dc0a:	6078      	str	r0, [r7, #4]
	return 1;
   2dc0c:	2301      	movs	r3, #1
}
   2dc0e:	0018      	movs	r0, r3
   2dc10:	46bd      	mov	sp, r7
   2dc12:	b002      	add	sp, #8
   2dc14:	bd80      	pop	{r7, pc}

0002dc16 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2dc16:	b580      	push	{r7, lr}
   2dc18:	b084      	sub	sp, #16
   2dc1a:	af00      	add	r7, sp, #0
   2dc1c:	60f8      	str	r0, [r7, #12]
   2dc1e:	60b9      	str	r1, [r7, #8]
   2dc20:	607a      	str	r2, [r7, #4]
	return 0;
   2dc22:	2300      	movs	r3, #0
}
   2dc24:	0018      	movs	r0, r3
   2dc26:	46bd      	mov	sp, r7
   2dc28:	b004      	add	sp, #16
   2dc2a:	bd80      	pop	{r7, pc}

0002dc2c <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2dc2c:	b580      	push	{r7, lr}
   2dc2e:	b082      	sub	sp, #8
   2dc30:	af00      	add	r7, sp, #0
   2dc32:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2dc34:	687b      	ldr	r3, [r7, #4]
   2dc36:	2200      	movs	r2, #0
   2dc38:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2dc3a:	687b      	ldr	r3, [r7, #4]
   2dc3c:	2200      	movs	r2, #0
   2dc3e:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2dc40:	687b      	ldr	r3, [r7, #4]
   2dc42:	2200      	movs	r2, #0
   2dc44:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2dc46:	687b      	ldr	r3, [r7, #4]
   2dc48:	2200      	movs	r2, #0
   2dc4a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2dc4c:	687b      	ldr	r3, [r7, #4]
   2dc4e:	2201      	movs	r2, #1
   2dc50:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2dc52:	687b      	ldr	r3, [r7, #4]
   2dc54:	2201      	movs	r2, #1
   2dc56:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2dc58:	687b      	ldr	r3, [r7, #4]
   2dc5a:	22fa      	movs	r2, #250	; 0xfa
   2dc5c:	00d2      	lsls	r2, r2, #3
   2dc5e:	80da      	strh	r2, [r3, #6]
}
   2dc60:	46c0      	nop			; (mov r8, r8)
   2dc62:	46bd      	mov	sp, r7
   2dc64:	b002      	add	sp, #8
   2dc66:	bd80      	pop	{r7, pc}

0002dc68 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2dc68:	b580      	push	{r7, lr}
   2dc6a:	b086      	sub	sp, #24
   2dc6c:	af00      	add	r7, sp, #0
   2dc6e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2dc70:	230c      	movs	r3, #12
   2dc72:	18fb      	adds	r3, r7, r3
   2dc74:	0018      	movs	r0, r3
   2dc76:	4b23      	ldr	r3, [pc, #140]	; (2dd04 <rtc_calendar_get_config_defaults+0x9c>)
   2dc78:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2dc7a:	687b      	ldr	r3, [r7, #4]
   2dc7c:	22a0      	movs	r2, #160	; 0xa0
   2dc7e:	0112      	lsls	r2, r2, #4
   2dc80:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2dc82:	687b      	ldr	r3, [r7, #4]
   2dc84:	2200      	movs	r2, #0
   2dc86:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2dc88:	687b      	ldr	r3, [r7, #4]
   2dc8a:	2200      	movs	r2, #0
   2dc8c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2dc8e:	687b      	ldr	r3, [r7, #4]
   2dc90:	2200      	movs	r2, #0
   2dc92:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2dc94:	687b      	ldr	r3, [r7, #4]
   2dc96:	22fa      	movs	r2, #250	; 0xfa
   2dc98:	00d2      	lsls	r2, r2, #3
   2dc9a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2dc9c:	2317      	movs	r3, #23
   2dc9e:	18fb      	adds	r3, r7, r3
   2dca0:	2200      	movs	r2, #0
   2dca2:	701a      	strb	r2, [r3, #0]
   2dca4:	e025      	b.n	2dcf2 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2dca6:	2317      	movs	r3, #23
   2dca8:	18fb      	adds	r3, r7, r3
   2dcaa:	781a      	ldrb	r2, [r3, #0]
   2dcac:	6879      	ldr	r1, [r7, #4]
   2dcae:	2008      	movs	r0, #8
   2dcb0:	0013      	movs	r3, r2
   2dcb2:	009b      	lsls	r3, r3, #2
   2dcb4:	189b      	adds	r3, r3, r2
   2dcb6:	005b      	lsls	r3, r3, #1
   2dcb8:	18cb      	adds	r3, r1, r3
   2dcba:	181a      	adds	r2, r3, r0
   2dcbc:	230c      	movs	r3, #12
   2dcbe:	18fb      	adds	r3, r7, r3
   2dcc0:	0010      	movs	r0, r2
   2dcc2:	0019      	movs	r1, r3
   2dcc4:	2308      	movs	r3, #8
   2dcc6:	001a      	movs	r2, r3
   2dcc8:	4b0f      	ldr	r3, [pc, #60]	; (2dd08 <rtc_calendar_get_config_defaults+0xa0>)
   2dcca:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2dccc:	2317      	movs	r3, #23
   2dcce:	18fb      	adds	r3, r7, r3
   2dcd0:	781a      	ldrb	r2, [r3, #0]
   2dcd2:	6879      	ldr	r1, [r7, #4]
   2dcd4:	0013      	movs	r3, r2
   2dcd6:	009b      	lsls	r3, r3, #2
   2dcd8:	189b      	adds	r3, r3, r2
   2dcda:	005b      	lsls	r3, r3, #1
   2dcdc:	18cb      	adds	r3, r1, r3
   2dcde:	3310      	adds	r3, #16
   2dce0:	2206      	movs	r2, #6
   2dce2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2dce4:	2317      	movs	r3, #23
   2dce6:	18fb      	adds	r3, r7, r3
   2dce8:	781a      	ldrb	r2, [r3, #0]
   2dcea:	2317      	movs	r3, #23
   2dcec:	18fb      	adds	r3, r7, r3
   2dcee:	3201      	adds	r2, #1
   2dcf0:	701a      	strb	r2, [r3, #0]
   2dcf2:	2317      	movs	r3, #23
   2dcf4:	18fb      	adds	r3, r7, r3
   2dcf6:	781b      	ldrb	r3, [r3, #0]
   2dcf8:	2b00      	cmp	r3, #0
   2dcfa:	d0d4      	beq.n	2dca6 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2dcfc:	46c0      	nop			; (mov r8, r8)
   2dcfe:	46bd      	mov	sp, r7
   2dd00:	b006      	add	sp, #24
   2dd02:	bd80      	pop	{r7, pc}
   2dd04:	0002dc2d 	.word	0x0002dc2d
   2dd08:	000378cd 	.word	0x000378cd

0002dd0c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2dd0c:	b580      	push	{r7, lr}
   2dd0e:	b088      	sub	sp, #32
   2dd10:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2dd12:	230c      	movs	r3, #12
   2dd14:	18fb      	adds	r3, r7, r3
   2dd16:	0018      	movs	r0, r3
   2dd18:	4b1a      	ldr	r3, [pc, #104]	; (2dd84 <configure_rtc_calendar+0x78>)
   2dd1a:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2dd1c:	1d3b      	adds	r3, r7, #4
   2dd1e:	0018      	movs	r0, r3
   2dd20:	4b19      	ldr	r3, [pc, #100]	; (2dd88 <configure_rtc_calendar+0x7c>)
   2dd22:	4798      	blx	r3
	init_time.year   = 2014;
   2dd24:	1d3b      	adds	r3, r7, #4
   2dd26:	4a19      	ldr	r2, [pc, #100]	; (2dd8c <configure_rtc_calendar+0x80>)
   2dd28:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2dd2a:	1d3b      	adds	r3, r7, #4
   2dd2c:	2201      	movs	r2, #1
   2dd2e:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2dd30:	1d3b      	adds	r3, r7, #4
   2dd32:	2201      	movs	r2, #1
   2dd34:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2dd36:	1d3b      	adds	r3, r7, #4
   2dd38:	2200      	movs	r2, #0
   2dd3a:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2dd3c:	1d3b      	adds	r3, r7, #4
   2dd3e:	2200      	movs	r2, #0
   2dd40:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2dd42:	1d3b      	adds	r3, r7, #4
   2dd44:	2204      	movs	r2, #4
   2dd46:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2dd48:	230c      	movs	r3, #12
   2dd4a:	18fb      	adds	r3, r7, r3
   2dd4c:	2201      	movs	r2, #1
   2dd4e:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2dd50:	230c      	movs	r3, #12
   2dd52:	18fb      	adds	r3, r7, r3
   2dd54:	1d3a      	adds	r2, r7, #4
   2dd56:	3308      	adds	r3, #8
   2dd58:	ca03      	ldmia	r2!, {r0, r1}
   2dd5a:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2dd5c:	230c      	movs	r3, #12
   2dd5e:	18fb      	adds	r3, r7, r3
   2dd60:	2206      	movs	r2, #6
   2dd62:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2dd64:	230c      	movs	r3, #12
   2dd66:	18fa      	adds	r2, r7, r3
   2dd68:	4909      	ldr	r1, [pc, #36]	; (2dd90 <configure_rtc_calendar+0x84>)
   2dd6a:	4b0a      	ldr	r3, [pc, #40]	; (2dd94 <configure_rtc_calendar+0x88>)
   2dd6c:	0018      	movs	r0, r3
   2dd6e:	4b0a      	ldr	r3, [pc, #40]	; (2dd98 <configure_rtc_calendar+0x8c>)
   2dd70:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2dd72:	4b08      	ldr	r3, [pc, #32]	; (2dd94 <configure_rtc_calendar+0x88>)
   2dd74:	0018      	movs	r0, r3
   2dd76:	4b09      	ldr	r3, [pc, #36]	; (2dd9c <configure_rtc_calendar+0x90>)
   2dd78:	4798      	blx	r3
}
   2dd7a:	46c0      	nop			; (mov r8, r8)
   2dd7c:	46bd      	mov	sp, r7
   2dd7e:	b008      	add	sp, #32
   2dd80:	bd80      	pop	{r7, pc}
   2dd82:	46c0      	nop			; (mov r8, r8)
   2dd84:	0002dc69 	.word	0x0002dc69
   2dd88:	0002dc2d 	.word	0x0002dc2d
   2dd8c:	000007de 	.word	0x000007de
   2dd90:	40001400 	.word	0x40001400
   2dd94:	20005bc4 	.word	0x20005bc4
   2dd98:	00029849 	.word	0x00029849
   2dd9c:	00029575 	.word	0x00029575

0002dda0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2dda0:	b590      	push	{r4, r7, lr}
   2dda2:	b085      	sub	sp, #20
   2dda4:	af00      	add	r7, sp, #0
   2dda6:	0002      	movs	r2, r0
   2dda8:	1dfb      	adds	r3, r7, #7
   2ddaa:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2ddac:	4b1a      	ldr	r3, [pc, #104]	; (2de18 <disk_initialize+0x78>)
   2ddae:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2ddb0:	1dfb      	adds	r3, r7, #7
   2ddb2:	781b      	ldrb	r3, [r3, #0]
   2ddb4:	2b01      	cmp	r3, #1
   2ddb6:	d901      	bls.n	2ddbc <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2ddb8:	2301      	movs	r3, #1
   2ddba:	e029      	b.n	2de10 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2ddbc:	2300      	movs	r3, #0
   2ddbe:	60fb      	str	r3, [r7, #12]
   2ddc0:	e010      	b.n	2dde4 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2ddc2:	230b      	movs	r3, #11
   2ddc4:	18fc      	adds	r4, r7, r3
   2ddc6:	1dfb      	adds	r3, r7, #7
   2ddc8:	781b      	ldrb	r3, [r3, #0]
   2ddca:	0018      	movs	r0, r3
   2ddcc:	4b13      	ldr	r3, [pc, #76]	; (2de1c <disk_initialize+0x7c>)
   2ddce:	4798      	blx	r3
   2ddd0:	0003      	movs	r3, r0
   2ddd2:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2ddd4:	230b      	movs	r3, #11
   2ddd6:	18fb      	adds	r3, r7, r3
   2ddd8:	781b      	ldrb	r3, [r3, #0]
   2ddda:	2b03      	cmp	r3, #3
   2dddc:	d106      	bne.n	2ddec <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2ddde:	68fb      	ldr	r3, [r7, #12]
   2dde0:	3301      	adds	r3, #1
   2dde2:	60fb      	str	r3, [r7, #12]
   2dde4:	68fb      	ldr	r3, [r7, #12]
   2dde6:	2b01      	cmp	r3, #1
   2dde8:	ddeb      	ble.n	2ddc2 <disk_initialize+0x22>
   2ddea:	e000      	b.n	2ddee <disk_initialize+0x4e>
			break;
   2ddec:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2ddee:	230b      	movs	r3, #11
   2ddf0:	18fb      	adds	r3, r7, r3
   2ddf2:	781b      	ldrb	r3, [r3, #0]
   2ddf4:	2b00      	cmp	r3, #0
   2ddf6:	d001      	beq.n	2ddfc <disk_initialize+0x5c>
		return STA_NOINIT;
   2ddf8:	2301      	movs	r3, #1
   2ddfa:	e009      	b.n	2de10 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2ddfc:	1dfb      	adds	r3, r7, #7
   2ddfe:	781b      	ldrb	r3, [r3, #0]
   2de00:	0018      	movs	r0, r3
   2de02:	4b07      	ldr	r3, [pc, #28]	; (2de20 <disk_initialize+0x80>)
   2de04:	4798      	blx	r3
   2de06:	1e03      	subs	r3, r0, #0
   2de08:	d001      	beq.n	2de0e <disk_initialize+0x6e>
		return STA_PROTECT;
   2de0a:	2304      	movs	r3, #4
   2de0c:	e000      	b.n	2de10 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2de0e:	2300      	movs	r3, #0
}
   2de10:	0018      	movs	r0, r3
   2de12:	46bd      	mov	sp, r7
   2de14:	b005      	add	sp, #20
   2de16:	bd90      	pop	{r4, r7, pc}
   2de18:	0002dd0d 	.word	0x0002dd0d
   2de1c:	00028a71 	.word	0x00028a71
   2de20:	00028b29 	.word	0x00028b29

0002de24 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2de24:	b580      	push	{r7, lr}
   2de26:	b082      	sub	sp, #8
   2de28:	af00      	add	r7, sp, #0
   2de2a:	0002      	movs	r2, r0
   2de2c:	1dfb      	adds	r3, r7, #7
   2de2e:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2de30:	1dfb      	adds	r3, r7, #7
   2de32:	781b      	ldrb	r3, [r3, #0]
   2de34:	0018      	movs	r0, r3
   2de36:	4b08      	ldr	r3, [pc, #32]	; (2de58 <disk_status+0x34>)
   2de38:	4798      	blx	r3
   2de3a:	1e03      	subs	r3, r0, #0
   2de3c:	d002      	beq.n	2de44 <disk_status+0x20>
   2de3e:	2b02      	cmp	r3, #2
   2de40:	d002      	beq.n	2de48 <disk_status+0x24>
   2de42:	e003      	b.n	2de4c <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2de44:	2300      	movs	r3, #0
   2de46:	e002      	b.n	2de4e <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2de48:	2303      	movs	r3, #3
   2de4a:	e000      	b.n	2de4e <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2de4c:	2301      	movs	r3, #1
	}
}
   2de4e:	0018      	movs	r0, r3
   2de50:	46bd      	mov	sp, r7
   2de52:	b002      	add	sp, #8
   2de54:	bd80      	pop	{r7, pc}
   2de56:	46c0      	nop			; (mov r8, r8)
   2de58:	00028a71 	.word	0x00028a71

0002de5c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2de5c:	b590      	push	{r4, r7, lr}
   2de5e:	b089      	sub	sp, #36	; 0x24
   2de60:	af00      	add	r7, sp, #0
   2de62:	60b9      	str	r1, [r7, #8]
   2de64:	607a      	str	r2, [r7, #4]
   2de66:	0019      	movs	r1, r3
   2de68:	230f      	movs	r3, #15
   2de6a:	18fb      	adds	r3, r7, r3
   2de6c:	1c02      	adds	r2, r0, #0
   2de6e:	701a      	strb	r2, [r3, #0]
   2de70:	230e      	movs	r3, #14
   2de72:	18fb      	adds	r3, r7, r3
   2de74:	1c0a      	adds	r2, r1, #0
   2de76:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2de78:	231b      	movs	r3, #27
   2de7a:	18fc      	adds	r4, r7, r3
   2de7c:	230f      	movs	r3, #15
   2de7e:	18fb      	adds	r3, r7, r3
   2de80:	781b      	ldrb	r3, [r3, #0]
   2de82:	0018      	movs	r0, r3
   2de84:	4b28      	ldr	r3, [pc, #160]	; (2df28 <disk_read+0xcc>)
   2de86:	4798      	blx	r3
   2de88:	0003      	movs	r3, r0
   2de8a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2de8c:	231b      	movs	r3, #27
   2de8e:	18fb      	adds	r3, r7, r3
   2de90:	781b      	ldrb	r3, [r3, #0]
   2de92:	2b00      	cmp	r3, #0
   2de94:	d101      	bne.n	2de9a <disk_read+0x3e>
		return RES_ERROR;
   2de96:	2301      	movs	r3, #1
   2de98:	e042      	b.n	2df20 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2de9a:	2314      	movs	r3, #20
   2de9c:	18fa      	adds	r2, r7, r3
   2de9e:	230f      	movs	r3, #15
   2dea0:	18fb      	adds	r3, r7, r3
   2dea2:	781b      	ldrb	r3, [r3, #0]
   2dea4:	0011      	movs	r1, r2
   2dea6:	0018      	movs	r0, r3
   2dea8:	4b20      	ldr	r3, [pc, #128]	; (2df2c <disk_read+0xd0>)
   2deaa:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2deac:	230e      	movs	r3, #14
   2deae:	18fb      	adds	r3, r7, r3
   2deb0:	781b      	ldrb	r3, [r3, #0]
   2deb2:	221b      	movs	r2, #27
   2deb4:	18ba      	adds	r2, r7, r2
   2deb6:	7812      	ldrb	r2, [r2, #0]
   2deb8:	4353      	muls	r3, r2
   2deba:	001a      	movs	r2, r3
   2debc:	687b      	ldr	r3, [r7, #4]
   2debe:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2dec0:	697b      	ldr	r3, [r7, #20]
   2dec2:	3301      	adds	r3, #1
   2dec4:	211b      	movs	r1, #27
   2dec6:	1879      	adds	r1, r7, r1
   2dec8:	7809      	ldrb	r1, [r1, #0]
   2deca:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2decc:	429a      	cmp	r2, r3
   2dece:	d901      	bls.n	2ded4 <disk_read+0x78>
		return RES_PARERR;
   2ded0:	2304      	movs	r3, #4
   2ded2:	e025      	b.n	2df20 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2ded4:	2300      	movs	r3, #0
   2ded6:	61fb      	str	r3, [r7, #28]
   2ded8:	e01b      	b.n	2df12 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2deda:	231b      	movs	r3, #27
   2dedc:	18fb      	adds	r3, r7, r3
   2dede:	781b      	ldrb	r3, [r3, #0]
   2dee0:	69fa      	ldr	r2, [r7, #28]
   2dee2:	435a      	muls	r2, r3
   2dee4:	687b      	ldr	r3, [r7, #4]
   2dee6:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2dee8:	231b      	movs	r3, #27
   2deea:	18fb      	adds	r3, r7, r3
   2deec:	781b      	ldrb	r3, [r3, #0]
   2deee:	69fa      	ldr	r2, [r7, #28]
   2def0:	4353      	muls	r3, r2
   2def2:	025b      	lsls	r3, r3, #9
   2def4:	68ba      	ldr	r2, [r7, #8]
   2def6:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2def8:	230f      	movs	r3, #15
   2defa:	18fb      	adds	r3, r7, r3
   2defc:	781b      	ldrb	r3, [r3, #0]
   2defe:	0018      	movs	r0, r3
   2df00:	4b0b      	ldr	r3, [pc, #44]	; (2df30 <disk_read+0xd4>)
   2df02:	4798      	blx	r3
   2df04:	1e03      	subs	r3, r0, #0
   2df06:	d001      	beq.n	2df0c <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2df08:	2301      	movs	r3, #1
   2df0a:	e009      	b.n	2df20 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2df0c:	69fb      	ldr	r3, [r7, #28]
   2df0e:	3301      	adds	r3, #1
   2df10:	61fb      	str	r3, [r7, #28]
   2df12:	230e      	movs	r3, #14
   2df14:	18fb      	adds	r3, r7, r3
   2df16:	781a      	ldrb	r2, [r3, #0]
   2df18:	69fb      	ldr	r3, [r7, #28]
   2df1a:	429a      	cmp	r2, r3
   2df1c:	d8dd      	bhi.n	2deda <disk_read+0x7e>
		}
	}

	return RES_OK;
   2df1e:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2df20:	0018      	movs	r0, r3
   2df22:	46bd      	mov	sp, r7
   2df24:	b009      	add	sp, #36	; 0x24
   2df26:	bd90      	pop	{r4, r7, pc}
   2df28:	00028afd 	.word	0x00028afd
   2df2c:	00028ab1 	.word	0x00028ab1
   2df30:	00028b71 	.word	0x00028b71

0002df34 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2df34:	b590      	push	{r4, r7, lr}
   2df36:	b089      	sub	sp, #36	; 0x24
   2df38:	af00      	add	r7, sp, #0
   2df3a:	60b9      	str	r1, [r7, #8]
   2df3c:	607a      	str	r2, [r7, #4]
   2df3e:	0019      	movs	r1, r3
   2df40:	230f      	movs	r3, #15
   2df42:	18fb      	adds	r3, r7, r3
   2df44:	1c02      	adds	r2, r0, #0
   2df46:	701a      	strb	r2, [r3, #0]
   2df48:	230e      	movs	r3, #14
   2df4a:	18fb      	adds	r3, r7, r3
   2df4c:	1c0a      	adds	r2, r1, #0
   2df4e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2df50:	231b      	movs	r3, #27
   2df52:	18fc      	adds	r4, r7, r3
   2df54:	230f      	movs	r3, #15
   2df56:	18fb      	adds	r3, r7, r3
   2df58:	781b      	ldrb	r3, [r3, #0]
   2df5a:	0018      	movs	r0, r3
   2df5c:	4b28      	ldr	r3, [pc, #160]	; (2e000 <disk_write+0xcc>)
   2df5e:	4798      	blx	r3
   2df60:	0003      	movs	r3, r0
   2df62:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2df64:	231b      	movs	r3, #27
   2df66:	18fb      	adds	r3, r7, r3
   2df68:	781b      	ldrb	r3, [r3, #0]
   2df6a:	2b00      	cmp	r3, #0
   2df6c:	d101      	bne.n	2df72 <disk_write+0x3e>
		return RES_ERROR;
   2df6e:	2301      	movs	r3, #1
   2df70:	e042      	b.n	2dff8 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2df72:	2314      	movs	r3, #20
   2df74:	18fa      	adds	r2, r7, r3
   2df76:	230f      	movs	r3, #15
   2df78:	18fb      	adds	r3, r7, r3
   2df7a:	781b      	ldrb	r3, [r3, #0]
   2df7c:	0011      	movs	r1, r2
   2df7e:	0018      	movs	r0, r3
   2df80:	4b20      	ldr	r3, [pc, #128]	; (2e004 <disk_write+0xd0>)
   2df82:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2df84:	230e      	movs	r3, #14
   2df86:	18fb      	adds	r3, r7, r3
   2df88:	781b      	ldrb	r3, [r3, #0]
   2df8a:	221b      	movs	r2, #27
   2df8c:	18ba      	adds	r2, r7, r2
   2df8e:	7812      	ldrb	r2, [r2, #0]
   2df90:	4353      	muls	r3, r2
   2df92:	001a      	movs	r2, r3
   2df94:	687b      	ldr	r3, [r7, #4]
   2df96:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2df98:	697b      	ldr	r3, [r7, #20]
   2df9a:	3301      	adds	r3, #1
   2df9c:	211b      	movs	r1, #27
   2df9e:	1879      	adds	r1, r7, r1
   2dfa0:	7809      	ldrb	r1, [r1, #0]
   2dfa2:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2dfa4:	429a      	cmp	r2, r3
   2dfa6:	d901      	bls.n	2dfac <disk_write+0x78>
		return RES_PARERR;
   2dfa8:	2304      	movs	r3, #4
   2dfaa:	e025      	b.n	2dff8 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2dfac:	2300      	movs	r3, #0
   2dfae:	61fb      	str	r3, [r7, #28]
   2dfb0:	e01b      	b.n	2dfea <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2dfb2:	231b      	movs	r3, #27
   2dfb4:	18fb      	adds	r3, r7, r3
   2dfb6:	781b      	ldrb	r3, [r3, #0]
   2dfb8:	69fa      	ldr	r2, [r7, #28]
   2dfba:	435a      	muls	r2, r3
   2dfbc:	687b      	ldr	r3, [r7, #4]
   2dfbe:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2dfc0:	231b      	movs	r3, #27
   2dfc2:	18fb      	adds	r3, r7, r3
   2dfc4:	781b      	ldrb	r3, [r3, #0]
   2dfc6:	69fa      	ldr	r2, [r7, #28]
   2dfc8:	4353      	muls	r3, r2
   2dfca:	025b      	lsls	r3, r3, #9
   2dfcc:	68ba      	ldr	r2, [r7, #8]
   2dfce:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2dfd0:	230f      	movs	r3, #15
   2dfd2:	18fb      	adds	r3, r7, r3
   2dfd4:	781b      	ldrb	r3, [r3, #0]
   2dfd6:	0018      	movs	r0, r3
   2dfd8:	4b0b      	ldr	r3, [pc, #44]	; (2e008 <disk_write+0xd4>)
   2dfda:	4798      	blx	r3
   2dfdc:	1e03      	subs	r3, r0, #0
   2dfde:	d001      	beq.n	2dfe4 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2dfe0:	2301      	movs	r3, #1
   2dfe2:	e009      	b.n	2dff8 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2dfe4:	69fb      	ldr	r3, [r7, #28]
   2dfe6:	3301      	adds	r3, #1
   2dfe8:	61fb      	str	r3, [r7, #28]
   2dfea:	230e      	movs	r3, #14
   2dfec:	18fb      	adds	r3, r7, r3
   2dfee:	781a      	ldrb	r2, [r3, #0]
   2dff0:	69fb      	ldr	r3, [r7, #28]
   2dff2:	429a      	cmp	r2, r3
   2dff4:	d8dd      	bhi.n	2dfb2 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2dff6:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2dff8:	0018      	movs	r0, r3
   2dffa:	46bd      	mov	sp, r7
   2dffc:	b009      	add	sp, #36	; 0x24
   2dffe:	bd90      	pop	{r4, r7, pc}
   2e000:	00028afd 	.word	0x00028afd
   2e004:	00028ab1 	.word	0x00028ab1
   2e008:	00028bc5 	.word	0x00028bc5

0002e00c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2e00c:	b590      	push	{r4, r7, lr}
   2e00e:	b085      	sub	sp, #20
   2e010:	af00      	add	r7, sp, #0
   2e012:	603a      	str	r2, [r7, #0]
   2e014:	1dfb      	adds	r3, r7, #7
   2e016:	1c02      	adds	r2, r0, #0
   2e018:	701a      	strb	r2, [r3, #0]
   2e01a:	1dbb      	adds	r3, r7, #6
   2e01c:	1c0a      	adds	r2, r1, #0
   2e01e:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2e020:	230f      	movs	r3, #15
   2e022:	18fb      	adds	r3, r7, r3
   2e024:	2204      	movs	r2, #4
   2e026:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2e028:	1dbb      	adds	r3, r7, #6
   2e02a:	781b      	ldrb	r3, [r3, #0]
   2e02c:	2b01      	cmp	r3, #1
   2e02e:	d00f      	beq.n	2e050 <disk_ioctl+0x44>
   2e030:	dc02      	bgt.n	2e038 <disk_ioctl+0x2c>
   2e032:	2b00      	cmp	r3, #0
   2e034:	d044      	beq.n	2e0c0 <disk_ioctl+0xb4>
   2e036:	e054      	b.n	2e0e2 <disk_ioctl+0xd6>
   2e038:	2b02      	cmp	r3, #2
   2e03a:	d01a      	beq.n	2e072 <disk_ioctl+0x66>
   2e03c:	2b03      	cmp	r3, #3
   2e03e:	d150      	bne.n	2e0e2 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2e040:	683b      	ldr	r3, [r7, #0]
   2e042:	2201      	movs	r2, #1
   2e044:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2e046:	230f      	movs	r3, #15
   2e048:	18fb      	adds	r3, r7, r3
   2e04a:	2200      	movs	r2, #0
   2e04c:	701a      	strb	r2, [r3, #0]
		break;
   2e04e:	e04c      	b.n	2e0ea <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2e050:	2308      	movs	r3, #8
   2e052:	18fa      	adds	r2, r7, r3
   2e054:	1dfb      	adds	r3, r7, #7
   2e056:	781b      	ldrb	r3, [r3, #0]
   2e058:	0011      	movs	r1, r2
   2e05a:	0018      	movs	r0, r3
   2e05c:	4b26      	ldr	r3, [pc, #152]	; (2e0f8 <disk_ioctl+0xec>)
   2e05e:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2e060:	68bb      	ldr	r3, [r7, #8]
   2e062:	1c5a      	adds	r2, r3, #1
   2e064:	683b      	ldr	r3, [r7, #0]
   2e066:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2e068:	230f      	movs	r3, #15
   2e06a:	18fb      	adds	r3, r7, r3
   2e06c:	2200      	movs	r2, #0
   2e06e:	701a      	strb	r2, [r3, #0]
	}
	break;
   2e070:	e03b      	b.n	2e0ea <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2e072:	230e      	movs	r3, #14
   2e074:	18fc      	adds	r4, r7, r3
   2e076:	1dfb      	adds	r3, r7, #7
   2e078:	781b      	ldrb	r3, [r3, #0]
   2e07a:	0018      	movs	r0, r3
   2e07c:	4b1f      	ldr	r3, [pc, #124]	; (2e0fc <disk_ioctl+0xf0>)
   2e07e:	4798      	blx	r3
   2e080:	0003      	movs	r3, r0
   2e082:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2e084:	230e      	movs	r3, #14
   2e086:	18fb      	adds	r3, r7, r3
   2e088:	781b      	ldrb	r3, [r3, #0]
   2e08a:	2b01      	cmp	r3, #1
   2e08c:	d010      	beq.n	2e0b0 <disk_ioctl+0xa4>
   2e08e:	230e      	movs	r3, #14
   2e090:	18fb      	adds	r3, r7, r3
   2e092:	781b      	ldrb	r3, [r3, #0]
   2e094:	2b02      	cmp	r3, #2
   2e096:	d00b      	beq.n	2e0b0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2e098:	230e      	movs	r3, #14
   2e09a:	18fb      	adds	r3, r7, r3
   2e09c:	781b      	ldrb	r3, [r3, #0]
   2e09e:	2b04      	cmp	r3, #4
   2e0a0:	d006      	beq.n	2e0b0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2e0a2:	230e      	movs	r3, #14
   2e0a4:	18fb      	adds	r3, r7, r3
   2e0a6:	781b      	ldrb	r3, [r3, #0]
   2e0a8:	2b08      	cmp	r3, #8
   2e0aa:	d001      	beq.n	2e0b0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2e0ac:	2301      	movs	r3, #1
   2e0ae:	e01f      	b.n	2e0f0 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2e0b0:	683b      	ldr	r3, [r7, #0]
   2e0b2:	2200      	movs	r2, #0
   2e0b4:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2e0b6:	230f      	movs	r3, #15
   2e0b8:	18fb      	adds	r3, r7, r3
   2e0ba:	2200      	movs	r2, #0
   2e0bc:	701a      	strb	r2, [r3, #0]
	}
	break;
   2e0be:	e014      	b.n	2e0ea <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2e0c0:	1dfb      	adds	r3, r7, #7
   2e0c2:	781b      	ldrb	r3, [r3, #0]
   2e0c4:	0018      	movs	r0, r3
   2e0c6:	4b0e      	ldr	r3, [pc, #56]	; (2e100 <disk_ioctl+0xf4>)
   2e0c8:	4798      	blx	r3
   2e0ca:	1e03      	subs	r3, r0, #0
   2e0cc:	d104      	bne.n	2e0d8 <disk_ioctl+0xcc>
			res = RES_OK;
   2e0ce:	230f      	movs	r3, #15
   2e0d0:	18fb      	adds	r3, r7, r3
   2e0d2:	2200      	movs	r2, #0
   2e0d4:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2e0d6:	e008      	b.n	2e0ea <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2e0d8:	230f      	movs	r3, #15
   2e0da:	18fb      	adds	r3, r7, r3
   2e0dc:	2203      	movs	r2, #3
   2e0de:	701a      	strb	r2, [r3, #0]
		break;
   2e0e0:	e003      	b.n	2e0ea <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2e0e2:	230f      	movs	r3, #15
   2e0e4:	18fb      	adds	r3, r7, r3
   2e0e6:	2204      	movs	r2, #4
   2e0e8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2e0ea:	230f      	movs	r3, #15
   2e0ec:	18fb      	adds	r3, r7, r3
   2e0ee:	781b      	ldrb	r3, [r3, #0]
}
   2e0f0:	0018      	movs	r0, r3
   2e0f2:	46bd      	mov	sp, r7
   2e0f4:	b005      	add	sp, #20
   2e0f6:	bd90      	pop	{r4, r7, pc}
   2e0f8:	00028ab1 	.word	0x00028ab1
   2e0fc:	00028afd 	.word	0x00028afd
   2e100:	00028a71 	.word	0x00028a71

0002e104 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2e104:	b580      	push	{r7, lr}
   2e106:	b084      	sub	sp, #16
   2e108:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2e10a:	1d3a      	adds	r2, r7, #4
   2e10c:	4b12      	ldr	r3, [pc, #72]	; (2e158 <get_fattime+0x54>)
   2e10e:	0011      	movs	r1, r2
   2e110:	0018      	movs	r0, r3
   2e112:	4b12      	ldr	r3, [pc, #72]	; (2e15c <get_fattime+0x58>)
   2e114:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2e116:	1d3b      	adds	r3, r7, #4
   2e118:	88db      	ldrh	r3, [r3, #6]
   2e11a:	4a11      	ldr	r2, [pc, #68]	; (2e160 <get_fattime+0x5c>)
   2e11c:	4694      	mov	ip, r2
   2e11e:	4463      	add	r3, ip
   2e120:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2e122:	1d3b      	adds	r3, r7, #4
   2e124:	795b      	ldrb	r3, [r3, #5]
   2e126:	055b      	lsls	r3, r3, #21
   2e128:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2e12a:	1d3b      	adds	r3, r7, #4
   2e12c:	791b      	ldrb	r3, [r3, #4]
   2e12e:	041b      	lsls	r3, r3, #16
   2e130:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2e132:	1d3b      	adds	r3, r7, #4
   2e134:	789b      	ldrb	r3, [r3, #2]
   2e136:	02db      	lsls	r3, r3, #11
   2e138:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2e13a:	1d3b      	adds	r3, r7, #4
   2e13c:	785b      	ldrb	r3, [r3, #1]
   2e13e:	015b      	lsls	r3, r3, #5
   2e140:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2e142:	1d3a      	adds	r2, r7, #4
   2e144:	7812      	ldrb	r2, [r2, #0]
   2e146:	0852      	lsrs	r2, r2, #1
   2e148:	b2d2      	uxtb	r2, r2
   2e14a:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2e14c:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2e14e:	68fb      	ldr	r3, [r7, #12]
}
   2e150:	0018      	movs	r0, r3
   2e152:	46bd      	mov	sp, r7
   2e154:	b004      	add	sp, #16
   2e156:	bd80      	pop	{r7, pc}
   2e158:	20005bc4 	.word	0x20005bc4
   2e15c:	000298dd 	.word	0x000298dd
   2e160:	fffff844 	.word	0xfffff844

0002e164 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2e164:	b580      	push	{r7, lr}
   2e166:	b086      	sub	sp, #24
   2e168:	af00      	add	r7, sp, #0
   2e16a:	60f8      	str	r0, [r7, #12]
   2e16c:	60b9      	str	r1, [r7, #8]
   2e16e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2e170:	68fb      	ldr	r3, [r7, #12]
   2e172:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2e174:	68bb      	ldr	r3, [r7, #8]
   2e176:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2e178:	e007      	b.n	2e18a <mem_cpy+0x26>
		*d++ = *s++;
   2e17a:	697b      	ldr	r3, [r7, #20]
   2e17c:	1c5a      	adds	r2, r3, #1
   2e17e:	617a      	str	r2, [r7, #20]
   2e180:	693a      	ldr	r2, [r7, #16]
   2e182:	1c51      	adds	r1, r2, #1
   2e184:	6139      	str	r1, [r7, #16]
   2e186:	7812      	ldrb	r2, [r2, #0]
   2e188:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2e18a:	687b      	ldr	r3, [r7, #4]
   2e18c:	1e5a      	subs	r2, r3, #1
   2e18e:	607a      	str	r2, [r7, #4]
   2e190:	2b00      	cmp	r3, #0
   2e192:	d1f2      	bne.n	2e17a <mem_cpy+0x16>
}
   2e194:	46c0      	nop			; (mov r8, r8)
   2e196:	46bd      	mov	sp, r7
   2e198:	b006      	add	sp, #24
   2e19a:	bd80      	pop	{r7, pc}

0002e19c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2e19c:	b580      	push	{r7, lr}
   2e19e:	b086      	sub	sp, #24
   2e1a0:	af00      	add	r7, sp, #0
   2e1a2:	60f8      	str	r0, [r7, #12]
   2e1a4:	60b9      	str	r1, [r7, #8]
   2e1a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2e1a8:	68fb      	ldr	r3, [r7, #12]
   2e1aa:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2e1ac:	e005      	b.n	2e1ba <mem_set+0x1e>
		*d++ = (BYTE)val;
   2e1ae:	697b      	ldr	r3, [r7, #20]
   2e1b0:	1c5a      	adds	r2, r3, #1
   2e1b2:	617a      	str	r2, [r7, #20]
   2e1b4:	68ba      	ldr	r2, [r7, #8]
   2e1b6:	b2d2      	uxtb	r2, r2
   2e1b8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2e1ba:	687b      	ldr	r3, [r7, #4]
   2e1bc:	1e5a      	subs	r2, r3, #1
   2e1be:	607a      	str	r2, [r7, #4]
   2e1c0:	2b00      	cmp	r3, #0
   2e1c2:	d1f4      	bne.n	2e1ae <mem_set+0x12>
}
   2e1c4:	46c0      	nop			; (mov r8, r8)
   2e1c6:	46bd      	mov	sp, r7
   2e1c8:	b006      	add	sp, #24
   2e1ca:	bd80      	pop	{r7, pc}

0002e1cc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2e1cc:	b580      	push	{r7, lr}
   2e1ce:	b088      	sub	sp, #32
   2e1d0:	af00      	add	r7, sp, #0
   2e1d2:	60f8      	str	r0, [r7, #12]
   2e1d4:	60b9      	str	r1, [r7, #8]
   2e1d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2e1d8:	68fb      	ldr	r3, [r7, #12]
   2e1da:	61fb      	str	r3, [r7, #28]
   2e1dc:	68bb      	ldr	r3, [r7, #8]
   2e1de:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2e1e0:	2300      	movs	r3, #0
   2e1e2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2e1e4:	46c0      	nop			; (mov r8, r8)
   2e1e6:	687b      	ldr	r3, [r7, #4]
   2e1e8:	1e5a      	subs	r2, r3, #1
   2e1ea:	607a      	str	r2, [r7, #4]
   2e1ec:	2b00      	cmp	r3, #0
   2e1ee:	d00d      	beq.n	2e20c <mem_cmp+0x40>
   2e1f0:	69fb      	ldr	r3, [r7, #28]
   2e1f2:	1c5a      	adds	r2, r3, #1
   2e1f4:	61fa      	str	r2, [r7, #28]
   2e1f6:	781b      	ldrb	r3, [r3, #0]
   2e1f8:	0019      	movs	r1, r3
   2e1fa:	69bb      	ldr	r3, [r7, #24]
   2e1fc:	1c5a      	adds	r2, r3, #1
   2e1fe:	61ba      	str	r2, [r7, #24]
   2e200:	781b      	ldrb	r3, [r3, #0]
   2e202:	1acb      	subs	r3, r1, r3
   2e204:	617b      	str	r3, [r7, #20]
   2e206:	697b      	ldr	r3, [r7, #20]
   2e208:	2b00      	cmp	r3, #0
   2e20a:	d0ec      	beq.n	2e1e6 <mem_cmp+0x1a>
	return r;
   2e20c:	697b      	ldr	r3, [r7, #20]
}
   2e20e:	0018      	movs	r0, r3
   2e210:	46bd      	mov	sp, r7
   2e212:	b008      	add	sp, #32
   2e214:	bd80      	pop	{r7, pc}

0002e216 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2e216:	b580      	push	{r7, lr}
   2e218:	b082      	sub	sp, #8
   2e21a:	af00      	add	r7, sp, #0
   2e21c:	6078      	str	r0, [r7, #4]
   2e21e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2e220:	e002      	b.n	2e228 <chk_chr+0x12>
   2e222:	687b      	ldr	r3, [r7, #4]
   2e224:	3301      	adds	r3, #1
   2e226:	607b      	str	r3, [r7, #4]
   2e228:	687b      	ldr	r3, [r7, #4]
   2e22a:	781b      	ldrb	r3, [r3, #0]
   2e22c:	2b00      	cmp	r3, #0
   2e22e:	d005      	beq.n	2e23c <chk_chr+0x26>
   2e230:	687b      	ldr	r3, [r7, #4]
   2e232:	781b      	ldrb	r3, [r3, #0]
   2e234:	001a      	movs	r2, r3
   2e236:	683b      	ldr	r3, [r7, #0]
   2e238:	429a      	cmp	r2, r3
   2e23a:	d1f2      	bne.n	2e222 <chk_chr+0xc>
	return *str;
   2e23c:	687b      	ldr	r3, [r7, #4]
   2e23e:	781b      	ldrb	r3, [r3, #0]
}
   2e240:	0018      	movs	r0, r3
   2e242:	46bd      	mov	sp, r7
   2e244:	b002      	add	sp, #8
   2e246:	bd80      	pop	{r7, pc}

0002e248 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2e248:	b590      	push	{r4, r7, lr}
   2e24a:	b085      	sub	sp, #20
   2e24c:	af00      	add	r7, sp, #0
   2e24e:	6078      	str	r0, [r7, #4]
   2e250:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2e252:	687b      	ldr	r3, [r7, #4]
   2e254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e256:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2e258:	68fa      	ldr	r2, [r7, #12]
   2e25a:	683b      	ldr	r3, [r7, #0]
   2e25c:	429a      	cmp	r2, r3
   2e25e:	d04e      	beq.n	2e2fe <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2e260:	687b      	ldr	r3, [r7, #4]
   2e262:	791b      	ldrb	r3, [r3, #4]
   2e264:	2b00      	cmp	r3, #0
   2e266:	d037      	beq.n	2e2d8 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2e268:	687b      	ldr	r3, [r7, #4]
   2e26a:	7858      	ldrb	r0, [r3, #1]
   2e26c:	687b      	ldr	r3, [r7, #4]
   2e26e:	3330      	adds	r3, #48	; 0x30
   2e270:	0019      	movs	r1, r3
   2e272:	68fa      	ldr	r2, [r7, #12]
   2e274:	2301      	movs	r3, #1
   2e276:	4c24      	ldr	r4, [pc, #144]	; (2e308 <move_window+0xc0>)
   2e278:	47a0      	blx	r4
   2e27a:	1e03      	subs	r3, r0, #0
   2e27c:	d001      	beq.n	2e282 <move_window+0x3a>
				return FR_DISK_ERR;
   2e27e:	2301      	movs	r3, #1
   2e280:	e03e      	b.n	2e300 <move_window+0xb8>
			fs->wflag = 0;
   2e282:	687b      	ldr	r3, [r7, #4]
   2e284:	2200      	movs	r2, #0
   2e286:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2e288:	687b      	ldr	r3, [r7, #4]
   2e28a:	6a1a      	ldr	r2, [r3, #32]
   2e28c:	687b      	ldr	r3, [r7, #4]
   2e28e:	69db      	ldr	r3, [r3, #28]
   2e290:	18d2      	adds	r2, r2, r3
   2e292:	68fb      	ldr	r3, [r7, #12]
   2e294:	429a      	cmp	r2, r3
   2e296:	d91f      	bls.n	2e2d8 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2e298:	230b      	movs	r3, #11
   2e29a:	18fb      	adds	r3, r7, r3
   2e29c:	687a      	ldr	r2, [r7, #4]
   2e29e:	78d2      	ldrb	r2, [r2, #3]
   2e2a0:	701a      	strb	r2, [r3, #0]
   2e2a2:	e014      	b.n	2e2ce <move_window+0x86>
					wsect += fs->fsize;
   2e2a4:	687b      	ldr	r3, [r7, #4]
   2e2a6:	69db      	ldr	r3, [r3, #28]
   2e2a8:	68fa      	ldr	r2, [r7, #12]
   2e2aa:	18d3      	adds	r3, r2, r3
   2e2ac:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2e2ae:	687b      	ldr	r3, [r7, #4]
   2e2b0:	7858      	ldrb	r0, [r3, #1]
   2e2b2:	687b      	ldr	r3, [r7, #4]
   2e2b4:	3330      	adds	r3, #48	; 0x30
   2e2b6:	0019      	movs	r1, r3
   2e2b8:	68fa      	ldr	r2, [r7, #12]
   2e2ba:	2301      	movs	r3, #1
   2e2bc:	4c12      	ldr	r4, [pc, #72]	; (2e308 <move_window+0xc0>)
   2e2be:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2e2c0:	230b      	movs	r3, #11
   2e2c2:	18fb      	adds	r3, r7, r3
   2e2c4:	781a      	ldrb	r2, [r3, #0]
   2e2c6:	230b      	movs	r3, #11
   2e2c8:	18fb      	adds	r3, r7, r3
   2e2ca:	3a01      	subs	r2, #1
   2e2cc:	701a      	strb	r2, [r3, #0]
   2e2ce:	230b      	movs	r3, #11
   2e2d0:	18fb      	adds	r3, r7, r3
   2e2d2:	781b      	ldrb	r3, [r3, #0]
   2e2d4:	2b01      	cmp	r3, #1
   2e2d6:	d8e5      	bhi.n	2e2a4 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2e2d8:	683b      	ldr	r3, [r7, #0]
   2e2da:	2b00      	cmp	r3, #0
   2e2dc:	d00f      	beq.n	2e2fe <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2e2de:	687b      	ldr	r3, [r7, #4]
   2e2e0:	7858      	ldrb	r0, [r3, #1]
   2e2e2:	687b      	ldr	r3, [r7, #4]
   2e2e4:	3330      	adds	r3, #48	; 0x30
   2e2e6:	0019      	movs	r1, r3
   2e2e8:	683a      	ldr	r2, [r7, #0]
   2e2ea:	2301      	movs	r3, #1
   2e2ec:	4c07      	ldr	r4, [pc, #28]	; (2e30c <move_window+0xc4>)
   2e2ee:	47a0      	blx	r4
   2e2f0:	1e03      	subs	r3, r0, #0
   2e2f2:	d001      	beq.n	2e2f8 <move_window+0xb0>
				return FR_DISK_ERR;
   2e2f4:	2301      	movs	r3, #1
   2e2f6:	e003      	b.n	2e300 <move_window+0xb8>
			fs->winsect = sector;
   2e2f8:	687b      	ldr	r3, [r7, #4]
   2e2fa:	683a      	ldr	r2, [r7, #0]
   2e2fc:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2e2fe:	2300      	movs	r3, #0
}
   2e300:	0018      	movs	r0, r3
   2e302:	46bd      	mov	sp, r7
   2e304:	b005      	add	sp, #20
   2e306:	bd90      	pop	{r4, r7, pc}
   2e308:	0002df35 	.word	0x0002df35
   2e30c:	0002de5d 	.word	0x0002de5d

0002e310 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2e310:	b590      	push	{r4, r7, lr}
   2e312:	b085      	sub	sp, #20
   2e314:	af00      	add	r7, sp, #0
   2e316:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2e318:	230f      	movs	r3, #15
   2e31a:	18fc      	adds	r4, r7, r3
   2e31c:	687b      	ldr	r3, [r7, #4]
   2e31e:	2100      	movs	r1, #0
   2e320:	0018      	movs	r0, r3
   2e322:	4b52      	ldr	r3, [pc, #328]	; (2e46c <sync+0x15c>)
   2e324:	4798      	blx	r3
   2e326:	0003      	movs	r3, r0
   2e328:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2e32a:	230f      	movs	r3, #15
   2e32c:	18fb      	adds	r3, r7, r3
   2e32e:	781b      	ldrb	r3, [r3, #0]
   2e330:	2b00      	cmp	r3, #0
   2e332:	d000      	beq.n	2e336 <sync+0x26>
   2e334:	e093      	b.n	2e45e <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2e336:	687b      	ldr	r3, [r7, #4]
   2e338:	781b      	ldrb	r3, [r3, #0]
   2e33a:	2b03      	cmp	r3, #3
   2e33c:	d000      	beq.n	2e340 <sync+0x30>
   2e33e:	e081      	b.n	2e444 <sync+0x134>
   2e340:	687b      	ldr	r3, [r7, #4]
   2e342:	795b      	ldrb	r3, [r3, #5]
   2e344:	2b00      	cmp	r3, #0
   2e346:	d07d      	beq.n	2e444 <sync+0x134>
			fs->winsect = 0;
   2e348:	687b      	ldr	r3, [r7, #4]
   2e34a:	2200      	movs	r2, #0
   2e34c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2e34e:	687b      	ldr	r3, [r7, #4]
   2e350:	3330      	adds	r3, #48	; 0x30
   2e352:	0018      	movs	r0, r3
   2e354:	2380      	movs	r3, #128	; 0x80
   2e356:	009b      	lsls	r3, r3, #2
   2e358:	001a      	movs	r2, r3
   2e35a:	2100      	movs	r1, #0
   2e35c:	4b44      	ldr	r3, [pc, #272]	; (2e470 <sync+0x160>)
   2e35e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2e360:	687b      	ldr	r3, [r7, #4]
   2e362:	4a44      	ldr	r2, [pc, #272]	; (2e474 <sync+0x164>)
   2e364:	2155      	movs	r1, #85	; 0x55
   2e366:	5499      	strb	r1, [r3, r2]
   2e368:	687b      	ldr	r3, [r7, #4]
   2e36a:	4a43      	ldr	r2, [pc, #268]	; (2e478 <sync+0x168>)
   2e36c:	21aa      	movs	r1, #170	; 0xaa
   2e36e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2e370:	687b      	ldr	r3, [r7, #4]
   2e372:	2230      	movs	r2, #48	; 0x30
   2e374:	2152      	movs	r1, #82	; 0x52
   2e376:	5499      	strb	r1, [r3, r2]
   2e378:	687b      	ldr	r3, [r7, #4]
   2e37a:	2231      	movs	r2, #49	; 0x31
   2e37c:	2152      	movs	r1, #82	; 0x52
   2e37e:	5499      	strb	r1, [r3, r2]
   2e380:	687b      	ldr	r3, [r7, #4]
   2e382:	2232      	movs	r2, #50	; 0x32
   2e384:	2161      	movs	r1, #97	; 0x61
   2e386:	5499      	strb	r1, [r3, r2]
   2e388:	687b      	ldr	r3, [r7, #4]
   2e38a:	2233      	movs	r2, #51	; 0x33
   2e38c:	2141      	movs	r1, #65	; 0x41
   2e38e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2e390:	687a      	ldr	r2, [r7, #4]
   2e392:	2385      	movs	r3, #133	; 0x85
   2e394:	009b      	lsls	r3, r3, #2
   2e396:	2172      	movs	r1, #114	; 0x72
   2e398:	54d1      	strb	r1, [r2, r3]
   2e39a:	687b      	ldr	r3, [r7, #4]
   2e39c:	4a37      	ldr	r2, [pc, #220]	; (2e47c <sync+0x16c>)
   2e39e:	2172      	movs	r1, #114	; 0x72
   2e3a0:	5499      	strb	r1, [r3, r2]
   2e3a2:	687b      	ldr	r3, [r7, #4]
   2e3a4:	4a36      	ldr	r2, [pc, #216]	; (2e480 <sync+0x170>)
   2e3a6:	2141      	movs	r1, #65	; 0x41
   2e3a8:	5499      	strb	r1, [r3, r2]
   2e3aa:	687b      	ldr	r3, [r7, #4]
   2e3ac:	4a35      	ldr	r2, [pc, #212]	; (2e484 <sync+0x174>)
   2e3ae:	2161      	movs	r1, #97	; 0x61
   2e3b0:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2e3b2:	687b      	ldr	r3, [r7, #4]
   2e3b4:	691b      	ldr	r3, [r3, #16]
   2e3b6:	b2d9      	uxtb	r1, r3
   2e3b8:	687a      	ldr	r2, [r7, #4]
   2e3ba:	2386      	movs	r3, #134	; 0x86
   2e3bc:	009b      	lsls	r3, r3, #2
   2e3be:	54d1      	strb	r1, [r2, r3]
   2e3c0:	687b      	ldr	r3, [r7, #4]
   2e3c2:	691b      	ldr	r3, [r3, #16]
   2e3c4:	b29b      	uxth	r3, r3
   2e3c6:	0a1b      	lsrs	r3, r3, #8
   2e3c8:	b29b      	uxth	r3, r3
   2e3ca:	b2d9      	uxtb	r1, r3
   2e3cc:	687b      	ldr	r3, [r7, #4]
   2e3ce:	4a2e      	ldr	r2, [pc, #184]	; (2e488 <sync+0x178>)
   2e3d0:	5499      	strb	r1, [r3, r2]
   2e3d2:	687b      	ldr	r3, [r7, #4]
   2e3d4:	691b      	ldr	r3, [r3, #16]
   2e3d6:	0c1b      	lsrs	r3, r3, #16
   2e3d8:	b2d9      	uxtb	r1, r3
   2e3da:	687b      	ldr	r3, [r7, #4]
   2e3dc:	4a2b      	ldr	r2, [pc, #172]	; (2e48c <sync+0x17c>)
   2e3de:	5499      	strb	r1, [r3, r2]
   2e3e0:	687b      	ldr	r3, [r7, #4]
   2e3e2:	691b      	ldr	r3, [r3, #16]
   2e3e4:	0e1b      	lsrs	r3, r3, #24
   2e3e6:	b2d9      	uxtb	r1, r3
   2e3e8:	687b      	ldr	r3, [r7, #4]
   2e3ea:	4a29      	ldr	r2, [pc, #164]	; (2e490 <sync+0x180>)
   2e3ec:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2e3ee:	687b      	ldr	r3, [r7, #4]
   2e3f0:	68db      	ldr	r3, [r3, #12]
   2e3f2:	b2d9      	uxtb	r1, r3
   2e3f4:	687a      	ldr	r2, [r7, #4]
   2e3f6:	2387      	movs	r3, #135	; 0x87
   2e3f8:	009b      	lsls	r3, r3, #2
   2e3fa:	54d1      	strb	r1, [r2, r3]
   2e3fc:	687b      	ldr	r3, [r7, #4]
   2e3fe:	68db      	ldr	r3, [r3, #12]
   2e400:	b29b      	uxth	r3, r3
   2e402:	0a1b      	lsrs	r3, r3, #8
   2e404:	b29b      	uxth	r3, r3
   2e406:	b2d9      	uxtb	r1, r3
   2e408:	687b      	ldr	r3, [r7, #4]
   2e40a:	4a22      	ldr	r2, [pc, #136]	; (2e494 <sync+0x184>)
   2e40c:	5499      	strb	r1, [r3, r2]
   2e40e:	687b      	ldr	r3, [r7, #4]
   2e410:	68db      	ldr	r3, [r3, #12]
   2e412:	0c1b      	lsrs	r3, r3, #16
   2e414:	b2d9      	uxtb	r1, r3
   2e416:	687b      	ldr	r3, [r7, #4]
   2e418:	4a1f      	ldr	r2, [pc, #124]	; (2e498 <sync+0x188>)
   2e41a:	5499      	strb	r1, [r3, r2]
   2e41c:	687b      	ldr	r3, [r7, #4]
   2e41e:	68db      	ldr	r3, [r3, #12]
   2e420:	0e1b      	lsrs	r3, r3, #24
   2e422:	b2d9      	uxtb	r1, r3
   2e424:	687b      	ldr	r3, [r7, #4]
   2e426:	4a1d      	ldr	r2, [pc, #116]	; (2e49c <sync+0x18c>)
   2e428:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2e42a:	687b      	ldr	r3, [r7, #4]
   2e42c:	7858      	ldrb	r0, [r3, #1]
   2e42e:	687b      	ldr	r3, [r7, #4]
   2e430:	3330      	adds	r3, #48	; 0x30
   2e432:	0019      	movs	r1, r3
   2e434:	687b      	ldr	r3, [r7, #4]
   2e436:	695a      	ldr	r2, [r3, #20]
   2e438:	2301      	movs	r3, #1
   2e43a:	4c19      	ldr	r4, [pc, #100]	; (2e4a0 <sync+0x190>)
   2e43c:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2e43e:	687b      	ldr	r3, [r7, #4]
   2e440:	2200      	movs	r2, #0
   2e442:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2e444:	687b      	ldr	r3, [r7, #4]
   2e446:	785b      	ldrb	r3, [r3, #1]
   2e448:	2200      	movs	r2, #0
   2e44a:	2100      	movs	r1, #0
   2e44c:	0018      	movs	r0, r3
   2e44e:	4b15      	ldr	r3, [pc, #84]	; (2e4a4 <sync+0x194>)
   2e450:	4798      	blx	r3
   2e452:	1e03      	subs	r3, r0, #0
   2e454:	d003      	beq.n	2e45e <sync+0x14e>
			res = FR_DISK_ERR;
   2e456:	230f      	movs	r3, #15
   2e458:	18fb      	adds	r3, r7, r3
   2e45a:	2201      	movs	r2, #1
   2e45c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2e45e:	230f      	movs	r3, #15
   2e460:	18fb      	adds	r3, r7, r3
   2e462:	781b      	ldrb	r3, [r3, #0]
}
   2e464:	0018      	movs	r0, r3
   2e466:	46bd      	mov	sp, r7
   2e468:	b005      	add	sp, #20
   2e46a:	bd90      	pop	{r4, r7, pc}
   2e46c:	0002e249 	.word	0x0002e249
   2e470:	0002e19d 	.word	0x0002e19d
   2e474:	0000022e 	.word	0x0000022e
   2e478:	0000022f 	.word	0x0000022f
   2e47c:	00000215 	.word	0x00000215
   2e480:	00000216 	.word	0x00000216
   2e484:	00000217 	.word	0x00000217
   2e488:	00000219 	.word	0x00000219
   2e48c:	0000021a 	.word	0x0000021a
   2e490:	0000021b 	.word	0x0000021b
   2e494:	0000021d 	.word	0x0000021d
   2e498:	0000021e 	.word	0x0000021e
   2e49c:	0000021f 	.word	0x0000021f
   2e4a0:	0002df35 	.word	0x0002df35
   2e4a4:	0002e00d 	.word	0x0002e00d

0002e4a8 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2e4a8:	b580      	push	{r7, lr}
   2e4aa:	b082      	sub	sp, #8
   2e4ac:	af00      	add	r7, sp, #0
   2e4ae:	6078      	str	r0, [r7, #4]
   2e4b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2e4b2:	683b      	ldr	r3, [r7, #0]
   2e4b4:	3b02      	subs	r3, #2
   2e4b6:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2e4b8:	687b      	ldr	r3, [r7, #4]
   2e4ba:	699b      	ldr	r3, [r3, #24]
   2e4bc:	1e9a      	subs	r2, r3, #2
   2e4be:	683b      	ldr	r3, [r7, #0]
   2e4c0:	429a      	cmp	r2, r3
   2e4c2:	d801      	bhi.n	2e4c8 <clust2sect+0x20>
   2e4c4:	2300      	movs	r3, #0
   2e4c6:	e007      	b.n	2e4d8 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2e4c8:	687b      	ldr	r3, [r7, #4]
   2e4ca:	789b      	ldrb	r3, [r3, #2]
   2e4cc:	001a      	movs	r2, r3
   2e4ce:	683b      	ldr	r3, [r7, #0]
   2e4d0:	435a      	muls	r2, r3
   2e4d2:	687b      	ldr	r3, [r7, #4]
   2e4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2e4d6:	18d3      	adds	r3, r2, r3
}
   2e4d8:	0018      	movs	r0, r3
   2e4da:	46bd      	mov	sp, r7
   2e4dc:	b002      	add	sp, #8
   2e4de:	bd80      	pop	{r7, pc}

0002e4e0 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2e4e0:	b580      	push	{r7, lr}
   2e4e2:	b086      	sub	sp, #24
   2e4e4:	af00      	add	r7, sp, #0
   2e4e6:	6078      	str	r0, [r7, #4]
   2e4e8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2e4ea:	683b      	ldr	r3, [r7, #0]
   2e4ec:	2b01      	cmp	r3, #1
   2e4ee:	d904      	bls.n	2e4fa <get_fat+0x1a>
   2e4f0:	687b      	ldr	r3, [r7, #4]
   2e4f2:	699a      	ldr	r2, [r3, #24]
   2e4f4:	683b      	ldr	r3, [r7, #0]
   2e4f6:	429a      	cmp	r2, r3
   2e4f8:	d801      	bhi.n	2e4fe <get_fat+0x1e>
		return 1;
   2e4fa:	2301      	movs	r3, #1
   2e4fc:	e09f      	b.n	2e63e <get_fat+0x15e>

	switch (fs->fs_type) {
   2e4fe:	687b      	ldr	r3, [r7, #4]
   2e500:	781b      	ldrb	r3, [r3, #0]
   2e502:	2b02      	cmp	r3, #2
   2e504:	d048      	beq.n	2e598 <get_fat+0xb8>
   2e506:	2b03      	cmp	r3, #3
   2e508:	d067      	beq.n	2e5da <get_fat+0xfa>
   2e50a:	2b01      	cmp	r3, #1
   2e50c:	d000      	beq.n	2e510 <get_fat+0x30>
   2e50e:	e094      	b.n	2e63a <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2e510:	683b      	ldr	r3, [r7, #0]
   2e512:	617b      	str	r3, [r7, #20]
   2e514:	697b      	ldr	r3, [r7, #20]
   2e516:	085b      	lsrs	r3, r3, #1
   2e518:	697a      	ldr	r2, [r7, #20]
   2e51a:	18d3      	adds	r3, r2, r3
   2e51c:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2e51e:	687b      	ldr	r3, [r7, #4]
   2e520:	6a1a      	ldr	r2, [r3, #32]
   2e522:	697b      	ldr	r3, [r7, #20]
   2e524:	0a5b      	lsrs	r3, r3, #9
   2e526:	18d2      	adds	r2, r2, r3
   2e528:	687b      	ldr	r3, [r7, #4]
   2e52a:	0011      	movs	r1, r2
   2e52c:	0018      	movs	r0, r3
   2e52e:	4b46      	ldr	r3, [pc, #280]	; (2e648 <get_fat+0x168>)
   2e530:	4798      	blx	r3
   2e532:	1e03      	subs	r3, r0, #0
   2e534:	d000      	beq.n	2e538 <get_fat+0x58>
   2e536:	e079      	b.n	2e62c <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2e538:	697b      	ldr	r3, [r7, #20]
   2e53a:	05db      	lsls	r3, r3, #23
   2e53c:	0ddb      	lsrs	r3, r3, #23
   2e53e:	687a      	ldr	r2, [r7, #4]
   2e540:	2130      	movs	r1, #48	; 0x30
   2e542:	18d3      	adds	r3, r2, r3
   2e544:	185b      	adds	r3, r3, r1
   2e546:	781b      	ldrb	r3, [r3, #0]
   2e548:	613b      	str	r3, [r7, #16]
   2e54a:	697b      	ldr	r3, [r7, #20]
   2e54c:	3301      	adds	r3, #1
   2e54e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2e550:	687b      	ldr	r3, [r7, #4]
   2e552:	6a1a      	ldr	r2, [r3, #32]
   2e554:	697b      	ldr	r3, [r7, #20]
   2e556:	0a5b      	lsrs	r3, r3, #9
   2e558:	18d2      	adds	r2, r2, r3
   2e55a:	687b      	ldr	r3, [r7, #4]
   2e55c:	0011      	movs	r1, r2
   2e55e:	0018      	movs	r0, r3
   2e560:	4b39      	ldr	r3, [pc, #228]	; (2e648 <get_fat+0x168>)
   2e562:	4798      	blx	r3
   2e564:	1e03      	subs	r3, r0, #0
   2e566:	d163      	bne.n	2e630 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2e568:	697b      	ldr	r3, [r7, #20]
   2e56a:	05db      	lsls	r3, r3, #23
   2e56c:	0ddb      	lsrs	r3, r3, #23
   2e56e:	687a      	ldr	r2, [r7, #4]
   2e570:	2130      	movs	r1, #48	; 0x30
   2e572:	18d3      	adds	r3, r2, r3
   2e574:	185b      	adds	r3, r3, r1
   2e576:	781b      	ldrb	r3, [r3, #0]
   2e578:	021b      	lsls	r3, r3, #8
   2e57a:	001a      	movs	r2, r3
   2e57c:	693b      	ldr	r3, [r7, #16]
   2e57e:	4313      	orrs	r3, r2
   2e580:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2e582:	683b      	ldr	r3, [r7, #0]
   2e584:	2201      	movs	r2, #1
   2e586:	4013      	ands	r3, r2
   2e588:	d002      	beq.n	2e590 <get_fat+0xb0>
   2e58a:	693b      	ldr	r3, [r7, #16]
   2e58c:	091b      	lsrs	r3, r3, #4
   2e58e:	e056      	b.n	2e63e <get_fat+0x15e>
   2e590:	693b      	ldr	r3, [r7, #16]
   2e592:	051b      	lsls	r3, r3, #20
   2e594:	0d1b      	lsrs	r3, r3, #20
   2e596:	e052      	b.n	2e63e <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2e598:	687b      	ldr	r3, [r7, #4]
   2e59a:	6a1a      	ldr	r2, [r3, #32]
   2e59c:	683b      	ldr	r3, [r7, #0]
   2e59e:	0a1b      	lsrs	r3, r3, #8
   2e5a0:	18d2      	adds	r2, r2, r3
   2e5a2:	687b      	ldr	r3, [r7, #4]
   2e5a4:	0011      	movs	r1, r2
   2e5a6:	0018      	movs	r0, r3
   2e5a8:	4b27      	ldr	r3, [pc, #156]	; (2e648 <get_fat+0x168>)
   2e5aa:	4798      	blx	r3
   2e5ac:	1e03      	subs	r3, r0, #0
   2e5ae:	d141      	bne.n	2e634 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2e5b0:	683b      	ldr	r3, [r7, #0]
   2e5b2:	005a      	lsls	r2, r3, #1
   2e5b4:	23ff      	movs	r3, #255	; 0xff
   2e5b6:	005b      	lsls	r3, r3, #1
   2e5b8:	4013      	ands	r3, r2
   2e5ba:	3330      	adds	r3, #48	; 0x30
   2e5bc:	687a      	ldr	r2, [r7, #4]
   2e5be:	18d3      	adds	r3, r2, r3
   2e5c0:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2e5c2:	68fb      	ldr	r3, [r7, #12]
   2e5c4:	3301      	adds	r3, #1
   2e5c6:	781b      	ldrb	r3, [r3, #0]
   2e5c8:	021b      	lsls	r3, r3, #8
   2e5ca:	b21a      	sxth	r2, r3
   2e5cc:	68fb      	ldr	r3, [r7, #12]
   2e5ce:	781b      	ldrb	r3, [r3, #0]
   2e5d0:	b21b      	sxth	r3, r3
   2e5d2:	4313      	orrs	r3, r2
   2e5d4:	b21b      	sxth	r3, r3
   2e5d6:	b29b      	uxth	r3, r3
   2e5d8:	e031      	b.n	2e63e <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2e5da:	687b      	ldr	r3, [r7, #4]
   2e5dc:	6a1a      	ldr	r2, [r3, #32]
   2e5de:	683b      	ldr	r3, [r7, #0]
   2e5e0:	09db      	lsrs	r3, r3, #7
   2e5e2:	18d2      	adds	r2, r2, r3
   2e5e4:	687b      	ldr	r3, [r7, #4]
   2e5e6:	0011      	movs	r1, r2
   2e5e8:	0018      	movs	r0, r3
   2e5ea:	4b17      	ldr	r3, [pc, #92]	; (2e648 <get_fat+0x168>)
   2e5ec:	4798      	blx	r3
   2e5ee:	1e03      	subs	r3, r0, #0
   2e5f0:	d122      	bne.n	2e638 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2e5f2:	683b      	ldr	r3, [r7, #0]
   2e5f4:	009a      	lsls	r2, r3, #2
   2e5f6:	23fe      	movs	r3, #254	; 0xfe
   2e5f8:	005b      	lsls	r3, r3, #1
   2e5fa:	4013      	ands	r3, r2
   2e5fc:	3330      	adds	r3, #48	; 0x30
   2e5fe:	687a      	ldr	r2, [r7, #4]
   2e600:	18d3      	adds	r3, r2, r3
   2e602:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2e604:	68fb      	ldr	r3, [r7, #12]
   2e606:	3303      	adds	r3, #3
   2e608:	781b      	ldrb	r3, [r3, #0]
   2e60a:	061a      	lsls	r2, r3, #24
   2e60c:	68fb      	ldr	r3, [r7, #12]
   2e60e:	3302      	adds	r3, #2
   2e610:	781b      	ldrb	r3, [r3, #0]
   2e612:	041b      	lsls	r3, r3, #16
   2e614:	4313      	orrs	r3, r2
   2e616:	68fa      	ldr	r2, [r7, #12]
   2e618:	3201      	adds	r2, #1
   2e61a:	7812      	ldrb	r2, [r2, #0]
   2e61c:	0212      	lsls	r2, r2, #8
   2e61e:	4313      	orrs	r3, r2
   2e620:	68fa      	ldr	r2, [r7, #12]
   2e622:	7812      	ldrb	r2, [r2, #0]
   2e624:	4313      	orrs	r3, r2
   2e626:	011b      	lsls	r3, r3, #4
   2e628:	091b      	lsrs	r3, r3, #4
   2e62a:	e008      	b.n	2e63e <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2e62c:	46c0      	nop			; (mov r8, r8)
   2e62e:	e004      	b.n	2e63a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2e630:	46c0      	nop			; (mov r8, r8)
   2e632:	e002      	b.n	2e63a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2e634:	46c0      	nop			; (mov r8, r8)
   2e636:	e000      	b.n	2e63a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2e638:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2e63a:	2301      	movs	r3, #1
   2e63c:	425b      	negs	r3, r3
}
   2e63e:	0018      	movs	r0, r3
   2e640:	46bd      	mov	sp, r7
   2e642:	b006      	add	sp, #24
   2e644:	bd80      	pop	{r7, pc}
   2e646:	46c0      	nop			; (mov r8, r8)
   2e648:	0002e249 	.word	0x0002e249

0002e64c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2e64c:	b590      	push	{r4, r7, lr}
   2e64e:	b089      	sub	sp, #36	; 0x24
   2e650:	af00      	add	r7, sp, #0
   2e652:	60f8      	str	r0, [r7, #12]
   2e654:	60b9      	str	r1, [r7, #8]
   2e656:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2e658:	68bb      	ldr	r3, [r7, #8]
   2e65a:	2b01      	cmp	r3, #1
   2e65c:	d904      	bls.n	2e668 <put_fat+0x1c>
   2e65e:	68fb      	ldr	r3, [r7, #12]
   2e660:	699a      	ldr	r2, [r3, #24]
   2e662:	68bb      	ldr	r3, [r7, #8]
   2e664:	429a      	cmp	r2, r3
   2e666:	d804      	bhi.n	2e672 <put_fat+0x26>
		res = FR_INT_ERR;
   2e668:	231f      	movs	r3, #31
   2e66a:	18fb      	adds	r3, r7, r3
   2e66c:	2202      	movs	r2, #2
   2e66e:	701a      	strb	r2, [r3, #0]
   2e670:	e100      	b.n	2e874 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2e672:	68fb      	ldr	r3, [r7, #12]
   2e674:	781b      	ldrb	r3, [r3, #0]
   2e676:	2b02      	cmp	r3, #2
   2e678:	d100      	bne.n	2e67c <put_fat+0x30>
   2e67a:	e078      	b.n	2e76e <put_fat+0x122>
   2e67c:	2b03      	cmp	r3, #3
   2e67e:	d100      	bne.n	2e682 <put_fat+0x36>
   2e680:	e09e      	b.n	2e7c0 <put_fat+0x174>
   2e682:	2b01      	cmp	r3, #1
   2e684:	d000      	beq.n	2e688 <put_fat+0x3c>
   2e686:	e0e6      	b.n	2e856 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2e688:	68bb      	ldr	r3, [r7, #8]
   2e68a:	61bb      	str	r3, [r7, #24]
   2e68c:	69bb      	ldr	r3, [r7, #24]
   2e68e:	085b      	lsrs	r3, r3, #1
   2e690:	69ba      	ldr	r2, [r7, #24]
   2e692:	18d3      	adds	r3, r2, r3
   2e694:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2e696:	68fb      	ldr	r3, [r7, #12]
   2e698:	6a1a      	ldr	r2, [r3, #32]
   2e69a:	69bb      	ldr	r3, [r7, #24]
   2e69c:	0a5b      	lsrs	r3, r3, #9
   2e69e:	18d2      	adds	r2, r2, r3
   2e6a0:	231f      	movs	r3, #31
   2e6a2:	18fc      	adds	r4, r7, r3
   2e6a4:	68fb      	ldr	r3, [r7, #12]
   2e6a6:	0011      	movs	r1, r2
   2e6a8:	0018      	movs	r0, r3
   2e6aa:	4b76      	ldr	r3, [pc, #472]	; (2e884 <put_fat+0x238>)
   2e6ac:	4798      	blx	r3
   2e6ae:	0003      	movs	r3, r0
   2e6b0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e6b2:	231f      	movs	r3, #31
   2e6b4:	18fb      	adds	r3, r7, r3
   2e6b6:	781b      	ldrb	r3, [r3, #0]
   2e6b8:	2b00      	cmp	r3, #0
   2e6ba:	d000      	beq.n	2e6be <put_fat+0x72>
   2e6bc:	e0d0      	b.n	2e860 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2e6be:	69bb      	ldr	r3, [r7, #24]
   2e6c0:	05db      	lsls	r3, r3, #23
   2e6c2:	0ddb      	lsrs	r3, r3, #23
   2e6c4:	3330      	adds	r3, #48	; 0x30
   2e6c6:	68fa      	ldr	r2, [r7, #12]
   2e6c8:	18d3      	adds	r3, r2, r3
   2e6ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2e6cc:	68bb      	ldr	r3, [r7, #8]
   2e6ce:	2201      	movs	r2, #1
   2e6d0:	4013      	ands	r3, r2
   2e6d2:	d00d      	beq.n	2e6f0 <put_fat+0xa4>
   2e6d4:	697b      	ldr	r3, [r7, #20]
   2e6d6:	781b      	ldrb	r3, [r3, #0]
   2e6d8:	b25b      	sxtb	r3, r3
   2e6da:	220f      	movs	r2, #15
   2e6dc:	4013      	ands	r3, r2
   2e6de:	b25a      	sxtb	r2, r3
   2e6e0:	687b      	ldr	r3, [r7, #4]
   2e6e2:	b2db      	uxtb	r3, r3
   2e6e4:	011b      	lsls	r3, r3, #4
   2e6e6:	b25b      	sxtb	r3, r3
   2e6e8:	4313      	orrs	r3, r2
   2e6ea:	b25b      	sxtb	r3, r3
   2e6ec:	b2db      	uxtb	r3, r3
   2e6ee:	e001      	b.n	2e6f4 <put_fat+0xa8>
   2e6f0:	687b      	ldr	r3, [r7, #4]
   2e6f2:	b2db      	uxtb	r3, r3
   2e6f4:	697a      	ldr	r2, [r7, #20]
   2e6f6:	7013      	strb	r3, [r2, #0]
			bc++;
   2e6f8:	69bb      	ldr	r3, [r7, #24]
   2e6fa:	3301      	adds	r3, #1
   2e6fc:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2e6fe:	68fb      	ldr	r3, [r7, #12]
   2e700:	2201      	movs	r2, #1
   2e702:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2e704:	68fb      	ldr	r3, [r7, #12]
   2e706:	6a1a      	ldr	r2, [r3, #32]
   2e708:	69bb      	ldr	r3, [r7, #24]
   2e70a:	0a5b      	lsrs	r3, r3, #9
   2e70c:	18d2      	adds	r2, r2, r3
   2e70e:	231f      	movs	r3, #31
   2e710:	18fc      	adds	r4, r7, r3
   2e712:	68fb      	ldr	r3, [r7, #12]
   2e714:	0011      	movs	r1, r2
   2e716:	0018      	movs	r0, r3
   2e718:	4b5a      	ldr	r3, [pc, #360]	; (2e884 <put_fat+0x238>)
   2e71a:	4798      	blx	r3
   2e71c:	0003      	movs	r3, r0
   2e71e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e720:	231f      	movs	r3, #31
   2e722:	18fb      	adds	r3, r7, r3
   2e724:	781b      	ldrb	r3, [r3, #0]
   2e726:	2b00      	cmp	r3, #0
   2e728:	d000      	beq.n	2e72c <put_fat+0xe0>
   2e72a:	e09b      	b.n	2e864 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2e72c:	69bb      	ldr	r3, [r7, #24]
   2e72e:	05db      	lsls	r3, r3, #23
   2e730:	0ddb      	lsrs	r3, r3, #23
   2e732:	3330      	adds	r3, #48	; 0x30
   2e734:	68fa      	ldr	r2, [r7, #12]
   2e736:	18d3      	adds	r3, r2, r3
   2e738:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2e73a:	68bb      	ldr	r3, [r7, #8]
   2e73c:	2201      	movs	r2, #1
   2e73e:	4013      	ands	r3, r2
   2e740:	d003      	beq.n	2e74a <put_fat+0xfe>
   2e742:	687b      	ldr	r3, [r7, #4]
   2e744:	091b      	lsrs	r3, r3, #4
   2e746:	b2db      	uxtb	r3, r3
   2e748:	e00e      	b.n	2e768 <put_fat+0x11c>
   2e74a:	697b      	ldr	r3, [r7, #20]
   2e74c:	781b      	ldrb	r3, [r3, #0]
   2e74e:	b25b      	sxtb	r3, r3
   2e750:	220f      	movs	r2, #15
   2e752:	4393      	bics	r3, r2
   2e754:	b25a      	sxtb	r2, r3
   2e756:	687b      	ldr	r3, [r7, #4]
   2e758:	0a1b      	lsrs	r3, r3, #8
   2e75a:	b25b      	sxtb	r3, r3
   2e75c:	210f      	movs	r1, #15
   2e75e:	400b      	ands	r3, r1
   2e760:	b25b      	sxtb	r3, r3
   2e762:	4313      	orrs	r3, r2
   2e764:	b25b      	sxtb	r3, r3
   2e766:	b2db      	uxtb	r3, r3
   2e768:	697a      	ldr	r2, [r7, #20]
   2e76a:	7013      	strb	r3, [r2, #0]
			break;
   2e76c:	e07f      	b.n	2e86e <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2e76e:	68fb      	ldr	r3, [r7, #12]
   2e770:	6a1a      	ldr	r2, [r3, #32]
   2e772:	68bb      	ldr	r3, [r7, #8]
   2e774:	0a1b      	lsrs	r3, r3, #8
   2e776:	18d2      	adds	r2, r2, r3
   2e778:	231f      	movs	r3, #31
   2e77a:	18fc      	adds	r4, r7, r3
   2e77c:	68fb      	ldr	r3, [r7, #12]
   2e77e:	0011      	movs	r1, r2
   2e780:	0018      	movs	r0, r3
   2e782:	4b40      	ldr	r3, [pc, #256]	; (2e884 <put_fat+0x238>)
   2e784:	4798      	blx	r3
   2e786:	0003      	movs	r3, r0
   2e788:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e78a:	231f      	movs	r3, #31
   2e78c:	18fb      	adds	r3, r7, r3
   2e78e:	781b      	ldrb	r3, [r3, #0]
   2e790:	2b00      	cmp	r3, #0
   2e792:	d169      	bne.n	2e868 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2e794:	68bb      	ldr	r3, [r7, #8]
   2e796:	005a      	lsls	r2, r3, #1
   2e798:	23ff      	movs	r3, #255	; 0xff
   2e79a:	005b      	lsls	r3, r3, #1
   2e79c:	4013      	ands	r3, r2
   2e79e:	3330      	adds	r3, #48	; 0x30
   2e7a0:	68fa      	ldr	r2, [r7, #12]
   2e7a2:	18d3      	adds	r3, r2, r3
   2e7a4:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2e7a6:	687b      	ldr	r3, [r7, #4]
   2e7a8:	b2da      	uxtb	r2, r3
   2e7aa:	697b      	ldr	r3, [r7, #20]
   2e7ac:	701a      	strb	r2, [r3, #0]
   2e7ae:	697b      	ldr	r3, [r7, #20]
   2e7b0:	3301      	adds	r3, #1
   2e7b2:	687a      	ldr	r2, [r7, #4]
   2e7b4:	b292      	uxth	r2, r2
   2e7b6:	0a12      	lsrs	r2, r2, #8
   2e7b8:	b292      	uxth	r2, r2
   2e7ba:	b2d2      	uxtb	r2, r2
   2e7bc:	701a      	strb	r2, [r3, #0]
			break;
   2e7be:	e056      	b.n	2e86e <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2e7c0:	68fb      	ldr	r3, [r7, #12]
   2e7c2:	6a1a      	ldr	r2, [r3, #32]
   2e7c4:	68bb      	ldr	r3, [r7, #8]
   2e7c6:	09db      	lsrs	r3, r3, #7
   2e7c8:	18d2      	adds	r2, r2, r3
   2e7ca:	231f      	movs	r3, #31
   2e7cc:	18fc      	adds	r4, r7, r3
   2e7ce:	68fb      	ldr	r3, [r7, #12]
   2e7d0:	0011      	movs	r1, r2
   2e7d2:	0018      	movs	r0, r3
   2e7d4:	4b2b      	ldr	r3, [pc, #172]	; (2e884 <put_fat+0x238>)
   2e7d6:	4798      	blx	r3
   2e7d8:	0003      	movs	r3, r0
   2e7da:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e7dc:	231f      	movs	r3, #31
   2e7de:	18fb      	adds	r3, r7, r3
   2e7e0:	781b      	ldrb	r3, [r3, #0]
   2e7e2:	2b00      	cmp	r3, #0
   2e7e4:	d142      	bne.n	2e86c <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2e7e6:	68bb      	ldr	r3, [r7, #8]
   2e7e8:	009a      	lsls	r2, r3, #2
   2e7ea:	23fe      	movs	r3, #254	; 0xfe
   2e7ec:	005b      	lsls	r3, r3, #1
   2e7ee:	4013      	ands	r3, r2
   2e7f0:	3330      	adds	r3, #48	; 0x30
   2e7f2:	68fa      	ldr	r2, [r7, #12]
   2e7f4:	18d3      	adds	r3, r2, r3
   2e7f6:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2e7f8:	697b      	ldr	r3, [r7, #20]
   2e7fa:	3303      	adds	r3, #3
   2e7fc:	781b      	ldrb	r3, [r3, #0]
   2e7fe:	061a      	lsls	r2, r3, #24
   2e800:	697b      	ldr	r3, [r7, #20]
   2e802:	3302      	adds	r3, #2
   2e804:	781b      	ldrb	r3, [r3, #0]
   2e806:	041b      	lsls	r3, r3, #16
   2e808:	4313      	orrs	r3, r2
   2e80a:	697a      	ldr	r2, [r7, #20]
   2e80c:	3201      	adds	r2, #1
   2e80e:	7812      	ldrb	r2, [r2, #0]
   2e810:	0212      	lsls	r2, r2, #8
   2e812:	4313      	orrs	r3, r2
   2e814:	697a      	ldr	r2, [r7, #20]
   2e816:	7812      	ldrb	r2, [r2, #0]
   2e818:	4313      	orrs	r3, r2
   2e81a:	0f1b      	lsrs	r3, r3, #28
   2e81c:	071b      	lsls	r3, r3, #28
   2e81e:	687a      	ldr	r2, [r7, #4]
   2e820:	4313      	orrs	r3, r2
   2e822:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2e824:	687b      	ldr	r3, [r7, #4]
   2e826:	b2da      	uxtb	r2, r3
   2e828:	697b      	ldr	r3, [r7, #20]
   2e82a:	701a      	strb	r2, [r3, #0]
   2e82c:	697b      	ldr	r3, [r7, #20]
   2e82e:	3301      	adds	r3, #1
   2e830:	687a      	ldr	r2, [r7, #4]
   2e832:	b292      	uxth	r2, r2
   2e834:	0a12      	lsrs	r2, r2, #8
   2e836:	b292      	uxth	r2, r2
   2e838:	b2d2      	uxtb	r2, r2
   2e83a:	701a      	strb	r2, [r3, #0]
   2e83c:	697b      	ldr	r3, [r7, #20]
   2e83e:	3302      	adds	r3, #2
   2e840:	687a      	ldr	r2, [r7, #4]
   2e842:	0c12      	lsrs	r2, r2, #16
   2e844:	b2d2      	uxtb	r2, r2
   2e846:	701a      	strb	r2, [r3, #0]
   2e848:	697b      	ldr	r3, [r7, #20]
   2e84a:	3303      	adds	r3, #3
   2e84c:	687a      	ldr	r2, [r7, #4]
   2e84e:	0e12      	lsrs	r2, r2, #24
   2e850:	b2d2      	uxtb	r2, r2
   2e852:	701a      	strb	r2, [r3, #0]
			break;
   2e854:	e00b      	b.n	2e86e <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2e856:	231f      	movs	r3, #31
   2e858:	18fb      	adds	r3, r7, r3
   2e85a:	2202      	movs	r2, #2
   2e85c:	701a      	strb	r2, [r3, #0]
   2e85e:	e006      	b.n	2e86e <put_fat+0x222>
			if (res != FR_OK) break;
   2e860:	46c0      	nop			; (mov r8, r8)
   2e862:	e004      	b.n	2e86e <put_fat+0x222>
			if (res != FR_OK) break;
   2e864:	46c0      	nop			; (mov r8, r8)
   2e866:	e002      	b.n	2e86e <put_fat+0x222>
			if (res != FR_OK) break;
   2e868:	46c0      	nop			; (mov r8, r8)
   2e86a:	e000      	b.n	2e86e <put_fat+0x222>
			if (res != FR_OK) break;
   2e86c:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2e86e:	68fb      	ldr	r3, [r7, #12]
   2e870:	2201      	movs	r2, #1
   2e872:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2e874:	231f      	movs	r3, #31
   2e876:	18fb      	adds	r3, r7, r3
   2e878:	781b      	ldrb	r3, [r3, #0]
}
   2e87a:	0018      	movs	r0, r3
   2e87c:	46bd      	mov	sp, r7
   2e87e:	b009      	add	sp, #36	; 0x24
   2e880:	bd90      	pop	{r4, r7, pc}
   2e882:	46c0      	nop			; (mov r8, r8)
   2e884:	0002e249 	.word	0x0002e249

0002e888 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2e888:	b590      	push	{r4, r7, lr}
   2e88a:	b085      	sub	sp, #20
   2e88c:	af00      	add	r7, sp, #0
   2e88e:	6078      	str	r0, [r7, #4]
   2e890:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2e892:	683b      	ldr	r3, [r7, #0]
   2e894:	2b01      	cmp	r3, #1
   2e896:	d904      	bls.n	2e8a2 <remove_chain+0x1a>
   2e898:	687b      	ldr	r3, [r7, #4]
   2e89a:	699a      	ldr	r2, [r3, #24]
   2e89c:	683b      	ldr	r3, [r7, #0]
   2e89e:	429a      	cmp	r2, r3
   2e8a0:	d804      	bhi.n	2e8ac <remove_chain+0x24>
		res = FR_INT_ERR;
   2e8a2:	230f      	movs	r3, #15
   2e8a4:	18fb      	adds	r3, r7, r3
   2e8a6:	2202      	movs	r2, #2
   2e8a8:	701a      	strb	r2, [r3, #0]
   2e8aa:	e045      	b.n	2e938 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2e8ac:	230f      	movs	r3, #15
   2e8ae:	18fb      	adds	r3, r7, r3
   2e8b0:	2200      	movs	r2, #0
   2e8b2:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2e8b4:	e037      	b.n	2e926 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2e8b6:	683a      	ldr	r2, [r7, #0]
   2e8b8:	687b      	ldr	r3, [r7, #4]
   2e8ba:	0011      	movs	r1, r2
   2e8bc:	0018      	movs	r0, r3
   2e8be:	4b22      	ldr	r3, [pc, #136]	; (2e948 <remove_chain+0xc0>)
   2e8c0:	4798      	blx	r3
   2e8c2:	0003      	movs	r3, r0
   2e8c4:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2e8c6:	68bb      	ldr	r3, [r7, #8]
   2e8c8:	2b00      	cmp	r3, #0
   2e8ca:	d032      	beq.n	2e932 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2e8cc:	68bb      	ldr	r3, [r7, #8]
   2e8ce:	2b01      	cmp	r3, #1
   2e8d0:	d104      	bne.n	2e8dc <remove_chain+0x54>
   2e8d2:	230f      	movs	r3, #15
   2e8d4:	18fb      	adds	r3, r7, r3
   2e8d6:	2202      	movs	r2, #2
   2e8d8:	701a      	strb	r2, [r3, #0]
   2e8da:	e02d      	b.n	2e938 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2e8dc:	68bb      	ldr	r3, [r7, #8]
   2e8de:	3301      	adds	r3, #1
   2e8e0:	d104      	bne.n	2e8ec <remove_chain+0x64>
   2e8e2:	230f      	movs	r3, #15
   2e8e4:	18fb      	adds	r3, r7, r3
   2e8e6:	2201      	movs	r2, #1
   2e8e8:	701a      	strb	r2, [r3, #0]
   2e8ea:	e025      	b.n	2e938 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2e8ec:	230f      	movs	r3, #15
   2e8ee:	18fc      	adds	r4, r7, r3
   2e8f0:	6839      	ldr	r1, [r7, #0]
   2e8f2:	687b      	ldr	r3, [r7, #4]
   2e8f4:	2200      	movs	r2, #0
   2e8f6:	0018      	movs	r0, r3
   2e8f8:	4b14      	ldr	r3, [pc, #80]	; (2e94c <remove_chain+0xc4>)
   2e8fa:	4798      	blx	r3
   2e8fc:	0003      	movs	r3, r0
   2e8fe:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e900:	230f      	movs	r3, #15
   2e902:	18fb      	adds	r3, r7, r3
   2e904:	781b      	ldrb	r3, [r3, #0]
   2e906:	2b00      	cmp	r3, #0
   2e908:	d115      	bne.n	2e936 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2e90a:	687b      	ldr	r3, [r7, #4]
   2e90c:	691b      	ldr	r3, [r3, #16]
   2e90e:	3301      	adds	r3, #1
   2e910:	d007      	beq.n	2e922 <remove_chain+0x9a>
				fs->free_clust++;
   2e912:	687b      	ldr	r3, [r7, #4]
   2e914:	691b      	ldr	r3, [r3, #16]
   2e916:	1c5a      	adds	r2, r3, #1
   2e918:	687b      	ldr	r3, [r7, #4]
   2e91a:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2e91c:	687b      	ldr	r3, [r7, #4]
   2e91e:	2201      	movs	r2, #1
   2e920:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2e922:	68bb      	ldr	r3, [r7, #8]
   2e924:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2e926:	687b      	ldr	r3, [r7, #4]
   2e928:	699a      	ldr	r2, [r3, #24]
   2e92a:	683b      	ldr	r3, [r7, #0]
   2e92c:	429a      	cmp	r2, r3
   2e92e:	d8c2      	bhi.n	2e8b6 <remove_chain+0x2e>
   2e930:	e002      	b.n	2e938 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2e932:	46c0      	nop			; (mov r8, r8)
   2e934:	e000      	b.n	2e938 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2e936:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2e938:	230f      	movs	r3, #15
   2e93a:	18fb      	adds	r3, r7, r3
   2e93c:	781b      	ldrb	r3, [r3, #0]
}
   2e93e:	0018      	movs	r0, r3
   2e940:	46bd      	mov	sp, r7
   2e942:	b005      	add	sp, #20
   2e944:	bd90      	pop	{r4, r7, pc}
   2e946:	46c0      	nop			; (mov r8, r8)
   2e948:	0002e4e1 	.word	0x0002e4e1
   2e94c:	0002e64d 	.word	0x0002e64d

0002e950 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2e950:	b590      	push	{r4, r7, lr}
   2e952:	b087      	sub	sp, #28
   2e954:	af00      	add	r7, sp, #0
   2e956:	6078      	str	r0, [r7, #4]
   2e958:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2e95a:	683b      	ldr	r3, [r7, #0]
   2e95c:	2b00      	cmp	r3, #0
   2e95e:	d10d      	bne.n	2e97c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2e960:	687b      	ldr	r3, [r7, #4]
   2e962:	68db      	ldr	r3, [r3, #12]
   2e964:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2e966:	693b      	ldr	r3, [r7, #16]
   2e968:	2b00      	cmp	r3, #0
   2e96a:	d004      	beq.n	2e976 <create_chain+0x26>
   2e96c:	687b      	ldr	r3, [r7, #4]
   2e96e:	699a      	ldr	r2, [r3, #24]
   2e970:	693b      	ldr	r3, [r7, #16]
   2e972:	429a      	cmp	r2, r3
   2e974:	d818      	bhi.n	2e9a8 <create_chain+0x58>
   2e976:	2301      	movs	r3, #1
   2e978:	613b      	str	r3, [r7, #16]
   2e97a:	e015      	b.n	2e9a8 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2e97c:	683a      	ldr	r2, [r7, #0]
   2e97e:	687b      	ldr	r3, [r7, #4]
   2e980:	0011      	movs	r1, r2
   2e982:	0018      	movs	r0, r3
   2e984:	4b3e      	ldr	r3, [pc, #248]	; (2ea80 <create_chain+0x130>)
   2e986:	4798      	blx	r3
   2e988:	0003      	movs	r3, r0
   2e98a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2e98c:	68bb      	ldr	r3, [r7, #8]
   2e98e:	2b01      	cmp	r3, #1
   2e990:	d801      	bhi.n	2e996 <create_chain+0x46>
   2e992:	2301      	movs	r3, #1
   2e994:	e070      	b.n	2ea78 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2e996:	687b      	ldr	r3, [r7, #4]
   2e998:	699a      	ldr	r2, [r3, #24]
   2e99a:	68bb      	ldr	r3, [r7, #8]
   2e99c:	429a      	cmp	r2, r3
   2e99e:	d901      	bls.n	2e9a4 <create_chain+0x54>
   2e9a0:	68bb      	ldr	r3, [r7, #8]
   2e9a2:	e069      	b.n	2ea78 <create_chain+0x128>
		scl = clst;
   2e9a4:	683b      	ldr	r3, [r7, #0]
   2e9a6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2e9a8:	693b      	ldr	r3, [r7, #16]
   2e9aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2e9ac:	697b      	ldr	r3, [r7, #20]
   2e9ae:	3301      	adds	r3, #1
   2e9b0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2e9b2:	687b      	ldr	r3, [r7, #4]
   2e9b4:	699a      	ldr	r2, [r3, #24]
   2e9b6:	697b      	ldr	r3, [r7, #20]
   2e9b8:	429a      	cmp	r2, r3
   2e9ba:	d807      	bhi.n	2e9cc <create_chain+0x7c>
			ncl = 2;
   2e9bc:	2302      	movs	r3, #2
   2e9be:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2e9c0:	697a      	ldr	r2, [r7, #20]
   2e9c2:	693b      	ldr	r3, [r7, #16]
   2e9c4:	429a      	cmp	r2, r3
   2e9c6:	d901      	bls.n	2e9cc <create_chain+0x7c>
   2e9c8:	2300      	movs	r3, #0
   2e9ca:	e055      	b.n	2ea78 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2e9cc:	697a      	ldr	r2, [r7, #20]
   2e9ce:	687b      	ldr	r3, [r7, #4]
   2e9d0:	0011      	movs	r1, r2
   2e9d2:	0018      	movs	r0, r3
   2e9d4:	4b2a      	ldr	r3, [pc, #168]	; (2ea80 <create_chain+0x130>)
   2e9d6:	4798      	blx	r3
   2e9d8:	0003      	movs	r3, r0
   2e9da:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2e9dc:	68bb      	ldr	r3, [r7, #8]
   2e9de:	2b00      	cmp	r3, #0
   2e9e0:	d00d      	beq.n	2e9fe <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2e9e2:	68bb      	ldr	r3, [r7, #8]
   2e9e4:	3301      	adds	r3, #1
   2e9e6:	d002      	beq.n	2e9ee <create_chain+0x9e>
   2e9e8:	68bb      	ldr	r3, [r7, #8]
   2e9ea:	2b01      	cmp	r3, #1
   2e9ec:	d101      	bne.n	2e9f2 <create_chain+0xa2>
			return cs;
   2e9ee:	68bb      	ldr	r3, [r7, #8]
   2e9f0:	e042      	b.n	2ea78 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2e9f2:	697a      	ldr	r2, [r7, #20]
   2e9f4:	693b      	ldr	r3, [r7, #16]
   2e9f6:	429a      	cmp	r2, r3
   2e9f8:	d1d8      	bne.n	2e9ac <create_chain+0x5c>
   2e9fa:	2300      	movs	r3, #0
   2e9fc:	e03c      	b.n	2ea78 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2e9fe:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2ea00:	230f      	movs	r3, #15
   2ea02:	18fc      	adds	r4, r7, r3
   2ea04:	4a1f      	ldr	r2, [pc, #124]	; (2ea84 <create_chain+0x134>)
   2ea06:	6979      	ldr	r1, [r7, #20]
   2ea08:	687b      	ldr	r3, [r7, #4]
   2ea0a:	0018      	movs	r0, r3
   2ea0c:	4b1e      	ldr	r3, [pc, #120]	; (2ea88 <create_chain+0x138>)
   2ea0e:	4798      	blx	r3
   2ea10:	0003      	movs	r3, r0
   2ea12:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2ea14:	230f      	movs	r3, #15
   2ea16:	18fb      	adds	r3, r7, r3
   2ea18:	781b      	ldrb	r3, [r3, #0]
   2ea1a:	2b00      	cmp	r3, #0
   2ea1c:	d10c      	bne.n	2ea38 <create_chain+0xe8>
   2ea1e:	683b      	ldr	r3, [r7, #0]
   2ea20:	2b00      	cmp	r3, #0
   2ea22:	d009      	beq.n	2ea38 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2ea24:	230f      	movs	r3, #15
   2ea26:	18fc      	adds	r4, r7, r3
   2ea28:	697a      	ldr	r2, [r7, #20]
   2ea2a:	6839      	ldr	r1, [r7, #0]
   2ea2c:	687b      	ldr	r3, [r7, #4]
   2ea2e:	0018      	movs	r0, r3
   2ea30:	4b15      	ldr	r3, [pc, #84]	; (2ea88 <create_chain+0x138>)
   2ea32:	4798      	blx	r3
   2ea34:	0003      	movs	r3, r0
   2ea36:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2ea38:	230f      	movs	r3, #15
   2ea3a:	18fb      	adds	r3, r7, r3
   2ea3c:	781b      	ldrb	r3, [r3, #0]
   2ea3e:	2b00      	cmp	r3, #0
   2ea40:	d10f      	bne.n	2ea62 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2ea42:	687b      	ldr	r3, [r7, #4]
   2ea44:	697a      	ldr	r2, [r7, #20]
   2ea46:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2ea48:	687b      	ldr	r3, [r7, #4]
   2ea4a:	691b      	ldr	r3, [r3, #16]
   2ea4c:	3301      	adds	r3, #1
   2ea4e:	d012      	beq.n	2ea76 <create_chain+0x126>
			fs->free_clust--;
   2ea50:	687b      	ldr	r3, [r7, #4]
   2ea52:	691b      	ldr	r3, [r3, #16]
   2ea54:	1e5a      	subs	r2, r3, #1
   2ea56:	687b      	ldr	r3, [r7, #4]
   2ea58:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2ea5a:	687b      	ldr	r3, [r7, #4]
   2ea5c:	2201      	movs	r2, #1
   2ea5e:	715a      	strb	r2, [r3, #5]
   2ea60:	e009      	b.n	2ea76 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2ea62:	230f      	movs	r3, #15
   2ea64:	18fb      	adds	r3, r7, r3
   2ea66:	781b      	ldrb	r3, [r3, #0]
   2ea68:	2b01      	cmp	r3, #1
   2ea6a:	d102      	bne.n	2ea72 <create_chain+0x122>
   2ea6c:	2301      	movs	r3, #1
   2ea6e:	425b      	negs	r3, r3
   2ea70:	e000      	b.n	2ea74 <create_chain+0x124>
   2ea72:	2301      	movs	r3, #1
   2ea74:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2ea76:	697b      	ldr	r3, [r7, #20]
}
   2ea78:	0018      	movs	r0, r3
   2ea7a:	46bd      	mov	sp, r7
   2ea7c:	b007      	add	sp, #28
   2ea7e:	bd90      	pop	{r4, r7, pc}
   2ea80:	0002e4e1 	.word	0x0002e4e1
   2ea84:	0fffffff 	.word	0x0fffffff
   2ea88:	0002e64d 	.word	0x0002e64d

0002ea8c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2ea8c:	b580      	push	{r7, lr}
   2ea8e:	b084      	sub	sp, #16
   2ea90:	af00      	add	r7, sp, #0
   2ea92:	6078      	str	r0, [r7, #4]
   2ea94:	000a      	movs	r2, r1
   2ea96:	1cbb      	adds	r3, r7, #2
   2ea98:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2ea9a:	687b      	ldr	r3, [r7, #4]
   2ea9c:	1cba      	adds	r2, r7, #2
   2ea9e:	8812      	ldrh	r2, [r2, #0]
   2eaa0:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2eaa2:	687b      	ldr	r3, [r7, #4]
   2eaa4:	689b      	ldr	r3, [r3, #8]
   2eaa6:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2eaa8:	68fb      	ldr	r3, [r7, #12]
   2eaaa:	2b01      	cmp	r3, #1
   2eaac:	d005      	beq.n	2eaba <dir_sdi+0x2e>
   2eaae:	687b      	ldr	r3, [r7, #4]
   2eab0:	681b      	ldr	r3, [r3, #0]
   2eab2:	699a      	ldr	r2, [r3, #24]
   2eab4:	68fb      	ldr	r3, [r7, #12]
   2eab6:	429a      	cmp	r2, r3
   2eab8:	d801      	bhi.n	2eabe <dir_sdi+0x32>
		return FR_INT_ERR;
   2eaba:	2302      	movs	r3, #2
   2eabc:	e075      	b.n	2ebaa <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2eabe:	68fb      	ldr	r3, [r7, #12]
   2eac0:	2b00      	cmp	r3, #0
   2eac2:	d108      	bne.n	2ead6 <dir_sdi+0x4a>
   2eac4:	687b      	ldr	r3, [r7, #4]
   2eac6:	681b      	ldr	r3, [r3, #0]
   2eac8:	781b      	ldrb	r3, [r3, #0]
   2eaca:	2b03      	cmp	r3, #3
   2eacc:	d103      	bne.n	2ead6 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2eace:	687b      	ldr	r3, [r7, #4]
   2ead0:	681b      	ldr	r3, [r3, #0]
   2ead2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ead4:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2ead6:	68fb      	ldr	r3, [r7, #12]
   2ead8:	2b00      	cmp	r3, #0
   2eada:	d116      	bne.n	2eb0a <dir_sdi+0x7e>
		dj->clust = clst;
   2eadc:	687b      	ldr	r3, [r7, #4]
   2eade:	68fa      	ldr	r2, [r7, #12]
   2eae0:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2eae2:	687b      	ldr	r3, [r7, #4]
   2eae4:	681b      	ldr	r3, [r3, #0]
   2eae6:	891b      	ldrh	r3, [r3, #8]
   2eae8:	1cba      	adds	r2, r7, #2
   2eaea:	8812      	ldrh	r2, [r2, #0]
   2eaec:	429a      	cmp	r2, r3
   2eaee:	d301      	bcc.n	2eaf4 <dir_sdi+0x68>
			return FR_INT_ERR;
   2eaf0:	2302      	movs	r3, #2
   2eaf2:	e05a      	b.n	2ebaa <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2eaf4:	687b      	ldr	r3, [r7, #4]
   2eaf6:	681b      	ldr	r3, [r3, #0]
   2eaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2eafa:	1cba      	adds	r2, r7, #2
   2eafc:	8812      	ldrh	r2, [r2, #0]
   2eafe:	0912      	lsrs	r2, r2, #4
   2eb00:	b292      	uxth	r2, r2
   2eb02:	189a      	adds	r2, r3, r2
   2eb04:	687b      	ldr	r3, [r7, #4]
   2eb06:	611a      	str	r2, [r3, #16]
   2eb08:	e042      	b.n	2eb90 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2eb0a:	687b      	ldr	r3, [r7, #4]
   2eb0c:	681b      	ldr	r3, [r3, #0]
   2eb0e:	789b      	ldrb	r3, [r3, #2]
   2eb10:	b29a      	uxth	r2, r3
   2eb12:	230a      	movs	r3, #10
   2eb14:	18fb      	adds	r3, r7, r3
   2eb16:	0112      	lsls	r2, r2, #4
   2eb18:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2eb1a:	e020      	b.n	2eb5e <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2eb1c:	687b      	ldr	r3, [r7, #4]
   2eb1e:	681b      	ldr	r3, [r3, #0]
   2eb20:	68fa      	ldr	r2, [r7, #12]
   2eb22:	0011      	movs	r1, r2
   2eb24:	0018      	movs	r0, r3
   2eb26:	4b23      	ldr	r3, [pc, #140]	; (2ebb4 <dir_sdi+0x128>)
   2eb28:	4798      	blx	r3
   2eb2a:	0003      	movs	r3, r0
   2eb2c:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2eb2e:	68fb      	ldr	r3, [r7, #12]
   2eb30:	3301      	adds	r3, #1
   2eb32:	d101      	bne.n	2eb38 <dir_sdi+0xac>
   2eb34:	2301      	movs	r3, #1
   2eb36:	e038      	b.n	2ebaa <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2eb38:	68fb      	ldr	r3, [r7, #12]
   2eb3a:	2b01      	cmp	r3, #1
   2eb3c:	d905      	bls.n	2eb4a <dir_sdi+0xbe>
   2eb3e:	687b      	ldr	r3, [r7, #4]
   2eb40:	681b      	ldr	r3, [r3, #0]
   2eb42:	699a      	ldr	r2, [r3, #24]
   2eb44:	68fb      	ldr	r3, [r7, #12]
   2eb46:	429a      	cmp	r2, r3
   2eb48:	d801      	bhi.n	2eb4e <dir_sdi+0xc2>
				return FR_INT_ERR;
   2eb4a:	2302      	movs	r3, #2
   2eb4c:	e02d      	b.n	2ebaa <dir_sdi+0x11e>
			idx -= ic;
   2eb4e:	1cbb      	adds	r3, r7, #2
   2eb50:	1cb9      	adds	r1, r7, #2
   2eb52:	220a      	movs	r2, #10
   2eb54:	18ba      	adds	r2, r7, r2
   2eb56:	8809      	ldrh	r1, [r1, #0]
   2eb58:	8812      	ldrh	r2, [r2, #0]
   2eb5a:	1a8a      	subs	r2, r1, r2
   2eb5c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2eb5e:	1cba      	adds	r2, r7, #2
   2eb60:	230a      	movs	r3, #10
   2eb62:	18fb      	adds	r3, r7, r3
   2eb64:	8812      	ldrh	r2, [r2, #0]
   2eb66:	881b      	ldrh	r3, [r3, #0]
   2eb68:	429a      	cmp	r2, r3
   2eb6a:	d2d7      	bcs.n	2eb1c <dir_sdi+0x90>
		}
		dj->clust = clst;
   2eb6c:	687b      	ldr	r3, [r7, #4]
   2eb6e:	68fa      	ldr	r2, [r7, #12]
   2eb70:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2eb72:	687b      	ldr	r3, [r7, #4]
   2eb74:	681b      	ldr	r3, [r3, #0]
   2eb76:	68fa      	ldr	r2, [r7, #12]
   2eb78:	0011      	movs	r1, r2
   2eb7a:	0018      	movs	r0, r3
   2eb7c:	4b0e      	ldr	r3, [pc, #56]	; (2ebb8 <dir_sdi+0x12c>)
   2eb7e:	4798      	blx	r3
   2eb80:	0002      	movs	r2, r0
   2eb82:	1cbb      	adds	r3, r7, #2
   2eb84:	881b      	ldrh	r3, [r3, #0]
   2eb86:	091b      	lsrs	r3, r3, #4
   2eb88:	b29b      	uxth	r3, r3
   2eb8a:	18d2      	adds	r2, r2, r3
   2eb8c:	687b      	ldr	r3, [r7, #4]
   2eb8e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2eb90:	687b      	ldr	r3, [r7, #4]
   2eb92:	681b      	ldr	r3, [r3, #0]
   2eb94:	3330      	adds	r3, #48	; 0x30
   2eb96:	001a      	movs	r2, r3
   2eb98:	1cbb      	adds	r3, r7, #2
   2eb9a:	881b      	ldrh	r3, [r3, #0]
   2eb9c:	210f      	movs	r1, #15
   2eb9e:	400b      	ands	r3, r1
   2eba0:	015b      	lsls	r3, r3, #5
   2eba2:	18d2      	adds	r2, r2, r3
   2eba4:	687b      	ldr	r3, [r7, #4]
   2eba6:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2eba8:	2300      	movs	r3, #0
}
   2ebaa:	0018      	movs	r0, r3
   2ebac:	46bd      	mov	sp, r7
   2ebae:	b004      	add	sp, #16
   2ebb0:	bd80      	pop	{r7, pc}
   2ebb2:	46c0      	nop			; (mov r8, r8)
   2ebb4:	0002e4e1 	.word	0x0002e4e1
   2ebb8:	0002e4a9 	.word	0x0002e4a9

0002ebbc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2ebbc:	b590      	push	{r4, r7, lr}
   2ebbe:	b085      	sub	sp, #20
   2ebc0:	af00      	add	r7, sp, #0
   2ebc2:	6078      	str	r0, [r7, #4]
   2ebc4:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2ebc6:	687b      	ldr	r3, [r7, #4]
   2ebc8:	88da      	ldrh	r2, [r3, #6]
   2ebca:	2308      	movs	r3, #8
   2ebcc:	18fb      	adds	r3, r7, r3
   2ebce:	3201      	adds	r2, #1
   2ebd0:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2ebd2:	2308      	movs	r3, #8
   2ebd4:	18fb      	adds	r3, r7, r3
   2ebd6:	881b      	ldrh	r3, [r3, #0]
   2ebd8:	2b00      	cmp	r3, #0
   2ebda:	d003      	beq.n	2ebe4 <dir_next+0x28>
   2ebdc:	687b      	ldr	r3, [r7, #4]
   2ebde:	691b      	ldr	r3, [r3, #16]
   2ebe0:	2b00      	cmp	r3, #0
   2ebe2:	d101      	bne.n	2ebe8 <dir_next+0x2c>
		return FR_NO_FILE;
   2ebe4:	2304      	movs	r3, #4
   2ebe6:	e0d2      	b.n	2ed8e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2ebe8:	2308      	movs	r3, #8
   2ebea:	18fb      	adds	r3, r7, r3
   2ebec:	881b      	ldrh	r3, [r3, #0]
   2ebee:	220f      	movs	r2, #15
   2ebf0:	4013      	ands	r3, r2
   2ebf2:	b29b      	uxth	r3, r3
   2ebf4:	2b00      	cmp	r3, #0
   2ebf6:	d000      	beq.n	2ebfa <dir_next+0x3e>
   2ebf8:	e0b6      	b.n	2ed68 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2ebfa:	687b      	ldr	r3, [r7, #4]
   2ebfc:	691b      	ldr	r3, [r3, #16]
   2ebfe:	1c5a      	adds	r2, r3, #1
   2ec00:	687b      	ldr	r3, [r7, #4]
   2ec02:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2ec04:	687b      	ldr	r3, [r7, #4]
   2ec06:	68db      	ldr	r3, [r3, #12]
   2ec08:	2b00      	cmp	r3, #0
   2ec0a:	d10a      	bne.n	2ec22 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2ec0c:	687b      	ldr	r3, [r7, #4]
   2ec0e:	681b      	ldr	r3, [r3, #0]
   2ec10:	891b      	ldrh	r3, [r3, #8]
   2ec12:	2208      	movs	r2, #8
   2ec14:	18ba      	adds	r2, r7, r2
   2ec16:	8812      	ldrh	r2, [r2, #0]
   2ec18:	429a      	cmp	r2, r3
   2ec1a:	d200      	bcs.n	2ec1e <dir_next+0x62>
   2ec1c:	e0a4      	b.n	2ed68 <dir_next+0x1ac>
				return FR_NO_FILE;
   2ec1e:	2304      	movs	r3, #4
   2ec20:	e0b5      	b.n	2ed8e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2ec22:	2308      	movs	r3, #8
   2ec24:	18fb      	adds	r3, r7, r3
   2ec26:	881b      	ldrh	r3, [r3, #0]
   2ec28:	091b      	lsrs	r3, r3, #4
   2ec2a:	b29b      	uxth	r3, r3
   2ec2c:	001a      	movs	r2, r3
   2ec2e:	687b      	ldr	r3, [r7, #4]
   2ec30:	681b      	ldr	r3, [r3, #0]
   2ec32:	789b      	ldrb	r3, [r3, #2]
   2ec34:	3b01      	subs	r3, #1
   2ec36:	4013      	ands	r3, r2
   2ec38:	d000      	beq.n	2ec3c <dir_next+0x80>
   2ec3a:	e095      	b.n	2ed68 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2ec3c:	687b      	ldr	r3, [r7, #4]
   2ec3e:	681a      	ldr	r2, [r3, #0]
   2ec40:	687b      	ldr	r3, [r7, #4]
   2ec42:	68db      	ldr	r3, [r3, #12]
   2ec44:	0019      	movs	r1, r3
   2ec46:	0010      	movs	r0, r2
   2ec48:	4b53      	ldr	r3, [pc, #332]	; (2ed98 <dir_next+0x1dc>)
   2ec4a:	4798      	blx	r3
   2ec4c:	0003      	movs	r3, r0
   2ec4e:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2ec50:	68fb      	ldr	r3, [r7, #12]
   2ec52:	2b01      	cmp	r3, #1
   2ec54:	d801      	bhi.n	2ec5a <dir_next+0x9e>
   2ec56:	2302      	movs	r3, #2
   2ec58:	e099      	b.n	2ed8e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2ec5a:	68fb      	ldr	r3, [r7, #12]
   2ec5c:	3301      	adds	r3, #1
   2ec5e:	d101      	bne.n	2ec64 <dir_next+0xa8>
   2ec60:	2301      	movs	r3, #1
   2ec62:	e094      	b.n	2ed8e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2ec64:	687b      	ldr	r3, [r7, #4]
   2ec66:	681b      	ldr	r3, [r3, #0]
   2ec68:	699a      	ldr	r2, [r3, #24]
   2ec6a:	68fb      	ldr	r3, [r7, #12]
   2ec6c:	429a      	cmp	r2, r3
   2ec6e:	d900      	bls.n	2ec72 <dir_next+0xb6>
   2ec70:	e06d      	b.n	2ed4e <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2ec72:	683b      	ldr	r3, [r7, #0]
   2ec74:	2b00      	cmp	r3, #0
   2ec76:	d101      	bne.n	2ec7c <dir_next+0xc0>
   2ec78:	2304      	movs	r3, #4
   2ec7a:	e088      	b.n	2ed8e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2ec7c:	687b      	ldr	r3, [r7, #4]
   2ec7e:	681a      	ldr	r2, [r3, #0]
   2ec80:	687b      	ldr	r3, [r7, #4]
   2ec82:	68db      	ldr	r3, [r3, #12]
   2ec84:	0019      	movs	r1, r3
   2ec86:	0010      	movs	r0, r2
   2ec88:	4b44      	ldr	r3, [pc, #272]	; (2ed9c <dir_next+0x1e0>)
   2ec8a:	4798      	blx	r3
   2ec8c:	0003      	movs	r3, r0
   2ec8e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2ec90:	68fb      	ldr	r3, [r7, #12]
   2ec92:	2b00      	cmp	r3, #0
   2ec94:	d101      	bne.n	2ec9a <dir_next+0xde>
   2ec96:	2307      	movs	r3, #7
   2ec98:	e079      	b.n	2ed8e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2ec9a:	68fb      	ldr	r3, [r7, #12]
   2ec9c:	2b01      	cmp	r3, #1
   2ec9e:	d101      	bne.n	2eca4 <dir_next+0xe8>
   2eca0:	2302      	movs	r3, #2
   2eca2:	e074      	b.n	2ed8e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2eca4:	68fb      	ldr	r3, [r7, #12]
   2eca6:	3301      	adds	r3, #1
   2eca8:	d101      	bne.n	2ecae <dir_next+0xf2>
   2ecaa:	2301      	movs	r3, #1
   2ecac:	e06f      	b.n	2ed8e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2ecae:	687b      	ldr	r3, [r7, #4]
   2ecb0:	681b      	ldr	r3, [r3, #0]
   2ecb2:	2100      	movs	r1, #0
   2ecb4:	0018      	movs	r0, r3
   2ecb6:	4b3a      	ldr	r3, [pc, #232]	; (2eda0 <dir_next+0x1e4>)
   2ecb8:	4798      	blx	r3
   2ecba:	1e03      	subs	r3, r0, #0
   2ecbc:	d001      	beq.n	2ecc2 <dir_next+0x106>
   2ecbe:	2301      	movs	r3, #1
   2ecc0:	e065      	b.n	2ed8e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2ecc2:	687b      	ldr	r3, [r7, #4]
   2ecc4:	681b      	ldr	r3, [r3, #0]
   2ecc6:	3330      	adds	r3, #48	; 0x30
   2ecc8:	0018      	movs	r0, r3
   2ecca:	2380      	movs	r3, #128	; 0x80
   2eccc:	009b      	lsls	r3, r3, #2
   2ecce:	001a      	movs	r2, r3
   2ecd0:	2100      	movs	r1, #0
   2ecd2:	4b34      	ldr	r3, [pc, #208]	; (2eda4 <dir_next+0x1e8>)
   2ecd4:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2ecd6:	687b      	ldr	r3, [r7, #4]
   2ecd8:	681c      	ldr	r4, [r3, #0]
   2ecda:	687b      	ldr	r3, [r7, #4]
   2ecdc:	681b      	ldr	r3, [r3, #0]
   2ecde:	68fa      	ldr	r2, [r7, #12]
   2ece0:	0011      	movs	r1, r2
   2ece2:	0018      	movs	r0, r3
   2ece4:	4b30      	ldr	r3, [pc, #192]	; (2eda8 <dir_next+0x1ec>)
   2ece6:	4798      	blx	r3
   2ece8:	0003      	movs	r3, r0
   2ecea:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2ecec:	230b      	movs	r3, #11
   2ecee:	18fb      	adds	r3, r7, r3
   2ecf0:	2200      	movs	r2, #0
   2ecf2:	701a      	strb	r2, [r3, #0]
   2ecf4:	e019      	b.n	2ed2a <dir_next+0x16e>
						dj->fs->wflag = 1;
   2ecf6:	687b      	ldr	r3, [r7, #4]
   2ecf8:	681b      	ldr	r3, [r3, #0]
   2ecfa:	2201      	movs	r2, #1
   2ecfc:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2ecfe:	687b      	ldr	r3, [r7, #4]
   2ed00:	681b      	ldr	r3, [r3, #0]
   2ed02:	2100      	movs	r1, #0
   2ed04:	0018      	movs	r0, r3
   2ed06:	4b26      	ldr	r3, [pc, #152]	; (2eda0 <dir_next+0x1e4>)
   2ed08:	4798      	blx	r3
   2ed0a:	1e03      	subs	r3, r0, #0
   2ed0c:	d001      	beq.n	2ed12 <dir_next+0x156>
   2ed0e:	2301      	movs	r3, #1
   2ed10:	e03d      	b.n	2ed8e <dir_next+0x1d2>
						dj->fs->winsect++;
   2ed12:	687b      	ldr	r3, [r7, #4]
   2ed14:	681b      	ldr	r3, [r3, #0]
   2ed16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ed18:	3201      	adds	r2, #1
   2ed1a:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2ed1c:	230b      	movs	r3, #11
   2ed1e:	18fb      	adds	r3, r7, r3
   2ed20:	781a      	ldrb	r2, [r3, #0]
   2ed22:	230b      	movs	r3, #11
   2ed24:	18fb      	adds	r3, r7, r3
   2ed26:	3201      	adds	r2, #1
   2ed28:	701a      	strb	r2, [r3, #0]
   2ed2a:	687b      	ldr	r3, [r7, #4]
   2ed2c:	681b      	ldr	r3, [r3, #0]
   2ed2e:	789b      	ldrb	r3, [r3, #2]
   2ed30:	220b      	movs	r2, #11
   2ed32:	18ba      	adds	r2, r7, r2
   2ed34:	7812      	ldrb	r2, [r2, #0]
   2ed36:	429a      	cmp	r2, r3
   2ed38:	d3dd      	bcc.n	2ecf6 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2ed3a:	687b      	ldr	r3, [r7, #4]
   2ed3c:	681b      	ldr	r3, [r3, #0]
   2ed3e:	687a      	ldr	r2, [r7, #4]
   2ed40:	6812      	ldr	r2, [r2, #0]
   2ed42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2ed44:	220b      	movs	r2, #11
   2ed46:	18ba      	adds	r2, r7, r2
   2ed48:	7812      	ldrb	r2, [r2, #0]
   2ed4a:	1a8a      	subs	r2, r1, r2
   2ed4c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2ed4e:	687b      	ldr	r3, [r7, #4]
   2ed50:	68fa      	ldr	r2, [r7, #12]
   2ed52:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2ed54:	687b      	ldr	r3, [r7, #4]
   2ed56:	681b      	ldr	r3, [r3, #0]
   2ed58:	68fa      	ldr	r2, [r7, #12]
   2ed5a:	0011      	movs	r1, r2
   2ed5c:	0018      	movs	r0, r3
   2ed5e:	4b12      	ldr	r3, [pc, #72]	; (2eda8 <dir_next+0x1ec>)
   2ed60:	4798      	blx	r3
   2ed62:	0002      	movs	r2, r0
   2ed64:	687b      	ldr	r3, [r7, #4]
   2ed66:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2ed68:	687b      	ldr	r3, [r7, #4]
   2ed6a:	2208      	movs	r2, #8
   2ed6c:	18ba      	adds	r2, r7, r2
   2ed6e:	8812      	ldrh	r2, [r2, #0]
   2ed70:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2ed72:	687b      	ldr	r3, [r7, #4]
   2ed74:	681b      	ldr	r3, [r3, #0]
   2ed76:	3330      	adds	r3, #48	; 0x30
   2ed78:	001a      	movs	r2, r3
   2ed7a:	2308      	movs	r3, #8
   2ed7c:	18fb      	adds	r3, r7, r3
   2ed7e:	881b      	ldrh	r3, [r3, #0]
   2ed80:	210f      	movs	r1, #15
   2ed82:	400b      	ands	r3, r1
   2ed84:	015b      	lsls	r3, r3, #5
   2ed86:	18d2      	adds	r2, r2, r3
   2ed88:	687b      	ldr	r3, [r7, #4]
   2ed8a:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2ed8c:	2300      	movs	r3, #0
}
   2ed8e:	0018      	movs	r0, r3
   2ed90:	46bd      	mov	sp, r7
   2ed92:	b005      	add	sp, #20
   2ed94:	bd90      	pop	{r4, r7, pc}
   2ed96:	46c0      	nop			; (mov r8, r8)
   2ed98:	0002e4e1 	.word	0x0002e4e1
   2ed9c:	0002e951 	.word	0x0002e951
   2eda0:	0002e249 	.word	0x0002e249
   2eda4:	0002e19d 	.word	0x0002e19d
   2eda8:	0002e4a9 	.word	0x0002e4a9

0002edac <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2edac:	b590      	push	{r4, r7, lr}
   2edae:	b087      	sub	sp, #28
   2edb0:	af00      	add	r7, sp, #0
   2edb2:	6078      	str	r0, [r7, #4]
   2edb4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2edb6:	683b      	ldr	r3, [r7, #0]
   2edb8:	781b      	ldrb	r3, [r3, #0]
   2edba:	001a      	movs	r2, r3
   2edbc:	2340      	movs	r3, #64	; 0x40
   2edbe:	439a      	bics	r2, r3
   2edc0:	0013      	movs	r3, r2
   2edc2:	1e5a      	subs	r2, r3, #1
   2edc4:	0013      	movs	r3, r2
   2edc6:	005b      	lsls	r3, r3, #1
   2edc8:	189b      	adds	r3, r3, r2
   2edca:	009b      	lsls	r3, r3, #2
   2edcc:	189b      	adds	r3, r3, r2
   2edce:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2edd0:	2300      	movs	r3, #0
   2edd2:	613b      	str	r3, [r7, #16]
   2edd4:	230e      	movs	r3, #14
   2edd6:	18fb      	adds	r3, r7, r3
   2edd8:	2201      	movs	r2, #1
   2edda:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2eddc:	4a31      	ldr	r2, [pc, #196]	; (2eea4 <cmp_lfn+0xf8>)
   2edde:	693b      	ldr	r3, [r7, #16]
   2ede0:	18d3      	adds	r3, r2, r3
   2ede2:	781b      	ldrb	r3, [r3, #0]
   2ede4:	3301      	adds	r3, #1
   2ede6:	683a      	ldr	r2, [r7, #0]
   2ede8:	18d3      	adds	r3, r2, r3
   2edea:	781b      	ldrb	r3, [r3, #0]
   2edec:	021b      	lsls	r3, r3, #8
   2edee:	b21a      	sxth	r2, r3
   2edf0:	492c      	ldr	r1, [pc, #176]	; (2eea4 <cmp_lfn+0xf8>)
   2edf2:	693b      	ldr	r3, [r7, #16]
   2edf4:	18cb      	adds	r3, r1, r3
   2edf6:	781b      	ldrb	r3, [r3, #0]
   2edf8:	0019      	movs	r1, r3
   2edfa:	683b      	ldr	r3, [r7, #0]
   2edfc:	185b      	adds	r3, r3, r1
   2edfe:	781b      	ldrb	r3, [r3, #0]
   2ee00:	b21b      	sxth	r3, r3
   2ee02:	4313      	orrs	r3, r2
   2ee04:	b21a      	sxth	r2, r3
   2ee06:	230c      	movs	r3, #12
   2ee08:	18fb      	adds	r3, r7, r3
   2ee0a:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2ee0c:	230e      	movs	r3, #14
   2ee0e:	18fb      	adds	r3, r7, r3
   2ee10:	881b      	ldrh	r3, [r3, #0]
   2ee12:	2b00      	cmp	r3, #0
   2ee14:	d01f      	beq.n	2ee56 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2ee16:	230e      	movs	r3, #14
   2ee18:	18fc      	adds	r4, r7, r3
   2ee1a:	230c      	movs	r3, #12
   2ee1c:	18fb      	adds	r3, r7, r3
   2ee1e:	881b      	ldrh	r3, [r3, #0]
   2ee20:	0018      	movs	r0, r3
   2ee22:	4b21      	ldr	r3, [pc, #132]	; (2eea8 <cmp_lfn+0xfc>)
   2ee24:	4798      	blx	r3
   2ee26:	0003      	movs	r3, r0
   2ee28:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2ee2a:	697b      	ldr	r3, [r7, #20]
   2ee2c:	2bfe      	cmp	r3, #254	; 0xfe
   2ee2e:	d810      	bhi.n	2ee52 <cmp_lfn+0xa6>
   2ee30:	697b      	ldr	r3, [r7, #20]
   2ee32:	1c5a      	adds	r2, r3, #1
   2ee34:	617a      	str	r2, [r7, #20]
   2ee36:	005b      	lsls	r3, r3, #1
   2ee38:	687a      	ldr	r2, [r7, #4]
   2ee3a:	18d3      	adds	r3, r2, r3
   2ee3c:	881b      	ldrh	r3, [r3, #0]
   2ee3e:	0018      	movs	r0, r3
   2ee40:	4b19      	ldr	r3, [pc, #100]	; (2eea8 <cmp_lfn+0xfc>)
   2ee42:	4798      	blx	r3
   2ee44:	0003      	movs	r3, r0
   2ee46:	001a      	movs	r2, r3
   2ee48:	230e      	movs	r3, #14
   2ee4a:	18fb      	adds	r3, r7, r3
   2ee4c:	881b      	ldrh	r3, [r3, #0]
   2ee4e:	4293      	cmp	r3, r2
   2ee50:	d009      	beq.n	2ee66 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2ee52:	2300      	movs	r3, #0
   2ee54:	e022      	b.n	2ee9c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2ee56:	230c      	movs	r3, #12
   2ee58:	18fb      	adds	r3, r7, r3
   2ee5a:	881b      	ldrh	r3, [r3, #0]
   2ee5c:	4a13      	ldr	r2, [pc, #76]	; (2eeac <cmp_lfn+0x100>)
   2ee5e:	4293      	cmp	r3, r2
   2ee60:	d001      	beq.n	2ee66 <cmp_lfn+0xba>
   2ee62:	2300      	movs	r3, #0
   2ee64:	e01a      	b.n	2ee9c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2ee66:	693b      	ldr	r3, [r7, #16]
   2ee68:	3301      	adds	r3, #1
   2ee6a:	613b      	str	r3, [r7, #16]
   2ee6c:	693b      	ldr	r3, [r7, #16]
   2ee6e:	2b0c      	cmp	r3, #12
   2ee70:	d9b4      	bls.n	2eddc <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2ee72:	683b      	ldr	r3, [r7, #0]
   2ee74:	781b      	ldrb	r3, [r3, #0]
   2ee76:	001a      	movs	r2, r3
   2ee78:	2340      	movs	r3, #64	; 0x40
   2ee7a:	4013      	ands	r3, r2
   2ee7c:	d00d      	beq.n	2ee9a <cmp_lfn+0xee>
   2ee7e:	230e      	movs	r3, #14
   2ee80:	18fb      	adds	r3, r7, r3
   2ee82:	881b      	ldrh	r3, [r3, #0]
   2ee84:	2b00      	cmp	r3, #0
   2ee86:	d008      	beq.n	2ee9a <cmp_lfn+0xee>
   2ee88:	697b      	ldr	r3, [r7, #20]
   2ee8a:	005b      	lsls	r3, r3, #1
   2ee8c:	687a      	ldr	r2, [r7, #4]
   2ee8e:	18d3      	adds	r3, r2, r3
   2ee90:	881b      	ldrh	r3, [r3, #0]
   2ee92:	2b00      	cmp	r3, #0
   2ee94:	d001      	beq.n	2ee9a <cmp_lfn+0xee>
		return 0;
   2ee96:	2300      	movs	r3, #0
   2ee98:	e000      	b.n	2ee9c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2ee9a:	2301      	movs	r3, #1
}
   2ee9c:	0018      	movs	r0, r3
   2ee9e:	46bd      	mov	sp, r7
   2eea0:	b007      	add	sp, #28
   2eea2:	bd90      	pop	{r4, r7, pc}
   2eea4:	0003c6f0 	.word	0x0003c6f0
   2eea8:	00030e59 	.word	0x00030e59
   2eeac:	0000ffff 	.word	0x0000ffff

0002eeb0 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2eeb0:	b580      	push	{r7, lr}
   2eeb2:	b088      	sub	sp, #32
   2eeb4:	af00      	add	r7, sp, #0
   2eeb6:	60f8      	str	r0, [r7, #12]
   2eeb8:	60b9      	str	r1, [r7, #8]
   2eeba:	0019      	movs	r1, r3
   2eebc:	1dfb      	adds	r3, r7, #7
   2eebe:	701a      	strb	r2, [r3, #0]
   2eec0:	1dbb      	adds	r3, r7, #6
   2eec2:	1c0a      	adds	r2, r1, #0
   2eec4:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2eec6:	68bb      	ldr	r3, [r7, #8]
   2eec8:	330d      	adds	r3, #13
   2eeca:	1dba      	adds	r2, r7, #6
   2eecc:	7812      	ldrb	r2, [r2, #0]
   2eece:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2eed0:	68bb      	ldr	r3, [r7, #8]
   2eed2:	330b      	adds	r3, #11
   2eed4:	220f      	movs	r2, #15
   2eed6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2eed8:	68bb      	ldr	r3, [r7, #8]
   2eeda:	330c      	adds	r3, #12
   2eedc:	2200      	movs	r2, #0
   2eede:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2eee0:	68bb      	ldr	r3, [r7, #8]
   2eee2:	331a      	adds	r3, #26
   2eee4:	2200      	movs	r2, #0
   2eee6:	701a      	strb	r2, [r3, #0]
   2eee8:	68bb      	ldr	r3, [r7, #8]
   2eeea:	331b      	adds	r3, #27
   2eeec:	2200      	movs	r2, #0
   2eeee:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2eef0:	1dfb      	adds	r3, r7, #7
   2eef2:	781b      	ldrb	r3, [r3, #0]
   2eef4:	1e5a      	subs	r2, r3, #1
   2eef6:	0013      	movs	r3, r2
   2eef8:	005b      	lsls	r3, r3, #1
   2eefa:	189b      	adds	r3, r3, r2
   2eefc:	009b      	lsls	r3, r3, #2
   2eefe:	189b      	adds	r3, r3, r2
   2ef00:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2ef02:	2316      	movs	r3, #22
   2ef04:	18fb      	adds	r3, r7, r3
   2ef06:	2200      	movs	r2, #0
   2ef08:	801a      	strh	r2, [r3, #0]
   2ef0a:	2300      	movs	r3, #0
   2ef0c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2ef0e:	2316      	movs	r3, #22
   2ef10:	18fb      	adds	r3, r7, r3
   2ef12:	881b      	ldrh	r3, [r3, #0]
   2ef14:	4a28      	ldr	r2, [pc, #160]	; (2efb8 <fit_lfn+0x108>)
   2ef16:	4293      	cmp	r3, r2
   2ef18:	d009      	beq.n	2ef2e <fit_lfn+0x7e>
   2ef1a:	69fb      	ldr	r3, [r7, #28]
   2ef1c:	1c5a      	adds	r2, r3, #1
   2ef1e:	61fa      	str	r2, [r7, #28]
   2ef20:	005b      	lsls	r3, r3, #1
   2ef22:	68fa      	ldr	r2, [r7, #12]
   2ef24:	18d2      	adds	r2, r2, r3
   2ef26:	2316      	movs	r3, #22
   2ef28:	18fb      	adds	r3, r7, r3
   2ef2a:	8812      	ldrh	r2, [r2, #0]
   2ef2c:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2ef2e:	4a23      	ldr	r2, [pc, #140]	; (2efbc <fit_lfn+0x10c>)
   2ef30:	69bb      	ldr	r3, [r7, #24]
   2ef32:	18d3      	adds	r3, r2, r3
   2ef34:	781b      	ldrb	r3, [r3, #0]
   2ef36:	001a      	movs	r2, r3
   2ef38:	68bb      	ldr	r3, [r7, #8]
   2ef3a:	189b      	adds	r3, r3, r2
   2ef3c:	2216      	movs	r2, #22
   2ef3e:	18ba      	adds	r2, r7, r2
   2ef40:	8812      	ldrh	r2, [r2, #0]
   2ef42:	b2d2      	uxtb	r2, r2
   2ef44:	701a      	strb	r2, [r3, #0]
   2ef46:	4a1d      	ldr	r2, [pc, #116]	; (2efbc <fit_lfn+0x10c>)
   2ef48:	69bb      	ldr	r3, [r7, #24]
   2ef4a:	18d3      	adds	r3, r2, r3
   2ef4c:	781b      	ldrb	r3, [r3, #0]
   2ef4e:	3301      	adds	r3, #1
   2ef50:	68ba      	ldr	r2, [r7, #8]
   2ef52:	18d3      	adds	r3, r2, r3
   2ef54:	2216      	movs	r2, #22
   2ef56:	18ba      	adds	r2, r7, r2
   2ef58:	8812      	ldrh	r2, [r2, #0]
   2ef5a:	0a12      	lsrs	r2, r2, #8
   2ef5c:	b292      	uxth	r2, r2
   2ef5e:	b2d2      	uxtb	r2, r2
   2ef60:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2ef62:	2316      	movs	r3, #22
   2ef64:	18fb      	adds	r3, r7, r3
   2ef66:	881b      	ldrh	r3, [r3, #0]
   2ef68:	2b00      	cmp	r3, #0
   2ef6a:	d104      	bne.n	2ef76 <fit_lfn+0xc6>
   2ef6c:	2316      	movs	r3, #22
   2ef6e:	18fb      	adds	r3, r7, r3
   2ef70:	2201      	movs	r2, #1
   2ef72:	4252      	negs	r2, r2
   2ef74:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2ef76:	69bb      	ldr	r3, [r7, #24]
   2ef78:	3301      	adds	r3, #1
   2ef7a:	61bb      	str	r3, [r7, #24]
   2ef7c:	69bb      	ldr	r3, [r7, #24]
   2ef7e:	2b0c      	cmp	r3, #12
   2ef80:	d9c5      	bls.n	2ef0e <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2ef82:	2316      	movs	r3, #22
   2ef84:	18fb      	adds	r3, r7, r3
   2ef86:	881b      	ldrh	r3, [r3, #0]
   2ef88:	4a0b      	ldr	r2, [pc, #44]	; (2efb8 <fit_lfn+0x108>)
   2ef8a:	4293      	cmp	r3, r2
   2ef8c:	d006      	beq.n	2ef9c <fit_lfn+0xec>
   2ef8e:	69fb      	ldr	r3, [r7, #28]
   2ef90:	005b      	lsls	r3, r3, #1
   2ef92:	68fa      	ldr	r2, [r7, #12]
   2ef94:	18d3      	adds	r3, r2, r3
   2ef96:	881b      	ldrh	r3, [r3, #0]
   2ef98:	2b00      	cmp	r3, #0
   2ef9a:	d105      	bne.n	2efa8 <fit_lfn+0xf8>
   2ef9c:	1dfb      	adds	r3, r7, #7
   2ef9e:	1dfa      	adds	r2, r7, #7
   2efa0:	7812      	ldrb	r2, [r2, #0]
   2efa2:	2140      	movs	r1, #64	; 0x40
   2efa4:	430a      	orrs	r2, r1
   2efa6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2efa8:	68bb      	ldr	r3, [r7, #8]
   2efaa:	1dfa      	adds	r2, r7, #7
   2efac:	7812      	ldrb	r2, [r2, #0]
   2efae:	701a      	strb	r2, [r3, #0]
}
   2efb0:	46c0      	nop			; (mov r8, r8)
   2efb2:	46bd      	mov	sp, r7
   2efb4:	b008      	add	sp, #32
   2efb6:	bd80      	pop	{r7, pc}
   2efb8:	0000ffff 	.word	0x0000ffff
   2efbc:	0003c6f0 	.word	0x0003c6f0

0002efc0 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2efc0:	b580      	push	{r7, lr}
   2efc2:	b08a      	sub	sp, #40	; 0x28
   2efc4:	af00      	add	r7, sp, #0
   2efc6:	60f8      	str	r0, [r7, #12]
   2efc8:	60b9      	str	r1, [r7, #8]
   2efca:	607a      	str	r2, [r7, #4]
   2efcc:	001a      	movs	r2, r3
   2efce:	1cbb      	adds	r3, r7, #2
   2efd0:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2efd2:	68b9      	ldr	r1, [r7, #8]
   2efd4:	68fb      	ldr	r3, [r7, #12]
   2efd6:	220b      	movs	r2, #11
   2efd8:	0018      	movs	r0, r3
   2efda:	4b38      	ldr	r3, [pc, #224]	; (2f0bc <gen_numname+0xfc>)
   2efdc:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2efde:	1cbb      	adds	r3, r7, #2
   2efe0:	881b      	ldrh	r3, [r3, #0]
   2efe2:	2b05      	cmp	r3, #5
   2efe4:	d911      	bls.n	2f00a <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2efe6:	1cbb      	adds	r3, r7, #2
   2efe8:	881b      	ldrh	r3, [r3, #0]
   2efea:	b29a      	uxth	r2, r3
   2efec:	0852      	lsrs	r2, r2, #1
   2efee:	03db      	lsls	r3, r3, #15
   2eff0:	4313      	orrs	r3, r2
   2eff2:	b299      	uxth	r1, r3
   2eff4:	687b      	ldr	r3, [r7, #4]
   2eff6:	1c9a      	adds	r2, r3, #2
   2eff8:	607a      	str	r2, [r7, #4]
   2effa:	881a      	ldrh	r2, [r3, #0]
   2effc:	1cbb      	adds	r3, r7, #2
   2effe:	188a      	adds	r2, r1, r2
   2f000:	801a      	strh	r2, [r3, #0]
   2f002:	687b      	ldr	r3, [r7, #4]
   2f004:	881b      	ldrh	r3, [r3, #0]
   2f006:	2b00      	cmp	r3, #0
   2f008:	d1ed      	bne.n	2efe6 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2f00a:	2307      	movs	r3, #7
   2f00c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2f00e:	1cbb      	adds	r3, r7, #2
   2f010:	881b      	ldrh	r3, [r3, #0]
   2f012:	b2db      	uxtb	r3, r3
   2f014:	220f      	movs	r2, #15
   2f016:	4013      	ands	r3, r2
   2f018:	b2da      	uxtb	r2, r3
   2f01a:	2327      	movs	r3, #39	; 0x27
   2f01c:	18fb      	adds	r3, r7, r3
   2f01e:	3230      	adds	r2, #48	; 0x30
   2f020:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2f022:	2327      	movs	r3, #39	; 0x27
   2f024:	18fb      	adds	r3, r7, r3
   2f026:	781b      	ldrb	r3, [r3, #0]
   2f028:	2b39      	cmp	r3, #57	; 0x39
   2f02a:	d906      	bls.n	2f03a <gen_numname+0x7a>
   2f02c:	2327      	movs	r3, #39	; 0x27
   2f02e:	18fb      	adds	r3, r7, r3
   2f030:	2227      	movs	r2, #39	; 0x27
   2f032:	18ba      	adds	r2, r7, r2
   2f034:	7812      	ldrb	r2, [r2, #0]
   2f036:	3207      	adds	r2, #7
   2f038:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2f03a:	6a3b      	ldr	r3, [r7, #32]
   2f03c:	1e5a      	subs	r2, r3, #1
   2f03e:	623a      	str	r2, [r7, #32]
   2f040:	2214      	movs	r2, #20
   2f042:	18ba      	adds	r2, r7, r2
   2f044:	2127      	movs	r1, #39	; 0x27
   2f046:	1879      	adds	r1, r7, r1
   2f048:	7809      	ldrb	r1, [r1, #0]
   2f04a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2f04c:	1cbb      	adds	r3, r7, #2
   2f04e:	1cba      	adds	r2, r7, #2
   2f050:	8812      	ldrh	r2, [r2, #0]
   2f052:	0912      	lsrs	r2, r2, #4
   2f054:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2f056:	1cbb      	adds	r3, r7, #2
   2f058:	881b      	ldrh	r3, [r3, #0]
   2f05a:	2b00      	cmp	r3, #0
   2f05c:	d1d7      	bne.n	2f00e <gen_numname+0x4e>
	ns[i] = '~';
   2f05e:	2314      	movs	r3, #20
   2f060:	18fa      	adds	r2, r7, r3
   2f062:	6a3b      	ldr	r3, [r7, #32]
   2f064:	18d3      	adds	r3, r2, r3
   2f066:	227e      	movs	r2, #126	; 0x7e
   2f068:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2f06a:	2300      	movs	r3, #0
   2f06c:	61fb      	str	r3, [r7, #28]
   2f06e:	e002      	b.n	2f076 <gen_numname+0xb6>
   2f070:	69fb      	ldr	r3, [r7, #28]
   2f072:	3301      	adds	r3, #1
   2f074:	61fb      	str	r3, [r7, #28]
   2f076:	69fa      	ldr	r2, [r7, #28]
   2f078:	6a3b      	ldr	r3, [r7, #32]
   2f07a:	429a      	cmp	r2, r3
   2f07c:	d205      	bcs.n	2f08a <gen_numname+0xca>
   2f07e:	68fa      	ldr	r2, [r7, #12]
   2f080:	69fb      	ldr	r3, [r7, #28]
   2f082:	18d3      	adds	r3, r2, r3
   2f084:	781b      	ldrb	r3, [r3, #0]
   2f086:	2b20      	cmp	r3, #32
   2f088:	d1f2      	bne.n	2f070 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2f08a:	69fb      	ldr	r3, [r7, #28]
   2f08c:	1c5a      	adds	r2, r3, #1
   2f08e:	61fa      	str	r2, [r7, #28]
   2f090:	68fa      	ldr	r2, [r7, #12]
   2f092:	18d2      	adds	r2, r2, r3
   2f094:	6a3b      	ldr	r3, [r7, #32]
   2f096:	2b07      	cmp	r3, #7
   2f098:	d806      	bhi.n	2f0a8 <gen_numname+0xe8>
   2f09a:	6a3b      	ldr	r3, [r7, #32]
   2f09c:	1c59      	adds	r1, r3, #1
   2f09e:	6239      	str	r1, [r7, #32]
   2f0a0:	2114      	movs	r1, #20
   2f0a2:	1879      	adds	r1, r7, r1
   2f0a4:	5ccb      	ldrb	r3, [r1, r3]
   2f0a6:	e000      	b.n	2f0aa <gen_numname+0xea>
   2f0a8:	2320      	movs	r3, #32
   2f0aa:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2f0ac:	69fb      	ldr	r3, [r7, #28]
   2f0ae:	2b07      	cmp	r3, #7
   2f0b0:	d9eb      	bls.n	2f08a <gen_numname+0xca>
}
   2f0b2:	46c0      	nop			; (mov r8, r8)
   2f0b4:	46bd      	mov	sp, r7
   2f0b6:	b00a      	add	sp, #40	; 0x28
   2f0b8:	bd80      	pop	{r7, pc}
   2f0ba:	46c0      	nop			; (mov r8, r8)
   2f0bc:	0002e165 	.word	0x0002e165

0002f0c0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2f0c0:	b580      	push	{r7, lr}
   2f0c2:	b084      	sub	sp, #16
   2f0c4:	af00      	add	r7, sp, #0
   2f0c6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2f0c8:	230f      	movs	r3, #15
   2f0ca:	18fb      	adds	r3, r7, r3
   2f0cc:	2200      	movs	r2, #0
   2f0ce:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2f0d0:	230b      	movs	r3, #11
   2f0d2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2f0d4:	230f      	movs	r3, #15
   2f0d6:	18fb      	adds	r3, r7, r3
   2f0d8:	781b      	ldrb	r3, [r3, #0]
   2f0da:	b2da      	uxtb	r2, r3
   2f0dc:	0852      	lsrs	r2, r2, #1
   2f0de:	01db      	lsls	r3, r3, #7
   2f0e0:	4313      	orrs	r3, r2
   2f0e2:	b2d9      	uxtb	r1, r3
   2f0e4:	687b      	ldr	r3, [r7, #4]
   2f0e6:	1c5a      	adds	r2, r3, #1
   2f0e8:	607a      	str	r2, [r7, #4]
   2f0ea:	781a      	ldrb	r2, [r3, #0]
   2f0ec:	230f      	movs	r3, #15
   2f0ee:	18fb      	adds	r3, r7, r3
   2f0f0:	188a      	adds	r2, r1, r2
   2f0f2:	701a      	strb	r2, [r3, #0]
   2f0f4:	68bb      	ldr	r3, [r7, #8]
   2f0f6:	3b01      	subs	r3, #1
   2f0f8:	60bb      	str	r3, [r7, #8]
   2f0fa:	68bb      	ldr	r3, [r7, #8]
   2f0fc:	2b00      	cmp	r3, #0
   2f0fe:	d1e9      	bne.n	2f0d4 <sum_sfn+0x14>
	return sum;
   2f100:	230f      	movs	r3, #15
   2f102:	18fb      	adds	r3, r7, r3
   2f104:	781b      	ldrb	r3, [r3, #0]
}
   2f106:	0018      	movs	r0, r3
   2f108:	46bd      	mov	sp, r7
   2f10a:	b004      	add	sp, #16
   2f10c:	bd80      	pop	{r7, pc}
	...

0002f110 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2f110:	b590      	push	{r4, r7, lr}
   2f112:	b087      	sub	sp, #28
   2f114:	af00      	add	r7, sp, #0
   2f116:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2f118:	2317      	movs	r3, #23
   2f11a:	18fc      	adds	r4, r7, r3
   2f11c:	687b      	ldr	r3, [r7, #4]
   2f11e:	2100      	movs	r1, #0
   2f120:	0018      	movs	r0, r3
   2f122:	4b74      	ldr	r3, [pc, #464]	; (2f2f4 <dir_find+0x1e4>)
   2f124:	4798      	blx	r3
   2f126:	0003      	movs	r3, r0
   2f128:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2f12a:	2317      	movs	r3, #23
   2f12c:	18fb      	adds	r3, r7, r3
   2f12e:	781b      	ldrb	r3, [r3, #0]
   2f130:	2b00      	cmp	r3, #0
   2f132:	d003      	beq.n	2f13c <dir_find+0x2c>
   2f134:	2317      	movs	r3, #23
   2f136:	18fb      	adds	r3, r7, r3
   2f138:	781b      	ldrb	r3, [r3, #0]
   2f13a:	e0d6      	b.n	2f2ea <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2f13c:	2314      	movs	r3, #20
   2f13e:	18fb      	adds	r3, r7, r3
   2f140:	22ff      	movs	r2, #255	; 0xff
   2f142:	701a      	strb	r2, [r3, #0]
   2f144:	2315      	movs	r3, #21
   2f146:	18fb      	adds	r3, r7, r3
   2f148:	2214      	movs	r2, #20
   2f14a:	18ba      	adds	r2, r7, r2
   2f14c:	7812      	ldrb	r2, [r2, #0]
   2f14e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2f150:	687b      	ldr	r3, [r7, #4]
   2f152:	681a      	ldr	r2, [r3, #0]
   2f154:	687b      	ldr	r3, [r7, #4]
   2f156:	691b      	ldr	r3, [r3, #16]
   2f158:	2117      	movs	r1, #23
   2f15a:	187c      	adds	r4, r7, r1
   2f15c:	0019      	movs	r1, r3
   2f15e:	0010      	movs	r0, r2
   2f160:	4b65      	ldr	r3, [pc, #404]	; (2f2f8 <dir_find+0x1e8>)
   2f162:	4798      	blx	r3
   2f164:	0003      	movs	r3, r0
   2f166:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2f168:	2317      	movs	r3, #23
   2f16a:	18fb      	adds	r3, r7, r3
   2f16c:	781b      	ldrb	r3, [r3, #0]
   2f16e:	2b00      	cmp	r3, #0
   2f170:	d000      	beq.n	2f174 <dir_find+0x64>
   2f172:	e0b2      	b.n	2f2da <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2f174:	687b      	ldr	r3, [r7, #4]
   2f176:	695b      	ldr	r3, [r3, #20]
   2f178:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2f17a:	2316      	movs	r3, #22
   2f17c:	18fb      	adds	r3, r7, r3
   2f17e:	693a      	ldr	r2, [r7, #16]
   2f180:	7812      	ldrb	r2, [r2, #0]
   2f182:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2f184:	2316      	movs	r3, #22
   2f186:	18fb      	adds	r3, r7, r3
   2f188:	781b      	ldrb	r3, [r3, #0]
   2f18a:	2b00      	cmp	r3, #0
   2f18c:	d104      	bne.n	2f198 <dir_find+0x88>
   2f18e:	2317      	movs	r3, #23
   2f190:	18fb      	adds	r3, r7, r3
   2f192:	2204      	movs	r2, #4
   2f194:	701a      	strb	r2, [r3, #0]
   2f196:	e0a5      	b.n	2f2e4 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2f198:	693b      	ldr	r3, [r7, #16]
   2f19a:	330b      	adds	r3, #11
   2f19c:	781a      	ldrb	r2, [r3, #0]
   2f19e:	230f      	movs	r3, #15
   2f1a0:	18fb      	adds	r3, r7, r3
   2f1a2:	213f      	movs	r1, #63	; 0x3f
   2f1a4:	400a      	ands	r2, r1
   2f1a6:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2f1a8:	2316      	movs	r3, #22
   2f1aa:	18fb      	adds	r3, r7, r3
   2f1ac:	781b      	ldrb	r3, [r3, #0]
   2f1ae:	2be5      	cmp	r3, #229	; 0xe5
   2f1b0:	d00a      	beq.n	2f1c8 <dir_find+0xb8>
   2f1b2:	230f      	movs	r3, #15
   2f1b4:	18fb      	adds	r3, r7, r3
   2f1b6:	781b      	ldrb	r3, [r3, #0]
   2f1b8:	2208      	movs	r2, #8
   2f1ba:	4013      	ands	r3, r2
   2f1bc:	d009      	beq.n	2f1d2 <dir_find+0xc2>
   2f1be:	230f      	movs	r3, #15
   2f1c0:	18fb      	adds	r3, r7, r3
   2f1c2:	781b      	ldrb	r3, [r3, #0]
   2f1c4:	2b0f      	cmp	r3, #15
   2f1c6:	d004      	beq.n	2f1d2 <dir_find+0xc2>
			ord = 0xFF;
   2f1c8:	2315      	movs	r3, #21
   2f1ca:	18fb      	adds	r3, r7, r3
   2f1cc:	22ff      	movs	r2, #255	; 0xff
   2f1ce:	701a      	strb	r2, [r3, #0]
   2f1d0:	e073      	b.n	2f2ba <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2f1d2:	230f      	movs	r3, #15
   2f1d4:	18fb      	adds	r3, r7, r3
   2f1d6:	781b      	ldrb	r3, [r3, #0]
   2f1d8:	2b0f      	cmp	r3, #15
   2f1da:	d145      	bne.n	2f268 <dir_find+0x158>
				if (dj->lfn) {
   2f1dc:	687b      	ldr	r3, [r7, #4]
   2f1de:	69db      	ldr	r3, [r3, #28]
   2f1e0:	2b00      	cmp	r3, #0
   2f1e2:	d100      	bne.n	2f1e6 <dir_find+0xd6>
   2f1e4:	e069      	b.n	2f2ba <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2f1e6:	2316      	movs	r3, #22
   2f1e8:	18fb      	adds	r3, r7, r3
   2f1ea:	781b      	ldrb	r3, [r3, #0]
   2f1ec:	2240      	movs	r2, #64	; 0x40
   2f1ee:	4013      	ands	r3, r2
   2f1f0:	d016      	beq.n	2f220 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2f1f2:	2314      	movs	r3, #20
   2f1f4:	18fb      	adds	r3, r7, r3
   2f1f6:	693a      	ldr	r2, [r7, #16]
   2f1f8:	7b52      	ldrb	r2, [r2, #13]
   2f1fa:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2f1fc:	2316      	movs	r3, #22
   2f1fe:	18fb      	adds	r3, r7, r3
   2f200:	2216      	movs	r2, #22
   2f202:	18ba      	adds	r2, r7, r2
   2f204:	7812      	ldrb	r2, [r2, #0]
   2f206:	2140      	movs	r1, #64	; 0x40
   2f208:	438a      	bics	r2, r1
   2f20a:	701a      	strb	r2, [r3, #0]
   2f20c:	2315      	movs	r3, #21
   2f20e:	18fb      	adds	r3, r7, r3
   2f210:	2216      	movs	r2, #22
   2f212:	18ba      	adds	r2, r7, r2
   2f214:	7812      	ldrb	r2, [r2, #0]
   2f216:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2f218:	687b      	ldr	r3, [r7, #4]
   2f21a:	88da      	ldrh	r2, [r3, #6]
   2f21c:	687b      	ldr	r3, [r7, #4]
   2f21e:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2f220:	2316      	movs	r3, #22
   2f222:	18fa      	adds	r2, r7, r3
   2f224:	2315      	movs	r3, #21
   2f226:	18fb      	adds	r3, r7, r3
   2f228:	7812      	ldrb	r2, [r2, #0]
   2f22a:	781b      	ldrb	r3, [r3, #0]
   2f22c:	429a      	cmp	r2, r3
   2f22e:	d116      	bne.n	2f25e <dir_find+0x14e>
   2f230:	693b      	ldr	r3, [r7, #16]
   2f232:	330d      	adds	r3, #13
   2f234:	781b      	ldrb	r3, [r3, #0]
   2f236:	2214      	movs	r2, #20
   2f238:	18ba      	adds	r2, r7, r2
   2f23a:	7812      	ldrb	r2, [r2, #0]
   2f23c:	429a      	cmp	r2, r3
   2f23e:	d10e      	bne.n	2f25e <dir_find+0x14e>
   2f240:	687b      	ldr	r3, [r7, #4]
   2f242:	69db      	ldr	r3, [r3, #28]
   2f244:	693a      	ldr	r2, [r7, #16]
   2f246:	0011      	movs	r1, r2
   2f248:	0018      	movs	r0, r3
   2f24a:	4b2c      	ldr	r3, [pc, #176]	; (2f2fc <dir_find+0x1ec>)
   2f24c:	4798      	blx	r3
   2f24e:	1e03      	subs	r3, r0, #0
   2f250:	d005      	beq.n	2f25e <dir_find+0x14e>
   2f252:	2315      	movs	r3, #21
   2f254:	18fb      	adds	r3, r7, r3
   2f256:	781b      	ldrb	r3, [r3, #0]
   2f258:	3b01      	subs	r3, #1
   2f25a:	b2da      	uxtb	r2, r3
   2f25c:	e000      	b.n	2f260 <dir_find+0x150>
   2f25e:	22ff      	movs	r2, #255	; 0xff
   2f260:	2315      	movs	r3, #21
   2f262:	18fb      	adds	r3, r7, r3
   2f264:	701a      	strb	r2, [r3, #0]
   2f266:	e028      	b.n	2f2ba <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2f268:	2315      	movs	r3, #21
   2f26a:	18fb      	adds	r3, r7, r3
   2f26c:	781b      	ldrb	r3, [r3, #0]
   2f26e:	2b00      	cmp	r3, #0
   2f270:	d10a      	bne.n	2f288 <dir_find+0x178>
   2f272:	693b      	ldr	r3, [r7, #16]
   2f274:	0018      	movs	r0, r3
   2f276:	4b22      	ldr	r3, [pc, #136]	; (2f300 <dir_find+0x1f0>)
   2f278:	4798      	blx	r3
   2f27a:	0003      	movs	r3, r0
   2f27c:	001a      	movs	r2, r3
   2f27e:	2314      	movs	r3, #20
   2f280:	18fb      	adds	r3, r7, r3
   2f282:	781b      	ldrb	r3, [r3, #0]
   2f284:	4293      	cmp	r3, r2
   2f286:	d02a      	beq.n	2f2de <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2f288:	2315      	movs	r3, #21
   2f28a:	18fb      	adds	r3, r7, r3
   2f28c:	22ff      	movs	r2, #255	; 0xff
   2f28e:	701a      	strb	r2, [r3, #0]
   2f290:	687b      	ldr	r3, [r7, #4]
   2f292:	2201      	movs	r2, #1
   2f294:	4252      	negs	r2, r2
   2f296:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2f298:	687b      	ldr	r3, [r7, #4]
   2f29a:	699b      	ldr	r3, [r3, #24]
   2f29c:	330b      	adds	r3, #11
   2f29e:	781b      	ldrb	r3, [r3, #0]
   2f2a0:	001a      	movs	r2, r3
   2f2a2:	2301      	movs	r3, #1
   2f2a4:	4013      	ands	r3, r2
   2f2a6:	d108      	bne.n	2f2ba <dir_find+0x1aa>
   2f2a8:	687b      	ldr	r3, [r7, #4]
   2f2aa:	6999      	ldr	r1, [r3, #24]
   2f2ac:	693b      	ldr	r3, [r7, #16]
   2f2ae:	220b      	movs	r2, #11
   2f2b0:	0018      	movs	r0, r3
   2f2b2:	4b14      	ldr	r3, [pc, #80]	; (2f304 <dir_find+0x1f4>)
   2f2b4:	4798      	blx	r3
   2f2b6:	1e03      	subs	r3, r0, #0
   2f2b8:	d013      	beq.n	2f2e2 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2f2ba:	2317      	movs	r3, #23
   2f2bc:	18fc      	adds	r4, r7, r3
   2f2be:	687b      	ldr	r3, [r7, #4]
   2f2c0:	2100      	movs	r1, #0
   2f2c2:	0018      	movs	r0, r3
   2f2c4:	4b10      	ldr	r3, [pc, #64]	; (2f308 <dir_find+0x1f8>)
   2f2c6:	4798      	blx	r3
   2f2c8:	0003      	movs	r3, r0
   2f2ca:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2f2cc:	2317      	movs	r3, #23
   2f2ce:	18fb      	adds	r3, r7, r3
   2f2d0:	781b      	ldrb	r3, [r3, #0]
   2f2d2:	2b00      	cmp	r3, #0
   2f2d4:	d100      	bne.n	2f2d8 <dir_find+0x1c8>
   2f2d6:	e73b      	b.n	2f150 <dir_find+0x40>
   2f2d8:	e004      	b.n	2f2e4 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2f2da:	46c0      	nop			; (mov r8, r8)
   2f2dc:	e002      	b.n	2f2e4 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2f2de:	46c0      	nop			; (mov r8, r8)
   2f2e0:	e000      	b.n	2f2e4 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2f2e2:	46c0      	nop			; (mov r8, r8)

	return res;
   2f2e4:	2317      	movs	r3, #23
   2f2e6:	18fb      	adds	r3, r7, r3
   2f2e8:	781b      	ldrb	r3, [r3, #0]
}
   2f2ea:	0018      	movs	r0, r3
   2f2ec:	46bd      	mov	sp, r7
   2f2ee:	b007      	add	sp, #28
   2f2f0:	bd90      	pop	{r4, r7, pc}
   2f2f2:	46c0      	nop			; (mov r8, r8)
   2f2f4:	0002ea8d 	.word	0x0002ea8d
   2f2f8:	0002e249 	.word	0x0002e249
   2f2fc:	0002edad 	.word	0x0002edad
   2f300:	0002f0c1 	.word	0x0002f0c1
   2f304:	0002e1cd 	.word	0x0002e1cd
   2f308:	0002ebbd 	.word	0x0002ebbd

0002f30c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2f30c:	b590      	push	{r4, r7, lr}
   2f30e:	b08d      	sub	sp, #52	; 0x34
   2f310:	af00      	add	r7, sp, #0
   2f312:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2f314:	687b      	ldr	r3, [r7, #4]
   2f316:	699b      	ldr	r3, [r3, #24]
   2f318:	627b      	str	r3, [r7, #36]	; 0x24
   2f31a:	687b      	ldr	r3, [r7, #4]
   2f31c:	69db      	ldr	r3, [r3, #28]
   2f31e:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2f320:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2f322:	230c      	movs	r3, #12
   2f324:	18fb      	adds	r3, r7, r3
   2f326:	220c      	movs	r2, #12
   2f328:	0018      	movs	r0, r3
   2f32a:	4bc8      	ldr	r3, [pc, #800]	; (2f64c <dir_register+0x340>)
   2f32c:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2f32e:	230c      	movs	r3, #12
   2f330:	18fb      	adds	r3, r7, r3
   2f332:	7adb      	ldrb	r3, [r3, #11]
   2f334:	001a      	movs	r2, r3
   2f336:	2301      	movs	r3, #1
   2f338:	4013      	ands	r3, r2
   2f33a:	d048      	beq.n	2f3ce <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2f33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f33e:	330b      	adds	r3, #11
   2f340:	2200      	movs	r2, #0
   2f342:	701a      	strb	r2, [r3, #0]
   2f344:	687b      	ldr	r3, [r7, #4]
   2f346:	2200      	movs	r2, #0
   2f348:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2f34a:	232c      	movs	r3, #44	; 0x2c
   2f34c:	18fb      	adds	r3, r7, r3
   2f34e:	2201      	movs	r2, #1
   2f350:	801a      	strh	r2, [r3, #0]
   2f352:	e01c      	b.n	2f38e <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2f354:	232c      	movs	r3, #44	; 0x2c
   2f356:	18fb      	adds	r3, r7, r3
   2f358:	881b      	ldrh	r3, [r3, #0]
   2f35a:	6a3a      	ldr	r2, [r7, #32]
   2f35c:	210c      	movs	r1, #12
   2f35e:	1879      	adds	r1, r7, r1
   2f360:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2f362:	4cbb      	ldr	r4, [pc, #748]	; (2f650 <dir_register+0x344>)
   2f364:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2f366:	232f      	movs	r3, #47	; 0x2f
   2f368:	18fc      	adds	r4, r7, r3
   2f36a:	687b      	ldr	r3, [r7, #4]
   2f36c:	0018      	movs	r0, r3
   2f36e:	4bb9      	ldr	r3, [pc, #740]	; (2f654 <dir_register+0x348>)
   2f370:	4798      	blx	r3
   2f372:	0003      	movs	r3, r0
   2f374:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2f376:	232f      	movs	r3, #47	; 0x2f
   2f378:	18fb      	adds	r3, r7, r3
   2f37a:	781b      	ldrb	r3, [r3, #0]
   2f37c:	2b00      	cmp	r3, #0
   2f37e:	d10c      	bne.n	2f39a <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2f380:	232c      	movs	r3, #44	; 0x2c
   2f382:	18fb      	adds	r3, r7, r3
   2f384:	881a      	ldrh	r2, [r3, #0]
   2f386:	232c      	movs	r3, #44	; 0x2c
   2f388:	18fb      	adds	r3, r7, r3
   2f38a:	3201      	adds	r2, #1
   2f38c:	801a      	strh	r2, [r3, #0]
   2f38e:	232c      	movs	r3, #44	; 0x2c
   2f390:	18fb      	adds	r3, r7, r3
   2f392:	881b      	ldrh	r3, [r3, #0]
   2f394:	2b63      	cmp	r3, #99	; 0x63
   2f396:	d9dd      	bls.n	2f354 <dir_register+0x48>
   2f398:	e000      	b.n	2f39c <dir_register+0x90>
			if (res != FR_OK) break;
   2f39a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2f39c:	232c      	movs	r3, #44	; 0x2c
   2f39e:	18fb      	adds	r3, r7, r3
   2f3a0:	881b      	ldrh	r3, [r3, #0]
   2f3a2:	2b64      	cmp	r3, #100	; 0x64
   2f3a4:	d101      	bne.n	2f3aa <dir_register+0x9e>
   2f3a6:	2307      	movs	r3, #7
   2f3a8:	e14c      	b.n	2f644 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2f3aa:	232f      	movs	r3, #47	; 0x2f
   2f3ac:	18fb      	adds	r3, r7, r3
   2f3ae:	781b      	ldrb	r3, [r3, #0]
   2f3b0:	2b04      	cmp	r3, #4
   2f3b2:	d003      	beq.n	2f3bc <dir_register+0xb0>
   2f3b4:	232f      	movs	r3, #47	; 0x2f
   2f3b6:	18fb      	adds	r3, r7, r3
   2f3b8:	781b      	ldrb	r3, [r3, #0]
   2f3ba:	e143      	b.n	2f644 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2f3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f3be:	330b      	adds	r3, #11
   2f3c0:	220c      	movs	r2, #12
   2f3c2:	18ba      	adds	r2, r7, r2
   2f3c4:	7ad2      	ldrb	r2, [r2, #11]
   2f3c6:	701a      	strb	r2, [r3, #0]
   2f3c8:	687b      	ldr	r3, [r7, #4]
   2f3ca:	6a3a      	ldr	r2, [r7, #32]
   2f3cc:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2f3ce:	230c      	movs	r3, #12
   2f3d0:	18fb      	adds	r3, r7, r3
   2f3d2:	7adb      	ldrb	r3, [r3, #11]
   2f3d4:	001a      	movs	r2, r3
   2f3d6:	2302      	movs	r3, #2
   2f3d8:	4013      	ands	r3, r2
   2f3da:	d023      	beq.n	2f424 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2f3dc:	232a      	movs	r3, #42	; 0x2a
   2f3de:	18fb      	adds	r3, r7, r3
   2f3e0:	2200      	movs	r2, #0
   2f3e2:	801a      	strh	r2, [r3, #0]
   2f3e4:	e006      	b.n	2f3f4 <dir_register+0xe8>
   2f3e6:	232a      	movs	r3, #42	; 0x2a
   2f3e8:	18fb      	adds	r3, r7, r3
   2f3ea:	881a      	ldrh	r2, [r3, #0]
   2f3ec:	232a      	movs	r3, #42	; 0x2a
   2f3ee:	18fb      	adds	r3, r7, r3
   2f3f0:	3201      	adds	r2, #1
   2f3f2:	801a      	strh	r2, [r3, #0]
   2f3f4:	232a      	movs	r3, #42	; 0x2a
   2f3f6:	18fb      	adds	r3, r7, r3
   2f3f8:	881b      	ldrh	r3, [r3, #0]
   2f3fa:	005b      	lsls	r3, r3, #1
   2f3fc:	6a3a      	ldr	r2, [r7, #32]
   2f3fe:	18d3      	adds	r3, r2, r3
   2f400:	881b      	ldrh	r3, [r3, #0]
   2f402:	2b00      	cmp	r3, #0
   2f404:	d1ef      	bne.n	2f3e6 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2f406:	232a      	movs	r3, #42	; 0x2a
   2f408:	18fb      	adds	r3, r7, r3
   2f40a:	881b      	ldrh	r3, [r3, #0]
   2f40c:	3319      	adds	r3, #25
   2f40e:	001a      	movs	r2, r3
   2f410:	4b91      	ldr	r3, [pc, #580]	; (2f658 <dir_register+0x34c>)
   2f412:	210d      	movs	r1, #13
   2f414:	0010      	movs	r0, r2
   2f416:	4798      	blx	r3
   2f418:	0003      	movs	r3, r0
   2f41a:	001a      	movs	r2, r3
   2f41c:	232a      	movs	r3, #42	; 0x2a
   2f41e:	18fb      	adds	r3, r7, r3
   2f420:	801a      	strh	r2, [r3, #0]
   2f422:	e003      	b.n	2f42c <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2f424:	232a      	movs	r3, #42	; 0x2a
   2f426:	18fb      	adds	r3, r7, r3
   2f428:	2201      	movs	r2, #1
   2f42a:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2f42c:	232f      	movs	r3, #47	; 0x2f
   2f42e:	18fc      	adds	r4, r7, r3
   2f430:	687b      	ldr	r3, [r7, #4]
   2f432:	2100      	movs	r1, #0
   2f434:	0018      	movs	r0, r3
   2f436:	4b89      	ldr	r3, [pc, #548]	; (2f65c <dir_register+0x350>)
   2f438:	4798      	blx	r3
   2f43a:	0003      	movs	r3, r0
   2f43c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2f43e:	232f      	movs	r3, #47	; 0x2f
   2f440:	18fb      	adds	r3, r7, r3
   2f442:	781b      	ldrb	r3, [r3, #0]
   2f444:	2b00      	cmp	r3, #0
   2f446:	d003      	beq.n	2f450 <dir_register+0x144>
   2f448:	232f      	movs	r3, #47	; 0x2f
   2f44a:	18fb      	adds	r3, r7, r3
   2f44c:	781b      	ldrb	r3, [r3, #0]
   2f44e:	e0f9      	b.n	2f644 <dir_register+0x338>
	n = is = 0;
   2f450:	2328      	movs	r3, #40	; 0x28
   2f452:	18fb      	adds	r3, r7, r3
   2f454:	2200      	movs	r2, #0
   2f456:	801a      	strh	r2, [r3, #0]
   2f458:	232c      	movs	r3, #44	; 0x2c
   2f45a:	18fb      	adds	r3, r7, r3
   2f45c:	2228      	movs	r2, #40	; 0x28
   2f45e:	18ba      	adds	r2, r7, r2
   2f460:	8812      	ldrh	r2, [r2, #0]
   2f462:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2f464:	687b      	ldr	r3, [r7, #4]
   2f466:	681a      	ldr	r2, [r3, #0]
   2f468:	687b      	ldr	r3, [r7, #4]
   2f46a:	691b      	ldr	r3, [r3, #16]
   2f46c:	212f      	movs	r1, #47	; 0x2f
   2f46e:	187c      	adds	r4, r7, r1
   2f470:	0019      	movs	r1, r3
   2f472:	0010      	movs	r0, r2
   2f474:	4b7a      	ldr	r3, [pc, #488]	; (2f660 <dir_register+0x354>)
   2f476:	4798      	blx	r3
   2f478:	0003      	movs	r3, r0
   2f47a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2f47c:	232f      	movs	r3, #47	; 0x2f
   2f47e:	18fb      	adds	r3, r7, r3
   2f480:	781b      	ldrb	r3, [r3, #0]
   2f482:	2b00      	cmp	r3, #0
   2f484:	d13c      	bne.n	2f500 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2f486:	687b      	ldr	r3, [r7, #4]
   2f488:	695a      	ldr	r2, [r3, #20]
   2f48a:	231f      	movs	r3, #31
   2f48c:	18fb      	adds	r3, r7, r3
   2f48e:	7812      	ldrb	r2, [r2, #0]
   2f490:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2f492:	231f      	movs	r3, #31
   2f494:	18fb      	adds	r3, r7, r3
   2f496:	781b      	ldrb	r3, [r3, #0]
   2f498:	2be5      	cmp	r3, #229	; 0xe5
   2f49a:	d004      	beq.n	2f4a6 <dir_register+0x19a>
   2f49c:	231f      	movs	r3, #31
   2f49e:	18fb      	adds	r3, r7, r3
   2f4a0:	781b      	ldrb	r3, [r3, #0]
   2f4a2:	2b00      	cmp	r3, #0
   2f4a4:	d119      	bne.n	2f4da <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2f4a6:	232c      	movs	r3, #44	; 0x2c
   2f4a8:	18fb      	adds	r3, r7, r3
   2f4aa:	881b      	ldrh	r3, [r3, #0]
   2f4ac:	2b00      	cmp	r3, #0
   2f4ae:	d104      	bne.n	2f4ba <dir_register+0x1ae>
   2f4b0:	2328      	movs	r3, #40	; 0x28
   2f4b2:	18fb      	adds	r3, r7, r3
   2f4b4:	687a      	ldr	r2, [r7, #4]
   2f4b6:	88d2      	ldrh	r2, [r2, #6]
   2f4b8:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2f4ba:	232c      	movs	r3, #44	; 0x2c
   2f4bc:	18fb      	adds	r3, r7, r3
   2f4be:	222c      	movs	r2, #44	; 0x2c
   2f4c0:	18ba      	adds	r2, r7, r2
   2f4c2:	8812      	ldrh	r2, [r2, #0]
   2f4c4:	3201      	adds	r2, #1
   2f4c6:	801a      	strh	r2, [r3, #0]
   2f4c8:	232c      	movs	r3, #44	; 0x2c
   2f4ca:	18fa      	adds	r2, r7, r3
   2f4cc:	232a      	movs	r3, #42	; 0x2a
   2f4ce:	18fb      	adds	r3, r7, r3
   2f4d0:	8812      	ldrh	r2, [r2, #0]
   2f4d2:	881b      	ldrh	r3, [r3, #0]
   2f4d4:	429a      	cmp	r2, r3
   2f4d6:	d104      	bne.n	2f4e2 <dir_register+0x1d6>
   2f4d8:	e013      	b.n	2f502 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2f4da:	232c      	movs	r3, #44	; 0x2c
   2f4dc:	18fb      	adds	r3, r7, r3
   2f4de:	2200      	movs	r2, #0
   2f4e0:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2f4e2:	232f      	movs	r3, #47	; 0x2f
   2f4e4:	18fc      	adds	r4, r7, r3
   2f4e6:	687b      	ldr	r3, [r7, #4]
   2f4e8:	2101      	movs	r1, #1
   2f4ea:	0018      	movs	r0, r3
   2f4ec:	4b5d      	ldr	r3, [pc, #372]	; (2f664 <dir_register+0x358>)
   2f4ee:	4798      	blx	r3
   2f4f0:	0003      	movs	r3, r0
   2f4f2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2f4f4:	232f      	movs	r3, #47	; 0x2f
   2f4f6:	18fb      	adds	r3, r7, r3
   2f4f8:	781b      	ldrb	r3, [r3, #0]
   2f4fa:	2b00      	cmp	r3, #0
   2f4fc:	d0b2      	beq.n	2f464 <dir_register+0x158>
   2f4fe:	e000      	b.n	2f502 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2f500:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2f502:	232f      	movs	r3, #47	; 0x2f
   2f504:	18fb      	adds	r3, r7, r3
   2f506:	781b      	ldrb	r3, [r3, #0]
   2f508:	2b00      	cmp	r3, #0
   2f50a:	d163      	bne.n	2f5d4 <dir_register+0x2c8>
   2f50c:	232a      	movs	r3, #42	; 0x2a
   2f50e:	18fb      	adds	r3, r7, r3
   2f510:	881b      	ldrh	r3, [r3, #0]
   2f512:	2b01      	cmp	r3, #1
   2f514:	d95e      	bls.n	2f5d4 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2f516:	232f      	movs	r3, #47	; 0x2f
   2f518:	18fc      	adds	r4, r7, r3
   2f51a:	2328      	movs	r3, #40	; 0x28
   2f51c:	18fb      	adds	r3, r7, r3
   2f51e:	881a      	ldrh	r2, [r3, #0]
   2f520:	687b      	ldr	r3, [r7, #4]
   2f522:	0011      	movs	r1, r2
   2f524:	0018      	movs	r0, r3
   2f526:	4b4d      	ldr	r3, [pc, #308]	; (2f65c <dir_register+0x350>)
   2f528:	4798      	blx	r3
   2f52a:	0003      	movs	r3, r0
   2f52c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2f52e:	232f      	movs	r3, #47	; 0x2f
   2f530:	18fb      	adds	r3, r7, r3
   2f532:	781b      	ldrb	r3, [r3, #0]
   2f534:	2b00      	cmp	r3, #0
   2f536:	d14d      	bne.n	2f5d4 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2f538:	687b      	ldr	r3, [r7, #4]
   2f53a:	699b      	ldr	r3, [r3, #24]
   2f53c:	221e      	movs	r2, #30
   2f53e:	18bc      	adds	r4, r7, r2
   2f540:	0018      	movs	r0, r3
   2f542:	4b49      	ldr	r3, [pc, #292]	; (2f668 <dir_register+0x35c>)
   2f544:	4798      	blx	r3
   2f546:	0003      	movs	r3, r0
   2f548:	7023      	strb	r3, [r4, #0]
			ne--;
   2f54a:	232a      	movs	r3, #42	; 0x2a
   2f54c:	18fb      	adds	r3, r7, r3
   2f54e:	881a      	ldrh	r2, [r3, #0]
   2f550:	232a      	movs	r3, #42	; 0x2a
   2f552:	18fb      	adds	r3, r7, r3
   2f554:	3a01      	subs	r2, #1
   2f556:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2f558:	687b      	ldr	r3, [r7, #4]
   2f55a:	681a      	ldr	r2, [r3, #0]
   2f55c:	687b      	ldr	r3, [r7, #4]
   2f55e:	691b      	ldr	r3, [r3, #16]
   2f560:	212f      	movs	r1, #47	; 0x2f
   2f562:	187c      	adds	r4, r7, r1
   2f564:	0019      	movs	r1, r3
   2f566:	0010      	movs	r0, r2
   2f568:	4b3d      	ldr	r3, [pc, #244]	; (2f660 <dir_register+0x354>)
   2f56a:	4798      	blx	r3
   2f56c:	0003      	movs	r3, r0
   2f56e:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2f570:	232f      	movs	r3, #47	; 0x2f
   2f572:	18fb      	adds	r3, r7, r3
   2f574:	781b      	ldrb	r3, [r3, #0]
   2f576:	2b00      	cmp	r3, #0
   2f578:	d12b      	bne.n	2f5d2 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2f57a:	687b      	ldr	r3, [r7, #4]
   2f57c:	69d8      	ldr	r0, [r3, #28]
   2f57e:	687b      	ldr	r3, [r7, #4]
   2f580:	6959      	ldr	r1, [r3, #20]
   2f582:	232a      	movs	r3, #42	; 0x2a
   2f584:	18fb      	adds	r3, r7, r3
   2f586:	881b      	ldrh	r3, [r3, #0]
   2f588:	b2da      	uxtb	r2, r3
   2f58a:	231e      	movs	r3, #30
   2f58c:	18fb      	adds	r3, r7, r3
   2f58e:	781b      	ldrb	r3, [r3, #0]
   2f590:	4c36      	ldr	r4, [pc, #216]	; (2f66c <dir_register+0x360>)
   2f592:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2f594:	687b      	ldr	r3, [r7, #4]
   2f596:	681b      	ldr	r3, [r3, #0]
   2f598:	2201      	movs	r2, #1
   2f59a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2f59c:	232f      	movs	r3, #47	; 0x2f
   2f59e:	18fc      	adds	r4, r7, r3
   2f5a0:	687b      	ldr	r3, [r7, #4]
   2f5a2:	2100      	movs	r1, #0
   2f5a4:	0018      	movs	r0, r3
   2f5a6:	4b2f      	ldr	r3, [pc, #188]	; (2f664 <dir_register+0x358>)
   2f5a8:	4798      	blx	r3
   2f5aa:	0003      	movs	r3, r0
   2f5ac:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2f5ae:	232f      	movs	r3, #47	; 0x2f
   2f5b0:	18fb      	adds	r3, r7, r3
   2f5b2:	781b      	ldrb	r3, [r3, #0]
   2f5b4:	2b00      	cmp	r3, #0
   2f5b6:	d10d      	bne.n	2f5d4 <dir_register+0x2c8>
   2f5b8:	232a      	movs	r3, #42	; 0x2a
   2f5ba:	18fb      	adds	r3, r7, r3
   2f5bc:	222a      	movs	r2, #42	; 0x2a
   2f5be:	18ba      	adds	r2, r7, r2
   2f5c0:	8812      	ldrh	r2, [r2, #0]
   2f5c2:	3a01      	subs	r2, #1
   2f5c4:	801a      	strh	r2, [r3, #0]
   2f5c6:	232a      	movs	r3, #42	; 0x2a
   2f5c8:	18fb      	adds	r3, r7, r3
   2f5ca:	881b      	ldrh	r3, [r3, #0]
   2f5cc:	2b00      	cmp	r3, #0
   2f5ce:	d1c3      	bne.n	2f558 <dir_register+0x24c>
   2f5d0:	e000      	b.n	2f5d4 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2f5d2:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2f5d4:	232f      	movs	r3, #47	; 0x2f
   2f5d6:	18fb      	adds	r3, r7, r3
   2f5d8:	781b      	ldrb	r3, [r3, #0]
   2f5da:	2b00      	cmp	r3, #0
   2f5dc:	d12f      	bne.n	2f63e <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2f5de:	687b      	ldr	r3, [r7, #4]
   2f5e0:	681a      	ldr	r2, [r3, #0]
   2f5e2:	687b      	ldr	r3, [r7, #4]
   2f5e4:	691b      	ldr	r3, [r3, #16]
   2f5e6:	212f      	movs	r1, #47	; 0x2f
   2f5e8:	187c      	adds	r4, r7, r1
   2f5ea:	0019      	movs	r1, r3
   2f5ec:	0010      	movs	r0, r2
   2f5ee:	4b1c      	ldr	r3, [pc, #112]	; (2f660 <dir_register+0x354>)
   2f5f0:	4798      	blx	r3
   2f5f2:	0003      	movs	r3, r0
   2f5f4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2f5f6:	232f      	movs	r3, #47	; 0x2f
   2f5f8:	18fb      	adds	r3, r7, r3
   2f5fa:	781b      	ldrb	r3, [r3, #0]
   2f5fc:	2b00      	cmp	r3, #0
   2f5fe:	d11e      	bne.n	2f63e <dir_register+0x332>
			dir = dj->dir;
   2f600:	687b      	ldr	r3, [r7, #4]
   2f602:	695b      	ldr	r3, [r3, #20]
   2f604:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2f606:	69bb      	ldr	r3, [r7, #24]
   2f608:	2220      	movs	r2, #32
   2f60a:	2100      	movs	r1, #0
   2f60c:	0018      	movs	r0, r3
   2f60e:	4b18      	ldr	r3, [pc, #96]	; (2f670 <dir_register+0x364>)
   2f610:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2f612:	687b      	ldr	r3, [r7, #4]
   2f614:	6999      	ldr	r1, [r3, #24]
   2f616:	69bb      	ldr	r3, [r7, #24]
   2f618:	220b      	movs	r2, #11
   2f61a:	0018      	movs	r0, r3
   2f61c:	4b0b      	ldr	r3, [pc, #44]	; (2f64c <dir_register+0x340>)
   2f61e:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2f620:	69bb      	ldr	r3, [r7, #24]
   2f622:	330c      	adds	r3, #12
   2f624:	001a      	movs	r2, r3
   2f626:	687b      	ldr	r3, [r7, #4]
   2f628:	699b      	ldr	r3, [r3, #24]
   2f62a:	330b      	adds	r3, #11
   2f62c:	781b      	ldrb	r3, [r3, #0]
   2f62e:	2118      	movs	r1, #24
   2f630:	400b      	ands	r3, r1
   2f632:	b2db      	uxtb	r3, r3
   2f634:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2f636:	687b      	ldr	r3, [r7, #4]
   2f638:	681b      	ldr	r3, [r3, #0]
   2f63a:	2201      	movs	r2, #1
   2f63c:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2f63e:	232f      	movs	r3, #47	; 0x2f
   2f640:	18fb      	adds	r3, r7, r3
   2f642:	781b      	ldrb	r3, [r3, #0]
}
   2f644:	0018      	movs	r0, r3
   2f646:	46bd      	mov	sp, r7
   2f648:	b00d      	add	sp, #52	; 0x34
   2f64a:	bd90      	pop	{r4, r7, pc}
   2f64c:	0002e165 	.word	0x0002e165
   2f650:	0002efc1 	.word	0x0002efc1
   2f654:	0002f111 	.word	0x0002f111
   2f658:	0003555d 	.word	0x0003555d
   2f65c:	0002ea8d 	.word	0x0002ea8d
   2f660:	0002e249 	.word	0x0002e249
   2f664:	0002ebbd 	.word	0x0002ebbd
   2f668:	0002f0c1 	.word	0x0002f0c1
   2f66c:	0002eeb1 	.word	0x0002eeb1
   2f670:	0002e19d 	.word	0x0002e19d

0002f674 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2f674:	b590      	push	{r4, r7, lr}
   2f676:	b08b      	sub	sp, #44	; 0x2c
   2f678:	af00      	add	r7, sp, #0
   2f67a:	6078      	str	r0, [r7, #4]
   2f67c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2f67e:	683b      	ldr	r3, [r7, #0]
   2f680:	681b      	ldr	r3, [r3, #0]
   2f682:	613b      	str	r3, [r7, #16]
   2f684:	e002      	b.n	2f68c <create_name+0x18>
   2f686:	693b      	ldr	r3, [r7, #16]
   2f688:	3301      	adds	r3, #1
   2f68a:	613b      	str	r3, [r7, #16]
   2f68c:	693b      	ldr	r3, [r7, #16]
   2f68e:	781b      	ldrb	r3, [r3, #0]
   2f690:	2b2f      	cmp	r3, #47	; 0x2f
   2f692:	d0f8      	beq.n	2f686 <create_name+0x12>
   2f694:	693b      	ldr	r3, [r7, #16]
   2f696:	781b      	ldrb	r3, [r3, #0]
   2f698:	2b5c      	cmp	r3, #92	; 0x5c
   2f69a:	d0f4      	beq.n	2f686 <create_name+0x12>
	lfn = dj->lfn;
   2f69c:	687b      	ldr	r3, [r7, #4]
   2f69e:	69db      	ldr	r3, [r3, #28]
   2f6a0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2f6a2:	2300      	movs	r3, #0
   2f6a4:	617b      	str	r3, [r7, #20]
   2f6a6:	697b      	ldr	r3, [r7, #20]
   2f6a8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2f6aa:	69bb      	ldr	r3, [r7, #24]
   2f6ac:	1c5a      	adds	r2, r3, #1
   2f6ae:	61ba      	str	r2, [r7, #24]
   2f6b0:	693a      	ldr	r2, [r7, #16]
   2f6b2:	18d3      	adds	r3, r2, r3
   2f6b4:	781a      	ldrb	r2, [r3, #0]
   2f6b6:	2324      	movs	r3, #36	; 0x24
   2f6b8:	18fb      	adds	r3, r7, r3
   2f6ba:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2f6bc:	2324      	movs	r3, #36	; 0x24
   2f6be:	18fb      	adds	r3, r7, r3
   2f6c0:	881b      	ldrh	r3, [r3, #0]
   2f6c2:	2b1f      	cmp	r3, #31
   2f6c4:	d944      	bls.n	2f750 <create_name+0xdc>
   2f6c6:	2324      	movs	r3, #36	; 0x24
   2f6c8:	18fb      	adds	r3, r7, r3
   2f6ca:	881b      	ldrh	r3, [r3, #0]
   2f6cc:	2b2f      	cmp	r3, #47	; 0x2f
   2f6ce:	d03f      	beq.n	2f750 <create_name+0xdc>
   2f6d0:	2324      	movs	r3, #36	; 0x24
   2f6d2:	18fb      	adds	r3, r7, r3
   2f6d4:	881b      	ldrh	r3, [r3, #0]
   2f6d6:	2b5c      	cmp	r3, #92	; 0x5c
   2f6d8:	d03a      	beq.n	2f750 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2f6da:	697b      	ldr	r3, [r7, #20]
   2f6dc:	2bfe      	cmp	r3, #254	; 0xfe
   2f6de:	d901      	bls.n	2f6e4 <create_name+0x70>
			return FR_INVALID_NAME;
   2f6e0:	2306      	movs	r3, #6
   2f6e2:	e1e7      	b.n	2fab4 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2f6e4:	2324      	movs	r3, #36	; 0x24
   2f6e6:	18fb      	adds	r3, r7, r3
   2f6e8:	2224      	movs	r2, #36	; 0x24
   2f6ea:	18ba      	adds	r2, r7, r2
   2f6ec:	8812      	ldrh	r2, [r2, #0]
   2f6ee:	21ff      	movs	r1, #255	; 0xff
   2f6f0:	400a      	ands	r2, r1
   2f6f2:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2f6f4:	2324      	movs	r3, #36	; 0x24
   2f6f6:	18fc      	adds	r4, r7, r3
   2f6f8:	2324      	movs	r3, #36	; 0x24
   2f6fa:	18fb      	adds	r3, r7, r3
   2f6fc:	881b      	ldrh	r3, [r3, #0]
   2f6fe:	2101      	movs	r1, #1
   2f700:	0018      	movs	r0, r3
   2f702:	4bba      	ldr	r3, [pc, #744]	; (2f9ec <create_name+0x378>)
   2f704:	4798      	blx	r3
   2f706:	0003      	movs	r3, r0
   2f708:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2f70a:	2324      	movs	r3, #36	; 0x24
   2f70c:	18fb      	adds	r3, r7, r3
   2f70e:	881b      	ldrh	r3, [r3, #0]
   2f710:	2b00      	cmp	r3, #0
   2f712:	d101      	bne.n	2f718 <create_name+0xa4>
   2f714:	2306      	movs	r3, #6
   2f716:	e1cd      	b.n	2fab4 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2f718:	2324      	movs	r3, #36	; 0x24
   2f71a:	18fb      	adds	r3, r7, r3
   2f71c:	881b      	ldrh	r3, [r3, #0]
   2f71e:	2b7f      	cmp	r3, #127	; 0x7f
   2f720:	d80b      	bhi.n	2f73a <create_name+0xc6>
   2f722:	2324      	movs	r3, #36	; 0x24
   2f724:	18fb      	adds	r3, r7, r3
   2f726:	881a      	ldrh	r2, [r3, #0]
   2f728:	4bb1      	ldr	r3, [pc, #708]	; (2f9f0 <create_name+0x37c>)
   2f72a:	0011      	movs	r1, r2
   2f72c:	0018      	movs	r0, r3
   2f72e:	4bb1      	ldr	r3, [pc, #708]	; (2f9f4 <create_name+0x380>)
   2f730:	4798      	blx	r3
   2f732:	1e03      	subs	r3, r0, #0
   2f734:	d001      	beq.n	2f73a <create_name+0xc6>
			return FR_INVALID_NAME;
   2f736:	2306      	movs	r3, #6
   2f738:	e1bc      	b.n	2fab4 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2f73a:	697b      	ldr	r3, [r7, #20]
   2f73c:	1c5a      	adds	r2, r3, #1
   2f73e:	617a      	str	r2, [r7, #20]
   2f740:	005b      	lsls	r3, r3, #1
   2f742:	68fa      	ldr	r2, [r7, #12]
   2f744:	18d3      	adds	r3, r2, r3
   2f746:	2224      	movs	r2, #36	; 0x24
   2f748:	18ba      	adds	r2, r7, r2
   2f74a:	8812      	ldrh	r2, [r2, #0]
   2f74c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2f74e:	e7ac      	b.n	2f6aa <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2f750:	693a      	ldr	r2, [r7, #16]
   2f752:	69bb      	ldr	r3, [r7, #24]
   2f754:	18d2      	adds	r2, r2, r3
   2f756:	683b      	ldr	r3, [r7, #0]
   2f758:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2f75a:	2324      	movs	r3, #36	; 0x24
   2f75c:	18fb      	adds	r3, r7, r3
   2f75e:	881b      	ldrh	r3, [r3, #0]
   2f760:	2b1f      	cmp	r3, #31
   2f762:	d801      	bhi.n	2f768 <create_name+0xf4>
   2f764:	2204      	movs	r2, #4
   2f766:	e000      	b.n	2f76a <create_name+0xf6>
   2f768:	2200      	movs	r2, #0
   2f76a:	2326      	movs	r3, #38	; 0x26
   2f76c:	18fb      	adds	r3, r7, r3
   2f76e:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2f770:	e017      	b.n	2f7a2 <create_name+0x12e>
		w = lfn[di-1];
   2f772:	697b      	ldr	r3, [r7, #20]
   2f774:	4aa0      	ldr	r2, [pc, #640]	; (2f9f8 <create_name+0x384>)
   2f776:	4694      	mov	ip, r2
   2f778:	4463      	add	r3, ip
   2f77a:	005b      	lsls	r3, r3, #1
   2f77c:	68fa      	ldr	r2, [r7, #12]
   2f77e:	18d2      	adds	r2, r2, r3
   2f780:	2324      	movs	r3, #36	; 0x24
   2f782:	18fb      	adds	r3, r7, r3
   2f784:	8812      	ldrh	r2, [r2, #0]
   2f786:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2f788:	2324      	movs	r3, #36	; 0x24
   2f78a:	18fb      	adds	r3, r7, r3
   2f78c:	881b      	ldrh	r3, [r3, #0]
   2f78e:	2b20      	cmp	r3, #32
   2f790:	d004      	beq.n	2f79c <create_name+0x128>
   2f792:	2324      	movs	r3, #36	; 0x24
   2f794:	18fb      	adds	r3, r7, r3
   2f796:	881b      	ldrh	r3, [r3, #0]
   2f798:	2b2e      	cmp	r3, #46	; 0x2e
   2f79a:	d106      	bne.n	2f7aa <create_name+0x136>
		di--;
   2f79c:	697b      	ldr	r3, [r7, #20]
   2f79e:	3b01      	subs	r3, #1
   2f7a0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2f7a2:	697b      	ldr	r3, [r7, #20]
   2f7a4:	2b00      	cmp	r3, #0
   2f7a6:	d1e4      	bne.n	2f772 <create_name+0xfe>
   2f7a8:	e000      	b.n	2f7ac <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2f7aa:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2f7ac:	697b      	ldr	r3, [r7, #20]
   2f7ae:	2b00      	cmp	r3, #0
   2f7b0:	d101      	bne.n	2f7b6 <create_name+0x142>
   2f7b2:	2306      	movs	r3, #6
   2f7b4:	e17e      	b.n	2fab4 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2f7b6:	697b      	ldr	r3, [r7, #20]
   2f7b8:	005b      	lsls	r3, r3, #1
   2f7ba:	68fa      	ldr	r2, [r7, #12]
   2f7bc:	18d3      	adds	r3, r2, r3
   2f7be:	2200      	movs	r2, #0
   2f7c0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2f7c2:	687b      	ldr	r3, [r7, #4]
   2f7c4:	699b      	ldr	r3, [r3, #24]
   2f7c6:	220b      	movs	r2, #11
   2f7c8:	2120      	movs	r1, #32
   2f7ca:	0018      	movs	r0, r3
   2f7cc:	4b8b      	ldr	r3, [pc, #556]	; (2f9fc <create_name+0x388>)
   2f7ce:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2f7d0:	2300      	movs	r3, #0
   2f7d2:	61bb      	str	r3, [r7, #24]
   2f7d4:	e002      	b.n	2f7dc <create_name+0x168>
   2f7d6:	69bb      	ldr	r3, [r7, #24]
   2f7d8:	3301      	adds	r3, #1
   2f7da:	61bb      	str	r3, [r7, #24]
   2f7dc:	69bb      	ldr	r3, [r7, #24]
   2f7de:	005b      	lsls	r3, r3, #1
   2f7e0:	68fa      	ldr	r2, [r7, #12]
   2f7e2:	18d3      	adds	r3, r2, r3
   2f7e4:	881b      	ldrh	r3, [r3, #0]
   2f7e6:	2b20      	cmp	r3, #32
   2f7e8:	d0f5      	beq.n	2f7d6 <create_name+0x162>
   2f7ea:	69bb      	ldr	r3, [r7, #24]
   2f7ec:	005b      	lsls	r3, r3, #1
   2f7ee:	68fa      	ldr	r2, [r7, #12]
   2f7f0:	18d3      	adds	r3, r2, r3
   2f7f2:	881b      	ldrh	r3, [r3, #0]
   2f7f4:	2b2e      	cmp	r3, #46	; 0x2e
   2f7f6:	d0ee      	beq.n	2f7d6 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2f7f8:	69bb      	ldr	r3, [r7, #24]
   2f7fa:	2b00      	cmp	r3, #0
   2f7fc:	d00b      	beq.n	2f816 <create_name+0x1a2>
   2f7fe:	2326      	movs	r3, #38	; 0x26
   2f800:	18fb      	adds	r3, r7, r3
   2f802:	2226      	movs	r2, #38	; 0x26
   2f804:	18ba      	adds	r2, r7, r2
   2f806:	7812      	ldrb	r2, [r2, #0]
   2f808:	2103      	movs	r1, #3
   2f80a:	430a      	orrs	r2, r1
   2f80c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2f80e:	e002      	b.n	2f816 <create_name+0x1a2>
   2f810:	697b      	ldr	r3, [r7, #20]
   2f812:	3b01      	subs	r3, #1
   2f814:	617b      	str	r3, [r7, #20]
   2f816:	697b      	ldr	r3, [r7, #20]
   2f818:	2b00      	cmp	r3, #0
   2f81a:	d009      	beq.n	2f830 <create_name+0x1bc>
   2f81c:	697b      	ldr	r3, [r7, #20]
   2f81e:	4a76      	ldr	r2, [pc, #472]	; (2f9f8 <create_name+0x384>)
   2f820:	4694      	mov	ip, r2
   2f822:	4463      	add	r3, ip
   2f824:	005b      	lsls	r3, r3, #1
   2f826:	68fa      	ldr	r2, [r7, #12]
   2f828:	18d3      	adds	r3, r2, r3
   2f82a:	881b      	ldrh	r3, [r3, #0]
   2f82c:	2b2e      	cmp	r3, #46	; 0x2e
   2f82e:	d1ef      	bne.n	2f810 <create_name+0x19c>

	b = i = 0; ni = 8;
   2f830:	2300      	movs	r3, #0
   2f832:	623b      	str	r3, [r7, #32]
   2f834:	2327      	movs	r3, #39	; 0x27
   2f836:	18fb      	adds	r3, r7, r3
   2f838:	2200      	movs	r2, #0
   2f83a:	701a      	strb	r2, [r3, #0]
   2f83c:	2308      	movs	r3, #8
   2f83e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2f840:	69bb      	ldr	r3, [r7, #24]
   2f842:	1c5a      	adds	r2, r3, #1
   2f844:	61ba      	str	r2, [r7, #24]
   2f846:	005b      	lsls	r3, r3, #1
   2f848:	68fa      	ldr	r2, [r7, #12]
   2f84a:	18d2      	adds	r2, r2, r3
   2f84c:	2324      	movs	r3, #36	; 0x24
   2f84e:	18fb      	adds	r3, r7, r3
   2f850:	8812      	ldrh	r2, [r2, #0]
   2f852:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2f854:	2324      	movs	r3, #36	; 0x24
   2f856:	18fb      	adds	r3, r7, r3
   2f858:	881b      	ldrh	r3, [r3, #0]
   2f85a:	2b00      	cmp	r3, #0
   2f85c:	d100      	bne.n	2f860 <create_name+0x1ec>
   2f85e:	e0c3      	b.n	2f9e8 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2f860:	2324      	movs	r3, #36	; 0x24
   2f862:	18fb      	adds	r3, r7, r3
   2f864:	881b      	ldrh	r3, [r3, #0]
   2f866:	2b20      	cmp	r3, #32
   2f868:	d008      	beq.n	2f87c <create_name+0x208>
   2f86a:	2324      	movs	r3, #36	; 0x24
   2f86c:	18fb      	adds	r3, r7, r3
   2f86e:	881b      	ldrh	r3, [r3, #0]
   2f870:	2b2e      	cmp	r3, #46	; 0x2e
   2f872:	d10c      	bne.n	2f88e <create_name+0x21a>
   2f874:	69ba      	ldr	r2, [r7, #24]
   2f876:	697b      	ldr	r3, [r7, #20]
   2f878:	429a      	cmp	r2, r3
   2f87a:	d008      	beq.n	2f88e <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2f87c:	2326      	movs	r3, #38	; 0x26
   2f87e:	18fb      	adds	r3, r7, r3
   2f880:	2226      	movs	r2, #38	; 0x26
   2f882:	18ba      	adds	r2, r7, r2
   2f884:	7812      	ldrb	r2, [r2, #0]
   2f886:	2103      	movs	r1, #3
   2f888:	430a      	orrs	r2, r1
   2f88a:	701a      	strb	r2, [r3, #0]
   2f88c:	e0ab      	b.n	2f9e6 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2f88e:	6a3a      	ldr	r2, [r7, #32]
   2f890:	69fb      	ldr	r3, [r7, #28]
   2f892:	429a      	cmp	r2, r3
   2f894:	d203      	bcs.n	2f89e <create_name+0x22a>
   2f896:	69ba      	ldr	r2, [r7, #24]
   2f898:	697b      	ldr	r3, [r7, #20]
   2f89a:	429a      	cmp	r2, r3
   2f89c:	d12a      	bne.n	2f8f4 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2f89e:	69fb      	ldr	r3, [r7, #28]
   2f8a0:	2b0b      	cmp	r3, #11
   2f8a2:	d108      	bne.n	2f8b6 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2f8a4:	2326      	movs	r3, #38	; 0x26
   2f8a6:	18fb      	adds	r3, r7, r3
   2f8a8:	2226      	movs	r2, #38	; 0x26
   2f8aa:	18ba      	adds	r2, r7, r2
   2f8ac:	7812      	ldrb	r2, [r2, #0]
   2f8ae:	2103      	movs	r1, #3
   2f8b0:	430a      	orrs	r2, r1
   2f8b2:	701a      	strb	r2, [r3, #0]
   2f8b4:	e0a9      	b.n	2fa0a <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2f8b6:	69ba      	ldr	r2, [r7, #24]
   2f8b8:	697b      	ldr	r3, [r7, #20]
   2f8ba:	429a      	cmp	r2, r3
   2f8bc:	d007      	beq.n	2f8ce <create_name+0x25a>
   2f8be:	2326      	movs	r3, #38	; 0x26
   2f8c0:	18fb      	adds	r3, r7, r3
   2f8c2:	2226      	movs	r2, #38	; 0x26
   2f8c4:	18ba      	adds	r2, r7, r2
   2f8c6:	7812      	ldrb	r2, [r2, #0]
   2f8c8:	2103      	movs	r1, #3
   2f8ca:	430a      	orrs	r2, r1
   2f8cc:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2f8ce:	69ba      	ldr	r2, [r7, #24]
   2f8d0:	697b      	ldr	r3, [r7, #20]
   2f8d2:	429a      	cmp	r2, r3
   2f8d4:	d900      	bls.n	2f8d8 <create_name+0x264>
   2f8d6:	e097      	b.n	2fa08 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2f8d8:	697b      	ldr	r3, [r7, #20]
   2f8da:	61bb      	str	r3, [r7, #24]
   2f8dc:	2308      	movs	r3, #8
   2f8de:	623b      	str	r3, [r7, #32]
   2f8e0:	230b      	movs	r3, #11
   2f8e2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2f8e4:	2327      	movs	r3, #39	; 0x27
   2f8e6:	18fb      	adds	r3, r7, r3
   2f8e8:	2227      	movs	r2, #39	; 0x27
   2f8ea:	18ba      	adds	r2, r7, r2
   2f8ec:	7812      	ldrb	r2, [r2, #0]
   2f8ee:	0092      	lsls	r2, r2, #2
   2f8f0:	701a      	strb	r2, [r3, #0]
   2f8f2:	e078      	b.n	2f9e6 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2f8f4:	2324      	movs	r3, #36	; 0x24
   2f8f6:	18fb      	adds	r3, r7, r3
   2f8f8:	881b      	ldrh	r3, [r3, #0]
   2f8fa:	2b7f      	cmp	r3, #127	; 0x7f
   2f8fc:	d920      	bls.n	2f940 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2f8fe:	2324      	movs	r3, #36	; 0x24
   2f900:	18fc      	adds	r4, r7, r3
   2f902:	2324      	movs	r3, #36	; 0x24
   2f904:	18fb      	adds	r3, r7, r3
   2f906:	881b      	ldrh	r3, [r3, #0]
   2f908:	2100      	movs	r1, #0
   2f90a:	0018      	movs	r0, r3
   2f90c:	4b37      	ldr	r3, [pc, #220]	; (2f9ec <create_name+0x378>)
   2f90e:	4798      	blx	r3
   2f910:	0003      	movs	r3, r0
   2f912:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2f914:	2324      	movs	r3, #36	; 0x24
   2f916:	18fb      	adds	r3, r7, r3
   2f918:	881b      	ldrh	r3, [r3, #0]
   2f91a:	2b00      	cmp	r3, #0
   2f91c:	d008      	beq.n	2f930 <create_name+0x2bc>
   2f91e:	2324      	movs	r3, #36	; 0x24
   2f920:	18fb      	adds	r3, r7, r3
   2f922:	881b      	ldrh	r3, [r3, #0]
   2f924:	3b80      	subs	r3, #128	; 0x80
   2f926:	4a36      	ldr	r2, [pc, #216]	; (2fa00 <create_name+0x38c>)
   2f928:	5cd2      	ldrb	r2, [r2, r3]
   2f92a:	2324      	movs	r3, #36	; 0x24
   2f92c:	18fb      	adds	r3, r7, r3
   2f92e:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2f930:	2326      	movs	r3, #38	; 0x26
   2f932:	18fb      	adds	r3, r7, r3
   2f934:	2226      	movs	r2, #38	; 0x26
   2f936:	18ba      	adds	r2, r7, r2
   2f938:	7812      	ldrb	r2, [r2, #0]
   2f93a:	2102      	movs	r1, #2
   2f93c:	430a      	orrs	r2, r1
   2f93e:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2f940:	2324      	movs	r3, #36	; 0x24
   2f942:	18fb      	adds	r3, r7, r3
   2f944:	881b      	ldrh	r3, [r3, #0]
   2f946:	2b00      	cmp	r3, #0
   2f948:	d009      	beq.n	2f95e <create_name+0x2ea>
   2f94a:	2324      	movs	r3, #36	; 0x24
   2f94c:	18fb      	adds	r3, r7, r3
   2f94e:	881a      	ldrh	r2, [r3, #0]
   2f950:	4b2c      	ldr	r3, [pc, #176]	; (2fa04 <create_name+0x390>)
   2f952:	0011      	movs	r1, r2
   2f954:	0018      	movs	r0, r3
   2f956:	4b27      	ldr	r3, [pc, #156]	; (2f9f4 <create_name+0x380>)
   2f958:	4798      	blx	r3
   2f95a:	1e03      	subs	r3, r0, #0
   2f95c:	d00c      	beq.n	2f978 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2f95e:	2324      	movs	r3, #36	; 0x24
   2f960:	18fb      	adds	r3, r7, r3
   2f962:	225f      	movs	r2, #95	; 0x5f
   2f964:	801a      	strh	r2, [r3, #0]
   2f966:	2326      	movs	r3, #38	; 0x26
   2f968:	18fb      	adds	r3, r7, r3
   2f96a:	2226      	movs	r2, #38	; 0x26
   2f96c:	18ba      	adds	r2, r7, r2
   2f96e:	7812      	ldrb	r2, [r2, #0]
   2f970:	2103      	movs	r1, #3
   2f972:	430a      	orrs	r2, r1
   2f974:	701a      	strb	r2, [r3, #0]
   2f976:	e02b      	b.n	2f9d0 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2f978:	2324      	movs	r3, #36	; 0x24
   2f97a:	18fb      	adds	r3, r7, r3
   2f97c:	881b      	ldrh	r3, [r3, #0]
   2f97e:	2b40      	cmp	r3, #64	; 0x40
   2f980:	d90d      	bls.n	2f99e <create_name+0x32a>
   2f982:	2324      	movs	r3, #36	; 0x24
   2f984:	18fb      	adds	r3, r7, r3
   2f986:	881b      	ldrh	r3, [r3, #0]
   2f988:	2b5a      	cmp	r3, #90	; 0x5a
   2f98a:	d808      	bhi.n	2f99e <create_name+0x32a>
					b |= 2;
   2f98c:	2327      	movs	r3, #39	; 0x27
   2f98e:	18fb      	adds	r3, r7, r3
   2f990:	2227      	movs	r2, #39	; 0x27
   2f992:	18ba      	adds	r2, r7, r2
   2f994:	7812      	ldrb	r2, [r2, #0]
   2f996:	2102      	movs	r1, #2
   2f998:	430a      	orrs	r2, r1
   2f99a:	701a      	strb	r2, [r3, #0]
   2f99c:	e018      	b.n	2f9d0 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2f99e:	2324      	movs	r3, #36	; 0x24
   2f9a0:	18fb      	adds	r3, r7, r3
   2f9a2:	881b      	ldrh	r3, [r3, #0]
   2f9a4:	2b60      	cmp	r3, #96	; 0x60
   2f9a6:	d913      	bls.n	2f9d0 <create_name+0x35c>
   2f9a8:	2324      	movs	r3, #36	; 0x24
   2f9aa:	18fb      	adds	r3, r7, r3
   2f9ac:	881b      	ldrh	r3, [r3, #0]
   2f9ae:	2b7a      	cmp	r3, #122	; 0x7a
   2f9b0:	d80e      	bhi.n	2f9d0 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2f9b2:	2327      	movs	r3, #39	; 0x27
   2f9b4:	18fb      	adds	r3, r7, r3
   2f9b6:	2227      	movs	r2, #39	; 0x27
   2f9b8:	18ba      	adds	r2, r7, r2
   2f9ba:	7812      	ldrb	r2, [r2, #0]
   2f9bc:	2101      	movs	r1, #1
   2f9be:	430a      	orrs	r2, r1
   2f9c0:	701a      	strb	r2, [r3, #0]
   2f9c2:	2324      	movs	r3, #36	; 0x24
   2f9c4:	18fb      	adds	r3, r7, r3
   2f9c6:	2224      	movs	r2, #36	; 0x24
   2f9c8:	18ba      	adds	r2, r7, r2
   2f9ca:	8812      	ldrh	r2, [r2, #0]
   2f9cc:	3a20      	subs	r2, #32
   2f9ce:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2f9d0:	687b      	ldr	r3, [r7, #4]
   2f9d2:	699a      	ldr	r2, [r3, #24]
   2f9d4:	6a3b      	ldr	r3, [r7, #32]
   2f9d6:	1c59      	adds	r1, r3, #1
   2f9d8:	6239      	str	r1, [r7, #32]
   2f9da:	18d3      	adds	r3, r2, r3
   2f9dc:	2224      	movs	r2, #36	; 0x24
   2f9de:	18ba      	adds	r2, r7, r2
   2f9e0:	8812      	ldrh	r2, [r2, #0]
   2f9e2:	b2d2      	uxtb	r2, r2
   2f9e4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2f9e6:	e72b      	b.n	2f840 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2f9e8:	46c0      	nop			; (mov r8, r8)
   2f9ea:	e00e      	b.n	2fa0a <create_name+0x396>
   2f9ec:	00030dad 	.word	0x00030dad
   2f9f0:	0003c700 	.word	0x0003c700
   2f9f4:	0002e217 	.word	0x0002e217
   2f9f8:	7fffffff 	.word	0x7fffffff
   2f9fc:	0002e19d 	.word	0x0002e19d
   2fa00:	0003c748 	.word	0x0003c748
   2fa04:	0003c70c 	.word	0x0003c70c
			if (si > di) break;			/* No extension */
   2fa08:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2fa0a:	687b      	ldr	r3, [r7, #4]
   2fa0c:	699b      	ldr	r3, [r3, #24]
   2fa0e:	781b      	ldrb	r3, [r3, #0]
   2fa10:	2be5      	cmp	r3, #229	; 0xe5
   2fa12:	d103      	bne.n	2fa1c <create_name+0x3a8>
   2fa14:	687b      	ldr	r3, [r7, #4]
   2fa16:	699b      	ldr	r3, [r3, #24]
   2fa18:	2205      	movs	r2, #5
   2fa1a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2fa1c:	69fb      	ldr	r3, [r7, #28]
   2fa1e:	2b08      	cmp	r3, #8
   2fa20:	d106      	bne.n	2fa30 <create_name+0x3bc>
   2fa22:	2327      	movs	r3, #39	; 0x27
   2fa24:	18fb      	adds	r3, r7, r3
   2fa26:	2227      	movs	r2, #39	; 0x27
   2fa28:	18ba      	adds	r2, r7, r2
   2fa2a:	7812      	ldrb	r2, [r2, #0]
   2fa2c:	0092      	lsls	r2, r2, #2
   2fa2e:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2fa30:	2327      	movs	r3, #39	; 0x27
   2fa32:	18fb      	adds	r3, r7, r3
   2fa34:	781b      	ldrb	r3, [r3, #0]
   2fa36:	220c      	movs	r2, #12
   2fa38:	4013      	ands	r3, r2
   2fa3a:	2b0c      	cmp	r3, #12
   2fa3c:	d006      	beq.n	2fa4c <create_name+0x3d8>
   2fa3e:	2327      	movs	r3, #39	; 0x27
   2fa40:	18fb      	adds	r3, r7, r3
   2fa42:	781b      	ldrb	r3, [r3, #0]
   2fa44:	2203      	movs	r2, #3
   2fa46:	4013      	ands	r3, r2
   2fa48:	2b03      	cmp	r3, #3
   2fa4a:	d107      	bne.n	2fa5c <create_name+0x3e8>
		cf |= NS_LFN;
   2fa4c:	2326      	movs	r3, #38	; 0x26
   2fa4e:	18fb      	adds	r3, r7, r3
   2fa50:	2226      	movs	r2, #38	; 0x26
   2fa52:	18ba      	adds	r2, r7, r2
   2fa54:	7812      	ldrb	r2, [r2, #0]
   2fa56:	2102      	movs	r1, #2
   2fa58:	430a      	orrs	r2, r1
   2fa5a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2fa5c:	2326      	movs	r3, #38	; 0x26
   2fa5e:	18fb      	adds	r3, r7, r3
   2fa60:	781b      	ldrb	r3, [r3, #0]
   2fa62:	2202      	movs	r2, #2
   2fa64:	4013      	ands	r3, r2
   2fa66:	d11d      	bne.n	2faa4 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2fa68:	2327      	movs	r3, #39	; 0x27
   2fa6a:	18fb      	adds	r3, r7, r3
   2fa6c:	781b      	ldrb	r3, [r3, #0]
   2fa6e:	2203      	movs	r2, #3
   2fa70:	4013      	ands	r3, r2
   2fa72:	2b01      	cmp	r3, #1
   2fa74:	d107      	bne.n	2fa86 <create_name+0x412>
   2fa76:	2326      	movs	r3, #38	; 0x26
   2fa78:	18fb      	adds	r3, r7, r3
   2fa7a:	2226      	movs	r2, #38	; 0x26
   2fa7c:	18ba      	adds	r2, r7, r2
   2fa7e:	7812      	ldrb	r2, [r2, #0]
   2fa80:	2110      	movs	r1, #16
   2fa82:	430a      	orrs	r2, r1
   2fa84:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2fa86:	2327      	movs	r3, #39	; 0x27
   2fa88:	18fb      	adds	r3, r7, r3
   2fa8a:	781b      	ldrb	r3, [r3, #0]
   2fa8c:	220c      	movs	r2, #12
   2fa8e:	4013      	ands	r3, r2
   2fa90:	2b04      	cmp	r3, #4
   2fa92:	d107      	bne.n	2faa4 <create_name+0x430>
   2fa94:	2326      	movs	r3, #38	; 0x26
   2fa96:	18fb      	adds	r3, r7, r3
   2fa98:	2226      	movs	r2, #38	; 0x26
   2fa9a:	18ba      	adds	r2, r7, r2
   2fa9c:	7812      	ldrb	r2, [r2, #0]
   2fa9e:	2108      	movs	r1, #8
   2faa0:	430a      	orrs	r2, r1
   2faa2:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2faa4:	687b      	ldr	r3, [r7, #4]
   2faa6:	699b      	ldr	r3, [r3, #24]
   2faa8:	330b      	adds	r3, #11
   2faaa:	2226      	movs	r2, #38	; 0x26
   2faac:	18ba      	adds	r2, r7, r2
   2faae:	7812      	ldrb	r2, [r2, #0]
   2fab0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2fab2:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2fab4:	0018      	movs	r0, r3
   2fab6:	46bd      	mov	sp, r7
   2fab8:	b00b      	add	sp, #44	; 0x2c
   2faba:	bd90      	pop	{r4, r7, pc}

0002fabc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2fabc:	b590      	push	{r4, r7, lr}
   2fabe:	b085      	sub	sp, #20
   2fac0:	af00      	add	r7, sp, #0
   2fac2:	6078      	str	r0, [r7, #4]
   2fac4:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2fac6:	683b      	ldr	r3, [r7, #0]
   2fac8:	781b      	ldrb	r3, [r3, #0]
   2faca:	2b2f      	cmp	r3, #47	; 0x2f
   2facc:	d003      	beq.n	2fad6 <follow_path+0x1a>
   2face:	683b      	ldr	r3, [r7, #0]
   2fad0:	781b      	ldrb	r3, [r3, #0]
   2fad2:	2b5c      	cmp	r3, #92	; 0x5c
   2fad4:	d102      	bne.n	2fadc <follow_path+0x20>
		path++;
   2fad6:	683b      	ldr	r3, [r7, #0]
   2fad8:	3301      	adds	r3, #1
   2fada:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2fadc:	687b      	ldr	r3, [r7, #4]
   2fade:	2200      	movs	r2, #0
   2fae0:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2fae2:	683b      	ldr	r3, [r7, #0]
   2fae4:	781b      	ldrb	r3, [r3, #0]
   2fae6:	2b1f      	cmp	r3, #31
   2fae8:	d80c      	bhi.n	2fb04 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2faea:	230f      	movs	r3, #15
   2faec:	18fc      	adds	r4, r7, r3
   2faee:	687b      	ldr	r3, [r7, #4]
   2faf0:	2100      	movs	r1, #0
   2faf2:	0018      	movs	r0, r3
   2faf4:	4b3c      	ldr	r3, [pc, #240]	; (2fbe8 <follow_path+0x12c>)
   2faf6:	4798      	blx	r3
   2faf8:	0003      	movs	r3, r0
   2fafa:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2fafc:	687b      	ldr	r3, [r7, #4]
   2fafe:	2200      	movs	r2, #0
   2fb00:	615a      	str	r2, [r3, #20]
   2fb02:	e06a      	b.n	2fbda <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2fb04:	230f      	movs	r3, #15
   2fb06:	18fc      	adds	r4, r7, r3
   2fb08:	003a      	movs	r2, r7
   2fb0a:	687b      	ldr	r3, [r7, #4]
   2fb0c:	0011      	movs	r1, r2
   2fb0e:	0018      	movs	r0, r3
   2fb10:	4b36      	ldr	r3, [pc, #216]	; (2fbec <follow_path+0x130>)
   2fb12:	4798      	blx	r3
   2fb14:	0003      	movs	r3, r0
   2fb16:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2fb18:	230f      	movs	r3, #15
   2fb1a:	18fb      	adds	r3, r7, r3
   2fb1c:	781b      	ldrb	r3, [r3, #0]
   2fb1e:	2b00      	cmp	r3, #0
   2fb20:	d154      	bne.n	2fbcc <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2fb22:	230f      	movs	r3, #15
   2fb24:	18fc      	adds	r4, r7, r3
   2fb26:	687b      	ldr	r3, [r7, #4]
   2fb28:	0018      	movs	r0, r3
   2fb2a:	4b31      	ldr	r3, [pc, #196]	; (2fbf0 <follow_path+0x134>)
   2fb2c:	4798      	blx	r3
   2fb2e:	0003      	movs	r3, r0
   2fb30:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2fb32:	687b      	ldr	r3, [r7, #4]
   2fb34:	699a      	ldr	r2, [r3, #24]
   2fb36:	230e      	movs	r3, #14
   2fb38:	18fb      	adds	r3, r7, r3
   2fb3a:	7ad2      	ldrb	r2, [r2, #11]
   2fb3c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2fb3e:	230f      	movs	r3, #15
   2fb40:	18fb      	adds	r3, r7, r3
   2fb42:	781b      	ldrb	r3, [r3, #0]
   2fb44:	2b00      	cmp	r3, #0
   2fb46:	d00f      	beq.n	2fb68 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2fb48:	230f      	movs	r3, #15
   2fb4a:	18fb      	adds	r3, r7, r3
   2fb4c:	781b      	ldrb	r3, [r3, #0]
   2fb4e:	2b04      	cmp	r3, #4
   2fb50:	d13e      	bne.n	2fbd0 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2fb52:	230e      	movs	r3, #14
   2fb54:	18fb      	adds	r3, r7, r3
   2fb56:	781b      	ldrb	r3, [r3, #0]
   2fb58:	2204      	movs	r2, #4
   2fb5a:	4013      	ands	r3, r2
   2fb5c:	d13a      	bne.n	2fbd4 <follow_path+0x118>
   2fb5e:	230f      	movs	r3, #15
   2fb60:	18fb      	adds	r3, r7, r3
   2fb62:	2205      	movs	r2, #5
   2fb64:	701a      	strb	r2, [r3, #0]
				}
				break;
   2fb66:	e035      	b.n	2fbd4 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2fb68:	230e      	movs	r3, #14
   2fb6a:	18fb      	adds	r3, r7, r3
   2fb6c:	781b      	ldrb	r3, [r3, #0]
   2fb6e:	2204      	movs	r2, #4
   2fb70:	4013      	ands	r3, r2
   2fb72:	d131      	bne.n	2fbd8 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2fb74:	687b      	ldr	r3, [r7, #4]
   2fb76:	695b      	ldr	r3, [r3, #20]
   2fb78:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2fb7a:	68bb      	ldr	r3, [r7, #8]
   2fb7c:	330b      	adds	r3, #11
   2fb7e:	781b      	ldrb	r3, [r3, #0]
   2fb80:	001a      	movs	r2, r3
   2fb82:	2310      	movs	r3, #16
   2fb84:	4013      	ands	r3, r2
   2fb86:	d104      	bne.n	2fb92 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2fb88:	230f      	movs	r3, #15
   2fb8a:	18fb      	adds	r3, r7, r3
   2fb8c:	2205      	movs	r2, #5
   2fb8e:	701a      	strb	r2, [r3, #0]
   2fb90:	e023      	b.n	2fbda <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2fb92:	68bb      	ldr	r3, [r7, #8]
   2fb94:	3315      	adds	r3, #21
   2fb96:	781b      	ldrb	r3, [r3, #0]
   2fb98:	021b      	lsls	r3, r3, #8
   2fb9a:	b21a      	sxth	r2, r3
   2fb9c:	68bb      	ldr	r3, [r7, #8]
   2fb9e:	3314      	adds	r3, #20
   2fba0:	781b      	ldrb	r3, [r3, #0]
   2fba2:	b21b      	sxth	r3, r3
   2fba4:	4313      	orrs	r3, r2
   2fba6:	b21b      	sxth	r3, r3
   2fba8:	b29b      	uxth	r3, r3
   2fbaa:	041b      	lsls	r3, r3, #16
   2fbac:	68ba      	ldr	r2, [r7, #8]
   2fbae:	321b      	adds	r2, #27
   2fbb0:	7812      	ldrb	r2, [r2, #0]
   2fbb2:	0212      	lsls	r2, r2, #8
   2fbb4:	b211      	sxth	r1, r2
   2fbb6:	68ba      	ldr	r2, [r7, #8]
   2fbb8:	321a      	adds	r2, #26
   2fbba:	7812      	ldrb	r2, [r2, #0]
   2fbbc:	b212      	sxth	r2, r2
   2fbbe:	430a      	orrs	r2, r1
   2fbc0:	b212      	sxth	r2, r2
   2fbc2:	b292      	uxth	r2, r2
   2fbc4:	431a      	orrs	r2, r3
   2fbc6:	687b      	ldr	r3, [r7, #4]
   2fbc8:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2fbca:	e79b      	b.n	2fb04 <follow_path+0x48>
			if (res != FR_OK) break;
   2fbcc:	46c0      	nop			; (mov r8, r8)
   2fbce:	e004      	b.n	2fbda <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2fbd0:	46c0      	nop			; (mov r8, r8)
   2fbd2:	e002      	b.n	2fbda <follow_path+0x11e>
				break;
   2fbd4:	46c0      	nop			; (mov r8, r8)
   2fbd6:	e000      	b.n	2fbda <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2fbd8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2fbda:	230f      	movs	r3, #15
   2fbdc:	18fb      	adds	r3, r7, r3
   2fbde:	781b      	ldrb	r3, [r3, #0]
}
   2fbe0:	0018      	movs	r0, r3
   2fbe2:	46bd      	mov	sp, r7
   2fbe4:	b005      	add	sp, #20
   2fbe6:	bd90      	pop	{r4, r7, pc}
   2fbe8:	0002ea8d 	.word	0x0002ea8d
   2fbec:	0002f675 	.word	0x0002f675
   2fbf0:	0002f111 	.word	0x0002f111

0002fbf4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2fbf4:	b590      	push	{r4, r7, lr}
   2fbf6:	b083      	sub	sp, #12
   2fbf8:	af00      	add	r7, sp, #0
   2fbfa:	6078      	str	r0, [r7, #4]
   2fbfc:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2fbfe:	687b      	ldr	r3, [r7, #4]
   2fc00:	7858      	ldrb	r0, [r3, #1]
   2fc02:	687b      	ldr	r3, [r7, #4]
   2fc04:	3330      	adds	r3, #48	; 0x30
   2fc06:	0019      	movs	r1, r3
   2fc08:	683a      	ldr	r2, [r7, #0]
   2fc0a:	2301      	movs	r3, #1
   2fc0c:	4c2a      	ldr	r4, [pc, #168]	; (2fcb8 <check_fs+0xc4>)
   2fc0e:	47a0      	blx	r4
   2fc10:	1e03      	subs	r3, r0, #0
   2fc12:	d001      	beq.n	2fc18 <check_fs+0x24>
		return 3;
   2fc14:	2303      	movs	r3, #3
   2fc16:	e04b      	b.n	2fcb0 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2fc18:	687b      	ldr	r3, [r7, #4]
   2fc1a:	4a28      	ldr	r2, [pc, #160]	; (2fcbc <check_fs+0xc8>)
   2fc1c:	4694      	mov	ip, r2
   2fc1e:	4463      	add	r3, ip
   2fc20:	3301      	adds	r3, #1
   2fc22:	781b      	ldrb	r3, [r3, #0]
   2fc24:	021b      	lsls	r3, r3, #8
   2fc26:	b21a      	sxth	r2, r3
   2fc28:	687b      	ldr	r3, [r7, #4]
   2fc2a:	4924      	ldr	r1, [pc, #144]	; (2fcbc <check_fs+0xc8>)
   2fc2c:	5c5b      	ldrb	r3, [r3, r1]
   2fc2e:	b21b      	sxth	r3, r3
   2fc30:	4313      	orrs	r3, r2
   2fc32:	b21b      	sxth	r3, r3
   2fc34:	4a22      	ldr	r2, [pc, #136]	; (2fcc0 <check_fs+0xcc>)
   2fc36:	4293      	cmp	r3, r2
   2fc38:	d001      	beq.n	2fc3e <check_fs+0x4a>
		return 2;
   2fc3a:	2302      	movs	r3, #2
   2fc3c:	e038      	b.n	2fcb0 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2fc3e:	687b      	ldr	r3, [r7, #4]
   2fc40:	3366      	adds	r3, #102	; 0x66
   2fc42:	3303      	adds	r3, #3
   2fc44:	781b      	ldrb	r3, [r3, #0]
   2fc46:	061a      	lsls	r2, r3, #24
   2fc48:	687b      	ldr	r3, [r7, #4]
   2fc4a:	3366      	adds	r3, #102	; 0x66
   2fc4c:	3302      	adds	r3, #2
   2fc4e:	781b      	ldrb	r3, [r3, #0]
   2fc50:	041b      	lsls	r3, r3, #16
   2fc52:	4313      	orrs	r3, r2
   2fc54:	687a      	ldr	r2, [r7, #4]
   2fc56:	3266      	adds	r2, #102	; 0x66
   2fc58:	3201      	adds	r2, #1
   2fc5a:	7812      	ldrb	r2, [r2, #0]
   2fc5c:	0212      	lsls	r2, r2, #8
   2fc5e:	4313      	orrs	r3, r2
   2fc60:	687a      	ldr	r2, [r7, #4]
   2fc62:	2166      	movs	r1, #102	; 0x66
   2fc64:	5c52      	ldrb	r2, [r2, r1]
   2fc66:	4313      	orrs	r3, r2
   2fc68:	021b      	lsls	r3, r3, #8
   2fc6a:	0a1b      	lsrs	r3, r3, #8
   2fc6c:	4a15      	ldr	r2, [pc, #84]	; (2fcc4 <check_fs+0xd0>)
   2fc6e:	4293      	cmp	r3, r2
   2fc70:	d101      	bne.n	2fc76 <check_fs+0x82>
		return 0;
   2fc72:	2300      	movs	r3, #0
   2fc74:	e01c      	b.n	2fcb0 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2fc76:	687b      	ldr	r3, [r7, #4]
   2fc78:	3382      	adds	r3, #130	; 0x82
   2fc7a:	3303      	adds	r3, #3
   2fc7c:	781b      	ldrb	r3, [r3, #0]
   2fc7e:	061a      	lsls	r2, r3, #24
   2fc80:	687b      	ldr	r3, [r7, #4]
   2fc82:	3382      	adds	r3, #130	; 0x82
   2fc84:	3302      	adds	r3, #2
   2fc86:	781b      	ldrb	r3, [r3, #0]
   2fc88:	041b      	lsls	r3, r3, #16
   2fc8a:	4313      	orrs	r3, r2
   2fc8c:	687a      	ldr	r2, [r7, #4]
   2fc8e:	3282      	adds	r2, #130	; 0x82
   2fc90:	3201      	adds	r2, #1
   2fc92:	7812      	ldrb	r2, [r2, #0]
   2fc94:	0212      	lsls	r2, r2, #8
   2fc96:	4313      	orrs	r3, r2
   2fc98:	687a      	ldr	r2, [r7, #4]
   2fc9a:	2182      	movs	r1, #130	; 0x82
   2fc9c:	5c52      	ldrb	r2, [r2, r1]
   2fc9e:	4313      	orrs	r3, r2
   2fca0:	021b      	lsls	r3, r3, #8
   2fca2:	0a1b      	lsrs	r3, r3, #8
   2fca4:	4a07      	ldr	r2, [pc, #28]	; (2fcc4 <check_fs+0xd0>)
   2fca6:	4293      	cmp	r3, r2
   2fca8:	d101      	bne.n	2fcae <check_fs+0xba>
		return 0;
   2fcaa:	2300      	movs	r3, #0
   2fcac:	e000      	b.n	2fcb0 <check_fs+0xbc>

	return 1;
   2fcae:	2301      	movs	r3, #1
}
   2fcb0:	0018      	movs	r0, r3
   2fcb2:	46bd      	mov	sp, r7
   2fcb4:	b003      	add	sp, #12
   2fcb6:	bd90      	pop	{r4, r7, pc}
   2fcb8:	0002de5d 	.word	0x0002de5d
   2fcbc:	0000022e 	.word	0x0000022e
   2fcc0:	ffffaa55 	.word	0xffffaa55
   2fcc4:	00544146 	.word	0x00544146

0002fcc8 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2fcc8:	b590      	push	{r4, r7, lr}
   2fcca:	b093      	sub	sp, #76	; 0x4c
   2fccc:	af00      	add	r7, sp, #0
   2fcce:	60f8      	str	r0, [r7, #12]
   2fcd0:	60b9      	str	r1, [r7, #8]
   2fcd2:	1dfb      	adds	r3, r7, #7
   2fcd4:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2fcd6:	68fb      	ldr	r3, [r7, #12]
   2fcd8:	681b      	ldr	r3, [r3, #0]
   2fcda:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2fcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2fcde:	781b      	ldrb	r3, [r3, #0]
   2fce0:	3b30      	subs	r3, #48	; 0x30
   2fce2:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2fce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fce6:	2b09      	cmp	r3, #9
   2fce8:	d80b      	bhi.n	2fd02 <chk_mounted+0x3a>
   2fcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2fcec:	3301      	adds	r3, #1
   2fcee:	781b      	ldrb	r3, [r3, #0]
   2fcf0:	2b3a      	cmp	r3, #58	; 0x3a
   2fcf2:	d106      	bne.n	2fd02 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2fcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2fcf6:	3302      	adds	r3, #2
   2fcf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   2fcfa:	68fb      	ldr	r3, [r7, #12]
   2fcfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2fcfe:	601a      	str	r2, [r3, #0]
   2fd00:	e001      	b.n	2fd06 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2fd02:	2300      	movs	r3, #0
   2fd04:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2fd06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fd08:	2b07      	cmp	r3, #7
   2fd0a:	d901      	bls.n	2fd10 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2fd0c:	230b      	movs	r3, #11
   2fd0e:	e2af      	b.n	30270 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2fd10:	4bc5      	ldr	r3, [pc, #788]	; (30028 <chk_mounted+0x360>)
   2fd12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2fd14:	0092      	lsls	r2, r2, #2
   2fd16:	58d3      	ldr	r3, [r2, r3]
   2fd18:	62bb      	str	r3, [r7, #40]	; 0x28
   2fd1a:	68bb      	ldr	r3, [r7, #8]
   2fd1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fd1e:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2fd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fd22:	2b00      	cmp	r3, #0
   2fd24:	d101      	bne.n	2fd2a <chk_mounted+0x62>
   2fd26:	230c      	movs	r3, #12
   2fd28:	e2a2      	b.n	30270 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2fd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fd2c:	781b      	ldrb	r3, [r3, #0]
   2fd2e:	2b00      	cmp	r3, #0
   2fd30:	d01c      	beq.n	2fd6c <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2fd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fd34:	785b      	ldrb	r3, [r3, #1]
   2fd36:	2227      	movs	r2, #39	; 0x27
   2fd38:	18bc      	adds	r4, r7, r2
   2fd3a:	0018      	movs	r0, r3
   2fd3c:	4bbb      	ldr	r3, [pc, #748]	; (3002c <chk_mounted+0x364>)
   2fd3e:	4798      	blx	r3
   2fd40:	0003      	movs	r3, r0
   2fd42:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2fd44:	2327      	movs	r3, #39	; 0x27
   2fd46:	18fb      	adds	r3, r7, r3
   2fd48:	781b      	ldrb	r3, [r3, #0]
   2fd4a:	2201      	movs	r2, #1
   2fd4c:	4013      	ands	r3, r2
   2fd4e:	d10d      	bne.n	2fd6c <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2fd50:	1dfb      	adds	r3, r7, #7
   2fd52:	781b      	ldrb	r3, [r3, #0]
   2fd54:	2b00      	cmp	r3, #0
   2fd56:	d007      	beq.n	2fd68 <chk_mounted+0xa0>
   2fd58:	2327      	movs	r3, #39	; 0x27
   2fd5a:	18fb      	adds	r3, r7, r3
   2fd5c:	781b      	ldrb	r3, [r3, #0]
   2fd5e:	2204      	movs	r2, #4
   2fd60:	4013      	ands	r3, r2
   2fd62:	d001      	beq.n	2fd68 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2fd64:	230a      	movs	r3, #10
   2fd66:	e283      	b.n	30270 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2fd68:	2300      	movs	r3, #0
   2fd6a:	e281      	b.n	30270 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2fd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fd6e:	2200      	movs	r2, #0
   2fd70:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2fd72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fd74:	b2da      	uxtb	r2, r3
   2fd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fd78:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2fd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fd7c:	785b      	ldrb	r3, [r3, #1]
   2fd7e:	2227      	movs	r2, #39	; 0x27
   2fd80:	18bc      	adds	r4, r7, r2
   2fd82:	0018      	movs	r0, r3
   2fd84:	4baa      	ldr	r3, [pc, #680]	; (30030 <chk_mounted+0x368>)
   2fd86:	4798      	blx	r3
   2fd88:	0003      	movs	r3, r0
   2fd8a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2fd8c:	2327      	movs	r3, #39	; 0x27
   2fd8e:	18fb      	adds	r3, r7, r3
   2fd90:	781b      	ldrb	r3, [r3, #0]
   2fd92:	2201      	movs	r2, #1
   2fd94:	4013      	ands	r3, r2
   2fd96:	d001      	beq.n	2fd9c <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2fd98:	2303      	movs	r3, #3
   2fd9a:	e269      	b.n	30270 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2fd9c:	1dfb      	adds	r3, r7, #7
   2fd9e:	781b      	ldrb	r3, [r3, #0]
   2fda0:	2b00      	cmp	r3, #0
   2fda2:	d007      	beq.n	2fdb4 <chk_mounted+0xec>
   2fda4:	2327      	movs	r3, #39	; 0x27
   2fda6:	18fb      	adds	r3, r7, r3
   2fda8:	781b      	ldrb	r3, [r3, #0]
   2fdaa:	2204      	movs	r2, #4
   2fdac:	4013      	ands	r3, r2
   2fdae:	d001      	beq.n	2fdb4 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2fdb0:	230a      	movs	r3, #10
   2fdb2:	e25d      	b.n	30270 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2fdb4:	2300      	movs	r3, #0
   2fdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2fdb8:	2347      	movs	r3, #71	; 0x47
   2fdba:	18fc      	adds	r4, r7, r3
   2fdbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2fdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fdc0:	0011      	movs	r1, r2
   2fdc2:	0018      	movs	r0, r3
   2fdc4:	4b9b      	ldr	r3, [pc, #620]	; (30034 <chk_mounted+0x36c>)
   2fdc6:	4798      	blx	r3
   2fdc8:	0003      	movs	r3, r0
   2fdca:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2fdcc:	2347      	movs	r3, #71	; 0x47
   2fdce:	18fb      	adds	r3, r7, r3
   2fdd0:	781b      	ldrb	r3, [r3, #0]
   2fdd2:	2b01      	cmp	r3, #1
   2fdd4:	d13b      	bne.n	2fe4e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2fdd6:	2346      	movs	r3, #70	; 0x46
   2fdd8:	18fb      	adds	r3, r7, r3
   2fdda:	2200      	movs	r2, #0
   2fddc:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2fdde:	2346      	movs	r3, #70	; 0x46
   2fde0:	18fb      	adds	r3, r7, r3
   2fde2:	781b      	ldrb	r3, [r3, #0]
   2fde4:	2b00      	cmp	r3, #0
   2fde6:	d006      	beq.n	2fdf6 <chk_mounted+0x12e>
   2fde8:	2346      	movs	r3, #70	; 0x46
   2fdea:	18fb      	adds	r3, r7, r3
   2fdec:	781a      	ldrb	r2, [r3, #0]
   2fdee:	2346      	movs	r3, #70	; 0x46
   2fdf0:	18fb      	adds	r3, r7, r3
   2fdf2:	3a01      	subs	r2, #1
   2fdf4:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2fdf6:	2346      	movs	r3, #70	; 0x46
   2fdf8:	18fb      	adds	r3, r7, r3
   2fdfa:	781b      	ldrb	r3, [r3, #0]
   2fdfc:	011b      	lsls	r3, r3, #4
   2fdfe:	33bf      	adds	r3, #191	; 0xbf
   2fe00:	33ff      	adds	r3, #255	; 0xff
   2fe02:	3330      	adds	r3, #48	; 0x30
   2fe04:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fe06:	18d3      	adds	r3, r2, r3
   2fe08:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2fe0a:	6a3b      	ldr	r3, [r7, #32]
   2fe0c:	3304      	adds	r3, #4
   2fe0e:	781b      	ldrb	r3, [r3, #0]
   2fe10:	2b00      	cmp	r3, #0
   2fe12:	d01c      	beq.n	2fe4e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2fe14:	6a3b      	ldr	r3, [r7, #32]
   2fe16:	330b      	adds	r3, #11
   2fe18:	781b      	ldrb	r3, [r3, #0]
   2fe1a:	061a      	lsls	r2, r3, #24
   2fe1c:	6a3b      	ldr	r3, [r7, #32]
   2fe1e:	330a      	adds	r3, #10
   2fe20:	781b      	ldrb	r3, [r3, #0]
   2fe22:	041b      	lsls	r3, r3, #16
   2fe24:	4313      	orrs	r3, r2
   2fe26:	6a3a      	ldr	r2, [r7, #32]
   2fe28:	3209      	adds	r2, #9
   2fe2a:	7812      	ldrb	r2, [r2, #0]
   2fe2c:	0212      	lsls	r2, r2, #8
   2fe2e:	4313      	orrs	r3, r2
   2fe30:	6a3a      	ldr	r2, [r7, #32]
   2fe32:	3208      	adds	r2, #8
   2fe34:	7812      	ldrb	r2, [r2, #0]
   2fe36:	4313      	orrs	r3, r2
   2fe38:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2fe3a:	2347      	movs	r3, #71	; 0x47
   2fe3c:	18fc      	adds	r4, r7, r3
   2fe3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2fe40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fe42:	0011      	movs	r1, r2
   2fe44:	0018      	movs	r0, r3
   2fe46:	4b7b      	ldr	r3, [pc, #492]	; (30034 <chk_mounted+0x36c>)
   2fe48:	4798      	blx	r3
   2fe4a:	0003      	movs	r3, r0
   2fe4c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2fe4e:	2347      	movs	r3, #71	; 0x47
   2fe50:	18fb      	adds	r3, r7, r3
   2fe52:	781b      	ldrb	r3, [r3, #0]
   2fe54:	2b03      	cmp	r3, #3
   2fe56:	d101      	bne.n	2fe5c <chk_mounted+0x194>
   2fe58:	2301      	movs	r3, #1
   2fe5a:	e209      	b.n	30270 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2fe5c:	2347      	movs	r3, #71	; 0x47
   2fe5e:	18fb      	adds	r3, r7, r3
   2fe60:	781b      	ldrb	r3, [r3, #0]
   2fe62:	2b00      	cmp	r3, #0
   2fe64:	d001      	beq.n	2fe6a <chk_mounted+0x1a2>
   2fe66:	230d      	movs	r3, #13
   2fe68:	e202      	b.n	30270 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2fe6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fe6c:	223c      	movs	r2, #60	; 0x3c
   2fe6e:	5c9b      	ldrb	r3, [r3, r2]
   2fe70:	021b      	lsls	r3, r3, #8
   2fe72:	b21a      	sxth	r2, r3
   2fe74:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fe76:	213b      	movs	r1, #59	; 0x3b
   2fe78:	5c5b      	ldrb	r3, [r3, r1]
   2fe7a:	b21b      	sxth	r3, r3
   2fe7c:	4313      	orrs	r3, r2
   2fe7e:	b21a      	sxth	r2, r3
   2fe80:	2380      	movs	r3, #128	; 0x80
   2fe82:	009b      	lsls	r3, r3, #2
   2fe84:	429a      	cmp	r2, r3
   2fe86:	d001      	beq.n	2fe8c <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2fe88:	230d      	movs	r3, #13
   2fe8a:	e1f1      	b.n	30270 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2fe8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fe8e:	2247      	movs	r2, #71	; 0x47
   2fe90:	5c9b      	ldrb	r3, [r3, r2]
   2fe92:	021b      	lsls	r3, r3, #8
   2fe94:	b21a      	sxth	r2, r3
   2fe96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fe98:	2146      	movs	r1, #70	; 0x46
   2fe9a:	5c5b      	ldrb	r3, [r3, r1]
   2fe9c:	b21b      	sxth	r3, r3
   2fe9e:	4313      	orrs	r3, r2
   2fea0:	b21b      	sxth	r3, r3
   2fea2:	b29b      	uxth	r3, r3
   2fea4:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2fea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fea8:	2b00      	cmp	r3, #0
   2feaa:	d112      	bne.n	2fed2 <chk_mounted+0x20a>
   2feac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2feae:	2257      	movs	r2, #87	; 0x57
   2feb0:	5c9b      	ldrb	r3, [r3, r2]
   2feb2:	061a      	lsls	r2, r3, #24
   2feb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2feb6:	2156      	movs	r1, #86	; 0x56
   2feb8:	5c5b      	ldrb	r3, [r3, r1]
   2feba:	041b      	lsls	r3, r3, #16
   2febc:	4313      	orrs	r3, r2
   2febe:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fec0:	2155      	movs	r1, #85	; 0x55
   2fec2:	5c52      	ldrb	r2, [r2, r1]
   2fec4:	0212      	lsls	r2, r2, #8
   2fec6:	4313      	orrs	r3, r2
   2fec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2feca:	2154      	movs	r1, #84	; 0x54
   2fecc:	5c52      	ldrb	r2, [r2, r1]
   2fece:	4313      	orrs	r3, r2
   2fed0:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2fed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2fed6:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2fed8:	231f      	movs	r3, #31
   2feda:	18fb      	adds	r3, r7, r3
   2fedc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fede:	2140      	movs	r1, #64	; 0x40
   2fee0:	5c52      	ldrb	r2, [r2, r1]
   2fee2:	701a      	strb	r2, [r3, #0]
   2fee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fee6:	221f      	movs	r2, #31
   2fee8:	18ba      	adds	r2, r7, r2
   2feea:	7812      	ldrb	r2, [r2, #0]
   2feec:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2feee:	231f      	movs	r3, #31
   2fef0:	18fb      	adds	r3, r7, r3
   2fef2:	781b      	ldrb	r3, [r3, #0]
   2fef4:	2b01      	cmp	r3, #1
   2fef6:	d006      	beq.n	2ff06 <chk_mounted+0x23e>
   2fef8:	231f      	movs	r3, #31
   2fefa:	18fb      	adds	r3, r7, r3
   2fefc:	781b      	ldrb	r3, [r3, #0]
   2fefe:	2b02      	cmp	r3, #2
   2ff00:	d001      	beq.n	2ff06 <chk_mounted+0x23e>
   2ff02:	230d      	movs	r3, #13
   2ff04:	e1b4      	b.n	30270 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2ff06:	231f      	movs	r3, #31
   2ff08:	18fb      	adds	r3, r7, r3
   2ff0a:	781a      	ldrb	r2, [r3, #0]
   2ff0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2ff0e:	4353      	muls	r3, r2
   2ff10:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2ff12:	231f      	movs	r3, #31
   2ff14:	18fb      	adds	r3, r7, r3
   2ff16:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ff18:	213d      	movs	r1, #61	; 0x3d
   2ff1a:	5c52      	ldrb	r2, [r2, r1]
   2ff1c:	701a      	strb	r2, [r3, #0]
   2ff1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ff20:	221f      	movs	r2, #31
   2ff22:	18ba      	adds	r2, r7, r2
   2ff24:	7812      	ldrb	r2, [r2, #0]
   2ff26:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2ff28:	231f      	movs	r3, #31
   2ff2a:	18fb      	adds	r3, r7, r3
   2ff2c:	781b      	ldrb	r3, [r3, #0]
   2ff2e:	2b00      	cmp	r3, #0
   2ff30:	d008      	beq.n	2ff44 <chk_mounted+0x27c>
   2ff32:	231f      	movs	r3, #31
   2ff34:	18fb      	adds	r3, r7, r3
   2ff36:	781b      	ldrb	r3, [r3, #0]
   2ff38:	221f      	movs	r2, #31
   2ff3a:	18ba      	adds	r2, r7, r2
   2ff3c:	7812      	ldrb	r2, [r2, #0]
   2ff3e:	3a01      	subs	r2, #1
   2ff40:	4013      	ands	r3, r2
   2ff42:	d001      	beq.n	2ff48 <chk_mounted+0x280>
   2ff44:	230d      	movs	r3, #13
   2ff46:	e193      	b.n	30270 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2ff48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ff4a:	2242      	movs	r2, #66	; 0x42
   2ff4c:	5c9b      	ldrb	r3, [r3, r2]
   2ff4e:	021b      	lsls	r3, r3, #8
   2ff50:	b21a      	sxth	r2, r3
   2ff52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ff54:	2141      	movs	r1, #65	; 0x41
   2ff56:	5c5b      	ldrb	r3, [r3, r1]
   2ff58:	b21b      	sxth	r3, r3
   2ff5a:	4313      	orrs	r3, r2
   2ff5c:	b21b      	sxth	r3, r3
   2ff5e:	b29a      	uxth	r2, r3
   2ff60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ff62:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2ff64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ff66:	891b      	ldrh	r3, [r3, #8]
   2ff68:	220f      	movs	r2, #15
   2ff6a:	4013      	ands	r3, r2
   2ff6c:	b29b      	uxth	r3, r3
   2ff6e:	2b00      	cmp	r3, #0
   2ff70:	d001      	beq.n	2ff76 <chk_mounted+0x2ae>
   2ff72:	230d      	movs	r3, #13
   2ff74:	e17c      	b.n	30270 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2ff76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ff78:	2244      	movs	r2, #68	; 0x44
   2ff7a:	5c9b      	ldrb	r3, [r3, r2]
   2ff7c:	021b      	lsls	r3, r3, #8
   2ff7e:	b21a      	sxth	r2, r3
   2ff80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ff82:	2143      	movs	r1, #67	; 0x43
   2ff84:	5c5b      	ldrb	r3, [r3, r1]
   2ff86:	b21b      	sxth	r3, r3
   2ff88:	4313      	orrs	r3, r2
   2ff8a:	b21b      	sxth	r3, r3
   2ff8c:	b29b      	uxth	r3, r3
   2ff8e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2ff90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ff92:	2b00      	cmp	r3, #0
   2ff94:	d112      	bne.n	2ffbc <chk_mounted+0x2f4>
   2ff96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ff98:	2253      	movs	r2, #83	; 0x53
   2ff9a:	5c9b      	ldrb	r3, [r3, r2]
   2ff9c:	061a      	lsls	r2, r3, #24
   2ff9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ffa0:	2152      	movs	r1, #82	; 0x52
   2ffa2:	5c5b      	ldrb	r3, [r3, r1]
   2ffa4:	041b      	lsls	r3, r3, #16
   2ffa6:	4313      	orrs	r3, r2
   2ffa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ffaa:	2151      	movs	r1, #81	; 0x51
   2ffac:	5c52      	ldrb	r2, [r2, r1]
   2ffae:	0212      	lsls	r2, r2, #8
   2ffb0:	4313      	orrs	r3, r2
   2ffb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ffb4:	2150      	movs	r1, #80	; 0x50
   2ffb6:	5c52      	ldrb	r2, [r2, r1]
   2ffb8:	4313      	orrs	r3, r2
   2ffba:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2ffbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ffbe:	223f      	movs	r2, #63	; 0x3f
   2ffc0:	5c9b      	ldrb	r3, [r3, r2]
   2ffc2:	021b      	lsls	r3, r3, #8
   2ffc4:	b21a      	sxth	r2, r3
   2ffc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ffc8:	213e      	movs	r1, #62	; 0x3e
   2ffca:	5c5b      	ldrb	r3, [r3, r1]
   2ffcc:	b21b      	sxth	r3, r3
   2ffce:	4313      	orrs	r3, r2
   2ffd0:	b21a      	sxth	r2, r3
   2ffd2:	231c      	movs	r3, #28
   2ffd4:	18fb      	adds	r3, r7, r3
   2ffd6:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2ffd8:	231c      	movs	r3, #28
   2ffda:	18fb      	adds	r3, r7, r3
   2ffdc:	881b      	ldrh	r3, [r3, #0]
   2ffde:	2b00      	cmp	r3, #0
   2ffe0:	d101      	bne.n	2ffe6 <chk_mounted+0x31e>
   2ffe2:	230d      	movs	r3, #13
   2ffe4:	e144      	b.n	30270 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2ffe6:	231c      	movs	r3, #28
   2ffe8:	18fb      	adds	r3, r7, r3
   2ffea:	881a      	ldrh	r2, [r3, #0]
   2ffec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2ffee:	18d3      	adds	r3, r2, r3
   2fff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fff2:	8912      	ldrh	r2, [r2, #8]
   2fff4:	0912      	lsrs	r2, r2, #4
   2fff6:	b292      	uxth	r2, r2
   2fff8:	189b      	adds	r3, r3, r2
   2fffa:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2fffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2fffe:	69bb      	ldr	r3, [r7, #24]
   30000:	429a      	cmp	r2, r3
   30002:	d201      	bcs.n	30008 <chk_mounted+0x340>
   30004:	230d      	movs	r3, #13
   30006:	e133      	b.n	30270 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   30008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   3000a:	69bb      	ldr	r3, [r7, #24]
   3000c:	1ad2      	subs	r2, r2, r3
   3000e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30010:	789b      	ldrb	r3, [r3, #2]
   30012:	0019      	movs	r1, r3
   30014:	4b08      	ldr	r3, [pc, #32]	; (30038 <chk_mounted+0x370>)
   30016:	0010      	movs	r0, r2
   30018:	4798      	blx	r3
   3001a:	0003      	movs	r3, r0
   3001c:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   3001e:	697b      	ldr	r3, [r7, #20]
   30020:	2b00      	cmp	r3, #0
   30022:	d10b      	bne.n	3003c <chk_mounted+0x374>
   30024:	230d      	movs	r3, #13
   30026:	e123      	b.n	30270 <chk_mounted+0x5a8>
   30028:	20004224 	.word	0x20004224
   3002c:	0002de25 	.word	0x0002de25
   30030:	0002dda1 	.word	0x0002dda1
   30034:	0002fbf5 	.word	0x0002fbf5
   30038:	00035449 	.word	0x00035449
	fmt = FS_FAT12;
   3003c:	2347      	movs	r3, #71	; 0x47
   3003e:	18fb      	adds	r3, r7, r3
   30040:	2201      	movs	r2, #1
   30042:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   30044:	697b      	ldr	r3, [r7, #20]
   30046:	4a8c      	ldr	r2, [pc, #560]	; (30278 <chk_mounted+0x5b0>)
   30048:	4293      	cmp	r3, r2
   3004a:	d903      	bls.n	30054 <chk_mounted+0x38c>
   3004c:	2347      	movs	r3, #71	; 0x47
   3004e:	18fb      	adds	r3, r7, r3
   30050:	2202      	movs	r2, #2
   30052:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   30054:	697b      	ldr	r3, [r7, #20]
   30056:	4a89      	ldr	r2, [pc, #548]	; (3027c <chk_mounted+0x5b4>)
   30058:	4293      	cmp	r3, r2
   3005a:	d903      	bls.n	30064 <chk_mounted+0x39c>
   3005c:	2347      	movs	r3, #71	; 0x47
   3005e:	18fb      	adds	r3, r7, r3
   30060:	2203      	movs	r2, #3
   30062:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   30064:	697b      	ldr	r3, [r7, #20]
   30066:	1c9a      	adds	r2, r3, #2
   30068:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3006a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   3006c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   3006e:	69bb      	ldr	r3, [r7, #24]
   30070:	18d2      	adds	r2, r2, r3
   30072:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30074:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   30076:	231c      	movs	r3, #28
   30078:	18fb      	adds	r3, r7, r3
   3007a:	881a      	ldrh	r2, [r3, #0]
   3007c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   3007e:	18d2      	adds	r2, r2, r3
   30080:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30082:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   30084:	2347      	movs	r3, #71	; 0x47
   30086:	18fb      	adds	r3, r7, r3
   30088:	781b      	ldrb	r3, [r3, #0]
   3008a:	2b03      	cmp	r3, #3
   3008c:	d11e      	bne.n	300cc <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   3008e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30090:	891b      	ldrh	r3, [r3, #8]
   30092:	2b00      	cmp	r3, #0
   30094:	d001      	beq.n	3009a <chk_mounted+0x3d2>
   30096:	230d      	movs	r3, #13
   30098:	e0ea      	b.n	30270 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   3009a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3009c:	225f      	movs	r2, #95	; 0x5f
   3009e:	5c9b      	ldrb	r3, [r3, r2]
   300a0:	061a      	lsls	r2, r3, #24
   300a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   300a4:	215e      	movs	r1, #94	; 0x5e
   300a6:	5c5b      	ldrb	r3, [r3, r1]
   300a8:	041b      	lsls	r3, r3, #16
   300aa:	4313      	orrs	r3, r2
   300ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   300ae:	215d      	movs	r1, #93	; 0x5d
   300b0:	5c52      	ldrb	r2, [r2, r1]
   300b2:	0212      	lsls	r2, r2, #8
   300b4:	4313      	orrs	r3, r2
   300b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   300b8:	215c      	movs	r1, #92	; 0x5c
   300ba:	5c52      	ldrb	r2, [r2, r1]
   300bc:	431a      	orrs	r2, r3
   300be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   300c0:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   300c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   300c4:	699b      	ldr	r3, [r3, #24]
   300c6:	009b      	lsls	r3, r3, #2
   300c8:	633b      	str	r3, [r7, #48]	; 0x30
   300ca:	e020      	b.n	3010e <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   300cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   300ce:	891b      	ldrh	r3, [r3, #8]
   300d0:	2b00      	cmp	r3, #0
   300d2:	d101      	bne.n	300d8 <chk_mounted+0x410>
   300d4:	230d      	movs	r3, #13
   300d6:	e0cb      	b.n	30270 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   300d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   300da:	6a1a      	ldr	r2, [r3, #32]
   300dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   300de:	18d2      	adds	r2, r2, r3
   300e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   300e2:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   300e4:	2347      	movs	r3, #71	; 0x47
   300e6:	18fb      	adds	r3, r7, r3
   300e8:	781b      	ldrb	r3, [r3, #0]
   300ea:	2b02      	cmp	r3, #2
   300ec:	d103      	bne.n	300f6 <chk_mounted+0x42e>
   300ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   300f0:	699b      	ldr	r3, [r3, #24]
   300f2:	005b      	lsls	r3, r3, #1
   300f4:	e00a      	b.n	3010c <chk_mounted+0x444>
   300f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   300f8:	699a      	ldr	r2, [r3, #24]
   300fa:	0013      	movs	r3, r2
   300fc:	005b      	lsls	r3, r3, #1
   300fe:	189b      	adds	r3, r3, r2
   30100:	085a      	lsrs	r2, r3, #1
   30102:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30104:	699b      	ldr	r3, [r3, #24]
   30106:	2101      	movs	r1, #1
   30108:	400b      	ands	r3, r1
   3010a:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   3010c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   3010e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30110:	69da      	ldr	r2, [r3, #28]
   30112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30114:	495a      	ldr	r1, [pc, #360]	; (30280 <chk_mounted+0x5b8>)
   30116:	468c      	mov	ip, r1
   30118:	4463      	add	r3, ip
   3011a:	0a5b      	lsrs	r3, r3, #9
   3011c:	429a      	cmp	r2, r3
   3011e:	d201      	bcs.n	30124 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   30120:	230d      	movs	r3, #13
   30122:	e0a5      	b.n	30270 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   30124:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30126:	2201      	movs	r2, #1
   30128:	4252      	negs	r2, r2
   3012a:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   3012c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3012e:	2200      	movs	r2, #0
   30130:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   30132:	2347      	movs	r3, #71	; 0x47
   30134:	18fb      	adds	r3, r7, r3
   30136:	781b      	ldrb	r3, [r3, #0]
   30138:	2b03      	cmp	r3, #3
   3013a:	d000      	beq.n	3013e <chk_mounted+0x476>
   3013c:	e082      	b.n	30244 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   3013e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30140:	2200      	movs	r2, #0
   30142:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   30144:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30146:	2261      	movs	r2, #97	; 0x61
   30148:	5c9b      	ldrb	r3, [r3, r2]
   3014a:	021b      	lsls	r3, r3, #8
   3014c:	b21a      	sxth	r2, r3
   3014e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30150:	2160      	movs	r1, #96	; 0x60
   30152:	5c5b      	ldrb	r3, [r3, r1]
   30154:	b21b      	sxth	r3, r3
   30156:	4313      	orrs	r3, r2
   30158:	b21b      	sxth	r3, r3
   3015a:	b29b      	uxth	r3, r3
   3015c:	001a      	movs	r2, r3
   3015e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30160:	18d2      	adds	r2, r2, r3
   30162:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30164:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   30166:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30168:	7858      	ldrb	r0, [r3, #1]
   3016a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3016c:	3330      	adds	r3, #48	; 0x30
   3016e:	0019      	movs	r1, r3
   30170:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30172:	695a      	ldr	r2, [r3, #20]
   30174:	2301      	movs	r3, #1
   30176:	4c43      	ldr	r4, [pc, #268]	; (30284 <chk_mounted+0x5bc>)
   30178:	47a0      	blx	r4
   3017a:	1e03      	subs	r3, r0, #0
   3017c:	d162      	bne.n	30244 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   3017e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30180:	4a41      	ldr	r2, [pc, #260]	; (30288 <chk_mounted+0x5c0>)
   30182:	5c9b      	ldrb	r3, [r3, r2]
   30184:	021b      	lsls	r3, r3, #8
   30186:	b21a      	sxth	r2, r3
   30188:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3018a:	4940      	ldr	r1, [pc, #256]	; (3028c <chk_mounted+0x5c4>)
   3018c:	5c5b      	ldrb	r3, [r3, r1]
   3018e:	b21b      	sxth	r3, r3
   30190:	4313      	orrs	r3, r2
   30192:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   30194:	4a3e      	ldr	r2, [pc, #248]	; (30290 <chk_mounted+0x5c8>)
   30196:	4293      	cmp	r3, r2
   30198:	d154      	bne.n	30244 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   3019a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3019c:	2233      	movs	r2, #51	; 0x33
   3019e:	5c9b      	ldrb	r3, [r3, r2]
   301a0:	061a      	lsls	r2, r3, #24
   301a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   301a4:	2132      	movs	r1, #50	; 0x32
   301a6:	5c5b      	ldrb	r3, [r3, r1]
   301a8:	041b      	lsls	r3, r3, #16
   301aa:	4313      	orrs	r3, r2
   301ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   301ae:	2131      	movs	r1, #49	; 0x31
   301b0:	5c52      	ldrb	r2, [r2, r1]
   301b2:	0212      	lsls	r2, r2, #8
   301b4:	4313      	orrs	r3, r2
   301b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   301b8:	2130      	movs	r1, #48	; 0x30
   301ba:	5c52      	ldrb	r2, [r2, r1]
   301bc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   301be:	4a35      	ldr	r2, [pc, #212]	; (30294 <chk_mounted+0x5cc>)
   301c0:	4293      	cmp	r3, r2
   301c2:	d13f      	bne.n	30244 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   301c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   301c6:	4a34      	ldr	r2, [pc, #208]	; (30298 <chk_mounted+0x5d0>)
   301c8:	5c9b      	ldrb	r3, [r3, r2]
   301ca:	061a      	lsls	r2, r3, #24
   301cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   301ce:	4933      	ldr	r1, [pc, #204]	; (3029c <chk_mounted+0x5d4>)
   301d0:	5c5b      	ldrb	r3, [r3, r1]
   301d2:	041b      	lsls	r3, r3, #16
   301d4:	4313      	orrs	r3, r2
   301d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   301d8:	4931      	ldr	r1, [pc, #196]	; (302a0 <chk_mounted+0x5d8>)
   301da:	5c52      	ldrb	r2, [r2, r1]
   301dc:	0212      	lsls	r2, r2, #8
   301de:	4313      	orrs	r3, r2
   301e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   301e2:	2285      	movs	r2, #133	; 0x85
   301e4:	0092      	lsls	r2, r2, #2
   301e6:	5c8a      	ldrb	r2, [r1, r2]
   301e8:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   301ea:	4a2e      	ldr	r2, [pc, #184]	; (302a4 <chk_mounted+0x5dc>)
   301ec:	4293      	cmp	r3, r2
   301ee:	d129      	bne.n	30244 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   301f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   301f2:	4a2d      	ldr	r2, [pc, #180]	; (302a8 <chk_mounted+0x5e0>)
   301f4:	5c9b      	ldrb	r3, [r3, r2]
   301f6:	061a      	lsls	r2, r3, #24
   301f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   301fa:	492c      	ldr	r1, [pc, #176]	; (302ac <chk_mounted+0x5e4>)
   301fc:	5c5b      	ldrb	r3, [r3, r1]
   301fe:	041b      	lsls	r3, r3, #16
   30200:	4313      	orrs	r3, r2
   30202:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30204:	492a      	ldr	r1, [pc, #168]	; (302b0 <chk_mounted+0x5e8>)
   30206:	5c52      	ldrb	r2, [r2, r1]
   30208:	0212      	lsls	r2, r2, #8
   3020a:	4313      	orrs	r3, r2
   3020c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   3020e:	2287      	movs	r2, #135	; 0x87
   30210:	0092      	lsls	r2, r2, #2
   30212:	5c8a      	ldrb	r2, [r1, r2]
   30214:	431a      	orrs	r2, r3
   30216:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30218:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   3021a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3021c:	4a25      	ldr	r2, [pc, #148]	; (302b4 <chk_mounted+0x5ec>)
   3021e:	5c9b      	ldrb	r3, [r3, r2]
   30220:	061a      	lsls	r2, r3, #24
   30222:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30224:	4924      	ldr	r1, [pc, #144]	; (302b8 <chk_mounted+0x5f0>)
   30226:	5c5b      	ldrb	r3, [r3, r1]
   30228:	041b      	lsls	r3, r3, #16
   3022a:	4313      	orrs	r3, r2
   3022c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3022e:	4923      	ldr	r1, [pc, #140]	; (302bc <chk_mounted+0x5f4>)
   30230:	5c52      	ldrb	r2, [r2, r1]
   30232:	0212      	lsls	r2, r2, #8
   30234:	4313      	orrs	r3, r2
   30236:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   30238:	2286      	movs	r2, #134	; 0x86
   3023a:	0092      	lsls	r2, r2, #2
   3023c:	5c8a      	ldrb	r2, [r1, r2]
   3023e:	431a      	orrs	r2, r3
   30240:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30242:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   30244:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30246:	2247      	movs	r2, #71	; 0x47
   30248:	18ba      	adds	r2, r7, r2
   3024a:	7812      	ldrb	r2, [r2, #0]
   3024c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   3024e:	4b1c      	ldr	r3, [pc, #112]	; (302c0 <chk_mounted+0x5f8>)
   30250:	881b      	ldrh	r3, [r3, #0]
   30252:	3301      	adds	r3, #1
   30254:	b29a      	uxth	r2, r3
   30256:	4b1a      	ldr	r3, [pc, #104]	; (302c0 <chk_mounted+0x5f8>)
   30258:	801a      	strh	r2, [r3, #0]
   3025a:	4b19      	ldr	r3, [pc, #100]	; (302c0 <chk_mounted+0x5f8>)
   3025c:	881a      	ldrh	r2, [r3, #0]
   3025e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30260:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   30262:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30264:	2200      	movs	r2, #0
   30266:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   30268:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3026a:	2200      	movs	r2, #0
   3026c:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   3026e:	2300      	movs	r3, #0
}
   30270:	0018      	movs	r0, r3
   30272:	46bd      	mov	sp, r7
   30274:	b013      	add	sp, #76	; 0x4c
   30276:	bd90      	pop	{r4, r7, pc}
   30278:	00000ff5 	.word	0x00000ff5
   3027c:	0000fff5 	.word	0x0000fff5
   30280:	000001ff 	.word	0x000001ff
   30284:	0002de5d 	.word	0x0002de5d
   30288:	0000022f 	.word	0x0000022f
   3028c:	0000022e 	.word	0x0000022e
   30290:	ffffaa55 	.word	0xffffaa55
   30294:	41615252 	.word	0x41615252
   30298:	00000217 	.word	0x00000217
   3029c:	00000216 	.word	0x00000216
   302a0:	00000215 	.word	0x00000215
   302a4:	61417272 	.word	0x61417272
   302a8:	0000021f 	.word	0x0000021f
   302ac:	0000021e 	.word	0x0000021e
   302b0:	0000021d 	.word	0x0000021d
   302b4:	0000021b 	.word	0x0000021b
   302b8:	0000021a 	.word	0x0000021a
   302bc:	00000219 	.word	0x00000219
   302c0:	20004244 	.word	0x20004244

000302c4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   302c4:	b580      	push	{r7, lr}
   302c6:	b082      	sub	sp, #8
   302c8:	af00      	add	r7, sp, #0
   302ca:	6078      	str	r0, [r7, #4]
   302cc:	000a      	movs	r2, r1
   302ce:	1cbb      	adds	r3, r7, #2
   302d0:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   302d2:	687b      	ldr	r3, [r7, #4]
   302d4:	2b00      	cmp	r3, #0
   302d6:	d009      	beq.n	302ec <validate+0x28>
   302d8:	687b      	ldr	r3, [r7, #4]
   302da:	781b      	ldrb	r3, [r3, #0]
   302dc:	2b00      	cmp	r3, #0
   302de:	d005      	beq.n	302ec <validate+0x28>
   302e0:	687b      	ldr	r3, [r7, #4]
   302e2:	88db      	ldrh	r3, [r3, #6]
   302e4:	1cba      	adds	r2, r7, #2
   302e6:	8812      	ldrh	r2, [r2, #0]
   302e8:	429a      	cmp	r2, r3
   302ea:	d001      	beq.n	302f0 <validate+0x2c>
		return FR_INVALID_OBJECT;
   302ec:	2309      	movs	r3, #9
   302ee:	e00c      	b.n	3030a <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   302f0:	687b      	ldr	r3, [r7, #4]
   302f2:	785b      	ldrb	r3, [r3, #1]
   302f4:	0018      	movs	r0, r3
   302f6:	4b07      	ldr	r3, [pc, #28]	; (30314 <validate+0x50>)
   302f8:	4798      	blx	r3
   302fa:	0003      	movs	r3, r0
   302fc:	001a      	movs	r2, r3
   302fe:	2301      	movs	r3, #1
   30300:	4013      	ands	r3, r2
   30302:	d001      	beq.n	30308 <validate+0x44>
		return FR_NOT_READY;
   30304:	2303      	movs	r3, #3
   30306:	e000      	b.n	3030a <validate+0x46>

	return FR_OK;
   30308:	2300      	movs	r3, #0
}
   3030a:	0018      	movs	r0, r3
   3030c:	46bd      	mov	sp, r7
   3030e:	b002      	add	sp, #8
   30310:	bd80      	pop	{r7, pc}
   30312:	46c0      	nop			; (mov r8, r8)
   30314:	0002de25 	.word	0x0002de25

00030318 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   30318:	b580      	push	{r7, lr}
   3031a:	b084      	sub	sp, #16
   3031c:	af00      	add	r7, sp, #0
   3031e:	0002      	movs	r2, r0
   30320:	6039      	str	r1, [r7, #0]
   30322:	1dfb      	adds	r3, r7, #7
   30324:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   30326:	1dfb      	adds	r3, r7, #7
   30328:	781b      	ldrb	r3, [r3, #0]
   3032a:	2b07      	cmp	r3, #7
   3032c:	d901      	bls.n	30332 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   3032e:	230b      	movs	r3, #11
   30330:	e018      	b.n	30364 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   30332:	1dfb      	adds	r3, r7, #7
   30334:	781a      	ldrb	r2, [r3, #0]
   30336:	4b0d      	ldr	r3, [pc, #52]	; (3036c <f_mount+0x54>)
   30338:	0092      	lsls	r2, r2, #2
   3033a:	58d3      	ldr	r3, [r2, r3]
   3033c:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   3033e:	68fb      	ldr	r3, [r7, #12]
   30340:	2b00      	cmp	r3, #0
   30342:	d002      	beq.n	3034a <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   30344:	68fb      	ldr	r3, [r7, #12]
   30346:	2200      	movs	r2, #0
   30348:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   3034a:	683b      	ldr	r3, [r7, #0]
   3034c:	2b00      	cmp	r3, #0
   3034e:	d002      	beq.n	30356 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   30350:	683b      	ldr	r3, [r7, #0]
   30352:	2200      	movs	r2, #0
   30354:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   30356:	1dfb      	adds	r3, r7, #7
   30358:	781a      	ldrb	r2, [r3, #0]
   3035a:	4b04      	ldr	r3, [pc, #16]	; (3036c <f_mount+0x54>)
   3035c:	0092      	lsls	r2, r2, #2
   3035e:	6839      	ldr	r1, [r7, #0]
   30360:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   30362:	2300      	movs	r3, #0
}
   30364:	0018      	movs	r0, r3
   30366:	46bd      	mov	sp, r7
   30368:	b004      	add	sp, #16
   3036a:	bd80      	pop	{r7, pc}
   3036c:	20004224 	.word	0x20004224

00030370 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   30370:	b590      	push	{r4, r7, lr}
   30372:	4ce5      	ldr	r4, [pc, #916]	; (30708 <f_open+0x398>)
   30374:	44a5      	add	sp, r4
   30376:	af00      	add	r7, sp, #0
   30378:	60f8      	str	r0, [r7, #12]
   3037a:	60b9      	str	r1, [r7, #8]
   3037c:	4be3      	ldr	r3, [pc, #908]	; (3070c <f_open+0x39c>)
   3037e:	2194      	movs	r1, #148	; 0x94
   30380:	0089      	lsls	r1, r1, #2
   30382:	468c      	mov	ip, r1
   30384:	44bc      	add	ip, r7
   30386:	4463      	add	r3, ip
   30388:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   3038a:	68fb      	ldr	r3, [r7, #12]
   3038c:	2200      	movs	r2, #0
   3038e:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   30390:	4bde      	ldr	r3, [pc, #888]	; (3070c <f_open+0x39c>)
   30392:	2294      	movs	r2, #148	; 0x94
   30394:	0092      	lsls	r2, r2, #2
   30396:	4694      	mov	ip, r2
   30398:	44bc      	add	ip, r7
   3039a:	4463      	add	r3, ip
   3039c:	4adb      	ldr	r2, [pc, #876]	; (3070c <f_open+0x39c>)
   3039e:	2194      	movs	r1, #148	; 0x94
   303a0:	0089      	lsls	r1, r1, #2
   303a2:	468c      	mov	ip, r1
   303a4:	44bc      	add	ip, r7
   303a6:	4462      	add	r2, ip
   303a8:	7812      	ldrb	r2, [r2, #0]
   303aa:	211f      	movs	r1, #31
   303ac:	400a      	ands	r2, r1
   303ae:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   303b0:	4bd6      	ldr	r3, [pc, #856]	; (3070c <f_open+0x39c>)
   303b2:	2294      	movs	r2, #148	; 0x94
   303b4:	0092      	lsls	r2, r2, #2
   303b6:	4694      	mov	ip, r2
   303b8:	44bc      	add	ip, r7
   303ba:	4463      	add	r3, ip
   303bc:	781b      	ldrb	r3, [r3, #0]
   303be:	2201      	movs	r2, #1
   303c0:	4393      	bics	r3, r2
   303c2:	b2da      	uxtb	r2, r3
   303c4:	4bd2      	ldr	r3, [pc, #840]	; (30710 <f_open+0x3a0>)
   303c6:	18fc      	adds	r4, r7, r3
   303c8:	2387      	movs	r3, #135	; 0x87
   303ca:	009b      	lsls	r3, r3, #2
   303cc:	18f9      	adds	r1, r7, r3
   303ce:	2308      	movs	r3, #8
   303d0:	18fb      	adds	r3, r7, r3
   303d2:	0018      	movs	r0, r3
   303d4:	4bcf      	ldr	r3, [pc, #828]	; (30714 <f_open+0x3a4>)
   303d6:	4798      	blx	r3
   303d8:	0003      	movs	r3, r0
   303da:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   303dc:	2387      	movs	r3, #135	; 0x87
   303de:	009b      	lsls	r3, r3, #2
   303e0:	18fb      	adds	r3, r7, r3
   303e2:	2284      	movs	r2, #132	; 0x84
   303e4:	0092      	lsls	r2, r2, #2
   303e6:	18ba      	adds	r2, r7, r2
   303e8:	619a      	str	r2, [r3, #24]
   303ea:	2387      	movs	r3, #135	; 0x87
   303ec:	009b      	lsls	r3, r3, #2
   303ee:	18fb      	adds	r3, r7, r3
   303f0:	2210      	movs	r2, #16
   303f2:	18ba      	adds	r2, r7, r2
   303f4:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   303f6:	4bc6      	ldr	r3, [pc, #792]	; (30710 <f_open+0x3a0>)
   303f8:	18fb      	adds	r3, r7, r3
   303fa:	781b      	ldrb	r3, [r3, #0]
   303fc:	2b00      	cmp	r3, #0
   303fe:	d10b      	bne.n	30418 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   30400:	68ba      	ldr	r2, [r7, #8]
   30402:	4bc3      	ldr	r3, [pc, #780]	; (30710 <f_open+0x3a0>)
   30404:	18fc      	adds	r4, r7, r3
   30406:	2387      	movs	r3, #135	; 0x87
   30408:	009b      	lsls	r3, r3, #2
   3040a:	18fb      	adds	r3, r7, r3
   3040c:	0011      	movs	r1, r2
   3040e:	0018      	movs	r0, r3
   30410:	4bc1      	ldr	r3, [pc, #772]	; (30718 <f_open+0x3a8>)
   30412:	4798      	blx	r3
   30414:	0003      	movs	r3, r0
   30416:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   30418:	2387      	movs	r3, #135	; 0x87
   3041a:	009b      	lsls	r3, r3, #2
   3041c:	18fb      	adds	r3, r7, r3
   3041e:	695b      	ldr	r3, [r3, #20]
   30420:	2292      	movs	r2, #146	; 0x92
   30422:	0092      	lsls	r2, r2, #2
   30424:	18ba      	adds	r2, r7, r2
   30426:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   30428:	4bb9      	ldr	r3, [pc, #740]	; (30710 <f_open+0x3a0>)
   3042a:	18fb      	adds	r3, r7, r3
   3042c:	781b      	ldrb	r3, [r3, #0]
   3042e:	2b00      	cmp	r3, #0
   30430:	d109      	bne.n	30446 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   30432:	2392      	movs	r3, #146	; 0x92
   30434:	009b      	lsls	r3, r3, #2
   30436:	18fb      	adds	r3, r7, r3
   30438:	681b      	ldr	r3, [r3, #0]
   3043a:	2b00      	cmp	r3, #0
   3043c:	d103      	bne.n	30446 <f_open+0xd6>
			res = FR_INVALID_NAME;
   3043e:	4bb4      	ldr	r3, [pc, #720]	; (30710 <f_open+0x3a0>)
   30440:	18fb      	adds	r3, r7, r3
   30442:	2206      	movs	r2, #6
   30444:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   30446:	4bb1      	ldr	r3, [pc, #708]	; (3070c <f_open+0x39c>)
   30448:	2294      	movs	r2, #148	; 0x94
   3044a:	0092      	lsls	r2, r2, #2
   3044c:	4694      	mov	ip, r2
   3044e:	44bc      	add	ip, r7
   30450:	4463      	add	r3, ip
   30452:	781b      	ldrb	r3, [r3, #0]
   30454:	221c      	movs	r2, #28
   30456:	4013      	ands	r3, r2
   30458:	d100      	bne.n	3045c <f_open+0xec>
   3045a:	e141      	b.n	306e0 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   3045c:	4bac      	ldr	r3, [pc, #688]	; (30710 <f_open+0x3a0>)
   3045e:	18fb      	adds	r3, r7, r3
   30460:	781b      	ldrb	r3, [r3, #0]
   30462:	2b00      	cmp	r3, #0
   30464:	d027      	beq.n	304b6 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   30466:	4baa      	ldr	r3, [pc, #680]	; (30710 <f_open+0x3a0>)
   30468:	18fb      	adds	r3, r7, r3
   3046a:	781b      	ldrb	r3, [r3, #0]
   3046c:	2b04      	cmp	r3, #4
   3046e:	d109      	bne.n	30484 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   30470:	4ba7      	ldr	r3, [pc, #668]	; (30710 <f_open+0x3a0>)
   30472:	18fc      	adds	r4, r7, r3
   30474:	2387      	movs	r3, #135	; 0x87
   30476:	009b      	lsls	r3, r3, #2
   30478:	18fb      	adds	r3, r7, r3
   3047a:	0018      	movs	r0, r3
   3047c:	4ba7      	ldr	r3, [pc, #668]	; (3071c <f_open+0x3ac>)
   3047e:	4798      	blx	r3
   30480:	0003      	movs	r3, r0
   30482:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   30484:	4ba1      	ldr	r3, [pc, #644]	; (3070c <f_open+0x39c>)
   30486:	2294      	movs	r2, #148	; 0x94
   30488:	0092      	lsls	r2, r2, #2
   3048a:	4694      	mov	ip, r2
   3048c:	44bc      	add	ip, r7
   3048e:	4463      	add	r3, ip
   30490:	4a9e      	ldr	r2, [pc, #632]	; (3070c <f_open+0x39c>)
   30492:	2194      	movs	r1, #148	; 0x94
   30494:	0089      	lsls	r1, r1, #2
   30496:	468c      	mov	ip, r1
   30498:	44bc      	add	ip, r7
   3049a:	4462      	add	r2, ip
   3049c:	7812      	ldrb	r2, [r2, #0]
   3049e:	2108      	movs	r1, #8
   304a0:	430a      	orrs	r2, r1
   304a2:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   304a4:	2387      	movs	r3, #135	; 0x87
   304a6:	009b      	lsls	r3, r3, #2
   304a8:	18fb      	adds	r3, r7, r3
   304aa:	695b      	ldr	r3, [r3, #20]
   304ac:	2292      	movs	r2, #146	; 0x92
   304ae:	0092      	lsls	r2, r2, #2
   304b0:	18ba      	adds	r2, r7, r2
   304b2:	6013      	str	r3, [r2, #0]
   304b4:	e01c      	b.n	304f0 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   304b6:	2392      	movs	r3, #146	; 0x92
   304b8:	009b      	lsls	r3, r3, #2
   304ba:	18fb      	adds	r3, r7, r3
   304bc:	681b      	ldr	r3, [r3, #0]
   304be:	330b      	adds	r3, #11
   304c0:	781b      	ldrb	r3, [r3, #0]
   304c2:	001a      	movs	r2, r3
   304c4:	2311      	movs	r3, #17
   304c6:	4013      	ands	r3, r2
   304c8:	d004      	beq.n	304d4 <f_open+0x164>
				res = FR_DENIED;
   304ca:	4b91      	ldr	r3, [pc, #580]	; (30710 <f_open+0x3a0>)
   304cc:	18fb      	adds	r3, r7, r3
   304ce:	2207      	movs	r2, #7
   304d0:	701a      	strb	r2, [r3, #0]
   304d2:	e00d      	b.n	304f0 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   304d4:	4b8d      	ldr	r3, [pc, #564]	; (3070c <f_open+0x39c>)
   304d6:	2294      	movs	r2, #148	; 0x94
   304d8:	0092      	lsls	r2, r2, #2
   304da:	4694      	mov	ip, r2
   304dc:	44bc      	add	ip, r7
   304de:	4463      	add	r3, ip
   304e0:	781b      	ldrb	r3, [r3, #0]
   304e2:	2204      	movs	r2, #4
   304e4:	4013      	ands	r3, r2
   304e6:	d003      	beq.n	304f0 <f_open+0x180>
					res = FR_EXIST;
   304e8:	4b89      	ldr	r3, [pc, #548]	; (30710 <f_open+0x3a0>)
   304ea:	18fb      	adds	r3, r7, r3
   304ec:	2208      	movs	r2, #8
   304ee:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   304f0:	4b87      	ldr	r3, [pc, #540]	; (30710 <f_open+0x3a0>)
   304f2:	18fb      	adds	r3, r7, r3
   304f4:	781b      	ldrb	r3, [r3, #0]
   304f6:	2b00      	cmp	r3, #0
   304f8:	d000      	beq.n	304fc <f_open+0x18c>
   304fa:	e12f      	b.n	3075c <f_open+0x3ec>
   304fc:	4b83      	ldr	r3, [pc, #524]	; (3070c <f_open+0x39c>)
   304fe:	2294      	movs	r2, #148	; 0x94
   30500:	0092      	lsls	r2, r2, #2
   30502:	4694      	mov	ip, r2
   30504:	44bc      	add	ip, r7
   30506:	4463      	add	r3, ip
   30508:	781b      	ldrb	r3, [r3, #0]
   3050a:	2208      	movs	r2, #8
   3050c:	4013      	ands	r3, r2
   3050e:	d100      	bne.n	30512 <f_open+0x1a2>
   30510:	e124      	b.n	3075c <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   30512:	4b83      	ldr	r3, [pc, #524]	; (30720 <f_open+0x3b0>)
   30514:	4798      	blx	r3
   30516:	0003      	movs	r3, r0
   30518:	2291      	movs	r2, #145	; 0x91
   3051a:	0092      	lsls	r2, r2, #2
   3051c:	18ba      	adds	r2, r7, r2
   3051e:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   30520:	2392      	movs	r3, #146	; 0x92
   30522:	009b      	lsls	r3, r3, #2
   30524:	18fb      	adds	r3, r7, r3
   30526:	681b      	ldr	r3, [r3, #0]
   30528:	330e      	adds	r3, #14
   3052a:	2291      	movs	r2, #145	; 0x91
   3052c:	0092      	lsls	r2, r2, #2
   3052e:	18ba      	adds	r2, r7, r2
   30530:	6812      	ldr	r2, [r2, #0]
   30532:	b2d2      	uxtb	r2, r2
   30534:	701a      	strb	r2, [r3, #0]
   30536:	2392      	movs	r3, #146	; 0x92
   30538:	009b      	lsls	r3, r3, #2
   3053a:	18fb      	adds	r3, r7, r3
   3053c:	681b      	ldr	r3, [r3, #0]
   3053e:	330f      	adds	r3, #15
   30540:	2291      	movs	r2, #145	; 0x91
   30542:	0092      	lsls	r2, r2, #2
   30544:	18ba      	adds	r2, r7, r2
   30546:	6812      	ldr	r2, [r2, #0]
   30548:	b292      	uxth	r2, r2
   3054a:	0a12      	lsrs	r2, r2, #8
   3054c:	b292      	uxth	r2, r2
   3054e:	b2d2      	uxtb	r2, r2
   30550:	701a      	strb	r2, [r3, #0]
   30552:	2392      	movs	r3, #146	; 0x92
   30554:	009b      	lsls	r3, r3, #2
   30556:	18fb      	adds	r3, r7, r3
   30558:	681b      	ldr	r3, [r3, #0]
   3055a:	3310      	adds	r3, #16
   3055c:	2291      	movs	r2, #145	; 0x91
   3055e:	0092      	lsls	r2, r2, #2
   30560:	18ba      	adds	r2, r7, r2
   30562:	6812      	ldr	r2, [r2, #0]
   30564:	0c12      	lsrs	r2, r2, #16
   30566:	b2d2      	uxtb	r2, r2
   30568:	701a      	strb	r2, [r3, #0]
   3056a:	2392      	movs	r3, #146	; 0x92
   3056c:	009b      	lsls	r3, r3, #2
   3056e:	18fb      	adds	r3, r7, r3
   30570:	681b      	ldr	r3, [r3, #0]
   30572:	3311      	adds	r3, #17
   30574:	2291      	movs	r2, #145	; 0x91
   30576:	0092      	lsls	r2, r2, #2
   30578:	18ba      	adds	r2, r7, r2
   3057a:	6812      	ldr	r2, [r2, #0]
   3057c:	0e12      	lsrs	r2, r2, #24
   3057e:	b2d2      	uxtb	r2, r2
   30580:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   30582:	2392      	movs	r3, #146	; 0x92
   30584:	009b      	lsls	r3, r3, #2
   30586:	18fb      	adds	r3, r7, r3
   30588:	681b      	ldr	r3, [r3, #0]
   3058a:	330b      	adds	r3, #11
   3058c:	2200      	movs	r2, #0
   3058e:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   30590:	2392      	movs	r3, #146	; 0x92
   30592:	009b      	lsls	r3, r3, #2
   30594:	18fb      	adds	r3, r7, r3
   30596:	681b      	ldr	r3, [r3, #0]
   30598:	331c      	adds	r3, #28
   3059a:	2200      	movs	r2, #0
   3059c:	701a      	strb	r2, [r3, #0]
   3059e:	2392      	movs	r3, #146	; 0x92
   305a0:	009b      	lsls	r3, r3, #2
   305a2:	18fb      	adds	r3, r7, r3
   305a4:	681b      	ldr	r3, [r3, #0]
   305a6:	331d      	adds	r3, #29
   305a8:	2200      	movs	r2, #0
   305aa:	701a      	strb	r2, [r3, #0]
   305ac:	2392      	movs	r3, #146	; 0x92
   305ae:	009b      	lsls	r3, r3, #2
   305b0:	18fb      	adds	r3, r7, r3
   305b2:	681b      	ldr	r3, [r3, #0]
   305b4:	331e      	adds	r3, #30
   305b6:	2200      	movs	r2, #0
   305b8:	701a      	strb	r2, [r3, #0]
   305ba:	2392      	movs	r3, #146	; 0x92
   305bc:	009b      	lsls	r3, r3, #2
   305be:	18fb      	adds	r3, r7, r3
   305c0:	681b      	ldr	r3, [r3, #0]
   305c2:	331f      	adds	r3, #31
   305c4:	2200      	movs	r2, #0
   305c6:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   305c8:	2392      	movs	r3, #146	; 0x92
   305ca:	009b      	lsls	r3, r3, #2
   305cc:	18fb      	adds	r3, r7, r3
   305ce:	681b      	ldr	r3, [r3, #0]
   305d0:	3315      	adds	r3, #21
   305d2:	781b      	ldrb	r3, [r3, #0]
   305d4:	021b      	lsls	r3, r3, #8
   305d6:	b21a      	sxth	r2, r3
   305d8:	2392      	movs	r3, #146	; 0x92
   305da:	009b      	lsls	r3, r3, #2
   305dc:	18fb      	adds	r3, r7, r3
   305de:	681b      	ldr	r3, [r3, #0]
   305e0:	3314      	adds	r3, #20
   305e2:	781b      	ldrb	r3, [r3, #0]
   305e4:	b21b      	sxth	r3, r3
   305e6:	4313      	orrs	r3, r2
   305e8:	b21b      	sxth	r3, r3
   305ea:	b29b      	uxth	r3, r3
   305ec:	041b      	lsls	r3, r3, #16
   305ee:	2292      	movs	r2, #146	; 0x92
   305f0:	0092      	lsls	r2, r2, #2
   305f2:	18ba      	adds	r2, r7, r2
   305f4:	6812      	ldr	r2, [r2, #0]
   305f6:	321b      	adds	r2, #27
   305f8:	7812      	ldrb	r2, [r2, #0]
   305fa:	0212      	lsls	r2, r2, #8
   305fc:	b211      	sxth	r1, r2
   305fe:	2292      	movs	r2, #146	; 0x92
   30600:	0092      	lsls	r2, r2, #2
   30602:	18ba      	adds	r2, r7, r2
   30604:	6812      	ldr	r2, [r2, #0]
   30606:	321a      	adds	r2, #26
   30608:	7812      	ldrb	r2, [r2, #0]
   3060a:	b212      	sxth	r2, r2
   3060c:	430a      	orrs	r2, r1
   3060e:	b212      	sxth	r2, r2
   30610:	b292      	uxth	r2, r2
   30612:	4313      	orrs	r3, r2
   30614:	2290      	movs	r2, #144	; 0x90
   30616:	0092      	lsls	r2, r2, #2
   30618:	18ba      	adds	r2, r7, r2
   3061a:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   3061c:	2392      	movs	r3, #146	; 0x92
   3061e:	009b      	lsls	r3, r3, #2
   30620:	18fb      	adds	r3, r7, r3
   30622:	681b      	ldr	r3, [r3, #0]
   30624:	331a      	adds	r3, #26
   30626:	2200      	movs	r2, #0
   30628:	701a      	strb	r2, [r3, #0]
   3062a:	2392      	movs	r3, #146	; 0x92
   3062c:	009b      	lsls	r3, r3, #2
   3062e:	18fb      	adds	r3, r7, r3
   30630:	681b      	ldr	r3, [r3, #0]
   30632:	331b      	adds	r3, #27
   30634:	2200      	movs	r2, #0
   30636:	701a      	strb	r2, [r3, #0]
   30638:	2392      	movs	r3, #146	; 0x92
   3063a:	009b      	lsls	r3, r3, #2
   3063c:	18fb      	adds	r3, r7, r3
   3063e:	681b      	ldr	r3, [r3, #0]
   30640:	3314      	adds	r3, #20
   30642:	2200      	movs	r2, #0
   30644:	701a      	strb	r2, [r3, #0]
   30646:	2392      	movs	r3, #146	; 0x92
   30648:	009b      	lsls	r3, r3, #2
   3064a:	18fb      	adds	r3, r7, r3
   3064c:	681b      	ldr	r3, [r3, #0]
   3064e:	3315      	adds	r3, #21
   30650:	2200      	movs	r2, #0
   30652:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   30654:	2387      	movs	r3, #135	; 0x87
   30656:	009b      	lsls	r3, r3, #2
   30658:	18fb      	adds	r3, r7, r3
   3065a:	681b      	ldr	r3, [r3, #0]
   3065c:	2201      	movs	r2, #1
   3065e:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   30660:	2390      	movs	r3, #144	; 0x90
   30662:	009b      	lsls	r3, r3, #2
   30664:	18fb      	adds	r3, r7, r3
   30666:	681b      	ldr	r3, [r3, #0]
   30668:	2b00      	cmp	r3, #0
   3066a:	d100      	bne.n	3066e <f_open+0x2fe>
   3066c:	e076      	b.n	3075c <f_open+0x3ec>
				dw = dj.fs->winsect;
   3066e:	2387      	movs	r3, #135	; 0x87
   30670:	009b      	lsls	r3, r3, #2
   30672:	18fb      	adds	r3, r7, r3
   30674:	681b      	ldr	r3, [r3, #0]
   30676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30678:	2291      	movs	r2, #145	; 0x91
   3067a:	0092      	lsls	r2, r2, #2
   3067c:	18ba      	adds	r2, r7, r2
   3067e:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   30680:	2387      	movs	r3, #135	; 0x87
   30682:	009b      	lsls	r3, r3, #2
   30684:	18fb      	adds	r3, r7, r3
   30686:	681b      	ldr	r3, [r3, #0]
   30688:	4a21      	ldr	r2, [pc, #132]	; (30710 <f_open+0x3a0>)
   3068a:	18bc      	adds	r4, r7, r2
   3068c:	2290      	movs	r2, #144	; 0x90
   3068e:	0092      	lsls	r2, r2, #2
   30690:	18ba      	adds	r2, r7, r2
   30692:	6812      	ldr	r2, [r2, #0]
   30694:	0011      	movs	r1, r2
   30696:	0018      	movs	r0, r3
   30698:	4b22      	ldr	r3, [pc, #136]	; (30724 <f_open+0x3b4>)
   3069a:	4798      	blx	r3
   3069c:	0003      	movs	r3, r0
   3069e:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   306a0:	4b1b      	ldr	r3, [pc, #108]	; (30710 <f_open+0x3a0>)
   306a2:	18fb      	adds	r3, r7, r3
   306a4:	781b      	ldrb	r3, [r3, #0]
   306a6:	2b00      	cmp	r3, #0
   306a8:	d158      	bne.n	3075c <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   306aa:	2387      	movs	r3, #135	; 0x87
   306ac:	009b      	lsls	r3, r3, #2
   306ae:	18fb      	adds	r3, r7, r3
   306b0:	681b      	ldr	r3, [r3, #0]
   306b2:	2290      	movs	r2, #144	; 0x90
   306b4:	0092      	lsls	r2, r2, #2
   306b6:	18ba      	adds	r2, r7, r2
   306b8:	6812      	ldr	r2, [r2, #0]
   306ba:	3a01      	subs	r2, #1
   306bc:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   306be:	2387      	movs	r3, #135	; 0x87
   306c0:	009b      	lsls	r3, r3, #2
   306c2:	18fb      	adds	r3, r7, r3
   306c4:	681b      	ldr	r3, [r3, #0]
   306c6:	4a12      	ldr	r2, [pc, #72]	; (30710 <f_open+0x3a0>)
   306c8:	18bc      	adds	r4, r7, r2
   306ca:	2291      	movs	r2, #145	; 0x91
   306cc:	0092      	lsls	r2, r2, #2
   306ce:	18ba      	adds	r2, r7, r2
   306d0:	6812      	ldr	r2, [r2, #0]
   306d2:	0011      	movs	r1, r2
   306d4:	0018      	movs	r0, r3
   306d6:	4b14      	ldr	r3, [pc, #80]	; (30728 <f_open+0x3b8>)
   306d8:	4798      	blx	r3
   306da:	0003      	movs	r3, r0
   306dc:	7023      	strb	r3, [r4, #0]
   306de:	e03d      	b.n	3075c <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   306e0:	4b0b      	ldr	r3, [pc, #44]	; (30710 <f_open+0x3a0>)
   306e2:	18fb      	adds	r3, r7, r3
   306e4:	781b      	ldrb	r3, [r3, #0]
   306e6:	2b00      	cmp	r3, #0
   306e8:	d138      	bne.n	3075c <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   306ea:	2392      	movs	r3, #146	; 0x92
   306ec:	009b      	lsls	r3, r3, #2
   306ee:	18fb      	adds	r3, r7, r3
   306f0:	681b      	ldr	r3, [r3, #0]
   306f2:	330b      	adds	r3, #11
   306f4:	781b      	ldrb	r3, [r3, #0]
   306f6:	001a      	movs	r2, r3
   306f8:	2310      	movs	r3, #16
   306fa:	4013      	ands	r3, r2
   306fc:	d016      	beq.n	3072c <f_open+0x3bc>
				res = FR_NO_FILE;
   306fe:	4b04      	ldr	r3, [pc, #16]	; (30710 <f_open+0x3a0>)
   30700:	18fb      	adds	r3, r7, r3
   30702:	2204      	movs	r2, #4
   30704:	701a      	strb	r2, [r3, #0]
   30706:	e029      	b.n	3075c <f_open+0x3ec>
   30708:	fffffdac 	.word	0xfffffdac
   3070c:	fffffdb7 	.word	0xfffffdb7
   30710:	0000024f 	.word	0x0000024f
   30714:	0002fcc9 	.word	0x0002fcc9
   30718:	0002fabd 	.word	0x0002fabd
   3071c:	0002f30d 	.word	0x0002f30d
   30720:	0002e105 	.word	0x0002e105
   30724:	0002e889 	.word	0x0002e889
   30728:	0002e249 	.word	0x0002e249
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   3072c:	4b5a      	ldr	r3, [pc, #360]	; (30898 <f_open+0x528>)
   3072e:	2294      	movs	r2, #148	; 0x94
   30730:	0092      	lsls	r2, r2, #2
   30732:	4694      	mov	ip, r2
   30734:	44bc      	add	ip, r7
   30736:	4463      	add	r3, ip
   30738:	781b      	ldrb	r3, [r3, #0]
   3073a:	2202      	movs	r2, #2
   3073c:	4013      	ands	r3, r2
   3073e:	d00d      	beq.n	3075c <f_open+0x3ec>
   30740:	2392      	movs	r3, #146	; 0x92
   30742:	009b      	lsls	r3, r3, #2
   30744:	18fb      	adds	r3, r7, r3
   30746:	681b      	ldr	r3, [r3, #0]
   30748:	330b      	adds	r3, #11
   3074a:	781b      	ldrb	r3, [r3, #0]
   3074c:	001a      	movs	r2, r3
   3074e:	2301      	movs	r3, #1
   30750:	4013      	ands	r3, r2
   30752:	d003      	beq.n	3075c <f_open+0x3ec>
					res = FR_DENIED;
   30754:	4b51      	ldr	r3, [pc, #324]	; (3089c <f_open+0x52c>)
   30756:	18fb      	adds	r3, r7, r3
   30758:	2207      	movs	r2, #7
   3075a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   3075c:	4b4f      	ldr	r3, [pc, #316]	; (3089c <f_open+0x52c>)
   3075e:	18fb      	adds	r3, r7, r3
   30760:	781b      	ldrb	r3, [r3, #0]
   30762:	2b00      	cmp	r3, #0
   30764:	d126      	bne.n	307b4 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   30766:	4b4c      	ldr	r3, [pc, #304]	; (30898 <f_open+0x528>)
   30768:	2294      	movs	r2, #148	; 0x94
   3076a:	0092      	lsls	r2, r2, #2
   3076c:	4694      	mov	ip, r2
   3076e:	44bc      	add	ip, r7
   30770:	4463      	add	r3, ip
   30772:	781b      	ldrb	r3, [r3, #0]
   30774:	2208      	movs	r2, #8
   30776:	4013      	ands	r3, r2
   30778:	d00f      	beq.n	3079a <f_open+0x42a>
			mode |= FA__WRITTEN;
   3077a:	4b47      	ldr	r3, [pc, #284]	; (30898 <f_open+0x528>)
   3077c:	2294      	movs	r2, #148	; 0x94
   3077e:	0092      	lsls	r2, r2, #2
   30780:	4694      	mov	ip, r2
   30782:	44bc      	add	ip, r7
   30784:	4463      	add	r3, ip
   30786:	4a44      	ldr	r2, [pc, #272]	; (30898 <f_open+0x528>)
   30788:	2194      	movs	r1, #148	; 0x94
   3078a:	0089      	lsls	r1, r1, #2
   3078c:	468c      	mov	ip, r1
   3078e:	44bc      	add	ip, r7
   30790:	4462      	add	r2, ip
   30792:	7812      	ldrb	r2, [r2, #0]
   30794:	2120      	movs	r1, #32
   30796:	430a      	orrs	r2, r1
   30798:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   3079a:	2387      	movs	r3, #135	; 0x87
   3079c:	009b      	lsls	r3, r3, #2
   3079e:	18fb      	adds	r3, r7, r3
   307a0:	681b      	ldr	r3, [r3, #0]
   307a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   307a4:	68fb      	ldr	r3, [r7, #12]
   307a6:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   307a8:	68fb      	ldr	r3, [r7, #12]
   307aa:	2292      	movs	r2, #146	; 0x92
   307ac:	0092      	lsls	r2, r2, #2
   307ae:	18ba      	adds	r2, r7, r2
   307b0:	6812      	ldr	r2, [r2, #0]
   307b2:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   307b4:	4b39      	ldr	r3, [pc, #228]	; (3089c <f_open+0x52c>)
   307b6:	18fb      	adds	r3, r7, r3
   307b8:	781b      	ldrb	r3, [r3, #0]
   307ba:	2b00      	cmp	r3, #0
   307bc:	d163      	bne.n	30886 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   307be:	68fb      	ldr	r3, [r7, #12]
   307c0:	4a35      	ldr	r2, [pc, #212]	; (30898 <f_open+0x528>)
   307c2:	2194      	movs	r1, #148	; 0x94
   307c4:	0089      	lsls	r1, r1, #2
   307c6:	468c      	mov	ip, r1
   307c8:	44bc      	add	ip, r7
   307ca:	4462      	add	r2, ip
   307cc:	7812      	ldrb	r2, [r2, #0]
   307ce:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   307d0:	2392      	movs	r3, #146	; 0x92
   307d2:	009b      	lsls	r3, r3, #2
   307d4:	18fb      	adds	r3, r7, r3
   307d6:	681b      	ldr	r3, [r3, #0]
   307d8:	3315      	adds	r3, #21
   307da:	781b      	ldrb	r3, [r3, #0]
   307dc:	021b      	lsls	r3, r3, #8
   307de:	b21a      	sxth	r2, r3
   307e0:	2392      	movs	r3, #146	; 0x92
   307e2:	009b      	lsls	r3, r3, #2
   307e4:	18fb      	adds	r3, r7, r3
   307e6:	681b      	ldr	r3, [r3, #0]
   307e8:	3314      	adds	r3, #20
   307ea:	781b      	ldrb	r3, [r3, #0]
   307ec:	b21b      	sxth	r3, r3
   307ee:	4313      	orrs	r3, r2
   307f0:	b21b      	sxth	r3, r3
   307f2:	b29b      	uxth	r3, r3
   307f4:	041b      	lsls	r3, r3, #16
   307f6:	2292      	movs	r2, #146	; 0x92
   307f8:	0092      	lsls	r2, r2, #2
   307fa:	18ba      	adds	r2, r7, r2
   307fc:	6812      	ldr	r2, [r2, #0]
   307fe:	321b      	adds	r2, #27
   30800:	7812      	ldrb	r2, [r2, #0]
   30802:	0212      	lsls	r2, r2, #8
   30804:	b211      	sxth	r1, r2
   30806:	2292      	movs	r2, #146	; 0x92
   30808:	0092      	lsls	r2, r2, #2
   3080a:	18ba      	adds	r2, r7, r2
   3080c:	6812      	ldr	r2, [r2, #0]
   3080e:	321a      	adds	r2, #26
   30810:	7812      	ldrb	r2, [r2, #0]
   30812:	b212      	sxth	r2, r2
   30814:	430a      	orrs	r2, r1
   30816:	b212      	sxth	r2, r2
   30818:	b292      	uxth	r2, r2
   3081a:	431a      	orrs	r2, r3
   3081c:	68fb      	ldr	r3, [r7, #12]
   3081e:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   30820:	2392      	movs	r3, #146	; 0x92
   30822:	009b      	lsls	r3, r3, #2
   30824:	18fb      	adds	r3, r7, r3
   30826:	681b      	ldr	r3, [r3, #0]
   30828:	331f      	adds	r3, #31
   3082a:	781b      	ldrb	r3, [r3, #0]
   3082c:	061a      	lsls	r2, r3, #24
   3082e:	2392      	movs	r3, #146	; 0x92
   30830:	009b      	lsls	r3, r3, #2
   30832:	18fb      	adds	r3, r7, r3
   30834:	681b      	ldr	r3, [r3, #0]
   30836:	331e      	adds	r3, #30
   30838:	781b      	ldrb	r3, [r3, #0]
   3083a:	041b      	lsls	r3, r3, #16
   3083c:	4313      	orrs	r3, r2
   3083e:	2292      	movs	r2, #146	; 0x92
   30840:	0092      	lsls	r2, r2, #2
   30842:	18ba      	adds	r2, r7, r2
   30844:	6812      	ldr	r2, [r2, #0]
   30846:	321d      	adds	r2, #29
   30848:	7812      	ldrb	r2, [r2, #0]
   3084a:	0212      	lsls	r2, r2, #8
   3084c:	4313      	orrs	r3, r2
   3084e:	2292      	movs	r2, #146	; 0x92
   30850:	0092      	lsls	r2, r2, #2
   30852:	18ba      	adds	r2, r7, r2
   30854:	6812      	ldr	r2, [r2, #0]
   30856:	321c      	adds	r2, #28
   30858:	7812      	ldrb	r2, [r2, #0]
   3085a:	431a      	orrs	r2, r3
   3085c:	68fb      	ldr	r3, [r7, #12]
   3085e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   30860:	68fb      	ldr	r3, [r7, #12]
   30862:	2200      	movs	r2, #0
   30864:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   30866:	68fb      	ldr	r3, [r7, #12]
   30868:	2200      	movs	r2, #0
   3086a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   3086c:	2387      	movs	r3, #135	; 0x87
   3086e:	009b      	lsls	r3, r3, #2
   30870:	18fb      	adds	r3, r7, r3
   30872:	681a      	ldr	r2, [r3, #0]
   30874:	68fb      	ldr	r3, [r7, #12]
   30876:	601a      	str	r2, [r3, #0]
   30878:	2387      	movs	r3, #135	; 0x87
   3087a:	009b      	lsls	r3, r3, #2
   3087c:	18fb      	adds	r3, r7, r3
   3087e:	681b      	ldr	r3, [r3, #0]
   30880:	88da      	ldrh	r2, [r3, #6]
   30882:	68fb      	ldr	r3, [r7, #12]
   30884:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   30886:	4b05      	ldr	r3, [pc, #20]	; (3089c <f_open+0x52c>)
   30888:	18fb      	adds	r3, r7, r3
   3088a:	781b      	ldrb	r3, [r3, #0]
}
   3088c:	0018      	movs	r0, r3
   3088e:	46bd      	mov	sp, r7
   30890:	2395      	movs	r3, #149	; 0x95
   30892:	009b      	lsls	r3, r3, #2
   30894:	449d      	add	sp, r3
   30896:	bd90      	pop	{r4, r7, pc}
   30898:	fffffdb7 	.word	0xfffffdb7
   3089c:	0000024f 	.word	0x0000024f

000308a0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   308a0:	b590      	push	{r4, r7, lr}
   308a2:	b08b      	sub	sp, #44	; 0x2c
   308a4:	af00      	add	r7, sp, #0
   308a6:	60f8      	str	r0, [r7, #12]
   308a8:	60b9      	str	r1, [r7, #8]
   308aa:	607a      	str	r2, [r7, #4]
   308ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   308ae:	68bb      	ldr	r3, [r7, #8]
   308b0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   308b2:	683b      	ldr	r3, [r7, #0]
   308b4:	2200      	movs	r2, #0
   308b6:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   308b8:	68fb      	ldr	r3, [r7, #12]
   308ba:	681a      	ldr	r2, [r3, #0]
   308bc:	68fb      	ldr	r3, [r7, #12]
   308be:	889b      	ldrh	r3, [r3, #4]
   308c0:	2117      	movs	r1, #23
   308c2:	187c      	adds	r4, r7, r1
   308c4:	0019      	movs	r1, r3
   308c6:	0010      	movs	r0, r2
   308c8:	4bc3      	ldr	r3, [pc, #780]	; (30bd8 <f_write+0x338>)
   308ca:	4798      	blx	r3
   308cc:	0003      	movs	r3, r0
   308ce:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   308d0:	2317      	movs	r3, #23
   308d2:	18fb      	adds	r3, r7, r3
   308d4:	781b      	ldrb	r3, [r3, #0]
   308d6:	2b00      	cmp	r3, #0
   308d8:	d003      	beq.n	308e2 <f_write+0x42>
   308da:	2317      	movs	r3, #23
   308dc:	18fb      	adds	r3, r7, r3
   308de:	781b      	ldrb	r3, [r3, #0]
   308e0:	e176      	b.n	30bd0 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   308e2:	68fb      	ldr	r3, [r7, #12]
   308e4:	799b      	ldrb	r3, [r3, #6]
   308e6:	b25b      	sxtb	r3, r3
   308e8:	2b00      	cmp	r3, #0
   308ea:	da01      	bge.n	308f0 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   308ec:	2302      	movs	r3, #2
   308ee:	e16f      	b.n	30bd0 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   308f0:	68fb      	ldr	r3, [r7, #12]
   308f2:	799b      	ldrb	r3, [r3, #6]
   308f4:	001a      	movs	r2, r3
   308f6:	2302      	movs	r3, #2
   308f8:	4013      	ands	r3, r2
   308fa:	d101      	bne.n	30900 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   308fc:	2307      	movs	r3, #7
   308fe:	e167      	b.n	30bd0 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   30900:	68fb      	ldr	r3, [r7, #12]
   30902:	68da      	ldr	r2, [r3, #12]
   30904:	687b      	ldr	r3, [r7, #4]
   30906:	18d2      	adds	r2, r2, r3
   30908:	68fb      	ldr	r3, [r7, #12]
   3090a:	68db      	ldr	r3, [r3, #12]
   3090c:	429a      	cmp	r2, r3
   3090e:	d300      	bcc.n	30912 <f_write+0x72>
   30910:	e146      	b.n	30ba0 <f_write+0x300>
   30912:	2300      	movs	r3, #0
   30914:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   30916:	e143      	b.n	30ba0 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   30918:	68fb      	ldr	r3, [r7, #12]
   3091a:	689b      	ldr	r3, [r3, #8]
   3091c:	05db      	lsls	r3, r3, #23
   3091e:	0ddb      	lsrs	r3, r3, #23
   30920:	d000      	beq.n	30924 <f_write+0x84>
   30922:	e0f6      	b.n	30b12 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   30924:	68fb      	ldr	r3, [r7, #12]
   30926:	689b      	ldr	r3, [r3, #8]
   30928:	0a5b      	lsrs	r3, r3, #9
   3092a:	b2da      	uxtb	r2, r3
   3092c:	68fb      	ldr	r3, [r7, #12]
   3092e:	681b      	ldr	r3, [r3, #0]
   30930:	789b      	ldrb	r3, [r3, #2]
   30932:	3b01      	subs	r3, #1
   30934:	b2d9      	uxtb	r1, r3
   30936:	2316      	movs	r3, #22
   30938:	18fb      	adds	r3, r7, r3
   3093a:	400a      	ands	r2, r1
   3093c:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   3093e:	2316      	movs	r3, #22
   30940:	18fb      	adds	r3, r7, r3
   30942:	781b      	ldrb	r3, [r3, #0]
   30944:	2b00      	cmp	r3, #0
   30946:	d140      	bne.n	309ca <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   30948:	68fb      	ldr	r3, [r7, #12]
   3094a:	689b      	ldr	r3, [r3, #8]
   3094c:	2b00      	cmp	r3, #0
   3094e:	d111      	bne.n	30974 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   30950:	68fb      	ldr	r3, [r7, #12]
   30952:	691b      	ldr	r3, [r3, #16]
   30954:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   30956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30958:	2b00      	cmp	r3, #0
   3095a:	d115      	bne.n	30988 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   3095c:	68fb      	ldr	r3, [r7, #12]
   3095e:	681b      	ldr	r3, [r3, #0]
   30960:	2100      	movs	r1, #0
   30962:	0018      	movs	r0, r3
   30964:	4b9d      	ldr	r3, [pc, #628]	; (30bdc <f_write+0x33c>)
   30966:	4798      	blx	r3
   30968:	0003      	movs	r3, r0
   3096a:	627b      	str	r3, [r7, #36]	; 0x24
   3096c:	68fb      	ldr	r3, [r7, #12]
   3096e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30970:	611a      	str	r2, [r3, #16]
   30972:	e009      	b.n	30988 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   30974:	68fb      	ldr	r3, [r7, #12]
   30976:	681a      	ldr	r2, [r3, #0]
   30978:	68fb      	ldr	r3, [r7, #12]
   3097a:	695b      	ldr	r3, [r3, #20]
   3097c:	0019      	movs	r1, r3
   3097e:	0010      	movs	r0, r2
   30980:	4b96      	ldr	r3, [pc, #600]	; (30bdc <f_write+0x33c>)
   30982:	4798      	blx	r3
   30984:	0003      	movs	r3, r0
   30986:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   30988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3098a:	2b00      	cmp	r3, #0
   3098c:	d100      	bne.n	30990 <f_write+0xf0>
   3098e:	e10c      	b.n	30baa <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   30990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30992:	2b01      	cmp	r3, #1
   30994:	d109      	bne.n	309aa <f_write+0x10a>
   30996:	68fb      	ldr	r3, [r7, #12]
   30998:	799b      	ldrb	r3, [r3, #6]
   3099a:	2280      	movs	r2, #128	; 0x80
   3099c:	4252      	negs	r2, r2
   3099e:	4313      	orrs	r3, r2
   309a0:	b2da      	uxtb	r2, r3
   309a2:	68fb      	ldr	r3, [r7, #12]
   309a4:	719a      	strb	r2, [r3, #6]
   309a6:	2302      	movs	r3, #2
   309a8:	e112      	b.n	30bd0 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   309aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   309ac:	3301      	adds	r3, #1
   309ae:	d109      	bne.n	309c4 <f_write+0x124>
   309b0:	68fb      	ldr	r3, [r7, #12]
   309b2:	799b      	ldrb	r3, [r3, #6]
   309b4:	2280      	movs	r2, #128	; 0x80
   309b6:	4252      	negs	r2, r2
   309b8:	4313      	orrs	r3, r2
   309ba:	b2da      	uxtb	r2, r3
   309bc:	68fb      	ldr	r3, [r7, #12]
   309be:	719a      	strb	r2, [r3, #6]
   309c0:	2301      	movs	r3, #1
   309c2:	e105      	b.n	30bd0 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   309c4:	68fb      	ldr	r3, [r7, #12]
   309c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   309c8:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   309ca:	68fb      	ldr	r3, [r7, #12]
   309cc:	681b      	ldr	r3, [r3, #0]
   309ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   309d0:	68fb      	ldr	r3, [r7, #12]
   309d2:	699b      	ldr	r3, [r3, #24]
   309d4:	429a      	cmp	r2, r3
   309d6:	d111      	bne.n	309fc <f_write+0x15c>
   309d8:	68fb      	ldr	r3, [r7, #12]
   309da:	681b      	ldr	r3, [r3, #0]
   309dc:	2100      	movs	r1, #0
   309de:	0018      	movs	r0, r3
   309e0:	4b7f      	ldr	r3, [pc, #508]	; (30be0 <f_write+0x340>)
   309e2:	4798      	blx	r3
   309e4:	1e03      	subs	r3, r0, #0
   309e6:	d009      	beq.n	309fc <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   309e8:	68fb      	ldr	r3, [r7, #12]
   309ea:	799b      	ldrb	r3, [r3, #6]
   309ec:	2280      	movs	r2, #128	; 0x80
   309ee:	4252      	negs	r2, r2
   309f0:	4313      	orrs	r3, r2
   309f2:	b2da      	uxtb	r2, r3
   309f4:	68fb      	ldr	r3, [r7, #12]
   309f6:	719a      	strb	r2, [r3, #6]
   309f8:	2301      	movs	r3, #1
   309fa:	e0e9      	b.n	30bd0 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   309fc:	68fb      	ldr	r3, [r7, #12]
   309fe:	681a      	ldr	r2, [r3, #0]
   30a00:	68fb      	ldr	r3, [r7, #12]
   30a02:	695b      	ldr	r3, [r3, #20]
   30a04:	0019      	movs	r1, r3
   30a06:	0010      	movs	r0, r2
   30a08:	4b76      	ldr	r3, [pc, #472]	; (30be4 <f_write+0x344>)
   30a0a:	4798      	blx	r3
   30a0c:	0003      	movs	r3, r0
   30a0e:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   30a10:	693b      	ldr	r3, [r7, #16]
   30a12:	2b00      	cmp	r3, #0
   30a14:	d109      	bne.n	30a2a <f_write+0x18a>
   30a16:	68fb      	ldr	r3, [r7, #12]
   30a18:	799b      	ldrb	r3, [r3, #6]
   30a1a:	2280      	movs	r2, #128	; 0x80
   30a1c:	4252      	negs	r2, r2
   30a1e:	4313      	orrs	r3, r2
   30a20:	b2da      	uxtb	r2, r3
   30a22:	68fb      	ldr	r3, [r7, #12]
   30a24:	719a      	strb	r2, [r3, #6]
   30a26:	2302      	movs	r3, #2
   30a28:	e0d2      	b.n	30bd0 <f_write+0x330>
			sect += csect;
   30a2a:	2316      	movs	r3, #22
   30a2c:	18fb      	adds	r3, r7, r3
   30a2e:	781b      	ldrb	r3, [r3, #0]
   30a30:	693a      	ldr	r2, [r7, #16]
   30a32:	18d3      	adds	r3, r2, r3
   30a34:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   30a36:	687b      	ldr	r3, [r7, #4]
   30a38:	0a5b      	lsrs	r3, r3, #9
   30a3a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   30a3c:	69fb      	ldr	r3, [r7, #28]
   30a3e:	2b00      	cmp	r3, #0
   30a40:	d048      	beq.n	30ad4 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   30a42:	2316      	movs	r3, #22
   30a44:	18fb      	adds	r3, r7, r3
   30a46:	781a      	ldrb	r2, [r3, #0]
   30a48:	69fb      	ldr	r3, [r7, #28]
   30a4a:	18d2      	adds	r2, r2, r3
   30a4c:	68fb      	ldr	r3, [r7, #12]
   30a4e:	681b      	ldr	r3, [r3, #0]
   30a50:	789b      	ldrb	r3, [r3, #2]
   30a52:	429a      	cmp	r2, r3
   30a54:	d908      	bls.n	30a68 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   30a56:	68fb      	ldr	r3, [r7, #12]
   30a58:	681b      	ldr	r3, [r3, #0]
   30a5a:	789b      	ldrb	r3, [r3, #2]
   30a5c:	001a      	movs	r2, r3
   30a5e:	2316      	movs	r3, #22
   30a60:	18fb      	adds	r3, r7, r3
   30a62:	781b      	ldrb	r3, [r3, #0]
   30a64:	1ad3      	subs	r3, r2, r3
   30a66:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   30a68:	68fb      	ldr	r3, [r7, #12]
   30a6a:	681b      	ldr	r3, [r3, #0]
   30a6c:	7858      	ldrb	r0, [r3, #1]
   30a6e:	69fb      	ldr	r3, [r7, #28]
   30a70:	b2db      	uxtb	r3, r3
   30a72:	693a      	ldr	r2, [r7, #16]
   30a74:	69b9      	ldr	r1, [r7, #24]
   30a76:	4c5c      	ldr	r4, [pc, #368]	; (30be8 <f_write+0x348>)
   30a78:	47a0      	blx	r4
   30a7a:	1e03      	subs	r3, r0, #0
   30a7c:	d009      	beq.n	30a92 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   30a7e:	68fb      	ldr	r3, [r7, #12]
   30a80:	799b      	ldrb	r3, [r3, #6]
   30a82:	2280      	movs	r2, #128	; 0x80
   30a84:	4252      	negs	r2, r2
   30a86:	4313      	orrs	r3, r2
   30a88:	b2da      	uxtb	r2, r3
   30a8a:	68fb      	ldr	r3, [r7, #12]
   30a8c:	719a      	strb	r2, [r3, #6]
   30a8e:	2301      	movs	r3, #1
   30a90:	e09e      	b.n	30bd0 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   30a92:	68fb      	ldr	r3, [r7, #12]
   30a94:	681b      	ldr	r3, [r3, #0]
   30a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   30a98:	693b      	ldr	r3, [r7, #16]
   30a9a:	1ad2      	subs	r2, r2, r3
   30a9c:	69fb      	ldr	r3, [r7, #28]
   30a9e:	429a      	cmp	r2, r3
   30aa0:	d214      	bcs.n	30acc <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   30aa2:	68fb      	ldr	r3, [r7, #12]
   30aa4:	681b      	ldr	r3, [r3, #0]
   30aa6:	3330      	adds	r3, #48	; 0x30
   30aa8:	0018      	movs	r0, r3
   30aaa:	68fb      	ldr	r3, [r7, #12]
   30aac:	681b      	ldr	r3, [r3, #0]
   30aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   30ab0:	693b      	ldr	r3, [r7, #16]
   30ab2:	1ad3      	subs	r3, r2, r3
   30ab4:	025b      	lsls	r3, r3, #9
   30ab6:	69ba      	ldr	r2, [r7, #24]
   30ab8:	18d1      	adds	r1, r2, r3
   30aba:	2380      	movs	r3, #128	; 0x80
   30abc:	009b      	lsls	r3, r3, #2
   30abe:	001a      	movs	r2, r3
   30ac0:	4b4a      	ldr	r3, [pc, #296]	; (30bec <f_write+0x34c>)
   30ac2:	4798      	blx	r3
					fp->fs->wflag = 0;
   30ac4:	68fb      	ldr	r3, [r7, #12]
   30ac6:	681b      	ldr	r3, [r3, #0]
   30ac8:	2200      	movs	r2, #0
   30aca:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   30acc:	69fb      	ldr	r3, [r7, #28]
   30ace:	025b      	lsls	r3, r3, #9
   30ad0:	623b      	str	r3, [r7, #32]
				continue;
   30ad2:	e051      	b.n	30b78 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   30ad4:	68fb      	ldr	r3, [r7, #12]
   30ad6:	689a      	ldr	r2, [r3, #8]
   30ad8:	68fb      	ldr	r3, [r7, #12]
   30ada:	68db      	ldr	r3, [r3, #12]
   30adc:	429a      	cmp	r2, r3
   30ade:	d315      	bcc.n	30b0c <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   30ae0:	68fb      	ldr	r3, [r7, #12]
   30ae2:	681b      	ldr	r3, [r3, #0]
   30ae4:	2100      	movs	r1, #0
   30ae6:	0018      	movs	r0, r3
   30ae8:	4b3d      	ldr	r3, [pc, #244]	; (30be0 <f_write+0x340>)
   30aea:	4798      	blx	r3
   30aec:	1e03      	subs	r3, r0, #0
   30aee:	d009      	beq.n	30b04 <f_write+0x264>
   30af0:	68fb      	ldr	r3, [r7, #12]
   30af2:	799b      	ldrb	r3, [r3, #6]
   30af4:	2280      	movs	r2, #128	; 0x80
   30af6:	4252      	negs	r2, r2
   30af8:	4313      	orrs	r3, r2
   30afa:	b2da      	uxtb	r2, r3
   30afc:	68fb      	ldr	r3, [r7, #12]
   30afe:	719a      	strb	r2, [r3, #6]
   30b00:	2301      	movs	r3, #1
   30b02:	e065      	b.n	30bd0 <f_write+0x330>
				fp->fs->winsect = sect;
   30b04:	68fb      	ldr	r3, [r7, #12]
   30b06:	681b      	ldr	r3, [r3, #0]
   30b08:	693a      	ldr	r2, [r7, #16]
   30b0a:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   30b0c:	68fb      	ldr	r3, [r7, #12]
   30b0e:	693a      	ldr	r2, [r7, #16]
   30b10:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   30b12:	68fb      	ldr	r3, [r7, #12]
   30b14:	689b      	ldr	r3, [r3, #8]
   30b16:	05db      	lsls	r3, r3, #23
   30b18:	0ddb      	lsrs	r3, r3, #23
   30b1a:	2280      	movs	r2, #128	; 0x80
   30b1c:	0092      	lsls	r2, r2, #2
   30b1e:	1ad3      	subs	r3, r2, r3
   30b20:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   30b22:	6a3a      	ldr	r2, [r7, #32]
   30b24:	687b      	ldr	r3, [r7, #4]
   30b26:	429a      	cmp	r2, r3
   30b28:	d901      	bls.n	30b2e <f_write+0x28e>
   30b2a:	687b      	ldr	r3, [r7, #4]
   30b2c:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   30b2e:	68fb      	ldr	r3, [r7, #12]
   30b30:	681a      	ldr	r2, [r3, #0]
   30b32:	68fb      	ldr	r3, [r7, #12]
   30b34:	699b      	ldr	r3, [r3, #24]
   30b36:	0019      	movs	r1, r3
   30b38:	0010      	movs	r0, r2
   30b3a:	4b29      	ldr	r3, [pc, #164]	; (30be0 <f_write+0x340>)
   30b3c:	4798      	blx	r3
   30b3e:	1e03      	subs	r3, r0, #0
   30b40:	d009      	beq.n	30b56 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   30b42:	68fb      	ldr	r3, [r7, #12]
   30b44:	799b      	ldrb	r3, [r3, #6]
   30b46:	2280      	movs	r2, #128	; 0x80
   30b48:	4252      	negs	r2, r2
   30b4a:	4313      	orrs	r3, r2
   30b4c:	b2da      	uxtb	r2, r3
   30b4e:	68fb      	ldr	r3, [r7, #12]
   30b50:	719a      	strb	r2, [r3, #6]
   30b52:	2301      	movs	r3, #1
   30b54:	e03c      	b.n	30bd0 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   30b56:	68fb      	ldr	r3, [r7, #12]
   30b58:	681a      	ldr	r2, [r3, #0]
   30b5a:	68fb      	ldr	r3, [r7, #12]
   30b5c:	689b      	ldr	r3, [r3, #8]
   30b5e:	05db      	lsls	r3, r3, #23
   30b60:	0ddb      	lsrs	r3, r3, #23
   30b62:	3330      	adds	r3, #48	; 0x30
   30b64:	18d3      	adds	r3, r2, r3
   30b66:	6a3a      	ldr	r2, [r7, #32]
   30b68:	69b9      	ldr	r1, [r7, #24]
   30b6a:	0018      	movs	r0, r3
   30b6c:	4b1f      	ldr	r3, [pc, #124]	; (30bec <f_write+0x34c>)
   30b6e:	4798      	blx	r3
		fp->fs->wflag = 1;
   30b70:	68fb      	ldr	r3, [r7, #12]
   30b72:	681b      	ldr	r3, [r3, #0]
   30b74:	2201      	movs	r2, #1
   30b76:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   30b78:	69ba      	ldr	r2, [r7, #24]
   30b7a:	6a3b      	ldr	r3, [r7, #32]
   30b7c:	18d3      	adds	r3, r2, r3
   30b7e:	61bb      	str	r3, [r7, #24]
   30b80:	68fb      	ldr	r3, [r7, #12]
   30b82:	689a      	ldr	r2, [r3, #8]
   30b84:	6a3b      	ldr	r3, [r7, #32]
   30b86:	18d2      	adds	r2, r2, r3
   30b88:	68fb      	ldr	r3, [r7, #12]
   30b8a:	609a      	str	r2, [r3, #8]
   30b8c:	683b      	ldr	r3, [r7, #0]
   30b8e:	681a      	ldr	r2, [r3, #0]
   30b90:	6a3b      	ldr	r3, [r7, #32]
   30b92:	18d2      	adds	r2, r2, r3
   30b94:	683b      	ldr	r3, [r7, #0]
   30b96:	601a      	str	r2, [r3, #0]
   30b98:	687a      	ldr	r2, [r7, #4]
   30b9a:	6a3b      	ldr	r3, [r7, #32]
   30b9c:	1ad3      	subs	r3, r2, r3
   30b9e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   30ba0:	687b      	ldr	r3, [r7, #4]
   30ba2:	2b00      	cmp	r3, #0
   30ba4:	d000      	beq.n	30ba8 <f_write+0x308>
   30ba6:	e6b7      	b.n	30918 <f_write+0x78>
   30ba8:	e000      	b.n	30bac <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   30baa:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   30bac:	68fb      	ldr	r3, [r7, #12]
   30bae:	689a      	ldr	r2, [r3, #8]
   30bb0:	68fb      	ldr	r3, [r7, #12]
   30bb2:	68db      	ldr	r3, [r3, #12]
   30bb4:	429a      	cmp	r2, r3
   30bb6:	d903      	bls.n	30bc0 <f_write+0x320>
   30bb8:	68fb      	ldr	r3, [r7, #12]
   30bba:	689a      	ldr	r2, [r3, #8]
   30bbc:	68fb      	ldr	r3, [r7, #12]
   30bbe:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   30bc0:	68fb      	ldr	r3, [r7, #12]
   30bc2:	799b      	ldrb	r3, [r3, #6]
   30bc4:	2220      	movs	r2, #32
   30bc6:	4313      	orrs	r3, r2
   30bc8:	b2da      	uxtb	r2, r3
   30bca:	68fb      	ldr	r3, [r7, #12]
   30bcc:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   30bce:	2300      	movs	r3, #0
}
   30bd0:	0018      	movs	r0, r3
   30bd2:	46bd      	mov	sp, r7
   30bd4:	b00b      	add	sp, #44	; 0x2c
   30bd6:	bd90      	pop	{r4, r7, pc}
   30bd8:	000302c5 	.word	0x000302c5
   30bdc:	0002e951 	.word	0x0002e951
   30be0:	0002e249 	.word	0x0002e249
   30be4:	0002e4a9 	.word	0x0002e4a9
   30be8:	0002df35 	.word	0x0002df35
   30bec:	0002e165 	.word	0x0002e165

00030bf0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   30bf0:	b590      	push	{r4, r7, lr}
   30bf2:	b087      	sub	sp, #28
   30bf4:	af00      	add	r7, sp, #0
   30bf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   30bf8:	687b      	ldr	r3, [r7, #4]
   30bfa:	681a      	ldr	r2, [r3, #0]
   30bfc:	687b      	ldr	r3, [r7, #4]
   30bfe:	889b      	ldrh	r3, [r3, #4]
   30c00:	2117      	movs	r1, #23
   30c02:	187c      	adds	r4, r7, r1
   30c04:	0019      	movs	r1, r3
   30c06:	0010      	movs	r0, r2
   30c08:	4b55      	ldr	r3, [pc, #340]	; (30d60 <f_sync+0x170>)
   30c0a:	4798      	blx	r3
   30c0c:	0003      	movs	r3, r0
   30c0e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   30c10:	2317      	movs	r3, #23
   30c12:	18fb      	adds	r3, r7, r3
   30c14:	781b      	ldrb	r3, [r3, #0]
   30c16:	2b00      	cmp	r3, #0
   30c18:	d000      	beq.n	30c1c <f_sync+0x2c>
   30c1a:	e09a      	b.n	30d52 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   30c1c:	687b      	ldr	r3, [r7, #4]
   30c1e:	799b      	ldrb	r3, [r3, #6]
   30c20:	001a      	movs	r2, r3
   30c22:	2320      	movs	r3, #32
   30c24:	4013      	ands	r3, r2
   30c26:	d100      	bne.n	30c2a <f_sync+0x3a>
   30c28:	e093      	b.n	30d52 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   30c2a:	687b      	ldr	r3, [r7, #4]
   30c2c:	681a      	ldr	r2, [r3, #0]
   30c2e:	687b      	ldr	r3, [r7, #4]
   30c30:	69db      	ldr	r3, [r3, #28]
   30c32:	2117      	movs	r1, #23
   30c34:	187c      	adds	r4, r7, r1
   30c36:	0019      	movs	r1, r3
   30c38:	0010      	movs	r0, r2
   30c3a:	4b4a      	ldr	r3, [pc, #296]	; (30d64 <f_sync+0x174>)
   30c3c:	4798      	blx	r3
   30c3e:	0003      	movs	r3, r0
   30c40:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   30c42:	2317      	movs	r3, #23
   30c44:	18fb      	adds	r3, r7, r3
   30c46:	781b      	ldrb	r3, [r3, #0]
   30c48:	2b00      	cmp	r3, #0
   30c4a:	d000      	beq.n	30c4e <f_sync+0x5e>
   30c4c:	e081      	b.n	30d52 <f_sync+0x162>
				dir = fp->dir_ptr;
   30c4e:	687b      	ldr	r3, [r7, #4]
   30c50:	6a1b      	ldr	r3, [r3, #32]
   30c52:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   30c54:	693b      	ldr	r3, [r7, #16]
   30c56:	330b      	adds	r3, #11
   30c58:	693a      	ldr	r2, [r7, #16]
   30c5a:	320b      	adds	r2, #11
   30c5c:	7812      	ldrb	r2, [r2, #0]
   30c5e:	2120      	movs	r1, #32
   30c60:	430a      	orrs	r2, r1
   30c62:	b2d2      	uxtb	r2, r2
   30c64:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   30c66:	693b      	ldr	r3, [r7, #16]
   30c68:	331c      	adds	r3, #28
   30c6a:	001a      	movs	r2, r3
   30c6c:	687b      	ldr	r3, [r7, #4]
   30c6e:	68db      	ldr	r3, [r3, #12]
   30c70:	b2db      	uxtb	r3, r3
   30c72:	7013      	strb	r3, [r2, #0]
   30c74:	693b      	ldr	r3, [r7, #16]
   30c76:	331d      	adds	r3, #29
   30c78:	001a      	movs	r2, r3
   30c7a:	687b      	ldr	r3, [r7, #4]
   30c7c:	68db      	ldr	r3, [r3, #12]
   30c7e:	b29b      	uxth	r3, r3
   30c80:	0a1b      	lsrs	r3, r3, #8
   30c82:	b29b      	uxth	r3, r3
   30c84:	b2db      	uxtb	r3, r3
   30c86:	7013      	strb	r3, [r2, #0]
   30c88:	693b      	ldr	r3, [r7, #16]
   30c8a:	331e      	adds	r3, #30
   30c8c:	001a      	movs	r2, r3
   30c8e:	687b      	ldr	r3, [r7, #4]
   30c90:	68db      	ldr	r3, [r3, #12]
   30c92:	0c1b      	lsrs	r3, r3, #16
   30c94:	b2db      	uxtb	r3, r3
   30c96:	7013      	strb	r3, [r2, #0]
   30c98:	693b      	ldr	r3, [r7, #16]
   30c9a:	331f      	adds	r3, #31
   30c9c:	001a      	movs	r2, r3
   30c9e:	687b      	ldr	r3, [r7, #4]
   30ca0:	68db      	ldr	r3, [r3, #12]
   30ca2:	0e1b      	lsrs	r3, r3, #24
   30ca4:	b2db      	uxtb	r3, r3
   30ca6:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   30ca8:	693b      	ldr	r3, [r7, #16]
   30caa:	331a      	adds	r3, #26
   30cac:	001a      	movs	r2, r3
   30cae:	687b      	ldr	r3, [r7, #4]
   30cb0:	691b      	ldr	r3, [r3, #16]
   30cb2:	b2db      	uxtb	r3, r3
   30cb4:	7013      	strb	r3, [r2, #0]
   30cb6:	693b      	ldr	r3, [r7, #16]
   30cb8:	331b      	adds	r3, #27
   30cba:	001a      	movs	r2, r3
   30cbc:	687b      	ldr	r3, [r7, #4]
   30cbe:	691b      	ldr	r3, [r3, #16]
   30cc0:	b29b      	uxth	r3, r3
   30cc2:	0a1b      	lsrs	r3, r3, #8
   30cc4:	b29b      	uxth	r3, r3
   30cc6:	b2db      	uxtb	r3, r3
   30cc8:	7013      	strb	r3, [r2, #0]
   30cca:	693b      	ldr	r3, [r7, #16]
   30ccc:	3314      	adds	r3, #20
   30cce:	001a      	movs	r2, r3
   30cd0:	687b      	ldr	r3, [r7, #4]
   30cd2:	691b      	ldr	r3, [r3, #16]
   30cd4:	0c1b      	lsrs	r3, r3, #16
   30cd6:	b2db      	uxtb	r3, r3
   30cd8:	7013      	strb	r3, [r2, #0]
   30cda:	693b      	ldr	r3, [r7, #16]
   30cdc:	3315      	adds	r3, #21
   30cde:	001a      	movs	r2, r3
   30ce0:	687b      	ldr	r3, [r7, #4]
   30ce2:	691b      	ldr	r3, [r3, #16]
   30ce4:	0c1b      	lsrs	r3, r3, #16
   30ce6:	b29b      	uxth	r3, r3
   30ce8:	0a1b      	lsrs	r3, r3, #8
   30cea:	b29b      	uxth	r3, r3
   30cec:	b2db      	uxtb	r3, r3
   30cee:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   30cf0:	4b1d      	ldr	r3, [pc, #116]	; (30d68 <f_sync+0x178>)
   30cf2:	4798      	blx	r3
   30cf4:	0003      	movs	r3, r0
   30cf6:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   30cf8:	693b      	ldr	r3, [r7, #16]
   30cfa:	3316      	adds	r3, #22
   30cfc:	68fa      	ldr	r2, [r7, #12]
   30cfe:	b2d2      	uxtb	r2, r2
   30d00:	701a      	strb	r2, [r3, #0]
   30d02:	693b      	ldr	r3, [r7, #16]
   30d04:	3317      	adds	r3, #23
   30d06:	68fa      	ldr	r2, [r7, #12]
   30d08:	b292      	uxth	r2, r2
   30d0a:	0a12      	lsrs	r2, r2, #8
   30d0c:	b292      	uxth	r2, r2
   30d0e:	b2d2      	uxtb	r2, r2
   30d10:	701a      	strb	r2, [r3, #0]
   30d12:	693b      	ldr	r3, [r7, #16]
   30d14:	3318      	adds	r3, #24
   30d16:	68fa      	ldr	r2, [r7, #12]
   30d18:	0c12      	lsrs	r2, r2, #16
   30d1a:	b2d2      	uxtb	r2, r2
   30d1c:	701a      	strb	r2, [r3, #0]
   30d1e:	693b      	ldr	r3, [r7, #16]
   30d20:	3319      	adds	r3, #25
   30d22:	68fa      	ldr	r2, [r7, #12]
   30d24:	0e12      	lsrs	r2, r2, #24
   30d26:	b2d2      	uxtb	r2, r2
   30d28:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   30d2a:	687b      	ldr	r3, [r7, #4]
   30d2c:	799b      	ldrb	r3, [r3, #6]
   30d2e:	2220      	movs	r2, #32
   30d30:	4393      	bics	r3, r2
   30d32:	b2da      	uxtb	r2, r3
   30d34:	687b      	ldr	r3, [r7, #4]
   30d36:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   30d38:	687b      	ldr	r3, [r7, #4]
   30d3a:	681b      	ldr	r3, [r3, #0]
   30d3c:	2201      	movs	r2, #1
   30d3e:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   30d40:	687b      	ldr	r3, [r7, #4]
   30d42:	681b      	ldr	r3, [r3, #0]
   30d44:	2217      	movs	r2, #23
   30d46:	18bc      	adds	r4, r7, r2
   30d48:	0018      	movs	r0, r3
   30d4a:	4b08      	ldr	r3, [pc, #32]	; (30d6c <f_sync+0x17c>)
   30d4c:	4798      	blx	r3
   30d4e:	0003      	movs	r3, r0
   30d50:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   30d52:	2317      	movs	r3, #23
   30d54:	18fb      	adds	r3, r7, r3
   30d56:	781b      	ldrb	r3, [r3, #0]
}
   30d58:	0018      	movs	r0, r3
   30d5a:	46bd      	mov	sp, r7
   30d5c:	b007      	add	sp, #28
   30d5e:	bd90      	pop	{r4, r7, pc}
   30d60:	000302c5 	.word	0x000302c5
   30d64:	0002e249 	.word	0x0002e249
   30d68:	0002e105 	.word	0x0002e105
   30d6c:	0002e311 	.word	0x0002e311

00030d70 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   30d70:	b590      	push	{r4, r7, lr}
   30d72:	b085      	sub	sp, #20
   30d74:	af00      	add	r7, sp, #0
   30d76:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   30d78:	230f      	movs	r3, #15
   30d7a:	18fc      	adds	r4, r7, r3
   30d7c:	687b      	ldr	r3, [r7, #4]
   30d7e:	0018      	movs	r0, r3
   30d80:	4b09      	ldr	r3, [pc, #36]	; (30da8 <f_close+0x38>)
   30d82:	4798      	blx	r3
   30d84:	0003      	movs	r3, r0
   30d86:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   30d88:	230f      	movs	r3, #15
   30d8a:	18fb      	adds	r3, r7, r3
   30d8c:	781b      	ldrb	r3, [r3, #0]
   30d8e:	2b00      	cmp	r3, #0
   30d90:	d102      	bne.n	30d98 <f_close+0x28>
   30d92:	687b      	ldr	r3, [r7, #4]
   30d94:	2200      	movs	r2, #0
   30d96:	601a      	str	r2, [r3, #0]
	return res;
   30d98:	230f      	movs	r3, #15
   30d9a:	18fb      	adds	r3, r7, r3
   30d9c:	781b      	ldrb	r3, [r3, #0]
#endif
}
   30d9e:	0018      	movs	r0, r3
   30da0:	46bd      	mov	sp, r7
   30da2:	b005      	add	sp, #20
   30da4:	bd90      	pop	{r4, r7, pc}
   30da6:	46c0      	nop			; (mov r8, r8)
   30da8:	00030bf1 	.word	0x00030bf1

00030dac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   30dac:	b580      	push	{r7, lr}
   30dae:	b084      	sub	sp, #16
   30db0:	af00      	add	r7, sp, #0
   30db2:	0002      	movs	r2, r0
   30db4:	6039      	str	r1, [r7, #0]
   30db6:	1dbb      	adds	r3, r7, #6
   30db8:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   30dba:	1dbb      	adds	r3, r7, #6
   30dbc:	881b      	ldrh	r3, [r3, #0]
   30dbe:	2b7f      	cmp	r3, #127	; 0x7f
   30dc0:	d805      	bhi.n	30dce <ff_convert+0x22>
		c = src;
   30dc2:	230e      	movs	r3, #14
   30dc4:	18fb      	adds	r3, r7, r3
   30dc6:	1dba      	adds	r2, r7, #6
   30dc8:	8812      	ldrh	r2, [r2, #0]
   30dca:	801a      	strh	r2, [r3, #0]
   30dcc:	e03a      	b.n	30e44 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   30dce:	683b      	ldr	r3, [r7, #0]
   30dd0:	2b00      	cmp	r3, #0
   30dd2:	d010      	beq.n	30df6 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   30dd4:	1dbb      	adds	r3, r7, #6
   30dd6:	881b      	ldrh	r3, [r3, #0]
   30dd8:	2bff      	cmp	r3, #255	; 0xff
   30dda:	d807      	bhi.n	30dec <ff_convert+0x40>
   30ddc:	1dbb      	adds	r3, r7, #6
   30dde:	881b      	ldrh	r3, [r3, #0]
   30de0:	3b80      	subs	r3, #128	; 0x80
   30de2:	001a      	movs	r2, r3
   30de4:	4b1b      	ldr	r3, [pc, #108]	; (30e54 <ff_convert+0xa8>)
   30de6:	0052      	lsls	r2, r2, #1
   30de8:	5ad2      	ldrh	r2, [r2, r3]
   30dea:	e000      	b.n	30dee <ff_convert+0x42>
   30dec:	2200      	movs	r2, #0
   30dee:	230e      	movs	r3, #14
   30df0:	18fb      	adds	r3, r7, r3
   30df2:	801a      	strh	r2, [r3, #0]
   30df4:	e026      	b.n	30e44 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   30df6:	230e      	movs	r3, #14
   30df8:	18fb      	adds	r3, r7, r3
   30dfa:	2200      	movs	r2, #0
   30dfc:	801a      	strh	r2, [r3, #0]
   30dfe:	e010      	b.n	30e22 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   30e00:	230e      	movs	r3, #14
   30e02:	18fb      	adds	r3, r7, r3
   30e04:	881a      	ldrh	r2, [r3, #0]
   30e06:	4b13      	ldr	r3, [pc, #76]	; (30e54 <ff_convert+0xa8>)
   30e08:	0052      	lsls	r2, r2, #1
   30e0a:	5ad3      	ldrh	r3, [r2, r3]
   30e0c:	1dba      	adds	r2, r7, #6
   30e0e:	8812      	ldrh	r2, [r2, #0]
   30e10:	429a      	cmp	r2, r3
   30e12:	d00c      	beq.n	30e2e <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   30e14:	230e      	movs	r3, #14
   30e16:	18fb      	adds	r3, r7, r3
   30e18:	881a      	ldrh	r2, [r3, #0]
   30e1a:	230e      	movs	r3, #14
   30e1c:	18fb      	adds	r3, r7, r3
   30e1e:	3201      	adds	r2, #1
   30e20:	801a      	strh	r2, [r3, #0]
   30e22:	230e      	movs	r3, #14
   30e24:	18fb      	adds	r3, r7, r3
   30e26:	881b      	ldrh	r3, [r3, #0]
   30e28:	2b7f      	cmp	r3, #127	; 0x7f
   30e2a:	d9e9      	bls.n	30e00 <ff_convert+0x54>
   30e2c:	e000      	b.n	30e30 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   30e2e:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   30e30:	230e      	movs	r3, #14
   30e32:	18fb      	adds	r3, r7, r3
   30e34:	881b      	ldrh	r3, [r3, #0]
   30e36:	3380      	adds	r3, #128	; 0x80
   30e38:	b29a      	uxth	r2, r3
   30e3a:	230e      	movs	r3, #14
   30e3c:	18fb      	adds	r3, r7, r3
   30e3e:	21ff      	movs	r1, #255	; 0xff
   30e40:	400a      	ands	r2, r1
   30e42:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   30e44:	230e      	movs	r3, #14
   30e46:	18fb      	adds	r3, r7, r3
   30e48:	881b      	ldrh	r3, [r3, #0]
}
   30e4a:	0018      	movs	r0, r3
   30e4c:	46bd      	mov	sp, r7
   30e4e:	b004      	add	sp, #16
   30e50:	bd80      	pop	{r7, pc}
   30e52:	46c0      	nop			; (mov r8, r8)
   30e54:	0003c7c8 	.word	0x0003c7c8

00030e58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   30e58:	b580      	push	{r7, lr}
   30e5a:	b084      	sub	sp, #16
   30e5c:	af00      	add	r7, sp, #0
   30e5e:	0002      	movs	r2, r0
   30e60:	1dbb      	adds	r3, r7, #6
   30e62:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   30e64:	2300      	movs	r3, #0
   30e66:	60fb      	str	r3, [r7, #12]
   30e68:	e002      	b.n	30e70 <ff_wtoupper+0x18>
   30e6a:	68fb      	ldr	r3, [r7, #12]
   30e6c:	3301      	adds	r3, #1
   30e6e:	60fb      	str	r3, [r7, #12]
   30e70:	4b0f      	ldr	r3, [pc, #60]	; (30eb0 <ff_wtoupper+0x58>)
   30e72:	68fa      	ldr	r2, [r7, #12]
   30e74:	0052      	lsls	r2, r2, #1
   30e76:	5ad3      	ldrh	r3, [r2, r3]
   30e78:	2b00      	cmp	r3, #0
   30e7a:	d007      	beq.n	30e8c <ff_wtoupper+0x34>
   30e7c:	4b0c      	ldr	r3, [pc, #48]	; (30eb0 <ff_wtoupper+0x58>)
   30e7e:	68fa      	ldr	r2, [r7, #12]
   30e80:	0052      	lsls	r2, r2, #1
   30e82:	5ad3      	ldrh	r3, [r2, r3]
   30e84:	1dba      	adds	r2, r7, #6
   30e86:	8812      	ldrh	r2, [r2, #0]
   30e88:	429a      	cmp	r2, r3
   30e8a:	d1ee      	bne.n	30e6a <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   30e8c:	4b08      	ldr	r3, [pc, #32]	; (30eb0 <ff_wtoupper+0x58>)
   30e8e:	68fa      	ldr	r2, [r7, #12]
   30e90:	0052      	lsls	r2, r2, #1
   30e92:	5ad3      	ldrh	r3, [r2, r3]
   30e94:	2b00      	cmp	r3, #0
   30e96:	d004      	beq.n	30ea2 <ff_wtoupper+0x4a>
   30e98:	4b06      	ldr	r3, [pc, #24]	; (30eb4 <ff_wtoupper+0x5c>)
   30e9a:	68fa      	ldr	r2, [r7, #12]
   30e9c:	0052      	lsls	r2, r2, #1
   30e9e:	5ad3      	ldrh	r3, [r2, r3]
   30ea0:	e001      	b.n	30ea6 <ff_wtoupper+0x4e>
   30ea2:	1dbb      	adds	r3, r7, #6
   30ea4:	881b      	ldrh	r3, [r3, #0]
}
   30ea6:	0018      	movs	r0, r3
   30ea8:	46bd      	mov	sp, r7
   30eaa:	b004      	add	sp, #16
   30eac:	bd80      	pop	{r7, pc}
   30eae:	46c0      	nop			; (mov r8, r8)
   30eb0:	0003c8c8 	.word	0x0003c8c8
   30eb4:	0003caa8 	.word	0x0003caa8

00030eb8 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   30eb8:	b580      	push	{r7, lr}
   30eba:	b084      	sub	sp, #16
   30ebc:	af00      	add	r7, sp, #0
   30ebe:	60f8      	str	r0, [r7, #12]
   30ec0:	60b9      	str	r1, [r7, #8]
   30ec2:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   30ec4:	68fb      	ldr	r3, [r7, #12]
   30ec6:	68ba      	ldr	r2, [r7, #8]
   30ec8:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   30eca:	68fb      	ldr	r3, [r7, #12]
   30ecc:	687a      	ldr	r2, [r7, #4]
   30ece:	601a      	str	r2, [r3, #0]
}
   30ed0:	46c0      	nop			; (mov r8, r8)
   30ed2:	46bd      	mov	sp, r7
   30ed4:	b004      	add	sp, #16
   30ed6:	bd80      	pop	{r7, pc}

00030ed8 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   30ed8:	b580      	push	{r7, lr}
   30eda:	b082      	sub	sp, #8
   30edc:	af00      	add	r7, sp, #0
   30ede:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   30ee0:	687b      	ldr	r3, [r7, #4]
   30ee2:	681b      	ldr	r3, [r3, #0]
   30ee4:	4a07      	ldr	r2, [pc, #28]	; (30f04 <getNextPacketId+0x2c>)
   30ee6:	4293      	cmp	r3, r2
   30ee8:	d003      	beq.n	30ef2 <getNextPacketId+0x1a>
   30eea:	687b      	ldr	r3, [r7, #4]
   30eec:	681b      	ldr	r3, [r3, #0]
   30eee:	1c5a      	adds	r2, r3, #1
   30ef0:	e000      	b.n	30ef4 <getNextPacketId+0x1c>
   30ef2:	2201      	movs	r2, #1
   30ef4:	687b      	ldr	r3, [r7, #4]
   30ef6:	601a      	str	r2, [r3, #0]
   30ef8:	687b      	ldr	r3, [r7, #4]
   30efa:	681b      	ldr	r3, [r3, #0]
}
   30efc:	0018      	movs	r0, r3
   30efe:	46bd      	mov	sp, r7
   30f00:	b002      	add	sp, #8
   30f02:	bd80      	pop	{r7, pc}
   30f04:	0000ffff 	.word	0x0000ffff

00030f08 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   30f08:	b5f0      	push	{r4, r5, r6, r7, lr}
   30f0a:	b087      	sub	sp, #28
   30f0c:	af00      	add	r7, sp, #0
   30f0e:	60f8      	str	r0, [r7, #12]
   30f10:	60b9      	str	r1, [r7, #8]
   30f12:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   30f14:	2301      	movs	r3, #1
   30f16:	425b      	negs	r3, r3
   30f18:	617b      	str	r3, [r7, #20]
        sent = 0;
   30f1a:	2300      	movs	r3, #0
   30f1c:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   30f1e:	e01a      	b.n	30f56 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   30f20:	68fb      	ldr	r3, [r7, #12]
   30f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   30f24:	68dc      	ldr	r4, [r3, #12]
   30f26:	68fb      	ldr	r3, [r7, #12]
   30f28:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   30f2a:	68fb      	ldr	r3, [r7, #12]
   30f2c:	691a      	ldr	r2, [r3, #16]
   30f2e:	693b      	ldr	r3, [r7, #16]
   30f30:	18d6      	adds	r6, r2, r3
   30f32:	687b      	ldr	r3, [r7, #4]
   30f34:	0018      	movs	r0, r3
   30f36:	4b1a      	ldr	r3, [pc, #104]	; (30fa0 <sendPacket+0x98>)
   30f38:	4798      	blx	r3
   30f3a:	0003      	movs	r3, r0
   30f3c:	68ba      	ldr	r2, [r7, #8]
   30f3e:	0031      	movs	r1, r6
   30f40:	0028      	movs	r0, r5
   30f42:	47a0      	blx	r4
   30f44:	0003      	movs	r3, r0
   30f46:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   30f48:	697b      	ldr	r3, [r7, #20]
   30f4a:	2b00      	cmp	r3, #0
   30f4c:	db0e      	blt.n	30f6c <sendPacket+0x64>
            break;
        sent += rc;
   30f4e:	693a      	ldr	r2, [r7, #16]
   30f50:	697b      	ldr	r3, [r7, #20]
   30f52:	18d3      	adds	r3, r2, r3
   30f54:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   30f56:	693a      	ldr	r2, [r7, #16]
   30f58:	68bb      	ldr	r3, [r7, #8]
   30f5a:	429a      	cmp	r2, r3
   30f5c:	da07      	bge.n	30f6e <sendPacket+0x66>
   30f5e:	687b      	ldr	r3, [r7, #4]
   30f60:	0018      	movs	r0, r3
   30f62:	4b10      	ldr	r3, [pc, #64]	; (30fa4 <sendPacket+0x9c>)
   30f64:	4798      	blx	r3
   30f66:	1e03      	subs	r3, r0, #0
   30f68:	d0da      	beq.n	30f20 <sendPacket+0x18>
   30f6a:	e000      	b.n	30f6e <sendPacket+0x66>
            break;
   30f6c:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   30f6e:	693a      	ldr	r2, [r7, #16]
   30f70:	68bb      	ldr	r3, [r7, #8]
   30f72:	429a      	cmp	r2, r3
   30f74:	d10b      	bne.n	30f8e <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   30f76:	68fb      	ldr	r3, [r7, #12]
   30f78:	3354      	adds	r3, #84	; 0x54
   30f7a:	001a      	movs	r2, r3
   30f7c:	68fb      	ldr	r3, [r7, #12]
   30f7e:	699b      	ldr	r3, [r3, #24]
   30f80:	0019      	movs	r1, r3
   30f82:	0010      	movs	r0, r2
   30f84:	4b08      	ldr	r3, [pc, #32]	; (30fa8 <sendPacket+0xa0>)
   30f86:	4798      	blx	r3
        rc = SUCCESS;
   30f88:	2300      	movs	r3, #0
   30f8a:	617b      	str	r3, [r7, #20]
   30f8c:	e002      	b.n	30f94 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   30f8e:	2301      	movs	r3, #1
   30f90:	425b      	negs	r3, r3
   30f92:	617b      	str	r3, [r7, #20]
    return rc;
   30f94:	697b      	ldr	r3, [r7, #20]
}
   30f96:	0018      	movs	r0, r3
   30f98:	46bd      	mov	sp, r7
   30f9a:	b007      	add	sp, #28
   30f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30f9e:	46c0      	nop			; (mov r8, r8)
   30fa0:	00031d69 	.word	0x00031d69
   30fa4:	00031ced 	.word	0x00031ced
   30fa8:	00031d41 	.word	0x00031d41

00030fac <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   30fac:	b580      	push	{r7, lr}
   30fae:	b086      	sub	sp, #24
   30fb0:	af00      	add	r7, sp, #0
   30fb2:	60f8      	str	r0, [r7, #12]
   30fb4:	60b9      	str	r1, [r7, #8]
   30fb6:	607a      	str	r2, [r7, #4]
   30fb8:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   30fba:	68fb      	ldr	r3, [r7, #12]
   30fbc:	68ba      	ldr	r2, [r7, #8]
   30fbe:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   30fc0:	2300      	movs	r3, #0
   30fc2:	617b      	str	r3, [r7, #20]
   30fc4:	e00a      	b.n	30fdc <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   30fc6:	68fa      	ldr	r2, [r7, #12]
   30fc8:	697b      	ldr	r3, [r7, #20]
   30fca:	3304      	adds	r3, #4
   30fcc:	00db      	lsls	r3, r3, #3
   30fce:	18d3      	adds	r3, r2, r3
   30fd0:	3304      	adds	r3, #4
   30fd2:	2200      	movs	r2, #0
   30fd4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   30fd6:	697b      	ldr	r3, [r7, #20]
   30fd8:	3301      	adds	r3, #1
   30fda:	617b      	str	r3, [r7, #20]
   30fdc:	697b      	ldr	r3, [r7, #20]
   30fde:	2b04      	cmp	r3, #4
   30fe0:	ddf1      	ble.n	30fc6 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   30fe2:	68fb      	ldr	r3, [r7, #12]
   30fe4:	687a      	ldr	r2, [r7, #4]
   30fe6:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   30fe8:	68fb      	ldr	r3, [r7, #12]
   30fea:	683a      	ldr	r2, [r7, #0]
   30fec:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   30fee:	68fb      	ldr	r3, [r7, #12]
   30ff0:	6a3a      	ldr	r2, [r7, #32]
   30ff2:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   30ff4:	68fb      	ldr	r3, [r7, #12]
   30ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30ff8:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   30ffa:	68fb      	ldr	r3, [r7, #12]
   30ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30ffe:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   31000:	68fb      	ldr	r3, [r7, #12]
   31002:	2200      	movs	r2, #0
   31004:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   31006:	68fb      	ldr	r3, [r7, #12]
   31008:	2200      	movs	r2, #0
   3100a:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   3100c:	68fb      	ldr	r3, [r7, #12]
   3100e:	2200      	movs	r2, #0
   31010:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   31012:	68fb      	ldr	r3, [r7, #12]
   31014:	2201      	movs	r2, #1
   31016:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   31018:	68fb      	ldr	r3, [r7, #12]
   3101a:	3354      	adds	r3, #84	; 0x54
   3101c:	0018      	movs	r0, r3
   3101e:	4b03      	ldr	r3, [pc, #12]	; (3102c <MQTTClientInit+0x80>)
   31020:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   31022:	46c0      	nop			; (mov r8, r8)
   31024:	46bd      	mov	sp, r7
   31026:	b006      	add	sp, #24
   31028:	bd80      	pop	{r7, pc}
   3102a:	46c0      	nop			; (mov r8, r8)
   3102c:	00031d91 	.word	0x00031d91

00031030 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   31030:	b590      	push	{r4, r7, lr}
   31032:	b08b      	sub	sp, #44	; 0x2c
   31034:	af00      	add	r7, sp, #0
   31036:	60f8      	str	r0, [r7, #12]
   31038:	60b9      	str	r1, [r7, #8]
   3103a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   3103c:	2301      	movs	r3, #1
   3103e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   31040:	2300      	movs	r3, #0
   31042:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   31044:	2304      	movs	r3, #4
   31046:	61fb      	str	r3, [r7, #28]

    *value = 0;
   31048:	68bb      	ldr	r3, [r7, #8]
   3104a:	2200      	movs	r2, #0
   3104c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   3104e:	2301      	movs	r3, #1
   31050:	425b      	negs	r3, r3
   31052:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   31054:	6a3b      	ldr	r3, [r7, #32]
   31056:	3301      	adds	r3, #1
   31058:	623b      	str	r3, [r7, #32]
   3105a:	6a3a      	ldr	r2, [r7, #32]
   3105c:	69fb      	ldr	r3, [r7, #28]
   3105e:	429a      	cmp	r2, r3
   31060:	dd03      	ble.n	3106a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   31062:	2301      	movs	r3, #1
   31064:	425b      	negs	r3, r3
   31066:	61bb      	str	r3, [r7, #24]
            goto exit;
   31068:	e026      	b.n	310b8 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   3106a:	68fb      	ldr	r3, [r7, #12]
   3106c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   3106e:	689c      	ldr	r4, [r3, #8]
   31070:	68fb      	ldr	r3, [r7, #12]
   31072:	6d18      	ldr	r0, [r3, #80]	; 0x50
   31074:	687b      	ldr	r3, [r7, #4]
   31076:	2217      	movs	r2, #23
   31078:	18b9      	adds	r1, r7, r2
   3107a:	2201      	movs	r2, #1
   3107c:	47a0      	blx	r4
   3107e:	0003      	movs	r3, r0
   31080:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   31082:	69bb      	ldr	r3, [r7, #24]
   31084:	2b01      	cmp	r3, #1
   31086:	d116      	bne.n	310b6 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   31088:	68bb      	ldr	r3, [r7, #8]
   3108a:	681a      	ldr	r2, [r3, #0]
   3108c:	2317      	movs	r3, #23
   3108e:	18fb      	adds	r3, r7, r3
   31090:	781b      	ldrb	r3, [r3, #0]
   31092:	0019      	movs	r1, r3
   31094:	237f      	movs	r3, #127	; 0x7f
   31096:	400b      	ands	r3, r1
   31098:	6a79      	ldr	r1, [r7, #36]	; 0x24
   3109a:	434b      	muls	r3, r1
   3109c:	18d2      	adds	r2, r2, r3
   3109e:	68bb      	ldr	r3, [r7, #8]
   310a0:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   310a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   310a4:	01db      	lsls	r3, r3, #7
   310a6:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   310a8:	2317      	movs	r3, #23
   310aa:	18fb      	adds	r3, r7, r3
   310ac:	781b      	ldrb	r3, [r3, #0]
   310ae:	b25b      	sxtb	r3, r3
   310b0:	2b00      	cmp	r3, #0
   310b2:	dbcc      	blt.n	3104e <decodePacket+0x1e>
   310b4:	e000      	b.n	310b8 <decodePacket+0x88>
            goto exit;
   310b6:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   310b8:	6a3b      	ldr	r3, [r7, #32]
}
   310ba:	0018      	movs	r0, r3
   310bc:	46bd      	mov	sp, r7
   310be:	b00b      	add	sp, #44	; 0x2c
   310c0:	bd90      	pop	{r4, r7, pc}
	...

000310c4 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   310c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   310c6:	46c6      	mov	lr, r8
   310c8:	b500      	push	{lr}
   310ca:	b086      	sub	sp, #24
   310cc:	af00      	add	r7, sp, #0
   310ce:	6078      	str	r0, [r7, #4]
   310d0:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   310d2:	2301      	movs	r3, #1
   310d4:	425b      	negs	r3, r3
   310d6:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   310d8:	2300      	movs	r3, #0
   310da:	60fb      	str	r3, [r7, #12]
    int len = 0;
   310dc:	2300      	movs	r3, #0
   310de:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   310e0:	2300      	movs	r3, #0
   310e2:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   310e4:	687b      	ldr	r3, [r7, #4]
   310e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   310e8:	689c      	ldr	r4, [r3, #8]
   310ea:	687b      	ldr	r3, [r7, #4]
   310ec:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   310ee:	687b      	ldr	r3, [r7, #4]
   310f0:	695e      	ldr	r6, [r3, #20]
   310f2:	683b      	ldr	r3, [r7, #0]
   310f4:	0018      	movs	r0, r3
   310f6:	4b2b      	ldr	r3, [pc, #172]	; (311a4 <readPacket+0xe0>)
   310f8:	4798      	blx	r3
   310fa:	0003      	movs	r3, r0
   310fc:	2201      	movs	r2, #1
   310fe:	0031      	movs	r1, r6
   31100:	0028      	movs	r0, r5
   31102:	47a0      	blx	r4
   31104:	0003      	movs	r3, r0
   31106:	2b01      	cmp	r3, #1
   31108:	d141      	bne.n	3118e <readPacket+0xca>
        goto exit;

    len = 1;
   3110a:	2301      	movs	r3, #1
   3110c:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   3110e:	683b      	ldr	r3, [r7, #0]
   31110:	0018      	movs	r0, r3
   31112:	4b24      	ldr	r3, [pc, #144]	; (311a4 <readPacket+0xe0>)
   31114:	4798      	blx	r3
   31116:	0002      	movs	r2, r0
   31118:	2308      	movs	r3, #8
   3111a:	18f9      	adds	r1, r7, r3
   3111c:	687b      	ldr	r3, [r7, #4]
   3111e:	0018      	movs	r0, r3
   31120:	4b21      	ldr	r3, [pc, #132]	; (311a8 <readPacket+0xe4>)
   31122:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   31124:	687b      	ldr	r3, [r7, #4]
   31126:	695b      	ldr	r3, [r3, #20]
   31128:	3301      	adds	r3, #1
   3112a:	68ba      	ldr	r2, [r7, #8]
   3112c:	0011      	movs	r1, r2
   3112e:	0018      	movs	r0, r3
   31130:	4b1e      	ldr	r3, [pc, #120]	; (311ac <readPacket+0xe8>)
   31132:	4798      	blx	r3
   31134:	0002      	movs	r2, r0
   31136:	693b      	ldr	r3, [r7, #16]
   31138:	189b      	adds	r3, r3, r2
   3113a:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   3113c:	68bb      	ldr	r3, [r7, #8]
   3113e:	2b00      	cmp	r3, #0
   31140:	dd17      	ble.n	31172 <readPacket+0xae>
   31142:	687b      	ldr	r3, [r7, #4]
   31144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   31146:	689c      	ldr	r4, [r3, #8]
   31148:	687b      	ldr	r3, [r7, #4]
   3114a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   3114c:	687b      	ldr	r3, [r7, #4]
   3114e:	695a      	ldr	r2, [r3, #20]
   31150:	693b      	ldr	r3, [r7, #16]
   31152:	18d6      	adds	r6, r2, r3
   31154:	68bb      	ldr	r3, [r7, #8]
   31156:	4698      	mov	r8, r3
   31158:	683b      	ldr	r3, [r7, #0]
   3115a:	0018      	movs	r0, r3
   3115c:	4b11      	ldr	r3, [pc, #68]	; (311a4 <readPacket+0xe0>)
   3115e:	4798      	blx	r3
   31160:	0003      	movs	r3, r0
   31162:	4642      	mov	r2, r8
   31164:	0031      	movs	r1, r6
   31166:	0028      	movs	r0, r5
   31168:	47a0      	blx	r4
   3116a:	0002      	movs	r2, r0
   3116c:	68bb      	ldr	r3, [r7, #8]
   3116e:	429a      	cmp	r2, r3
   31170:	d10f      	bne.n	31192 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   31172:	687b      	ldr	r3, [r7, #4]
   31174:	695b      	ldr	r3, [r3, #20]
   31176:	781a      	ldrb	r2, [r3, #0]
   31178:	230c      	movs	r3, #12
   3117a:	18fb      	adds	r3, r7, r3
   3117c:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   3117e:	230c      	movs	r3, #12
   31180:	18fb      	adds	r3, r7, r3
   31182:	781b      	ldrb	r3, [r3, #0]
   31184:	061b      	lsls	r3, r3, #24
   31186:	0f1b      	lsrs	r3, r3, #28
   31188:	b2db      	uxtb	r3, r3
   3118a:	617b      	str	r3, [r7, #20]
   3118c:	e002      	b.n	31194 <readPacket+0xd0>
        goto exit;
   3118e:	46c0      	nop			; (mov r8, r8)
   31190:	e000      	b.n	31194 <readPacket+0xd0>
        goto exit;
   31192:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   31194:	697b      	ldr	r3, [r7, #20]
}
   31196:	0018      	movs	r0, r3
   31198:	46bd      	mov	sp, r7
   3119a:	b006      	add	sp, #24
   3119c:	bc04      	pop	{r2}
   3119e:	4690      	mov	r8, r2
   311a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   311a2:	46c0      	nop			; (mov r8, r8)
   311a4:	00031d69 	.word	0x00031d69
   311a8:	00031031 	.word	0x00031031
   311ac:	00032b41 	.word	0x00032b41

000311b0 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   311b0:	b580      	push	{r7, lr}
   311b2:	b086      	sub	sp, #24
   311b4:	af00      	add	r7, sp, #0
   311b6:	6078      	str	r0, [r7, #4]
   311b8:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   311ba:	687b      	ldr	r3, [r7, #4]
   311bc:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   311be:	683b      	ldr	r3, [r7, #0]
   311c0:	689b      	ldr	r3, [r3, #8]
   311c2:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   311c4:	683b      	ldr	r3, [r7, #0]
   311c6:	685b      	ldr	r3, [r3, #4]
   311c8:	001a      	movs	r2, r3
   311ca:	693b      	ldr	r3, [r7, #16]
   311cc:	189b      	adds	r3, r3, r2
   311ce:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   311d0:	e039      	b.n	31246 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   311d2:	693b      	ldr	r3, [r7, #16]
   311d4:	781b      	ldrb	r3, [r3, #0]
   311d6:	2b2f      	cmp	r3, #47	; 0x2f
   311d8:	d103      	bne.n	311e2 <isTopicMatched+0x32>
   311da:	697b      	ldr	r3, [r7, #20]
   311dc:	781b      	ldrb	r3, [r3, #0]
   311de:	2b2f      	cmp	r3, #47	; 0x2f
   311e0:	d13a      	bne.n	31258 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   311e2:	697b      	ldr	r3, [r7, #20]
   311e4:	781b      	ldrb	r3, [r3, #0]
   311e6:	2b2b      	cmp	r3, #43	; 0x2b
   311e8:	d009      	beq.n	311fe <isTopicMatched+0x4e>
   311ea:	697b      	ldr	r3, [r7, #20]
   311ec:	781b      	ldrb	r3, [r3, #0]
   311ee:	2b23      	cmp	r3, #35	; 0x23
   311f0:	d005      	beq.n	311fe <isTopicMatched+0x4e>
   311f2:	697b      	ldr	r3, [r7, #20]
   311f4:	781a      	ldrb	r2, [r3, #0]
   311f6:	693b      	ldr	r3, [r7, #16]
   311f8:	781b      	ldrb	r3, [r3, #0]
   311fa:	429a      	cmp	r2, r3
   311fc:	d12e      	bne.n	3125c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   311fe:	697b      	ldr	r3, [r7, #20]
   31200:	781b      	ldrb	r3, [r3, #0]
   31202:	2b2b      	cmp	r3, #43	; 0x2b
   31204:	d112      	bne.n	3122c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   31206:	693b      	ldr	r3, [r7, #16]
   31208:	3301      	adds	r3, #1
   3120a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   3120c:	e005      	b.n	3121a <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   3120e:	693b      	ldr	r3, [r7, #16]
   31210:	3301      	adds	r3, #1
   31212:	613b      	str	r3, [r7, #16]
   31214:	693b      	ldr	r3, [r7, #16]
   31216:	3301      	adds	r3, #1
   31218:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   3121a:	68fa      	ldr	r2, [r7, #12]
   3121c:	68bb      	ldr	r3, [r7, #8]
   3121e:	429a      	cmp	r2, r3
   31220:	d20b      	bcs.n	3123a <isTopicMatched+0x8a>
   31222:	68fb      	ldr	r3, [r7, #12]
   31224:	781b      	ldrb	r3, [r3, #0]
   31226:	2b2f      	cmp	r3, #47	; 0x2f
   31228:	d1f1      	bne.n	3120e <isTopicMatched+0x5e>
   3122a:	e006      	b.n	3123a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   3122c:	697b      	ldr	r3, [r7, #20]
   3122e:	781b      	ldrb	r3, [r3, #0]
   31230:	2b23      	cmp	r3, #35	; 0x23
   31232:	d102      	bne.n	3123a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   31234:	68bb      	ldr	r3, [r7, #8]
   31236:	3b01      	subs	r3, #1
   31238:	613b      	str	r3, [r7, #16]
        curf++;
   3123a:	697b      	ldr	r3, [r7, #20]
   3123c:	3301      	adds	r3, #1
   3123e:	617b      	str	r3, [r7, #20]
        curn++;
   31240:	693b      	ldr	r3, [r7, #16]
   31242:	3301      	adds	r3, #1
   31244:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   31246:	697b      	ldr	r3, [r7, #20]
   31248:	781b      	ldrb	r3, [r3, #0]
   3124a:	2b00      	cmp	r3, #0
   3124c:	d007      	beq.n	3125e <isTopicMatched+0xae>
   3124e:	693a      	ldr	r2, [r7, #16]
   31250:	68bb      	ldr	r3, [r7, #8]
   31252:	429a      	cmp	r2, r3
   31254:	d3bd      	bcc.n	311d2 <isTopicMatched+0x22>
   31256:	e002      	b.n	3125e <isTopicMatched+0xae>
            break;
   31258:	46c0      	nop			; (mov r8, r8)
   3125a:	e000      	b.n	3125e <isTopicMatched+0xae>
            break;
   3125c:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   3125e:	693a      	ldr	r2, [r7, #16]
   31260:	68bb      	ldr	r3, [r7, #8]
   31262:	429a      	cmp	r2, r3
   31264:	d105      	bne.n	31272 <isTopicMatched+0xc2>
   31266:	697b      	ldr	r3, [r7, #20]
   31268:	781b      	ldrb	r3, [r3, #0]
   3126a:	2b00      	cmp	r3, #0
   3126c:	d101      	bne.n	31272 <isTopicMatched+0xc2>
   3126e:	2301      	movs	r3, #1
   31270:	e000      	b.n	31274 <isTopicMatched+0xc4>
   31272:	2300      	movs	r3, #0
   31274:	b2db      	uxtb	r3, r3
}
   31276:	0018      	movs	r0, r3
   31278:	46bd      	mov	sp, r7
   3127a:	b006      	add	sp, #24
   3127c:	bd80      	pop	{r7, pc}
	...

00031280 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   31280:	b580      	push	{r7, lr}
   31282:	b08a      	sub	sp, #40	; 0x28
   31284:	af00      	add	r7, sp, #0
   31286:	60f8      	str	r0, [r7, #12]
   31288:	60b9      	str	r1, [r7, #8]
   3128a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   3128c:	2301      	movs	r3, #1
   3128e:	425b      	negs	r3, r3
   31290:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   31292:	2300      	movs	r3, #0
   31294:	627b      	str	r3, [r7, #36]	; 0x24
   31296:	e044      	b.n	31322 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   31298:	68fa      	ldr	r2, [r7, #12]
   3129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3129c:	3304      	adds	r3, #4
   3129e:	00db      	lsls	r3, r3, #3
   312a0:	18d3      	adds	r3, r2, r3
   312a2:	3304      	adds	r3, #4
   312a4:	681b      	ldr	r3, [r3, #0]
   312a6:	2b00      	cmp	r3, #0
   312a8:	d038      	beq.n	3131c <deliverMessage+0x9c>
   312aa:	68fa      	ldr	r2, [r7, #12]
   312ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   312ae:	3304      	adds	r3, #4
   312b0:	00db      	lsls	r3, r3, #3
   312b2:	18d3      	adds	r3, r2, r3
   312b4:	3304      	adds	r3, #4
   312b6:	681a      	ldr	r2, [r3, #0]
   312b8:	68bb      	ldr	r3, [r7, #8]
   312ba:	0011      	movs	r1, r2
   312bc:	0018      	movs	r0, r3
   312be:	4b28      	ldr	r3, [pc, #160]	; (31360 <deliverMessage+0xe0>)
   312c0:	4798      	blx	r3
   312c2:	1e03      	subs	r3, r0, #0
   312c4:	d10d      	bne.n	312e2 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   312c6:	68fa      	ldr	r2, [r7, #12]
   312c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   312ca:	3304      	adds	r3, #4
   312cc:	00db      	lsls	r3, r3, #3
   312ce:	18d3      	adds	r3, r2, r3
   312d0:	3304      	adds	r3, #4
   312d2:	681b      	ldr	r3, [r3, #0]
   312d4:	68ba      	ldr	r2, [r7, #8]
   312d6:	0011      	movs	r1, r2
   312d8:	0018      	movs	r0, r3
   312da:	4b22      	ldr	r3, [pc, #136]	; (31364 <deliverMessage+0xe4>)
   312dc:	4798      	blx	r3
   312de:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   312e0:	d01c      	beq.n	3131c <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   312e2:	68fa      	ldr	r2, [r7, #12]
   312e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   312e6:	3304      	adds	r3, #4
   312e8:	00db      	lsls	r3, r3, #3
   312ea:	18d3      	adds	r3, r2, r3
   312ec:	3308      	adds	r3, #8
   312ee:	681b      	ldr	r3, [r3, #0]
   312f0:	2b00      	cmp	r3, #0
   312f2:	d013      	beq.n	3131c <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   312f4:	687a      	ldr	r2, [r7, #4]
   312f6:	68b9      	ldr	r1, [r7, #8]
   312f8:	2318      	movs	r3, #24
   312fa:	18fb      	adds	r3, r7, r3
   312fc:	0018      	movs	r0, r3
   312fe:	4b1a      	ldr	r3, [pc, #104]	; (31368 <deliverMessage+0xe8>)
   31300:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   31302:	68fa      	ldr	r2, [r7, #12]
   31304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31306:	3304      	adds	r3, #4
   31308:	00db      	lsls	r3, r3, #3
   3130a:	18d3      	adds	r3, r2, r3
   3130c:	3308      	adds	r3, #8
   3130e:	681b      	ldr	r3, [r3, #0]
   31310:	2218      	movs	r2, #24
   31312:	18ba      	adds	r2, r7, r2
   31314:	0010      	movs	r0, r2
   31316:	4798      	blx	r3
                rc = SUCCESS;
   31318:	2300      	movs	r3, #0
   3131a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   3131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3131e:	3301      	adds	r3, #1
   31320:	627b      	str	r3, [r7, #36]	; 0x24
   31322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31324:	2b04      	cmp	r3, #4
   31326:	ddb7      	ble.n	31298 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   31328:	6a3b      	ldr	r3, [r7, #32]
   3132a:	3301      	adds	r3, #1
   3132c:	d112      	bne.n	31354 <deliverMessage+0xd4>
   3132e:	68fb      	ldr	r3, [r7, #12]
   31330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31332:	2b00      	cmp	r3, #0
   31334:	d00e      	beq.n	31354 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   31336:	687a      	ldr	r2, [r7, #4]
   31338:	68b9      	ldr	r1, [r7, #8]
   3133a:	2310      	movs	r3, #16
   3133c:	18fb      	adds	r3, r7, r3
   3133e:	0018      	movs	r0, r3
   31340:	4b09      	ldr	r3, [pc, #36]	; (31368 <deliverMessage+0xe8>)
   31342:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   31344:	68fb      	ldr	r3, [r7, #12]
   31346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31348:	2210      	movs	r2, #16
   3134a:	18ba      	adds	r2, r7, r2
   3134c:	0010      	movs	r0, r2
   3134e:	4798      	blx	r3
        rc = SUCCESS;
   31350:	2300      	movs	r3, #0
   31352:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   31354:	6a3b      	ldr	r3, [r7, #32]
}
   31356:	0018      	movs	r0, r3
   31358:	46bd      	mov	sp, r7
   3135a:	b00a      	add	sp, #40	; 0x28
   3135c:	bd80      	pop	{r7, pc}
   3135e:	46c0      	nop			; (mov r8, r8)
   31360:	00032f55 	.word	0x00032f55
   31364:	000311b1 	.word	0x000311b1
   31368:	00030eb9 	.word	0x00030eb9

0003136c <keepalive>:


int keepalive(MQTTClient* c)
{
   3136c:	b580      	push	{r7, lr}
   3136e:	b088      	sub	sp, #32
   31370:	af00      	add	r7, sp, #0
   31372:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   31374:	2301      	movs	r3, #1
   31376:	425b      	negs	r3, r3
   31378:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   3137a:	687b      	ldr	r3, [r7, #4]
   3137c:	699b      	ldr	r3, [r3, #24]
   3137e:	2b00      	cmp	r3, #0
   31380:	d102      	bne.n	31388 <keepalive+0x1c>
    {
        rc = SUCCESS;
   31382:	2300      	movs	r3, #0
   31384:	61fb      	str	r3, [r7, #28]
        goto exit;
   31386:	e033      	b.n	313f0 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   31388:	687b      	ldr	r3, [r7, #4]
   3138a:	3354      	adds	r3, #84	; 0x54
   3138c:	0018      	movs	r0, r3
   3138e:	4b1b      	ldr	r3, [pc, #108]	; (313fc <keepalive+0x90>)
   31390:	4798      	blx	r3
   31392:	1e03      	subs	r3, r0, #0
   31394:	d02c      	beq.n	313f0 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   31396:	687b      	ldr	r3, [r7, #4]
   31398:	7f1b      	ldrb	r3, [r3, #28]
   3139a:	2b00      	cmp	r3, #0
   3139c:	d128      	bne.n	313f0 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   3139e:	230c      	movs	r3, #12
   313a0:	18fb      	adds	r3, r7, r3
   313a2:	0018      	movs	r0, r3
   313a4:	4b16      	ldr	r3, [pc, #88]	; (31400 <keepalive+0x94>)
   313a6:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   313a8:	23fa      	movs	r3, #250	; 0xfa
   313aa:	009a      	lsls	r2, r3, #2
   313ac:	230c      	movs	r3, #12
   313ae:	18fb      	adds	r3, r7, r3
   313b0:	0011      	movs	r1, r2
   313b2:	0018      	movs	r0, r3
   313b4:	4b13      	ldr	r3, [pc, #76]	; (31404 <keepalive+0x98>)
   313b6:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   313b8:	687b      	ldr	r3, [r7, #4]
   313ba:	691a      	ldr	r2, [r3, #16]
   313bc:	687b      	ldr	r3, [r7, #4]
   313be:	689b      	ldr	r3, [r3, #8]
   313c0:	0019      	movs	r1, r3
   313c2:	0010      	movs	r0, r2
   313c4:	4b10      	ldr	r3, [pc, #64]	; (31408 <keepalive+0x9c>)
   313c6:	4798      	blx	r3
   313c8:	0003      	movs	r3, r0
   313ca:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   313cc:	69bb      	ldr	r3, [r7, #24]
   313ce:	2b00      	cmp	r3, #0
   313d0:	dd0e      	ble.n	313f0 <keepalive+0x84>
   313d2:	230c      	movs	r3, #12
   313d4:	18fa      	adds	r2, r7, r3
   313d6:	69b9      	ldr	r1, [r7, #24]
   313d8:	687b      	ldr	r3, [r7, #4]
   313da:	0018      	movs	r0, r3
   313dc:	4b0b      	ldr	r3, [pc, #44]	; (3140c <keepalive+0xa0>)
   313de:	4798      	blx	r3
   313e0:	0003      	movs	r3, r0
   313e2:	61fb      	str	r3, [r7, #28]
   313e4:	69fb      	ldr	r3, [r7, #28]
   313e6:	2b00      	cmp	r3, #0
   313e8:	d102      	bne.n	313f0 <keepalive+0x84>
                c->ping_outstanding = 1;
   313ea:	687b      	ldr	r3, [r7, #4]
   313ec:	2201      	movs	r2, #1
   313ee:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   313f0:	69fb      	ldr	r3, [r7, #28]
}
   313f2:	0018      	movs	r0, r3
   313f4:	46bd      	mov	sp, r7
   313f6:	b008      	add	sp, #32
   313f8:	bd80      	pop	{r7, pc}
   313fa:	46c0      	nop			; (mov r8, r8)
   313fc:	00031ced 	.word	0x00031ced
   31400:	00031d91 	.word	0x00031d91
   31404:	00031d19 	.word	0x00031d19
   31408:	00032965 	.word	0x00032965
   3140c:	00030f09 	.word	0x00030f09

00031410 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   31410:	b5f0      	push	{r4, r5, r6, r7, lr}
   31412:	b095      	sub	sp, #84	; 0x54
   31414:	af06      	add	r7, sp, #24
   31416:	6078      	str	r0, [r7, #4]
   31418:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   3141a:	683a      	ldr	r2, [r7, #0]
   3141c:	687b      	ldr	r3, [r7, #4]
   3141e:	0011      	movs	r1, r2
   31420:	0018      	movs	r0, r3
   31422:	4b70      	ldr	r3, [pc, #448]	; (315e4 <cycle+0x1d4>)
   31424:	4798      	blx	r3
   31426:	0002      	movs	r2, r0
   31428:	232e      	movs	r3, #46	; 0x2e
   3142a:	18fb      	adds	r3, r7, r3
   3142c:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   3142e:	2300      	movs	r3, #0
   31430:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   31432:	2300      	movs	r3, #0
   31434:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   31436:	232e      	movs	r3, #46	; 0x2e
   31438:	18fb      	adds	r3, r7, r3
   3143a:	881b      	ldrh	r3, [r3, #0]
   3143c:	2b0d      	cmp	r3, #13
   3143e:	d900      	bls.n	31442 <cycle+0x32>
   31440:	e0bd      	b.n	315be <cycle+0x1ae>
   31442:	009a      	lsls	r2, r3, #2
   31444:	4b68      	ldr	r3, [pc, #416]	; (315e8 <cycle+0x1d8>)
   31446:	18d3      	adds	r3, r2, r3
   31448:	681b      	ldr	r3, [r3, #0]
   3144a:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   3144c:	687b      	ldr	r3, [r7, #4]
   3144e:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   31450:	687b      	ldr	r3, [r7, #4]
   31452:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   31454:	001e      	movs	r6, r3
   31456:	2310      	movs	r3, #16
   31458:	18fb      	adds	r3, r7, r3
   3145a:	1d1d      	adds	r5, r3, #4
   3145c:	2310      	movs	r3, #16
   3145e:	18fb      	adds	r3, r7, r3
   31460:	1c5c      	adds	r4, r3, #1
   31462:	230c      	movs	r3, #12
   31464:	18f9      	adds	r1, r7, r3
   31466:	2310      	movs	r3, #16
   31468:	18fb      	adds	r3, r7, r3
   3146a:	1c98      	adds	r0, r3, #2
   3146c:	9604      	str	r6, [sp, #16]
   3146e:	9203      	str	r2, [sp, #12]
   31470:	2310      	movs	r3, #16
   31472:	18fb      	adds	r3, r7, r3
   31474:	330c      	adds	r3, #12
   31476:	9302      	str	r3, [sp, #8]
   31478:	2310      	movs	r3, #16
   3147a:	18fb      	adds	r3, r7, r3
   3147c:	3308      	adds	r3, #8
   3147e:	9301      	str	r3, [sp, #4]
   31480:	2320      	movs	r3, #32
   31482:	18fb      	adds	r3, r7, r3
   31484:	9300      	str	r3, [sp, #0]
   31486:	002b      	movs	r3, r5
   31488:	0022      	movs	r2, r4
   3148a:	4c58      	ldr	r4, [pc, #352]	; (315ec <cycle+0x1dc>)
   3148c:	47a0      	blx	r4
   3148e:	0003      	movs	r3, r0
   31490:	2b01      	cmp	r3, #1
   31492:	d000      	beq.n	31496 <cycle+0x86>
   31494:	e098      	b.n	315c8 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   31496:	68fb      	ldr	r3, [r7, #12]
   31498:	b2da      	uxtb	r2, r3
   3149a:	2310      	movs	r3, #16
   3149c:	18fb      	adds	r3, r7, r3
   3149e:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   314a0:	2310      	movs	r3, #16
   314a2:	18fa      	adds	r2, r7, r3
   314a4:	2320      	movs	r3, #32
   314a6:	18f9      	adds	r1, r7, r3
   314a8:	687b      	ldr	r3, [r7, #4]
   314aa:	0018      	movs	r0, r3
   314ac:	4b50      	ldr	r3, [pc, #320]	; (315f0 <cycle+0x1e0>)
   314ae:	4798      	blx	r3
            if (msg.qos != QOS0)
   314b0:	2310      	movs	r3, #16
   314b2:	18fb      	adds	r3, r7, r3
   314b4:	781b      	ldrb	r3, [r3, #0]
   314b6:	2b00      	cmp	r3, #0
   314b8:	d100      	bne.n	314bc <cycle+0xac>
   314ba:	e07d      	b.n	315b8 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   314bc:	2310      	movs	r3, #16
   314be:	18fb      	adds	r3, r7, r3
   314c0:	781b      	ldrb	r3, [r3, #0]
   314c2:	2b01      	cmp	r3, #1
   314c4:	d10f      	bne.n	314e6 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   314c6:	687b      	ldr	r3, [r7, #4]
   314c8:	6918      	ldr	r0, [r3, #16]
   314ca:	687b      	ldr	r3, [r7, #4]
   314cc:	689b      	ldr	r3, [r3, #8]
   314ce:	0019      	movs	r1, r3
   314d0:	2310      	movs	r3, #16
   314d2:	18fb      	adds	r3, r7, r3
   314d4:	889b      	ldrh	r3, [r3, #4]
   314d6:	9300      	str	r3, [sp, #0]
   314d8:	2300      	movs	r3, #0
   314da:	2204      	movs	r2, #4
   314dc:	4c45      	ldr	r4, [pc, #276]	; (315f4 <cycle+0x1e4>)
   314de:	47a0      	blx	r4
   314e0:	0003      	movs	r3, r0
   314e2:	637b      	str	r3, [r7, #52]	; 0x34
   314e4:	e013      	b.n	3150e <cycle+0xfe>
                else if (msg.qos == QOS2)
   314e6:	2310      	movs	r3, #16
   314e8:	18fb      	adds	r3, r7, r3
   314ea:	781b      	ldrb	r3, [r3, #0]
   314ec:	2b02      	cmp	r3, #2
   314ee:	d10e      	bne.n	3150e <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   314f0:	687b      	ldr	r3, [r7, #4]
   314f2:	6918      	ldr	r0, [r3, #16]
   314f4:	687b      	ldr	r3, [r7, #4]
   314f6:	689b      	ldr	r3, [r3, #8]
   314f8:	0019      	movs	r1, r3
   314fa:	2310      	movs	r3, #16
   314fc:	18fb      	adds	r3, r7, r3
   314fe:	889b      	ldrh	r3, [r3, #4]
   31500:	9300      	str	r3, [sp, #0]
   31502:	2300      	movs	r3, #0
   31504:	2205      	movs	r2, #5
   31506:	4c3b      	ldr	r4, [pc, #236]	; (315f4 <cycle+0x1e4>)
   31508:	47a0      	blx	r4
   3150a:	0003      	movs	r3, r0
   3150c:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   3150e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   31510:	2b00      	cmp	r3, #0
   31512:	dc03      	bgt.n	3151c <cycle+0x10c>
                    rc = FAILURE;
   31514:	2301      	movs	r3, #1
   31516:	425b      	negs	r3, r3
   31518:	633b      	str	r3, [r7, #48]	; 0x30
   3151a:	e007      	b.n	3152c <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   3151c:	683a      	ldr	r2, [r7, #0]
   3151e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   31520:	687b      	ldr	r3, [r7, #4]
   31522:	0018      	movs	r0, r3
   31524:	4b34      	ldr	r3, [pc, #208]	; (315f8 <cycle+0x1e8>)
   31526:	4798      	blx	r3
   31528:	0003      	movs	r3, r0
   3152a:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   3152c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3152e:	3301      	adds	r3, #1
   31530:	d142      	bne.n	315b8 <cycle+0x1a8>
                    goto exit; // there was a problem
   31532:	46c0      	nop			; (mov r8, r8)
   31534:	e049      	b.n	315ca <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   31536:	687b      	ldr	r3, [r7, #4]
   31538:	695c      	ldr	r4, [r3, #20]
   3153a:	687b      	ldr	r3, [r7, #4]
   3153c:	68db      	ldr	r3, [r3, #12]
   3153e:	220a      	movs	r2, #10
   31540:	18ba      	adds	r2, r7, r2
   31542:	2109      	movs	r1, #9
   31544:	1879      	adds	r1, r7, r1
   31546:	2008      	movs	r0, #8
   31548:	1838      	adds	r0, r7, r0
   3154a:	9300      	str	r3, [sp, #0]
   3154c:	0023      	movs	r3, r4
   3154e:	4c2b      	ldr	r4, [pc, #172]	; (315fc <cycle+0x1ec>)
   31550:	47a0      	blx	r4
   31552:	0003      	movs	r3, r0
   31554:	2b01      	cmp	r3, #1
   31556:	d003      	beq.n	31560 <cycle+0x150>
                rc = FAILURE;
   31558:	2301      	movs	r3, #1
   3155a:	425b      	negs	r3, r3
   3155c:	633b      	str	r3, [r7, #48]	; 0x30
   3155e:	e023      	b.n	315a8 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   31560:	687b      	ldr	r3, [r7, #4]
   31562:	6918      	ldr	r0, [r3, #16]
   31564:	687b      	ldr	r3, [r7, #4]
   31566:	689b      	ldr	r3, [r3, #8]
   31568:	0019      	movs	r1, r3
   3156a:	230a      	movs	r3, #10
   3156c:	18fb      	adds	r3, r7, r3
   3156e:	881b      	ldrh	r3, [r3, #0]
   31570:	9300      	str	r3, [sp, #0]
   31572:	2300      	movs	r3, #0
   31574:	2206      	movs	r2, #6
   31576:	4c1f      	ldr	r4, [pc, #124]	; (315f4 <cycle+0x1e4>)
   31578:	47a0      	blx	r4
   3157a:	0003      	movs	r3, r0
   3157c:	637b      	str	r3, [r7, #52]	; 0x34
   3157e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   31580:	2b00      	cmp	r3, #0
   31582:	dc03      	bgt.n	3158c <cycle+0x17c>
                rc = FAILURE;
   31584:	2301      	movs	r3, #1
   31586:	425b      	negs	r3, r3
   31588:	633b      	str	r3, [r7, #48]	; 0x30
   3158a:	e00d      	b.n	315a8 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   3158c:	683a      	ldr	r2, [r7, #0]
   3158e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   31590:	687b      	ldr	r3, [r7, #4]
   31592:	0018      	movs	r0, r3
   31594:	4b18      	ldr	r3, [pc, #96]	; (315f8 <cycle+0x1e8>)
   31596:	4798      	blx	r3
   31598:	0003      	movs	r3, r0
   3159a:	633b      	str	r3, [r7, #48]	; 0x30
   3159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3159e:	2b00      	cmp	r3, #0
   315a0:	d002      	beq.n	315a8 <cycle+0x198>
                rc = FAILURE; // there was a problem
   315a2:	2301      	movs	r3, #1
   315a4:	425b      	negs	r3, r3
   315a6:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   315a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   315aa:	3301      	adds	r3, #1
   315ac:	d106      	bne.n	315bc <cycle+0x1ac>
                goto exit; // there was a problem
   315ae:	e00c      	b.n	315ca <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   315b0:	687b      	ldr	r3, [r7, #4]
   315b2:	2200      	movs	r2, #0
   315b4:	771a      	strb	r2, [r3, #28]
            break;
   315b6:	e002      	b.n	315be <cycle+0x1ae>
            break;
   315b8:	46c0      	nop			; (mov r8, r8)
   315ba:	e000      	b.n	315be <cycle+0x1ae>
            break;
   315bc:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   315be:	687b      	ldr	r3, [r7, #4]
   315c0:	0018      	movs	r0, r3
   315c2:	4b0f      	ldr	r3, [pc, #60]	; (31600 <cycle+0x1f0>)
   315c4:	4798      	blx	r3
   315c6:	e000      	b.n	315ca <cycle+0x1ba>
                goto exit;
   315c8:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   315ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   315cc:	2b00      	cmp	r3, #0
   315ce:	d103      	bne.n	315d8 <cycle+0x1c8>
        rc = packet_type;
   315d0:	232e      	movs	r3, #46	; 0x2e
   315d2:	18fb      	adds	r3, r7, r3
   315d4:	881b      	ldrh	r3, [r3, #0]
   315d6:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   315d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   315da:	0018      	movs	r0, r3
   315dc:	46bd      	mov	sp, r7
   315de:	b00f      	add	sp, #60	; 0x3c
   315e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   315e2:	46c0      	nop			; (mov r8, r8)
   315e4:	000310c5 	.word	0x000310c5
   315e8:	0003cc88 	.word	0x0003cc88
   315ec:	00032989 	.word	0x00032989
   315f0:	00031281 	.word	0x00031281
   315f4:	00033181 	.word	0x00033181
   315f8:	00030f09 	.word	0x00030f09
   315fc:	00032a8d 	.word	0x00032a8d
   31600:	0003136d 	.word	0x0003136d

00031604 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   31604:	b580      	push	{r7, lr}
   31606:	b086      	sub	sp, #24
   31608:	af00      	add	r7, sp, #0
   3160a:	6078      	str	r0, [r7, #4]
   3160c:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   3160e:	2300      	movs	r3, #0
   31610:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   31612:	2308      	movs	r3, #8
   31614:	18fb      	adds	r3, r7, r3
   31616:	0018      	movs	r0, r3
   31618:	4b11      	ldr	r3, [pc, #68]	; (31660 <MQTTYield+0x5c>)
   3161a:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   3161c:	683a      	ldr	r2, [r7, #0]
   3161e:	2308      	movs	r3, #8
   31620:	18fb      	adds	r3, r7, r3
   31622:	0011      	movs	r1, r2
   31624:	0018      	movs	r0, r3
   31626:	4b0f      	ldr	r3, [pc, #60]	; (31664 <MQTTYield+0x60>)
   31628:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   3162a:	2308      	movs	r3, #8
   3162c:	18fa      	adds	r2, r7, r3
   3162e:	687b      	ldr	r3, [r7, #4]
   31630:	0011      	movs	r1, r2
   31632:	0018      	movs	r0, r3
   31634:	4b0c      	ldr	r3, [pc, #48]	; (31668 <MQTTYield+0x64>)
   31636:	4798      	blx	r3
   31638:	0003      	movs	r3, r0
   3163a:	3301      	adds	r3, #1
   3163c:	d103      	bne.n	31646 <MQTTYield+0x42>
        {
            rc = FAILURE;
   3163e:	2301      	movs	r3, #1
   31640:	425b      	negs	r3, r3
   31642:	617b      	str	r3, [r7, #20]
            break;
   31644:	e006      	b.n	31654 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   31646:	2308      	movs	r3, #8
   31648:	18fb      	adds	r3, r7, r3
   3164a:	0018      	movs	r0, r3
   3164c:	4b07      	ldr	r3, [pc, #28]	; (3166c <MQTTYield+0x68>)
   3164e:	4798      	blx	r3
   31650:	1e03      	subs	r3, r0, #0
   31652:	d0ea      	beq.n	3162a <MQTTYield+0x26>
        
    return rc;
   31654:	697b      	ldr	r3, [r7, #20]
}
   31656:	0018      	movs	r0, r3
   31658:	46bd      	mov	sp, r7
   3165a:	b006      	add	sp, #24
   3165c:	bd80      	pop	{r7, pc}
   3165e:	46c0      	nop			; (mov r8, r8)
   31660:	00031d91 	.word	0x00031d91
   31664:	00031d19 	.word	0x00031d19
   31668:	00031411 	.word	0x00031411
   3166c:	00031ced 	.word	0x00031ced

00031670 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   31670:	b580      	push	{r7, lr}
   31672:	b086      	sub	sp, #24
   31674:	af00      	add	r7, sp, #0
   31676:	60f8      	str	r0, [r7, #12]
   31678:	60b9      	str	r1, [r7, #8]
   3167a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   3167c:	2301      	movs	r3, #1
   3167e:	425b      	negs	r3, r3
   31680:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   31682:	687b      	ldr	r3, [r7, #4]
   31684:	0018      	movs	r0, r3
   31686:	4b0b      	ldr	r3, [pc, #44]	; (316b4 <waitfor+0x44>)
   31688:	4798      	blx	r3
   3168a:	1e03      	subs	r3, r0, #0
   3168c:	d10c      	bne.n	316a8 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   3168e:	687a      	ldr	r2, [r7, #4]
   31690:	68fb      	ldr	r3, [r7, #12]
   31692:	0011      	movs	r1, r2
   31694:	0018      	movs	r0, r3
   31696:	4b08      	ldr	r3, [pc, #32]	; (316b8 <waitfor+0x48>)
   31698:	4798      	blx	r3
   3169a:	0003      	movs	r3, r0
   3169c:	617b      	str	r3, [r7, #20]
   3169e:	697a      	ldr	r2, [r7, #20]
   316a0:	68bb      	ldr	r3, [r7, #8]
   316a2:	429a      	cmp	r2, r3
   316a4:	d1ed      	bne.n	31682 <waitfor+0x12>
   316a6:	e000      	b.n	316aa <waitfor+0x3a>
            break; // we timed out
   316a8:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   316aa:	697b      	ldr	r3, [r7, #20]
}
   316ac:	0018      	movs	r0, r3
   316ae:	46bd      	mov	sp, r7
   316b0:	b006      	add	sp, #24
   316b2:	bd80      	pop	{r7, pc}
   316b4:	00031ced 	.word	0x00031ced
   316b8:	00031411 	.word	0x00031411

000316bc <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   316bc:	b590      	push	{r4, r7, lr}
   316be:	b09f      	sub	sp, #124	; 0x7c
   316c0:	af00      	add	r7, sp, #0
   316c2:	6078      	str	r0, [r7, #4]
   316c4:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   316c6:	2301      	movs	r3, #1
   316c8:	425b      	negs	r3, r3
   316ca:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   316cc:	230c      	movs	r3, #12
   316ce:	18fa      	adds	r2, r7, r3
   316d0:	4b41      	ldr	r3, [pc, #260]	; (317d8 <MQTTConnect+0x11c>)
   316d2:	0010      	movs	r0, r2
   316d4:	0019      	movs	r1, r3
   316d6:	2358      	movs	r3, #88	; 0x58
   316d8:	001a      	movs	r2, r3
   316da:	4b40      	ldr	r3, [pc, #256]	; (317dc <MQTTConnect+0x120>)
   316dc:	4798      	blx	r3
    int len = 0;
   316de:	2300      	movs	r3, #0
   316e0:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   316e2:	687b      	ldr	r3, [r7, #4]
   316e4:	6a1b      	ldr	r3, [r3, #32]
   316e6:	2b00      	cmp	r3, #0
   316e8:	d166      	bne.n	317b8 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   316ea:	2364      	movs	r3, #100	; 0x64
   316ec:	18fb      	adds	r3, r7, r3
   316ee:	0018      	movs	r0, r3
   316f0:	4b3b      	ldr	r3, [pc, #236]	; (317e0 <MQTTConnect+0x124>)
   316f2:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   316f4:	687b      	ldr	r3, [r7, #4]
   316f6:	685a      	ldr	r2, [r3, #4]
   316f8:	2364      	movs	r3, #100	; 0x64
   316fa:	18fb      	adds	r3, r7, r3
   316fc:	0011      	movs	r1, r2
   316fe:	0018      	movs	r0, r3
   31700:	4b38      	ldr	r3, [pc, #224]	; (317e4 <MQTTConnect+0x128>)
   31702:	4798      	blx	r3

    if (options == 0)
   31704:	683b      	ldr	r3, [r7, #0]
   31706:	2b00      	cmp	r3, #0
   31708:	d102      	bne.n	31710 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   3170a:	230c      	movs	r3, #12
   3170c:	18fb      	adds	r3, r7, r3
   3170e:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   31710:	683b      	ldr	r3, [r7, #0]
   31712:	8b1b      	ldrh	r3, [r3, #24]
   31714:	001a      	movs	r2, r3
   31716:	687b      	ldr	r3, [r7, #4]
   31718:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   3171a:	687b      	ldr	r3, [r7, #4]
   3171c:	3354      	adds	r3, #84	; 0x54
   3171e:	001a      	movs	r2, r3
   31720:	687b      	ldr	r3, [r7, #4]
   31722:	699b      	ldr	r3, [r3, #24]
   31724:	0019      	movs	r1, r3
   31726:	0010      	movs	r0, r2
   31728:	4b2f      	ldr	r3, [pc, #188]	; (317e8 <MQTTConnect+0x12c>)
   3172a:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   3172c:	687b      	ldr	r3, [r7, #4]
   3172e:	6918      	ldr	r0, [r3, #16]
   31730:	687b      	ldr	r3, [r7, #4]
   31732:	689b      	ldr	r3, [r3, #8]
   31734:	0019      	movs	r1, r3
   31736:	683b      	ldr	r3, [r7, #0]
   31738:	001a      	movs	r2, r3
   3173a:	4b2c      	ldr	r3, [pc, #176]	; (317ec <MQTTConnect+0x130>)
   3173c:	4798      	blx	r3
   3173e:	0003      	movs	r3, r0
   31740:	673b      	str	r3, [r7, #112]	; 0x70
   31742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31744:	2b00      	cmp	r3, #0
   31746:	dd39      	ble.n	317bc <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   31748:	2364      	movs	r3, #100	; 0x64
   3174a:	18fa      	adds	r2, r7, r3
   3174c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   3174e:	687b      	ldr	r3, [r7, #4]
   31750:	0018      	movs	r0, r3
   31752:	4b27      	ldr	r3, [pc, #156]	; (317f0 <MQTTConnect+0x134>)
   31754:	4798      	blx	r3
   31756:	0003      	movs	r3, r0
   31758:	677b      	str	r3, [r7, #116]	; 0x74
   3175a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3175c:	2b00      	cmp	r3, #0
   3175e:	d12f      	bne.n	317c0 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   31760:	2364      	movs	r3, #100	; 0x64
   31762:	18fa      	adds	r2, r7, r3
   31764:	687b      	ldr	r3, [r7, #4]
   31766:	2102      	movs	r1, #2
   31768:	0018      	movs	r0, r3
   3176a:	4b22      	ldr	r3, [pc, #136]	; (317f4 <MQTTConnect+0x138>)
   3176c:	4798      	blx	r3
   3176e:	0003      	movs	r3, r0
   31770:	2b02      	cmp	r3, #2
   31772:	d11d      	bne.n	317b0 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   31774:	230b      	movs	r3, #11
   31776:	18fb      	adds	r3, r7, r3
   31778:	22ff      	movs	r2, #255	; 0xff
   3177a:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   3177c:	230a      	movs	r3, #10
   3177e:	18fb      	adds	r3, r7, r3
   31780:	2200      	movs	r2, #0
   31782:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   31784:	687b      	ldr	r3, [r7, #4]
   31786:	695a      	ldr	r2, [r3, #20]
   31788:	687b      	ldr	r3, [r7, #4]
   3178a:	68db      	ldr	r3, [r3, #12]
   3178c:	210b      	movs	r1, #11
   3178e:	1879      	adds	r1, r7, r1
   31790:	200a      	movs	r0, #10
   31792:	1838      	adds	r0, r7, r0
   31794:	4c18      	ldr	r4, [pc, #96]	; (317f8 <MQTTConnect+0x13c>)
   31796:	47a0      	blx	r4
   31798:	0003      	movs	r3, r0
   3179a:	2b01      	cmp	r3, #1
   3179c:	d104      	bne.n	317a8 <MQTTConnect+0xec>
            rc = connack_rc;
   3179e:	230b      	movs	r3, #11
   317a0:	18fb      	adds	r3, r7, r3
   317a2:	781b      	ldrb	r3, [r3, #0]
   317a4:	677b      	str	r3, [r7, #116]	; 0x74
   317a6:	e00c      	b.n	317c2 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   317a8:	2301      	movs	r3, #1
   317aa:	425b      	negs	r3, r3
   317ac:	677b      	str	r3, [r7, #116]	; 0x74
   317ae:	e008      	b.n	317c2 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   317b0:	2301      	movs	r3, #1
   317b2:	425b      	negs	r3, r3
   317b4:	677b      	str	r3, [r7, #116]	; 0x74
   317b6:	e004      	b.n	317c2 <MQTTConnect+0x106>
		goto exit;
   317b8:	46c0      	nop			; (mov r8, r8)
   317ba:	e002      	b.n	317c2 <MQTTConnect+0x106>
        goto exit;
   317bc:	46c0      	nop			; (mov r8, r8)
   317be:	e000      	b.n	317c2 <MQTTConnect+0x106>
        goto exit; // there was a problem
   317c0:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   317c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   317c4:	2b00      	cmp	r3, #0
   317c6:	d102      	bne.n	317ce <MQTTConnect+0x112>
        c->isconnected = 1;
   317c8:	687b      	ldr	r3, [r7, #4]
   317ca:	2201      	movs	r2, #1
   317cc:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   317ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   317d0:	0018      	movs	r0, r3
   317d2:	46bd      	mov	sp, r7
   317d4:	b01f      	add	sp, #124	; 0x7c
   317d6:	bd90      	pop	{r4, r7, pc}
   317d8:	0003ccc0 	.word	0x0003ccc0
   317dc:	000378cd 	.word	0x000378cd
   317e0:	00031d91 	.word	0x00031d91
   317e4:	00031d19 	.word	0x00031d19
   317e8:	00031d41 	.word	0x00031d41
   317ec:	0003256d 	.word	0x0003256d
   317f0:	00030f09 	.word	0x00030f09
   317f4:	00031671 	.word	0x00031671
   317f8:	000327e9 	.word	0x000327e9

000317fc <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   317fc:	b5b0      	push	{r4, r5, r7, lr}
   317fe:	b096      	sub	sp, #88	; 0x58
   31800:	af04      	add	r7, sp, #16
   31802:	60f8      	str	r0, [r7, #12]
   31804:	60b9      	str	r1, [r7, #8]
   31806:	603b      	str	r3, [r7, #0]
   31808:	1dfb      	adds	r3, r7, #7
   3180a:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   3180c:	2301      	movs	r3, #1
   3180e:	425b      	negs	r3, r3
   31810:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   31812:	2300      	movs	r3, #0
   31814:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   31816:	2324      	movs	r3, #36	; 0x24
   31818:	18fb      	adds	r3, r7, r3
   3181a:	2200      	movs	r2, #0
   3181c:	601a      	str	r2, [r3, #0]
   3181e:	2324      	movs	r3, #36	; 0x24
   31820:	18fb      	adds	r3, r7, r3
   31822:	2200      	movs	r2, #0
   31824:	605a      	str	r2, [r3, #4]
   31826:	2324      	movs	r3, #36	; 0x24
   31828:	18fb      	adds	r3, r7, r3
   3182a:	2200      	movs	r2, #0
   3182c:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   3182e:	1dfb      	adds	r3, r7, #7
   31830:	781b      	ldrb	r3, [r3, #0]
   31832:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   31834:	2324      	movs	r3, #36	; 0x24
   31836:	18fb      	adds	r3, r7, r3
   31838:	68ba      	ldr	r2, [r7, #8]
   3183a:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   3183c:	68fb      	ldr	r3, [r7, #12]
   3183e:	6a1b      	ldr	r3, [r3, #32]
   31840:	2b00      	cmp	r3, #0
   31842:	d100      	bne.n	31846 <MQTTSubscribe+0x4a>
   31844:	e088      	b.n	31958 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   31846:	2330      	movs	r3, #48	; 0x30
   31848:	18fb      	adds	r3, r7, r3
   3184a:	0018      	movs	r0, r3
   3184c:	4b47      	ldr	r3, [pc, #284]	; (3196c <MQTTSubscribe+0x170>)
   3184e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   31850:	68fb      	ldr	r3, [r7, #12]
   31852:	685a      	ldr	r2, [r3, #4]
   31854:	2330      	movs	r3, #48	; 0x30
   31856:	18fb      	adds	r3, r7, r3
   31858:	0011      	movs	r1, r2
   3185a:	0018      	movs	r0, r3
   3185c:	4b44      	ldr	r3, [pc, #272]	; (31970 <MQTTSubscribe+0x174>)
   3185e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   31860:	68fb      	ldr	r3, [r7, #12]
   31862:	691c      	ldr	r4, [r3, #16]
   31864:	68fb      	ldr	r3, [r7, #12]
   31866:	689b      	ldr	r3, [r3, #8]
   31868:	001d      	movs	r5, r3
   3186a:	68fb      	ldr	r3, [r7, #12]
   3186c:	0018      	movs	r0, r3
   3186e:	4b41      	ldr	r3, [pc, #260]	; (31974 <MQTTSubscribe+0x178>)
   31870:	4798      	blx	r3
   31872:	0003      	movs	r3, r0
   31874:	b29a      	uxth	r2, r3
   31876:	2320      	movs	r3, #32
   31878:	18fb      	adds	r3, r7, r3
   3187a:	9302      	str	r3, [sp, #8]
   3187c:	2324      	movs	r3, #36	; 0x24
   3187e:	18fb      	adds	r3, r7, r3
   31880:	9301      	str	r3, [sp, #4]
   31882:	2301      	movs	r3, #1
   31884:	9300      	str	r3, [sp, #0]
   31886:	0013      	movs	r3, r2
   31888:	2200      	movs	r2, #0
   3188a:	0029      	movs	r1, r5
   3188c:	0020      	movs	r0, r4
   3188e:	4c3a      	ldr	r4, [pc, #232]	; (31978 <MQTTSubscribe+0x17c>)
   31890:	47a0      	blx	r4
   31892:	0003      	movs	r3, r0
   31894:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   31896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   31898:	2b00      	cmp	r3, #0
   3189a:	dd5f      	ble.n	3195c <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   3189c:	2330      	movs	r3, #48	; 0x30
   3189e:	18fa      	adds	r2, r7, r3
   318a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   318a2:	68fb      	ldr	r3, [r7, #12]
   318a4:	0018      	movs	r0, r3
   318a6:	4b35      	ldr	r3, [pc, #212]	; (3197c <MQTTSubscribe+0x180>)
   318a8:	4798      	blx	r3
   318aa:	0003      	movs	r3, r0
   318ac:	647b      	str	r3, [r7, #68]	; 0x44
   318ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   318b0:	2b00      	cmp	r3, #0
   318b2:	d155      	bne.n	31960 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   318b4:	2330      	movs	r3, #48	; 0x30
   318b6:	18fa      	adds	r2, r7, r3
   318b8:	68fb      	ldr	r3, [r7, #12]
   318ba:	2109      	movs	r1, #9
   318bc:	0018      	movs	r0, r3
   318be:	4b30      	ldr	r3, [pc, #192]	; (31980 <MQTTSubscribe+0x184>)
   318c0:	4798      	blx	r3
   318c2:	0003      	movs	r3, r0
   318c4:	2b09      	cmp	r3, #9
   318c6:	d143      	bne.n	31950 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   318c8:	2300      	movs	r3, #0
   318ca:	61fb      	str	r3, [r7, #28]
   318cc:	2301      	movs	r3, #1
   318ce:	425b      	negs	r3, r3
   318d0:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   318d2:	68fb      	ldr	r3, [r7, #12]
   318d4:	695a      	ldr	r2, [r3, #20]
   318d6:	68fb      	ldr	r3, [r7, #12]
   318d8:	68db      	ldr	r3, [r3, #12]
   318da:	001c      	movs	r4, r3
   318dc:	2318      	movs	r3, #24
   318de:	18fb      	adds	r3, r7, r3
   318e0:	211c      	movs	r1, #28
   318e2:	1879      	adds	r1, r7, r1
   318e4:	2016      	movs	r0, #22
   318e6:	1838      	adds	r0, r7, r0
   318e8:	9401      	str	r4, [sp, #4]
   318ea:	9200      	str	r2, [sp, #0]
   318ec:	000a      	movs	r2, r1
   318ee:	2101      	movs	r1, #1
   318f0:	4c24      	ldr	r4, [pc, #144]	; (31984 <MQTTSubscribe+0x188>)
   318f2:	47a0      	blx	r4
   318f4:	0003      	movs	r3, r0
   318f6:	2b01      	cmp	r3, #1
   318f8:	d101      	bne.n	318fe <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   318fa:	69bb      	ldr	r3, [r7, #24]
   318fc:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   318fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   31900:	2b80      	cmp	r3, #128	; 0x80
   31902:	d02e      	beq.n	31962 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   31904:	2300      	movs	r3, #0
   31906:	643b      	str	r3, [r7, #64]	; 0x40
   31908:	e01e      	b.n	31948 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   3190a:	68fa      	ldr	r2, [r7, #12]
   3190c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   3190e:	3304      	adds	r3, #4
   31910:	00db      	lsls	r3, r3, #3
   31912:	18d3      	adds	r3, r2, r3
   31914:	3304      	adds	r3, #4
   31916:	681b      	ldr	r3, [r3, #0]
   31918:	2b00      	cmp	r3, #0
   3191a:	d112      	bne.n	31942 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   3191c:	68fa      	ldr	r2, [r7, #12]
   3191e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31920:	3304      	adds	r3, #4
   31922:	00db      	lsls	r3, r3, #3
   31924:	18d3      	adds	r3, r2, r3
   31926:	3304      	adds	r3, #4
   31928:	68ba      	ldr	r2, [r7, #8]
   3192a:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   3192c:	68fa      	ldr	r2, [r7, #12]
   3192e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31930:	3304      	adds	r3, #4
   31932:	00db      	lsls	r3, r3, #3
   31934:	18d3      	adds	r3, r2, r3
   31936:	3308      	adds	r3, #8
   31938:	683a      	ldr	r2, [r7, #0]
   3193a:	601a      	str	r2, [r3, #0]
                    rc = 0;
   3193c:	2300      	movs	r3, #0
   3193e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   31940:	e00f      	b.n	31962 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   31942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31944:	3301      	adds	r3, #1
   31946:	643b      	str	r3, [r7, #64]	; 0x40
   31948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   3194a:	2b04      	cmp	r3, #4
   3194c:	dddd      	ble.n	3190a <MQTTSubscribe+0x10e>
   3194e:	e008      	b.n	31962 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   31950:	2301      	movs	r3, #1
   31952:	425b      	negs	r3, r3
   31954:	647b      	str	r3, [r7, #68]	; 0x44
   31956:	e004      	b.n	31962 <MQTTSubscribe+0x166>
		goto exit;
   31958:	46c0      	nop			; (mov r8, r8)
   3195a:	e002      	b.n	31962 <MQTTSubscribe+0x166>
        goto exit;
   3195c:	46c0      	nop			; (mov r8, r8)
   3195e:	e000      	b.n	31962 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   31960:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   31962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   31964:	0018      	movs	r0, r3
   31966:	46bd      	mov	sp, r7
   31968:	b012      	add	sp, #72	; 0x48
   3196a:	bdb0      	pop	{r4, r5, r7, pc}
   3196c:	00031d91 	.word	0x00031d91
   31970:	00031d19 	.word	0x00031d19
   31974:	00030ed9 	.word	0x00030ed9
   31978:	000332c9 	.word	0x000332c9
   3197c:	00030f09 	.word	0x00030f09
   31980:	00031671 	.word	0x00031671
   31984:	00033419 	.word	0x00033419

00031988 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   31988:	b5f0      	push	{r4, r5, r6, r7, lr}
   3198a:	46ce      	mov	lr, r9
   3198c:	4647      	mov	r7, r8
   3198e:	b580      	push	{r7, lr}
   31990:	b097      	sub	sp, #92	; 0x5c
   31992:	af08      	add	r7, sp, #32
   31994:	60f8      	str	r0, [r7, #12]
   31996:	60b9      	str	r1, [r7, #8]
   31998:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   3199a:	2301      	movs	r3, #1
   3199c:	425b      	negs	r3, r3
   3199e:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   319a0:	2318      	movs	r3, #24
   319a2:	18fb      	adds	r3, r7, r3
   319a4:	2200      	movs	r2, #0
   319a6:	601a      	str	r2, [r3, #0]
   319a8:	2318      	movs	r3, #24
   319aa:	18fb      	adds	r3, r7, r3
   319ac:	2200      	movs	r2, #0
   319ae:	605a      	str	r2, [r3, #4]
   319b0:	2318      	movs	r3, #24
   319b2:	18fb      	adds	r3, r7, r3
   319b4:	2200      	movs	r2, #0
   319b6:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   319b8:	2318      	movs	r3, #24
   319ba:	18fb      	adds	r3, r7, r3
   319bc:	68ba      	ldr	r2, [r7, #8]
   319be:	601a      	str	r2, [r3, #0]
    int len = 0;
   319c0:	2300      	movs	r3, #0
   319c2:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   319c4:	68fb      	ldr	r3, [r7, #12]
   319c6:	6a1b      	ldr	r3, [r3, #32]
   319c8:	2b00      	cmp	r3, #0
   319ca:	d100      	bne.n	319ce <MQTTPublish+0x46>
   319cc:	e0a0      	b.n	31b10 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   319ce:	2324      	movs	r3, #36	; 0x24
   319d0:	18fb      	adds	r3, r7, r3
   319d2:	0018      	movs	r0, r3
   319d4:	4b55      	ldr	r3, [pc, #340]	; (31b2c <MQTTPublish+0x1a4>)
   319d6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   319d8:	68fb      	ldr	r3, [r7, #12]
   319da:	685a      	ldr	r2, [r3, #4]
   319dc:	2324      	movs	r3, #36	; 0x24
   319de:	18fb      	adds	r3, r7, r3
   319e0:	0011      	movs	r1, r2
   319e2:	0018      	movs	r0, r3
   319e4:	4b52      	ldr	r3, [pc, #328]	; (31b30 <MQTTPublish+0x1a8>)
   319e6:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   319e8:	687b      	ldr	r3, [r7, #4]
   319ea:	781b      	ldrb	r3, [r3, #0]
   319ec:	2b01      	cmp	r3, #1
   319ee:	d003      	beq.n	319f8 <MQTTPublish+0x70>
   319f0:	687b      	ldr	r3, [r7, #4]
   319f2:	781b      	ldrb	r3, [r3, #0]
   319f4:	2b02      	cmp	r3, #2
   319f6:	d107      	bne.n	31a08 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   319f8:	68fb      	ldr	r3, [r7, #12]
   319fa:	0018      	movs	r0, r3
   319fc:	4b4d      	ldr	r3, [pc, #308]	; (31b34 <MQTTPublish+0x1ac>)
   319fe:	4798      	blx	r3
   31a00:	0003      	movs	r3, r0
   31a02:	b29a      	uxth	r2, r3
   31a04:	687b      	ldr	r3, [r7, #4]
   31a06:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   31a08:	68fb      	ldr	r3, [r7, #12]
   31a0a:	691b      	ldr	r3, [r3, #16]
   31a0c:	469c      	mov	ip, r3
   31a0e:	68fb      	ldr	r3, [r7, #12]
   31a10:	689b      	ldr	r3, [r3, #8]
   31a12:	001d      	movs	r5, r3
   31a14:	687b      	ldr	r3, [r7, #4]
   31a16:	781b      	ldrb	r3, [r3, #0]
   31a18:	001e      	movs	r6, r3
   31a1a:	687b      	ldr	r3, [r7, #4]
   31a1c:	785b      	ldrb	r3, [r3, #1]
   31a1e:	4698      	mov	r8, r3
   31a20:	687b      	ldr	r3, [r7, #4]
   31a22:	889b      	ldrh	r3, [r3, #4]
   31a24:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   31a26:	687b      	ldr	r3, [r7, #4]
   31a28:	689a      	ldr	r2, [r3, #8]
   31a2a:	687b      	ldr	r3, [r7, #4]
   31a2c:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   31a2e:	9306      	str	r3, [sp, #24]
   31a30:	9205      	str	r2, [sp, #20]
   31a32:	2318      	movs	r3, #24
   31a34:	18fa      	adds	r2, r7, r3
   31a36:	2308      	movs	r3, #8
   31a38:	446b      	add	r3, sp
   31a3a:	ca13      	ldmia	r2!, {r0, r1, r4}
   31a3c:	c313      	stmia	r3!, {r0, r1, r4}
   31a3e:	464b      	mov	r3, r9
   31a40:	9301      	str	r3, [sp, #4]
   31a42:	4643      	mov	r3, r8
   31a44:	9300      	str	r3, [sp, #0]
   31a46:	0033      	movs	r3, r6
   31a48:	2200      	movs	r2, #0
   31a4a:	0029      	movs	r1, r5
   31a4c:	4660      	mov	r0, ip
   31a4e:	4c3a      	ldr	r4, [pc, #232]	; (31b38 <MQTTPublish+0x1b0>)
   31a50:	47a0      	blx	r4
   31a52:	0003      	movs	r3, r0
   31a54:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   31a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31a58:	2b00      	cmp	r3, #0
   31a5a:	dd5b      	ble.n	31b14 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   31a5c:	2324      	movs	r3, #36	; 0x24
   31a5e:	18fa      	adds	r2, r7, r3
   31a60:	6b39      	ldr	r1, [r7, #48]	; 0x30
   31a62:	68fb      	ldr	r3, [r7, #12]
   31a64:	0018      	movs	r0, r3
   31a66:	4b35      	ldr	r3, [pc, #212]	; (31b3c <MQTTPublish+0x1b4>)
   31a68:	4798      	blx	r3
   31a6a:	0003      	movs	r3, r0
   31a6c:	637b      	str	r3, [r7, #52]	; 0x34
   31a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   31a70:	2b00      	cmp	r3, #0
   31a72:	d151      	bne.n	31b18 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   31a74:	687b      	ldr	r3, [r7, #4]
   31a76:	781b      	ldrb	r3, [r3, #0]
   31a78:	2b01      	cmp	r3, #1
   31a7a:	d122      	bne.n	31ac2 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   31a7c:	2324      	movs	r3, #36	; 0x24
   31a7e:	18fa      	adds	r2, r7, r3
   31a80:	68fb      	ldr	r3, [r7, #12]
   31a82:	2104      	movs	r1, #4
   31a84:	0018      	movs	r0, r3
   31a86:	4b2e      	ldr	r3, [pc, #184]	; (31b40 <MQTTPublish+0x1b8>)
   31a88:	4798      	blx	r3
   31a8a:	0003      	movs	r3, r0
   31a8c:	2b04      	cmp	r3, #4
   31a8e:	d114      	bne.n	31aba <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   31a90:	68fb      	ldr	r3, [r7, #12]
   31a92:	695c      	ldr	r4, [r3, #20]
   31a94:	68fb      	ldr	r3, [r7, #12]
   31a96:	68db      	ldr	r3, [r3, #12]
   31a98:	2216      	movs	r2, #22
   31a9a:	18ba      	adds	r2, r7, r2
   31a9c:	2115      	movs	r1, #21
   31a9e:	1879      	adds	r1, r7, r1
   31aa0:	2014      	movs	r0, #20
   31aa2:	1838      	adds	r0, r7, r0
   31aa4:	9300      	str	r3, [sp, #0]
   31aa6:	0023      	movs	r3, r4
   31aa8:	4c26      	ldr	r4, [pc, #152]	; (31b44 <MQTTPublish+0x1bc>)
   31aaa:	47a0      	blx	r4
   31aac:	0003      	movs	r3, r0
   31aae:	2b01      	cmp	r3, #1
   31ab0:	d033      	beq.n	31b1a <MQTTPublish+0x192>
                rc = FAILURE;
   31ab2:	2301      	movs	r3, #1
   31ab4:	425b      	negs	r3, r3
   31ab6:	637b      	str	r3, [r7, #52]	; 0x34
   31ab8:	e02f      	b.n	31b1a <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   31aba:	2301      	movs	r3, #1
   31abc:	425b      	negs	r3, r3
   31abe:	637b      	str	r3, [r7, #52]	; 0x34
   31ac0:	e02b      	b.n	31b1a <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   31ac2:	687b      	ldr	r3, [r7, #4]
   31ac4:	781b      	ldrb	r3, [r3, #0]
   31ac6:	2b02      	cmp	r3, #2
   31ac8:	d127      	bne.n	31b1a <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   31aca:	2324      	movs	r3, #36	; 0x24
   31acc:	18fa      	adds	r2, r7, r3
   31ace:	68fb      	ldr	r3, [r7, #12]
   31ad0:	2107      	movs	r1, #7
   31ad2:	0018      	movs	r0, r3
   31ad4:	4b1a      	ldr	r3, [pc, #104]	; (31b40 <MQTTPublish+0x1b8>)
   31ad6:	4798      	blx	r3
   31ad8:	0003      	movs	r3, r0
   31ada:	2b07      	cmp	r3, #7
   31adc:	d114      	bne.n	31b08 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   31ade:	68fb      	ldr	r3, [r7, #12]
   31ae0:	695c      	ldr	r4, [r3, #20]
   31ae2:	68fb      	ldr	r3, [r7, #12]
   31ae4:	68db      	ldr	r3, [r3, #12]
   31ae6:	2212      	movs	r2, #18
   31ae8:	18ba      	adds	r2, r7, r2
   31aea:	2111      	movs	r1, #17
   31aec:	1879      	adds	r1, r7, r1
   31aee:	2010      	movs	r0, #16
   31af0:	1838      	adds	r0, r7, r0
   31af2:	9300      	str	r3, [sp, #0]
   31af4:	0023      	movs	r3, r4
   31af6:	4c13      	ldr	r4, [pc, #76]	; (31b44 <MQTTPublish+0x1bc>)
   31af8:	47a0      	blx	r4
   31afa:	0003      	movs	r3, r0
   31afc:	2b01      	cmp	r3, #1
   31afe:	d00c      	beq.n	31b1a <MQTTPublish+0x192>
                rc = FAILURE;
   31b00:	2301      	movs	r3, #1
   31b02:	425b      	negs	r3, r3
   31b04:	637b      	str	r3, [r7, #52]	; 0x34
   31b06:	e008      	b.n	31b1a <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   31b08:	2301      	movs	r3, #1
   31b0a:	425b      	negs	r3, r3
   31b0c:	637b      	str	r3, [r7, #52]	; 0x34
   31b0e:	e004      	b.n	31b1a <MQTTPublish+0x192>
		goto exit;
   31b10:	46c0      	nop			; (mov r8, r8)
   31b12:	e002      	b.n	31b1a <MQTTPublish+0x192>
        goto exit;
   31b14:	46c0      	nop			; (mov r8, r8)
   31b16:	e000      	b.n	31b1a <MQTTPublish+0x192>
        goto exit; // there was a problem
   31b18:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   31b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   31b1c:	0018      	movs	r0, r3
   31b1e:	46bd      	mov	sp, r7
   31b20:	b00f      	add	sp, #60	; 0x3c
   31b22:	bc0c      	pop	{r2, r3}
   31b24:	4690      	mov	r8, r2
   31b26:	4699      	mov	r9, r3
   31b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31b2a:	46c0      	nop			; (mov r8, r8)
   31b2c:	00031d91 	.word	0x00031d91
   31b30:	00031d19 	.word	0x00031d19
   31b34:	00030ed9 	.word	0x00030ed9
   31b38:	00033015 	.word	0x00033015
   31b3c:	00030f09 	.word	0x00030f09
   31b40:	00031671 	.word	0x00031671
   31b44:	00032a8d 	.word	0x00032a8d

00031b48 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   31b48:	b580      	push	{r7, lr}
   31b4a:	b088      	sub	sp, #32
   31b4c:	af00      	add	r7, sp, #0
   31b4e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   31b50:	2301      	movs	r3, #1
   31b52:	425b      	negs	r3, r3
   31b54:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   31b56:	2300      	movs	r3, #0
   31b58:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   31b5a:	230c      	movs	r3, #12
   31b5c:	18fb      	adds	r3, r7, r3
   31b5e:	0018      	movs	r0, r3
   31b60:	4b13      	ldr	r3, [pc, #76]	; (31bb0 <MQTTDisconnect+0x68>)
   31b62:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   31b64:	687b      	ldr	r3, [r7, #4]
   31b66:	685a      	ldr	r2, [r3, #4]
   31b68:	230c      	movs	r3, #12
   31b6a:	18fb      	adds	r3, r7, r3
   31b6c:	0011      	movs	r1, r2
   31b6e:	0018      	movs	r0, r3
   31b70:	4b10      	ldr	r3, [pc, #64]	; (31bb4 <MQTTDisconnect+0x6c>)
   31b72:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   31b74:	687b      	ldr	r3, [r7, #4]
   31b76:	691a      	ldr	r2, [r3, #16]
   31b78:	687b      	ldr	r3, [r7, #4]
   31b7a:	689b      	ldr	r3, [r3, #8]
   31b7c:	0019      	movs	r1, r3
   31b7e:	0010      	movs	r0, r2
   31b80:	4b0d      	ldr	r3, [pc, #52]	; (31bb8 <MQTTDisconnect+0x70>)
   31b82:	4798      	blx	r3
   31b84:	0003      	movs	r3, r0
   31b86:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   31b88:	69bb      	ldr	r3, [r7, #24]
   31b8a:	2b00      	cmp	r3, #0
   31b8c:	dd08      	ble.n	31ba0 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   31b8e:	230c      	movs	r3, #12
   31b90:	18fa      	adds	r2, r7, r3
   31b92:	69b9      	ldr	r1, [r7, #24]
   31b94:	687b      	ldr	r3, [r7, #4]
   31b96:	0018      	movs	r0, r3
   31b98:	4b08      	ldr	r3, [pc, #32]	; (31bbc <MQTTDisconnect+0x74>)
   31b9a:	4798      	blx	r3
   31b9c:	0003      	movs	r3, r0
   31b9e:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   31ba0:	687b      	ldr	r3, [r7, #4]
   31ba2:	2200      	movs	r2, #0
   31ba4:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   31ba6:	69fb      	ldr	r3, [r7, #28]
}
   31ba8:	0018      	movs	r0, r3
   31baa:	46bd      	mov	sp, r7
   31bac:	b008      	add	sp, #32
   31bae:	bd80      	pop	{r7, pc}
   31bb0:	00031d91 	.word	0x00031d91
   31bb4:	00031d19 	.word	0x00031d19
   31bb8:	00032941 	.word	0x00032941
   31bbc:	00030f09 	.word	0x00030f09

00031bc0 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   31bc0:	b580      	push	{r7, lr}
   31bc2:	b084      	sub	sp, #16
   31bc4:	af00      	add	r7, sp, #0
   31bc6:	0002      	movs	r2, r0
   31bc8:	1dfb      	adds	r3, r7, #7
   31bca:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   31bcc:	2300      	movs	r3, #0
   31bce:	60fb      	str	r3, [r7, #12]
   31bd0:	e01c      	b.n	31c0c <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   31bd2:	4a12      	ldr	r2, [pc, #72]	; (31c1c <isMQTTSocket+0x5c>)
   31bd4:	68fb      	ldr	r3, [r7, #12]
   31bd6:	2164      	movs	r1, #100	; 0x64
   31bd8:	434b      	muls	r3, r1
   31bda:	18d3      	adds	r3, r2, r3
   31bdc:	3360      	adds	r3, #96	; 0x60
   31bde:	681b      	ldr	r3, [r3, #0]
   31be0:	2b00      	cmp	r3, #0
   31be2:	d010      	beq.n	31c06 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   31be4:	4a0d      	ldr	r2, [pc, #52]	; (31c1c <isMQTTSocket+0x5c>)
   31be6:	68fb      	ldr	r3, [r7, #12]
   31be8:	2164      	movs	r1, #100	; 0x64
   31bea:	434b      	muls	r3, r1
   31bec:	18d3      	adds	r3, r2, r3
   31bee:	3360      	adds	r3, #96	; 0x60
   31bf0:	681b      	ldr	r3, [r3, #0]
   31bf2:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   31bf4:	68bb      	ldr	r3, [r7, #8]
   31bf6:	6a1a      	ldr	r2, [r3, #32]
   31bf8:	1dfb      	adds	r3, r7, #7
   31bfa:	781b      	ldrb	r3, [r3, #0]
   31bfc:	b25b      	sxtb	r3, r3
   31bfe:	429a      	cmp	r2, r3
   31c00:	d101      	bne.n	31c06 <isMQTTSocket+0x46>
				return true;
   31c02:	2301      	movs	r3, #1
   31c04:	e006      	b.n	31c14 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   31c06:	68fb      	ldr	r3, [r7, #12]
   31c08:	3301      	adds	r3, #1
   31c0a:	60fb      	str	r3, [r7, #12]
   31c0c:	68fb      	ldr	r3, [r7, #12]
   31c0e:	2b06      	cmp	r3, #6
   31c10:	d9df      	bls.n	31bd2 <isMQTTSocket+0x12>
		}
	}
	return false;
   31c12:	2300      	movs	r3, #0
}
   31c14:	0018      	movs	r0, r3
   31c16:	46bd      	mov	sp, r7
   31c18:	b004      	add	sp, #16
   31c1a:	bd80      	pop	{r7, pc}
   31c1c:	20004360 	.word	0x20004360

00031c20 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   31c20:	b580      	push	{r7, lr}
   31c22:	b082      	sub	sp, #8
   31c24:	af00      	add	r7, sp, #0
   31c26:	6078      	str	r0, [r7, #4]
   31c28:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   31c2a:	4b0d      	ldr	r3, [pc, #52]	; (31c60 <dnsResolveCallback+0x40>)
   31c2c:	781b      	ldrb	r3, [r3, #0]
   31c2e:	2201      	movs	r2, #1
   31c30:	4053      	eors	r3, r2
   31c32:	b2db      	uxtb	r3, r3
   31c34:	2b00      	cmp	r3, #0
   31c36:	d00e      	beq.n	31c56 <dnsResolveCallback+0x36>
   31c38:	4b0a      	ldr	r3, [pc, #40]	; (31c64 <dnsResolveCallback+0x44>)
   31c3a:	681b      	ldr	r3, [r3, #0]
   31c3c:	687a      	ldr	r2, [r7, #4]
   31c3e:	0011      	movs	r1, r2
   31c40:	0018      	movs	r0, r3
   31c42:	4b09      	ldr	r3, [pc, #36]	; (31c68 <dnsResolveCallback+0x48>)
   31c44:	4798      	blx	r3
   31c46:	1e03      	subs	r3, r0, #0
   31c48:	d105      	bne.n	31c56 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   31c4a:	683a      	ldr	r2, [r7, #0]
   31c4c:	4b07      	ldr	r3, [pc, #28]	; (31c6c <dnsResolveCallback+0x4c>)
   31c4e:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   31c50:	4b03      	ldr	r3, [pc, #12]	; (31c60 <dnsResolveCallback+0x40>)
   31c52:	2201      	movs	r2, #1
   31c54:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   31c56:	46c0      	nop			; (mov r8, r8)
   31c58:	46bd      	mov	sp, r7
   31c5a:	b002      	add	sp, #8
   31c5c:	bd80      	pop	{r7, pc}
   31c5e:	46c0      	nop			; (mov r8, r8)
   31c60:	20004250 	.word	0x20004250
   31c64:	2000435c 	.word	0x2000435c
   31c68:	00037c5b 	.word	0x00037c5b
   31c6c:	20004248 	.word	0x20004248

00031c70 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   31c70:	b580      	push	{r7, lr}
   31c72:	b084      	sub	sp, #16
   31c74:	af00      	add	r7, sp, #0
   31c76:	603a      	str	r2, [r7, #0]
   31c78:	1dfb      	adds	r3, r7, #7
   31c7a:	1c02      	adds	r2, r0, #0
   31c7c:	701a      	strb	r2, [r3, #0]
   31c7e:	1dbb      	adds	r3, r7, #6
   31c80:	1c0a      	adds	r2, r1, #0
   31c82:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   31c84:	1dfb      	adds	r3, r7, #7
   31c86:	781b      	ldrb	r3, [r3, #0]
   31c88:	b25b      	sxtb	r3, r3
   31c8a:	0018      	movs	r0, r3
   31c8c:	4b12      	ldr	r3, [pc, #72]	; (31cd8 <tcpClientSocketEventHandler+0x68>)
   31c8e:	4798      	blx	r3
   31c90:	1e03      	subs	r3, r0, #0
   31c92:	d01c      	beq.n	31cce <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   31c94:	1dbb      	adds	r3, r7, #6
   31c96:	781b      	ldrb	r3, [r3, #0]
   31c98:	2b06      	cmp	r3, #6
   31c9a:	d00c      	beq.n	31cb6 <tcpClientSocketEventHandler+0x46>
   31c9c:	2b07      	cmp	r3, #7
   31c9e:	d006      	beq.n	31cae <tcpClientSocketEventHandler+0x3e>
   31ca0:	2b05      	cmp	r3, #5
   31ca2:	d000      	beq.n	31ca6 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   31ca4:	e013      	b.n	31cce <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   31ca6:	4b0d      	ldr	r3, [pc, #52]	; (31cdc <tcpClientSocketEventHandler+0x6c>)
   31ca8:	2201      	movs	r2, #1
   31caa:	701a      	strb	r2, [r3, #0]
			break;
   31cac:	e00f      	b.n	31cce <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   31cae:	4b0c      	ldr	r3, [pc, #48]	; (31ce0 <tcpClientSocketEventHandler+0x70>)
   31cb0:	2201      	movs	r2, #1
   31cb2:	701a      	strb	r2, [r3, #0]
			break;
   31cb4:	e00b      	b.n	31cce <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   31cb6:	683b      	ldr	r3, [r7, #0]
   31cb8:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   31cba:	68fb      	ldr	r3, [r7, #12]
   31cbc:	2204      	movs	r2, #4
   31cbe:	5e9b      	ldrsh	r3, [r3, r2]
   31cc0:	001a      	movs	r2, r3
   31cc2:	4b08      	ldr	r3, [pc, #32]	; (31ce4 <tcpClientSocketEventHandler+0x74>)
   31cc4:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   31cc6:	4b08      	ldr	r3, [pc, #32]	; (31ce8 <tcpClientSocketEventHandler+0x78>)
   31cc8:	2201      	movs	r2, #1
   31cca:	701a      	strb	r2, [r3, #0]
			break;
   31ccc:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   31cce:	46c0      	nop			; (mov r8, r8)
   31cd0:	46bd      	mov	sp, r7
   31cd2:	b004      	add	sp, #16
   31cd4:	bd80      	pop	{r7, pc}
   31cd6:	46c0      	nop			; (mov r8, r8)
   31cd8:	00031bc1 	.word	0x00031bc1
   31cdc:	20004251 	.word	0x20004251
   31ce0:	20004252 	.word	0x20004252
   31ce4:	2000424c 	.word	0x2000424c
   31ce8:	20004253 	.word	0x20004253

00031cec <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   31cec:	b580      	push	{r7, lr}
   31cee:	b082      	sub	sp, #8
   31cf0:	af00      	add	r7, sp, #0
   31cf2:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   31cf4:	687b      	ldr	r3, [r7, #4]
   31cf6:	3304      	adds	r3, #4
   31cf8:	687a      	ldr	r2, [r7, #4]
   31cfa:	0011      	movs	r1, r2
   31cfc:	0018      	movs	r0, r3
   31cfe:	4b05      	ldr	r3, [pc, #20]	; (31d14 <TimerIsExpired+0x28>)
   31d00:	4798      	blx	r3
   31d02:	0003      	movs	r3, r0
   31d04:	3b01      	subs	r3, #1
   31d06:	425a      	negs	r2, r3
   31d08:	4153      	adcs	r3, r2
   31d0a:	b2db      	uxtb	r3, r3
}
   31d0c:	0018      	movs	r0, r3
   31d0e:	46bd      	mov	sp, r7
   31d10:	b002      	add	sp, #8
   31d12:	bd80      	pop	{r7, pc}
   31d14:	0001f4f1 	.word	0x0001f4f1

00031d18 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   31d18:	b580      	push	{r7, lr}
   31d1a:	b082      	sub	sp, #8
   31d1c:	af00      	add	r7, sp, #0
   31d1e:	6078      	str	r0, [r7, #4]
   31d20:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   31d22:	687b      	ldr	r3, [r7, #4]
   31d24:	683a      	ldr	r2, [r7, #0]
   31d26:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   31d28:	687b      	ldr	r3, [r7, #4]
   31d2a:	3304      	adds	r3, #4
   31d2c:	0018      	movs	r0, r3
   31d2e:	4b03      	ldr	r3, [pc, #12]	; (31d3c <TimerCountdownMS+0x24>)
   31d30:	4798      	blx	r3
}
   31d32:	46c0      	nop			; (mov r8, r8)
   31d34:	46bd      	mov	sp, r7
   31d36:	b002      	add	sp, #8
   31d38:	bd80      	pop	{r7, pc}
   31d3a:	46c0      	nop			; (mov r8, r8)
   31d3c:	0001f485 	.word	0x0001f485

00031d40 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   31d40:	b580      	push	{r7, lr}
   31d42:	b082      	sub	sp, #8
   31d44:	af00      	add	r7, sp, #0
   31d46:	6078      	str	r0, [r7, #4]
   31d48:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   31d4a:	683b      	ldr	r3, [r7, #0]
   31d4c:	22fa      	movs	r2, #250	; 0xfa
   31d4e:	0092      	lsls	r2, r2, #2
   31d50:	435a      	muls	r2, r3
   31d52:	687b      	ldr	r3, [r7, #4]
   31d54:	0011      	movs	r1, r2
   31d56:	0018      	movs	r0, r3
   31d58:	4b02      	ldr	r3, [pc, #8]	; (31d64 <TimerCountdown+0x24>)
   31d5a:	4798      	blx	r3
}
   31d5c:	46c0      	nop			; (mov r8, r8)
   31d5e:	46bd      	mov	sp, r7
   31d60:	b002      	add	sp, #8
   31d62:	bd80      	pop	{r7, pc}
   31d64:	00031d19 	.word	0x00031d19

00031d68 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   31d68:	b580      	push	{r7, lr}
   31d6a:	b082      	sub	sp, #8
   31d6c:	af00      	add	r7, sp, #0
   31d6e:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   31d70:	687b      	ldr	r3, [r7, #4]
   31d72:	3304      	adds	r3, #4
   31d74:	687a      	ldr	r2, [r7, #4]
   31d76:	0011      	movs	r1, r2
   31d78:	0018      	movs	r0, r3
   31d7a:	4b04      	ldr	r3, [pc, #16]	; (31d8c <TimerLeftMS+0x24>)
   31d7c:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   31d7e:	687b      	ldr	r3, [r7, #4]
   31d80:	681b      	ldr	r3, [r3, #0]
}
   31d82:	0018      	movs	r0, r3
   31d84:	46bd      	mov	sp, r7
   31d86:	b002      	add	sp, #8
   31d88:	bd80      	pop	{r7, pc}
   31d8a:	46c0      	nop			; (mov r8, r8)
   31d8c:	0001f4f1 	.word	0x0001f4f1

00031d90 <TimerInit>:


void TimerInit(Timer* timer) {
   31d90:	b580      	push	{r7, lr}
   31d92:	b082      	sub	sp, #8
   31d94:	af00      	add	r7, sp, #0
   31d96:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   31d98:	687b      	ldr	r3, [r7, #4]
   31d9a:	2200      	movs	r2, #0
   31d9c:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   31d9e:	687b      	ldr	r3, [r7, #4]
   31da0:	3304      	adds	r3, #4
   31da2:	2208      	movs	r2, #8
   31da4:	2100      	movs	r1, #0
   31da6:	0018      	movs	r0, r3
   31da8:	4b02      	ldr	r3, [pc, #8]	; (31db4 <TimerInit+0x24>)
   31daa:	4798      	blx	r3
}
   31dac:	46c0      	nop			; (mov r8, r8)
   31dae:	46bd      	mov	sp, r7
   31db0:	b002      	add	sp, #8
   31db2:	bd80      	pop	{r7, pc}
   31db4:	00037903 	.word	0x00037903

00031db8 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   31db8:	b590      	push	{r4, r7, lr}
   31dba:	b085      	sub	sp, #20
   31dbc:	af00      	add	r7, sp, #0
   31dbe:	60f8      	str	r0, [r7, #12]
   31dc0:	60b9      	str	r1, [r7, #8]
   31dc2:	607a      	str	r2, [r7, #4]
   31dc4:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   31dc6:	683b      	ldr	r3, [r7, #0]
   31dc8:	2b00      	cmp	r3, #0
   31dca:	d101      	bne.n	31dd0 <WINC1500_read+0x18>
   31dcc:	230a      	movs	r3, #10
   31dce:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   31dd0:	4b2c      	ldr	r3, [pc, #176]	; (31e84 <WINC1500_read+0xcc>)
   31dd2:	681b      	ldr	r3, [r3, #0]
   31dd4:	2b00      	cmp	r3, #0
   31dd6:	d131      	bne.n	31e3c <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   31dd8:	4b2b      	ldr	r3, [pc, #172]	; (31e88 <WINC1500_read+0xd0>)
   31dda:	2200      	movs	r2, #0
   31ddc:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   31dde:	68fb      	ldr	r3, [r7, #12]
   31de0:	681b      	ldr	r3, [r3, #0]
   31de2:	b258      	sxtb	r0, r3
   31de4:	683c      	ldr	r4, [r7, #0]
   31de6:	2380      	movs	r3, #128	; 0x80
   31de8:	005a      	lsls	r2, r3, #1
   31dea:	4928      	ldr	r1, [pc, #160]	; (31e8c <WINC1500_read+0xd4>)
   31dec:	0023      	movs	r3, r4
   31dee:	4c28      	ldr	r4, [pc, #160]	; (31e90 <WINC1500_read+0xd8>)
   31df0:	47a0      	blx	r4
   31df2:	1e03      	subs	r3, r0, #0
   31df4:	d005      	beq.n	31e02 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   31df6:	2301      	movs	r3, #1
   31df8:	425b      	negs	r3, r3
   31dfa:	e03e      	b.n	31e7a <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   31dfc:	2000      	movs	r0, #0
   31dfe:	4b25      	ldr	r3, [pc, #148]	; (31e94 <WINC1500_read+0xdc>)
   31e00:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   31e02:	4b21      	ldr	r3, [pc, #132]	; (31e88 <WINC1500_read+0xd0>)
   31e04:	781b      	ldrb	r3, [r3, #0]
   31e06:	2201      	movs	r2, #1
   31e08:	4053      	eors	r3, r2
   31e0a:	b2db      	uxtb	r3, r3
   31e0c:	2b00      	cmp	r3, #0
   31e0e:	d1f5      	bne.n	31dfc <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   31e10:	4b21      	ldr	r3, [pc, #132]	; (31e98 <WINC1500_read+0xe0>)
   31e12:	681b      	ldr	r3, [r3, #0]
   31e14:	2b00      	cmp	r3, #0
   31e16:	dd08      	ble.n	31e2a <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   31e18:	4b1f      	ldr	r3, [pc, #124]	; (31e98 <WINC1500_read+0xe0>)
   31e1a:	681b      	ldr	r3, [r3, #0]
   31e1c:	001a      	movs	r2, r3
   31e1e:	4b19      	ldr	r3, [pc, #100]	; (31e84 <WINC1500_read+0xcc>)
   31e20:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   31e22:	4b1e      	ldr	r3, [pc, #120]	; (31e9c <WINC1500_read+0xe4>)
   31e24:	2200      	movs	r2, #0
   31e26:	601a      	str	r2, [r3, #0]
   31e28:	e008      	b.n	31e3c <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   31e2a:	4b16      	ldr	r3, [pc, #88]	; (31e84 <WINC1500_read+0xcc>)
   31e2c:	2200      	movs	r2, #0
   31e2e:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   31e30:	4b1a      	ldr	r3, [pc, #104]	; (31e9c <WINC1500_read+0xe4>)
   31e32:	2200      	movs	r2, #0
   31e34:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   31e36:	4b18      	ldr	r3, [pc, #96]	; (31e98 <WINC1500_read+0xe0>)
   31e38:	681b      	ldr	r3, [r3, #0]
   31e3a:	e01e      	b.n	31e7a <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   31e3c:	4b11      	ldr	r3, [pc, #68]	; (31e84 <WINC1500_read+0xcc>)
   31e3e:	681b      	ldr	r3, [r3, #0]
   31e40:	001a      	movs	r2, r3
   31e42:	687b      	ldr	r3, [r7, #4]
   31e44:	4293      	cmp	r3, r2
   31e46:	dd02      	ble.n	31e4e <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   31e48:	2301      	movs	r3, #1
   31e4a:	425b      	negs	r3, r3
   31e4c:	e015      	b.n	31e7a <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   31e4e:	4b13      	ldr	r3, [pc, #76]	; (31e9c <WINC1500_read+0xe4>)
   31e50:	681a      	ldr	r2, [r3, #0]
   31e52:	4b0e      	ldr	r3, [pc, #56]	; (31e8c <WINC1500_read+0xd4>)
   31e54:	18d1      	adds	r1, r2, r3
   31e56:	687a      	ldr	r2, [r7, #4]
   31e58:	68bb      	ldr	r3, [r7, #8]
   31e5a:	0018      	movs	r0, r3
   31e5c:	4b10      	ldr	r3, [pc, #64]	; (31ea0 <WINC1500_read+0xe8>)
   31e5e:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   31e60:	4b08      	ldr	r3, [pc, #32]	; (31e84 <WINC1500_read+0xcc>)
   31e62:	681a      	ldr	r2, [r3, #0]
   31e64:	687b      	ldr	r3, [r7, #4]
   31e66:	1ad2      	subs	r2, r2, r3
   31e68:	4b06      	ldr	r3, [pc, #24]	; (31e84 <WINC1500_read+0xcc>)
   31e6a:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   31e6c:	4b0b      	ldr	r3, [pc, #44]	; (31e9c <WINC1500_read+0xe4>)
   31e6e:	681a      	ldr	r2, [r3, #0]
   31e70:	687b      	ldr	r3, [r7, #4]
   31e72:	18d2      	adds	r2, r2, r3
   31e74:	4b09      	ldr	r3, [pc, #36]	; (31e9c <WINC1500_read+0xe4>)
   31e76:	601a      	str	r2, [r3, #0]
  
  return len;
   31e78:	687b      	ldr	r3, [r7, #4]
}
   31e7a:	0018      	movs	r0, r3
   31e7c:	46bd      	mov	sp, r7
   31e7e:	b005      	add	sp, #20
   31e80:	bd90      	pop	{r4, r7, pc}
   31e82:	46c0      	nop			; (mov r8, r8)
   31e84:	20004358 	.word	0x20004358
   31e88:	20004253 	.word	0x20004253
   31e8c:	20004254 	.word	0x20004254
   31e90:	0002846d 	.word	0x0002846d
   31e94:	000249b5 	.word	0x000249b5
   31e98:	2000424c 	.word	0x2000424c
   31e9c:	20004354 	.word	0x20004354
   31ea0:	000378cd 	.word	0x000378cd

00031ea4 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   31ea4:	b590      	push	{r4, r7, lr}
   31ea6:	b085      	sub	sp, #20
   31ea8:	af00      	add	r7, sp, #0
   31eaa:	60f8      	str	r0, [r7, #12]
   31eac:	60b9      	str	r1, [r7, #8]
   31eae:	607a      	str	r2, [r7, #4]
   31eb0:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   31eb2:	4b10      	ldr	r3, [pc, #64]	; (31ef4 <WINC1500_write+0x50>)
   31eb4:	2200      	movs	r2, #0
   31eb6:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   31eb8:	68fb      	ldr	r3, [r7, #12]
   31eba:	681b      	ldr	r3, [r3, #0]
   31ebc:	b258      	sxtb	r0, r3
   31ebe:	687b      	ldr	r3, [r7, #4]
   31ec0:	b29a      	uxth	r2, r3
   31ec2:	68b9      	ldr	r1, [r7, #8]
   31ec4:	2300      	movs	r3, #0
   31ec6:	4c0c      	ldr	r4, [pc, #48]	; (31ef8 <WINC1500_write+0x54>)
   31ec8:	47a0      	blx	r4
   31eca:	1e03      	subs	r3, r0, #0
   31ecc:	d005      	beq.n	31eda <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   31ece:	2301      	movs	r3, #1
   31ed0:	425b      	negs	r3, r3
   31ed2:	e00a      	b.n	31eea <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   31ed4:	2000      	movs	r0, #0
   31ed6:	4b09      	ldr	r3, [pc, #36]	; (31efc <WINC1500_write+0x58>)
   31ed8:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   31eda:	4b06      	ldr	r3, [pc, #24]	; (31ef4 <WINC1500_write+0x50>)
   31edc:	781b      	ldrb	r3, [r3, #0]
   31ede:	2201      	movs	r2, #1
   31ee0:	4053      	eors	r3, r2
   31ee2:	b2db      	uxtb	r3, r3
   31ee4:	2b00      	cmp	r3, #0
   31ee6:	d1f5      	bne.n	31ed4 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   31ee8:	687b      	ldr	r3, [r7, #4]
}
   31eea:	0018      	movs	r0, r3
   31eec:	46bd      	mov	sp, r7
   31eee:	b005      	add	sp, #20
   31ef0:	bd90      	pop	{r4, r7, pc}
   31ef2:	46c0      	nop			; (mov r8, r8)
   31ef4:	20004252 	.word	0x20004252
   31ef8:	00028309 	.word	0x00028309
   31efc:	000249b5 	.word	0x000249b5

00031f00 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   31f00:	b580      	push	{r7, lr}
   31f02:	b082      	sub	sp, #8
   31f04:	af00      	add	r7, sp, #0
   31f06:	6078      	str	r0, [r7, #4]
	close(n->socket);
   31f08:	687b      	ldr	r3, [r7, #4]
   31f0a:	681b      	ldr	r3, [r3, #0]
   31f0c:	b25b      	sxtb	r3, r3
   31f0e:	0018      	movs	r0, r3
   31f10:	4b06      	ldr	r3, [pc, #24]	; (31f2c <WINC1500_disconnect+0x2c>)
   31f12:	4798      	blx	r3
	n->socket=-1;
   31f14:	687b      	ldr	r3, [r7, #4]
   31f16:	2201      	movs	r2, #1
   31f18:	4252      	negs	r2, r2
   31f1a:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   31f1c:	4b04      	ldr	r3, [pc, #16]	; (31f30 <WINC1500_disconnect+0x30>)
   31f1e:	2200      	movs	r2, #0
   31f20:	701a      	strb	r2, [r3, #0]
}
   31f22:	46c0      	nop			; (mov r8, r8)
   31f24:	46bd      	mov	sp, r7
   31f26:	b002      	add	sp, #8
   31f28:	bd80      	pop	{r7, pc}
   31f2a:	46c0      	nop			; (mov r8, r8)
   31f2c:	000285ed 	.word	0x000285ed
   31f30:	20004251 	.word	0x20004251

00031f34 <NetworkInit>:


void NetworkInit(Network* n) {
   31f34:	b580      	push	{r7, lr}
   31f36:	b082      	sub	sp, #8
   31f38:	af00      	add	r7, sp, #0
   31f3a:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   31f3c:	687b      	ldr	r3, [r7, #4]
   31f3e:	2201      	movs	r2, #1
   31f40:	4252      	negs	r2, r2
   31f42:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   31f44:	687b      	ldr	r3, [r7, #4]
   31f46:	4a06      	ldr	r2, [pc, #24]	; (31f60 <NetworkInit+0x2c>)
   31f48:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   31f4a:	687b      	ldr	r3, [r7, #4]
   31f4c:	4a05      	ldr	r2, [pc, #20]	; (31f64 <NetworkInit+0x30>)
   31f4e:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   31f50:	687b      	ldr	r3, [r7, #4]
   31f52:	4a05      	ldr	r2, [pc, #20]	; (31f68 <NetworkInit+0x34>)
   31f54:	611a      	str	r2, [r3, #16]
}
   31f56:	46c0      	nop			; (mov r8, r8)
   31f58:	46bd      	mov	sp, r7
   31f5a:	b002      	add	sp, #8
   31f5c:	bd80      	pop	{r7, pc}
   31f5e:	46c0      	nop			; (mov r8, r8)
   31f60:	00031db9 	.word	0x00031db9
   31f64:	00031ea5 	.word	0x00031ea5
   31f68:	00031f01 	.word	0x00031f01

00031f6c <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   31f6c:	b580      	push	{r7, lr}
   31f6e:	b088      	sub	sp, #32
   31f70:	af00      	add	r7, sp, #0
   31f72:	60f8      	str	r0, [r7, #12]
   31f74:	60b9      	str	r1, [r7, #8]
   31f76:	607a      	str	r2, [r7, #4]
   31f78:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   31f7a:	4b37      	ldr	r3, [pc, #220]	; (32058 <ConnectNetwork+0xec>)
   31f7c:	2200      	movs	r2, #0
   31f7e:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   31f80:	4b36      	ldr	r3, [pc, #216]	; (3205c <ConnectNetwork+0xf0>)
   31f82:	68ba      	ldr	r2, [r7, #8]
   31f84:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   31f86:	68bb      	ldr	r3, [r7, #8]
   31f88:	0018      	movs	r0, r3
   31f8a:	4b35      	ldr	r3, [pc, #212]	; (32060 <ConnectNetwork+0xf4>)
   31f8c:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   31f8e:	e002      	b.n	31f96 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   31f90:	2000      	movs	r0, #0
   31f92:	4b34      	ldr	r3, [pc, #208]	; (32064 <ConnectNetwork+0xf8>)
   31f94:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   31f96:	4b30      	ldr	r3, [pc, #192]	; (32058 <ConnectNetwork+0xec>)
   31f98:	781b      	ldrb	r3, [r3, #0]
   31f9a:	2201      	movs	r2, #1
   31f9c:	4053      	eors	r3, r2
   31f9e:	b2db      	uxtb	r3, r3
   31fa0:	2b00      	cmp	r3, #0
   31fa2:	d1f5      	bne.n	31f90 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   31fa4:	4b30      	ldr	r3, [pc, #192]	; (32068 <ConnectNetwork+0xfc>)
   31fa6:	681a      	ldr	r2, [r3, #0]
   31fa8:	68fb      	ldr	r3, [r7, #12]
   31faa:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   31fac:	2310      	movs	r3, #16
   31fae:	18fb      	adds	r3, r7, r3
   31fb0:	2202      	movs	r2, #2
   31fb2:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   31fb4:	687b      	ldr	r3, [r7, #4]
   31fb6:	b29b      	uxth	r3, r3
   31fb8:	021b      	lsls	r3, r3, #8
   31fba:	b21a      	sxth	r2, r3
   31fbc:	687b      	ldr	r3, [r7, #4]
   31fbe:	b29b      	uxth	r3, r3
   31fc0:	0a1b      	lsrs	r3, r3, #8
   31fc2:	b29b      	uxth	r3, r3
   31fc4:	b21b      	sxth	r3, r3
   31fc6:	4313      	orrs	r3, r2
   31fc8:	b21b      	sxth	r3, r3
   31fca:	b29a      	uxth	r2, r3
   31fcc:	2310      	movs	r3, #16
   31fce:	18fb      	adds	r3, r7, r3
   31fd0:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   31fd2:	4b25      	ldr	r3, [pc, #148]	; (32068 <ConnectNetwork+0xfc>)
   31fd4:	681b      	ldr	r3, [r3, #0]
   31fd6:	001a      	movs	r2, r3
   31fd8:	2310      	movs	r3, #16
   31fda:	18fb      	adds	r3, r7, r3
   31fdc:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   31fde:	68fb      	ldr	r3, [r7, #12]
   31fe0:	681b      	ldr	r3, [r3, #0]
   31fe2:	2b00      	cmp	r3, #0
   31fe4:	da0a      	bge.n	31ffc <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   31fe6:	683b      	ldr	r3, [r7, #0]
   31fe8:	b2db      	uxtb	r3, r3
   31fea:	001a      	movs	r2, r3
   31fec:	2101      	movs	r1, #1
   31fee:	2002      	movs	r0, #2
   31ff0:	4b1e      	ldr	r3, [pc, #120]	; (3206c <ConnectNetwork+0x100>)
   31ff2:	4798      	blx	r3
   31ff4:	0003      	movs	r3, r0
   31ff6:	001a      	movs	r2, r3
   31ff8:	68fb      	ldr	r3, [r7, #12]
   31ffa:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   31ffc:	68fb      	ldr	r3, [r7, #12]
   31ffe:	681b      	ldr	r3, [r3, #0]
   32000:	3301      	adds	r3, #1
   32002:	d108      	bne.n	32016 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   32004:	68fb      	ldr	r3, [r7, #12]
   32006:	681b      	ldr	r3, [r3, #0]
   32008:	b25b      	sxtb	r3, r3
   3200a:	0018      	movs	r0, r3
   3200c:	4b18      	ldr	r3, [pc, #96]	; (32070 <ConnectNetwork+0x104>)
   3200e:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   32010:	2309      	movs	r3, #9
   32012:	425b      	negs	r3, r3
   32014:	e01c      	b.n	32050 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   32016:	68fb      	ldr	r3, [r7, #12]
   32018:	681b      	ldr	r3, [r3, #0]
   3201a:	b25b      	sxtb	r3, r3
   3201c:	2210      	movs	r2, #16
   3201e:	18b9      	adds	r1, r7, r2
   32020:	2210      	movs	r2, #16
   32022:	0018      	movs	r0, r3
   32024:	4b13      	ldr	r3, [pc, #76]	; (32074 <ConnectNetwork+0x108>)
   32026:	4798      	blx	r3
   32028:	1e03      	subs	r3, r0, #0
   3202a:	d002      	beq.n	32032 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   3202c:	2309      	movs	r3, #9
   3202e:	425b      	negs	r3, r3
   32030:	e00e      	b.n	32050 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   32032:	4b11      	ldr	r3, [pc, #68]	; (32078 <ConnectNetwork+0x10c>)
   32034:	2200      	movs	r2, #0
   32036:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   32038:	e002      	b.n	32040 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   3203a:	2000      	movs	r0, #0
   3203c:	4b09      	ldr	r3, [pc, #36]	; (32064 <ConnectNetwork+0xf8>)
   3203e:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   32040:	4b0d      	ldr	r3, [pc, #52]	; (32078 <ConnectNetwork+0x10c>)
   32042:	781b      	ldrb	r3, [r3, #0]
   32044:	2201      	movs	r2, #1
   32046:	4053      	eors	r3, r2
   32048:	b2db      	uxtb	r3, r3
   3204a:	2b00      	cmp	r3, #0
   3204c:	d1f5      	bne.n	3203a <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   3204e:	2300      	movs	r3, #0
   32050:	0018      	movs	r0, r3
   32052:	46bd      	mov	sp, r7
   32054:	b008      	add	sp, #32
   32056:	bd80      	pop	{r7, pc}
   32058:	20004250 	.word	0x20004250
   3205c:	2000435c 	.word	0x2000435c
   32060:	00028835 	.word	0x00028835
   32064:	000249b5 	.word	0x000249b5
   32068:	20004248 	.word	0x20004248
   3206c:	00027fe1 	.word	0x00027fe1
   32070:	000285ed 	.word	0x000285ed
   32074:	000281f5 	.word	0x000281f5
   32078:	20004251 	.word	0x20004251

0003207c <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   3207c:	b580      	push	{r7, lr}
   3207e:	b084      	sub	sp, #16
   32080:	af00      	add	r7, sp, #0
   32082:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   32084:	687b      	ldr	r3, [r7, #4]
   32086:	2b00      	cmp	r3, #0
   32088:	d022      	beq.n	320d0 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   3208a:	2300      	movs	r3, #0
   3208c:	60fb      	str	r3, [r7, #12]
   3208e:	e01b      	b.n	320c8 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   32090:	4a11      	ldr	r2, [pc, #68]	; (320d8 <allocateClient+0x5c>)
   32092:	68fb      	ldr	r3, [r7, #12]
   32094:	2164      	movs	r1, #100	; 0x64
   32096:	434b      	muls	r3, r1
   32098:	18d3      	adds	r3, r2, r3
   3209a:	3360      	adds	r3, #96	; 0x60
   3209c:	681b      	ldr	r3, [r3, #0]
   3209e:	2b00      	cmp	r3, #0
   320a0:	d10f      	bne.n	320c2 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   320a2:	4a0d      	ldr	r2, [pc, #52]	; (320d8 <allocateClient+0x5c>)
   320a4:	68fb      	ldr	r3, [r7, #12]
   320a6:	2164      	movs	r1, #100	; 0x64
   320a8:	434b      	muls	r3, r1
   320aa:	18d3      	adds	r3, r2, r3
   320ac:	3360      	adds	r3, #96	; 0x60
   320ae:	687a      	ldr	r2, [r7, #4]
   320b0:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   320b2:	68fb      	ldr	r3, [r7, #12]
   320b4:	2264      	movs	r2, #100	; 0x64
   320b6:	435a      	muls	r2, r3
   320b8:	4b07      	ldr	r3, [pc, #28]	; (320d8 <allocateClient+0x5c>)
   320ba:	18d2      	adds	r2, r2, r3
   320bc:	687b      	ldr	r3, [r7, #4]
   320be:	61da      	str	r2, [r3, #28]
			return;
   320c0:	e007      	b.n	320d2 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   320c2:	68fb      	ldr	r3, [r7, #12]
   320c4:	3301      	adds	r3, #1
   320c6:	60fb      	str	r3, [r7, #12]
   320c8:	68fb      	ldr	r3, [r7, #12]
   320ca:	2b06      	cmp	r3, #6
   320cc:	d9e0      	bls.n	32090 <allocateClient+0x14>
   320ce:	e000      	b.n	320d2 <allocateClient+0x56>
		return;
   320d0:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   320d2:	46bd      	mov	sp, r7
   320d4:	b004      	add	sp, #16
   320d6:	bd80      	pop	{r7, pc}
   320d8:	20004360 	.word	0x20004360

000320dc <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   320dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   320de:	b089      	sub	sp, #36	; 0x24
   320e0:	af04      	add	r7, sp, #16
   320e2:	6078      	str	r0, [r7, #4]
   320e4:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   320e6:	687b      	ldr	r3, [r7, #4]
   320e8:	2b00      	cmp	r3, #0
   320ea:	d00a      	beq.n	32102 <mqtt_init+0x26>
   320ec:	683b      	ldr	r3, [r7, #0]
   320ee:	2b00      	cmp	r3, #0
   320f0:	d007      	beq.n	32102 <mqtt_init+0x26>
   320f2:	683b      	ldr	r3, [r7, #0]
   320f4:	691b      	ldr	r3, [r3, #16]
   320f6:	2b00      	cmp	r3, #0
   320f8:	d003      	beq.n	32102 <mqtt_init+0x26>
   320fa:	683b      	ldr	r3, [r7, #0]
   320fc:	689b      	ldr	r3, [r3, #8]
   320fe:	2b00      	cmp	r3, #0
   32100:	d102      	bne.n	32108 <mqtt_init+0x2c>
		return FAILURE;
   32102:	2301      	movs	r3, #1
   32104:	425b      	negs	r3, r3
   32106:	e034      	b.n	32172 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   32108:	683b      	ldr	r3, [r7, #0]
   3210a:	889b      	ldrh	r3, [r3, #4]
   3210c:	001a      	movs	r2, r3
   3210e:	23fa      	movs	r3, #250	; 0xfa
   32110:	009b      	lsls	r3, r3, #2
   32112:	4353      	muls	r3, r2
   32114:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   32116:	687b      	ldr	r3, [r7, #4]
   32118:	3320      	adds	r3, #32
   3211a:	0018      	movs	r0, r3
   3211c:	4b17      	ldr	r3, [pc, #92]	; (3217c <mqtt_init+0xa0>)
   3211e:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   32120:	687b      	ldr	r3, [r7, #4]
   32122:	3304      	adds	r3, #4
   32124:	6839      	ldr	r1, [r7, #0]
   32126:	2218      	movs	r2, #24
   32128:	0018      	movs	r0, r3
   3212a:	4b15      	ldr	r3, [pc, #84]	; (32180 <mqtt_init+0xa4>)
   3212c:	4798      	blx	r3
	allocateClient(module);
   3212e:	687b      	ldr	r3, [r7, #4]
   32130:	0018      	movs	r0, r3
   32132:	4b14      	ldr	r3, [pc, #80]	; (32184 <mqtt_init+0xa8>)
   32134:	4798      	blx	r3
	
	if(module->client)
   32136:	687b      	ldr	r3, [r7, #4]
   32138:	69db      	ldr	r3, [r3, #28]
   3213a:	2b00      	cmp	r3, #0
   3213c:	d017      	beq.n	3216e <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   3213e:	687b      	ldr	r3, [r7, #4]
   32140:	69d8      	ldr	r0, [r3, #28]
   32142:	687b      	ldr	r3, [r7, #4]
   32144:	3320      	adds	r3, #32
   32146:	001c      	movs	r4, r3
   32148:	683b      	ldr	r3, [r7, #0]
   3214a:	691e      	ldr	r6, [r3, #16]
   3214c:	683b      	ldr	r3, [r7, #0]
   3214e:	695a      	ldr	r2, [r3, #20]
   32150:	683b      	ldr	r3, [r7, #0]
   32152:	6899      	ldr	r1, [r3, #8]
   32154:	683b      	ldr	r3, [r7, #0]
   32156:	68db      	ldr	r3, [r3, #12]
   32158:	68fd      	ldr	r5, [r7, #12]
   3215a:	9302      	str	r3, [sp, #8]
   3215c:	9101      	str	r1, [sp, #4]
   3215e:	9200      	str	r2, [sp, #0]
   32160:	0033      	movs	r3, r6
   32162:	002a      	movs	r2, r5
   32164:	0021      	movs	r1, r4
   32166:	4c08      	ldr	r4, [pc, #32]	; (32188 <mqtt_init+0xac>)
   32168:	47a0      	blx	r4
		return SUCCESS;
   3216a:	2300      	movs	r3, #0
   3216c:	e001      	b.n	32172 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   3216e:	2301      	movs	r3, #1
   32170:	425b      	negs	r3, r3
}
   32172:	0018      	movs	r0, r3
   32174:	46bd      	mov	sp, r7
   32176:	b005      	add	sp, #20
   32178:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3217a:	46c0      	nop			; (mov r8, r8)
   3217c:	00031f35 	.word	0x00031f35
   32180:	000378cd 	.word	0x000378cd
   32184:	0003207d 	.word	0x0003207d
   32188:	00030fad 	.word	0x00030fad

0003218c <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   3218c:	b580      	push	{r7, lr}
   3218e:	b082      	sub	sp, #8
   32190:	af00      	add	r7, sp, #0
   32192:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   32194:	687b      	ldr	r3, [r7, #4]
   32196:	4a0c      	ldr	r2, [pc, #48]	; (321c8 <mqtt_get_config_defaults+0x3c>)
   32198:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   3219a:	687b      	ldr	r3, [r7, #4]
   3219c:	2200      	movs	r2, #0
   3219e:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   321a0:	687b      	ldr	r3, [r7, #4]
   321a2:	223c      	movs	r2, #60	; 0x3c
   321a4:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   321a6:	687b      	ldr	r3, [r7, #4]
   321a8:	2200      	movs	r2, #0
   321aa:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   321ac:	687b      	ldr	r3, [r7, #4]
   321ae:	2200      	movs	r2, #0
   321b0:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   321b2:	687b      	ldr	r3, [r7, #4]
   321b4:	2200      	movs	r2, #0
   321b6:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   321b8:	687b      	ldr	r3, [r7, #4]
   321ba:	2200      	movs	r2, #0
   321bc:	615a      	str	r2, [r3, #20]
}
   321be:	46c0      	nop			; (mov r8, r8)
   321c0:	46bd      	mov	sp, r7
   321c2:	b002      	add	sp, #8
   321c4:	bd80      	pop	{r7, pc}
   321c6:	46c0      	nop			; (mov r8, r8)
   321c8:	0000075b 	.word	0x0000075b

000321cc <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   321cc:	b580      	push	{r7, lr}
   321ce:	b082      	sub	sp, #8
   321d0:	af00      	add	r7, sp, #0
   321d2:	6078      	str	r0, [r7, #4]
   321d4:	6039      	str	r1, [r7, #0]
	if(module)
   321d6:	687b      	ldr	r3, [r7, #4]
   321d8:	2b00      	cmp	r3, #0
   321da:	d004      	beq.n	321e6 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   321dc:	687b      	ldr	r3, [r7, #4]
   321de:	683a      	ldr	r2, [r7, #0]
   321e0:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   321e2:	2300      	movs	r3, #0
   321e4:	e001      	b.n	321ea <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   321e6:	2301      	movs	r3, #1
   321e8:	425b      	negs	r3, r3
}
   321ea:	0018      	movs	r0, r3
   321ec:	46bd      	mov	sp, r7
   321ee:	b002      	add	sp, #8
   321f0:	bd80      	pop	{r7, pc}
	...

000321f4 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   321f4:	b580      	push	{r7, lr}
   321f6:	b082      	sub	sp, #8
   321f8:	af00      	add	r7, sp, #0
   321fa:	603a      	str	r2, [r7, #0]
   321fc:	1dfb      	adds	r3, r7, #7
   321fe:	1c02      	adds	r2, r0, #0
   32200:	701a      	strb	r2, [r3, #0]
   32202:	1dbb      	adds	r3, r7, #6
   32204:	1c0a      	adds	r2, r1, #0
   32206:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   32208:	683a      	ldr	r2, [r7, #0]
   3220a:	1dbb      	adds	r3, r7, #6
   3220c:	7819      	ldrb	r1, [r3, #0]
   3220e:	1dfb      	adds	r3, r7, #7
   32210:	781b      	ldrb	r3, [r3, #0]
   32212:	b25b      	sxtb	r3, r3
   32214:	0018      	movs	r0, r3
   32216:	4b03      	ldr	r3, [pc, #12]	; (32224 <mqtt_socket_event_handler+0x30>)
   32218:	4798      	blx	r3
}
   3221a:	46c0      	nop			; (mov r8, r8)
   3221c:	46bd      	mov	sp, r7
   3221e:	b002      	add	sp, #8
   32220:	bd80      	pop	{r7, pc}
   32222:	46c0      	nop			; (mov r8, r8)
   32224:	00031c71 	.word	0x00031c71

00032228 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   32228:	b580      	push	{r7, lr}
   3222a:	b082      	sub	sp, #8
   3222c:	af00      	add	r7, sp, #0
   3222e:	6078      	str	r0, [r7, #4]
   32230:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   32232:	683a      	ldr	r2, [r7, #0]
   32234:	687b      	ldr	r3, [r7, #4]
   32236:	0011      	movs	r1, r2
   32238:	0018      	movs	r0, r3
   3223a:	4b03      	ldr	r3, [pc, #12]	; (32248 <mqtt_socket_resolve_handler+0x20>)
   3223c:	4798      	blx	r3
}
   3223e:	46c0      	nop			; (mov r8, r8)
   32240:	46bd      	mov	sp, r7
   32242:	b002      	add	sp, #8
   32244:	bd80      	pop	{r7, pc}
   32246:	46c0      	nop			; (mov r8, r8)
   32248:	00031c21 	.word	0x00031c21

0003224c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   3224c:	b590      	push	{r4, r7, lr}
   3224e:	b085      	sub	sp, #20
   32250:	af00      	add	r7, sp, #0
   32252:	6078      	str	r0, [r7, #4]
   32254:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   32256:	687b      	ldr	r3, [r7, #4]
   32258:	3320      	adds	r3, #32
   3225a:	0018      	movs	r0, r3
   3225c:	687b      	ldr	r3, [r7, #4]
   3225e:	889b      	ldrh	r3, [r3, #4]
   32260:	001a      	movs	r2, r3
   32262:	687b      	ldr	r3, [r7, #4]
   32264:	799b      	ldrb	r3, [r3, #6]
   32266:	6839      	ldr	r1, [r7, #0]
   32268:	4c09      	ldr	r4, [pc, #36]	; (32290 <mqtt_connect+0x44>)
   3226a:	47a0      	blx	r4
   3226c:	0003      	movs	r3, r0
   3226e:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   32270:	687b      	ldr	r3, [r7, #4]
   32272:	681b      	ldr	r3, [r3, #0]
   32274:	2b00      	cmp	r3, #0
   32276:	d006      	beq.n	32286 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   32278:	687b      	ldr	r3, [r7, #4]
   3227a:	681b      	ldr	r3, [r3, #0]
   3227c:	220c      	movs	r2, #12
   3227e:	18ba      	adds	r2, r7, r2
   32280:	6878      	ldr	r0, [r7, #4]
   32282:	2100      	movs	r1, #0
   32284:	4798      	blx	r3
	return connResult.sock_connected.result;
   32286:	68fb      	ldr	r3, [r7, #12]
}
   32288:	0018      	movs	r0, r3
   3228a:	46bd      	mov	sp, r7
   3228c:	b005      	add	sp, #20
   3228e:	bd90      	pop	{r4, r7, pc}
   32290:	00031f6d 	.word	0x00031f6d

00032294 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   32294:	b580      	push	{r7, lr}
   32296:	b09c      	sub	sp, #112	; 0x70
   32298:	af00      	add	r7, sp, #0
   3229a:	60f8      	str	r0, [r7, #12]
   3229c:	607a      	str	r2, [r7, #4]
   3229e:	603b      	str	r3, [r7, #0]
   322a0:	230b      	movs	r3, #11
   322a2:	18fb      	adds	r3, r7, r3
   322a4:	1c0a      	adds	r2, r1, #0
   322a6:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   322a8:	2310      	movs	r3, #16
   322aa:	18fa      	adds	r2, r7, r3
   322ac:	4b31      	ldr	r3, [pc, #196]	; (32374 <mqtt_connect_broker+0xe0>)
   322ae:	0010      	movs	r0, r2
   322b0:	0019      	movs	r1, r3
   322b2:	2358      	movs	r3, #88	; 0x58
   322b4:	001a      	movs	r2, r3
   322b6:	4b30      	ldr	r3, [pc, #192]	; (32378 <mqtt_connect_broker+0xe4>)
   322b8:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   322ba:	2310      	movs	r3, #16
   322bc:	18fb      	adds	r3, r7, r3
   322be:	2204      	movs	r2, #4
   322c0:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   322c2:	2310      	movs	r3, #16
   322c4:	18fb      	adds	r3, r7, r3
   322c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
   322c8:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   322ca:	2310      	movs	r3, #16
   322cc:	18fb      	adds	r3, r7, r3
   322ce:	687a      	ldr	r2, [r7, #4]
   322d0:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   322d2:	2310      	movs	r3, #16
   322d4:	18fb      	adds	r3, r7, r3
   322d6:	683a      	ldr	r2, [r7, #0]
   322d8:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   322da:	2310      	movs	r3, #16
   322dc:	18fb      	adds	r3, r7, r3
   322de:	220b      	movs	r2, #11
   322e0:	18ba      	adds	r2, r7, r2
   322e2:	7812      	ldrb	r2, [r2, #0]
   322e4:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   322e6:	2310      	movs	r3, #16
   322e8:	18fb      	adds	r3, r7, r3
   322ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   322ec:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   322ee:	2310      	movs	r3, #16
   322f0:	18fb      	adds	r3, r7, r3
   322f2:	2280      	movs	r2, #128	; 0x80
   322f4:	18ba      	adds	r2, r7, r2
   322f6:	6812      	ldr	r2, [r2, #0]
   322f8:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   322fa:	2310      	movs	r3, #16
   322fc:	18fb      	adds	r3, r7, r3
   322fe:	228c      	movs	r2, #140	; 0x8c
   32300:	18ba      	adds	r2, r7, r2
   32302:	213c      	movs	r1, #60	; 0x3c
   32304:	7812      	ldrb	r2, [r2, #0]
   32306:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   32308:	2310      	movs	r3, #16
   3230a:	18fb      	adds	r3, r7, r3
   3230c:	2288      	movs	r2, #136	; 0x88
   3230e:	18ba      	adds	r2, r7, r2
   32310:	213d      	movs	r1, #61	; 0x3d
   32312:	7812      	ldrb	r2, [r2, #0]
   32314:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   32316:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   32318:	2b00      	cmp	r3, #0
   3231a:	d008      	beq.n	3232e <mqtt_connect_broker+0x9a>
   3231c:	2380      	movs	r3, #128	; 0x80
   3231e:	18fb      	adds	r3, r7, r3
   32320:	681b      	ldr	r3, [r3, #0]
   32322:	2b00      	cmp	r3, #0
   32324:	d003      	beq.n	3232e <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   32326:	2310      	movs	r3, #16
   32328:	18fb      	adds	r3, r7, r3
   3232a:	2201      	movs	r2, #1
   3232c:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   3232e:	68fb      	ldr	r3, [r7, #12]
   32330:	69db      	ldr	r3, [r3, #28]
   32332:	2210      	movs	r2, #16
   32334:	18ba      	adds	r2, r7, r2
   32336:	0011      	movs	r1, r2
   32338:	0018      	movs	r0, r3
   3233a:	4b10      	ldr	r3, [pc, #64]	; (3237c <mqtt_connect_broker+0xe8>)
   3233c:	4798      	blx	r3
   3233e:	0003      	movs	r3, r0
   32340:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   32342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   32344:	b2da      	uxtb	r2, r3
   32346:	2368      	movs	r3, #104	; 0x68
   32348:	18fb      	adds	r3, r7, r3
   3234a:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   3234c:	68fb      	ldr	r3, [r7, #12]
   3234e:	681b      	ldr	r3, [r3, #0]
   32350:	2b00      	cmp	r3, #0
   32352:	d006      	beq.n	32362 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   32354:	68fb      	ldr	r3, [r7, #12]
   32356:	681b      	ldr	r3, [r3, #0]
   32358:	2268      	movs	r2, #104	; 0x68
   3235a:	18ba      	adds	r2, r7, r2
   3235c:	68f8      	ldr	r0, [r7, #12]
   3235e:	2101      	movs	r1, #1
   32360:	4798      	blx	r3
	
	module->isConnected = true;
   32362:	68fb      	ldr	r3, [r7, #12]
   32364:	2234      	movs	r2, #52	; 0x34
   32366:	2101      	movs	r1, #1
   32368:	5499      	strb	r1, [r3, r2]
	return rc;
   3236a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   3236c:	0018      	movs	r0, r3
   3236e:	46bd      	mov	sp, r7
   32370:	b01c      	add	sp, #112	; 0x70
   32372:	bd80      	pop	{r7, pc}
   32374:	0003cd18 	.word	0x0003cd18
   32378:	000378cd 	.word	0x000378cd
   3237c:	000316bd 	.word	0x000316bd

00032380 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   32380:	b580      	push	{r7, lr}
   32382:	b084      	sub	sp, #16
   32384:	af00      	add	r7, sp, #0
   32386:	6078      	str	r0, [r7, #4]
   32388:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   3238a:	687b      	ldr	r3, [r7, #4]
   3238c:	69db      	ldr	r3, [r3, #28]
   3238e:	0018      	movs	r0, r3
   32390:	4b0c      	ldr	r3, [pc, #48]	; (323c4 <mqtt_disconnect+0x44>)
   32392:	4798      	blx	r3
   32394:	0003      	movs	r3, r0
   32396:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   32398:	68fb      	ldr	r3, [r7, #12]
   3239a:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   3239c:	687b      	ldr	r3, [r7, #4]
   3239e:	681b      	ldr	r3, [r3, #0]
   323a0:	2b00      	cmp	r3, #0
   323a2:	d006      	beq.n	323b2 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   323a4:	687b      	ldr	r3, [r7, #4]
   323a6:	681b      	ldr	r3, [r3, #0]
   323a8:	2208      	movs	r2, #8
   323aa:	18ba      	adds	r2, r7, r2
   323ac:	6878      	ldr	r0, [r7, #4]
   323ae:	2105      	movs	r1, #5
   323b0:	4798      	blx	r3
	
	module->isConnected = false;
   323b2:	687b      	ldr	r3, [r7, #4]
   323b4:	2234      	movs	r2, #52	; 0x34
   323b6:	2100      	movs	r1, #0
   323b8:	5499      	strb	r1, [r3, r2]
	return rc;
   323ba:	68fb      	ldr	r3, [r7, #12]
}
   323bc:	0018      	movs	r0, r3
   323be:	46bd      	mov	sp, r7
   323c0:	b004      	add	sp, #16
   323c2:	bd80      	pop	{r7, pc}
   323c4:	00031b49 	.word	0x00031b49

000323c8 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   323c8:	b580      	push	{r7, lr}
   323ca:	b08a      	sub	sp, #40	; 0x28
   323cc:	af00      	add	r7, sp, #0
   323ce:	60f8      	str	r0, [r7, #12]
   323d0:	60b9      	str	r1, [r7, #8]
   323d2:	607a      	str	r2, [r7, #4]
   323d4:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   323d6:	2314      	movs	r3, #20
   323d8:	18fb      	adds	r3, r7, r3
   323da:	2230      	movs	r2, #48	; 0x30
   323dc:	18ba      	adds	r2, r7, r2
   323de:	7812      	ldrb	r2, [r2, #0]
   323e0:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   323e2:	2314      	movs	r3, #20
   323e4:	18fb      	adds	r3, r7, r3
   323e6:	687a      	ldr	r2, [r7, #4]
   323e8:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   323ea:	2314      	movs	r3, #20
   323ec:	18fb      	adds	r3, r7, r3
   323ee:	683a      	ldr	r2, [r7, #0]
   323f0:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   323f2:	2314      	movs	r3, #20
   323f4:	18fb      	adds	r3, r7, r3
   323f6:	2234      	movs	r2, #52	; 0x34
   323f8:	18ba      	adds	r2, r7, r2
   323fa:	7812      	ldrb	r2, [r2, #0]
   323fc:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   323fe:	68fb      	ldr	r3, [r7, #12]
   32400:	69db      	ldr	r3, [r3, #28]
   32402:	2214      	movs	r2, #20
   32404:	18ba      	adds	r2, r7, r2
   32406:	68b9      	ldr	r1, [r7, #8]
   32408:	0018      	movs	r0, r3
   3240a:	4b09      	ldr	r3, [pc, #36]	; (32430 <mqtt_publish+0x68>)
   3240c:	4798      	blx	r3
   3240e:	0003      	movs	r3, r0
   32410:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   32412:	68fb      	ldr	r3, [r7, #12]
   32414:	681b      	ldr	r3, [r3, #0]
   32416:	2b00      	cmp	r3, #0
   32418:	d005      	beq.n	32426 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   3241a:	68fb      	ldr	r3, [r7, #12]
   3241c:	681b      	ldr	r3, [r3, #0]
   3241e:	68f8      	ldr	r0, [r7, #12]
   32420:	2200      	movs	r2, #0
   32422:	2102      	movs	r1, #2
   32424:	4798      	blx	r3
	
	return rc;
   32426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32428:	0018      	movs	r0, r3
   3242a:	46bd      	mov	sp, r7
   3242c:	b00a      	add	sp, #40	; 0x28
   3242e:	bd80      	pop	{r7, pc}
   32430:	00031989 	.word	0x00031989

00032434 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   32434:	b590      	push	{r4, r7, lr}
   32436:	b087      	sub	sp, #28
   32438:	af00      	add	r7, sp, #0
   3243a:	60f8      	str	r0, [r7, #12]
   3243c:	60b9      	str	r1, [r7, #8]
   3243e:	603b      	str	r3, [r7, #0]
   32440:	1dfb      	adds	r3, r7, #7
   32442:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   32444:	68fb      	ldr	r3, [r7, #12]
   32446:	69d8      	ldr	r0, [r3, #28]
   32448:	683c      	ldr	r4, [r7, #0]
   3244a:	1dfb      	adds	r3, r7, #7
   3244c:	781a      	ldrb	r2, [r3, #0]
   3244e:	68b9      	ldr	r1, [r7, #8]
   32450:	0023      	movs	r3, r4
   32452:	4c09      	ldr	r4, [pc, #36]	; (32478 <mqtt_subscribe+0x44>)
   32454:	47a0      	blx	r4
   32456:	0003      	movs	r3, r0
   32458:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   3245a:	68fb      	ldr	r3, [r7, #12]
   3245c:	681b      	ldr	r3, [r3, #0]
   3245e:	2b00      	cmp	r3, #0
   32460:	d005      	beq.n	3246e <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   32462:	68fb      	ldr	r3, [r7, #12]
   32464:	681b      	ldr	r3, [r3, #0]
   32466:	68f8      	ldr	r0, [r7, #12]
   32468:	2200      	movs	r2, #0
   3246a:	2103      	movs	r1, #3
   3246c:	4798      	blx	r3
	
	return rc;
   3246e:	697b      	ldr	r3, [r7, #20]
}
   32470:	0018      	movs	r0, r3
   32472:	46bd      	mov	sp, r7
   32474:	b007      	add	sp, #28
   32476:	bd90      	pop	{r4, r7, pc}
   32478:	000317fd 	.word	0x000317fd

0003247c <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   3247c:	b580      	push	{r7, lr}
   3247e:	b082      	sub	sp, #8
   32480:	af00      	add	r7, sp, #0
   32482:	6078      	str	r0, [r7, #4]
   32484:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   32486:	687b      	ldr	r3, [r7, #4]
   32488:	69db      	ldr	r3, [r3, #28]
   3248a:	683a      	ldr	r2, [r7, #0]
   3248c:	0011      	movs	r1, r2
   3248e:	0018      	movs	r0, r3
   32490:	4b03      	ldr	r3, [pc, #12]	; (324a0 <mqtt_yield+0x24>)
   32492:	4798      	blx	r3
   32494:	0003      	movs	r3, r0
   32496:	0018      	movs	r0, r3
   32498:	46bd      	mov	sp, r7
   3249a:	b002      	add	sp, #8
   3249c:	bd80      	pop	{r7, pc}
   3249e:	46c0      	nop			; (mov r8, r8)
   324a0:	00031605 	.word	0x00031605

000324a4 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   324a4:	b590      	push	{r4, r7, lr}
   324a6:	b085      	sub	sp, #20
   324a8:	af00      	add	r7, sp, #0
   324aa:	6078      	str	r0, [r7, #4]
	int len = 0;
   324ac:	2300      	movs	r3, #0
   324ae:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   324b0:	687b      	ldr	r3, [r7, #4]
   324b2:	7a1b      	ldrb	r3, [r3, #8]
   324b4:	2b03      	cmp	r3, #3
   324b6:	d102      	bne.n	324be <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   324b8:	230c      	movs	r3, #12
   324ba:	60fb      	str	r3, [r7, #12]
   324bc:	e005      	b.n	324ca <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   324be:	687b      	ldr	r3, [r7, #4]
   324c0:	7a1b      	ldrb	r3, [r3, #8]
   324c2:	2b04      	cmp	r3, #4
   324c4:	d101      	bne.n	324ca <MQTTSerialize_connectLength+0x26>
		len = 10;
   324c6:	230a      	movs	r3, #10
   324c8:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   324ca:	687b      	ldr	r3, [r7, #4]
   324cc:	68d8      	ldr	r0, [r3, #12]
   324ce:	6919      	ldr	r1, [r3, #16]
   324d0:	695a      	ldr	r2, [r3, #20]
   324d2:	4b25      	ldr	r3, [pc, #148]	; (32568 <MQTTSerialize_connectLength+0xc4>)
   324d4:	4798      	blx	r3
   324d6:	0003      	movs	r3, r0
   324d8:	3302      	adds	r3, #2
   324da:	68fa      	ldr	r2, [r7, #12]
   324dc:	18d3      	adds	r3, r2, r3
   324de:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   324e0:	687b      	ldr	r3, [r7, #4]
   324e2:	7edb      	ldrb	r3, [r3, #27]
   324e4:	2b00      	cmp	r3, #0
   324e6:	d013      	beq.n	32510 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   324e8:	687b      	ldr	r3, [r7, #4]
   324ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
   324ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
   324ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   324f0:	4b1d      	ldr	r3, [pc, #116]	; (32568 <MQTTSerialize_connectLength+0xc4>)
   324f2:	4798      	blx	r3
   324f4:	0003      	movs	r3, r0
   324f6:	1c9c      	adds	r4, r3, #2
   324f8:	687b      	ldr	r3, [r7, #4]
   324fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
   324fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   324fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   32500:	4b19      	ldr	r3, [pc, #100]	; (32568 <MQTTSerialize_connectLength+0xc4>)
   32502:	4798      	blx	r3
   32504:	0003      	movs	r3, r0
   32506:	18e3      	adds	r3, r4, r3
   32508:	3302      	adds	r3, #2
   3250a:	68fa      	ldr	r2, [r7, #12]
   3250c:	18d3      	adds	r3, r2, r3
   3250e:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   32510:	687b      	ldr	r3, [r7, #4]
   32512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   32514:	2b00      	cmp	r3, #0
   32516:	d103      	bne.n	32520 <MQTTSerialize_connectLength+0x7c>
   32518:	687b      	ldr	r3, [r7, #4]
   3251a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   3251c:	2b00      	cmp	r3, #0
   3251e:	d00a      	beq.n	32536 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   32520:	687b      	ldr	r3, [r7, #4]
   32522:	6c18      	ldr	r0, [r3, #64]	; 0x40
   32524:	6c59      	ldr	r1, [r3, #68]	; 0x44
   32526:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   32528:	4b0f      	ldr	r3, [pc, #60]	; (32568 <MQTTSerialize_connectLength+0xc4>)
   3252a:	4798      	blx	r3
   3252c:	0003      	movs	r3, r0
   3252e:	3302      	adds	r3, #2
   32530:	68fa      	ldr	r2, [r7, #12]
   32532:	18d3      	adds	r3, r2, r3
   32534:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   32536:	687b      	ldr	r3, [r7, #4]
   32538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3253a:	2b00      	cmp	r3, #0
   3253c:	d103      	bne.n	32546 <MQTTSerialize_connectLength+0xa2>
   3253e:	687b      	ldr	r3, [r7, #4]
   32540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   32542:	2b00      	cmp	r3, #0
   32544:	d00a      	beq.n	3255c <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   32546:	687b      	ldr	r3, [r7, #4]
   32548:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   3254a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   3254c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3254e:	4b06      	ldr	r3, [pc, #24]	; (32568 <MQTTSerialize_connectLength+0xc4>)
   32550:	4798      	blx	r3
   32552:	0003      	movs	r3, r0
   32554:	3302      	adds	r3, #2
   32556:	68fa      	ldr	r2, [r7, #12]
   32558:	18d3      	adds	r3, r2, r3
   3255a:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   3255c:	68fb      	ldr	r3, [r7, #12]
}
   3255e:	0018      	movs	r0, r3
   32560:	46bd      	mov	sp, r7
   32562:	b005      	add	sp, #20
   32564:	bd90      	pop	{r4, r7, pc}
   32566:	46c0      	nop			; (mov r8, r8)
   32568:	00032f15 	.word	0x00032f15

0003256c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   3256c:	b590      	push	{r4, r7, lr}
   3256e:	b08b      	sub	sp, #44	; 0x2c
   32570:	af00      	add	r7, sp, #0
   32572:	60f8      	str	r0, [r7, #12]
   32574:	60b9      	str	r1, [r7, #8]
   32576:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   32578:	68fb      	ldr	r3, [r7, #12]
   3257a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   3257c:	2300      	movs	r3, #0
   3257e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   32580:	2300      	movs	r3, #0
   32582:	617b      	str	r3, [r7, #20]
	int len = 0;
   32584:	2300      	movs	r3, #0
   32586:	623b      	str	r3, [r7, #32]
	int rc = -1;
   32588:	2301      	movs	r3, #1
   3258a:	425b      	negs	r3, r3
   3258c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   3258e:	687b      	ldr	r3, [r7, #4]
   32590:	0018      	movs	r0, r3
   32592:	4b8c      	ldr	r3, [pc, #560]	; (327c4 <MQTTSerialize_connect+0x258>)
   32594:	4798      	blx	r3
   32596:	0003      	movs	r3, r0
   32598:	623b      	str	r3, [r7, #32]
   3259a:	6a3b      	ldr	r3, [r7, #32]
   3259c:	0018      	movs	r0, r3
   3259e:	4b8a      	ldr	r3, [pc, #552]	; (327c8 <MQTTSerialize_connect+0x25c>)
   325a0:	4798      	blx	r3
   325a2:	0002      	movs	r2, r0
   325a4:	68bb      	ldr	r3, [r7, #8]
   325a6:	429a      	cmp	r2, r3
   325a8:	dd03      	ble.n	325b2 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   325aa:	2302      	movs	r3, #2
   325ac:	425b      	negs	r3, r3
   325ae:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   325b0:	e103      	b.n	327ba <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   325b2:	2318      	movs	r3, #24
   325b4:	18fb      	adds	r3, r7, r3
   325b6:	2200      	movs	r2, #0
   325b8:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   325ba:	2318      	movs	r3, #24
   325bc:	18fb      	adds	r3, r7, r3
   325be:	781a      	ldrb	r2, [r3, #0]
   325c0:	210f      	movs	r1, #15
   325c2:	400a      	ands	r2, r1
   325c4:	1c11      	adds	r1, r2, #0
   325c6:	2210      	movs	r2, #16
   325c8:	430a      	orrs	r2, r1
   325ca:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   325cc:	2318      	movs	r3, #24
   325ce:	18fb      	adds	r3, r7, r3
   325d0:	781a      	ldrb	r2, [r3, #0]
   325d2:	231c      	movs	r3, #28
   325d4:	18fb      	adds	r3, r7, r3
   325d6:	0011      	movs	r1, r2
   325d8:	0018      	movs	r0, r3
   325da:	4b7c      	ldr	r3, [pc, #496]	; (327cc <MQTTSerialize_connect+0x260>)
   325dc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   325de:	69fb      	ldr	r3, [r7, #28]
   325e0:	6a3a      	ldr	r2, [r7, #32]
   325e2:	0011      	movs	r1, r2
   325e4:	0018      	movs	r0, r3
   325e6:	4b7a      	ldr	r3, [pc, #488]	; (327d0 <MQTTSerialize_connect+0x264>)
   325e8:	4798      	blx	r3
   325ea:	0002      	movs	r2, r0
   325ec:	69fb      	ldr	r3, [r7, #28]
   325ee:	189b      	adds	r3, r3, r2
   325f0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   325f2:	687b      	ldr	r3, [r7, #4]
   325f4:	7a1b      	ldrb	r3, [r3, #8]
   325f6:	2b04      	cmp	r3, #4
   325f8:	d10d      	bne.n	32616 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   325fa:	4a76      	ldr	r2, [pc, #472]	; (327d4 <MQTTSerialize_connect+0x268>)
   325fc:	231c      	movs	r3, #28
   325fe:	18fb      	adds	r3, r7, r3
   32600:	0011      	movs	r1, r2
   32602:	0018      	movs	r0, r3
   32604:	4b74      	ldr	r3, [pc, #464]	; (327d8 <MQTTSerialize_connect+0x26c>)
   32606:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   32608:	231c      	movs	r3, #28
   3260a:	18fb      	adds	r3, r7, r3
   3260c:	2104      	movs	r1, #4
   3260e:	0018      	movs	r0, r3
   32610:	4b6e      	ldr	r3, [pc, #440]	; (327cc <MQTTSerialize_connect+0x260>)
   32612:	4798      	blx	r3
   32614:	e00c      	b.n	32630 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   32616:	4a71      	ldr	r2, [pc, #452]	; (327dc <MQTTSerialize_connect+0x270>)
   32618:	231c      	movs	r3, #28
   3261a:	18fb      	adds	r3, r7, r3
   3261c:	0011      	movs	r1, r2
   3261e:	0018      	movs	r0, r3
   32620:	4b6d      	ldr	r3, [pc, #436]	; (327d8 <MQTTSerialize_connect+0x26c>)
   32622:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   32624:	231c      	movs	r3, #28
   32626:	18fb      	adds	r3, r7, r3
   32628:	2103      	movs	r1, #3
   3262a:	0018      	movs	r0, r3
   3262c:	4b67      	ldr	r3, [pc, #412]	; (327cc <MQTTSerialize_connect+0x260>)
   3262e:	4798      	blx	r3
	}

	flags.all = 0;
   32630:	2314      	movs	r3, #20
   32632:	18fb      	adds	r3, r7, r3
   32634:	2200      	movs	r2, #0
   32636:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   32638:	687b      	ldr	r3, [r7, #4]
   3263a:	7e9b      	ldrb	r3, [r3, #26]
   3263c:	1c1a      	adds	r2, r3, #0
   3263e:	2301      	movs	r3, #1
   32640:	4013      	ands	r3, r2
   32642:	b2da      	uxtb	r2, r3
   32644:	2314      	movs	r3, #20
   32646:	18fb      	adds	r3, r7, r3
   32648:	2101      	movs	r1, #1
   3264a:	400a      	ands	r2, r1
   3264c:	1890      	adds	r0, r2, r2
   3264e:	781a      	ldrb	r2, [r3, #0]
   32650:	2102      	movs	r1, #2
   32652:	438a      	bics	r2, r1
   32654:	1c11      	adds	r1, r2, #0
   32656:	1c02      	adds	r2, r0, #0
   32658:	430a      	orrs	r2, r1
   3265a:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   3265c:	687b      	ldr	r3, [r7, #4]
   3265e:	7edb      	ldrb	r3, [r3, #27]
   32660:	1e5a      	subs	r2, r3, #1
   32662:	4193      	sbcs	r3, r2
   32664:	b2da      	uxtb	r2, r3
   32666:	2314      	movs	r3, #20
   32668:	18fb      	adds	r3, r7, r3
   3266a:	2101      	movs	r1, #1
   3266c:	400a      	ands	r2, r1
   3266e:	0090      	lsls	r0, r2, #2
   32670:	781a      	ldrb	r2, [r3, #0]
   32672:	2104      	movs	r1, #4
   32674:	438a      	bics	r2, r1
   32676:	1c11      	adds	r1, r2, #0
   32678:	1c02      	adds	r2, r0, #0
   3267a:	430a      	orrs	r2, r1
   3267c:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   3267e:	2314      	movs	r3, #20
   32680:	18fb      	adds	r3, r7, r3
   32682:	781b      	ldrb	r3, [r3, #0]
   32684:	2204      	movs	r2, #4
   32686:	4013      	ands	r3, r2
   32688:	b2db      	uxtb	r3, r3
   3268a:	2b00      	cmp	r3, #0
   3268c:	d025      	beq.n	326da <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   3268e:	687b      	ldr	r3, [r7, #4]
   32690:	223d      	movs	r2, #61	; 0x3d
   32692:	5c9b      	ldrb	r3, [r3, r2]
   32694:	1c1a      	adds	r2, r3, #0
   32696:	2303      	movs	r3, #3
   32698:	4013      	ands	r3, r2
   3269a:	b2da      	uxtb	r2, r3
   3269c:	2314      	movs	r3, #20
   3269e:	18fb      	adds	r3, r7, r3
   326a0:	2103      	movs	r1, #3
   326a2:	400a      	ands	r2, r1
   326a4:	00d0      	lsls	r0, r2, #3
   326a6:	781a      	ldrb	r2, [r3, #0]
   326a8:	2118      	movs	r1, #24
   326aa:	438a      	bics	r2, r1
   326ac:	1c11      	adds	r1, r2, #0
   326ae:	1c02      	adds	r2, r0, #0
   326b0:	430a      	orrs	r2, r1
   326b2:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   326b4:	687b      	ldr	r3, [r7, #4]
   326b6:	223c      	movs	r2, #60	; 0x3c
   326b8:	5c9b      	ldrb	r3, [r3, r2]
   326ba:	1c1a      	adds	r2, r3, #0
   326bc:	2301      	movs	r3, #1
   326be:	4013      	ands	r3, r2
   326c0:	b2da      	uxtb	r2, r3
   326c2:	2314      	movs	r3, #20
   326c4:	18fb      	adds	r3, r7, r3
   326c6:	2101      	movs	r1, #1
   326c8:	400a      	ands	r2, r1
   326ca:	0150      	lsls	r0, r2, #5
   326cc:	781a      	ldrb	r2, [r3, #0]
   326ce:	2120      	movs	r1, #32
   326d0:	438a      	bics	r2, r1
   326d2:	1c11      	adds	r1, r2, #0
   326d4:	1c02      	adds	r2, r0, #0
   326d6:	430a      	orrs	r2, r1
   326d8:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   326da:	687b      	ldr	r3, [r7, #4]
   326dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   326de:	2b00      	cmp	r3, #0
   326e0:	d103      	bne.n	326ea <MQTTSerialize_connect+0x17e>
   326e2:	687b      	ldr	r3, [r7, #4]
   326e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   326e6:	2b00      	cmp	r3, #0
   326e8:	d006      	beq.n	326f8 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   326ea:	2314      	movs	r3, #20
   326ec:	18fb      	adds	r3, r7, r3
   326ee:	781a      	ldrb	r2, [r3, #0]
   326f0:	2180      	movs	r1, #128	; 0x80
   326f2:	4249      	negs	r1, r1
   326f4:	430a      	orrs	r2, r1
   326f6:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   326f8:	687b      	ldr	r3, [r7, #4]
   326fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   326fc:	2b00      	cmp	r3, #0
   326fe:	d103      	bne.n	32708 <MQTTSerialize_connect+0x19c>
   32700:	687b      	ldr	r3, [r7, #4]
   32702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   32704:	2b00      	cmp	r3, #0
   32706:	d005      	beq.n	32714 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   32708:	2314      	movs	r3, #20
   3270a:	18fb      	adds	r3, r7, r3
   3270c:	781a      	ldrb	r2, [r3, #0]
   3270e:	2140      	movs	r1, #64	; 0x40
   32710:	430a      	orrs	r2, r1
   32712:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   32714:	2314      	movs	r3, #20
   32716:	18fb      	adds	r3, r7, r3
   32718:	781a      	ldrb	r2, [r3, #0]
   3271a:	231c      	movs	r3, #28
   3271c:	18fb      	adds	r3, r7, r3
   3271e:	0011      	movs	r1, r2
   32720:	0018      	movs	r0, r3
   32722:	4b2a      	ldr	r3, [pc, #168]	; (327cc <MQTTSerialize_connect+0x260>)
   32724:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   32726:	687b      	ldr	r3, [r7, #4]
   32728:	8b1b      	ldrh	r3, [r3, #24]
   3272a:	001a      	movs	r2, r3
   3272c:	231c      	movs	r3, #28
   3272e:	18fb      	adds	r3, r7, r3
   32730:	0011      	movs	r1, r2
   32732:	0018      	movs	r0, r3
   32734:	4b2a      	ldr	r3, [pc, #168]	; (327e0 <MQTTSerialize_connect+0x274>)
   32736:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   32738:	687b      	ldr	r3, [r7, #4]
   3273a:	221c      	movs	r2, #28
   3273c:	18b8      	adds	r0, r7, r2
   3273e:	68d9      	ldr	r1, [r3, #12]
   32740:	691a      	ldr	r2, [r3, #16]
   32742:	695b      	ldr	r3, [r3, #20]
   32744:	4c27      	ldr	r4, [pc, #156]	; (327e4 <MQTTSerialize_connect+0x278>)
   32746:	47a0      	blx	r4
	if (options->willFlag)
   32748:	687b      	ldr	r3, [r7, #4]
   3274a:	7edb      	ldrb	r3, [r3, #27]
   3274c:	2b00      	cmp	r3, #0
   3274e:	d00f      	beq.n	32770 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   32750:	687b      	ldr	r3, [r7, #4]
   32752:	221c      	movs	r2, #28
   32754:	18b8      	adds	r0, r7, r2
   32756:	6a59      	ldr	r1, [r3, #36]	; 0x24
   32758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   3275c:	4c21      	ldr	r4, [pc, #132]	; (327e4 <MQTTSerialize_connect+0x278>)
   3275e:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   32760:	687b      	ldr	r3, [r7, #4]
   32762:	221c      	movs	r2, #28
   32764:	18b8      	adds	r0, r7, r2
   32766:	6b19      	ldr	r1, [r3, #48]	; 0x30
   32768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   3276c:	4c1d      	ldr	r4, [pc, #116]	; (327e4 <MQTTSerialize_connect+0x278>)
   3276e:	47a0      	blx	r4
	}
	if (flags.bits.username)
   32770:	2314      	movs	r3, #20
   32772:	18fb      	adds	r3, r7, r3
   32774:	781b      	ldrb	r3, [r3, #0]
   32776:	227f      	movs	r2, #127	; 0x7f
   32778:	4393      	bics	r3, r2
   3277a:	b2db      	uxtb	r3, r3
   3277c:	2b00      	cmp	r3, #0
   3277e:	d007      	beq.n	32790 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   32780:	687b      	ldr	r3, [r7, #4]
   32782:	221c      	movs	r2, #28
   32784:	18b8      	adds	r0, r7, r2
   32786:	6c19      	ldr	r1, [r3, #64]	; 0x40
   32788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3278a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   3278c:	4c15      	ldr	r4, [pc, #84]	; (327e4 <MQTTSerialize_connect+0x278>)
   3278e:	47a0      	blx	r4
	if (flags.bits.password)
   32790:	2314      	movs	r3, #20
   32792:	18fb      	adds	r3, r7, r3
   32794:	781b      	ldrb	r3, [r3, #0]
   32796:	2240      	movs	r2, #64	; 0x40
   32798:	4013      	ands	r3, r2
   3279a:	b2db      	uxtb	r3, r3
   3279c:	2b00      	cmp	r3, #0
   3279e:	d007      	beq.n	327b0 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   327a0:	687b      	ldr	r3, [r7, #4]
   327a2:	221c      	movs	r2, #28
   327a4:	18b8      	adds	r0, r7, r2
   327a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   327a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   327aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   327ac:	4c0d      	ldr	r4, [pc, #52]	; (327e4 <MQTTSerialize_connect+0x278>)
   327ae:	47a0      	blx	r4

	rc = ptr - buf;
   327b0:	69fb      	ldr	r3, [r7, #28]
   327b2:	001a      	movs	r2, r3
   327b4:	68fb      	ldr	r3, [r7, #12]
   327b6:	1ad3      	subs	r3, r2, r3
   327b8:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   327ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   327bc:	0018      	movs	r0, r3
   327be:	46bd      	mov	sp, r7
   327c0:	b00b      	add	sp, #44	; 0x2c
   327c2:	bd90      	pop	{r4, r7, pc}
   327c4:	000324a5 	.word	0x000324a5
   327c8:	00032c39 	.word	0x00032c39
   327cc:	00032d5b 	.word	0x00032d5b
   327d0:	00032b41 	.word	0x00032b41
   327d4:	0003cd70 	.word	0x0003cd70
   327d8:	00032ddd 	.word	0x00032ddd
   327dc:	0003cd78 	.word	0x0003cd78
   327e0:	00032d85 	.word	0x00032d85
   327e4:	00032e2d 	.word	0x00032e2d

000327e8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   327e8:	b580      	push	{r7, lr}
   327ea:	b08a      	sub	sp, #40	; 0x28
   327ec:	af00      	add	r7, sp, #0
   327ee:	60f8      	str	r0, [r7, #12]
   327f0:	60b9      	str	r1, [r7, #8]
   327f2:	607a      	str	r2, [r7, #4]
   327f4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   327f6:	2300      	movs	r3, #0
   327f8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   327fa:	687b      	ldr	r3, [r7, #4]
   327fc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   327fe:	2300      	movs	r3, #0
   32800:	623b      	str	r3, [r7, #32]
	int rc = 0;
   32802:	2300      	movs	r3, #0
   32804:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   32806:	2300      	movs	r3, #0
   32808:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3280a:	2318      	movs	r3, #24
   3280c:	18fb      	adds	r3, r7, r3
   3280e:	0018      	movs	r0, r3
   32810:	4b25      	ldr	r3, [pc, #148]	; (328a8 <MQTTDeserialize_connack+0xc0>)
   32812:	4798      	blx	r3
   32814:	0003      	movs	r3, r0
   32816:	001a      	movs	r2, r3
   32818:	231c      	movs	r3, #28
   3281a:	18fb      	adds	r3, r7, r3
   3281c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   3281e:	231c      	movs	r3, #28
   32820:	18fb      	adds	r3, r7, r3
   32822:	781b      	ldrb	r3, [r3, #0]
   32824:	220f      	movs	r2, #15
   32826:	4393      	bics	r3, r2
   32828:	b2db      	uxtb	r3, r3
   3282a:	2b20      	cmp	r3, #32
   3282c:	d134      	bne.n	32898 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   3282e:	69bb      	ldr	r3, [r7, #24]
   32830:	2214      	movs	r2, #20
   32832:	18ba      	adds	r2, r7, r2
   32834:	0011      	movs	r1, r2
   32836:	0018      	movs	r0, r3
   32838:	4b1c      	ldr	r3, [pc, #112]	; (328ac <MQTTDeserialize_connack+0xc4>)
   3283a:	4798      	blx	r3
   3283c:	0003      	movs	r3, r0
   3283e:	627b      	str	r3, [r7, #36]	; 0x24
   32840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32842:	69bb      	ldr	r3, [r7, #24]
   32844:	189b      	adds	r3, r3, r2
   32846:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   32848:	69bb      	ldr	r3, [r7, #24]
   3284a:	697a      	ldr	r2, [r7, #20]
   3284c:	189b      	adds	r3, r3, r2
   3284e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   32850:	6a3b      	ldr	r3, [r7, #32]
   32852:	69ba      	ldr	r2, [r7, #24]
   32854:	1a9b      	subs	r3, r3, r2
   32856:	2b01      	cmp	r3, #1
   32858:	dd20      	ble.n	3289c <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   3285a:	2318      	movs	r3, #24
   3285c:	18fb      	adds	r3, r7, r3
   3285e:	0018      	movs	r0, r3
   32860:	4b11      	ldr	r3, [pc, #68]	; (328a8 <MQTTDeserialize_connack+0xc0>)
   32862:	4798      	blx	r3
   32864:	0003      	movs	r3, r0
   32866:	001a      	movs	r2, r3
   32868:	2310      	movs	r3, #16
   3286a:	18fb      	adds	r3, r7, r3
   3286c:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   3286e:	2310      	movs	r3, #16
   32870:	18fb      	adds	r3, r7, r3
   32872:	781b      	ldrb	r3, [r3, #0]
   32874:	061b      	lsls	r3, r3, #24
   32876:	0fdb      	lsrs	r3, r3, #31
   32878:	b2db      	uxtb	r3, r3
   3287a:	001a      	movs	r2, r3
   3287c:	68fb      	ldr	r3, [r7, #12]
   3287e:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   32880:	2318      	movs	r3, #24
   32882:	18fb      	adds	r3, r7, r3
   32884:	0018      	movs	r0, r3
   32886:	4b08      	ldr	r3, [pc, #32]	; (328a8 <MQTTDeserialize_connack+0xc0>)
   32888:	4798      	blx	r3
   3288a:	0003      	movs	r3, r0
   3288c:	001a      	movs	r2, r3
   3288e:	68bb      	ldr	r3, [r7, #8]
   32890:	701a      	strb	r2, [r3, #0]

	rc = 1;
   32892:	2301      	movs	r3, #1
   32894:	627b      	str	r3, [r7, #36]	; 0x24
   32896:	e002      	b.n	3289e <MQTTDeserialize_connack+0xb6>
		goto exit;
   32898:	46c0      	nop			; (mov r8, r8)
   3289a:	e000      	b.n	3289e <MQTTDeserialize_connack+0xb6>
		goto exit;
   3289c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   328a0:	0018      	movs	r0, r3
   328a2:	46bd      	mov	sp, r7
   328a4:	b00a      	add	sp, #40	; 0x28
   328a6:	bd80      	pop	{r7, pc}
   328a8:	00032d2f 	.word	0x00032d2f
   328ac:	00032cc9 	.word	0x00032cc9

000328b0 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   328b0:	b580      	push	{r7, lr}
   328b2:	b088      	sub	sp, #32
   328b4:	af00      	add	r7, sp, #0
   328b6:	60f8      	str	r0, [r7, #12]
   328b8:	60b9      	str	r1, [r7, #8]
   328ba:	1dfb      	adds	r3, r7, #7
   328bc:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   328be:	2300      	movs	r3, #0
   328c0:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   328c2:	2301      	movs	r3, #1
   328c4:	425b      	negs	r3, r3
   328c6:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   328c8:	68fb      	ldr	r3, [r7, #12]
   328ca:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   328cc:	68bb      	ldr	r3, [r7, #8]
   328ce:	2b01      	cmp	r3, #1
   328d0:	dc03      	bgt.n	328da <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   328d2:	2302      	movs	r3, #2
   328d4:	425b      	negs	r3, r3
   328d6:	61fb      	str	r3, [r7, #28]
		goto exit;
   328d8:	e029      	b.n	3292e <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   328da:	2318      	movs	r3, #24
   328dc:	18fb      	adds	r3, r7, r3
   328de:	2200      	movs	r2, #0
   328e0:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   328e2:	1dfb      	adds	r3, r7, #7
   328e4:	781b      	ldrb	r3, [r3, #0]
   328e6:	220f      	movs	r2, #15
   328e8:	4013      	ands	r3, r2
   328ea:	b2da      	uxtb	r2, r3
   328ec:	2318      	movs	r3, #24
   328ee:	18fb      	adds	r3, r7, r3
   328f0:	0110      	lsls	r0, r2, #4
   328f2:	781a      	ldrb	r2, [r3, #0]
   328f4:	210f      	movs	r1, #15
   328f6:	400a      	ands	r2, r1
   328f8:	1c11      	adds	r1, r2, #0
   328fa:	1c02      	adds	r2, r0, #0
   328fc:	430a      	orrs	r2, r1
   328fe:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   32900:	2318      	movs	r3, #24
   32902:	18fb      	adds	r3, r7, r3
   32904:	781a      	ldrb	r2, [r3, #0]
   32906:	2314      	movs	r3, #20
   32908:	18fb      	adds	r3, r7, r3
   3290a:	0011      	movs	r1, r2
   3290c:	0018      	movs	r0, r3
   3290e:	4b0a      	ldr	r3, [pc, #40]	; (32938 <MQTTSerialize_zero+0x88>)
   32910:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   32912:	697b      	ldr	r3, [r7, #20]
   32914:	2100      	movs	r1, #0
   32916:	0018      	movs	r0, r3
   32918:	4b08      	ldr	r3, [pc, #32]	; (3293c <MQTTSerialize_zero+0x8c>)
   3291a:	4798      	blx	r3
   3291c:	0002      	movs	r2, r0
   3291e:	697b      	ldr	r3, [r7, #20]
   32920:	189b      	adds	r3, r3, r2
   32922:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   32924:	697b      	ldr	r3, [r7, #20]
   32926:	001a      	movs	r2, r3
   32928:	68fb      	ldr	r3, [r7, #12]
   3292a:	1ad3      	subs	r3, r2, r3
   3292c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3292e:	69fb      	ldr	r3, [r7, #28]
}
   32930:	0018      	movs	r0, r3
   32932:	46bd      	mov	sp, r7
   32934:	b008      	add	sp, #32
   32936:	bd80      	pop	{r7, pc}
   32938:	00032d5b 	.word	0x00032d5b
   3293c:	00032b41 	.word	0x00032b41

00032940 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   32940:	b580      	push	{r7, lr}
   32942:	b082      	sub	sp, #8
   32944:	af00      	add	r7, sp, #0
   32946:	6078      	str	r0, [r7, #4]
   32948:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   3294a:	6839      	ldr	r1, [r7, #0]
   3294c:	687b      	ldr	r3, [r7, #4]
   3294e:	220e      	movs	r2, #14
   32950:	0018      	movs	r0, r3
   32952:	4b03      	ldr	r3, [pc, #12]	; (32960 <MQTTSerialize_disconnect+0x20>)
   32954:	4798      	blx	r3
   32956:	0003      	movs	r3, r0
}
   32958:	0018      	movs	r0, r3
   3295a:	46bd      	mov	sp, r7
   3295c:	b002      	add	sp, #8
   3295e:	bd80      	pop	{r7, pc}
   32960:	000328b1 	.word	0x000328b1

00032964 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   32964:	b580      	push	{r7, lr}
   32966:	b082      	sub	sp, #8
   32968:	af00      	add	r7, sp, #0
   3296a:	6078      	str	r0, [r7, #4]
   3296c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   3296e:	6839      	ldr	r1, [r7, #0]
   32970:	687b      	ldr	r3, [r7, #4]
   32972:	220c      	movs	r2, #12
   32974:	0018      	movs	r0, r3
   32976:	4b03      	ldr	r3, [pc, #12]	; (32984 <MQTTSerialize_pingreq+0x20>)
   32978:	4798      	blx	r3
   3297a:	0003      	movs	r3, r0
}
   3297c:	0018      	movs	r0, r3
   3297e:	46bd      	mov	sp, r7
   32980:	b002      	add	sp, #8
   32982:	bd80      	pop	{r7, pc}
   32984:	000328b1 	.word	0x000328b1

00032988 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   32988:	b580      	push	{r7, lr}
   3298a:	b08a      	sub	sp, #40	; 0x28
   3298c:	af00      	add	r7, sp, #0
   3298e:	60f8      	str	r0, [r7, #12]
   32990:	60b9      	str	r1, [r7, #8]
   32992:	607a      	str	r2, [r7, #4]
   32994:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   32996:	2300      	movs	r3, #0
   32998:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3299a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   3299c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   3299e:	2300      	movs	r3, #0
   329a0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   329a2:	2300      	movs	r3, #0
   329a4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   329a6:	2300      	movs	r3, #0
   329a8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   329aa:	2318      	movs	r3, #24
   329ac:	18fb      	adds	r3, r7, r3
   329ae:	0018      	movs	r0, r3
   329b0:	4b32      	ldr	r3, [pc, #200]	; (32a7c <MQTTDeserialize_publish+0xf4>)
   329b2:	4798      	blx	r3
   329b4:	0003      	movs	r3, r0
   329b6:	001a      	movs	r2, r3
   329b8:	231c      	movs	r3, #28
   329ba:	18fb      	adds	r3, r7, r3
   329bc:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   329be:	231c      	movs	r3, #28
   329c0:	18fb      	adds	r3, r7, r3
   329c2:	781b      	ldrb	r3, [r3, #0]
   329c4:	220f      	movs	r2, #15
   329c6:	4393      	bics	r3, r2
   329c8:	b2db      	uxtb	r3, r3
   329ca:	2b30      	cmp	r3, #48	; 0x30
   329cc:	d150      	bne.n	32a70 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   329ce:	231c      	movs	r3, #28
   329d0:	18fb      	adds	r3, r7, r3
   329d2:	781b      	ldrb	r3, [r3, #0]
   329d4:	071b      	lsls	r3, r3, #28
   329d6:	0fdb      	lsrs	r3, r3, #31
   329d8:	b2db      	uxtb	r3, r3
   329da:	001a      	movs	r2, r3
   329dc:	68fb      	ldr	r3, [r7, #12]
   329de:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   329e0:	231c      	movs	r3, #28
   329e2:	18fb      	adds	r3, r7, r3
   329e4:	781b      	ldrb	r3, [r3, #0]
   329e6:	075b      	lsls	r3, r3, #29
   329e8:	0f9b      	lsrs	r3, r3, #30
   329ea:	b2db      	uxtb	r3, r3
   329ec:	001a      	movs	r2, r3
   329ee:	68bb      	ldr	r3, [r7, #8]
   329f0:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   329f2:	231c      	movs	r3, #28
   329f4:	18fb      	adds	r3, r7, r3
   329f6:	781b      	ldrb	r3, [r3, #0]
   329f8:	07db      	lsls	r3, r3, #31
   329fa:	0fdb      	lsrs	r3, r3, #31
   329fc:	b2db      	uxtb	r3, r3
   329fe:	001a      	movs	r2, r3
   32a00:	687b      	ldr	r3, [r7, #4]
   32a02:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   32a04:	69bb      	ldr	r3, [r7, #24]
   32a06:	2214      	movs	r2, #20
   32a08:	18ba      	adds	r2, r7, r2
   32a0a:	0011      	movs	r1, r2
   32a0c:	0018      	movs	r0, r3
   32a0e:	4b1c      	ldr	r3, [pc, #112]	; (32a80 <MQTTDeserialize_publish+0xf8>)
   32a10:	4798      	blx	r3
   32a12:	0003      	movs	r3, r0
   32a14:	627b      	str	r3, [r7, #36]	; 0x24
   32a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32a18:	69bb      	ldr	r3, [r7, #24]
   32a1a:	189b      	adds	r3, r3, r2
   32a1c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   32a1e:	69bb      	ldr	r3, [r7, #24]
   32a20:	697a      	ldr	r2, [r7, #20]
   32a22:	189b      	adds	r3, r3, r2
   32a24:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   32a26:	6a3a      	ldr	r2, [r7, #32]
   32a28:	2318      	movs	r3, #24
   32a2a:	18f9      	adds	r1, r7, r3
   32a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32a2e:	0018      	movs	r0, r3
   32a30:	4b14      	ldr	r3, [pc, #80]	; (32a84 <MQTTDeserialize_publish+0xfc>)
   32a32:	4798      	blx	r3
   32a34:	1e03      	subs	r3, r0, #0
   32a36:	d01c      	beq.n	32a72 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   32a38:	6a3b      	ldr	r3, [r7, #32]
   32a3a:	69ba      	ldr	r2, [r7, #24]
   32a3c:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   32a3e:	d418      	bmi.n	32a72 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   32a40:	68bb      	ldr	r3, [r7, #8]
   32a42:	681b      	ldr	r3, [r3, #0]
   32a44:	2b00      	cmp	r3, #0
   32a46:	dd08      	ble.n	32a5a <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   32a48:	2318      	movs	r3, #24
   32a4a:	18fb      	adds	r3, r7, r3
   32a4c:	0018      	movs	r0, r3
   32a4e:	4b0e      	ldr	r3, [pc, #56]	; (32a88 <MQTTDeserialize_publish+0x100>)
   32a50:	4798      	blx	r3
   32a52:	0003      	movs	r3, r0
   32a54:	b29a      	uxth	r2, r3
   32a56:	683b      	ldr	r3, [r7, #0]
   32a58:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   32a5a:	6a3b      	ldr	r3, [r7, #32]
   32a5c:	69ba      	ldr	r2, [r7, #24]
   32a5e:	1a9a      	subs	r2, r3, r2
   32a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32a62:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   32a64:	69ba      	ldr	r2, [r7, #24]
   32a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   32a68:	601a      	str	r2, [r3, #0]
	rc = 1;
   32a6a:	2301      	movs	r3, #1
   32a6c:	627b      	str	r3, [r7, #36]	; 0x24
   32a6e:	e000      	b.n	32a72 <MQTTDeserialize_publish+0xea>
		goto exit;
   32a70:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32a74:	0018      	movs	r0, r3
   32a76:	46bd      	mov	sp, r7
   32a78:	b00a      	add	sp, #40	; 0x28
   32a7a:	bd80      	pop	{r7, pc}
   32a7c:	00032d2f 	.word	0x00032d2f
   32a80:	00032cc9 	.word	0x00032cc9
   32a84:	00032ead 	.word	0x00032ead
   32a88:	00032cfd 	.word	0x00032cfd

00032a8c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   32a8c:	b580      	push	{r7, lr}
   32a8e:	b08a      	sub	sp, #40	; 0x28
   32a90:	af00      	add	r7, sp, #0
   32a92:	60f8      	str	r0, [r7, #12]
   32a94:	60b9      	str	r1, [r7, #8]
   32a96:	607a      	str	r2, [r7, #4]
   32a98:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   32a9a:	2300      	movs	r3, #0
   32a9c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   32a9e:	683b      	ldr	r3, [r7, #0]
   32aa0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   32aa2:	2300      	movs	r3, #0
   32aa4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   32aa6:	2300      	movs	r3, #0
   32aa8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   32aaa:	2318      	movs	r3, #24
   32aac:	18fb      	adds	r3, r7, r3
   32aae:	0018      	movs	r0, r3
   32ab0:	4b20      	ldr	r3, [pc, #128]	; (32b34 <MQTTDeserialize_ack+0xa8>)
   32ab2:	4798      	blx	r3
   32ab4:	0003      	movs	r3, r0
   32ab6:	001a      	movs	r2, r3
   32ab8:	231c      	movs	r3, #28
   32aba:	18fb      	adds	r3, r7, r3
   32abc:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   32abe:	231c      	movs	r3, #28
   32ac0:	18fb      	adds	r3, r7, r3
   32ac2:	781b      	ldrb	r3, [r3, #0]
   32ac4:	071b      	lsls	r3, r3, #28
   32ac6:	0fdb      	lsrs	r3, r3, #31
   32ac8:	b2db      	uxtb	r3, r3
   32aca:	001a      	movs	r2, r3
   32acc:	68bb      	ldr	r3, [r7, #8]
   32ace:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   32ad0:	231c      	movs	r3, #28
   32ad2:	18fb      	adds	r3, r7, r3
   32ad4:	781b      	ldrb	r3, [r3, #0]
   32ad6:	061b      	lsls	r3, r3, #24
   32ad8:	0f1b      	lsrs	r3, r3, #28
   32ada:	b2db      	uxtb	r3, r3
   32adc:	001a      	movs	r2, r3
   32ade:	68fb      	ldr	r3, [r7, #12]
   32ae0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   32ae2:	69bb      	ldr	r3, [r7, #24]
   32ae4:	2214      	movs	r2, #20
   32ae6:	18ba      	adds	r2, r7, r2
   32ae8:	0011      	movs	r1, r2
   32aea:	0018      	movs	r0, r3
   32aec:	4b12      	ldr	r3, [pc, #72]	; (32b38 <MQTTDeserialize_ack+0xac>)
   32aee:	4798      	blx	r3
   32af0:	0003      	movs	r3, r0
   32af2:	627b      	str	r3, [r7, #36]	; 0x24
   32af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32af6:	69bb      	ldr	r3, [r7, #24]
   32af8:	189b      	adds	r3, r3, r2
   32afa:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   32afc:	69bb      	ldr	r3, [r7, #24]
   32afe:	697a      	ldr	r2, [r7, #20]
   32b00:	189b      	adds	r3, r3, r2
   32b02:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   32b04:	6a3b      	ldr	r3, [r7, #32]
   32b06:	69ba      	ldr	r2, [r7, #24]
   32b08:	1a9b      	subs	r3, r3, r2
   32b0a:	2b01      	cmp	r3, #1
   32b0c:	dd0b      	ble.n	32b26 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   32b0e:	2318      	movs	r3, #24
   32b10:	18fb      	adds	r3, r7, r3
   32b12:	0018      	movs	r0, r3
   32b14:	4b09      	ldr	r3, [pc, #36]	; (32b3c <MQTTDeserialize_ack+0xb0>)
   32b16:	4798      	blx	r3
   32b18:	0003      	movs	r3, r0
   32b1a:	b29a      	uxth	r2, r3
   32b1c:	687b      	ldr	r3, [r7, #4]
   32b1e:	801a      	strh	r2, [r3, #0]

	rc = 1;
   32b20:	2301      	movs	r3, #1
   32b22:	627b      	str	r3, [r7, #36]	; 0x24
   32b24:	e000      	b.n	32b28 <MQTTDeserialize_ack+0x9c>
		goto exit;
   32b26:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32b2a:	0018      	movs	r0, r3
   32b2c:	46bd      	mov	sp, r7
   32b2e:	b00a      	add	sp, #40	; 0x28
   32b30:	bd80      	pop	{r7, pc}
   32b32:	46c0      	nop			; (mov r8, r8)
   32b34:	00032d2f 	.word	0x00032d2f
   32b38:	00032cc9 	.word	0x00032cc9
   32b3c:	00032cfd 	.word	0x00032cfd

00032b40 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   32b40:	b580      	push	{r7, lr}
   32b42:	b084      	sub	sp, #16
   32b44:	af00      	add	r7, sp, #0
   32b46:	6078      	str	r0, [r7, #4]
   32b48:	6039      	str	r1, [r7, #0]
	int rc = 0;
   32b4a:	2300      	movs	r3, #0
   32b4c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   32b4e:	683b      	ldr	r3, [r7, #0]
   32b50:	4a17      	ldr	r2, [pc, #92]	; (32bb0 <MQTTPacket_encode+0x70>)
   32b52:	4013      	ands	r3, r2
   32b54:	d504      	bpl.n	32b60 <MQTTPacket_encode+0x20>
   32b56:	3b01      	subs	r3, #1
   32b58:	2280      	movs	r2, #128	; 0x80
   32b5a:	4252      	negs	r2, r2
   32b5c:	4313      	orrs	r3, r2
   32b5e:	3301      	adds	r3, #1
   32b60:	001a      	movs	r2, r3
   32b62:	230b      	movs	r3, #11
   32b64:	18fb      	adds	r3, r7, r3
   32b66:	701a      	strb	r2, [r3, #0]
		length /= 128;
   32b68:	683b      	ldr	r3, [r7, #0]
   32b6a:	2b00      	cmp	r3, #0
   32b6c:	da00      	bge.n	32b70 <MQTTPacket_encode+0x30>
   32b6e:	337f      	adds	r3, #127	; 0x7f
   32b70:	11db      	asrs	r3, r3, #7
   32b72:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   32b74:	683b      	ldr	r3, [r7, #0]
   32b76:	2b00      	cmp	r3, #0
   32b78:	dd08      	ble.n	32b8c <MQTTPacket_encode+0x4c>
			d |= 0x80;
   32b7a:	230b      	movs	r3, #11
   32b7c:	18fb      	adds	r3, r7, r3
   32b7e:	220b      	movs	r2, #11
   32b80:	18ba      	adds	r2, r7, r2
   32b82:	7812      	ldrb	r2, [r2, #0]
   32b84:	2180      	movs	r1, #128	; 0x80
   32b86:	4249      	negs	r1, r1
   32b88:	430a      	orrs	r2, r1
   32b8a:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   32b8c:	68fb      	ldr	r3, [r7, #12]
   32b8e:	1c5a      	adds	r2, r3, #1
   32b90:	60fa      	str	r2, [r7, #12]
   32b92:	001a      	movs	r2, r3
   32b94:	687b      	ldr	r3, [r7, #4]
   32b96:	189b      	adds	r3, r3, r2
   32b98:	220b      	movs	r2, #11
   32b9a:	18ba      	adds	r2, r7, r2
   32b9c:	7812      	ldrb	r2, [r2, #0]
   32b9e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   32ba0:	683b      	ldr	r3, [r7, #0]
   32ba2:	2b00      	cmp	r3, #0
   32ba4:	dcd3      	bgt.n	32b4e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   32ba6:	68fb      	ldr	r3, [r7, #12]
}
   32ba8:	0018      	movs	r0, r3
   32baa:	46bd      	mov	sp, r7
   32bac:	b004      	add	sp, #16
   32bae:	bd80      	pop	{r7, pc}
   32bb0:	8000007f 	.word	0x8000007f

00032bb4 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   32bb4:	b580      	push	{r7, lr}
   32bb6:	b086      	sub	sp, #24
   32bb8:	af00      	add	r7, sp, #0
   32bba:	6078      	str	r0, [r7, #4]
   32bbc:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   32bbe:	2301      	movs	r3, #1
   32bc0:	617b      	str	r3, [r7, #20]
	int len = 0;
   32bc2:	2300      	movs	r3, #0
   32bc4:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   32bc6:	683b      	ldr	r3, [r7, #0]
   32bc8:	2200      	movs	r2, #0
   32bca:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   32bcc:	2301      	movs	r3, #1
   32bce:	425b      	negs	r3, r3
   32bd0:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   32bd2:	693b      	ldr	r3, [r7, #16]
   32bd4:	3301      	adds	r3, #1
   32bd6:	613b      	str	r3, [r7, #16]
   32bd8:	693b      	ldr	r3, [r7, #16]
   32bda:	2b04      	cmp	r3, #4
   32bdc:	dd03      	ble.n	32be6 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   32bde:	2301      	movs	r3, #1
   32be0:	425b      	negs	r3, r3
   32be2:	60fb      	str	r3, [r7, #12]
			goto exit;
   32be4:	e022      	b.n	32c2c <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   32be6:	230b      	movs	r3, #11
   32be8:	18fa      	adds	r2, r7, r3
   32bea:	687b      	ldr	r3, [r7, #4]
   32bec:	2101      	movs	r1, #1
   32bee:	0010      	movs	r0, r2
   32bf0:	4798      	blx	r3
   32bf2:	0003      	movs	r3, r0
   32bf4:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   32bf6:	68fb      	ldr	r3, [r7, #12]
   32bf8:	2b01      	cmp	r3, #1
   32bfa:	d116      	bne.n	32c2a <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   32bfc:	683b      	ldr	r3, [r7, #0]
   32bfe:	681a      	ldr	r2, [r3, #0]
   32c00:	230b      	movs	r3, #11
   32c02:	18fb      	adds	r3, r7, r3
   32c04:	781b      	ldrb	r3, [r3, #0]
   32c06:	0019      	movs	r1, r3
   32c08:	237f      	movs	r3, #127	; 0x7f
   32c0a:	400b      	ands	r3, r1
   32c0c:	6979      	ldr	r1, [r7, #20]
   32c0e:	434b      	muls	r3, r1
   32c10:	18d2      	adds	r2, r2, r3
   32c12:	683b      	ldr	r3, [r7, #0]
   32c14:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   32c16:	697b      	ldr	r3, [r7, #20]
   32c18:	01db      	lsls	r3, r3, #7
   32c1a:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   32c1c:	230b      	movs	r3, #11
   32c1e:	18fb      	adds	r3, r7, r3
   32c20:	781b      	ldrb	r3, [r3, #0]
   32c22:	b25b      	sxtb	r3, r3
   32c24:	2b00      	cmp	r3, #0
   32c26:	dbd1      	blt.n	32bcc <MQTTPacket_decode+0x18>
   32c28:	e000      	b.n	32c2c <MQTTPacket_decode+0x78>
			goto exit;
   32c2a:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   32c2c:	693b      	ldr	r3, [r7, #16]
}
   32c2e:	0018      	movs	r0, r3
   32c30:	46bd      	mov	sp, r7
   32c32:	b006      	add	sp, #24
   32c34:	bd80      	pop	{r7, pc}
	...

00032c38 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   32c38:	b580      	push	{r7, lr}
   32c3a:	b082      	sub	sp, #8
   32c3c:	af00      	add	r7, sp, #0
   32c3e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   32c40:	687b      	ldr	r3, [r7, #4]
   32c42:	3301      	adds	r3, #1
   32c44:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   32c46:	687b      	ldr	r3, [r7, #4]
   32c48:	2b7f      	cmp	r3, #127	; 0x7f
   32c4a:	dc03      	bgt.n	32c54 <MQTTPacket_len+0x1c>
		rem_len += 1;
   32c4c:	687b      	ldr	r3, [r7, #4]
   32c4e:	3301      	adds	r3, #1
   32c50:	607b      	str	r3, [r7, #4]
   32c52:	e012      	b.n	32c7a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   32c54:	687b      	ldr	r3, [r7, #4]
   32c56:	4a0b      	ldr	r2, [pc, #44]	; (32c84 <MQTTPacket_len+0x4c>)
   32c58:	4293      	cmp	r3, r2
   32c5a:	dc03      	bgt.n	32c64 <MQTTPacket_len+0x2c>
		rem_len += 2;
   32c5c:	687b      	ldr	r3, [r7, #4]
   32c5e:	3302      	adds	r3, #2
   32c60:	607b      	str	r3, [r7, #4]
   32c62:	e00a      	b.n	32c7a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   32c64:	687b      	ldr	r3, [r7, #4]
   32c66:	4a08      	ldr	r2, [pc, #32]	; (32c88 <MQTTPacket_len+0x50>)
   32c68:	4293      	cmp	r3, r2
   32c6a:	dc03      	bgt.n	32c74 <MQTTPacket_len+0x3c>
		rem_len += 3;
   32c6c:	687b      	ldr	r3, [r7, #4]
   32c6e:	3303      	adds	r3, #3
   32c70:	607b      	str	r3, [r7, #4]
   32c72:	e002      	b.n	32c7a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   32c74:	687b      	ldr	r3, [r7, #4]
   32c76:	3304      	adds	r3, #4
   32c78:	607b      	str	r3, [r7, #4]
	return rem_len;
   32c7a:	687b      	ldr	r3, [r7, #4]
}
   32c7c:	0018      	movs	r0, r3
   32c7e:	46bd      	mov	sp, r7
   32c80:	b002      	add	sp, #8
   32c82:	bd80      	pop	{r7, pc}
   32c84:	00003fff 	.word	0x00003fff
   32c88:	001ffffe 	.word	0x001ffffe

00032c8c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   32c8c:	b580      	push	{r7, lr}
   32c8e:	b084      	sub	sp, #16
   32c90:	af00      	add	r7, sp, #0
   32c92:	6078      	str	r0, [r7, #4]
   32c94:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   32c96:	2300      	movs	r3, #0
   32c98:	60fb      	str	r3, [r7, #12]
   32c9a:	e00a      	b.n	32cb2 <bufchar+0x26>
		*c = *bufptr++;
   32c9c:	4b09      	ldr	r3, [pc, #36]	; (32cc4 <bufchar+0x38>)
   32c9e:	681b      	ldr	r3, [r3, #0]
   32ca0:	1c59      	adds	r1, r3, #1
   32ca2:	4a08      	ldr	r2, [pc, #32]	; (32cc4 <bufchar+0x38>)
   32ca4:	6011      	str	r1, [r2, #0]
   32ca6:	781a      	ldrb	r2, [r3, #0]
   32ca8:	687b      	ldr	r3, [r7, #4]
   32caa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   32cac:	68fb      	ldr	r3, [r7, #12]
   32cae:	3301      	adds	r3, #1
   32cb0:	60fb      	str	r3, [r7, #12]
   32cb2:	68fa      	ldr	r2, [r7, #12]
   32cb4:	683b      	ldr	r3, [r7, #0]
   32cb6:	429a      	cmp	r2, r3
   32cb8:	dbf0      	blt.n	32c9c <bufchar+0x10>
	return count;
   32cba:	683b      	ldr	r3, [r7, #0]
}
   32cbc:	0018      	movs	r0, r3
   32cbe:	46bd      	mov	sp, r7
   32cc0:	b004      	add	sp, #16
   32cc2:	bd80      	pop	{r7, pc}
   32cc4:	2000461c 	.word	0x2000461c

00032cc8 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   32cc8:	b580      	push	{r7, lr}
   32cca:	b082      	sub	sp, #8
   32ccc:	af00      	add	r7, sp, #0
   32cce:	6078      	str	r0, [r7, #4]
   32cd0:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   32cd2:	4b07      	ldr	r3, [pc, #28]	; (32cf0 <MQTTPacket_decodeBuf+0x28>)
   32cd4:	687a      	ldr	r2, [r7, #4]
   32cd6:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   32cd8:	683a      	ldr	r2, [r7, #0]
   32cda:	4b06      	ldr	r3, [pc, #24]	; (32cf4 <MQTTPacket_decodeBuf+0x2c>)
   32cdc:	0011      	movs	r1, r2
   32cde:	0018      	movs	r0, r3
   32ce0:	4b05      	ldr	r3, [pc, #20]	; (32cf8 <MQTTPacket_decodeBuf+0x30>)
   32ce2:	4798      	blx	r3
   32ce4:	0003      	movs	r3, r0
}
   32ce6:	0018      	movs	r0, r3
   32ce8:	46bd      	mov	sp, r7
   32cea:	b002      	add	sp, #8
   32cec:	bd80      	pop	{r7, pc}
   32cee:	46c0      	nop			; (mov r8, r8)
   32cf0:	2000461c 	.word	0x2000461c
   32cf4:	00032c8d 	.word	0x00032c8d
   32cf8:	00032bb5 	.word	0x00032bb5

00032cfc <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   32cfc:	b580      	push	{r7, lr}
   32cfe:	b084      	sub	sp, #16
   32d00:	af00      	add	r7, sp, #0
   32d02:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   32d04:	687b      	ldr	r3, [r7, #4]
   32d06:	681b      	ldr	r3, [r3, #0]
   32d08:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   32d0a:	68fb      	ldr	r3, [r7, #12]
   32d0c:	781b      	ldrb	r3, [r3, #0]
   32d0e:	021b      	lsls	r3, r3, #8
   32d10:	68fa      	ldr	r2, [r7, #12]
   32d12:	3201      	adds	r2, #1
   32d14:	7812      	ldrb	r2, [r2, #0]
   32d16:	189b      	adds	r3, r3, r2
   32d18:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   32d1a:	687b      	ldr	r3, [r7, #4]
   32d1c:	681b      	ldr	r3, [r3, #0]
   32d1e:	1c9a      	adds	r2, r3, #2
   32d20:	687b      	ldr	r3, [r7, #4]
   32d22:	601a      	str	r2, [r3, #0]
	return len;
   32d24:	68bb      	ldr	r3, [r7, #8]
}
   32d26:	0018      	movs	r0, r3
   32d28:	46bd      	mov	sp, r7
   32d2a:	b004      	add	sp, #16
   32d2c:	bd80      	pop	{r7, pc}

00032d2e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   32d2e:	b580      	push	{r7, lr}
   32d30:	b084      	sub	sp, #16
   32d32:	af00      	add	r7, sp, #0
   32d34:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   32d36:	687b      	ldr	r3, [r7, #4]
   32d38:	681a      	ldr	r2, [r3, #0]
   32d3a:	230f      	movs	r3, #15
   32d3c:	18fb      	adds	r3, r7, r3
   32d3e:	7812      	ldrb	r2, [r2, #0]
   32d40:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   32d42:	687b      	ldr	r3, [r7, #4]
   32d44:	681b      	ldr	r3, [r3, #0]
   32d46:	1c5a      	adds	r2, r3, #1
   32d48:	687b      	ldr	r3, [r7, #4]
   32d4a:	601a      	str	r2, [r3, #0]
	return c;
   32d4c:	230f      	movs	r3, #15
   32d4e:	18fb      	adds	r3, r7, r3
   32d50:	781b      	ldrb	r3, [r3, #0]
}
   32d52:	0018      	movs	r0, r3
   32d54:	46bd      	mov	sp, r7
   32d56:	b004      	add	sp, #16
   32d58:	bd80      	pop	{r7, pc}

00032d5a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   32d5a:	b580      	push	{r7, lr}
   32d5c:	b082      	sub	sp, #8
   32d5e:	af00      	add	r7, sp, #0
   32d60:	6078      	str	r0, [r7, #4]
   32d62:	000a      	movs	r2, r1
   32d64:	1cfb      	adds	r3, r7, #3
   32d66:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   32d68:	687b      	ldr	r3, [r7, #4]
   32d6a:	681b      	ldr	r3, [r3, #0]
   32d6c:	1cfa      	adds	r2, r7, #3
   32d6e:	7812      	ldrb	r2, [r2, #0]
   32d70:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   32d72:	687b      	ldr	r3, [r7, #4]
   32d74:	681b      	ldr	r3, [r3, #0]
   32d76:	1c5a      	adds	r2, r3, #1
   32d78:	687b      	ldr	r3, [r7, #4]
   32d7a:	601a      	str	r2, [r3, #0]
}
   32d7c:	46c0      	nop			; (mov r8, r8)
   32d7e:	46bd      	mov	sp, r7
   32d80:	b002      	add	sp, #8
   32d82:	bd80      	pop	{r7, pc}

00032d84 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   32d84:	b580      	push	{r7, lr}
   32d86:	b082      	sub	sp, #8
   32d88:	af00      	add	r7, sp, #0
   32d8a:	6078      	str	r0, [r7, #4]
   32d8c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   32d8e:	687b      	ldr	r3, [r7, #4]
   32d90:	681a      	ldr	r2, [r3, #0]
   32d92:	683b      	ldr	r3, [r7, #0]
   32d94:	2b00      	cmp	r3, #0
   32d96:	da00      	bge.n	32d9a <writeInt+0x16>
   32d98:	33ff      	adds	r3, #255	; 0xff
   32d9a:	121b      	asrs	r3, r3, #8
   32d9c:	b2db      	uxtb	r3, r3
   32d9e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   32da0:	687b      	ldr	r3, [r7, #4]
   32da2:	681b      	ldr	r3, [r3, #0]
   32da4:	1c5a      	adds	r2, r3, #1
   32da6:	687b      	ldr	r3, [r7, #4]
   32da8:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   32daa:	687b      	ldr	r3, [r7, #4]
   32dac:	681a      	ldr	r2, [r3, #0]
   32dae:	683b      	ldr	r3, [r7, #0]
   32db0:	4908      	ldr	r1, [pc, #32]	; (32dd4 <writeInt+0x50>)
   32db2:	400b      	ands	r3, r1
   32db4:	d503      	bpl.n	32dbe <writeInt+0x3a>
   32db6:	3b01      	subs	r3, #1
   32db8:	4907      	ldr	r1, [pc, #28]	; (32dd8 <writeInt+0x54>)
   32dba:	430b      	orrs	r3, r1
   32dbc:	3301      	adds	r3, #1
   32dbe:	b2db      	uxtb	r3, r3
   32dc0:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   32dc2:	687b      	ldr	r3, [r7, #4]
   32dc4:	681b      	ldr	r3, [r3, #0]
   32dc6:	1c5a      	adds	r2, r3, #1
   32dc8:	687b      	ldr	r3, [r7, #4]
   32dca:	601a      	str	r2, [r3, #0]
}
   32dcc:	46c0      	nop			; (mov r8, r8)
   32dce:	46bd      	mov	sp, r7
   32dd0:	b002      	add	sp, #8
   32dd2:	bd80      	pop	{r7, pc}
   32dd4:	800000ff 	.word	0x800000ff
   32dd8:	ffffff00 	.word	0xffffff00

00032ddc <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   32ddc:	b580      	push	{r7, lr}
   32dde:	b084      	sub	sp, #16
   32de0:	af00      	add	r7, sp, #0
   32de2:	6078      	str	r0, [r7, #4]
   32de4:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   32de6:	683b      	ldr	r3, [r7, #0]
   32de8:	0018      	movs	r0, r3
   32dea:	4b0d      	ldr	r3, [pc, #52]	; (32e20 <writeCString+0x44>)
   32dec:	4798      	blx	r3
   32dee:	0003      	movs	r3, r0
   32df0:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   32df2:	68fa      	ldr	r2, [r7, #12]
   32df4:	687b      	ldr	r3, [r7, #4]
   32df6:	0011      	movs	r1, r2
   32df8:	0018      	movs	r0, r3
   32dfa:	4b0a      	ldr	r3, [pc, #40]	; (32e24 <writeCString+0x48>)
   32dfc:	4798      	blx	r3
	memcpy(*pptr, string, len);
   32dfe:	687b      	ldr	r3, [r7, #4]
   32e00:	681b      	ldr	r3, [r3, #0]
   32e02:	68fa      	ldr	r2, [r7, #12]
   32e04:	6839      	ldr	r1, [r7, #0]
   32e06:	0018      	movs	r0, r3
   32e08:	4b07      	ldr	r3, [pc, #28]	; (32e28 <writeCString+0x4c>)
   32e0a:	4798      	blx	r3
	*pptr += len;
   32e0c:	687b      	ldr	r3, [r7, #4]
   32e0e:	681a      	ldr	r2, [r3, #0]
   32e10:	68fb      	ldr	r3, [r7, #12]
   32e12:	18d2      	adds	r2, r2, r3
   32e14:	687b      	ldr	r3, [r7, #4]
   32e16:	601a      	str	r2, [r3, #0]
}
   32e18:	46c0      	nop			; (mov r8, r8)
   32e1a:	46bd      	mov	sp, r7
   32e1c:	b004      	add	sp, #16
   32e1e:	bd80      	pop	{r7, pc}
   32e20:	00037cbb 	.word	0x00037cbb
   32e24:	00032d85 	.word	0x00032d85
   32e28:	000378cd 	.word	0x000378cd

00032e2c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   32e2c:	b580      	push	{r7, lr}
   32e2e:	b084      	sub	sp, #16
   32e30:	af00      	add	r7, sp, #0
   32e32:	60f8      	str	r0, [r7, #12]
   32e34:	0038      	movs	r0, r7
   32e36:	6001      	str	r1, [r0, #0]
   32e38:	6042      	str	r2, [r0, #4]
   32e3a:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   32e3c:	003b      	movs	r3, r7
   32e3e:	685b      	ldr	r3, [r3, #4]
   32e40:	2b00      	cmp	r3, #0
   32e42:	dd17      	ble.n	32e74 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   32e44:	003b      	movs	r3, r7
   32e46:	685a      	ldr	r2, [r3, #4]
   32e48:	68fb      	ldr	r3, [r7, #12]
   32e4a:	0011      	movs	r1, r2
   32e4c:	0018      	movs	r0, r3
   32e4e:	4b14      	ldr	r3, [pc, #80]	; (32ea0 <writeMQTTString+0x74>)
   32e50:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   32e52:	68fb      	ldr	r3, [r7, #12]
   32e54:	6818      	ldr	r0, [r3, #0]
   32e56:	003b      	movs	r3, r7
   32e58:	6899      	ldr	r1, [r3, #8]
   32e5a:	003b      	movs	r3, r7
   32e5c:	685b      	ldr	r3, [r3, #4]
   32e5e:	001a      	movs	r2, r3
   32e60:	4b10      	ldr	r3, [pc, #64]	; (32ea4 <writeMQTTString+0x78>)
   32e62:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   32e64:	68fb      	ldr	r3, [r7, #12]
   32e66:	681a      	ldr	r2, [r3, #0]
   32e68:	003b      	movs	r3, r7
   32e6a:	685b      	ldr	r3, [r3, #4]
   32e6c:	18d2      	adds	r2, r2, r3
   32e6e:	68fb      	ldr	r3, [r7, #12]
   32e70:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   32e72:	e010      	b.n	32e96 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   32e74:	003b      	movs	r3, r7
   32e76:	681b      	ldr	r3, [r3, #0]
   32e78:	2b00      	cmp	r3, #0
   32e7a:	d007      	beq.n	32e8c <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   32e7c:	003b      	movs	r3, r7
   32e7e:	681a      	ldr	r2, [r3, #0]
   32e80:	68fb      	ldr	r3, [r7, #12]
   32e82:	0011      	movs	r1, r2
   32e84:	0018      	movs	r0, r3
   32e86:	4b08      	ldr	r3, [pc, #32]	; (32ea8 <writeMQTTString+0x7c>)
   32e88:	4798      	blx	r3
}
   32e8a:	e004      	b.n	32e96 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   32e8c:	68fb      	ldr	r3, [r7, #12]
   32e8e:	2100      	movs	r1, #0
   32e90:	0018      	movs	r0, r3
   32e92:	4b03      	ldr	r3, [pc, #12]	; (32ea0 <writeMQTTString+0x74>)
   32e94:	4798      	blx	r3
}
   32e96:	46c0      	nop			; (mov r8, r8)
   32e98:	46bd      	mov	sp, r7
   32e9a:	b004      	add	sp, #16
   32e9c:	bd80      	pop	{r7, pc}
   32e9e:	46c0      	nop			; (mov r8, r8)
   32ea0:	00032d85 	.word	0x00032d85
   32ea4:	000378cd 	.word	0x000378cd
   32ea8:	00032ddd 	.word	0x00032ddd

00032eac <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   32eac:	b580      	push	{r7, lr}
   32eae:	b086      	sub	sp, #24
   32eb0:	af00      	add	r7, sp, #0
   32eb2:	60f8      	str	r0, [r7, #12]
   32eb4:	60b9      	str	r1, [r7, #8]
   32eb6:	607a      	str	r2, [r7, #4]
	int rc = 0;
   32eb8:	2300      	movs	r3, #0
   32eba:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   32ebc:	687a      	ldr	r2, [r7, #4]
   32ebe:	68bb      	ldr	r3, [r7, #8]
   32ec0:	681b      	ldr	r3, [r3, #0]
   32ec2:	1ad3      	subs	r3, r2, r3
   32ec4:	2b01      	cmp	r3, #1
   32ec6:	dd1b      	ble.n	32f00 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   32ec8:	68bb      	ldr	r3, [r7, #8]
   32eca:	0018      	movs	r0, r3
   32ecc:	4b10      	ldr	r3, [pc, #64]	; (32f10 <readMQTTLenString+0x64>)
   32ece:	4798      	blx	r3
   32ed0:	0002      	movs	r2, r0
   32ed2:	68fb      	ldr	r3, [r7, #12]
   32ed4:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   32ed6:	68bb      	ldr	r3, [r7, #8]
   32ed8:	681a      	ldr	r2, [r3, #0]
   32eda:	68fb      	ldr	r3, [r7, #12]
   32edc:	685b      	ldr	r3, [r3, #4]
   32ede:	18d2      	adds	r2, r2, r3
   32ee0:	687b      	ldr	r3, [r7, #4]
   32ee2:	429a      	cmp	r2, r3
   32ee4:	d80c      	bhi.n	32f00 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   32ee6:	68bb      	ldr	r3, [r7, #8]
   32ee8:	681a      	ldr	r2, [r3, #0]
   32eea:	68fb      	ldr	r3, [r7, #12]
   32eec:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   32eee:	68bb      	ldr	r3, [r7, #8]
   32ef0:	681a      	ldr	r2, [r3, #0]
   32ef2:	68fb      	ldr	r3, [r7, #12]
   32ef4:	685b      	ldr	r3, [r3, #4]
   32ef6:	18d2      	adds	r2, r2, r3
   32ef8:	68bb      	ldr	r3, [r7, #8]
   32efa:	601a      	str	r2, [r3, #0]
			rc = 1;
   32efc:	2301      	movs	r3, #1
   32efe:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   32f00:	68fb      	ldr	r3, [r7, #12]
   32f02:	2200      	movs	r2, #0
   32f04:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   32f06:	697b      	ldr	r3, [r7, #20]
}
   32f08:	0018      	movs	r0, r3
   32f0a:	46bd      	mov	sp, r7
   32f0c:	b006      	add	sp, #24
   32f0e:	bd80      	pop	{r7, pc}
   32f10:	00032cfd 	.word	0x00032cfd

00032f14 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   32f14:	b580      	push	{r7, lr}
   32f16:	b086      	sub	sp, #24
   32f18:	af00      	add	r7, sp, #0
   32f1a:	1d3b      	adds	r3, r7, #4
   32f1c:	6018      	str	r0, [r3, #0]
   32f1e:	6059      	str	r1, [r3, #4]
   32f20:	609a      	str	r2, [r3, #8]
	int rc = 0;
   32f22:	2300      	movs	r3, #0
   32f24:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   32f26:	1d3b      	adds	r3, r7, #4
   32f28:	681b      	ldr	r3, [r3, #0]
   32f2a:	2b00      	cmp	r3, #0
   32f2c:	d007      	beq.n	32f3e <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   32f2e:	1d3b      	adds	r3, r7, #4
   32f30:	681b      	ldr	r3, [r3, #0]
   32f32:	0018      	movs	r0, r3
   32f34:	4b06      	ldr	r3, [pc, #24]	; (32f50 <MQTTstrlen+0x3c>)
   32f36:	4798      	blx	r3
   32f38:	0003      	movs	r3, r0
   32f3a:	617b      	str	r3, [r7, #20]
   32f3c:	e002      	b.n	32f44 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   32f3e:	1d3b      	adds	r3, r7, #4
   32f40:	685b      	ldr	r3, [r3, #4]
   32f42:	617b      	str	r3, [r7, #20]
	return rc;
   32f44:	697b      	ldr	r3, [r7, #20]
}
   32f46:	0018      	movs	r0, r3
   32f48:	46bd      	mov	sp, r7
   32f4a:	b006      	add	sp, #24
   32f4c:	bd80      	pop	{r7, pc}
   32f4e:	46c0      	nop			; (mov r8, r8)
   32f50:	00037cbb 	.word	0x00037cbb

00032f54 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   32f54:	b580      	push	{r7, lr}
   32f56:	b086      	sub	sp, #24
   32f58:	af00      	add	r7, sp, #0
   32f5a:	6078      	str	r0, [r7, #4]
   32f5c:	6039      	str	r1, [r7, #0]
	int alen = 0,
   32f5e:	2300      	movs	r3, #0
   32f60:	617b      	str	r3, [r7, #20]
		blen = 0;
   32f62:	2300      	movs	r3, #0
   32f64:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   32f66:	687b      	ldr	r3, [r7, #4]
   32f68:	681b      	ldr	r3, [r3, #0]
   32f6a:	2b00      	cmp	r3, #0
   32f6c:	d00a      	beq.n	32f84 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   32f6e:	687b      	ldr	r3, [r7, #4]
   32f70:	681b      	ldr	r3, [r3, #0]
   32f72:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   32f74:	687b      	ldr	r3, [r7, #4]
   32f76:	681b      	ldr	r3, [r3, #0]
   32f78:	0018      	movs	r0, r3
   32f7a:	4b12      	ldr	r3, [pc, #72]	; (32fc4 <MQTTPacket_equals+0x70>)
   32f7c:	4798      	blx	r3
   32f7e:	0003      	movs	r3, r0
   32f80:	617b      	str	r3, [r7, #20]
   32f82:	e005      	b.n	32f90 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   32f84:	687b      	ldr	r3, [r7, #4]
   32f86:	689b      	ldr	r3, [r3, #8]
   32f88:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   32f8a:	687b      	ldr	r3, [r7, #4]
   32f8c:	685b      	ldr	r3, [r3, #4]
   32f8e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   32f90:	683b      	ldr	r3, [r7, #0]
   32f92:	0018      	movs	r0, r3
   32f94:	4b0b      	ldr	r3, [pc, #44]	; (32fc4 <MQTTPacket_equals+0x70>)
   32f96:	4798      	blx	r3
   32f98:	0003      	movs	r3, r0
   32f9a:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   32f9c:	697a      	ldr	r2, [r7, #20]
   32f9e:	68fb      	ldr	r3, [r7, #12]
   32fa0:	429a      	cmp	r2, r3
   32fa2:	d109      	bne.n	32fb8 <MQTTPacket_equals+0x64>
   32fa4:	697a      	ldr	r2, [r7, #20]
   32fa6:	6839      	ldr	r1, [r7, #0]
   32fa8:	693b      	ldr	r3, [r7, #16]
   32faa:	0018      	movs	r0, r3
   32fac:	4b06      	ldr	r3, [pc, #24]	; (32fc8 <MQTTPacket_equals+0x74>)
   32fae:	4798      	blx	r3
   32fb0:	1e03      	subs	r3, r0, #0
   32fb2:	d101      	bne.n	32fb8 <MQTTPacket_equals+0x64>
   32fb4:	2301      	movs	r3, #1
   32fb6:	e000      	b.n	32fba <MQTTPacket_equals+0x66>
   32fb8:	2300      	movs	r3, #0
}
   32fba:	0018      	movs	r0, r3
   32fbc:	46bd      	mov	sp, r7
   32fbe:	b006      	add	sp, #24
   32fc0:	bd80      	pop	{r7, pc}
   32fc2:	46c0      	nop			; (mov r8, r8)
   32fc4:	00037cbb 	.word	0x00037cbb
   32fc8:	00037cc9 	.word	0x00037cc9

00032fcc <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   32fcc:	b580      	push	{r7, lr}
   32fce:	b086      	sub	sp, #24
   32fd0:	af00      	add	r7, sp, #0
   32fd2:	60f8      	str	r0, [r7, #12]
   32fd4:	0038      	movs	r0, r7
   32fd6:	6001      	str	r1, [r0, #0]
   32fd8:	6042      	str	r2, [r0, #4]
   32fda:	6083      	str	r3, [r0, #8]
	int len = 0;
   32fdc:	2300      	movs	r3, #0
   32fde:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   32fe0:	003b      	movs	r3, r7
   32fe2:	6818      	ldr	r0, [r3, #0]
   32fe4:	6859      	ldr	r1, [r3, #4]
   32fe6:	689a      	ldr	r2, [r3, #8]
   32fe8:	4b09      	ldr	r3, [pc, #36]	; (33010 <MQTTSerialize_publishLength+0x44>)
   32fea:	4798      	blx	r3
   32fec:	0003      	movs	r3, r0
   32fee:	1c9a      	adds	r2, r3, #2
   32ff0:	6a3b      	ldr	r3, [r7, #32]
   32ff2:	18d3      	adds	r3, r2, r3
   32ff4:	697a      	ldr	r2, [r7, #20]
   32ff6:	18d3      	adds	r3, r2, r3
   32ff8:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   32ffa:	68fb      	ldr	r3, [r7, #12]
   32ffc:	2b00      	cmp	r3, #0
   32ffe:	dd02      	ble.n	33006 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   33000:	697b      	ldr	r3, [r7, #20]
   33002:	3302      	adds	r3, #2
   33004:	617b      	str	r3, [r7, #20]
	return len;
   33006:	697b      	ldr	r3, [r7, #20]
}
   33008:	0018      	movs	r0, r3
   3300a:	46bd      	mov	sp, r7
   3300c:	b006      	add	sp, #24
   3300e:	bd80      	pop	{r7, pc}
   33010:	00032f15 	.word	0x00032f15

00033014 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   33014:	b590      	push	{r4, r7, lr}
   33016:	b08b      	sub	sp, #44	; 0x2c
   33018:	af02      	add	r7, sp, #8
   3301a:	60f8      	str	r0, [r7, #12]
   3301c:	60b9      	str	r1, [r7, #8]
   3301e:	603b      	str	r3, [r7, #0]
   33020:	1dfb      	adds	r3, r7, #7
   33022:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   33024:	68fb      	ldr	r3, [r7, #12]
   33026:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   33028:	2300      	movs	r3, #0
   3302a:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   3302c:	2300      	movs	r3, #0
   3302e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   33030:	2300      	movs	r3, #0
   33032:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   33034:	2308      	movs	r3, #8
   33036:	2230      	movs	r2, #48	; 0x30
   33038:	4694      	mov	ip, r2
   3303a:	44bc      	add	ip, r7
   3303c:	4463      	add	r3, ip
   3303e:	6838      	ldr	r0, [r7, #0]
   33040:	6cba      	ldr	r2, [r7, #72]	; 0x48
   33042:	9200      	str	r2, [sp, #0]
   33044:	6819      	ldr	r1, [r3, #0]
   33046:	685a      	ldr	r2, [r3, #4]
   33048:	689b      	ldr	r3, [r3, #8]
   3304a:	4c46      	ldr	r4, [pc, #280]	; (33164 <MQTTSerialize_publish+0x150>)
   3304c:	47a0      	blx	r4
   3304e:	0003      	movs	r3, r0
   33050:	61bb      	str	r3, [r7, #24]
   33052:	69bb      	ldr	r3, [r7, #24]
   33054:	0018      	movs	r0, r3
   33056:	4b44      	ldr	r3, [pc, #272]	; (33168 <MQTTSerialize_publish+0x154>)
   33058:	4798      	blx	r3
   3305a:	0002      	movs	r2, r0
   3305c:	68bb      	ldr	r3, [r7, #8]
   3305e:	429a      	cmp	r2, r3
   33060:	dd03      	ble.n	3306a <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   33062:	2302      	movs	r3, #2
   33064:	425b      	negs	r3, r3
   33066:	61fb      	str	r3, [r7, #28]
		goto exit;
   33068:	e077      	b.n	3315a <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   3306a:	2310      	movs	r3, #16
   3306c:	18fb      	adds	r3, r7, r3
   3306e:	781a      	ldrb	r2, [r3, #0]
   33070:	210f      	movs	r1, #15
   33072:	400a      	ands	r2, r1
   33074:	1c11      	adds	r1, r2, #0
   33076:	2230      	movs	r2, #48	; 0x30
   33078:	430a      	orrs	r2, r1
   3307a:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3307c:	1dfb      	adds	r3, r7, #7
   3307e:	781b      	ldrb	r3, [r3, #0]
   33080:	2201      	movs	r2, #1
   33082:	4013      	ands	r3, r2
   33084:	b2da      	uxtb	r2, r3
   33086:	2310      	movs	r3, #16
   33088:	18fb      	adds	r3, r7, r3
   3308a:	2101      	movs	r1, #1
   3308c:	400a      	ands	r2, r1
   3308e:	00d0      	lsls	r0, r2, #3
   33090:	781a      	ldrb	r2, [r3, #0]
   33092:	2108      	movs	r1, #8
   33094:	438a      	bics	r2, r1
   33096:	1c11      	adds	r1, r2, #0
   33098:	1c02      	adds	r2, r0, #0
   3309a:	430a      	orrs	r2, r1
   3309c:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   3309e:	683b      	ldr	r3, [r7, #0]
   330a0:	b2db      	uxtb	r3, r3
   330a2:	1c1a      	adds	r2, r3, #0
   330a4:	2303      	movs	r3, #3
   330a6:	4013      	ands	r3, r2
   330a8:	b2da      	uxtb	r2, r3
   330aa:	2310      	movs	r3, #16
   330ac:	18fb      	adds	r3, r7, r3
   330ae:	2103      	movs	r1, #3
   330b0:	400a      	ands	r2, r1
   330b2:	1890      	adds	r0, r2, r2
   330b4:	781a      	ldrb	r2, [r3, #0]
   330b6:	2106      	movs	r1, #6
   330b8:	438a      	bics	r2, r1
   330ba:	1c11      	adds	r1, r2, #0
   330bc:	1c02      	adds	r2, r0, #0
   330be:	430a      	orrs	r2, r1
   330c0:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   330c2:	2330      	movs	r3, #48	; 0x30
   330c4:	18fb      	adds	r3, r7, r3
   330c6:	781b      	ldrb	r3, [r3, #0]
   330c8:	2201      	movs	r2, #1
   330ca:	4013      	ands	r3, r2
   330cc:	b2da      	uxtb	r2, r3
   330ce:	2310      	movs	r3, #16
   330d0:	18fb      	adds	r3, r7, r3
   330d2:	2101      	movs	r1, #1
   330d4:	400a      	ands	r2, r1
   330d6:	0010      	movs	r0, r2
   330d8:	781a      	ldrb	r2, [r3, #0]
   330da:	2101      	movs	r1, #1
   330dc:	438a      	bics	r2, r1
   330de:	1c11      	adds	r1, r2, #0
   330e0:	1c02      	adds	r2, r0, #0
   330e2:	430a      	orrs	r2, r1
   330e4:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   330e6:	2310      	movs	r3, #16
   330e8:	18fb      	adds	r3, r7, r3
   330ea:	781a      	ldrb	r2, [r3, #0]
   330ec:	2314      	movs	r3, #20
   330ee:	18fb      	adds	r3, r7, r3
   330f0:	0011      	movs	r1, r2
   330f2:	0018      	movs	r0, r3
   330f4:	4b1d      	ldr	r3, [pc, #116]	; (3316c <MQTTSerialize_publish+0x158>)
   330f6:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   330f8:	697b      	ldr	r3, [r7, #20]
   330fa:	69ba      	ldr	r2, [r7, #24]
   330fc:	0011      	movs	r1, r2
   330fe:	0018      	movs	r0, r3
   33100:	4b1b      	ldr	r3, [pc, #108]	; (33170 <MQTTSerialize_publish+0x15c>)
   33102:	4798      	blx	r3
   33104:	0002      	movs	r2, r0
   33106:	697b      	ldr	r3, [r7, #20]
   33108:	189b      	adds	r3, r3, r2
   3310a:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   3310c:	2308      	movs	r3, #8
   3310e:	2230      	movs	r2, #48	; 0x30
   33110:	4694      	mov	ip, r2
   33112:	44bc      	add	ip, r7
   33114:	4463      	add	r3, ip
   33116:	2214      	movs	r2, #20
   33118:	18b8      	adds	r0, r7, r2
   3311a:	6819      	ldr	r1, [r3, #0]
   3311c:	685a      	ldr	r2, [r3, #4]
   3311e:	689b      	ldr	r3, [r3, #8]
   33120:	4c14      	ldr	r4, [pc, #80]	; (33174 <MQTTSerialize_publish+0x160>)
   33122:	47a0      	blx	r4

	if (qos > 0)
   33124:	683b      	ldr	r3, [r7, #0]
   33126:	2b00      	cmp	r3, #0
   33128:	dd08      	ble.n	3313c <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   3312a:	2334      	movs	r3, #52	; 0x34
   3312c:	18fb      	adds	r3, r7, r3
   3312e:	881a      	ldrh	r2, [r3, #0]
   33130:	2314      	movs	r3, #20
   33132:	18fb      	adds	r3, r7, r3
   33134:	0011      	movs	r1, r2
   33136:	0018      	movs	r0, r3
   33138:	4b0f      	ldr	r3, [pc, #60]	; (33178 <MQTTSerialize_publish+0x164>)
   3313a:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   3313c:	697b      	ldr	r3, [r7, #20]
   3313e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   33140:	6c79      	ldr	r1, [r7, #68]	; 0x44
   33142:	0018      	movs	r0, r3
   33144:	4b0d      	ldr	r3, [pc, #52]	; (3317c <MQTTSerialize_publish+0x168>)
   33146:	4798      	blx	r3
	ptr += payloadlen;
   33148:	697a      	ldr	r2, [r7, #20]
   3314a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3314c:	18d3      	adds	r3, r2, r3
   3314e:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   33150:	697b      	ldr	r3, [r7, #20]
   33152:	001a      	movs	r2, r3
   33154:	68fb      	ldr	r3, [r7, #12]
   33156:	1ad3      	subs	r3, r2, r3
   33158:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3315a:	69fb      	ldr	r3, [r7, #28]
}
   3315c:	0018      	movs	r0, r3
   3315e:	46bd      	mov	sp, r7
   33160:	b009      	add	sp, #36	; 0x24
   33162:	bd90      	pop	{r4, r7, pc}
   33164:	00032fcd 	.word	0x00032fcd
   33168:	00032c39 	.word	0x00032c39
   3316c:	00032d5b 	.word	0x00032d5b
   33170:	00032b41 	.word	0x00032b41
   33174:	00032e2d 	.word	0x00032e2d
   33178:	00032d85 	.word	0x00032d85
   3317c:	000378cd 	.word	0x000378cd

00033180 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   33180:	b580      	push	{r7, lr}
   33182:	b088      	sub	sp, #32
   33184:	af00      	add	r7, sp, #0
   33186:	60f8      	str	r0, [r7, #12]
   33188:	60b9      	str	r1, [r7, #8]
   3318a:	0019      	movs	r1, r3
   3318c:	1dfb      	adds	r3, r7, #7
   3318e:	701a      	strb	r2, [r3, #0]
   33190:	1dbb      	adds	r3, r7, #6
   33192:	1c0a      	adds	r2, r1, #0
   33194:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   33196:	2300      	movs	r3, #0
   33198:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   3319a:	2300      	movs	r3, #0
   3319c:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   3319e:	68fb      	ldr	r3, [r7, #12]
   331a0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   331a2:	68bb      	ldr	r3, [r7, #8]
   331a4:	2b03      	cmp	r3, #3
   331a6:	dc03      	bgt.n	331b0 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   331a8:	2302      	movs	r3, #2
   331aa:	425b      	negs	r3, r3
   331ac:	61fb      	str	r3, [r7, #28]
		goto exit;
   331ae:	e055      	b.n	3325c <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   331b0:	1dfb      	adds	r3, r7, #7
   331b2:	781b      	ldrb	r3, [r3, #0]
   331b4:	220f      	movs	r2, #15
   331b6:	4013      	ands	r3, r2
   331b8:	b2da      	uxtb	r2, r3
   331ba:	2318      	movs	r3, #24
   331bc:	18fb      	adds	r3, r7, r3
   331be:	0110      	lsls	r0, r2, #4
   331c0:	781a      	ldrb	r2, [r3, #0]
   331c2:	210f      	movs	r1, #15
   331c4:	400a      	ands	r2, r1
   331c6:	1c11      	adds	r1, r2, #0
   331c8:	1c02      	adds	r2, r0, #0
   331ca:	430a      	orrs	r2, r1
   331cc:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   331ce:	1dbb      	adds	r3, r7, #6
   331d0:	781b      	ldrb	r3, [r3, #0]
   331d2:	2201      	movs	r2, #1
   331d4:	4013      	ands	r3, r2
   331d6:	b2da      	uxtb	r2, r3
   331d8:	2318      	movs	r3, #24
   331da:	18fb      	adds	r3, r7, r3
   331dc:	2101      	movs	r1, #1
   331de:	400a      	ands	r2, r1
   331e0:	00d0      	lsls	r0, r2, #3
   331e2:	781a      	ldrb	r2, [r3, #0]
   331e4:	2108      	movs	r1, #8
   331e6:	438a      	bics	r2, r1
   331e8:	1c11      	adds	r1, r2, #0
   331ea:	1c02      	adds	r2, r0, #0
   331ec:	430a      	orrs	r2, r1
   331ee:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   331f0:	1dfb      	adds	r3, r7, #7
   331f2:	781b      	ldrb	r3, [r3, #0]
   331f4:	3b06      	subs	r3, #6
   331f6:	425a      	negs	r2, r3
   331f8:	4153      	adcs	r3, r2
   331fa:	b2db      	uxtb	r3, r3
   331fc:	1c1a      	adds	r2, r3, #0
   331fe:	2303      	movs	r3, #3
   33200:	4013      	ands	r3, r2
   33202:	b2da      	uxtb	r2, r3
   33204:	2318      	movs	r3, #24
   33206:	18fb      	adds	r3, r7, r3
   33208:	2103      	movs	r1, #3
   3320a:	400a      	ands	r2, r1
   3320c:	1890      	adds	r0, r2, r2
   3320e:	781a      	ldrb	r2, [r3, #0]
   33210:	2106      	movs	r1, #6
   33212:	438a      	bics	r2, r1
   33214:	1c11      	adds	r1, r2, #0
   33216:	1c02      	adds	r2, r0, #0
   33218:	430a      	orrs	r2, r1
   3321a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3321c:	2318      	movs	r3, #24
   3321e:	18fb      	adds	r3, r7, r3
   33220:	781a      	ldrb	r2, [r3, #0]
   33222:	2314      	movs	r3, #20
   33224:	18fb      	adds	r3, r7, r3
   33226:	0011      	movs	r1, r2
   33228:	0018      	movs	r0, r3
   3322a:	4b0f      	ldr	r3, [pc, #60]	; (33268 <MQTTSerialize_ack+0xe8>)
   3322c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   3322e:	697b      	ldr	r3, [r7, #20]
   33230:	2102      	movs	r1, #2
   33232:	0018      	movs	r0, r3
   33234:	4b0d      	ldr	r3, [pc, #52]	; (3326c <MQTTSerialize_ack+0xec>)
   33236:	4798      	blx	r3
   33238:	0002      	movs	r2, r0
   3323a:	697b      	ldr	r3, [r7, #20]
   3323c:	189b      	adds	r3, r3, r2
   3323e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   33240:	2328      	movs	r3, #40	; 0x28
   33242:	18fb      	adds	r3, r7, r3
   33244:	881a      	ldrh	r2, [r3, #0]
   33246:	2314      	movs	r3, #20
   33248:	18fb      	adds	r3, r7, r3
   3324a:	0011      	movs	r1, r2
   3324c:	0018      	movs	r0, r3
   3324e:	4b08      	ldr	r3, [pc, #32]	; (33270 <MQTTSerialize_ack+0xf0>)
   33250:	4798      	blx	r3
	rc = ptr - buf;
   33252:	697b      	ldr	r3, [r7, #20]
   33254:	001a      	movs	r2, r3
   33256:	68fb      	ldr	r3, [r7, #12]
   33258:	1ad3      	subs	r3, r2, r3
   3325a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3325c:	69fb      	ldr	r3, [r7, #28]
}
   3325e:	0018      	movs	r0, r3
   33260:	46bd      	mov	sp, r7
   33262:	b008      	add	sp, #32
   33264:	bd80      	pop	{r7, pc}
   33266:	46c0      	nop			; (mov r8, r8)
   33268:	00032d5b 	.word	0x00032d5b
   3326c:	00032b41 	.word	0x00032b41
   33270:	00032d85 	.word	0x00032d85

00033274 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   33274:	b580      	push	{r7, lr}
   33276:	b084      	sub	sp, #16
   33278:	af00      	add	r7, sp, #0
   3327a:	6078      	str	r0, [r7, #4]
   3327c:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   3327e:	2302      	movs	r3, #2
   33280:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   33282:	2300      	movs	r3, #0
   33284:	60fb      	str	r3, [r7, #12]
   33286:	e014      	b.n	332b2 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   33288:	68fa      	ldr	r2, [r7, #12]
   3328a:	0013      	movs	r3, r2
   3328c:	005b      	lsls	r3, r3, #1
   3328e:	189b      	adds	r3, r3, r2
   33290:	009b      	lsls	r3, r3, #2
   33292:	001a      	movs	r2, r3
   33294:	683b      	ldr	r3, [r7, #0]
   33296:	189b      	adds	r3, r3, r2
   33298:	6818      	ldr	r0, [r3, #0]
   3329a:	6859      	ldr	r1, [r3, #4]
   3329c:	689a      	ldr	r2, [r3, #8]
   3329e:	4b09      	ldr	r3, [pc, #36]	; (332c4 <MQTTSerialize_subscribeLength+0x50>)
   332a0:	4798      	blx	r3
   332a2:	0003      	movs	r3, r0
   332a4:	3303      	adds	r3, #3
   332a6:	68ba      	ldr	r2, [r7, #8]
   332a8:	18d3      	adds	r3, r2, r3
   332aa:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   332ac:	68fb      	ldr	r3, [r7, #12]
   332ae:	3301      	adds	r3, #1
   332b0:	60fb      	str	r3, [r7, #12]
   332b2:	68fa      	ldr	r2, [r7, #12]
   332b4:	687b      	ldr	r3, [r7, #4]
   332b6:	429a      	cmp	r2, r3
   332b8:	dbe6      	blt.n	33288 <MQTTSerialize_subscribeLength+0x14>
	return len;
   332ba:	68bb      	ldr	r3, [r7, #8]
}
   332bc:	0018      	movs	r0, r3
   332be:	46bd      	mov	sp, r7
   332c0:	b004      	add	sp, #16
   332c2:	bd80      	pop	{r7, pc}
   332c4:	00032f15 	.word	0x00032f15

000332c8 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   332c8:	b590      	push	{r4, r7, lr}
   332ca:	b08b      	sub	sp, #44	; 0x2c
   332cc:	af00      	add	r7, sp, #0
   332ce:	60f8      	str	r0, [r7, #12]
   332d0:	60b9      	str	r1, [r7, #8]
   332d2:	0019      	movs	r1, r3
   332d4:	1dfb      	adds	r3, r7, #7
   332d6:	701a      	strb	r2, [r3, #0]
   332d8:	1d3b      	adds	r3, r7, #4
   332da:	1c0a      	adds	r2, r1, #0
   332dc:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   332de:	68fb      	ldr	r3, [r7, #12]
   332e0:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   332e2:	2300      	movs	r3, #0
   332e4:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   332e6:	2300      	movs	r3, #0
   332e8:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   332ea:	2300      	movs	r3, #0
   332ec:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   332ee:	2300      	movs	r3, #0
   332f0:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   332f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   332f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   332f6:	0011      	movs	r1, r2
   332f8:	0018      	movs	r0, r3
   332fa:	4b41      	ldr	r3, [pc, #260]	; (33400 <MQTTSerialize_subscribe+0x138>)
   332fc:	4798      	blx	r3
   332fe:	0003      	movs	r3, r0
   33300:	61fb      	str	r3, [r7, #28]
   33302:	69fb      	ldr	r3, [r7, #28]
   33304:	0018      	movs	r0, r3
   33306:	4b3f      	ldr	r3, [pc, #252]	; (33404 <MQTTSerialize_subscribe+0x13c>)
   33308:	4798      	blx	r3
   3330a:	0002      	movs	r2, r0
   3330c:	68bb      	ldr	r3, [r7, #8]
   3330e:	429a      	cmp	r2, r3
   33310:	dd03      	ble.n	3331a <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   33312:	2302      	movs	r3, #2
   33314:	425b      	negs	r3, r3
   33316:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   33318:	e06c      	b.n	333f4 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   3331a:	2314      	movs	r3, #20
   3331c:	18fb      	adds	r3, r7, r3
   3331e:	2200      	movs	r2, #0
   33320:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   33322:	2314      	movs	r3, #20
   33324:	18fb      	adds	r3, r7, r3
   33326:	781a      	ldrb	r2, [r3, #0]
   33328:	210f      	movs	r1, #15
   3332a:	400a      	ands	r2, r1
   3332c:	1c11      	adds	r1, r2, #0
   3332e:	2280      	movs	r2, #128	; 0x80
   33330:	4252      	negs	r2, r2
   33332:	430a      	orrs	r2, r1
   33334:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   33336:	1dfb      	adds	r3, r7, #7
   33338:	781b      	ldrb	r3, [r3, #0]
   3333a:	2201      	movs	r2, #1
   3333c:	4013      	ands	r3, r2
   3333e:	b2da      	uxtb	r2, r3
   33340:	2314      	movs	r3, #20
   33342:	18fb      	adds	r3, r7, r3
   33344:	2101      	movs	r1, #1
   33346:	400a      	ands	r2, r1
   33348:	00d0      	lsls	r0, r2, #3
   3334a:	781a      	ldrb	r2, [r3, #0]
   3334c:	2108      	movs	r1, #8
   3334e:	438a      	bics	r2, r1
   33350:	1c11      	adds	r1, r2, #0
   33352:	1c02      	adds	r2, r0, #0
   33354:	430a      	orrs	r2, r1
   33356:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   33358:	2314      	movs	r3, #20
   3335a:	18fb      	adds	r3, r7, r3
   3335c:	781a      	ldrb	r2, [r3, #0]
   3335e:	2106      	movs	r1, #6
   33360:	438a      	bics	r2, r1
   33362:	1c11      	adds	r1, r2, #0
   33364:	2202      	movs	r2, #2
   33366:	430a      	orrs	r2, r1
   33368:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3336a:	2314      	movs	r3, #20
   3336c:	18fb      	adds	r3, r7, r3
   3336e:	781a      	ldrb	r2, [r3, #0]
   33370:	2318      	movs	r3, #24
   33372:	18fb      	adds	r3, r7, r3
   33374:	0011      	movs	r1, r2
   33376:	0018      	movs	r0, r3
   33378:	4b23      	ldr	r3, [pc, #140]	; (33408 <MQTTSerialize_subscribe+0x140>)
   3337a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   3337c:	69bb      	ldr	r3, [r7, #24]
   3337e:	69fa      	ldr	r2, [r7, #28]
   33380:	0011      	movs	r1, r2
   33382:	0018      	movs	r0, r3
   33384:	4b21      	ldr	r3, [pc, #132]	; (3340c <MQTTSerialize_subscribe+0x144>)
   33386:	4798      	blx	r3
   33388:	0002      	movs	r2, r0
   3338a:	69bb      	ldr	r3, [r7, #24]
   3338c:	189b      	adds	r3, r3, r2
   3338e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   33390:	1d3b      	adds	r3, r7, #4
   33392:	881a      	ldrh	r2, [r3, #0]
   33394:	2318      	movs	r3, #24
   33396:	18fb      	adds	r3, r7, r3
   33398:	0011      	movs	r1, r2
   3339a:	0018      	movs	r0, r3
   3339c:	4b1c      	ldr	r3, [pc, #112]	; (33410 <MQTTSerialize_subscribe+0x148>)
   3339e:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   333a0:	2300      	movs	r3, #0
   333a2:	623b      	str	r3, [r7, #32]
   333a4:	e01d      	b.n	333e2 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   333a6:	6a3a      	ldr	r2, [r7, #32]
   333a8:	0013      	movs	r3, r2
   333aa:	005b      	lsls	r3, r3, #1
   333ac:	189b      	adds	r3, r3, r2
   333ae:	009b      	lsls	r3, r3, #2
   333b0:	001a      	movs	r2, r3
   333b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   333b4:	189b      	adds	r3, r3, r2
   333b6:	2218      	movs	r2, #24
   333b8:	18b8      	adds	r0, r7, r2
   333ba:	6819      	ldr	r1, [r3, #0]
   333bc:	685a      	ldr	r2, [r3, #4]
   333be:	689b      	ldr	r3, [r3, #8]
   333c0:	4c14      	ldr	r4, [pc, #80]	; (33414 <MQTTSerialize_subscribe+0x14c>)
   333c2:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   333c4:	6a3b      	ldr	r3, [r7, #32]
   333c6:	009b      	lsls	r3, r3, #2
   333c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   333ca:	18d3      	adds	r3, r2, r3
   333cc:	681b      	ldr	r3, [r3, #0]
   333ce:	b2da      	uxtb	r2, r3
   333d0:	2318      	movs	r3, #24
   333d2:	18fb      	adds	r3, r7, r3
   333d4:	0011      	movs	r1, r2
   333d6:	0018      	movs	r0, r3
   333d8:	4b0b      	ldr	r3, [pc, #44]	; (33408 <MQTTSerialize_subscribe+0x140>)
   333da:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   333dc:	6a3b      	ldr	r3, [r7, #32]
   333de:	3301      	adds	r3, #1
   333e0:	623b      	str	r3, [r7, #32]
   333e2:	6a3a      	ldr	r2, [r7, #32]
   333e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   333e6:	429a      	cmp	r2, r3
   333e8:	dbdd      	blt.n	333a6 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   333ea:	69bb      	ldr	r3, [r7, #24]
   333ec:	001a      	movs	r2, r3
   333ee:	68fb      	ldr	r3, [r7, #12]
   333f0:	1ad3      	subs	r3, r2, r3
   333f2:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   333f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   333f6:	0018      	movs	r0, r3
   333f8:	46bd      	mov	sp, r7
   333fa:	b00b      	add	sp, #44	; 0x2c
   333fc:	bd90      	pop	{r4, r7, pc}
   333fe:	46c0      	nop			; (mov r8, r8)
   33400:	00033275 	.word	0x00033275
   33404:	00032c39 	.word	0x00032c39
   33408:	00032d5b 	.word	0x00032d5b
   3340c:	00032b41 	.word	0x00032b41
   33410:	00032d85 	.word	0x00032d85
   33414:	00032e2d 	.word	0x00032e2d

00033418 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   33418:	b590      	push	{r4, r7, lr}
   3341a:	b08b      	sub	sp, #44	; 0x2c
   3341c:	af00      	add	r7, sp, #0
   3341e:	60f8      	str	r0, [r7, #12]
   33420:	60b9      	str	r1, [r7, #8]
   33422:	607a      	str	r2, [r7, #4]
   33424:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   33426:	2300      	movs	r3, #0
   33428:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3342c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   3342e:	2300      	movs	r3, #0
   33430:	623b      	str	r3, [r7, #32]
	int rc = 0;
   33432:	2300      	movs	r3, #0
   33434:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   33436:	2318      	movs	r3, #24
   33438:	18fb      	adds	r3, r7, r3
   3343a:	0018      	movs	r0, r3
   3343c:	4b2c      	ldr	r3, [pc, #176]	; (334f0 <MQTTDeserialize_suback+0xd8>)
   3343e:	4798      	blx	r3
   33440:	0003      	movs	r3, r0
   33442:	001a      	movs	r2, r3
   33444:	231c      	movs	r3, #28
   33446:	18fb      	adds	r3, r7, r3
   33448:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   3344a:	231c      	movs	r3, #28
   3344c:	18fb      	adds	r3, r7, r3
   3344e:	781b      	ldrb	r3, [r3, #0]
   33450:	220f      	movs	r2, #15
   33452:	4393      	bics	r3, r2
   33454:	b2db      	uxtb	r3, r3
   33456:	2b90      	cmp	r3, #144	; 0x90
   33458:	d142      	bne.n	334e0 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   3345a:	69bb      	ldr	r3, [r7, #24]
   3345c:	2214      	movs	r2, #20
   3345e:	18ba      	adds	r2, r7, r2
   33460:	0011      	movs	r1, r2
   33462:	0018      	movs	r0, r3
   33464:	4b23      	ldr	r3, [pc, #140]	; (334f4 <MQTTDeserialize_suback+0xdc>)
   33466:	4798      	blx	r3
   33468:	0003      	movs	r3, r0
   3346a:	627b      	str	r3, [r7, #36]	; 0x24
   3346c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3346e:	69bb      	ldr	r3, [r7, #24]
   33470:	189b      	adds	r3, r3, r2
   33472:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   33474:	69bb      	ldr	r3, [r7, #24]
   33476:	697a      	ldr	r2, [r7, #20]
   33478:	189b      	adds	r3, r3, r2
   3347a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   3347c:	6a3b      	ldr	r3, [r7, #32]
   3347e:	69ba      	ldr	r2, [r7, #24]
   33480:	1a9b      	subs	r3, r3, r2
   33482:	2b01      	cmp	r3, #1
   33484:	dd2e      	ble.n	334e4 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   33486:	2318      	movs	r3, #24
   33488:	18fb      	adds	r3, r7, r3
   3348a:	0018      	movs	r0, r3
   3348c:	4b1a      	ldr	r3, [pc, #104]	; (334f8 <MQTTDeserialize_suback+0xe0>)
   3348e:	4798      	blx	r3
   33490:	0003      	movs	r3, r0
   33492:	b29a      	uxth	r2, r3
   33494:	68fb      	ldr	r3, [r7, #12]
   33496:	801a      	strh	r2, [r3, #0]

	*count = 0;
   33498:	687b      	ldr	r3, [r7, #4]
   3349a:	2200      	movs	r2, #0
   3349c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   3349e:	e018      	b.n	334d2 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   334a0:	687b      	ldr	r3, [r7, #4]
   334a2:	681a      	ldr	r2, [r3, #0]
   334a4:	68bb      	ldr	r3, [r7, #8]
   334a6:	429a      	cmp	r2, r3
   334a8:	dd03      	ble.n	334b2 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   334aa:	2301      	movs	r3, #1
   334ac:	425b      	negs	r3, r3
   334ae:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   334b0:	e019      	b.n	334e6 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   334b2:	687b      	ldr	r3, [r7, #4]
   334b4:	681a      	ldr	r2, [r3, #0]
   334b6:	1c51      	adds	r1, r2, #1
   334b8:	687b      	ldr	r3, [r7, #4]
   334ba:	6019      	str	r1, [r3, #0]
   334bc:	0013      	movs	r3, r2
   334be:	009b      	lsls	r3, r3, #2
   334c0:	683a      	ldr	r2, [r7, #0]
   334c2:	18d4      	adds	r4, r2, r3
   334c4:	2318      	movs	r3, #24
   334c6:	18fb      	adds	r3, r7, r3
   334c8:	0018      	movs	r0, r3
   334ca:	4b09      	ldr	r3, [pc, #36]	; (334f0 <MQTTDeserialize_suback+0xd8>)
   334cc:	4798      	blx	r3
   334ce:	0003      	movs	r3, r0
   334d0:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   334d2:	69ba      	ldr	r2, [r7, #24]
   334d4:	6a3b      	ldr	r3, [r7, #32]
   334d6:	429a      	cmp	r2, r3
   334d8:	d3e2      	bcc.n	334a0 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   334da:	2301      	movs	r3, #1
   334dc:	627b      	str	r3, [r7, #36]	; 0x24
   334de:	e002      	b.n	334e6 <MQTTDeserialize_suback+0xce>
		goto exit;
   334e0:	46c0      	nop			; (mov r8, r8)
   334e2:	e000      	b.n	334e6 <MQTTDeserialize_suback+0xce>
		goto exit;
   334e4:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   334e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   334e8:	0018      	movs	r0, r3
   334ea:	46bd      	mov	sp, r7
   334ec:	b00b      	add	sp, #44	; 0x2c
   334ee:	bd90      	pop	{r4, r7, pc}
   334f0:	00032d2f 	.word	0x00032d2f
   334f4:	00032cc9 	.word	0x00032cc9
   334f8:	00032cfd 	.word	0x00032cfd

000334fc <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   334fc:	b580      	push	{r7, lr}
   334fe:	b082      	sub	sp, #8
   33500:	af00      	add	r7, sp, #0
   33502:	6078      	str	r0, [r7, #4]
	config->port = 80;
   33504:	687b      	ldr	r3, [r7, #4]
   33506:	2250      	movs	r2, #80	; 0x50
   33508:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   3350a:	687b      	ldr	r3, [r7, #4]
   3350c:	2200      	movs	r2, #0
   3350e:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   33510:	687b      	ldr	r3, [r7, #4]
   33512:	4a0b      	ldr	r2, [pc, #44]	; (33540 <http_client_get_config_defaults+0x44>)
   33514:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   33516:	687b      	ldr	r3, [r7, #4]
   33518:	2200      	movs	r2, #0
   3351a:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   3351c:	687b      	ldr	r3, [r7, #4]
   3351e:	2200      	movs	r2, #0
   33520:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   33522:	687b      	ldr	r3, [r7, #4]
   33524:	2280      	movs	r2, #128	; 0x80
   33526:	0052      	lsls	r2, r2, #1
   33528:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   3352a:	687b      	ldr	r3, [r7, #4]
   3352c:	2252      	movs	r2, #82	; 0x52
   3352e:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   33530:	687b      	ldr	r3, [r7, #4]
   33532:	4a04      	ldr	r2, [pc, #16]	; (33544 <http_client_get_config_defaults+0x48>)
   33534:	619a      	str	r2, [r3, #24]
}
   33536:	46c0      	nop			; (mov r8, r8)
   33538:	46bd      	mov	sp, r7
   3353a:	b002      	add	sp, #8
   3353c:	bd80      	pop	{r7, pc}
   3353e:	46c0      	nop			; (mov r8, r8)
   33540:	00004e20 	.word	0x00004e20
   33544:	0003cd80 	.word	0x0003cd80

00033548 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   33548:	b590      	push	{r4, r7, lr}
   3354a:	b083      	sub	sp, #12
   3354c:	af00      	add	r7, sp, #0
   3354e:	6078      	str	r0, [r7, #4]
   33550:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   33552:	687b      	ldr	r3, [r7, #4]
   33554:	2b00      	cmp	r3, #0
   33556:	d002      	beq.n	3355e <http_client_init+0x16>
   33558:	683b      	ldr	r3, [r7, #0]
   3355a:	2b00      	cmp	r3, #0
   3355c:	d102      	bne.n	33564 <http_client_init+0x1c>
		return -EINVAL;
   3355e:	2316      	movs	r3, #22
   33560:	425b      	negs	r3, r3
   33562:	e058      	b.n	33616 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   33564:	683b      	ldr	r3, [r7, #0]
   33566:	691b      	ldr	r3, [r3, #16]
   33568:	2b00      	cmp	r3, #0
   3356a:	d102      	bne.n	33572 <http_client_init+0x2a>
		return -EINVAL;
   3356c:	2316      	movs	r3, #22
   3356e:	425b      	negs	r3, r3
   33570:	e051      	b.n	33616 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   33572:	683b      	ldr	r3, [r7, #0]
   33574:	685b      	ldr	r3, [r3, #4]
   33576:	2b00      	cmp	r3, #0
   33578:	d102      	bne.n	33580 <http_client_init+0x38>
		return -EINVAL;
   3357a:	2316      	movs	r3, #22
   3357c:	425b      	negs	r3, r3
   3357e:	e04a      	b.n	33616 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   33580:	683b      	ldr	r3, [r7, #0]
   33582:	695b      	ldr	r3, [r3, #20]
   33584:	2b51      	cmp	r3, #81	; 0x51
   33586:	d802      	bhi.n	3358e <http_client_init+0x46>
		return -EINVAL;
   33588:	2316      	movs	r3, #22
   3358a:	425b      	negs	r3, r3
   3358c:	e043      	b.n	33616 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   3358e:	687b      	ldr	r3, [r7, #4]
   33590:	22e8      	movs	r2, #232	; 0xe8
   33592:	2100      	movs	r1, #0
   33594:	0018      	movs	r0, r3
   33596:	4b22      	ldr	r3, [pc, #136]	; (33620 <http_client_init+0xd8>)
   33598:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   3359a:	687b      	ldr	r3, [r7, #4]
   3359c:	3350      	adds	r3, #80	; 0x50
   3359e:	6839      	ldr	r1, [r7, #0]
   335a0:	221c      	movs	r2, #28
   335a2:	0018      	movs	r0, r3
   335a4:	4b1f      	ldr	r3, [pc, #124]	; (33624 <http_client_init+0xdc>)
   335a6:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   335a8:	687b      	ldr	r3, [r7, #4]
   335aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   335ac:	2b00      	cmp	r3, #0
   335ae:	d115      	bne.n	335dc <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   335b0:	683b      	ldr	r3, [r7, #0]
   335b2:	691b      	ldr	r3, [r3, #16]
   335b4:	0018      	movs	r0, r3
   335b6:	4b1c      	ldr	r3, [pc, #112]	; (33628 <http_client_init+0xe0>)
   335b8:	4798      	blx	r3
   335ba:	0003      	movs	r3, r0
   335bc:	001a      	movs	r2, r3
   335be:	687b      	ldr	r3, [r7, #4]
   335c0:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   335c2:	687b      	ldr	r3, [r7, #4]
   335c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   335c6:	2b00      	cmp	r3, #0
   335c8:	d102      	bne.n	335d0 <http_client_init+0x88>
			return -ENOMEM;
   335ca:	230c      	movs	r3, #12
   335cc:	425b      	negs	r3, r3
   335ce:	e022      	b.n	33616 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   335d0:	687b      	ldr	r3, [r7, #4]
   335d2:	2241      	movs	r2, #65	; 0x41
   335d4:	5c99      	ldrb	r1, [r3, r2]
   335d6:	2004      	movs	r0, #4
   335d8:	4301      	orrs	r1, r0
   335da:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   335dc:	683b      	ldr	r3, [r7, #0]
   335de:	891b      	ldrh	r3, [r3, #8]
   335e0:	2b00      	cmp	r3, #0
   335e2:	d010      	beq.n	33606 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   335e4:	683b      	ldr	r3, [r7, #0]
   335e6:	6858      	ldr	r0, [r3, #4]
   335e8:	687a      	ldr	r2, [r7, #4]
   335ea:	4910      	ldr	r1, [pc, #64]	; (3362c <http_client_init+0xe4>)
   335ec:	2300      	movs	r3, #0
   335ee:	4c10      	ldr	r4, [pc, #64]	; (33630 <http_client_init+0xe8>)
   335f0:	47a0      	blx	r4
   335f2:	0002      	movs	r2, r0
   335f4:	687b      	ldr	r3, [r7, #4]
   335f6:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   335f8:	687b      	ldr	r3, [r7, #4]
   335fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   335fc:	2b00      	cmp	r3, #0
   335fe:	da02      	bge.n	33606 <http_client_init+0xbe>
			return -ENOSPC;
   33600:	231c      	movs	r3, #28
   33602:	425b      	negs	r3, r3
   33604:	e007      	b.n	33616 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   33606:	687b      	ldr	r3, [r7, #4]
   33608:	2200      	movs	r2, #0
   3360a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   3360c:	687b      	ldr	r3, [r7, #4]
   3360e:	22d8      	movs	r2, #216	; 0xd8
   33610:	2100      	movs	r1, #0
   33612:	5099      	str	r1, [r3, r2]

	return 0;
   33614:	2300      	movs	r3, #0
}
   33616:	0018      	movs	r0, r3
   33618:	46bd      	mov	sp, r7
   3361a:	b003      	add	sp, #12
   3361c:	bd90      	pop	{r4, r7, pc}
   3361e:	46c0      	nop			; (mov r8, r8)
   33620:	00037903 	.word	0x00037903
   33624:	000378cd 	.word	0x000378cd
   33628:	000378a5 	.word	0x000378a5
   3362c:	000338f9 	.word	0x000338f9
   33630:	00034f9d 	.word	0x00034f9d

00033634 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   33634:	b580      	push	{r7, lr}
   33636:	b082      	sub	sp, #8
   33638:	af00      	add	r7, sp, #0
   3363a:	6078      	str	r0, [r7, #4]
   3363c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   3363e:	687b      	ldr	r3, [r7, #4]
   33640:	2b00      	cmp	r3, #0
   33642:	d102      	bne.n	3364a <http_client_register_callback+0x16>
		return -EINVAL;
   33644:	2316      	movs	r3, #22
   33646:	425b      	negs	r3, r3
   33648:	e003      	b.n	33652 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   3364a:	687b      	ldr	r3, [r7, #4]
   3364c:	683a      	ldr	r2, [r7, #0]
   3364e:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   33650:	2300      	movs	r3, #0
}
   33652:	0018      	movs	r0, r3
   33654:	46bd      	mov	sp, r7
   33656:	b002      	add	sp, #8
   33658:	bd80      	pop	{r7, pc}
	...

0003365c <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   3365c:	b580      	push	{r7, lr}
   3365e:	b082      	sub	sp, #8
   33660:	af00      	add	r7, sp, #0
   33662:	6078      	str	r0, [r7, #4]
	switch (err) {
   33664:	687b      	ldr	r3, [r7, #4]
   33666:	330e      	adds	r3, #14
   33668:	2b0e      	cmp	r3, #14
   3366a:	d825      	bhi.n	336b8 <_hwerr_to_stderr+0x5c>
   3366c:	009a      	lsls	r2, r3, #2
   3366e:	4b18      	ldr	r3, [pc, #96]	; (336d0 <_hwerr_to_stderr+0x74>)
   33670:	18d3      	adds	r3, r2, r3
   33672:	681b      	ldr	r3, [r3, #0]
   33674:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   33676:	2305      	movs	r3, #5
   33678:	425b      	negs	r3, r3
   3367a:	e024      	b.n	336c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   3367c:	2302      	movs	r3, #2
   3367e:	425b      	negs	r3, r3
   33680:	e021      	b.n	336c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   33682:	2370      	movs	r3, #112	; 0x70
   33684:	425b      	negs	r3, r3
   33686:	e01e      	b.n	336c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   33688:	230c      	movs	r3, #12
   3368a:	425b      	negs	r3, r3
   3368c:	e01b      	b.n	336c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   3368e:	2316      	movs	r3, #22
   33690:	425b      	negs	r3, r3
   33692:	e018      	b.n	336c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   33694:	230c      	movs	r3, #12
   33696:	425b      	negs	r3, r3
   33698:	e015      	b.n	336c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   3369a:	2305      	movs	r3, #5
   3369c:	425b      	negs	r3, r3
   3369e:	e012      	b.n	336c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   336a0:	2379      	movs	r3, #121	; 0x79
   336a2:	425b      	negs	r3, r3
   336a4:	e00f      	b.n	336c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   336a6:	2368      	movs	r3, #104	; 0x68
   336a8:	425b      	negs	r3, r3
   336aa:	e00c      	b.n	336c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   336ac:	230b      	movs	r3, #11
   336ae:	425b      	negs	r3, r3
   336b0:	e009      	b.n	336c6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   336b2:	2310      	movs	r3, #16
   336b4:	425b      	negs	r3, r3
   336b6:	e006      	b.n	336c6 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   336b8:	687b      	ldr	r3, [r7, #4]
   336ba:	2b00      	cmp	r3, #0
   336bc:	da02      	bge.n	336c4 <_hwerr_to_stderr+0x68>
				return -EIO;
   336be:	2305      	movs	r3, #5
   336c0:	425b      	negs	r3, r3
   336c2:	e000      	b.n	336c6 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   336c4:	2300      	movs	r3, #0
	}
}
   336c6:	0018      	movs	r0, r3
   336c8:	46bd      	mov	sp, r7
   336ca:	b002      	add	sp, #8
   336cc:	bd80      	pop	{r7, pc}
   336ce:	46c0      	nop			; (mov r8, r8)
   336d0:	0003cebc 	.word	0x0003cebc

000336d4 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   336d4:	b580      	push	{r7, lr}
   336d6:	b08a      	sub	sp, #40	; 0x28
   336d8:	af00      	add	r7, sp, #0
   336da:	603a      	str	r2, [r7, #0]
   336dc:	1dfb      	adds	r3, r7, #7
   336de:	1c02      	adds	r2, r0, #0
   336e0:	701a      	strb	r2, [r3, #0]
   336e2:	1dbb      	adds	r3, r7, #6
   336e4:	1c0a      	adds	r2, r1, #0
   336e6:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   336e8:	1dfb      	adds	r3, r7, #7
   336ea:	2200      	movs	r2, #0
   336ec:	569a      	ldrsb	r2, [r3, r2]
   336ee:	4b4b      	ldr	r3, [pc, #300]	; (3381c <http_client_socket_event_handler+0x148>)
   336f0:	0092      	lsls	r2, r2, #2
   336f2:	58d3      	ldr	r3, [r2, r3]
   336f4:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   336f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   336f8:	2b00      	cmp	r3, #0
   336fa:	d100      	bne.n	336fe <http_client_socket_event_handler+0x2a>
   336fc:	e08a      	b.n	33814 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   336fe:	1dbb      	adds	r3, r7, #6
   33700:	781b      	ldrb	r3, [r3, #0]
   33702:	2b06      	cmp	r3, #6
   33704:	d040      	beq.n	33788 <http_client_socket_event_handler+0xb4>
   33706:	2b07      	cmp	r3, #7
   33708:	d060      	beq.n	337cc <http_client_socket_event_handler+0xf8>
   3370a:	2b05      	cmp	r3, #5
   3370c:	d000      	beq.n	33710 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   3370e:	e082      	b.n	33816 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   33710:	683b      	ldr	r3, [r7, #0]
   33712:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   33714:	6a3b      	ldr	r3, [r7, #32]
   33716:	785b      	ldrb	r3, [r3, #1]
   33718:	b25b      	sxtb	r3, r3
   3371a:	001a      	movs	r2, r3
   3371c:	230c      	movs	r3, #12
   3371e:	18fb      	adds	r3, r7, r3
   33720:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   33722:	6a3b      	ldr	r3, [r7, #32]
   33724:	785b      	ldrb	r3, [r3, #1]
   33726:	b25b      	sxtb	r3, r3
   33728:	2b00      	cmp	r3, #0
   3372a:	da0c      	bge.n	33746 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   3372c:	6a3b      	ldr	r3, [r7, #32]
   3372e:	785b      	ldrb	r3, [r3, #1]
   33730:	b25b      	sxtb	r3, r3
   33732:	0018      	movs	r0, r3
   33734:	4b3a      	ldr	r3, [pc, #232]	; (33820 <http_client_socket_event_handler+0x14c>)
   33736:	4798      	blx	r3
   33738:	0002      	movs	r2, r0
   3373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3373c:	0011      	movs	r1, r2
   3373e:	0018      	movs	r0, r3
   33740:	4b38      	ldr	r3, [pc, #224]	; (33824 <http_client_socket_event_handler+0x150>)
   33742:	4798      	blx	r3
    	break;
   33744:	e067      	b.n	33816 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   33746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3374a:	2b00      	cmp	r3, #0
   3374c:	d006      	beq.n	3375c <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   3374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33752:	220c      	movs	r2, #12
   33754:	18ba      	adds	r2, r7, r2
   33756:	6a78      	ldr	r0, [r7, #36]	; 0x24
   33758:	2100      	movs	r1, #0
   3375a:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   3375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3375e:	2203      	movs	r2, #3
   33760:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   33762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33764:	6d58      	ldr	r0, [r3, #84]	; 0x54
   33766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33768:	6c99      	ldr	r1, [r3, #72]	; 0x48
   3376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3376c:	2258      	movs	r2, #88	; 0x58
   3376e:	5a9b      	ldrh	r3, [r3, r2]
   33770:	001a      	movs	r2, r3
   33772:	4b2d      	ldr	r3, [pc, #180]	; (33828 <http_client_socket_event_handler+0x154>)
   33774:	4798      	blx	r3
    		_http_client_recv_packet(module);
   33776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33778:	0018      	movs	r0, r3
   3377a:	4b2c      	ldr	r3, [pc, #176]	; (3382c <http_client_socket_event_handler+0x158>)
   3377c:	4798      	blx	r3
			_http_client_request(module);
   3377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33780:	0018      	movs	r0, r3
   33782:	4b2b      	ldr	r3, [pc, #172]	; (33830 <http_client_socket_event_handler+0x15c>)
   33784:	4798      	blx	r3
    	break;
   33786:	e046      	b.n	33816 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   33788:	683b      	ldr	r3, [r7, #0]
   3378a:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   3378c:	69fb      	ldr	r3, [r7, #28]
   3378e:	2204      	movs	r2, #4
   33790:	5e9b      	ldrsh	r3, [r3, r2]
   33792:	2b00      	cmp	r3, #0
   33794:	dd09      	ble.n	337aa <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   33796:	69fb      	ldr	r3, [r7, #28]
   33798:	2204      	movs	r2, #4
   3379a:	5e9b      	ldrsh	r3, [r3, r2]
   3379c:	001a      	movs	r2, r3
   3379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   337a0:	0011      	movs	r1, r2
   337a2:	0018      	movs	r0, r3
   337a4:	4b23      	ldr	r3, [pc, #140]	; (33834 <http_client_socket_event_handler+0x160>)
   337a6:	4798      	blx	r3
   337a8:	e00b      	b.n	337c2 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   337aa:	69fb      	ldr	r3, [r7, #28]
   337ac:	2204      	movs	r2, #4
   337ae:	5e9b      	ldrsh	r3, [r3, r2]
   337b0:	0018      	movs	r0, r3
   337b2:	4b1b      	ldr	r3, [pc, #108]	; (33820 <http_client_socket_event_handler+0x14c>)
   337b4:	4798      	blx	r3
   337b6:	0002      	movs	r2, r0
   337b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   337ba:	0011      	movs	r1, r2
   337bc:	0018      	movs	r0, r3
   337be:	4b19      	ldr	r3, [pc, #100]	; (33824 <http_client_socket_event_handler+0x150>)
   337c0:	4798      	blx	r3
		_http_client_recv_packet(module);
   337c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   337c4:	0018      	movs	r0, r3
   337c6:	4b19      	ldr	r3, [pc, #100]	; (3382c <http_client_socket_event_handler+0x158>)
   337c8:	4798      	blx	r3
		break;
   337ca:	e024      	b.n	33816 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   337cc:	231a      	movs	r3, #26
   337ce:	18fb      	adds	r3, r7, r3
   337d0:	683a      	ldr	r2, [r7, #0]
   337d2:	8812      	ldrh	r2, [r2, #0]
   337d4:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   337d6:	231a      	movs	r3, #26
   337d8:	18fb      	adds	r3, r7, r3
   337da:	2200      	movs	r2, #0
   337dc:	5e9b      	ldrsh	r3, [r3, r2]
   337de:	2b00      	cmp	r3, #0
   337e0:	da0d      	bge.n	337fe <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   337e2:	231a      	movs	r3, #26
   337e4:	18fb      	adds	r3, r7, r3
   337e6:	2200      	movs	r2, #0
   337e8:	5e9b      	ldrsh	r3, [r3, r2]
   337ea:	0018      	movs	r0, r3
   337ec:	4b0c      	ldr	r3, [pc, #48]	; (33820 <http_client_socket_event_handler+0x14c>)
   337ee:	4798      	blx	r3
   337f0:	0002      	movs	r2, r0
   337f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   337f4:	0011      	movs	r1, r2
   337f6:	0018      	movs	r0, r3
   337f8:	4b0a      	ldr	r3, [pc, #40]	; (33824 <http_client_socket_event_handler+0x150>)
   337fa:	4798      	blx	r3
   337fc:	e003      	b.n	33806 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   337fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33800:	0018      	movs	r0, r3
   33802:	4b0b      	ldr	r3, [pc, #44]	; (33830 <http_client_socket_event_handler+0x15c>)
   33804:	4798      	blx	r3
		module->sending = 0;
   33806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33808:	2241      	movs	r2, #65	; 0x41
   3380a:	5c99      	ldrb	r1, [r3, r2]
   3380c:	2001      	movs	r0, #1
   3380e:	4381      	bics	r1, r0
   33810:	5499      	strb	r1, [r3, r2]
    	break;
   33812:	e000      	b.n	33816 <http_client_socket_event_handler+0x142>
		return;
   33814:	46c0      	nop			; (mov r8, r8)
	}

}
   33816:	46bd      	mov	sp, r7
   33818:	b00a      	add	sp, #40	; 0x28
   3381a:	bd80      	pop	{r7, pc}
   3381c:	20004620 	.word	0x20004620
   33820:	0003365d 	.word	0x0003365d
   33824:	00033cd1 	.word	0x00033cd1
   33828:	0003502d 	.word	0x0003502d
   3382c:	0003455d 	.word	0x0003455d
   33830:	00033e25 	.word	0x00033e25
   33834:	000345c1 	.word	0x000345c1

00033838 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   33838:	b580      	push	{r7, lr}
   3383a:	b088      	sub	sp, #32
   3383c:	af00      	add	r7, sp, #0
   3383e:	6078      	str	r0, [r7, #4]
   33840:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   33842:	2300      	movs	r3, #0
   33844:	61fb      	str	r3, [r7, #28]
   33846:	e048      	b.n	338da <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   33848:	4b27      	ldr	r3, [pc, #156]	; (338e8 <http_client_socket_resolve_handler+0xb0>)
   3384a:	69fa      	ldr	r2, [r7, #28]
   3384c:	0092      	lsls	r2, r2, #2
   3384e:	58d3      	ldr	r3, [r2, r3]
   33850:	2b00      	cmp	r3, #0
   33852:	d03f      	beq.n	338d4 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   33854:	4b24      	ldr	r3, [pc, #144]	; (338e8 <http_client_socket_resolve_handler+0xb0>)
   33856:	69fa      	ldr	r2, [r7, #28]
   33858:	0092      	lsls	r2, r2, #2
   3385a:	58d3      	ldr	r3, [r2, r3]
   3385c:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   3385e:	69bb      	ldr	r3, [r7, #24]
   33860:	1c5a      	adds	r2, r3, #1
   33862:	687b      	ldr	r3, [r7, #4]
   33864:	0011      	movs	r1, r2
   33866:	0018      	movs	r0, r3
   33868:	4b20      	ldr	r3, [pc, #128]	; (338ec <http_client_socket_resolve_handler+0xb4>)
   3386a:	4798      	blx	r3
   3386c:	1e03      	subs	r3, r0, #0
   3386e:	d131      	bne.n	338d4 <http_client_socket_resolve_handler+0x9c>
   33870:	69bb      	ldr	r3, [r7, #24]
   33872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33874:	2b01      	cmp	r3, #1
   33876:	d12d      	bne.n	338d4 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   33878:	683b      	ldr	r3, [r7, #0]
   3387a:	2b00      	cmp	r3, #0
   3387c:	d107      	bne.n	3388e <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   3387e:	2376      	movs	r3, #118	; 0x76
   33880:	425a      	negs	r2, r3
   33882:	69bb      	ldr	r3, [r7, #24]
   33884:	0011      	movs	r1, r2
   33886:	0018      	movs	r0, r3
   33888:	4b19      	ldr	r3, [pc, #100]	; (338f0 <http_client_socket_resolve_handler+0xb8>)
   3388a:	4798      	blx	r3
					return;
   3388c:	e028      	b.n	338e0 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   3388e:	2308      	movs	r3, #8
   33890:	18fb      	adds	r3, r7, r3
   33892:	2202      	movs	r2, #2
   33894:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   33896:	69bb      	ldr	r3, [r7, #24]
   33898:	2250      	movs	r2, #80	; 0x50
   3389a:	5a9b      	ldrh	r3, [r3, r2]
   3389c:	021b      	lsls	r3, r3, #8
   3389e:	b21a      	sxth	r2, r3
   338a0:	69bb      	ldr	r3, [r7, #24]
   338a2:	2150      	movs	r1, #80	; 0x50
   338a4:	5a5b      	ldrh	r3, [r3, r1]
   338a6:	0a1b      	lsrs	r3, r3, #8
   338a8:	b29b      	uxth	r3, r3
   338aa:	b21b      	sxth	r3, r3
   338ac:	4313      	orrs	r3, r2
   338ae:	b21b      	sxth	r3, r3
   338b0:	b29a      	uxth	r2, r3
   338b2:	2308      	movs	r3, #8
   338b4:	18fb      	adds	r3, r7, r3
   338b6:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   338b8:	2308      	movs	r3, #8
   338ba:	18fb      	adds	r3, r7, r3
   338bc:	683a      	ldr	r2, [r7, #0]
   338be:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   338c0:	69bb      	ldr	r3, [r7, #24]
   338c2:	781b      	ldrb	r3, [r3, #0]
   338c4:	b25b      	sxtb	r3, r3
   338c6:	2208      	movs	r2, #8
   338c8:	18b9      	adds	r1, r7, r2
   338ca:	2210      	movs	r2, #16
   338cc:	0018      	movs	r0, r3
   338ce:	4b09      	ldr	r3, [pc, #36]	; (338f4 <http_client_socket_resolve_handler+0xbc>)
   338d0:	4798      	blx	r3
				return;
   338d2:	e005      	b.n	338e0 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   338d4:	69fb      	ldr	r3, [r7, #28]
   338d6:	3301      	adds	r3, #1
   338d8:	61fb      	str	r3, [r7, #28]
   338da:	69fb      	ldr	r3, [r7, #28]
   338dc:	2b06      	cmp	r3, #6
   338de:	ddb3      	ble.n	33848 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   338e0:	46bd      	mov	sp, r7
   338e2:	b008      	add	sp, #32
   338e4:	bd80      	pop	{r7, pc}
   338e6:	46c0      	nop			; (mov r8, r8)
   338e8:	20004620 	.word	0x20004620
   338ec:	00037c5b 	.word	0x00037c5b
   338f0:	00033cd1 	.word	0x00033cd1
   338f4:	000281f5 	.word	0x000281f5

000338f8 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   338f8:	b580      	push	{r7, lr}
   338fa:	b086      	sub	sp, #24
   338fc:	af00      	add	r7, sp, #0
   338fe:	60f8      	str	r0, [r7, #12]
   33900:	60b9      	str	r1, [r7, #8]
   33902:	607a      	str	r2, [r7, #4]
   33904:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   33906:	687b      	ldr	r3, [r7, #4]
   33908:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   3390a:	697b      	ldr	r3, [r7, #20]
   3390c:	2b00      	cmp	r3, #0
   3390e:	d007      	beq.n	33920 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   33910:	233e      	movs	r3, #62	; 0x3e
   33912:	425a      	negs	r2, r3
   33914:	697b      	ldr	r3, [r7, #20]
   33916:	0011      	movs	r1, r2
   33918:	0018      	movs	r0, r3
   3391a:	4b03      	ldr	r3, [pc, #12]	; (33928 <http_client_timer_callback+0x30>)
   3391c:	4798      	blx	r3
   3391e:	e000      	b.n	33922 <http_client_timer_callback+0x2a>
		return;
   33920:	46c0      	nop			; (mov r8, r8)
}
   33922:	46bd      	mov	sp, r7
   33924:	b006      	add	sp, #24
   33926:	bd80      	pop	{r7, pc}
   33928:	00033cd1 	.word	0x00033cd1

0003392c <_is_ip>:

static int _is_ip(const char *host)
{
   3392c:	b580      	push	{r7, lr}
   3392e:	b084      	sub	sp, #16
   33930:	af00      	add	r7, sp, #0
   33932:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   33934:	2300      	movs	r3, #0
   33936:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   33938:	e03a      	b.n	339b0 <_is_ip+0x84>
		ch = *host++;
   3393a:	687b      	ldr	r3, [r7, #4]
   3393c:	1c5a      	adds	r2, r3, #1
   3393e:	607a      	str	r2, [r7, #4]
   33940:	220b      	movs	r2, #11
   33942:	18ba      	adds	r2, r7, r2
   33944:	781b      	ldrb	r3, [r3, #0]
   33946:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   33948:	230b      	movs	r3, #11
   3394a:	18fb      	adds	r3, r7, r3
   3394c:	781b      	ldrb	r3, [r3, #0]
   3394e:	2b60      	cmp	r3, #96	; 0x60
   33950:	d904      	bls.n	3395c <_is_ip+0x30>
   33952:	230b      	movs	r3, #11
   33954:	18fb      	adds	r3, r7, r3
   33956:	781b      	ldrb	r3, [r3, #0]
   33958:	2b66      	cmp	r3, #102	; 0x66
   3395a:	d913      	bls.n	33984 <_is_ip+0x58>
   3395c:	230b      	movs	r3, #11
   3395e:	18fb      	adds	r3, r7, r3
   33960:	781b      	ldrb	r3, [r3, #0]
   33962:	2b40      	cmp	r3, #64	; 0x40
   33964:	d904      	bls.n	33970 <_is_ip+0x44>
   33966:	230b      	movs	r3, #11
   33968:	18fb      	adds	r3, r7, r3
   3396a:	781b      	ldrb	r3, [r3, #0]
   3396c:	2b46      	cmp	r3, #70	; 0x46
   3396e:	d909      	bls.n	33984 <_is_ip+0x58>
   33970:	230b      	movs	r3, #11
   33972:	18fb      	adds	r3, r7, r3
   33974:	781b      	ldrb	r3, [r3, #0]
   33976:	2b3a      	cmp	r3, #58	; 0x3a
   33978:	d004      	beq.n	33984 <_is_ip+0x58>
   3397a:	230b      	movs	r3, #11
   3397c:	18fb      	adds	r3, r7, r3
   3397e:	781b      	ldrb	r3, [r3, #0]
   33980:	2b2f      	cmp	r3, #47	; 0x2f
   33982:	d102      	bne.n	3398a <_is_ip+0x5e>
			isv6 = 1;
   33984:	2301      	movs	r3, #1
   33986:	60fb      	str	r3, [r7, #12]
   33988:	e012      	b.n	339b0 <_is_ip+0x84>
		} else if (ch == '.') {
   3398a:	230b      	movs	r3, #11
   3398c:	18fb      	adds	r3, r7, r3
   3398e:	781b      	ldrb	r3, [r3, #0]
   33990:	2b2e      	cmp	r3, #46	; 0x2e
   33992:	d104      	bne.n	3399e <_is_ip+0x72>
			if (isv6) {
   33994:	68fb      	ldr	r3, [r7, #12]
   33996:	2b00      	cmp	r3, #0
   33998:	d00a      	beq.n	339b0 <_is_ip+0x84>
				return 0;
   3399a:	2300      	movs	r3, #0
   3399c:	e00d      	b.n	339ba <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   3399e:	230b      	movs	r3, #11
   339a0:	18fb      	adds	r3, r7, r3
   339a2:	781b      	ldrb	r3, [r3, #0]
   339a4:	2230      	movs	r2, #48	; 0x30
   339a6:	4013      	ands	r3, r2
   339a8:	2b30      	cmp	r3, #48	; 0x30
   339aa:	d001      	beq.n	339b0 <_is_ip+0x84>
			return 0;
   339ac:	2300      	movs	r3, #0
   339ae:	e004      	b.n	339ba <_is_ip+0x8e>
	while (*host != '\0') {
   339b0:	687b      	ldr	r3, [r7, #4]
   339b2:	781b      	ldrb	r3, [r3, #0]
   339b4:	2b00      	cmp	r3, #0
   339b6:	d1c0      	bne.n	3393a <_is_ip+0xe>
		}
	}
	return 1;
   339b8:	2301      	movs	r3, #1
}
   339ba:	0018      	movs	r0, r3
   339bc:	46bd      	mov	sp, r7
   339be:	b004      	add	sp, #16
   339c0:	bd80      	pop	{r7, pc}
	...

000339c4 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   339c4:	b5b0      	push	{r4, r5, r7, lr}
   339c6:	b08e      	sub	sp, #56	; 0x38
   339c8:	af00      	add	r7, sp, #0
   339ca:	60f8      	str	r0, [r7, #12]
   339cc:	60b9      	str	r1, [r7, #8]
   339ce:	603b      	str	r3, [r7, #0]
   339d0:	1dfb      	adds	r3, r7, #7
   339d2:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   339d4:	2337      	movs	r3, #55	; 0x37
   339d6:	18fb      	adds	r3, r7, r3
   339d8:	2200      	movs	r2, #0
   339da:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   339dc:	2300      	movs	r3, #0
   339de:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   339e0:	2300      	movs	r3, #0
   339e2:	633b      	str	r3, [r7, #48]	; 0x30
   339e4:	2300      	movs	r3, #0
   339e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   339e8:	2300      	movs	r3, #0
   339ea:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   339ec:	68fb      	ldr	r3, [r7, #12]
   339ee:	2b00      	cmp	r3, #0
   339f0:	d102      	bne.n	339f8 <http_client_send_request+0x34>
		return -EINVAL;
   339f2:	2316      	movs	r3, #22
   339f4:	425b      	negs	r3, r3
   339f6:	e145      	b.n	33c84 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   339f8:	68fb      	ldr	r3, [r7, #12]
   339fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   339fc:	2b02      	cmp	r3, #2
   339fe:	d902      	bls.n	33a06 <http_client_send_request+0x42>
		return -EBUSY;
   33a00:	2310      	movs	r3, #16
   33a02:	425b      	negs	r3, r3
   33a04:	e13e      	b.n	33c84 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   33a06:	49a1      	ldr	r1, [pc, #644]	; (33c8c <http_client_send_request+0x2c8>)
   33a08:	68bb      	ldr	r3, [r7, #8]
   33a0a:	2207      	movs	r2, #7
   33a0c:	0018      	movs	r0, r3
   33a0e:	4ba0      	ldr	r3, [pc, #640]	; (33c90 <http_client_send_request+0x2cc>)
   33a10:	4798      	blx	r3
   33a12:	1e03      	subs	r3, r0, #0
   33a14:	d102      	bne.n	33a1c <http_client_send_request+0x58>
		i = 7;
   33a16:	2307      	movs	r3, #7
   33a18:	633b      	str	r3, [r7, #48]	; 0x30
   33a1a:	e009      	b.n	33a30 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   33a1c:	499d      	ldr	r1, [pc, #628]	; (33c94 <http_client_send_request+0x2d0>)
   33a1e:	68bb      	ldr	r3, [r7, #8]
   33a20:	2208      	movs	r2, #8
   33a22:	0018      	movs	r0, r3
   33a24:	4b9a      	ldr	r3, [pc, #616]	; (33c90 <http_client_send_request+0x2cc>)
   33a26:	4798      	blx	r3
   33a28:	1e03      	subs	r3, r0, #0
   33a2a:	d101      	bne.n	33a30 <http_client_send_request+0x6c>
		i = 8;
   33a2c:	2308      	movs	r3, #8
   33a2e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   33a30:	68fb      	ldr	r3, [r7, #12]
   33a32:	1c5c      	adds	r4, r3, #1
   33a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33a36:	68ba      	ldr	r2, [r7, #8]
   33a38:	18d5      	adds	r5, r2, r3
   33a3a:	68fb      	ldr	r3, [r7, #12]
   33a3c:	3301      	adds	r3, #1
   33a3e:	0018      	movs	r0, r3
   33a40:	4b95      	ldr	r3, [pc, #596]	; (33c98 <http_client_send_request+0x2d4>)
   33a42:	4798      	blx	r3
   33a44:	0003      	movs	r3, r0
   33a46:	001a      	movs	r2, r3
   33a48:	0029      	movs	r1, r5
   33a4a:	0020      	movs	r0, r4
   33a4c:	4b90      	ldr	r3, [pc, #576]	; (33c90 <http_client_send_request+0x2cc>)
   33a4e:	4798      	blx	r3
   33a50:	0003      	movs	r3, r0
   33a52:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   33a54:	e00d      	b.n	33a72 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   33a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   33a58:	1c5a      	adds	r2, r3, #1
   33a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   33a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   33a5e:	68b9      	ldr	r1, [r7, #8]
   33a60:	188a      	adds	r2, r1, r2
   33a62:	7811      	ldrb	r1, [r2, #0]
   33a64:	68fa      	ldr	r2, [r7, #12]
   33a66:	18d3      	adds	r3, r2, r3
   33a68:	1c0a      	adds	r2, r1, #0
   33a6a:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   33a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33a6e:	3301      	adds	r3, #1
   33a70:	633b      	str	r3, [r7, #48]	; 0x30
   33a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33a74:	68ba      	ldr	r2, [r7, #8]
   33a76:	18d3      	adds	r3, r2, r3
   33a78:	781b      	ldrb	r3, [r3, #0]
   33a7a:	2b00      	cmp	r3, #0
   33a7c:	d005      	beq.n	33a8a <http_client_send_request+0xc6>
   33a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33a80:	68ba      	ldr	r2, [r7, #8]
   33a82:	18d3      	adds	r3, r2, r3
   33a84:	781b      	ldrb	r3, [r3, #0]
   33a86:	2b2f      	cmp	r3, #47	; 0x2f
   33a88:	d1e5      	bne.n	33a56 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   33a8a:	68fa      	ldr	r2, [r7, #12]
   33a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   33a8e:	18d3      	adds	r3, r2, r3
   33a90:	3301      	adds	r3, #1
   33a92:	2200      	movs	r2, #0
   33a94:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   33a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33a98:	68ba      	ldr	r2, [r7, #8]
   33a9a:	18d3      	adds	r3, r2, r3
   33a9c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   33a9e:	68fb      	ldr	r3, [r7, #12]
   33aa0:	3301      	adds	r3, #1
   33aa2:	781b      	ldrb	r3, [r3, #0]
   33aa4:	2b00      	cmp	r3, #0
   33aa6:	d102      	bne.n	33aae <http_client_send_request+0xea>
		return -EINVAL;
   33aa8:	2316      	movs	r3, #22
   33aaa:	425b      	negs	r3, r3
   33aac:	e0ea      	b.n	33c84 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   33aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   33ab0:	0018      	movs	r0, r3
   33ab2:	4b79      	ldr	r3, [pc, #484]	; (33c98 <http_client_send_request+0x2d4>)
   33ab4:	4798      	blx	r3
   33ab6:	0003      	movs	r3, r0
   33ab8:	2b3f      	cmp	r3, #63	; 0x3f
   33aba:	d902      	bls.n	33ac2 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   33abc:	235b      	movs	r3, #91	; 0x5b
   33abe:	425b      	negs	r3, r3
   33ac0:	e0e0      	b.n	33c84 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   33ac2:	68fb      	ldr	r3, [r7, #12]
   33ac4:	22d4      	movs	r2, #212	; 0xd4
   33ac6:	589b      	ldr	r3, [r3, r2]
   33ac8:	2b00      	cmp	r3, #0
   33aca:	d005      	beq.n	33ad8 <http_client_send_request+0x114>
		free(module->req.ext_header);
   33acc:	68fb      	ldr	r3, [r7, #12]
   33ace:	22d4      	movs	r2, #212	; 0xd4
   33ad0:	589b      	ldr	r3, [r3, r2]
   33ad2:	0018      	movs	r0, r3
   33ad4:	4b71      	ldr	r3, [pc, #452]	; (33c9c <http_client_send_request+0x2d8>)
   33ad6:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   33ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   33ada:	2b00      	cmp	r3, #0
   33adc:	d010      	beq.n	33b00 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   33ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   33ae0:	0018      	movs	r0, r3
   33ae2:	4b6f      	ldr	r3, [pc, #444]	; (33ca0 <http_client_send_request+0x2dc>)
   33ae4:	4798      	blx	r3
   33ae6:	0003      	movs	r3, r0
   33ae8:	0019      	movs	r1, r3
   33aea:	68fb      	ldr	r3, [r7, #12]
   33aec:	22d4      	movs	r2, #212	; 0xd4
   33aee:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   33af0:	68fb      	ldr	r3, [r7, #12]
   33af2:	22d4      	movs	r2, #212	; 0xd4
   33af4:	589b      	ldr	r3, [r3, r2]
   33af6:	2b00      	cmp	r3, #0
   33af8:	d106      	bne.n	33b08 <http_client_send_request+0x144>
			return -ENOMEM;
   33afa:	230c      	movs	r3, #12
   33afc:	425b      	negs	r3, r3
   33afe:	e0c1      	b.n	33c84 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   33b00:	68fb      	ldr	r3, [r7, #12]
   33b02:	22d4      	movs	r2, #212	; 0xd4
   33b04:	2100      	movs	r1, #0
   33b06:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   33b08:	68fb      	ldr	r3, [r7, #12]
   33b0a:	2241      	movs	r2, #65	; 0x41
   33b0c:	5c99      	ldrb	r1, [r3, r2]
   33b0e:	2001      	movs	r0, #1
   33b10:	4381      	bics	r1, r0
   33b12:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   33b14:	68fb      	ldr	r3, [r7, #12]
   33b16:	2200      	movs	r2, #0
   33b18:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   33b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   33b1c:	781b      	ldrb	r3, [r3, #0]
   33b1e:	2b2f      	cmp	r3, #47	; 0x2f
   33b20:	d107      	bne.n	33b32 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   33b22:	68fb      	ldr	r3, [r7, #12]
   33b24:	3370      	adds	r3, #112	; 0x70
   33b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
   33b28:	0011      	movs	r1, r2
   33b2a:	0018      	movs	r0, r3
   33b2c:	4b5d      	ldr	r3, [pc, #372]	; (33ca4 <http_client_send_request+0x2e0>)
   33b2e:	4798      	blx	r3
   33b30:	e00f      	b.n	33b52 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   33b32:	68fb      	ldr	r3, [r7, #12]
   33b34:	2270      	movs	r2, #112	; 0x70
   33b36:	212f      	movs	r1, #47	; 0x2f
   33b38:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   33b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   33b3c:	781b      	ldrb	r3, [r3, #0]
   33b3e:	2b00      	cmp	r3, #0
   33b40:	d007      	beq.n	33b52 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   33b42:	68fb      	ldr	r3, [r7, #12]
   33b44:	3370      	adds	r3, #112	; 0x70
   33b46:	3301      	adds	r3, #1
   33b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
   33b4a:	0011      	movs	r1, r2
   33b4c:	0018      	movs	r0, r3
   33b4e:	4b55      	ldr	r3, [pc, #340]	; (33ca4 <http_client_send_request+0x2e0>)
   33b50:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   33b52:	683b      	ldr	r3, [r7, #0]
   33b54:	2b00      	cmp	r3, #0
   33b56:	d007      	beq.n	33b68 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   33b58:	68fb      	ldr	r3, [r7, #12]
   33b5a:	33b0      	adds	r3, #176	; 0xb0
   33b5c:	6839      	ldr	r1, [r7, #0]
   33b5e:	2218      	movs	r2, #24
   33b60:	0018      	movs	r0, r3
   33b62:	4b51      	ldr	r3, [pc, #324]	; (33ca8 <http_client_send_request+0x2e4>)
   33b64:	4798      	blx	r3
   33b66:	e006      	b.n	33b76 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   33b68:	68fb      	ldr	r3, [r7, #12]
   33b6a:	33b0      	adds	r3, #176	; 0xb0
   33b6c:	2218      	movs	r2, #24
   33b6e:	2100      	movs	r1, #0
   33b70:	0018      	movs	r0, r3
   33b72:	4b4e      	ldr	r3, [pc, #312]	; (33cac <http_client_send_request+0x2e8>)
   33b74:	4798      	blx	r3
	}

	module->req.method = method;
   33b76:	68fb      	ldr	r3, [r7, #12]
   33b78:	1dfa      	adds	r2, r7, #7
   33b7a:	21c8      	movs	r1, #200	; 0xc8
   33b7c:	7812      	ldrb	r2, [r2, #0]
   33b7e:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   33b80:	68fb      	ldr	r3, [r7, #12]
   33b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33b84:	2b01      	cmp	r3, #1
   33b86:	d003      	beq.n	33b90 <http_client_send_request+0x1cc>
   33b88:	d316      	bcc.n	33bb8 <http_client_send_request+0x1f4>
   33b8a:	2b02      	cmp	r3, #2
   33b8c:	d004      	beq.n	33b98 <http_client_send_request+0x1d4>
   33b8e:	e074      	b.n	33c7a <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   33b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33b92:	2b00      	cmp	r3, #0
   33b94:	d100      	bne.n	33b98 <http_client_send_request+0x1d4>
   33b96:	e073      	b.n	33c80 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   33b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33b9a:	2b00      	cmp	r3, #0
   33b9c:	d107      	bne.n	33bae <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   33b9e:	68fb      	ldr	r3, [r7, #12]
   33ba0:	2203      	movs	r2, #3
   33ba2:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   33ba4:	68fb      	ldr	r3, [r7, #12]
   33ba6:	0018      	movs	r0, r3
   33ba8:	4b41      	ldr	r3, [pc, #260]	; (33cb0 <http_client_send_request+0x2ec>)
   33baa:	4798      	blx	r3
			break;
   33bac:	e069      	b.n	33c82 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   33bae:	68fb      	ldr	r3, [r7, #12]
   33bb0:	2100      	movs	r1, #0
   33bb2:	0018      	movs	r0, r3
   33bb4:	4b3f      	ldr	r3, [pc, #252]	; (33cb4 <http_client_send_request+0x2f0>)
   33bb6:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   33bb8:	68fb      	ldr	r3, [r7, #12]
   33bba:	2252      	movs	r2, #82	; 0x52
   33bbc:	5c9b      	ldrb	r3, [r3, r2]
   33bbe:	2b00      	cmp	r3, #0
   33bc0:	d007      	beq.n	33bd2 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   33bc2:	2337      	movs	r3, #55	; 0x37
   33bc4:	18fb      	adds	r3, r7, r3
   33bc6:	2237      	movs	r2, #55	; 0x37
   33bc8:	18ba      	adds	r2, r7, r2
   33bca:	7812      	ldrb	r2, [r2, #0]
   33bcc:	2101      	movs	r1, #1
   33bce:	430a      	orrs	r2, r1
   33bd0:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   33bd2:	2337      	movs	r3, #55	; 0x37
   33bd4:	18fb      	adds	r3, r7, r3
   33bd6:	781b      	ldrb	r3, [r3, #0]
   33bd8:	001a      	movs	r2, r3
   33bda:	2101      	movs	r1, #1
   33bdc:	2002      	movs	r0, #2
   33bde:	4b36      	ldr	r3, [pc, #216]	; (33cb8 <http_client_send_request+0x2f4>)
   33be0:	4798      	blx	r3
   33be2:	0003      	movs	r3, r0
   33be4:	001a      	movs	r2, r3
   33be6:	68fb      	ldr	r3, [r7, #12]
   33be8:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   33bea:	68fb      	ldr	r3, [r7, #12]
   33bec:	781b      	ldrb	r3, [r3, #0]
   33bee:	b25b      	sxtb	r3, r3
   33bf0:	2b00      	cmp	r3, #0
   33bf2:	db3f      	blt.n	33c74 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   33bf4:	68fb      	ldr	r3, [r7, #12]
   33bf6:	781b      	ldrb	r3, [r3, #0]
   33bf8:	b25b      	sxtb	r3, r3
   33bfa:	001a      	movs	r2, r3
   33bfc:	4b2f      	ldr	r3, [pc, #188]	; (33cbc <http_client_send_request+0x2f8>)
   33bfe:	0092      	lsls	r2, r2, #2
   33c00:	68f9      	ldr	r1, [r7, #12]
   33c02:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   33c04:	68fb      	ldr	r3, [r7, #12]
   33c06:	3301      	adds	r3, #1
   33c08:	0018      	movs	r0, r3
   33c0a:	4b2d      	ldr	r3, [pc, #180]	; (33cc0 <http_client_send_request+0x2fc>)
   33c0c:	4798      	blx	r3
   33c0e:	1e03      	subs	r3, r0, #0
   33c10:	d027      	beq.n	33c62 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   33c12:	2314      	movs	r3, #20
   33c14:	18fb      	adds	r3, r7, r3
   33c16:	2202      	movs	r2, #2
   33c18:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   33c1a:	68fb      	ldr	r3, [r7, #12]
   33c1c:	2250      	movs	r2, #80	; 0x50
   33c1e:	5a9b      	ldrh	r3, [r3, r2]
   33c20:	021b      	lsls	r3, r3, #8
   33c22:	b21a      	sxth	r2, r3
   33c24:	68fb      	ldr	r3, [r7, #12]
   33c26:	2150      	movs	r1, #80	; 0x50
   33c28:	5a5b      	ldrh	r3, [r3, r1]
   33c2a:	0a1b      	lsrs	r3, r3, #8
   33c2c:	b29b      	uxth	r3, r3
   33c2e:	b21b      	sxth	r3, r3
   33c30:	4313      	orrs	r3, r2
   33c32:	b21b      	sxth	r3, r3
   33c34:	b29a      	uxth	r2, r3
   33c36:	2314      	movs	r3, #20
   33c38:	18fb      	adds	r3, r7, r3
   33c3a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   33c3c:	68fb      	ldr	r3, [r7, #12]
   33c3e:	3301      	adds	r3, #1
   33c40:	0018      	movs	r0, r3
   33c42:	4b20      	ldr	r3, [pc, #128]	; (33cc4 <http_client_send_request+0x300>)
   33c44:	4798      	blx	r3
   33c46:	0002      	movs	r2, r0
   33c48:	2314      	movs	r3, #20
   33c4a:	18fb      	adds	r3, r7, r3
   33c4c:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   33c4e:	68fb      	ldr	r3, [r7, #12]
   33c50:	781b      	ldrb	r3, [r3, #0]
   33c52:	b25b      	sxtb	r3, r3
   33c54:	2214      	movs	r2, #20
   33c56:	18b9      	adds	r1, r7, r2
   33c58:	2210      	movs	r2, #16
   33c5a:	0018      	movs	r0, r3
   33c5c:	4b1a      	ldr	r3, [pc, #104]	; (33cc8 <http_client_send_request+0x304>)
   33c5e:	4798      	blx	r3
   33c60:	e004      	b.n	33c6c <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   33c62:	68fb      	ldr	r3, [r7, #12]
   33c64:	3301      	adds	r3, #1
   33c66:	0018      	movs	r0, r3
   33c68:	4b18      	ldr	r3, [pc, #96]	; (33ccc <http_client_send_request+0x308>)
   33c6a:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   33c6c:	68fb      	ldr	r3, [r7, #12]
   33c6e:	2201      	movs	r2, #1
   33c70:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   33c72:	e006      	b.n	33c82 <http_client_send_request+0x2be>
			return -ENOSPC;
   33c74:	231c      	movs	r3, #28
   33c76:	425b      	negs	r3, r3
   33c78:	e004      	b.n	33c84 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   33c7a:	230b      	movs	r3, #11
   33c7c:	425b      	negs	r3, r3
   33c7e:	e001      	b.n	33c84 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   33c80:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   33c82:	2300      	movs	r3, #0
}
   33c84:	0018      	movs	r0, r3
   33c86:	46bd      	mov	sp, r7
   33c88:	b00e      	add	sp, #56	; 0x38
   33c8a:	bdb0      	pop	{r4, r5, r7, pc}
   33c8c:	0003cd8c 	.word	0x0003cd8c
   33c90:	00037cc9 	.word	0x00037cc9
   33c94:	0003cd94 	.word	0x0003cd94
   33c98:	00037cbb 	.word	0x00037cbb
   33c9c:	000378b9 	.word	0x000378b9
   33ca0:	00037c81 	.word	0x00037c81
   33ca4:	00037c6f 	.word	0x00037c6f
   33ca8:	000378cd 	.word	0x000378cd
   33cac:	00037903 	.word	0x00037903
   33cb0:	00033e25 	.word	0x00033e25
   33cb4:	00033cd1 	.word	0x00033cd1
   33cb8:	00027fe1 	.word	0x00027fe1
   33cbc:	20004620 	.word	0x20004620
   33cc0:	0003392d 	.word	0x0003392d
   33cc4:	0002872d 	.word	0x0002872d
   33cc8:	000281f5 	.word	0x000281f5
   33ccc:	00028835 	.word	0x00028835

00033cd0 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   33cd0:	b580      	push	{r7, lr}
   33cd2:	b086      	sub	sp, #24
   33cd4:	af00      	add	r7, sp, #0
   33cd6:	6078      	str	r0, [r7, #4]
   33cd8:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   33cda:	687b      	ldr	r3, [r7, #4]
   33cdc:	22c0      	movs	r2, #192	; 0xc0
   33cde:	589b      	ldr	r3, [r3, r2]
   33ce0:	2b00      	cmp	r3, #0
   33ce2:	d007      	beq.n	33cf4 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   33ce4:	687b      	ldr	r3, [r7, #4]
   33ce6:	22c0      	movs	r2, #192	; 0xc0
   33ce8:	589b      	ldr	r3, [r3, r2]
   33cea:	687a      	ldr	r2, [r7, #4]
   33cec:	21c4      	movs	r1, #196	; 0xc4
   33cee:	5852      	ldr	r2, [r2, r1]
   33cf0:	0010      	movs	r0, r2
   33cf2:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   33cf4:	687b      	ldr	r3, [r7, #4]
   33cf6:	33b0      	adds	r3, #176	; 0xb0
   33cf8:	2218      	movs	r2, #24
   33cfa:	2100      	movs	r1, #0
   33cfc:	0018      	movs	r0, r3
   33cfe:	4b24      	ldr	r3, [pc, #144]	; (33d90 <_http_client_clear_conn+0xc0>)
   33d00:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   33d02:	687b      	ldr	r3, [r7, #4]
   33d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33d06:	2b00      	cmp	r3, #0
   33d08:	d005      	beq.n	33d16 <_http_client_clear_conn+0x46>
		close(module->sock);
   33d0a:	687b      	ldr	r3, [r7, #4]
   33d0c:	781b      	ldrb	r3, [r3, #0]
   33d0e:	b25b      	sxtb	r3, r3
   33d10:	0018      	movs	r0, r3
   33d12:	4b20      	ldr	r3, [pc, #128]	; (33d94 <_http_client_clear_conn+0xc4>)
   33d14:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   33d16:	687b      	ldr	r3, [r7, #4]
   33d18:	781b      	ldrb	r3, [r3, #0]
   33d1a:	b25b      	sxtb	r3, r3
   33d1c:	001a      	movs	r2, r3
   33d1e:	4b1e      	ldr	r3, [pc, #120]	; (33d98 <_http_client_clear_conn+0xc8>)
   33d20:	0092      	lsls	r2, r2, #2
   33d22:	2100      	movs	r1, #0
   33d24:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   33d26:	687b      	ldr	r3, [r7, #4]
   33d28:	336c      	adds	r3, #108	; 0x6c
   33d2a:	226c      	movs	r2, #108	; 0x6c
   33d2c:	2100      	movs	r1, #0
   33d2e:	0018      	movs	r0, r3
   33d30:	4b17      	ldr	r3, [pc, #92]	; (33d90 <_http_client_clear_conn+0xc0>)
   33d32:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   33d34:	687b      	ldr	r3, [r7, #4]
   33d36:	33d8      	adds	r3, #216	; 0xd8
   33d38:	2210      	movs	r2, #16
   33d3a:	2100      	movs	r1, #0
   33d3c:	0018      	movs	r0, r3
   33d3e:	4b14      	ldr	r3, [pc, #80]	; (33d90 <_http_client_clear_conn+0xc0>)
   33d40:	4798      	blx	r3
	module->req.state = STATE_INIT;
   33d42:	687b      	ldr	r3, [r7, #4]
   33d44:	2200      	movs	r2, #0
   33d46:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   33d48:	687b      	ldr	r3, [r7, #4]
   33d4a:	22d8      	movs	r2, #216	; 0xd8
   33d4c:	2100      	movs	r1, #0
   33d4e:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   33d50:	687b      	ldr	r3, [r7, #4]
   33d52:	2241      	movs	r2, #65	; 0x41
   33d54:	5c99      	ldrb	r1, [r3, r2]
   33d56:	2001      	movs	r0, #1
   33d58:	4381      	bics	r1, r0
   33d5a:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   33d5c:	687b      	ldr	r3, [r7, #4]
   33d5e:	2241      	movs	r2, #65	; 0x41
   33d60:	5c99      	ldrb	r1, [r3, r2]
   33d62:	2002      	movs	r0, #2
   33d64:	4381      	bics	r1, r0
   33d66:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   33d68:	230c      	movs	r3, #12
   33d6a:	18fb      	adds	r3, r7, r3
   33d6c:	683a      	ldr	r2, [r7, #0]
   33d6e:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   33d70:	687b      	ldr	r3, [r7, #4]
   33d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33d74:	2b00      	cmp	r3, #0
   33d76:	d006      	beq.n	33d86 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   33d78:	687b      	ldr	r3, [r7, #4]
   33d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33d7c:	220c      	movs	r2, #12
   33d7e:	18ba      	adds	r2, r7, r2
   33d80:	6878      	ldr	r0, [r7, #4]
   33d82:	2104      	movs	r1, #4
   33d84:	4798      	blx	r3
	}
}
   33d86:	46c0      	nop			; (mov r8, r8)
   33d88:	46bd      	mov	sp, r7
   33d8a:	b006      	add	sp, #24
   33d8c:	bd80      	pop	{r7, pc}
   33d8e:	46c0      	nop			; (mov r8, r8)
   33d90:	00037903 	.word	0x00037903
   33d94:	000285ed 	.word	0x000285ed
   33d98:	20004620 	.word	0x20004620

00033d9c <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   33d9c:	b590      	push	{r4, r7, lr}
   33d9e:	b087      	sub	sp, #28
   33da0:	af00      	add	r7, sp, #0
   33da2:	60f8      	str	r0, [r7, #12]
   33da4:	60b9      	str	r1, [r7, #8]
   33da6:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   33da8:	68fb      	ldr	r3, [r7, #12]
   33daa:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   33dac:	697b      	ldr	r3, [r7, #20]
   33dae:	2241      	movs	r2, #65	; 0x41
   33db0:	5c99      	ldrb	r1, [r3, r2]
   33db2:	2001      	movs	r0, #1
   33db4:	4301      	orrs	r1, r0
   33db6:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   33db8:	697b      	ldr	r3, [r7, #20]
   33dba:	2000      	movs	r0, #0
   33dbc:	5618      	ldrsb	r0, [r3, r0]
   33dbe:	687b      	ldr	r3, [r7, #4]
   33dc0:	b29a      	uxth	r2, r3
   33dc2:	68b9      	ldr	r1, [r7, #8]
   33dc4:	2300      	movs	r3, #0
   33dc6:	4c14      	ldr	r4, [pc, #80]	; (33e18 <_http_client_send_wait+0x7c>)
   33dc8:	47a0      	blx	r4
   33dca:	0003      	movs	r3, r0
   33dcc:	613b      	str	r3, [r7, #16]
   33dce:	693b      	ldr	r3, [r7, #16]
   33dd0:	2b00      	cmp	r3, #0
   33dd2:	da0f      	bge.n	33df4 <_http_client_send_wait+0x58>
		module->sending = 0;
   33dd4:	697b      	ldr	r3, [r7, #20]
   33dd6:	2241      	movs	r2, #65	; 0x41
   33dd8:	5c99      	ldrb	r1, [r3, r2]
   33dda:	2001      	movs	r0, #1
   33ddc:	4381      	bics	r1, r0
   33dde:	5499      	strb	r1, [r3, r2]
		return result;
   33de0:	693b      	ldr	r3, [r7, #16]
   33de2:	e014      	b.n	33e0e <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   33de4:	2000      	movs	r0, #0
   33de6:	4b0d      	ldr	r3, [pc, #52]	; (33e1c <_http_client_send_wait+0x80>)
   33de8:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   33dea:	697b      	ldr	r3, [r7, #20]
   33dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   33dee:	0018      	movs	r0, r3
   33df0:	4b0b      	ldr	r3, [pc, #44]	; (33e20 <_http_client_send_wait+0x84>)
   33df2:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   33df4:	697b      	ldr	r3, [r7, #20]
   33df6:	2241      	movs	r2, #65	; 0x41
   33df8:	5c9b      	ldrb	r3, [r3, r2]
   33dfa:	2201      	movs	r2, #1
   33dfc:	4013      	ands	r3, r2
   33dfe:	b2db      	uxtb	r3, r3
   33e00:	2b00      	cmp	r3, #0
   33e02:	d003      	beq.n	33e0c <_http_client_send_wait+0x70>
   33e04:	697b      	ldr	r3, [r7, #20]
   33e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33e08:	2b02      	cmp	r3, #2
   33e0a:	d8eb      	bhi.n	33de4 <_http_client_send_wait+0x48>
	}

	return 0;
   33e0c:	2300      	movs	r3, #0
}
   33e0e:	0018      	movs	r0, r3
   33e10:	46bd      	mov	sp, r7
   33e12:	b007      	add	sp, #28
   33e14:	bd90      	pop	{r4, r7, pc}
   33e16:	46c0      	nop			; (mov r8, r8)
   33e18:	00028309 	.word	0x00028309
   33e1c:	000249b5 	.word	0x000249b5
   33e20:	000350a9 	.word	0x000350a9

00033e24 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   33e24:	b5f0      	push	{r4, r5, r6, r7, lr}
   33e26:	46c6      	mov	lr, r8
   33e28:	b500      	push	{lr}
   33e2a:	b0a0      	sub	sp, #128	; 0x80
   33e2c:	af02      	add	r7, sp, #8
   33e2e:	61f8      	str	r0, [r7, #28]
   33e30:	4668      	mov	r0, sp
   33e32:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   33e34:	2318      	movs	r3, #24
   33e36:	2218      	movs	r2, #24
   33e38:	18ba      	adds	r2, r7, r2
   33e3a:	18d0      	adds	r0, r2, r3
   33e3c:	4bbd      	ldr	r3, [pc, #756]	; (34134 <_http_client_request+0x310>)
   33e3e:	469c      	mov	ip, r3
   33e40:	4663      	mov	r3, ip
   33e42:	cb16      	ldmia	r3!, {r1, r2, r4}
   33e44:	c016      	stmia	r0!, {r1, r2, r4}
   33e46:	469c      	mov	ip, r3
   33e48:	4663      	mov	r3, ip
   33e4a:	681b      	ldr	r3, [r3, #0]
   33e4c:	469c      	mov	ip, r3
   33e4e:	4663      	mov	r3, ip
   33e50:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   33e52:	69f8      	ldr	r0, [r7, #28]
   33e54:	6e40      	ldr	r0, [r0, #100]	; 0x64
   33e56:	4684      	mov	ip, r0
   33e58:	2301      	movs	r3, #1
   33e5a:	425b      	negs	r3, r3
   33e5c:	4698      	mov	r8, r3
   33e5e:	44c4      	add	ip, r8
   33e60:	4663      	mov	r3, ip
   33e62:	66fb      	str	r3, [r7, #108]	; 0x6c
   33e64:	6038      	str	r0, [r7, #0]
   33e66:	2300      	movs	r3, #0
   33e68:	607b      	str	r3, [r7, #4]
   33e6a:	6839      	ldr	r1, [r7, #0]
   33e6c:	687a      	ldr	r2, [r7, #4]
   33e6e:	000b      	movs	r3, r1
   33e70:	0f5b      	lsrs	r3, r3, #29
   33e72:	469c      	mov	ip, r3
   33e74:	0013      	movs	r3, r2
   33e76:	00db      	lsls	r3, r3, #3
   33e78:	617b      	str	r3, [r7, #20]
   33e7a:	4663      	mov	r3, ip
   33e7c:	697c      	ldr	r4, [r7, #20]
   33e7e:	431c      	orrs	r4, r3
   33e80:	617c      	str	r4, [r7, #20]
   33e82:	000b      	movs	r3, r1
   33e84:	00db      	lsls	r3, r3, #3
   33e86:	613b      	str	r3, [r7, #16]
   33e88:	0005      	movs	r5, r0
   33e8a:	2200      	movs	r2, #0
   33e8c:	0016      	movs	r6, r2
   33e8e:	0f6a      	lsrs	r2, r5, #29
   33e90:	00f3      	lsls	r3, r6, #3
   33e92:	60fb      	str	r3, [r7, #12]
   33e94:	68fb      	ldr	r3, [r7, #12]
   33e96:	4313      	orrs	r3, r2
   33e98:	60fb      	str	r3, [r7, #12]
   33e9a:	00eb      	lsls	r3, r5, #3
   33e9c:	60bb      	str	r3, [r7, #8]
   33e9e:	1dc3      	adds	r3, r0, #7
   33ea0:	08db      	lsrs	r3, r3, #3
   33ea2:	00db      	lsls	r3, r3, #3
   33ea4:	466a      	mov	r2, sp
   33ea6:	1ad3      	subs	r3, r2, r3
   33ea8:	469d      	mov	sp, r3
   33eaa:	ab02      	add	r3, sp, #8
   33eac:	3300      	adds	r3, #0
   33eae:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   33eb0:	69fb      	ldr	r3, [r7, #28]
   33eb2:	2b00      	cmp	r3, #0
   33eb4:	d100      	bne.n	33eb8 <_http_client_request+0x94>
   33eb6:	e346      	b.n	34546 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   33eb8:	69fb      	ldr	r3, [r7, #28]
   33eba:	2241      	movs	r2, #65	; 0x41
   33ebc:	5c9b      	ldrb	r3, [r3, r2]
   33ebe:	2201      	movs	r2, #1
   33ec0:	4013      	ands	r3, r2
   33ec2:	b2db      	uxtb	r3, r3
   33ec4:	2b00      	cmp	r3, #0
   33ec6:	d000      	beq.n	33eca <_http_client_request+0xa6>
   33ec8:	e33f      	b.n	3454a <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   33eca:	69fb      	ldr	r3, [r7, #28]
   33ecc:	33b0      	adds	r3, #176	; 0xb0
   33ece:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   33ed0:	69fb      	ldr	r3, [r7, #28]
   33ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33ed4:	2b03      	cmp	r3, #3
   33ed6:	d003      	beq.n	33ee0 <_http_client_request+0xbc>
   33ed8:	2b04      	cmp	r3, #4
   33eda:	d100      	bne.n	33ede <_http_client_request+0xba>
   33edc:	e1b3      	b.n	34246 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   33ede:	e32f      	b.n	34540 <_http_client_request+0x71c>
		module->req.content_length = 0;
   33ee0:	69fb      	ldr	r3, [r7, #28]
   33ee2:	22cc      	movs	r2, #204	; 0xcc
   33ee4:	2100      	movs	r1, #0
   33ee6:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   33ee8:	69fb      	ldr	r3, [r7, #28]
   33eea:	22d0      	movs	r2, #208	; 0xd0
   33eec:	2100      	movs	r1, #0
   33eee:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   33ef0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   33ef2:	69fb      	ldr	r3, [r7, #28]
   33ef4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   33ef6:	4c90      	ldr	r4, [pc, #576]	; (34138 <_http_client_request+0x314>)
   33ef8:	2334      	movs	r3, #52	; 0x34
   33efa:	2018      	movs	r0, #24
   33efc:	1838      	adds	r0, r7, r0
   33efe:	18c0      	adds	r0, r0, r3
   33f00:	69fb      	ldr	r3, [r7, #28]
   33f02:	9300      	str	r3, [sp, #0]
   33f04:	0023      	movs	r3, r4
   33f06:	4c8d      	ldr	r4, [pc, #564]	; (3413c <_http_client_request+0x318>)
   33f08:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   33f0a:	69fb      	ldr	r3, [r7, #28]
   33f0c:	22c8      	movs	r2, #200	; 0xc8
   33f0e:	5c9b      	ldrb	r3, [r3, r2]
   33f10:	2b01      	cmp	r3, #1
   33f12:	d10a      	bne.n	33f2a <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   33f14:	498a      	ldr	r1, [pc, #552]	; (34140 <_http_client_request+0x31c>)
   33f16:	2334      	movs	r3, #52	; 0x34
   33f18:	2218      	movs	r2, #24
   33f1a:	4694      	mov	ip, r2
   33f1c:	44bc      	add	ip, r7
   33f1e:	4463      	add	r3, ip
   33f20:	2204      	movs	r2, #4
   33f22:	0018      	movs	r0, r3
   33f24:	4b87      	ldr	r3, [pc, #540]	; (34144 <_http_client_request+0x320>)
   33f26:	4798      	blx	r3
   33f28:	e04e      	b.n	33fc8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   33f2a:	69fb      	ldr	r3, [r7, #28]
   33f2c:	22c8      	movs	r2, #200	; 0xc8
   33f2e:	5c9b      	ldrb	r3, [r3, r2]
   33f30:	2b02      	cmp	r3, #2
   33f32:	d10a      	bne.n	33f4a <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   33f34:	4984      	ldr	r1, [pc, #528]	; (34148 <_http_client_request+0x324>)
   33f36:	2334      	movs	r3, #52	; 0x34
   33f38:	2218      	movs	r2, #24
   33f3a:	4694      	mov	ip, r2
   33f3c:	44bc      	add	ip, r7
   33f3e:	4463      	add	r3, ip
   33f40:	2205      	movs	r2, #5
   33f42:	0018      	movs	r0, r3
   33f44:	4b7f      	ldr	r3, [pc, #508]	; (34144 <_http_client_request+0x320>)
   33f46:	4798      	blx	r3
   33f48:	e03e      	b.n	33fc8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   33f4a:	69fb      	ldr	r3, [r7, #28]
   33f4c:	22c8      	movs	r2, #200	; 0xc8
   33f4e:	5c9b      	ldrb	r3, [r3, r2]
   33f50:	2b03      	cmp	r3, #3
   33f52:	d10a      	bne.n	33f6a <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   33f54:	497d      	ldr	r1, [pc, #500]	; (3414c <_http_client_request+0x328>)
   33f56:	2334      	movs	r3, #52	; 0x34
   33f58:	2218      	movs	r2, #24
   33f5a:	4694      	mov	ip, r2
   33f5c:	44bc      	add	ip, r7
   33f5e:	4463      	add	r3, ip
   33f60:	2207      	movs	r2, #7
   33f62:	0018      	movs	r0, r3
   33f64:	4b77      	ldr	r3, [pc, #476]	; (34144 <_http_client_request+0x320>)
   33f66:	4798      	blx	r3
   33f68:	e02e      	b.n	33fc8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   33f6a:	69fb      	ldr	r3, [r7, #28]
   33f6c:	22c8      	movs	r2, #200	; 0xc8
   33f6e:	5c9b      	ldrb	r3, [r3, r2]
   33f70:	2b04      	cmp	r3, #4
   33f72:	d10a      	bne.n	33f8a <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   33f74:	4976      	ldr	r1, [pc, #472]	; (34150 <_http_client_request+0x32c>)
   33f76:	2334      	movs	r3, #52	; 0x34
   33f78:	2218      	movs	r2, #24
   33f7a:	4694      	mov	ip, r2
   33f7c:	44bc      	add	ip, r7
   33f7e:	4463      	add	r3, ip
   33f80:	2204      	movs	r2, #4
   33f82:	0018      	movs	r0, r3
   33f84:	4b6f      	ldr	r3, [pc, #444]	; (34144 <_http_client_request+0x320>)
   33f86:	4798      	blx	r3
   33f88:	e01e      	b.n	33fc8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   33f8a:	69fb      	ldr	r3, [r7, #28]
   33f8c:	22c8      	movs	r2, #200	; 0xc8
   33f8e:	5c9b      	ldrb	r3, [r3, r2]
   33f90:	2b05      	cmp	r3, #5
   33f92:	d10a      	bne.n	33faa <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   33f94:	496f      	ldr	r1, [pc, #444]	; (34154 <_http_client_request+0x330>)
   33f96:	2334      	movs	r3, #52	; 0x34
   33f98:	2218      	movs	r2, #24
   33f9a:	4694      	mov	ip, r2
   33f9c:	44bc      	add	ip, r7
   33f9e:	4463      	add	r3, ip
   33fa0:	2208      	movs	r2, #8
   33fa2:	0018      	movs	r0, r3
   33fa4:	4b67      	ldr	r3, [pc, #412]	; (34144 <_http_client_request+0x320>)
   33fa6:	4798      	blx	r3
   33fa8:	e00e      	b.n	33fc8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   33faa:	69fb      	ldr	r3, [r7, #28]
   33fac:	22c8      	movs	r2, #200	; 0xc8
   33fae:	5c9b      	ldrb	r3, [r3, r2]
   33fb0:	2b06      	cmp	r3, #6
   33fb2:	d109      	bne.n	33fc8 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   33fb4:	4968      	ldr	r1, [pc, #416]	; (34158 <_http_client_request+0x334>)
   33fb6:	2334      	movs	r3, #52	; 0x34
   33fb8:	2218      	movs	r2, #24
   33fba:	4694      	mov	ip, r2
   33fbc:	44bc      	add	ip, r7
   33fbe:	4463      	add	r3, ip
   33fc0:	2205      	movs	r2, #5
   33fc2:	0018      	movs	r0, r3
   33fc4:	4b5f      	ldr	r3, [pc, #380]	; (34144 <_http_client_request+0x320>)
   33fc6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   33fc8:	69fb      	ldr	r3, [r7, #28]
   33fca:	3370      	adds	r3, #112	; 0x70
   33fcc:	001c      	movs	r4, r3
   33fce:	69fb      	ldr	r3, [r7, #28]
   33fd0:	3370      	adds	r3, #112	; 0x70
   33fd2:	0018      	movs	r0, r3
   33fd4:	4b61      	ldr	r3, [pc, #388]	; (3415c <_http_client_request+0x338>)
   33fd6:	4798      	blx	r3
   33fd8:	0002      	movs	r2, r0
   33fda:	2334      	movs	r3, #52	; 0x34
   33fdc:	2118      	movs	r1, #24
   33fde:	468c      	mov	ip, r1
   33fe0:	44bc      	add	ip, r7
   33fe2:	4463      	add	r3, ip
   33fe4:	0021      	movs	r1, r4
   33fe6:	0018      	movs	r0, r3
   33fe8:	4b56      	ldr	r3, [pc, #344]	; (34144 <_http_client_request+0x320>)
   33fea:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   33fec:	495c      	ldr	r1, [pc, #368]	; (34160 <_http_client_request+0x33c>)
   33fee:	2334      	movs	r3, #52	; 0x34
   33ff0:	2218      	movs	r2, #24
   33ff2:	4694      	mov	ip, r2
   33ff4:	44bc      	add	ip, r7
   33ff6:	4463      	add	r3, ip
   33ff8:	220b      	movs	r2, #11
   33ffa:	0018      	movs	r0, r3
   33ffc:	4b51      	ldr	r3, [pc, #324]	; (34144 <_http_client_request+0x320>)
   33ffe:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   34000:	4958      	ldr	r1, [pc, #352]	; (34164 <_http_client_request+0x340>)
   34002:	2334      	movs	r3, #52	; 0x34
   34004:	2218      	movs	r2, #24
   34006:	4694      	mov	ip, r2
   34008:	44bc      	add	ip, r7
   3400a:	4463      	add	r3, ip
   3400c:	220c      	movs	r2, #12
   3400e:	0018      	movs	r0, r3
   34010:	4b4c      	ldr	r3, [pc, #304]	; (34144 <_http_client_request+0x320>)
   34012:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   34014:	69fb      	ldr	r3, [r7, #28]
   34016:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   34018:	69fb      	ldr	r3, [r7, #28]
   3401a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   3401c:	0018      	movs	r0, r3
   3401e:	4b4f      	ldr	r3, [pc, #316]	; (3415c <_http_client_request+0x338>)
   34020:	4798      	blx	r3
   34022:	0002      	movs	r2, r0
   34024:	2334      	movs	r3, #52	; 0x34
   34026:	2118      	movs	r1, #24
   34028:	468c      	mov	ip, r1
   3402a:	44bc      	add	ip, r7
   3402c:	4463      	add	r3, ip
   3402e:	0021      	movs	r1, r4
   34030:	0018      	movs	r0, r3
   34032:	4b44      	ldr	r3, [pc, #272]	; (34144 <_http_client_request+0x320>)
   34034:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   34036:	494c      	ldr	r1, [pc, #304]	; (34168 <_http_client_request+0x344>)
   34038:	2334      	movs	r3, #52	; 0x34
   3403a:	2218      	movs	r2, #24
   3403c:	4694      	mov	ip, r2
   3403e:	44bc      	add	ip, r7
   34040:	4463      	add	r3, ip
   34042:	2202      	movs	r2, #2
   34044:	0018      	movs	r0, r3
   34046:	4b3f      	ldr	r3, [pc, #252]	; (34144 <_http_client_request+0x320>)
   34048:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   3404a:	4948      	ldr	r1, [pc, #288]	; (3416c <_http_client_request+0x348>)
   3404c:	2334      	movs	r3, #52	; 0x34
   3404e:	2218      	movs	r2, #24
   34050:	4694      	mov	ip, r2
   34052:	44bc      	add	ip, r7
   34054:	4463      	add	r3, ip
   34056:	2206      	movs	r2, #6
   34058:	0018      	movs	r0, r3
   3405a:	4b3a      	ldr	r3, [pc, #232]	; (34144 <_http_client_request+0x320>)
   3405c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   3405e:	69fb      	ldr	r3, [r7, #28]
   34060:	1c5c      	adds	r4, r3, #1
   34062:	69fb      	ldr	r3, [r7, #28]
   34064:	3301      	adds	r3, #1
   34066:	0018      	movs	r0, r3
   34068:	4b3c      	ldr	r3, [pc, #240]	; (3415c <_http_client_request+0x338>)
   3406a:	4798      	blx	r3
   3406c:	0002      	movs	r2, r0
   3406e:	2334      	movs	r3, #52	; 0x34
   34070:	2118      	movs	r1, #24
   34072:	468c      	mov	ip, r1
   34074:	44bc      	add	ip, r7
   34076:	4463      	add	r3, ip
   34078:	0021      	movs	r1, r4
   3407a:	0018      	movs	r0, r3
   3407c:	4b31      	ldr	r3, [pc, #196]	; (34144 <_http_client_request+0x320>)
   3407e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   34080:	4939      	ldr	r1, [pc, #228]	; (34168 <_http_client_request+0x344>)
   34082:	2334      	movs	r3, #52	; 0x34
   34084:	2218      	movs	r2, #24
   34086:	4694      	mov	ip, r2
   34088:	44bc      	add	ip, r7
   3408a:	4463      	add	r3, ip
   3408c:	2202      	movs	r2, #2
   3408e:	0018      	movs	r0, r3
   34090:	4b2c      	ldr	r3, [pc, #176]	; (34144 <_http_client_request+0x320>)
   34092:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   34094:	4936      	ldr	r1, [pc, #216]	; (34170 <_http_client_request+0x34c>)
   34096:	2334      	movs	r3, #52	; 0x34
   34098:	2218      	movs	r2, #24
   3409a:	4694      	mov	ip, r2
   3409c:	44bc      	add	ip, r7
   3409e:	4463      	add	r3, ip
   340a0:	2218      	movs	r2, #24
   340a2:	0018      	movs	r0, r3
   340a4:	4b27      	ldr	r3, [pc, #156]	; (34144 <_http_client_request+0x320>)
   340a6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   340a8:	4932      	ldr	r1, [pc, #200]	; (34174 <_http_client_request+0x350>)
   340aa:	2334      	movs	r3, #52	; 0x34
   340ac:	2218      	movs	r2, #24
   340ae:	4694      	mov	ip, r2
   340b0:	44bc      	add	ip, r7
   340b2:	4463      	add	r3, ip
   340b4:	2213      	movs	r2, #19
   340b6:	0018      	movs	r0, r3
   340b8:	4b22      	ldr	r3, [pc, #136]	; (34144 <_http_client_request+0x320>)
   340ba:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   340bc:	492e      	ldr	r1, [pc, #184]	; (34178 <_http_client_request+0x354>)
   340be:	2334      	movs	r3, #52	; 0x34
   340c0:	2218      	movs	r2, #24
   340c2:	4694      	mov	ip, r2
   340c4:	44bc      	add	ip, r7
   340c6:	4463      	add	r3, ip
   340c8:	2217      	movs	r2, #23
   340ca:	0018      	movs	r0, r3
   340cc:	4b1d      	ldr	r3, [pc, #116]	; (34144 <_http_client_request+0x320>)
   340ce:	4798      	blx	r3
		if (entity->read != NULL) {
   340d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   340d2:	68db      	ldr	r3, [r3, #12]
   340d4:	2b00      	cmp	r3, #0
   340d6:	d100      	bne.n	340da <_http_client_request+0x2b6>
   340d8:	e088      	b.n	341ec <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   340da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   340dc:	781b      	ldrb	r3, [r3, #0]
   340de:	2b00      	cmp	r3, #0
   340e0:	d00f      	beq.n	34102 <_http_client_request+0x2de>
				module->req.content_length = -1;
   340e2:	69fb      	ldr	r3, [r7, #28]
   340e4:	21cc      	movs	r1, #204	; 0xcc
   340e6:	2201      	movs	r2, #1
   340e8:	4252      	negs	r2, r2
   340ea:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   340ec:	4923      	ldr	r1, [pc, #140]	; (3417c <_http_client_request+0x358>)
   340ee:	2334      	movs	r3, #52	; 0x34
   340f0:	2218      	movs	r2, #24
   340f2:	4694      	mov	ip, r2
   340f4:	44bc      	add	ip, r7
   340f6:	4463      	add	r3, ip
   340f8:	221c      	movs	r2, #28
   340fa:	0018      	movs	r0, r3
   340fc:	4b11      	ldr	r3, [pc, #68]	; (34144 <_http_client_request+0x320>)
   340fe:	4798      	blx	r3
   34100:	e074      	b.n	341ec <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   34102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   34104:	689b      	ldr	r3, [r3, #8]
   34106:	2b00      	cmp	r3, #0
   34108:	d070      	beq.n	341ec <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   3410a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3410c:	689a      	ldr	r2, [r3, #8]
   3410e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   34110:	695b      	ldr	r3, [r3, #20]
   34112:	0018      	movs	r0, r3
   34114:	4790      	blx	r2
   34116:	0001      	movs	r1, r0
   34118:	69fb      	ldr	r3, [r7, #28]
   3411a:	22cc      	movs	r2, #204	; 0xcc
   3411c:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   3411e:	69fb      	ldr	r3, [r7, #28]
   34120:	22cc      	movs	r2, #204	; 0xcc
   34122:	589b      	ldr	r3, [r3, r2]
   34124:	2b00      	cmp	r3, #0
   34126:	da2b      	bge.n	34180 <_http_client_request+0x35c>
					module->req.content_length = 0;
   34128:	69fb      	ldr	r3, [r7, #28]
   3412a:	22cc      	movs	r2, #204	; 0xcc
   3412c:	2100      	movs	r1, #0
   3412e:	5099      	str	r1, [r3, r2]
   34130:	e05c      	b.n	341ec <_http_client_request+0x3c8>
   34132:	46c0      	nop			; (mov r8, r8)
   34134:	0003ce7c 	.word	0x0003ce7c
   34138:	00033d9d 	.word	0x00033d9d
   3413c:	00034d05 	.word	0x00034d05
   34140:	0003cda0 	.word	0x0003cda0
   34144:	00034d85 	.word	0x00034d85
   34148:	0003cda8 	.word	0x0003cda8
   3414c:	0003cdb0 	.word	0x0003cdb0
   34150:	0003cdb8 	.word	0x0003cdb8
   34154:	0003cdc0 	.word	0x0003cdc0
   34158:	0003cdcc 	.word	0x0003cdcc
   3415c:	00037cbb 	.word	0x00037cbb
   34160:	0003cdd4 	.word	0x0003cdd4
   34164:	0003cde0 	.word	0x0003cde0
   34168:	0003cdf0 	.word	0x0003cdf0
   3416c:	0003cdf4 	.word	0x0003cdf4
   34170:	0003cdfc 	.word	0x0003cdfc
   34174:	0003ce18 	.word	0x0003ce18
   34178:	0003ce2c 	.word	0x0003ce2c
   3417c:	0003ce44 	.word	0x0003ce44
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   34180:	69fb      	ldr	r3, [r7, #28]
   34182:	22cc      	movs	r2, #204	; 0xcc
   34184:	589b      	ldr	r3, [r3, r2]
   34186:	001a      	movs	r2, r3
   34188:	49e0      	ldr	r1, [pc, #896]	; (3450c <_http_client_request+0x6e8>)
   3418a:	2328      	movs	r3, #40	; 0x28
   3418c:	2018      	movs	r0, #24
   3418e:	4684      	mov	ip, r0
   34190:	44bc      	add	ip, r7
   34192:	4463      	add	r3, ip
   34194:	0018      	movs	r0, r3
   34196:	4bde      	ldr	r3, [pc, #888]	; (34510 <_http_client_request+0x6ec>)
   34198:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   3419a:	49de      	ldr	r1, [pc, #888]	; (34514 <_http_client_request+0x6f0>)
   3419c:	2334      	movs	r3, #52	; 0x34
   3419e:	2218      	movs	r2, #24
   341a0:	4694      	mov	ip, r2
   341a2:	44bc      	add	ip, r7
   341a4:	4463      	add	r3, ip
   341a6:	2210      	movs	r2, #16
   341a8:	0018      	movs	r0, r3
   341aa:	4bdb      	ldr	r3, [pc, #876]	; (34518 <_http_client_request+0x6f4>)
   341ac:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   341ae:	2328      	movs	r3, #40	; 0x28
   341b0:	2218      	movs	r2, #24
   341b2:	4694      	mov	ip, r2
   341b4:	44bc      	add	ip, r7
   341b6:	4463      	add	r3, ip
   341b8:	0018      	movs	r0, r3
   341ba:	4bd8      	ldr	r3, [pc, #864]	; (3451c <_http_client_request+0x6f8>)
   341bc:	4798      	blx	r3
   341be:	0002      	movs	r2, r0
   341c0:	2328      	movs	r3, #40	; 0x28
   341c2:	2118      	movs	r1, #24
   341c4:	1879      	adds	r1, r7, r1
   341c6:	18c9      	adds	r1, r1, r3
   341c8:	2334      	movs	r3, #52	; 0x34
   341ca:	2018      	movs	r0, #24
   341cc:	4684      	mov	ip, r0
   341ce:	44bc      	add	ip, r7
   341d0:	4463      	add	r3, ip
   341d2:	0018      	movs	r0, r3
   341d4:	4bd0      	ldr	r3, [pc, #832]	; (34518 <_http_client_request+0x6f4>)
   341d6:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   341d8:	49d1      	ldr	r1, [pc, #836]	; (34520 <_http_client_request+0x6fc>)
   341da:	2334      	movs	r3, #52	; 0x34
   341dc:	2218      	movs	r2, #24
   341de:	4694      	mov	ip, r2
   341e0:	44bc      	add	ip, r7
   341e2:	4463      	add	r3, ip
   341e4:	2202      	movs	r2, #2
   341e6:	0018      	movs	r0, r3
   341e8:	4bcb      	ldr	r3, [pc, #812]	; (34518 <_http_client_request+0x6f4>)
   341ea:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   341ec:	69fb      	ldr	r3, [r7, #28]
   341ee:	22d4      	movs	r2, #212	; 0xd4
   341f0:	589b      	ldr	r3, [r3, r2]
   341f2:	2b00      	cmp	r3, #0
   341f4:	d012      	beq.n	3421c <_http_client_request+0x3f8>
				module->req.ext_header,
   341f6:	69fb      	ldr	r3, [r7, #28]
   341f8:	22d4      	movs	r2, #212	; 0xd4
   341fa:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   341fc:	69fb      	ldr	r3, [r7, #28]
   341fe:	22d4      	movs	r2, #212	; 0xd4
   34200:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   34202:	0018      	movs	r0, r3
   34204:	4bc5      	ldr	r3, [pc, #788]	; (3451c <_http_client_request+0x6f8>)
   34206:	4798      	blx	r3
   34208:	0002      	movs	r2, r0
   3420a:	2334      	movs	r3, #52	; 0x34
   3420c:	2118      	movs	r1, #24
   3420e:	468c      	mov	ip, r1
   34210:	44bc      	add	ip, r7
   34212:	4463      	add	r3, ip
   34214:	0021      	movs	r1, r4
   34216:	0018      	movs	r0, r3
   34218:	4bbf      	ldr	r3, [pc, #764]	; (34518 <_http_client_request+0x6f4>)
   3421a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3421c:	49c0      	ldr	r1, [pc, #768]	; (34520 <_http_client_request+0x6fc>)
   3421e:	2334      	movs	r3, #52	; 0x34
   34220:	2218      	movs	r2, #24
   34222:	4694      	mov	ip, r2
   34224:	44bc      	add	ip, r7
   34226:	4463      	add	r3, ip
   34228:	2202      	movs	r2, #2
   3422a:	0018      	movs	r0, r3
   3422c:	4bba      	ldr	r3, [pc, #744]	; (34518 <_http_client_request+0x6f4>)
   3422e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   34230:	2334      	movs	r3, #52	; 0x34
   34232:	2218      	movs	r2, #24
   34234:	4694      	mov	ip, r2
   34236:	44bc      	add	ip, r7
   34238:	4463      	add	r3, ip
   3423a:	0018      	movs	r0, r3
   3423c:	4bb9      	ldr	r3, [pc, #740]	; (34524 <_http_client_request+0x700>)
   3423e:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   34240:	69fb      	ldr	r3, [r7, #28]
   34242:	2204      	movs	r2, #4
   34244:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   34246:	69fb      	ldr	r3, [r7, #28]
   34248:	22cc      	movs	r2, #204	; 0xcc
   3424a:	589b      	ldr	r3, [r3, r2]
   3424c:	2b00      	cmp	r3, #0
   3424e:	db00      	blt.n	34252 <_http_client_request+0x42e>
   34250:	e0c6      	b.n	343e0 <_http_client_request+0x5bc>
   34252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   34254:	68db      	ldr	r3, [r3, #12]
   34256:	2b00      	cmp	r3, #0
   34258:	d100      	bne.n	3425c <_http_client_request+0x438>
   3425a:	e0c1      	b.n	343e0 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   3425c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3425e:	68dc      	ldr	r4, [r3, #12]
   34260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   34262:	6958      	ldr	r0, [r3, #20]
   34264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   34266:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   34268:	69fb      	ldr	r3, [r7, #28]
   3426a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   3426c:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   3426e:	69fb      	ldr	r3, [r7, #28]
   34270:	22d0      	movs	r2, #208	; 0xd0
   34272:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   34274:	002a      	movs	r2, r5
   34276:	47a0      	blx	r4
   34278:	0003      	movs	r3, r0
   3427a:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   3427c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3427e:	2b00      	cmp	r3, #0
   34280:	da01      	bge.n	34286 <_http_client_request+0x462>
				size = 0;
   34282:	2300      	movs	r3, #0
   34284:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   34286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   34288:	220a      	movs	r2, #10
   3428a:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   3428c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3428e:	220d      	movs	r2, #13
   34290:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   34292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34294:	3305      	adds	r3, #5
   34296:	6eba      	ldr	r2, [r7, #104]	; 0x68
   34298:	210d      	movs	r1, #13
   3429a:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   3429c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3429e:	3306      	adds	r3, #6
   342a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
   342a2:	210a      	movs	r1, #10
   342a4:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   342a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   342a8:	2b00      	cmp	r3, #0
   342aa:	db14      	blt.n	342d6 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   342ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   342ae:	3302      	adds	r3, #2
   342b0:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   342b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   342b4:	4a9c      	ldr	r2, [pc, #624]	; (34528 <_http_client_request+0x704>)
   342b6:	4013      	ands	r3, r2
   342b8:	d504      	bpl.n	342c4 <_http_client_request+0x4a0>
   342ba:	3b01      	subs	r3, #1
   342bc:	2210      	movs	r2, #16
   342be:	4252      	negs	r2, r2
   342c0:	4313      	orrs	r3, r2
   342c2:	3301      	adds	r3, #1
   342c4:	001a      	movs	r2, r3
   342c6:	2318      	movs	r3, #24
   342c8:	2118      	movs	r1, #24
   342ca:	468c      	mov	ip, r1
   342cc:	44bc      	add	ip, r7
   342ce:	4463      	add	r3, ip
   342d0:	5c9a      	ldrb	r2, [r3, r2]
   342d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   342d4:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   342d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   342d8:	2b0f      	cmp	r3, #15
   342da:	dd19      	ble.n	34310 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   342dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   342de:	3301      	adds	r3, #1
   342e0:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   342e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   342e4:	2b00      	cmp	r3, #0
   342e6:	da00      	bge.n	342ea <_http_client_request+0x4c6>
   342e8:	330f      	adds	r3, #15
   342ea:	111b      	asrs	r3, r3, #4
   342ec:	001a      	movs	r2, r3
   342ee:	4b8e      	ldr	r3, [pc, #568]	; (34528 <_http_client_request+0x704>)
   342f0:	4013      	ands	r3, r2
   342f2:	d504      	bpl.n	342fe <_http_client_request+0x4da>
   342f4:	3b01      	subs	r3, #1
   342f6:	2210      	movs	r2, #16
   342f8:	4252      	negs	r2, r2
   342fa:	4313      	orrs	r3, r2
   342fc:	3301      	adds	r3, #1
   342fe:	001a      	movs	r2, r3
   34300:	2318      	movs	r3, #24
   34302:	2118      	movs	r1, #24
   34304:	468c      	mov	ip, r1
   34306:	44bc      	add	ip, r7
   34308:	4463      	add	r3, ip
   3430a:	5c9a      	ldrb	r2, [r3, r2]
   3430c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3430e:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   34310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34312:	2bff      	cmp	r3, #255	; 0xff
   34314:	dd18      	ble.n	34348 <_http_client_request+0x524>
				ptr = buffer;
   34316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   34318:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   3431a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3431c:	2b00      	cmp	r3, #0
   3431e:	da00      	bge.n	34322 <_http_client_request+0x4fe>
   34320:	33ff      	adds	r3, #255	; 0xff
   34322:	121b      	asrs	r3, r3, #8
   34324:	001a      	movs	r2, r3
   34326:	4b80      	ldr	r3, [pc, #512]	; (34528 <_http_client_request+0x704>)
   34328:	4013      	ands	r3, r2
   3432a:	d504      	bpl.n	34336 <_http_client_request+0x512>
   3432c:	3b01      	subs	r3, #1
   3432e:	2210      	movs	r2, #16
   34330:	4252      	negs	r2, r2
   34332:	4313      	orrs	r3, r2
   34334:	3301      	adds	r3, #1
   34336:	001a      	movs	r2, r3
   34338:	2318      	movs	r3, #24
   3433a:	2118      	movs	r1, #24
   3433c:	468c      	mov	ip, r1
   3433e:	44bc      	add	ip, r7
   34340:	4463      	add	r3, ip
   34342:	5c9a      	ldrb	r2, [r3, r2]
   34344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   34346:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   34348:	69fb      	ldr	r3, [r7, #28]
   3434a:	2000      	movs	r0, #0
   3434c:	5618      	ldrsb	r0, [r3, r0]
   3434e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   34350:	3303      	adds	r3, #3
   34352:	001a      	movs	r2, r3
   34354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   34356:	1ad3      	subs	r3, r2, r3
   34358:	b29a      	uxth	r2, r3
   3435a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3435c:	b29b      	uxth	r3, r3
   3435e:	18d3      	adds	r3, r2, r3
   34360:	b29b      	uxth	r3, r3
   34362:	3304      	adds	r3, #4
   34364:	b29a      	uxth	r2, r3
   34366:	6f39      	ldr	r1, [r7, #112]	; 0x70
   34368:	2300      	movs	r3, #0
   3436a:	4c70      	ldr	r4, [pc, #448]	; (3452c <_http_client_request+0x708>)
   3436c:	47a0      	blx	r4
   3436e:	0003      	movs	r3, r0
   34370:	663b      	str	r3, [r7, #96]	; 0x60
   34372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   34374:	2b00      	cmp	r3, #0
   34376:	da07      	bge.n	34388 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   34378:	2305      	movs	r3, #5
   3437a:	425a      	negs	r2, r3
   3437c:	69fb      	ldr	r3, [r7, #28]
   3437e:	0011      	movs	r1, r2
   34380:	0018      	movs	r0, r3
   34382:	4b6b      	ldr	r3, [pc, #428]	; (34530 <_http_client_request+0x70c>)
   34384:	4798      	blx	r3
				return;
   34386:	e0e1      	b.n	3454c <_http_client_request+0x728>
			module->req.sent_length += size;
   34388:	69fb      	ldr	r3, [r7, #28]
   3438a:	22d0      	movs	r2, #208	; 0xd0
   3438c:	589a      	ldr	r2, [r3, r2]
   3438e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34390:	18d2      	adds	r2, r2, r3
   34392:	69fb      	ldr	r3, [r7, #28]
   34394:	21d0      	movs	r1, #208	; 0xd0
   34396:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   34398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3439a:	2b00      	cmp	r3, #0
   3439c:	d000      	beq.n	343a0 <_http_client_request+0x57c>
   3439e:	e0c9      	b.n	34534 <_http_client_request+0x710>
				if (module->req.entity.close) {
   343a0:	69fb      	ldr	r3, [r7, #28]
   343a2:	22c0      	movs	r2, #192	; 0xc0
   343a4:	589b      	ldr	r3, [r3, r2]
   343a6:	2b00      	cmp	r3, #0
   343a8:	d007      	beq.n	343ba <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   343aa:	69fb      	ldr	r3, [r7, #28]
   343ac:	22c0      	movs	r2, #192	; 0xc0
   343ae:	589b      	ldr	r3, [r3, r2]
   343b0:	69fa      	ldr	r2, [r7, #28]
   343b2:	21c4      	movs	r1, #196	; 0xc4
   343b4:	5852      	ldr	r2, [r2, r1]
   343b6:	0010      	movs	r0, r2
   343b8:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   343ba:	69fb      	ldr	r3, [r7, #28]
   343bc:	2202      	movs	r2, #2
   343be:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   343c0:	69fb      	ldr	r3, [r7, #28]
   343c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   343c4:	2b00      	cmp	r3, #0
   343c6:	d100      	bne.n	343ca <_http_client_request+0x5a6>
   343c8:	e0b5      	b.n	34536 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   343ca:	69fb      	ldr	r3, [r7, #28]
   343cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   343ce:	220c      	movs	r2, #12
   343d0:	2118      	movs	r1, #24
   343d2:	468c      	mov	ip, r1
   343d4:	44bc      	add	ip, r7
   343d6:	4462      	add	r2, ip
   343d8:	69f8      	ldr	r0, [r7, #28]
   343da:	2101      	movs	r1, #1
   343dc:	4798      	blx	r3
				break;
   343de:	e0aa      	b.n	34536 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   343e0:	69fb      	ldr	r3, [r7, #28]
   343e2:	22cc      	movs	r2, #204	; 0xcc
   343e4:	589b      	ldr	r3, [r3, r2]
   343e6:	2b00      	cmp	r3, #0
   343e8:	dc00      	bgt.n	343ec <_http_client_request+0x5c8>
   343ea:	e07c      	b.n	344e6 <_http_client_request+0x6c2>
   343ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   343ee:	68db      	ldr	r3, [r3, #12]
   343f0:	2b00      	cmp	r3, #0
   343f2:	d100      	bne.n	343f6 <_http_client_request+0x5d2>
   343f4:	e077      	b.n	344e6 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   343f6:	69fb      	ldr	r3, [r7, #28]
   343f8:	22d0      	movs	r2, #208	; 0xd0
   343fa:	589a      	ldr	r2, [r3, r2]
   343fc:	69fb      	ldr	r3, [r7, #28]
   343fe:	21cc      	movs	r1, #204	; 0xcc
   34400:	585b      	ldr	r3, [r3, r1]
   34402:	429a      	cmp	r2, r3
   34404:	db1f      	blt.n	34446 <_http_client_request+0x622>
				if (module->req.entity.close) {
   34406:	69fb      	ldr	r3, [r7, #28]
   34408:	22c0      	movs	r2, #192	; 0xc0
   3440a:	589b      	ldr	r3, [r3, r2]
   3440c:	2b00      	cmp	r3, #0
   3440e:	d007      	beq.n	34420 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   34410:	69fb      	ldr	r3, [r7, #28]
   34412:	22c0      	movs	r2, #192	; 0xc0
   34414:	589b      	ldr	r3, [r3, r2]
   34416:	69fa      	ldr	r2, [r7, #28]
   34418:	21c4      	movs	r1, #196	; 0xc4
   3441a:	5852      	ldr	r2, [r2, r1]
   3441c:	0010      	movs	r0, r2
   3441e:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   34420:	69fb      	ldr	r3, [r7, #28]
   34422:	2202      	movs	r2, #2
   34424:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   34426:	69fb      	ldr	r3, [r7, #28]
   34428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3442a:	2b00      	cmp	r3, #0
   3442c:	d100      	bne.n	34430 <_http_client_request+0x60c>
   3442e:	e084      	b.n	3453a <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   34430:	69fb      	ldr	r3, [r7, #28]
   34432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34434:	220c      	movs	r2, #12
   34436:	2118      	movs	r1, #24
   34438:	468c      	mov	ip, r1
   3443a:	44bc      	add	ip, r7
   3443c:	4462      	add	r2, ip
   3443e:	69f8      	ldr	r0, [r7, #28]
   34440:	2101      	movs	r1, #1
   34442:	4798      	blx	r3
				break;
   34444:	e079      	b.n	3453a <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   34446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   34448:	68dc      	ldr	r4, [r3, #12]
   3444a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3444c:	6958      	ldr	r0, [r3, #20]
   3444e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   34450:	69fb      	ldr	r3, [r7, #28]
   34452:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   34454:	69fb      	ldr	r3, [r7, #28]
   34456:	22d0      	movs	r2, #208	; 0xd0
   34458:	589b      	ldr	r3, [r3, r2]
   3445a:	002a      	movs	r2, r5
   3445c:	47a0      	blx	r4
   3445e:	0003      	movs	r3, r0
   34460:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   34462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34464:	2b00      	cmp	r3, #0
   34466:	da0d      	bge.n	34484 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   34468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3446a:	2b00      	cmp	r3, #0
   3446c:	d102      	bne.n	34474 <_http_client_request+0x650>
   3446e:	234d      	movs	r3, #77	; 0x4d
   34470:	425b      	negs	r3, r3
   34472:	e001      	b.n	34478 <_http_client_request+0x654>
   34474:	2305      	movs	r3, #5
   34476:	425b      	negs	r3, r3
   34478:	69fa      	ldr	r2, [r7, #28]
   3447a:	0019      	movs	r1, r3
   3447c:	0010      	movs	r0, r2
   3447e:	4b2c      	ldr	r3, [pc, #176]	; (34530 <_http_client_request+0x70c>)
   34480:	4798      	blx	r3
			if (size < 0) {
   34482:	e057      	b.n	34534 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   34484:	69fb      	ldr	r3, [r7, #28]
   34486:	22cc      	movs	r2, #204	; 0xcc
   34488:	589a      	ldr	r2, [r3, r2]
   3448a:	69fb      	ldr	r3, [r7, #28]
   3448c:	21d0      	movs	r1, #208	; 0xd0
   3448e:	585b      	ldr	r3, [r3, r1]
   34490:	1ad2      	subs	r2, r2, r3
   34492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34494:	429a      	cmp	r2, r3
   34496:	da07      	bge.n	344a8 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   34498:	69fb      	ldr	r3, [r7, #28]
   3449a:	22cc      	movs	r2, #204	; 0xcc
   3449c:	589a      	ldr	r2, [r3, r2]
   3449e:	69fb      	ldr	r3, [r7, #28]
   344a0:	21d0      	movs	r1, #208	; 0xd0
   344a2:	585b      	ldr	r3, [r3, r1]
   344a4:	1ad3      	subs	r3, r2, r3
   344a6:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   344a8:	69fb      	ldr	r3, [r7, #28]
   344aa:	2000      	movs	r0, #0
   344ac:	5618      	ldrsb	r0, [r3, r0]
   344ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   344b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   344b2:	b29a      	uxth	r2, r3
   344b4:	2300      	movs	r3, #0
   344b6:	4c1d      	ldr	r4, [pc, #116]	; (3452c <_http_client_request+0x708>)
   344b8:	47a0      	blx	r4
   344ba:	0003      	movs	r3, r0
   344bc:	663b      	str	r3, [r7, #96]	; 0x60
   344be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   344c0:	2b00      	cmp	r3, #0
   344c2:	da07      	bge.n	344d4 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   344c4:	2305      	movs	r3, #5
   344c6:	425a      	negs	r2, r3
   344c8:	69fb      	ldr	r3, [r7, #28]
   344ca:	0011      	movs	r1, r2
   344cc:	0018      	movs	r0, r3
   344ce:	4b18      	ldr	r3, [pc, #96]	; (34530 <_http_client_request+0x70c>)
   344d0:	4798      	blx	r3
					return;
   344d2:	e03b      	b.n	3454c <_http_client_request+0x728>
				module->req.sent_length += size;
   344d4:	69fb      	ldr	r3, [r7, #28]
   344d6:	22d0      	movs	r2, #208	; 0xd0
   344d8:	589a      	ldr	r2, [r3, r2]
   344da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   344dc:	18d2      	adds	r2, r2, r3
   344de:	69fb      	ldr	r3, [r7, #28]
   344e0:	21d0      	movs	r1, #208	; 0xd0
   344e2:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   344e4:	e026      	b.n	34534 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   344e6:	69fb      	ldr	r3, [r7, #28]
   344e8:	2202      	movs	r2, #2
   344ea:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   344ec:	69fb      	ldr	r3, [r7, #28]
   344ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   344f0:	2b00      	cmp	r3, #0
   344f2:	d024      	beq.n	3453e <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   344f4:	69fb      	ldr	r3, [r7, #28]
   344f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   344f8:	220c      	movs	r2, #12
   344fa:	2118      	movs	r1, #24
   344fc:	468c      	mov	ip, r1
   344fe:	44bc      	add	ip, r7
   34500:	4462      	add	r2, ip
   34502:	69f8      	ldr	r0, [r7, #28]
   34504:	2101      	movs	r1, #1
   34506:	4798      	blx	r3
			break;
   34508:	e019      	b.n	3453e <_http_client_request+0x71a>
   3450a:	46c0      	nop			; (mov r8, r8)
   3450c:	0003ce64 	.word	0x0003ce64
   34510:	00037bc1 	.word	0x00037bc1
   34514:	0003ce68 	.word	0x0003ce68
   34518:	00034d85 	.word	0x00034d85
   3451c:	00037cbb 	.word	0x00037cbb
   34520:	0003cdf0 	.word	0x0003cdf0
   34524:	00034dc1 	.word	0x00034dc1
   34528:	8000000f 	.word	0x8000000f
   3452c:	00028309 	.word	0x00028309
   34530:	00033cd1 	.word	0x00033cd1
		break;
   34534:	e004      	b.n	34540 <_http_client_request+0x71c>
				break;
   34536:	46c0      	nop			; (mov r8, r8)
   34538:	e002      	b.n	34540 <_http_client_request+0x71c>
				break;
   3453a:	46c0      	nop			; (mov r8, r8)
   3453c:	e000      	b.n	34540 <_http_client_request+0x71c>
			break;
   3453e:	46c0      	nop			; (mov r8, r8)
   34540:	69bb      	ldr	r3, [r7, #24]
   34542:	469d      	mov	sp, r3
   34544:	e004      	b.n	34550 <_http_client_request+0x72c>
		return;
   34546:	46c0      	nop			; (mov r8, r8)
   34548:	e000      	b.n	3454c <_http_client_request+0x728>
		return;
   3454a:	46c0      	nop			; (mov r8, r8)
   3454c:	69bb      	ldr	r3, [r7, #24]
   3454e:	469d      	mov	sp, r3
	}
}
   34550:	46bd      	mov	sp, r7
   34552:	b01e      	add	sp, #120	; 0x78
   34554:	bc04      	pop	{r2}
   34556:	4690      	mov	r8, r2
   34558:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3455a:	46c0      	nop			; (mov r8, r8)

0003455c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   3455c:	b590      	push	{r4, r7, lr}
   3455e:	b083      	sub	sp, #12
   34560:	af00      	add	r7, sp, #0
   34562:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   34564:	687b      	ldr	r3, [r7, #4]
   34566:	2b00      	cmp	r3, #0
   34568:	d021      	beq.n	345ae <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   3456a:	687b      	ldr	r3, [r7, #4]
   3456c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3456e:	687b      	ldr	r3, [r7, #4]
   34570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   34572:	429a      	cmp	r2, r3
   34574:	d307      	bcc.n	34586 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   34576:	238b      	movs	r3, #139	; 0x8b
   34578:	425a      	negs	r2, r3
   3457a:	687b      	ldr	r3, [r7, #4]
   3457c:	0011      	movs	r1, r2
   3457e:	0018      	movs	r0, r3
   34580:	4b0d      	ldr	r3, [pc, #52]	; (345b8 <_http_client_recv_packet+0x5c>)
   34582:	4798      	blx	r3
		return;
   34584:	e014      	b.n	345b0 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   34586:	687b      	ldr	r3, [r7, #4]
   34588:	2000      	movs	r0, #0
   3458a:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   3458c:	687b      	ldr	r3, [r7, #4]
   3458e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   34590:	687b      	ldr	r3, [r7, #4]
   34592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34594:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   34596:	687b      	ldr	r3, [r7, #4]
   34598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   3459a:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   3459c:	687b      	ldr	r3, [r7, #4]
   3459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   345a0:	b29b      	uxth	r3, r3
   345a2:	1ad3      	subs	r3, r2, r3
   345a4:	b29a      	uxth	r2, r3
   345a6:	2300      	movs	r3, #0
   345a8:	4c04      	ldr	r4, [pc, #16]	; (345bc <_http_client_recv_packet+0x60>)
   345aa:	47a0      	blx	r4
   345ac:	e000      	b.n	345b0 <_http_client_recv_packet+0x54>
		return;
   345ae:	46c0      	nop			; (mov r8, r8)
}
   345b0:	46bd      	mov	sp, r7
   345b2:	b003      	add	sp, #12
   345b4:	bd90      	pop	{r4, r7, pc}
   345b6:	46c0      	nop			; (mov r8, r8)
   345b8:	00033cd1 	.word	0x00033cd1
   345bc:	0002846d 	.word	0x0002846d

000345c0 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   345c0:	b580      	push	{r7, lr}
   345c2:	b082      	sub	sp, #8
   345c4:	af00      	add	r7, sp, #0
   345c6:	6078      	str	r0, [r7, #4]
   345c8:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   345ca:	687b      	ldr	r3, [r7, #4]
   345cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   345ce:	683b      	ldr	r3, [r7, #0]
   345d0:	18d2      	adds	r2, r2, r3
   345d2:	687b      	ldr	r3, [r7, #4]
   345d4:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   345d6:	687b      	ldr	r3, [r7, #4]
   345d8:	2258      	movs	r2, #88	; 0x58
   345da:	5a9b      	ldrh	r3, [r3, r2]
   345dc:	2b00      	cmp	r3, #0
   345de:	d007      	beq.n	345f0 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   345e0:	687b      	ldr	r3, [r7, #4]
   345e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   345e4:	687b      	ldr	r3, [r7, #4]
   345e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   345e8:	0019      	movs	r1, r3
   345ea:	0010      	movs	r0, r2
   345ec:	4b06      	ldr	r3, [pc, #24]	; (34608 <_http_client_recved_packet+0x48>)
   345ee:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   345f0:	46c0      	nop			; (mov r8, r8)
   345f2:	687b      	ldr	r3, [r7, #4]
   345f4:	0018      	movs	r0, r3
   345f6:	4b05      	ldr	r3, [pc, #20]	; (3460c <_http_client_recved_packet+0x4c>)
   345f8:	4798      	blx	r3
   345fa:	1e03      	subs	r3, r0, #0
   345fc:	d1f9      	bne.n	345f2 <_http_client_recved_packet+0x32>
}
   345fe:	46c0      	nop			; (mov r8, r8)
   34600:	46bd      	mov	sp, r7
   34602:	b002      	add	sp, #8
   34604:	bd80      	pop	{r7, pc}
   34606:	46c0      	nop			; (mov r8, r8)
   34608:	0003507d 	.word	0x0003507d
   3460c:	00034611 	.word	0x00034611

00034610 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   34610:	b580      	push	{r7, lr}
   34612:	b082      	sub	sp, #8
   34614:	af00      	add	r7, sp, #0
   34616:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   34618:	687b      	ldr	r3, [r7, #4]
   3461a:	22d8      	movs	r2, #216	; 0xd8
   3461c:	589b      	ldr	r3, [r3, r2]
   3461e:	2b00      	cmp	r3, #0
   34620:	d002      	beq.n	34628 <_http_client_handle_response+0x18>
   34622:	2b01      	cmp	r3, #1
   34624:	d006      	beq.n	34634 <_http_client_handle_response+0x24>
   34626:	e00b      	b.n	34640 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   34628:	687b      	ldr	r3, [r7, #4]
   3462a:	0018      	movs	r0, r3
   3462c:	4b07      	ldr	r3, [pc, #28]	; (3464c <_http_client_handle_response+0x3c>)
   3462e:	4798      	blx	r3
   34630:	0003      	movs	r3, r0
   34632:	e006      	b.n	34642 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   34634:	687b      	ldr	r3, [r7, #4]
   34636:	0018      	movs	r0, r3
   34638:	4b05      	ldr	r3, [pc, #20]	; (34650 <_http_client_handle_response+0x40>)
   3463a:	4798      	blx	r3
   3463c:	0003      	movs	r3, r0
   3463e:	e000      	b.n	34642 <_http_client_handle_response+0x32>
	}
	return 0;
   34640:	2300      	movs	r3, #0
}
   34642:	0018      	movs	r0, r3
   34644:	46bd      	mov	sp, r7
   34646:	b002      	add	sp, #8
   34648:	bd80      	pop	{r7, pc}
   3464a:	46c0      	nop			; (mov r8, r8)
   3464c:	00034655 	.word	0x00034655
   34650:	00034b0d 	.word	0x00034b0d

00034654 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   34654:	b590      	push	{r4, r7, lr}
   34656:	b08b      	sub	sp, #44	; 0x2c
   34658:	af00      	add	r7, sp, #0
   3465a:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   3465c:	687b      	ldr	r3, [r7, #4]
   3465e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   34660:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   34662:	4b9a      	ldr	r3, [pc, #616]	; (348cc <_http_client_handle_header+0x278>)
   34664:	681a      	ldr	r2, [r3, #0]
   34666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34668:	0011      	movs	r1, r2
   3466a:	0018      	movs	r0, r3
   3466c:	4b98      	ldr	r3, [pc, #608]	; (348d0 <_http_client_handle_header+0x27c>)
   3466e:	4798      	blx	r3
   34670:	0003      	movs	r3, r0
   34672:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   34674:	69bb      	ldr	r3, [r7, #24]
   34676:	2b00      	cmp	r3, #0
   34678:	d007      	beq.n	3468a <_http_client_handle_header+0x36>
   3467a:	687b      	ldr	r3, [r7, #4]
   3467c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3467e:	687b      	ldr	r3, [r7, #4]
   34680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34682:	18d2      	adds	r2, r2, r3
   34684:	69bb      	ldr	r3, [r7, #24]
   34686:	429a      	cmp	r2, r3
   34688:	d807      	bhi.n	3469a <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   3468a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3468c:	687b      	ldr	r3, [r7, #4]
   3468e:	0011      	movs	r1, r2
   34690:	0018      	movs	r0, r3
   34692:	4b90      	ldr	r3, [pc, #576]	; (348d4 <_http_client_handle_header+0x280>)
   34694:	4798      	blx	r3
			return 0;
   34696:	2300      	movs	r3, #0
   34698:	e114      	b.n	348c4 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   3469a:	4b8c      	ldr	r3, [pc, #560]	; (348cc <_http_client_handle_header+0x278>)
   3469c:	681c      	ldr	r4, [r3, #0]
   3469e:	4b8b      	ldr	r3, [pc, #556]	; (348cc <_http_client_handle_header+0x278>)
   346a0:	681b      	ldr	r3, [r3, #0]
   346a2:	0018      	movs	r0, r3
   346a4:	4b8c      	ldr	r3, [pc, #560]	; (348d8 <_http_client_handle_header+0x284>)
   346a6:	4798      	blx	r3
   346a8:	0002      	movs	r2, r0
   346aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   346ac:	0021      	movs	r1, r4
   346ae:	0018      	movs	r0, r3
   346b0:	4b8a      	ldr	r3, [pc, #552]	; (348dc <_http_client_handle_header+0x288>)
   346b2:	4798      	blx	r3
   346b4:	1e03      	subs	r3, r0, #0
   346b6:	d15d      	bne.n	34774 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   346b8:	4b84      	ldr	r3, [pc, #528]	; (348cc <_http_client_handle_header+0x278>)
   346ba:	681b      	ldr	r3, [r3, #0]
   346bc:	0018      	movs	r0, r3
   346be:	4b86      	ldr	r3, [pc, #536]	; (348d8 <_http_client_handle_header+0x284>)
   346c0:	4798      	blx	r3
   346c2:	0002      	movs	r2, r0
   346c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   346c6:	189a      	adds	r2, r3, r2
   346c8:	687b      	ldr	r3, [r7, #4]
   346ca:	0011      	movs	r1, r2
   346cc:	0018      	movs	r0, r3
   346ce:	4b81      	ldr	r3, [pc, #516]	; (348d4 <_http_client_handle_header+0x280>)
   346d0:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   346d2:	687b      	ldr	r3, [r7, #4]
   346d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   346d6:	2b00      	cmp	r3, #0
   346d8:	d046      	beq.n	34768 <_http_client_handle_header+0x114>
   346da:	687b      	ldr	r3, [r7, #4]
   346dc:	22e4      	movs	r2, #228	; 0xe4
   346de:	5a9b      	ldrh	r3, [r3, r2]
   346e0:	2b00      	cmp	r3, #0
   346e2:	d041      	beq.n	34768 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   346e4:	687b      	ldr	r3, [r7, #4]
   346e6:	22dc      	movs	r2, #220	; 0xdc
   346e8:	589b      	ldr	r3, [r3, r2]
   346ea:	2b00      	cmp	r3, #0
   346ec:	da19      	bge.n	34722 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   346ee:	687b      	ldr	r3, [r7, #4]
   346f0:	22e4      	movs	r2, #228	; 0xe4
   346f2:	5a9a      	ldrh	r2, [r3, r2]
   346f4:	230c      	movs	r3, #12
   346f6:	18fb      	adds	r3, r7, r3
   346f8:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   346fa:	230c      	movs	r3, #12
   346fc:	18fb      	adds	r3, r7, r3
   346fe:	2201      	movs	r2, #1
   34700:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   34702:	687b      	ldr	r3, [r7, #4]
   34704:	22e0      	movs	r2, #224	; 0xe0
   34706:	2100      	movs	r1, #0
   34708:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   3470a:	230c      	movs	r3, #12
   3470c:	18fb      	adds	r3, r7, r3
   3470e:	2200      	movs	r2, #0
   34710:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   34712:	687b      	ldr	r3, [r7, #4]
   34714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34716:	220c      	movs	r2, #12
   34718:	18ba      	adds	r2, r7, r2
   3471a:	6878      	ldr	r0, [r7, #4]
   3471c:	2102      	movs	r1, #2
   3471e:	4798      	blx	r3
   34720:	e022      	b.n	34768 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   34722:	687b      	ldr	r3, [r7, #4]
   34724:	22dc      	movs	r2, #220	; 0xdc
   34726:	589a      	ldr	r2, [r3, r2]
   34728:	687b      	ldr	r3, [r7, #4]
   3472a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3472c:	429a      	cmp	r2, r3
   3472e:	dd1b      	ble.n	34768 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   34730:	687b      	ldr	r3, [r7, #4]
   34732:	22e4      	movs	r2, #228	; 0xe4
   34734:	5a9a      	ldrh	r2, [r3, r2]
   34736:	230c      	movs	r3, #12
   34738:	18fb      	adds	r3, r7, r3
   3473a:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   3473c:	687b      	ldr	r3, [r7, #4]
   3473e:	22dc      	movs	r2, #220	; 0xdc
   34740:	589b      	ldr	r3, [r3, r2]
   34742:	001a      	movs	r2, r3
   34744:	230c      	movs	r3, #12
   34746:	18fb      	adds	r3, r7, r3
   34748:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   3474a:	230c      	movs	r3, #12
   3474c:	18fb      	adds	r3, r7, r3
   3474e:	2200      	movs	r2, #0
   34750:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   34752:	687b      	ldr	r3, [r7, #4]
   34754:	22e0      	movs	r2, #224	; 0xe0
   34756:	2100      	movs	r1, #0
   34758:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3475a:	687b      	ldr	r3, [r7, #4]
   3475c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3475e:	220c      	movs	r2, #12
   34760:	18ba      	adds	r2, r7, r2
   34762:	6878      	ldr	r0, [r7, #4]
   34764:	2102      	movs	r1, #2
   34766:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   34768:	687b      	ldr	r3, [r7, #4]
   3476a:	22d8      	movs	r2, #216	; 0xd8
   3476c:	2101      	movs	r1, #1
   3476e:	5099      	str	r1, [r3, r2]
			return 1;
   34770:	2301      	movs	r3, #1
   34772:	e0a7      	b.n	348c4 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   34774:	495a      	ldr	r1, [pc, #360]	; (348e0 <_http_client_handle_header+0x28c>)
   34776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34778:	2210      	movs	r2, #16
   3477a:	0018      	movs	r0, r3
   3477c:	4b57      	ldr	r3, [pc, #348]	; (348dc <_http_client_handle_header+0x288>)
   3477e:	4798      	blx	r3
   34780:	1e03      	subs	r3, r0, #0
   34782:	d109      	bne.n	34798 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   34784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34786:	3310      	adds	r3, #16
   34788:	0018      	movs	r0, r3
   3478a:	4b56      	ldr	r3, [pc, #344]	; (348e4 <_http_client_handle_header+0x290>)
   3478c:	4798      	blx	r3
   3478e:	0001      	movs	r1, r0
   34790:	687b      	ldr	r3, [r7, #4]
   34792:	22dc      	movs	r2, #220	; 0xdc
   34794:	5099      	str	r1, [r3, r2]
   34796:	e08b      	b.n	348b0 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   34798:	4953      	ldr	r1, [pc, #332]	; (348e8 <_http_client_handle_header+0x294>)
   3479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3479c:	2213      	movs	r2, #19
   3479e:	0018      	movs	r0, r3
   347a0:	4b4e      	ldr	r3, [pc, #312]	; (348dc <_http_client_handle_header+0x288>)
   347a2:	4798      	blx	r3
   347a4:	1e03      	subs	r3, r0, #0
   347a6:	d127      	bne.n	347f8 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   347a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   347aa:	3313      	adds	r3, #19
   347ac:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   347ae:	e01e      	b.n	347ee <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   347b0:	6a3b      	ldr	r3, [r7, #32]
   347b2:	781b      	ldrb	r3, [r3, #0]
   347b4:	2b20      	cmp	r3, #32
   347b6:	d103      	bne.n	347c0 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   347b8:	6a3b      	ldr	r3, [r7, #32]
   347ba:	3301      	adds	r3, #1
   347bc:	623b      	str	r3, [r7, #32]
   347be:	e016      	b.n	347ee <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   347c0:	6a3b      	ldr	r3, [r7, #32]
   347c2:	781b      	ldrb	r3, [r3, #0]
   347c4:	2b43      	cmp	r3, #67	; 0x43
   347c6:	d003      	beq.n	347d0 <_http_client_handle_header+0x17c>
   347c8:	6a3b      	ldr	r3, [r7, #32]
   347ca:	781b      	ldrb	r3, [r3, #0]
   347cc:	2b63      	cmp	r3, #99	; 0x63
   347ce:	d105      	bne.n	347dc <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   347d0:	687b      	ldr	r3, [r7, #4]
   347d2:	21cc      	movs	r1, #204	; 0xcc
   347d4:	2201      	movs	r2, #1
   347d6:	4252      	negs	r2, r2
   347d8:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   347da:	e069      	b.n	348b0 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   347dc:	2386      	movs	r3, #134	; 0x86
   347de:	425a      	negs	r2, r3
   347e0:	687b      	ldr	r3, [r7, #4]
   347e2:	0011      	movs	r1, r2
   347e4:	0018      	movs	r0, r3
   347e6:	4b41      	ldr	r3, [pc, #260]	; (348ec <_http_client_handle_header+0x298>)
   347e8:	4798      	blx	r3
					return 0;
   347ea:	2300      	movs	r3, #0
   347ec:	e06a      	b.n	348c4 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   347ee:	69ba      	ldr	r2, [r7, #24]
   347f0:	6a3b      	ldr	r3, [r7, #32]
   347f2:	429a      	cmp	r2, r3
   347f4:	d8dc      	bhi.n	347b0 <_http_client_handle_header+0x15c>
   347f6:	e05b      	b.n	348b0 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   347f8:	493d      	ldr	r1, [pc, #244]	; (348f0 <_http_client_handle_header+0x29c>)
   347fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   347fc:	220c      	movs	r2, #12
   347fe:	0018      	movs	r0, r3
   34800:	4b36      	ldr	r3, [pc, #216]	; (348dc <_http_client_handle_header+0x288>)
   34802:	4798      	blx	r3
   34804:	1e03      	subs	r3, r0, #0
   34806:	d126      	bne.n	34856 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   34808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3480a:	330c      	adds	r3, #12
   3480c:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3480e:	e01d      	b.n	3484c <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   34810:	69fb      	ldr	r3, [r7, #28]
   34812:	781b      	ldrb	r3, [r3, #0]
   34814:	2b20      	cmp	r3, #32
   34816:	d103      	bne.n	34820 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34818:	69fb      	ldr	r3, [r7, #28]
   3481a:	3301      	adds	r3, #1
   3481c:	61fb      	str	r3, [r7, #28]
   3481e:	e015      	b.n	3484c <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   34820:	69fb      	ldr	r3, [r7, #28]
   34822:	781b      	ldrb	r3, [r3, #0]
   34824:	2b4b      	cmp	r3, #75	; 0x4b
   34826:	d003      	beq.n	34830 <_http_client_handle_header+0x1dc>
   34828:	69fb      	ldr	r3, [r7, #28]
   3482a:	781b      	ldrb	r3, [r3, #0]
   3482c:	2b6b      	cmp	r3, #107	; 0x6b
   3482e:	d106      	bne.n	3483e <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   34830:	687b      	ldr	r3, [r7, #4]
   34832:	2241      	movs	r2, #65	; 0x41
   34834:	5c99      	ldrb	r1, [r3, r2]
   34836:	2002      	movs	r0, #2
   34838:	4301      	orrs	r1, r0
   3483a:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   3483c:	e038      	b.n	348b0 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   3483e:	687b      	ldr	r3, [r7, #4]
   34840:	2241      	movs	r2, #65	; 0x41
   34842:	5c99      	ldrb	r1, [r3, r2]
   34844:	2002      	movs	r0, #2
   34846:	4381      	bics	r1, r0
   34848:	5499      	strb	r1, [r3, r2]
				break;
   3484a:	e031      	b.n	348b0 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3484c:	69ba      	ldr	r2, [r7, #24]
   3484e:	69fb      	ldr	r3, [r7, #28]
   34850:	429a      	cmp	r2, r3
   34852:	d8dd      	bhi.n	34810 <_http_client_handle_header+0x1bc>
   34854:	e02c      	b.n	348b0 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   34856:	4927      	ldr	r1, [pc, #156]	; (348f4 <_http_client_handle_header+0x2a0>)
   34858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3485a:	2205      	movs	r2, #5
   3485c:	0018      	movs	r0, r3
   3485e:	4b1f      	ldr	r3, [pc, #124]	; (348dc <_http_client_handle_header+0x288>)
   34860:	4798      	blx	r3
   34862:	1e03      	subs	r3, r0, #0
   34864:	d124      	bne.n	348b0 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   34866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34868:	3309      	adds	r3, #9
   3486a:	0018      	movs	r0, r3
   3486c:	4b1d      	ldr	r3, [pc, #116]	; (348e4 <_http_client_handle_header+0x290>)
   3486e:	4798      	blx	r3
   34870:	0003      	movs	r3, r0
   34872:	b299      	uxth	r1, r3
   34874:	687b      	ldr	r3, [r7, #4]
   34876:	22e4      	movs	r2, #228	; 0xe4
   34878:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   3487a:	687b      	ldr	r3, [r7, #4]
   3487c:	22dc      	movs	r2, #220	; 0xdc
   3487e:	2100      	movs	r1, #0
   34880:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   34882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34884:	3305      	adds	r3, #5
   34886:	781b      	ldrb	r3, [r3, #0]
   34888:	2b31      	cmp	r3, #49	; 0x31
   3488a:	d804      	bhi.n	34896 <_http_client_handle_header+0x242>
   3488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3488e:	3307      	adds	r3, #7
   34890:	781b      	ldrb	r3, [r3, #0]
   34892:	2b30      	cmp	r3, #48	; 0x30
   34894:	d906      	bls.n	348a4 <_http_client_handle_header+0x250>
				module->permanent = 1;
   34896:	687b      	ldr	r3, [r7, #4]
   34898:	2241      	movs	r2, #65	; 0x41
   3489a:	5c99      	ldrb	r1, [r3, r2]
   3489c:	2002      	movs	r0, #2
   3489e:	4301      	orrs	r1, r0
   348a0:	5499      	strb	r1, [r3, r2]
   348a2:	e005      	b.n	348b0 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   348a4:	687b      	ldr	r3, [r7, #4]
   348a6:	2241      	movs	r2, #65	; 0x41
   348a8:	5c99      	ldrb	r1, [r3, r2]
   348aa:	2002      	movs	r0, #2
   348ac:	4381      	bics	r1, r0
   348ae:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   348b0:	4b06      	ldr	r3, [pc, #24]	; (348cc <_http_client_handle_header+0x278>)
   348b2:	681b      	ldr	r3, [r3, #0]
   348b4:	0018      	movs	r0, r3
   348b6:	4b08      	ldr	r3, [pc, #32]	; (348d8 <_http_client_handle_header+0x284>)
   348b8:	4798      	blx	r3
   348ba:	0002      	movs	r2, r0
   348bc:	69bb      	ldr	r3, [r7, #24]
   348be:	189b      	adds	r3, r3, r2
   348c0:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   348c2:	e6ce      	b.n	34662 <_http_client_handle_header+0xe>
	}
}
   348c4:	0018      	movs	r0, r3
   348c6:	46bd      	mov	sp, r7
   348c8:	b00b      	add	sp, #44	; 0x2c
   348ca:	bd90      	pop	{r4, r7, pc}
   348cc:	20000120 	.word	0x20000120
   348d0:	00037d39 	.word	0x00037d39
   348d4:	00034cb9 	.word	0x00034cb9
   348d8:	00037cbb 	.word	0x00037cbb
   348dc:	00037cc9 	.word	0x00037cc9
   348e0:	0003ce68 	.word	0x0003ce68
   348e4:	00037851 	.word	0x00037851
   348e8:	0003ce8c 	.word	0x0003ce8c
   348ec:	00033cd1 	.word	0x00033cd1
   348f0:	0003cea0 	.word	0x0003cea0
   348f4:	0003ceb0 	.word	0x0003ceb0

000348f8 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   348f8:	b580      	push	{r7, lr}
   348fa:	b088      	sub	sp, #32
   348fc:	af00      	add	r7, sp, #0
   348fe:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   34900:	687b      	ldr	r3, [r7, #4]
   34902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34904:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   34906:	2300      	movs	r3, #0
   34908:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   3490a:	687b      	ldr	r3, [r7, #4]
   3490c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3490e:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   34910:	687b      	ldr	r3, [r7, #4]
   34912:	22e0      	movs	r2, #224	; 0xe0
   34914:	589b      	ldr	r3, [r3, r2]
   34916:	2b00      	cmp	r3, #0
   34918:	db71      	blt.n	349fe <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   3491a:	687b      	ldr	r3, [r7, #4]
   3491c:	22e0      	movs	r2, #224	; 0xe0
   3491e:	589b      	ldr	r3, [r3, r2]
   34920:	2b00      	cmp	r3, #0
   34922:	d134      	bne.n	3498e <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   34924:	687b      	ldr	r3, [r7, #4]
   34926:	22d8      	movs	r2, #216	; 0xd8
   34928:	2100      	movs	r1, #0
   3492a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   3492c:	687b      	ldr	r3, [r7, #4]
   3492e:	22e4      	movs	r2, #228	; 0xe4
   34930:	2100      	movs	r1, #0
   34932:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   34934:	2308      	movs	r3, #8
   34936:	18fb      	adds	r3, r7, r3
   34938:	2201      	movs	r2, #1
   3493a:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   3493c:	2308      	movs	r3, #8
   3493e:	18fb      	adds	r3, r7, r3
   34940:	2200      	movs	r2, #0
   34942:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   34944:	2308      	movs	r3, #8
   34946:	18fb      	adds	r3, r7, r3
   34948:	2200      	movs	r2, #0
   3494a:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   3494c:	687b      	ldr	r3, [r7, #4]
   3494e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34950:	2b00      	cmp	r3, #0
   34952:	d006      	beq.n	34962 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   34954:	687b      	ldr	r3, [r7, #4]
   34956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34958:	2208      	movs	r2, #8
   3495a:	18ba      	adds	r2, r7, r2
   3495c:	6878      	ldr	r0, [r7, #4]
   3495e:	2103      	movs	r1, #3
   34960:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   34962:	687b      	ldr	r3, [r7, #4]
   34964:	2241      	movs	r2, #65	; 0x41
   34966:	5c9b      	ldrb	r3, [r3, r2]
   34968:	2202      	movs	r2, #2
   3496a:	4013      	ands	r3, r2
   3496c:	b2db      	uxtb	r3, r3
   3496e:	2b00      	cmp	r3, #0
   34970:	d105      	bne.n	3497e <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   34972:	687b      	ldr	r3, [r7, #4]
   34974:	2100      	movs	r1, #0
   34976:	0018      	movs	r0, r3
   34978:	4b62      	ldr	r3, [pc, #392]	; (34b04 <_http_client_read_chuked_entity+0x20c>)
   3497a:	4798      	blx	r3
					return;
   3497c:	e0bf      	b.n	34afe <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   3497e:	697b      	ldr	r3, [r7, #20]
   34980:	1c9a      	adds	r2, r3, #2
   34982:	687b      	ldr	r3, [r7, #4]
   34984:	0011      	movs	r1, r2
   34986:	0018      	movs	r0, r3
   34988:	4b5f      	ldr	r3, [pc, #380]	; (34b08 <_http_client_read_chuked_entity+0x210>)
   3498a:	4798      	blx	r3
   3498c:	e0b2      	b.n	34af4 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   3498e:	687b      	ldr	r3, [r7, #4]
   34990:	22e0      	movs	r2, #224	; 0xe0
   34992:	589a      	ldr	r2, [r3, r2]
   34994:	69fb      	ldr	r3, [r7, #28]
   34996:	429a      	cmp	r2, r3
   34998:	dd00      	ble.n	3499c <_http_client_read_chuked_entity+0xa4>
   3499a:	e0ab      	b.n	34af4 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   3499c:	687b      	ldr	r3, [r7, #4]
   3499e:	22e0      	movs	r2, #224	; 0xe0
   349a0:	589b      	ldr	r3, [r3, r2]
   349a2:	001a      	movs	r2, r3
   349a4:	2308      	movs	r3, #8
   349a6:	18fb      	adds	r3, r7, r3
   349a8:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   349aa:	2308      	movs	r3, #8
   349ac:	18fb      	adds	r3, r7, r3
   349ae:	697a      	ldr	r2, [r7, #20]
   349b0:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   349b2:	2308      	movs	r3, #8
   349b4:	18fb      	adds	r3, r7, r3
   349b6:	2200      	movs	r2, #0
   349b8:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   349ba:	687b      	ldr	r3, [r7, #4]
   349bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   349be:	2b00      	cmp	r3, #0
   349c0:	d006      	beq.n	349d0 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   349c2:	687b      	ldr	r3, [r7, #4]
   349c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   349c6:	2208      	movs	r2, #8
   349c8:	18ba      	adds	r2, r7, r2
   349ca:	6878      	ldr	r0, [r7, #4]
   349cc:	2103      	movs	r1, #3
   349ce:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   349d0:	687b      	ldr	r3, [r7, #4]
   349d2:	22e0      	movs	r2, #224	; 0xe0
   349d4:	589b      	ldr	r3, [r3, r2]
   349d6:	3302      	adds	r3, #2
   349d8:	697a      	ldr	r2, [r7, #20]
   349da:	18d2      	adds	r2, r2, r3
   349dc:	687b      	ldr	r3, [r7, #4]
   349de:	0011      	movs	r1, r2
   349e0:	0018      	movs	r0, r3
   349e2:	4b49      	ldr	r3, [pc, #292]	; (34b08 <_http_client_read_chuked_entity+0x210>)
   349e4:	4798      	blx	r3
				length = (int)module->recved_size;
   349e6:	687b      	ldr	r3, [r7, #4]
   349e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   349ea:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   349ec:	687b      	ldr	r3, [r7, #4]
   349ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   349f0:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   349f2:	687b      	ldr	r3, [r7, #4]
   349f4:	21e0      	movs	r1, #224	; 0xe0
   349f6:	2201      	movs	r2, #1
   349f8:	4252      	negs	r2, r2
   349fa:	505a      	str	r2, [r3, r1]
   349fc:	e07a      	b.n	34af4 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   349fe:	687b      	ldr	r3, [r7, #4]
   34a00:	22e0      	movs	r2, #224	; 0xe0
   34a02:	2100      	movs	r1, #0
   34a04:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   34a06:	e05a      	b.n	34abe <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   34a08:	697b      	ldr	r3, [r7, #20]
   34a0a:	781b      	ldrb	r3, [r3, #0]
   34a0c:	2b0a      	cmp	r3, #10
   34a0e:	d106      	bne.n	34a1e <_http_client_read_chuked_entity+0x126>
					buffer++;
   34a10:	697b      	ldr	r3, [r7, #20]
   34a12:	3301      	adds	r3, #1
   34a14:	617b      	str	r3, [r7, #20]
					length--;
   34a16:	69fb      	ldr	r3, [r7, #28]
   34a18:	3b01      	subs	r3, #1
   34a1a:	61fb      	str	r3, [r7, #28]
					break;
   34a1c:	e052      	b.n	34ac4 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   34a1e:	69bb      	ldr	r3, [r7, #24]
   34a20:	2b00      	cmp	r3, #0
   34a22:	d145      	bne.n	34ab0 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   34a24:	697b      	ldr	r3, [r7, #20]
   34a26:	781b      	ldrb	r3, [r3, #0]
   34a28:	2b2f      	cmp	r3, #47	; 0x2f
   34a2a:	d910      	bls.n	34a4e <_http_client_read_chuked_entity+0x156>
   34a2c:	697b      	ldr	r3, [r7, #20]
   34a2e:	781b      	ldrb	r3, [r3, #0]
   34a30:	2b39      	cmp	r3, #57	; 0x39
   34a32:	d80c      	bhi.n	34a4e <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   34a34:	687b      	ldr	r3, [r7, #4]
   34a36:	22e0      	movs	r2, #224	; 0xe0
   34a38:	589b      	ldr	r3, [r3, r2]
   34a3a:	011b      	lsls	r3, r3, #4
   34a3c:	697a      	ldr	r2, [r7, #20]
   34a3e:	7812      	ldrb	r2, [r2, #0]
   34a40:	189b      	adds	r3, r3, r2
   34a42:	3b30      	subs	r3, #48	; 0x30
   34a44:	001a      	movs	r2, r3
   34a46:	687b      	ldr	r3, [r7, #4]
   34a48:	21e0      	movs	r1, #224	; 0xe0
   34a4a:	505a      	str	r2, [r3, r1]
   34a4c:	e031      	b.n	34ab2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   34a4e:	697b      	ldr	r3, [r7, #20]
   34a50:	781b      	ldrb	r3, [r3, #0]
   34a52:	2b60      	cmp	r3, #96	; 0x60
   34a54:	d910      	bls.n	34a78 <_http_client_read_chuked_entity+0x180>
   34a56:	697b      	ldr	r3, [r7, #20]
   34a58:	781b      	ldrb	r3, [r3, #0]
   34a5a:	2b66      	cmp	r3, #102	; 0x66
   34a5c:	d80c      	bhi.n	34a78 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   34a5e:	687b      	ldr	r3, [r7, #4]
   34a60:	22e0      	movs	r2, #224	; 0xe0
   34a62:	589b      	ldr	r3, [r3, r2]
   34a64:	011b      	lsls	r3, r3, #4
   34a66:	697a      	ldr	r2, [r7, #20]
   34a68:	7812      	ldrb	r2, [r2, #0]
   34a6a:	189b      	adds	r3, r3, r2
   34a6c:	3b61      	subs	r3, #97	; 0x61
   34a6e:	001a      	movs	r2, r3
   34a70:	687b      	ldr	r3, [r7, #4]
   34a72:	21e0      	movs	r1, #224	; 0xe0
   34a74:	505a      	str	r2, [r3, r1]
   34a76:	e01c      	b.n	34ab2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   34a78:	697b      	ldr	r3, [r7, #20]
   34a7a:	781b      	ldrb	r3, [r3, #0]
   34a7c:	2b40      	cmp	r3, #64	; 0x40
   34a7e:	d910      	bls.n	34aa2 <_http_client_read_chuked_entity+0x1aa>
   34a80:	697b      	ldr	r3, [r7, #20]
   34a82:	781b      	ldrb	r3, [r3, #0]
   34a84:	2b46      	cmp	r3, #70	; 0x46
   34a86:	d80c      	bhi.n	34aa2 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   34a88:	687b      	ldr	r3, [r7, #4]
   34a8a:	22e0      	movs	r2, #224	; 0xe0
   34a8c:	589b      	ldr	r3, [r3, r2]
   34a8e:	011b      	lsls	r3, r3, #4
   34a90:	697a      	ldr	r2, [r7, #20]
   34a92:	7812      	ldrb	r2, [r2, #0]
   34a94:	189b      	adds	r3, r3, r2
   34a96:	3b41      	subs	r3, #65	; 0x41
   34a98:	001a      	movs	r2, r3
   34a9a:	687b      	ldr	r3, [r7, #4]
   34a9c:	21e0      	movs	r1, #224	; 0xe0
   34a9e:	505a      	str	r2, [r3, r1]
   34aa0:	e007      	b.n	34ab2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   34aa2:	697b      	ldr	r3, [r7, #20]
   34aa4:	781b      	ldrb	r3, [r3, #0]
   34aa6:	2b3b      	cmp	r3, #59	; 0x3b
   34aa8:	d103      	bne.n	34ab2 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   34aaa:	2301      	movs	r3, #1
   34aac:	61bb      	str	r3, [r7, #24]
   34aae:	e000      	b.n	34ab2 <_http_client_read_chuked_entity+0x1ba>
					continue;
   34ab0:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   34ab2:	697b      	ldr	r3, [r7, #20]
   34ab4:	3301      	adds	r3, #1
   34ab6:	617b      	str	r3, [r7, #20]
   34ab8:	69fb      	ldr	r3, [r7, #28]
   34aba:	3b01      	subs	r3, #1
   34abc:	61fb      	str	r3, [r7, #28]
   34abe:	69fb      	ldr	r3, [r7, #28]
   34ac0:	2b00      	cmp	r3, #0
   34ac2:	dca1      	bgt.n	34a08 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   34ac4:	687b      	ldr	r3, [r7, #4]
   34ac6:	22e0      	movs	r2, #224	; 0xe0
   34ac8:	589a      	ldr	r2, [r3, r2]
   34aca:	687b      	ldr	r3, [r7, #4]
   34acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   34ace:	429a      	cmp	r2, r3
   34ad0:	dd07      	ble.n	34ae2 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   34ad2:	238b      	movs	r3, #139	; 0x8b
   34ad4:	425a      	negs	r2, r3
   34ad6:	687b      	ldr	r3, [r7, #4]
   34ad8:	0011      	movs	r1, r2
   34ada:	0018      	movs	r0, r3
   34adc:	4b09      	ldr	r3, [pc, #36]	; (34b04 <_http_client_read_chuked_entity+0x20c>)
   34ade:	4798      	blx	r3
				return;
   34ae0:	e00d      	b.n	34afe <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   34ae2:	69fb      	ldr	r3, [r7, #28]
   34ae4:	2b00      	cmp	r3, #0
   34ae6:	d105      	bne.n	34af4 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   34ae8:	687b      	ldr	r3, [r7, #4]
   34aea:	21e0      	movs	r1, #224	; 0xe0
   34aec:	2201      	movs	r2, #1
   34aee:	4252      	negs	r2, r2
   34af0:	505a      	str	r2, [r3, r1]
				return;
   34af2:	e004      	b.n	34afe <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   34af4:	687b      	ldr	r3, [r7, #4]
   34af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34af8:	2b00      	cmp	r3, #0
   34afa:	d000      	beq.n	34afe <_http_client_read_chuked_entity+0x206>
   34afc:	e708      	b.n	34910 <_http_client_read_chuked_entity+0x18>
}
   34afe:	46bd      	mov	sp, r7
   34b00:	b008      	add	sp, #32
   34b02:	bd80      	pop	{r7, pc}
   34b04:	00033cd1 	.word	0x00033cd1
   34b08:	00034cb9 	.word	0x00034cb9

00034b0c <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   34b0c:	b580      	push	{r7, lr}
   34b0e:	b086      	sub	sp, #24
   34b10:	af00      	add	r7, sp, #0
   34b12:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   34b14:	687b      	ldr	r3, [r7, #4]
   34b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   34b18:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   34b1a:	687b      	ldr	r3, [r7, #4]
   34b1c:	22dc      	movs	r2, #220	; 0xdc
   34b1e:	589b      	ldr	r3, [r3, r2]
   34b20:	2b00      	cmp	r3, #0
   34b22:	db58      	blt.n	34bd6 <_http_client_handle_entity+0xca>
   34b24:	687b      	ldr	r3, [r7, #4]
   34b26:	22dc      	movs	r2, #220	; 0xdc
   34b28:	589a      	ldr	r2, [r3, r2]
   34b2a:	687b      	ldr	r3, [r7, #4]
   34b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   34b2e:	429a      	cmp	r2, r3
   34b30:	dc51      	bgt.n	34bd6 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   34b32:	687b      	ldr	r3, [r7, #4]
   34b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34b36:	0019      	movs	r1, r3
   34b38:	687b      	ldr	r3, [r7, #4]
   34b3a:	22dc      	movs	r2, #220	; 0xdc
   34b3c:	589b      	ldr	r3, [r3, r2]
   34b3e:	4299      	cmp	r1, r3
   34b40:	da00      	bge.n	34b44 <_http_client_handle_entity+0x38>
   34b42:	e0a9      	b.n	34c98 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   34b44:	687b      	ldr	r3, [r7, #4]
   34b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34b48:	2b00      	cmp	r3, #0
   34b4a:	d020      	beq.n	34b8e <_http_client_handle_entity+0x82>
   34b4c:	687b      	ldr	r3, [r7, #4]
   34b4e:	22e4      	movs	r2, #228	; 0xe4
   34b50:	5a9b      	ldrh	r3, [r3, r2]
   34b52:	2b00      	cmp	r3, #0
   34b54:	d01b      	beq.n	34b8e <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   34b56:	687b      	ldr	r3, [r7, #4]
   34b58:	22e4      	movs	r2, #228	; 0xe4
   34b5a:	5a9a      	ldrh	r2, [r3, r2]
   34b5c:	2308      	movs	r3, #8
   34b5e:	18fb      	adds	r3, r7, r3
   34b60:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   34b62:	2308      	movs	r3, #8
   34b64:	18fb      	adds	r3, r7, r3
   34b66:	2200      	movs	r2, #0
   34b68:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   34b6a:	687b      	ldr	r3, [r7, #4]
   34b6c:	22dc      	movs	r2, #220	; 0xdc
   34b6e:	589b      	ldr	r3, [r3, r2]
   34b70:	001a      	movs	r2, r3
   34b72:	2308      	movs	r3, #8
   34b74:	18fb      	adds	r3, r7, r3
   34b76:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   34b78:	2308      	movs	r3, #8
   34b7a:	18fb      	adds	r3, r7, r3
   34b7c:	697a      	ldr	r2, [r7, #20]
   34b7e:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   34b80:	687b      	ldr	r3, [r7, #4]
   34b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34b84:	2208      	movs	r2, #8
   34b86:	18ba      	adds	r2, r7, r2
   34b88:	6878      	ldr	r0, [r7, #4]
   34b8a:	2102      	movs	r1, #2
   34b8c:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   34b8e:	687b      	ldr	r3, [r7, #4]
   34b90:	22d8      	movs	r2, #216	; 0xd8
   34b92:	2100      	movs	r1, #0
   34b94:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   34b96:	687b      	ldr	r3, [r7, #4]
   34b98:	22e4      	movs	r2, #228	; 0xe4
   34b9a:	2100      	movs	r1, #0
   34b9c:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   34b9e:	687b      	ldr	r3, [r7, #4]
   34ba0:	2241      	movs	r2, #65	; 0x41
   34ba2:	5c9b      	ldrb	r3, [r3, r2]
   34ba4:	2202      	movs	r2, #2
   34ba6:	4013      	ands	r3, r2
   34ba8:	b2db      	uxtb	r3, r3
   34baa:	2b00      	cmp	r3, #0
   34bac:	d105      	bne.n	34bba <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   34bae:	687b      	ldr	r3, [r7, #4]
   34bb0:	2100      	movs	r1, #0
   34bb2:	0018      	movs	r0, r3
   34bb4:	4b3b      	ldr	r3, [pc, #236]	; (34ca4 <_http_client_handle_entity+0x198>)
   34bb6:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   34bb8:	e06e      	b.n	34c98 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   34bba:	687b      	ldr	r3, [r7, #4]
   34bbc:	22dc      	movs	r2, #220	; 0xdc
   34bbe:	589b      	ldr	r3, [r3, r2]
   34bc0:	001a      	movs	r2, r3
   34bc2:	697b      	ldr	r3, [r7, #20]
   34bc4:	189a      	adds	r2, r3, r2
   34bc6:	687b      	ldr	r3, [r7, #4]
   34bc8:	0011      	movs	r1, r2
   34bca:	0018      	movs	r0, r3
   34bcc:	4b36      	ldr	r3, [pc, #216]	; (34ca8 <_http_client_handle_entity+0x19c>)
   34bce:	4798      	blx	r3
				return module->recved_size;
   34bd0:	687b      	ldr	r3, [r7, #4]
   34bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34bd4:	e061      	b.n	34c9a <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   34bd6:	687b      	ldr	r3, [r7, #4]
   34bd8:	22dc      	movs	r2, #220	; 0xdc
   34bda:	589b      	ldr	r3, [r3, r2]
   34bdc:	2b00      	cmp	r3, #0
   34bde:	db57      	blt.n	34c90 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   34be0:	687b      	ldr	r3, [r7, #4]
   34be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   34be4:	2308      	movs	r3, #8
   34be6:	18fb      	adds	r3, r7, r3
   34be8:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   34bea:	2308      	movs	r3, #8
   34bec:	18fb      	adds	r3, r7, r3
   34bee:	697a      	ldr	r2, [r7, #20]
   34bf0:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   34bf2:	687b      	ldr	r3, [r7, #4]
   34bf4:	22e0      	movs	r2, #224	; 0xe0
   34bf6:	589a      	ldr	r2, [r3, r2]
   34bf8:	687b      	ldr	r3, [r7, #4]
   34bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34bfc:	18d2      	adds	r2, r2, r3
   34bfe:	687b      	ldr	r3, [r7, #4]
   34c00:	21e0      	movs	r1, #224	; 0xe0
   34c02:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   34c04:	687b      	ldr	r3, [r7, #4]
   34c06:	22dc      	movs	r2, #220	; 0xdc
   34c08:	589a      	ldr	r2, [r3, r2]
   34c0a:	687b      	ldr	r3, [r7, #4]
   34c0c:	21e0      	movs	r1, #224	; 0xe0
   34c0e:	585b      	ldr	r3, [r3, r1]
   34c10:	429a      	cmp	r2, r3
   34c12:	dc0c      	bgt.n	34c2e <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   34c14:	687b      	ldr	r3, [r7, #4]
   34c16:	22d8      	movs	r2, #216	; 0xd8
   34c18:	2100      	movs	r1, #0
   34c1a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   34c1c:	687b      	ldr	r3, [r7, #4]
   34c1e:	22e4      	movs	r2, #228	; 0xe4
   34c20:	2100      	movs	r1, #0
   34c22:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   34c24:	2308      	movs	r3, #8
   34c26:	18fb      	adds	r3, r7, r3
   34c28:	2201      	movs	r2, #1
   34c2a:	721a      	strb	r2, [r3, #8]
   34c2c:	e003      	b.n	34c36 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   34c2e:	2308      	movs	r3, #8
   34c30:	18fb      	adds	r3, r7, r3
   34c32:	2200      	movs	r2, #0
   34c34:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   34c36:	687b      	ldr	r3, [r7, #4]
   34c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34c3a:	2b00      	cmp	r3, #0
   34c3c:	d006      	beq.n	34c4c <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   34c3e:	687b      	ldr	r3, [r7, #4]
   34c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34c42:	2208      	movs	r2, #8
   34c44:	18ba      	adds	r2, r7, r2
   34c46:	6878      	ldr	r0, [r7, #4]
   34c48:	2103      	movs	r1, #3
   34c4a:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   34c4c:	2308      	movs	r3, #8
   34c4e:	18fb      	adds	r3, r7, r3
   34c50:	7a1b      	ldrb	r3, [r3, #8]
   34c52:	2b01      	cmp	r3, #1
   34c54:	d112      	bne.n	34c7c <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   34c56:	687b      	ldr	r3, [r7, #4]
   34c58:	2241      	movs	r2, #65	; 0x41
   34c5a:	5c9b      	ldrb	r3, [r3, r2]
   34c5c:	2202      	movs	r2, #2
   34c5e:	4013      	ands	r3, r2
   34c60:	b2db      	uxtb	r3, r3
   34c62:	2b00      	cmp	r3, #0
   34c64:	d10a      	bne.n	34c7c <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   34c66:	4b11      	ldr	r3, [pc, #68]	; (34cac <_http_client_handle_entity+0x1a0>)
   34c68:	0018      	movs	r0, r3
   34c6a:	4b11      	ldr	r3, [pc, #68]	; (34cb0 <_http_client_handle_entity+0x1a4>)
   34c6c:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   34c6e:	687b      	ldr	r3, [r7, #4]
   34c70:	2100      	movs	r1, #0
   34c72:	0018      	movs	r0, r3
   34c74:	4b0b      	ldr	r3, [pc, #44]	; (34ca4 <_http_client_handle_entity+0x198>)
   34c76:	4798      	blx	r3
					return 0;
   34c78:	2300      	movs	r3, #0
   34c7a:	e00e      	b.n	34c9a <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   34c7c:	687b      	ldr	r3, [r7, #4]
   34c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34c80:	697a      	ldr	r2, [r7, #20]
   34c82:	18d2      	adds	r2, r2, r3
   34c84:	687b      	ldr	r3, [r7, #4]
   34c86:	0011      	movs	r1, r2
   34c88:	0018      	movs	r0, r3
   34c8a:	4b07      	ldr	r3, [pc, #28]	; (34ca8 <_http_client_handle_entity+0x19c>)
   34c8c:	4798      	blx	r3
   34c8e:	e003      	b.n	34c98 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   34c90:	687b      	ldr	r3, [r7, #4]
   34c92:	0018      	movs	r0, r3
   34c94:	4b07      	ldr	r3, [pc, #28]	; (34cb4 <_http_client_handle_entity+0x1a8>)
   34c96:	4798      	blx	r3
		}
	}

	return 0;
   34c98:	2300      	movs	r3, #0
}
   34c9a:	0018      	movs	r0, r3
   34c9c:	46bd      	mov	sp, r7
   34c9e:	b006      	add	sp, #24
   34ca0:	bd80      	pop	{r7, pc}
   34ca2:	46c0      	nop			; (mov r8, r8)
   34ca4:	00033cd1 	.word	0x00033cd1
   34ca8:	00034cb9 	.word	0x00034cb9
   34cac:	0003ceb8 	.word	0x0003ceb8
   34cb0:	00037b25 	.word	0x00037b25
   34cb4:	000348f9 	.word	0x000348f9

00034cb8 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   34cb8:	b580      	push	{r7, lr}
   34cba:	b084      	sub	sp, #16
   34cbc:	af00      	add	r7, sp, #0
   34cbe:	6078      	str	r0, [r7, #4]
   34cc0:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   34cc2:	687b      	ldr	r3, [r7, #4]
   34cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   34cc6:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   34cc8:	687b      	ldr	r3, [r7, #4]
   34cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34ccc:	001a      	movs	r2, r3
   34cce:	683b      	ldr	r3, [r7, #0]
   34cd0:	1ad2      	subs	r2, r2, r3
   34cd2:	68fb      	ldr	r3, [r7, #12]
   34cd4:	18d3      	adds	r3, r2, r3
   34cd6:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   34cd8:	68bb      	ldr	r3, [r7, #8]
   34cda:	2b00      	cmp	r3, #0
   34cdc:	dd09      	ble.n	34cf2 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   34cde:	68ba      	ldr	r2, [r7, #8]
   34ce0:	6839      	ldr	r1, [r7, #0]
   34ce2:	68fb      	ldr	r3, [r7, #12]
   34ce4:	0018      	movs	r0, r3
   34ce6:	4b06      	ldr	r3, [pc, #24]	; (34d00 <_http_client_move_buffer+0x48>)
   34ce8:	4798      	blx	r3
		module->recved_size = remain;
   34cea:	68ba      	ldr	r2, [r7, #8]
   34cec:	687b      	ldr	r3, [r7, #4]
   34cee:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   34cf0:	e002      	b.n	34cf8 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   34cf2:	687b      	ldr	r3, [r7, #4]
   34cf4:	2200      	movs	r2, #0
   34cf6:	645a      	str	r2, [r3, #68]	; 0x44
}
   34cf8:	46c0      	nop			; (mov r8, r8)
   34cfa:	46bd      	mov	sp, r7
   34cfc:	b004      	add	sp, #16
   34cfe:	bd80      	pop	{r7, pc}
   34d00:	000378df 	.word	0x000378df

00034d04 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   34d04:	b580      	push	{r7, lr}
   34d06:	b084      	sub	sp, #16
   34d08:	af00      	add	r7, sp, #0
   34d0a:	60f8      	str	r0, [r7, #12]
   34d0c:	60b9      	str	r1, [r7, #8]
   34d0e:	607a      	str	r2, [r7, #4]
   34d10:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   34d12:	68fb      	ldr	r3, [r7, #12]
   34d14:	687a      	ldr	r2, [r7, #4]
   34d16:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   34d18:	68fb      	ldr	r3, [r7, #12]
   34d1a:	68ba      	ldr	r2, [r7, #8]
   34d1c:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   34d1e:	68fb      	ldr	r3, [r7, #12]
   34d20:	2200      	movs	r2, #0
   34d22:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   34d24:	68fb      	ldr	r3, [r7, #12]
   34d26:	683a      	ldr	r2, [r7, #0]
   34d28:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   34d2a:	68fb      	ldr	r3, [r7, #12]
   34d2c:	69ba      	ldr	r2, [r7, #24]
   34d2e:	60da      	str	r2, [r3, #12]
}
   34d30:	46c0      	nop			; (mov r8, r8)
   34d32:	46bd      	mov	sp, r7
   34d34:	b004      	add	sp, #16
   34d36:	bd80      	pop	{r7, pc}

00034d38 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   34d38:	b580      	push	{r7, lr}
   34d3a:	b084      	sub	sp, #16
   34d3c:	af00      	add	r7, sp, #0
   34d3e:	6078      	str	r0, [r7, #4]
   34d40:	000a      	movs	r2, r1
   34d42:	1cfb      	adds	r3, r7, #3
   34d44:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   34d46:	687b      	ldr	r3, [r7, #4]
   34d48:	681a      	ldr	r2, [r3, #0]
   34d4a:	687b      	ldr	r3, [r7, #4]
   34d4c:	685b      	ldr	r3, [r3, #4]
   34d4e:	1ad3      	subs	r3, r2, r3
   34d50:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   34d52:	68fb      	ldr	r3, [r7, #12]
   34d54:	2b00      	cmp	r3, #0
   34d56:	dc03      	bgt.n	34d60 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   34d58:	687b      	ldr	r3, [r7, #4]
   34d5a:	0018      	movs	r0, r3
   34d5c:	4b08      	ldr	r3, [pc, #32]	; (34d80 <stream_writer_send_8+0x48>)
   34d5e:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   34d60:	687b      	ldr	r3, [r7, #4]
   34d62:	6919      	ldr	r1, [r3, #16]
   34d64:	687b      	ldr	r3, [r7, #4]
   34d66:	685b      	ldr	r3, [r3, #4]
   34d68:	1c58      	adds	r0, r3, #1
   34d6a:	687a      	ldr	r2, [r7, #4]
   34d6c:	6050      	str	r0, [r2, #4]
   34d6e:	18cb      	adds	r3, r1, r3
   34d70:	1cfa      	adds	r2, r7, #3
   34d72:	7812      	ldrb	r2, [r2, #0]
   34d74:	701a      	strb	r2, [r3, #0]
}
   34d76:	46c0      	nop			; (mov r8, r8)
   34d78:	46bd      	mov	sp, r7
   34d7a:	b004      	add	sp, #16
   34d7c:	bd80      	pop	{r7, pc}
   34d7e:	46c0      	nop			; (mov r8, r8)
   34d80:	00034dc1 	.word	0x00034dc1

00034d84 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   34d84:	b580      	push	{r7, lr}
   34d86:	b084      	sub	sp, #16
   34d88:	af00      	add	r7, sp, #0
   34d8a:	60f8      	str	r0, [r7, #12]
   34d8c:	60b9      	str	r1, [r7, #8]
   34d8e:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   34d90:	e00d      	b.n	34dae <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   34d92:	68bb      	ldr	r3, [r7, #8]
   34d94:	781b      	ldrb	r3, [r3, #0]
   34d96:	b25a      	sxtb	r2, r3
   34d98:	68fb      	ldr	r3, [r7, #12]
   34d9a:	0011      	movs	r1, r2
   34d9c:	0018      	movs	r0, r3
   34d9e:	4b07      	ldr	r3, [pc, #28]	; (34dbc <stream_writer_send_buffer+0x38>)
   34da0:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   34da2:	687b      	ldr	r3, [r7, #4]
   34da4:	3b01      	subs	r3, #1
   34da6:	607b      	str	r3, [r7, #4]
   34da8:	68bb      	ldr	r3, [r7, #8]
   34daa:	3301      	adds	r3, #1
   34dac:	60bb      	str	r3, [r7, #8]
   34dae:	687b      	ldr	r3, [r7, #4]
   34db0:	2b00      	cmp	r3, #0
   34db2:	d1ee      	bne.n	34d92 <stream_writer_send_buffer+0xe>
	}
}
   34db4:	46c0      	nop			; (mov r8, r8)
   34db6:	46bd      	mov	sp, r7
   34db8:	b004      	add	sp, #16
   34dba:	bd80      	pop	{r7, pc}
   34dbc:	00034d39 	.word	0x00034d39

00034dc0 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   34dc0:	b590      	push	{r4, r7, lr}
   34dc2:	b083      	sub	sp, #12
   34dc4:	af00      	add	r7, sp, #0
   34dc6:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   34dc8:	687b      	ldr	r3, [r7, #4]
   34dca:	685b      	ldr	r3, [r3, #4]
   34dcc:	2b00      	cmp	r3, #0
   34dce:	d00c      	beq.n	34dea <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   34dd0:	687b      	ldr	r3, [r7, #4]
   34dd2:	689c      	ldr	r4, [r3, #8]
   34dd4:	687b      	ldr	r3, [r7, #4]
   34dd6:	68d8      	ldr	r0, [r3, #12]
   34dd8:	687b      	ldr	r3, [r7, #4]
   34dda:	6919      	ldr	r1, [r3, #16]
   34ddc:	687b      	ldr	r3, [r7, #4]
   34dde:	685b      	ldr	r3, [r3, #4]
   34de0:	001a      	movs	r2, r3
   34de2:	47a0      	blx	r4
		writer->written = 0;
   34de4:	687b      	ldr	r3, [r7, #4]
   34de6:	2200      	movs	r2, #0
   34de8:	605a      	str	r2, [r3, #4]
	}
}
   34dea:	46c0      	nop			; (mov r8, r8)
   34dec:	46bd      	mov	sp, r7
   34dee:	b003      	add	sp, #12
   34df0:	bd90      	pop	{r4, r7, pc}
	...

00034df4 <system_cpu_clock_get_hz>:
{
   34df4:	b580      	push	{r7, lr}
   34df6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   34df8:	2000      	movs	r0, #0
   34dfa:	4b05      	ldr	r3, [pc, #20]	; (34e10 <system_cpu_clock_get_hz+0x1c>)
   34dfc:	4798      	blx	r3
   34dfe:	0002      	movs	r2, r0
   34e00:	4b04      	ldr	r3, [pc, #16]	; (34e14 <system_cpu_clock_get_hz+0x20>)
   34e02:	7a1b      	ldrb	r3, [r3, #8]
   34e04:	b2db      	uxtb	r3, r3
   34e06:	40da      	lsrs	r2, r3
   34e08:	0013      	movs	r3, r2
}
   34e0a:	0018      	movs	r0, r3
   34e0c:	46bd      	mov	sp, r7
   34e0e:	bd80      	pop	{r7, pc}
   34e10:	0002c7d5 	.word	0x0002c7d5
   34e14:	40000400 	.word	0x40000400

00034e18 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   34e18:	b580      	push	{r7, lr}
   34e1a:	b084      	sub	sp, #16
   34e1c:	af00      	add	r7, sp, #0
   34e1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   34e20:	687b      	ldr	r3, [r7, #4]
   34e22:	681b      	ldr	r3, [r3, #0]
   34e24:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   34e26:	46c0      	nop			; (mov r8, r8)
   34e28:	68fb      	ldr	r3, [r7, #12]
   34e2a:	689b      	ldr	r3, [r3, #8]
   34e2c:	2202      	movs	r2, #2
   34e2e:	4013      	ands	r3, r2
   34e30:	d1fa      	bne.n	34e28 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   34e32:	68fb      	ldr	r3, [r7, #12]
   34e34:	681b      	ldr	r3, [r3, #0]
   34e36:	2202      	movs	r2, #2
   34e38:	431a      	orrs	r2, r3
   34e3a:	68fb      	ldr	r3, [r7, #12]
   34e3c:	601a      	str	r2, [r3, #0]
}
   34e3e:	46c0      	nop			; (mov r8, r8)
   34e40:	46bd      	mov	sp, r7
   34e42:	b004      	add	sp, #16
   34e44:	bd80      	pop	{r7, pc}
	...

00034e48 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   34e48:	b580      	push	{r7, lr}
   34e4a:	b082      	sub	sp, #8
   34e4c:	af00      	add	r7, sp, #0
   34e4e:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   34e50:	4b04      	ldr	r3, [pc, #16]	; (34e64 <sw_timer_tcc_callback+0x1c>)
   34e52:	681b      	ldr	r3, [r3, #0]
   34e54:	1c5a      	adds	r2, r3, #1
   34e56:	4b03      	ldr	r3, [pc, #12]	; (34e64 <sw_timer_tcc_callback+0x1c>)
   34e58:	601a      	str	r2, [r3, #0]
}
   34e5a:	46c0      	nop			; (mov r8, r8)
   34e5c:	46bd      	mov	sp, r7
   34e5e:	b002      	add	sp, #8
   34e60:	bd80      	pop	{r7, pc}
   34e62:	46c0      	nop			; (mov r8, r8)
   34e64:	2000463c 	.word	0x2000463c

00034e68 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   34e68:	b580      	push	{r7, lr}
   34e6a:	b082      	sub	sp, #8
   34e6c:	af00      	add	r7, sp, #0
   34e6e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   34e70:	687b      	ldr	r3, [r7, #4]
   34e72:	2264      	movs	r2, #100	; 0x64
   34e74:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   34e76:	687b      	ldr	r3, [r7, #4]
   34e78:	2200      	movs	r2, #0
   34e7a:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   34e7c:	687b      	ldr	r3, [r7, #4]
   34e7e:	2200      	movs	r2, #0
   34e80:	705a      	strb	r2, [r3, #1]
}
   34e82:	46c0      	nop			; (mov r8, r8)
   34e84:	46bd      	mov	sp, r7
   34e86:	b002      	add	sp, #8
   34e88:	bd80      	pop	{r7, pc}
	...

00034e8c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   34e8c:	b590      	push	{r4, r7, lr}
   34e8e:	b0b1      	sub	sp, #196	; 0xc4
   34e90:	af00      	add	r7, sp, #0
   34e92:	6078      	str	r0, [r7, #4]
   34e94:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   34e96:	230c      	movs	r3, #12
   34e98:	18fb      	adds	r3, r7, r3
   34e9a:	4a2e      	ldr	r2, [pc, #184]	; (34f54 <sw_timer_init+0xc8>)
   34e9c:	ca13      	ldmia	r2!, {r0, r1, r4}
   34e9e:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   34ea0:	683b      	ldr	r3, [r7, #0]
   34ea2:	885b      	ldrh	r3, [r3, #2]
   34ea4:	001a      	movs	r2, r3
   34ea6:	687b      	ldr	r3, [r7, #4]
   34ea8:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   34eaa:	687b      	ldr	r3, [r7, #4]
   34eac:	3314      	adds	r3, #20
   34eae:	22bc      	movs	r2, #188	; 0xbc
   34eb0:	18ba      	adds	r2, r7, r2
   34eb2:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   34eb4:	683b      	ldr	r3, [r7, #0]
   34eb6:	781b      	ldrb	r3, [r3, #0]
   34eb8:	001a      	movs	r2, r3
   34eba:	230c      	movs	r3, #12
   34ebc:	18fb      	adds	r3, r7, r3
   34ebe:	0092      	lsls	r2, r2, #2
   34ec0:	58d2      	ldr	r2, [r2, r3]
   34ec2:	2318      	movs	r3, #24
   34ec4:	18fb      	adds	r3, r7, r3
   34ec6:	0011      	movs	r1, r2
   34ec8:	0018      	movs	r0, r3
   34eca:	4b23      	ldr	r3, [pc, #140]	; (34f58 <sw_timer_init+0xcc>)
   34ecc:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   34ece:	4b23      	ldr	r3, [pc, #140]	; (34f5c <sw_timer_init+0xd0>)
   34ed0:	4798      	blx	r3
   34ed2:	0004      	movs	r4, r0
   34ed4:	683b      	ldr	r3, [r7, #0]
   34ed6:	885b      	ldrh	r3, [r3, #2]
   34ed8:	001a      	movs	r2, r3
   34eda:	4b21      	ldr	r3, [pc, #132]	; (34f60 <sw_timer_init+0xd4>)
   34edc:	0011      	movs	r1, r2
   34ede:	22fa      	movs	r2, #250	; 0xfa
   34ee0:	0210      	lsls	r0, r2, #8
   34ee2:	4798      	blx	r3
   34ee4:	0003      	movs	r3, r0
   34ee6:	001a      	movs	r2, r3
   34ee8:	4b1e      	ldr	r3, [pc, #120]	; (34f64 <sw_timer_init+0xd8>)
   34eea:	0011      	movs	r1, r2
   34eec:	0020      	movs	r0, r4
   34eee:	4798      	blx	r3
   34ef0:	0003      	movs	r3, r0
   34ef2:	001a      	movs	r2, r3
   34ef4:	2318      	movs	r3, #24
   34ef6:	18fb      	adds	r3, r7, r3
   34ef8:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   34efa:	2318      	movs	r3, #24
   34efc:	18fb      	adds	r3, r7, r3
   34efe:	2205      	movs	r2, #5
   34f00:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   34f02:	683b      	ldr	r3, [r7, #0]
   34f04:	781b      	ldrb	r3, [r3, #0]
   34f06:	001a      	movs	r2, r3
   34f08:	230c      	movs	r3, #12
   34f0a:	18fb      	adds	r3, r7, r3
   34f0c:	0092      	lsls	r2, r2, #2
   34f0e:	58d1      	ldr	r1, [r2, r3]
   34f10:	2318      	movs	r3, #24
   34f12:	18fa      	adds	r2, r7, r3
   34f14:	23bc      	movs	r3, #188	; 0xbc
   34f16:	18fb      	adds	r3, r7, r3
   34f18:	681b      	ldr	r3, [r3, #0]
   34f1a:	0018      	movs	r0, r3
   34f1c:	4b12      	ldr	r3, [pc, #72]	; (34f68 <sw_timer_init+0xdc>)
   34f1e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   34f20:	683b      	ldr	r3, [r7, #0]
   34f22:	785b      	ldrb	r3, [r3, #1]
   34f24:	3308      	adds	r3, #8
   34f26:	b2da      	uxtb	r2, r3
   34f28:	4910      	ldr	r1, [pc, #64]	; (34f6c <sw_timer_init+0xe0>)
   34f2a:	23bc      	movs	r3, #188	; 0xbc
   34f2c:	18fb      	adds	r3, r7, r3
   34f2e:	681b      	ldr	r3, [r3, #0]
   34f30:	0018      	movs	r0, r3
   34f32:	4b0f      	ldr	r3, [pc, #60]	; (34f70 <sw_timer_init+0xe4>)
   34f34:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   34f36:	683b      	ldr	r3, [r7, #0]
   34f38:	785b      	ldrb	r3, [r3, #1]
   34f3a:	3308      	adds	r3, #8
   34f3c:	b2da      	uxtb	r2, r3
   34f3e:	23bc      	movs	r3, #188	; 0xbc
   34f40:	18fb      	adds	r3, r7, r3
   34f42:	681b      	ldr	r3, [r3, #0]
   34f44:	0011      	movs	r1, r2
   34f46:	0018      	movs	r0, r3
   34f48:	4b0a      	ldr	r3, [pc, #40]	; (34f74 <sw_timer_init+0xe8>)
   34f4a:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   34f4c:	46c0      	nop			; (mov r8, r8)
   34f4e:	46bd      	mov	sp, r7
   34f50:	b031      	add	sp, #196	; 0xc4
   34f52:	bd90      	pop	{r4, r7, pc}
   34f54:	0003cef8 	.word	0x0003cef8
   34f58:	0002cd6d 	.word	0x0002cd6d
   34f5c:	00034df5 	.word	0x00034df5
   34f60:	0003555d 	.word	0x0003555d
   34f64:	00035449 	.word	0x00035449
   34f68:	0002d3c9 	.word	0x0002d3c9
   34f6c:	00034e49 	.word	0x00034e49
   34f70:	0002d7e1 	.word	0x0002d7e1
   34f74:	0002d821 	.word	0x0002d821

00034f78 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   34f78:	b580      	push	{r7, lr}
   34f7a:	b084      	sub	sp, #16
   34f7c:	af00      	add	r7, sp, #0
   34f7e:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   34f80:	687b      	ldr	r3, [r7, #4]
   34f82:	3314      	adds	r3, #20
   34f84:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   34f86:	68fb      	ldr	r3, [r7, #12]
   34f88:	0018      	movs	r0, r3
   34f8a:	4b03      	ldr	r3, [pc, #12]	; (34f98 <sw_timer_enable+0x20>)
   34f8c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   34f8e:	46c0      	nop			; (mov r8, r8)
   34f90:	46bd      	mov	sp, r7
   34f92:	b004      	add	sp, #16
   34f94:	bd80      	pop	{r7, pc}
   34f96:	46c0      	nop			; (mov r8, r8)
   34f98:	00034e19 	.word	0x00034e19

00034f9c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   34f9c:	b580      	push	{r7, lr}
   34f9e:	b086      	sub	sp, #24
   34fa0:	af00      	add	r7, sp, #0
   34fa2:	60f8      	str	r0, [r7, #12]
   34fa4:	60b9      	str	r1, [r7, #8]
   34fa6:	607a      	str	r2, [r7, #4]
   34fa8:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   34faa:	2300      	movs	r3, #0
   34fac:	617b      	str	r3, [r7, #20]
   34fae:	e032      	b.n	35016 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   34fb0:	68f9      	ldr	r1, [r7, #12]
   34fb2:	697a      	ldr	r2, [r7, #20]
   34fb4:	0013      	movs	r3, r2
   34fb6:	009b      	lsls	r3, r3, #2
   34fb8:	189b      	adds	r3, r3, r2
   34fba:	009b      	lsls	r3, r3, #2
   34fbc:	5c5b      	ldrb	r3, [r3, r1]
   34fbe:	07db      	lsls	r3, r3, #31
   34fc0:	0fdb      	lsrs	r3, r3, #31
   34fc2:	b2db      	uxtb	r3, r3
   34fc4:	2b00      	cmp	r3, #0
   34fc6:	d123      	bne.n	35010 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   34fc8:	697a      	ldr	r2, [r7, #20]
   34fca:	0013      	movs	r3, r2
   34fcc:	009b      	lsls	r3, r3, #2
   34fce:	189b      	adds	r3, r3, r2
   34fd0:	009b      	lsls	r3, r3, #2
   34fd2:	68fa      	ldr	r2, [r7, #12]
   34fd4:	18d3      	adds	r3, r2, r3
   34fd6:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   34fd8:	693b      	ldr	r3, [r7, #16]
   34fda:	68ba      	ldr	r2, [r7, #8]
   34fdc:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   34fde:	693b      	ldr	r3, [r7, #16]
   34fe0:	781a      	ldrb	r2, [r3, #0]
   34fe2:	2102      	movs	r1, #2
   34fe4:	438a      	bics	r2, r1
   34fe6:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   34fe8:	693b      	ldr	r3, [r7, #16]
   34fea:	687a      	ldr	r2, [r7, #4]
   34fec:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   34fee:	68fb      	ldr	r3, [r7, #12]
   34ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   34ff2:	4b0d      	ldr	r3, [pc, #52]	; (35028 <sw_timer_register_callback+0x8c>)
   34ff4:	0011      	movs	r1, r2
   34ff6:	6838      	ldr	r0, [r7, #0]
   34ff8:	4798      	blx	r3
   34ffa:	0003      	movs	r3, r0
   34ffc:	001a      	movs	r2, r3
   34ffe:	693b      	ldr	r3, [r7, #16]
   35000:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   35002:	693b      	ldr	r3, [r7, #16]
   35004:	781a      	ldrb	r2, [r3, #0]
   35006:	2101      	movs	r1, #1
   35008:	430a      	orrs	r2, r1
   3500a:	701a      	strb	r2, [r3, #0]
			return index;
   3500c:	697b      	ldr	r3, [r7, #20]
   3500e:	e007      	b.n	35020 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   35010:	697b      	ldr	r3, [r7, #20]
   35012:	3301      	adds	r3, #1
   35014:	617b      	str	r3, [r7, #20]
   35016:	697b      	ldr	r3, [r7, #20]
   35018:	2b00      	cmp	r3, #0
   3501a:	ddc9      	ble.n	34fb0 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   3501c:	2301      	movs	r3, #1
   3501e:	425b      	negs	r3, r3
}
   35020:	0018      	movs	r0, r3
   35022:	46bd      	mov	sp, r7
   35024:	b006      	add	sp, #24
   35026:	bd80      	pop	{r7, pc}
   35028:	00035449 	.word	0x00035449

0003502c <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   3502c:	b580      	push	{r7, lr}
   3502e:	b086      	sub	sp, #24
   35030:	af00      	add	r7, sp, #0
   35032:	60f8      	str	r0, [r7, #12]
   35034:	60b9      	str	r1, [r7, #8]
   35036:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   35038:	68ba      	ldr	r2, [r7, #8]
   3503a:	0013      	movs	r3, r2
   3503c:	009b      	lsls	r3, r3, #2
   3503e:	189b      	adds	r3, r3, r2
   35040:	009b      	lsls	r3, r3, #2
   35042:	68fa      	ldr	r2, [r7, #12]
   35044:	18d3      	adds	r3, r2, r3
   35046:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   35048:	697b      	ldr	r3, [r7, #20]
   3504a:	781a      	ldrb	r2, [r3, #0]
   3504c:	2102      	movs	r1, #2
   3504e:	430a      	orrs	r2, r1
   35050:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   35052:	68fb      	ldr	r3, [r7, #12]
   35054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   35056:	4b07      	ldr	r3, [pc, #28]	; (35074 <sw_timer_enable_callback+0x48>)
   35058:	0011      	movs	r1, r2
   3505a:	6878      	ldr	r0, [r7, #4]
   3505c:	4798      	blx	r3
   3505e:	0003      	movs	r3, r0
   35060:	001a      	movs	r2, r3
   35062:	4b05      	ldr	r3, [pc, #20]	; (35078 <sw_timer_enable_callback+0x4c>)
   35064:	681b      	ldr	r3, [r3, #0]
   35066:	18d2      	adds	r2, r2, r3
   35068:	697b      	ldr	r3, [r7, #20]
   3506a:	611a      	str	r2, [r3, #16]
}
   3506c:	46c0      	nop			; (mov r8, r8)
   3506e:	46bd      	mov	sp, r7
   35070:	b006      	add	sp, #24
   35072:	bd80      	pop	{r7, pc}
   35074:	00035449 	.word	0x00035449
   35078:	2000463c 	.word	0x2000463c

0003507c <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   3507c:	b580      	push	{r7, lr}
   3507e:	b084      	sub	sp, #16
   35080:	af00      	add	r7, sp, #0
   35082:	6078      	str	r0, [r7, #4]
   35084:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   35086:	683a      	ldr	r2, [r7, #0]
   35088:	0013      	movs	r3, r2
   3508a:	009b      	lsls	r3, r3, #2
   3508c:	189b      	adds	r3, r3, r2
   3508e:	009b      	lsls	r3, r3, #2
   35090:	687a      	ldr	r2, [r7, #4]
   35092:	18d3      	adds	r3, r2, r3
   35094:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   35096:	68fb      	ldr	r3, [r7, #12]
   35098:	781a      	ldrb	r2, [r3, #0]
   3509a:	2102      	movs	r1, #2
   3509c:	438a      	bics	r2, r1
   3509e:	701a      	strb	r2, [r3, #0]
}
   350a0:	46c0      	nop			; (mov r8, r8)
   350a2:	46bd      	mov	sp, r7
   350a4:	b004      	add	sp, #16
   350a6:	bd80      	pop	{r7, pc}

000350a8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   350a8:	b590      	push	{r4, r7, lr}
   350aa:	b085      	sub	sp, #20
   350ac:	af00      	add	r7, sp, #0
   350ae:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   350b0:	2300      	movs	r3, #0
   350b2:	60fb      	str	r3, [r7, #12]
   350b4:	e053      	b.n	3515e <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   350b6:	6879      	ldr	r1, [r7, #4]
   350b8:	68fa      	ldr	r2, [r7, #12]
   350ba:	0013      	movs	r3, r2
   350bc:	009b      	lsls	r3, r3, #2
   350be:	189b      	adds	r3, r3, r2
   350c0:	009b      	lsls	r3, r3, #2
   350c2:	5c5b      	ldrb	r3, [r3, r1]
   350c4:	07db      	lsls	r3, r3, #31
   350c6:	0fdb      	lsrs	r3, r3, #31
   350c8:	b2db      	uxtb	r3, r3
   350ca:	2b00      	cmp	r3, #0
   350cc:	d044      	beq.n	35158 <sw_timer_task+0xb0>
   350ce:	6879      	ldr	r1, [r7, #4]
   350d0:	68fa      	ldr	r2, [r7, #12]
   350d2:	0013      	movs	r3, r2
   350d4:	009b      	lsls	r3, r3, #2
   350d6:	189b      	adds	r3, r3, r2
   350d8:	009b      	lsls	r3, r3, #2
   350da:	5c5b      	ldrb	r3, [r3, r1]
   350dc:	079b      	lsls	r3, r3, #30
   350de:	0fdb      	lsrs	r3, r3, #31
   350e0:	b2db      	uxtb	r3, r3
   350e2:	2b00      	cmp	r3, #0
   350e4:	d038      	beq.n	35158 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   350e6:	68fa      	ldr	r2, [r7, #12]
   350e8:	0013      	movs	r3, r2
   350ea:	009b      	lsls	r3, r3, #2
   350ec:	189b      	adds	r3, r3, r2
   350ee:	009b      	lsls	r3, r3, #2
   350f0:	687a      	ldr	r2, [r7, #4]
   350f2:	18d3      	adds	r3, r2, r3
   350f4:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   350f6:	68bb      	ldr	r3, [r7, #8]
   350f8:	691a      	ldr	r2, [r3, #16]
   350fa:	4b1c      	ldr	r3, [pc, #112]	; (3516c <sw_timer_task+0xc4>)
   350fc:	681b      	ldr	r3, [r3, #0]
   350fe:	1ad3      	subs	r3, r2, r3
   35100:	d52a      	bpl.n	35158 <sw_timer_task+0xb0>
   35102:	68bb      	ldr	r3, [r7, #8]
   35104:	781b      	ldrb	r3, [r3, #0]
   35106:	2204      	movs	r2, #4
   35108:	4013      	ands	r3, r2
   3510a:	b2db      	uxtb	r3, r3
   3510c:	2b00      	cmp	r3, #0
   3510e:	d123      	bne.n	35158 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   35110:	68bb      	ldr	r3, [r7, #8]
   35112:	781a      	ldrb	r2, [r3, #0]
   35114:	2104      	movs	r1, #4
   35116:	430a      	orrs	r2, r1
   35118:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   3511a:	68bb      	ldr	r3, [r7, #8]
   3511c:	68db      	ldr	r3, [r3, #12]
   3511e:	2b00      	cmp	r3, #0
   35120:	d007      	beq.n	35132 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   35122:	68bb      	ldr	r3, [r7, #8]
   35124:	68da      	ldr	r2, [r3, #12]
   35126:	4b11      	ldr	r3, [pc, #68]	; (3516c <sw_timer_task+0xc4>)
   35128:	681b      	ldr	r3, [r3, #0]
   3512a:	18d2      	adds	r2, r2, r3
   3512c:	68bb      	ldr	r3, [r7, #8]
   3512e:	611a      	str	r2, [r3, #16]
   35130:	e004      	b.n	3513c <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   35132:	68bb      	ldr	r3, [r7, #8]
   35134:	781a      	ldrb	r2, [r3, #0]
   35136:	2102      	movs	r1, #2
   35138:	438a      	bics	r2, r1
   3513a:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   3513c:	68bb      	ldr	r3, [r7, #8]
   3513e:	685c      	ldr	r4, [r3, #4]
   35140:	68bb      	ldr	r3, [r7, #8]
   35142:	689a      	ldr	r2, [r3, #8]
   35144:	68bb      	ldr	r3, [r7, #8]
   35146:	68db      	ldr	r3, [r3, #12]
   35148:	68f9      	ldr	r1, [r7, #12]
   3514a:	6878      	ldr	r0, [r7, #4]
   3514c:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3514e:	68bb      	ldr	r3, [r7, #8]
   35150:	781a      	ldrb	r2, [r3, #0]
   35152:	2104      	movs	r1, #4
   35154:	438a      	bics	r2, r1
   35156:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   35158:	68fb      	ldr	r3, [r7, #12]
   3515a:	3301      	adds	r3, #1
   3515c:	60fb      	str	r3, [r7, #12]
   3515e:	68fb      	ldr	r3, [r7, #12]
   35160:	2b00      	cmp	r3, #0
   35162:	dda8      	ble.n	350b6 <sw_timer_task+0xe>
			}
		}
	}
}
   35164:	46c0      	nop			; (mov r8, r8)
   35166:	46bd      	mov	sp, r7
   35168:	b005      	add	sp, #20
   3516a:	bd90      	pop	{r4, r7, pc}
   3516c:	2000463c 	.word	0x2000463c

00035170 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   35170:	b580      	push	{r7, lr}
   35172:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   35174:	4b06      	ldr	r3, [pc, #24]	; (35190 <main+0x20>)
   35176:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   35178:	4b06      	ldr	r3, [pc, #24]	; (35194 <main+0x24>)
   3517a:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   3517c:	2001      	movs	r0, #1
   3517e:	4b06      	ldr	r3, [pc, #24]	; (35198 <main+0x28>)
   35180:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   35182:	4b06      	ldr	r3, [pc, #24]	; (3519c <main+0x2c>)
   35184:	4798      	blx	r3

    return 0;  // Will not get here
   35186:	2300      	movs	r3, #0
}
   35188:	0018      	movs	r0, r3
   3518a:	46bd      	mov	sp, r7
   3518c:	bd80      	pop	{r7, pc}
   3518e:	46c0      	nop			; (mov r8, r8)
   35190:	0002cc61 	.word	0x0002cc61
   35194:	000206d5 	.word	0x000206d5
   35198:	0001ad9d 	.word	0x0001ad9d
   3519c:	0001ed2d 	.word	0x0001ed2d

000351a0 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   351a0:	b580      	push	{r7, lr}
   351a2:	b082      	sub	sp, #8
   351a4:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   351a6:	4b29      	ldr	r3, [pc, #164]	; (3524c <vApplicationDaemonTaskStartupHook+0xac>)
   351a8:	0018      	movs	r0, r3
   351aa:	4b29      	ldr	r3, [pc, #164]	; (35250 <vApplicationDaemonTaskStartupHook+0xb0>)
   351ac:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   351ae:	4b29      	ldr	r3, [pc, #164]	; (35254 <vApplicationDaemonTaskStartupHook+0xb4>)
   351b0:	0018      	movs	r0, r3
   351b2:	4b27      	ldr	r3, [pc, #156]	; (35250 <vApplicationDaemonTaskStartupHook+0xb0>)
   351b4:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   351b6:	4b28      	ldr	r3, [pc, #160]	; (35258 <vApplicationDaemonTaskStartupHook+0xb8>)
   351b8:	4798      	blx	r3
   351ba:	1e03      	subs	r3, r0, #0
   351bc:	d004      	beq.n	351c8 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   351be:	4b27      	ldr	r3, [pc, #156]	; (3525c <vApplicationDaemonTaskStartupHook+0xbc>)
   351c0:	0018      	movs	r0, r3
   351c2:	4b23      	ldr	r3, [pc, #140]	; (35250 <vApplicationDaemonTaskStartupHook+0xb0>)
   351c4:	4798      	blx	r3
   351c6:	e003      	b.n	351d0 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   351c8:	4b25      	ldr	r3, [pc, #148]	; (35260 <vApplicationDaemonTaskStartupHook+0xc0>)
   351ca:	0018      	movs	r0, r3
   351cc:	4b20      	ldr	r3, [pc, #128]	; (35250 <vApplicationDaemonTaskStartupHook+0xb0>)
   351ce:	4798      	blx	r3
    }

    if (0 != InitializeSeesaw()) {
   351d0:	4b24      	ldr	r3, [pc, #144]	; (35264 <vApplicationDaemonTaskStartupHook+0xc4>)
   351d2:	4798      	blx	r3
   351d4:	1e03      	subs	r3, r0, #0
   351d6:	d004      	beq.n	351e2 <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   351d8:	4b23      	ldr	r3, [pc, #140]	; (35268 <vApplicationDaemonTaskStartupHook+0xc8>)
   351da:	0018      	movs	r0, r3
   351dc:	4b1c      	ldr	r3, [pc, #112]	; (35250 <vApplicationDaemonTaskStartupHook+0xb0>)
   351de:	4798      	blx	r3
   351e0:	e003      	b.n	351ea <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   351e2:	4b22      	ldr	r3, [pc, #136]	; (3526c <vApplicationDaemonTaskStartupHook+0xcc>)
   351e4:	0018      	movs	r0, r3
   351e6:	4b1a      	ldr	r3, [pc, #104]	; (35250 <vApplicationDaemonTaskStartupHook+0xb0>)
   351e8:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   351ea:	1dfb      	adds	r3, r7, #7
   351ec:	2200      	movs	r2, #0
   351ee:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   351f0:	4b1f      	ldr	r3, [pc, #124]	; (35270 <vApplicationDaemonTaskStartupHook+0xd0>)
   351f2:	4798      	blx	r3
   351f4:	0002      	movs	r2, r0
   351f6:	1dfb      	adds	r3, r7, #7
   351f8:	0019      	movs	r1, r3
   351fa:	0010      	movs	r0, r2
   351fc:	4b1d      	ldr	r3, [pc, #116]	; (35274 <vApplicationDaemonTaskStartupHook+0xd4>)
   351fe:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   35200:	1dfb      	adds	r3, r7, #7
   35202:	781b      	ldrb	r3, [r3, #0]
   35204:	2b6c      	cmp	r3, #108	; 0x6c
   35206:	d004      	beq.n	35212 <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   35208:	4b1b      	ldr	r3, [pc, #108]	; (35278 <vApplicationDaemonTaskStartupHook+0xd8>)
   3520a:	0018      	movs	r0, r3
   3520c:	4b10      	ldr	r3, [pc, #64]	; (35250 <vApplicationDaemonTaskStartupHook+0xb0>)
   3520e:	4798      	blx	r3
   35210:	e010      	b.n	35234 <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   35212:	4b1a      	ldr	r3, [pc, #104]	; (3527c <vApplicationDaemonTaskStartupHook+0xdc>)
   35214:	0018      	movs	r0, r3
   35216:	4b0e      	ldr	r3, [pc, #56]	; (35250 <vApplicationDaemonTaskStartupHook+0xb0>)
   35218:	4798      	blx	r3
        if (InitImu() == 0) {
   3521a:	4b19      	ldr	r3, [pc, #100]	; (35280 <vApplicationDaemonTaskStartupHook+0xe0>)
   3521c:	4798      	blx	r3
   3521e:	1e03      	subs	r3, r0, #0
   35220:	d104      	bne.n	3522c <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   35222:	4b18      	ldr	r3, [pc, #96]	; (35284 <vApplicationDaemonTaskStartupHook+0xe4>)
   35224:	0018      	movs	r0, r3
   35226:	4b0a      	ldr	r3, [pc, #40]	; (35250 <vApplicationDaemonTaskStartupHook+0xb0>)
   35228:	4798      	blx	r3
   3522a:	e003      	b.n	35234 <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   3522c:	4b16      	ldr	r3, [pc, #88]	; (35288 <vApplicationDaemonTaskStartupHook+0xe8>)
   3522e:	0018      	movs	r0, r3
   35230:	4b07      	ldr	r3, [pc, #28]	; (35250 <vApplicationDaemonTaskStartupHook+0xb0>)
   35232:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   35234:	4b15      	ldr	r3, [pc, #84]	; (3528c <vApplicationDaemonTaskStartupHook+0xec>)
   35236:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   35238:	4b15      	ldr	r3, [pc, #84]	; (35290 <vApplicationDaemonTaskStartupHook+0xf0>)
   3523a:	681b      	ldr	r3, [r3, #0]
   3523c:	0018      	movs	r0, r3
   3523e:	4b15      	ldr	r3, [pc, #84]	; (35294 <vApplicationDaemonTaskStartupHook+0xf4>)
   35240:	4798      	blx	r3
}
   35242:	46c0      	nop			; (mov r8, r8)
   35244:	46bd      	mov	sp, r7
   35246:	b002      	add	sp, #8
   35248:	bd80      	pop	{r7, pc}
   3524a:	46c0      	nop			; (mov r8, r8)
   3524c:	0003cf04 	.word	0x0003cf04
   35250:	00020745 	.word	0x00020745
   35254:	0003cf28 	.word	0x0003cf28
   35258:	00015f15 	.word	0x00015f15
   3525c:	0003cf40 	.word	0x0003cf40
   35260:	0003cf64 	.word	0x0003cf64
   35264:	000172d9 	.word	0x000172d9
   35268:	0003cf80 	.word	0x0003cf80
   3526c:	0003cfa0 	.word	0x0003cfa0
   35270:	00017201 	.word	0x00017201
   35274:	00016d4d 	.word	0x00016d4d
   35278:	0003cfb8 	.word	0x0003cfb8
   3527c:	0003cfcc 	.word	0x0003cfcc
   35280:	00017211 	.word	0x00017211
   35284:	0003cfdc 	.word	0x0003cfdc
   35288:	0003cff0 	.word	0x0003cff0
   3528c:	00035299 	.word	0x00035299
   35290:	20004644 	.word	0x20004644
   35294:	0001ebd1 	.word	0x0001ebd1

00035298 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   35298:	b590      	push	{r4, r7, lr}
   3529a:	b083      	sub	sp, #12
   3529c:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   3529e:	4b44      	ldr	r3, [pc, #272]	; (353b0 <StartTasks+0x118>)
   352a0:	4798      	blx	r3
   352a2:	0003      	movs	r3, r0
   352a4:	4a43      	ldr	r2, [pc, #268]	; (353b4 <StartTasks+0x11c>)
   352a6:	4844      	ldr	r0, [pc, #272]	; (353b8 <StartTasks+0x120>)
   352a8:	2140      	movs	r1, #64	; 0x40
   352aa:	4c44      	ldr	r4, [pc, #272]	; (353bc <StartTasks+0x124>)
   352ac:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   352ae:	4b42      	ldr	r3, [pc, #264]	; (353b8 <StartTasks+0x120>)
   352b0:	0018      	movs	r0, r3
   352b2:	4b43      	ldr	r3, [pc, #268]	; (353c0 <StartTasks+0x128>)
   352b4:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   352b6:	23c8      	movs	r3, #200	; 0xc8
   352b8:	005a      	lsls	r2, r3, #1
   352ba:	4942      	ldr	r1, [pc, #264]	; (353c4 <StartTasks+0x12c>)
   352bc:	4842      	ldr	r0, [pc, #264]	; (353c8 <StartTasks+0x130>)
   352be:	4b43      	ldr	r3, [pc, #268]	; (353cc <StartTasks+0x134>)
   352c0:	9301      	str	r3, [sp, #4]
   352c2:	2304      	movs	r3, #4
   352c4:	9300      	str	r3, [sp, #0]
   352c6:	2300      	movs	r3, #0
   352c8:	4c41      	ldr	r4, [pc, #260]	; (353d0 <StartTasks+0x138>)
   352ca:	47a0      	blx	r4
   352cc:	0003      	movs	r3, r0
   352ce:	2b01      	cmp	r3, #1
   352d0:	d003      	beq.n	352da <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   352d2:	4b40      	ldr	r3, [pc, #256]	; (353d4 <StartTasks+0x13c>)
   352d4:	0018      	movs	r0, r3
   352d6:	4b3a      	ldr	r3, [pc, #232]	; (353c0 <StartTasks+0x128>)
   352d8:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   352da:	4b35      	ldr	r3, [pc, #212]	; (353b0 <StartTasks+0x118>)
   352dc:	4798      	blx	r3
   352de:	0003      	movs	r3, r0
   352e0:	4a3d      	ldr	r2, [pc, #244]	; (353d8 <StartTasks+0x140>)
   352e2:	4835      	ldr	r0, [pc, #212]	; (353b8 <StartTasks+0x120>)
   352e4:	2140      	movs	r1, #64	; 0x40
   352e6:	4c35      	ldr	r4, [pc, #212]	; (353bc <StartTasks+0x124>)
   352e8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   352ea:	4b33      	ldr	r3, [pc, #204]	; (353b8 <StartTasks+0x120>)
   352ec:	0018      	movs	r0, r3
   352ee:	4b34      	ldr	r3, [pc, #208]	; (353c0 <StartTasks+0x128>)
   352f0:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   352f2:	23fa      	movs	r3, #250	; 0xfa
   352f4:	009a      	lsls	r2, r3, #2
   352f6:	4939      	ldr	r1, [pc, #228]	; (353dc <StartTasks+0x144>)
   352f8:	4839      	ldr	r0, [pc, #228]	; (353e0 <StartTasks+0x148>)
   352fa:	4b3a      	ldr	r3, [pc, #232]	; (353e4 <StartTasks+0x14c>)
   352fc:	9301      	str	r3, [sp, #4]
   352fe:	2303      	movs	r3, #3
   35300:	9300      	str	r3, [sp, #0]
   35302:	2300      	movs	r3, #0
   35304:	4c32      	ldr	r4, [pc, #200]	; (353d0 <StartTasks+0x138>)
   35306:	47a0      	blx	r4
   35308:	0003      	movs	r3, r0
   3530a:	2b01      	cmp	r3, #1
   3530c:	d003      	beq.n	35316 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   3530e:	4b36      	ldr	r3, [pc, #216]	; (353e8 <StartTasks+0x150>)
   35310:	0018      	movs	r0, r3
   35312:	4b2b      	ldr	r3, [pc, #172]	; (353c0 <StartTasks+0x128>)
   35314:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   35316:	4b26      	ldr	r3, [pc, #152]	; (353b0 <StartTasks+0x118>)
   35318:	4798      	blx	r3
   3531a:	0003      	movs	r3, r0
   3531c:	4a33      	ldr	r2, [pc, #204]	; (353ec <StartTasks+0x154>)
   3531e:	4826      	ldr	r0, [pc, #152]	; (353b8 <StartTasks+0x120>)
   35320:	2140      	movs	r1, #64	; 0x40
   35322:	4c26      	ldr	r4, [pc, #152]	; (353bc <StartTasks+0x124>)
   35324:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   35326:	4b24      	ldr	r3, [pc, #144]	; (353b8 <StartTasks+0x120>)
   35328:	0018      	movs	r0, r3
   3532a:	4b25      	ldr	r3, [pc, #148]	; (353c0 <StartTasks+0x128>)
   3532c:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   3532e:	23c8      	movs	r3, #200	; 0xc8
   35330:	005a      	lsls	r2, r3, #1
   35332:	492f      	ldr	r1, [pc, #188]	; (353f0 <StartTasks+0x158>)
   35334:	482f      	ldr	r0, [pc, #188]	; (353f4 <StartTasks+0x15c>)
   35336:	4b30      	ldr	r3, [pc, #192]	; (353f8 <StartTasks+0x160>)
   35338:	9301      	str	r3, [sp, #4]
   3533a:	2304      	movs	r3, #4
   3533c:	9300      	str	r3, [sp, #0]
   3533e:	2300      	movs	r3, #0
   35340:	4c23      	ldr	r4, [pc, #140]	; (353d0 <StartTasks+0x138>)
   35342:	47a0      	blx	r4
   35344:	0003      	movs	r3, r0
   35346:	2b01      	cmp	r3, #1
   35348:	d003      	beq.n	35352 <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   3534a:	4b2c      	ldr	r3, [pc, #176]	; (353fc <StartTasks+0x164>)
   3534c:	0018      	movs	r0, r3
   3534e:	4b1c      	ldr	r3, [pc, #112]	; (353c0 <StartTasks+0x128>)
   35350:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   35352:	4b17      	ldr	r3, [pc, #92]	; (353b0 <StartTasks+0x118>)
   35354:	4798      	blx	r3
   35356:	0003      	movs	r3, r0
   35358:	4a29      	ldr	r2, [pc, #164]	; (35400 <StartTasks+0x168>)
   3535a:	4817      	ldr	r0, [pc, #92]	; (353b8 <StartTasks+0x120>)
   3535c:	2140      	movs	r1, #64	; 0x40
   3535e:	4c17      	ldr	r4, [pc, #92]	; (353bc <StartTasks+0x124>)
   35360:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   35362:	4b15      	ldr	r3, [pc, #84]	; (353b8 <StartTasks+0x120>)
   35364:	0018      	movs	r0, r3
   35366:	4b16      	ldr	r3, [pc, #88]	; (353c0 <StartTasks+0x128>)
   35368:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   3536a:	2380      	movs	r3, #128	; 0x80
   3536c:	005a      	lsls	r2, r3, #1
   3536e:	4925      	ldr	r1, [pc, #148]	; (35404 <StartTasks+0x16c>)
   35370:	4825      	ldr	r0, [pc, #148]	; (35408 <StartTasks+0x170>)
   35372:	4b26      	ldr	r3, [pc, #152]	; (3540c <StartTasks+0x174>)
   35374:	9301      	str	r3, [sp, #4]
   35376:	2304      	movs	r3, #4
   35378:	9300      	str	r3, [sp, #0]
   3537a:	2300      	movs	r3, #0
   3537c:	4c14      	ldr	r4, [pc, #80]	; (353d0 <StartTasks+0x138>)
   3537e:	47a0      	blx	r4
   35380:	0003      	movs	r3, r0
   35382:	2b01      	cmp	r3, #1
   35384:	d003      	beq.n	3538e <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   35386:	4b22      	ldr	r3, [pc, #136]	; (35410 <StartTasks+0x178>)
   35388:	0018      	movs	r0, r3
   3538a:	4b0d      	ldr	r3, [pc, #52]	; (353c0 <StartTasks+0x128>)
   3538c:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   3538e:	4b08      	ldr	r3, [pc, #32]	; (353b0 <StartTasks+0x118>)
   35390:	4798      	blx	r3
   35392:	0003      	movs	r3, r0
   35394:	4a1f      	ldr	r2, [pc, #124]	; (35414 <StartTasks+0x17c>)
   35396:	4808      	ldr	r0, [pc, #32]	; (353b8 <StartTasks+0x120>)
   35398:	2140      	movs	r1, #64	; 0x40
   3539a:	4c08      	ldr	r4, [pc, #32]	; (353bc <StartTasks+0x124>)
   3539c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3539e:	4b06      	ldr	r3, [pc, #24]	; (353b8 <StartTasks+0x120>)
   353a0:	0018      	movs	r0, r3
   353a2:	4b07      	ldr	r3, [pc, #28]	; (353c0 <StartTasks+0x128>)
   353a4:	4798      	blx	r3
}
   353a6:	46c0      	nop			; (mov r8, r8)
   353a8:	46bd      	mov	sp, r7
   353aa:	b001      	add	sp, #4
   353ac:	bd90      	pop	{r4, r7, pc}
   353ae:	46c0      	nop			; (mov r8, r8)
   353b0:	0001cd11 	.word	0x0001cd11
   353b4:	0003d00c 	.word	0x0003d00c
   353b8:	20005bd8 	.word	0x20005bd8
   353bc:	00037b5d 	.word	0x00037b5d
   353c0:	00020745 	.word	0x00020745
   353c4:	0003d030 	.word	0x0003d030
   353c8:	000149a1 	.word	0x000149a1
   353cc:	20004640 	.word	0x20004640
   353d0:	0001e755 	.word	0x0001e755
   353d4:	0003d03c 	.word	0x0003d03c
   353d8:	0003d068 	.word	0x0003d068
   353dc:	0003d088 	.word	0x0003d088
   353e0:	00019aa1 	.word	0x00019aa1
   353e4:	20004648 	.word	0x20004648
   353e8:	0003d094 	.word	0x0003d094
   353ec:	0003d0c0 	.word	0x0003d0c0
   353f0:	0003d0e0 	.word	0x0003d0e0
   353f4:	000177ed 	.word	0x000177ed
   353f8:	2000464c 	.word	0x2000464c
   353fc:	0003d0e8 	.word	0x0003d0e8
   35400:	0003d114 	.word	0x0003d114
   35404:	0003d138 	.word	0x0003d138
   35408:	000158a5 	.word	0x000158a5
   3540c:	20004650 	.word	0x20004650
   35410:	0003d148 	.word	0x0003d148
   35414:	0003d178 	.word	0x0003d178

00035418 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   35418:	b580      	push	{r7, lr}
   3541a:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   3541c:	4b02      	ldr	r3, [pc, #8]	; (35428 <vApplicationMallocFailedHook+0x10>)
   3541e:	0018      	movs	r0, r3
   35420:	4b02      	ldr	r3, [pc, #8]	; (3542c <vApplicationMallocFailedHook+0x14>)
   35422:	4798      	blx	r3
    while (1)
   35424:	e7fe      	b.n	35424 <vApplicationMallocFailedHook+0xc>
   35426:	46c0      	nop			; (mov r8, r8)
   35428:	0003d1a0 	.word	0x0003d1a0
   3542c:	00020745 	.word	0x00020745

00035430 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   35430:	b580      	push	{r7, lr}
   35432:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   35434:	4b02      	ldr	r3, [pc, #8]	; (35440 <vApplicationStackOverflowHook+0x10>)
   35436:	0018      	movs	r0, r3
   35438:	4b02      	ldr	r3, [pc, #8]	; (35444 <vApplicationStackOverflowHook+0x14>)
   3543a:	4798      	blx	r3
    while (1)
   3543c:	e7fe      	b.n	3543c <vApplicationStackOverflowHook+0xc>
   3543e:	46c0      	nop			; (mov r8, r8)
   35440:	0003d1cc 	.word	0x0003d1cc
   35444:	00020745 	.word	0x00020745

00035448 <__udivsi3>:
   35448:	2200      	movs	r2, #0
   3544a:	0843      	lsrs	r3, r0, #1
   3544c:	428b      	cmp	r3, r1
   3544e:	d374      	bcc.n	3553a <__udivsi3+0xf2>
   35450:	0903      	lsrs	r3, r0, #4
   35452:	428b      	cmp	r3, r1
   35454:	d35f      	bcc.n	35516 <__udivsi3+0xce>
   35456:	0a03      	lsrs	r3, r0, #8
   35458:	428b      	cmp	r3, r1
   3545a:	d344      	bcc.n	354e6 <__udivsi3+0x9e>
   3545c:	0b03      	lsrs	r3, r0, #12
   3545e:	428b      	cmp	r3, r1
   35460:	d328      	bcc.n	354b4 <__udivsi3+0x6c>
   35462:	0c03      	lsrs	r3, r0, #16
   35464:	428b      	cmp	r3, r1
   35466:	d30d      	bcc.n	35484 <__udivsi3+0x3c>
   35468:	22ff      	movs	r2, #255	; 0xff
   3546a:	0209      	lsls	r1, r1, #8
   3546c:	ba12      	rev	r2, r2
   3546e:	0c03      	lsrs	r3, r0, #16
   35470:	428b      	cmp	r3, r1
   35472:	d302      	bcc.n	3547a <__udivsi3+0x32>
   35474:	1212      	asrs	r2, r2, #8
   35476:	0209      	lsls	r1, r1, #8
   35478:	d065      	beq.n	35546 <__udivsi3+0xfe>
   3547a:	0b03      	lsrs	r3, r0, #12
   3547c:	428b      	cmp	r3, r1
   3547e:	d319      	bcc.n	354b4 <__udivsi3+0x6c>
   35480:	e000      	b.n	35484 <__udivsi3+0x3c>
   35482:	0a09      	lsrs	r1, r1, #8
   35484:	0bc3      	lsrs	r3, r0, #15
   35486:	428b      	cmp	r3, r1
   35488:	d301      	bcc.n	3548e <__udivsi3+0x46>
   3548a:	03cb      	lsls	r3, r1, #15
   3548c:	1ac0      	subs	r0, r0, r3
   3548e:	4152      	adcs	r2, r2
   35490:	0b83      	lsrs	r3, r0, #14
   35492:	428b      	cmp	r3, r1
   35494:	d301      	bcc.n	3549a <__udivsi3+0x52>
   35496:	038b      	lsls	r3, r1, #14
   35498:	1ac0      	subs	r0, r0, r3
   3549a:	4152      	adcs	r2, r2
   3549c:	0b43      	lsrs	r3, r0, #13
   3549e:	428b      	cmp	r3, r1
   354a0:	d301      	bcc.n	354a6 <__udivsi3+0x5e>
   354a2:	034b      	lsls	r3, r1, #13
   354a4:	1ac0      	subs	r0, r0, r3
   354a6:	4152      	adcs	r2, r2
   354a8:	0b03      	lsrs	r3, r0, #12
   354aa:	428b      	cmp	r3, r1
   354ac:	d301      	bcc.n	354b2 <__udivsi3+0x6a>
   354ae:	030b      	lsls	r3, r1, #12
   354b0:	1ac0      	subs	r0, r0, r3
   354b2:	4152      	adcs	r2, r2
   354b4:	0ac3      	lsrs	r3, r0, #11
   354b6:	428b      	cmp	r3, r1
   354b8:	d301      	bcc.n	354be <__udivsi3+0x76>
   354ba:	02cb      	lsls	r3, r1, #11
   354bc:	1ac0      	subs	r0, r0, r3
   354be:	4152      	adcs	r2, r2
   354c0:	0a83      	lsrs	r3, r0, #10
   354c2:	428b      	cmp	r3, r1
   354c4:	d301      	bcc.n	354ca <__udivsi3+0x82>
   354c6:	028b      	lsls	r3, r1, #10
   354c8:	1ac0      	subs	r0, r0, r3
   354ca:	4152      	adcs	r2, r2
   354cc:	0a43      	lsrs	r3, r0, #9
   354ce:	428b      	cmp	r3, r1
   354d0:	d301      	bcc.n	354d6 <__udivsi3+0x8e>
   354d2:	024b      	lsls	r3, r1, #9
   354d4:	1ac0      	subs	r0, r0, r3
   354d6:	4152      	adcs	r2, r2
   354d8:	0a03      	lsrs	r3, r0, #8
   354da:	428b      	cmp	r3, r1
   354dc:	d301      	bcc.n	354e2 <__udivsi3+0x9a>
   354de:	020b      	lsls	r3, r1, #8
   354e0:	1ac0      	subs	r0, r0, r3
   354e2:	4152      	adcs	r2, r2
   354e4:	d2cd      	bcs.n	35482 <__udivsi3+0x3a>
   354e6:	09c3      	lsrs	r3, r0, #7
   354e8:	428b      	cmp	r3, r1
   354ea:	d301      	bcc.n	354f0 <__udivsi3+0xa8>
   354ec:	01cb      	lsls	r3, r1, #7
   354ee:	1ac0      	subs	r0, r0, r3
   354f0:	4152      	adcs	r2, r2
   354f2:	0983      	lsrs	r3, r0, #6
   354f4:	428b      	cmp	r3, r1
   354f6:	d301      	bcc.n	354fc <__udivsi3+0xb4>
   354f8:	018b      	lsls	r3, r1, #6
   354fa:	1ac0      	subs	r0, r0, r3
   354fc:	4152      	adcs	r2, r2
   354fe:	0943      	lsrs	r3, r0, #5
   35500:	428b      	cmp	r3, r1
   35502:	d301      	bcc.n	35508 <__udivsi3+0xc0>
   35504:	014b      	lsls	r3, r1, #5
   35506:	1ac0      	subs	r0, r0, r3
   35508:	4152      	adcs	r2, r2
   3550a:	0903      	lsrs	r3, r0, #4
   3550c:	428b      	cmp	r3, r1
   3550e:	d301      	bcc.n	35514 <__udivsi3+0xcc>
   35510:	010b      	lsls	r3, r1, #4
   35512:	1ac0      	subs	r0, r0, r3
   35514:	4152      	adcs	r2, r2
   35516:	08c3      	lsrs	r3, r0, #3
   35518:	428b      	cmp	r3, r1
   3551a:	d301      	bcc.n	35520 <__udivsi3+0xd8>
   3551c:	00cb      	lsls	r3, r1, #3
   3551e:	1ac0      	subs	r0, r0, r3
   35520:	4152      	adcs	r2, r2
   35522:	0883      	lsrs	r3, r0, #2
   35524:	428b      	cmp	r3, r1
   35526:	d301      	bcc.n	3552c <__udivsi3+0xe4>
   35528:	008b      	lsls	r3, r1, #2
   3552a:	1ac0      	subs	r0, r0, r3
   3552c:	4152      	adcs	r2, r2
   3552e:	0843      	lsrs	r3, r0, #1
   35530:	428b      	cmp	r3, r1
   35532:	d301      	bcc.n	35538 <__udivsi3+0xf0>
   35534:	004b      	lsls	r3, r1, #1
   35536:	1ac0      	subs	r0, r0, r3
   35538:	4152      	adcs	r2, r2
   3553a:	1a41      	subs	r1, r0, r1
   3553c:	d200      	bcs.n	35540 <__udivsi3+0xf8>
   3553e:	4601      	mov	r1, r0
   35540:	4152      	adcs	r2, r2
   35542:	4610      	mov	r0, r2
   35544:	4770      	bx	lr
   35546:	e7ff      	b.n	35548 <__udivsi3+0x100>
   35548:	b501      	push	{r0, lr}
   3554a:	2000      	movs	r0, #0
   3554c:	f000 f8f0 	bl	35730 <__aeabi_idiv0>
   35550:	bd02      	pop	{r1, pc}
   35552:	46c0      	nop			; (mov r8, r8)

00035554 <__aeabi_uidivmod>:
   35554:	2900      	cmp	r1, #0
   35556:	d0f7      	beq.n	35548 <__udivsi3+0x100>
   35558:	e776      	b.n	35448 <__udivsi3>
   3555a:	4770      	bx	lr

0003555c <__divsi3>:
   3555c:	4603      	mov	r3, r0
   3555e:	430b      	orrs	r3, r1
   35560:	d47f      	bmi.n	35662 <__divsi3+0x106>
   35562:	2200      	movs	r2, #0
   35564:	0843      	lsrs	r3, r0, #1
   35566:	428b      	cmp	r3, r1
   35568:	d374      	bcc.n	35654 <__divsi3+0xf8>
   3556a:	0903      	lsrs	r3, r0, #4
   3556c:	428b      	cmp	r3, r1
   3556e:	d35f      	bcc.n	35630 <__divsi3+0xd4>
   35570:	0a03      	lsrs	r3, r0, #8
   35572:	428b      	cmp	r3, r1
   35574:	d344      	bcc.n	35600 <__divsi3+0xa4>
   35576:	0b03      	lsrs	r3, r0, #12
   35578:	428b      	cmp	r3, r1
   3557a:	d328      	bcc.n	355ce <__divsi3+0x72>
   3557c:	0c03      	lsrs	r3, r0, #16
   3557e:	428b      	cmp	r3, r1
   35580:	d30d      	bcc.n	3559e <__divsi3+0x42>
   35582:	22ff      	movs	r2, #255	; 0xff
   35584:	0209      	lsls	r1, r1, #8
   35586:	ba12      	rev	r2, r2
   35588:	0c03      	lsrs	r3, r0, #16
   3558a:	428b      	cmp	r3, r1
   3558c:	d302      	bcc.n	35594 <__divsi3+0x38>
   3558e:	1212      	asrs	r2, r2, #8
   35590:	0209      	lsls	r1, r1, #8
   35592:	d065      	beq.n	35660 <__divsi3+0x104>
   35594:	0b03      	lsrs	r3, r0, #12
   35596:	428b      	cmp	r3, r1
   35598:	d319      	bcc.n	355ce <__divsi3+0x72>
   3559a:	e000      	b.n	3559e <__divsi3+0x42>
   3559c:	0a09      	lsrs	r1, r1, #8
   3559e:	0bc3      	lsrs	r3, r0, #15
   355a0:	428b      	cmp	r3, r1
   355a2:	d301      	bcc.n	355a8 <__divsi3+0x4c>
   355a4:	03cb      	lsls	r3, r1, #15
   355a6:	1ac0      	subs	r0, r0, r3
   355a8:	4152      	adcs	r2, r2
   355aa:	0b83      	lsrs	r3, r0, #14
   355ac:	428b      	cmp	r3, r1
   355ae:	d301      	bcc.n	355b4 <__divsi3+0x58>
   355b0:	038b      	lsls	r3, r1, #14
   355b2:	1ac0      	subs	r0, r0, r3
   355b4:	4152      	adcs	r2, r2
   355b6:	0b43      	lsrs	r3, r0, #13
   355b8:	428b      	cmp	r3, r1
   355ba:	d301      	bcc.n	355c0 <__divsi3+0x64>
   355bc:	034b      	lsls	r3, r1, #13
   355be:	1ac0      	subs	r0, r0, r3
   355c0:	4152      	adcs	r2, r2
   355c2:	0b03      	lsrs	r3, r0, #12
   355c4:	428b      	cmp	r3, r1
   355c6:	d301      	bcc.n	355cc <__divsi3+0x70>
   355c8:	030b      	lsls	r3, r1, #12
   355ca:	1ac0      	subs	r0, r0, r3
   355cc:	4152      	adcs	r2, r2
   355ce:	0ac3      	lsrs	r3, r0, #11
   355d0:	428b      	cmp	r3, r1
   355d2:	d301      	bcc.n	355d8 <__divsi3+0x7c>
   355d4:	02cb      	lsls	r3, r1, #11
   355d6:	1ac0      	subs	r0, r0, r3
   355d8:	4152      	adcs	r2, r2
   355da:	0a83      	lsrs	r3, r0, #10
   355dc:	428b      	cmp	r3, r1
   355de:	d301      	bcc.n	355e4 <__divsi3+0x88>
   355e0:	028b      	lsls	r3, r1, #10
   355e2:	1ac0      	subs	r0, r0, r3
   355e4:	4152      	adcs	r2, r2
   355e6:	0a43      	lsrs	r3, r0, #9
   355e8:	428b      	cmp	r3, r1
   355ea:	d301      	bcc.n	355f0 <__divsi3+0x94>
   355ec:	024b      	lsls	r3, r1, #9
   355ee:	1ac0      	subs	r0, r0, r3
   355f0:	4152      	adcs	r2, r2
   355f2:	0a03      	lsrs	r3, r0, #8
   355f4:	428b      	cmp	r3, r1
   355f6:	d301      	bcc.n	355fc <__divsi3+0xa0>
   355f8:	020b      	lsls	r3, r1, #8
   355fa:	1ac0      	subs	r0, r0, r3
   355fc:	4152      	adcs	r2, r2
   355fe:	d2cd      	bcs.n	3559c <__divsi3+0x40>
   35600:	09c3      	lsrs	r3, r0, #7
   35602:	428b      	cmp	r3, r1
   35604:	d301      	bcc.n	3560a <__divsi3+0xae>
   35606:	01cb      	lsls	r3, r1, #7
   35608:	1ac0      	subs	r0, r0, r3
   3560a:	4152      	adcs	r2, r2
   3560c:	0983      	lsrs	r3, r0, #6
   3560e:	428b      	cmp	r3, r1
   35610:	d301      	bcc.n	35616 <__divsi3+0xba>
   35612:	018b      	lsls	r3, r1, #6
   35614:	1ac0      	subs	r0, r0, r3
   35616:	4152      	adcs	r2, r2
   35618:	0943      	lsrs	r3, r0, #5
   3561a:	428b      	cmp	r3, r1
   3561c:	d301      	bcc.n	35622 <__divsi3+0xc6>
   3561e:	014b      	lsls	r3, r1, #5
   35620:	1ac0      	subs	r0, r0, r3
   35622:	4152      	adcs	r2, r2
   35624:	0903      	lsrs	r3, r0, #4
   35626:	428b      	cmp	r3, r1
   35628:	d301      	bcc.n	3562e <__divsi3+0xd2>
   3562a:	010b      	lsls	r3, r1, #4
   3562c:	1ac0      	subs	r0, r0, r3
   3562e:	4152      	adcs	r2, r2
   35630:	08c3      	lsrs	r3, r0, #3
   35632:	428b      	cmp	r3, r1
   35634:	d301      	bcc.n	3563a <__divsi3+0xde>
   35636:	00cb      	lsls	r3, r1, #3
   35638:	1ac0      	subs	r0, r0, r3
   3563a:	4152      	adcs	r2, r2
   3563c:	0883      	lsrs	r3, r0, #2
   3563e:	428b      	cmp	r3, r1
   35640:	d301      	bcc.n	35646 <__divsi3+0xea>
   35642:	008b      	lsls	r3, r1, #2
   35644:	1ac0      	subs	r0, r0, r3
   35646:	4152      	adcs	r2, r2
   35648:	0843      	lsrs	r3, r0, #1
   3564a:	428b      	cmp	r3, r1
   3564c:	d301      	bcc.n	35652 <__divsi3+0xf6>
   3564e:	004b      	lsls	r3, r1, #1
   35650:	1ac0      	subs	r0, r0, r3
   35652:	4152      	adcs	r2, r2
   35654:	1a41      	subs	r1, r0, r1
   35656:	d200      	bcs.n	3565a <__divsi3+0xfe>
   35658:	4601      	mov	r1, r0
   3565a:	4152      	adcs	r2, r2
   3565c:	4610      	mov	r0, r2
   3565e:	4770      	bx	lr
   35660:	e05d      	b.n	3571e <__divsi3+0x1c2>
   35662:	0fca      	lsrs	r2, r1, #31
   35664:	d000      	beq.n	35668 <__divsi3+0x10c>
   35666:	4249      	negs	r1, r1
   35668:	1003      	asrs	r3, r0, #32
   3566a:	d300      	bcc.n	3566e <__divsi3+0x112>
   3566c:	4240      	negs	r0, r0
   3566e:	4053      	eors	r3, r2
   35670:	2200      	movs	r2, #0
   35672:	469c      	mov	ip, r3
   35674:	0903      	lsrs	r3, r0, #4
   35676:	428b      	cmp	r3, r1
   35678:	d32d      	bcc.n	356d6 <__divsi3+0x17a>
   3567a:	0a03      	lsrs	r3, r0, #8
   3567c:	428b      	cmp	r3, r1
   3567e:	d312      	bcc.n	356a6 <__divsi3+0x14a>
   35680:	22fc      	movs	r2, #252	; 0xfc
   35682:	0189      	lsls	r1, r1, #6
   35684:	ba12      	rev	r2, r2
   35686:	0a03      	lsrs	r3, r0, #8
   35688:	428b      	cmp	r3, r1
   3568a:	d30c      	bcc.n	356a6 <__divsi3+0x14a>
   3568c:	0189      	lsls	r1, r1, #6
   3568e:	1192      	asrs	r2, r2, #6
   35690:	428b      	cmp	r3, r1
   35692:	d308      	bcc.n	356a6 <__divsi3+0x14a>
   35694:	0189      	lsls	r1, r1, #6
   35696:	1192      	asrs	r2, r2, #6
   35698:	428b      	cmp	r3, r1
   3569a:	d304      	bcc.n	356a6 <__divsi3+0x14a>
   3569c:	0189      	lsls	r1, r1, #6
   3569e:	d03a      	beq.n	35716 <__divsi3+0x1ba>
   356a0:	1192      	asrs	r2, r2, #6
   356a2:	e000      	b.n	356a6 <__divsi3+0x14a>
   356a4:	0989      	lsrs	r1, r1, #6
   356a6:	09c3      	lsrs	r3, r0, #7
   356a8:	428b      	cmp	r3, r1
   356aa:	d301      	bcc.n	356b0 <__divsi3+0x154>
   356ac:	01cb      	lsls	r3, r1, #7
   356ae:	1ac0      	subs	r0, r0, r3
   356b0:	4152      	adcs	r2, r2
   356b2:	0983      	lsrs	r3, r0, #6
   356b4:	428b      	cmp	r3, r1
   356b6:	d301      	bcc.n	356bc <__divsi3+0x160>
   356b8:	018b      	lsls	r3, r1, #6
   356ba:	1ac0      	subs	r0, r0, r3
   356bc:	4152      	adcs	r2, r2
   356be:	0943      	lsrs	r3, r0, #5
   356c0:	428b      	cmp	r3, r1
   356c2:	d301      	bcc.n	356c8 <__divsi3+0x16c>
   356c4:	014b      	lsls	r3, r1, #5
   356c6:	1ac0      	subs	r0, r0, r3
   356c8:	4152      	adcs	r2, r2
   356ca:	0903      	lsrs	r3, r0, #4
   356cc:	428b      	cmp	r3, r1
   356ce:	d301      	bcc.n	356d4 <__divsi3+0x178>
   356d0:	010b      	lsls	r3, r1, #4
   356d2:	1ac0      	subs	r0, r0, r3
   356d4:	4152      	adcs	r2, r2
   356d6:	08c3      	lsrs	r3, r0, #3
   356d8:	428b      	cmp	r3, r1
   356da:	d301      	bcc.n	356e0 <__divsi3+0x184>
   356dc:	00cb      	lsls	r3, r1, #3
   356de:	1ac0      	subs	r0, r0, r3
   356e0:	4152      	adcs	r2, r2
   356e2:	0883      	lsrs	r3, r0, #2
   356e4:	428b      	cmp	r3, r1
   356e6:	d301      	bcc.n	356ec <__divsi3+0x190>
   356e8:	008b      	lsls	r3, r1, #2
   356ea:	1ac0      	subs	r0, r0, r3
   356ec:	4152      	adcs	r2, r2
   356ee:	d2d9      	bcs.n	356a4 <__divsi3+0x148>
   356f0:	0843      	lsrs	r3, r0, #1
   356f2:	428b      	cmp	r3, r1
   356f4:	d301      	bcc.n	356fa <__divsi3+0x19e>
   356f6:	004b      	lsls	r3, r1, #1
   356f8:	1ac0      	subs	r0, r0, r3
   356fa:	4152      	adcs	r2, r2
   356fc:	1a41      	subs	r1, r0, r1
   356fe:	d200      	bcs.n	35702 <__divsi3+0x1a6>
   35700:	4601      	mov	r1, r0
   35702:	4663      	mov	r3, ip
   35704:	4152      	adcs	r2, r2
   35706:	105b      	asrs	r3, r3, #1
   35708:	4610      	mov	r0, r2
   3570a:	d301      	bcc.n	35710 <__divsi3+0x1b4>
   3570c:	4240      	negs	r0, r0
   3570e:	2b00      	cmp	r3, #0
   35710:	d500      	bpl.n	35714 <__divsi3+0x1b8>
   35712:	4249      	negs	r1, r1
   35714:	4770      	bx	lr
   35716:	4663      	mov	r3, ip
   35718:	105b      	asrs	r3, r3, #1
   3571a:	d300      	bcc.n	3571e <__divsi3+0x1c2>
   3571c:	4240      	negs	r0, r0
   3571e:	b501      	push	{r0, lr}
   35720:	2000      	movs	r0, #0
   35722:	f000 f805 	bl	35730 <__aeabi_idiv0>
   35726:	bd02      	pop	{r1, pc}

00035728 <__aeabi_idivmod>:
   35728:	2900      	cmp	r1, #0
   3572a:	d0f8      	beq.n	3571e <__divsi3+0x1c2>
   3572c:	e716      	b.n	3555c <__divsi3>
   3572e:	4770      	bx	lr

00035730 <__aeabi_idiv0>:
   35730:	4770      	bx	lr
   35732:	46c0      	nop			; (mov r8, r8)

00035734 <__aeabi_ldivmod>:
   35734:	2b00      	cmp	r3, #0
   35736:	d115      	bne.n	35764 <__aeabi_ldivmod+0x30>
   35738:	2a00      	cmp	r2, #0
   3573a:	d113      	bne.n	35764 <__aeabi_ldivmod+0x30>
   3573c:	2900      	cmp	r1, #0
   3573e:	db06      	blt.n	3574e <__aeabi_ldivmod+0x1a>
   35740:	dc01      	bgt.n	35746 <__aeabi_ldivmod+0x12>
   35742:	2800      	cmp	r0, #0
   35744:	d006      	beq.n	35754 <__aeabi_ldivmod+0x20>
   35746:	2000      	movs	r0, #0
   35748:	43c0      	mvns	r0, r0
   3574a:	0841      	lsrs	r1, r0, #1
   3574c:	e002      	b.n	35754 <__aeabi_ldivmod+0x20>
   3574e:	2180      	movs	r1, #128	; 0x80
   35750:	0609      	lsls	r1, r1, #24
   35752:	2000      	movs	r0, #0
   35754:	b407      	push	{r0, r1, r2}
   35756:	4802      	ldr	r0, [pc, #8]	; (35760 <__aeabi_ldivmod+0x2c>)
   35758:	a101      	add	r1, pc, #4	; (adr r1, 35760 <__aeabi_ldivmod+0x2c>)
   3575a:	1840      	adds	r0, r0, r1
   3575c:	9002      	str	r0, [sp, #8]
   3575e:	bd03      	pop	{r0, r1, pc}
   35760:	ffffffd1 	.word	0xffffffd1
   35764:	b403      	push	{r0, r1}
   35766:	4668      	mov	r0, sp
   35768:	b501      	push	{r0, lr}
   3576a:	9802      	ldr	r0, [sp, #8]
   3576c:	f000 f830 	bl	357d0 <__gnu_ldivmod_helper>
   35770:	9b01      	ldr	r3, [sp, #4]
   35772:	469e      	mov	lr, r3
   35774:	b002      	add	sp, #8
   35776:	bc0c      	pop	{r2, r3}
   35778:	4770      	bx	lr
   3577a:	46c0      	nop			; (mov r8, r8)

0003577c <__aeabi_lmul>:
   3577c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3577e:	46ce      	mov	lr, r9
   35780:	4647      	mov	r7, r8
   35782:	0415      	lsls	r5, r2, #16
   35784:	0c2d      	lsrs	r5, r5, #16
   35786:	002e      	movs	r6, r5
   35788:	b580      	push	{r7, lr}
   3578a:	0407      	lsls	r7, r0, #16
   3578c:	0c14      	lsrs	r4, r2, #16
   3578e:	0c3f      	lsrs	r7, r7, #16
   35790:	4699      	mov	r9, r3
   35792:	0c03      	lsrs	r3, r0, #16
   35794:	437e      	muls	r6, r7
   35796:	435d      	muls	r5, r3
   35798:	4367      	muls	r7, r4
   3579a:	4363      	muls	r3, r4
   3579c:	197f      	adds	r7, r7, r5
   3579e:	0c34      	lsrs	r4, r6, #16
   357a0:	19e4      	adds	r4, r4, r7
   357a2:	469c      	mov	ip, r3
   357a4:	42a5      	cmp	r5, r4
   357a6:	d903      	bls.n	357b0 <__aeabi_lmul+0x34>
   357a8:	2380      	movs	r3, #128	; 0x80
   357aa:	025b      	lsls	r3, r3, #9
   357ac:	4698      	mov	r8, r3
   357ae:	44c4      	add	ip, r8
   357b0:	464b      	mov	r3, r9
   357b2:	4351      	muls	r1, r2
   357b4:	4343      	muls	r3, r0
   357b6:	0436      	lsls	r6, r6, #16
   357b8:	0c36      	lsrs	r6, r6, #16
   357ba:	0c25      	lsrs	r5, r4, #16
   357bc:	0424      	lsls	r4, r4, #16
   357be:	4465      	add	r5, ip
   357c0:	19a4      	adds	r4, r4, r6
   357c2:	1859      	adds	r1, r3, r1
   357c4:	1949      	adds	r1, r1, r5
   357c6:	0020      	movs	r0, r4
   357c8:	bc0c      	pop	{r2, r3}
   357ca:	4690      	mov	r8, r2
   357cc:	4699      	mov	r9, r3
   357ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000357d0 <__gnu_ldivmod_helper>:
   357d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   357d2:	b083      	sub	sp, #12
   357d4:	0016      	movs	r6, r2
   357d6:	001f      	movs	r7, r3
   357d8:	9000      	str	r0, [sp, #0]
   357da:	9101      	str	r1, [sp, #4]
   357dc:	f001 ff50 	bl	37680 <__divdi3>
   357e0:	0004      	movs	r4, r0
   357e2:	000d      	movs	r5, r1
   357e4:	0002      	movs	r2, r0
   357e6:	000b      	movs	r3, r1
   357e8:	0030      	movs	r0, r6
   357ea:	0039      	movs	r1, r7
   357ec:	f7ff ffc6 	bl	3577c <__aeabi_lmul>
   357f0:	9a00      	ldr	r2, [sp, #0]
   357f2:	9b01      	ldr	r3, [sp, #4]
   357f4:	1a12      	subs	r2, r2, r0
   357f6:	418b      	sbcs	r3, r1
   357f8:	9908      	ldr	r1, [sp, #32]
   357fa:	0020      	movs	r0, r4
   357fc:	600a      	str	r2, [r1, #0]
   357fe:	604b      	str	r3, [r1, #4]
   35800:	0029      	movs	r1, r5
   35802:	b003      	add	sp, #12
   35804:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35806:	46c0      	nop			; (mov r8, r8)

00035808 <__aeabi_fdiv>:
   35808:	b5f0      	push	{r4, r5, r6, r7, lr}
   3580a:	4657      	mov	r7, sl
   3580c:	464e      	mov	r6, r9
   3580e:	46de      	mov	lr, fp
   35810:	4645      	mov	r5, r8
   35812:	b5e0      	push	{r5, r6, r7, lr}
   35814:	0244      	lsls	r4, r0, #9
   35816:	0043      	lsls	r3, r0, #1
   35818:	0fc6      	lsrs	r6, r0, #31
   3581a:	b083      	sub	sp, #12
   3581c:	1c0f      	adds	r7, r1, #0
   3581e:	0a64      	lsrs	r4, r4, #9
   35820:	0e1b      	lsrs	r3, r3, #24
   35822:	46b2      	mov	sl, r6
   35824:	d053      	beq.n	358ce <__aeabi_fdiv+0xc6>
   35826:	2bff      	cmp	r3, #255	; 0xff
   35828:	d027      	beq.n	3587a <__aeabi_fdiv+0x72>
   3582a:	2280      	movs	r2, #128	; 0x80
   3582c:	00e4      	lsls	r4, r4, #3
   3582e:	04d2      	lsls	r2, r2, #19
   35830:	4314      	orrs	r4, r2
   35832:	227f      	movs	r2, #127	; 0x7f
   35834:	4252      	negs	r2, r2
   35836:	4690      	mov	r8, r2
   35838:	4498      	add	r8, r3
   3583a:	2300      	movs	r3, #0
   3583c:	4699      	mov	r9, r3
   3583e:	469b      	mov	fp, r3
   35840:	027d      	lsls	r5, r7, #9
   35842:	0078      	lsls	r0, r7, #1
   35844:	0ffb      	lsrs	r3, r7, #31
   35846:	0a6d      	lsrs	r5, r5, #9
   35848:	0e00      	lsrs	r0, r0, #24
   3584a:	9300      	str	r3, [sp, #0]
   3584c:	d024      	beq.n	35898 <__aeabi_fdiv+0x90>
   3584e:	28ff      	cmp	r0, #255	; 0xff
   35850:	d046      	beq.n	358e0 <__aeabi_fdiv+0xd8>
   35852:	2380      	movs	r3, #128	; 0x80
   35854:	2100      	movs	r1, #0
   35856:	00ed      	lsls	r5, r5, #3
   35858:	04db      	lsls	r3, r3, #19
   3585a:	431d      	orrs	r5, r3
   3585c:	387f      	subs	r0, #127	; 0x7f
   3585e:	4647      	mov	r7, r8
   35860:	1a38      	subs	r0, r7, r0
   35862:	464f      	mov	r7, r9
   35864:	430f      	orrs	r7, r1
   35866:	00bf      	lsls	r7, r7, #2
   35868:	46b9      	mov	r9, r7
   3586a:	0033      	movs	r3, r6
   3586c:	9a00      	ldr	r2, [sp, #0]
   3586e:	4f87      	ldr	r7, [pc, #540]	; (35a8c <__aeabi_fdiv+0x284>)
   35870:	4053      	eors	r3, r2
   35872:	464a      	mov	r2, r9
   35874:	58ba      	ldr	r2, [r7, r2]
   35876:	9301      	str	r3, [sp, #4]
   35878:	4697      	mov	pc, r2
   3587a:	2c00      	cmp	r4, #0
   3587c:	d14e      	bne.n	3591c <__aeabi_fdiv+0x114>
   3587e:	2308      	movs	r3, #8
   35880:	4699      	mov	r9, r3
   35882:	33f7      	adds	r3, #247	; 0xf7
   35884:	4698      	mov	r8, r3
   35886:	3bfd      	subs	r3, #253	; 0xfd
   35888:	469b      	mov	fp, r3
   3588a:	027d      	lsls	r5, r7, #9
   3588c:	0078      	lsls	r0, r7, #1
   3588e:	0ffb      	lsrs	r3, r7, #31
   35890:	0a6d      	lsrs	r5, r5, #9
   35892:	0e00      	lsrs	r0, r0, #24
   35894:	9300      	str	r3, [sp, #0]
   35896:	d1da      	bne.n	3584e <__aeabi_fdiv+0x46>
   35898:	2d00      	cmp	r5, #0
   3589a:	d126      	bne.n	358ea <__aeabi_fdiv+0xe2>
   3589c:	2000      	movs	r0, #0
   3589e:	2101      	movs	r1, #1
   358a0:	0033      	movs	r3, r6
   358a2:	9a00      	ldr	r2, [sp, #0]
   358a4:	4f7a      	ldr	r7, [pc, #488]	; (35a90 <__aeabi_fdiv+0x288>)
   358a6:	4053      	eors	r3, r2
   358a8:	4642      	mov	r2, r8
   358aa:	1a10      	subs	r0, r2, r0
   358ac:	464a      	mov	r2, r9
   358ae:	430a      	orrs	r2, r1
   358b0:	0092      	lsls	r2, r2, #2
   358b2:	58ba      	ldr	r2, [r7, r2]
   358b4:	001d      	movs	r5, r3
   358b6:	4697      	mov	pc, r2
   358b8:	9b00      	ldr	r3, [sp, #0]
   358ba:	002c      	movs	r4, r5
   358bc:	469a      	mov	sl, r3
   358be:	468b      	mov	fp, r1
   358c0:	465b      	mov	r3, fp
   358c2:	2b02      	cmp	r3, #2
   358c4:	d131      	bne.n	3592a <__aeabi_fdiv+0x122>
   358c6:	4653      	mov	r3, sl
   358c8:	21ff      	movs	r1, #255	; 0xff
   358ca:	2400      	movs	r4, #0
   358cc:	e038      	b.n	35940 <__aeabi_fdiv+0x138>
   358ce:	2c00      	cmp	r4, #0
   358d0:	d117      	bne.n	35902 <__aeabi_fdiv+0xfa>
   358d2:	2304      	movs	r3, #4
   358d4:	4699      	mov	r9, r3
   358d6:	2300      	movs	r3, #0
   358d8:	4698      	mov	r8, r3
   358da:	3301      	adds	r3, #1
   358dc:	469b      	mov	fp, r3
   358de:	e7af      	b.n	35840 <__aeabi_fdiv+0x38>
   358e0:	20ff      	movs	r0, #255	; 0xff
   358e2:	2d00      	cmp	r5, #0
   358e4:	d10b      	bne.n	358fe <__aeabi_fdiv+0xf6>
   358e6:	2102      	movs	r1, #2
   358e8:	e7da      	b.n	358a0 <__aeabi_fdiv+0x98>
   358ea:	0028      	movs	r0, r5
   358ec:	f001 feaa 	bl	37644 <__clzsi2>
   358f0:	1f43      	subs	r3, r0, #5
   358f2:	409d      	lsls	r5, r3
   358f4:	2376      	movs	r3, #118	; 0x76
   358f6:	425b      	negs	r3, r3
   358f8:	1a18      	subs	r0, r3, r0
   358fa:	2100      	movs	r1, #0
   358fc:	e7af      	b.n	3585e <__aeabi_fdiv+0x56>
   358fe:	2103      	movs	r1, #3
   35900:	e7ad      	b.n	3585e <__aeabi_fdiv+0x56>
   35902:	0020      	movs	r0, r4
   35904:	f001 fe9e 	bl	37644 <__clzsi2>
   35908:	1f43      	subs	r3, r0, #5
   3590a:	409c      	lsls	r4, r3
   3590c:	2376      	movs	r3, #118	; 0x76
   3590e:	425b      	negs	r3, r3
   35910:	1a1b      	subs	r3, r3, r0
   35912:	4698      	mov	r8, r3
   35914:	2300      	movs	r3, #0
   35916:	4699      	mov	r9, r3
   35918:	469b      	mov	fp, r3
   3591a:	e791      	b.n	35840 <__aeabi_fdiv+0x38>
   3591c:	230c      	movs	r3, #12
   3591e:	4699      	mov	r9, r3
   35920:	33f3      	adds	r3, #243	; 0xf3
   35922:	4698      	mov	r8, r3
   35924:	3bfc      	subs	r3, #252	; 0xfc
   35926:	469b      	mov	fp, r3
   35928:	e78a      	b.n	35840 <__aeabi_fdiv+0x38>
   3592a:	2b03      	cmp	r3, #3
   3592c:	d100      	bne.n	35930 <__aeabi_fdiv+0x128>
   3592e:	e0a5      	b.n	35a7c <__aeabi_fdiv+0x274>
   35930:	4655      	mov	r5, sl
   35932:	2b01      	cmp	r3, #1
   35934:	d000      	beq.n	35938 <__aeabi_fdiv+0x130>
   35936:	e081      	b.n	35a3c <__aeabi_fdiv+0x234>
   35938:	2301      	movs	r3, #1
   3593a:	2100      	movs	r1, #0
   3593c:	2400      	movs	r4, #0
   3593e:	402b      	ands	r3, r5
   35940:	0264      	lsls	r4, r4, #9
   35942:	05c9      	lsls	r1, r1, #23
   35944:	0a60      	lsrs	r0, r4, #9
   35946:	07db      	lsls	r3, r3, #31
   35948:	4308      	orrs	r0, r1
   3594a:	4318      	orrs	r0, r3
   3594c:	b003      	add	sp, #12
   3594e:	bc3c      	pop	{r2, r3, r4, r5}
   35950:	4690      	mov	r8, r2
   35952:	4699      	mov	r9, r3
   35954:	46a2      	mov	sl, r4
   35956:	46ab      	mov	fp, r5
   35958:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3595a:	2480      	movs	r4, #128	; 0x80
   3595c:	2300      	movs	r3, #0
   3595e:	03e4      	lsls	r4, r4, #15
   35960:	21ff      	movs	r1, #255	; 0xff
   35962:	e7ed      	b.n	35940 <__aeabi_fdiv+0x138>
   35964:	21ff      	movs	r1, #255	; 0xff
   35966:	2400      	movs	r4, #0
   35968:	e7ea      	b.n	35940 <__aeabi_fdiv+0x138>
   3596a:	2301      	movs	r3, #1
   3596c:	1a59      	subs	r1, r3, r1
   3596e:	291b      	cmp	r1, #27
   35970:	dd66      	ble.n	35a40 <__aeabi_fdiv+0x238>
   35972:	9a01      	ldr	r2, [sp, #4]
   35974:	4013      	ands	r3, r2
   35976:	2100      	movs	r1, #0
   35978:	2400      	movs	r4, #0
   3597a:	e7e1      	b.n	35940 <__aeabi_fdiv+0x138>
   3597c:	2380      	movs	r3, #128	; 0x80
   3597e:	03db      	lsls	r3, r3, #15
   35980:	421c      	tst	r4, r3
   35982:	d038      	beq.n	359f6 <__aeabi_fdiv+0x1ee>
   35984:	421d      	tst	r5, r3
   35986:	d051      	beq.n	35a2c <__aeabi_fdiv+0x224>
   35988:	431c      	orrs	r4, r3
   3598a:	0264      	lsls	r4, r4, #9
   3598c:	0a64      	lsrs	r4, r4, #9
   3598e:	0033      	movs	r3, r6
   35990:	21ff      	movs	r1, #255	; 0xff
   35992:	e7d5      	b.n	35940 <__aeabi_fdiv+0x138>
   35994:	0163      	lsls	r3, r4, #5
   35996:	016c      	lsls	r4, r5, #5
   35998:	42a3      	cmp	r3, r4
   3599a:	d23b      	bcs.n	35a14 <__aeabi_fdiv+0x20c>
   3599c:	261b      	movs	r6, #27
   3599e:	2100      	movs	r1, #0
   359a0:	3801      	subs	r0, #1
   359a2:	2501      	movs	r5, #1
   359a4:	001f      	movs	r7, r3
   359a6:	0049      	lsls	r1, r1, #1
   359a8:	005b      	lsls	r3, r3, #1
   359aa:	2f00      	cmp	r7, #0
   359ac:	db01      	blt.n	359b2 <__aeabi_fdiv+0x1aa>
   359ae:	429c      	cmp	r4, r3
   359b0:	d801      	bhi.n	359b6 <__aeabi_fdiv+0x1ae>
   359b2:	1b1b      	subs	r3, r3, r4
   359b4:	4329      	orrs	r1, r5
   359b6:	3e01      	subs	r6, #1
   359b8:	2e00      	cmp	r6, #0
   359ba:	d1f3      	bne.n	359a4 <__aeabi_fdiv+0x19c>
   359bc:	001c      	movs	r4, r3
   359be:	1e63      	subs	r3, r4, #1
   359c0:	419c      	sbcs	r4, r3
   359c2:	430c      	orrs	r4, r1
   359c4:	0001      	movs	r1, r0
   359c6:	317f      	adds	r1, #127	; 0x7f
   359c8:	2900      	cmp	r1, #0
   359ca:	ddce      	ble.n	3596a <__aeabi_fdiv+0x162>
   359cc:	0763      	lsls	r3, r4, #29
   359ce:	d004      	beq.n	359da <__aeabi_fdiv+0x1d2>
   359d0:	230f      	movs	r3, #15
   359d2:	4023      	ands	r3, r4
   359d4:	2b04      	cmp	r3, #4
   359d6:	d000      	beq.n	359da <__aeabi_fdiv+0x1d2>
   359d8:	3404      	adds	r4, #4
   359da:	0123      	lsls	r3, r4, #4
   359dc:	d503      	bpl.n	359e6 <__aeabi_fdiv+0x1de>
   359de:	0001      	movs	r1, r0
   359e0:	4b2c      	ldr	r3, [pc, #176]	; (35a94 <__aeabi_fdiv+0x28c>)
   359e2:	3180      	adds	r1, #128	; 0x80
   359e4:	401c      	ands	r4, r3
   359e6:	29fe      	cmp	r1, #254	; 0xfe
   359e8:	dd0d      	ble.n	35a06 <__aeabi_fdiv+0x1fe>
   359ea:	2301      	movs	r3, #1
   359ec:	9a01      	ldr	r2, [sp, #4]
   359ee:	21ff      	movs	r1, #255	; 0xff
   359f0:	4013      	ands	r3, r2
   359f2:	2400      	movs	r4, #0
   359f4:	e7a4      	b.n	35940 <__aeabi_fdiv+0x138>
   359f6:	2380      	movs	r3, #128	; 0x80
   359f8:	03db      	lsls	r3, r3, #15
   359fa:	431c      	orrs	r4, r3
   359fc:	0264      	lsls	r4, r4, #9
   359fe:	0a64      	lsrs	r4, r4, #9
   35a00:	0033      	movs	r3, r6
   35a02:	21ff      	movs	r1, #255	; 0xff
   35a04:	e79c      	b.n	35940 <__aeabi_fdiv+0x138>
   35a06:	2301      	movs	r3, #1
   35a08:	9a01      	ldr	r2, [sp, #4]
   35a0a:	01a4      	lsls	r4, r4, #6
   35a0c:	0a64      	lsrs	r4, r4, #9
   35a0e:	b2c9      	uxtb	r1, r1
   35a10:	4013      	ands	r3, r2
   35a12:	e795      	b.n	35940 <__aeabi_fdiv+0x138>
   35a14:	1b1b      	subs	r3, r3, r4
   35a16:	261a      	movs	r6, #26
   35a18:	2101      	movs	r1, #1
   35a1a:	e7c2      	b.n	359a2 <__aeabi_fdiv+0x19a>
   35a1c:	9b00      	ldr	r3, [sp, #0]
   35a1e:	468b      	mov	fp, r1
   35a20:	469a      	mov	sl, r3
   35a22:	2400      	movs	r4, #0
   35a24:	e74c      	b.n	358c0 <__aeabi_fdiv+0xb8>
   35a26:	0263      	lsls	r3, r4, #9
   35a28:	d5e5      	bpl.n	359f6 <__aeabi_fdiv+0x1ee>
   35a2a:	2500      	movs	r5, #0
   35a2c:	2480      	movs	r4, #128	; 0x80
   35a2e:	03e4      	lsls	r4, r4, #15
   35a30:	432c      	orrs	r4, r5
   35a32:	0264      	lsls	r4, r4, #9
   35a34:	0a64      	lsrs	r4, r4, #9
   35a36:	9b00      	ldr	r3, [sp, #0]
   35a38:	21ff      	movs	r1, #255	; 0xff
   35a3a:	e781      	b.n	35940 <__aeabi_fdiv+0x138>
   35a3c:	9501      	str	r5, [sp, #4]
   35a3e:	e7c1      	b.n	359c4 <__aeabi_fdiv+0x1bc>
   35a40:	0023      	movs	r3, r4
   35a42:	2020      	movs	r0, #32
   35a44:	40cb      	lsrs	r3, r1
   35a46:	1a41      	subs	r1, r0, r1
   35a48:	408c      	lsls	r4, r1
   35a4a:	1e61      	subs	r1, r4, #1
   35a4c:	418c      	sbcs	r4, r1
   35a4e:	431c      	orrs	r4, r3
   35a50:	0763      	lsls	r3, r4, #29
   35a52:	d004      	beq.n	35a5e <__aeabi_fdiv+0x256>
   35a54:	230f      	movs	r3, #15
   35a56:	4023      	ands	r3, r4
   35a58:	2b04      	cmp	r3, #4
   35a5a:	d000      	beq.n	35a5e <__aeabi_fdiv+0x256>
   35a5c:	3404      	adds	r4, #4
   35a5e:	0163      	lsls	r3, r4, #5
   35a60:	d505      	bpl.n	35a6e <__aeabi_fdiv+0x266>
   35a62:	2301      	movs	r3, #1
   35a64:	9a01      	ldr	r2, [sp, #4]
   35a66:	2101      	movs	r1, #1
   35a68:	4013      	ands	r3, r2
   35a6a:	2400      	movs	r4, #0
   35a6c:	e768      	b.n	35940 <__aeabi_fdiv+0x138>
   35a6e:	2301      	movs	r3, #1
   35a70:	9a01      	ldr	r2, [sp, #4]
   35a72:	01a4      	lsls	r4, r4, #6
   35a74:	0a64      	lsrs	r4, r4, #9
   35a76:	4013      	ands	r3, r2
   35a78:	2100      	movs	r1, #0
   35a7a:	e761      	b.n	35940 <__aeabi_fdiv+0x138>
   35a7c:	2380      	movs	r3, #128	; 0x80
   35a7e:	03db      	lsls	r3, r3, #15
   35a80:	431c      	orrs	r4, r3
   35a82:	0264      	lsls	r4, r4, #9
   35a84:	0a64      	lsrs	r4, r4, #9
   35a86:	4653      	mov	r3, sl
   35a88:	21ff      	movs	r1, #255	; 0xff
   35a8a:	e759      	b.n	35940 <__aeabi_fdiv+0x138>
   35a8c:	0003d1f4 	.word	0x0003d1f4
   35a90:	0003d234 	.word	0x0003d234
   35a94:	f7ffffff 	.word	0xf7ffffff

00035a98 <__aeabi_fmul>:
   35a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35a9a:	4657      	mov	r7, sl
   35a9c:	464e      	mov	r6, r9
   35a9e:	4645      	mov	r5, r8
   35aa0:	46de      	mov	lr, fp
   35aa2:	b5e0      	push	{r5, r6, r7, lr}
   35aa4:	0247      	lsls	r7, r0, #9
   35aa6:	0046      	lsls	r6, r0, #1
   35aa8:	4688      	mov	r8, r1
   35aaa:	0a7f      	lsrs	r7, r7, #9
   35aac:	0e36      	lsrs	r6, r6, #24
   35aae:	0fc4      	lsrs	r4, r0, #31
   35ab0:	2e00      	cmp	r6, #0
   35ab2:	d047      	beq.n	35b44 <__aeabi_fmul+0xac>
   35ab4:	2eff      	cmp	r6, #255	; 0xff
   35ab6:	d024      	beq.n	35b02 <__aeabi_fmul+0x6a>
   35ab8:	00fb      	lsls	r3, r7, #3
   35aba:	2780      	movs	r7, #128	; 0x80
   35abc:	04ff      	lsls	r7, r7, #19
   35abe:	431f      	orrs	r7, r3
   35ac0:	2300      	movs	r3, #0
   35ac2:	4699      	mov	r9, r3
   35ac4:	469a      	mov	sl, r3
   35ac6:	3e7f      	subs	r6, #127	; 0x7f
   35ac8:	4643      	mov	r3, r8
   35aca:	025d      	lsls	r5, r3, #9
   35acc:	0058      	lsls	r0, r3, #1
   35ace:	0fdb      	lsrs	r3, r3, #31
   35ad0:	0a6d      	lsrs	r5, r5, #9
   35ad2:	0e00      	lsrs	r0, r0, #24
   35ad4:	4698      	mov	r8, r3
   35ad6:	d043      	beq.n	35b60 <__aeabi_fmul+0xc8>
   35ad8:	28ff      	cmp	r0, #255	; 0xff
   35ada:	d03b      	beq.n	35b54 <__aeabi_fmul+0xbc>
   35adc:	00eb      	lsls	r3, r5, #3
   35ade:	2580      	movs	r5, #128	; 0x80
   35ae0:	2200      	movs	r2, #0
   35ae2:	04ed      	lsls	r5, r5, #19
   35ae4:	431d      	orrs	r5, r3
   35ae6:	387f      	subs	r0, #127	; 0x7f
   35ae8:	1836      	adds	r6, r6, r0
   35aea:	1c73      	adds	r3, r6, #1
   35aec:	4641      	mov	r1, r8
   35aee:	469b      	mov	fp, r3
   35af0:	464b      	mov	r3, r9
   35af2:	4061      	eors	r1, r4
   35af4:	4313      	orrs	r3, r2
   35af6:	2b0f      	cmp	r3, #15
   35af8:	d864      	bhi.n	35bc4 <__aeabi_fmul+0x12c>
   35afa:	4875      	ldr	r0, [pc, #468]	; (35cd0 <__aeabi_fmul+0x238>)
   35afc:	009b      	lsls	r3, r3, #2
   35afe:	58c3      	ldr	r3, [r0, r3]
   35b00:	469f      	mov	pc, r3
   35b02:	2f00      	cmp	r7, #0
   35b04:	d142      	bne.n	35b8c <__aeabi_fmul+0xf4>
   35b06:	2308      	movs	r3, #8
   35b08:	4699      	mov	r9, r3
   35b0a:	3b06      	subs	r3, #6
   35b0c:	26ff      	movs	r6, #255	; 0xff
   35b0e:	469a      	mov	sl, r3
   35b10:	e7da      	b.n	35ac8 <__aeabi_fmul+0x30>
   35b12:	4641      	mov	r1, r8
   35b14:	2a02      	cmp	r2, #2
   35b16:	d028      	beq.n	35b6a <__aeabi_fmul+0xd2>
   35b18:	2a03      	cmp	r2, #3
   35b1a:	d100      	bne.n	35b1e <__aeabi_fmul+0x86>
   35b1c:	e0ce      	b.n	35cbc <__aeabi_fmul+0x224>
   35b1e:	2a01      	cmp	r2, #1
   35b20:	d000      	beq.n	35b24 <__aeabi_fmul+0x8c>
   35b22:	e0ac      	b.n	35c7e <__aeabi_fmul+0x1e6>
   35b24:	4011      	ands	r1, r2
   35b26:	2000      	movs	r0, #0
   35b28:	2200      	movs	r2, #0
   35b2a:	b2cc      	uxtb	r4, r1
   35b2c:	0240      	lsls	r0, r0, #9
   35b2e:	05d2      	lsls	r2, r2, #23
   35b30:	0a40      	lsrs	r0, r0, #9
   35b32:	07e4      	lsls	r4, r4, #31
   35b34:	4310      	orrs	r0, r2
   35b36:	4320      	orrs	r0, r4
   35b38:	bc3c      	pop	{r2, r3, r4, r5}
   35b3a:	4690      	mov	r8, r2
   35b3c:	4699      	mov	r9, r3
   35b3e:	46a2      	mov	sl, r4
   35b40:	46ab      	mov	fp, r5
   35b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35b44:	2f00      	cmp	r7, #0
   35b46:	d115      	bne.n	35b74 <__aeabi_fmul+0xdc>
   35b48:	2304      	movs	r3, #4
   35b4a:	4699      	mov	r9, r3
   35b4c:	3b03      	subs	r3, #3
   35b4e:	2600      	movs	r6, #0
   35b50:	469a      	mov	sl, r3
   35b52:	e7b9      	b.n	35ac8 <__aeabi_fmul+0x30>
   35b54:	20ff      	movs	r0, #255	; 0xff
   35b56:	2202      	movs	r2, #2
   35b58:	2d00      	cmp	r5, #0
   35b5a:	d0c5      	beq.n	35ae8 <__aeabi_fmul+0x50>
   35b5c:	2203      	movs	r2, #3
   35b5e:	e7c3      	b.n	35ae8 <__aeabi_fmul+0x50>
   35b60:	2d00      	cmp	r5, #0
   35b62:	d119      	bne.n	35b98 <__aeabi_fmul+0x100>
   35b64:	2000      	movs	r0, #0
   35b66:	2201      	movs	r2, #1
   35b68:	e7be      	b.n	35ae8 <__aeabi_fmul+0x50>
   35b6a:	2401      	movs	r4, #1
   35b6c:	22ff      	movs	r2, #255	; 0xff
   35b6e:	400c      	ands	r4, r1
   35b70:	2000      	movs	r0, #0
   35b72:	e7db      	b.n	35b2c <__aeabi_fmul+0x94>
   35b74:	0038      	movs	r0, r7
   35b76:	f001 fd65 	bl	37644 <__clzsi2>
   35b7a:	2676      	movs	r6, #118	; 0x76
   35b7c:	1f43      	subs	r3, r0, #5
   35b7e:	409f      	lsls	r7, r3
   35b80:	2300      	movs	r3, #0
   35b82:	4276      	negs	r6, r6
   35b84:	1a36      	subs	r6, r6, r0
   35b86:	4699      	mov	r9, r3
   35b88:	469a      	mov	sl, r3
   35b8a:	e79d      	b.n	35ac8 <__aeabi_fmul+0x30>
   35b8c:	230c      	movs	r3, #12
   35b8e:	4699      	mov	r9, r3
   35b90:	3b09      	subs	r3, #9
   35b92:	26ff      	movs	r6, #255	; 0xff
   35b94:	469a      	mov	sl, r3
   35b96:	e797      	b.n	35ac8 <__aeabi_fmul+0x30>
   35b98:	0028      	movs	r0, r5
   35b9a:	f001 fd53 	bl	37644 <__clzsi2>
   35b9e:	1f43      	subs	r3, r0, #5
   35ba0:	409d      	lsls	r5, r3
   35ba2:	2376      	movs	r3, #118	; 0x76
   35ba4:	425b      	negs	r3, r3
   35ba6:	1a18      	subs	r0, r3, r0
   35ba8:	2200      	movs	r2, #0
   35baa:	e79d      	b.n	35ae8 <__aeabi_fmul+0x50>
   35bac:	2080      	movs	r0, #128	; 0x80
   35bae:	2400      	movs	r4, #0
   35bb0:	03c0      	lsls	r0, r0, #15
   35bb2:	22ff      	movs	r2, #255	; 0xff
   35bb4:	e7ba      	b.n	35b2c <__aeabi_fmul+0x94>
   35bb6:	003d      	movs	r5, r7
   35bb8:	4652      	mov	r2, sl
   35bba:	e7ab      	b.n	35b14 <__aeabi_fmul+0x7c>
   35bbc:	003d      	movs	r5, r7
   35bbe:	0021      	movs	r1, r4
   35bc0:	4652      	mov	r2, sl
   35bc2:	e7a7      	b.n	35b14 <__aeabi_fmul+0x7c>
   35bc4:	0c3b      	lsrs	r3, r7, #16
   35bc6:	469c      	mov	ip, r3
   35bc8:	042a      	lsls	r2, r5, #16
   35bca:	0c12      	lsrs	r2, r2, #16
   35bcc:	0c2b      	lsrs	r3, r5, #16
   35bce:	0014      	movs	r4, r2
   35bd0:	4660      	mov	r0, ip
   35bd2:	4665      	mov	r5, ip
   35bd4:	043f      	lsls	r7, r7, #16
   35bd6:	0c3f      	lsrs	r7, r7, #16
   35bd8:	437c      	muls	r4, r7
   35bda:	4342      	muls	r2, r0
   35bdc:	435d      	muls	r5, r3
   35bde:	437b      	muls	r3, r7
   35be0:	0c27      	lsrs	r7, r4, #16
   35be2:	189b      	adds	r3, r3, r2
   35be4:	18ff      	adds	r7, r7, r3
   35be6:	42ba      	cmp	r2, r7
   35be8:	d903      	bls.n	35bf2 <__aeabi_fmul+0x15a>
   35bea:	2380      	movs	r3, #128	; 0x80
   35bec:	025b      	lsls	r3, r3, #9
   35bee:	469c      	mov	ip, r3
   35bf0:	4465      	add	r5, ip
   35bf2:	0424      	lsls	r4, r4, #16
   35bf4:	043a      	lsls	r2, r7, #16
   35bf6:	0c24      	lsrs	r4, r4, #16
   35bf8:	1912      	adds	r2, r2, r4
   35bfa:	0193      	lsls	r3, r2, #6
   35bfc:	1e5c      	subs	r4, r3, #1
   35bfe:	41a3      	sbcs	r3, r4
   35c00:	0c3f      	lsrs	r7, r7, #16
   35c02:	0e92      	lsrs	r2, r2, #26
   35c04:	197d      	adds	r5, r7, r5
   35c06:	431a      	orrs	r2, r3
   35c08:	01ad      	lsls	r5, r5, #6
   35c0a:	4315      	orrs	r5, r2
   35c0c:	012b      	lsls	r3, r5, #4
   35c0e:	d504      	bpl.n	35c1a <__aeabi_fmul+0x182>
   35c10:	2301      	movs	r3, #1
   35c12:	465e      	mov	r6, fp
   35c14:	086a      	lsrs	r2, r5, #1
   35c16:	401d      	ands	r5, r3
   35c18:	4315      	orrs	r5, r2
   35c1a:	0032      	movs	r2, r6
   35c1c:	327f      	adds	r2, #127	; 0x7f
   35c1e:	2a00      	cmp	r2, #0
   35c20:	dd25      	ble.n	35c6e <__aeabi_fmul+0x1d6>
   35c22:	076b      	lsls	r3, r5, #29
   35c24:	d004      	beq.n	35c30 <__aeabi_fmul+0x198>
   35c26:	230f      	movs	r3, #15
   35c28:	402b      	ands	r3, r5
   35c2a:	2b04      	cmp	r3, #4
   35c2c:	d000      	beq.n	35c30 <__aeabi_fmul+0x198>
   35c2e:	3504      	adds	r5, #4
   35c30:	012b      	lsls	r3, r5, #4
   35c32:	d503      	bpl.n	35c3c <__aeabi_fmul+0x1a4>
   35c34:	0032      	movs	r2, r6
   35c36:	4b27      	ldr	r3, [pc, #156]	; (35cd4 <__aeabi_fmul+0x23c>)
   35c38:	3280      	adds	r2, #128	; 0x80
   35c3a:	401d      	ands	r5, r3
   35c3c:	2afe      	cmp	r2, #254	; 0xfe
   35c3e:	dc94      	bgt.n	35b6a <__aeabi_fmul+0xd2>
   35c40:	2401      	movs	r4, #1
   35c42:	01a8      	lsls	r0, r5, #6
   35c44:	0a40      	lsrs	r0, r0, #9
   35c46:	b2d2      	uxtb	r2, r2
   35c48:	400c      	ands	r4, r1
   35c4a:	e76f      	b.n	35b2c <__aeabi_fmul+0x94>
   35c4c:	2080      	movs	r0, #128	; 0x80
   35c4e:	03c0      	lsls	r0, r0, #15
   35c50:	4207      	tst	r7, r0
   35c52:	d007      	beq.n	35c64 <__aeabi_fmul+0x1cc>
   35c54:	4205      	tst	r5, r0
   35c56:	d105      	bne.n	35c64 <__aeabi_fmul+0x1cc>
   35c58:	4328      	orrs	r0, r5
   35c5a:	0240      	lsls	r0, r0, #9
   35c5c:	0a40      	lsrs	r0, r0, #9
   35c5e:	4644      	mov	r4, r8
   35c60:	22ff      	movs	r2, #255	; 0xff
   35c62:	e763      	b.n	35b2c <__aeabi_fmul+0x94>
   35c64:	4338      	orrs	r0, r7
   35c66:	0240      	lsls	r0, r0, #9
   35c68:	0a40      	lsrs	r0, r0, #9
   35c6a:	22ff      	movs	r2, #255	; 0xff
   35c6c:	e75e      	b.n	35b2c <__aeabi_fmul+0x94>
   35c6e:	2401      	movs	r4, #1
   35c70:	1aa3      	subs	r3, r4, r2
   35c72:	2b1b      	cmp	r3, #27
   35c74:	dd05      	ble.n	35c82 <__aeabi_fmul+0x1ea>
   35c76:	400c      	ands	r4, r1
   35c78:	2200      	movs	r2, #0
   35c7a:	2000      	movs	r0, #0
   35c7c:	e756      	b.n	35b2c <__aeabi_fmul+0x94>
   35c7e:	465e      	mov	r6, fp
   35c80:	e7cb      	b.n	35c1a <__aeabi_fmul+0x182>
   35c82:	002a      	movs	r2, r5
   35c84:	2020      	movs	r0, #32
   35c86:	40da      	lsrs	r2, r3
   35c88:	1ac3      	subs	r3, r0, r3
   35c8a:	409d      	lsls	r5, r3
   35c8c:	002b      	movs	r3, r5
   35c8e:	1e5d      	subs	r5, r3, #1
   35c90:	41ab      	sbcs	r3, r5
   35c92:	4313      	orrs	r3, r2
   35c94:	075a      	lsls	r2, r3, #29
   35c96:	d004      	beq.n	35ca2 <__aeabi_fmul+0x20a>
   35c98:	220f      	movs	r2, #15
   35c9a:	401a      	ands	r2, r3
   35c9c:	2a04      	cmp	r2, #4
   35c9e:	d000      	beq.n	35ca2 <__aeabi_fmul+0x20a>
   35ca0:	3304      	adds	r3, #4
   35ca2:	015a      	lsls	r2, r3, #5
   35ca4:	d504      	bpl.n	35cb0 <__aeabi_fmul+0x218>
   35ca6:	2401      	movs	r4, #1
   35ca8:	2201      	movs	r2, #1
   35caa:	400c      	ands	r4, r1
   35cac:	2000      	movs	r0, #0
   35cae:	e73d      	b.n	35b2c <__aeabi_fmul+0x94>
   35cb0:	2401      	movs	r4, #1
   35cb2:	019b      	lsls	r3, r3, #6
   35cb4:	0a58      	lsrs	r0, r3, #9
   35cb6:	400c      	ands	r4, r1
   35cb8:	2200      	movs	r2, #0
   35cba:	e737      	b.n	35b2c <__aeabi_fmul+0x94>
   35cbc:	2080      	movs	r0, #128	; 0x80
   35cbe:	2401      	movs	r4, #1
   35cc0:	03c0      	lsls	r0, r0, #15
   35cc2:	4328      	orrs	r0, r5
   35cc4:	0240      	lsls	r0, r0, #9
   35cc6:	0a40      	lsrs	r0, r0, #9
   35cc8:	400c      	ands	r4, r1
   35cca:	22ff      	movs	r2, #255	; 0xff
   35ccc:	e72e      	b.n	35b2c <__aeabi_fmul+0x94>
   35cce:	46c0      	nop			; (mov r8, r8)
   35cd0:	0003d274 	.word	0x0003d274
   35cd4:	f7ffffff 	.word	0xf7ffffff

00035cd8 <__aeabi_f2iz>:
   35cd8:	0241      	lsls	r1, r0, #9
   35cda:	0043      	lsls	r3, r0, #1
   35cdc:	0fc2      	lsrs	r2, r0, #31
   35cde:	0a49      	lsrs	r1, r1, #9
   35ce0:	0e1b      	lsrs	r3, r3, #24
   35ce2:	2000      	movs	r0, #0
   35ce4:	2b7e      	cmp	r3, #126	; 0x7e
   35ce6:	dd0d      	ble.n	35d04 <__aeabi_f2iz+0x2c>
   35ce8:	2b9d      	cmp	r3, #157	; 0x9d
   35cea:	dc0c      	bgt.n	35d06 <__aeabi_f2iz+0x2e>
   35cec:	2080      	movs	r0, #128	; 0x80
   35cee:	0400      	lsls	r0, r0, #16
   35cf0:	4301      	orrs	r1, r0
   35cf2:	2b95      	cmp	r3, #149	; 0x95
   35cf4:	dc0a      	bgt.n	35d0c <__aeabi_f2iz+0x34>
   35cf6:	2096      	movs	r0, #150	; 0x96
   35cf8:	1ac3      	subs	r3, r0, r3
   35cfa:	40d9      	lsrs	r1, r3
   35cfc:	4248      	negs	r0, r1
   35cfe:	2a00      	cmp	r2, #0
   35d00:	d100      	bne.n	35d04 <__aeabi_f2iz+0x2c>
   35d02:	0008      	movs	r0, r1
   35d04:	4770      	bx	lr
   35d06:	4b03      	ldr	r3, [pc, #12]	; (35d14 <__aeabi_f2iz+0x3c>)
   35d08:	18d0      	adds	r0, r2, r3
   35d0a:	e7fb      	b.n	35d04 <__aeabi_f2iz+0x2c>
   35d0c:	3b96      	subs	r3, #150	; 0x96
   35d0e:	4099      	lsls	r1, r3
   35d10:	e7f4      	b.n	35cfc <__aeabi_f2iz+0x24>
   35d12:	46c0      	nop			; (mov r8, r8)
   35d14:	7fffffff 	.word	0x7fffffff

00035d18 <__aeabi_i2f>:
   35d18:	b570      	push	{r4, r5, r6, lr}
   35d1a:	2800      	cmp	r0, #0
   35d1c:	d030      	beq.n	35d80 <__aeabi_i2f+0x68>
   35d1e:	17c3      	asrs	r3, r0, #31
   35d20:	18c4      	adds	r4, r0, r3
   35d22:	405c      	eors	r4, r3
   35d24:	0fc5      	lsrs	r5, r0, #31
   35d26:	0020      	movs	r0, r4
   35d28:	f001 fc8c 	bl	37644 <__clzsi2>
   35d2c:	239e      	movs	r3, #158	; 0x9e
   35d2e:	1a1b      	subs	r3, r3, r0
   35d30:	2b96      	cmp	r3, #150	; 0x96
   35d32:	dc0d      	bgt.n	35d50 <__aeabi_i2f+0x38>
   35d34:	2296      	movs	r2, #150	; 0x96
   35d36:	1ad2      	subs	r2, r2, r3
   35d38:	4094      	lsls	r4, r2
   35d3a:	002a      	movs	r2, r5
   35d3c:	0264      	lsls	r4, r4, #9
   35d3e:	0a64      	lsrs	r4, r4, #9
   35d40:	b2db      	uxtb	r3, r3
   35d42:	0264      	lsls	r4, r4, #9
   35d44:	05db      	lsls	r3, r3, #23
   35d46:	0a60      	lsrs	r0, r4, #9
   35d48:	07d2      	lsls	r2, r2, #31
   35d4a:	4318      	orrs	r0, r3
   35d4c:	4310      	orrs	r0, r2
   35d4e:	bd70      	pop	{r4, r5, r6, pc}
   35d50:	2b99      	cmp	r3, #153	; 0x99
   35d52:	dc19      	bgt.n	35d88 <__aeabi_i2f+0x70>
   35d54:	2299      	movs	r2, #153	; 0x99
   35d56:	1ad2      	subs	r2, r2, r3
   35d58:	2a00      	cmp	r2, #0
   35d5a:	dd29      	ble.n	35db0 <__aeabi_i2f+0x98>
   35d5c:	4094      	lsls	r4, r2
   35d5e:	0022      	movs	r2, r4
   35d60:	4c14      	ldr	r4, [pc, #80]	; (35db4 <__aeabi_i2f+0x9c>)
   35d62:	4014      	ands	r4, r2
   35d64:	0751      	lsls	r1, r2, #29
   35d66:	d004      	beq.n	35d72 <__aeabi_i2f+0x5a>
   35d68:	210f      	movs	r1, #15
   35d6a:	400a      	ands	r2, r1
   35d6c:	2a04      	cmp	r2, #4
   35d6e:	d000      	beq.n	35d72 <__aeabi_i2f+0x5a>
   35d70:	3404      	adds	r4, #4
   35d72:	0162      	lsls	r2, r4, #5
   35d74:	d413      	bmi.n	35d9e <__aeabi_i2f+0x86>
   35d76:	01a4      	lsls	r4, r4, #6
   35d78:	0a64      	lsrs	r4, r4, #9
   35d7a:	b2db      	uxtb	r3, r3
   35d7c:	002a      	movs	r2, r5
   35d7e:	e7e0      	b.n	35d42 <__aeabi_i2f+0x2a>
   35d80:	2200      	movs	r2, #0
   35d82:	2300      	movs	r3, #0
   35d84:	2400      	movs	r4, #0
   35d86:	e7dc      	b.n	35d42 <__aeabi_i2f+0x2a>
   35d88:	2205      	movs	r2, #5
   35d8a:	0021      	movs	r1, r4
   35d8c:	1a12      	subs	r2, r2, r0
   35d8e:	40d1      	lsrs	r1, r2
   35d90:	22b9      	movs	r2, #185	; 0xb9
   35d92:	1ad2      	subs	r2, r2, r3
   35d94:	4094      	lsls	r4, r2
   35d96:	1e62      	subs	r2, r4, #1
   35d98:	4194      	sbcs	r4, r2
   35d9a:	430c      	orrs	r4, r1
   35d9c:	e7da      	b.n	35d54 <__aeabi_i2f+0x3c>
   35d9e:	4b05      	ldr	r3, [pc, #20]	; (35db4 <__aeabi_i2f+0x9c>)
   35da0:	002a      	movs	r2, r5
   35da2:	401c      	ands	r4, r3
   35da4:	239f      	movs	r3, #159	; 0x9f
   35da6:	01a4      	lsls	r4, r4, #6
   35da8:	1a1b      	subs	r3, r3, r0
   35daa:	0a64      	lsrs	r4, r4, #9
   35dac:	b2db      	uxtb	r3, r3
   35dae:	e7c8      	b.n	35d42 <__aeabi_i2f+0x2a>
   35db0:	0022      	movs	r2, r4
   35db2:	e7d5      	b.n	35d60 <__aeabi_i2f+0x48>
   35db4:	fbffffff 	.word	0xfbffffff

00035db8 <__aeabi_dadd>:
   35db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35dba:	4645      	mov	r5, r8
   35dbc:	46de      	mov	lr, fp
   35dbe:	4657      	mov	r7, sl
   35dc0:	464e      	mov	r6, r9
   35dc2:	030c      	lsls	r4, r1, #12
   35dc4:	b5e0      	push	{r5, r6, r7, lr}
   35dc6:	004e      	lsls	r6, r1, #1
   35dc8:	0fc9      	lsrs	r1, r1, #31
   35dca:	4688      	mov	r8, r1
   35dcc:	000d      	movs	r5, r1
   35dce:	0a61      	lsrs	r1, r4, #9
   35dd0:	0f44      	lsrs	r4, r0, #29
   35dd2:	430c      	orrs	r4, r1
   35dd4:	00c7      	lsls	r7, r0, #3
   35dd6:	0319      	lsls	r1, r3, #12
   35dd8:	0058      	lsls	r0, r3, #1
   35dda:	0fdb      	lsrs	r3, r3, #31
   35ddc:	469b      	mov	fp, r3
   35dde:	0a4b      	lsrs	r3, r1, #9
   35de0:	0f51      	lsrs	r1, r2, #29
   35de2:	430b      	orrs	r3, r1
   35de4:	0d76      	lsrs	r6, r6, #21
   35de6:	0d40      	lsrs	r0, r0, #21
   35de8:	0019      	movs	r1, r3
   35dea:	00d2      	lsls	r2, r2, #3
   35dec:	45d8      	cmp	r8, fp
   35dee:	d100      	bne.n	35df2 <__aeabi_dadd+0x3a>
   35df0:	e0ae      	b.n	35f50 <__aeabi_dadd+0x198>
   35df2:	1a35      	subs	r5, r6, r0
   35df4:	2d00      	cmp	r5, #0
   35df6:	dc00      	bgt.n	35dfa <__aeabi_dadd+0x42>
   35df8:	e0f6      	b.n	35fe8 <__aeabi_dadd+0x230>
   35dfa:	2800      	cmp	r0, #0
   35dfc:	d10f      	bne.n	35e1e <__aeabi_dadd+0x66>
   35dfe:	4313      	orrs	r3, r2
   35e00:	d100      	bne.n	35e04 <__aeabi_dadd+0x4c>
   35e02:	e0db      	b.n	35fbc <__aeabi_dadd+0x204>
   35e04:	1e6b      	subs	r3, r5, #1
   35e06:	2b00      	cmp	r3, #0
   35e08:	d000      	beq.n	35e0c <__aeabi_dadd+0x54>
   35e0a:	e137      	b.n	3607c <__aeabi_dadd+0x2c4>
   35e0c:	1aba      	subs	r2, r7, r2
   35e0e:	4297      	cmp	r7, r2
   35e10:	41bf      	sbcs	r7, r7
   35e12:	1a64      	subs	r4, r4, r1
   35e14:	427f      	negs	r7, r7
   35e16:	1be4      	subs	r4, r4, r7
   35e18:	2601      	movs	r6, #1
   35e1a:	0017      	movs	r7, r2
   35e1c:	e024      	b.n	35e68 <__aeabi_dadd+0xb0>
   35e1e:	4bc6      	ldr	r3, [pc, #792]	; (36138 <__aeabi_dadd+0x380>)
   35e20:	429e      	cmp	r6, r3
   35e22:	d04d      	beq.n	35ec0 <__aeabi_dadd+0x108>
   35e24:	2380      	movs	r3, #128	; 0x80
   35e26:	041b      	lsls	r3, r3, #16
   35e28:	4319      	orrs	r1, r3
   35e2a:	2d38      	cmp	r5, #56	; 0x38
   35e2c:	dd00      	ble.n	35e30 <__aeabi_dadd+0x78>
   35e2e:	e107      	b.n	36040 <__aeabi_dadd+0x288>
   35e30:	2d1f      	cmp	r5, #31
   35e32:	dd00      	ble.n	35e36 <__aeabi_dadd+0x7e>
   35e34:	e138      	b.n	360a8 <__aeabi_dadd+0x2f0>
   35e36:	2020      	movs	r0, #32
   35e38:	1b43      	subs	r3, r0, r5
   35e3a:	469a      	mov	sl, r3
   35e3c:	000b      	movs	r3, r1
   35e3e:	4650      	mov	r0, sl
   35e40:	4083      	lsls	r3, r0
   35e42:	4699      	mov	r9, r3
   35e44:	0013      	movs	r3, r2
   35e46:	4648      	mov	r0, r9
   35e48:	40eb      	lsrs	r3, r5
   35e4a:	4318      	orrs	r0, r3
   35e4c:	0003      	movs	r3, r0
   35e4e:	4650      	mov	r0, sl
   35e50:	4082      	lsls	r2, r0
   35e52:	1e50      	subs	r0, r2, #1
   35e54:	4182      	sbcs	r2, r0
   35e56:	40e9      	lsrs	r1, r5
   35e58:	431a      	orrs	r2, r3
   35e5a:	1aba      	subs	r2, r7, r2
   35e5c:	1a61      	subs	r1, r4, r1
   35e5e:	4297      	cmp	r7, r2
   35e60:	41a4      	sbcs	r4, r4
   35e62:	0017      	movs	r7, r2
   35e64:	4264      	negs	r4, r4
   35e66:	1b0c      	subs	r4, r1, r4
   35e68:	0223      	lsls	r3, r4, #8
   35e6a:	d562      	bpl.n	35f32 <__aeabi_dadd+0x17a>
   35e6c:	0264      	lsls	r4, r4, #9
   35e6e:	0a65      	lsrs	r5, r4, #9
   35e70:	2d00      	cmp	r5, #0
   35e72:	d100      	bne.n	35e76 <__aeabi_dadd+0xbe>
   35e74:	e0df      	b.n	36036 <__aeabi_dadd+0x27e>
   35e76:	0028      	movs	r0, r5
   35e78:	f001 fbe4 	bl	37644 <__clzsi2>
   35e7c:	0003      	movs	r3, r0
   35e7e:	3b08      	subs	r3, #8
   35e80:	2b1f      	cmp	r3, #31
   35e82:	dd00      	ble.n	35e86 <__aeabi_dadd+0xce>
   35e84:	e0d2      	b.n	3602c <__aeabi_dadd+0x274>
   35e86:	2220      	movs	r2, #32
   35e88:	003c      	movs	r4, r7
   35e8a:	1ad2      	subs	r2, r2, r3
   35e8c:	409d      	lsls	r5, r3
   35e8e:	40d4      	lsrs	r4, r2
   35e90:	409f      	lsls	r7, r3
   35e92:	4325      	orrs	r5, r4
   35e94:	429e      	cmp	r6, r3
   35e96:	dd00      	ble.n	35e9a <__aeabi_dadd+0xe2>
   35e98:	e0c4      	b.n	36024 <__aeabi_dadd+0x26c>
   35e9a:	1b9e      	subs	r6, r3, r6
   35e9c:	1c73      	adds	r3, r6, #1
   35e9e:	2b1f      	cmp	r3, #31
   35ea0:	dd00      	ble.n	35ea4 <__aeabi_dadd+0xec>
   35ea2:	e0f1      	b.n	36088 <__aeabi_dadd+0x2d0>
   35ea4:	2220      	movs	r2, #32
   35ea6:	0038      	movs	r0, r7
   35ea8:	0029      	movs	r1, r5
   35eaa:	1ad2      	subs	r2, r2, r3
   35eac:	40d8      	lsrs	r0, r3
   35eae:	4091      	lsls	r1, r2
   35eb0:	4097      	lsls	r7, r2
   35eb2:	002c      	movs	r4, r5
   35eb4:	4301      	orrs	r1, r0
   35eb6:	1e78      	subs	r0, r7, #1
   35eb8:	4187      	sbcs	r7, r0
   35eba:	40dc      	lsrs	r4, r3
   35ebc:	2600      	movs	r6, #0
   35ebe:	430f      	orrs	r7, r1
   35ec0:	077b      	lsls	r3, r7, #29
   35ec2:	d009      	beq.n	35ed8 <__aeabi_dadd+0x120>
   35ec4:	230f      	movs	r3, #15
   35ec6:	403b      	ands	r3, r7
   35ec8:	2b04      	cmp	r3, #4
   35eca:	d005      	beq.n	35ed8 <__aeabi_dadd+0x120>
   35ecc:	1d3b      	adds	r3, r7, #4
   35ece:	42bb      	cmp	r3, r7
   35ed0:	41bf      	sbcs	r7, r7
   35ed2:	427f      	negs	r7, r7
   35ed4:	19e4      	adds	r4, r4, r7
   35ed6:	001f      	movs	r7, r3
   35ed8:	0223      	lsls	r3, r4, #8
   35eda:	d52c      	bpl.n	35f36 <__aeabi_dadd+0x17e>
   35edc:	4b96      	ldr	r3, [pc, #600]	; (36138 <__aeabi_dadd+0x380>)
   35ede:	3601      	adds	r6, #1
   35ee0:	429e      	cmp	r6, r3
   35ee2:	d100      	bne.n	35ee6 <__aeabi_dadd+0x12e>
   35ee4:	e09a      	b.n	3601c <__aeabi_dadd+0x264>
   35ee6:	4645      	mov	r5, r8
   35ee8:	4b94      	ldr	r3, [pc, #592]	; (3613c <__aeabi_dadd+0x384>)
   35eea:	08ff      	lsrs	r7, r7, #3
   35eec:	401c      	ands	r4, r3
   35eee:	0760      	lsls	r0, r4, #29
   35ef0:	0576      	lsls	r6, r6, #21
   35ef2:	0264      	lsls	r4, r4, #9
   35ef4:	4307      	orrs	r7, r0
   35ef6:	0b24      	lsrs	r4, r4, #12
   35ef8:	0d76      	lsrs	r6, r6, #21
   35efa:	2100      	movs	r1, #0
   35efc:	0324      	lsls	r4, r4, #12
   35efe:	0b23      	lsrs	r3, r4, #12
   35f00:	0d0c      	lsrs	r4, r1, #20
   35f02:	4a8f      	ldr	r2, [pc, #572]	; (36140 <__aeabi_dadd+0x388>)
   35f04:	0524      	lsls	r4, r4, #20
   35f06:	431c      	orrs	r4, r3
   35f08:	4014      	ands	r4, r2
   35f0a:	0533      	lsls	r3, r6, #20
   35f0c:	4323      	orrs	r3, r4
   35f0e:	005b      	lsls	r3, r3, #1
   35f10:	07ed      	lsls	r5, r5, #31
   35f12:	085b      	lsrs	r3, r3, #1
   35f14:	432b      	orrs	r3, r5
   35f16:	0038      	movs	r0, r7
   35f18:	0019      	movs	r1, r3
   35f1a:	bc3c      	pop	{r2, r3, r4, r5}
   35f1c:	4690      	mov	r8, r2
   35f1e:	4699      	mov	r9, r3
   35f20:	46a2      	mov	sl, r4
   35f22:	46ab      	mov	fp, r5
   35f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35f26:	4664      	mov	r4, ip
   35f28:	4304      	orrs	r4, r0
   35f2a:	d100      	bne.n	35f2e <__aeabi_dadd+0x176>
   35f2c:	e211      	b.n	36352 <__aeabi_dadd+0x59a>
   35f2e:	0004      	movs	r4, r0
   35f30:	4667      	mov	r7, ip
   35f32:	077b      	lsls	r3, r7, #29
   35f34:	d1c6      	bne.n	35ec4 <__aeabi_dadd+0x10c>
   35f36:	4645      	mov	r5, r8
   35f38:	0760      	lsls	r0, r4, #29
   35f3a:	08ff      	lsrs	r7, r7, #3
   35f3c:	4307      	orrs	r7, r0
   35f3e:	08e4      	lsrs	r4, r4, #3
   35f40:	4b7d      	ldr	r3, [pc, #500]	; (36138 <__aeabi_dadd+0x380>)
   35f42:	429e      	cmp	r6, r3
   35f44:	d030      	beq.n	35fa8 <__aeabi_dadd+0x1f0>
   35f46:	0324      	lsls	r4, r4, #12
   35f48:	0576      	lsls	r6, r6, #21
   35f4a:	0b24      	lsrs	r4, r4, #12
   35f4c:	0d76      	lsrs	r6, r6, #21
   35f4e:	e7d4      	b.n	35efa <__aeabi_dadd+0x142>
   35f50:	1a33      	subs	r3, r6, r0
   35f52:	469a      	mov	sl, r3
   35f54:	2b00      	cmp	r3, #0
   35f56:	dd78      	ble.n	3604a <__aeabi_dadd+0x292>
   35f58:	2800      	cmp	r0, #0
   35f5a:	d031      	beq.n	35fc0 <__aeabi_dadd+0x208>
   35f5c:	4876      	ldr	r0, [pc, #472]	; (36138 <__aeabi_dadd+0x380>)
   35f5e:	4286      	cmp	r6, r0
   35f60:	d0ae      	beq.n	35ec0 <__aeabi_dadd+0x108>
   35f62:	2080      	movs	r0, #128	; 0x80
   35f64:	0400      	lsls	r0, r0, #16
   35f66:	4301      	orrs	r1, r0
   35f68:	4653      	mov	r3, sl
   35f6a:	2b38      	cmp	r3, #56	; 0x38
   35f6c:	dc00      	bgt.n	35f70 <__aeabi_dadd+0x1b8>
   35f6e:	e0e9      	b.n	36144 <__aeabi_dadd+0x38c>
   35f70:	430a      	orrs	r2, r1
   35f72:	1e51      	subs	r1, r2, #1
   35f74:	418a      	sbcs	r2, r1
   35f76:	2100      	movs	r1, #0
   35f78:	19d2      	adds	r2, r2, r7
   35f7a:	42ba      	cmp	r2, r7
   35f7c:	41bf      	sbcs	r7, r7
   35f7e:	1909      	adds	r1, r1, r4
   35f80:	427c      	negs	r4, r7
   35f82:	0017      	movs	r7, r2
   35f84:	190c      	adds	r4, r1, r4
   35f86:	0223      	lsls	r3, r4, #8
   35f88:	d5d3      	bpl.n	35f32 <__aeabi_dadd+0x17a>
   35f8a:	4b6b      	ldr	r3, [pc, #428]	; (36138 <__aeabi_dadd+0x380>)
   35f8c:	3601      	adds	r6, #1
   35f8e:	429e      	cmp	r6, r3
   35f90:	d100      	bne.n	35f94 <__aeabi_dadd+0x1dc>
   35f92:	e13a      	b.n	3620a <__aeabi_dadd+0x452>
   35f94:	2001      	movs	r0, #1
   35f96:	4b69      	ldr	r3, [pc, #420]	; (3613c <__aeabi_dadd+0x384>)
   35f98:	401c      	ands	r4, r3
   35f9a:	087b      	lsrs	r3, r7, #1
   35f9c:	4007      	ands	r7, r0
   35f9e:	431f      	orrs	r7, r3
   35fa0:	07e0      	lsls	r0, r4, #31
   35fa2:	4307      	orrs	r7, r0
   35fa4:	0864      	lsrs	r4, r4, #1
   35fa6:	e78b      	b.n	35ec0 <__aeabi_dadd+0x108>
   35fa8:	0023      	movs	r3, r4
   35faa:	433b      	orrs	r3, r7
   35fac:	d100      	bne.n	35fb0 <__aeabi_dadd+0x1f8>
   35fae:	e1cb      	b.n	36348 <__aeabi_dadd+0x590>
   35fb0:	2280      	movs	r2, #128	; 0x80
   35fb2:	0312      	lsls	r2, r2, #12
   35fb4:	4314      	orrs	r4, r2
   35fb6:	0324      	lsls	r4, r4, #12
   35fb8:	0b24      	lsrs	r4, r4, #12
   35fba:	e79e      	b.n	35efa <__aeabi_dadd+0x142>
   35fbc:	002e      	movs	r6, r5
   35fbe:	e77f      	b.n	35ec0 <__aeabi_dadd+0x108>
   35fc0:	0008      	movs	r0, r1
   35fc2:	4310      	orrs	r0, r2
   35fc4:	d100      	bne.n	35fc8 <__aeabi_dadd+0x210>
   35fc6:	e0b4      	b.n	36132 <__aeabi_dadd+0x37a>
   35fc8:	1e58      	subs	r0, r3, #1
   35fca:	2800      	cmp	r0, #0
   35fcc:	d000      	beq.n	35fd0 <__aeabi_dadd+0x218>
   35fce:	e0de      	b.n	3618e <__aeabi_dadd+0x3d6>
   35fd0:	18ba      	adds	r2, r7, r2
   35fd2:	42ba      	cmp	r2, r7
   35fd4:	419b      	sbcs	r3, r3
   35fd6:	1864      	adds	r4, r4, r1
   35fd8:	425b      	negs	r3, r3
   35fda:	18e4      	adds	r4, r4, r3
   35fdc:	0017      	movs	r7, r2
   35fde:	2601      	movs	r6, #1
   35fe0:	0223      	lsls	r3, r4, #8
   35fe2:	d5a6      	bpl.n	35f32 <__aeabi_dadd+0x17a>
   35fe4:	2602      	movs	r6, #2
   35fe6:	e7d5      	b.n	35f94 <__aeabi_dadd+0x1dc>
   35fe8:	2d00      	cmp	r5, #0
   35fea:	d16e      	bne.n	360ca <__aeabi_dadd+0x312>
   35fec:	1c70      	adds	r0, r6, #1
   35fee:	0540      	lsls	r0, r0, #21
   35ff0:	0d40      	lsrs	r0, r0, #21
   35ff2:	2801      	cmp	r0, #1
   35ff4:	dc00      	bgt.n	35ff8 <__aeabi_dadd+0x240>
   35ff6:	e0f9      	b.n	361ec <__aeabi_dadd+0x434>
   35ff8:	1ab8      	subs	r0, r7, r2
   35ffa:	4684      	mov	ip, r0
   35ffc:	4287      	cmp	r7, r0
   35ffe:	4180      	sbcs	r0, r0
   36000:	1ae5      	subs	r5, r4, r3
   36002:	4240      	negs	r0, r0
   36004:	1a2d      	subs	r5, r5, r0
   36006:	0228      	lsls	r0, r5, #8
   36008:	d400      	bmi.n	3600c <__aeabi_dadd+0x254>
   3600a:	e089      	b.n	36120 <__aeabi_dadd+0x368>
   3600c:	1bd7      	subs	r7, r2, r7
   3600e:	42ba      	cmp	r2, r7
   36010:	4192      	sbcs	r2, r2
   36012:	1b1c      	subs	r4, r3, r4
   36014:	4252      	negs	r2, r2
   36016:	1aa5      	subs	r5, r4, r2
   36018:	46d8      	mov	r8, fp
   3601a:	e729      	b.n	35e70 <__aeabi_dadd+0xb8>
   3601c:	4645      	mov	r5, r8
   3601e:	2400      	movs	r4, #0
   36020:	2700      	movs	r7, #0
   36022:	e76a      	b.n	35efa <__aeabi_dadd+0x142>
   36024:	4c45      	ldr	r4, [pc, #276]	; (3613c <__aeabi_dadd+0x384>)
   36026:	1af6      	subs	r6, r6, r3
   36028:	402c      	ands	r4, r5
   3602a:	e749      	b.n	35ec0 <__aeabi_dadd+0x108>
   3602c:	003d      	movs	r5, r7
   3602e:	3828      	subs	r0, #40	; 0x28
   36030:	4085      	lsls	r5, r0
   36032:	2700      	movs	r7, #0
   36034:	e72e      	b.n	35e94 <__aeabi_dadd+0xdc>
   36036:	0038      	movs	r0, r7
   36038:	f001 fb04 	bl	37644 <__clzsi2>
   3603c:	3020      	adds	r0, #32
   3603e:	e71d      	b.n	35e7c <__aeabi_dadd+0xc4>
   36040:	430a      	orrs	r2, r1
   36042:	1e51      	subs	r1, r2, #1
   36044:	418a      	sbcs	r2, r1
   36046:	2100      	movs	r1, #0
   36048:	e707      	b.n	35e5a <__aeabi_dadd+0xa2>
   3604a:	2b00      	cmp	r3, #0
   3604c:	d000      	beq.n	36050 <__aeabi_dadd+0x298>
   3604e:	e0f3      	b.n	36238 <__aeabi_dadd+0x480>
   36050:	1c70      	adds	r0, r6, #1
   36052:	0543      	lsls	r3, r0, #21
   36054:	0d5b      	lsrs	r3, r3, #21
   36056:	2b01      	cmp	r3, #1
   36058:	dc00      	bgt.n	3605c <__aeabi_dadd+0x2a4>
   3605a:	e0ad      	b.n	361b8 <__aeabi_dadd+0x400>
   3605c:	4b36      	ldr	r3, [pc, #216]	; (36138 <__aeabi_dadd+0x380>)
   3605e:	4298      	cmp	r0, r3
   36060:	d100      	bne.n	36064 <__aeabi_dadd+0x2ac>
   36062:	e0d1      	b.n	36208 <__aeabi_dadd+0x450>
   36064:	18ba      	adds	r2, r7, r2
   36066:	42ba      	cmp	r2, r7
   36068:	41bf      	sbcs	r7, r7
   3606a:	1864      	adds	r4, r4, r1
   3606c:	427f      	negs	r7, r7
   3606e:	19e4      	adds	r4, r4, r7
   36070:	07e7      	lsls	r7, r4, #31
   36072:	0852      	lsrs	r2, r2, #1
   36074:	4317      	orrs	r7, r2
   36076:	0864      	lsrs	r4, r4, #1
   36078:	0006      	movs	r6, r0
   3607a:	e721      	b.n	35ec0 <__aeabi_dadd+0x108>
   3607c:	482e      	ldr	r0, [pc, #184]	; (36138 <__aeabi_dadd+0x380>)
   3607e:	4285      	cmp	r5, r0
   36080:	d100      	bne.n	36084 <__aeabi_dadd+0x2cc>
   36082:	e093      	b.n	361ac <__aeabi_dadd+0x3f4>
   36084:	001d      	movs	r5, r3
   36086:	e6d0      	b.n	35e2a <__aeabi_dadd+0x72>
   36088:	0029      	movs	r1, r5
   3608a:	3e1f      	subs	r6, #31
   3608c:	40f1      	lsrs	r1, r6
   3608e:	2b20      	cmp	r3, #32
   36090:	d100      	bne.n	36094 <__aeabi_dadd+0x2dc>
   36092:	e08d      	b.n	361b0 <__aeabi_dadd+0x3f8>
   36094:	2240      	movs	r2, #64	; 0x40
   36096:	1ad3      	subs	r3, r2, r3
   36098:	409d      	lsls	r5, r3
   3609a:	432f      	orrs	r7, r5
   3609c:	1e7d      	subs	r5, r7, #1
   3609e:	41af      	sbcs	r7, r5
   360a0:	2400      	movs	r4, #0
   360a2:	430f      	orrs	r7, r1
   360a4:	2600      	movs	r6, #0
   360a6:	e744      	b.n	35f32 <__aeabi_dadd+0x17a>
   360a8:	002b      	movs	r3, r5
   360aa:	0008      	movs	r0, r1
   360ac:	3b20      	subs	r3, #32
   360ae:	40d8      	lsrs	r0, r3
   360b0:	0003      	movs	r3, r0
   360b2:	2d20      	cmp	r5, #32
   360b4:	d100      	bne.n	360b8 <__aeabi_dadd+0x300>
   360b6:	e07d      	b.n	361b4 <__aeabi_dadd+0x3fc>
   360b8:	2040      	movs	r0, #64	; 0x40
   360ba:	1b45      	subs	r5, r0, r5
   360bc:	40a9      	lsls	r1, r5
   360be:	430a      	orrs	r2, r1
   360c0:	1e51      	subs	r1, r2, #1
   360c2:	418a      	sbcs	r2, r1
   360c4:	2100      	movs	r1, #0
   360c6:	431a      	orrs	r2, r3
   360c8:	e6c7      	b.n	35e5a <__aeabi_dadd+0xa2>
   360ca:	2e00      	cmp	r6, #0
   360cc:	d050      	beq.n	36170 <__aeabi_dadd+0x3b8>
   360ce:	4e1a      	ldr	r6, [pc, #104]	; (36138 <__aeabi_dadd+0x380>)
   360d0:	42b0      	cmp	r0, r6
   360d2:	d057      	beq.n	36184 <__aeabi_dadd+0x3cc>
   360d4:	2680      	movs	r6, #128	; 0x80
   360d6:	426b      	negs	r3, r5
   360d8:	4699      	mov	r9, r3
   360da:	0436      	lsls	r6, r6, #16
   360dc:	4334      	orrs	r4, r6
   360de:	464b      	mov	r3, r9
   360e0:	2b38      	cmp	r3, #56	; 0x38
   360e2:	dd00      	ble.n	360e6 <__aeabi_dadd+0x32e>
   360e4:	e0d6      	b.n	36294 <__aeabi_dadd+0x4dc>
   360e6:	2b1f      	cmp	r3, #31
   360e8:	dd00      	ble.n	360ec <__aeabi_dadd+0x334>
   360ea:	e135      	b.n	36358 <__aeabi_dadd+0x5a0>
   360ec:	2620      	movs	r6, #32
   360ee:	1af5      	subs	r5, r6, r3
   360f0:	0026      	movs	r6, r4
   360f2:	40ae      	lsls	r6, r5
   360f4:	46b2      	mov	sl, r6
   360f6:	003e      	movs	r6, r7
   360f8:	40de      	lsrs	r6, r3
   360fa:	46ac      	mov	ip, r5
   360fc:	0035      	movs	r5, r6
   360fe:	4656      	mov	r6, sl
   36100:	432e      	orrs	r6, r5
   36102:	4665      	mov	r5, ip
   36104:	40af      	lsls	r7, r5
   36106:	1e7d      	subs	r5, r7, #1
   36108:	41af      	sbcs	r7, r5
   3610a:	40dc      	lsrs	r4, r3
   3610c:	4337      	orrs	r7, r6
   3610e:	1bd7      	subs	r7, r2, r7
   36110:	42ba      	cmp	r2, r7
   36112:	4192      	sbcs	r2, r2
   36114:	1b0c      	subs	r4, r1, r4
   36116:	4252      	negs	r2, r2
   36118:	1aa4      	subs	r4, r4, r2
   3611a:	0006      	movs	r6, r0
   3611c:	46d8      	mov	r8, fp
   3611e:	e6a3      	b.n	35e68 <__aeabi_dadd+0xb0>
   36120:	4664      	mov	r4, ip
   36122:	4667      	mov	r7, ip
   36124:	432c      	orrs	r4, r5
   36126:	d000      	beq.n	3612a <__aeabi_dadd+0x372>
   36128:	e6a2      	b.n	35e70 <__aeabi_dadd+0xb8>
   3612a:	2500      	movs	r5, #0
   3612c:	2600      	movs	r6, #0
   3612e:	2700      	movs	r7, #0
   36130:	e706      	b.n	35f40 <__aeabi_dadd+0x188>
   36132:	001e      	movs	r6, r3
   36134:	e6c4      	b.n	35ec0 <__aeabi_dadd+0x108>
   36136:	46c0      	nop			; (mov r8, r8)
   36138:	000007ff 	.word	0x000007ff
   3613c:	ff7fffff 	.word	0xff7fffff
   36140:	800fffff 	.word	0x800fffff
   36144:	2b1f      	cmp	r3, #31
   36146:	dc63      	bgt.n	36210 <__aeabi_dadd+0x458>
   36148:	2020      	movs	r0, #32
   3614a:	1ac3      	subs	r3, r0, r3
   3614c:	0008      	movs	r0, r1
   3614e:	4098      	lsls	r0, r3
   36150:	469c      	mov	ip, r3
   36152:	4683      	mov	fp, r0
   36154:	4653      	mov	r3, sl
   36156:	0010      	movs	r0, r2
   36158:	40d8      	lsrs	r0, r3
   3615a:	0003      	movs	r3, r0
   3615c:	4658      	mov	r0, fp
   3615e:	4318      	orrs	r0, r3
   36160:	4663      	mov	r3, ip
   36162:	409a      	lsls	r2, r3
   36164:	1e53      	subs	r3, r2, #1
   36166:	419a      	sbcs	r2, r3
   36168:	4653      	mov	r3, sl
   3616a:	4302      	orrs	r2, r0
   3616c:	40d9      	lsrs	r1, r3
   3616e:	e703      	b.n	35f78 <__aeabi_dadd+0x1c0>
   36170:	0026      	movs	r6, r4
   36172:	433e      	orrs	r6, r7
   36174:	d006      	beq.n	36184 <__aeabi_dadd+0x3cc>
   36176:	43eb      	mvns	r3, r5
   36178:	4699      	mov	r9, r3
   3617a:	2b00      	cmp	r3, #0
   3617c:	d0c7      	beq.n	3610e <__aeabi_dadd+0x356>
   3617e:	4e94      	ldr	r6, [pc, #592]	; (363d0 <__aeabi_dadd+0x618>)
   36180:	42b0      	cmp	r0, r6
   36182:	d1ac      	bne.n	360de <__aeabi_dadd+0x326>
   36184:	000c      	movs	r4, r1
   36186:	0017      	movs	r7, r2
   36188:	0006      	movs	r6, r0
   3618a:	46d8      	mov	r8, fp
   3618c:	e698      	b.n	35ec0 <__aeabi_dadd+0x108>
   3618e:	4b90      	ldr	r3, [pc, #576]	; (363d0 <__aeabi_dadd+0x618>)
   36190:	459a      	cmp	sl, r3
   36192:	d00b      	beq.n	361ac <__aeabi_dadd+0x3f4>
   36194:	4682      	mov	sl, r0
   36196:	e6e7      	b.n	35f68 <__aeabi_dadd+0x1b0>
   36198:	2800      	cmp	r0, #0
   3619a:	d000      	beq.n	3619e <__aeabi_dadd+0x3e6>
   3619c:	e09e      	b.n	362dc <__aeabi_dadd+0x524>
   3619e:	0018      	movs	r0, r3
   361a0:	4310      	orrs	r0, r2
   361a2:	d100      	bne.n	361a6 <__aeabi_dadd+0x3ee>
   361a4:	e0e9      	b.n	3637a <__aeabi_dadd+0x5c2>
   361a6:	001c      	movs	r4, r3
   361a8:	0017      	movs	r7, r2
   361aa:	46d8      	mov	r8, fp
   361ac:	4e88      	ldr	r6, [pc, #544]	; (363d0 <__aeabi_dadd+0x618>)
   361ae:	e687      	b.n	35ec0 <__aeabi_dadd+0x108>
   361b0:	2500      	movs	r5, #0
   361b2:	e772      	b.n	3609a <__aeabi_dadd+0x2e2>
   361b4:	2100      	movs	r1, #0
   361b6:	e782      	b.n	360be <__aeabi_dadd+0x306>
   361b8:	0023      	movs	r3, r4
   361ba:	433b      	orrs	r3, r7
   361bc:	2e00      	cmp	r6, #0
   361be:	d000      	beq.n	361c2 <__aeabi_dadd+0x40a>
   361c0:	e0ab      	b.n	3631a <__aeabi_dadd+0x562>
   361c2:	2b00      	cmp	r3, #0
   361c4:	d100      	bne.n	361c8 <__aeabi_dadd+0x410>
   361c6:	e0e7      	b.n	36398 <__aeabi_dadd+0x5e0>
   361c8:	000b      	movs	r3, r1
   361ca:	4313      	orrs	r3, r2
   361cc:	d100      	bne.n	361d0 <__aeabi_dadd+0x418>
   361ce:	e677      	b.n	35ec0 <__aeabi_dadd+0x108>
   361d0:	18ba      	adds	r2, r7, r2
   361d2:	42ba      	cmp	r2, r7
   361d4:	41bf      	sbcs	r7, r7
   361d6:	1864      	adds	r4, r4, r1
   361d8:	427f      	negs	r7, r7
   361da:	19e4      	adds	r4, r4, r7
   361dc:	0223      	lsls	r3, r4, #8
   361de:	d400      	bmi.n	361e2 <__aeabi_dadd+0x42a>
   361e0:	e0f2      	b.n	363c8 <__aeabi_dadd+0x610>
   361e2:	4b7c      	ldr	r3, [pc, #496]	; (363d4 <__aeabi_dadd+0x61c>)
   361e4:	0017      	movs	r7, r2
   361e6:	401c      	ands	r4, r3
   361e8:	0006      	movs	r6, r0
   361ea:	e669      	b.n	35ec0 <__aeabi_dadd+0x108>
   361ec:	0020      	movs	r0, r4
   361ee:	4338      	orrs	r0, r7
   361f0:	2e00      	cmp	r6, #0
   361f2:	d1d1      	bne.n	36198 <__aeabi_dadd+0x3e0>
   361f4:	2800      	cmp	r0, #0
   361f6:	d15b      	bne.n	362b0 <__aeabi_dadd+0x4f8>
   361f8:	001c      	movs	r4, r3
   361fa:	4314      	orrs	r4, r2
   361fc:	d100      	bne.n	36200 <__aeabi_dadd+0x448>
   361fe:	e0a8      	b.n	36352 <__aeabi_dadd+0x59a>
   36200:	001c      	movs	r4, r3
   36202:	0017      	movs	r7, r2
   36204:	46d8      	mov	r8, fp
   36206:	e65b      	b.n	35ec0 <__aeabi_dadd+0x108>
   36208:	0006      	movs	r6, r0
   3620a:	2400      	movs	r4, #0
   3620c:	2700      	movs	r7, #0
   3620e:	e697      	b.n	35f40 <__aeabi_dadd+0x188>
   36210:	4650      	mov	r0, sl
   36212:	000b      	movs	r3, r1
   36214:	3820      	subs	r0, #32
   36216:	40c3      	lsrs	r3, r0
   36218:	4699      	mov	r9, r3
   3621a:	4653      	mov	r3, sl
   3621c:	2b20      	cmp	r3, #32
   3621e:	d100      	bne.n	36222 <__aeabi_dadd+0x46a>
   36220:	e095      	b.n	3634e <__aeabi_dadd+0x596>
   36222:	2340      	movs	r3, #64	; 0x40
   36224:	4650      	mov	r0, sl
   36226:	1a1b      	subs	r3, r3, r0
   36228:	4099      	lsls	r1, r3
   3622a:	430a      	orrs	r2, r1
   3622c:	1e51      	subs	r1, r2, #1
   3622e:	418a      	sbcs	r2, r1
   36230:	464b      	mov	r3, r9
   36232:	2100      	movs	r1, #0
   36234:	431a      	orrs	r2, r3
   36236:	e69f      	b.n	35f78 <__aeabi_dadd+0x1c0>
   36238:	2e00      	cmp	r6, #0
   3623a:	d130      	bne.n	3629e <__aeabi_dadd+0x4e6>
   3623c:	0026      	movs	r6, r4
   3623e:	433e      	orrs	r6, r7
   36240:	d067      	beq.n	36312 <__aeabi_dadd+0x55a>
   36242:	43db      	mvns	r3, r3
   36244:	469a      	mov	sl, r3
   36246:	2b00      	cmp	r3, #0
   36248:	d01c      	beq.n	36284 <__aeabi_dadd+0x4cc>
   3624a:	4e61      	ldr	r6, [pc, #388]	; (363d0 <__aeabi_dadd+0x618>)
   3624c:	42b0      	cmp	r0, r6
   3624e:	d060      	beq.n	36312 <__aeabi_dadd+0x55a>
   36250:	4653      	mov	r3, sl
   36252:	2b38      	cmp	r3, #56	; 0x38
   36254:	dd00      	ble.n	36258 <__aeabi_dadd+0x4a0>
   36256:	e096      	b.n	36386 <__aeabi_dadd+0x5ce>
   36258:	2b1f      	cmp	r3, #31
   3625a:	dd00      	ble.n	3625e <__aeabi_dadd+0x4a6>
   3625c:	e09f      	b.n	3639e <__aeabi_dadd+0x5e6>
   3625e:	2620      	movs	r6, #32
   36260:	1af3      	subs	r3, r6, r3
   36262:	0026      	movs	r6, r4
   36264:	409e      	lsls	r6, r3
   36266:	469c      	mov	ip, r3
   36268:	46b3      	mov	fp, r6
   3626a:	4653      	mov	r3, sl
   3626c:	003e      	movs	r6, r7
   3626e:	40de      	lsrs	r6, r3
   36270:	0033      	movs	r3, r6
   36272:	465e      	mov	r6, fp
   36274:	431e      	orrs	r6, r3
   36276:	4663      	mov	r3, ip
   36278:	409f      	lsls	r7, r3
   3627a:	1e7b      	subs	r3, r7, #1
   3627c:	419f      	sbcs	r7, r3
   3627e:	4653      	mov	r3, sl
   36280:	40dc      	lsrs	r4, r3
   36282:	4337      	orrs	r7, r6
   36284:	18bf      	adds	r7, r7, r2
   36286:	4297      	cmp	r7, r2
   36288:	4192      	sbcs	r2, r2
   3628a:	1864      	adds	r4, r4, r1
   3628c:	4252      	negs	r2, r2
   3628e:	18a4      	adds	r4, r4, r2
   36290:	0006      	movs	r6, r0
   36292:	e678      	b.n	35f86 <__aeabi_dadd+0x1ce>
   36294:	4327      	orrs	r7, r4
   36296:	1e7c      	subs	r4, r7, #1
   36298:	41a7      	sbcs	r7, r4
   3629a:	2400      	movs	r4, #0
   3629c:	e737      	b.n	3610e <__aeabi_dadd+0x356>
   3629e:	4e4c      	ldr	r6, [pc, #304]	; (363d0 <__aeabi_dadd+0x618>)
   362a0:	42b0      	cmp	r0, r6
   362a2:	d036      	beq.n	36312 <__aeabi_dadd+0x55a>
   362a4:	2680      	movs	r6, #128	; 0x80
   362a6:	425b      	negs	r3, r3
   362a8:	0436      	lsls	r6, r6, #16
   362aa:	469a      	mov	sl, r3
   362ac:	4334      	orrs	r4, r6
   362ae:	e7cf      	b.n	36250 <__aeabi_dadd+0x498>
   362b0:	0018      	movs	r0, r3
   362b2:	4310      	orrs	r0, r2
   362b4:	d100      	bne.n	362b8 <__aeabi_dadd+0x500>
   362b6:	e603      	b.n	35ec0 <__aeabi_dadd+0x108>
   362b8:	1ab8      	subs	r0, r7, r2
   362ba:	4684      	mov	ip, r0
   362bc:	4567      	cmp	r7, ip
   362be:	41ad      	sbcs	r5, r5
   362c0:	1ae0      	subs	r0, r4, r3
   362c2:	426d      	negs	r5, r5
   362c4:	1b40      	subs	r0, r0, r5
   362c6:	0205      	lsls	r5, r0, #8
   362c8:	d400      	bmi.n	362cc <__aeabi_dadd+0x514>
   362ca:	e62c      	b.n	35f26 <__aeabi_dadd+0x16e>
   362cc:	1bd7      	subs	r7, r2, r7
   362ce:	42ba      	cmp	r2, r7
   362d0:	4192      	sbcs	r2, r2
   362d2:	1b1c      	subs	r4, r3, r4
   362d4:	4252      	negs	r2, r2
   362d6:	1aa4      	subs	r4, r4, r2
   362d8:	46d8      	mov	r8, fp
   362da:	e5f1      	b.n	35ec0 <__aeabi_dadd+0x108>
   362dc:	0018      	movs	r0, r3
   362de:	4310      	orrs	r0, r2
   362e0:	d100      	bne.n	362e4 <__aeabi_dadd+0x52c>
   362e2:	e763      	b.n	361ac <__aeabi_dadd+0x3f4>
   362e4:	08f8      	lsrs	r0, r7, #3
   362e6:	0767      	lsls	r7, r4, #29
   362e8:	4307      	orrs	r7, r0
   362ea:	2080      	movs	r0, #128	; 0x80
   362ec:	08e4      	lsrs	r4, r4, #3
   362ee:	0300      	lsls	r0, r0, #12
   362f0:	4204      	tst	r4, r0
   362f2:	d008      	beq.n	36306 <__aeabi_dadd+0x54e>
   362f4:	08dd      	lsrs	r5, r3, #3
   362f6:	4205      	tst	r5, r0
   362f8:	d105      	bne.n	36306 <__aeabi_dadd+0x54e>
   362fa:	08d2      	lsrs	r2, r2, #3
   362fc:	0759      	lsls	r1, r3, #29
   362fe:	4311      	orrs	r1, r2
   36300:	000f      	movs	r7, r1
   36302:	002c      	movs	r4, r5
   36304:	46d8      	mov	r8, fp
   36306:	0f7b      	lsrs	r3, r7, #29
   36308:	00e4      	lsls	r4, r4, #3
   3630a:	431c      	orrs	r4, r3
   3630c:	00ff      	lsls	r7, r7, #3
   3630e:	4e30      	ldr	r6, [pc, #192]	; (363d0 <__aeabi_dadd+0x618>)
   36310:	e5d6      	b.n	35ec0 <__aeabi_dadd+0x108>
   36312:	000c      	movs	r4, r1
   36314:	0017      	movs	r7, r2
   36316:	0006      	movs	r6, r0
   36318:	e5d2      	b.n	35ec0 <__aeabi_dadd+0x108>
   3631a:	2b00      	cmp	r3, #0
   3631c:	d038      	beq.n	36390 <__aeabi_dadd+0x5d8>
   3631e:	000b      	movs	r3, r1
   36320:	4313      	orrs	r3, r2
   36322:	d100      	bne.n	36326 <__aeabi_dadd+0x56e>
   36324:	e742      	b.n	361ac <__aeabi_dadd+0x3f4>
   36326:	08f8      	lsrs	r0, r7, #3
   36328:	0767      	lsls	r7, r4, #29
   3632a:	4307      	orrs	r7, r0
   3632c:	2080      	movs	r0, #128	; 0x80
   3632e:	08e4      	lsrs	r4, r4, #3
   36330:	0300      	lsls	r0, r0, #12
   36332:	4204      	tst	r4, r0
   36334:	d0e7      	beq.n	36306 <__aeabi_dadd+0x54e>
   36336:	08cb      	lsrs	r3, r1, #3
   36338:	4203      	tst	r3, r0
   3633a:	d1e4      	bne.n	36306 <__aeabi_dadd+0x54e>
   3633c:	08d2      	lsrs	r2, r2, #3
   3633e:	0749      	lsls	r1, r1, #29
   36340:	4311      	orrs	r1, r2
   36342:	000f      	movs	r7, r1
   36344:	001c      	movs	r4, r3
   36346:	e7de      	b.n	36306 <__aeabi_dadd+0x54e>
   36348:	2700      	movs	r7, #0
   3634a:	2400      	movs	r4, #0
   3634c:	e5d5      	b.n	35efa <__aeabi_dadd+0x142>
   3634e:	2100      	movs	r1, #0
   36350:	e76b      	b.n	3622a <__aeabi_dadd+0x472>
   36352:	2500      	movs	r5, #0
   36354:	2700      	movs	r7, #0
   36356:	e5f3      	b.n	35f40 <__aeabi_dadd+0x188>
   36358:	464e      	mov	r6, r9
   3635a:	0025      	movs	r5, r4
   3635c:	3e20      	subs	r6, #32
   3635e:	40f5      	lsrs	r5, r6
   36360:	464b      	mov	r3, r9
   36362:	002e      	movs	r6, r5
   36364:	2b20      	cmp	r3, #32
   36366:	d02d      	beq.n	363c4 <__aeabi_dadd+0x60c>
   36368:	2540      	movs	r5, #64	; 0x40
   3636a:	1aed      	subs	r5, r5, r3
   3636c:	40ac      	lsls	r4, r5
   3636e:	4327      	orrs	r7, r4
   36370:	1e7c      	subs	r4, r7, #1
   36372:	41a7      	sbcs	r7, r4
   36374:	2400      	movs	r4, #0
   36376:	4337      	orrs	r7, r6
   36378:	e6c9      	b.n	3610e <__aeabi_dadd+0x356>
   3637a:	2480      	movs	r4, #128	; 0x80
   3637c:	2500      	movs	r5, #0
   3637e:	0324      	lsls	r4, r4, #12
   36380:	4e13      	ldr	r6, [pc, #76]	; (363d0 <__aeabi_dadd+0x618>)
   36382:	2700      	movs	r7, #0
   36384:	e5dc      	b.n	35f40 <__aeabi_dadd+0x188>
   36386:	4327      	orrs	r7, r4
   36388:	1e7c      	subs	r4, r7, #1
   3638a:	41a7      	sbcs	r7, r4
   3638c:	2400      	movs	r4, #0
   3638e:	e779      	b.n	36284 <__aeabi_dadd+0x4cc>
   36390:	000c      	movs	r4, r1
   36392:	0017      	movs	r7, r2
   36394:	4e0e      	ldr	r6, [pc, #56]	; (363d0 <__aeabi_dadd+0x618>)
   36396:	e593      	b.n	35ec0 <__aeabi_dadd+0x108>
   36398:	000c      	movs	r4, r1
   3639a:	0017      	movs	r7, r2
   3639c:	e590      	b.n	35ec0 <__aeabi_dadd+0x108>
   3639e:	4656      	mov	r6, sl
   363a0:	0023      	movs	r3, r4
   363a2:	3e20      	subs	r6, #32
   363a4:	40f3      	lsrs	r3, r6
   363a6:	4699      	mov	r9, r3
   363a8:	4653      	mov	r3, sl
   363aa:	2b20      	cmp	r3, #32
   363ac:	d00e      	beq.n	363cc <__aeabi_dadd+0x614>
   363ae:	2340      	movs	r3, #64	; 0x40
   363b0:	4656      	mov	r6, sl
   363b2:	1b9b      	subs	r3, r3, r6
   363b4:	409c      	lsls	r4, r3
   363b6:	4327      	orrs	r7, r4
   363b8:	1e7c      	subs	r4, r7, #1
   363ba:	41a7      	sbcs	r7, r4
   363bc:	464b      	mov	r3, r9
   363be:	2400      	movs	r4, #0
   363c0:	431f      	orrs	r7, r3
   363c2:	e75f      	b.n	36284 <__aeabi_dadd+0x4cc>
   363c4:	2400      	movs	r4, #0
   363c6:	e7d2      	b.n	3636e <__aeabi_dadd+0x5b6>
   363c8:	0017      	movs	r7, r2
   363ca:	e5b2      	b.n	35f32 <__aeabi_dadd+0x17a>
   363cc:	2400      	movs	r4, #0
   363ce:	e7f2      	b.n	363b6 <__aeabi_dadd+0x5fe>
   363d0:	000007ff 	.word	0x000007ff
   363d4:	ff7fffff 	.word	0xff7fffff

000363d8 <__aeabi_ddiv>:
   363d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   363da:	4657      	mov	r7, sl
   363dc:	4645      	mov	r5, r8
   363de:	46de      	mov	lr, fp
   363e0:	464e      	mov	r6, r9
   363e2:	b5e0      	push	{r5, r6, r7, lr}
   363e4:	004c      	lsls	r4, r1, #1
   363e6:	030e      	lsls	r6, r1, #12
   363e8:	b087      	sub	sp, #28
   363ea:	4683      	mov	fp, r0
   363ec:	4692      	mov	sl, r2
   363ee:	001d      	movs	r5, r3
   363f0:	4680      	mov	r8, r0
   363f2:	0b36      	lsrs	r6, r6, #12
   363f4:	0d64      	lsrs	r4, r4, #21
   363f6:	0fcf      	lsrs	r7, r1, #31
   363f8:	2c00      	cmp	r4, #0
   363fa:	d04f      	beq.n	3649c <__aeabi_ddiv+0xc4>
   363fc:	4b6f      	ldr	r3, [pc, #444]	; (365bc <__aeabi_ddiv+0x1e4>)
   363fe:	429c      	cmp	r4, r3
   36400:	d035      	beq.n	3646e <__aeabi_ddiv+0x96>
   36402:	2380      	movs	r3, #128	; 0x80
   36404:	0f42      	lsrs	r2, r0, #29
   36406:	041b      	lsls	r3, r3, #16
   36408:	00f6      	lsls	r6, r6, #3
   3640a:	4313      	orrs	r3, r2
   3640c:	4333      	orrs	r3, r6
   3640e:	4699      	mov	r9, r3
   36410:	00c3      	lsls	r3, r0, #3
   36412:	4698      	mov	r8, r3
   36414:	4b6a      	ldr	r3, [pc, #424]	; (365c0 <__aeabi_ddiv+0x1e8>)
   36416:	2600      	movs	r6, #0
   36418:	469c      	mov	ip, r3
   3641a:	2300      	movs	r3, #0
   3641c:	4464      	add	r4, ip
   3641e:	9303      	str	r3, [sp, #12]
   36420:	032b      	lsls	r3, r5, #12
   36422:	0b1b      	lsrs	r3, r3, #12
   36424:	469b      	mov	fp, r3
   36426:	006b      	lsls	r3, r5, #1
   36428:	0fed      	lsrs	r5, r5, #31
   3642a:	4650      	mov	r0, sl
   3642c:	0d5b      	lsrs	r3, r3, #21
   3642e:	9501      	str	r5, [sp, #4]
   36430:	d05e      	beq.n	364f0 <__aeabi_ddiv+0x118>
   36432:	4a62      	ldr	r2, [pc, #392]	; (365bc <__aeabi_ddiv+0x1e4>)
   36434:	4293      	cmp	r3, r2
   36436:	d053      	beq.n	364e0 <__aeabi_ddiv+0x108>
   36438:	465a      	mov	r2, fp
   3643a:	00d1      	lsls	r1, r2, #3
   3643c:	2280      	movs	r2, #128	; 0x80
   3643e:	0f40      	lsrs	r0, r0, #29
   36440:	0412      	lsls	r2, r2, #16
   36442:	4302      	orrs	r2, r0
   36444:	430a      	orrs	r2, r1
   36446:	4693      	mov	fp, r2
   36448:	4652      	mov	r2, sl
   3644a:	00d1      	lsls	r1, r2, #3
   3644c:	4a5c      	ldr	r2, [pc, #368]	; (365c0 <__aeabi_ddiv+0x1e8>)
   3644e:	4694      	mov	ip, r2
   36450:	2200      	movs	r2, #0
   36452:	4463      	add	r3, ip
   36454:	0038      	movs	r0, r7
   36456:	4068      	eors	r0, r5
   36458:	4684      	mov	ip, r0
   3645a:	9002      	str	r0, [sp, #8]
   3645c:	1ae4      	subs	r4, r4, r3
   3645e:	4316      	orrs	r6, r2
   36460:	2e0f      	cmp	r6, #15
   36462:	d900      	bls.n	36466 <__aeabi_ddiv+0x8e>
   36464:	e0b4      	b.n	365d0 <__aeabi_ddiv+0x1f8>
   36466:	4b57      	ldr	r3, [pc, #348]	; (365c4 <__aeabi_ddiv+0x1ec>)
   36468:	00b6      	lsls	r6, r6, #2
   3646a:	599b      	ldr	r3, [r3, r6]
   3646c:	469f      	mov	pc, r3
   3646e:	0003      	movs	r3, r0
   36470:	4333      	orrs	r3, r6
   36472:	4699      	mov	r9, r3
   36474:	d16c      	bne.n	36550 <__aeabi_ddiv+0x178>
   36476:	2300      	movs	r3, #0
   36478:	4698      	mov	r8, r3
   3647a:	3302      	adds	r3, #2
   3647c:	2608      	movs	r6, #8
   3647e:	9303      	str	r3, [sp, #12]
   36480:	e7ce      	b.n	36420 <__aeabi_ddiv+0x48>
   36482:	46cb      	mov	fp, r9
   36484:	4641      	mov	r1, r8
   36486:	9a03      	ldr	r2, [sp, #12]
   36488:	9701      	str	r7, [sp, #4]
   3648a:	2a02      	cmp	r2, #2
   3648c:	d165      	bne.n	3655a <__aeabi_ddiv+0x182>
   3648e:	9b01      	ldr	r3, [sp, #4]
   36490:	4c4a      	ldr	r4, [pc, #296]	; (365bc <__aeabi_ddiv+0x1e4>)
   36492:	469c      	mov	ip, r3
   36494:	2300      	movs	r3, #0
   36496:	2200      	movs	r2, #0
   36498:	4698      	mov	r8, r3
   3649a:	e06b      	b.n	36574 <__aeabi_ddiv+0x19c>
   3649c:	0003      	movs	r3, r0
   3649e:	4333      	orrs	r3, r6
   364a0:	4699      	mov	r9, r3
   364a2:	d04e      	beq.n	36542 <__aeabi_ddiv+0x16a>
   364a4:	2e00      	cmp	r6, #0
   364a6:	d100      	bne.n	364aa <__aeabi_ddiv+0xd2>
   364a8:	e1bc      	b.n	36824 <__aeabi_ddiv+0x44c>
   364aa:	0030      	movs	r0, r6
   364ac:	f001 f8ca 	bl	37644 <__clzsi2>
   364b0:	0003      	movs	r3, r0
   364b2:	3b0b      	subs	r3, #11
   364b4:	2b1c      	cmp	r3, #28
   364b6:	dd00      	ble.n	364ba <__aeabi_ddiv+0xe2>
   364b8:	e1ac      	b.n	36814 <__aeabi_ddiv+0x43c>
   364ba:	221d      	movs	r2, #29
   364bc:	1ad3      	subs	r3, r2, r3
   364be:	465a      	mov	r2, fp
   364c0:	0001      	movs	r1, r0
   364c2:	40da      	lsrs	r2, r3
   364c4:	3908      	subs	r1, #8
   364c6:	408e      	lsls	r6, r1
   364c8:	0013      	movs	r3, r2
   364ca:	4333      	orrs	r3, r6
   364cc:	4699      	mov	r9, r3
   364ce:	465b      	mov	r3, fp
   364d0:	408b      	lsls	r3, r1
   364d2:	4698      	mov	r8, r3
   364d4:	2300      	movs	r3, #0
   364d6:	4c3c      	ldr	r4, [pc, #240]	; (365c8 <__aeabi_ddiv+0x1f0>)
   364d8:	2600      	movs	r6, #0
   364da:	1a24      	subs	r4, r4, r0
   364dc:	9303      	str	r3, [sp, #12]
   364de:	e79f      	b.n	36420 <__aeabi_ddiv+0x48>
   364e0:	4651      	mov	r1, sl
   364e2:	465a      	mov	r2, fp
   364e4:	4311      	orrs	r1, r2
   364e6:	d129      	bne.n	3653c <__aeabi_ddiv+0x164>
   364e8:	2200      	movs	r2, #0
   364ea:	4693      	mov	fp, r2
   364ec:	3202      	adds	r2, #2
   364ee:	e7b1      	b.n	36454 <__aeabi_ddiv+0x7c>
   364f0:	4659      	mov	r1, fp
   364f2:	4301      	orrs	r1, r0
   364f4:	d01e      	beq.n	36534 <__aeabi_ddiv+0x15c>
   364f6:	465b      	mov	r3, fp
   364f8:	2b00      	cmp	r3, #0
   364fa:	d100      	bne.n	364fe <__aeabi_ddiv+0x126>
   364fc:	e19e      	b.n	3683c <__aeabi_ddiv+0x464>
   364fe:	4658      	mov	r0, fp
   36500:	f001 f8a0 	bl	37644 <__clzsi2>
   36504:	0003      	movs	r3, r0
   36506:	3b0b      	subs	r3, #11
   36508:	2b1c      	cmp	r3, #28
   3650a:	dd00      	ble.n	3650e <__aeabi_ddiv+0x136>
   3650c:	e18f      	b.n	3682e <__aeabi_ddiv+0x456>
   3650e:	0002      	movs	r2, r0
   36510:	4659      	mov	r1, fp
   36512:	3a08      	subs	r2, #8
   36514:	4091      	lsls	r1, r2
   36516:	468b      	mov	fp, r1
   36518:	211d      	movs	r1, #29
   3651a:	1acb      	subs	r3, r1, r3
   3651c:	4651      	mov	r1, sl
   3651e:	40d9      	lsrs	r1, r3
   36520:	000b      	movs	r3, r1
   36522:	4659      	mov	r1, fp
   36524:	430b      	orrs	r3, r1
   36526:	4651      	mov	r1, sl
   36528:	469b      	mov	fp, r3
   3652a:	4091      	lsls	r1, r2
   3652c:	4b26      	ldr	r3, [pc, #152]	; (365c8 <__aeabi_ddiv+0x1f0>)
   3652e:	2200      	movs	r2, #0
   36530:	1a1b      	subs	r3, r3, r0
   36532:	e78f      	b.n	36454 <__aeabi_ddiv+0x7c>
   36534:	2300      	movs	r3, #0
   36536:	2201      	movs	r2, #1
   36538:	469b      	mov	fp, r3
   3653a:	e78b      	b.n	36454 <__aeabi_ddiv+0x7c>
   3653c:	4651      	mov	r1, sl
   3653e:	2203      	movs	r2, #3
   36540:	e788      	b.n	36454 <__aeabi_ddiv+0x7c>
   36542:	2300      	movs	r3, #0
   36544:	4698      	mov	r8, r3
   36546:	3301      	adds	r3, #1
   36548:	2604      	movs	r6, #4
   3654a:	2400      	movs	r4, #0
   3654c:	9303      	str	r3, [sp, #12]
   3654e:	e767      	b.n	36420 <__aeabi_ddiv+0x48>
   36550:	2303      	movs	r3, #3
   36552:	46b1      	mov	r9, r6
   36554:	9303      	str	r3, [sp, #12]
   36556:	260c      	movs	r6, #12
   36558:	e762      	b.n	36420 <__aeabi_ddiv+0x48>
   3655a:	2a03      	cmp	r2, #3
   3655c:	d100      	bne.n	36560 <__aeabi_ddiv+0x188>
   3655e:	e25c      	b.n	36a1a <__aeabi_ddiv+0x642>
   36560:	9b01      	ldr	r3, [sp, #4]
   36562:	2a01      	cmp	r2, #1
   36564:	d000      	beq.n	36568 <__aeabi_ddiv+0x190>
   36566:	e1e4      	b.n	36932 <__aeabi_ddiv+0x55a>
   36568:	4013      	ands	r3, r2
   3656a:	469c      	mov	ip, r3
   3656c:	2300      	movs	r3, #0
   3656e:	2400      	movs	r4, #0
   36570:	2200      	movs	r2, #0
   36572:	4698      	mov	r8, r3
   36574:	2100      	movs	r1, #0
   36576:	0312      	lsls	r2, r2, #12
   36578:	0b13      	lsrs	r3, r2, #12
   3657a:	0d0a      	lsrs	r2, r1, #20
   3657c:	0512      	lsls	r2, r2, #20
   3657e:	431a      	orrs	r2, r3
   36580:	0523      	lsls	r3, r4, #20
   36582:	4c12      	ldr	r4, [pc, #72]	; (365cc <__aeabi_ddiv+0x1f4>)
   36584:	4640      	mov	r0, r8
   36586:	4022      	ands	r2, r4
   36588:	4313      	orrs	r3, r2
   3658a:	4662      	mov	r2, ip
   3658c:	005b      	lsls	r3, r3, #1
   3658e:	07d2      	lsls	r2, r2, #31
   36590:	085b      	lsrs	r3, r3, #1
   36592:	4313      	orrs	r3, r2
   36594:	0019      	movs	r1, r3
   36596:	b007      	add	sp, #28
   36598:	bc3c      	pop	{r2, r3, r4, r5}
   3659a:	4690      	mov	r8, r2
   3659c:	4699      	mov	r9, r3
   3659e:	46a2      	mov	sl, r4
   365a0:	46ab      	mov	fp, r5
   365a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   365a4:	2300      	movs	r3, #0
   365a6:	2280      	movs	r2, #128	; 0x80
   365a8:	469c      	mov	ip, r3
   365aa:	0312      	lsls	r2, r2, #12
   365ac:	4698      	mov	r8, r3
   365ae:	4c03      	ldr	r4, [pc, #12]	; (365bc <__aeabi_ddiv+0x1e4>)
   365b0:	e7e0      	b.n	36574 <__aeabi_ddiv+0x19c>
   365b2:	2300      	movs	r3, #0
   365b4:	4c01      	ldr	r4, [pc, #4]	; (365bc <__aeabi_ddiv+0x1e4>)
   365b6:	2200      	movs	r2, #0
   365b8:	4698      	mov	r8, r3
   365ba:	e7db      	b.n	36574 <__aeabi_ddiv+0x19c>
   365bc:	000007ff 	.word	0x000007ff
   365c0:	fffffc01 	.word	0xfffffc01
   365c4:	0003d2b4 	.word	0x0003d2b4
   365c8:	fffffc0d 	.word	0xfffffc0d
   365cc:	800fffff 	.word	0x800fffff
   365d0:	45d9      	cmp	r9, fp
   365d2:	d900      	bls.n	365d6 <__aeabi_ddiv+0x1fe>
   365d4:	e139      	b.n	3684a <__aeabi_ddiv+0x472>
   365d6:	d100      	bne.n	365da <__aeabi_ddiv+0x202>
   365d8:	e134      	b.n	36844 <__aeabi_ddiv+0x46c>
   365da:	2300      	movs	r3, #0
   365dc:	4646      	mov	r6, r8
   365de:	464d      	mov	r5, r9
   365e0:	469a      	mov	sl, r3
   365e2:	3c01      	subs	r4, #1
   365e4:	465b      	mov	r3, fp
   365e6:	0e0a      	lsrs	r2, r1, #24
   365e8:	021b      	lsls	r3, r3, #8
   365ea:	431a      	orrs	r2, r3
   365ec:	020b      	lsls	r3, r1, #8
   365ee:	0c17      	lsrs	r7, r2, #16
   365f0:	9303      	str	r3, [sp, #12]
   365f2:	0413      	lsls	r3, r2, #16
   365f4:	0c1b      	lsrs	r3, r3, #16
   365f6:	0039      	movs	r1, r7
   365f8:	0028      	movs	r0, r5
   365fa:	4690      	mov	r8, r2
   365fc:	9301      	str	r3, [sp, #4]
   365fe:	f7fe ff23 	bl	35448 <__udivsi3>
   36602:	0002      	movs	r2, r0
   36604:	9b01      	ldr	r3, [sp, #4]
   36606:	4683      	mov	fp, r0
   36608:	435a      	muls	r2, r3
   3660a:	0028      	movs	r0, r5
   3660c:	0039      	movs	r1, r7
   3660e:	4691      	mov	r9, r2
   36610:	f7fe ffa0 	bl	35554 <__aeabi_uidivmod>
   36614:	0c35      	lsrs	r5, r6, #16
   36616:	0409      	lsls	r1, r1, #16
   36618:	430d      	orrs	r5, r1
   3661a:	45a9      	cmp	r9, r5
   3661c:	d90d      	bls.n	3663a <__aeabi_ddiv+0x262>
   3661e:	465b      	mov	r3, fp
   36620:	4445      	add	r5, r8
   36622:	3b01      	subs	r3, #1
   36624:	45a8      	cmp	r8, r5
   36626:	d900      	bls.n	3662a <__aeabi_ddiv+0x252>
   36628:	e13a      	b.n	368a0 <__aeabi_ddiv+0x4c8>
   3662a:	45a9      	cmp	r9, r5
   3662c:	d800      	bhi.n	36630 <__aeabi_ddiv+0x258>
   3662e:	e137      	b.n	368a0 <__aeabi_ddiv+0x4c8>
   36630:	2302      	movs	r3, #2
   36632:	425b      	negs	r3, r3
   36634:	469c      	mov	ip, r3
   36636:	4445      	add	r5, r8
   36638:	44e3      	add	fp, ip
   3663a:	464b      	mov	r3, r9
   3663c:	1aeb      	subs	r3, r5, r3
   3663e:	0039      	movs	r1, r7
   36640:	0018      	movs	r0, r3
   36642:	9304      	str	r3, [sp, #16]
   36644:	f7fe ff00 	bl	35448 <__udivsi3>
   36648:	9b01      	ldr	r3, [sp, #4]
   3664a:	0005      	movs	r5, r0
   3664c:	4343      	muls	r3, r0
   3664e:	0039      	movs	r1, r7
   36650:	9804      	ldr	r0, [sp, #16]
   36652:	4699      	mov	r9, r3
   36654:	f7fe ff7e 	bl	35554 <__aeabi_uidivmod>
   36658:	0433      	lsls	r3, r6, #16
   3665a:	0409      	lsls	r1, r1, #16
   3665c:	0c1b      	lsrs	r3, r3, #16
   3665e:	430b      	orrs	r3, r1
   36660:	4599      	cmp	r9, r3
   36662:	d909      	bls.n	36678 <__aeabi_ddiv+0x2a0>
   36664:	4443      	add	r3, r8
   36666:	1e6a      	subs	r2, r5, #1
   36668:	4598      	cmp	r8, r3
   3666a:	d900      	bls.n	3666e <__aeabi_ddiv+0x296>
   3666c:	e11a      	b.n	368a4 <__aeabi_ddiv+0x4cc>
   3666e:	4599      	cmp	r9, r3
   36670:	d800      	bhi.n	36674 <__aeabi_ddiv+0x29c>
   36672:	e117      	b.n	368a4 <__aeabi_ddiv+0x4cc>
   36674:	3d02      	subs	r5, #2
   36676:	4443      	add	r3, r8
   36678:	464a      	mov	r2, r9
   3667a:	1a9b      	subs	r3, r3, r2
   3667c:	465a      	mov	r2, fp
   3667e:	0412      	lsls	r2, r2, #16
   36680:	432a      	orrs	r2, r5
   36682:	9903      	ldr	r1, [sp, #12]
   36684:	4693      	mov	fp, r2
   36686:	0c10      	lsrs	r0, r2, #16
   36688:	0c0a      	lsrs	r2, r1, #16
   3668a:	4691      	mov	r9, r2
   3668c:	0409      	lsls	r1, r1, #16
   3668e:	465a      	mov	r2, fp
   36690:	0c09      	lsrs	r1, r1, #16
   36692:	464e      	mov	r6, r9
   36694:	000d      	movs	r5, r1
   36696:	0412      	lsls	r2, r2, #16
   36698:	0c12      	lsrs	r2, r2, #16
   3669a:	4345      	muls	r5, r0
   3669c:	9105      	str	r1, [sp, #20]
   3669e:	4351      	muls	r1, r2
   366a0:	4372      	muls	r2, r6
   366a2:	4370      	muls	r0, r6
   366a4:	1952      	adds	r2, r2, r5
   366a6:	0c0e      	lsrs	r6, r1, #16
   366a8:	18b2      	adds	r2, r6, r2
   366aa:	4295      	cmp	r5, r2
   366ac:	d903      	bls.n	366b6 <__aeabi_ddiv+0x2de>
   366ae:	2580      	movs	r5, #128	; 0x80
   366b0:	026d      	lsls	r5, r5, #9
   366b2:	46ac      	mov	ip, r5
   366b4:	4460      	add	r0, ip
   366b6:	0c15      	lsrs	r5, r2, #16
   366b8:	0409      	lsls	r1, r1, #16
   366ba:	0412      	lsls	r2, r2, #16
   366bc:	0c09      	lsrs	r1, r1, #16
   366be:	1828      	adds	r0, r5, r0
   366c0:	1852      	adds	r2, r2, r1
   366c2:	4283      	cmp	r3, r0
   366c4:	d200      	bcs.n	366c8 <__aeabi_ddiv+0x2f0>
   366c6:	e0ce      	b.n	36866 <__aeabi_ddiv+0x48e>
   366c8:	d100      	bne.n	366cc <__aeabi_ddiv+0x2f4>
   366ca:	e0c8      	b.n	3685e <__aeabi_ddiv+0x486>
   366cc:	1a1d      	subs	r5, r3, r0
   366ce:	4653      	mov	r3, sl
   366d0:	1a9e      	subs	r6, r3, r2
   366d2:	45b2      	cmp	sl, r6
   366d4:	4192      	sbcs	r2, r2
   366d6:	4252      	negs	r2, r2
   366d8:	1aab      	subs	r3, r5, r2
   366da:	469a      	mov	sl, r3
   366dc:	4598      	cmp	r8, r3
   366de:	d100      	bne.n	366e2 <__aeabi_ddiv+0x30a>
   366e0:	e117      	b.n	36912 <__aeabi_ddiv+0x53a>
   366e2:	0039      	movs	r1, r7
   366e4:	0018      	movs	r0, r3
   366e6:	f7fe feaf 	bl	35448 <__udivsi3>
   366ea:	9b01      	ldr	r3, [sp, #4]
   366ec:	0005      	movs	r5, r0
   366ee:	4343      	muls	r3, r0
   366f0:	0039      	movs	r1, r7
   366f2:	4650      	mov	r0, sl
   366f4:	9304      	str	r3, [sp, #16]
   366f6:	f7fe ff2d 	bl	35554 <__aeabi_uidivmod>
   366fa:	9804      	ldr	r0, [sp, #16]
   366fc:	040b      	lsls	r3, r1, #16
   366fe:	0c31      	lsrs	r1, r6, #16
   36700:	4319      	orrs	r1, r3
   36702:	4288      	cmp	r0, r1
   36704:	d909      	bls.n	3671a <__aeabi_ddiv+0x342>
   36706:	4441      	add	r1, r8
   36708:	1e6b      	subs	r3, r5, #1
   3670a:	4588      	cmp	r8, r1
   3670c:	d900      	bls.n	36710 <__aeabi_ddiv+0x338>
   3670e:	e107      	b.n	36920 <__aeabi_ddiv+0x548>
   36710:	4288      	cmp	r0, r1
   36712:	d800      	bhi.n	36716 <__aeabi_ddiv+0x33e>
   36714:	e104      	b.n	36920 <__aeabi_ddiv+0x548>
   36716:	3d02      	subs	r5, #2
   36718:	4441      	add	r1, r8
   3671a:	9b04      	ldr	r3, [sp, #16]
   3671c:	1acb      	subs	r3, r1, r3
   3671e:	0018      	movs	r0, r3
   36720:	0039      	movs	r1, r7
   36722:	9304      	str	r3, [sp, #16]
   36724:	f7fe fe90 	bl	35448 <__udivsi3>
   36728:	9b01      	ldr	r3, [sp, #4]
   3672a:	4682      	mov	sl, r0
   3672c:	4343      	muls	r3, r0
   3672e:	0039      	movs	r1, r7
   36730:	9804      	ldr	r0, [sp, #16]
   36732:	9301      	str	r3, [sp, #4]
   36734:	f7fe ff0e 	bl	35554 <__aeabi_uidivmod>
   36738:	9801      	ldr	r0, [sp, #4]
   3673a:	040b      	lsls	r3, r1, #16
   3673c:	0431      	lsls	r1, r6, #16
   3673e:	0c09      	lsrs	r1, r1, #16
   36740:	4319      	orrs	r1, r3
   36742:	4288      	cmp	r0, r1
   36744:	d90d      	bls.n	36762 <__aeabi_ddiv+0x38a>
   36746:	4653      	mov	r3, sl
   36748:	4441      	add	r1, r8
   3674a:	3b01      	subs	r3, #1
   3674c:	4588      	cmp	r8, r1
   3674e:	d900      	bls.n	36752 <__aeabi_ddiv+0x37a>
   36750:	e0e8      	b.n	36924 <__aeabi_ddiv+0x54c>
   36752:	4288      	cmp	r0, r1
   36754:	d800      	bhi.n	36758 <__aeabi_ddiv+0x380>
   36756:	e0e5      	b.n	36924 <__aeabi_ddiv+0x54c>
   36758:	2302      	movs	r3, #2
   3675a:	425b      	negs	r3, r3
   3675c:	469c      	mov	ip, r3
   3675e:	4441      	add	r1, r8
   36760:	44e2      	add	sl, ip
   36762:	9b01      	ldr	r3, [sp, #4]
   36764:	042d      	lsls	r5, r5, #16
   36766:	1ace      	subs	r6, r1, r3
   36768:	4651      	mov	r1, sl
   3676a:	4329      	orrs	r1, r5
   3676c:	9d05      	ldr	r5, [sp, #20]
   3676e:	464f      	mov	r7, r9
   36770:	002a      	movs	r2, r5
   36772:	040b      	lsls	r3, r1, #16
   36774:	0c08      	lsrs	r0, r1, #16
   36776:	0c1b      	lsrs	r3, r3, #16
   36778:	435a      	muls	r2, r3
   3677a:	4345      	muls	r5, r0
   3677c:	437b      	muls	r3, r7
   3677e:	4378      	muls	r0, r7
   36780:	195b      	adds	r3, r3, r5
   36782:	0c17      	lsrs	r7, r2, #16
   36784:	18fb      	adds	r3, r7, r3
   36786:	429d      	cmp	r5, r3
   36788:	d903      	bls.n	36792 <__aeabi_ddiv+0x3ba>
   3678a:	2580      	movs	r5, #128	; 0x80
   3678c:	026d      	lsls	r5, r5, #9
   3678e:	46ac      	mov	ip, r5
   36790:	4460      	add	r0, ip
   36792:	0c1d      	lsrs	r5, r3, #16
   36794:	0412      	lsls	r2, r2, #16
   36796:	041b      	lsls	r3, r3, #16
   36798:	0c12      	lsrs	r2, r2, #16
   3679a:	1828      	adds	r0, r5, r0
   3679c:	189b      	adds	r3, r3, r2
   3679e:	4286      	cmp	r6, r0
   367a0:	d200      	bcs.n	367a4 <__aeabi_ddiv+0x3cc>
   367a2:	e093      	b.n	368cc <__aeabi_ddiv+0x4f4>
   367a4:	d100      	bne.n	367a8 <__aeabi_ddiv+0x3d0>
   367a6:	e08e      	b.n	368c6 <__aeabi_ddiv+0x4ee>
   367a8:	2301      	movs	r3, #1
   367aa:	4319      	orrs	r1, r3
   367ac:	4ba0      	ldr	r3, [pc, #640]	; (36a30 <__aeabi_ddiv+0x658>)
   367ae:	18e3      	adds	r3, r4, r3
   367b0:	2b00      	cmp	r3, #0
   367b2:	dc00      	bgt.n	367b6 <__aeabi_ddiv+0x3de>
   367b4:	e099      	b.n	368ea <__aeabi_ddiv+0x512>
   367b6:	074a      	lsls	r2, r1, #29
   367b8:	d000      	beq.n	367bc <__aeabi_ddiv+0x3e4>
   367ba:	e09e      	b.n	368fa <__aeabi_ddiv+0x522>
   367bc:	465a      	mov	r2, fp
   367be:	01d2      	lsls	r2, r2, #7
   367c0:	d506      	bpl.n	367d0 <__aeabi_ddiv+0x3f8>
   367c2:	465a      	mov	r2, fp
   367c4:	4b9b      	ldr	r3, [pc, #620]	; (36a34 <__aeabi_ddiv+0x65c>)
   367c6:	401a      	ands	r2, r3
   367c8:	2380      	movs	r3, #128	; 0x80
   367ca:	4693      	mov	fp, r2
   367cc:	00db      	lsls	r3, r3, #3
   367ce:	18e3      	adds	r3, r4, r3
   367d0:	4a99      	ldr	r2, [pc, #612]	; (36a38 <__aeabi_ddiv+0x660>)
   367d2:	4293      	cmp	r3, r2
   367d4:	dd68      	ble.n	368a8 <__aeabi_ddiv+0x4d0>
   367d6:	2301      	movs	r3, #1
   367d8:	9a02      	ldr	r2, [sp, #8]
   367da:	4c98      	ldr	r4, [pc, #608]	; (36a3c <__aeabi_ddiv+0x664>)
   367dc:	401a      	ands	r2, r3
   367de:	2300      	movs	r3, #0
   367e0:	4694      	mov	ip, r2
   367e2:	4698      	mov	r8, r3
   367e4:	2200      	movs	r2, #0
   367e6:	e6c5      	b.n	36574 <__aeabi_ddiv+0x19c>
   367e8:	2280      	movs	r2, #128	; 0x80
   367ea:	464b      	mov	r3, r9
   367ec:	0312      	lsls	r2, r2, #12
   367ee:	4213      	tst	r3, r2
   367f0:	d00a      	beq.n	36808 <__aeabi_ddiv+0x430>
   367f2:	465b      	mov	r3, fp
   367f4:	4213      	tst	r3, r2
   367f6:	d106      	bne.n	36806 <__aeabi_ddiv+0x42e>
   367f8:	431a      	orrs	r2, r3
   367fa:	0312      	lsls	r2, r2, #12
   367fc:	0b12      	lsrs	r2, r2, #12
   367fe:	46ac      	mov	ip, r5
   36800:	4688      	mov	r8, r1
   36802:	4c8e      	ldr	r4, [pc, #568]	; (36a3c <__aeabi_ddiv+0x664>)
   36804:	e6b6      	b.n	36574 <__aeabi_ddiv+0x19c>
   36806:	464b      	mov	r3, r9
   36808:	431a      	orrs	r2, r3
   3680a:	0312      	lsls	r2, r2, #12
   3680c:	0b12      	lsrs	r2, r2, #12
   3680e:	46bc      	mov	ip, r7
   36810:	4c8a      	ldr	r4, [pc, #552]	; (36a3c <__aeabi_ddiv+0x664>)
   36812:	e6af      	b.n	36574 <__aeabi_ddiv+0x19c>
   36814:	0003      	movs	r3, r0
   36816:	465a      	mov	r2, fp
   36818:	3b28      	subs	r3, #40	; 0x28
   3681a:	409a      	lsls	r2, r3
   3681c:	2300      	movs	r3, #0
   3681e:	4691      	mov	r9, r2
   36820:	4698      	mov	r8, r3
   36822:	e657      	b.n	364d4 <__aeabi_ddiv+0xfc>
   36824:	4658      	mov	r0, fp
   36826:	f000 ff0d 	bl	37644 <__clzsi2>
   3682a:	3020      	adds	r0, #32
   3682c:	e640      	b.n	364b0 <__aeabi_ddiv+0xd8>
   3682e:	0003      	movs	r3, r0
   36830:	4652      	mov	r2, sl
   36832:	3b28      	subs	r3, #40	; 0x28
   36834:	409a      	lsls	r2, r3
   36836:	2100      	movs	r1, #0
   36838:	4693      	mov	fp, r2
   3683a:	e677      	b.n	3652c <__aeabi_ddiv+0x154>
   3683c:	f000 ff02 	bl	37644 <__clzsi2>
   36840:	3020      	adds	r0, #32
   36842:	e65f      	b.n	36504 <__aeabi_ddiv+0x12c>
   36844:	4588      	cmp	r8, r1
   36846:	d200      	bcs.n	3684a <__aeabi_ddiv+0x472>
   36848:	e6c7      	b.n	365da <__aeabi_ddiv+0x202>
   3684a:	464b      	mov	r3, r9
   3684c:	07de      	lsls	r6, r3, #31
   3684e:	085d      	lsrs	r5, r3, #1
   36850:	4643      	mov	r3, r8
   36852:	085b      	lsrs	r3, r3, #1
   36854:	431e      	orrs	r6, r3
   36856:	4643      	mov	r3, r8
   36858:	07db      	lsls	r3, r3, #31
   3685a:	469a      	mov	sl, r3
   3685c:	e6c2      	b.n	365e4 <__aeabi_ddiv+0x20c>
   3685e:	2500      	movs	r5, #0
   36860:	4592      	cmp	sl, r2
   36862:	d300      	bcc.n	36866 <__aeabi_ddiv+0x48e>
   36864:	e733      	b.n	366ce <__aeabi_ddiv+0x2f6>
   36866:	9e03      	ldr	r6, [sp, #12]
   36868:	4659      	mov	r1, fp
   3686a:	46b4      	mov	ip, r6
   3686c:	44e2      	add	sl, ip
   3686e:	45b2      	cmp	sl, r6
   36870:	41ad      	sbcs	r5, r5
   36872:	426d      	negs	r5, r5
   36874:	4445      	add	r5, r8
   36876:	18eb      	adds	r3, r5, r3
   36878:	3901      	subs	r1, #1
   3687a:	4598      	cmp	r8, r3
   3687c:	d207      	bcs.n	3688e <__aeabi_ddiv+0x4b6>
   3687e:	4298      	cmp	r0, r3
   36880:	d900      	bls.n	36884 <__aeabi_ddiv+0x4ac>
   36882:	e07f      	b.n	36984 <__aeabi_ddiv+0x5ac>
   36884:	d100      	bne.n	36888 <__aeabi_ddiv+0x4b0>
   36886:	e0bc      	b.n	36a02 <__aeabi_ddiv+0x62a>
   36888:	1a1d      	subs	r5, r3, r0
   3688a:	468b      	mov	fp, r1
   3688c:	e71f      	b.n	366ce <__aeabi_ddiv+0x2f6>
   3688e:	4598      	cmp	r8, r3
   36890:	d1fa      	bne.n	36888 <__aeabi_ddiv+0x4b0>
   36892:	9d03      	ldr	r5, [sp, #12]
   36894:	4555      	cmp	r5, sl
   36896:	d9f2      	bls.n	3687e <__aeabi_ddiv+0x4a6>
   36898:	4643      	mov	r3, r8
   3689a:	468b      	mov	fp, r1
   3689c:	1a1d      	subs	r5, r3, r0
   3689e:	e716      	b.n	366ce <__aeabi_ddiv+0x2f6>
   368a0:	469b      	mov	fp, r3
   368a2:	e6ca      	b.n	3663a <__aeabi_ddiv+0x262>
   368a4:	0015      	movs	r5, r2
   368a6:	e6e7      	b.n	36678 <__aeabi_ddiv+0x2a0>
   368a8:	465a      	mov	r2, fp
   368aa:	08c9      	lsrs	r1, r1, #3
   368ac:	0752      	lsls	r2, r2, #29
   368ae:	430a      	orrs	r2, r1
   368b0:	055b      	lsls	r3, r3, #21
   368b2:	4690      	mov	r8, r2
   368b4:	0d5c      	lsrs	r4, r3, #21
   368b6:	465a      	mov	r2, fp
   368b8:	2301      	movs	r3, #1
   368ba:	9902      	ldr	r1, [sp, #8]
   368bc:	0252      	lsls	r2, r2, #9
   368be:	4019      	ands	r1, r3
   368c0:	0b12      	lsrs	r2, r2, #12
   368c2:	468c      	mov	ip, r1
   368c4:	e656      	b.n	36574 <__aeabi_ddiv+0x19c>
   368c6:	2b00      	cmp	r3, #0
   368c8:	d100      	bne.n	368cc <__aeabi_ddiv+0x4f4>
   368ca:	e76f      	b.n	367ac <__aeabi_ddiv+0x3d4>
   368cc:	4446      	add	r6, r8
   368ce:	1e4a      	subs	r2, r1, #1
   368d0:	45b0      	cmp	r8, r6
   368d2:	d929      	bls.n	36928 <__aeabi_ddiv+0x550>
   368d4:	0011      	movs	r1, r2
   368d6:	4286      	cmp	r6, r0
   368d8:	d000      	beq.n	368dc <__aeabi_ddiv+0x504>
   368da:	e765      	b.n	367a8 <__aeabi_ddiv+0x3d0>
   368dc:	9a03      	ldr	r2, [sp, #12]
   368de:	4293      	cmp	r3, r2
   368e0:	d000      	beq.n	368e4 <__aeabi_ddiv+0x50c>
   368e2:	e761      	b.n	367a8 <__aeabi_ddiv+0x3d0>
   368e4:	e762      	b.n	367ac <__aeabi_ddiv+0x3d4>
   368e6:	2101      	movs	r1, #1
   368e8:	4249      	negs	r1, r1
   368ea:	2001      	movs	r0, #1
   368ec:	1ac2      	subs	r2, r0, r3
   368ee:	2a38      	cmp	r2, #56	; 0x38
   368f0:	dd21      	ble.n	36936 <__aeabi_ddiv+0x55e>
   368f2:	9b02      	ldr	r3, [sp, #8]
   368f4:	4003      	ands	r3, r0
   368f6:	469c      	mov	ip, r3
   368f8:	e638      	b.n	3656c <__aeabi_ddiv+0x194>
   368fa:	220f      	movs	r2, #15
   368fc:	400a      	ands	r2, r1
   368fe:	2a04      	cmp	r2, #4
   36900:	d100      	bne.n	36904 <__aeabi_ddiv+0x52c>
   36902:	e75b      	b.n	367bc <__aeabi_ddiv+0x3e4>
   36904:	000a      	movs	r2, r1
   36906:	1d11      	adds	r1, r2, #4
   36908:	4291      	cmp	r1, r2
   3690a:	4192      	sbcs	r2, r2
   3690c:	4252      	negs	r2, r2
   3690e:	4493      	add	fp, r2
   36910:	e754      	b.n	367bc <__aeabi_ddiv+0x3e4>
   36912:	4b47      	ldr	r3, [pc, #284]	; (36a30 <__aeabi_ddiv+0x658>)
   36914:	18e3      	adds	r3, r4, r3
   36916:	2b00      	cmp	r3, #0
   36918:	dde5      	ble.n	368e6 <__aeabi_ddiv+0x50e>
   3691a:	2201      	movs	r2, #1
   3691c:	4252      	negs	r2, r2
   3691e:	e7f2      	b.n	36906 <__aeabi_ddiv+0x52e>
   36920:	001d      	movs	r5, r3
   36922:	e6fa      	b.n	3671a <__aeabi_ddiv+0x342>
   36924:	469a      	mov	sl, r3
   36926:	e71c      	b.n	36762 <__aeabi_ddiv+0x38a>
   36928:	42b0      	cmp	r0, r6
   3692a:	d839      	bhi.n	369a0 <__aeabi_ddiv+0x5c8>
   3692c:	d06e      	beq.n	36a0c <__aeabi_ddiv+0x634>
   3692e:	0011      	movs	r1, r2
   36930:	e73a      	b.n	367a8 <__aeabi_ddiv+0x3d0>
   36932:	9302      	str	r3, [sp, #8]
   36934:	e73a      	b.n	367ac <__aeabi_ddiv+0x3d4>
   36936:	2a1f      	cmp	r2, #31
   36938:	dc3c      	bgt.n	369b4 <__aeabi_ddiv+0x5dc>
   3693a:	2320      	movs	r3, #32
   3693c:	1a9b      	subs	r3, r3, r2
   3693e:	000c      	movs	r4, r1
   36940:	4658      	mov	r0, fp
   36942:	4099      	lsls	r1, r3
   36944:	4098      	lsls	r0, r3
   36946:	1e4b      	subs	r3, r1, #1
   36948:	4199      	sbcs	r1, r3
   3694a:	465b      	mov	r3, fp
   3694c:	40d4      	lsrs	r4, r2
   3694e:	40d3      	lsrs	r3, r2
   36950:	4320      	orrs	r0, r4
   36952:	4308      	orrs	r0, r1
   36954:	001a      	movs	r2, r3
   36956:	0743      	lsls	r3, r0, #29
   36958:	d009      	beq.n	3696e <__aeabi_ddiv+0x596>
   3695a:	230f      	movs	r3, #15
   3695c:	4003      	ands	r3, r0
   3695e:	2b04      	cmp	r3, #4
   36960:	d005      	beq.n	3696e <__aeabi_ddiv+0x596>
   36962:	0001      	movs	r1, r0
   36964:	1d08      	adds	r0, r1, #4
   36966:	4288      	cmp	r0, r1
   36968:	419b      	sbcs	r3, r3
   3696a:	425b      	negs	r3, r3
   3696c:	18d2      	adds	r2, r2, r3
   3696e:	0213      	lsls	r3, r2, #8
   36970:	d53a      	bpl.n	369e8 <__aeabi_ddiv+0x610>
   36972:	2301      	movs	r3, #1
   36974:	9a02      	ldr	r2, [sp, #8]
   36976:	2401      	movs	r4, #1
   36978:	401a      	ands	r2, r3
   3697a:	2300      	movs	r3, #0
   3697c:	4694      	mov	ip, r2
   3697e:	4698      	mov	r8, r3
   36980:	2200      	movs	r2, #0
   36982:	e5f7      	b.n	36574 <__aeabi_ddiv+0x19c>
   36984:	2102      	movs	r1, #2
   36986:	4249      	negs	r1, r1
   36988:	468c      	mov	ip, r1
   3698a:	9d03      	ldr	r5, [sp, #12]
   3698c:	44e3      	add	fp, ip
   3698e:	46ac      	mov	ip, r5
   36990:	44e2      	add	sl, ip
   36992:	45aa      	cmp	sl, r5
   36994:	41ad      	sbcs	r5, r5
   36996:	426d      	negs	r5, r5
   36998:	4445      	add	r5, r8
   3699a:	18ed      	adds	r5, r5, r3
   3699c:	1a2d      	subs	r5, r5, r0
   3699e:	e696      	b.n	366ce <__aeabi_ddiv+0x2f6>
   369a0:	1e8a      	subs	r2, r1, #2
   369a2:	9903      	ldr	r1, [sp, #12]
   369a4:	004d      	lsls	r5, r1, #1
   369a6:	428d      	cmp	r5, r1
   369a8:	4189      	sbcs	r1, r1
   369aa:	4249      	negs	r1, r1
   369ac:	4441      	add	r1, r8
   369ae:	1876      	adds	r6, r6, r1
   369b0:	9503      	str	r5, [sp, #12]
   369b2:	e78f      	b.n	368d4 <__aeabi_ddiv+0x4fc>
   369b4:	201f      	movs	r0, #31
   369b6:	4240      	negs	r0, r0
   369b8:	1ac3      	subs	r3, r0, r3
   369ba:	4658      	mov	r0, fp
   369bc:	40d8      	lsrs	r0, r3
   369be:	0003      	movs	r3, r0
   369c0:	2a20      	cmp	r2, #32
   369c2:	d028      	beq.n	36a16 <__aeabi_ddiv+0x63e>
   369c4:	2040      	movs	r0, #64	; 0x40
   369c6:	465d      	mov	r5, fp
   369c8:	1a82      	subs	r2, r0, r2
   369ca:	4095      	lsls	r5, r2
   369cc:	4329      	orrs	r1, r5
   369ce:	1e4a      	subs	r2, r1, #1
   369d0:	4191      	sbcs	r1, r2
   369d2:	4319      	orrs	r1, r3
   369d4:	2307      	movs	r3, #7
   369d6:	2200      	movs	r2, #0
   369d8:	400b      	ands	r3, r1
   369da:	d009      	beq.n	369f0 <__aeabi_ddiv+0x618>
   369dc:	230f      	movs	r3, #15
   369de:	2200      	movs	r2, #0
   369e0:	400b      	ands	r3, r1
   369e2:	0008      	movs	r0, r1
   369e4:	2b04      	cmp	r3, #4
   369e6:	d1bd      	bne.n	36964 <__aeabi_ddiv+0x58c>
   369e8:	0001      	movs	r1, r0
   369ea:	0753      	lsls	r3, r2, #29
   369ec:	0252      	lsls	r2, r2, #9
   369ee:	0b12      	lsrs	r2, r2, #12
   369f0:	08c9      	lsrs	r1, r1, #3
   369f2:	4319      	orrs	r1, r3
   369f4:	2301      	movs	r3, #1
   369f6:	4688      	mov	r8, r1
   369f8:	9902      	ldr	r1, [sp, #8]
   369fa:	2400      	movs	r4, #0
   369fc:	4019      	ands	r1, r3
   369fe:	468c      	mov	ip, r1
   36a00:	e5b8      	b.n	36574 <__aeabi_ddiv+0x19c>
   36a02:	4552      	cmp	r2, sl
   36a04:	d8be      	bhi.n	36984 <__aeabi_ddiv+0x5ac>
   36a06:	468b      	mov	fp, r1
   36a08:	2500      	movs	r5, #0
   36a0a:	e660      	b.n	366ce <__aeabi_ddiv+0x2f6>
   36a0c:	9d03      	ldr	r5, [sp, #12]
   36a0e:	429d      	cmp	r5, r3
   36a10:	d3c6      	bcc.n	369a0 <__aeabi_ddiv+0x5c8>
   36a12:	0011      	movs	r1, r2
   36a14:	e762      	b.n	368dc <__aeabi_ddiv+0x504>
   36a16:	2500      	movs	r5, #0
   36a18:	e7d8      	b.n	369cc <__aeabi_ddiv+0x5f4>
   36a1a:	2280      	movs	r2, #128	; 0x80
   36a1c:	465b      	mov	r3, fp
   36a1e:	0312      	lsls	r2, r2, #12
   36a20:	431a      	orrs	r2, r3
   36a22:	9b01      	ldr	r3, [sp, #4]
   36a24:	0312      	lsls	r2, r2, #12
   36a26:	0b12      	lsrs	r2, r2, #12
   36a28:	469c      	mov	ip, r3
   36a2a:	4688      	mov	r8, r1
   36a2c:	4c03      	ldr	r4, [pc, #12]	; (36a3c <__aeabi_ddiv+0x664>)
   36a2e:	e5a1      	b.n	36574 <__aeabi_ddiv+0x19c>
   36a30:	000003ff 	.word	0x000003ff
   36a34:	feffffff 	.word	0xfeffffff
   36a38:	000007fe 	.word	0x000007fe
   36a3c:	000007ff 	.word	0x000007ff

00036a40 <__aeabi_dmul>:
   36a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   36a42:	4657      	mov	r7, sl
   36a44:	4645      	mov	r5, r8
   36a46:	46de      	mov	lr, fp
   36a48:	464e      	mov	r6, r9
   36a4a:	b5e0      	push	{r5, r6, r7, lr}
   36a4c:	030c      	lsls	r4, r1, #12
   36a4e:	4698      	mov	r8, r3
   36a50:	004e      	lsls	r6, r1, #1
   36a52:	0b23      	lsrs	r3, r4, #12
   36a54:	b087      	sub	sp, #28
   36a56:	0007      	movs	r7, r0
   36a58:	4692      	mov	sl, r2
   36a5a:	469b      	mov	fp, r3
   36a5c:	0d76      	lsrs	r6, r6, #21
   36a5e:	0fcd      	lsrs	r5, r1, #31
   36a60:	2e00      	cmp	r6, #0
   36a62:	d06b      	beq.n	36b3c <__aeabi_dmul+0xfc>
   36a64:	4b6d      	ldr	r3, [pc, #436]	; (36c1c <__aeabi_dmul+0x1dc>)
   36a66:	429e      	cmp	r6, r3
   36a68:	d035      	beq.n	36ad6 <__aeabi_dmul+0x96>
   36a6a:	2480      	movs	r4, #128	; 0x80
   36a6c:	465b      	mov	r3, fp
   36a6e:	0f42      	lsrs	r2, r0, #29
   36a70:	0424      	lsls	r4, r4, #16
   36a72:	00db      	lsls	r3, r3, #3
   36a74:	4314      	orrs	r4, r2
   36a76:	431c      	orrs	r4, r3
   36a78:	00c3      	lsls	r3, r0, #3
   36a7a:	4699      	mov	r9, r3
   36a7c:	4b68      	ldr	r3, [pc, #416]	; (36c20 <__aeabi_dmul+0x1e0>)
   36a7e:	46a3      	mov	fp, r4
   36a80:	469c      	mov	ip, r3
   36a82:	2300      	movs	r3, #0
   36a84:	2700      	movs	r7, #0
   36a86:	4466      	add	r6, ip
   36a88:	9302      	str	r3, [sp, #8]
   36a8a:	4643      	mov	r3, r8
   36a8c:	031c      	lsls	r4, r3, #12
   36a8e:	005a      	lsls	r2, r3, #1
   36a90:	0fdb      	lsrs	r3, r3, #31
   36a92:	4650      	mov	r0, sl
   36a94:	0b24      	lsrs	r4, r4, #12
   36a96:	0d52      	lsrs	r2, r2, #21
   36a98:	4698      	mov	r8, r3
   36a9a:	d100      	bne.n	36a9e <__aeabi_dmul+0x5e>
   36a9c:	e076      	b.n	36b8c <__aeabi_dmul+0x14c>
   36a9e:	4b5f      	ldr	r3, [pc, #380]	; (36c1c <__aeabi_dmul+0x1dc>)
   36aa0:	429a      	cmp	r2, r3
   36aa2:	d06d      	beq.n	36b80 <__aeabi_dmul+0x140>
   36aa4:	2380      	movs	r3, #128	; 0x80
   36aa6:	0f41      	lsrs	r1, r0, #29
   36aa8:	041b      	lsls	r3, r3, #16
   36aaa:	430b      	orrs	r3, r1
   36aac:	495c      	ldr	r1, [pc, #368]	; (36c20 <__aeabi_dmul+0x1e0>)
   36aae:	00e4      	lsls	r4, r4, #3
   36ab0:	468c      	mov	ip, r1
   36ab2:	431c      	orrs	r4, r3
   36ab4:	00c3      	lsls	r3, r0, #3
   36ab6:	2000      	movs	r0, #0
   36ab8:	4462      	add	r2, ip
   36aba:	4641      	mov	r1, r8
   36abc:	18b6      	adds	r6, r6, r2
   36abe:	4069      	eors	r1, r5
   36ac0:	1c72      	adds	r2, r6, #1
   36ac2:	9101      	str	r1, [sp, #4]
   36ac4:	4694      	mov	ip, r2
   36ac6:	4307      	orrs	r7, r0
   36ac8:	2f0f      	cmp	r7, #15
   36aca:	d900      	bls.n	36ace <__aeabi_dmul+0x8e>
   36acc:	e0b0      	b.n	36c30 <__aeabi_dmul+0x1f0>
   36ace:	4a55      	ldr	r2, [pc, #340]	; (36c24 <__aeabi_dmul+0x1e4>)
   36ad0:	00bf      	lsls	r7, r7, #2
   36ad2:	59d2      	ldr	r2, [r2, r7]
   36ad4:	4697      	mov	pc, r2
   36ad6:	465b      	mov	r3, fp
   36ad8:	4303      	orrs	r3, r0
   36ada:	4699      	mov	r9, r3
   36adc:	d000      	beq.n	36ae0 <__aeabi_dmul+0xa0>
   36ade:	e087      	b.n	36bf0 <__aeabi_dmul+0x1b0>
   36ae0:	2300      	movs	r3, #0
   36ae2:	469b      	mov	fp, r3
   36ae4:	3302      	adds	r3, #2
   36ae6:	2708      	movs	r7, #8
   36ae8:	9302      	str	r3, [sp, #8]
   36aea:	e7ce      	b.n	36a8a <__aeabi_dmul+0x4a>
   36aec:	4642      	mov	r2, r8
   36aee:	9201      	str	r2, [sp, #4]
   36af0:	2802      	cmp	r0, #2
   36af2:	d067      	beq.n	36bc4 <__aeabi_dmul+0x184>
   36af4:	2803      	cmp	r0, #3
   36af6:	d100      	bne.n	36afa <__aeabi_dmul+0xba>
   36af8:	e20e      	b.n	36f18 <__aeabi_dmul+0x4d8>
   36afa:	2801      	cmp	r0, #1
   36afc:	d000      	beq.n	36b00 <__aeabi_dmul+0xc0>
   36afe:	e162      	b.n	36dc6 <__aeabi_dmul+0x386>
   36b00:	2300      	movs	r3, #0
   36b02:	2400      	movs	r4, #0
   36b04:	2200      	movs	r2, #0
   36b06:	4699      	mov	r9, r3
   36b08:	9901      	ldr	r1, [sp, #4]
   36b0a:	4001      	ands	r1, r0
   36b0c:	b2cd      	uxtb	r5, r1
   36b0e:	2100      	movs	r1, #0
   36b10:	0312      	lsls	r2, r2, #12
   36b12:	0d0b      	lsrs	r3, r1, #20
   36b14:	0b12      	lsrs	r2, r2, #12
   36b16:	051b      	lsls	r3, r3, #20
   36b18:	4313      	orrs	r3, r2
   36b1a:	4a43      	ldr	r2, [pc, #268]	; (36c28 <__aeabi_dmul+0x1e8>)
   36b1c:	0524      	lsls	r4, r4, #20
   36b1e:	4013      	ands	r3, r2
   36b20:	431c      	orrs	r4, r3
   36b22:	0064      	lsls	r4, r4, #1
   36b24:	07ed      	lsls	r5, r5, #31
   36b26:	0864      	lsrs	r4, r4, #1
   36b28:	432c      	orrs	r4, r5
   36b2a:	4648      	mov	r0, r9
   36b2c:	0021      	movs	r1, r4
   36b2e:	b007      	add	sp, #28
   36b30:	bc3c      	pop	{r2, r3, r4, r5}
   36b32:	4690      	mov	r8, r2
   36b34:	4699      	mov	r9, r3
   36b36:	46a2      	mov	sl, r4
   36b38:	46ab      	mov	fp, r5
   36b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36b3c:	4303      	orrs	r3, r0
   36b3e:	4699      	mov	r9, r3
   36b40:	d04f      	beq.n	36be2 <__aeabi_dmul+0x1a2>
   36b42:	465b      	mov	r3, fp
   36b44:	2b00      	cmp	r3, #0
   36b46:	d100      	bne.n	36b4a <__aeabi_dmul+0x10a>
   36b48:	e189      	b.n	36e5e <__aeabi_dmul+0x41e>
   36b4a:	4658      	mov	r0, fp
   36b4c:	f000 fd7a 	bl	37644 <__clzsi2>
   36b50:	0003      	movs	r3, r0
   36b52:	3b0b      	subs	r3, #11
   36b54:	2b1c      	cmp	r3, #28
   36b56:	dd00      	ble.n	36b5a <__aeabi_dmul+0x11a>
   36b58:	e17a      	b.n	36e50 <__aeabi_dmul+0x410>
   36b5a:	221d      	movs	r2, #29
   36b5c:	1ad3      	subs	r3, r2, r3
   36b5e:	003a      	movs	r2, r7
   36b60:	0001      	movs	r1, r0
   36b62:	465c      	mov	r4, fp
   36b64:	40da      	lsrs	r2, r3
   36b66:	3908      	subs	r1, #8
   36b68:	408c      	lsls	r4, r1
   36b6a:	0013      	movs	r3, r2
   36b6c:	408f      	lsls	r7, r1
   36b6e:	4323      	orrs	r3, r4
   36b70:	469b      	mov	fp, r3
   36b72:	46b9      	mov	r9, r7
   36b74:	2300      	movs	r3, #0
   36b76:	4e2d      	ldr	r6, [pc, #180]	; (36c2c <__aeabi_dmul+0x1ec>)
   36b78:	2700      	movs	r7, #0
   36b7a:	1a36      	subs	r6, r6, r0
   36b7c:	9302      	str	r3, [sp, #8]
   36b7e:	e784      	b.n	36a8a <__aeabi_dmul+0x4a>
   36b80:	4653      	mov	r3, sl
   36b82:	4323      	orrs	r3, r4
   36b84:	d12a      	bne.n	36bdc <__aeabi_dmul+0x19c>
   36b86:	2400      	movs	r4, #0
   36b88:	2002      	movs	r0, #2
   36b8a:	e796      	b.n	36aba <__aeabi_dmul+0x7a>
   36b8c:	4653      	mov	r3, sl
   36b8e:	4323      	orrs	r3, r4
   36b90:	d020      	beq.n	36bd4 <__aeabi_dmul+0x194>
   36b92:	2c00      	cmp	r4, #0
   36b94:	d100      	bne.n	36b98 <__aeabi_dmul+0x158>
   36b96:	e157      	b.n	36e48 <__aeabi_dmul+0x408>
   36b98:	0020      	movs	r0, r4
   36b9a:	f000 fd53 	bl	37644 <__clzsi2>
   36b9e:	0003      	movs	r3, r0
   36ba0:	3b0b      	subs	r3, #11
   36ba2:	2b1c      	cmp	r3, #28
   36ba4:	dd00      	ble.n	36ba8 <__aeabi_dmul+0x168>
   36ba6:	e149      	b.n	36e3c <__aeabi_dmul+0x3fc>
   36ba8:	211d      	movs	r1, #29
   36baa:	1acb      	subs	r3, r1, r3
   36bac:	4651      	mov	r1, sl
   36bae:	0002      	movs	r2, r0
   36bb0:	40d9      	lsrs	r1, r3
   36bb2:	4653      	mov	r3, sl
   36bb4:	3a08      	subs	r2, #8
   36bb6:	4094      	lsls	r4, r2
   36bb8:	4093      	lsls	r3, r2
   36bba:	430c      	orrs	r4, r1
   36bbc:	4a1b      	ldr	r2, [pc, #108]	; (36c2c <__aeabi_dmul+0x1ec>)
   36bbe:	1a12      	subs	r2, r2, r0
   36bc0:	2000      	movs	r0, #0
   36bc2:	e77a      	b.n	36aba <__aeabi_dmul+0x7a>
   36bc4:	2501      	movs	r5, #1
   36bc6:	9b01      	ldr	r3, [sp, #4]
   36bc8:	4c14      	ldr	r4, [pc, #80]	; (36c1c <__aeabi_dmul+0x1dc>)
   36bca:	401d      	ands	r5, r3
   36bcc:	2300      	movs	r3, #0
   36bce:	2200      	movs	r2, #0
   36bd0:	4699      	mov	r9, r3
   36bd2:	e79c      	b.n	36b0e <__aeabi_dmul+0xce>
   36bd4:	2400      	movs	r4, #0
   36bd6:	2200      	movs	r2, #0
   36bd8:	2001      	movs	r0, #1
   36bda:	e76e      	b.n	36aba <__aeabi_dmul+0x7a>
   36bdc:	4653      	mov	r3, sl
   36bde:	2003      	movs	r0, #3
   36be0:	e76b      	b.n	36aba <__aeabi_dmul+0x7a>
   36be2:	2300      	movs	r3, #0
   36be4:	469b      	mov	fp, r3
   36be6:	3301      	adds	r3, #1
   36be8:	2704      	movs	r7, #4
   36bea:	2600      	movs	r6, #0
   36bec:	9302      	str	r3, [sp, #8]
   36bee:	e74c      	b.n	36a8a <__aeabi_dmul+0x4a>
   36bf0:	2303      	movs	r3, #3
   36bf2:	4681      	mov	r9, r0
   36bf4:	270c      	movs	r7, #12
   36bf6:	9302      	str	r3, [sp, #8]
   36bf8:	e747      	b.n	36a8a <__aeabi_dmul+0x4a>
   36bfa:	2280      	movs	r2, #128	; 0x80
   36bfc:	2300      	movs	r3, #0
   36bfe:	2500      	movs	r5, #0
   36c00:	0312      	lsls	r2, r2, #12
   36c02:	4699      	mov	r9, r3
   36c04:	4c05      	ldr	r4, [pc, #20]	; (36c1c <__aeabi_dmul+0x1dc>)
   36c06:	e782      	b.n	36b0e <__aeabi_dmul+0xce>
   36c08:	465c      	mov	r4, fp
   36c0a:	464b      	mov	r3, r9
   36c0c:	9802      	ldr	r0, [sp, #8]
   36c0e:	e76f      	b.n	36af0 <__aeabi_dmul+0xb0>
   36c10:	465c      	mov	r4, fp
   36c12:	464b      	mov	r3, r9
   36c14:	9501      	str	r5, [sp, #4]
   36c16:	9802      	ldr	r0, [sp, #8]
   36c18:	e76a      	b.n	36af0 <__aeabi_dmul+0xb0>
   36c1a:	46c0      	nop			; (mov r8, r8)
   36c1c:	000007ff 	.word	0x000007ff
   36c20:	fffffc01 	.word	0xfffffc01
   36c24:	0003d2f4 	.word	0x0003d2f4
   36c28:	800fffff 	.word	0x800fffff
   36c2c:	fffffc0d 	.word	0xfffffc0d
   36c30:	464a      	mov	r2, r9
   36c32:	4649      	mov	r1, r9
   36c34:	0c17      	lsrs	r7, r2, #16
   36c36:	0c1a      	lsrs	r2, r3, #16
   36c38:	041b      	lsls	r3, r3, #16
   36c3a:	0c1b      	lsrs	r3, r3, #16
   36c3c:	0408      	lsls	r0, r1, #16
   36c3e:	0019      	movs	r1, r3
   36c40:	0c00      	lsrs	r0, r0, #16
   36c42:	4341      	muls	r1, r0
   36c44:	0015      	movs	r5, r2
   36c46:	4688      	mov	r8, r1
   36c48:	0019      	movs	r1, r3
   36c4a:	437d      	muls	r5, r7
   36c4c:	4379      	muls	r1, r7
   36c4e:	9503      	str	r5, [sp, #12]
   36c50:	4689      	mov	r9, r1
   36c52:	0029      	movs	r1, r5
   36c54:	0015      	movs	r5, r2
   36c56:	4345      	muls	r5, r0
   36c58:	444d      	add	r5, r9
   36c5a:	9502      	str	r5, [sp, #8]
   36c5c:	4645      	mov	r5, r8
   36c5e:	0c2d      	lsrs	r5, r5, #16
   36c60:	46aa      	mov	sl, r5
   36c62:	9d02      	ldr	r5, [sp, #8]
   36c64:	4455      	add	r5, sl
   36c66:	45a9      	cmp	r9, r5
   36c68:	d906      	bls.n	36c78 <__aeabi_dmul+0x238>
   36c6a:	468a      	mov	sl, r1
   36c6c:	2180      	movs	r1, #128	; 0x80
   36c6e:	0249      	lsls	r1, r1, #9
   36c70:	4689      	mov	r9, r1
   36c72:	44ca      	add	sl, r9
   36c74:	4651      	mov	r1, sl
   36c76:	9103      	str	r1, [sp, #12]
   36c78:	0c29      	lsrs	r1, r5, #16
   36c7a:	9104      	str	r1, [sp, #16]
   36c7c:	4641      	mov	r1, r8
   36c7e:	0409      	lsls	r1, r1, #16
   36c80:	042d      	lsls	r5, r5, #16
   36c82:	0c09      	lsrs	r1, r1, #16
   36c84:	4688      	mov	r8, r1
   36c86:	0029      	movs	r1, r5
   36c88:	0c25      	lsrs	r5, r4, #16
   36c8a:	0424      	lsls	r4, r4, #16
   36c8c:	4441      	add	r1, r8
   36c8e:	0c24      	lsrs	r4, r4, #16
   36c90:	9105      	str	r1, [sp, #20]
   36c92:	0021      	movs	r1, r4
   36c94:	4341      	muls	r1, r0
   36c96:	4688      	mov	r8, r1
   36c98:	0021      	movs	r1, r4
   36c9a:	4379      	muls	r1, r7
   36c9c:	468a      	mov	sl, r1
   36c9e:	4368      	muls	r0, r5
   36ca0:	4641      	mov	r1, r8
   36ca2:	4450      	add	r0, sl
   36ca4:	4681      	mov	r9, r0
   36ca6:	0c08      	lsrs	r0, r1, #16
   36ca8:	4448      	add	r0, r9
   36caa:	436f      	muls	r7, r5
   36cac:	4582      	cmp	sl, r0
   36cae:	d903      	bls.n	36cb8 <__aeabi_dmul+0x278>
   36cb0:	2180      	movs	r1, #128	; 0x80
   36cb2:	0249      	lsls	r1, r1, #9
   36cb4:	4689      	mov	r9, r1
   36cb6:	444f      	add	r7, r9
   36cb8:	0c01      	lsrs	r1, r0, #16
   36cba:	4689      	mov	r9, r1
   36cbc:	0039      	movs	r1, r7
   36cbe:	4449      	add	r1, r9
   36cc0:	9102      	str	r1, [sp, #8]
   36cc2:	4641      	mov	r1, r8
   36cc4:	040f      	lsls	r7, r1, #16
   36cc6:	9904      	ldr	r1, [sp, #16]
   36cc8:	0c3f      	lsrs	r7, r7, #16
   36cca:	4688      	mov	r8, r1
   36ccc:	0400      	lsls	r0, r0, #16
   36cce:	19c0      	adds	r0, r0, r7
   36cd0:	4480      	add	r8, r0
   36cd2:	4641      	mov	r1, r8
   36cd4:	9104      	str	r1, [sp, #16]
   36cd6:	4659      	mov	r1, fp
   36cd8:	0c0f      	lsrs	r7, r1, #16
   36cda:	0409      	lsls	r1, r1, #16
   36cdc:	0c09      	lsrs	r1, r1, #16
   36cde:	4688      	mov	r8, r1
   36ce0:	4359      	muls	r1, r3
   36ce2:	468a      	mov	sl, r1
   36ce4:	0039      	movs	r1, r7
   36ce6:	4351      	muls	r1, r2
   36ce8:	4689      	mov	r9, r1
   36cea:	4641      	mov	r1, r8
   36cec:	434a      	muls	r2, r1
   36cee:	4651      	mov	r1, sl
   36cf0:	0c09      	lsrs	r1, r1, #16
   36cf2:	468b      	mov	fp, r1
   36cf4:	437b      	muls	r3, r7
   36cf6:	18d2      	adds	r2, r2, r3
   36cf8:	445a      	add	r2, fp
   36cfa:	4293      	cmp	r3, r2
   36cfc:	d903      	bls.n	36d06 <__aeabi_dmul+0x2c6>
   36cfe:	2380      	movs	r3, #128	; 0x80
   36d00:	025b      	lsls	r3, r3, #9
   36d02:	469b      	mov	fp, r3
   36d04:	44d9      	add	r9, fp
   36d06:	4651      	mov	r1, sl
   36d08:	0409      	lsls	r1, r1, #16
   36d0a:	0c09      	lsrs	r1, r1, #16
   36d0c:	468a      	mov	sl, r1
   36d0e:	4641      	mov	r1, r8
   36d10:	4361      	muls	r1, r4
   36d12:	437c      	muls	r4, r7
   36d14:	0c13      	lsrs	r3, r2, #16
   36d16:	0412      	lsls	r2, r2, #16
   36d18:	444b      	add	r3, r9
   36d1a:	4452      	add	r2, sl
   36d1c:	46a1      	mov	r9, r4
   36d1e:	468a      	mov	sl, r1
   36d20:	003c      	movs	r4, r7
   36d22:	4641      	mov	r1, r8
   36d24:	436c      	muls	r4, r5
   36d26:	434d      	muls	r5, r1
   36d28:	4651      	mov	r1, sl
   36d2a:	444d      	add	r5, r9
   36d2c:	0c0f      	lsrs	r7, r1, #16
   36d2e:	197d      	adds	r5, r7, r5
   36d30:	45a9      	cmp	r9, r5
   36d32:	d903      	bls.n	36d3c <__aeabi_dmul+0x2fc>
   36d34:	2180      	movs	r1, #128	; 0x80
   36d36:	0249      	lsls	r1, r1, #9
   36d38:	4688      	mov	r8, r1
   36d3a:	4444      	add	r4, r8
   36d3c:	9f04      	ldr	r7, [sp, #16]
   36d3e:	9903      	ldr	r1, [sp, #12]
   36d40:	46b8      	mov	r8, r7
   36d42:	4441      	add	r1, r8
   36d44:	468b      	mov	fp, r1
   36d46:	4583      	cmp	fp, r0
   36d48:	4180      	sbcs	r0, r0
   36d4a:	4241      	negs	r1, r0
   36d4c:	4688      	mov	r8, r1
   36d4e:	4651      	mov	r1, sl
   36d50:	0408      	lsls	r0, r1, #16
   36d52:	042f      	lsls	r7, r5, #16
   36d54:	0c00      	lsrs	r0, r0, #16
   36d56:	183f      	adds	r7, r7, r0
   36d58:	4658      	mov	r0, fp
   36d5a:	9902      	ldr	r1, [sp, #8]
   36d5c:	1810      	adds	r0, r2, r0
   36d5e:	4689      	mov	r9, r1
   36d60:	4290      	cmp	r0, r2
   36d62:	4192      	sbcs	r2, r2
   36d64:	444f      	add	r7, r9
   36d66:	46ba      	mov	sl, r7
   36d68:	4252      	negs	r2, r2
   36d6a:	4699      	mov	r9, r3
   36d6c:	4693      	mov	fp, r2
   36d6e:	44c2      	add	sl, r8
   36d70:	44d1      	add	r9, sl
   36d72:	44cb      	add	fp, r9
   36d74:	428f      	cmp	r7, r1
   36d76:	41bf      	sbcs	r7, r7
   36d78:	45c2      	cmp	sl, r8
   36d7a:	4189      	sbcs	r1, r1
   36d7c:	4599      	cmp	r9, r3
   36d7e:	419b      	sbcs	r3, r3
   36d80:	4593      	cmp	fp, r2
   36d82:	4192      	sbcs	r2, r2
   36d84:	427f      	negs	r7, r7
   36d86:	4249      	negs	r1, r1
   36d88:	0c2d      	lsrs	r5, r5, #16
   36d8a:	4252      	negs	r2, r2
   36d8c:	430f      	orrs	r7, r1
   36d8e:	425b      	negs	r3, r3
   36d90:	4313      	orrs	r3, r2
   36d92:	197f      	adds	r7, r7, r5
   36d94:	18ff      	adds	r7, r7, r3
   36d96:	465b      	mov	r3, fp
   36d98:	193c      	adds	r4, r7, r4
   36d9a:	0ddb      	lsrs	r3, r3, #23
   36d9c:	9a05      	ldr	r2, [sp, #20]
   36d9e:	0264      	lsls	r4, r4, #9
   36da0:	431c      	orrs	r4, r3
   36da2:	0243      	lsls	r3, r0, #9
   36da4:	4313      	orrs	r3, r2
   36da6:	1e5d      	subs	r5, r3, #1
   36da8:	41ab      	sbcs	r3, r5
   36daa:	465a      	mov	r2, fp
   36dac:	0dc0      	lsrs	r0, r0, #23
   36dae:	4303      	orrs	r3, r0
   36db0:	0252      	lsls	r2, r2, #9
   36db2:	4313      	orrs	r3, r2
   36db4:	01e2      	lsls	r2, r4, #7
   36db6:	d556      	bpl.n	36e66 <__aeabi_dmul+0x426>
   36db8:	2001      	movs	r0, #1
   36dba:	085a      	lsrs	r2, r3, #1
   36dbc:	4003      	ands	r3, r0
   36dbe:	4313      	orrs	r3, r2
   36dc0:	07e2      	lsls	r2, r4, #31
   36dc2:	4313      	orrs	r3, r2
   36dc4:	0864      	lsrs	r4, r4, #1
   36dc6:	485a      	ldr	r0, [pc, #360]	; (36f30 <__aeabi_dmul+0x4f0>)
   36dc8:	4460      	add	r0, ip
   36dca:	2800      	cmp	r0, #0
   36dcc:	dd4d      	ble.n	36e6a <__aeabi_dmul+0x42a>
   36dce:	075a      	lsls	r2, r3, #29
   36dd0:	d009      	beq.n	36de6 <__aeabi_dmul+0x3a6>
   36dd2:	220f      	movs	r2, #15
   36dd4:	401a      	ands	r2, r3
   36dd6:	2a04      	cmp	r2, #4
   36dd8:	d005      	beq.n	36de6 <__aeabi_dmul+0x3a6>
   36dda:	1d1a      	adds	r2, r3, #4
   36ddc:	429a      	cmp	r2, r3
   36dde:	419b      	sbcs	r3, r3
   36de0:	425b      	negs	r3, r3
   36de2:	18e4      	adds	r4, r4, r3
   36de4:	0013      	movs	r3, r2
   36de6:	01e2      	lsls	r2, r4, #7
   36de8:	d504      	bpl.n	36df4 <__aeabi_dmul+0x3b4>
   36dea:	2080      	movs	r0, #128	; 0x80
   36dec:	4a51      	ldr	r2, [pc, #324]	; (36f34 <__aeabi_dmul+0x4f4>)
   36dee:	00c0      	lsls	r0, r0, #3
   36df0:	4014      	ands	r4, r2
   36df2:	4460      	add	r0, ip
   36df4:	4a50      	ldr	r2, [pc, #320]	; (36f38 <__aeabi_dmul+0x4f8>)
   36df6:	4290      	cmp	r0, r2
   36df8:	dd00      	ble.n	36dfc <__aeabi_dmul+0x3bc>
   36dfa:	e6e3      	b.n	36bc4 <__aeabi_dmul+0x184>
   36dfc:	2501      	movs	r5, #1
   36dfe:	08db      	lsrs	r3, r3, #3
   36e00:	0762      	lsls	r2, r4, #29
   36e02:	431a      	orrs	r2, r3
   36e04:	0264      	lsls	r4, r4, #9
   36e06:	9b01      	ldr	r3, [sp, #4]
   36e08:	4691      	mov	r9, r2
   36e0a:	0b22      	lsrs	r2, r4, #12
   36e0c:	0544      	lsls	r4, r0, #21
   36e0e:	0d64      	lsrs	r4, r4, #21
   36e10:	401d      	ands	r5, r3
   36e12:	e67c      	b.n	36b0e <__aeabi_dmul+0xce>
   36e14:	2280      	movs	r2, #128	; 0x80
   36e16:	4659      	mov	r1, fp
   36e18:	0312      	lsls	r2, r2, #12
   36e1a:	4211      	tst	r1, r2
   36e1c:	d008      	beq.n	36e30 <__aeabi_dmul+0x3f0>
   36e1e:	4214      	tst	r4, r2
   36e20:	d106      	bne.n	36e30 <__aeabi_dmul+0x3f0>
   36e22:	4322      	orrs	r2, r4
   36e24:	0312      	lsls	r2, r2, #12
   36e26:	0b12      	lsrs	r2, r2, #12
   36e28:	4645      	mov	r5, r8
   36e2a:	4699      	mov	r9, r3
   36e2c:	4c43      	ldr	r4, [pc, #268]	; (36f3c <__aeabi_dmul+0x4fc>)
   36e2e:	e66e      	b.n	36b0e <__aeabi_dmul+0xce>
   36e30:	465b      	mov	r3, fp
   36e32:	431a      	orrs	r2, r3
   36e34:	0312      	lsls	r2, r2, #12
   36e36:	0b12      	lsrs	r2, r2, #12
   36e38:	4c40      	ldr	r4, [pc, #256]	; (36f3c <__aeabi_dmul+0x4fc>)
   36e3a:	e668      	b.n	36b0e <__aeabi_dmul+0xce>
   36e3c:	0003      	movs	r3, r0
   36e3e:	4654      	mov	r4, sl
   36e40:	3b28      	subs	r3, #40	; 0x28
   36e42:	409c      	lsls	r4, r3
   36e44:	2300      	movs	r3, #0
   36e46:	e6b9      	b.n	36bbc <__aeabi_dmul+0x17c>
   36e48:	f000 fbfc 	bl	37644 <__clzsi2>
   36e4c:	3020      	adds	r0, #32
   36e4e:	e6a6      	b.n	36b9e <__aeabi_dmul+0x15e>
   36e50:	0003      	movs	r3, r0
   36e52:	3b28      	subs	r3, #40	; 0x28
   36e54:	409f      	lsls	r7, r3
   36e56:	2300      	movs	r3, #0
   36e58:	46bb      	mov	fp, r7
   36e5a:	4699      	mov	r9, r3
   36e5c:	e68a      	b.n	36b74 <__aeabi_dmul+0x134>
   36e5e:	f000 fbf1 	bl	37644 <__clzsi2>
   36e62:	3020      	adds	r0, #32
   36e64:	e674      	b.n	36b50 <__aeabi_dmul+0x110>
   36e66:	46b4      	mov	ip, r6
   36e68:	e7ad      	b.n	36dc6 <__aeabi_dmul+0x386>
   36e6a:	2501      	movs	r5, #1
   36e6c:	1a2a      	subs	r2, r5, r0
   36e6e:	2a38      	cmp	r2, #56	; 0x38
   36e70:	dd06      	ble.n	36e80 <__aeabi_dmul+0x440>
   36e72:	9b01      	ldr	r3, [sp, #4]
   36e74:	2400      	movs	r4, #0
   36e76:	401d      	ands	r5, r3
   36e78:	2300      	movs	r3, #0
   36e7a:	2200      	movs	r2, #0
   36e7c:	4699      	mov	r9, r3
   36e7e:	e646      	b.n	36b0e <__aeabi_dmul+0xce>
   36e80:	2a1f      	cmp	r2, #31
   36e82:	dc21      	bgt.n	36ec8 <__aeabi_dmul+0x488>
   36e84:	2520      	movs	r5, #32
   36e86:	0020      	movs	r0, r4
   36e88:	1aad      	subs	r5, r5, r2
   36e8a:	001e      	movs	r6, r3
   36e8c:	40ab      	lsls	r3, r5
   36e8e:	40a8      	lsls	r0, r5
   36e90:	40d6      	lsrs	r6, r2
   36e92:	1e5d      	subs	r5, r3, #1
   36e94:	41ab      	sbcs	r3, r5
   36e96:	4330      	orrs	r0, r6
   36e98:	4318      	orrs	r0, r3
   36e9a:	40d4      	lsrs	r4, r2
   36e9c:	0743      	lsls	r3, r0, #29
   36e9e:	d009      	beq.n	36eb4 <__aeabi_dmul+0x474>
   36ea0:	230f      	movs	r3, #15
   36ea2:	4003      	ands	r3, r0
   36ea4:	2b04      	cmp	r3, #4
   36ea6:	d005      	beq.n	36eb4 <__aeabi_dmul+0x474>
   36ea8:	0003      	movs	r3, r0
   36eaa:	1d18      	adds	r0, r3, #4
   36eac:	4298      	cmp	r0, r3
   36eae:	419b      	sbcs	r3, r3
   36eb0:	425b      	negs	r3, r3
   36eb2:	18e4      	adds	r4, r4, r3
   36eb4:	0223      	lsls	r3, r4, #8
   36eb6:	d521      	bpl.n	36efc <__aeabi_dmul+0x4bc>
   36eb8:	2501      	movs	r5, #1
   36eba:	9b01      	ldr	r3, [sp, #4]
   36ebc:	2401      	movs	r4, #1
   36ebe:	401d      	ands	r5, r3
   36ec0:	2300      	movs	r3, #0
   36ec2:	2200      	movs	r2, #0
   36ec4:	4699      	mov	r9, r3
   36ec6:	e622      	b.n	36b0e <__aeabi_dmul+0xce>
   36ec8:	251f      	movs	r5, #31
   36eca:	0021      	movs	r1, r4
   36ecc:	426d      	negs	r5, r5
   36ece:	1a28      	subs	r0, r5, r0
   36ed0:	40c1      	lsrs	r1, r0
   36ed2:	0008      	movs	r0, r1
   36ed4:	2a20      	cmp	r2, #32
   36ed6:	d01d      	beq.n	36f14 <__aeabi_dmul+0x4d4>
   36ed8:	355f      	adds	r5, #95	; 0x5f
   36eda:	1aaa      	subs	r2, r5, r2
   36edc:	4094      	lsls	r4, r2
   36ede:	4323      	orrs	r3, r4
   36ee0:	1e5c      	subs	r4, r3, #1
   36ee2:	41a3      	sbcs	r3, r4
   36ee4:	2507      	movs	r5, #7
   36ee6:	4303      	orrs	r3, r0
   36ee8:	401d      	ands	r5, r3
   36eea:	2200      	movs	r2, #0
   36eec:	2d00      	cmp	r5, #0
   36eee:	d009      	beq.n	36f04 <__aeabi_dmul+0x4c4>
   36ef0:	220f      	movs	r2, #15
   36ef2:	2400      	movs	r4, #0
   36ef4:	401a      	ands	r2, r3
   36ef6:	0018      	movs	r0, r3
   36ef8:	2a04      	cmp	r2, #4
   36efa:	d1d6      	bne.n	36eaa <__aeabi_dmul+0x46a>
   36efc:	0003      	movs	r3, r0
   36efe:	0765      	lsls	r5, r4, #29
   36f00:	0264      	lsls	r4, r4, #9
   36f02:	0b22      	lsrs	r2, r4, #12
   36f04:	08db      	lsrs	r3, r3, #3
   36f06:	432b      	orrs	r3, r5
   36f08:	2501      	movs	r5, #1
   36f0a:	4699      	mov	r9, r3
   36f0c:	9b01      	ldr	r3, [sp, #4]
   36f0e:	2400      	movs	r4, #0
   36f10:	401d      	ands	r5, r3
   36f12:	e5fc      	b.n	36b0e <__aeabi_dmul+0xce>
   36f14:	2400      	movs	r4, #0
   36f16:	e7e2      	b.n	36ede <__aeabi_dmul+0x49e>
   36f18:	2280      	movs	r2, #128	; 0x80
   36f1a:	2501      	movs	r5, #1
   36f1c:	0312      	lsls	r2, r2, #12
   36f1e:	4322      	orrs	r2, r4
   36f20:	9901      	ldr	r1, [sp, #4]
   36f22:	0312      	lsls	r2, r2, #12
   36f24:	0b12      	lsrs	r2, r2, #12
   36f26:	400d      	ands	r5, r1
   36f28:	4699      	mov	r9, r3
   36f2a:	4c04      	ldr	r4, [pc, #16]	; (36f3c <__aeabi_dmul+0x4fc>)
   36f2c:	e5ef      	b.n	36b0e <__aeabi_dmul+0xce>
   36f2e:	46c0      	nop			; (mov r8, r8)
   36f30:	000003ff 	.word	0x000003ff
   36f34:	feffffff 	.word	0xfeffffff
   36f38:	000007fe 	.word	0x000007fe
   36f3c:	000007ff 	.word	0x000007ff

00036f40 <__aeabi_dsub>:
   36f40:	b5f0      	push	{r4, r5, r6, r7, lr}
   36f42:	4646      	mov	r6, r8
   36f44:	46d6      	mov	lr, sl
   36f46:	464f      	mov	r7, r9
   36f48:	030c      	lsls	r4, r1, #12
   36f4a:	b5c0      	push	{r6, r7, lr}
   36f4c:	0fcd      	lsrs	r5, r1, #31
   36f4e:	004e      	lsls	r6, r1, #1
   36f50:	0a61      	lsrs	r1, r4, #9
   36f52:	0f44      	lsrs	r4, r0, #29
   36f54:	430c      	orrs	r4, r1
   36f56:	00c1      	lsls	r1, r0, #3
   36f58:	0058      	lsls	r0, r3, #1
   36f5a:	0d40      	lsrs	r0, r0, #21
   36f5c:	4684      	mov	ip, r0
   36f5e:	468a      	mov	sl, r1
   36f60:	000f      	movs	r7, r1
   36f62:	0319      	lsls	r1, r3, #12
   36f64:	0f50      	lsrs	r0, r2, #29
   36f66:	0a49      	lsrs	r1, r1, #9
   36f68:	4301      	orrs	r1, r0
   36f6a:	48c6      	ldr	r0, [pc, #792]	; (37284 <__aeabi_dsub+0x344>)
   36f6c:	0d76      	lsrs	r6, r6, #21
   36f6e:	46a8      	mov	r8, r5
   36f70:	0fdb      	lsrs	r3, r3, #31
   36f72:	00d2      	lsls	r2, r2, #3
   36f74:	4584      	cmp	ip, r0
   36f76:	d100      	bne.n	36f7a <__aeabi_dsub+0x3a>
   36f78:	e0d8      	b.n	3712c <__aeabi_dsub+0x1ec>
   36f7a:	2001      	movs	r0, #1
   36f7c:	4043      	eors	r3, r0
   36f7e:	42ab      	cmp	r3, r5
   36f80:	d100      	bne.n	36f84 <__aeabi_dsub+0x44>
   36f82:	e0a6      	b.n	370d2 <__aeabi_dsub+0x192>
   36f84:	4660      	mov	r0, ip
   36f86:	1a35      	subs	r5, r6, r0
   36f88:	2d00      	cmp	r5, #0
   36f8a:	dc00      	bgt.n	36f8e <__aeabi_dsub+0x4e>
   36f8c:	e105      	b.n	3719a <__aeabi_dsub+0x25a>
   36f8e:	2800      	cmp	r0, #0
   36f90:	d110      	bne.n	36fb4 <__aeabi_dsub+0x74>
   36f92:	000b      	movs	r3, r1
   36f94:	4313      	orrs	r3, r2
   36f96:	d100      	bne.n	36f9a <__aeabi_dsub+0x5a>
   36f98:	e0d7      	b.n	3714a <__aeabi_dsub+0x20a>
   36f9a:	1e6b      	subs	r3, r5, #1
   36f9c:	2b00      	cmp	r3, #0
   36f9e:	d000      	beq.n	36fa2 <__aeabi_dsub+0x62>
   36fa0:	e14b      	b.n	3723a <__aeabi_dsub+0x2fa>
   36fa2:	4653      	mov	r3, sl
   36fa4:	1a9f      	subs	r7, r3, r2
   36fa6:	45ba      	cmp	sl, r7
   36fa8:	4180      	sbcs	r0, r0
   36faa:	1a64      	subs	r4, r4, r1
   36fac:	4240      	negs	r0, r0
   36fae:	1a24      	subs	r4, r4, r0
   36fb0:	2601      	movs	r6, #1
   36fb2:	e01e      	b.n	36ff2 <__aeabi_dsub+0xb2>
   36fb4:	4bb3      	ldr	r3, [pc, #716]	; (37284 <__aeabi_dsub+0x344>)
   36fb6:	429e      	cmp	r6, r3
   36fb8:	d048      	beq.n	3704c <__aeabi_dsub+0x10c>
   36fba:	2380      	movs	r3, #128	; 0x80
   36fbc:	041b      	lsls	r3, r3, #16
   36fbe:	4319      	orrs	r1, r3
   36fc0:	2d38      	cmp	r5, #56	; 0x38
   36fc2:	dd00      	ble.n	36fc6 <__aeabi_dsub+0x86>
   36fc4:	e119      	b.n	371fa <__aeabi_dsub+0x2ba>
   36fc6:	2d1f      	cmp	r5, #31
   36fc8:	dd00      	ble.n	36fcc <__aeabi_dsub+0x8c>
   36fca:	e14c      	b.n	37266 <__aeabi_dsub+0x326>
   36fcc:	2320      	movs	r3, #32
   36fce:	000f      	movs	r7, r1
   36fd0:	1b5b      	subs	r3, r3, r5
   36fd2:	0010      	movs	r0, r2
   36fd4:	409a      	lsls	r2, r3
   36fd6:	409f      	lsls	r7, r3
   36fd8:	40e8      	lsrs	r0, r5
   36fda:	1e53      	subs	r3, r2, #1
   36fdc:	419a      	sbcs	r2, r3
   36fde:	40e9      	lsrs	r1, r5
   36fe0:	4307      	orrs	r7, r0
   36fe2:	4317      	orrs	r7, r2
   36fe4:	4653      	mov	r3, sl
   36fe6:	1bdf      	subs	r7, r3, r7
   36fe8:	1a61      	subs	r1, r4, r1
   36fea:	45ba      	cmp	sl, r7
   36fec:	41a4      	sbcs	r4, r4
   36fee:	4264      	negs	r4, r4
   36ff0:	1b0c      	subs	r4, r1, r4
   36ff2:	0223      	lsls	r3, r4, #8
   36ff4:	d400      	bmi.n	36ff8 <__aeabi_dsub+0xb8>
   36ff6:	e0c5      	b.n	37184 <__aeabi_dsub+0x244>
   36ff8:	0264      	lsls	r4, r4, #9
   36ffa:	0a65      	lsrs	r5, r4, #9
   36ffc:	2d00      	cmp	r5, #0
   36ffe:	d100      	bne.n	37002 <__aeabi_dsub+0xc2>
   37000:	e0f6      	b.n	371f0 <__aeabi_dsub+0x2b0>
   37002:	0028      	movs	r0, r5
   37004:	f000 fb1e 	bl	37644 <__clzsi2>
   37008:	0003      	movs	r3, r0
   3700a:	3b08      	subs	r3, #8
   3700c:	2b1f      	cmp	r3, #31
   3700e:	dd00      	ble.n	37012 <__aeabi_dsub+0xd2>
   37010:	e0e9      	b.n	371e6 <__aeabi_dsub+0x2a6>
   37012:	2220      	movs	r2, #32
   37014:	003c      	movs	r4, r7
   37016:	1ad2      	subs	r2, r2, r3
   37018:	409d      	lsls	r5, r3
   3701a:	40d4      	lsrs	r4, r2
   3701c:	409f      	lsls	r7, r3
   3701e:	4325      	orrs	r5, r4
   37020:	429e      	cmp	r6, r3
   37022:	dd00      	ble.n	37026 <__aeabi_dsub+0xe6>
   37024:	e0db      	b.n	371de <__aeabi_dsub+0x29e>
   37026:	1b9e      	subs	r6, r3, r6
   37028:	1c73      	adds	r3, r6, #1
   3702a:	2b1f      	cmp	r3, #31
   3702c:	dd00      	ble.n	37030 <__aeabi_dsub+0xf0>
   3702e:	e10a      	b.n	37246 <__aeabi_dsub+0x306>
   37030:	2220      	movs	r2, #32
   37032:	0038      	movs	r0, r7
   37034:	1ad2      	subs	r2, r2, r3
   37036:	0029      	movs	r1, r5
   37038:	4097      	lsls	r7, r2
   3703a:	002c      	movs	r4, r5
   3703c:	4091      	lsls	r1, r2
   3703e:	40d8      	lsrs	r0, r3
   37040:	1e7a      	subs	r2, r7, #1
   37042:	4197      	sbcs	r7, r2
   37044:	40dc      	lsrs	r4, r3
   37046:	2600      	movs	r6, #0
   37048:	4301      	orrs	r1, r0
   3704a:	430f      	orrs	r7, r1
   3704c:	077b      	lsls	r3, r7, #29
   3704e:	d009      	beq.n	37064 <__aeabi_dsub+0x124>
   37050:	230f      	movs	r3, #15
   37052:	403b      	ands	r3, r7
   37054:	2b04      	cmp	r3, #4
   37056:	d005      	beq.n	37064 <__aeabi_dsub+0x124>
   37058:	1d3b      	adds	r3, r7, #4
   3705a:	42bb      	cmp	r3, r7
   3705c:	41bf      	sbcs	r7, r7
   3705e:	427f      	negs	r7, r7
   37060:	19e4      	adds	r4, r4, r7
   37062:	001f      	movs	r7, r3
   37064:	0223      	lsls	r3, r4, #8
   37066:	d525      	bpl.n	370b4 <__aeabi_dsub+0x174>
   37068:	4b86      	ldr	r3, [pc, #536]	; (37284 <__aeabi_dsub+0x344>)
   3706a:	3601      	adds	r6, #1
   3706c:	429e      	cmp	r6, r3
   3706e:	d100      	bne.n	37072 <__aeabi_dsub+0x132>
   37070:	e0af      	b.n	371d2 <__aeabi_dsub+0x292>
   37072:	4b85      	ldr	r3, [pc, #532]	; (37288 <__aeabi_dsub+0x348>)
   37074:	2501      	movs	r5, #1
   37076:	401c      	ands	r4, r3
   37078:	4643      	mov	r3, r8
   3707a:	0762      	lsls	r2, r4, #29
   3707c:	08ff      	lsrs	r7, r7, #3
   3707e:	0264      	lsls	r4, r4, #9
   37080:	0576      	lsls	r6, r6, #21
   37082:	4317      	orrs	r7, r2
   37084:	0b24      	lsrs	r4, r4, #12
   37086:	0d76      	lsrs	r6, r6, #21
   37088:	401d      	ands	r5, r3
   3708a:	2100      	movs	r1, #0
   3708c:	0324      	lsls	r4, r4, #12
   3708e:	0b23      	lsrs	r3, r4, #12
   37090:	0d0c      	lsrs	r4, r1, #20
   37092:	4a7e      	ldr	r2, [pc, #504]	; (3728c <__aeabi_dsub+0x34c>)
   37094:	0524      	lsls	r4, r4, #20
   37096:	431c      	orrs	r4, r3
   37098:	4014      	ands	r4, r2
   3709a:	0533      	lsls	r3, r6, #20
   3709c:	4323      	orrs	r3, r4
   3709e:	005b      	lsls	r3, r3, #1
   370a0:	07ed      	lsls	r5, r5, #31
   370a2:	085b      	lsrs	r3, r3, #1
   370a4:	432b      	orrs	r3, r5
   370a6:	0038      	movs	r0, r7
   370a8:	0019      	movs	r1, r3
   370aa:	bc1c      	pop	{r2, r3, r4}
   370ac:	4690      	mov	r8, r2
   370ae:	4699      	mov	r9, r3
   370b0:	46a2      	mov	sl, r4
   370b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   370b4:	2501      	movs	r5, #1
   370b6:	4643      	mov	r3, r8
   370b8:	0762      	lsls	r2, r4, #29
   370ba:	08ff      	lsrs	r7, r7, #3
   370bc:	4317      	orrs	r7, r2
   370be:	08e4      	lsrs	r4, r4, #3
   370c0:	401d      	ands	r5, r3
   370c2:	4b70      	ldr	r3, [pc, #448]	; (37284 <__aeabi_dsub+0x344>)
   370c4:	429e      	cmp	r6, r3
   370c6:	d036      	beq.n	37136 <__aeabi_dsub+0x1f6>
   370c8:	0324      	lsls	r4, r4, #12
   370ca:	0576      	lsls	r6, r6, #21
   370cc:	0b24      	lsrs	r4, r4, #12
   370ce:	0d76      	lsrs	r6, r6, #21
   370d0:	e7db      	b.n	3708a <__aeabi_dsub+0x14a>
   370d2:	4663      	mov	r3, ip
   370d4:	1af3      	subs	r3, r6, r3
   370d6:	2b00      	cmp	r3, #0
   370d8:	dc00      	bgt.n	370dc <__aeabi_dsub+0x19c>
   370da:	e094      	b.n	37206 <__aeabi_dsub+0x2c6>
   370dc:	4660      	mov	r0, ip
   370de:	2800      	cmp	r0, #0
   370e0:	d035      	beq.n	3714e <__aeabi_dsub+0x20e>
   370e2:	4868      	ldr	r0, [pc, #416]	; (37284 <__aeabi_dsub+0x344>)
   370e4:	4286      	cmp	r6, r0
   370e6:	d0b1      	beq.n	3704c <__aeabi_dsub+0x10c>
   370e8:	2780      	movs	r7, #128	; 0x80
   370ea:	043f      	lsls	r7, r7, #16
   370ec:	4339      	orrs	r1, r7
   370ee:	2b38      	cmp	r3, #56	; 0x38
   370f0:	dc00      	bgt.n	370f4 <__aeabi_dsub+0x1b4>
   370f2:	e0fd      	b.n	372f0 <__aeabi_dsub+0x3b0>
   370f4:	430a      	orrs	r2, r1
   370f6:	0017      	movs	r7, r2
   370f8:	2100      	movs	r1, #0
   370fa:	1e7a      	subs	r2, r7, #1
   370fc:	4197      	sbcs	r7, r2
   370fe:	4457      	add	r7, sl
   37100:	4557      	cmp	r7, sl
   37102:	4180      	sbcs	r0, r0
   37104:	1909      	adds	r1, r1, r4
   37106:	4244      	negs	r4, r0
   37108:	190c      	adds	r4, r1, r4
   3710a:	0223      	lsls	r3, r4, #8
   3710c:	d53a      	bpl.n	37184 <__aeabi_dsub+0x244>
   3710e:	4b5d      	ldr	r3, [pc, #372]	; (37284 <__aeabi_dsub+0x344>)
   37110:	3601      	adds	r6, #1
   37112:	429e      	cmp	r6, r3
   37114:	d100      	bne.n	37118 <__aeabi_dsub+0x1d8>
   37116:	e14b      	b.n	373b0 <__aeabi_dsub+0x470>
   37118:	2201      	movs	r2, #1
   3711a:	4b5b      	ldr	r3, [pc, #364]	; (37288 <__aeabi_dsub+0x348>)
   3711c:	401c      	ands	r4, r3
   3711e:	087b      	lsrs	r3, r7, #1
   37120:	4017      	ands	r7, r2
   37122:	431f      	orrs	r7, r3
   37124:	07e2      	lsls	r2, r4, #31
   37126:	4317      	orrs	r7, r2
   37128:	0864      	lsrs	r4, r4, #1
   3712a:	e78f      	b.n	3704c <__aeabi_dsub+0x10c>
   3712c:	0008      	movs	r0, r1
   3712e:	4310      	orrs	r0, r2
   37130:	d000      	beq.n	37134 <__aeabi_dsub+0x1f4>
   37132:	e724      	b.n	36f7e <__aeabi_dsub+0x3e>
   37134:	e721      	b.n	36f7a <__aeabi_dsub+0x3a>
   37136:	0023      	movs	r3, r4
   37138:	433b      	orrs	r3, r7
   3713a:	d100      	bne.n	3713e <__aeabi_dsub+0x1fe>
   3713c:	e1b9      	b.n	374b2 <__aeabi_dsub+0x572>
   3713e:	2280      	movs	r2, #128	; 0x80
   37140:	0312      	lsls	r2, r2, #12
   37142:	4314      	orrs	r4, r2
   37144:	0324      	lsls	r4, r4, #12
   37146:	0b24      	lsrs	r4, r4, #12
   37148:	e79f      	b.n	3708a <__aeabi_dsub+0x14a>
   3714a:	002e      	movs	r6, r5
   3714c:	e77e      	b.n	3704c <__aeabi_dsub+0x10c>
   3714e:	0008      	movs	r0, r1
   37150:	4310      	orrs	r0, r2
   37152:	d100      	bne.n	37156 <__aeabi_dsub+0x216>
   37154:	e0ca      	b.n	372ec <__aeabi_dsub+0x3ac>
   37156:	1e58      	subs	r0, r3, #1
   37158:	4684      	mov	ip, r0
   3715a:	2800      	cmp	r0, #0
   3715c:	d000      	beq.n	37160 <__aeabi_dsub+0x220>
   3715e:	e0e7      	b.n	37330 <__aeabi_dsub+0x3f0>
   37160:	4452      	add	r2, sl
   37162:	4552      	cmp	r2, sl
   37164:	4180      	sbcs	r0, r0
   37166:	1864      	adds	r4, r4, r1
   37168:	4240      	negs	r0, r0
   3716a:	1824      	adds	r4, r4, r0
   3716c:	0017      	movs	r7, r2
   3716e:	2601      	movs	r6, #1
   37170:	0223      	lsls	r3, r4, #8
   37172:	d507      	bpl.n	37184 <__aeabi_dsub+0x244>
   37174:	2602      	movs	r6, #2
   37176:	e7cf      	b.n	37118 <__aeabi_dsub+0x1d8>
   37178:	4664      	mov	r4, ip
   3717a:	432c      	orrs	r4, r5
   3717c:	d100      	bne.n	37180 <__aeabi_dsub+0x240>
   3717e:	e1b3      	b.n	374e8 <__aeabi_dsub+0x5a8>
   37180:	002c      	movs	r4, r5
   37182:	4667      	mov	r7, ip
   37184:	077b      	lsls	r3, r7, #29
   37186:	d000      	beq.n	3718a <__aeabi_dsub+0x24a>
   37188:	e762      	b.n	37050 <__aeabi_dsub+0x110>
   3718a:	0763      	lsls	r3, r4, #29
   3718c:	08ff      	lsrs	r7, r7, #3
   3718e:	431f      	orrs	r7, r3
   37190:	2501      	movs	r5, #1
   37192:	4643      	mov	r3, r8
   37194:	08e4      	lsrs	r4, r4, #3
   37196:	401d      	ands	r5, r3
   37198:	e793      	b.n	370c2 <__aeabi_dsub+0x182>
   3719a:	2d00      	cmp	r5, #0
   3719c:	d178      	bne.n	37290 <__aeabi_dsub+0x350>
   3719e:	1c75      	adds	r5, r6, #1
   371a0:	056d      	lsls	r5, r5, #21
   371a2:	0d6d      	lsrs	r5, r5, #21
   371a4:	2d01      	cmp	r5, #1
   371a6:	dc00      	bgt.n	371aa <__aeabi_dsub+0x26a>
   371a8:	e0f2      	b.n	37390 <__aeabi_dsub+0x450>
   371aa:	4650      	mov	r0, sl
   371ac:	1a80      	subs	r0, r0, r2
   371ae:	4582      	cmp	sl, r0
   371b0:	41bf      	sbcs	r7, r7
   371b2:	1a65      	subs	r5, r4, r1
   371b4:	427f      	negs	r7, r7
   371b6:	1bed      	subs	r5, r5, r7
   371b8:	4684      	mov	ip, r0
   371ba:	0228      	lsls	r0, r5, #8
   371bc:	d400      	bmi.n	371c0 <__aeabi_dsub+0x280>
   371be:	e08c      	b.n	372da <__aeabi_dsub+0x39a>
   371c0:	4650      	mov	r0, sl
   371c2:	1a17      	subs	r7, r2, r0
   371c4:	42ba      	cmp	r2, r7
   371c6:	4192      	sbcs	r2, r2
   371c8:	1b0c      	subs	r4, r1, r4
   371ca:	4255      	negs	r5, r2
   371cc:	1b65      	subs	r5, r4, r5
   371ce:	4698      	mov	r8, r3
   371d0:	e714      	b.n	36ffc <__aeabi_dsub+0xbc>
   371d2:	2501      	movs	r5, #1
   371d4:	4643      	mov	r3, r8
   371d6:	2400      	movs	r4, #0
   371d8:	401d      	ands	r5, r3
   371da:	2700      	movs	r7, #0
   371dc:	e755      	b.n	3708a <__aeabi_dsub+0x14a>
   371de:	4c2a      	ldr	r4, [pc, #168]	; (37288 <__aeabi_dsub+0x348>)
   371e0:	1af6      	subs	r6, r6, r3
   371e2:	402c      	ands	r4, r5
   371e4:	e732      	b.n	3704c <__aeabi_dsub+0x10c>
   371e6:	003d      	movs	r5, r7
   371e8:	3828      	subs	r0, #40	; 0x28
   371ea:	4085      	lsls	r5, r0
   371ec:	2700      	movs	r7, #0
   371ee:	e717      	b.n	37020 <__aeabi_dsub+0xe0>
   371f0:	0038      	movs	r0, r7
   371f2:	f000 fa27 	bl	37644 <__clzsi2>
   371f6:	3020      	adds	r0, #32
   371f8:	e706      	b.n	37008 <__aeabi_dsub+0xc8>
   371fa:	430a      	orrs	r2, r1
   371fc:	0017      	movs	r7, r2
   371fe:	2100      	movs	r1, #0
   37200:	1e7a      	subs	r2, r7, #1
   37202:	4197      	sbcs	r7, r2
   37204:	e6ee      	b.n	36fe4 <__aeabi_dsub+0xa4>
   37206:	2b00      	cmp	r3, #0
   37208:	d000      	beq.n	3720c <__aeabi_dsub+0x2cc>
   3720a:	e0e5      	b.n	373d8 <__aeabi_dsub+0x498>
   3720c:	1c73      	adds	r3, r6, #1
   3720e:	469c      	mov	ip, r3
   37210:	055b      	lsls	r3, r3, #21
   37212:	0d5b      	lsrs	r3, r3, #21
   37214:	2b01      	cmp	r3, #1
   37216:	dc00      	bgt.n	3721a <__aeabi_dsub+0x2da>
   37218:	e09f      	b.n	3735a <__aeabi_dsub+0x41a>
   3721a:	4b1a      	ldr	r3, [pc, #104]	; (37284 <__aeabi_dsub+0x344>)
   3721c:	459c      	cmp	ip, r3
   3721e:	d100      	bne.n	37222 <__aeabi_dsub+0x2e2>
   37220:	e0c5      	b.n	373ae <__aeabi_dsub+0x46e>
   37222:	4452      	add	r2, sl
   37224:	4552      	cmp	r2, sl
   37226:	4180      	sbcs	r0, r0
   37228:	1864      	adds	r4, r4, r1
   3722a:	4240      	negs	r0, r0
   3722c:	1824      	adds	r4, r4, r0
   3722e:	07e7      	lsls	r7, r4, #31
   37230:	0852      	lsrs	r2, r2, #1
   37232:	4317      	orrs	r7, r2
   37234:	0864      	lsrs	r4, r4, #1
   37236:	4666      	mov	r6, ip
   37238:	e708      	b.n	3704c <__aeabi_dsub+0x10c>
   3723a:	4812      	ldr	r0, [pc, #72]	; (37284 <__aeabi_dsub+0x344>)
   3723c:	4285      	cmp	r5, r0
   3723e:	d100      	bne.n	37242 <__aeabi_dsub+0x302>
   37240:	e085      	b.n	3734e <__aeabi_dsub+0x40e>
   37242:	001d      	movs	r5, r3
   37244:	e6bc      	b.n	36fc0 <__aeabi_dsub+0x80>
   37246:	0029      	movs	r1, r5
   37248:	3e1f      	subs	r6, #31
   3724a:	40f1      	lsrs	r1, r6
   3724c:	2b20      	cmp	r3, #32
   3724e:	d100      	bne.n	37252 <__aeabi_dsub+0x312>
   37250:	e07f      	b.n	37352 <__aeabi_dsub+0x412>
   37252:	2240      	movs	r2, #64	; 0x40
   37254:	1ad3      	subs	r3, r2, r3
   37256:	409d      	lsls	r5, r3
   37258:	432f      	orrs	r7, r5
   3725a:	1e7d      	subs	r5, r7, #1
   3725c:	41af      	sbcs	r7, r5
   3725e:	2400      	movs	r4, #0
   37260:	430f      	orrs	r7, r1
   37262:	2600      	movs	r6, #0
   37264:	e78e      	b.n	37184 <__aeabi_dsub+0x244>
   37266:	002b      	movs	r3, r5
   37268:	000f      	movs	r7, r1
   3726a:	3b20      	subs	r3, #32
   3726c:	40df      	lsrs	r7, r3
   3726e:	2d20      	cmp	r5, #32
   37270:	d071      	beq.n	37356 <__aeabi_dsub+0x416>
   37272:	2340      	movs	r3, #64	; 0x40
   37274:	1b5d      	subs	r5, r3, r5
   37276:	40a9      	lsls	r1, r5
   37278:	430a      	orrs	r2, r1
   3727a:	1e51      	subs	r1, r2, #1
   3727c:	418a      	sbcs	r2, r1
   3727e:	2100      	movs	r1, #0
   37280:	4317      	orrs	r7, r2
   37282:	e6af      	b.n	36fe4 <__aeabi_dsub+0xa4>
   37284:	000007ff 	.word	0x000007ff
   37288:	ff7fffff 	.word	0xff7fffff
   3728c:	800fffff 	.word	0x800fffff
   37290:	2e00      	cmp	r6, #0
   37292:	d03e      	beq.n	37312 <__aeabi_dsub+0x3d2>
   37294:	4eb3      	ldr	r6, [pc, #716]	; (37564 <__aeabi_dsub+0x624>)
   37296:	45b4      	cmp	ip, r6
   37298:	d045      	beq.n	37326 <__aeabi_dsub+0x3e6>
   3729a:	2680      	movs	r6, #128	; 0x80
   3729c:	0436      	lsls	r6, r6, #16
   3729e:	426d      	negs	r5, r5
   372a0:	4334      	orrs	r4, r6
   372a2:	2d38      	cmp	r5, #56	; 0x38
   372a4:	dd00      	ble.n	372a8 <__aeabi_dsub+0x368>
   372a6:	e0a8      	b.n	373fa <__aeabi_dsub+0x4ba>
   372a8:	2d1f      	cmp	r5, #31
   372aa:	dd00      	ble.n	372ae <__aeabi_dsub+0x36e>
   372ac:	e11f      	b.n	374ee <__aeabi_dsub+0x5ae>
   372ae:	2620      	movs	r6, #32
   372b0:	0027      	movs	r7, r4
   372b2:	4650      	mov	r0, sl
   372b4:	1b76      	subs	r6, r6, r5
   372b6:	40b7      	lsls	r7, r6
   372b8:	40e8      	lsrs	r0, r5
   372ba:	4307      	orrs	r7, r0
   372bc:	4650      	mov	r0, sl
   372be:	40b0      	lsls	r0, r6
   372c0:	1e46      	subs	r6, r0, #1
   372c2:	41b0      	sbcs	r0, r6
   372c4:	40ec      	lsrs	r4, r5
   372c6:	4338      	orrs	r0, r7
   372c8:	1a17      	subs	r7, r2, r0
   372ca:	42ba      	cmp	r2, r7
   372cc:	4192      	sbcs	r2, r2
   372ce:	1b0c      	subs	r4, r1, r4
   372d0:	4252      	negs	r2, r2
   372d2:	1aa4      	subs	r4, r4, r2
   372d4:	4666      	mov	r6, ip
   372d6:	4698      	mov	r8, r3
   372d8:	e68b      	b.n	36ff2 <__aeabi_dsub+0xb2>
   372da:	4664      	mov	r4, ip
   372dc:	4667      	mov	r7, ip
   372de:	432c      	orrs	r4, r5
   372e0:	d000      	beq.n	372e4 <__aeabi_dsub+0x3a4>
   372e2:	e68b      	b.n	36ffc <__aeabi_dsub+0xbc>
   372e4:	2500      	movs	r5, #0
   372e6:	2600      	movs	r6, #0
   372e8:	2700      	movs	r7, #0
   372ea:	e6ea      	b.n	370c2 <__aeabi_dsub+0x182>
   372ec:	001e      	movs	r6, r3
   372ee:	e6ad      	b.n	3704c <__aeabi_dsub+0x10c>
   372f0:	2b1f      	cmp	r3, #31
   372f2:	dc60      	bgt.n	373b6 <__aeabi_dsub+0x476>
   372f4:	2720      	movs	r7, #32
   372f6:	1af8      	subs	r0, r7, r3
   372f8:	000f      	movs	r7, r1
   372fa:	4684      	mov	ip, r0
   372fc:	4087      	lsls	r7, r0
   372fe:	0010      	movs	r0, r2
   37300:	40d8      	lsrs	r0, r3
   37302:	4307      	orrs	r7, r0
   37304:	4660      	mov	r0, ip
   37306:	4082      	lsls	r2, r0
   37308:	1e50      	subs	r0, r2, #1
   3730a:	4182      	sbcs	r2, r0
   3730c:	40d9      	lsrs	r1, r3
   3730e:	4317      	orrs	r7, r2
   37310:	e6f5      	b.n	370fe <__aeabi_dsub+0x1be>
   37312:	0026      	movs	r6, r4
   37314:	4650      	mov	r0, sl
   37316:	4306      	orrs	r6, r0
   37318:	d005      	beq.n	37326 <__aeabi_dsub+0x3e6>
   3731a:	43ed      	mvns	r5, r5
   3731c:	2d00      	cmp	r5, #0
   3731e:	d0d3      	beq.n	372c8 <__aeabi_dsub+0x388>
   37320:	4e90      	ldr	r6, [pc, #576]	; (37564 <__aeabi_dsub+0x624>)
   37322:	45b4      	cmp	ip, r6
   37324:	d1bd      	bne.n	372a2 <__aeabi_dsub+0x362>
   37326:	000c      	movs	r4, r1
   37328:	0017      	movs	r7, r2
   3732a:	4666      	mov	r6, ip
   3732c:	4698      	mov	r8, r3
   3732e:	e68d      	b.n	3704c <__aeabi_dsub+0x10c>
   37330:	488c      	ldr	r0, [pc, #560]	; (37564 <__aeabi_dsub+0x624>)
   37332:	4283      	cmp	r3, r0
   37334:	d00b      	beq.n	3734e <__aeabi_dsub+0x40e>
   37336:	4663      	mov	r3, ip
   37338:	e6d9      	b.n	370ee <__aeabi_dsub+0x1ae>
   3733a:	2d00      	cmp	r5, #0
   3733c:	d000      	beq.n	37340 <__aeabi_dsub+0x400>
   3733e:	e096      	b.n	3746e <__aeabi_dsub+0x52e>
   37340:	0008      	movs	r0, r1
   37342:	4310      	orrs	r0, r2
   37344:	d100      	bne.n	37348 <__aeabi_dsub+0x408>
   37346:	e0e2      	b.n	3750e <__aeabi_dsub+0x5ce>
   37348:	000c      	movs	r4, r1
   3734a:	0017      	movs	r7, r2
   3734c:	4698      	mov	r8, r3
   3734e:	4e85      	ldr	r6, [pc, #532]	; (37564 <__aeabi_dsub+0x624>)
   37350:	e67c      	b.n	3704c <__aeabi_dsub+0x10c>
   37352:	2500      	movs	r5, #0
   37354:	e780      	b.n	37258 <__aeabi_dsub+0x318>
   37356:	2100      	movs	r1, #0
   37358:	e78e      	b.n	37278 <__aeabi_dsub+0x338>
   3735a:	0023      	movs	r3, r4
   3735c:	4650      	mov	r0, sl
   3735e:	4303      	orrs	r3, r0
   37360:	2e00      	cmp	r6, #0
   37362:	d000      	beq.n	37366 <__aeabi_dsub+0x426>
   37364:	e0a8      	b.n	374b8 <__aeabi_dsub+0x578>
   37366:	2b00      	cmp	r3, #0
   37368:	d100      	bne.n	3736c <__aeabi_dsub+0x42c>
   3736a:	e0de      	b.n	3752a <__aeabi_dsub+0x5ea>
   3736c:	000b      	movs	r3, r1
   3736e:	4313      	orrs	r3, r2
   37370:	d100      	bne.n	37374 <__aeabi_dsub+0x434>
   37372:	e66b      	b.n	3704c <__aeabi_dsub+0x10c>
   37374:	4452      	add	r2, sl
   37376:	4552      	cmp	r2, sl
   37378:	4180      	sbcs	r0, r0
   3737a:	1864      	adds	r4, r4, r1
   3737c:	4240      	negs	r0, r0
   3737e:	1824      	adds	r4, r4, r0
   37380:	0017      	movs	r7, r2
   37382:	0223      	lsls	r3, r4, #8
   37384:	d400      	bmi.n	37388 <__aeabi_dsub+0x448>
   37386:	e6fd      	b.n	37184 <__aeabi_dsub+0x244>
   37388:	4b77      	ldr	r3, [pc, #476]	; (37568 <__aeabi_dsub+0x628>)
   3738a:	4666      	mov	r6, ip
   3738c:	401c      	ands	r4, r3
   3738e:	e65d      	b.n	3704c <__aeabi_dsub+0x10c>
   37390:	0025      	movs	r5, r4
   37392:	4650      	mov	r0, sl
   37394:	4305      	orrs	r5, r0
   37396:	2e00      	cmp	r6, #0
   37398:	d1cf      	bne.n	3733a <__aeabi_dsub+0x3fa>
   3739a:	2d00      	cmp	r5, #0
   3739c:	d14f      	bne.n	3743e <__aeabi_dsub+0x4fe>
   3739e:	000c      	movs	r4, r1
   373a0:	4314      	orrs	r4, r2
   373a2:	d100      	bne.n	373a6 <__aeabi_dsub+0x466>
   373a4:	e0a0      	b.n	374e8 <__aeabi_dsub+0x5a8>
   373a6:	000c      	movs	r4, r1
   373a8:	0017      	movs	r7, r2
   373aa:	4698      	mov	r8, r3
   373ac:	e64e      	b.n	3704c <__aeabi_dsub+0x10c>
   373ae:	4666      	mov	r6, ip
   373b0:	2400      	movs	r4, #0
   373b2:	2700      	movs	r7, #0
   373b4:	e685      	b.n	370c2 <__aeabi_dsub+0x182>
   373b6:	001f      	movs	r7, r3
   373b8:	0008      	movs	r0, r1
   373ba:	3f20      	subs	r7, #32
   373bc:	40f8      	lsrs	r0, r7
   373be:	0007      	movs	r7, r0
   373c0:	2b20      	cmp	r3, #32
   373c2:	d100      	bne.n	373c6 <__aeabi_dsub+0x486>
   373c4:	e08e      	b.n	374e4 <__aeabi_dsub+0x5a4>
   373c6:	2040      	movs	r0, #64	; 0x40
   373c8:	1ac3      	subs	r3, r0, r3
   373ca:	4099      	lsls	r1, r3
   373cc:	430a      	orrs	r2, r1
   373ce:	1e51      	subs	r1, r2, #1
   373d0:	418a      	sbcs	r2, r1
   373d2:	2100      	movs	r1, #0
   373d4:	4317      	orrs	r7, r2
   373d6:	e692      	b.n	370fe <__aeabi_dsub+0x1be>
   373d8:	2e00      	cmp	r6, #0
   373da:	d114      	bne.n	37406 <__aeabi_dsub+0x4c6>
   373dc:	0026      	movs	r6, r4
   373de:	4650      	mov	r0, sl
   373e0:	4306      	orrs	r6, r0
   373e2:	d062      	beq.n	374aa <__aeabi_dsub+0x56a>
   373e4:	43db      	mvns	r3, r3
   373e6:	2b00      	cmp	r3, #0
   373e8:	d15c      	bne.n	374a4 <__aeabi_dsub+0x564>
   373ea:	1887      	adds	r7, r0, r2
   373ec:	4297      	cmp	r7, r2
   373ee:	4192      	sbcs	r2, r2
   373f0:	1864      	adds	r4, r4, r1
   373f2:	4252      	negs	r2, r2
   373f4:	18a4      	adds	r4, r4, r2
   373f6:	4666      	mov	r6, ip
   373f8:	e687      	b.n	3710a <__aeabi_dsub+0x1ca>
   373fa:	4650      	mov	r0, sl
   373fc:	4320      	orrs	r0, r4
   373fe:	1e44      	subs	r4, r0, #1
   37400:	41a0      	sbcs	r0, r4
   37402:	2400      	movs	r4, #0
   37404:	e760      	b.n	372c8 <__aeabi_dsub+0x388>
   37406:	4e57      	ldr	r6, [pc, #348]	; (37564 <__aeabi_dsub+0x624>)
   37408:	45b4      	cmp	ip, r6
   3740a:	d04e      	beq.n	374aa <__aeabi_dsub+0x56a>
   3740c:	2680      	movs	r6, #128	; 0x80
   3740e:	0436      	lsls	r6, r6, #16
   37410:	425b      	negs	r3, r3
   37412:	4334      	orrs	r4, r6
   37414:	2b38      	cmp	r3, #56	; 0x38
   37416:	dd00      	ble.n	3741a <__aeabi_dsub+0x4da>
   37418:	e07f      	b.n	3751a <__aeabi_dsub+0x5da>
   3741a:	2b1f      	cmp	r3, #31
   3741c:	dd00      	ble.n	37420 <__aeabi_dsub+0x4e0>
   3741e:	e08b      	b.n	37538 <__aeabi_dsub+0x5f8>
   37420:	2620      	movs	r6, #32
   37422:	0027      	movs	r7, r4
   37424:	4650      	mov	r0, sl
   37426:	1af6      	subs	r6, r6, r3
   37428:	40b7      	lsls	r7, r6
   3742a:	40d8      	lsrs	r0, r3
   3742c:	4307      	orrs	r7, r0
   3742e:	4650      	mov	r0, sl
   37430:	40b0      	lsls	r0, r6
   37432:	1e46      	subs	r6, r0, #1
   37434:	41b0      	sbcs	r0, r6
   37436:	4307      	orrs	r7, r0
   37438:	40dc      	lsrs	r4, r3
   3743a:	18bf      	adds	r7, r7, r2
   3743c:	e7d6      	b.n	373ec <__aeabi_dsub+0x4ac>
   3743e:	000d      	movs	r5, r1
   37440:	4315      	orrs	r5, r2
   37442:	d100      	bne.n	37446 <__aeabi_dsub+0x506>
   37444:	e602      	b.n	3704c <__aeabi_dsub+0x10c>
   37446:	4650      	mov	r0, sl
   37448:	1a80      	subs	r0, r0, r2
   3744a:	4582      	cmp	sl, r0
   3744c:	41bf      	sbcs	r7, r7
   3744e:	1a65      	subs	r5, r4, r1
   37450:	427f      	negs	r7, r7
   37452:	1bed      	subs	r5, r5, r7
   37454:	4684      	mov	ip, r0
   37456:	0228      	lsls	r0, r5, #8
   37458:	d400      	bmi.n	3745c <__aeabi_dsub+0x51c>
   3745a:	e68d      	b.n	37178 <__aeabi_dsub+0x238>
   3745c:	4650      	mov	r0, sl
   3745e:	1a17      	subs	r7, r2, r0
   37460:	42ba      	cmp	r2, r7
   37462:	4192      	sbcs	r2, r2
   37464:	1b0c      	subs	r4, r1, r4
   37466:	4252      	negs	r2, r2
   37468:	1aa4      	subs	r4, r4, r2
   3746a:	4698      	mov	r8, r3
   3746c:	e5ee      	b.n	3704c <__aeabi_dsub+0x10c>
   3746e:	000d      	movs	r5, r1
   37470:	4315      	orrs	r5, r2
   37472:	d100      	bne.n	37476 <__aeabi_dsub+0x536>
   37474:	e76b      	b.n	3734e <__aeabi_dsub+0x40e>
   37476:	4650      	mov	r0, sl
   37478:	0767      	lsls	r7, r4, #29
   3747a:	08c0      	lsrs	r0, r0, #3
   3747c:	4307      	orrs	r7, r0
   3747e:	2080      	movs	r0, #128	; 0x80
   37480:	08e4      	lsrs	r4, r4, #3
   37482:	0300      	lsls	r0, r0, #12
   37484:	4204      	tst	r4, r0
   37486:	d007      	beq.n	37498 <__aeabi_dsub+0x558>
   37488:	08cd      	lsrs	r5, r1, #3
   3748a:	4205      	tst	r5, r0
   3748c:	d104      	bne.n	37498 <__aeabi_dsub+0x558>
   3748e:	002c      	movs	r4, r5
   37490:	4698      	mov	r8, r3
   37492:	08d7      	lsrs	r7, r2, #3
   37494:	0749      	lsls	r1, r1, #29
   37496:	430f      	orrs	r7, r1
   37498:	0f7b      	lsrs	r3, r7, #29
   3749a:	00e4      	lsls	r4, r4, #3
   3749c:	431c      	orrs	r4, r3
   3749e:	00ff      	lsls	r7, r7, #3
   374a0:	4e30      	ldr	r6, [pc, #192]	; (37564 <__aeabi_dsub+0x624>)
   374a2:	e5d3      	b.n	3704c <__aeabi_dsub+0x10c>
   374a4:	4e2f      	ldr	r6, [pc, #188]	; (37564 <__aeabi_dsub+0x624>)
   374a6:	45b4      	cmp	ip, r6
   374a8:	d1b4      	bne.n	37414 <__aeabi_dsub+0x4d4>
   374aa:	000c      	movs	r4, r1
   374ac:	0017      	movs	r7, r2
   374ae:	4666      	mov	r6, ip
   374b0:	e5cc      	b.n	3704c <__aeabi_dsub+0x10c>
   374b2:	2700      	movs	r7, #0
   374b4:	2400      	movs	r4, #0
   374b6:	e5e8      	b.n	3708a <__aeabi_dsub+0x14a>
   374b8:	2b00      	cmp	r3, #0
   374ba:	d039      	beq.n	37530 <__aeabi_dsub+0x5f0>
   374bc:	000b      	movs	r3, r1
   374be:	4313      	orrs	r3, r2
   374c0:	d100      	bne.n	374c4 <__aeabi_dsub+0x584>
   374c2:	e744      	b.n	3734e <__aeabi_dsub+0x40e>
   374c4:	08c0      	lsrs	r0, r0, #3
   374c6:	0767      	lsls	r7, r4, #29
   374c8:	4307      	orrs	r7, r0
   374ca:	2080      	movs	r0, #128	; 0x80
   374cc:	08e4      	lsrs	r4, r4, #3
   374ce:	0300      	lsls	r0, r0, #12
   374d0:	4204      	tst	r4, r0
   374d2:	d0e1      	beq.n	37498 <__aeabi_dsub+0x558>
   374d4:	08cb      	lsrs	r3, r1, #3
   374d6:	4203      	tst	r3, r0
   374d8:	d1de      	bne.n	37498 <__aeabi_dsub+0x558>
   374da:	08d7      	lsrs	r7, r2, #3
   374dc:	0749      	lsls	r1, r1, #29
   374de:	430f      	orrs	r7, r1
   374e0:	001c      	movs	r4, r3
   374e2:	e7d9      	b.n	37498 <__aeabi_dsub+0x558>
   374e4:	2100      	movs	r1, #0
   374e6:	e771      	b.n	373cc <__aeabi_dsub+0x48c>
   374e8:	2500      	movs	r5, #0
   374ea:	2700      	movs	r7, #0
   374ec:	e5e9      	b.n	370c2 <__aeabi_dsub+0x182>
   374ee:	002e      	movs	r6, r5
   374f0:	0027      	movs	r7, r4
   374f2:	3e20      	subs	r6, #32
   374f4:	40f7      	lsrs	r7, r6
   374f6:	2d20      	cmp	r5, #32
   374f8:	d02f      	beq.n	3755a <__aeabi_dsub+0x61a>
   374fa:	2640      	movs	r6, #64	; 0x40
   374fc:	1b75      	subs	r5, r6, r5
   374fe:	40ac      	lsls	r4, r5
   37500:	4650      	mov	r0, sl
   37502:	4320      	orrs	r0, r4
   37504:	1e44      	subs	r4, r0, #1
   37506:	41a0      	sbcs	r0, r4
   37508:	2400      	movs	r4, #0
   3750a:	4338      	orrs	r0, r7
   3750c:	e6dc      	b.n	372c8 <__aeabi_dsub+0x388>
   3750e:	2480      	movs	r4, #128	; 0x80
   37510:	2500      	movs	r5, #0
   37512:	0324      	lsls	r4, r4, #12
   37514:	4e13      	ldr	r6, [pc, #76]	; (37564 <__aeabi_dsub+0x624>)
   37516:	2700      	movs	r7, #0
   37518:	e5d3      	b.n	370c2 <__aeabi_dsub+0x182>
   3751a:	4650      	mov	r0, sl
   3751c:	4320      	orrs	r0, r4
   3751e:	0007      	movs	r7, r0
   37520:	1e78      	subs	r0, r7, #1
   37522:	4187      	sbcs	r7, r0
   37524:	2400      	movs	r4, #0
   37526:	18bf      	adds	r7, r7, r2
   37528:	e760      	b.n	373ec <__aeabi_dsub+0x4ac>
   3752a:	000c      	movs	r4, r1
   3752c:	0017      	movs	r7, r2
   3752e:	e58d      	b.n	3704c <__aeabi_dsub+0x10c>
   37530:	000c      	movs	r4, r1
   37532:	0017      	movs	r7, r2
   37534:	4e0b      	ldr	r6, [pc, #44]	; (37564 <__aeabi_dsub+0x624>)
   37536:	e589      	b.n	3704c <__aeabi_dsub+0x10c>
   37538:	001e      	movs	r6, r3
   3753a:	0027      	movs	r7, r4
   3753c:	3e20      	subs	r6, #32
   3753e:	40f7      	lsrs	r7, r6
   37540:	2b20      	cmp	r3, #32
   37542:	d00c      	beq.n	3755e <__aeabi_dsub+0x61e>
   37544:	2640      	movs	r6, #64	; 0x40
   37546:	1af3      	subs	r3, r6, r3
   37548:	409c      	lsls	r4, r3
   3754a:	4650      	mov	r0, sl
   3754c:	4320      	orrs	r0, r4
   3754e:	1e44      	subs	r4, r0, #1
   37550:	41a0      	sbcs	r0, r4
   37552:	4307      	orrs	r7, r0
   37554:	2400      	movs	r4, #0
   37556:	18bf      	adds	r7, r7, r2
   37558:	e748      	b.n	373ec <__aeabi_dsub+0x4ac>
   3755a:	2400      	movs	r4, #0
   3755c:	e7d0      	b.n	37500 <__aeabi_dsub+0x5c0>
   3755e:	2400      	movs	r4, #0
   37560:	e7f3      	b.n	3754a <__aeabi_dsub+0x60a>
   37562:	46c0      	nop			; (mov r8, r8)
   37564:	000007ff 	.word	0x000007ff
   37568:	ff7fffff 	.word	0xff7fffff

0003756c <__aeabi_d2iz>:
   3756c:	b530      	push	{r4, r5, lr}
   3756e:	4d13      	ldr	r5, [pc, #76]	; (375bc <__aeabi_d2iz+0x50>)
   37570:	030a      	lsls	r2, r1, #12
   37572:	004b      	lsls	r3, r1, #1
   37574:	0b12      	lsrs	r2, r2, #12
   37576:	0d5b      	lsrs	r3, r3, #21
   37578:	0fc9      	lsrs	r1, r1, #31
   3757a:	2400      	movs	r4, #0
   3757c:	42ab      	cmp	r3, r5
   3757e:	dd10      	ble.n	375a2 <__aeabi_d2iz+0x36>
   37580:	4c0f      	ldr	r4, [pc, #60]	; (375c0 <__aeabi_d2iz+0x54>)
   37582:	42a3      	cmp	r3, r4
   37584:	dc0f      	bgt.n	375a6 <__aeabi_d2iz+0x3a>
   37586:	2480      	movs	r4, #128	; 0x80
   37588:	4d0e      	ldr	r5, [pc, #56]	; (375c4 <__aeabi_d2iz+0x58>)
   3758a:	0364      	lsls	r4, r4, #13
   3758c:	4322      	orrs	r2, r4
   3758e:	1aed      	subs	r5, r5, r3
   37590:	2d1f      	cmp	r5, #31
   37592:	dd0b      	ble.n	375ac <__aeabi_d2iz+0x40>
   37594:	480c      	ldr	r0, [pc, #48]	; (375c8 <__aeabi_d2iz+0x5c>)
   37596:	1ac3      	subs	r3, r0, r3
   37598:	40da      	lsrs	r2, r3
   3759a:	4254      	negs	r4, r2
   3759c:	2900      	cmp	r1, #0
   3759e:	d100      	bne.n	375a2 <__aeabi_d2iz+0x36>
   375a0:	0014      	movs	r4, r2
   375a2:	0020      	movs	r0, r4
   375a4:	bd30      	pop	{r4, r5, pc}
   375a6:	4b09      	ldr	r3, [pc, #36]	; (375cc <__aeabi_d2iz+0x60>)
   375a8:	18cc      	adds	r4, r1, r3
   375aa:	e7fa      	b.n	375a2 <__aeabi_d2iz+0x36>
   375ac:	4c08      	ldr	r4, [pc, #32]	; (375d0 <__aeabi_d2iz+0x64>)
   375ae:	40e8      	lsrs	r0, r5
   375b0:	46a4      	mov	ip, r4
   375b2:	4463      	add	r3, ip
   375b4:	409a      	lsls	r2, r3
   375b6:	4302      	orrs	r2, r0
   375b8:	e7ef      	b.n	3759a <__aeabi_d2iz+0x2e>
   375ba:	46c0      	nop			; (mov r8, r8)
   375bc:	000003fe 	.word	0x000003fe
   375c0:	0000041d 	.word	0x0000041d
   375c4:	00000433 	.word	0x00000433
   375c8:	00000413 	.word	0x00000413
   375cc:	7fffffff 	.word	0x7fffffff
   375d0:	fffffbed 	.word	0xfffffbed

000375d4 <__aeabi_ui2d>:
   375d4:	b510      	push	{r4, lr}
   375d6:	1e04      	subs	r4, r0, #0
   375d8:	d028      	beq.n	3762c <__aeabi_ui2d+0x58>
   375da:	f000 f833 	bl	37644 <__clzsi2>
   375de:	4b15      	ldr	r3, [pc, #84]	; (37634 <__aeabi_ui2d+0x60>)
   375e0:	4a15      	ldr	r2, [pc, #84]	; (37638 <__aeabi_ui2d+0x64>)
   375e2:	1a1b      	subs	r3, r3, r0
   375e4:	1ad2      	subs	r2, r2, r3
   375e6:	2a1f      	cmp	r2, #31
   375e8:	dd15      	ble.n	37616 <__aeabi_ui2d+0x42>
   375ea:	4a14      	ldr	r2, [pc, #80]	; (3763c <__aeabi_ui2d+0x68>)
   375ec:	1ad2      	subs	r2, r2, r3
   375ee:	4094      	lsls	r4, r2
   375f0:	2200      	movs	r2, #0
   375f2:	0324      	lsls	r4, r4, #12
   375f4:	055b      	lsls	r3, r3, #21
   375f6:	0b24      	lsrs	r4, r4, #12
   375f8:	0d5b      	lsrs	r3, r3, #21
   375fa:	2100      	movs	r1, #0
   375fc:	0010      	movs	r0, r2
   375fe:	0324      	lsls	r4, r4, #12
   37600:	0d0a      	lsrs	r2, r1, #20
   37602:	0b24      	lsrs	r4, r4, #12
   37604:	0512      	lsls	r2, r2, #20
   37606:	4322      	orrs	r2, r4
   37608:	4c0d      	ldr	r4, [pc, #52]	; (37640 <__aeabi_ui2d+0x6c>)
   3760a:	051b      	lsls	r3, r3, #20
   3760c:	4022      	ands	r2, r4
   3760e:	4313      	orrs	r3, r2
   37610:	005b      	lsls	r3, r3, #1
   37612:	0859      	lsrs	r1, r3, #1
   37614:	bd10      	pop	{r4, pc}
   37616:	0021      	movs	r1, r4
   37618:	4091      	lsls	r1, r2
   3761a:	000a      	movs	r2, r1
   3761c:	210b      	movs	r1, #11
   3761e:	1a08      	subs	r0, r1, r0
   37620:	40c4      	lsrs	r4, r0
   37622:	055b      	lsls	r3, r3, #21
   37624:	0324      	lsls	r4, r4, #12
   37626:	0b24      	lsrs	r4, r4, #12
   37628:	0d5b      	lsrs	r3, r3, #21
   3762a:	e7e6      	b.n	375fa <__aeabi_ui2d+0x26>
   3762c:	2300      	movs	r3, #0
   3762e:	2400      	movs	r4, #0
   37630:	2200      	movs	r2, #0
   37632:	e7e2      	b.n	375fa <__aeabi_ui2d+0x26>
   37634:	0000041e 	.word	0x0000041e
   37638:	00000433 	.word	0x00000433
   3763c:	00000413 	.word	0x00000413
   37640:	800fffff 	.word	0x800fffff

00037644 <__clzsi2>:
   37644:	211c      	movs	r1, #28
   37646:	2301      	movs	r3, #1
   37648:	041b      	lsls	r3, r3, #16
   3764a:	4298      	cmp	r0, r3
   3764c:	d301      	bcc.n	37652 <__clzsi2+0xe>
   3764e:	0c00      	lsrs	r0, r0, #16
   37650:	3910      	subs	r1, #16
   37652:	0a1b      	lsrs	r3, r3, #8
   37654:	4298      	cmp	r0, r3
   37656:	d301      	bcc.n	3765c <__clzsi2+0x18>
   37658:	0a00      	lsrs	r0, r0, #8
   3765a:	3908      	subs	r1, #8
   3765c:	091b      	lsrs	r3, r3, #4
   3765e:	4298      	cmp	r0, r3
   37660:	d301      	bcc.n	37666 <__clzsi2+0x22>
   37662:	0900      	lsrs	r0, r0, #4
   37664:	3904      	subs	r1, #4
   37666:	a202      	add	r2, pc, #8	; (adr r2, 37670 <__clzsi2+0x2c>)
   37668:	5c10      	ldrb	r0, [r2, r0]
   3766a:	1840      	adds	r0, r0, r1
   3766c:	4770      	bx	lr
   3766e:	46c0      	nop			; (mov r8, r8)
   37670:	02020304 	.word	0x02020304
   37674:	01010101 	.word	0x01010101
	...

00037680 <__divdi3>:
   37680:	b5f0      	push	{r4, r5, r6, r7, lr}
   37682:	464e      	mov	r6, r9
   37684:	4657      	mov	r7, sl
   37686:	46de      	mov	lr, fp
   37688:	4645      	mov	r5, r8
   3768a:	b5e0      	push	{r5, r6, r7, lr}
   3768c:	0006      	movs	r6, r0
   3768e:	2000      	movs	r0, #0
   37690:	000f      	movs	r7, r1
   37692:	b083      	sub	sp, #12
   37694:	0019      	movs	r1, r3
   37696:	4681      	mov	r9, r0
   37698:	2f00      	cmp	r7, #0
   3769a:	da00      	bge.n	3769e <__divdi3+0x1e>
   3769c:	e08c      	b.n	377b8 <__divdi3+0x138>
   3769e:	2900      	cmp	r1, #0
   376a0:	da00      	bge.n	376a4 <__divdi3+0x24>
   376a2:	e080      	b.n	377a6 <__divdi3+0x126>
   376a4:	0034      	movs	r4, r6
   376a6:	003d      	movs	r5, r7
   376a8:	4692      	mov	sl, r2
   376aa:	4698      	mov	r8, r3
   376ac:	42bb      	cmp	r3, r7
   376ae:	d869      	bhi.n	37784 <__divdi3+0x104>
   376b0:	d066      	beq.n	37780 <__divdi3+0x100>
   376b2:	4641      	mov	r1, r8
   376b4:	4650      	mov	r0, sl
   376b6:	f000 f8bf 	bl	37838 <__clzdi2>
   376ba:	4683      	mov	fp, r0
   376bc:	0039      	movs	r1, r7
   376be:	0030      	movs	r0, r6
   376c0:	f000 f8ba 	bl	37838 <__clzdi2>
   376c4:	465b      	mov	r3, fp
   376c6:	1a1b      	subs	r3, r3, r0
   376c8:	469c      	mov	ip, r3
   376ca:	3b20      	subs	r3, #32
   376cc:	469b      	mov	fp, r3
   376ce:	d500      	bpl.n	376d2 <__divdi3+0x52>
   376d0:	e087      	b.n	377e2 <__divdi3+0x162>
   376d2:	4651      	mov	r1, sl
   376d4:	4658      	mov	r0, fp
   376d6:	4081      	lsls	r1, r0
   376d8:	000b      	movs	r3, r1
   376da:	4651      	mov	r1, sl
   376dc:	4660      	mov	r0, ip
   376de:	4081      	lsls	r1, r0
   376e0:	000a      	movs	r2, r1
   376e2:	42bb      	cmp	r3, r7
   376e4:	d900      	bls.n	376e8 <__divdi3+0x68>
   376e6:	e072      	b.n	377ce <__divdi3+0x14e>
   376e8:	d06e      	beq.n	377c8 <__divdi3+0x148>
   376ea:	0034      	movs	r4, r6
   376ec:	003d      	movs	r5, r7
   376ee:	4659      	mov	r1, fp
   376f0:	1aa4      	subs	r4, r4, r2
   376f2:	419d      	sbcs	r5, r3
   376f4:	2900      	cmp	r1, #0
   376f6:	da00      	bge.n	376fa <__divdi3+0x7a>
   376f8:	e08a      	b.n	37810 <__divdi3+0x190>
   376fa:	2100      	movs	r1, #0
   376fc:	2000      	movs	r0, #0
   376fe:	2601      	movs	r6, #1
   37700:	9000      	str	r0, [sp, #0]
   37702:	9101      	str	r1, [sp, #4]
   37704:	4659      	mov	r1, fp
   37706:	408e      	lsls	r6, r1
   37708:	9601      	str	r6, [sp, #4]
   3770a:	4661      	mov	r1, ip
   3770c:	2601      	movs	r6, #1
   3770e:	408e      	lsls	r6, r1
   37710:	4661      	mov	r1, ip
   37712:	9600      	str	r6, [sp, #0]
   37714:	2900      	cmp	r1, #0
   37716:	d061      	beq.n	377dc <__divdi3+0x15c>
   37718:	07d9      	lsls	r1, r3, #31
   3771a:	0856      	lsrs	r6, r2, #1
   3771c:	430e      	orrs	r6, r1
   3771e:	085f      	lsrs	r7, r3, #1
   37720:	4661      	mov	r1, ip
   37722:	2201      	movs	r2, #1
   37724:	2300      	movs	r3, #0
   37726:	e00c      	b.n	37742 <__divdi3+0xc2>
   37728:	42af      	cmp	r7, r5
   3772a:	d101      	bne.n	37730 <__divdi3+0xb0>
   3772c:	42a6      	cmp	r6, r4
   3772e:	d80a      	bhi.n	37746 <__divdi3+0xc6>
   37730:	1ba4      	subs	r4, r4, r6
   37732:	41bd      	sbcs	r5, r7
   37734:	1924      	adds	r4, r4, r4
   37736:	416d      	adcs	r5, r5
   37738:	3901      	subs	r1, #1
   3773a:	18a4      	adds	r4, r4, r2
   3773c:	415d      	adcs	r5, r3
   3773e:	2900      	cmp	r1, #0
   37740:	d006      	beq.n	37750 <__divdi3+0xd0>
   37742:	42af      	cmp	r7, r5
   37744:	d9f0      	bls.n	37728 <__divdi3+0xa8>
   37746:	3901      	subs	r1, #1
   37748:	1924      	adds	r4, r4, r4
   3774a:	416d      	adcs	r5, r5
   3774c:	2900      	cmp	r1, #0
   3774e:	d1f8      	bne.n	37742 <__divdi3+0xc2>
   37750:	465b      	mov	r3, fp
   37752:	9800      	ldr	r0, [sp, #0]
   37754:	9901      	ldr	r1, [sp, #4]
   37756:	1900      	adds	r0, r0, r4
   37758:	4169      	adcs	r1, r5
   3775a:	2b00      	cmp	r3, #0
   3775c:	db4d      	blt.n	377fa <__divdi3+0x17a>
   3775e:	002e      	movs	r6, r5
   37760:	40de      	lsrs	r6, r3
   37762:	4663      	mov	r3, ip
   37764:	002c      	movs	r4, r5
   37766:	40dc      	lsrs	r4, r3
   37768:	465b      	mov	r3, fp
   3776a:	2b00      	cmp	r3, #0
   3776c:	db5b      	blt.n	37826 <__divdi3+0x1a6>
   3776e:	0034      	movs	r4, r6
   37770:	409c      	lsls	r4, r3
   37772:	0023      	movs	r3, r4
   37774:	4664      	mov	r4, ip
   37776:	40a6      	lsls	r6, r4
   37778:	0032      	movs	r2, r6
   3777a:	1a80      	subs	r0, r0, r2
   3777c:	4199      	sbcs	r1, r3
   3777e:	e003      	b.n	37788 <__divdi3+0x108>
   37780:	42b2      	cmp	r2, r6
   37782:	d996      	bls.n	376b2 <__divdi3+0x32>
   37784:	2000      	movs	r0, #0
   37786:	2100      	movs	r1, #0
   37788:	464b      	mov	r3, r9
   3778a:	2b00      	cmp	r3, #0
   3778c:	d004      	beq.n	37798 <__divdi3+0x118>
   3778e:	0003      	movs	r3, r0
   37790:	000c      	movs	r4, r1
   37792:	2100      	movs	r1, #0
   37794:	4258      	negs	r0, r3
   37796:	41a1      	sbcs	r1, r4
   37798:	b003      	add	sp, #12
   3779a:	bc3c      	pop	{r2, r3, r4, r5}
   3779c:	4690      	mov	r8, r2
   3779e:	4699      	mov	r9, r3
   377a0:	46a2      	mov	sl, r4
   377a2:	46ab      	mov	fp, r5
   377a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   377a6:	4649      	mov	r1, r9
   377a8:	43c9      	mvns	r1, r1
   377aa:	0010      	movs	r0, r2
   377ac:	4689      	mov	r9, r1
   377ae:	0019      	movs	r1, r3
   377b0:	2300      	movs	r3, #0
   377b2:	4242      	negs	r2, r0
   377b4:	418b      	sbcs	r3, r1
   377b6:	e775      	b.n	376a4 <__divdi3+0x24>
   377b8:	0034      	movs	r4, r6
   377ba:	003d      	movs	r5, r7
   377bc:	3801      	subs	r0, #1
   377be:	2700      	movs	r7, #0
   377c0:	4266      	negs	r6, r4
   377c2:	41af      	sbcs	r7, r5
   377c4:	4681      	mov	r9, r0
   377c6:	e76a      	b.n	3769e <__divdi3+0x1e>
   377c8:	42b1      	cmp	r1, r6
   377ca:	d800      	bhi.n	377ce <__divdi3+0x14e>
   377cc:	e78d      	b.n	376ea <__divdi3+0x6a>
   377ce:	2100      	movs	r1, #0
   377d0:	2000      	movs	r0, #0
   377d2:	9000      	str	r0, [sp, #0]
   377d4:	9101      	str	r1, [sp, #4]
   377d6:	4661      	mov	r1, ip
   377d8:	2900      	cmp	r1, #0
   377da:	d19d      	bne.n	37718 <__divdi3+0x98>
   377dc:	9800      	ldr	r0, [sp, #0]
   377de:	9901      	ldr	r1, [sp, #4]
   377e0:	e7d2      	b.n	37788 <__divdi3+0x108>
   377e2:	4662      	mov	r2, ip
   377e4:	4640      	mov	r0, r8
   377e6:	2320      	movs	r3, #32
   377e8:	4651      	mov	r1, sl
   377ea:	4090      	lsls	r0, r2
   377ec:	1a9b      	subs	r3, r3, r2
   377ee:	40d9      	lsrs	r1, r3
   377f0:	0003      	movs	r3, r0
   377f2:	9100      	str	r1, [sp, #0]
   377f4:	9900      	ldr	r1, [sp, #0]
   377f6:	430b      	orrs	r3, r1
   377f8:	e76f      	b.n	376da <__divdi3+0x5a>
   377fa:	4662      	mov	r2, ip
   377fc:	2320      	movs	r3, #32
   377fe:	1a9b      	subs	r3, r3, r2
   37800:	002a      	movs	r2, r5
   37802:	409a      	lsls	r2, r3
   37804:	0026      	movs	r6, r4
   37806:	0013      	movs	r3, r2
   37808:	4662      	mov	r2, ip
   3780a:	40d6      	lsrs	r6, r2
   3780c:	431e      	orrs	r6, r3
   3780e:	e7a8      	b.n	37762 <__divdi3+0xe2>
   37810:	4661      	mov	r1, ip
   37812:	2620      	movs	r6, #32
   37814:	2701      	movs	r7, #1
   37816:	1a76      	subs	r6, r6, r1
   37818:	2000      	movs	r0, #0
   3781a:	2100      	movs	r1, #0
   3781c:	40f7      	lsrs	r7, r6
   3781e:	9000      	str	r0, [sp, #0]
   37820:	9101      	str	r1, [sp, #4]
   37822:	9701      	str	r7, [sp, #4]
   37824:	e771      	b.n	3770a <__divdi3+0x8a>
   37826:	4662      	mov	r2, ip
   37828:	2320      	movs	r3, #32
   3782a:	0035      	movs	r5, r6
   3782c:	4094      	lsls	r4, r2
   3782e:	1a9b      	subs	r3, r3, r2
   37830:	40dd      	lsrs	r5, r3
   37832:	0023      	movs	r3, r4
   37834:	432b      	orrs	r3, r5
   37836:	e79d      	b.n	37774 <__divdi3+0xf4>

00037838 <__clzdi2>:
   37838:	b510      	push	{r4, lr}
   3783a:	2900      	cmp	r1, #0
   3783c:	d103      	bne.n	37846 <__clzdi2+0xe>
   3783e:	f7ff ff01 	bl	37644 <__clzsi2>
   37842:	3020      	adds	r0, #32
   37844:	e002      	b.n	3784c <__clzdi2+0x14>
   37846:	1c08      	adds	r0, r1, #0
   37848:	f7ff fefc 	bl	37644 <__clzsi2>
   3784c:	bd10      	pop	{r4, pc}
   3784e:	46c0      	nop			; (mov r8, r8)

00037850 <atoi>:
   37850:	b510      	push	{r4, lr}
   37852:	220a      	movs	r2, #10
   37854:	2100      	movs	r1, #0
   37856:	f000 fb0d 	bl	37e74 <strtol>
   3785a:	bd10      	pop	{r4, pc}

0003785c <__libc_init_array>:
   3785c:	b570      	push	{r4, r5, r6, lr}
   3785e:	2600      	movs	r6, #0
   37860:	4d0c      	ldr	r5, [pc, #48]	; (37894 <__libc_init_array+0x38>)
   37862:	4c0d      	ldr	r4, [pc, #52]	; (37898 <__libc_init_array+0x3c>)
   37864:	1b64      	subs	r4, r4, r5
   37866:	10a4      	asrs	r4, r4, #2
   37868:	42a6      	cmp	r6, r4
   3786a:	d109      	bne.n	37880 <__libc_init_array+0x24>
   3786c:	2600      	movs	r6, #0
   3786e:	f005 fe33 	bl	3d4d8 <_init>
   37872:	4d0a      	ldr	r5, [pc, #40]	; (3789c <__libc_init_array+0x40>)
   37874:	4c0a      	ldr	r4, [pc, #40]	; (378a0 <__libc_init_array+0x44>)
   37876:	1b64      	subs	r4, r4, r5
   37878:	10a4      	asrs	r4, r4, #2
   3787a:	42a6      	cmp	r6, r4
   3787c:	d105      	bne.n	3788a <__libc_init_array+0x2e>
   3787e:	bd70      	pop	{r4, r5, r6, pc}
   37880:	00b3      	lsls	r3, r6, #2
   37882:	58eb      	ldr	r3, [r5, r3]
   37884:	4798      	blx	r3
   37886:	3601      	adds	r6, #1
   37888:	e7ee      	b.n	37868 <__libc_init_array+0xc>
   3788a:	00b3      	lsls	r3, r6, #2
   3788c:	58eb      	ldr	r3, [r5, r3]
   3788e:	4798      	blx	r3
   37890:	3601      	adds	r6, #1
   37892:	e7f2      	b.n	3787a <__libc_init_array+0x1e>
   37894:	0003d4e4 	.word	0x0003d4e4
   37898:	0003d4e4 	.word	0x0003d4e4
   3789c:	0003d4e4 	.word	0x0003d4e4
   378a0:	0003d4e8 	.word	0x0003d4e8

000378a4 <malloc>:
   378a4:	b510      	push	{r4, lr}
   378a6:	4b03      	ldr	r3, [pc, #12]	; (378b4 <malloc+0x10>)
   378a8:	0001      	movs	r1, r0
   378aa:	6818      	ldr	r0, [r3, #0]
   378ac:	f000 f87c 	bl	379a8 <_malloc_r>
   378b0:	bd10      	pop	{r4, pc}
   378b2:	46c0      	nop			; (mov r8, r8)
   378b4:	20000124 	.word	0x20000124

000378b8 <free>:
   378b8:	b510      	push	{r4, lr}
   378ba:	4b03      	ldr	r3, [pc, #12]	; (378c8 <free+0x10>)
   378bc:	0001      	movs	r1, r0
   378be:	6818      	ldr	r0, [r3, #0]
   378c0:	f000 f828 	bl	37914 <_free_r>
   378c4:	bd10      	pop	{r4, pc}
   378c6:	46c0      	nop			; (mov r8, r8)
   378c8:	20000124 	.word	0x20000124

000378cc <memcpy>:
   378cc:	2300      	movs	r3, #0
   378ce:	b510      	push	{r4, lr}
   378d0:	429a      	cmp	r2, r3
   378d2:	d100      	bne.n	378d6 <memcpy+0xa>
   378d4:	bd10      	pop	{r4, pc}
   378d6:	5ccc      	ldrb	r4, [r1, r3]
   378d8:	54c4      	strb	r4, [r0, r3]
   378da:	3301      	adds	r3, #1
   378dc:	e7f8      	b.n	378d0 <memcpy+0x4>

000378de <memmove>:
   378de:	b510      	push	{r4, lr}
   378e0:	4288      	cmp	r0, r1
   378e2:	d902      	bls.n	378ea <memmove+0xc>
   378e4:	188b      	adds	r3, r1, r2
   378e6:	4298      	cmp	r0, r3
   378e8:	d308      	bcc.n	378fc <memmove+0x1e>
   378ea:	2300      	movs	r3, #0
   378ec:	429a      	cmp	r2, r3
   378ee:	d007      	beq.n	37900 <memmove+0x22>
   378f0:	5ccc      	ldrb	r4, [r1, r3]
   378f2:	54c4      	strb	r4, [r0, r3]
   378f4:	3301      	adds	r3, #1
   378f6:	e7f9      	b.n	378ec <memmove+0xe>
   378f8:	5c8b      	ldrb	r3, [r1, r2]
   378fa:	5483      	strb	r3, [r0, r2]
   378fc:	3a01      	subs	r2, #1
   378fe:	d2fb      	bcs.n	378f8 <memmove+0x1a>
   37900:	bd10      	pop	{r4, pc}

00037902 <memset>:
   37902:	0003      	movs	r3, r0
   37904:	1882      	adds	r2, r0, r2
   37906:	4293      	cmp	r3, r2
   37908:	d100      	bne.n	3790c <memset+0xa>
   3790a:	4770      	bx	lr
   3790c:	7019      	strb	r1, [r3, #0]
   3790e:	3301      	adds	r3, #1
   37910:	e7f9      	b.n	37906 <memset+0x4>
	...

00037914 <_free_r>:
   37914:	b570      	push	{r4, r5, r6, lr}
   37916:	0005      	movs	r5, r0
   37918:	2900      	cmp	r1, #0
   3791a:	d010      	beq.n	3793e <_free_r+0x2a>
   3791c:	1f0c      	subs	r4, r1, #4
   3791e:	6823      	ldr	r3, [r4, #0]
   37920:	2b00      	cmp	r3, #0
   37922:	da00      	bge.n	37926 <_free_r+0x12>
   37924:	18e4      	adds	r4, r4, r3
   37926:	0028      	movs	r0, r5
   37928:	f000 fdd8 	bl	384dc <__malloc_lock>
   3792c:	4a1d      	ldr	r2, [pc, #116]	; (379a4 <_free_r+0x90>)
   3792e:	6813      	ldr	r3, [r2, #0]
   37930:	2b00      	cmp	r3, #0
   37932:	d105      	bne.n	37940 <_free_r+0x2c>
   37934:	6063      	str	r3, [r4, #4]
   37936:	6014      	str	r4, [r2, #0]
   37938:	0028      	movs	r0, r5
   3793a:	f000 fdd0 	bl	384de <__malloc_unlock>
   3793e:	bd70      	pop	{r4, r5, r6, pc}
   37940:	42a3      	cmp	r3, r4
   37942:	d909      	bls.n	37958 <_free_r+0x44>
   37944:	6821      	ldr	r1, [r4, #0]
   37946:	1860      	adds	r0, r4, r1
   37948:	4283      	cmp	r3, r0
   3794a:	d1f3      	bne.n	37934 <_free_r+0x20>
   3794c:	6818      	ldr	r0, [r3, #0]
   3794e:	685b      	ldr	r3, [r3, #4]
   37950:	1841      	adds	r1, r0, r1
   37952:	6021      	str	r1, [r4, #0]
   37954:	e7ee      	b.n	37934 <_free_r+0x20>
   37956:	0013      	movs	r3, r2
   37958:	685a      	ldr	r2, [r3, #4]
   3795a:	2a00      	cmp	r2, #0
   3795c:	d001      	beq.n	37962 <_free_r+0x4e>
   3795e:	42a2      	cmp	r2, r4
   37960:	d9f9      	bls.n	37956 <_free_r+0x42>
   37962:	6819      	ldr	r1, [r3, #0]
   37964:	1858      	adds	r0, r3, r1
   37966:	42a0      	cmp	r0, r4
   37968:	d10b      	bne.n	37982 <_free_r+0x6e>
   3796a:	6820      	ldr	r0, [r4, #0]
   3796c:	1809      	adds	r1, r1, r0
   3796e:	1858      	adds	r0, r3, r1
   37970:	6019      	str	r1, [r3, #0]
   37972:	4282      	cmp	r2, r0
   37974:	d1e0      	bne.n	37938 <_free_r+0x24>
   37976:	6810      	ldr	r0, [r2, #0]
   37978:	6852      	ldr	r2, [r2, #4]
   3797a:	1841      	adds	r1, r0, r1
   3797c:	6019      	str	r1, [r3, #0]
   3797e:	605a      	str	r2, [r3, #4]
   37980:	e7da      	b.n	37938 <_free_r+0x24>
   37982:	42a0      	cmp	r0, r4
   37984:	d902      	bls.n	3798c <_free_r+0x78>
   37986:	230c      	movs	r3, #12
   37988:	602b      	str	r3, [r5, #0]
   3798a:	e7d5      	b.n	37938 <_free_r+0x24>
   3798c:	6821      	ldr	r1, [r4, #0]
   3798e:	1860      	adds	r0, r4, r1
   37990:	4282      	cmp	r2, r0
   37992:	d103      	bne.n	3799c <_free_r+0x88>
   37994:	6810      	ldr	r0, [r2, #0]
   37996:	6852      	ldr	r2, [r2, #4]
   37998:	1841      	adds	r1, r0, r1
   3799a:	6021      	str	r1, [r4, #0]
   3799c:	6062      	str	r2, [r4, #4]
   3799e:	605c      	str	r4, [r3, #4]
   379a0:	e7ca      	b.n	37938 <_free_r+0x24>
   379a2:	46c0      	nop			; (mov r8, r8)
   379a4:	20004654 	.word	0x20004654

000379a8 <_malloc_r>:
   379a8:	2303      	movs	r3, #3
   379aa:	b570      	push	{r4, r5, r6, lr}
   379ac:	1ccd      	adds	r5, r1, #3
   379ae:	439d      	bics	r5, r3
   379b0:	3508      	adds	r5, #8
   379b2:	0006      	movs	r6, r0
   379b4:	2d0c      	cmp	r5, #12
   379b6:	d21e      	bcs.n	379f6 <_malloc_r+0x4e>
   379b8:	250c      	movs	r5, #12
   379ba:	42a9      	cmp	r1, r5
   379bc:	d81d      	bhi.n	379fa <_malloc_r+0x52>
   379be:	0030      	movs	r0, r6
   379c0:	f000 fd8c 	bl	384dc <__malloc_lock>
   379c4:	4a25      	ldr	r2, [pc, #148]	; (37a5c <_malloc_r+0xb4>)
   379c6:	6814      	ldr	r4, [r2, #0]
   379c8:	0021      	movs	r1, r4
   379ca:	2900      	cmp	r1, #0
   379cc:	d119      	bne.n	37a02 <_malloc_r+0x5a>
   379ce:	4c24      	ldr	r4, [pc, #144]	; (37a60 <_malloc_r+0xb8>)
   379d0:	6823      	ldr	r3, [r4, #0]
   379d2:	2b00      	cmp	r3, #0
   379d4:	d103      	bne.n	379de <_malloc_r+0x36>
   379d6:	0030      	movs	r0, r6
   379d8:	f000 f8ae 	bl	37b38 <_sbrk_r>
   379dc:	6020      	str	r0, [r4, #0]
   379de:	0029      	movs	r1, r5
   379e0:	0030      	movs	r0, r6
   379e2:	f000 f8a9 	bl	37b38 <_sbrk_r>
   379e6:	1c43      	adds	r3, r0, #1
   379e8:	d12c      	bne.n	37a44 <_malloc_r+0x9c>
   379ea:	230c      	movs	r3, #12
   379ec:	0030      	movs	r0, r6
   379ee:	6033      	str	r3, [r6, #0]
   379f0:	f000 fd75 	bl	384de <__malloc_unlock>
   379f4:	e003      	b.n	379fe <_malloc_r+0x56>
   379f6:	2d00      	cmp	r5, #0
   379f8:	dadf      	bge.n	379ba <_malloc_r+0x12>
   379fa:	230c      	movs	r3, #12
   379fc:	6033      	str	r3, [r6, #0]
   379fe:	2000      	movs	r0, #0
   37a00:	bd70      	pop	{r4, r5, r6, pc}
   37a02:	680b      	ldr	r3, [r1, #0]
   37a04:	1b5b      	subs	r3, r3, r5
   37a06:	d41a      	bmi.n	37a3e <_malloc_r+0x96>
   37a08:	2b0b      	cmp	r3, #11
   37a0a:	d903      	bls.n	37a14 <_malloc_r+0x6c>
   37a0c:	600b      	str	r3, [r1, #0]
   37a0e:	18cc      	adds	r4, r1, r3
   37a10:	6025      	str	r5, [r4, #0]
   37a12:	e003      	b.n	37a1c <_malloc_r+0x74>
   37a14:	428c      	cmp	r4, r1
   37a16:	d10e      	bne.n	37a36 <_malloc_r+0x8e>
   37a18:	6863      	ldr	r3, [r4, #4]
   37a1a:	6013      	str	r3, [r2, #0]
   37a1c:	0030      	movs	r0, r6
   37a1e:	f000 fd5e 	bl	384de <__malloc_unlock>
   37a22:	0020      	movs	r0, r4
   37a24:	2207      	movs	r2, #7
   37a26:	300b      	adds	r0, #11
   37a28:	1d23      	adds	r3, r4, #4
   37a2a:	4390      	bics	r0, r2
   37a2c:	1ac3      	subs	r3, r0, r3
   37a2e:	d0e7      	beq.n	37a00 <_malloc_r+0x58>
   37a30:	425a      	negs	r2, r3
   37a32:	50e2      	str	r2, [r4, r3]
   37a34:	e7e4      	b.n	37a00 <_malloc_r+0x58>
   37a36:	684b      	ldr	r3, [r1, #4]
   37a38:	6063      	str	r3, [r4, #4]
   37a3a:	000c      	movs	r4, r1
   37a3c:	e7ee      	b.n	37a1c <_malloc_r+0x74>
   37a3e:	000c      	movs	r4, r1
   37a40:	6849      	ldr	r1, [r1, #4]
   37a42:	e7c2      	b.n	379ca <_malloc_r+0x22>
   37a44:	2303      	movs	r3, #3
   37a46:	1cc4      	adds	r4, r0, #3
   37a48:	439c      	bics	r4, r3
   37a4a:	42a0      	cmp	r0, r4
   37a4c:	d0e0      	beq.n	37a10 <_malloc_r+0x68>
   37a4e:	1a21      	subs	r1, r4, r0
   37a50:	0030      	movs	r0, r6
   37a52:	f000 f871 	bl	37b38 <_sbrk_r>
   37a56:	1c43      	adds	r3, r0, #1
   37a58:	d1da      	bne.n	37a10 <_malloc_r+0x68>
   37a5a:	e7c6      	b.n	379ea <_malloc_r+0x42>
   37a5c:	20004654 	.word	0x20004654
   37a60:	20004658 	.word	0x20004658

00037a64 <_puts_r>:
   37a64:	b570      	push	{r4, r5, r6, lr}
   37a66:	0005      	movs	r5, r0
   37a68:	000e      	movs	r6, r1
   37a6a:	2800      	cmp	r0, #0
   37a6c:	d004      	beq.n	37a78 <_puts_r+0x14>
   37a6e:	6983      	ldr	r3, [r0, #24]
   37a70:	2b00      	cmp	r3, #0
   37a72:	d101      	bne.n	37a78 <_puts_r+0x14>
   37a74:	f000 fc0e 	bl	38294 <__sinit>
   37a78:	69ab      	ldr	r3, [r5, #24]
   37a7a:	68ac      	ldr	r4, [r5, #8]
   37a7c:	2b00      	cmp	r3, #0
   37a7e:	d102      	bne.n	37a86 <_puts_r+0x22>
   37a80:	0028      	movs	r0, r5
   37a82:	f000 fc07 	bl	38294 <__sinit>
   37a86:	4b24      	ldr	r3, [pc, #144]	; (37b18 <_puts_r+0xb4>)
   37a88:	429c      	cmp	r4, r3
   37a8a:	d10f      	bne.n	37aac <_puts_r+0x48>
   37a8c:	686c      	ldr	r4, [r5, #4]
   37a8e:	89a3      	ldrh	r3, [r4, #12]
   37a90:	071b      	lsls	r3, r3, #28
   37a92:	d502      	bpl.n	37a9a <_puts_r+0x36>
   37a94:	6923      	ldr	r3, [r4, #16]
   37a96:	2b00      	cmp	r3, #0
   37a98:	d120      	bne.n	37adc <_puts_r+0x78>
   37a9a:	0021      	movs	r1, r4
   37a9c:	0028      	movs	r0, r5
   37a9e:	f000 fa8b 	bl	37fb8 <__swsetup_r>
   37aa2:	2800      	cmp	r0, #0
   37aa4:	d01a      	beq.n	37adc <_puts_r+0x78>
   37aa6:	2001      	movs	r0, #1
   37aa8:	4240      	negs	r0, r0
   37aaa:	bd70      	pop	{r4, r5, r6, pc}
   37aac:	4b1b      	ldr	r3, [pc, #108]	; (37b1c <_puts_r+0xb8>)
   37aae:	429c      	cmp	r4, r3
   37ab0:	d101      	bne.n	37ab6 <_puts_r+0x52>
   37ab2:	68ac      	ldr	r4, [r5, #8]
   37ab4:	e7eb      	b.n	37a8e <_puts_r+0x2a>
   37ab6:	4b1a      	ldr	r3, [pc, #104]	; (37b20 <_puts_r+0xbc>)
   37ab8:	429c      	cmp	r4, r3
   37aba:	d1e8      	bne.n	37a8e <_puts_r+0x2a>
   37abc:	68ec      	ldr	r4, [r5, #12]
   37abe:	e7e6      	b.n	37a8e <_puts_r+0x2a>
   37ac0:	3b01      	subs	r3, #1
   37ac2:	3601      	adds	r6, #1
   37ac4:	60a3      	str	r3, [r4, #8]
   37ac6:	2b00      	cmp	r3, #0
   37ac8:	da04      	bge.n	37ad4 <_puts_r+0x70>
   37aca:	69a2      	ldr	r2, [r4, #24]
   37acc:	4293      	cmp	r3, r2
   37ace:	db16      	blt.n	37afe <_puts_r+0x9a>
   37ad0:	290a      	cmp	r1, #10
   37ad2:	d014      	beq.n	37afe <_puts_r+0x9a>
   37ad4:	6823      	ldr	r3, [r4, #0]
   37ad6:	1c5a      	adds	r2, r3, #1
   37ad8:	6022      	str	r2, [r4, #0]
   37ada:	7019      	strb	r1, [r3, #0]
   37adc:	7831      	ldrb	r1, [r6, #0]
   37ade:	68a3      	ldr	r3, [r4, #8]
   37ae0:	2900      	cmp	r1, #0
   37ae2:	d1ed      	bne.n	37ac0 <_puts_r+0x5c>
   37ae4:	3b01      	subs	r3, #1
   37ae6:	60a3      	str	r3, [r4, #8]
   37ae8:	2b00      	cmp	r3, #0
   37aea:	da0f      	bge.n	37b0c <_puts_r+0xa8>
   37aec:	0022      	movs	r2, r4
   37aee:	310a      	adds	r1, #10
   37af0:	0028      	movs	r0, r5
   37af2:	f000 fa0b 	bl	37f0c <__swbuf_r>
   37af6:	1c43      	adds	r3, r0, #1
   37af8:	d0d5      	beq.n	37aa6 <_puts_r+0x42>
   37afa:	200a      	movs	r0, #10
   37afc:	e7d5      	b.n	37aaa <_puts_r+0x46>
   37afe:	0022      	movs	r2, r4
   37b00:	0028      	movs	r0, r5
   37b02:	f000 fa03 	bl	37f0c <__swbuf_r>
   37b06:	1c43      	adds	r3, r0, #1
   37b08:	d1e8      	bne.n	37adc <_puts_r+0x78>
   37b0a:	e7cc      	b.n	37aa6 <_puts_r+0x42>
   37b0c:	200a      	movs	r0, #10
   37b0e:	6823      	ldr	r3, [r4, #0]
   37b10:	1c5a      	adds	r2, r3, #1
   37b12:	6022      	str	r2, [r4, #0]
   37b14:	7018      	strb	r0, [r3, #0]
   37b16:	e7c8      	b.n	37aaa <_puts_r+0x46>
   37b18:	0003d358 	.word	0x0003d358
   37b1c:	0003d378 	.word	0x0003d378
   37b20:	0003d338 	.word	0x0003d338

00037b24 <puts>:
   37b24:	b510      	push	{r4, lr}
   37b26:	4b03      	ldr	r3, [pc, #12]	; (37b34 <puts+0x10>)
   37b28:	0001      	movs	r1, r0
   37b2a:	6818      	ldr	r0, [r3, #0]
   37b2c:	f7ff ff9a 	bl	37a64 <_puts_r>
   37b30:	bd10      	pop	{r4, pc}
   37b32:	46c0      	nop			; (mov r8, r8)
   37b34:	20000124 	.word	0x20000124

00037b38 <_sbrk_r>:
   37b38:	2300      	movs	r3, #0
   37b3a:	b570      	push	{r4, r5, r6, lr}
   37b3c:	4c06      	ldr	r4, [pc, #24]	; (37b58 <_sbrk_r+0x20>)
   37b3e:	0005      	movs	r5, r0
   37b40:	0008      	movs	r0, r1
   37b42:	6023      	str	r3, [r4, #0]
   37b44:	f7f6 f828 	bl	2db98 <_sbrk>
   37b48:	1c43      	adds	r3, r0, #1
   37b4a:	d103      	bne.n	37b54 <_sbrk_r+0x1c>
   37b4c:	6823      	ldr	r3, [r4, #0]
   37b4e:	2b00      	cmp	r3, #0
   37b50:	d000      	beq.n	37b54 <_sbrk_r+0x1c>
   37b52:	602b      	str	r3, [r5, #0]
   37b54:	bd70      	pop	{r4, r5, r6, pc}
   37b56:	46c0      	nop			; (mov r8, r8)
   37b58:	20005c18 	.word	0x20005c18

00037b5c <sniprintf>:
   37b5c:	b40c      	push	{r2, r3}
   37b5e:	b530      	push	{r4, r5, lr}
   37b60:	4b16      	ldr	r3, [pc, #88]	; (37bbc <sniprintf+0x60>)
   37b62:	b09d      	sub	sp, #116	; 0x74
   37b64:	1e0c      	subs	r4, r1, #0
   37b66:	681d      	ldr	r5, [r3, #0]
   37b68:	da08      	bge.n	37b7c <sniprintf+0x20>
   37b6a:	238b      	movs	r3, #139	; 0x8b
   37b6c:	2001      	movs	r0, #1
   37b6e:	602b      	str	r3, [r5, #0]
   37b70:	4240      	negs	r0, r0
   37b72:	b01d      	add	sp, #116	; 0x74
   37b74:	bc30      	pop	{r4, r5}
   37b76:	bc08      	pop	{r3}
   37b78:	b002      	add	sp, #8
   37b7a:	4718      	bx	r3
   37b7c:	2382      	movs	r3, #130	; 0x82
   37b7e:	a902      	add	r1, sp, #8
   37b80:	009b      	lsls	r3, r3, #2
   37b82:	818b      	strh	r3, [r1, #12]
   37b84:	2300      	movs	r3, #0
   37b86:	9002      	str	r0, [sp, #8]
   37b88:	6108      	str	r0, [r1, #16]
   37b8a:	429c      	cmp	r4, r3
   37b8c:	d000      	beq.n	37b90 <sniprintf+0x34>
   37b8e:	1e63      	subs	r3, r4, #1
   37b90:	608b      	str	r3, [r1, #8]
   37b92:	614b      	str	r3, [r1, #20]
   37b94:	2301      	movs	r3, #1
   37b96:	425b      	negs	r3, r3
   37b98:	81cb      	strh	r3, [r1, #14]
   37b9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   37b9c:	ab21      	add	r3, sp, #132	; 0x84
   37b9e:	0028      	movs	r0, r5
   37ba0:	9301      	str	r3, [sp, #4]
   37ba2:	f000 fcff 	bl	385a4 <_svfiprintf_r>
   37ba6:	1c43      	adds	r3, r0, #1
   37ba8:	da01      	bge.n	37bae <sniprintf+0x52>
   37baa:	238b      	movs	r3, #139	; 0x8b
   37bac:	602b      	str	r3, [r5, #0]
   37bae:	2c00      	cmp	r4, #0
   37bb0:	d0df      	beq.n	37b72 <sniprintf+0x16>
   37bb2:	2300      	movs	r3, #0
   37bb4:	9a02      	ldr	r2, [sp, #8]
   37bb6:	7013      	strb	r3, [r2, #0]
   37bb8:	e7db      	b.n	37b72 <sniprintf+0x16>
   37bba:	46c0      	nop			; (mov r8, r8)
   37bbc:	20000124 	.word	0x20000124

00037bc0 <siprintf>:
   37bc0:	b40e      	push	{r1, r2, r3}
   37bc2:	b510      	push	{r4, lr}
   37bc4:	b09d      	sub	sp, #116	; 0x74
   37bc6:	a902      	add	r1, sp, #8
   37bc8:	9002      	str	r0, [sp, #8]
   37bca:	6108      	str	r0, [r1, #16]
   37bcc:	480b      	ldr	r0, [pc, #44]	; (37bfc <siprintf+0x3c>)
   37bce:	2482      	movs	r4, #130	; 0x82
   37bd0:	6088      	str	r0, [r1, #8]
   37bd2:	6148      	str	r0, [r1, #20]
   37bd4:	2001      	movs	r0, #1
   37bd6:	4240      	negs	r0, r0
   37bd8:	ab1f      	add	r3, sp, #124	; 0x7c
   37bda:	81c8      	strh	r0, [r1, #14]
   37bdc:	4808      	ldr	r0, [pc, #32]	; (37c00 <siprintf+0x40>)
   37bde:	cb04      	ldmia	r3!, {r2}
   37be0:	00a4      	lsls	r4, r4, #2
   37be2:	6800      	ldr	r0, [r0, #0]
   37be4:	9301      	str	r3, [sp, #4]
   37be6:	818c      	strh	r4, [r1, #12]
   37be8:	f000 fcdc 	bl	385a4 <_svfiprintf_r>
   37bec:	2300      	movs	r3, #0
   37bee:	9a02      	ldr	r2, [sp, #8]
   37bf0:	7013      	strb	r3, [r2, #0]
   37bf2:	b01d      	add	sp, #116	; 0x74
   37bf4:	bc10      	pop	{r4}
   37bf6:	bc08      	pop	{r3}
   37bf8:	b003      	add	sp, #12
   37bfa:	4718      	bx	r3
   37bfc:	7fffffff 	.word	0x7fffffff
   37c00:	20000124 	.word	0x20000124

00037c04 <strcasecmp>:
   37c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37c06:	0007      	movs	r7, r0
   37c08:	000e      	movs	r6, r1
   37c0a:	783c      	ldrb	r4, [r7, #0]
   37c0c:	f000 fbda 	bl	383c4 <__locale_ctype_ptr>
   37c10:	2203      	movs	r2, #3
   37c12:	1900      	adds	r0, r0, r4
   37c14:	7843      	ldrb	r3, [r0, #1]
   37c16:	4013      	ands	r3, r2
   37c18:	2b01      	cmp	r3, #1
   37c1a:	d100      	bne.n	37c1e <strcasecmp+0x1a>
   37c1c:	3420      	adds	r4, #32
   37c1e:	7835      	ldrb	r5, [r6, #0]
   37c20:	f000 fbd0 	bl	383c4 <__locale_ctype_ptr>
   37c24:	2203      	movs	r2, #3
   37c26:	1940      	adds	r0, r0, r5
   37c28:	7843      	ldrb	r3, [r0, #1]
   37c2a:	4013      	ands	r3, r2
   37c2c:	2b01      	cmp	r3, #1
   37c2e:	d100      	bne.n	37c32 <strcasecmp+0x2e>
   37c30:	3520      	adds	r5, #32
   37c32:	1b60      	subs	r0, r4, r5
   37c34:	d103      	bne.n	37c3e <strcasecmp+0x3a>
   37c36:	3701      	adds	r7, #1
   37c38:	3601      	adds	r6, #1
   37c3a:	2d00      	cmp	r5, #0
   37c3c:	d1e5      	bne.n	37c0a <strcasecmp+0x6>
   37c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00037c40 <strcat>:
   37c40:	0002      	movs	r2, r0
   37c42:	b510      	push	{r4, lr}
   37c44:	7813      	ldrb	r3, [r2, #0]
   37c46:	2b00      	cmp	r3, #0
   37c48:	d105      	bne.n	37c56 <strcat+0x16>
   37c4a:	5ccc      	ldrb	r4, [r1, r3]
   37c4c:	54d4      	strb	r4, [r2, r3]
   37c4e:	3301      	adds	r3, #1
   37c50:	2c00      	cmp	r4, #0
   37c52:	d1fa      	bne.n	37c4a <strcat+0xa>
   37c54:	bd10      	pop	{r4, pc}
   37c56:	3201      	adds	r2, #1
   37c58:	e7f4      	b.n	37c44 <strcat+0x4>

00037c5a <strcmp>:
   37c5a:	7802      	ldrb	r2, [r0, #0]
   37c5c:	780b      	ldrb	r3, [r1, #0]
   37c5e:	2a00      	cmp	r2, #0
   37c60:	d003      	beq.n	37c6a <strcmp+0x10>
   37c62:	3001      	adds	r0, #1
   37c64:	3101      	adds	r1, #1
   37c66:	429a      	cmp	r2, r3
   37c68:	d0f7      	beq.n	37c5a <strcmp>
   37c6a:	1ad0      	subs	r0, r2, r3
   37c6c:	4770      	bx	lr

00037c6e <strcpy>:
   37c6e:	1c03      	adds	r3, r0, #0
   37c70:	780a      	ldrb	r2, [r1, #0]
   37c72:	3101      	adds	r1, #1
   37c74:	701a      	strb	r2, [r3, #0]
   37c76:	3301      	adds	r3, #1
   37c78:	2a00      	cmp	r2, #0
   37c7a:	d1f9      	bne.n	37c70 <strcpy+0x2>
   37c7c:	4770      	bx	lr
	...

00037c80 <strdup>:
   37c80:	b510      	push	{r4, lr}
   37c82:	4b03      	ldr	r3, [pc, #12]	; (37c90 <strdup+0x10>)
   37c84:	0001      	movs	r1, r0
   37c86:	6818      	ldr	r0, [r3, #0]
   37c88:	f000 f804 	bl	37c94 <_strdup_r>
   37c8c:	bd10      	pop	{r4, pc}
   37c8e:	46c0      	nop			; (mov r8, r8)
   37c90:	20000124 	.word	0x20000124

00037c94 <_strdup_r>:
   37c94:	b570      	push	{r4, r5, r6, lr}
   37c96:	0005      	movs	r5, r0
   37c98:	0008      	movs	r0, r1
   37c9a:	000e      	movs	r6, r1
   37c9c:	f000 f80d 	bl	37cba <strlen>
   37ca0:	1c44      	adds	r4, r0, #1
   37ca2:	0021      	movs	r1, r4
   37ca4:	0028      	movs	r0, r5
   37ca6:	f7ff fe7f 	bl	379a8 <_malloc_r>
   37caa:	1e05      	subs	r5, r0, #0
   37cac:	d003      	beq.n	37cb6 <_strdup_r+0x22>
   37cae:	0022      	movs	r2, r4
   37cb0:	0031      	movs	r1, r6
   37cb2:	f7ff fe0b 	bl	378cc <memcpy>
   37cb6:	0028      	movs	r0, r5
   37cb8:	bd70      	pop	{r4, r5, r6, pc}

00037cba <strlen>:
   37cba:	2300      	movs	r3, #0
   37cbc:	5cc2      	ldrb	r2, [r0, r3]
   37cbe:	3301      	adds	r3, #1
   37cc0:	2a00      	cmp	r2, #0
   37cc2:	d1fb      	bne.n	37cbc <strlen+0x2>
   37cc4:	1e58      	subs	r0, r3, #1
   37cc6:	4770      	bx	lr

00037cc8 <strncmp>:
   37cc8:	2300      	movs	r3, #0
   37cca:	b530      	push	{r4, r5, lr}
   37ccc:	429a      	cmp	r2, r3
   37cce:	d00a      	beq.n	37ce6 <strncmp+0x1e>
   37cd0:	3a01      	subs	r2, #1
   37cd2:	5cc4      	ldrb	r4, [r0, r3]
   37cd4:	5ccd      	ldrb	r5, [r1, r3]
   37cd6:	42ac      	cmp	r4, r5
   37cd8:	d104      	bne.n	37ce4 <strncmp+0x1c>
   37cda:	429a      	cmp	r2, r3
   37cdc:	d002      	beq.n	37ce4 <strncmp+0x1c>
   37cde:	3301      	adds	r3, #1
   37ce0:	2c00      	cmp	r4, #0
   37ce2:	d1f6      	bne.n	37cd2 <strncmp+0xa>
   37ce4:	1b63      	subs	r3, r4, r5
   37ce6:	0018      	movs	r0, r3
   37ce8:	bd30      	pop	{r4, r5, pc}

00037cea <strncpy>:
   37cea:	b570      	push	{r4, r5, r6, lr}
   37cec:	0004      	movs	r4, r0
   37cee:	2a00      	cmp	r2, #0
   37cf0:	d100      	bne.n	37cf4 <strncpy+0xa>
   37cf2:	bd70      	pop	{r4, r5, r6, pc}
   37cf4:	780d      	ldrb	r5, [r1, #0]
   37cf6:	1e56      	subs	r6, r2, #1
   37cf8:	1c63      	adds	r3, r4, #1
   37cfa:	7025      	strb	r5, [r4, #0]
   37cfc:	3101      	adds	r1, #1
   37cfe:	2d00      	cmp	r5, #0
   37d00:	d105      	bne.n	37d0e <strncpy+0x24>
   37d02:	18a4      	adds	r4, r4, r2
   37d04:	429c      	cmp	r4, r3
   37d06:	d0f4      	beq.n	37cf2 <strncpy+0x8>
   37d08:	701d      	strb	r5, [r3, #0]
   37d0a:	3301      	adds	r3, #1
   37d0c:	e7fa      	b.n	37d04 <strncpy+0x1a>
   37d0e:	001c      	movs	r4, r3
   37d10:	0032      	movs	r2, r6
   37d12:	e7ec      	b.n	37cee <strncpy+0x4>

00037d14 <strrchr>:
   37d14:	b570      	push	{r4, r5, r6, lr}
   37d16:	000d      	movs	r5, r1
   37d18:	2400      	movs	r4, #0
   37d1a:	2900      	cmp	r1, #0
   37d1c:	d105      	bne.n	37d2a <strrchr+0x16>
   37d1e:	f000 ff19 	bl	38b54 <strchr>
   37d22:	0004      	movs	r4, r0
   37d24:	e006      	b.n	37d34 <strrchr+0x20>
   37d26:	001c      	movs	r4, r3
   37d28:	1c58      	adds	r0, r3, #1
   37d2a:	0029      	movs	r1, r5
   37d2c:	f000 ff12 	bl	38b54 <strchr>
   37d30:	1e03      	subs	r3, r0, #0
   37d32:	d1f8      	bne.n	37d26 <strrchr+0x12>
   37d34:	0020      	movs	r0, r4
   37d36:	bd70      	pop	{r4, r5, r6, pc}

00037d38 <strstr>:
   37d38:	b510      	push	{r4, lr}
   37d3a:	0002      	movs	r2, r0
   37d3c:	7800      	ldrb	r0, [r0, #0]
   37d3e:	2800      	cmp	r0, #0
   37d40:	d104      	bne.n	37d4c <strstr+0x14>
   37d42:	7809      	ldrb	r1, [r1, #0]
   37d44:	2900      	cmp	r1, #0
   37d46:	d00d      	beq.n	37d64 <strstr+0x2c>
   37d48:	bd10      	pop	{r4, pc}
   37d4a:	3201      	adds	r2, #1
   37d4c:	7810      	ldrb	r0, [r2, #0]
   37d4e:	2800      	cmp	r0, #0
   37d50:	d0fa      	beq.n	37d48 <strstr+0x10>
   37d52:	2300      	movs	r3, #0
   37d54:	5cc8      	ldrb	r0, [r1, r3]
   37d56:	2800      	cmp	r0, #0
   37d58:	d004      	beq.n	37d64 <strstr+0x2c>
   37d5a:	5cd4      	ldrb	r4, [r2, r3]
   37d5c:	4284      	cmp	r4, r0
   37d5e:	d1f4      	bne.n	37d4a <strstr+0x12>
   37d60:	3301      	adds	r3, #1
   37d62:	e7f7      	b.n	37d54 <strstr+0x1c>
   37d64:	0010      	movs	r0, r2
   37d66:	e7ef      	b.n	37d48 <strstr+0x10>

00037d68 <_strtol_l.isra.0>:
   37d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   37d6a:	001f      	movs	r7, r3
   37d6c:	000e      	movs	r6, r1
   37d6e:	b087      	sub	sp, #28
   37d70:	9005      	str	r0, [sp, #20]
   37d72:	9103      	str	r1, [sp, #12]
   37d74:	9202      	str	r2, [sp, #8]
   37d76:	980c      	ldr	r0, [sp, #48]	; 0x30
   37d78:	7834      	ldrb	r4, [r6, #0]
   37d7a:	f000 fb20 	bl	383be <__locale_ctype_ptr_l>
   37d7e:	2208      	movs	r2, #8
   37d80:	1900      	adds	r0, r0, r4
   37d82:	7843      	ldrb	r3, [r0, #1]
   37d84:	1c75      	adds	r5, r6, #1
   37d86:	4013      	ands	r3, r2
   37d88:	d10c      	bne.n	37da4 <_strtol_l.isra.0+0x3c>
   37d8a:	2c2d      	cmp	r4, #45	; 0x2d
   37d8c:	d10c      	bne.n	37da8 <_strtol_l.isra.0+0x40>
   37d8e:	3301      	adds	r3, #1
   37d90:	782c      	ldrb	r4, [r5, #0]
   37d92:	9301      	str	r3, [sp, #4]
   37d94:	1cb5      	adds	r5, r6, #2
   37d96:	2f00      	cmp	r7, #0
   37d98:	d00c      	beq.n	37db4 <_strtol_l.isra.0+0x4c>
   37d9a:	2f10      	cmp	r7, #16
   37d9c:	d114      	bne.n	37dc8 <_strtol_l.isra.0+0x60>
   37d9e:	2c30      	cmp	r4, #48	; 0x30
   37da0:	d00a      	beq.n	37db8 <_strtol_l.isra.0+0x50>
   37da2:	e011      	b.n	37dc8 <_strtol_l.isra.0+0x60>
   37da4:	002e      	movs	r6, r5
   37da6:	e7e6      	b.n	37d76 <_strtol_l.isra.0+0xe>
   37da8:	9301      	str	r3, [sp, #4]
   37daa:	2c2b      	cmp	r4, #43	; 0x2b
   37dac:	d1f3      	bne.n	37d96 <_strtol_l.isra.0+0x2e>
   37dae:	782c      	ldrb	r4, [r5, #0]
   37db0:	1cb5      	adds	r5, r6, #2
   37db2:	e7f0      	b.n	37d96 <_strtol_l.isra.0+0x2e>
   37db4:	2c30      	cmp	r4, #48	; 0x30
   37db6:	d12f      	bne.n	37e18 <_strtol_l.isra.0+0xb0>
   37db8:	2220      	movs	r2, #32
   37dba:	782b      	ldrb	r3, [r5, #0]
   37dbc:	4393      	bics	r3, r2
   37dbe:	2b58      	cmp	r3, #88	; 0x58
   37dc0:	d151      	bne.n	37e66 <_strtol_l.isra.0+0xfe>
   37dc2:	2710      	movs	r7, #16
   37dc4:	786c      	ldrb	r4, [r5, #1]
   37dc6:	3502      	adds	r5, #2
   37dc8:	9b01      	ldr	r3, [sp, #4]
   37dca:	4a29      	ldr	r2, [pc, #164]	; (37e70 <_strtol_l.isra.0+0x108>)
   37dcc:	0039      	movs	r1, r7
   37dce:	189e      	adds	r6, r3, r2
   37dd0:	0030      	movs	r0, r6
   37dd2:	f7fd fbbf 	bl	35554 <__aeabi_uidivmod>
   37dd6:	0030      	movs	r0, r6
   37dd8:	9104      	str	r1, [sp, #16]
   37dda:	0039      	movs	r1, r7
   37ddc:	f7fd fb34 	bl	35448 <__udivsi3>
   37de0:	2101      	movs	r1, #1
   37de2:	2300      	movs	r3, #0
   37de4:	4249      	negs	r1, r1
   37de6:	0002      	movs	r2, r0
   37de8:	468c      	mov	ip, r1
   37dea:	0018      	movs	r0, r3
   37dec:	0021      	movs	r1, r4
   37dee:	3930      	subs	r1, #48	; 0x30
   37df0:	2909      	cmp	r1, #9
   37df2:	d813      	bhi.n	37e1c <_strtol_l.isra.0+0xb4>
   37df4:	000c      	movs	r4, r1
   37df6:	42a7      	cmp	r7, r4
   37df8:	dd1c      	ble.n	37e34 <_strtol_l.isra.0+0xcc>
   37dfa:	1c59      	adds	r1, r3, #1
   37dfc:	d009      	beq.n	37e12 <_strtol_l.isra.0+0xaa>
   37dfe:	4663      	mov	r3, ip
   37e00:	4282      	cmp	r2, r0
   37e02:	d306      	bcc.n	37e12 <_strtol_l.isra.0+0xaa>
   37e04:	d102      	bne.n	37e0c <_strtol_l.isra.0+0xa4>
   37e06:	9904      	ldr	r1, [sp, #16]
   37e08:	42a1      	cmp	r1, r4
   37e0a:	db02      	blt.n	37e12 <_strtol_l.isra.0+0xaa>
   37e0c:	2301      	movs	r3, #1
   37e0e:	4378      	muls	r0, r7
   37e10:	1820      	adds	r0, r4, r0
   37e12:	782c      	ldrb	r4, [r5, #0]
   37e14:	3501      	adds	r5, #1
   37e16:	e7e9      	b.n	37dec <_strtol_l.isra.0+0x84>
   37e18:	270a      	movs	r7, #10
   37e1a:	e7d5      	b.n	37dc8 <_strtol_l.isra.0+0x60>
   37e1c:	0021      	movs	r1, r4
   37e1e:	3941      	subs	r1, #65	; 0x41
   37e20:	2919      	cmp	r1, #25
   37e22:	d801      	bhi.n	37e28 <_strtol_l.isra.0+0xc0>
   37e24:	3c37      	subs	r4, #55	; 0x37
   37e26:	e7e6      	b.n	37df6 <_strtol_l.isra.0+0x8e>
   37e28:	0021      	movs	r1, r4
   37e2a:	3961      	subs	r1, #97	; 0x61
   37e2c:	2919      	cmp	r1, #25
   37e2e:	d801      	bhi.n	37e34 <_strtol_l.isra.0+0xcc>
   37e30:	3c57      	subs	r4, #87	; 0x57
   37e32:	e7e0      	b.n	37df6 <_strtol_l.isra.0+0x8e>
   37e34:	1c5a      	adds	r2, r3, #1
   37e36:	d108      	bne.n	37e4a <_strtol_l.isra.0+0xe2>
   37e38:	9a05      	ldr	r2, [sp, #20]
   37e3a:	3323      	adds	r3, #35	; 0x23
   37e3c:	6013      	str	r3, [r2, #0]
   37e3e:	9b02      	ldr	r3, [sp, #8]
   37e40:	0030      	movs	r0, r6
   37e42:	2b00      	cmp	r3, #0
   37e44:	d10b      	bne.n	37e5e <_strtol_l.isra.0+0xf6>
   37e46:	b007      	add	sp, #28
   37e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37e4a:	9a01      	ldr	r2, [sp, #4]
   37e4c:	2a00      	cmp	r2, #0
   37e4e:	d000      	beq.n	37e52 <_strtol_l.isra.0+0xea>
   37e50:	4240      	negs	r0, r0
   37e52:	9a02      	ldr	r2, [sp, #8]
   37e54:	2a00      	cmp	r2, #0
   37e56:	d0f6      	beq.n	37e46 <_strtol_l.isra.0+0xde>
   37e58:	9a03      	ldr	r2, [sp, #12]
   37e5a:	2b00      	cmp	r3, #0
   37e5c:	d000      	beq.n	37e60 <_strtol_l.isra.0+0xf8>
   37e5e:	1e6a      	subs	r2, r5, #1
   37e60:	9b02      	ldr	r3, [sp, #8]
   37e62:	601a      	str	r2, [r3, #0]
   37e64:	e7ef      	b.n	37e46 <_strtol_l.isra.0+0xde>
   37e66:	2430      	movs	r4, #48	; 0x30
   37e68:	2f00      	cmp	r7, #0
   37e6a:	d1ad      	bne.n	37dc8 <_strtol_l.isra.0+0x60>
   37e6c:	3708      	adds	r7, #8
   37e6e:	e7ab      	b.n	37dc8 <_strtol_l.isra.0+0x60>
   37e70:	7fffffff 	.word	0x7fffffff

00037e74 <strtol>:
   37e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   37e76:	0013      	movs	r3, r2
   37e78:	4a06      	ldr	r2, [pc, #24]	; (37e94 <strtol+0x20>)
   37e7a:	0005      	movs	r5, r0
   37e7c:	6810      	ldr	r0, [r2, #0]
   37e7e:	6a04      	ldr	r4, [r0, #32]
   37e80:	2c00      	cmp	r4, #0
   37e82:	d100      	bne.n	37e86 <strtol+0x12>
   37e84:	4c04      	ldr	r4, [pc, #16]	; (37e98 <strtol+0x24>)
   37e86:	000a      	movs	r2, r1
   37e88:	9400      	str	r4, [sp, #0]
   37e8a:	0029      	movs	r1, r5
   37e8c:	f7ff ff6c 	bl	37d68 <_strtol_l.isra.0>
   37e90:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   37e92:	46c0      	nop			; (mov r8, r8)
   37e94:	20000124 	.word	0x20000124
   37e98:	20000188 	.word	0x20000188

00037e9c <_vsniprintf_r>:
   37e9c:	b530      	push	{r4, r5, lr}
   37e9e:	0014      	movs	r4, r2
   37ea0:	b09b      	sub	sp, #108	; 0x6c
   37ea2:	0005      	movs	r5, r0
   37ea4:	001a      	movs	r2, r3
   37ea6:	2c00      	cmp	r4, #0
   37ea8:	da05      	bge.n	37eb6 <_vsniprintf_r+0x1a>
   37eaa:	238b      	movs	r3, #139	; 0x8b
   37eac:	6003      	str	r3, [r0, #0]
   37eae:	2001      	movs	r0, #1
   37eb0:	4240      	negs	r0, r0
   37eb2:	b01b      	add	sp, #108	; 0x6c
   37eb4:	bd30      	pop	{r4, r5, pc}
   37eb6:	2382      	movs	r3, #130	; 0x82
   37eb8:	4668      	mov	r0, sp
   37eba:	009b      	lsls	r3, r3, #2
   37ebc:	8183      	strh	r3, [r0, #12]
   37ebe:	2300      	movs	r3, #0
   37ec0:	9100      	str	r1, [sp, #0]
   37ec2:	9104      	str	r1, [sp, #16]
   37ec4:	429c      	cmp	r4, r3
   37ec6:	d000      	beq.n	37eca <_vsniprintf_r+0x2e>
   37ec8:	1e63      	subs	r3, r4, #1
   37eca:	9302      	str	r3, [sp, #8]
   37ecc:	9305      	str	r3, [sp, #20]
   37ece:	2301      	movs	r3, #1
   37ed0:	4669      	mov	r1, sp
   37ed2:	425b      	negs	r3, r3
   37ed4:	81cb      	strh	r3, [r1, #14]
   37ed6:	0028      	movs	r0, r5
   37ed8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   37eda:	f000 fb63 	bl	385a4 <_svfiprintf_r>
   37ede:	1c43      	adds	r3, r0, #1
   37ee0:	da01      	bge.n	37ee6 <_vsniprintf_r+0x4a>
   37ee2:	238b      	movs	r3, #139	; 0x8b
   37ee4:	602b      	str	r3, [r5, #0]
   37ee6:	2c00      	cmp	r4, #0
   37ee8:	d0e3      	beq.n	37eb2 <_vsniprintf_r+0x16>
   37eea:	2300      	movs	r3, #0
   37eec:	9a00      	ldr	r2, [sp, #0]
   37eee:	7013      	strb	r3, [r2, #0]
   37ef0:	e7df      	b.n	37eb2 <_vsniprintf_r+0x16>
	...

00037ef4 <vsniprintf>:
   37ef4:	b507      	push	{r0, r1, r2, lr}
   37ef6:	9300      	str	r3, [sp, #0]
   37ef8:	0013      	movs	r3, r2
   37efa:	000a      	movs	r2, r1
   37efc:	0001      	movs	r1, r0
   37efe:	4802      	ldr	r0, [pc, #8]	; (37f08 <vsniprintf+0x14>)
   37f00:	6800      	ldr	r0, [r0, #0]
   37f02:	f7ff ffcb 	bl	37e9c <_vsniprintf_r>
   37f06:	bd0e      	pop	{r1, r2, r3, pc}
   37f08:	20000124 	.word	0x20000124

00037f0c <__swbuf_r>:
   37f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37f0e:	0005      	movs	r5, r0
   37f10:	000e      	movs	r6, r1
   37f12:	0014      	movs	r4, r2
   37f14:	2800      	cmp	r0, #0
   37f16:	d004      	beq.n	37f22 <__swbuf_r+0x16>
   37f18:	6983      	ldr	r3, [r0, #24]
   37f1a:	2b00      	cmp	r3, #0
   37f1c:	d101      	bne.n	37f22 <__swbuf_r+0x16>
   37f1e:	f000 f9b9 	bl	38294 <__sinit>
   37f22:	4b22      	ldr	r3, [pc, #136]	; (37fac <__swbuf_r+0xa0>)
   37f24:	429c      	cmp	r4, r3
   37f26:	d12d      	bne.n	37f84 <__swbuf_r+0x78>
   37f28:	686c      	ldr	r4, [r5, #4]
   37f2a:	69a3      	ldr	r3, [r4, #24]
   37f2c:	60a3      	str	r3, [r4, #8]
   37f2e:	89a3      	ldrh	r3, [r4, #12]
   37f30:	071b      	lsls	r3, r3, #28
   37f32:	d531      	bpl.n	37f98 <__swbuf_r+0x8c>
   37f34:	6923      	ldr	r3, [r4, #16]
   37f36:	2b00      	cmp	r3, #0
   37f38:	d02e      	beq.n	37f98 <__swbuf_r+0x8c>
   37f3a:	6823      	ldr	r3, [r4, #0]
   37f3c:	6922      	ldr	r2, [r4, #16]
   37f3e:	b2f7      	uxtb	r7, r6
   37f40:	1a98      	subs	r0, r3, r2
   37f42:	6963      	ldr	r3, [r4, #20]
   37f44:	b2f6      	uxtb	r6, r6
   37f46:	4298      	cmp	r0, r3
   37f48:	db05      	blt.n	37f56 <__swbuf_r+0x4a>
   37f4a:	0021      	movs	r1, r4
   37f4c:	0028      	movs	r0, r5
   37f4e:	f000 f933 	bl	381b8 <_fflush_r>
   37f52:	2800      	cmp	r0, #0
   37f54:	d126      	bne.n	37fa4 <__swbuf_r+0x98>
   37f56:	68a3      	ldr	r3, [r4, #8]
   37f58:	3001      	adds	r0, #1
   37f5a:	3b01      	subs	r3, #1
   37f5c:	60a3      	str	r3, [r4, #8]
   37f5e:	6823      	ldr	r3, [r4, #0]
   37f60:	1c5a      	adds	r2, r3, #1
   37f62:	6022      	str	r2, [r4, #0]
   37f64:	701f      	strb	r7, [r3, #0]
   37f66:	6963      	ldr	r3, [r4, #20]
   37f68:	4298      	cmp	r0, r3
   37f6a:	d004      	beq.n	37f76 <__swbuf_r+0x6a>
   37f6c:	89a3      	ldrh	r3, [r4, #12]
   37f6e:	07db      	lsls	r3, r3, #31
   37f70:	d51a      	bpl.n	37fa8 <__swbuf_r+0x9c>
   37f72:	2e0a      	cmp	r6, #10
   37f74:	d118      	bne.n	37fa8 <__swbuf_r+0x9c>
   37f76:	0021      	movs	r1, r4
   37f78:	0028      	movs	r0, r5
   37f7a:	f000 f91d 	bl	381b8 <_fflush_r>
   37f7e:	2800      	cmp	r0, #0
   37f80:	d012      	beq.n	37fa8 <__swbuf_r+0x9c>
   37f82:	e00f      	b.n	37fa4 <__swbuf_r+0x98>
   37f84:	4b0a      	ldr	r3, [pc, #40]	; (37fb0 <__swbuf_r+0xa4>)
   37f86:	429c      	cmp	r4, r3
   37f88:	d101      	bne.n	37f8e <__swbuf_r+0x82>
   37f8a:	68ac      	ldr	r4, [r5, #8]
   37f8c:	e7cd      	b.n	37f2a <__swbuf_r+0x1e>
   37f8e:	4b09      	ldr	r3, [pc, #36]	; (37fb4 <__swbuf_r+0xa8>)
   37f90:	429c      	cmp	r4, r3
   37f92:	d1ca      	bne.n	37f2a <__swbuf_r+0x1e>
   37f94:	68ec      	ldr	r4, [r5, #12]
   37f96:	e7c8      	b.n	37f2a <__swbuf_r+0x1e>
   37f98:	0021      	movs	r1, r4
   37f9a:	0028      	movs	r0, r5
   37f9c:	f000 f80c 	bl	37fb8 <__swsetup_r>
   37fa0:	2800      	cmp	r0, #0
   37fa2:	d0ca      	beq.n	37f3a <__swbuf_r+0x2e>
   37fa4:	2601      	movs	r6, #1
   37fa6:	4276      	negs	r6, r6
   37fa8:	0030      	movs	r0, r6
   37faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37fac:	0003d358 	.word	0x0003d358
   37fb0:	0003d378 	.word	0x0003d378
   37fb4:	0003d338 	.word	0x0003d338

00037fb8 <__swsetup_r>:
   37fb8:	4b36      	ldr	r3, [pc, #216]	; (38094 <__swsetup_r+0xdc>)
   37fba:	b570      	push	{r4, r5, r6, lr}
   37fbc:	681d      	ldr	r5, [r3, #0]
   37fbe:	0006      	movs	r6, r0
   37fc0:	000c      	movs	r4, r1
   37fc2:	2d00      	cmp	r5, #0
   37fc4:	d005      	beq.n	37fd2 <__swsetup_r+0x1a>
   37fc6:	69ab      	ldr	r3, [r5, #24]
   37fc8:	2b00      	cmp	r3, #0
   37fca:	d102      	bne.n	37fd2 <__swsetup_r+0x1a>
   37fcc:	0028      	movs	r0, r5
   37fce:	f000 f961 	bl	38294 <__sinit>
   37fd2:	4b31      	ldr	r3, [pc, #196]	; (38098 <__swsetup_r+0xe0>)
   37fd4:	429c      	cmp	r4, r3
   37fd6:	d10f      	bne.n	37ff8 <__swsetup_r+0x40>
   37fd8:	686c      	ldr	r4, [r5, #4]
   37fda:	230c      	movs	r3, #12
   37fdc:	5ee2      	ldrsh	r2, [r4, r3]
   37fde:	b293      	uxth	r3, r2
   37fe0:	0719      	lsls	r1, r3, #28
   37fe2:	d42d      	bmi.n	38040 <__swsetup_r+0x88>
   37fe4:	06d9      	lsls	r1, r3, #27
   37fe6:	d411      	bmi.n	3800c <__swsetup_r+0x54>
   37fe8:	2309      	movs	r3, #9
   37fea:	2001      	movs	r0, #1
   37fec:	6033      	str	r3, [r6, #0]
   37fee:	3337      	adds	r3, #55	; 0x37
   37ff0:	4313      	orrs	r3, r2
   37ff2:	81a3      	strh	r3, [r4, #12]
   37ff4:	4240      	negs	r0, r0
   37ff6:	bd70      	pop	{r4, r5, r6, pc}
   37ff8:	4b28      	ldr	r3, [pc, #160]	; (3809c <__swsetup_r+0xe4>)
   37ffa:	429c      	cmp	r4, r3
   37ffc:	d101      	bne.n	38002 <__swsetup_r+0x4a>
   37ffe:	68ac      	ldr	r4, [r5, #8]
   38000:	e7eb      	b.n	37fda <__swsetup_r+0x22>
   38002:	4b27      	ldr	r3, [pc, #156]	; (380a0 <__swsetup_r+0xe8>)
   38004:	429c      	cmp	r4, r3
   38006:	d1e8      	bne.n	37fda <__swsetup_r+0x22>
   38008:	68ec      	ldr	r4, [r5, #12]
   3800a:	e7e6      	b.n	37fda <__swsetup_r+0x22>
   3800c:	075b      	lsls	r3, r3, #29
   3800e:	d513      	bpl.n	38038 <__swsetup_r+0x80>
   38010:	6b61      	ldr	r1, [r4, #52]	; 0x34
   38012:	2900      	cmp	r1, #0
   38014:	d008      	beq.n	38028 <__swsetup_r+0x70>
   38016:	0023      	movs	r3, r4
   38018:	3344      	adds	r3, #68	; 0x44
   3801a:	4299      	cmp	r1, r3
   3801c:	d002      	beq.n	38024 <__swsetup_r+0x6c>
   3801e:	0030      	movs	r0, r6
   38020:	f7ff fc78 	bl	37914 <_free_r>
   38024:	2300      	movs	r3, #0
   38026:	6363      	str	r3, [r4, #52]	; 0x34
   38028:	2224      	movs	r2, #36	; 0x24
   3802a:	89a3      	ldrh	r3, [r4, #12]
   3802c:	4393      	bics	r3, r2
   3802e:	81a3      	strh	r3, [r4, #12]
   38030:	2300      	movs	r3, #0
   38032:	6063      	str	r3, [r4, #4]
   38034:	6923      	ldr	r3, [r4, #16]
   38036:	6023      	str	r3, [r4, #0]
   38038:	2308      	movs	r3, #8
   3803a:	89a2      	ldrh	r2, [r4, #12]
   3803c:	4313      	orrs	r3, r2
   3803e:	81a3      	strh	r3, [r4, #12]
   38040:	6923      	ldr	r3, [r4, #16]
   38042:	2b00      	cmp	r3, #0
   38044:	d10b      	bne.n	3805e <__swsetup_r+0xa6>
   38046:	21a0      	movs	r1, #160	; 0xa0
   38048:	2280      	movs	r2, #128	; 0x80
   3804a:	89a3      	ldrh	r3, [r4, #12]
   3804c:	0089      	lsls	r1, r1, #2
   3804e:	0092      	lsls	r2, r2, #2
   38050:	400b      	ands	r3, r1
   38052:	4293      	cmp	r3, r2
   38054:	d003      	beq.n	3805e <__swsetup_r+0xa6>
   38056:	0021      	movs	r1, r4
   38058:	0030      	movs	r0, r6
   3805a:	f000 f9e9 	bl	38430 <__smakebuf_r>
   3805e:	2301      	movs	r3, #1
   38060:	89a2      	ldrh	r2, [r4, #12]
   38062:	4013      	ands	r3, r2
   38064:	d011      	beq.n	3808a <__swsetup_r+0xd2>
   38066:	2300      	movs	r3, #0
   38068:	60a3      	str	r3, [r4, #8]
   3806a:	6963      	ldr	r3, [r4, #20]
   3806c:	425b      	negs	r3, r3
   3806e:	61a3      	str	r3, [r4, #24]
   38070:	2000      	movs	r0, #0
   38072:	6923      	ldr	r3, [r4, #16]
   38074:	4283      	cmp	r3, r0
   38076:	d1be      	bne.n	37ff6 <__swsetup_r+0x3e>
   38078:	230c      	movs	r3, #12
   3807a:	5ee2      	ldrsh	r2, [r4, r3]
   3807c:	0613      	lsls	r3, r2, #24
   3807e:	d5ba      	bpl.n	37ff6 <__swsetup_r+0x3e>
   38080:	2340      	movs	r3, #64	; 0x40
   38082:	4313      	orrs	r3, r2
   38084:	81a3      	strh	r3, [r4, #12]
   38086:	3801      	subs	r0, #1
   38088:	e7b5      	b.n	37ff6 <__swsetup_r+0x3e>
   3808a:	0792      	lsls	r2, r2, #30
   3808c:	d400      	bmi.n	38090 <__swsetup_r+0xd8>
   3808e:	6963      	ldr	r3, [r4, #20]
   38090:	60a3      	str	r3, [r4, #8]
   38092:	e7ed      	b.n	38070 <__swsetup_r+0xb8>
   38094:	20000124 	.word	0x20000124
   38098:	0003d358 	.word	0x0003d358
   3809c:	0003d378 	.word	0x0003d378
   380a0:	0003d338 	.word	0x0003d338

000380a4 <__sflush_r>:
   380a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   380a6:	898a      	ldrh	r2, [r1, #12]
   380a8:	0005      	movs	r5, r0
   380aa:	000c      	movs	r4, r1
   380ac:	0713      	lsls	r3, r2, #28
   380ae:	d460      	bmi.n	38172 <__sflush_r+0xce>
   380b0:	684b      	ldr	r3, [r1, #4]
   380b2:	2b00      	cmp	r3, #0
   380b4:	dc04      	bgt.n	380c0 <__sflush_r+0x1c>
   380b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   380b8:	2b00      	cmp	r3, #0
   380ba:	dc01      	bgt.n	380c0 <__sflush_r+0x1c>
   380bc:	2000      	movs	r0, #0
   380be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   380c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   380c2:	2f00      	cmp	r7, #0
   380c4:	d0fa      	beq.n	380bc <__sflush_r+0x18>
   380c6:	2300      	movs	r3, #0
   380c8:	682e      	ldr	r6, [r5, #0]
   380ca:	602b      	str	r3, [r5, #0]
   380cc:	2380      	movs	r3, #128	; 0x80
   380ce:	015b      	lsls	r3, r3, #5
   380d0:	401a      	ands	r2, r3
   380d2:	d034      	beq.n	3813e <__sflush_r+0x9a>
   380d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
   380d6:	89a3      	ldrh	r3, [r4, #12]
   380d8:	075b      	lsls	r3, r3, #29
   380da:	d506      	bpl.n	380ea <__sflush_r+0x46>
   380dc:	6863      	ldr	r3, [r4, #4]
   380de:	1ac0      	subs	r0, r0, r3
   380e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   380e2:	2b00      	cmp	r3, #0
   380e4:	d001      	beq.n	380ea <__sflush_r+0x46>
   380e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   380e8:	1ac0      	subs	r0, r0, r3
   380ea:	0002      	movs	r2, r0
   380ec:	6a21      	ldr	r1, [r4, #32]
   380ee:	2300      	movs	r3, #0
   380f0:	0028      	movs	r0, r5
   380f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   380f4:	47b8      	blx	r7
   380f6:	89a1      	ldrh	r1, [r4, #12]
   380f8:	1c43      	adds	r3, r0, #1
   380fa:	d106      	bne.n	3810a <__sflush_r+0x66>
   380fc:	682b      	ldr	r3, [r5, #0]
   380fe:	2b1d      	cmp	r3, #29
   38100:	d831      	bhi.n	38166 <__sflush_r+0xc2>
   38102:	4a2c      	ldr	r2, [pc, #176]	; (381b4 <__sflush_r+0x110>)
   38104:	40da      	lsrs	r2, r3
   38106:	07d3      	lsls	r3, r2, #31
   38108:	d52d      	bpl.n	38166 <__sflush_r+0xc2>
   3810a:	2300      	movs	r3, #0
   3810c:	6063      	str	r3, [r4, #4]
   3810e:	6923      	ldr	r3, [r4, #16]
   38110:	6023      	str	r3, [r4, #0]
   38112:	04cb      	lsls	r3, r1, #19
   38114:	d505      	bpl.n	38122 <__sflush_r+0x7e>
   38116:	1c43      	adds	r3, r0, #1
   38118:	d102      	bne.n	38120 <__sflush_r+0x7c>
   3811a:	682b      	ldr	r3, [r5, #0]
   3811c:	2b00      	cmp	r3, #0
   3811e:	d100      	bne.n	38122 <__sflush_r+0x7e>
   38120:	6560      	str	r0, [r4, #84]	; 0x54
   38122:	6b61      	ldr	r1, [r4, #52]	; 0x34
   38124:	602e      	str	r6, [r5, #0]
   38126:	2900      	cmp	r1, #0
   38128:	d0c8      	beq.n	380bc <__sflush_r+0x18>
   3812a:	0023      	movs	r3, r4
   3812c:	3344      	adds	r3, #68	; 0x44
   3812e:	4299      	cmp	r1, r3
   38130:	d002      	beq.n	38138 <__sflush_r+0x94>
   38132:	0028      	movs	r0, r5
   38134:	f7ff fbee 	bl	37914 <_free_r>
   38138:	2000      	movs	r0, #0
   3813a:	6360      	str	r0, [r4, #52]	; 0x34
   3813c:	e7bf      	b.n	380be <__sflush_r+0x1a>
   3813e:	2301      	movs	r3, #1
   38140:	6a21      	ldr	r1, [r4, #32]
   38142:	0028      	movs	r0, r5
   38144:	47b8      	blx	r7
   38146:	1c43      	adds	r3, r0, #1
   38148:	d1c5      	bne.n	380d6 <__sflush_r+0x32>
   3814a:	682b      	ldr	r3, [r5, #0]
   3814c:	2b00      	cmp	r3, #0
   3814e:	d0c2      	beq.n	380d6 <__sflush_r+0x32>
   38150:	2b1d      	cmp	r3, #29
   38152:	d001      	beq.n	38158 <__sflush_r+0xb4>
   38154:	2b16      	cmp	r3, #22
   38156:	d101      	bne.n	3815c <__sflush_r+0xb8>
   38158:	602e      	str	r6, [r5, #0]
   3815a:	e7af      	b.n	380bc <__sflush_r+0x18>
   3815c:	2340      	movs	r3, #64	; 0x40
   3815e:	89a2      	ldrh	r2, [r4, #12]
   38160:	4313      	orrs	r3, r2
   38162:	81a3      	strh	r3, [r4, #12]
   38164:	e7ab      	b.n	380be <__sflush_r+0x1a>
   38166:	2340      	movs	r3, #64	; 0x40
   38168:	430b      	orrs	r3, r1
   3816a:	2001      	movs	r0, #1
   3816c:	81a3      	strh	r3, [r4, #12]
   3816e:	4240      	negs	r0, r0
   38170:	e7a5      	b.n	380be <__sflush_r+0x1a>
   38172:	690f      	ldr	r7, [r1, #16]
   38174:	2f00      	cmp	r7, #0
   38176:	d0a1      	beq.n	380bc <__sflush_r+0x18>
   38178:	680b      	ldr	r3, [r1, #0]
   3817a:	600f      	str	r7, [r1, #0]
   3817c:	1bdb      	subs	r3, r3, r7
   3817e:	9301      	str	r3, [sp, #4]
   38180:	2300      	movs	r3, #0
   38182:	0792      	lsls	r2, r2, #30
   38184:	d100      	bne.n	38188 <__sflush_r+0xe4>
   38186:	694b      	ldr	r3, [r1, #20]
   38188:	60a3      	str	r3, [r4, #8]
   3818a:	9b01      	ldr	r3, [sp, #4]
   3818c:	2b00      	cmp	r3, #0
   3818e:	dc00      	bgt.n	38192 <__sflush_r+0xee>
   38190:	e794      	b.n	380bc <__sflush_r+0x18>
   38192:	9b01      	ldr	r3, [sp, #4]
   38194:	003a      	movs	r2, r7
   38196:	6a21      	ldr	r1, [r4, #32]
   38198:	0028      	movs	r0, r5
   3819a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3819c:	47b0      	blx	r6
   3819e:	2800      	cmp	r0, #0
   381a0:	dc03      	bgt.n	381aa <__sflush_r+0x106>
   381a2:	2340      	movs	r3, #64	; 0x40
   381a4:	89a2      	ldrh	r2, [r4, #12]
   381a6:	4313      	orrs	r3, r2
   381a8:	e7df      	b.n	3816a <__sflush_r+0xc6>
   381aa:	9b01      	ldr	r3, [sp, #4]
   381ac:	183f      	adds	r7, r7, r0
   381ae:	1a1b      	subs	r3, r3, r0
   381b0:	9301      	str	r3, [sp, #4]
   381b2:	e7ea      	b.n	3818a <__sflush_r+0xe6>
   381b4:	20400001 	.word	0x20400001

000381b8 <_fflush_r>:
   381b8:	690b      	ldr	r3, [r1, #16]
   381ba:	b570      	push	{r4, r5, r6, lr}
   381bc:	0005      	movs	r5, r0
   381be:	000c      	movs	r4, r1
   381c0:	2b00      	cmp	r3, #0
   381c2:	d101      	bne.n	381c8 <_fflush_r+0x10>
   381c4:	2000      	movs	r0, #0
   381c6:	bd70      	pop	{r4, r5, r6, pc}
   381c8:	2800      	cmp	r0, #0
   381ca:	d004      	beq.n	381d6 <_fflush_r+0x1e>
   381cc:	6983      	ldr	r3, [r0, #24]
   381ce:	2b00      	cmp	r3, #0
   381d0:	d101      	bne.n	381d6 <_fflush_r+0x1e>
   381d2:	f000 f85f 	bl	38294 <__sinit>
   381d6:	4b0b      	ldr	r3, [pc, #44]	; (38204 <_fflush_r+0x4c>)
   381d8:	429c      	cmp	r4, r3
   381da:	d109      	bne.n	381f0 <_fflush_r+0x38>
   381dc:	686c      	ldr	r4, [r5, #4]
   381de:	220c      	movs	r2, #12
   381e0:	5ea3      	ldrsh	r3, [r4, r2]
   381e2:	2b00      	cmp	r3, #0
   381e4:	d0ee      	beq.n	381c4 <_fflush_r+0xc>
   381e6:	0021      	movs	r1, r4
   381e8:	0028      	movs	r0, r5
   381ea:	f7ff ff5b 	bl	380a4 <__sflush_r>
   381ee:	e7ea      	b.n	381c6 <_fflush_r+0xe>
   381f0:	4b05      	ldr	r3, [pc, #20]	; (38208 <_fflush_r+0x50>)
   381f2:	429c      	cmp	r4, r3
   381f4:	d101      	bne.n	381fa <_fflush_r+0x42>
   381f6:	68ac      	ldr	r4, [r5, #8]
   381f8:	e7f1      	b.n	381de <_fflush_r+0x26>
   381fa:	4b04      	ldr	r3, [pc, #16]	; (3820c <_fflush_r+0x54>)
   381fc:	429c      	cmp	r4, r3
   381fe:	d1ee      	bne.n	381de <_fflush_r+0x26>
   38200:	68ec      	ldr	r4, [r5, #12]
   38202:	e7ec      	b.n	381de <_fflush_r+0x26>
   38204:	0003d358 	.word	0x0003d358
   38208:	0003d378 	.word	0x0003d378
   3820c:	0003d338 	.word	0x0003d338

00038210 <_cleanup_r>:
   38210:	b510      	push	{r4, lr}
   38212:	4902      	ldr	r1, [pc, #8]	; (3821c <_cleanup_r+0xc>)
   38214:	f000 f8b2 	bl	3837c <_fwalk_reent>
   38218:	bd10      	pop	{r4, pc}
   3821a:	46c0      	nop			; (mov r8, r8)
   3821c:	000381b9 	.word	0x000381b9

00038220 <std.isra.0>:
   38220:	2300      	movs	r3, #0
   38222:	b510      	push	{r4, lr}
   38224:	0004      	movs	r4, r0
   38226:	6003      	str	r3, [r0, #0]
   38228:	6043      	str	r3, [r0, #4]
   3822a:	6083      	str	r3, [r0, #8]
   3822c:	8181      	strh	r1, [r0, #12]
   3822e:	6643      	str	r3, [r0, #100]	; 0x64
   38230:	81c2      	strh	r2, [r0, #14]
   38232:	6103      	str	r3, [r0, #16]
   38234:	6143      	str	r3, [r0, #20]
   38236:	6183      	str	r3, [r0, #24]
   38238:	0019      	movs	r1, r3
   3823a:	2208      	movs	r2, #8
   3823c:	305c      	adds	r0, #92	; 0x5c
   3823e:	f7ff fb60 	bl	37902 <memset>
   38242:	4b05      	ldr	r3, [pc, #20]	; (38258 <std.isra.0+0x38>)
   38244:	6224      	str	r4, [r4, #32]
   38246:	6263      	str	r3, [r4, #36]	; 0x24
   38248:	4b04      	ldr	r3, [pc, #16]	; (3825c <std.isra.0+0x3c>)
   3824a:	62a3      	str	r3, [r4, #40]	; 0x28
   3824c:	4b04      	ldr	r3, [pc, #16]	; (38260 <std.isra.0+0x40>)
   3824e:	62e3      	str	r3, [r4, #44]	; 0x2c
   38250:	4b04      	ldr	r3, [pc, #16]	; (38264 <std.isra.0+0x44>)
   38252:	6323      	str	r3, [r4, #48]	; 0x30
   38254:	bd10      	pop	{r4, pc}
   38256:	46c0      	nop			; (mov r8, r8)
   38258:	00038abd 	.word	0x00038abd
   3825c:	00038ae5 	.word	0x00038ae5
   38260:	00038b1d 	.word	0x00038b1d
   38264:	00038b49 	.word	0x00038b49

00038268 <__sfmoreglue>:
   38268:	b570      	push	{r4, r5, r6, lr}
   3826a:	2568      	movs	r5, #104	; 0x68
   3826c:	1e4a      	subs	r2, r1, #1
   3826e:	4355      	muls	r5, r2
   38270:	000e      	movs	r6, r1
   38272:	0029      	movs	r1, r5
   38274:	3174      	adds	r1, #116	; 0x74
   38276:	f7ff fb97 	bl	379a8 <_malloc_r>
   3827a:	1e04      	subs	r4, r0, #0
   3827c:	d008      	beq.n	38290 <__sfmoreglue+0x28>
   3827e:	2100      	movs	r1, #0
   38280:	002a      	movs	r2, r5
   38282:	6001      	str	r1, [r0, #0]
   38284:	6046      	str	r6, [r0, #4]
   38286:	300c      	adds	r0, #12
   38288:	60a0      	str	r0, [r4, #8]
   3828a:	3268      	adds	r2, #104	; 0x68
   3828c:	f7ff fb39 	bl	37902 <memset>
   38290:	0020      	movs	r0, r4
   38292:	bd70      	pop	{r4, r5, r6, pc}

00038294 <__sinit>:
   38294:	6983      	ldr	r3, [r0, #24]
   38296:	b513      	push	{r0, r1, r4, lr}
   38298:	0004      	movs	r4, r0
   3829a:	2b00      	cmp	r3, #0
   3829c:	d128      	bne.n	382f0 <__sinit+0x5c>
   3829e:	6483      	str	r3, [r0, #72]	; 0x48
   382a0:	64c3      	str	r3, [r0, #76]	; 0x4c
   382a2:	6503      	str	r3, [r0, #80]	; 0x50
   382a4:	4b13      	ldr	r3, [pc, #76]	; (382f4 <__sinit+0x60>)
   382a6:	4a14      	ldr	r2, [pc, #80]	; (382f8 <__sinit+0x64>)
   382a8:	681b      	ldr	r3, [r3, #0]
   382aa:	6282      	str	r2, [r0, #40]	; 0x28
   382ac:	9301      	str	r3, [sp, #4]
   382ae:	4298      	cmp	r0, r3
   382b0:	d101      	bne.n	382b6 <__sinit+0x22>
   382b2:	2301      	movs	r3, #1
   382b4:	6183      	str	r3, [r0, #24]
   382b6:	0020      	movs	r0, r4
   382b8:	f000 f820 	bl	382fc <__sfp>
   382bc:	6060      	str	r0, [r4, #4]
   382be:	0020      	movs	r0, r4
   382c0:	f000 f81c 	bl	382fc <__sfp>
   382c4:	60a0      	str	r0, [r4, #8]
   382c6:	0020      	movs	r0, r4
   382c8:	f000 f818 	bl	382fc <__sfp>
   382cc:	2200      	movs	r2, #0
   382ce:	60e0      	str	r0, [r4, #12]
   382d0:	2104      	movs	r1, #4
   382d2:	6860      	ldr	r0, [r4, #4]
   382d4:	f7ff ffa4 	bl	38220 <std.isra.0>
   382d8:	2201      	movs	r2, #1
   382da:	2109      	movs	r1, #9
   382dc:	68a0      	ldr	r0, [r4, #8]
   382de:	f7ff ff9f 	bl	38220 <std.isra.0>
   382e2:	2202      	movs	r2, #2
   382e4:	2112      	movs	r1, #18
   382e6:	68e0      	ldr	r0, [r4, #12]
   382e8:	f7ff ff9a 	bl	38220 <std.isra.0>
   382ec:	2301      	movs	r3, #1
   382ee:	61a3      	str	r3, [r4, #24]
   382f0:	bd13      	pop	{r0, r1, r4, pc}
   382f2:	46c0      	nop			; (mov r8, r8)
   382f4:	0003d334 	.word	0x0003d334
   382f8:	00038211 	.word	0x00038211

000382fc <__sfp>:
   382fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   382fe:	4b1e      	ldr	r3, [pc, #120]	; (38378 <__sfp+0x7c>)
   38300:	0007      	movs	r7, r0
   38302:	681e      	ldr	r6, [r3, #0]
   38304:	69b3      	ldr	r3, [r6, #24]
   38306:	2b00      	cmp	r3, #0
   38308:	d102      	bne.n	38310 <__sfp+0x14>
   3830a:	0030      	movs	r0, r6
   3830c:	f7ff ffc2 	bl	38294 <__sinit>
   38310:	3648      	adds	r6, #72	; 0x48
   38312:	68b4      	ldr	r4, [r6, #8]
   38314:	6873      	ldr	r3, [r6, #4]
   38316:	3b01      	subs	r3, #1
   38318:	d504      	bpl.n	38324 <__sfp+0x28>
   3831a:	6833      	ldr	r3, [r6, #0]
   3831c:	2b00      	cmp	r3, #0
   3831e:	d007      	beq.n	38330 <__sfp+0x34>
   38320:	6836      	ldr	r6, [r6, #0]
   38322:	e7f6      	b.n	38312 <__sfp+0x16>
   38324:	220c      	movs	r2, #12
   38326:	5ea5      	ldrsh	r5, [r4, r2]
   38328:	2d00      	cmp	r5, #0
   3832a:	d00d      	beq.n	38348 <__sfp+0x4c>
   3832c:	3468      	adds	r4, #104	; 0x68
   3832e:	e7f2      	b.n	38316 <__sfp+0x1a>
   38330:	2104      	movs	r1, #4
   38332:	0038      	movs	r0, r7
   38334:	f7ff ff98 	bl	38268 <__sfmoreglue>
   38338:	6030      	str	r0, [r6, #0]
   3833a:	2800      	cmp	r0, #0
   3833c:	d1f0      	bne.n	38320 <__sfp+0x24>
   3833e:	230c      	movs	r3, #12
   38340:	0004      	movs	r4, r0
   38342:	603b      	str	r3, [r7, #0]
   38344:	0020      	movs	r0, r4
   38346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38348:	2301      	movs	r3, #1
   3834a:	0020      	movs	r0, r4
   3834c:	425b      	negs	r3, r3
   3834e:	81e3      	strh	r3, [r4, #14]
   38350:	3302      	adds	r3, #2
   38352:	81a3      	strh	r3, [r4, #12]
   38354:	6665      	str	r5, [r4, #100]	; 0x64
   38356:	6025      	str	r5, [r4, #0]
   38358:	60a5      	str	r5, [r4, #8]
   3835a:	6065      	str	r5, [r4, #4]
   3835c:	6125      	str	r5, [r4, #16]
   3835e:	6165      	str	r5, [r4, #20]
   38360:	61a5      	str	r5, [r4, #24]
   38362:	2208      	movs	r2, #8
   38364:	0029      	movs	r1, r5
   38366:	305c      	adds	r0, #92	; 0x5c
   38368:	f7ff facb 	bl	37902 <memset>
   3836c:	6365      	str	r5, [r4, #52]	; 0x34
   3836e:	63a5      	str	r5, [r4, #56]	; 0x38
   38370:	64a5      	str	r5, [r4, #72]	; 0x48
   38372:	64e5      	str	r5, [r4, #76]	; 0x4c
   38374:	e7e6      	b.n	38344 <__sfp+0x48>
   38376:	46c0      	nop			; (mov r8, r8)
   38378:	0003d334 	.word	0x0003d334

0003837c <_fwalk_reent>:
   3837c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3837e:	0004      	movs	r4, r0
   38380:	0007      	movs	r7, r0
   38382:	2600      	movs	r6, #0
   38384:	9101      	str	r1, [sp, #4]
   38386:	3448      	adds	r4, #72	; 0x48
   38388:	2c00      	cmp	r4, #0
   3838a:	d101      	bne.n	38390 <_fwalk_reent+0x14>
   3838c:	0030      	movs	r0, r6
   3838e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   38390:	6863      	ldr	r3, [r4, #4]
   38392:	68a5      	ldr	r5, [r4, #8]
   38394:	9300      	str	r3, [sp, #0]
   38396:	9b00      	ldr	r3, [sp, #0]
   38398:	3b01      	subs	r3, #1
   3839a:	9300      	str	r3, [sp, #0]
   3839c:	d501      	bpl.n	383a2 <_fwalk_reent+0x26>
   3839e:	6824      	ldr	r4, [r4, #0]
   383a0:	e7f2      	b.n	38388 <_fwalk_reent+0xc>
   383a2:	89ab      	ldrh	r3, [r5, #12]
   383a4:	2b01      	cmp	r3, #1
   383a6:	d908      	bls.n	383ba <_fwalk_reent+0x3e>
   383a8:	220e      	movs	r2, #14
   383aa:	5eab      	ldrsh	r3, [r5, r2]
   383ac:	3301      	adds	r3, #1
   383ae:	d004      	beq.n	383ba <_fwalk_reent+0x3e>
   383b0:	0029      	movs	r1, r5
   383b2:	0038      	movs	r0, r7
   383b4:	9b01      	ldr	r3, [sp, #4]
   383b6:	4798      	blx	r3
   383b8:	4306      	orrs	r6, r0
   383ba:	3568      	adds	r5, #104	; 0x68
   383bc:	e7eb      	b.n	38396 <_fwalk_reent+0x1a>

000383be <__locale_ctype_ptr_l>:
   383be:	30ec      	adds	r0, #236	; 0xec
   383c0:	6800      	ldr	r0, [r0, #0]
   383c2:	4770      	bx	lr

000383c4 <__locale_ctype_ptr>:
   383c4:	4b04      	ldr	r3, [pc, #16]	; (383d8 <__locale_ctype_ptr+0x14>)
   383c6:	681b      	ldr	r3, [r3, #0]
   383c8:	6a1b      	ldr	r3, [r3, #32]
   383ca:	2b00      	cmp	r3, #0
   383cc:	d100      	bne.n	383d0 <__locale_ctype_ptr+0xc>
   383ce:	4b03      	ldr	r3, [pc, #12]	; (383dc <__locale_ctype_ptr+0x18>)
   383d0:	33ec      	adds	r3, #236	; 0xec
   383d2:	6818      	ldr	r0, [r3, #0]
   383d4:	4770      	bx	lr
   383d6:	46c0      	nop			; (mov r8, r8)
   383d8:	20000124 	.word	0x20000124
   383dc:	20000188 	.word	0x20000188

000383e0 <__swhatbuf_r>:
   383e0:	b570      	push	{r4, r5, r6, lr}
   383e2:	000e      	movs	r6, r1
   383e4:	001d      	movs	r5, r3
   383e6:	230e      	movs	r3, #14
   383e8:	5ec9      	ldrsh	r1, [r1, r3]
   383ea:	b090      	sub	sp, #64	; 0x40
   383ec:	0014      	movs	r4, r2
   383ee:	2900      	cmp	r1, #0
   383f0:	da07      	bge.n	38402 <__swhatbuf_r+0x22>
   383f2:	2300      	movs	r3, #0
   383f4:	602b      	str	r3, [r5, #0]
   383f6:	89b3      	ldrh	r3, [r6, #12]
   383f8:	061b      	lsls	r3, r3, #24
   383fa:	d411      	bmi.n	38420 <__swhatbuf_r+0x40>
   383fc:	2380      	movs	r3, #128	; 0x80
   383fe:	00db      	lsls	r3, r3, #3
   38400:	e00f      	b.n	38422 <__swhatbuf_r+0x42>
   38402:	aa01      	add	r2, sp, #4
   38404:	f000 fbe6 	bl	38bd4 <_fstat_r>
   38408:	2800      	cmp	r0, #0
   3840a:	dbf2      	blt.n	383f2 <__swhatbuf_r+0x12>
   3840c:	22f0      	movs	r2, #240	; 0xf0
   3840e:	9b02      	ldr	r3, [sp, #8]
   38410:	0212      	lsls	r2, r2, #8
   38412:	4013      	ands	r3, r2
   38414:	4a05      	ldr	r2, [pc, #20]	; (3842c <__swhatbuf_r+0x4c>)
   38416:	189b      	adds	r3, r3, r2
   38418:	425a      	negs	r2, r3
   3841a:	4153      	adcs	r3, r2
   3841c:	602b      	str	r3, [r5, #0]
   3841e:	e7ed      	b.n	383fc <__swhatbuf_r+0x1c>
   38420:	2340      	movs	r3, #64	; 0x40
   38422:	2000      	movs	r0, #0
   38424:	6023      	str	r3, [r4, #0]
   38426:	b010      	add	sp, #64	; 0x40
   38428:	bd70      	pop	{r4, r5, r6, pc}
   3842a:	46c0      	nop			; (mov r8, r8)
   3842c:	ffffe000 	.word	0xffffe000

00038430 <__smakebuf_r>:
   38430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   38432:	2602      	movs	r6, #2
   38434:	898b      	ldrh	r3, [r1, #12]
   38436:	0005      	movs	r5, r0
   38438:	000c      	movs	r4, r1
   3843a:	4233      	tst	r3, r6
   3843c:	d006      	beq.n	3844c <__smakebuf_r+0x1c>
   3843e:	0023      	movs	r3, r4
   38440:	3347      	adds	r3, #71	; 0x47
   38442:	6023      	str	r3, [r4, #0]
   38444:	6123      	str	r3, [r4, #16]
   38446:	2301      	movs	r3, #1
   38448:	6163      	str	r3, [r4, #20]
   3844a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   3844c:	ab01      	add	r3, sp, #4
   3844e:	466a      	mov	r2, sp
   38450:	f7ff ffc6 	bl	383e0 <__swhatbuf_r>
   38454:	9900      	ldr	r1, [sp, #0]
   38456:	0007      	movs	r7, r0
   38458:	0028      	movs	r0, r5
   3845a:	f7ff faa5 	bl	379a8 <_malloc_r>
   3845e:	2800      	cmp	r0, #0
   38460:	d108      	bne.n	38474 <__smakebuf_r+0x44>
   38462:	220c      	movs	r2, #12
   38464:	5ea3      	ldrsh	r3, [r4, r2]
   38466:	059a      	lsls	r2, r3, #22
   38468:	d4ef      	bmi.n	3844a <__smakebuf_r+0x1a>
   3846a:	2203      	movs	r2, #3
   3846c:	4393      	bics	r3, r2
   3846e:	431e      	orrs	r6, r3
   38470:	81a6      	strh	r6, [r4, #12]
   38472:	e7e4      	b.n	3843e <__smakebuf_r+0xe>
   38474:	4b0f      	ldr	r3, [pc, #60]	; (384b4 <__smakebuf_r+0x84>)
   38476:	62ab      	str	r3, [r5, #40]	; 0x28
   38478:	2380      	movs	r3, #128	; 0x80
   3847a:	89a2      	ldrh	r2, [r4, #12]
   3847c:	6020      	str	r0, [r4, #0]
   3847e:	4313      	orrs	r3, r2
   38480:	81a3      	strh	r3, [r4, #12]
   38482:	9b00      	ldr	r3, [sp, #0]
   38484:	6120      	str	r0, [r4, #16]
   38486:	6163      	str	r3, [r4, #20]
   38488:	9b01      	ldr	r3, [sp, #4]
   3848a:	2b00      	cmp	r3, #0
   3848c:	d00d      	beq.n	384aa <__smakebuf_r+0x7a>
   3848e:	230e      	movs	r3, #14
   38490:	5ee1      	ldrsh	r1, [r4, r3]
   38492:	0028      	movs	r0, r5
   38494:	f000 fbb0 	bl	38bf8 <_isatty_r>
   38498:	2800      	cmp	r0, #0
   3849a:	d006      	beq.n	384aa <__smakebuf_r+0x7a>
   3849c:	2203      	movs	r2, #3
   3849e:	89a3      	ldrh	r3, [r4, #12]
   384a0:	4393      	bics	r3, r2
   384a2:	001a      	movs	r2, r3
   384a4:	2301      	movs	r3, #1
   384a6:	4313      	orrs	r3, r2
   384a8:	81a3      	strh	r3, [r4, #12]
   384aa:	89a0      	ldrh	r0, [r4, #12]
   384ac:	4338      	orrs	r0, r7
   384ae:	81a0      	strh	r0, [r4, #12]
   384b0:	e7cb      	b.n	3844a <__smakebuf_r+0x1a>
   384b2:	46c0      	nop			; (mov r8, r8)
   384b4:	00038211 	.word	0x00038211

000384b8 <__ascii_mbtowc>:
   384b8:	b082      	sub	sp, #8
   384ba:	2900      	cmp	r1, #0
   384bc:	d100      	bne.n	384c0 <__ascii_mbtowc+0x8>
   384be:	a901      	add	r1, sp, #4
   384c0:	1e10      	subs	r0, r2, #0
   384c2:	d006      	beq.n	384d2 <__ascii_mbtowc+0x1a>
   384c4:	2b00      	cmp	r3, #0
   384c6:	d006      	beq.n	384d6 <__ascii_mbtowc+0x1e>
   384c8:	7813      	ldrb	r3, [r2, #0]
   384ca:	600b      	str	r3, [r1, #0]
   384cc:	7810      	ldrb	r0, [r2, #0]
   384ce:	1e43      	subs	r3, r0, #1
   384d0:	4198      	sbcs	r0, r3
   384d2:	b002      	add	sp, #8
   384d4:	4770      	bx	lr
   384d6:	2002      	movs	r0, #2
   384d8:	4240      	negs	r0, r0
   384da:	e7fa      	b.n	384d2 <__ascii_mbtowc+0x1a>

000384dc <__malloc_lock>:
   384dc:	4770      	bx	lr

000384de <__malloc_unlock>:
   384de:	4770      	bx	lr

000384e0 <__ssputs_r>:
   384e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   384e2:	688e      	ldr	r6, [r1, #8]
   384e4:	b085      	sub	sp, #20
   384e6:	0007      	movs	r7, r0
   384e8:	000c      	movs	r4, r1
   384ea:	9203      	str	r2, [sp, #12]
   384ec:	9301      	str	r3, [sp, #4]
   384ee:	429e      	cmp	r6, r3
   384f0:	d839      	bhi.n	38566 <__ssputs_r+0x86>
   384f2:	2390      	movs	r3, #144	; 0x90
   384f4:	898a      	ldrh	r2, [r1, #12]
   384f6:	00db      	lsls	r3, r3, #3
   384f8:	421a      	tst	r2, r3
   384fa:	d034      	beq.n	38566 <__ssputs_r+0x86>
   384fc:	2503      	movs	r5, #3
   384fe:	6909      	ldr	r1, [r1, #16]
   38500:	6823      	ldr	r3, [r4, #0]
   38502:	1a5b      	subs	r3, r3, r1
   38504:	9302      	str	r3, [sp, #8]
   38506:	6963      	ldr	r3, [r4, #20]
   38508:	9802      	ldr	r0, [sp, #8]
   3850a:	435d      	muls	r5, r3
   3850c:	0feb      	lsrs	r3, r5, #31
   3850e:	195d      	adds	r5, r3, r5
   38510:	9b01      	ldr	r3, [sp, #4]
   38512:	106d      	asrs	r5, r5, #1
   38514:	3301      	adds	r3, #1
   38516:	181b      	adds	r3, r3, r0
   38518:	42ab      	cmp	r3, r5
   3851a:	d900      	bls.n	3851e <__ssputs_r+0x3e>
   3851c:	001d      	movs	r5, r3
   3851e:	0553      	lsls	r3, r2, #21
   38520:	d532      	bpl.n	38588 <__ssputs_r+0xa8>
   38522:	0029      	movs	r1, r5
   38524:	0038      	movs	r0, r7
   38526:	f7ff fa3f 	bl	379a8 <_malloc_r>
   3852a:	1e06      	subs	r6, r0, #0
   3852c:	d109      	bne.n	38542 <__ssputs_r+0x62>
   3852e:	230c      	movs	r3, #12
   38530:	603b      	str	r3, [r7, #0]
   38532:	2340      	movs	r3, #64	; 0x40
   38534:	2001      	movs	r0, #1
   38536:	89a2      	ldrh	r2, [r4, #12]
   38538:	4240      	negs	r0, r0
   3853a:	4313      	orrs	r3, r2
   3853c:	81a3      	strh	r3, [r4, #12]
   3853e:	b005      	add	sp, #20
   38540:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38542:	9a02      	ldr	r2, [sp, #8]
   38544:	6921      	ldr	r1, [r4, #16]
   38546:	f7ff f9c1 	bl	378cc <memcpy>
   3854a:	89a3      	ldrh	r3, [r4, #12]
   3854c:	4a14      	ldr	r2, [pc, #80]	; (385a0 <__ssputs_r+0xc0>)
   3854e:	401a      	ands	r2, r3
   38550:	2380      	movs	r3, #128	; 0x80
   38552:	4313      	orrs	r3, r2
   38554:	81a3      	strh	r3, [r4, #12]
   38556:	9b02      	ldr	r3, [sp, #8]
   38558:	6126      	str	r6, [r4, #16]
   3855a:	18f6      	adds	r6, r6, r3
   3855c:	6026      	str	r6, [r4, #0]
   3855e:	6165      	str	r5, [r4, #20]
   38560:	9e01      	ldr	r6, [sp, #4]
   38562:	1aed      	subs	r5, r5, r3
   38564:	60a5      	str	r5, [r4, #8]
   38566:	9b01      	ldr	r3, [sp, #4]
   38568:	42b3      	cmp	r3, r6
   3856a:	d200      	bcs.n	3856e <__ssputs_r+0x8e>
   3856c:	001e      	movs	r6, r3
   3856e:	0032      	movs	r2, r6
   38570:	9903      	ldr	r1, [sp, #12]
   38572:	6820      	ldr	r0, [r4, #0]
   38574:	f7ff f9b3 	bl	378de <memmove>
   38578:	68a3      	ldr	r3, [r4, #8]
   3857a:	2000      	movs	r0, #0
   3857c:	1b9b      	subs	r3, r3, r6
   3857e:	60a3      	str	r3, [r4, #8]
   38580:	6823      	ldr	r3, [r4, #0]
   38582:	199e      	adds	r6, r3, r6
   38584:	6026      	str	r6, [r4, #0]
   38586:	e7da      	b.n	3853e <__ssputs_r+0x5e>
   38588:	002a      	movs	r2, r5
   3858a:	0038      	movs	r0, r7
   3858c:	f000 fb65 	bl	38c5a <_realloc_r>
   38590:	1e06      	subs	r6, r0, #0
   38592:	d1e0      	bne.n	38556 <__ssputs_r+0x76>
   38594:	6921      	ldr	r1, [r4, #16]
   38596:	0038      	movs	r0, r7
   38598:	f7ff f9bc 	bl	37914 <_free_r>
   3859c:	e7c7      	b.n	3852e <__ssputs_r+0x4e>
   3859e:	46c0      	nop			; (mov r8, r8)
   385a0:	fffffb7f 	.word	0xfffffb7f

000385a4 <_svfiprintf_r>:
   385a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   385a6:	b09f      	sub	sp, #124	; 0x7c
   385a8:	9002      	str	r0, [sp, #8]
   385aa:	9305      	str	r3, [sp, #20]
   385ac:	898b      	ldrh	r3, [r1, #12]
   385ae:	000f      	movs	r7, r1
   385b0:	0016      	movs	r6, r2
   385b2:	061b      	lsls	r3, r3, #24
   385b4:	d511      	bpl.n	385da <_svfiprintf_r+0x36>
   385b6:	690b      	ldr	r3, [r1, #16]
   385b8:	2b00      	cmp	r3, #0
   385ba:	d10e      	bne.n	385da <_svfiprintf_r+0x36>
   385bc:	2140      	movs	r1, #64	; 0x40
   385be:	f7ff f9f3 	bl	379a8 <_malloc_r>
   385c2:	6038      	str	r0, [r7, #0]
   385c4:	6138      	str	r0, [r7, #16]
   385c6:	2800      	cmp	r0, #0
   385c8:	d105      	bne.n	385d6 <_svfiprintf_r+0x32>
   385ca:	230c      	movs	r3, #12
   385cc:	9a02      	ldr	r2, [sp, #8]
   385ce:	3801      	subs	r0, #1
   385d0:	6013      	str	r3, [r2, #0]
   385d2:	b01f      	add	sp, #124	; 0x7c
   385d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   385d6:	2340      	movs	r3, #64	; 0x40
   385d8:	617b      	str	r3, [r7, #20]
   385da:	2300      	movs	r3, #0
   385dc:	ad06      	add	r5, sp, #24
   385de:	616b      	str	r3, [r5, #20]
   385e0:	3320      	adds	r3, #32
   385e2:	766b      	strb	r3, [r5, #25]
   385e4:	3310      	adds	r3, #16
   385e6:	76ab      	strb	r3, [r5, #26]
   385e8:	0034      	movs	r4, r6
   385ea:	7823      	ldrb	r3, [r4, #0]
   385ec:	2b00      	cmp	r3, #0
   385ee:	d147      	bne.n	38680 <_svfiprintf_r+0xdc>
   385f0:	1ba3      	subs	r3, r4, r6
   385f2:	9304      	str	r3, [sp, #16]
   385f4:	d00d      	beq.n	38612 <_svfiprintf_r+0x6e>
   385f6:	1ba3      	subs	r3, r4, r6
   385f8:	0032      	movs	r2, r6
   385fa:	0039      	movs	r1, r7
   385fc:	9802      	ldr	r0, [sp, #8]
   385fe:	f7ff ff6f 	bl	384e0 <__ssputs_r>
   38602:	1c43      	adds	r3, r0, #1
   38604:	d100      	bne.n	38608 <_svfiprintf_r+0x64>
   38606:	e0b5      	b.n	38774 <_svfiprintf_r+0x1d0>
   38608:	696a      	ldr	r2, [r5, #20]
   3860a:	9b04      	ldr	r3, [sp, #16]
   3860c:	4694      	mov	ip, r2
   3860e:	4463      	add	r3, ip
   38610:	616b      	str	r3, [r5, #20]
   38612:	7823      	ldrb	r3, [r4, #0]
   38614:	2b00      	cmp	r3, #0
   38616:	d100      	bne.n	3861a <_svfiprintf_r+0x76>
   38618:	e0ac      	b.n	38774 <_svfiprintf_r+0x1d0>
   3861a:	2201      	movs	r2, #1
   3861c:	2300      	movs	r3, #0
   3861e:	4252      	negs	r2, r2
   38620:	606a      	str	r2, [r5, #4]
   38622:	a902      	add	r1, sp, #8
   38624:	3254      	adds	r2, #84	; 0x54
   38626:	1852      	adds	r2, r2, r1
   38628:	3401      	adds	r4, #1
   3862a:	602b      	str	r3, [r5, #0]
   3862c:	60eb      	str	r3, [r5, #12]
   3862e:	60ab      	str	r3, [r5, #8]
   38630:	7013      	strb	r3, [r2, #0]
   38632:	65ab      	str	r3, [r5, #88]	; 0x58
   38634:	4e58      	ldr	r6, [pc, #352]	; (38798 <_svfiprintf_r+0x1f4>)
   38636:	2205      	movs	r2, #5
   38638:	7821      	ldrb	r1, [r4, #0]
   3863a:	0030      	movs	r0, r6
   3863c:	f000 fb02 	bl	38c44 <memchr>
   38640:	1c62      	adds	r2, r4, #1
   38642:	2800      	cmp	r0, #0
   38644:	d120      	bne.n	38688 <_svfiprintf_r+0xe4>
   38646:	6829      	ldr	r1, [r5, #0]
   38648:	06cb      	lsls	r3, r1, #27
   3864a:	d504      	bpl.n	38656 <_svfiprintf_r+0xb2>
   3864c:	2353      	movs	r3, #83	; 0x53
   3864e:	ae02      	add	r6, sp, #8
   38650:	3020      	adds	r0, #32
   38652:	199b      	adds	r3, r3, r6
   38654:	7018      	strb	r0, [r3, #0]
   38656:	070b      	lsls	r3, r1, #28
   38658:	d504      	bpl.n	38664 <_svfiprintf_r+0xc0>
   3865a:	2353      	movs	r3, #83	; 0x53
   3865c:	202b      	movs	r0, #43	; 0x2b
   3865e:	ae02      	add	r6, sp, #8
   38660:	199b      	adds	r3, r3, r6
   38662:	7018      	strb	r0, [r3, #0]
   38664:	7823      	ldrb	r3, [r4, #0]
   38666:	2b2a      	cmp	r3, #42	; 0x2a
   38668:	d016      	beq.n	38698 <_svfiprintf_r+0xf4>
   3866a:	2000      	movs	r0, #0
   3866c:	210a      	movs	r1, #10
   3866e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38670:	7822      	ldrb	r2, [r4, #0]
   38672:	3a30      	subs	r2, #48	; 0x30
   38674:	2a09      	cmp	r2, #9
   38676:	d955      	bls.n	38724 <_svfiprintf_r+0x180>
   38678:	2800      	cmp	r0, #0
   3867a:	d015      	beq.n	386a8 <_svfiprintf_r+0x104>
   3867c:	9309      	str	r3, [sp, #36]	; 0x24
   3867e:	e013      	b.n	386a8 <_svfiprintf_r+0x104>
   38680:	2b25      	cmp	r3, #37	; 0x25
   38682:	d0b5      	beq.n	385f0 <_svfiprintf_r+0x4c>
   38684:	3401      	adds	r4, #1
   38686:	e7b0      	b.n	385ea <_svfiprintf_r+0x46>
   38688:	2301      	movs	r3, #1
   3868a:	1b80      	subs	r0, r0, r6
   3868c:	4083      	lsls	r3, r0
   3868e:	6829      	ldr	r1, [r5, #0]
   38690:	0014      	movs	r4, r2
   38692:	430b      	orrs	r3, r1
   38694:	602b      	str	r3, [r5, #0]
   38696:	e7cd      	b.n	38634 <_svfiprintf_r+0x90>
   38698:	9b05      	ldr	r3, [sp, #20]
   3869a:	1d18      	adds	r0, r3, #4
   3869c:	681b      	ldr	r3, [r3, #0]
   3869e:	9005      	str	r0, [sp, #20]
   386a0:	2b00      	cmp	r3, #0
   386a2:	db39      	blt.n	38718 <_svfiprintf_r+0x174>
   386a4:	9309      	str	r3, [sp, #36]	; 0x24
   386a6:	0014      	movs	r4, r2
   386a8:	7823      	ldrb	r3, [r4, #0]
   386aa:	2b2e      	cmp	r3, #46	; 0x2e
   386ac:	d10b      	bne.n	386c6 <_svfiprintf_r+0x122>
   386ae:	7863      	ldrb	r3, [r4, #1]
   386b0:	1c62      	adds	r2, r4, #1
   386b2:	2b2a      	cmp	r3, #42	; 0x2a
   386b4:	d13e      	bne.n	38734 <_svfiprintf_r+0x190>
   386b6:	9b05      	ldr	r3, [sp, #20]
   386b8:	3402      	adds	r4, #2
   386ba:	1d1a      	adds	r2, r3, #4
   386bc:	681b      	ldr	r3, [r3, #0]
   386be:	9205      	str	r2, [sp, #20]
   386c0:	2b00      	cmp	r3, #0
   386c2:	db34      	blt.n	3872e <_svfiprintf_r+0x18a>
   386c4:	9307      	str	r3, [sp, #28]
   386c6:	4e35      	ldr	r6, [pc, #212]	; (3879c <_svfiprintf_r+0x1f8>)
   386c8:	7821      	ldrb	r1, [r4, #0]
   386ca:	2203      	movs	r2, #3
   386cc:	0030      	movs	r0, r6
   386ce:	f000 fab9 	bl	38c44 <memchr>
   386d2:	2800      	cmp	r0, #0
   386d4:	d006      	beq.n	386e4 <_svfiprintf_r+0x140>
   386d6:	2340      	movs	r3, #64	; 0x40
   386d8:	1b80      	subs	r0, r0, r6
   386da:	4083      	lsls	r3, r0
   386dc:	682a      	ldr	r2, [r5, #0]
   386de:	3401      	adds	r4, #1
   386e0:	4313      	orrs	r3, r2
   386e2:	602b      	str	r3, [r5, #0]
   386e4:	7821      	ldrb	r1, [r4, #0]
   386e6:	2206      	movs	r2, #6
   386e8:	482d      	ldr	r0, [pc, #180]	; (387a0 <_svfiprintf_r+0x1fc>)
   386ea:	1c66      	adds	r6, r4, #1
   386ec:	7629      	strb	r1, [r5, #24]
   386ee:	f000 faa9 	bl	38c44 <memchr>
   386f2:	2800      	cmp	r0, #0
   386f4:	d046      	beq.n	38784 <_svfiprintf_r+0x1e0>
   386f6:	4b2b      	ldr	r3, [pc, #172]	; (387a4 <_svfiprintf_r+0x200>)
   386f8:	2b00      	cmp	r3, #0
   386fa:	d12f      	bne.n	3875c <_svfiprintf_r+0x1b8>
   386fc:	6829      	ldr	r1, [r5, #0]
   386fe:	9b05      	ldr	r3, [sp, #20]
   38700:	2207      	movs	r2, #7
   38702:	05c9      	lsls	r1, r1, #23
   38704:	d528      	bpl.n	38758 <_svfiprintf_r+0x1b4>
   38706:	189b      	adds	r3, r3, r2
   38708:	4393      	bics	r3, r2
   3870a:	3308      	adds	r3, #8
   3870c:	9305      	str	r3, [sp, #20]
   3870e:	696b      	ldr	r3, [r5, #20]
   38710:	9a03      	ldr	r2, [sp, #12]
   38712:	189b      	adds	r3, r3, r2
   38714:	616b      	str	r3, [r5, #20]
   38716:	e767      	b.n	385e8 <_svfiprintf_r+0x44>
   38718:	425b      	negs	r3, r3
   3871a:	60eb      	str	r3, [r5, #12]
   3871c:	2302      	movs	r3, #2
   3871e:	430b      	orrs	r3, r1
   38720:	602b      	str	r3, [r5, #0]
   38722:	e7c0      	b.n	386a6 <_svfiprintf_r+0x102>
   38724:	434b      	muls	r3, r1
   38726:	3401      	adds	r4, #1
   38728:	189b      	adds	r3, r3, r2
   3872a:	2001      	movs	r0, #1
   3872c:	e7a0      	b.n	38670 <_svfiprintf_r+0xcc>
   3872e:	2301      	movs	r3, #1
   38730:	425b      	negs	r3, r3
   38732:	e7c7      	b.n	386c4 <_svfiprintf_r+0x120>
   38734:	2300      	movs	r3, #0
   38736:	0014      	movs	r4, r2
   38738:	200a      	movs	r0, #10
   3873a:	001a      	movs	r2, r3
   3873c:	606b      	str	r3, [r5, #4]
   3873e:	7821      	ldrb	r1, [r4, #0]
   38740:	3930      	subs	r1, #48	; 0x30
   38742:	2909      	cmp	r1, #9
   38744:	d903      	bls.n	3874e <_svfiprintf_r+0x1aa>
   38746:	2b00      	cmp	r3, #0
   38748:	d0bd      	beq.n	386c6 <_svfiprintf_r+0x122>
   3874a:	9207      	str	r2, [sp, #28]
   3874c:	e7bb      	b.n	386c6 <_svfiprintf_r+0x122>
   3874e:	4342      	muls	r2, r0
   38750:	3401      	adds	r4, #1
   38752:	1852      	adds	r2, r2, r1
   38754:	2301      	movs	r3, #1
   38756:	e7f2      	b.n	3873e <_svfiprintf_r+0x19a>
   38758:	3307      	adds	r3, #7
   3875a:	e7d5      	b.n	38708 <_svfiprintf_r+0x164>
   3875c:	ab05      	add	r3, sp, #20
   3875e:	9300      	str	r3, [sp, #0]
   38760:	003a      	movs	r2, r7
   38762:	4b11      	ldr	r3, [pc, #68]	; (387a8 <_svfiprintf_r+0x204>)
   38764:	0029      	movs	r1, r5
   38766:	9802      	ldr	r0, [sp, #8]
   38768:	e000      	b.n	3876c <_svfiprintf_r+0x1c8>
   3876a:	bf00      	nop
   3876c:	9003      	str	r0, [sp, #12]
   3876e:	9b03      	ldr	r3, [sp, #12]
   38770:	3301      	adds	r3, #1
   38772:	d1cc      	bne.n	3870e <_svfiprintf_r+0x16a>
   38774:	89bb      	ldrh	r3, [r7, #12]
   38776:	980b      	ldr	r0, [sp, #44]	; 0x2c
   38778:	065b      	lsls	r3, r3, #25
   3877a:	d400      	bmi.n	3877e <_svfiprintf_r+0x1da>
   3877c:	e729      	b.n	385d2 <_svfiprintf_r+0x2e>
   3877e:	2001      	movs	r0, #1
   38780:	4240      	negs	r0, r0
   38782:	e726      	b.n	385d2 <_svfiprintf_r+0x2e>
   38784:	ab05      	add	r3, sp, #20
   38786:	9300      	str	r3, [sp, #0]
   38788:	003a      	movs	r2, r7
   3878a:	4b07      	ldr	r3, [pc, #28]	; (387a8 <_svfiprintf_r+0x204>)
   3878c:	0029      	movs	r1, r5
   3878e:	9802      	ldr	r0, [sp, #8]
   38790:	f000 f87a 	bl	38888 <_printf_i>
   38794:	e7ea      	b.n	3876c <_svfiprintf_r+0x1c8>
   38796:	46c0      	nop			; (mov r8, r8)
   38798:	0003d3a2 	.word	0x0003d3a2
   3879c:	0003d3a8 	.word	0x0003d3a8
   387a0:	0003d3ac 	.word	0x0003d3ac
   387a4:	00000000 	.word	0x00000000
   387a8:	000384e1 	.word	0x000384e1

000387ac <_printf_common>:
   387ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   387ae:	0015      	movs	r5, r2
   387b0:	9301      	str	r3, [sp, #4]
   387b2:	688a      	ldr	r2, [r1, #8]
   387b4:	690b      	ldr	r3, [r1, #16]
   387b6:	9000      	str	r0, [sp, #0]
   387b8:	000c      	movs	r4, r1
   387ba:	4293      	cmp	r3, r2
   387bc:	da00      	bge.n	387c0 <_printf_common+0x14>
   387be:	0013      	movs	r3, r2
   387c0:	0022      	movs	r2, r4
   387c2:	602b      	str	r3, [r5, #0]
   387c4:	3243      	adds	r2, #67	; 0x43
   387c6:	7812      	ldrb	r2, [r2, #0]
   387c8:	2a00      	cmp	r2, #0
   387ca:	d001      	beq.n	387d0 <_printf_common+0x24>
   387cc:	3301      	adds	r3, #1
   387ce:	602b      	str	r3, [r5, #0]
   387d0:	6823      	ldr	r3, [r4, #0]
   387d2:	069b      	lsls	r3, r3, #26
   387d4:	d502      	bpl.n	387dc <_printf_common+0x30>
   387d6:	682b      	ldr	r3, [r5, #0]
   387d8:	3302      	adds	r3, #2
   387da:	602b      	str	r3, [r5, #0]
   387dc:	2706      	movs	r7, #6
   387de:	6823      	ldr	r3, [r4, #0]
   387e0:	401f      	ands	r7, r3
   387e2:	d027      	beq.n	38834 <_printf_common+0x88>
   387e4:	0023      	movs	r3, r4
   387e6:	3343      	adds	r3, #67	; 0x43
   387e8:	781b      	ldrb	r3, [r3, #0]
   387ea:	1e5a      	subs	r2, r3, #1
   387ec:	4193      	sbcs	r3, r2
   387ee:	6822      	ldr	r2, [r4, #0]
   387f0:	0692      	lsls	r2, r2, #26
   387f2:	d430      	bmi.n	38856 <_printf_common+0xaa>
   387f4:	0022      	movs	r2, r4
   387f6:	9901      	ldr	r1, [sp, #4]
   387f8:	3243      	adds	r2, #67	; 0x43
   387fa:	9800      	ldr	r0, [sp, #0]
   387fc:	9e08      	ldr	r6, [sp, #32]
   387fe:	47b0      	blx	r6
   38800:	1c43      	adds	r3, r0, #1
   38802:	d025      	beq.n	38850 <_printf_common+0xa4>
   38804:	2306      	movs	r3, #6
   38806:	6820      	ldr	r0, [r4, #0]
   38808:	682a      	ldr	r2, [r5, #0]
   3880a:	68e1      	ldr	r1, [r4, #12]
   3880c:	4003      	ands	r3, r0
   3880e:	2500      	movs	r5, #0
   38810:	2b04      	cmp	r3, #4
   38812:	d103      	bne.n	3881c <_printf_common+0x70>
   38814:	1a8d      	subs	r5, r1, r2
   38816:	43eb      	mvns	r3, r5
   38818:	17db      	asrs	r3, r3, #31
   3881a:	401d      	ands	r5, r3
   3881c:	68a3      	ldr	r3, [r4, #8]
   3881e:	6922      	ldr	r2, [r4, #16]
   38820:	4293      	cmp	r3, r2
   38822:	dd01      	ble.n	38828 <_printf_common+0x7c>
   38824:	1a9b      	subs	r3, r3, r2
   38826:	18ed      	adds	r5, r5, r3
   38828:	2700      	movs	r7, #0
   3882a:	42bd      	cmp	r5, r7
   3882c:	d120      	bne.n	38870 <_printf_common+0xc4>
   3882e:	2000      	movs	r0, #0
   38830:	e010      	b.n	38854 <_printf_common+0xa8>
   38832:	3701      	adds	r7, #1
   38834:	68e3      	ldr	r3, [r4, #12]
   38836:	682a      	ldr	r2, [r5, #0]
   38838:	1a9b      	subs	r3, r3, r2
   3883a:	429f      	cmp	r7, r3
   3883c:	dad2      	bge.n	387e4 <_printf_common+0x38>
   3883e:	0022      	movs	r2, r4
   38840:	2301      	movs	r3, #1
   38842:	3219      	adds	r2, #25
   38844:	9901      	ldr	r1, [sp, #4]
   38846:	9800      	ldr	r0, [sp, #0]
   38848:	9e08      	ldr	r6, [sp, #32]
   3884a:	47b0      	blx	r6
   3884c:	1c43      	adds	r3, r0, #1
   3884e:	d1f0      	bne.n	38832 <_printf_common+0x86>
   38850:	2001      	movs	r0, #1
   38852:	4240      	negs	r0, r0
   38854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   38856:	2030      	movs	r0, #48	; 0x30
   38858:	18e1      	adds	r1, r4, r3
   3885a:	3143      	adds	r1, #67	; 0x43
   3885c:	7008      	strb	r0, [r1, #0]
   3885e:	0021      	movs	r1, r4
   38860:	1c5a      	adds	r2, r3, #1
   38862:	3145      	adds	r1, #69	; 0x45
   38864:	7809      	ldrb	r1, [r1, #0]
   38866:	18a2      	adds	r2, r4, r2
   38868:	3243      	adds	r2, #67	; 0x43
   3886a:	3302      	adds	r3, #2
   3886c:	7011      	strb	r1, [r2, #0]
   3886e:	e7c1      	b.n	387f4 <_printf_common+0x48>
   38870:	0022      	movs	r2, r4
   38872:	2301      	movs	r3, #1
   38874:	321a      	adds	r2, #26
   38876:	9901      	ldr	r1, [sp, #4]
   38878:	9800      	ldr	r0, [sp, #0]
   3887a:	9e08      	ldr	r6, [sp, #32]
   3887c:	47b0      	blx	r6
   3887e:	1c43      	adds	r3, r0, #1
   38880:	d0e6      	beq.n	38850 <_printf_common+0xa4>
   38882:	3701      	adds	r7, #1
   38884:	e7d1      	b.n	3882a <_printf_common+0x7e>
	...

00038888 <_printf_i>:
   38888:	b5f0      	push	{r4, r5, r6, r7, lr}
   3888a:	b08b      	sub	sp, #44	; 0x2c
   3888c:	9206      	str	r2, [sp, #24]
   3888e:	000a      	movs	r2, r1
   38890:	3243      	adds	r2, #67	; 0x43
   38892:	9307      	str	r3, [sp, #28]
   38894:	9005      	str	r0, [sp, #20]
   38896:	9204      	str	r2, [sp, #16]
   38898:	7e0a      	ldrb	r2, [r1, #24]
   3889a:	000c      	movs	r4, r1
   3889c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3889e:	2a6e      	cmp	r2, #110	; 0x6e
   388a0:	d100      	bne.n	388a4 <_printf_i+0x1c>
   388a2:	e08f      	b.n	389c4 <_printf_i+0x13c>
   388a4:	d817      	bhi.n	388d6 <_printf_i+0x4e>
   388a6:	2a63      	cmp	r2, #99	; 0x63
   388a8:	d02c      	beq.n	38904 <_printf_i+0x7c>
   388aa:	d808      	bhi.n	388be <_printf_i+0x36>
   388ac:	2a00      	cmp	r2, #0
   388ae:	d100      	bne.n	388b2 <_printf_i+0x2a>
   388b0:	e099      	b.n	389e6 <_printf_i+0x15e>
   388b2:	2a58      	cmp	r2, #88	; 0x58
   388b4:	d054      	beq.n	38960 <_printf_i+0xd8>
   388b6:	0026      	movs	r6, r4
   388b8:	3642      	adds	r6, #66	; 0x42
   388ba:	7032      	strb	r2, [r6, #0]
   388bc:	e029      	b.n	38912 <_printf_i+0x8a>
   388be:	2a64      	cmp	r2, #100	; 0x64
   388c0:	d001      	beq.n	388c6 <_printf_i+0x3e>
   388c2:	2a69      	cmp	r2, #105	; 0x69
   388c4:	d1f7      	bne.n	388b6 <_printf_i+0x2e>
   388c6:	6821      	ldr	r1, [r4, #0]
   388c8:	681a      	ldr	r2, [r3, #0]
   388ca:	0608      	lsls	r0, r1, #24
   388cc:	d523      	bpl.n	38916 <_printf_i+0x8e>
   388ce:	1d11      	adds	r1, r2, #4
   388d0:	6019      	str	r1, [r3, #0]
   388d2:	6815      	ldr	r5, [r2, #0]
   388d4:	e025      	b.n	38922 <_printf_i+0x9a>
   388d6:	2a73      	cmp	r2, #115	; 0x73
   388d8:	d100      	bne.n	388dc <_printf_i+0x54>
   388da:	e088      	b.n	389ee <_printf_i+0x166>
   388dc:	d808      	bhi.n	388f0 <_printf_i+0x68>
   388de:	2a6f      	cmp	r2, #111	; 0x6f
   388e0:	d029      	beq.n	38936 <_printf_i+0xae>
   388e2:	2a70      	cmp	r2, #112	; 0x70
   388e4:	d1e7      	bne.n	388b6 <_printf_i+0x2e>
   388e6:	2220      	movs	r2, #32
   388e8:	6809      	ldr	r1, [r1, #0]
   388ea:	430a      	orrs	r2, r1
   388ec:	6022      	str	r2, [r4, #0]
   388ee:	e003      	b.n	388f8 <_printf_i+0x70>
   388f0:	2a75      	cmp	r2, #117	; 0x75
   388f2:	d020      	beq.n	38936 <_printf_i+0xae>
   388f4:	2a78      	cmp	r2, #120	; 0x78
   388f6:	d1de      	bne.n	388b6 <_printf_i+0x2e>
   388f8:	0022      	movs	r2, r4
   388fa:	2178      	movs	r1, #120	; 0x78
   388fc:	3245      	adds	r2, #69	; 0x45
   388fe:	7011      	strb	r1, [r2, #0]
   38900:	4a6c      	ldr	r2, [pc, #432]	; (38ab4 <_printf_i+0x22c>)
   38902:	e030      	b.n	38966 <_printf_i+0xde>
   38904:	000e      	movs	r6, r1
   38906:	681a      	ldr	r2, [r3, #0]
   38908:	3642      	adds	r6, #66	; 0x42
   3890a:	1d11      	adds	r1, r2, #4
   3890c:	6019      	str	r1, [r3, #0]
   3890e:	6813      	ldr	r3, [r2, #0]
   38910:	7033      	strb	r3, [r6, #0]
   38912:	2301      	movs	r3, #1
   38914:	e079      	b.n	38a0a <_printf_i+0x182>
   38916:	0649      	lsls	r1, r1, #25
   38918:	d5d9      	bpl.n	388ce <_printf_i+0x46>
   3891a:	1d11      	adds	r1, r2, #4
   3891c:	6019      	str	r1, [r3, #0]
   3891e:	2300      	movs	r3, #0
   38920:	5ed5      	ldrsh	r5, [r2, r3]
   38922:	2d00      	cmp	r5, #0
   38924:	da03      	bge.n	3892e <_printf_i+0xa6>
   38926:	232d      	movs	r3, #45	; 0x2d
   38928:	9a04      	ldr	r2, [sp, #16]
   3892a:	426d      	negs	r5, r5
   3892c:	7013      	strb	r3, [r2, #0]
   3892e:	4b62      	ldr	r3, [pc, #392]	; (38ab8 <_printf_i+0x230>)
   38930:	270a      	movs	r7, #10
   38932:	9303      	str	r3, [sp, #12]
   38934:	e02f      	b.n	38996 <_printf_i+0x10e>
   38936:	6820      	ldr	r0, [r4, #0]
   38938:	6819      	ldr	r1, [r3, #0]
   3893a:	0605      	lsls	r5, r0, #24
   3893c:	d503      	bpl.n	38946 <_printf_i+0xbe>
   3893e:	1d08      	adds	r0, r1, #4
   38940:	6018      	str	r0, [r3, #0]
   38942:	680d      	ldr	r5, [r1, #0]
   38944:	e005      	b.n	38952 <_printf_i+0xca>
   38946:	0640      	lsls	r0, r0, #25
   38948:	d5f9      	bpl.n	3893e <_printf_i+0xb6>
   3894a:	680d      	ldr	r5, [r1, #0]
   3894c:	1d08      	adds	r0, r1, #4
   3894e:	6018      	str	r0, [r3, #0]
   38950:	b2ad      	uxth	r5, r5
   38952:	4b59      	ldr	r3, [pc, #356]	; (38ab8 <_printf_i+0x230>)
   38954:	2708      	movs	r7, #8
   38956:	9303      	str	r3, [sp, #12]
   38958:	2a6f      	cmp	r2, #111	; 0x6f
   3895a:	d018      	beq.n	3898e <_printf_i+0x106>
   3895c:	270a      	movs	r7, #10
   3895e:	e016      	b.n	3898e <_printf_i+0x106>
   38960:	3145      	adds	r1, #69	; 0x45
   38962:	700a      	strb	r2, [r1, #0]
   38964:	4a54      	ldr	r2, [pc, #336]	; (38ab8 <_printf_i+0x230>)
   38966:	9203      	str	r2, [sp, #12]
   38968:	681a      	ldr	r2, [r3, #0]
   3896a:	6821      	ldr	r1, [r4, #0]
   3896c:	1d10      	adds	r0, r2, #4
   3896e:	6018      	str	r0, [r3, #0]
   38970:	6815      	ldr	r5, [r2, #0]
   38972:	0608      	lsls	r0, r1, #24
   38974:	d522      	bpl.n	389bc <_printf_i+0x134>
   38976:	07cb      	lsls	r3, r1, #31
   38978:	d502      	bpl.n	38980 <_printf_i+0xf8>
   3897a:	2320      	movs	r3, #32
   3897c:	4319      	orrs	r1, r3
   3897e:	6021      	str	r1, [r4, #0]
   38980:	2710      	movs	r7, #16
   38982:	2d00      	cmp	r5, #0
   38984:	d103      	bne.n	3898e <_printf_i+0x106>
   38986:	2320      	movs	r3, #32
   38988:	6822      	ldr	r2, [r4, #0]
   3898a:	439a      	bics	r2, r3
   3898c:	6022      	str	r2, [r4, #0]
   3898e:	0023      	movs	r3, r4
   38990:	2200      	movs	r2, #0
   38992:	3343      	adds	r3, #67	; 0x43
   38994:	701a      	strb	r2, [r3, #0]
   38996:	6863      	ldr	r3, [r4, #4]
   38998:	60a3      	str	r3, [r4, #8]
   3899a:	2b00      	cmp	r3, #0
   3899c:	db5c      	blt.n	38a58 <_printf_i+0x1d0>
   3899e:	2204      	movs	r2, #4
   389a0:	6821      	ldr	r1, [r4, #0]
   389a2:	4391      	bics	r1, r2
   389a4:	6021      	str	r1, [r4, #0]
   389a6:	2d00      	cmp	r5, #0
   389a8:	d158      	bne.n	38a5c <_printf_i+0x1d4>
   389aa:	9e04      	ldr	r6, [sp, #16]
   389ac:	2b00      	cmp	r3, #0
   389ae:	d064      	beq.n	38a7a <_printf_i+0x1f2>
   389b0:	0026      	movs	r6, r4
   389b2:	9b03      	ldr	r3, [sp, #12]
   389b4:	3642      	adds	r6, #66	; 0x42
   389b6:	781b      	ldrb	r3, [r3, #0]
   389b8:	7033      	strb	r3, [r6, #0]
   389ba:	e05e      	b.n	38a7a <_printf_i+0x1f2>
   389bc:	0648      	lsls	r0, r1, #25
   389be:	d5da      	bpl.n	38976 <_printf_i+0xee>
   389c0:	b2ad      	uxth	r5, r5
   389c2:	e7d8      	b.n	38976 <_printf_i+0xee>
   389c4:	6809      	ldr	r1, [r1, #0]
   389c6:	681a      	ldr	r2, [r3, #0]
   389c8:	0608      	lsls	r0, r1, #24
   389ca:	d505      	bpl.n	389d8 <_printf_i+0x150>
   389cc:	1d11      	adds	r1, r2, #4
   389ce:	6019      	str	r1, [r3, #0]
   389d0:	6813      	ldr	r3, [r2, #0]
   389d2:	6962      	ldr	r2, [r4, #20]
   389d4:	601a      	str	r2, [r3, #0]
   389d6:	e006      	b.n	389e6 <_printf_i+0x15e>
   389d8:	0649      	lsls	r1, r1, #25
   389da:	d5f7      	bpl.n	389cc <_printf_i+0x144>
   389dc:	1d11      	adds	r1, r2, #4
   389de:	6019      	str	r1, [r3, #0]
   389e0:	6813      	ldr	r3, [r2, #0]
   389e2:	8aa2      	ldrh	r2, [r4, #20]
   389e4:	801a      	strh	r2, [r3, #0]
   389e6:	2300      	movs	r3, #0
   389e8:	9e04      	ldr	r6, [sp, #16]
   389ea:	6123      	str	r3, [r4, #16]
   389ec:	e054      	b.n	38a98 <_printf_i+0x210>
   389ee:	681a      	ldr	r2, [r3, #0]
   389f0:	1d11      	adds	r1, r2, #4
   389f2:	6019      	str	r1, [r3, #0]
   389f4:	6816      	ldr	r6, [r2, #0]
   389f6:	2100      	movs	r1, #0
   389f8:	6862      	ldr	r2, [r4, #4]
   389fa:	0030      	movs	r0, r6
   389fc:	f000 f922 	bl	38c44 <memchr>
   38a00:	2800      	cmp	r0, #0
   38a02:	d001      	beq.n	38a08 <_printf_i+0x180>
   38a04:	1b80      	subs	r0, r0, r6
   38a06:	6060      	str	r0, [r4, #4]
   38a08:	6863      	ldr	r3, [r4, #4]
   38a0a:	6123      	str	r3, [r4, #16]
   38a0c:	2300      	movs	r3, #0
   38a0e:	9a04      	ldr	r2, [sp, #16]
   38a10:	7013      	strb	r3, [r2, #0]
   38a12:	e041      	b.n	38a98 <_printf_i+0x210>
   38a14:	6923      	ldr	r3, [r4, #16]
   38a16:	0032      	movs	r2, r6
   38a18:	9906      	ldr	r1, [sp, #24]
   38a1a:	9805      	ldr	r0, [sp, #20]
   38a1c:	9d07      	ldr	r5, [sp, #28]
   38a1e:	47a8      	blx	r5
   38a20:	1c43      	adds	r3, r0, #1
   38a22:	d043      	beq.n	38aac <_printf_i+0x224>
   38a24:	6823      	ldr	r3, [r4, #0]
   38a26:	2500      	movs	r5, #0
   38a28:	079b      	lsls	r3, r3, #30
   38a2a:	d40f      	bmi.n	38a4c <_printf_i+0x1c4>
   38a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38a2e:	68e0      	ldr	r0, [r4, #12]
   38a30:	4298      	cmp	r0, r3
   38a32:	da3d      	bge.n	38ab0 <_printf_i+0x228>
   38a34:	0018      	movs	r0, r3
   38a36:	e03b      	b.n	38ab0 <_printf_i+0x228>
   38a38:	0022      	movs	r2, r4
   38a3a:	2301      	movs	r3, #1
   38a3c:	3219      	adds	r2, #25
   38a3e:	9906      	ldr	r1, [sp, #24]
   38a40:	9805      	ldr	r0, [sp, #20]
   38a42:	9e07      	ldr	r6, [sp, #28]
   38a44:	47b0      	blx	r6
   38a46:	1c43      	adds	r3, r0, #1
   38a48:	d030      	beq.n	38aac <_printf_i+0x224>
   38a4a:	3501      	adds	r5, #1
   38a4c:	68e3      	ldr	r3, [r4, #12]
   38a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   38a50:	1a9b      	subs	r3, r3, r2
   38a52:	429d      	cmp	r5, r3
   38a54:	dbf0      	blt.n	38a38 <_printf_i+0x1b0>
   38a56:	e7e9      	b.n	38a2c <_printf_i+0x1a4>
   38a58:	2d00      	cmp	r5, #0
   38a5a:	d0a9      	beq.n	389b0 <_printf_i+0x128>
   38a5c:	9e04      	ldr	r6, [sp, #16]
   38a5e:	0028      	movs	r0, r5
   38a60:	0039      	movs	r1, r7
   38a62:	f7fc fd77 	bl	35554 <__aeabi_uidivmod>
   38a66:	9b03      	ldr	r3, [sp, #12]
   38a68:	3e01      	subs	r6, #1
   38a6a:	5c5b      	ldrb	r3, [r3, r1]
   38a6c:	0028      	movs	r0, r5
   38a6e:	7033      	strb	r3, [r6, #0]
   38a70:	0039      	movs	r1, r7
   38a72:	f7fc fce9 	bl	35448 <__udivsi3>
   38a76:	1e05      	subs	r5, r0, #0
   38a78:	d1f1      	bne.n	38a5e <_printf_i+0x1d6>
   38a7a:	2f08      	cmp	r7, #8
   38a7c:	d109      	bne.n	38a92 <_printf_i+0x20a>
   38a7e:	6823      	ldr	r3, [r4, #0]
   38a80:	07db      	lsls	r3, r3, #31
   38a82:	d506      	bpl.n	38a92 <_printf_i+0x20a>
   38a84:	6863      	ldr	r3, [r4, #4]
   38a86:	6922      	ldr	r2, [r4, #16]
   38a88:	4293      	cmp	r3, r2
   38a8a:	dc02      	bgt.n	38a92 <_printf_i+0x20a>
   38a8c:	2330      	movs	r3, #48	; 0x30
   38a8e:	3e01      	subs	r6, #1
   38a90:	7033      	strb	r3, [r6, #0]
   38a92:	9b04      	ldr	r3, [sp, #16]
   38a94:	1b9b      	subs	r3, r3, r6
   38a96:	6123      	str	r3, [r4, #16]
   38a98:	9b07      	ldr	r3, [sp, #28]
   38a9a:	aa09      	add	r2, sp, #36	; 0x24
   38a9c:	9300      	str	r3, [sp, #0]
   38a9e:	0021      	movs	r1, r4
   38aa0:	9b06      	ldr	r3, [sp, #24]
   38aa2:	9805      	ldr	r0, [sp, #20]
   38aa4:	f7ff fe82 	bl	387ac <_printf_common>
   38aa8:	1c43      	adds	r3, r0, #1
   38aaa:	d1b3      	bne.n	38a14 <_printf_i+0x18c>
   38aac:	2001      	movs	r0, #1
   38aae:	4240      	negs	r0, r0
   38ab0:	b00b      	add	sp, #44	; 0x2c
   38ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38ab4:	0003d3c4 	.word	0x0003d3c4
   38ab8:	0003d3b3 	.word	0x0003d3b3

00038abc <__sread>:
   38abc:	b570      	push	{r4, r5, r6, lr}
   38abe:	000c      	movs	r4, r1
   38ac0:	250e      	movs	r5, #14
   38ac2:	5f49      	ldrsh	r1, [r1, r5]
   38ac4:	f000 f8f0 	bl	38ca8 <_read_r>
   38ac8:	2800      	cmp	r0, #0
   38aca:	db03      	blt.n	38ad4 <__sread+0x18>
   38acc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   38ace:	181b      	adds	r3, r3, r0
   38ad0:	6563      	str	r3, [r4, #84]	; 0x54
   38ad2:	bd70      	pop	{r4, r5, r6, pc}
   38ad4:	89a3      	ldrh	r3, [r4, #12]
   38ad6:	4a02      	ldr	r2, [pc, #8]	; (38ae0 <__sread+0x24>)
   38ad8:	4013      	ands	r3, r2
   38ada:	81a3      	strh	r3, [r4, #12]
   38adc:	e7f9      	b.n	38ad2 <__sread+0x16>
   38ade:	46c0      	nop			; (mov r8, r8)
   38ae0:	ffffefff 	.word	0xffffefff

00038ae4 <__swrite>:
   38ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38ae6:	001f      	movs	r7, r3
   38ae8:	898b      	ldrh	r3, [r1, #12]
   38aea:	0005      	movs	r5, r0
   38aec:	000c      	movs	r4, r1
   38aee:	0016      	movs	r6, r2
   38af0:	05db      	lsls	r3, r3, #23
   38af2:	d505      	bpl.n	38b00 <__swrite+0x1c>
   38af4:	230e      	movs	r3, #14
   38af6:	5ec9      	ldrsh	r1, [r1, r3]
   38af8:	2200      	movs	r2, #0
   38afa:	2302      	movs	r3, #2
   38afc:	f000 f88e 	bl	38c1c <_lseek_r>
   38b00:	89a3      	ldrh	r3, [r4, #12]
   38b02:	4a05      	ldr	r2, [pc, #20]	; (38b18 <__swrite+0x34>)
   38b04:	0028      	movs	r0, r5
   38b06:	4013      	ands	r3, r2
   38b08:	81a3      	strh	r3, [r4, #12]
   38b0a:	0032      	movs	r2, r6
   38b0c:	230e      	movs	r3, #14
   38b0e:	5ee1      	ldrsh	r1, [r4, r3]
   38b10:	003b      	movs	r3, r7
   38b12:	f000 f839 	bl	38b88 <_write_r>
   38b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38b18:	ffffefff 	.word	0xffffefff

00038b1c <__sseek>:
   38b1c:	b570      	push	{r4, r5, r6, lr}
   38b1e:	000c      	movs	r4, r1
   38b20:	250e      	movs	r5, #14
   38b22:	5f49      	ldrsh	r1, [r1, r5]
   38b24:	f000 f87a 	bl	38c1c <_lseek_r>
   38b28:	89a3      	ldrh	r3, [r4, #12]
   38b2a:	1c42      	adds	r2, r0, #1
   38b2c:	d103      	bne.n	38b36 <__sseek+0x1a>
   38b2e:	4a05      	ldr	r2, [pc, #20]	; (38b44 <__sseek+0x28>)
   38b30:	4013      	ands	r3, r2
   38b32:	81a3      	strh	r3, [r4, #12]
   38b34:	bd70      	pop	{r4, r5, r6, pc}
   38b36:	2280      	movs	r2, #128	; 0x80
   38b38:	0152      	lsls	r2, r2, #5
   38b3a:	4313      	orrs	r3, r2
   38b3c:	81a3      	strh	r3, [r4, #12]
   38b3e:	6560      	str	r0, [r4, #84]	; 0x54
   38b40:	e7f8      	b.n	38b34 <__sseek+0x18>
   38b42:	46c0      	nop			; (mov r8, r8)
   38b44:	ffffefff 	.word	0xffffefff

00038b48 <__sclose>:
   38b48:	b510      	push	{r4, lr}
   38b4a:	230e      	movs	r3, #14
   38b4c:	5ec9      	ldrsh	r1, [r1, r3]
   38b4e:	f000 f82f 	bl	38bb0 <_close_r>
   38b52:	bd10      	pop	{r4, pc}

00038b54 <strchr>:
   38b54:	b2c9      	uxtb	r1, r1
   38b56:	7803      	ldrb	r3, [r0, #0]
   38b58:	2b00      	cmp	r3, #0
   38b5a:	d004      	beq.n	38b66 <strchr+0x12>
   38b5c:	4299      	cmp	r1, r3
   38b5e:	d100      	bne.n	38b62 <strchr+0xe>
   38b60:	4770      	bx	lr
   38b62:	3001      	adds	r0, #1
   38b64:	e7f7      	b.n	38b56 <strchr+0x2>
   38b66:	424b      	negs	r3, r1
   38b68:	4159      	adcs	r1, r3
   38b6a:	4249      	negs	r1, r1
   38b6c:	4008      	ands	r0, r1
   38b6e:	e7f7      	b.n	38b60 <strchr+0xc>

00038b70 <__ascii_wctomb>:
   38b70:	1e0b      	subs	r3, r1, #0
   38b72:	d004      	beq.n	38b7e <__ascii_wctomb+0xe>
   38b74:	2aff      	cmp	r2, #255	; 0xff
   38b76:	d904      	bls.n	38b82 <__ascii_wctomb+0x12>
   38b78:	238a      	movs	r3, #138	; 0x8a
   38b7a:	6003      	str	r3, [r0, #0]
   38b7c:	3b8b      	subs	r3, #139	; 0x8b
   38b7e:	0018      	movs	r0, r3
   38b80:	4770      	bx	lr
   38b82:	700a      	strb	r2, [r1, #0]
   38b84:	2301      	movs	r3, #1
   38b86:	e7fa      	b.n	38b7e <__ascii_wctomb+0xe>

00038b88 <_write_r>:
   38b88:	b570      	push	{r4, r5, r6, lr}
   38b8a:	0005      	movs	r5, r0
   38b8c:	0008      	movs	r0, r1
   38b8e:	0011      	movs	r1, r2
   38b90:	2200      	movs	r2, #0
   38b92:	4c06      	ldr	r4, [pc, #24]	; (38bac <_write_r+0x24>)
   38b94:	6022      	str	r2, [r4, #0]
   38b96:	001a      	movs	r2, r3
   38b98:	f7f4 ffc8 	bl	2db2c <_write>
   38b9c:	1c43      	adds	r3, r0, #1
   38b9e:	d103      	bne.n	38ba8 <_write_r+0x20>
   38ba0:	6823      	ldr	r3, [r4, #0]
   38ba2:	2b00      	cmp	r3, #0
   38ba4:	d000      	beq.n	38ba8 <_write_r+0x20>
   38ba6:	602b      	str	r3, [r5, #0]
   38ba8:	bd70      	pop	{r4, r5, r6, pc}
   38baa:	46c0      	nop			; (mov r8, r8)
   38bac:	20005c18 	.word	0x20005c18

00038bb0 <_close_r>:
   38bb0:	2300      	movs	r3, #0
   38bb2:	b570      	push	{r4, r5, r6, lr}
   38bb4:	4c06      	ldr	r4, [pc, #24]	; (38bd0 <_close_r+0x20>)
   38bb6:	0005      	movs	r5, r0
   38bb8:	0008      	movs	r0, r1
   38bba:	6023      	str	r3, [r4, #0]
   38bbc:	f7f5 f80a 	bl	2dbd4 <_close>
   38bc0:	1c43      	adds	r3, r0, #1
   38bc2:	d103      	bne.n	38bcc <_close_r+0x1c>
   38bc4:	6823      	ldr	r3, [r4, #0]
   38bc6:	2b00      	cmp	r3, #0
   38bc8:	d000      	beq.n	38bcc <_close_r+0x1c>
   38bca:	602b      	str	r3, [r5, #0]
   38bcc:	bd70      	pop	{r4, r5, r6, pc}
   38bce:	46c0      	nop			; (mov r8, r8)
   38bd0:	20005c18 	.word	0x20005c18

00038bd4 <_fstat_r>:
   38bd4:	2300      	movs	r3, #0
   38bd6:	b570      	push	{r4, r5, r6, lr}
   38bd8:	4c06      	ldr	r4, [pc, #24]	; (38bf4 <_fstat_r+0x20>)
   38bda:	0005      	movs	r5, r0
   38bdc:	0008      	movs	r0, r1
   38bde:	0011      	movs	r1, r2
   38be0:	6023      	str	r3, [r4, #0]
   38be2:	f7f5 f801 	bl	2dbe8 <_fstat>
   38be6:	1c43      	adds	r3, r0, #1
   38be8:	d103      	bne.n	38bf2 <_fstat_r+0x1e>
   38bea:	6823      	ldr	r3, [r4, #0]
   38bec:	2b00      	cmp	r3, #0
   38bee:	d000      	beq.n	38bf2 <_fstat_r+0x1e>
   38bf0:	602b      	str	r3, [r5, #0]
   38bf2:	bd70      	pop	{r4, r5, r6, pc}
   38bf4:	20005c18 	.word	0x20005c18

00038bf8 <_isatty_r>:
   38bf8:	2300      	movs	r3, #0
   38bfa:	b570      	push	{r4, r5, r6, lr}
   38bfc:	4c06      	ldr	r4, [pc, #24]	; (38c18 <_isatty_r+0x20>)
   38bfe:	0005      	movs	r5, r0
   38c00:	0008      	movs	r0, r1
   38c02:	6023      	str	r3, [r4, #0]
   38c04:	f7f4 fffe 	bl	2dc04 <_isatty>
   38c08:	1c43      	adds	r3, r0, #1
   38c0a:	d103      	bne.n	38c14 <_isatty_r+0x1c>
   38c0c:	6823      	ldr	r3, [r4, #0]
   38c0e:	2b00      	cmp	r3, #0
   38c10:	d000      	beq.n	38c14 <_isatty_r+0x1c>
   38c12:	602b      	str	r3, [r5, #0]
   38c14:	bd70      	pop	{r4, r5, r6, pc}
   38c16:	46c0      	nop			; (mov r8, r8)
   38c18:	20005c18 	.word	0x20005c18

00038c1c <_lseek_r>:
   38c1c:	b570      	push	{r4, r5, r6, lr}
   38c1e:	0005      	movs	r5, r0
   38c20:	0008      	movs	r0, r1
   38c22:	0011      	movs	r1, r2
   38c24:	2200      	movs	r2, #0
   38c26:	4c06      	ldr	r4, [pc, #24]	; (38c40 <_lseek_r+0x24>)
   38c28:	6022      	str	r2, [r4, #0]
   38c2a:	001a      	movs	r2, r3
   38c2c:	f7f4 fff3 	bl	2dc16 <_lseek>
   38c30:	1c43      	adds	r3, r0, #1
   38c32:	d103      	bne.n	38c3c <_lseek_r+0x20>
   38c34:	6823      	ldr	r3, [r4, #0]
   38c36:	2b00      	cmp	r3, #0
   38c38:	d000      	beq.n	38c3c <_lseek_r+0x20>
   38c3a:	602b      	str	r3, [r5, #0]
   38c3c:	bd70      	pop	{r4, r5, r6, pc}
   38c3e:	46c0      	nop			; (mov r8, r8)
   38c40:	20005c18 	.word	0x20005c18

00038c44 <memchr>:
   38c44:	b2c9      	uxtb	r1, r1
   38c46:	1882      	adds	r2, r0, r2
   38c48:	4290      	cmp	r0, r2
   38c4a:	d101      	bne.n	38c50 <memchr+0xc>
   38c4c:	2000      	movs	r0, #0
   38c4e:	4770      	bx	lr
   38c50:	7803      	ldrb	r3, [r0, #0]
   38c52:	428b      	cmp	r3, r1
   38c54:	d0fb      	beq.n	38c4e <memchr+0xa>
   38c56:	3001      	adds	r0, #1
   38c58:	e7f6      	b.n	38c48 <memchr+0x4>

00038c5a <_realloc_r>:
   38c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38c5c:	0007      	movs	r7, r0
   38c5e:	000d      	movs	r5, r1
   38c60:	0016      	movs	r6, r2
   38c62:	2900      	cmp	r1, #0
   38c64:	d105      	bne.n	38c72 <_realloc_r+0x18>
   38c66:	0011      	movs	r1, r2
   38c68:	f7fe fe9e 	bl	379a8 <_malloc_r>
   38c6c:	0004      	movs	r4, r0
   38c6e:	0020      	movs	r0, r4
   38c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38c72:	2a00      	cmp	r2, #0
   38c74:	d103      	bne.n	38c7e <_realloc_r+0x24>
   38c76:	f7fe fe4d 	bl	37914 <_free_r>
   38c7a:	0034      	movs	r4, r6
   38c7c:	e7f7      	b.n	38c6e <_realloc_r+0x14>
   38c7e:	f000 f827 	bl	38cd0 <_malloc_usable_size_r>
   38c82:	002c      	movs	r4, r5
   38c84:	4286      	cmp	r6, r0
   38c86:	d9f2      	bls.n	38c6e <_realloc_r+0x14>
   38c88:	0031      	movs	r1, r6
   38c8a:	0038      	movs	r0, r7
   38c8c:	f7fe fe8c 	bl	379a8 <_malloc_r>
   38c90:	1e04      	subs	r4, r0, #0
   38c92:	d0ec      	beq.n	38c6e <_realloc_r+0x14>
   38c94:	0029      	movs	r1, r5
   38c96:	0032      	movs	r2, r6
   38c98:	f7fe fe18 	bl	378cc <memcpy>
   38c9c:	0029      	movs	r1, r5
   38c9e:	0038      	movs	r0, r7
   38ca0:	f7fe fe38 	bl	37914 <_free_r>
   38ca4:	e7e3      	b.n	38c6e <_realloc_r+0x14>
	...

00038ca8 <_read_r>:
   38ca8:	b570      	push	{r4, r5, r6, lr}
   38caa:	0005      	movs	r5, r0
   38cac:	0008      	movs	r0, r1
   38cae:	0011      	movs	r1, r2
   38cb0:	2200      	movs	r2, #0
   38cb2:	4c06      	ldr	r4, [pc, #24]	; (38ccc <_read_r+0x24>)
   38cb4:	6022      	str	r2, [r4, #0]
   38cb6:	001a      	movs	r2, r3
   38cb8:	f7f4 ff0e 	bl	2dad8 <_read>
   38cbc:	1c43      	adds	r3, r0, #1
   38cbe:	d103      	bne.n	38cc8 <_read_r+0x20>
   38cc0:	6823      	ldr	r3, [r4, #0]
   38cc2:	2b00      	cmp	r3, #0
   38cc4:	d000      	beq.n	38cc8 <_read_r+0x20>
   38cc6:	602b      	str	r3, [r5, #0]
   38cc8:	bd70      	pop	{r4, r5, r6, pc}
   38cca:	46c0      	nop			; (mov r8, r8)
   38ccc:	20005c18 	.word	0x20005c18

00038cd0 <_malloc_usable_size_r>:
   38cd0:	1f0b      	subs	r3, r1, #4
   38cd2:	681b      	ldr	r3, [r3, #0]
   38cd4:	1f18      	subs	r0, r3, #4
   38cd6:	2b00      	cmp	r3, #0
   38cd8:	da01      	bge.n	38cde <_malloc_usable_size_r+0xe>
   38cda:	580b      	ldr	r3, [r1, r0]
   38cdc:	18c0      	adds	r0, r0, r3
   38cde:	4770      	bx	lr
   38ce0:	04020100 	.word	0x04020100
   38ce4:	00001008 	.word	0x00001008
   38ce8:	7fffffff 	.word	0x7fffffff
   38cec:	7fffffff 	.word	0x7fffffff
   38cf0:	7fffffff 	.word	0x7fffffff
   38cf4:	7fffffff 	.word	0x7fffffff
   38cf8:	7fffffff 	.word	0x7fffffff
   38cfc:	7eb851ea 	.word	0x7eb851ea
   38d00:	7fffffff 	.word	0x7fffffff
   38d04:	7ef9db21 	.word	0x7ef9db21
   38d08:	7fffffff 	.word	0x7fffffff
   38d0c:	7fffffff 	.word	0x7fffffff
   38d10:	7fbe76c7 	.word	0x7fbe76c7
   38d14:	7f5c28f4 	.word	0x7f5c28f4
   38d18:	7fffffff 	.word	0x7fffffff
   38d1c:	7eb851ea 	.word	0x7eb851ea
   38d20:	7fffffff 	.word	0x7fffffff
   38d24:	7fffffff 	.word	0x7fffffff
   38d28:	f4240000 	.word	0xf4240000
   38d2c:	7a120000 	.word	0x7a120000
   38d30:	3d090000 	.word	0x3d090000
   38d34:	1e848000 	.word	0x1e848000
   38d38:	0f3e58ff 	.word	0x0f3e58ff
   38d3c:	07938c54 	.word	0x07938c54
   38d40:	03d09000 	.word	0x03d09000
   38d44:	01ec3810 	.word	0x01ec3810
   38d48:	00f46290 	.word	0x00f46290
   38d4c:	007a1200 	.word	0x007a1200
   38d50:	003d0900 	.word	0x003d0900
   38d54:	001e8480 	.word	0x001e8480
   38d58:	000f4240 	.word	0x000f4240
   38d5c:	0007a120 	.word	0x0007a120
   38d60:	0003d090 	.word	0x0003d090
   38d64:	0001e848 	.word	0x0001e848

00038d68 <pcWelcomeMessage>:
   38d68:	65657246 534f5452 494c4320 540a0d2e     FreeRTOS CLI...T
   38d78:	20657079 706c6548 206f7420 77656976     ype Help to view
   38d88:	6c206120 20747369 7220666f 73696765      a list of regis
   38d98:	65726574 6f632064 6e616d6d 0d2e7364     tered commands..
   38da8:	0000000a 00756d69 3a756d69 74655220     ....imu.imu: Ret
   38db8:	736e7275 76206120 65756c61 6f726620     urns a value fro
   38dc8:	6874206d 4d492065 000a0d55 00007766     m the IMU...fw..
   38dd8:	203a7766 6e776f44 64616f6c 66206120     fw: Download a f
   38de8:	20656c69 20646e61 66726570 206d726f     ile and perform 
   38df8:	46206e61 70752057 65746164 00000a0d     an FW update....
   38e08:	65736572 00000074 65736572 52203a74     reset...reset: R
   38e18:	74657365 68742073 65642065 65636976     esets the device
   38e28:	00000a0d 0064656c 2064656c 79656b5b     ....led.led [key
   38e38:	5d6d756e 5b5d525b 425b5d47 53203a5d     num][R][G][B]: S
   38e48:	20737465 20656874 65766967 454c206e     ets the given LE
   38e58:	6f742044 65687420 76696720 52206e65     D to the given R
   38e68:	422c472c 6c617620 2e736575 00000a0d     ,G,B values.....
   38e78:	62746567 6f747475 0000006e 62746567     getbutton...getb
   38e88:	6f747475 50203a6e 65636f72 73657373     utton: Processes
   38e98:	646e6120 69727020 2073746e 20656874      and prints the 
   38ea8:	4f464946 74756220 206e6f74 66667562     FIFO button buff
   38eb8:	66207265 206d6f72 20656874 73656573     er from the sees
   38ec8:	0d2e7761 0000000a 64746567 61747369     aw......getdista
   38ed8:	0065636e 64746567 61747369 3a65636e     nce.getdistance:
   38ee8:	74655220 736e7275 65687420 73696420      Returns the dis
   38ef8:	636e6174 72662065 74206d6f 55206568     tance from the U
   38f08:	30312d53 65532030 726f736e 000a0d2e     S-100 Sensor....
   38f18:	656d6167 00000000 656d6167 6553203a     game....game: Se
   38f28:	2073646e 6d6d7564 61672079 6420656d     nds dummy game d
   38f38:	0d617461 0000000a 00633269 3a633269     ata.....i2c.i2c:
   38f48:	61635320 4920736e 62204332 0a0d7375      Scans I2C bus..
   38f58:	00000000 74616577 00726568 74616577     ....weather.weat
   38f68:	3a726568 74655220 736e7275 76206120     her: Returns a v
   38f78:	65756c61 6f726620 6874206d 6d422065     alue from the Bm
   38f88:	30383665 00000a0d 00736c63 3a736c63     e680....cls.cls:
   38f98:	656c4320 20737261 20656874 6d726574      Clears the term
   38fa8:	6c616e69 72637320 0d6e6565 0000000a     inal screen.....
   38fb8:	6c756f43 6f6e2064 6c612074 61636f6c     Could not alloca
   38fc8:	73206574 70616d65 65726f68 00000a0d     te semaphore....
   38fd8:	00000a0d 0000616f 325b6325 003e0d4b     ....oa..%c[2K.>.
   38fe8:	00082008 65636341 6172656c 6e6f6974     . ..Acceleration
   38ff8:	676d5b20 20583a5d 59096425 09642520      [mg]:X %d.Y %d.
   39008:	6425205a 00000a0d 64206f4e 20617461     Z %d....No data 
   39018:	64616572 53202179 69646e65 6420676e     ready! Sending d
   39028:	796d6d75 74616420 0a0d2061 00000000     ummy data ......
   39038:	325b6325 0000004a 6f727245 75642072     %c[2J...Error du
   39048:	676e6972 74657320 44454c20 00000d0a     ring set LED....
   39058:	20746553 2044454c 63637573 0a737365     Set LED success.
   39068:	0000000d 74747542 23206e6f 69206425     ....Button #%d i
   39078:	65722073 7361656c 0a0d6465 00000000     s released......
   39088:	74747542 23206e6f 69206425 72702073     Button #%d is pr
   39098:	65737365 000a0d64 736e6553 4520726f     essed...Sensor E
   390a8:	726f7272 21642520 00000a0d 74736944     rror %d!....Dist
   390b8:	65636e61 6425203a 0d6d6d20 0000000a     ance: %d mm.....
   390c8:	74736944 65636e61 74614420 514d2061     Distance Data MQ
   390d8:	50205454 0d74736f 0000000a 6d6d7544     TT Post.....Dumm
   390e8:	61472079 4420656d 20617461 5454514d     y Game Data MQTT
   390f8:	736f5020 000a0d74 31202030 20322020      Post...0  1  2 
   39108:	20203320 35202034 20362020 20203720      3  4  5  6  7  
   39118:	39202038 20612020 20206220 64202063     8  9  a  b  c  d
   39128:	20652020 0a0d6620 00000000 78323025       e  f......%02x
   39138:	0000203a 78323025 00000020 25203a54     : ..%02x ...T: %
   39148:	65642064 202c4367 25203a50 50682064     d degC, P: %d hP
   39158:	48202c61 20642520 48722525 00000020     a, H %d %%rH ...
   39168:	3a47202c 20642520 736d686f 00000020     , G: %d ohms ...
   39178:	36656d62 64203038 20617461 6f727265     bme680 data erro
   39188:	0a0d2072 00000000                       r ......

00039190 <xImuGetCommand>:
   39190:	00038dac 00038db0 00014d49 00000000     ........IM......

000391a0 <xOTAUCommand>:
   391a0:	00038dd4 00038dd8 00014ef5 00000000     .........N......

000391b0 <xResetCommand>:
   391b0:	00038e08 00038e10 00014f15 00000000     .........O......

000391c0 <xNeotrellisTurnLEDCommand>:
   391c0:	00038e2c 00038e30 00014f35 00000004     ,...0...5O......

000391d0 <xNeotrellisProcessButtonCommand>:
   391d0:	00038e78 00038e84 0001508d 00000000     x........P......

000391e0 <xDistanceSensorGetDistance>:
   391e0:	00038ed0 00038edc 00015191 00000000     .........Q......

000391f0 <xSendDummyGameData>:
   391f0:	00038f18 00038f20 00015235 00000000     .... ...5R......

00039200 <xI2cScan>:
   39200:	00038f40 00038f44 000152d1 00000000     @...D....R......

00039210 <xBme680GetCommand>:
   39210:	00038f5c 00038f64 000153f9 00000000     \...d....S......

00039220 <xClearScreen>:
   39220:	00038f90 00038f94 00014ead 00000000     .........N......
   39230:	35455345 2d203631 6e6f4320 6c6f7274     ESE516 - Control
   39240:	696e4920 6f432074 0a0d6564 00000000      Init Code......
   39250:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   39260:	4320676e 72746e6f 44206c6f 20617461     ng Control Data 
   39270:	75657571 0d217365 0000000a 746e6f43     queues!.....Cont
   39280:	206c6f72 65726854 203a6461 736e6f43     rol Thread: Cons
   39290:	64656d75 6d616720 61702065 74656b63     umed game packet
   392a0:	000a0d21 656d6147 65764f20 20212072     !...Game Over ! 
   392b0:	756f5920 736f6c20 54202e65 20657079      You lose. Type 
   392c0:	65736572 6f742074 73657220 74726174     reset to restart
   392d0:	65687420 6d616720 0a0d2e65 00000000      the game.......
   392e0:	746e6f43 206c6f72 65726854 203a6461     Control Thread: 
   392f0:	6c756f43 6f6e2064 65732074 6720646e     Could not send g
   39300:	20656d61 6b636170 0d217465 0000000a     ame packet!.....

00039310 <msgBaseGetHWID>:
   39310:	00000100                                ....

00039314 <msgNeopixelPin>:
   39314:	0003010e                                ....

00039318 <msgNeopixelSpeed>:
   39318:	0001020e                                ....

0003931c <msgNeopixelBufLength>:
   3931c:	3000030e                                ...0

00039320 <msgKeypadEnableInt>:
   39320:	00010210                                ....

00039324 <msgKeypadGetCount>:
   39324:	00000410 6f727245 6e692072 61697469     ....Error initia
   39334:	697a696c 5320676e 61736565 722f2177     lizing Seesaw!/r
   39344:	00006e2f 6f727245 2f722f72 0000006e     /n..Error/r/n...
   39354:	6e756f46 65532064 77617365 2f722f21     Found Seesaw!/r/
   39364:	0000006e 6c756f43 6f6e2064 72772074     n...Could not wr
   39374:	20657469 73656553 70207761 2f216e69     ite Seesaw pin!/
   39384:	006e2f72 6c756f43 6f6e2064 65732074     r/n.Could not se
   39394:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
   393a4:	7073206c 21646565 6e2f722f 00000000     l speed!/r/n....
   393b4:	6c756f43 6f6e2064 65732074 65732074     Could not set se
   393c4:	77617365 6f654e20 65786970 756e206c     esaw Neopixel nu
   393d4:	7265626d 20666f20 69766564 2f736563     mber of devices/
   393e4:	006e2f72 6f727245 65722072 6e696461     r/n.Error readin
   393f4:	65532067 77617365 756f6320 2173746e     g Seesaw counts!
   39404:	6e2f722f 00000000 00001010 0000050e     /r/n............
   39414:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   39424:	657a696c 79654b20 21646170 6e2f722f     lize Keypad!/r/n
   39434:	00000000 54204955 206b7361 72617453     ....UI Task Star
   39444:	21646574 00000000 25203a54 65642064     ted!....T: %d de
   39454:	202c4367 25203a50 50682064 48202c61     gC, P: %d hPa, H
   39464:	20642520 48722525 00000020 3a47202c      %d %%rH ..., G:
   39474:	20642520 736d686f 00000020 00000a0d      %d ohms .......
   39484:	36656d62 64203038 20617461 6f727265     bme680 data erro
   39494:	0a0d2072 00000000 74747542 50206e6f     r ......Button P
   394a4:	73736572 203a6465 0a0d6425 00000000     ressed: %d......
   394b4:	72726f43 20746365 74747542 203a6e6f     Correct Button: 
   394c4:	0a0d6425 00000000                       %d......

000394cc <main_mqtt_broker>:
   394cc:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   394dc:	0000006d 64333025 00000000 72617473     m...%03d....star
   394ec:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   394fc:	726f7473 20656761 20746f6e 64616572     storage not read
   3950c:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   3951c:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   3952c:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   3953c:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   3954c:	203a6461 75716572 20747365 73207369     ad: request is s
   3955c:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   3956c:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   3957c:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   3958c:	726c6120 79646165 000a0d2e 72617473      already....star
   3959c:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   395ac:	20676e69 50545448 71657220 74736575     ing HTTP request
   395bc:	0d2e2e2e 0000000a 70747468 2f2f3a73     ........https://
   395cc:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   395dc:	7e2f7564 68656863 65542f6f 2e427473     du/~cheho/TestB.
   395ec:	006e6962 726f7473 69665f65 705f656c     bin.store_file_p
   395fc:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   3960c:	0a0d2e61 00000000 726f7473 69665f65     a.......store_fi
   3961c:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   3962c:	656d616e 20736920 61766e69 2e64696c     name is invalid.
   3963c:	776f4420 616f6c6e 61632064 6c65636e      Download cancel
   3964c:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   3965c:	705f656c 656b6361 63203a74 74616572     le_packet: creat
   3966c:	20676e69 656c6966 73255b20 000a0d5d     ing file [%s]...
   3967c:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   3968c:	66203a74 20656c69 61657263 6e6f6974     t: file creation
   3969c:	72726520 2021726f 3a746572 0a0d6425      error! ret:%d..
   396ac:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   396bc:	656b6361 66203a74 20656c69 74697277     acket: file writ
   396cc:	72652065 2c726f72 776f6420 616f6c6e     e error, downloa
   396dc:	61632064 6c65636e 0d2e6465 0000000a     d canceled......
   396ec:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   396fc:	72203a74 69656365 5b646576 5d756c25     t: received[%lu]
   3970c:	6966202c 7320656c 5b657a69 5d756c25     , file size[%lu]
   3971c:	00000a0d 726f7473 69665f65 705f656c     ....store_file_p
   3972c:	656b6361 66203a74 20656c69 6e776f64     acket: file down
   3973c:	64616f6c 73206465 65636375 75667373     loaded successfu
   3974c:	2e796c6c 00000a0d 70747468 696c635f     lly.....http_cli
   3975c:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   3976c:	63205054 6e65696c 6f732074 74656b63     TP client socket
   3977c:	6e6f6320 7463656e 0d2e6465 0000000a      connected......
   3978c:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   3979c:	6b636162 6572203a 73657571 6f632074     back: request co
   397ac:	656c706d 2e646574 00000a0d 70747468     mpleted.....http
   397bc:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   397cc:	6572203a 76696563 72206465 6f707365     : received respo
   397dc:	2065736e 64207525 20617461 657a6973     nse %u data size
   397ec:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   397fc:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   3980c:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   3981c:	253a6e6f 000a0d64 6f736572 5f65766c     on:%d...resolve_
   3982c:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   3983c:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   3984c:	0a0d0a0d 00000000 69666977 3a62635f     ........wifi_cb:
   3985c:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   3986c:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
   3987c:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   3988c:	5443454e 0a0d4445 00000000 34333231     NECTED......1234
   3989c:	38373635 00000000 6f685069 0000656e     5678....iPhone..
   398ac:	69666977 3a62635f 20504920 72646461     wifi_cb: IP addr
   398bc:	20737365 25207369 75252e75 2e75252e     ess is %u.%u.%u.
   398cc:	0a0d7525 00000000 6f727245 6f632072     %u......Error co
   398dc:	63656e6e 676e6974 206f7420 5454514d     nnecting to MQTT
   398ec:	6f724220 2172656b 00000a0d 74696e69      Broker!....init
   398fc:	6f74735f 65676172 6c70203a 65736165     _storage: please
   3990c:	756c7020 6e612067 2f445320 20434d4d      plug an SD/MMC 
   3991c:	64726163 206e6920 746f6c73 0d2e2e2e     card in slot....
   3992c:	0000000a 74696e69 6f74735f 65676172     ....init_storage
   3993c:	4453203a 72614320 6e692064 6c617473     : SD Card instal
   3994c:	6166206c 64656c69 000a0d2e 74696e69     l failed....init
   3995c:	6f74735f 65676172 7274203a 6e752079     _storage: try un
   3996c:	67756c70 646e6120 2d657220 67756c70     plug and re-plug
   3997c:	65687420 72616320 0a0d2e64 00000000      the card.......
   3998c:	74696e69 6f74735f 65676172 6f6d203a     init_storage: mo
   3999c:	69746e75 5320676e 61632044 2e2e6472     unting SD card..
   399ac:	000a0d2e 74696e69 6f74735f 65676172     ....init_storage
   399bc:	4453203a 72616320 6f6d2064 20746e75     : SD card mount 
   399cc:	6c696166 20216465 73657228 29642520     failed! (res %d)
   399dc:	00000a0d 74696e69 6f74735f 65676172     ....init_storage
   399ec:	4453203a 72616320 6f6d2064 20746e75     : SD card mount 
   399fc:	0d2e4b4f 0000000a 666e6f63 72756769     OK......configur
   39a0c:	74685f65 635f7074 6e65696c 48203a74     e_http_client: H
   39a1c:	20505454 65696c63 6920746e 6974696e     TTP client initi
   39a2c:	7a696c61 6f697461 6166206e 64656c69     alization failed
   39a3c:	72282021 25207365 0a0d2964 00000000     ! (res %d)......
   39a4c:	25200a0d 00732a2e 28626772 00000000     .. %.*s.rgb(....
   39a5c:	47520a0d 64252042 20642520 0a0d6425     ..RGB %d %d %d..
   39a6c:	00000000 6167227b 3a22656d 0000005b     ....{"game":[...
   39a7c:	61470a0d 6d20656d 61737365 72206567     ..Game message r
   39a8c:	69656365 21646576 00000a0d 732a2e25     eceived!....%.*s
   39a9c:	00000000 61500a0d 64657372 6d6f4320     ......Parsed Com
   39aac:	646e616d 0000203a 002c6425 65530a0d     mand: ..%d,...Se
   39abc:	7020746e 2079616c 63206f74 72746e6f     nt play to contr
   39acc:	0d216c6f 0000000a 61470a0d 6d20656d     ol!.......Game m
   39adc:	61737365 72206567 69656365 20646576     essage received 
   39aec:	20747562 20746f6e 65646e75 6f747372     but not understo
   39afc:	0d21646f 0000000a 4d490a0d 6f742055     od!.......IMU to
   39b0c:	20636970 65636572 64657669 000a0d21     pic received!...
   39b1c:	69440a0d 6e617473 74206563 6369706f     ..Distance topic
   39b2c:	63657220 65766965 0a0d2164 00000000      received!......
   39b3c:	203e3e20 00000000 4c5f3150 455f4445      >> ....P1_LED_E
   39b4c:	31354553 31545f36 00000036 736c6166     SE516_T16...fals
   39b5c:	00000065 65757274 00000000 6f430a0d     e...true......Co
   39b6c:	63656e6e 676e6974 206f7420 6b6f7242     nnecting to Brok
   39b7c:	2e2e7265 0000002e 4a737242 6f564e42     er......BrsJBNVo
   39b8c:	376c4251 00000000 79747472 6a65626f     QBl7....rttyobej
   39b9c:	00000000 5454514d 72452020 20726f72     ....MQTT  Error 
   39bac:	4f4e202d 6f432054 63656e6e 20646574     - NOT Connected 
   39bbc:	62206f74 656b6f72 000a0d72 5454514d     to broker...MQTT
   39bcc:	6e6f4320 7463656e 74206465 7262206f      Connected to br
   39bdc:	72656b6f 00000a0d 6e6e6f43 20746365     oker....Connect 
   39bec:	6c696166 206f7420 76726573 25287265     fail to server(%
   39bfc:	20212973 72746572 74692079 74756120     s)! retry it aut
   39c0c:	74616d6f 6c616369 0d2e796c 0000000a     omatically......
   39c1c:	475f3150 5f454d41 35455345 545f3631     P1_GAME_ESE516_T
   39c2c:	316d6165 00000036 495f3150 455f554d     eam16...P1_IMU_E
   39c3c:	31354553 31545f36 00000036 5454514d     SE516_T16...MQTT
   39c4c:	6e6f4320 7463656e 0a0d6465 00000000      Connected......
   39c5c:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
   39c6c:	20656e69 72756f79 63636120 21737365     ine your access!
   39c7c:	72726520 6320726f 2065646f 0a0d6425      error code %d..
   39c8c:	00000000 5454514d 73696420 6e6e6f63     ....MQTT disconn
   39c9c:	65746365 000a0d64 5454514d 696e6920     ected...MQTT ini
   39cac:	6c616974 74617a69 206e6f69 6c696166     tialization fail
   39cbc:	202e6465 6f727245 6f632072 69206564     ed. Error code i
   39ccc:	25282073 0a0d2964 00000000 5454514d     s (%d)......MQTT
   39cdc:	67657220 65747369 61632072 61626c6c      register callba
   39cec:	66206b63 656c6961 45202e64 726f7272     ck failed. Error
   39cfc:	646f6320 73692065 64252820 000a0d29      code is (%d)...
   39d0c:	2264227b 74227b3a 22706d65 7d64253a     {"d":{"temp":%d}
   39d1c:	0000007d 4941465b 72205d4c 25207365     }...[FAIL] res %
   39d2c:	000a0d64 67616c46 78742e41 64612074     d...FlagA.txt ad
   39d3c:	21646564 00000a0d 6c463a30 2e416761     ded!....0:FlagA.
   39d4c:	00747874 6e6e6f43 65746365 6f742064     txt.Connected to
   39d5c:	54514d20 72422054 72656b6f 000a0d21      MQTT Broker!...
   39d6c:	6d69227b 3a227875 202c6425 756d6922     {"imux":%d, "imu
   39d7c:	203a2279 202c6425 756d6922 203a227a     y": %d, "imuz": 
   39d8c:	007d6425 00006425 00007d5d 00000a0d     %d}.%d..]}......
   39d9c:	475f3250 5f454d41 35455345 545f3631     P2_GAME_ESE516_T
   39dac:	316d6165 00000036 4f525245 6e492052     eam16...ERROR In
   39dbc:	61697469 697a696c 5720676e 20696669     itializing Wifi 
   39dcc:	61746144 65757120 21736575 00000a0d     Data queues!....
   39ddc:	35455345 2d203631 66695720 6e492069     ESE516 - Wifi In
   39dec:	43207469 0d65646f 0000000a 6e69616d     it Code.....main
   39dfc:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   39e0c:	6c6c6163 72726520 2021726f 73657228     call error! (res
   39e1c:	29642520 00000a0d 6e69616d 6f63203a      %d)....main: co
   39e2c:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   39e3c:	20504120 2e2e7325 000a0d2e 545f3150      AP %s......P1_T
   39e4c:	45504d45 55544152 455f4552 31354553     EMPERATURE_ESE51
   39e5c:	31545f36 00000036 5454514d 6e657320     6_T16...MQTT sen
   39e6c:	73252064 00000a0d 00018c2c 00018c38     d %s....,...8...
   39e7c:	00018c4a 00018ca0 00018cc0 706c6568     J...........help
   39e8c:	00000000 65680a0d 0d3a706c 694c200a     ......help:.. Li
   39e9c:	20737473 206c6c61 20656874 69676572     sts all the regi
   39eac:	72657473 63206465 616d6d6f 0d73646e     stered commands.
   39ebc:	000a0d0a 6f636e49 63657272 6f632074     ....Incorrect co
   39ecc:	6e616d6d 61702064 656d6172 28726574     mmand parameter(
   39edc:	202e2973 746e4520 22207265 706c6568     s).  Enter "help
   39eec:	6f742022 65697620 20612077 7473696c     " to view a list
   39efc:	20666f20 69617661 6c62616c 6f632065      of available co
   39f0c:	6e616d6d 0d2e7364 000a0d0a 6d6d6f43     mmands......Comm
   39f1c:	20646e61 20746f6e 6f636572 73696e67     and not recognis
   39f2c:	202e6465 746e4520 27207265 706c6568     ed.  Enter 'help
   39f3c:	6f742027 65697620 20612077 7473696c     ' to view a list
   39f4c:	20666f20 69617661 6c62616c 6f632065      of available co
   39f5c:	6e616d6d 0d2e7364 000a0d0a              mmands......

00039f68 <xHelpCommand>:
   39f68:	00039e88 00039e90 0001a9b1 00000000     ................
   39f78:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   39f88:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   39f98:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   39fa8:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   39fb8:	78656e55 74636570 61206465 6d756772     Unexpected argum
   39fc8:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   39fd8:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   39fe8:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   39ff8:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   3a008:	2073656c 6e69202d 61657263 54206573     les - increase T
   3a018:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   3a028:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   3a038:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   3a048:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   3a058:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   3a068:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   3a078:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   3a088:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   3a098:	6e616820 73656c64 69202d20 6572636e      handles - incre
   3a0a8:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   3a0b8:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   3a0c8:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   3a0d8:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   3a0e8:	6e616820 73656c64 69202d20 6572636e      handles - incre
   3a0f8:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   3a108:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   3a118:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   3a128:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   3a138:	73656c64 69202d20 6572636e 20657361     dles - increase 
   3a148:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   3a158:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   3a168:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   3a178:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   3a188:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   3a198:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   3a1a8:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   3a1b8:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   3a1c8:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   3a1d8:	202d2073 72636e69 65736165 43525420     s - increase TRC
   3a1e8:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   3a1f8:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   3a208:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   3a218:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   3a228:	646e6168 2073656c 6e69202d 61657263     handles - increa
   3a238:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   3a248:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   3a258:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   3a268:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   3a278:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   3a288:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   3a298:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   3a2a8:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   3a2b8:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   3a2c8:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   3a2d8:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   3a2e8:	63746365 7373616c 00000021 0001b0d6     ectclass!.......
   3a2f8:	0001b0ce 0001b0d2 0001b0c6 0001b0ca     ................
   3a308:	0001b0da 0001b0de 0001b0e2 0001b0e6     ................
   3a318:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   3a328:	64726f63 6e207265 6920746f 6974696e     corder not initi
   3a338:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   3a348:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   3a358:	00216461 61747328 70757472 00000029     ad!.(startup)...
   3a368:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   3a378:	64726f63 6e207265 6920746f 6974696e     corder not initi
   3a388:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   3a398:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   3a3a8:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   3a3b8:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   3a3c8:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   3a3d8:	61762064 2065756c 20726f66 646e6168     d value for hand
   3a3e8:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   3a3f8:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   3a408:	7265706f 73656974 616e203a 3d20656d     operties: name =
   3a418:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   3a428:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   3a438:	64726f63 62207265 21797375 65655320     corder busy! See
   3a448:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   3a458:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   3a468:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   3a478:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   3a488:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   3a498:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   3a4a8:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   3a4b8:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   3a4c8:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   3a4d8:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   3a4e8:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   3a4f8:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   3a508:	6f636572 72656472 73756220 53202179     recorder busy! S
   3a518:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   3a528:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   3a538:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   3a548:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   3a558:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   3a568:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   3a578:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   3a588:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   3a598:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   3a5a8:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   3a5b8:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   3a5c8:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   3a5d8:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   3a5e8:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   3a5f8:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   3a608:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   3a618:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   3a628:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   3a638:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   3a648:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   3a658:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   3a668:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   3a678:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   3a688:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   3a698:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   3a6a8:	72657473 69727453 203a676e 6562616c     sterString: labe
   3a6b8:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   3a6c8:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a6d8:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   3a6e8:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   3a6f8:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   3a708:	72656472 73756220 202d2079 68676968     rder busy - high
   3a718:	69727020 7469726f 53492079 73752052      priority ISR us
   3a728:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   3a738:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a748:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   3a758:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   3a768:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   3a778:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a788:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a798:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   3a7a8:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a7b8:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   3a7c8:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   3a7d8:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   3a7e8:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3a7f8:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a808:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a818:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   3a828:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   3a838:	00000072 6f636552 72656472 73756220     r...Recorder bus
   3a848:	202d2079 68676968 69727020 7469726f     y - high priorit
   3a858:	53492079 73752052 20676e69 63737973     y ISR using sysc
   3a868:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   3a878:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a888:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a898:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   3a8a8:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   3a8b8:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a8c8:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a8d8:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   3a8e8:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   3a8f8:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   3a908:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a918:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a928:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   3a938:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   3a948:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   3a958:	72656472 73756220 202d2079 68676968     rder busy - high
   3a968:	69727020 7469726f 53492079 73752052      priority ISR us
   3a978:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   3a988:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a998:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   3a9a8:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   3a9b8:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   3a9c8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a9d8:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   3a9e8:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   3a9f8:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   3aa08:	76206469 65756c61 726f6620 74766520     id value for evt
   3aa18:	65646f63 00000000 6f636552 72656472     code....Recorder
   3aa28:	73756220 202d2079 68676968 69727020      busy - high pri
   3aa38:	7469726f 53492079 73752052 20676e69     ority ISR using 
   3aa48:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   3aa58:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3aa68:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   3aa78:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   3aa88:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   3aa98:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   3aaa8:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   3aab8:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   3aac8:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   3aad8:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   3aae8:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3aaf8:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3ab08:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   3ab18:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   3ab28:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3ab38:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   3ab48:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   3ab58:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   3ab68:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   3ab78:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   3ab88:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   3ab98:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3aba8:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   3abb8:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   3abc8:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   3abd8:	6c617620 66206575 6820726f 6c646e61      value for handl
   3abe8:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   3abf8:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   3ac08:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   3ac18:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   3ac28:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   3ac38:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ac48:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   3ac58:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   3ac68:	76206469 65756c61 726f6620 00646920     id value for id.
   3ac78:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ac88:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   3ac98:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   3aca8:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   3acb8:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3acc8:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3acd8:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   3ace8:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   3acf8:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   3ad08:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3ad18:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   3ad28:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   3ad38:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   3ad48:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ad58:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   3ad68:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   3ad78:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   3ad88:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3ad98:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   3ada8:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   3adb8:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   3adc8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3add8:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   3ade8:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   3adf8:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   3ae08:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3ae18:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   3ae28:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   3ae38:	76206469 65756c61 726f6620 6e616820     id value for han
   3ae48:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   3ae58:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   3ae68:	69206f74 7865646e 74756f20 65646973     to index outside
   3ae78:	65766520 6220746e 65666675 00002172      event buffer!..
   3ae88:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   3ae98:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   3aea8:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3aeb8:	6a626f20 63746365 7373616c 00000000      objectclass....
   3aec8:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   3aed8:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   3aee8:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3aef8:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   3af08:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   3af18:	2070756b 68746977 766e6920 64696c61     kup with invalid
   3af28:	6a626f20 20746365 646e6168 6f20656c      object handle o
   3af38:	626f2072 7463656a 616c6320 00217373     r object class!.
   3af48:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3af58:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   3af68:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   3af78:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   3af88:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   3af98:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   3afa8:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   3afb8:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   3afc8:	626f2072 7463656a 73616c63 00000073     r objectclass...
   3afd8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3afe8:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   3aff8:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   3b008:	756c6176 6f662065 61682072 656c646e     value for handle
   3b018:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   3b028:	20656572 65726f6d 6e616820 73656c64     ree more handles
   3b038:	61687420 6c61206e 61636f6c 21646574      than allocated!
   3b048:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3b058:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   3b068:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   3b078:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   3b088:	656a626f 63207463 7373616c 206e6920     object class in 
   3b098:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   3b0a8:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   3b0b8:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   3b0c8:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   3b0d8:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   3b0e8:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   3b0f8:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   3b108:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   3b118:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   3b128:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   3b138:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   3b148:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   3b158:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   3b168:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3b178:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   3b188:	696c6176 61762064 2065756c 20726f66     valid value for 
   3b198:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   3b1a8:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   3b1b8:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   3b1c8:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   3b1d8:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   3b1e8:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   3b1f8:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   3b208:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3b218:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   3b228:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   3b238:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   3b248:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   3b258:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   3b268:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   3b278:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   3b288:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   3b298:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   3b2a8:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   3b2b8:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   3b2c8:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   3b2d8:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   3b2e8:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   3b2f8:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3b308:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   3b318:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   3b328:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   3b338:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   3b348:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   3b358:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   3b368:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   3b378:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   3b388:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   3b398:	00000000 20726d54 00637653 00020178     ....Tmr Svc.x...
   3b3a8:	00020178 00020178 00020206 000201d0     x...x...........
   3b3b8:	000201fa 00020178 00020178 00020206     ....x...x.......
   3b3c8:	000201d0                                ....

0003b3cc <sd_mmc_trans_units>:
   3b3cc:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0003b3e8 <sd_trans_multipliers>:
   3b3e8:	00000000 0000000a 0000000c 0000000d     ................
   3b3f8:	0000000f 00000014 00000019 0000001e     ................
   3b408:	00000023 00000028 0000002d 00000032     #...(...-...2...
   3b418:	00000037 0000003c 00000046 00000050     7...<...F...P...

0003b428 <mmc_trans_multipliers>:
   3b428:	00000000 0000000a 0000000c 0000000d     ................
   3b438:	0000000f 00000014 0000001a 0000001e     ................
   3b448:	00000023 00000028 0000002d 00000034     #...(...-...4...
   3b458:	00000037 0000003c 00000046 00000050     7...<...F...P...
   3b468:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3b478:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   3b488:	6320746c 000a646d 0000000d              lt cmd......

0003b494 <__FUNCTION__.17099>:
   3b494:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   3b4a4:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   3b4b4:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   3b4c4:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   3b4d4:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   3b4e4:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   3b4f4:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   3b504:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   3b514:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   3b524:	66696828 64612029 73657264 75622073     (hif) address bu
   3b534:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   3b544:	70757272 20646574 6b636170 53207465     rrupted packet S
   3b554:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   3b564:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   3b574:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   3b584:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   3b594:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   3b5a4:	63207465 626c6c61 206b6361 6e207369     et callback is n
   3b5b4:	7220746f 73696765 65726574 00000a64     ot registered...
   3b5c4:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   3b5d4:	20746f6e 69676572 72657473 000a6465     not registered..
   3b5e4:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   3b5f4:	6e207369 7220746f 73696765 65726574     is not registere
   3b604:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   3b614:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   3b624:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   3b634:	696c6176 72672064 2070756f 000a4449     valid group ID..
   3b644:	66696828 6f682029 61207473 64207070     (hif) host app d
   3b654:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   3b664:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   3b674:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   3b684:	66696828 61462029 2065736c 65746e69     (hif) False inte
   3b694:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   3b6a4:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   3b6b4:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   3b6c4:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   3b6d4:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   3b6e4:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   3b6f4:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   3b704:	696c6176 72612064 656d7567 000a746e     valid argument..
   3b714:	20505041 75716552 65747365 69532064     APP Requested Si
   3b724:	6920657a 616c2073 72656772 61687420     ze is larger tha
   3b734:	6874206e 65722065 65766963 75622064     n the recived bu
   3b744:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   3b754:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   3b764:	65747365 64412064 73657264 65622073     ested Address be
   3b774:	646e6f79 65687420 63657220 64657669     yond the recived
   3b784:	66756220 20726566 72646461 20737365      buffer address 
   3b794:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   3b7a4:	6425203f 0000000a 000243ac 0002437c     ? %d.....C..|C..
   3b7b4:	00024374 0002438c 00024384 000243a4     tC...C...C...C..
   3b7c4:	00024394 0002439c                       .C...C..

0003b7cc <__FUNCTION__.17967>:
   3b7cc:	5f666968 646e6573 00000000              hif_send....

0003b7d8 <__FUNCTION__.17977>:
   3b7d8:	5f666968 00727369                       hif_isr.

0003b7e0 <__FUNCTION__.17986>:
   3b7e0:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0003b7f0 <__FUNCTION__.17998>:
   3b7f0:	5f666968 65636572 00657669              hif_receive.

0003b7fc <__FUNCTION__.18014>:
   3b7fc:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   3b80c:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   3b81c:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   3b82c:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   3b83c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3b84c:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   3b85c:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   3b86c:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   3b87c:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   3b88c:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   3b89c:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   3b8ac:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   3b8bc:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   3b8cc:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   3b8dc:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   3b8ec:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   3b8fc:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   3b90c:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   3b91c:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   3b92c:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   3b93c:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   3b94c:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   3b95c:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   3b96c:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   3b97c:	73747365 72657020 61637320 6c73206e     ests per scan sl
   3b98c:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   3b99c:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   3b9ac:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   3b9bc:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   3b9cc:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   3b9dc:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   3b9ec:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   3b9fc:	6e694d20 69726420 20726576 20726576      Min driver ver 
   3ba0c:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   3ba1c:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   3ba2c:	0000000a 303a3430 38353a38 00000000     ....04:08:58....
   3ba3c:	2079614d 32203731 00323230 76697244     May 17 2022.Driv
   3ba4c:	62207265 746c6975 20746120 25097325     er built at %s.%
   3ba5c:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   3ba6c:	7277616d 65562065 6f697372 00000a6e     mawre Version...
   3ba7c:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   3ba8c:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
   3ba9c:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
   3baac:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
   3babc:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
   3bacc:	2079656b 65646e69 64252078 0000000a     key index %d....
   3badc:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   3baec:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
   3bafc:	63657272 53502074 656b204b 656c2079     rrect PSK key le
   3bb0c:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
   3bb1c:	65732064 79742063 000a6570 5f53505f     d sec type.._PS_
   3bb2c:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   3bb3c:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
   3bb4c:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   3bb5c:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   3bb6c:	2f315f48 31312f36 00000a20 45574f50     H_1/6/11 ...POWE
   3bb7c:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   3bb8c:	2044494c 414d4f44 4e204e49 0a454d41     LID DOMAIN NAME.
   3bb9c:	00000000 474e5250 66754220 20726566     ....PRNG Buffer 
   3bbac:	65637865 64656465 78616d20 6d756d69     exceeded maximum
   3bbbc:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
   3bbcc:	66754220 0a726566 00000000               Buffer.....

0003bbd8 <__FUNCTION__.17949>:
   3bbd8:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0003bbe4 <__FUNCTION__.17978>:
   3bbe4:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0003bbf4 <__FUNCTION__.18009>:
   3bbf4:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   3bc04:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   3bc14:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   3bc24:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   3bc34:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   3bc44:	2070756b 20656874 70696863 0000000a     kup the chip....
   3bc54:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   3bc64:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   3bc74:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   3bc84:	696e692d 6c616974 0a657a69 00000000     -initialize.....

0003bc94 <__FUNCTION__.17806>:
   3bc94:	70696863 6b61775f 00000065              chip_wake...

0003bca0 <__FUNCTION__.17855>:
   3bca0:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   3bcb0:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   3bcc0:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   3bcd0:	6e69206c 62207469 000a7375 0000000d     l init bus......
   3bce0:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   3bcf0:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   3bd00:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   3bd10:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   3bd20:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   3bd30:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   3bd40:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   3bd50:	69642068 6c626173 61662065 000a6c69     h disable fail..
   3bd60:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   3bd70:	696e6920 75622074 00000a73               init bus...

0003bd7c <__FUNCTION__.17853>:
   3bd7c:	645f6d6e 695f7672 0074696e              nm_drv_init.

0003bd88 <__FUNCTION__.17860>:
   3bd88:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0003bd98 <crc7_syndrome_table>:
   3bd98:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   3bda8:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   3bdb8:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   3bdc8:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   3bdd8:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   3bde8:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   3bdf8:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   3be08:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   3be18:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   3be28:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   3be38:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   3be48:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   3be58:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   3be68:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   3be78:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   3be88:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   3be98:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3bea8:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   3beb8:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   3bec8:	73756220 72726520 2e2e726f 00000a2e      bus error......
   3bed8:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3bee8:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   3bef8:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3bf08:	656c6961 61642064 72206174 6f707365     ailed data respo
   3bf18:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   3bf28:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   3bf38:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   3bf48:	72206573 2c646165 73756220 72726520     se read, bus err
   3bf58:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   3bf68:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   3bf78:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   3bf88:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   3bf98:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   3bfa8:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   3bfb8:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   3bfc8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3bfd8:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   3bfe8:	70736572 65736e6f 61747320 28206574     response state (
   3bff8:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   3c008:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   3c018:	20646165 70736572 65736e6f 30252820     ead response (%0
   3c028:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   3c038:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   3c048:	6877206e 72206e65 69646165 6420676e     n when reading d
   3c058:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   3c068:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   3c078:	6877206e 72206e65 69646165 6320676e     n when reading c
   3c088:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   3c098:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   3c0a8:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   3c0b8:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   3c0c8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   3c0d8:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   3c0e8:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   3c0f8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c108:	656c6961 61642064 72206174 6f707365     ailed data respo
   3c118:	2065736e 64616572 7562202c 72652073     nse read, bus er
   3c128:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   3c138:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   3c148:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   3c158:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   3c168:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   3c178:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   3c188:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   3c198:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   3c1a8:	61642064 62206174 6b636f6c 69727720     d data block wri
   3c1b8:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   3c1c8:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c1d8:	656c6961 61642064 62206174 6b636f6c     ailed data block
   3c1e8:	63726320 69727720 202c6574 20737562      crc write, bus 
   3c1f8:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   3c208:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   3c218:	77202c64 65746972 67657220 30252820     d, write reg (%0
   3c228:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   3c238:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   3c248:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   3c258:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   3c268:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   3c278:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c288:	656c6961 6c622064 206b636f 61746164     ailed block data
   3c298:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   3c2a8:	6e612074 65722064 20797274 25206425     t and retry %d %
   3c2b8:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   3c2c8:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   3c2d8:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   3c2e8:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   3c2f8:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   3c308:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   3c318:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   3c328:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   3c338:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3c348:	6e726574 72206c61 20646165 746f7270     ternal read prot
   3c358:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   3c368:	6572202c 69727974 7720676e 20687469     , retyring with 
   3c378:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   3c388:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3c398:	6e726574 72206c61 20646165 746f7270     ternal read prot
   3c3a8:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   3c3b8:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3c3c8:	6e726574 77206c61 65746972 6f727020     ternal write pro
   3c3d8:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   3c3e8:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   3c3f8:	20646d63 64616572 69686320 64692070     cmd read chip id
   3c408:	0a2e2e2e 00000000 00025fd4 00025fd4     ........._..._..
   3c418:	00026064 00025f28 00025f6e 00025f90     d`..(_..n_..._..
   3c428:	00026016 00026016 000260d0 00025efc     .`...`...`...^..
   3c438:	0002612a 0002612a 0002612a 0002612a     *a..*a..*a..*a..
   3c448:	00025fb2 00026534 00026534 000265bc     ._..4e..4e...e..
   3c458:	00026498 000264da 000264f8 00026572     .d...d...d..re..
   3c468:	00026572 0002661e 00026470 0002666e     re...f..pd..nf..
   3c478:	0002666e 0002666e 0002666e 00026516     nf..nf..nf...e..

0003c488 <__FUNCTION__.17128>:
   3c488:	5f697073 00646d63                       spi_cmd.

0003c490 <__FUNCTION__.17135>:
   3c490:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0003c4a0 <__FUNCTION__.17144>:
   3c4a0:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0003c4ac <__FUNCTION__.17177>:
   3c4ac:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   3c4bc:	00000000                                ....

0003c4c0 <__FUNCTION__.17223>:
   3c4c0:	5f697073 61746164 6972775f 00006574     spi_data_write..

0003c4d0 <__FUNCTION__.17235>:
   3c4d0:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0003c4e0 <__FUNCTION__.17246>:
   3c4e0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0003c4f0 <__FUNCTION__.17258>:
   3c4f0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0003c500 <__FUNCTION__.17269>:
   3c500:	735f6d6e 725f6970 00646165              nm_spi_read.

0003c50c <__FUNCTION__.17290>:
   3c50c:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   3c51c:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   3c52c:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   3c53c:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   3c54c:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   3c55c:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   3c56c:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   3c57c:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   3c58c:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   3c59c:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   3c5ac:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   3c5bc:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   3c5cc:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   3c5dc:	22302074 00000000                       t 0"....

0003c5e4 <lun_desc>:
   3c5e4:	00021b9d 00021bf5 00021c41 00021c8d     ........A.......
   3c5f4:	00021cbd 00021d41 00021dd1 0003c5cc     ....A...........
   3c604:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   3c614:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   3c624:	0002bf52 0002bfcc 0002bfcc 0002bf70     R...........p...
   3c634:	0002bf6a 0002bf76 0002bf58 0002bf7c     j...v...X...|...
   3c644:	0002bfb2 0002c1b4 0002c204 0002c204     ................
   3c654:	0002c200 0002c1a6 0002c1c6 0002c196     ................
   3c664:	0002c1d8 0002c1ea 0002c252 0002c280     ........R.......
   3c674:	0002c280 0002c27c 0002c24c 0002c258     ....|...L...X...
   3c684:	0002c246 0002c25e 0002c264              F...^...d...

0003c690 <tcc_modules>:
   3c690:	42002000 42002400 42002800              . .B.$.B.(.B

0003c69c <_tcc_gclk_ids>:
   3c69c:	001b1a1a                                ....

0003c6a0 <_tcc_apbcmasks>:
   3c6a0:	00000100 00000200 00000400              ............

0003c6ac <_tcc_maxs>:
   3c6ac:	00ffffff 00ffffff 0000ffff              ............

0003c6b8 <_tcc_cc_nums>:
   3c6b8:	00020204                                ....

0003c6bc <_tcc_ow_nums>:
   3c6bc:	00020408                                ....

0003c6c0 <_tcc_intflag>:
   3c6c0:	00000001 00000002 00000004 00000008     ................
   3c6d0:	00001000 00002000 00004000 00008000     ..... ...@......
   3c6e0:	00010000 00020000 00040000 00080000     ................

0003c6f0 <LfnOfs>:
   3c6f0:	07050301 12100e09 1c181614 0000001e     ................
   3c700:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   3c710:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   3c720:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   3c730:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   3c740:	20205441 00202020                       AT     .

0003c748 <excvt.4558>:
   3c748:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   3c758:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   3c768:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   3c778:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   3c788:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   3c798:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   3c7a8:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   3c7b8:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0003c7c8 <Tbl>:
   3c7c8:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   3c7d8:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   3c7e8:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   3c7f8:	00d600ff 00f800dc 00d800a3 019200d7     ................
   3c808:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   3c818:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   3c828:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   3c838:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   3c848:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   3c858:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   3c868:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   3c878:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   3c888:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   3c898:	00da00de 00d900db 00dd00fd 00b400af     ................
   3c8a8:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   3c8b8:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0003c8c8 <tbl_lower.4308>:
   3c8c8:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   3c8d8:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   3c8e8:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   3c8f8:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   3c908:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   3c918:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   3c928:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   3c938:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   3c948:	01050103 01090107 010d010b 0111010f     ................
   3c958:	01150113 01190117 011d011b 0121011f     ..............!.
   3c968:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   3c978:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   3c988:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   3c998:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   3c9a8:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   3c9b8:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   3c9c8:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   3c9d8:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   3c9e8:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   3c9f8:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   3ca08:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   3ca18:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   3ca28:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   3ca38:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   3ca48:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   3ca58:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   3ca68:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   3ca78:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   3ca88:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   3ca98:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0003caa8 <tbl_upper.4309>:
   3caa8:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   3cab8:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   3cac8:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   3cad8:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   3cae8:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   3caf8:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   3cb08:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   3cb18:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   3cb28:	01040102 01080106 010c010a 0110010e     ................
   3cb38:	01140112 01180116 011c011a 0120011e     .............. .
   3cb48:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   3cb58:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   3cb68:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   3cb78:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   3cb88:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   3cb98:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   3cba8:	03940393 03960395 03980397 039a0399     ................
   3cbb8:	039c039b 039e039d 03a0039f 03a303a1     ................
   3cbc8:	03a503a4 03a703a6 03a903a8 041003aa     ................
   3cbd8:	04120411 04140413 04160415 04180417     ................
   3cbe8:	041a0419 041c041b 041e041d 0420041f     .............. .
   3cbf8:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   3cc08:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   3cc18:	04030402 04050404 04070406 04090408     ................
   3cc28:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   3cc38:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   3cc48:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   3cc58:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   3cc68:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   3cc78:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   3cc88:	000315be 000315be 000315be 0003144c     ............L...
   3cc98:	000315be 00031536 000315be 000315be     ....6...........
   3cca8:	000315be 000315be 000315be 000315be     ................
   3ccb8:	000315be 000315b0 4354514d 00000000     ........MQTC....
   3ccc8:	00000004 00000000 00000000 00000000     ................
   3ccd8:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3cd18:	4354514d 00000000 00000004 00000000     MQTC............
	...
   3cd30:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3cd70:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   3cd80:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   3cd90:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   3cda0:	20544547 00000000 54534f50 00000020     GET ....POST ...
   3cdb0:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   3cdc0:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   3cdd0:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   3cde0:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   3cdf0:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   3ce00:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   3ce10:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   3ce20:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   3ce30:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   3ce40:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   3ce50:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   3ce60:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   3ce70:	676e654c 203a6874 00000000 33323130     Length: ....0123
   3ce80:	37363534 62613938 66656463 6e617254     456789abcdefTran
   3ce90:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   3cea0:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   3ceb0:	50545448 0000002f 00000d31 000336b2     HTTP/...1....6..
   3cec0:	000336ac 000336a6 000336a0 000336b8     .6...6...6...6..
   3ced0:	0003369a 000336b8 00033694 0003368e     .6...6...6...6..
   3cee0:	000336b8 00033688 00033688 00033682     .6...6...6...6..
   3cef0:	0003367c 00033676 42002000 42002400     |6..v6... .B.$.B
   3cf00:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   3cf10:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   3cf20:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   3cf30:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   3cf40:	6f727245 6e692072 61697469 697a696c     Error initializi
   3cf50:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   3cf60:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   3cf70:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   3cf80:	6f727245 6e692072 61697469 697a696c     Error initializi
   3cf90:	5320676e 61736565 0a0d2177 00000000     ng Seesaw!......
   3cfa0:	74696e49 696c6169 2064657a 73656553     Initialized Sees
   3cfb0:	0d217761 0000000a 6e6e6143 6620746f     aw!.....Cannot f
   3cfc0:	20646e69 21554d49 00000a0d 20554d49     ind IMU!....IMU 
   3cfd0:	6e756f66 0a0d2164 00000000 20554d49     found!......IMU 
   3cfe0:	74696e69 696c6169 2164657a 00000a0d     initialized!....
   3cff0:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   3d000:	657a696c 554d4920 00000a0d 70616548     lize IMU....Heap
   3d010:	66656220 2065726f 72617473 676e6974      before starting
   3d020:	73617420 203a736b 0a0d6425 00000000      tasks: %d......
   3d030:	5f494c43 4b534154 00000000 3a525245     CLI_TASK....ERR:
   3d040:	494c4320 73617420 6f63206b 20646c75      CLI task could 
   3d050:	20746f6e 69206562 6974696e 7a696c61     not be initializ
   3d060:	0d216465 0000000a 70616548 74666120     ed!.....Heap aft
   3d070:	73207265 74726174 20676e69 3a494c43     er starting CLI:
   3d080:	0d642520 0000000a 49464957 5341545f      %d.....WIFI_TAS
   3d090:	0000004b 3a525245 46495720 61742049     K...ERR: WIFI ta
   3d0a0:	63206b73 646c756f 746f6e20 20656220     sk could not be 
   3d0b0:	74696e69 696c6169 2164657a 00000a0d     initialized!....
   3d0c0:	70616548 74666120 73207265 74726174     Heap after start
   3d0d0:	20676e69 49464957 6425203a 00000a0d     ing WIFI: %d....
   3d0e0:	54204955 006b7361 3a525245 20495520     UI Task.ERR: UI 
   3d0f0:	6b736174 756f6320 6e20646c 6220746f     task could not b
   3d100:	6e692065 61697469 657a696c 0a0d2164     e initialized!..
   3d110:	00000000 70616548 74666120 73207265     ....Heap after s
   3d120:	74726174 20676e69 54204955 3a6b7361     tarting UI Task:
   3d130:	0d642520 0000000a 746e6f43 206c6f72      %d.....Control 
   3d140:	6b736154 00000000 3a525245 6e6f4320     Task....ERR: Con
   3d150:	6c6f7274 73617420 6f63206b 20646c75     trol task could 
   3d160:	20746f6e 69206562 6974696e 7a696c61     not be initializ
   3d170:	0d216465 0000000a 70616548 74666120     ed!.....Heap aft
   3d180:	73207265 74726174 20676e69 746e6f43     er starting Cont
   3d190:	206c6f72 6b736154 6425203a 00000a0d     rol Task: %d....
   3d1a0:	6f727245 6e6f2072 6d656d20 2079726f     Error on memory 
   3d1b0:	6f6c6c61 69746163 6f206e6f 5246206e     allocation on FR
   3d1c0:	54524545 0d21534f 0000000a 6f727245     EERTOS!.....Erro
   3d1d0:	6e6f2072 61747320 6f206b63 66726576     r on stack overf
   3d1e0:	20776f6c 46206e6f 52454552 21534f54     low on FREERTOS!
   3d1f0:	00000a0d 00035994 00035964 00035976     .....Y..dY..vY..
   3d200:	000358b8 00035976 0003595a 00035976     .X..vY..ZY..vY..
   3d210:	000358b8 00035964 00035964 0003595a     .X..dY..dY..ZY..
   3d220:	000358b8 000358c0 000358c0 000358c0     .X...X...X...X..
   3d230:	0003597c 00035964 00035964 00035938     |Y..dY..dY..8Y..
   3d240:	00035a1c 00035938 0003595a 00035938     .Z..8Y..ZY..8Y..
   3d250:	00035a1c 00035964 00035964 0003595a     .Z..dY..dY..ZY..
   3d260:	00035a1c 000358c0 000358c0 000358c0     .Z...X...X...X..
   3d270:	00035a26 00035bc4 00035b14 00035b14     &Z...[...[...[..
   3d280:	00035b12 00035bb6 00035bb6 00035bac     .[...[...[...[..
   3d290:	00035b12 00035bb6 00035bac 00035bb6     .[...[...[...[..
   3d2a0:	00035b12 00035bbc 00035bbc 00035bbc     .[...[...[...[..
   3d2b0:	00035c4c 000365d0 000365b2 0003656c     L\...e...e..le..
   3d2c0:	0003648a 0003656c 000365a4 0003656c     .d..le...e..le..
   3d2d0:	0003648a 000365b2 000365b2 000365a4     .d...e...e...e..
   3d2e0:	0003648a 00036482 00036482 00036482     .d...d...d...d..
   3d2f0:	000367e8 00036c30 00036af0 00036af0     .g..0l...j...j..
   3d300:	00036aec 00036c08 00036c08 00036bfa     .j...l...l...k..
   3d310:	00036aec 00036c08 00036bfa 00036c08     .j...l...k...l..
   3d320:	00036aec 00036c10 00036c10 00036c10     .j...l...l...l..
   3d330:	00036e14                                .n..

0003d334 <_global_impure_ptr>:
   3d334:	20000128                                (.. 

0003d338 <__sf_fake_stderr>:
	...

0003d358 <__sf_fake_stdin>:
	...

0003d378 <__sf_fake_stdout>:
	...
   3d398:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   3d3a8:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   3d3b8:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   3d3c8:	37363534 62613938 66656463 20200000              456789abcdef.

0003d3d5 <_ctype_>:
   3d3d5:	20202000 20202020 28282020 20282828     .         ((((( 
   3d3e5:	20202020 20202020 20202020 20202020                     
   3d3f5:	10108820 10101010 10101010 10101010      ...............
   3d405:	04040410 04040404 10040404 10101010     ................
   3d415:	41411010 41414141 01010101 01010101     ..AAAAAA........
   3d425:	01010101 01010101 01010101 10101010     ................
   3d435:	42421010 42424242 02020202 02020202     ..BBBBBB........
   3d445:	02020202 02020202 02020202 10101010     ................
   3d455:	00000020 00000000 00000000 00000000      ...............
	...

0003d4d8 <_init>:
   3d4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d4da:	46c0      	nop			; (mov r8, r8)
   3d4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3d4de:	bc08      	pop	{r3}
   3d4e0:	469e      	mov	lr, r3
   3d4e2:	4770      	bx	lr

0003d4e4 <__init_array_start>:
   3d4e4:	000120dd 	.word	0x000120dd

0003d4e8 <_fini>:
   3d4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d4ea:	46c0      	nop			; (mov r8, r8)
   3d4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3d4ee:	bc08      	pop	{r3}
   3d4f0:	469e      	mov	lr, r3
   3d4f2:	4770      	bx	lr

0003d4f4 <__fini_array_start>:
   3d4f4:	000120b5 	.word	0x000120b5
